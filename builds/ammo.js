
  // This is ammo.js, a port of Bullet Physics to JavaScript. zlib licensed.
  
var Ammo = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  
  return (
function(Ammo) {
  Ammo = Ammo || {};

/**
 * @license
 * Copyright 2010 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Ammo !== 'undefined' ? Ammo : {};

// Set up the promise that indicates the Module is initialized
var readyPromiseResolve, readyPromiseReject;
Module['ready'] = new Promise(function(resolve, reject) {
  readyPromiseResolve = resolve;
  readyPromiseReject = reject;
});

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_main')) {
        Object.defineProperty(Module['ready'], '_main', { configurable: true, get: function() { abort('You are getting _main on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_main', { configurable: true, set: function() { abort('You are setting _main on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_malloc')) {
        Object.defineProperty(Module['ready'], '_malloc', { configurable: true, get: function() { abort('You are getting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_malloc', { configurable: true, set: function() { abort('You are setting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_free')) {
        Object.defineProperty(Module['ready'], '_free', { configurable: true, get: function() { abort('You are getting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_free', { configurable: true, set: function() { abort('You are setting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___data_end')) {
        Object.defineProperty(Module['ready'], '___data_end', { configurable: true, get: function() { abort('You are getting ___data_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___data_end', { configurable: true, set: function() { abort('You are setting ___data_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___wasm_call_ctors')) {
        Object.defineProperty(Module['ready'], '___wasm_call_ctors', { configurable: true, get: function() { abort('You are getting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___wasm_call_ctors', { configurable: true, set: function() { abort('You are setting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '___errno_location')) {
        Object.defineProperty(Module['ready'], '___errno_location', { configurable: true, get: function() { abort('You are getting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '___errno_location', { configurable: true, set: function() { abort('You are setting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '__ZSt18uncaught_exceptionv')) {
        Object.defineProperty(Module['ready'], '__ZSt18uncaught_exceptionv', { configurable: true, get: function() { abort('You are getting __ZSt18uncaught_exceptionv on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '__ZSt18uncaught_exceptionv', { configurable: true, set: function() { abort('You are setting __ZSt18uncaught_exceptionv on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], '_setThrew')) {
        Object.defineProperty(Module['ready'], '_setThrew', { configurable: true, get: function() { abort('You are getting _setThrew on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], '_setThrew', { configurable: true, set: function() { abort('You are setting _setThrew on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

      if (!Object.getOwnPropertyDescriptor(Module['ready'], 'onRuntimeInitialized')) {
        Object.defineProperty(Module['ready'], 'onRuntimeInitialized', { configurable: true, get: function() { abort('You are getting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
        Object.defineProperty(Module['ready'], 'onRuntimeInitialized', { configurable: true, set: function() { abort('You are setting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js') } });
      }
    

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;


// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE, this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  if (!(typeof window === 'object' || typeof importScripts === 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {


/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary') } });
if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle') } });
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';




/**
 * @license
 * Copyright 2017 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready

/** @suppress{duplicate} */
var stackSave;
/** @suppress{duplicate} */
var stackRestore;
/** @suppress{duplicate} */
var stackAlloc;

stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  assert(end <= HEAP8.length, 'failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}





/**
 * @license
 * Copyright 2020 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */


// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;

  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < table.length; i++) {
      var item = table.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.


  var ret;
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    ret = freeTableIndexes.pop();
  } else {
    ret = table.length;
    // Grow the table
    try {
      table.grow(1);
    } catch (err) {
      if (!(err instanceof RangeError)) {
        throw err;
      }
      throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
    }
  }

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunctionWasm(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

function removeFunction(index) {
  removeFunctionWasm(index);
}



var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


/**
 * @license
 * Copyright 2020 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */




function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

/** @param {Array=} args */
function dynCall(sig, ptr, args) {
  if (args && args.length) {
    // j (64-bit integer) must be passed in as two numbers [low 32, high 32].
    assert(args.length === sig.substring(1).replace(/j/g, '--').length);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;



/**
 * @license
 * Copyright 2010 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime') } });


/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.


// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{const} */
var
WebAssembly = {
  Memory: /** @constructor */ function(opts) {
    return {
      buffer: new ArrayBuffer(opts['initial'] * 65536),
      grow: function(amount) {
        var oldBuffer = this.buffer;
        var ret = __growWasmMemory(amount);
        assert(this.buffer !== oldBuffer); // the call should have updated us
        return ret;
      }
    };
  },

  Table: function(opts) {
    var ret = new Array(opts['initial']);
    ret.grow = function(by) {
      if (ret.length >= 685 + 20) {
        abort('Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.')
      }
      ret.push(null);
    };
    ret.set = function(i, func) {
      ret[i] = func;
    };
    ret.get = function(i) {
      return ret[i];
    };
    return ret;
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
    return {};
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    var exports = (
// EMSCRIPTEN_START_ASM
function instantiate(asmLibraryArg, wasmMemory, wasmTable) {


  var scratchBuffer = new ArrayBuffer(8);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[0] = value;
  }
      
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[0];
  }
      
function asmFunc(global, env, buffer) {
 var memory = env.memory;
 var FUNCTION_TABLE = wasmTable;
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var gettimeofday = env.gettimeofday;
 var abort = env.abort;
 var emscripten_resize_heap = env.emscripten_resize_heap;
 var emscripten_memcpy_big = env.emscripten_memcpy_big;
 var __handle_stack_overflow = env.__handle_stack_overflow;
 var global$0 = 5268608;
 var global$1 = 25564;
 var global$2 = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
function btConvexHullInternal__shiftFace_28btConvexHullInternal__Face__2c_20float_2c_20btAlignedObjectArray_btConvexHullInternal__Vertex___29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = Math_fround(0), $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = Math_fround(0), $83 = Math_fround(0), $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = Math_fround(0), $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = Math_fround(0), $95 = 0, $96 = 0, $97 = 0, $98 = Math_fround(0), $99 = Math_fround(0), $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = Math_fround(0), $110 = Math_fround(0), $111 = Math_fround(0), $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = Math_fround(0), $128 = Math_fround(0), $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 $25 = global$0 - 128 | 0;
 $4 = $25;
 if ($25 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $12 = HEAP32[$0 + 108 >> 2];
 $10 = ($25 + 48 | 0) + ($12 << 2) | 0;
 $7 = HEAP32[$1 + 28 >> 2];
 HEAPF32[$10 >> 2] = $7 | 0;
 $16 = HEAP32[$0 + 112 >> 2];
 $9 = ($25 + 48 | 0) + ($16 << 2) | 0;
 $11 = HEAP32[$1 + 32 >> 2];
 HEAPF32[$9 >> 2] = $11 | 0;
 $20 = HEAP32[$0 + 104 >> 2];
 $53 = ($25 + 48 | 0) + ($20 << 2) | 0;
 $14 = HEAP32[$1 + 36 >> 2];
 HEAPF32[$53 >> 2] = $14 | 0;
 $55 = HEAPF32[$0 + 4 >> 2];
 $98 = HEAPF32[$0 + 8 >> 2];
 $99 = HEAPF32[$0 >> 2];
 $82 = HEAPF32[$25 + 52 >> 2];
 $83 = HEAPF32[$25 + 56 >> 2];
 $89 = HEAPF32[$25 + 48 >> 2];
 $13 = HEAP32[$1 + 44 >> 2];
 HEAPF32[$10 >> 2] = $13 | 0;
 $8 = HEAP32[$1 + 48 >> 2];
 HEAPF32[$9 >> 2] = $8 | 0;
 $9 = HEAP32[$1 + 52 >> 2];
 HEAPF32[$53 >> 2] = $9 | 0;
 HEAP32[$25 + 124 >> 2] = 0;
 $89 = Math_fround($89 * $99);
 $94 = Math_fround($55 * HEAPF32[$25 + 52 >> 2]);
 $109 = Math_fround($82 * $55);
 $110 = Math_fround($99 * HEAPF32[$25 + 48 >> 2]);
 $82 = Math_fround(Math_fround($89 * $94) - Math_fround($109 * $110));
 $127 = $82;
 $128 = Math_fround($82 * $82);
 $111 = Math_fround($98 * HEAPF32[$25 + 56 >> 2]);
 $83 = Math_fround($83 * $98);
 $82 = Math_fround(Math_fround($109 * $111) - Math_fround($83 * $94));
 $83 = Math_fround(Math_fround($83 * $110) - Math_fround($89 * $111));
 $89 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround($128 + Math_fround(Math_fround($82 * $82) + Math_fround($83 * $83))))));
 $2 = Math_fround(-$2);
 $94 = Math_fround(Math_fround($127 * $89) * $2);
 HEAPF32[$25 + 120 >> 2] = $94;
 $83 = Math_fround(Math_fround($83 * $89) * $2);
 HEAPF32[$25 + 116 >> 2] = $83;
 $82 = Math_fround(Math_fround($82 * $89) * $2);
 HEAPF32[$25 + 112 >> 2] = $82;
 if ($99 != Math_fround(0)) {
  HEAPF32[$25 + 112 >> 2] = $82 / $99;
 }
 if ($55 != Math_fround(0)) {
  HEAPF32[$25 + 116 >> 2] = $83 / $55;
 }
 if ($98 != Math_fround(0)) {
  HEAPF32[$25 + 120 >> 2] = $94 / $98;
 }
 $55 = HEAPF32[($25 + 112 | 0) + ($12 << 2) >> 2];
 label$5 : {
  if (Math_fround(Math_abs($55)) < Math_fround(2147483648)) {
   $12 = ~~$55;
   break label$5;
  }
  $12 = -2147483648;
 }
 $4 = $12;
 $55 = HEAPF32[($25 + 112 | 0) + ($16 << 2) >> 2];
 label$7 : {
  if (Math_fround(Math_abs($55)) < Math_fround(2147483648)) {
   $10 = ~~$55;
   break label$7;
  }
  $10 = -2147483648;
 }
 $53 = $4 | $10;
 $55 = HEAPF32[($25 + 112 | 0) + ($20 << 2) >> 2];
 label$11 : {
  if (Math_fround(Math_abs($55)) < Math_fround(2147483648)) {
   $16 = ~~$55;
   break label$11;
  }
  $16 = -2147483648;
 }
 label$9 : {
  label$10 : {
   if (!($53 | $16)) {
    break label$10;
   }
   $6 = Math_imul($7, $8) - Math_imul($11, $13) | 0;
   $5 = $6 >> 31;
   $30 = $6;
   $32 = $5;
   $6 = $25;
   HEAP32[$6 + 104 >> 2] = $30;
   HEAP32[$6 + 108 >> 2] = $5;
   $6 = Math_imul($13, $14) - Math_imul($7, $9) | 0;
   $5 = $6 >> 31;
   $44 = $6;
   $47 = $5;
   $6 = $25;
   HEAP32[$6 + 96 >> 2] = $44;
   HEAP32[$6 + 100 >> 2] = $5;
   $6 = Math_imul($11, $9) - Math_imul($14, $8) | 0;
   $5 = $6 >> 31;
   $24 = $6;
   $26 = $5;
   $6 = $25;
   HEAP32[$6 + 88 >> 2] = $24;
   HEAP32[$6 + 92 >> 2] = $5;
   $11 = HEAP32[$1 + 16 >> 2];
   $95 = $11 + $10 | 0;
   $6 = $95;
   $5 = $6 >> 31;
   $67 = $6;
   $71 = $5;
   $6 = $47;
   $6 = __wasm_i64_mul($67, $5, $44, $6);
   $9 = $6;
   $5 = i64toi32_i32$HIGH_BITS;
   $7 = $5;
   $10 = HEAP32[$1 + 12 >> 2];
   $96 = $12 + $10 | 0;
   $6 = $96;
   $5 = $6 >> 31;
   $33 = $6;
   $36 = $5;
   $6 = $26;
   $6 = __wasm_i64_mul($33, $5, $24, $6);
   $4 = $6;
   $5 = i64toi32_i32$HIGH_BITS;
   $6 = $5;
   $5 = $7;
   $7 = $5 + $6 | 0;
   $8 = $9 + $4 | 0;
   if ($8 >>> 0 < $4 >>> 0) {
    $7 = $7 + 1 | 0;
   }
   $5 = $8;
   $6 = $7;
   $12 = HEAP32[$1 + 20 >> 2];
   $97 = $16 + $12 | 0;
   $9 = $97;
   $7 = $9 >> 31;
   $76 = $9;
   $80 = $7;
   $9 = $32;
   $9 = __wasm_i64_mul($76, $7, $30, $9);
   $4 = $9;
   $7 = i64toi32_i32$HIGH_BITS;
   $9 = $7;
   $7 = $6;
   $8 = $9 + $7 | 0;
   $6 = $5 + $4 | 0;
   if ($6 >>> 0 < $4 >>> 0) {
    $8 = $8 + 1 | 0;
   }
   $90 = $6;
   $91 = $8;
   $15 = $6;
   $17 = $8;
   $5 = $11;
   $8 = $5 >> 31;
   $5 = $47;
   $5 = __wasm_i64_mul($11, $8, $44, $5);
   $7 = $5;
   $8 = i64toi32_i32$HIGH_BITS;
   $6 = $8;
   $5 = $10;
   $8 = $5 >> 31;
   $5 = $26;
   $5 = __wasm_i64_mul($10, $8, $24, $5);
   $4 = $5;
   $8 = i64toi32_i32$HIGH_BITS;
   $5 = $8;
   $8 = $6;
   $6 = $5 + $8 | 0;
   $9 = $4 + $7 | 0;
   if ($9 >>> 0 < $4 >>> 0) {
    $6 = $6 + 1 | 0;
   }
   $8 = $9;
   $5 = $6;
   $7 = $12;
   $6 = $7 >> 31;
   $7 = $32;
   $7 = __wasm_i64_mul($12, $6, $30, $7);
   $4 = $7;
   $6 = i64toi32_i32$HIGH_BITS;
   $7 = $6;
   $6 = $5;
   $9 = $6 + $7 | 0;
   $5 = $4 + $8 | 0;
   if ($5 >>> 0 < $4 >>> 0) {
    $9 = $9 + 1 | 0;
   }
   $8 = $9;
   $6 = $15;
   $4 = $5;
   $9 = $17;
   $7 = 0;
   if (($9 | 0) > ($8 | 0) ? 1 : ($9 | 0) >= ($8 | 0) ? $6 >>> 0 < $4 >>> 0 ? 0 : 1 : 0) {
    break label$9;
   }
   $10 = HEAP32[$1 + 4 >> 2];
   $12 = HEAP32[$10 + 8 >> 2];
   btConvexHullInternal__Vertex__dot_28btConvexHullInternal__Point64_20const__29_20const($25 + 48 | 0, $10, $25 + 88 | 0);
   label$13 : {
    label$14 : {
     $6 = $91;
     $16 = btConvexHullInternal__Rational128__compare_28long_20long_29_20const($25 + 48 | 0, $90, $6);
     if (($16 | 0) <= -1) {
      $10 = $12;
      while (1) {
       btConvexHullInternal__Vertex__dot_28btConvexHullInternal__Point64_20const__29_20const($25 + 8 | 0, HEAP32[$12 + 12 >> 2], $25 + 88 | 0);
       if ((btConvexHullInternal__Rational128__compare_28btConvexHullInternal__Rational128_20const__29_20const($25 + 8 | 0, $25 + 48 | 0) | 0) >= 1) {
        $6 = $91;
        $16 = btConvexHullInternal__Rational128__compare_28long_20long_29_20const($25 + 8 | 0, $90, $6);
        if (($16 | 0) > -1) {
         break label$14;
        }
        $4 = $25;
        $6 = HEAPU8[$4 + 37 | 0] | HEAPU8[$4 + 38 | 0] << 8 | (HEAPU8[$4 + 39 | 0] << 16 | HEAPU8[$4 + 40 | 0] << 24);
        $9 = HEAPU8[$4 + 41 | 0] | HEAPU8[$4 + 42 | 0] << 8 | (HEAPU8[$4 + 43 | 0] << 16 | HEAPU8[$4 + 44 | 0] << 24);
        HEAP8[$4 + 77 | 0] = $6;
        HEAP8[$4 + 78 | 0] = $6 >>> 8;
        HEAP8[$4 + 79 | 0] = $6 >>> 16;
        HEAP8[$4 + 80 | 0] = $6 >>> 24;
        HEAP8[$4 + 81 | 0] = $9;
        HEAP8[$4 + 82 | 0] = $9 >>> 8;
        HEAP8[$4 + 83 | 0] = $9 >>> 16;
        HEAP8[$4 + 84 | 0] = $9 >>> 24;
        $6 = HEAP32[$4 + 36 >> 2];
        $9 = HEAP32[$4 + 32 >> 2];
        HEAP32[$4 + 72 >> 2] = $9;
        HEAP32[$4 + 76 >> 2] = $6;
        $9 = HEAP32[$4 + 28 >> 2];
        $6 = HEAP32[$4 + 24 >> 2];
        $7 = $6;
        $6 = $4 - -64 | 0;
        HEAP32[$6 >> 2] = $7;
        HEAP32[$6 + 4 >> 2] = $9;
        $6 = HEAP32[$4 + 20 >> 2];
        $9 = HEAP32[$4 + 16 >> 2];
        HEAP32[$4 + 56 >> 2] = $9;
        HEAP32[$4 + 60 >> 2] = $6;
        $9 = HEAP32[$4 + 12 >> 2];
        $6 = HEAP32[$4 + 8 >> 2];
        HEAP32[$4 + 48 >> 2] = $6;
        HEAP32[$4 + 52 >> 2] = $9;
        $12 = HEAP32[$12 + 8 >> 2];
        $10 = $12;
       }
       $12 = HEAP32[$12 + 4 >> 2];
       if (($12 | 0) != ($10 | 0)) {
        continue;
       }
       break;
      }
      break label$10;
     }
     $10 = $12;
     $7 = $10;
     $12 = 0;
     while (1) {
      label$19 : {
       btConvexHullInternal__Vertex__dot_28btConvexHullInternal__Point64_20const__29_20const($25 + 8 | 0, HEAP32[$10 + 12 >> 2], $25 + 88 | 0);
       if ((btConvexHullInternal__Rational128__compare_28btConvexHullInternal__Rational128_20const__29_20const($25 + 8 | 0, $25 + 48 | 0) | 0) <= -1) {
        $9 = $91;
        $7 = btConvexHullInternal__Rational128__compare_28long_20long_29_20const($25 + 8 | 0, $90, $9);
        $4 = $25;
        $9 = HEAPU8[$4 + 37 | 0] | HEAPU8[$4 + 38 | 0] << 8 | (HEAPU8[$4 + 39 | 0] << 16 | HEAPU8[$4 + 40 | 0] << 24);
        $6 = HEAPU8[$4 + 41 | 0] | HEAPU8[$4 + 42 | 0] << 8 | (HEAPU8[$4 + 43 | 0] << 16 | HEAPU8[$4 + 44 | 0] << 24);
        HEAP8[$4 + 77 | 0] = $9;
        HEAP8[$4 + 78 | 0] = $9 >>> 8;
        HEAP8[$4 + 79 | 0] = $9 >>> 16;
        HEAP8[$4 + 80 | 0] = $9 >>> 24;
        HEAP8[$4 + 81 | 0] = $6;
        HEAP8[$4 + 82 | 0] = $6 >>> 8;
        HEAP8[$4 + 83 | 0] = $6 >>> 16;
        HEAP8[$4 + 84 | 0] = $6 >>> 24;
        $9 = HEAP32[$4 + 36 >> 2];
        $6 = HEAP32[$4 + 32 >> 2];
        HEAP32[$4 + 72 >> 2] = $6;
        HEAP32[$4 + 76 >> 2] = $9;
        $6 = HEAP32[$4 + 28 >> 2];
        $9 = HEAP32[$4 + 24 >> 2];
        $5 = $9;
        $9 = $4 - -64 | 0;
        HEAP32[$9 >> 2] = $5;
        HEAP32[$9 + 4 >> 2] = $6;
        $9 = HEAP32[$4 + 20 >> 2];
        $6 = HEAP32[$4 + 16 >> 2];
        HEAP32[$4 + 56 >> 2] = $6;
        HEAP32[$4 + 60 >> 2] = $9;
        $6 = HEAP32[$4 + 12 >> 2];
        $9 = HEAP32[$4 + 8 >> 2];
        HEAP32[$4 + 48 >> 2] = $9;
        HEAP32[$4 + 52 >> 2] = $6;
        $11 = ($7 | 0) < 0;
        $16 = $11 ? $16 : $7;
        $10 = HEAP32[$10 + 8 >> 2];
        $12 = $11 ? $10 : $12;
        if (($7 | 0) <= -1) {
         break label$19;
        }
        $7 = $10;
       }
       $10 = HEAP32[$10 + 4 >> 2];
       if (($7 | 0) != ($10 | 0)) {
        continue;
       }
      }
      break;
     }
     if ($12) {
      break label$13;
     }
     $7 = 0;
     break label$9;
    }
    if (!$12) {
     break label$10;
    }
   }
   label$21 : {
    if ($16) {
     break label$21;
    }
    $10 = HEAP32[HEAP32[$12 + 8 >> 2] >> 2];
    while (1) {
     btConvexHullInternal__Vertex__dot_28btConvexHullInternal__Point64_20const__29_20const($25 + 8 | 0, HEAP32[$10 + 12 >> 2], $25 + 88 | 0);
     $6 = $91;
     if ((btConvexHullInternal__Rational128__compare_28long_20long_29_20const($25 + 8 | 0, $90, $6) | 0) > 0) {
      break label$21;
     }
     $10 = HEAP32[$10 >> 2];
     if (($10 | 0) != HEAP32[$12 + 8 >> 2]) {
      continue;
     }
     break;
    }
    break label$10;
   }
   $6 = $80;
   $30 = $6 >> 31;
   $9 = $6 >> 31;
   $32 = $9;
   $4 = $32;
   $5 = $6 + $4 | 0;
   $6 = $76;
   $8 = $30;
   $7 = $6 + $8 | 0;
   if ($7 >>> 0 < $8 >>> 0) {
    $5 = $5 + 1 | 0;
   }
   $6 = $32;
   $6 = $6 ^ $5;
   $129 = $6;
   $112 = $7 ^ $30;
   $5 = $112;
   $113 = $6;
   $9 = 0;
   $114 = $9;
   $115 = $5;
   $5 = 0;
   $116 = $5;
   $5 = $71;
   $30 = $5 >> 31;
   $6 = $5 >> 31;
   $32 = $6;
   $9 = $32;
   $7 = $5 + $9 | 0;
   $5 = $67;
   $8 = $30;
   $4 = $5 + $8 | 0;
   if ($4 >>> 0 < $8 >>> 0) {
    $7 = $7 + 1 | 0;
   }
   $5 = $32;
   $5 = $7 ^ $5;
   $130 = $5;
   $117 = $4 ^ $30;
   $7 = $117;
   $118 = $5;
   $6 = 0;
   $119 = $6;
   $5 = $7;
   $120 = $5;
   $7 = 0;
   $121 = $7;
   $7 = $36;
   $5 = $7 >> 31;
   $32 = $5;
   $5 = $7;
   $6 = $32;
   $4 = $5 + $6 | 0;
   $30 = $5 >> 31;
   $8 = $30;
   $7 = $33;
   $9 = $8 + $7 | 0;
   if ($9 >>> 0 < $8 >>> 0) {
    $4 = $4 + 1 | 0;
   }
   $7 = $32;
   $7 = $7 ^ $4;
   $131 = $7;
   $5 = $9;
   $8 = $30;
   $122 = $5 ^ $8;
   $4 = $122;
   $123 = $7;
   $5 = 0;
   $124 = $5;
   $125 = $4;
   $4 = 0;
   $126 = $4;
   $48 = $3;
   $18 = $3;
   $56 = $18;
   $27 = $18;
   $20 = 0;
   while (1) {
    $77 = $20;
    $72 = $16;
    label$24 : {
     if ($16) {
      $53 = $12;
      break label$24;
     }
     $16 = HEAP32[HEAP32[$12 + 8 >> 2] >> 2];
     btConvexHullInternal__Vertex__dot_28btConvexHullInternal__Point64_20const__29_20const($25 + 8 | 0, HEAP32[$16 + 12 >> 2], $25 + 88 | 0);
     $10 = $16;
     $53 = $12;
     $4 = $91;
     if ((btConvexHullInternal__Rational128__compare_28long_20long_29_20const($25 + 8 | 0, $90, $4) | 0) > -1) {
      break label$24;
     }
     while (1) {
      $12 = HEAP32[$10 >> 2];
      if (($16 | 0) == ($12 | 0)) {
       break label$10;
      }
      $53 = HEAP32[$10 + 8 >> 2];
      btConvexHullInternal__Vertex__dot_28btConvexHullInternal__Point64_20const__29_20const($25 + 8 | 0, HEAP32[$12 + 12 >> 2], $25 + 88 | 0);
      $10 = $12;
      if ((btConvexHullInternal__Rational128__compare_28long_20long_29_20const($25 + 8 | 0, $90, $91) | 0) <= -1) {
       continue;
      }
      break;
     }
    }
    $12 = $53;
    label$27 : {
     if ($100) {
      if (($53 | 0) == ($100 | 0)) {
       break label$27;
      }
      $12 = $100;
     }
     $100 = $12;
     $12 = HEAP32[$53 + 8 >> 2];
     while (1) {
      $12 = HEAP32[HEAP32[$12 + 8 >> 2] + 4 >> 2];
      btConvexHullInternal__Vertex__dot_28btConvexHullInternal__Point64_20const__29_20const($25 + 8 | 0, HEAP32[$12 + 12 >> 2], $25 + 88 | 0);
      $4 = $91;
      $16 = btConvexHullInternal__Rational128__compare_28long_20long_29_20const($25 + 8 | 0, $90, $4);
      if (($16 | 0) < 0) {
       continue;
      }
      break;
     }
     if ($16) {
      $104 = HEAP32[$12 + 12 >> 2];
      $3 = HEAP32[$12 + 8 >> 2];
      $10 = HEAP32[$3 + 4 >> 2];
      label$31 : {
       if (($3 | 0) == ($10 | 0)) {
        HEAP32[$104 + 8 >> 2] = 0;
        break label$31;
       }
       HEAP32[$104 + 8 >> 2] = $10;
       $11 = HEAP32[$3 >> 2];
       HEAP32[$10 >> 2] = $11;
       HEAP32[$11 + 4 >> 2] = $10;
       HEAP32[$3 + 4 >> 2] = $3;
       HEAP32[$3 >> 2] = $3;
      }
      $5 = $1;
      $4 = HEAP32[$5 + 48 >> 2];
      $7 = $4 >> 31;
      $59 = $4;
      $65 = $7;
      $10 = HEAP32[$3 + 16 >> 2];
      $11 = HEAP32[$10 + 44 >> 2];
      $14 = HEAP32[$10 + 36 >> 2];
      $13 = HEAP32[$10 + 28 >> 2];
      $20 = HEAP32[$10 + 52 >> 2];
      $4 = Math_imul($11, $14) - Math_imul($13, $20) | 0;
      $7 = $4 >> 31;
      $51 = $4;
      $57 = $7;
      $7 = $65;
      $4 = $57;
      $4 = __wasm_i64_mul($59, $7, $51, $4);
      $17 = $4;
      $7 = i64toi32_i32$HIGH_BITS;
      $6 = $7;
      $7 = HEAP32[$5 + 44 >> 2];
      $4 = $7 >> 31;
      $21 = $7;
      $22 = $4;
      $73 = HEAP32[$10 + 32 >> 2];
      $4 = Math_imul($73, $20);
      $20 = HEAP32[$10 + 48 >> 2];
      $7 = $4 - Math_imul($20, $14) | 0;
      $4 = $7 >> 31;
      $60 = $7;
      $63 = $4;
      $4 = $22;
      $7 = $63;
      $7 = __wasm_i64_mul($21, $4, $60, $7);
      $8 = $7;
      $4 = i64toi32_i32$HIGH_BITS;
      $7 = $4;
      $4 = $6;
      $9 = $4 + $7 | 0;
      $5 = $17;
      $6 = $5 + $8 | 0;
      if ($6 >>> 0 < $8 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $7 = $6;
      $6 = $9;
      $4 = $1;
      $9 = HEAP32[$4 + 52 >> 2];
      $5 = $9 >> 31;
      $37 = $9;
      $43 = $5;
      $9 = Math_imul($13, $20) - Math_imul($11, $73) | 0;
      $5 = $9 >> 31;
      $68 = $9;
      $69 = $5;
      $5 = $43;
      $9 = $69;
      $9 = __wasm_i64_mul($37, $5, $68, $9);
      $8 = $9;
      $5 = i64toi32_i32$HIGH_BITS;
      $9 = $5;
      $5 = $6;
      $6 = $5 + $9 | 0;
      $4 = $7;
      $7 = $4 + $8 | 0;
      if ($7 >>> 0 < $8 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $50 = $7;
      $52 = $6;
      $30 = $6 >> 31;
      $4 = $6 >> 31;
      $32 = $4;
      $5 = $4;
      $4 = $6;
      $7 = $5 + $4 | 0;
      $6 = $50;
      $8 = $30;
      $9 = $6 + $8 | 0;
      if ($9 >>> 0 < $8 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $4 = $9;
      $30 = $4 ^ $30;
      $6 = $32;
      $6 = $7 ^ $6;
      $32 = $6;
      $4 = 0;
      $26 = $4;
      $24 = $6;
      $23 = $6;
      $6 = $1;
      $4 = HEAP32[$6 + 32 >> 2];
      $7 = $4 >> 31;
      $45 = $4;
      $38 = $7;
      $11 = HEAP32[$12 + 16 >> 2];
      $14 = HEAP32[$11 + 44 >> 2];
      $13 = HEAP32[$11 + 36 >> 2];
      $20 = HEAP32[$11 + 28 >> 2];
      $73 = HEAP32[$11 + 52 >> 2];
      $4 = Math_imul($14, $13) - Math_imul($20, $73) | 0;
      $7 = $4 >> 31;
      $44 = $4;
      $47 = $7;
      $7 = $38;
      $4 = $47;
      $4 = __wasm_i64_mul($45, $7, $44, $4);
      $17 = $4;
      $7 = i64toi32_i32$HIGH_BITS;
      $5 = $7;
      $7 = HEAP32[$6 + 28 >> 2];
      $4 = $7 >> 31;
      $34 = $7;
      $35 = $4;
      $84 = HEAP32[$11 + 32 >> 2];
      $4 = Math_imul($84, $73);
      $73 = HEAP32[$11 + 48 >> 2];
      $7 = $4 - Math_imul($73, $13) | 0;
      $4 = $7 >> 31;
      $61 = $7;
      $66 = $4;
      $4 = $35;
      $7 = $66;
      $7 = __wasm_i64_mul($34, $4, $61, $7);
      $8 = $7;
      $4 = i64toi32_i32$HIGH_BITS;
      $7 = $4;
      $4 = $5;
      $9 = $4 + $7 | 0;
      $6 = $17;
      $5 = $6 + $8 | 0;
      if ($5 >>> 0 < $8 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $17 = $5;
      $7 = $9;
      $4 = $1;
      $9 = HEAP32[$4 + 36 >> 2];
      $6 = $9 >> 31;
      $78 = $9;
      $86 = $6;
      $9 = Math_imul($20, $73) - Math_imul($14, $84) | 0;
      $6 = $9 >> 31;
      $39 = $9;
      $40 = $6;
      $6 = $86;
      $9 = $40;
      $9 = __wasm_i64_mul($78, $6, $39, $9);
      $8 = $9;
      $6 = i64toi32_i32$HIGH_BITS;
      $9 = $6;
      $6 = $7;
      $5 = $6 + $9 | 0;
      $4 = $17;
      $7 = $4 + $8 | 0;
      if ($7 >>> 0 < $8 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $15 = $7;
      $17 = $5;
      $67 = $5 >> 31;
      $4 = $5 >> 31;
      $71 = $4;
      $6 = $4;
      $4 = $5;
      $7 = $6 + $4 | 0;
      $5 = $15;
      $8 = $67;
      $9 = $5 + $8 | 0;
      if ($9 >>> 0 < $8 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $4 = $9;
      $33 = $4 ^ $67;
      $5 = $71;
      $5 = $7 ^ $5;
      $4 = 0;
      $71 = $4;
      $7 = $33;
      $67 = $7;
      $7 = __wasm_i64_mul($23, $132, $33, $4);
      $29 = $7;
      $4 = i64toi32_i32$HIGH_BITS;
      $31 = $4;
      $7 = 0;
      $6 = $7;
      $7 = $5;
      $33 = $5;
      $5 = 0;
      $36 = $5;
      $5 = $26;
      $4 = $36;
      $4 = __wasm_i64_mul($24, $5, $7, $4);
      $8 = $4;
      $5 = i64toi32_i32$HIGH_BITS;
      $4 = $5;
      $5 = $6;
      $9 = $5 + $4 | 0;
      $7 = $31;
      $6 = $8 + $7 | 0;
      if ($6 >>> 0 < $8 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $23 = $6;
      $4 = $9;
      $5 = $30;
      $76 = $5;
      $7 = 0;
      $80 = $7;
      $5 = $36;
      $5 = __wasm_i64_mul($30, $7, $33, $5);
      $30 = $5;
      $7 = i64toi32_i32$HIGH_BITS;
      $5 = 0;
      $9 = $5;
      $5 = $4;
      $6 = $5 + $9 | 0;
      $8 = $7;
      $7 = $23;
      $4 = $8 + $7 | 0;
      if ($4 >>> 0 < $8 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $31 = $4;
      $19 = $6;
      $7 = 0;
      $23 = $7;
      $5 = 0;
      $4 = $5;
      $6 = $30;
      $8 = $6;
      $7 = $29;
      $9 = $6 + $7 | 0;
      $5 = $23;
      $6 = $4;
      $4 = $5 + $6 | 0;
      $30 = $9;
      $4 = $9 >>> 0 < $8 >>> 0 ? $4 + 1 | 0 : $4;
      $32 = $4;
      $7 = 0;
      $5 = $7;
      $7 = $19;
      $9 = $5 + $7 | 0;
      $4 = $31;
      $8 = $32;
      $6 = $4 + $8 | 0;
      if ($6 >>> 0 < $8 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $29 = $6;
      $31 = $9;
      $7 = $30;
      $4 = $7;
      $30 = 0;
      $32 = $4;
      $4 = $71;
      $7 = $80;
      $7 = __wasm_i64_mul($67, $4, $76, $7);
      $8 = $7;
      $4 = i64toi32_i32$HIGH_BITS;
      $7 = $4;
      $4 = $32;
      $6 = $4 + $7 | 0;
      $9 = $30;
      $5 = $9 + $8 | 0;
      if ($5 >>> 0 < $8 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $19 = $5;
      $23 = $6;
      $9 = $32;
      $4 = $5;
      $8 = $30;
      $9 = ($6 | 0) == ($9 | 0) & $4 >>> 0 < $8 >>> 0 | $6 >>> 0 < $9 >>> 0;
      $4 = $31;
      $5 = $4;
      $8 = $29;
      $7 = $9 + $8 | 0;
      if ($7 >>> 0 < $9 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $29 = $7;
      $31 = $5;
      $8 = HEAP32[$10 + 12 >> 2] - $96 | 0;
      $5 = $8 >> 31;
      $49 = $8;
      $42 = $5;
      $8 = HEAP32[$10 + 16 >> 2] - $95 | 0;
      $5 = $8 >> 31;
      $92 = $8;
      $101 = $5;
      $10 = HEAP32[$10 + 20 >> 2] - $97 | 0;
      $8 = HEAP32[$11 + 12 >> 2] - $96 | 0;
      $5 = $8 >> 31;
      $4 = $8;
      $8 = $66;
      $8 = __wasm_i64_mul($4, $5, $61, $8);
      $41 = $8;
      $5 = i64toi32_i32$HIGH_BITS;
      $28 = $5;
      $8 = HEAP32[$11 + 16 >> 2] - $95 | 0;
      $5 = $8 >> 31;
      $4 = $8;
      $8 = $47;
      $8 = __wasm_i64_mul($4, $5, $44, $8);
      $79 = $8;
      $5 = i64toi32_i32$HIGH_BITS;
      $87 = $5;
      $8 = HEAP32[$11 + 20 >> 2] - $97 | 0;
      $5 = $8 >> 31;
      $62 = $8;
      $46 = $5;
      $5 = $38;
      $8 = $57;
      $8 = __wasm_i64_mul($45, $5, $51, $8);
      $6 = $8;
      $5 = i64toi32_i32$HIGH_BITS;
      $4 = $5;
      $5 = $35;
      $8 = $63;
      $8 = __wasm_i64_mul($34, $5, $60, $8);
      $9 = $8;
      $5 = i64toi32_i32$HIGH_BITS;
      $8 = $5;
      $5 = $4;
      $7 = $5 + $8 | 0;
      $4 = $6;
      $6 = $9 + $4 | 0;
      if ($6 >>> 0 < $9 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $5 = $6;
      $6 = $7;
      $7 = $69;
      $4 = $86;
      $4 = __wasm_i64_mul($68, $7, $78, $4);
      $9 = $4;
      $7 = i64toi32_i32$HIGH_BITS;
      $4 = $7;
      $7 = $6;
      $6 = $4 + $7 | 0;
      $8 = $5 + $9 | 0;
      if ($8 >>> 0 < $9 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $30 = $8;
      $32 = $6;
      $6 = $47;
      $5 = $65;
      $5 = __wasm_i64_mul($44, $6, $59, $5);
      $7 = $5;
      $6 = i64toi32_i32$HIGH_BITS;
      $4 = $6;
      $6 = $22;
      $5 = $66;
      $5 = __wasm_i64_mul($21, $6, $61, $5);
      $9 = $5;
      $6 = i64toi32_i32$HIGH_BITS;
      $5 = $6;
      $6 = $4;
      $8 = $5 + $6 | 0;
      $4 = $9 + $7 | 0;
      if ($4 >>> 0 < $9 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $6 = $4;
      $4 = $8;
      $8 = $43;
      $7 = $40;
      $7 = __wasm_i64_mul($37, $8, $39, $7);
      $9 = $7;
      $8 = i64toi32_i32$HIGH_BITS;
      $7 = $8;
      $8 = $4;
      $4 = $8 + $7 | 0;
      $5 = $6 + $9 | 0;
      if ($5 >>> 0 < $9 >>> 0) {
       $4 = $4 + 1 | 0;
      }
      $44 = $5;
      $47 = $4;
      $8 = $15;
      $4 = $17;
      $73 = ($4 | 0) < 0 ? 1 : ($4 | 0) <= 0 ? $8 >>> 0 >= 0 ? 0 : 1 : 0;
      $9 = $50;
      $8 = $52;
      $84 = ($8 | 0) < 0 ? 1 : ($8 | 0) <= 0 ? $9 >>> 0 >= 0 ? 0 : 1 : 0;
      $6 = $19;
      $9 = $23;
      $7 = $9;
      label$33 : {
       if (($73 | 0) == ($84 | 0)) {
        break label$33;
       }
       $9 = $31;
       $8 = $9 ^ -1;
       $9 = !($23 | $19);
       $6 = $29;
       $4 = $6 ^ -1;
       $7 = $9 + $4 | 0;
       $6 = $8;
       $5 = $6;
       $29 = $7;
       $5 = $7 >>> 0 < $4 >>> 0 ? $5 + 1 | 0 : $5;
       $31 = $5;
       $4 = $19;
       $6 = 0 - $4 | 0;
       $9 = $23;
       $7 = $9 + (0 < $4 >>> 0) | 0;
       $7 = 0 - $7 | 0;
      }
      $15 = $6;
      $17 = $7;
      $7 = $42;
      $8 = $63;
      $8 = __wasm_i64_mul($49, $7, $60, $8);
      $59 = $8;
      $7 = i64toi32_i32$HIGH_BITS;
      $65 = $7;
      $7 = $57;
      $8 = $101;
      $8 = __wasm_i64_mul($51, $7, $92, $8);
      $21 = $8;
      $7 = i64toi32_i32$HIGH_BITS;
      $22 = $7;
      $8 = $10;
      $7 = $8 >> 31;
      $37 = $8;
      $43 = $7;
      $8 = $87;
      $7 = $28;
      $6 = $8 + $7 | 0;
      $5 = $41;
      $4 = $79;
      $9 = $5 + $4 | 0;
      if ($9 >>> 0 < $4 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $45 = $9;
      $38 = $6;
      $6 = $40;
      $5 = $46;
      $5 = __wasm_i64_mul($39, $6, $62, $5);
      $34 = $5;
      $6 = i64toi32_i32$HIGH_BITS;
      $35 = $6;
      $6 = $47;
      $51 = $6 >> 31;
      $5 = $6 >> 31;
      $57 = $5;
      $5 = $6;
      $7 = $57;
      $9 = $5 + $7 | 0;
      $6 = $44;
      $4 = $51;
      $8 = $6 + $4 | 0;
      if ($8 >>> 0 < $4 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $5 = $8;
      $50 = $5 ^ $51;
      $6 = $57;
      $6 = $9 ^ $6;
      $52 = $6;
      $5 = 0;
      $57 = $5;
      $9 = $50;
      $51 = $9;
      $23 = $9;
      $5 = $32;
      $60 = $5 >> 31;
      $9 = $5 >> 31;
      $63 = $9;
      $6 = $9;
      $8 = $6 + $5 | 0;
      $5 = $30;
      $4 = $60;
      $7 = $5 + $4 | 0;
      if ($7 >>> 0 < $4 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $5 = $63;
      $5 = $8 ^ $5;
      $66 = $5;
      $61 = $7 ^ $60;
      $60 = $5;
      $9 = 0;
      $63 = $9;
      $8 = $9;
      $8 = __wasm_i64_mul($23, $133, $5, $8);
      $39 = $8;
      $9 = i64toi32_i32$HIGH_BITS;
      $40 = $9;
      $8 = 0;
      $6 = $8;
      $8 = $52;
      $50 = $8;
      $5 = 0;
      $52 = $5;
      $9 = $63;
      $9 = __wasm_i64_mul($8, $5, $60, $9);
      $4 = $9;
      $5 = i64toi32_i32$HIGH_BITS;
      $9 = $5;
      $5 = $6;
      $7 = $5 + $9 | 0;
      $8 = $40;
      $6 = $4 + $8 | 0;
      if ($6 >>> 0 < $4 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $9 = $6;
      $4 = $7;
      $5 = $61;
      $61 = $5;
      $8 = 0;
      $66 = $8;
      $8 = $52;
      $5 = $66;
      $5 = __wasm_i64_mul($50, $8, $61, $5);
      $19 = $5;
      $8 = i64toi32_i32$HIGH_BITS;
      $5 = 0;
      $7 = $5;
      $5 = $4;
      $6 = $5 + $7 | 0;
      $4 = $8;
      $8 = $9;
      $9 = $4 + $8 | 0;
      if ($9 >>> 0 < $4 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $28 = $9;
      $42 = $6;
      $8 = 0;
      $23 = $8;
      $5 = 0;
      $9 = $5;
      $6 = $19;
      $4 = $6;
      $8 = $39;
      $7 = $4 + $8 | 0;
      $5 = $23;
      $6 = $9;
      $9 = $5 + $6 | 0;
      $39 = $7;
      $9 = $7 >>> 0 < $4 >>> 0 ? $9 + 1 | 0 : $9;
      $40 = $9;
      $8 = 0;
      $5 = $8;
      $8 = $42;
      $7 = $5 + $8 | 0;
      $9 = $28;
      $4 = $40;
      $6 = $9 + $4 | 0;
      if ($6 >>> 0 < $4 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $28 = $6;
      $42 = $7;
      $8 = $39;
      $39 = 0;
      $40 = $8;
      $9 = $57;
      $8 = $66;
      $8 = __wasm_i64_mul($51, $9, $61, $8);
      $4 = $8;
      $9 = i64toi32_i32$HIGH_BITS;
      $8 = $9;
      $9 = $40;
      $6 = $9 + $8 | 0;
      $7 = $39;
      $5 = $4 + $7 | 0;
      if ($5 >>> 0 < $4 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $19 = $5;
      $23 = $6;
      $7 = $40;
      $4 = $39;
      $7 = ($6 | 0) == ($7 | 0) & $5 >>> 0 < $4 >>> 0 | $6 >>> 0 < $7 >>> 0;
      $9 = $42;
      $5 = $9;
      $4 = $28;
      $8 = $4 + $7 | 0;
      if ($8 >>> 0 < $7 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $39 = $8;
      $40 = $5;
      $9 = $30;
      $5 = $32;
      $93 = ($5 | 0) < 0 ? 1 : ($5 | 0) <= 0 ? $9 >>> 0 >= 0 ? 0 : 1 : 0;
      $7 = $44;
      $9 = $47;
      $102 = ($9 | 0) < 0 ? 1 : ($9 | 0) <= 0 ? $7 >>> 0 >= 0 ? 0 : 1 : 0;
      $4 = $19;
      $7 = $23;
      $6 = $7;
      label$34 : {
       if (($93 | 0) == ($102 | 0)) {
        break label$34;
       }
       $7 = $40;
       $9 = $7 ^ -1;
       $4 = $39;
       $5 = $4 ^ -1;
       $7 = !($23 | $19);
       $6 = $5 + $7 | 0;
       $4 = $9;
       $39 = $6;
       $8 = $6 >>> 0 < $5 >>> 0 ? $4 + 1 | 0 : $4;
       $40 = $8;
       $5 = $19;
       $4 = 0 - $5 | 0;
       $7 = $23;
       $6 = $7 + (0 < $5 >>> 0) | 0;
       $6 = 0 - $6 | 0;
      }
      $30 = $4;
      $32 = $6;
      $6 = $22;
      $9 = $65;
      $4 = $6 + $9 | 0;
      $5 = $59;
      $8 = $21;
      $7 = $5 + $8 | 0;
      if ($7 >>> 0 < $5 >>> 0) {
       $4 = $4 + 1 | 0;
      }
      $44 = $7;
      $47 = $4;
      $4 = $43;
      $8 = $69;
      $8 = __wasm_i64_mul($37, $4, $68, $8);
      $19 = $8;
      $4 = i64toi32_i32$HIGH_BITS;
      $23 = $4;
      $4 = $35;
      $8 = $38;
      $7 = $4 + $8 | 0;
      $5 = $45;
      $6 = $34;
      $9 = $5 + $6 | 0;
      if ($9 >>> 0 < $5 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $68 = $9;
      $69 = $7;
      $14 = HEAP32[$0 + 40 >> 2];
      label$35 : {
       if ($14) {
        break label$35;
       }
       $13 = HEAP32[$0 + 36 >> 2];
       label$36 : {
        if ($13) {
         HEAP32[$0 + 36 >> 2] = HEAP32[$13 + 8 >> 2];
         break label$36;
        }
        $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(12, 16);
        $10 = HEAP32[$0 + 44 >> 2];
        HEAP32[$13 + 8 >> 2] = 0;
        HEAP32[$13 + 4 >> 2] = $10;
        HEAP32[$13 >> 2] = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($10, 112), 16);
        HEAP32[$13 + 8 >> 2] = HEAP32[$0 + 32 >> 2];
        HEAP32[$0 + 32 >> 2] = $13;
       }
       $10 = 0;
       $14 = HEAP32[$13 >> 2];
       $11 = $14;
       $13 = HEAP32[$13 + 4 >> 2];
       if (($13 | 0) < 1) {
        break label$35;
       }
       while (1) {
        $20 = $11 + 112 | 0;
        $10 = $10 + 1 | 0;
        HEAP32[$11 >> 2] = ($10 | 0) < ($13 | 0) ? $20 : 0;
        $11 = $20;
        if (($10 | 0) != ($13 | 0)) {
         continue;
        }
        break;
       }
      }
      $4 = $39;
      $37 = $4 ^ -1;
      $7 = $40;
      $6 = $7 ^ -1;
      $43 = $6;
      $6 = $32;
      $10 = !($6 | $30);
      $7 = $15;
      $5 = $30;
      $8 = $7 - $5 | 0;
      $30 = $8;
      $6 = $17;
      $4 = $32;
      $9 = $4 + ($7 >>> 0 < $5 >>> 0) | 0;
      $9 = $6 - $9 | 0;
      $32 = $9;
      $9 = $23;
      $7 = $47;
      $8 = $9 + $7 | 0;
      $5 = $44;
      $6 = $19;
      $4 = $5 + $6 | 0;
      if ($4 >>> 0 < $5 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $39 = $4;
      $40 = $8;
      HEAP32[$0 + 40 >> 2] = HEAP32[$14 >> 2];
      HEAP32[$14 + 16 >> 2] = 0;
      $6 = $14;
      HEAP32[$6 + 8 >> 2] = 0;
      HEAP32[$6 + 12 >> 2] = 0;
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      HEAP32[$6 + 100 >> 2] = -1;
      HEAP32[$6 + 104 >> 2] = -1;
      $9 = $1;
      $8 = HEAP32[$9 + 28 >> 2];
      $6 = $8 >> 31;
      $45 = $8;
      $38 = $6;
      $6 = $69;
      $8 = $38;
      $8 = __wasm_i64_mul($68, $6, $45, $8);
      $44 = $8;
      $6 = i64toi32_i32$HIGH_BITS;
      $47 = $6;
      $8 = $6 >> 31;
      $23 = $8;
      $9 = $8;
      $4 = $9 + $6 | 0;
      $19 = $6 >> 31;
      $5 = $19;
      $6 = $44;
      $7 = $5 + $6 | 0;
      if ($7 >>> 0 < $5 >>> 0) {
       $4 = $4 + 1 | 0;
      }
      $5 = $19;
      $19 = $5 ^ $7;
      $6 = $23;
      $6 = $4 ^ $6;
      $4 = $19;
      $59 = $4;
      $8 = 0;
      $65 = $8;
      $4 = $26;
      $4 = __wasm_i64_mul($19, $8, $24, $4);
      $21 = $4;
      $8 = i64toi32_i32$HIGH_BITS;
      $22 = $8;
      $4 = 0;
      $7 = $4;
      $4 = $6;
      $19 = $4;
      $6 = 0;
      $23 = $6;
      $8 = $26;
      $8 = __wasm_i64_mul($4, $6, $24, $8);
      $5 = $8;
      $6 = i64toi32_i32$HIGH_BITS;
      $8 = $6;
      $6 = $7;
      $7 = $6 + $8 | 0;
      $4 = $22;
      $9 = $5 + $4 | 0;
      if ($9 >>> 0 < $5 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $8 = $9;
      $5 = $7;
      $7 = $23;
      $4 = $80;
      $4 = __wasm_i64_mul($19, $7, $76, $4);
      $19 = $4;
      $7 = i64toi32_i32$HIGH_BITS;
      $4 = 0;
      $6 = $4;
      $4 = $5;
      $9 = $6 + $4 | 0;
      $5 = $7;
      $7 = $8;
      $8 = $5 + $7 | 0;
      if ($8 >>> 0 < $5 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $35 = $8;
      $22 = $9;
      $7 = 0;
      $9 = $19;
      $5 = $9;
      $4 = $21;
      $6 = $5 + $4 | 0;
      $4 = 0;
      $9 = $4;
      $4 = $7;
      $8 = $9 + $4 | 0;
      $19 = $6;
      $8 = $6 >>> 0 < $5 >>> 0 ? $8 + 1 | 0 : $8;
      $23 = $8;
      $7 = 0;
      $4 = $7;
      $7 = $22;
      $6 = $4 + $7 | 0;
      $5 = $8;
      $8 = $35;
      $9 = $5 + $8 | 0;
      if ($9 >>> 0 < $5 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $34 = $9;
      $35 = $6;
      $7 = $19;
      $19 = 0;
      $23 = $7;
      $8 = $65;
      $7 = $80;
      $7 = __wasm_i64_mul($59, $8, $76, $7);
      $5 = $7;
      $8 = i64toi32_i32$HIGH_BITS;
      $7 = $8;
      $8 = $23;
      $9 = $8 + $7 | 0;
      $6 = $19;
      $4 = $5 + $6 | 0;
      if ($4 >>> 0 < $5 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $21 = $4;
      $6 = $23;
      $22 = $9;
      $5 = $19;
      $6 = ($6 | 0) == ($9 | 0) & $4 >>> 0 < $5 >>> 0 | $9 >>> 0 < $6 >>> 0;
      $8 = $35;
      $4 = $8;
      $5 = $34;
      $7 = $5 + $6 | 0;
      if ($7 >>> 0 < $6 >>> 0) {
       $4 = $4 + 1 | 0;
      }
      $19 = $7;
      $23 = $4;
      $8 = $44;
      $4 = $47;
      if (((($4 | 0) < 0 ? 1 : ($4 | 0) <= 0 ? $8 >>> 0 >= 0 ? 0 : 1 : 0) | 0) == ($84 | 0)) {
       $6 = $21;
       $8 = $22;
       $9 = $8;
      } else {
       $8 = $22;
       $7 = !($8 | $21);
       $8 = $23;
       $4 = $8 ^ -1;
       $6 = $19;
       $5 = $6 ^ -1;
       $8 = $7;
       $9 = $5 + $8 | 0;
       $6 = $4;
       $19 = $9;
       $7 = $9 >>> 0 < $5 >>> 0 ? $6 + 1 | 0 : $6;
       $23 = $7;
       $5 = $21;
       $6 = 0 - $5 | 0;
       $8 = $22;
       $9 = $8 + (0 < $5 >>> 0) | 0;
       $9 = 0 - $9 | 0;
      }
      $59 = $6;
      $65 = $9;
      $9 = $31;
      $4 = $43;
      $6 = $9 + $4 | 0;
      $5 = $37;
      $7 = $29;
      $8 = $5 + $7 | 0;
      if ($8 >>> 0 < $5 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $37 = $8;
      $43 = $6;
      $34 = $10;
      $6 = $32;
      $7 = $17;
      $9 = $30;
      $5 = $15;
      $10 = ($6 | 0) == ($7 | 0) & $9 >>> 0 < $5 >>> 0 | $6 >>> 0 < $7 >>> 0;
      $9 = $40;
      $6 = $38;
      $6 = __wasm_i64_mul($39, $9, $45, $6);
      $44 = $6;
      $9 = i64toi32_i32$HIGH_BITS;
      $47 = $9;
      $15 = $9 >> 31;
      $6 = $9 >> 31;
      $17 = $6;
      $5 = $6;
      $6 = $9;
      $8 = $5 + $6 | 0;
      $9 = $44;
      $7 = $15;
      $4 = $9 + $7 | 0;
      if ($4 >>> 0 < $7 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $15 = $4 ^ $15;
      $9 = $17;
      $9 = $8 ^ $9;
      $8 = $15;
      $29 = $8;
      $6 = 0;
      $31 = $6;
      $8 = $52;
      $8 = __wasm_i64_mul($15, $6, $50, $8);
      $21 = $8;
      $6 = i64toi32_i32$HIGH_BITS;
      $22 = $6;
      $8 = 0;
      $4 = $8;
      $8 = $9;
      $15 = $9;
      $9 = 0;
      $17 = $9;
      $6 = $52;
      $6 = __wasm_i64_mul($8, $9, $50, $6);
      $7 = $6;
      $9 = i64toi32_i32$HIGH_BITS;
      $6 = $9;
      $9 = $4;
      $4 = $6 + $9 | 0;
      $8 = $22;
      $5 = $8 + $7 | 0;
      if ($5 >>> 0 < $7 >>> 0) {
       $4 = $4 + 1 | 0;
      }
      $7 = $5;
      $6 = $4;
      $4 = $17;
      $8 = $57;
      $8 = __wasm_i64_mul($15, $4, $51, $8);
      $15 = $8;
      $4 = i64toi32_i32$HIGH_BITS;
      $17 = $4;
      $8 = 0;
      $9 = $8;
      $8 = $6;
      $5 = $9 + $8 | 0;
      $4 = $7;
      $7 = $17;
      $6 = $4 + $7 | 0;
      if ($6 >>> 0 < $7 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $35 = $6;
      $22 = $5;
      $4 = 0;
      $6 = $4;
      $8 = $21;
      $4 = $8;
      $5 = $15;
      $7 = $5;
      $9 = $4 + $5 | 0;
      $8 = 0;
      $5 = $8;
      $8 = $6;
      $6 = $5 + $8 | 0;
      $15 = $9;
      $6 = $9 >>> 0 < $7 >>> 0 ? $6 + 1 | 0 : $6;
      $17 = $6;
      $4 = 0;
      $8 = $4;
      $4 = $22;
      $9 = $4 + $8 | 0;
      $6 = $35;
      $7 = $17;
      $5 = $6 + $7 | 0;
      if ($5 >>> 0 < $7 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $42 = $5;
      $35 = $9;
      $4 = $15;
      $22 = $4;
      $21 = 0;
      $6 = $31;
      $4 = $57;
      $4 = __wasm_i64_mul($29, $6, $51, $4);
      $7 = $4;
      $6 = i64toi32_i32$HIGH_BITS;
      $4 = $6;
      $6 = $15;
      $5 = $6 + $4 | 0;
      $9 = $21;
      $8 = $9 + $7 | 0;
      if ($8 >>> 0 < $7 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $15 = $8;
      $17 = $5;
      $9 = $22;
      $6 = $8;
      $7 = $21;
      $9 = ($5 | 0) == ($9 | 0) & $6 >>> 0 < $7 >>> 0 | $5 >>> 0 < $9 >>> 0;
      $6 = $35;
      $8 = $6;
      $7 = $42;
      $4 = $9 + $7 | 0;
      if ($4 >>> 0 < $9 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $29 = $4;
      $31 = $8;
      $6 = $44;
      $8 = $47;
      if (((($8 | 0) < 0 ? 1 : ($8 | 0) <= 0 ? $6 >>> 0 >= 0 ? 0 : 1 : 0) | 0) == ($102 | 0)) {
       $9 = $15;
       $6 = $17;
       $5 = $6;
      } else {
       $6 = $17;
       $4 = !($6 | $15);
       $6 = $31;
       $8 = $6 ^ -1;
       $6 = $4;
       $9 = $29;
       $7 = $9 ^ -1;
       $5 = $6 + $7 | 0;
       $9 = $8;
       $4 = $9;
       $29 = $5;
       $4 = $5 >>> 0 < $7 >>> 0 ? $4 + 1 | 0 : $4;
       $31 = $4;
       $7 = $15;
       $9 = 0 - $7 | 0;
       $6 = $17;
       $5 = $6 + (0 < $7 >>> 0) | 0;
       $5 = 0 - $5 | 0;
      }
      $21 = $9;
      $22 = $5;
      $5 = $43;
      $9 = $5;
      $4 = $37;
      $7 = $34;
      $6 = $4 + $7 | 0;
      if ($6 >>> 0 < $7 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $34 = $6;
      $35 = $9;
      $78 = $10;
      $5 = $1;
      $9 = HEAP32[$5 + 44 >> 2];
      $4 = $9 >> 31;
      $49 = $9;
      $42 = $4;
      $4 = $40;
      $9 = $42;
      $9 = __wasm_i64_mul($39, $4, $49, $9);
      $44 = $9;
      $4 = i64toi32_i32$HIGH_BITS;
      $47 = $4;
      $15 = $4 >> 31;
      $9 = $4 >> 31;
      $17 = $9;
      $5 = $9;
      $6 = $5 + $4 | 0;
      $4 = $44;
      $7 = $15;
      $8 = $4 + $7 | 0;
      if ($8 >>> 0 < $7 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $9 = $8;
      $15 = $9 ^ $15;
      $4 = $17;
      $4 = $4 ^ $6;
      $6 = $15;
      $37 = $6;
      $9 = 0;
      $43 = $9;
      $6 = $36;
      $6 = __wasm_i64_mul($15, $9, $33, $6);
      $45 = $6;
      $9 = i64toi32_i32$HIGH_BITS;
      $38 = $9;
      $6 = 0;
      $5 = $6;
      $6 = $4;
      $15 = $4;
      $4 = 0;
      $17 = $4;
      $9 = $36;
      $9 = __wasm_i64_mul($6, $4, $33, $9);
      $7 = $9;
      $4 = i64toi32_i32$HIGH_BITS;
      $9 = $4;
      $4 = $5;
      $8 = $9 + $4 | 0;
      $6 = $38;
      $5 = $6 + $7 | 0;
      if ($5 >>> 0 < $7 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $9 = $5;
      $7 = $8;
      $8 = $17;
      $6 = $71;
      $6 = __wasm_i64_mul($15, $8, $67, $6);
      $15 = $6;
      $8 = i64toi32_i32$HIGH_BITS;
      $17 = $8;
      $6 = 0;
      $4 = $6;
      $6 = $7;
      $5 = $6 + $4 | 0;
      $8 = $9;
      $7 = $17;
      $9 = $8 + $7 | 0;
      if ($9 >>> 0 < $7 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $28 = $9;
      $38 = $5;
      $8 = 0;
      $6 = $45;
      $5 = $15;
      $7 = $5;
      $4 = $6 + $5 | 0;
      $6 = 0;
      $5 = $6;
      $6 = $8;
      $9 = $5 + $6 | 0;
      $15 = $4;
      $9 = $4 >>> 0 < $7 >>> 0 ? $9 + 1 | 0 : $9;
      $17 = $9;
      $8 = 0;
      $6 = $8;
      $8 = $38;
      $4 = $6 + $8 | 0;
      $9 = $28;
      $7 = $17;
      $5 = $9 + $7 | 0;
      if ($5 >>> 0 < $7 >>> 0) {
       $4 = $4 + 1 | 0;
      }
      $41 = $5;
      $28 = $4;
      $8 = $15;
      $9 = $8;
      $38 = $9;
      $45 = 0;
      $9 = $43;
      $8 = $71;
      $8 = __wasm_i64_mul($37, $9, $67, $8);
      $7 = $8;
      $9 = i64toi32_i32$HIGH_BITS;
      $8 = $9;
      $9 = $15;
      $5 = $9 + $8 | 0;
      $4 = $45;
      $6 = $4 + $7 | 0;
      if ($6 >>> 0 < $7 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $15 = $6;
      $17 = $5;
      $4 = $38;
      $7 = $45;
      $4 = ($5 | 0) == ($4 | 0) & $6 >>> 0 < $7 >>> 0 | $5 >>> 0 < $4 >>> 0;
      $9 = $28;
      $6 = $9;
      $7 = $41;
      $8 = $4 + $7 | 0;
      if ($8 >>> 0 < $4 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $37 = $8;
      $43 = $6;
      $9 = $44;
      $6 = $47;
      if (((($6 | 0) < 0 ? 1 : ($6 | 0) <= 0 ? $9 >>> 0 >= 0 ? 0 : 1 : 0) | 0) == ($73 | 0)) {
       $4 = $15;
       $9 = $17;
       $5 = $9;
      } else {
       $9 = $17;
       $4 = !($9 | $15);
       $9 = $43;
       $6 = $9 ^ -1;
       $9 = $4;
       $4 = $37;
       $7 = $4 ^ -1;
       $5 = $9 + $7 | 0;
       $4 = $6;
       $37 = $5;
       $8 = $5 >>> 0 < $7 >>> 0 ? $4 + 1 | 0 : $4;
       $43 = $8;
       $7 = $15;
       $4 = 0 - $7 | 0;
       $9 = $17;
       $5 = $9 + (0 < $7 >>> 0) | 0;
       $5 = 0 - $5 | 0;
      }
      $45 = $4;
      $38 = $5;
      $5 = $35;
      $4 = $5;
      $8 = $34;
      $7 = $78;
      $9 = $8 + $7 | 0;
      if ($9 >>> 0 < $7 >>> 0) {
       $4 = $4 + 1 | 0;
      }
      $44 = $9;
      $47 = $4;
      $4 = $42;
      $8 = $69;
      $8 = __wasm_i64_mul($49, $4, $68, $8);
      $15 = $8;
      $4 = i64toi32_i32$HIGH_BITS;
      $17 = $4;
      $34 = $4 >> 31;
      $8 = $4 >> 31;
      $35 = $8;
      $5 = $8;
      $9 = $5 + $4 | 0;
      $4 = $15;
      $7 = $34;
      $6 = $4 + $7 | 0;
      if ($6 >>> 0 < $7 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $34 = $6 ^ $34;
      $4 = $35;
      $4 = $4 ^ $9;
      $9 = $34;
      $78 = $9;
      $8 = 0;
      $86 = $8;
      $9 = $63;
      $9 = __wasm_i64_mul($34, $8, $60, $9);
      $49 = $9;
      $8 = i64toi32_i32$HIGH_BITS;
      $42 = $8;
      $9 = 0;
      $6 = $9;
      $9 = $4;
      $34 = $4;
      $4 = 0;
      $35 = $4;
      $8 = $63;
      $8 = __wasm_i64_mul($9, $4, $60, $8);
      $7 = $8;
      $4 = i64toi32_i32$HIGH_BITS;
      $8 = $4;
      $4 = $6;
      $6 = $4 + $8 | 0;
      $9 = $42;
      $5 = $9 + $7 | 0;
      if ($5 >>> 0 < $7 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $8 = $5;
      $7 = $6;
      $6 = $35;
      $9 = $66;
      $9 = __wasm_i64_mul($34, $6, $61, $9);
      $34 = $9;
      $6 = i64toi32_i32$HIGH_BITS;
      $35 = $6;
      $9 = 0;
      $4 = $9;
      $9 = $7;
      $5 = $9 + $4 | 0;
      $6 = $8;
      $7 = $35;
      $8 = $6 + $7 | 0;
      if ($8 >>> 0 < $7 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $28 = $8;
      $42 = $5;
      $6 = 0;
      $8 = $6;
      $9 = $49;
      $6 = $9;
      $5 = $34;
      $7 = $5;
      $4 = $6 + $5 | 0;
      $9 = 0;
      $5 = $9;
      $9 = $8;
      $8 = $5 + $9 | 0;
      $34 = $4;
      $8 = $4 >>> 0 < $7 >>> 0 ? $8 + 1 | 0 : $8;
      $35 = $8;
      $6 = 0;
      $9 = $6;
      $6 = $42;
      $4 = $6 + $9 | 0;
      $8 = $28;
      $7 = $35;
      $5 = $8 + $7 | 0;
      if ($5 >>> 0 < $7 >>> 0) {
       $4 = $4 + 1 | 0;
      }
      $41 = $5;
      $28 = $4;
      $6 = $34;
      $34 = 0;
      $35 = $6;
      $8 = $66;
      $6 = $86;
      $6 = __wasm_i64_mul($61, $8, $78, $6);
      $7 = $6;
      $8 = i64toi32_i32$HIGH_BITS;
      $6 = $8;
      $8 = $35;
      $5 = $6 + $8 | 0;
      $4 = $34;
      $9 = $4 + $7 | 0;
      if ($9 >>> 0 < $7 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $49 = $9;
      $42 = $5;
      $4 = $35;
      $7 = $34;
      $4 = ($5 | 0) == ($4 | 0) & $9 >>> 0 < $7 >>> 0 | $5 >>> 0 < $4 >>> 0;
      $8 = $28;
      $9 = $8;
      $7 = $41;
      $6 = $4 + $7 | 0;
      if ($6 >>> 0 < $4 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $34 = $6;
      $35 = $9;
      $8 = $15;
      $9 = $17;
      if (((($9 | 0) < 0 ? 1 : ($9 | 0) <= 0 ? $8 >>> 0 >= 0 ? 0 : 1 : 0) | 0) == ($93 | 0)) {
       $4 = $49;
       $8 = $42;
       $5 = $8;
      } else {
       $8 = $42;
       $4 = !($8 | $49);
       $8 = $35;
       $9 = $8 ^ -1;
       $8 = $4;
       $4 = $34;
       $7 = $4 ^ -1;
       $5 = $8 + $7 | 0;
       $4 = $9;
       $34 = $5;
       $6 = $5 >>> 0 < $7 >>> 0 ? $4 + 1 | 0 : $4;
       $35 = $6;
       $7 = $49;
       $4 = 0 - $7 | 0;
       $8 = $42;
       $5 = $8 + (0 < $7 >>> 0) | 0;
       $5 = 0 - $5 | 0;
      }
      $78 = $4;
      $86 = $5;
      $15 = $30;
      $5 = $32;
      $17 = $5;
      $49 = $44;
      $5 = $47;
      $42 = $5;
      $6 = $44;
      $10 = ($5 | 0) > -1 ? 1 : ($5 | 0) >= -1 ? $6 >>> 0 <= 4294967295 ? 0 : 1 : 0;
      if (!$10) {
       $6 = $32;
       $4 = !($6 | $30);
       $6 = $47;
       $5 = $6 ^ -1;
       $6 = $4;
       $7 = $44;
       $9 = $7 ^ -1;
       $8 = $6 + $9 | 0;
       $7 = $5;
       $4 = $7;
       $49 = $8;
       $4 = $8 >>> 0 < $9 >>> 0 ? $4 + 1 | 0 : $4;
       $42 = $4;
       $9 = $30;
       $7 = 0 - $9 | 0;
       $15 = $7;
       $6 = $32;
       $8 = $6 + (0 < $9 >>> 0) | 0;
       $8 = 0 - $8 | 0;
       $17 = $8;
      }
      $8 = $42;
      $5 = $131;
      $5 = __wasm_i64_mul($49, $8, $122, $5);
      $28 = $5;
      $8 = i64toi32_i32$HIGH_BITS;
      $6 = $8;
      $8 = $17;
      $49 = $8;
      $5 = 0;
      $42 = $5;
      $4 = $124;
      $4 = __wasm_i64_mul($8, $5, $123, $4);
      $9 = $4;
      $5 = i64toi32_i32$HIGH_BITS;
      $4 = $5;
      $5 = $6;
      $7 = $5 + $4 | 0;
      $8 = $28;
      $6 = $9 + $8 | 0;
      if ($6 >>> 0 < $9 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $28 = $6;
      $4 = $7;
      $5 = $15;
      $15 = $5;
      $8 = 0;
      $17 = $8;
      $5 = $124;
      $5 = __wasm_i64_mul($15, $8, $123, $5);
      $92 = $5;
      $8 = i64toi32_i32$HIGH_BITS;
      $5 = 0;
      $7 = $5;
      $5 = $4;
      $6 = $5 + $7 | 0;
      $9 = $8;
      $8 = $28;
      $4 = $9 + $8 | 0;
      if ($4 >>> 0 < $9 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $7 = $4;
      $4 = $6;
      $6 = $42;
      $8 = $126;
      $8 = __wasm_i64_mul($49, $6, $125, $8);
      $49 = $8;
      $6 = i64toi32_i32$HIGH_BITS;
      $42 = $6;
      $8 = 0;
      $5 = $8;
      $8 = $4;
      $4 = $5 + $8 | 0;
      $6 = $7;
      $9 = $42;
      $7 = $6 + $9 | 0;
      if ($7 >>> 0 < $9 >>> 0) {
       $4 = $4 + 1 | 0;
      }
      $41 = $7;
      $28 = $4;
      $6 = 0;
      $7 = $6;
      $8 = $92;
      $6 = $8;
      $4 = $49;
      $9 = $4;
      $5 = $6 + $4 | 0;
      $8 = 0;
      $4 = $8;
      $8 = $7;
      $7 = $4 + $8 | 0;
      $49 = $5;
      $7 = $5 >>> 0 < $9 >>> 0 ? $7 + 1 | 0 : $7;
      $42 = $7;
      $6 = 0;
      $8 = $6;
      $6 = $28;
      $5 = $6 + $8 | 0;
      $9 = $7;
      $7 = $41;
      $4 = $9 + $7 | 0;
      if ($4 >>> 0 < $9 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $41 = $4;
      $28 = $5;
      $6 = $49;
      $49 = 0;
      $42 = $6;
      $7 = $17;
      $6 = $126;
      $6 = __wasm_i64_mul($15, $7, $125, $6);
      $9 = $6;
      $7 = i64toi32_i32$HIGH_BITS;
      $6 = $7;
      $7 = $42;
      $4 = $6 + $7 | 0;
      $5 = $49;
      $8 = $5 + $9 | 0;
      if ($8 >>> 0 < $9 >>> 0) {
       $4 = $4 + 1 | 0;
      }
      $15 = $8;
      $5 = $42;
      $17 = $4;
      $7 = $8;
      $9 = $49;
      $5 = ($5 | 0) == ($4 | 0) & $7 >>> 0 < $9 >>> 0 | $4 >>> 0 < $5 >>> 0;
      $7 = $28;
      $8 = $7;
      $9 = $41;
      $6 = $5 + $9 | 0;
      if ($6 >>> 0 < $5 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $49 = $6;
      $42 = $8;
      $7 = $44;
      $8 = $47;
      $11 = ($8 | 0) < 0 ? 1 : ($8 | 0) <= 0 ? $7 >>> 0 >= 0 ? 0 : 1 : 0;
      $5 = $15;
      $7 = $17;
      $4 = $7;
      label$48 : {
       if ((($96 | 0) < 0 | 0) == ($11 | 0)) {
        break label$48;
       }
       $7 = $42;
       $8 = $7 ^ -1;
       $5 = $49;
       $9 = $5 ^ -1;
       $7 = !($17 | $15);
       $4 = $9 + $7 | 0;
       $5 = $8;
       $49 = $4;
       $6 = $4 >>> 0 < $9 >>> 0 ? $5 + 1 | 0 : $5;
       $42 = $6;
       $9 = $15;
       $5 = 0 - $9 | 0;
       $7 = $17;
       $4 = $7 + (0 < $9 >>> 0) | 0;
       $4 = 0 - $4 | 0;
      }
      $92 = $5;
      $101 = $4;
      $6 = $1;
      $4 = HEAP32[$6 + 32 >> 2];
      $8 = $4 >> 31;
      $74 = $4;
      $58 = $8;
      $8 = $69;
      $4 = $58;
      $4 = __wasm_i64_mul($68, $8, $74, $4);
      $15 = $4;
      $8 = i64toi32_i32$HIGH_BITS;
      $17 = $8;
      $4 = $8 >> 31;
      $28 = $4;
      $6 = $4;
      $4 = $8;
      $5 = $6 + $4 | 0;
      $41 = $4 >> 31;
      $9 = $41;
      $8 = $15;
      $7 = $9 + $8 | 0;
      if ($7 >>> 0 < $9 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $9 = $41;
      $4 = $7;
      $41 = $9 ^ $4;
      $8 = $28;
      $8 = $8 ^ $5;
      $5 = $41;
      $79 = $5;
      $4 = 0;
      $87 = $4;
      $5 = $26;
      $5 = __wasm_i64_mul($41, $4, $24, $5);
      $62 = $5;
      $4 = i64toi32_i32$HIGH_BITS;
      $46 = $4;
      $5 = 0;
      $6 = $5;
      $5 = $8;
      $41 = $5;
      $8 = 0;
      $28 = $8;
      $4 = $26;
      $4 = __wasm_i64_mul($5, $8, $24, $4);
      $9 = $4;
      $8 = i64toi32_i32$HIGH_BITS;
      $4 = $8;
      $8 = $6;
      $7 = $4 + $8 | 0;
      $5 = $46;
      $6 = $5 + $9 | 0;
      if ($6 >>> 0 < $9 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $46 = $6;
      $4 = $7;
      $7 = $28;
      $5 = $80;
      $5 = __wasm_i64_mul($41, $7, $76, $5);
      $41 = $5;
      $7 = i64toi32_i32$HIGH_BITS;
      $5 = 0;
      $8 = $5;
      $5 = $4;
      $6 = $5 + $8 | 0;
      $9 = $7;
      $7 = $46;
      $4 = $9 + $7 | 0;
      if ($4 >>> 0 < $9 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $13 = $4;
      $46 = $6;
      $7 = 0;
      $28 = $7;
      $5 = 0;
      $4 = $5;
      $6 = $41;
      $9 = $6;
      $7 = $62;
      $8 = $6 + $7 | 0;
      $5 = $28;
      $6 = $4;
      $4 = $5 + $6 | 0;
      $41 = $8;
      $4 = $8 >>> 0 < $9 >>> 0 ? $4 + 1 | 0 : $4;
      $28 = $4;
      $7 = 0;
      $5 = $7;
      $7 = $46;
      $8 = $5 + $7 | 0;
      $9 = $4;
      $4 = $13;
      $6 = $9 + $4 | 0;
      if ($6 >>> 0 < $9 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $70 = $6;
      $13 = $8;
      $7 = $41;
      $4 = $7;
      $41 = 0;
      $28 = $4;
      $4 = $80;
      $7 = $87;
      $7 = __wasm_i64_mul($76, $4, $79, $7);
      $9 = $7;
      $4 = i64toi32_i32$HIGH_BITS;
      $7 = $4;
      $4 = $28;
      $6 = $4 + $7 | 0;
      $8 = $41;
      $5 = $9 + $8 | 0;
      if ($5 >>> 0 < $9 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $62 = $5;
      $46 = $6;
      $8 = $28;
      $4 = $5;
      $9 = $41;
      $8 = ($6 | 0) == ($8 | 0) & $4 >>> 0 < $9 >>> 0 | $6 >>> 0 < $8 >>> 0;
      $4 = $13;
      $5 = $4;
      $9 = $70;
      $7 = $9 + $8 | 0;
      if ($7 >>> 0 < $8 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $41 = $7;
      $28 = $5;
      $4 = $15;
      $5 = $17;
      if (((($5 | 0) < 0 ? 1 : ($5 | 0) <= 0 ? $4 >>> 0 >= 0 ? 0 : 1 : 0) | 0) == ($84 | 0)) {
       $8 = $62;
       $4 = $46;
       $6 = $4;
      } else {
       $4 = $46;
       $6 = !($4 | $62);
       $4 = $28;
       $5 = $4 ^ -1;
       $8 = $41;
       $9 = $8 ^ -1;
       $4 = $6;
       $6 = $9 + $4 | 0;
       $8 = $5;
       $7 = $8;
       $41 = $6;
       $7 = $6 >>> 0 < $9 >>> 0 ? $7 + 1 | 0 : $7;
       $28 = $7;
       $9 = $62;
       $8 = 0 - $9 | 0;
       $4 = $46;
       $6 = $4 + (0 < $9 >>> 0) | 0;
       $6 = 0 - $6 | 0;
      }
      $79 = $8;
      $87 = $6;
      $7 = $59;
      $9 = $21;
      $4 = $7 - $9 | 0;
      $15 = $4;
      $6 = $65;
      $5 = $22;
      $8 = $5 + ($7 >>> 0 < $9 >>> 0) | 0;
      $8 = $6 - $8 | 0;
      $17 = $8;
      $13 = !($5 | $9);
      $6 = $29;
      $81 = $6 ^ -1;
      $8 = $31;
      $7 = $8 ^ -1;
      $70 = $7;
      $7 = $40;
      $6 = $58;
      $6 = __wasm_i64_mul($39, $7, $74, $6);
      $29 = $6;
      $7 = i64toi32_i32$HIGH_BITS;
      $31 = $7;
      $6 = $7 >> 31;
      $22 = $6;
      $6 = $7;
      $8 = $22;
      $4 = $6 + $8 | 0;
      $21 = $6 >> 31;
      $9 = $21;
      $7 = $29;
      $5 = $9 + $7 | 0;
      if ($5 >>> 0 < $9 >>> 0) {
       $4 = $4 + 1 | 0;
      }
      $9 = $21;
      $21 = $5 ^ $9;
      $7 = $22;
      $7 = $7 ^ $4;
      $4 = $21;
      $62 = $4;
      $6 = 0;
      $46 = $6;
      $4 = $52;
      $4 = __wasm_i64_mul($21, $6, $50, $4);
      $74 = $4;
      $6 = i64toi32_i32$HIGH_BITS;
      $58 = $6;
      $4 = 0;
      $5 = $4;
      $4 = $7;
      $21 = $4;
      $7 = 0;
      $22 = $7;
      $6 = $52;
      $6 = __wasm_i64_mul($4, $7, $50, $6);
      $9 = $6;
      $7 = i64toi32_i32$HIGH_BITS;
      $6 = $7;
      $7 = $5;
      $5 = $6 + $7 | 0;
      $4 = $58;
      $8 = $9 + $4 | 0;
      if ($8 >>> 0 < $9 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $9 = $8;
      $6 = $5;
      $5 = $22;
      $4 = $57;
      $4 = __wasm_i64_mul($21, $5, $51, $4);
      $21 = $4;
      $5 = i64toi32_i32$HIGH_BITS;
      $22 = $5;
      $4 = 0;
      $7 = $4;
      $4 = $6;
      $8 = $4 + $7 | 0;
      $5 = $9;
      $9 = $22;
      $6 = $5 + $9 | 0;
      if ($6 >>> 0 < $9 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $64 = $6;
      $58 = $8;
      $5 = 0;
      $22 = $5;
      $4 = 0;
      $6 = $4;
      $5 = $74;
      $8 = $21;
      $9 = $8;
      $7 = $5 + $9 | 0;
      $4 = $22;
      $8 = $6;
      $6 = $4 + $8 | 0;
      $21 = $7;
      $6 = $7 >>> 0 < $9 >>> 0 ? $6 + 1 | 0 : $6;
      $22 = $6;
      $5 = 0;
      $4 = $5;
      $5 = $58;
      $7 = $5 + $4 | 0;
      $6 = $64;
      $9 = $22;
      $8 = $6 + $9 | 0;
      if ($8 >>> 0 < $9 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $54 = $8;
      $64 = $7;
      $5 = $21;
      $21 = 0;
      $22 = $5;
      $6 = $57;
      $5 = $46;
      $5 = __wasm_i64_mul($51, $6, $62, $5);
      $9 = $5;
      $6 = i64toi32_i32$HIGH_BITS;
      $5 = $6;
      $6 = $22;
      $8 = $5 + $6 | 0;
      $7 = $21;
      $4 = $9 + $7 | 0;
      if ($4 >>> 0 < $9 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $74 = $4;
      $58 = $8;
      $7 = $22;
      $9 = $21;
      $7 = ($8 | 0) == ($7 | 0) & $4 >>> 0 < $9 >>> 0 | $8 >>> 0 < $7 >>> 0;
      $6 = $64;
      $4 = $6;
      $9 = $54;
      $5 = $9 + $7 | 0;
      if ($5 >>> 0 < $7 >>> 0) {
       $4 = $4 + 1 | 0;
      }
      $21 = $5;
      $22 = $4;
      $6 = $29;
      $4 = $31;
      if (((($4 | 0) < 0 ? 1 : ($4 | 0) <= 0 ? $6 >>> 0 >= 0 ? 0 : 1 : 0) | 0) == ($102 | 0)) {
       $7 = $74;
       $6 = $58;
       $8 = $6;
      } else {
       $6 = $58;
       $7 = !($6 | $74);
       $6 = $22;
       $4 = $6 ^ -1;
       $6 = $7;
       $7 = $21;
       $9 = $7 ^ -1;
       $8 = $6 + $9 | 0;
       $7 = $4;
       $5 = $7;
       $21 = $8;
       $5 = $8 >>> 0 < $9 >>> 0 ? $5 + 1 | 0 : $5;
       $22 = $5;
       $9 = $74;
       $7 = 0 - $9 | 0;
       $6 = $58;
       $8 = $6 + (0 < $9 >>> 0) | 0;
       $8 = 0 - $8 | 0;
      }
      $62 = $7;
      $46 = $8;
      $4 = $65;
      $8 = $17;
      $5 = $15;
      $9 = $59;
      $20 = ($4 | 0) == ($8 | 0) & $5 >>> 0 < $9 >>> 0 | $8 >>> 0 < $4 >>> 0;
      $54 = $13;
      $5 = $23;
      $8 = $70;
      $7 = $5 + $8 | 0;
      $9 = $19;
      $4 = $81;
      $6 = $9 + $4 | 0;
      if ($6 >>> 0 < $4 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $85 = $6;
      $75 = $7;
      $5 = $1;
      $7 = HEAP32[$5 + 48 >> 2];
      $9 = $7 >> 31;
      $103 = $7;
      $13 = $9;
      $9 = $40;
      $7 = $13;
      $7 = __wasm_i64_mul($39, $9, $103, $7);
      $29 = $7;
      $9 = i64toi32_i32$HIGH_BITS;
      $31 = $9;
      $19 = $9 >> 31;
      $7 = $9 >> 31;
      $23 = $7;
      $5 = $7;
      $7 = $9;
      $6 = $5 + $7 | 0;
      $9 = $29;
      $4 = $19;
      $8 = $9 + $4 | 0;
      if ($8 >>> 0 < $4 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $7 = $8;
      $19 = $19 ^ $7;
      $9 = $23;
      $9 = $9 ^ $6;
      $6 = $19;
      $59 = $6;
      $7 = 0;
      $65 = $7;
      $6 = $36;
      $6 = __wasm_i64_mul($19, $7, $33, $6);
      $74 = $6;
      $7 = i64toi32_i32$HIGH_BITS;
      $58 = $7;
      $6 = 0;
      $5 = $6;
      $6 = $9;
      $19 = $6;
      $9 = 0;
      $23 = $9;
      $7 = $36;
      $7 = __wasm_i64_mul($6, $9, $33, $7);
      $4 = $7;
      $9 = i64toi32_i32$HIGH_BITS;
      $7 = $9;
      $9 = $5;
      $8 = $9 + $7 | 0;
      $6 = $58;
      $5 = $6 + $4 | 0;
      if ($5 >>> 0 < $4 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $7 = $5;
      $4 = $8;
      $8 = $23;
      $6 = $71;
      $6 = __wasm_i64_mul($19, $8, $67, $6);
      $19 = $6;
      $8 = i64toi32_i32$HIGH_BITS;
      $6 = 0;
      $9 = $6;
      $6 = $4;
      $5 = $6 + $9 | 0;
      $4 = $8;
      $8 = $7;
      $7 = $4 + $8 | 0;
      if ($7 >>> 0 < $4 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $70 = $7;
      $58 = $5;
      $8 = 0;
      $5 = $19;
      $4 = $5;
      $6 = $74;
      $9 = $4 + $6 | 0;
      $6 = 0;
      $5 = $6;
      $6 = $8;
      $7 = $5 + $6 | 0;
      $19 = $9;
      $7 = $9 >>> 0 < $4 >>> 0 ? $7 + 1 | 0 : $7;
      $23 = $7;
      $8 = 0;
      $6 = $8;
      $8 = $58;
      $9 = $6 + $8 | 0;
      $4 = $7;
      $7 = $70;
      $5 = $4 + $7 | 0;
      if ($5 >>> 0 < $4 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $64 = $5;
      $58 = $9;
      $8 = $19;
      $7 = $8;
      $19 = 0;
      $23 = $7;
      $7 = $65;
      $8 = $71;
      $8 = __wasm_i64_mul($59, $7, $67, $8);
      $4 = $8;
      $7 = i64toi32_i32$HIGH_BITS;
      $8 = $7;
      $7 = $23;
      $5 = $8 + $7 | 0;
      $9 = $19;
      $6 = $9 + $4 | 0;
      if ($6 >>> 0 < $4 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $81 = $6;
      $70 = $5;
      $9 = $23;
      $4 = $19;
      $9 = ($5 | 0) == ($9 | 0) & $6 >>> 0 < $4 >>> 0 | $5 >>> 0 < $9 >>> 0;
      $7 = $58;
      $6 = $7;
      $4 = $64;
      $8 = $9 + $4 | 0;
      if ($8 >>> 0 < $9 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $59 = $8;
      $65 = $6;
      $7 = $79;
      $9 = $62;
      $5 = $7 - $9 | 0;
      $19 = $5;
      $6 = $87;
      $4 = $46;
      $8 = $4 + ($7 >>> 0 < $9 >>> 0) | 0;
      $8 = $6 - $8 | 0;
      $23 = $8;
      $6 = $29;
      $8 = $31;
      if (((($8 | 0) < 0 ? 1 : ($8 | 0) <= 0 ? $6 >>> 0 >= 0 ? 0 : 1 : 0) | 0) == ($73 | 0)) {
       $9 = $81;
       $6 = $70;
       $4 = $6;
      } else {
       $6 = $70;
       $4 = !($6 | $81);
       $6 = $65;
       $8 = $6 ^ -1;
       $6 = $4;
       $9 = $59;
       $7 = $9 ^ -1;
       $4 = $6 + $7 | 0;
       $9 = $8;
       $5 = $9;
       $59 = $4;
       $5 = $4 >>> 0 < $7 >>> 0 ? $5 + 1 | 0 : $5;
       $65 = $5;
       $7 = $81;
       $9 = 0 - $7 | 0;
       $6 = $70;
       $4 = $6 + (0 < $7 >>> 0) | 0;
       $4 = 0 - $4 | 0;
      }
      $74 = $9;
      $58 = $4;
      $4 = $17;
      $8 = $38;
      $9 = $4 + $8 | 0;
      $5 = $15;
      $7 = $45;
      $6 = $5 + $7 | 0;
      if ($6 >>> 0 < $7 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $15 = $6;
      $17 = $9;
      $105 = $20;
      $5 = $75;
      $6 = $5;
      $4 = $54;
      $7 = $85;
      $8 = $4 + $7 | 0;
      if ($8 >>> 0 < $7 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $106 = $8;
      $107 = $6;
      $6 = $69;
      $4 = $13;
      $4 = __wasm_i64_mul($68, $6, $103, $4);
      $81 = $4;
      $6 = i64toi32_i32$HIGH_BITS;
      $70 = $6;
      $29 = $6 >> 31;
      $4 = $6 >> 31;
      $31 = $4;
      $9 = $4;
      $4 = $6;
      $8 = $9 + $4 | 0;
      $6 = $81;
      $7 = $29;
      $5 = $6 + $7 | 0;
      if ($5 >>> 0 < $7 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $4 = $5;
      $29 = $4 ^ $29;
      $6 = $31;
      $6 = $8 ^ $6;
      $8 = $29;
      $54 = $8;
      $4 = 0;
      $64 = $4;
      $8 = $63;
      $8 = __wasm_i64_mul($29, $4, $60, $8);
      $85 = $8;
      $4 = i64toi32_i32$HIGH_BITS;
      $75 = $4;
      $8 = 0;
      $5 = $8;
      $8 = $6;
      $29 = $6;
      $6 = 0;
      $31 = $6;
      $4 = $63;
      $4 = __wasm_i64_mul($8, $6, $60, $4);
      $7 = $4;
      $6 = i64toi32_i32$HIGH_BITS;
      $4 = $6;
      $6 = $5;
      $5 = $6 + $4 | 0;
      $8 = $75;
      $9 = $8 + $7 | 0;
      if ($9 >>> 0 < $7 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $7 = $9;
      $4 = $5;
      $5 = $31;
      $8 = $66;
      $8 = __wasm_i64_mul($29, $5, $61, $8);
      $29 = $8;
      $5 = i64toi32_i32$HIGH_BITS;
      $31 = $5;
      $8 = 0;
      $6 = $8;
      $8 = $4;
      $9 = $6 + $8 | 0;
      $5 = $7;
      $7 = $31;
      $4 = $5 + $7 | 0;
      if ($4 >>> 0 < $7 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $75 = $4;
      $13 = $9;
      $5 = 0;
      $4 = $5;
      $8 = $85;
      $5 = $8;
      $9 = $29;
      $7 = $9;
      $6 = $5 + $7 | 0;
      $8 = 0;
      $9 = $8;
      $8 = $4;
      $4 = $9 + $8 | 0;
      $29 = $6;
      $4 = $6 >>> 0 < $7 >>> 0 ? $4 + 1 | 0 : $4;
      $31 = $4;
      $5 = 0;
      $8 = $5;
      $5 = $13;
      $6 = $5 + $8 | 0;
      $4 = $75;
      $7 = $31;
      $9 = $4 + $7 | 0;
      if ($9 >>> 0 < $7 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $20 = $9;
      $13 = $6;
      $5 = $29;
      $4 = $5;
      $29 = 0;
      $31 = $4;
      $4 = $66;
      $5 = $64;
      $5 = __wasm_i64_mul($61, $4, $54, $5);
      $7 = $5;
      $4 = i64toi32_i32$HIGH_BITS;
      $5 = $4;
      $4 = $31;
      $9 = $5 + $4 | 0;
      $6 = $29;
      $8 = $6 + $7 | 0;
      if ($8 >>> 0 < $7 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $85 = $8;
      $6 = $31;
      $75 = $9;
      $4 = $8;
      $7 = $29;
      $6 = ($6 | 0) == ($9 | 0) & $4 >>> 0 < $7 >>> 0 | $9 >>> 0 < $6 >>> 0;
      $4 = $13;
      $8 = $4;
      $7 = $20;
      $5 = $6 + $7 | 0;
      if ($5 >>> 0 < $6 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $54 = $5;
      $64 = $8;
      $8 = $23;
      $7 = $58;
      $5 = $8 + $7 | 0;
      $6 = $74;
      $4 = $19;
      $9 = $6 + $4 | 0;
      if ($9 >>> 0 < $6 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $29 = $9;
      $31 = $5;
      $8 = $81;
      $5 = $70;
      if (((($5 | 0) < 0 ? 1 : ($5 | 0) <= 0 ? $8 >>> 0 >= 0 ? 0 : 1 : 0) | 0) == ($93 | 0)) {
       $6 = $85;
       $8 = $75;
       $7 = $8;
      } else {
       $8 = $75;
       $7 = !($8 | $85);
       $8 = $64;
       $5 = $8 ^ -1;
       $6 = $54;
       $4 = $6 ^ -1;
       $8 = $7;
       $7 = $4 + $8 | 0;
       $6 = $5;
       $54 = $7;
       $9 = $7 >>> 0 < $4 >>> 0 ? $6 + 1 | 0 : $6;
       $64 = $9;
       $4 = $85;
       $6 = 0 - $4 | 0;
       $8 = $75;
       $7 = $8 + (0 < $4 >>> 0) | 0;
       $7 = 0 - $7 | 0;
      }
      $81 = $6;
      $70 = $7;
      $5 = $38;
      $7 = $17;
      $9 = $15;
      $4 = $45;
      $13 = ($5 | 0) == ($7 | 0) & $9 >>> 0 < $4 >>> 0 | $7 >>> 0 < $5 >>> 0;
      $7 = $107;
      $6 = $7;
      $5 = $106;
      $4 = $105;
      $8 = $5 + $4 | 0;
      if ($8 >>> 0 < $5 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $85 = $8;
      $75 = $6;
      $6 = $23;
      $4 = $87;
      $9 = $19;
      $5 = $79;
      $20 = ($6 | 0) == ($4 | 0) & $9 >>> 0 < $5 >>> 0 | $6 >>> 0 < $4 >>> 0;
      $19 = $30;
      $9 = $32;
      $23 = $9;
      $45 = $44;
      $9 = $47;
      $38 = $9;
      if (!$10) {
       $9 = $32;
       $4 = !($9 | $30);
       $9 = $47;
       $6 = $9 ^ -1;
       $9 = $4;
       $5 = $44;
       $4 = $5 ^ -1;
       $7 = $9 + $4 | 0;
       $5 = $6;
       $45 = $7;
       $8 = $7 >>> 0 < $4 >>> 0 ? $5 + 1 | 0 : $5;
       $38 = $8;
       $4 = $30;
       $5 = 0 - $4 | 0;
       $19 = $5;
       $9 = $32;
       $7 = $9 + (0 < $4 >>> 0) | 0;
       $7 = 0 - $7 | 0;
       $23 = $7;
      }
      $7 = $46;
      $103 = !($7 | $62);
      $6 = $58;
      $7 = $31;
      $8 = $29;
      $4 = $74;
      $105 = ($6 | 0) == ($7 | 0) & $8 >>> 0 < $4 >>> 0 | $7 >>> 0 < $6 >>> 0;
      $79 = $13;
      $8 = $43;
      $7 = $75;
      $5 = $8 + $7 | 0;
      $6 = $85;
      $4 = $37;
      $9 = $6 + $4 | 0;
      if ($9 >>> 0 < $6 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $62 = $9;
      $46 = $5;
      $8 = $21;
      $74 = $8 ^ -1;
      $5 = $22;
      $4 = $5 ^ -1;
      $58 = $4;
      $85 = $20;
      $4 = $38;
      $8 = $130;
      $8 = __wasm_i64_mul($45, $4, $117, $8);
      $43 = $8;
      $4 = i64toi32_i32$HIGH_BITS;
      $7 = $4;
      $4 = $23;
      $21 = $4;
      $8 = 0;
      $22 = $8;
      $5 = $119;
      $5 = __wasm_i64_mul($4, $8, $118, $5);
      $6 = $5;
      $8 = i64toi32_i32$HIGH_BITS;
      $5 = $8;
      $8 = $7;
      $9 = $5 + $8 | 0;
      $4 = $43;
      $7 = $6 + $4 | 0;
      if ($7 >>> 0 < $6 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $5 = $7;
      $6 = $9;
      $8 = $19;
      $19 = $8;
      $4 = 0;
      $23 = $4;
      $8 = $119;
      $8 = __wasm_i64_mul($19, $4, $118, $8);
      $37 = $8;
      $4 = i64toi32_i32$HIGH_BITS;
      $8 = 0;
      $9 = $8;
      $8 = $6;
      $7 = $9 + $8 | 0;
      $6 = $4;
      $4 = $5;
      $5 = $6 + $4 | 0;
      if ($5 >>> 0 < $6 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $9 = $5;
      $6 = $7;
      $7 = $22;
      $4 = $121;
      $4 = __wasm_i64_mul($21, $7, $120, $4);
      $21 = $4;
      $7 = i64toi32_i32$HIGH_BITS;
      $4 = 0;
      $8 = $4;
      $4 = $6;
      $5 = $4 + $8 | 0;
      $6 = $7;
      $7 = $9;
      $9 = $6 + $7 | 0;
      if ($9 >>> 0 < $6 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $38 = $9;
      $43 = $5;
      $7 = 0;
      $5 = $21;
      $6 = $5;
      $4 = $37;
      $8 = $5 + $4 | 0;
      $4 = 0;
      $5 = $4;
      $4 = $7;
      $9 = $5 + $4 | 0;
      $21 = $8;
      $9 = $8 >>> 0 < $6 >>> 0 ? $9 + 1 | 0 : $9;
      $22 = $9;
      $7 = 0;
      $4 = $7;
      $7 = $43;
      $8 = $4 + $7 | 0;
      $6 = $9;
      $9 = $38;
      $5 = $6 + $9 | 0;
      if ($5 >>> 0 < $6 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $45 = $5;
      $38 = $8;
      $7 = $21;
      $21 = 0;
      $22 = $7;
      $9 = $23;
      $7 = $121;
      $7 = __wasm_i64_mul($19, $9, $120, $7);
      $6 = $7;
      $9 = i64toi32_i32$HIGH_BITS;
      $7 = $9;
      $9 = $22;
      $5 = $9 + $7 | 0;
      $8 = $21;
      $4 = $6 + $8 | 0;
      if ($4 >>> 0 < $6 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $37 = $4;
      $43 = $5;
      $8 = $22;
      $6 = $21;
      $8 = ($5 | 0) == ($8 | 0) & $4 >>> 0 < $6 >>> 0 | $5 >>> 0 < $8 >>> 0;
      $9 = $38;
      $4 = $9;
      $6 = $45;
      $7 = $6 + $8 | 0;
      if ($7 >>> 0 < $8 >>> 0) {
       $4 = $4 + 1 | 0;
      }
      $19 = $7;
      $23 = $4;
      if ((($95 | 0) < 0 | 0) == ($11 | 0)) {
       $9 = $37;
       $4 = $43;
       $5 = $4;
      } else {
       $4 = $43;
       $7 = !($4 | $37);
       $4 = $23;
       $6 = $4 ^ -1;
       $4 = $7;
       $9 = $19;
       $8 = $9 ^ -1;
       $5 = $4 + $8 | 0;
       $9 = $6;
       $7 = $9;
       $19 = $5;
       $7 = $5 >>> 0 < $8 >>> 0 ? $7 + 1 | 0 : $7;
       $23 = $7;
       $8 = $37;
       $9 = 0 - $8 | 0;
       $4 = $43;
       $5 = $4 + (0 < $8 >>> 0) | 0;
       $5 = 0 - $5 | 0;
      }
      $21 = $9;
      $22 = $5;
      $7 = $15;
      $8 = $78;
      $4 = $7 - $8 | 0;
      $37 = $4;
      $5 = $17;
      $6 = $86;
      $9 = $6 + ($7 >>> 0 < $8 >>> 0) | 0;
      $9 = $5 - $9 | 0;
      $43 = $9;
      $13 = !($6 | $8);
      $5 = $34;
      $78 = $5 ^ -1;
      $9 = $35;
      $7 = $9 ^ -1;
      $86 = $7;
      $7 = $46;
      $4 = $7;
      $9 = $62;
      $8 = $79;
      $6 = $9 + $8 | 0;
      if ($6 >>> 0 < $8 >>> 0) {
       $4 = $4 + 1 | 0;
      }
      $79 = $6;
      $87 = $4;
      $7 = $29;
      $8 = $81;
      $5 = $7 - $8 | 0;
      $45 = $5;
      $4 = $31;
      $9 = $70;
      $6 = $9 + ($7 >>> 0 < $8 >>> 0) | 0;
      $6 = $4 - $6 | 0;
      $38 = $6;
      $6 = $9;
      $20 = !($6 | $8);
      $4 = $54;
      $62 = $4 ^ -1;
      $6 = $64;
      $7 = $6 ^ -1;
      $46 = $7;
      $6 = $1;
      $7 = HEAP32[$6 + 36 >> 2];
      $4 = $7 >> 31;
      $81 = $7;
      $70 = $4;
      $4 = $69;
      $7 = $70;
      $7 = __wasm_i64_mul($68, $4, $81, $7);
      $34 = $7;
      $4 = i64toi32_i32$HIGH_BITS;
      $35 = $4;
      $54 = $4 >> 31;
      $7 = $4 >> 31;
      $64 = $7;
      $6 = $7;
      $5 = $6 + $4 | 0;
      $4 = $34;
      $8 = $54;
      $9 = $4 + $8 | 0;
      if ($9 >>> 0 < $8 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $7 = $9;
      $54 = $54 ^ $7;
      $4 = $64;
      $4 = $4 ^ $5;
      $5 = $54;
      $106 = $5;
      $7 = 0;
      $107 = $7;
      $5 = $26;
      $5 = __wasm_i64_mul($54, $7, $24, $5);
      $108 = $5;
      $7 = i64toi32_i32$HIGH_BITS;
      $75 = $7;
      $5 = 0;
      $6 = $5;
      $5 = $4;
      $54 = $4;
      $4 = 0;
      $64 = $4;
      $7 = $26;
      $7 = __wasm_i64_mul($5, $4, $24, $7);
      $8 = $7;
      $4 = i64toi32_i32$HIGH_BITS;
      $7 = $4;
      $4 = $6;
      $9 = $4 + $7 | 0;
      $5 = $75;
      $6 = $5 + $8 | 0;
      if ($6 >>> 0 < $8 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $7 = $6;
      $6 = $9;
      $9 = $64;
      $5 = $80;
      $5 = __wasm_i64_mul($54, $9, $76, $5);
      $24 = $5;
      $9 = i64toi32_i32$HIGH_BITS;
      $26 = $9;
      $5 = 0;
      $4 = $5;
      $5 = $6;
      $6 = $5 + $4 | 0;
      $9 = $7;
      $8 = $26;
      $7 = $9 + $8 | 0;
      if ($7 >>> 0 < $8 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $54 = $7;
      $64 = $6;
      $9 = 0;
      $26 = $9;
      $5 = 0;
      $7 = $5;
      $9 = $108;
      $6 = $24;
      $8 = $6;
      $4 = $9 + $6 | 0;
      $5 = $26;
      $6 = $7;
      $7 = $5 + $6 | 0;
      $24 = $4;
      $7 = $4 >>> 0 < $8 >>> 0 ? $7 + 1 | 0 : $7;
      $26 = $7;
      $9 = 0;
      $5 = $9;
      $9 = $64;
      $4 = $5 + $9 | 0;
      $8 = $7;
      $7 = $54;
      $6 = $8 + $7 | 0;
      if ($6 >>> 0 < $8 >>> 0) {
       $4 = $4 + 1 | 0;
      }
      $108 = $6;
      $75 = $4;
      $9 = $24;
      $7 = $9;
      $64 = $7;
      $54 = 0;
      $7 = $80;
      $9 = $107;
      $9 = __wasm_i64_mul($76, $7, $106, $9);
      $8 = $9;
      $7 = i64toi32_i32$HIGH_BITS;
      $9 = $7;
      $7 = $24;
      $6 = $9 + $7 | 0;
      $4 = $54;
      $5 = $4 + $8 | 0;
      if ($5 >>> 0 < $8 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $24 = $5;
      $26 = $6;
      $4 = $64;
      $8 = $54;
      $4 = ($6 | 0) == ($4 | 0) & $5 >>> 0 < $8 >>> 0 | $6 >>> 0 < $4 >>> 0;
      $7 = $75;
      $5 = $7;
      $8 = $108;
      $9 = $4 + $8 | 0;
      if ($9 >>> 0 < $4 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $76 = $9;
      $80 = $5;
      $5 = $28;
      $8 = $58;
      $9 = $5 + $8 | 0;
      $4 = $74;
      $7 = $41;
      $6 = $4 + $7 | 0;
      if ($6 >>> 0 < $4 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $5 = $6;
      $6 = $9;
      $4 = $103;
      $8 = $5 + $4 | 0;
      if ($8 >>> 0 < $4 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $9 = $8;
      $8 = $6;
      $4 = $85;
      $7 = $9 + $4 | 0;
      if ($7 >>> 0 < $4 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $6 = $7;
      $9 = $65;
      $7 = $8 + $9 | 0;
      $4 = $59;
      $5 = $6 + $4 | 0;
      if ($5 >>> 0 < $4 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $8 = $5;
      $5 = $7;
      $4 = $105;
      $9 = $4 + $8 | 0;
      if ($9 >>> 0 < $4 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $41 = $9;
      $28 = $5;
      $7 = $34;
      $5 = $35;
      if (((($5 | 0) < 0 ? 1 : ($5 | 0) <= 0 ? $7 >>> 0 >= 0 ? 0 : 1 : 0) | 0) == ($84 | 0)) {
       $4 = $24;
       $7 = $26;
       $6 = $7;
      } else {
       $7 = $26;
       $6 = !($7 | $24);
       $7 = $80;
       $5 = $7 ^ -1;
       $4 = $76;
       $8 = $4 ^ -1;
       $7 = $6;
       $6 = $8 + $7 | 0;
       $4 = $5;
       $76 = $6;
       $9 = $6 >>> 0 < $8 >>> 0 ? $4 + 1 | 0 : $4;
       $80 = $9;
       $8 = $24;
       $4 = 0 - $8 | 0;
       $7 = $26;
       $6 = $7 + (0 < $8 >>> 0) | 0;
       $6 = 0 - $6 | 0;
      }
      $59 = $4;
      $65 = $6;
      $5 = $17;
      $6 = $43;
      $9 = $37;
      $8 = $15;
      $84 = ($5 | 0) == ($6 | 0) & $9 >>> 0 < $8 >>> 0 | $6 >>> 0 < $5 >>> 0;
      $34 = $13;
      $6 = $87;
      $9 = $86;
      $4 = $6 + $9 | 0;
      $5 = $79;
      $8 = $78;
      $7 = $5 + $8 | 0;
      if ($7 >>> 0 < $5 >>> 0) {
       $4 = $4 + 1 | 0;
      }
      $78 = $7;
      $86 = $4;
      $4 = $38;
      $8 = $31;
      $9 = $45;
      $5 = $29;
      $13 = ($4 | 0) == ($8 | 0) & $9 >>> 0 < $5 >>> 0 | $4 >>> 0 < $8 >>> 0;
      $29 = $20;
      $9 = $28;
      $4 = $46;
      $7 = $9 + $4 | 0;
      $5 = $41;
      $8 = $62;
      $6 = $5 + $8 | 0;
      if ($6 >>> 0 < $8 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $41 = $6;
      $28 = $7;
      $7 = $40;
      $5 = $70;
      $5 = __wasm_i64_mul($39, $7, $81, $5);
      $24 = $5;
      $7 = i64toi32_i32$HIGH_BITS;
      $26 = $7;
      $5 = $7 >> 31;
      $17 = $5;
      $5 = $7;
      $9 = $17;
      $6 = $5 + $9 | 0;
      $15 = $5 >> 31;
      $8 = $15;
      $7 = $24;
      $4 = $8 + $7 | 0;
      if ($4 >>> 0 < $8 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $8 = $15;
      $15 = $4 ^ $8;
      $7 = $17;
      $7 = $7 ^ $6;
      $6 = $15;
      $79 = $6;
      $5 = 0;
      $87 = $5;
      $6 = $52;
      $6 = __wasm_i64_mul($15, $5, $50, $6);
      $62 = $6;
      $5 = i64toi32_i32$HIGH_BITS;
      $46 = $5;
      $6 = 0;
      $4 = $6;
      $6 = $7;
      $15 = $6;
      $7 = 0;
      $17 = $7;
      $5 = $52;
      $5 = __wasm_i64_mul($6, $7, $50, $5);
      $8 = $5;
      $7 = i64toi32_i32$HIGH_BITS;
      $5 = $7;
      $7 = $4;
      $4 = $5 + $7 | 0;
      $6 = $46;
      $9 = $6 + $8 | 0;
      if ($9 >>> 0 < $8 >>> 0) {
       $4 = $4 + 1 | 0;
      }
      $8 = $9;
      $5 = $4;
      $4 = $17;
      $6 = $57;
      $6 = __wasm_i64_mul($15, $4, $51, $6);
      $50 = $6;
      $4 = i64toi32_i32$HIGH_BITS;
      $52 = $4;
      $6 = 0;
      $7 = $6;
      $6 = $5;
      $9 = $6 + $7 | 0;
      $4 = $8;
      $8 = $52;
      $5 = $4 + $8 | 0;
      if ($5 >>> 0 < $8 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $31 = $5;
      $15 = $9;
      $4 = 0;
      $17 = $4;
      $6 = 0;
      $5 = $6;
      $4 = $62;
      $9 = $50;
      $8 = $9;
      $7 = $4 + $8 | 0;
      $6 = $17;
      $9 = $5;
      $5 = $6 + $9 | 0;
      $50 = $7;
      $5 = $7 >>> 0 < $8 >>> 0 ? $5 + 1 | 0 : $5;
      $52 = $5;
      $4 = 0;
      $6 = $4;
      $4 = $15;
      $7 = $6 + $4 | 0;
      $5 = $31;
      $8 = $52;
      $9 = $5 + $8 | 0;
      if ($9 >>> 0 < $8 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $35 = $9;
      $31 = $7;
      $4 = $50;
      $50 = 0;
      $52 = $4;
      $5 = $57;
      $4 = $87;
      $4 = __wasm_i64_mul($51, $5, $79, $4);
      $8 = $4;
      $5 = i64toi32_i32$HIGH_BITS;
      $4 = $5;
      $5 = $52;
      $9 = $5 + $4 | 0;
      $7 = $50;
      $6 = $8 + $7 | 0;
      if ($6 >>> 0 < $8 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $15 = $6;
      $17 = $9;
      $7 = $52;
      $5 = $6;
      $8 = $50;
      $7 = ($9 | 0) == ($7 | 0) & $5 >>> 0 < $8 >>> 0 | $9 >>> 0 < $7 >>> 0;
      $5 = $31;
      $6 = $5;
      $8 = $35;
      $4 = $8 + $7 | 0;
      if ($4 >>> 0 < $7 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $51 = $4;
      $57 = $6;
      $5 = $24;
      $6 = $26;
      if (((($6 | 0) < 0 ? 1 : ($6 | 0) <= 0 ? $5 >>> 0 >= 0 ? 0 : 1 : 0) | 0) == ($102 | 0)) {
       $7 = $15;
       $5 = $17;
       $9 = $5;
      } else {
       $5 = $17;
       $4 = !($5 | $15);
       $5 = $57;
       $6 = $5 ^ -1;
       $5 = $4;
       $7 = $51;
       $8 = $7 ^ -1;
       $9 = $5 + $8 | 0;
       $7 = $6;
       $4 = $7;
       $51 = $9;
       $4 = $9 >>> 0 < $8 >>> 0 ? $4 + 1 | 0 : $4;
       $57 = $4;
       $8 = $15;
       $7 = 0 - $8 | 0;
       $5 = $17;
       $9 = $5 + (0 < $8 >>> 0) | 0;
       $9 = 0 - $9 | 0;
      }
      $50 = $7;
      $52 = $9;
      $79 = $84;
      $6 = $86;
      $7 = $6;
      $4 = $34;
      $8 = $78;
      $5 = $4 + $8 | 0;
      if ($5 >>> 0 < $8 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $34 = $5;
      $35 = $7;
      $4 = $101;
      $7 = $43;
      $5 = $4 + $7 | 0;
      $9 = $37;
      $8 = $92;
      $6 = $9 + $8 | 0;
      if ($6 >>> 0 < $8 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $15 = $6;
      $17 = $5;
      $78 = $13;
      $9 = $28;
      $6 = $9;
      $8 = $41;
      $7 = $29;
      $4 = $8 + $7 | 0;
      if ($4 >>> 0 < $8 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $41 = $4;
      $28 = $6;
      $6 = $22;
      $7 = $38;
      $4 = $6 + $7 | 0;
      $5 = $21;
      $8 = $45;
      $9 = $5 + $8 | 0;
      if ($9 >>> 0 < $8 >>> 0) {
       $4 = $4 + 1 | 0;
      }
      $29 = $9;
      $31 = $4;
      $6 = $1;
      $4 = HEAP32[$6 + 52 >> 2];
      $5 = $4 >> 31;
      $45 = $4;
      $38 = $5;
      $5 = $40;
      $4 = $38;
      $4 = __wasm_i64_mul($39, $5, $45, $4);
      $24 = $4;
      $5 = i64toi32_i32$HIGH_BITS;
      $26 = $5;
      $39 = $5 >> 31;
      $4 = $5 >> 31;
      $40 = $4;
      $6 = $4;
      $4 = $5;
      $9 = $6 + $4 | 0;
      $5 = $24;
      $8 = $39;
      $7 = $5 + $8 | 0;
      if ($7 >>> 0 < $8 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $4 = $7;
      $39 = $4 ^ $39;
      $5 = $40;
      $5 = $9 ^ $5;
      $9 = $39;
      $37 = $9;
      $4 = 0;
      $43 = $4;
      $9 = $36;
      $9 = __wasm_i64_mul($39, $4, $33, $9);
      $62 = $9;
      $4 = i64toi32_i32$HIGH_BITS;
      $46 = $4;
      $9 = 0;
      $6 = $9;
      $9 = $5;
      $39 = $5;
      $5 = 0;
      $40 = $5;
      $4 = $36;
      $4 = __wasm_i64_mul($9, $5, $33, $4);
      $8 = $4;
      $5 = i64toi32_i32$HIGH_BITS;
      $4 = $5;
      $5 = $6;
      $7 = $5 + $4 | 0;
      $9 = $46;
      $6 = $9 + $8 | 0;
      if ($6 >>> 0 < $8 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $36 = $6;
      $4 = $7;
      $7 = $40;
      $9 = $71;
      $9 = __wasm_i64_mul($39, $7, $67, $9);
      $33 = $9;
      $7 = i64toi32_i32$HIGH_BITS;
      $9 = 0;
      $5 = $9;
      $9 = $4;
      $6 = $5 + $9 | 0;
      $8 = $7;
      $7 = $36;
      $4 = $8 + $7 | 0;
      if ($4 >>> 0 < $8 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $46 = $4;
      $40 = $6;
      $7 = 0;
      $4 = $7;
      $6 = $33;
      $8 = $6;
      $9 = $62;
      $7 = $9;
      $5 = $6 + $7 | 0;
      $9 = 0;
      $6 = $9;
      $9 = $4;
      $4 = $6 + $9 | 0;
      $33 = $5;
      $4 = $5 >>> 0 < $8 >>> 0 ? $4 + 1 | 0 : $4;
      $36 = $4;
      $7 = 0;
      $9 = $7;
      $7 = $40;
      $5 = $9 + $7 | 0;
      $4 = $46;
      $8 = $36;
      $6 = $4 + $8 | 0;
      if ($6 >>> 0 < $8 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $46 = $6;
      $40 = $5;
      $7 = $33;
      $4 = $7;
      $33 = 0;
      $36 = $4;
      $4 = $43;
      $7 = $71;
      $7 = __wasm_i64_mul($37, $4, $67, $7);
      $8 = $7;
      $4 = i64toi32_i32$HIGH_BITS;
      $7 = $4;
      $4 = $36;
      $6 = $4 + $7 | 0;
      $5 = $33;
      $9 = $5 + $8 | 0;
      if ($9 >>> 0 < $8 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $37 = $9;
      $5 = $36;
      $43 = $6;
      $4 = $9;
      $8 = $33;
      $5 = ($5 | 0) == ($6 | 0) & $4 >>> 0 < $8 >>> 0 | $6 >>> 0 < $5 >>> 0;
      $4 = $40;
      $9 = $4;
      $8 = $46;
      $7 = $5 + $8 | 0;
      if ($7 >>> 0 < $5 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $67 = $7;
      $71 = $9;
      $4 = $59;
      $5 = $50;
      $6 = $4 - $5 | 0;
      $33 = $6;
      $9 = $65;
      $8 = $52;
      $7 = $8 + ($4 >>> 0 < $5 >>> 0) | 0;
      $7 = $9 - $7 | 0;
      $36 = $7;
      $9 = $24;
      $7 = $26;
      if (((($7 | 0) < 0 ? 1 : ($7 | 0) <= 0 ? $9 >>> 0 >= 0 ? 0 : 1 : 0) | 0) == ($73 | 0)) {
       $5 = $37;
       $9 = $43;
       $8 = $9;
      } else {
       $9 = $43;
       $4 = !($9 | $37);
       $9 = $71;
       $7 = $9 ^ -1;
       $9 = $4;
       $5 = $67;
       $4 = $5 ^ -1;
       $8 = $9 + $4 | 0;
       $5 = $7;
       $67 = $8;
       $6 = $8 >>> 0 < $4 >>> 0 ? $5 + 1 | 0 : $5;
       $71 = $6;
       $4 = $37;
       $5 = 0 - $4 | 0;
       $9 = $43;
       $8 = $9 + (0 < $4 >>> 0) | 0;
       $8 = 0 - $8 | 0;
      }
      $39 = $5;
      $40 = $8;
      $8 = $35;
      $5 = $8;
      $6 = $34;
      $4 = $79;
      $9 = $6 + $4 | 0;
      if ($9 >>> 0 < $4 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $37 = $9;
      $43 = $5;
      $5 = $17;
      $6 = $101;
      $8 = $15;
      $4 = $92;
      $13 = ($5 | 0) == ($6 | 0) & $8 >>> 0 < $4 >>> 0 | $5 >>> 0 < $6 >>> 0;
      $8 = $28;
      $9 = $8;
      $6 = $78;
      $4 = $41;
      $7 = $6 + $4 | 0;
      if ($7 >>> 0 < $6 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $34 = $7;
      $35 = $9;
      $9 = $31;
      $4 = $22;
      $8 = $29;
      $6 = $21;
      $20 = ($9 | 0) == ($4 | 0) & $8 >>> 0 < $6 >>> 0 | $9 >>> 0 < $4 >>> 0;
      $8 = $38;
      $9 = $69;
      $9 = __wasm_i64_mul($45, $8, $68, $9);
      $68 = $9;
      $8 = i64toi32_i32$HIGH_BITS;
      $69 = $8;
      $9 = $8 >> 31;
      $26 = $9;
      $6 = $9;
      $9 = $8;
      $7 = $6 + $9 | 0;
      $24 = $9 >> 31;
      $4 = $24;
      $8 = $68;
      $5 = $4 + $8 | 0;
      if ($5 >>> 0 < $4 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $4 = $24;
      $24 = $5 ^ $4;
      $8 = $26;
      $8 = $7 ^ $8;
      $7 = $24;
      $21 = $7;
      $9 = 0;
      $22 = $9;
      $7 = $63;
      $7 = __wasm_i64_mul($21, $9, $60, $7);
      $45 = $7;
      $9 = i64toi32_i32$HIGH_BITS;
      $38 = $9;
      $7 = 0;
      $6 = $7;
      $7 = $8;
      $24 = $7;
      $8 = 0;
      $26 = $8;
      $9 = $63;
      $9 = __wasm_i64_mul($7, $8, $60, $9);
      $4 = $9;
      $8 = i64toi32_i32$HIGH_BITS;
      $9 = $8;
      $8 = $6;
      $5 = $9 + $8 | 0;
      $7 = $38;
      $6 = $4 + $7 | 0;
      if ($6 >>> 0 < $4 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $9 = $6;
      $4 = $5;
      $5 = $26;
      $7 = $66;
      $7 = __wasm_i64_mul($24, $5, $61, $7);
      $24 = $7;
      $5 = i64toi32_i32$HIGH_BITS;
      $26 = $5;
      $7 = 0;
      $8 = $7;
      $7 = $4;
      $6 = $8 + $7 | 0;
      $5 = $9;
      $4 = $26;
      $9 = $5 + $4 | 0;
      if ($9 >>> 0 < $4 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $28 = $9;
      $38 = $6;
      $5 = 0;
      $9 = $5;
      $7 = $45;
      $5 = $7;
      $6 = $24;
      $4 = $6;
      $8 = $5 + $4 | 0;
      $7 = 0;
      $6 = $7;
      $7 = $9;
      $9 = $6 + $7 | 0;
      $24 = $8;
      $9 = $8 >>> 0 < $4 >>> 0 ? $9 + 1 | 0 : $9;
      $26 = $9;
      $5 = 0;
      $7 = $5;
      $5 = $38;
      $8 = $5 + $7 | 0;
      $9 = $28;
      $4 = $26;
      $6 = $9 + $4 | 0;
      if ($6 >>> 0 < $4 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $28 = $6;
      $38 = $8;
      $5 = $24;
      $24 = 0;
      $26 = $5;
      $9 = $22;
      $5 = $66;
      $5 = __wasm_i64_mul($21, $9, $61, $5);
      $4 = $5;
      $9 = i64toi32_i32$HIGH_BITS;
      $5 = $9;
      $9 = $26;
      $6 = $5 + $9 | 0;
      $8 = $24;
      $7 = $4 + $8 | 0;
      if ($7 >>> 0 < $4 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $21 = $7;
      $22 = $6;
      $8 = $26;
      $4 = $24;
      $8 = ($6 | 0) == ($8 | 0) & $7 >>> 0 < $4 >>> 0 | $6 >>> 0 < $8 >>> 0;
      $9 = $38;
      $7 = $9;
      $4 = $28;
      $5 = $4 + $8 | 0;
      if ($5 >>> 0 < $8 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $60 = $5;
      $63 = $7;
      $4 = $40;
      $7 = $36;
      $5 = $4 + $7 | 0;
      $9 = $33;
      $8 = $39;
      $6 = $9 + $8 | 0;
      if ($6 >>> 0 < $8 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $24 = $6;
      $26 = $5;
      $7 = $68;
      $5 = $69;
      if (((($5 | 0) < 0 ? 1 : ($5 | 0) <= 0 ? $7 >>> 0 >= 0 ? 0 : 1 : 0) | 0) == ($93 | 0)) {
       $8 = $21;
       $7 = $22;
       $4 = $7;
      } else {
       $7 = $22;
       $4 = !($7 | $21);
       $7 = $63;
       $5 = $7 ^ -1;
       $8 = $60;
       $9 = $8 ^ -1;
       $7 = $4;
       $4 = $9 + $7 | 0;
       $8 = $5;
       $6 = $8;
       $60 = $4;
       $6 = $4 >>> 0 < $9 >>> 0 ? $6 + 1 | 0 : $6;
       $63 = $6;
       $9 = $21;
       $8 = 0 - $9 | 0;
       $7 = $22;
       $4 = $7 + (0 < $9 >>> 0) | 0;
       $4 = 0 - $4 | 0;
      }
      $61 = $8;
      $66 = $4;
      $5 = $42;
      $4 = $43;
      $8 = $5 + $4 | 0;
      $6 = $37;
      $9 = $49;
      $7 = $6 + $9 | 0;
      if ($7 >>> 0 < $9 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $68 = $7;
      $69 = $8;
      $21 = $13;
      $6 = $35;
      $8 = $23;
      $7 = $6 + $8 | 0;
      $9 = $34;
      $4 = $19;
      $5 = $9 + $4 | 0;
      if ($5 >>> 0 < $9 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $19 = $5;
      $23 = $7;
      $37 = $20;
      $4 = $65;
      $7 = $36;
      $8 = $33;
      $9 = $59;
      $13 = ($4 | 0) == ($7 | 0) & $8 >>> 0 < $9 >>> 0 | $7 >>> 0 < $4 >>> 0;
      $8 = $52;
      $20 = !($8 | $50);
      $8 = $26;
      $7 = $40;
      $9 = $24;
      $4 = $39;
      $73 = ($8 | 0) == ($7 | 0) & $9 >>> 0 < $4 >>> 0 | $8 >>> 0 < $7 >>> 0;
      $4 = $9;
      $7 = $61;
      $6 = $4 - $7 | 0;
      $50 = $6;
      $9 = $8;
      $8 = $66;
      $5 = $8 + ($4 >>> 0 < $7 >>> 0) | 0;
      $5 = $9 - $5 | 0;
      $52 = $5;
      $4 = $9;
      $7 = $24;
      $84 = ($5 | 0) == ($4 | 0) & $6 >>> 0 < $7 >>> 0 | $5 >>> 0 < $4 >>> 0;
      $93 = !($8 | $61);
      $24 = $30;
      $9 = $32;
      $26 = $9;
      $33 = $44;
      $9 = $47;
      $36 = $9;
      if (!$10) {
       $9 = $32;
       $4 = !($9 | $30);
       $9 = $47;
       $5 = $9 ^ -1;
       $9 = $4;
       $7 = $44;
       $4 = $7 ^ -1;
       $8 = $9 + $4 | 0;
       $7 = $5;
       $6 = $7;
       $33 = $8;
       $6 = $8 >>> 0 < $4 >>> 0 ? $6 + 1 | 0 : $6;
       $36 = $6;
       $4 = $30;
       $7 = 0 - $4 | 0;
       $24 = $7;
       $9 = $32;
       $8 = $9 + (0 < $4 >>> 0) | 0;
       $8 = 0 - $8 | 0;
       $26 = $8;
       $5 = 0;
      }
      $5 = $69;
      $7 = $5;
      $6 = $21;
      $4 = $68;
      $9 = $6 + $4 | 0;
      if ($9 >>> 0 < $4 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $61 = $9;
      $66 = $7;
      $7 = $23;
      $9 = $7;
      $4 = $37;
      $8 = $19;
      $5 = $4 + $8 | 0;
      if ($5 >>> 0 < $4 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $68 = $5;
      $69 = $9;
      $7 = $51;
      $39 = $7 ^ -1;
      $9 = $57;
      $8 = $9 ^ -1;
      $40 = $8;
      $19 = $13;
      $59 = $20;
      $21 = $73;
      $9 = $60;
      $60 = $9 ^ -1;
      $8 = $63;
      $7 = $8 ^ -1;
      $63 = $7;
      $37 = $84;
      $45 = $93;
      $7 = $36;
      $9 = $129;
      $9 = __wasm_i64_mul($33, $7, $112, $9);
      $22 = $9;
      $7 = i64toi32_i32$HIGH_BITS;
      $6 = $7;
      $7 = $26;
      $33 = $7;
      $9 = 0;
      $36 = $9;
      $8 = $114;
      $8 = __wasm_i64_mul($7, $9, $113, $8);
      $4 = $8;
      $9 = i64toi32_i32$HIGH_BITS;
      $8 = $9;
      $9 = $6;
      $5 = $9 + $8 | 0;
      $7 = $22;
      $6 = $4 + $7 | 0;
      if ($6 >>> 0 < $4 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $8 = $6;
      $4 = $5;
      $9 = $24;
      $24 = $9;
      $7 = 0;
      $26 = $7;
      $9 = $114;
      $9 = __wasm_i64_mul($24, $7, $113, $9);
      $51 = $9;
      $7 = i64toi32_i32$HIGH_BITS;
      $9 = 0;
      $5 = $9;
      $9 = $4;
      $6 = $5 + $9 | 0;
      $4 = $7;
      $7 = $8;
      $8 = $4 + $7 | 0;
      if ($8 >>> 0 < $4 >>> 0) {
       $6 = $6 + 1 | 0;
      }
      $5 = $8;
      $4 = $6;
      $6 = $36;
      $7 = $116;
      $7 = __wasm_i64_mul($33, $6, $115, $7);
      $33 = $7;
      $6 = i64toi32_i32$HIGH_BITS;
      $36 = $6;
      $7 = 0;
      $9 = $7;
      $7 = $4;
      $8 = $9 + $7 | 0;
      $6 = $5;
      $4 = $36;
      $5 = $6 + $4 | 0;
      if ($5 >>> 0 < $4 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $23 = $5;
      $22 = $8;
      $6 = 0;
      $5 = $6;
      $7 = $51;
      $6 = $7;
      $8 = $33;
      $4 = $8;
      $9 = $6 + $4 | 0;
      $7 = 0;
      $8 = $7;
      $7 = $5;
      $5 = $8 + $7 | 0;
      $33 = $9;
      $5 = $9 >>> 0 < $4 >>> 0 ? $5 + 1 | 0 : $5;
      $36 = $5;
      $6 = 0;
      $7 = $6;
      $6 = $22;
      $9 = $6 + $7 | 0;
      $5 = $23;
      $4 = $36;
      $8 = $5 + $4 | 0;
      if ($8 >>> 0 < $4 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $23 = $8;
      $22 = $9;
      $6 = $33;
      $5 = $6;
      $33 = 0;
      $36 = $5;
      $5 = $26;
      $6 = $116;
      $6 = __wasm_i64_mul($24, $5, $115, $6);
      $4 = $6;
      $5 = i64toi32_i32$HIGH_BITS;
      $6 = $5;
      $5 = $36;
      $8 = $5 + $6 | 0;
      $9 = $33;
      $7 = $9 + $4 | 0;
      if ($7 >>> 0 < $4 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $51 = $7;
      $9 = $36;
      $57 = $8;
      $5 = $7;
      $4 = $33;
      $9 = ($9 | 0) == ($8 | 0) & $5 >>> 0 < $4 >>> 0 | $8 >>> 0 < $9 >>> 0;
      $5 = $22;
      $7 = $5;
      $4 = $23;
      $6 = $9 + $4 | 0;
      if ($6 >>> 0 < $9 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $24 = $6;
      $26 = $7;
      if ((($97 | 0) < 0 | 0) == ($11 | 0)) {
       $33 = $51;
       $7 = $57;
       $8 = $7;
      } else {
       $7 = $57;
       $6 = !($7 | $51);
       $7 = $26;
       $4 = $7 ^ -1;
       $5 = $24;
       $9 = $5 ^ -1;
       $7 = $6;
       $8 = $9 + $7 | 0;
       $5 = $4;
       $24 = $8;
       $6 = $8 >>> 0 < $9 >>> 0 ? $5 + 1 | 0 : $5;
       $26 = $6;
       $9 = $51;
       $5 = 0 - $9 | 0;
       $33 = $5;
       $7 = $57;
       $8 = $7 + (0 < $9 >>> 0) | 0;
       $8 = 0 - $8 | 0;
      }
      $36 = $8;
      $4 = $14;
      HEAP32[$4 + 24 >> 2] = $15;
      $8 = $17;
      HEAP32[$4 + 28 >> 2] = $8;
      HEAP32[$4 + 80 >> 2] = $44;
      $8 = $47;
      HEAP32[$4 + 84 >> 2] = $8;
      $10 = $4 + 72 | 0;
      $4 = $10;
      HEAP32[$4 >> 2] = $30;
      $8 = $32;
      HEAP32[$4 + 4 >> 2] = $8;
      $11 = $14 + 56 | 0;
      $17 = $11;
      $4 = $52;
      $8 = $36;
      $5 = $4 + $8 | 0;
      $6 = $33;
      $9 = $50;
      $7 = $6 + $9 | 0;
      if ($7 >>> 0 < $9 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $32 = $5;
      $6 = $17;
      HEAP32[$6 >> 2] = $7;
      HEAP32[$6 + 4 >> 2] = $5;
      $6 = $14;
      HEAP32[$6 + 48 >> 2] = $68;
      $5 = $69;
      HEAP32[$6 + 52 >> 2] = $5;
      $13 = $6 + 40 | 0;
      $6 = $13;
      HEAP32[$6 >> 2] = $29;
      $5 = $31;
      HEAP32[$6 + 4 >> 2] = $5;
      $6 = $14;
      HEAP32[$6 + 32 >> 2] = $61;
      $5 = $66;
      HEAP32[$6 + 36 >> 2] = $5;
      $15 = $6 - -64 | 0;
      $5 = $32;
      $6 = $36;
      $9 = $33;
      $17 = ($5 | 0) == ($6 | 0) & $7 >>> 0 < $9 >>> 0 | $5 >>> 0 < $6 >>> 0;
      $5 = $80;
      $8 = $40;
      $7 = $5 + $8 | 0;
      $6 = $76;
      $9 = $39;
      $4 = $6 + $9 | 0;
      if ($4 >>> 0 < $6 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $8 = $4;
      $4 = $7;
      $6 = $59;
      $5 = $6 + $8 | 0;
      if ($5 >>> 0 < $6 >>> 0) {
       $4 = $4 + 1 | 0;
      }
      $7 = $5;
      $5 = $4;
      $6 = $19;
      $9 = $6 + $7 | 0;
      if ($9 >>> 0 < $6 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $4 = $9;
      $7 = $71;
      $9 = $7 + $5 | 0;
      $6 = $67;
      $8 = $6 + $4 | 0;
      if ($8 >>> 0 < $6 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $5 = $8;
      $8 = $9;
      $6 = $21;
      $7 = $5 + $6 | 0;
      if ($7 >>> 0 < $6 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $9 = $7;
      $5 = $63;
      $7 = $8 + $5 | 0;
      $6 = $60;
      $4 = $6 + $9 | 0;
      if ($4 >>> 0 < $6 >>> 0) {
       $7 = $7 + 1 | 0;
      }
      $8 = $4;
      $4 = $7;
      $6 = $45;
      $5 = $6 + $8 | 0;
      if ($5 >>> 0 < $6 >>> 0) {
       $4 = $4 + 1 | 0;
      }
      $7 = $5;
      $5 = $4;
      $6 = $37;
      $9 = $6 + $7 | 0;
      if ($9 >>> 0 < $6 >>> 0) {
       $5 = $5 + 1 | 0;
      }
      $4 = $9;
      $7 = $26;
      $9 = $7 + $5 | 0;
      $6 = $24;
      $8 = $6 + $4 | 0;
      if ($8 >>> 0 < $6 >>> 0) {
       $9 = $9 + 1 | 0;
      }
      $6 = $8;
      $4 = $9;
      $8 = $4;
      $5 = $17;
      $7 = $5 + $6 | 0;
      if ($7 >>> 0 < $6 >>> 0) {
       $8 = $8 + 1 | 0;
      }
      $5 = $15;
      HEAP32[$5 >> 2] = $7;
      HEAP32[$5 + 4 >> 2] = $8;
      $4 = $14;
      $55 = Math_fround(btConvexHullInternal__Int128__toScalar_28_29_20const($14 + 24 | 0) / btConvexHullInternal__Int128__toScalar_28_29_20const($10));
      label$71 : {
       if (Math_fround(Math_abs($55)) < Math_fround(2147483648)) {
        $20 = ~~$55;
        break label$71;
       }
       $20 = -2147483648;
      }
      HEAP32[$4 + 88 >> 2] = $20;
      $4 = $14;
      $55 = Math_fround(btConvexHullInternal__Int128__toScalar_28_29_20const($13) / btConvexHullInternal__Int128__toScalar_28_29_20const($10));
      label$73 : {
       if (Math_fround(Math_abs($55)) < Math_fround(2147483648)) {
        $13 = ~~$55;
        break label$73;
       }
       $13 = -2147483648;
      }
      HEAP32[$4 + 92 >> 2] = $13;
      $4 = $14;
      $55 = Math_fround(btConvexHullInternal__Int128__toScalar_28_29_20const($11) / btConvexHullInternal__Int128__toScalar_28_29_20const($10));
      label$75 : {
       if (Math_fround(Math_abs($55)) < Math_fround(2147483648)) {
        $10 = ~~$55;
        break label$75;
       }
       $10 = -2147483648;
      }
      HEAP32[$4 + 96 >> 2] = $10;
      HEAP32[$12 + 12 >> 2] = $14;
      HEAP32[$14 + 8 >> 2] = $3;
      $11 = HEAP32[$56 + 8 >> 2];
      $13 = HEAP32[$27 + 4 >> 2];
      label$77 : {
       if (($11 | 0) != ($13 | 0)) {
        break label$77;
       }
       $11 = $13 ? $13 << 1 : 1;
       if (($13 | 0) >= ($11 | 0)) {
        $11 = $13;
        break label$77;
       }
       $10 = 0;
       $3 = 0;
       if ($11) {
        $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($11 << 2, 16);
        $13 = HEAP32[$27 + 4 >> 2];
       }
       if (($13 | 0) >= 1) {
        while (1) {
         $20 = $10 << 2;
         HEAP32[$20 + $3 >> 2] = HEAP32[HEAP32[$18 + 12 >> 2] + $20 >> 2];
         $10 = $10 + 1 | 0;
         if (($13 | 0) != ($10 | 0)) {
          continue;
         }
         break;
        }
       }
       $10 = HEAP32[$18 + 12 >> 2];
       if ($10) {
        if (HEAPU8[$48 + 16 | 0]) {
         btAlignedFreeInternal_28void__29($10);
         $13 = HEAP32[$27 + 4 >> 2];
        }
        HEAP32[$18 + 12 >> 2] = 0;
       }
       HEAP8[$48 + 16 | 0] = 1;
       HEAP32[$18 + 12 >> 2] = $3;
       HEAP32[$56 + 8 >> 2] = $11;
      }
      HEAP32[HEAP32[$18 + 12 >> 2] + ($13 << 2) >> 2] = $14;
      $10 = $13 + 1 | 0;
      HEAP32[$27 + 4 >> 2] = $10;
      label$85 : {
       if (($10 | 0) != ($11 | 0)) {
        $14 = $11;
        $11 = $10;
        break label$85;
       }
       $14 = $11 ? $11 << 1 : 1;
       if (($11 | 0) >= ($14 | 0)) {
        $14 = $11;
        break label$85;
       }
       $10 = 0;
       $20 = 0;
       if ($14) {
        $20 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($14 << 2, 16);
        $11 = HEAP32[$27 + 4 >> 2];
       }
       if (($11 | 0) >= 1) {
        while (1) {
         $13 = $10 << 2;
         HEAP32[$20 + $13 >> 2] = HEAP32[HEAP32[$18 + 12 >> 2] + $13 >> 2];
         $10 = $10 + 1 | 0;
         if (($11 | 0) != ($10 | 0)) {
          continue;
         }
         break;
        }
       }
       $10 = HEAP32[$18 + 12 >> 2];
       if ($10) {
        if (HEAPU8[$48 + 16 | 0]) {
         btAlignedFreeInternal_28void__29($10);
         $11 = HEAP32[$27 + 4 >> 2];
        }
        HEAP32[$18 + 12 >> 2] = 0;
       }
       HEAP8[$48 + 16 | 0] = 1;
       HEAP32[$18 + 12 >> 2] = $20;
       HEAP32[$56 + 8 >> 2] = $14;
      }
      HEAP32[HEAP32[$18 + 12 >> 2] + ($11 << 2) >> 2] = $104;
      $10 = $11 + 1 | 0;
      HEAP32[$27 + 4 >> 2] = $10;
      if (($10 | 0) == ($14 | 0)) {
       $20 = $14 ? $14 << 1 : 1;
       if (($14 | 0) < ($20 | 0)) {
        $10 = 0;
        $13 = 0;
        if ($20) {
         $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($20 << 2, 16);
         $14 = HEAP32[$27 + 4 >> 2];
        }
        if (($14 | 0) >= 1) {
         while (1) {
          $11 = $10 << 2;
          HEAP32[$13 + $11 >> 2] = HEAP32[HEAP32[$18 + 12 >> 2] + $11 >> 2];
          $10 = $10 + 1 | 0;
          if (($14 | 0) != ($10 | 0)) {
           continue;
          }
          break;
         }
        }
        $10 = HEAP32[$18 + 12 >> 2];
        if ($10) {
         if (HEAPU8[$48 + 16 | 0]) {
          btAlignedFreeInternal_28void__29($10);
          $14 = HEAP32[$27 + 4 >> 2];
         }
         HEAP32[$18 + 12 >> 2] = 0;
        }
        HEAP8[$48 + 16 | 0] = 1;
        HEAP32[$18 + 12 >> 2] = $13;
        HEAP32[$56 + 8 >> 2] = $20;
       }
       $10 = $14;
      }
      HEAP32[HEAP32[$18 + 12 >> 2] + ($10 << 2) >> 2] = 0;
      HEAP32[$27 + 4 >> 2] = $10 + 1;
     }
     label$102 : {
      label$103 : {
       if ($16 | $72) {
        $10 = HEAP32[$12 + 12 >> 2];
        break label$103;
       }
       $10 = HEAP32[$12 + 12 >> 2];
       $20 = HEAP32[HEAP32[$53 + 8 >> 2] >> 2];
       if (($10 | 0) == HEAP32[$20 + 12 >> 2]) {
        break label$102;
       }
      }
      $20 = btConvexHullInternal__newEdgePair_28btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__29($0, HEAP32[$53 + 12 >> 2], $10);
      label$105 : {
       label$106 : {
        if (!$72) {
         $10 = HEAP32[$53 + 8 >> 2];
         $11 = HEAP32[$10 >> 2];
         HEAP32[$20 >> 2] = $11;
         HEAP32[$11 + 4 >> 2] = $20;
         break label$106;
        }
        if (!$77) {
         break label$105;
        }
        $10 = HEAP32[$53 + 8 >> 2];
       }
       HEAP32[$10 >> 2] = $20;
       HEAP32[$20 + 4 >> 2] = $10;
      }
      label$108 : {
       if ($16) {
        $11 = HEAP32[$12 + 8 >> 2];
        $10 = HEAP32[$20 + 8 >> 2];
        break label$108;
       }
       $11 = HEAP32[$12 + 8 >> 2];
       $14 = HEAP32[$11 + 4 >> 2];
       $10 = HEAP32[$20 + 8 >> 2];
       HEAP32[$14 >> 2] = $10;
       HEAP32[$10 + 4 >> 2] = $14;
      }
      HEAP32[$10 >> 2] = $11;
      HEAP32[$11 + 4 >> 2] = $10;
     }
     label$110 : {
      if (!$77) {
       break label$110;
      }
      $10 = HEAP32[$77 + 8 >> 2];
      if (($72 | 0) >= 1) {
       HEAP32[$20 >> 2] = $10;
       HEAP32[$10 + 4 >> 2] = $20;
       break label$110;
      }
      if (($10 | 0) == ($20 | 0)) {
       break label$110;
      }
      $3 = HEAP32[$56 + 8 >> 2];
      $11 = HEAP32[$27 + 4 >> 2];
      label$112 : {
       if (($3 | 0) != ($11 | 0)) {
        break label$112;
       }
       $3 = $11 ? $11 << 1 : 1;
       if (($11 | 0) >= ($3 | 0)) {
        $3 = $11;
        break label$112;
       }
       $10 = 0;
       $13 = 0;
       if ($3) {
        $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($3 << 2, 16);
        $11 = HEAP32[$27 + 4 >> 2];
       }
       if (($11 | 0) >= 1) {
        while (1) {
         $14 = $10 << 2;
         HEAP32[$14 + $13 >> 2] = HEAP32[HEAP32[$18 + 12 >> 2] + $14 >> 2];
         $10 = $10 + 1 | 0;
         if (($11 | 0) != ($10 | 0)) {
          continue;
         }
         break;
        }
       }
       $10 = HEAP32[$18 + 12 >> 2];
       if ($10) {
        if (HEAPU8[$48 + 16 | 0]) {
         btAlignedFreeInternal_28void__29($10);
         $11 = HEAP32[$27 + 4 >> 2];
        }
        HEAP32[$18 + 12 >> 2] = 0;
       }
       HEAP8[$48 + 16 | 0] = 1;
       HEAP32[$18 + 12 >> 2] = $13;
       HEAP32[$56 + 8 >> 2] = $3;
      }
      HEAP32[HEAP32[$18 + 12 >> 2] + ($11 << 2) >> 2] = HEAP32[$77 + 12 >> 2];
      $11 = $11 + 1 | 0;
      HEAP32[$27 + 4 >> 2] = $11;
      $10 = HEAP32[$20 >> 2];
      if (($10 | 0) != HEAP32[$77 + 8 >> 2]) {
       while (1) {
        $11 = HEAP32[$10 + 8 >> 2];
        $53 = HEAP32[$10 + 12 >> 2];
        $13 = 0;
        $3 = 0;
        $14 = HEAP32[$10 >> 2];
        if (($14 | 0) != ($10 | 0)) {
         HEAP32[$14 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
         HEAP32[HEAP32[$10 + 4 >> 2] >> 2] = $14;
         $3 = $14;
        }
        HEAP32[HEAP32[$11 + 12 >> 2] + 8 >> 2] = $3;
        $14 = HEAP32[$11 >> 2];
        if (($14 | 0) != ($11 | 0)) {
         HEAP32[$14 + 4 >> 2] = HEAP32[$11 + 4 >> 2];
         HEAP32[HEAP32[$11 + 4 >> 2] >> 2] = $14;
         $13 = $14;
        }
        HEAP32[$53 + 8 >> 2] = $13;
        $5 = $10;
        HEAP32[$5 + 12 >> 2] = 0;
        HEAP32[$5 + 16 >> 2] = 0;
        HEAP32[$5 + 4 >> 2] = 0;
        HEAP32[$5 + 8 >> 2] = 0;
        HEAP32[$5 >> 2] = HEAP32[$0 + 56 >> 2];
        HEAP32[$0 + 56 >> 2] = $5;
        $5 = $11;
        HEAP32[$5 + 12 >> 2] = 0;
        HEAP32[$5 + 16 >> 2] = 0;
        HEAP32[$5 + 4 >> 2] = 0;
        HEAP32[$5 + 8 >> 2] = 0;
        HEAP32[$5 >> 2] = HEAP32[$0 + 56 >> 2];
        HEAP32[$0 + 56 >> 2] = $5;
        HEAP32[$0 + 116 >> 2] = HEAP32[$0 + 116 >> 2] + -1;
        $3 = HEAP32[$56 + 8 >> 2];
        $11 = HEAP32[$27 + 4 >> 2];
        label$124 : {
         if (($3 | 0) != ($11 | 0)) {
          break label$124;
         }
         $3 = $11 ? $11 << 1 : 1;
         if (($11 | 0) >= ($3 | 0)) {
          $3 = $11;
          break label$124;
         }
         $10 = 0;
         $13 = 0;
         if ($3) {
          $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($3 << 2, 16);
          $11 = HEAP32[$27 + 4 >> 2];
         }
         if (($11 | 0) >= 1) {
          while (1) {
           $14 = $10 << 2;
           HEAP32[$14 + $13 >> 2] = HEAP32[HEAP32[$18 + 12 >> 2] + $14 >> 2];
           $10 = $10 + 1 | 0;
           if (($11 | 0) != ($10 | 0)) {
            continue;
           }
           break;
          }
         }
         $10 = HEAP32[$18 + 12 >> 2];
         if ($10) {
          if (HEAPU8[$48 + 16 | 0]) {
           btAlignedFreeInternal_28void__29($10);
           $11 = HEAP32[$27 + 4 >> 2];
          }
          HEAP32[$18 + 12 >> 2] = 0;
         }
         HEAP8[$48 + 16 | 0] = 1;
         HEAP32[$18 + 12 >> 2] = $13;
         HEAP32[$56 + 8 >> 2] = $3;
        }
        HEAP32[HEAP32[$18 + 12 >> 2] + ($11 << 2) >> 2] = $53;
        $11 = $11 + 1 | 0;
        HEAP32[$27 + 4 >> 2] = $11;
        $10 = HEAP32[$20 >> 2];
        if (($10 | 0) != HEAP32[$77 + 8 >> 2]) {
         continue;
        }
        break;
       }
      }
      if (($3 | 0) == ($11 | 0)) {
       $13 = $3 ? $3 << 1 : 1;
       if (($3 | 0) < ($13 | 0)) {
        $10 = 0;
        $14 = 0;
        if ($13) {
         $14 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($13 << 2, 16);
         $3 = HEAP32[$27 + 4 >> 2];
        }
        if (($3 | 0) >= 1) {
         while (1) {
          $11 = $10 << 2;
          HEAP32[$14 + $11 >> 2] = HEAP32[HEAP32[$18 + 12 >> 2] + $11 >> 2];
          $10 = $10 + 1 | 0;
          if (($10 | 0) != ($3 | 0)) {
           continue;
          }
          break;
         }
        }
        $10 = HEAP32[$18 + 12 >> 2];
        if ($10) {
         if (HEAPU8[$48 + 16 | 0]) {
          btAlignedFreeInternal_28void__29($10);
          $3 = HEAP32[$27 + 4 >> 2];
         }
         HEAP32[$18 + 12 >> 2] = 0;
        }
        HEAP8[$48 + 16 | 0] = 1;
        HEAP32[$18 + 12 >> 2] = $14;
        HEAP32[$56 + 8 >> 2] = $13;
       }
       $11 = $3;
      }
      HEAP32[HEAP32[$18 + 12 >> 2] + ($11 << 2) >> 2] = 0;
      HEAP32[$27 + 4 >> 2] = $11 + 1;
     }
     HEAP32[$20 + 16 >> 2] = $1;
     HEAP32[HEAP32[$20 + 8 >> 2] + 16 >> 2] = HEAP32[$12 + 16 >> 2];
     $88 = $88 ? $88 : $20;
     continue;
    }
    break;
   }
   label$140 : {
    if (($72 | 0) >= 1) {
     HEAP32[HEAP32[$88 + 8 >> 2] + 12 >> 2] = HEAP32[$77 + 12 >> 2];
     $12 = HEAP32[$100 + 8 >> 2];
     HEAP32[$12 >> 2] = $88;
     HEAP32[$88 + 4 >> 2] = $12;
     $12 = HEAP32[$77 + 8 >> 2];
     HEAP32[$88 >> 2] = $12;
     HEAP32[$12 + 4 >> 2] = $88;
     break label$140;
    }
    if (HEAP32[$77 + 8 >> 2] == ($88 | 0)) {
     break label$140;
    }
    $10 = HEAP32[$27 + 4 >> 2];
    $13 = HEAP32[$56 + 8 >> 2];
    label$142 : {
     if (($10 | 0) != ($13 | 0)) {
      break label$142;
     }
     $13 = $10 ? $10 << 1 : 1;
     if (($10 | 0) >= ($13 | 0)) {
      $13 = $10;
      break label$142;
     }
     $12 = 0;
     $11 = 0;
     if ($13) {
      $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($13 << 2, 16);
      $10 = HEAP32[$27 + 4 >> 2];
     }
     if (($10 | 0) >= 1) {
      while (1) {
       $16 = $12 << 2;
       HEAP32[$16 + $11 >> 2] = HEAP32[HEAP32[$18 + 12 >> 2] + $16 >> 2];
       $12 = $12 + 1 | 0;
       if (($12 | 0) != ($10 | 0)) {
        continue;
       }
       break;
      }
     }
     $12 = HEAP32[$18 + 12 >> 2];
     if ($12) {
      if (HEAPU8[$48 + 16 | 0]) {
       btAlignedFreeInternal_28void__29($12);
       $10 = HEAP32[$27 + 4 >> 2];
      }
      HEAP32[$18 + 12 >> 2] = 0;
     }
     HEAP8[$48 + 16 | 0] = 1;
     HEAP32[$18 + 12 >> 2] = $11;
     HEAP32[$56 + 8 >> 2] = $13;
    }
    HEAP32[HEAP32[$18 + 12 >> 2] + ($10 << 2) >> 2] = HEAP32[$77 + 12 >> 2];
    $10 = $10 + 1 | 0;
    HEAP32[$27 + 4 >> 2] = $10;
    $12 = HEAP32[$88 >> 2];
    if (($12 | 0) != HEAP32[$77 + 8 >> 2]) {
     while (1) {
      $10 = HEAP32[$12 + 8 >> 2];
      $14 = HEAP32[$12 + 12 >> 2];
      $11 = 0;
      $16 = HEAP32[$12 >> 2];
      if (($16 | 0) != ($12 | 0)) {
       HEAP32[$16 + 4 >> 2] = HEAP32[$12 + 4 >> 2];
       HEAP32[HEAP32[$12 + 4 >> 2] >> 2] = $16;
       $11 = $16;
      }
      HEAP32[HEAP32[$10 + 12 >> 2] + 8 >> 2] = $11;
      $16 = HEAP32[$10 >> 2];
      label$153 : {
       if (($16 | 0) == ($10 | 0)) {
        $16 = 0;
        break label$153;
       }
       HEAP32[$16 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
       HEAP32[HEAP32[$10 + 4 >> 2] >> 2] = $16;
      }
      HEAP32[$14 + 8 >> 2] = $16;
      $5 = $12;
      HEAP32[$5 + 12 >> 2] = 0;
      HEAP32[$5 + 16 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      HEAP32[$5 + 8 >> 2] = 0;
      HEAP32[$5 >> 2] = HEAP32[$0 + 56 >> 2];
      HEAP32[$0 + 56 >> 2] = $5;
      $5 = $10;
      HEAP32[$5 + 12 >> 2] = 0;
      HEAP32[$5 + 16 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      HEAP32[$5 + 8 >> 2] = 0;
      HEAP32[$5 >> 2] = HEAP32[$0 + 56 >> 2];
      HEAP32[$0 + 56 >> 2] = $5;
      HEAP32[$0 + 116 >> 2] = HEAP32[$0 + 116 >> 2] + -1;
      $10 = HEAP32[$27 + 4 >> 2];
      $13 = HEAP32[$56 + 8 >> 2];
      label$155 : {
       if (($10 | 0) != ($13 | 0)) {
        break label$155;
       }
       $13 = $10 ? $10 << 1 : 1;
       if (($10 | 0) >= ($13 | 0)) {
        $13 = $10;
        break label$155;
       }
       $12 = 0;
       $11 = 0;
       if ($13) {
        $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($13 << 2, 16);
        $10 = HEAP32[$27 + 4 >> 2];
       }
       if (($10 | 0) >= 1) {
        while (1) {
         $16 = $12 << 2;
         HEAP32[$16 + $11 >> 2] = HEAP32[HEAP32[$18 + 12 >> 2] + $16 >> 2];
         $12 = $12 + 1 | 0;
         if (($12 | 0) != ($10 | 0)) {
          continue;
         }
         break;
        }
       }
       $12 = HEAP32[$18 + 12 >> 2];
       if ($12) {
        if (HEAPU8[$48 + 16 | 0]) {
         btAlignedFreeInternal_28void__29($12);
         $10 = HEAP32[$27 + 4 >> 2];
        }
        HEAP32[$18 + 12 >> 2] = 0;
       }
       HEAP8[$48 + 16 | 0] = 1;
       HEAP32[$18 + 12 >> 2] = $11;
       HEAP32[$56 + 8 >> 2] = $13;
      }
      HEAP32[HEAP32[$18 + 12 >> 2] + ($10 << 2) >> 2] = $14;
      $10 = $10 + 1 | 0;
      HEAP32[$27 + 4 >> 2] = $10;
      $12 = HEAP32[$88 >> 2];
      if (($12 | 0) != HEAP32[$77 + 8 >> 2]) {
       continue;
      }
      break;
     }
    }
    if (($10 | 0) == ($13 | 0)) {
     $11 = $13 ? $13 << 1 : 1;
     if (($13 | 0) < ($11 | 0)) {
      $12 = 0;
      $16 = 0;
      if ($11) {
       $16 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($11 << 2, 16);
       $13 = HEAP32[$27 + 4 >> 2];
      }
      if (($13 | 0) >= 1) {
       while (1) {
        $10 = $12 << 2;
        HEAP32[$16 + $10 >> 2] = HEAP32[HEAP32[$18 + 12 >> 2] + $10 >> 2];
        $12 = $12 + 1 | 0;
        if (($13 | 0) != ($12 | 0)) {
         continue;
        }
        break;
       }
      }
      $12 = HEAP32[$18 + 12 >> 2];
      if ($12) {
       if (HEAPU8[$48 + 16 | 0]) {
        btAlignedFreeInternal_28void__29($12);
        $13 = HEAP32[$27 + 4 >> 2];
       }
       HEAP32[$18 + 12 >> 2] = 0;
      }
      HEAP8[$48 + 16 | 0] = 1;
      HEAP32[$18 + 12 >> 2] = $16;
      HEAP32[$56 + 8 >> 2] = $11;
     }
     $10 = $13;
    }
    HEAP32[HEAP32[$18 + 12 >> 2] + ($10 << 2) >> 2] = 0;
    HEAP32[$27 + 4 >> 2] = $10 + 1;
   }
   HEAP32[$0 + 124 >> 2] = HEAP32[HEAP32[$18 + 12 >> 2] >> 2];
   $12 = 0;
   $72 = HEAP32[$27 + 4 >> 2];
   if (($72 | 0) > 0) {
    while (1) {
     if (($12 | 0) < ($72 | 0)) {
      while (1) {
       $11 = $12 + 2 | 0;
       $10 = HEAP32[$18 + 12 >> 2];
       $12 = $10 + ($12 << 2) | 0;
       $13 = HEAP32[$12 + 4 >> 2];
       label$175 : {
        if (!$13) {
         $12 = $11;
         break label$175;
        }
        $53 = HEAP32[$12 >> 2];
        $77 = $53 + 12 | 0;
        $16 = 0;
        $12 = $11;
        while (1) {
         $3 = $12;
         $12 = HEAP32[$53 + 16 >> 2];
         HEAP32[($12 ? $12 + 8 | 0 : $77) >> 2] = HEAP32[$13 + 12 >> 2];
         $12 = HEAP32[$13 + 16 >> 2];
         if ($12) {
          HEAP32[$53 + 16 >> 2] = $12;
         }
         $12 = HEAP32[$13 + 12 >> 2];
         if ($12) {
          while (1) {
           HEAP32[$12 + 4 >> 2] = $53;
           $12 = HEAP32[$12 + 8 >> 2];
           if ($12) {
            continue;
           }
           break;
          }
         }
         $5 = $13;
         HEAP32[$5 + 12 >> 2] = 0;
         HEAP32[$5 + 16 >> 2] = 0;
         $14 = HEAP32[$5 + 8 >> 2];
         if ($14) {
          if (!($16 & 1)) {
           $16 = HEAP32[$27 + 4 >> 2];
           label$183 : {
            if (($16 | 0) != HEAP32[$56 + 8 >> 2]) {
             break label$183;
            }
            $14 = $16 ? $16 << 1 : 1;
            if (($16 | 0) >= ($14 | 0)) {
             break label$183;
            }
            $12 = 0;
            $10 = 0;
            if ($14) {
             $10 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($14 << 2, 16);
             $16 = HEAP32[$27 + 4 >> 2];
            }
            if (($16 | 0) >= 1) {
             while (1) {
              $11 = $12 << 2;
              HEAP32[$11 + $10 >> 2] = HEAP32[HEAP32[$18 + 12 >> 2] + $11 >> 2];
              $12 = $12 + 1 | 0;
              if (($16 | 0) != ($12 | 0)) {
               continue;
              }
              break;
             }
            }
            $12 = HEAP32[$18 + 12 >> 2];
            if ($12) {
             if (HEAPU8[$48 + 16 | 0]) {
              btAlignedFreeInternal_28void__29($12);
              $16 = HEAP32[$27 + 4 >> 2];
             }
             HEAP32[$18 + 12 >> 2] = 0;
            }
            HEAP8[$48 + 16 | 0] = 1;
            HEAP32[$18 + 12 >> 2] = $10;
            HEAP32[$56 + 8 >> 2] = $14;
           }
           HEAP32[($16 << 2) + $10 >> 2] = $53;
           HEAP32[$27 + 4 >> 2] = $16 + 1;
           $14 = HEAP32[$13 + 8 >> 2];
          }
          while (1) {
           $10 = HEAP32[$27 + 4 >> 2];
           label$191 : {
            if (($10 | 0) != HEAP32[$56 + 8 >> 2]) {
             break label$191;
            }
            $20 = $10 ? $10 << 1 : 1;
            if (($10 | 0) >= ($20 | 0)) {
             break label$191;
            }
            $12 = 0;
            $11 = 0;
            if ($20) {
             $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($20 << 2, 16);
             $10 = HEAP32[$27 + 4 >> 2];
            }
            if (($10 | 0) >= 1) {
             while (1) {
              $16 = $12 << 2;
              HEAP32[$16 + $11 >> 2] = HEAP32[HEAP32[$18 + 12 >> 2] + $16 >> 2];
              $12 = $12 + 1 | 0;
              if (($12 | 0) != ($10 | 0)) {
               continue;
              }
              break;
             }
            }
            $12 = HEAP32[$18 + 12 >> 2];
            if ($12) {
             if (HEAPU8[$48 + 16 | 0]) {
              btAlignedFreeInternal_28void__29($12);
              $10 = HEAP32[$27 + 4 >> 2];
             }
             HEAP32[$18 + 12 >> 2] = 0;
            }
            HEAP8[$48 + 16 | 0] = 1;
            HEAP32[$18 + 12 >> 2] = $11;
            HEAP32[$56 + 8 >> 2] = $20;
           }
           HEAP32[HEAP32[$18 + 12 >> 2] + ($10 << 2) >> 2] = HEAP32[$14 + 12 >> 2];
           HEAP32[$27 + 4 >> 2] = $10 + 1;
           $12 = HEAP32[$13 + 8 >> 2];
           $10 = HEAP32[$12 + 8 >> 2];
           $11 = 0;
           $14 = 0;
           $16 = HEAP32[$12 >> 2];
           if (($16 | 0) != ($12 | 0)) {
            HEAP32[$16 + 4 >> 2] = HEAP32[$12 + 4 >> 2];
            HEAP32[HEAP32[$12 + 4 >> 2] >> 2] = $16;
            $14 = $16;
           }
           HEAP32[HEAP32[$10 + 12 >> 2] + 8 >> 2] = $14;
           $16 = HEAP32[$10 >> 2];
           if (($16 | 0) != ($10 | 0)) {
            HEAP32[$16 + 4 >> 2] = HEAP32[$10 + 4 >> 2];
            HEAP32[HEAP32[$10 + 4 >> 2] >> 2] = $16;
            $11 = $16;
           }
           HEAP32[HEAP32[$12 + 12 >> 2] + 8 >> 2] = $11;
           $5 = $12;
           HEAP32[$5 + 12 >> 2] = 0;
           HEAP32[$5 + 16 >> 2] = 0;
           HEAP32[$5 + 4 >> 2] = 0;
           HEAP32[$5 + 8 >> 2] = 0;
           HEAP32[$5 >> 2] = HEAP32[$0 + 56 >> 2];
           HEAP32[$0 + 56 >> 2] = $5;
           $5 = $10;
           HEAP32[$5 + 12 >> 2] = 0;
           HEAP32[$5 + 16 >> 2] = 0;
           HEAP32[$5 + 4 >> 2] = 0;
           HEAP32[$5 + 8 >> 2] = 0;
           HEAP32[$5 >> 2] = HEAP32[$0 + 56 >> 2];
           HEAP32[$0 + 56 >> 2] = $5;
           HEAP32[$0 + 116 >> 2] = HEAP32[$0 + 116 >> 2] + -1;
           $14 = HEAP32[$13 + 8 >> 2];
           if ($14) {
            continue;
           }
           break;
          }
          $16 = 1;
          $10 = HEAP32[$18 + 12 >> 2];
         }
         $12 = $3 + 1 | 0;
         $13 = HEAP32[($3 << 2) + $10 >> 2];
         if ($13) {
          continue;
         }
         break;
        }
        if (!($16 & 1)) {
         break label$175;
        }
        $11 = HEAP32[$27 + 4 >> 2];
        label$200 : {
         if (($11 | 0) != HEAP32[$56 + 8 >> 2]) {
          break label$200;
         }
         $13 = $11 ? $11 << 1 : 1;
         if (($11 | 0) >= ($13 | 0)) {
          break label$200;
         }
         $16 = 0;
         $10 = 0;
         if ($13) {
          $10 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($13 << 2, 16);
          $11 = HEAP32[$27 + 4 >> 2];
         }
         if (($11 | 0) >= 1) {
          while (1) {
           $14 = $16 << 2;
           HEAP32[$14 + $10 >> 2] = HEAP32[HEAP32[$18 + 12 >> 2] + $14 >> 2];
           $16 = $16 + 1 | 0;
           if (($16 | 0) != ($11 | 0)) {
            continue;
           }
           break;
          }
         }
         $16 = HEAP32[$18 + 12 >> 2];
         if ($16) {
          if (HEAPU8[$48 + 16 | 0]) {
           btAlignedFreeInternal_28void__29($16);
           $11 = HEAP32[$27 + 4 >> 2];
          }
          HEAP32[$18 + 12 >> 2] = 0;
         }
         HEAP8[$48 + 16 | 0] = 1;
         HEAP32[$18 + 12 >> 2] = $10;
         HEAP32[$56 + 8 >> 2] = $13;
        }
        HEAP32[($11 << 2) + $10 >> 2] = 0;
        HEAP32[$27 + 4 >> 2] = $11 + 1;
       }
       if (($12 | 0) < ($72 | 0)) {
        continue;
       }
       break;
      }
      $72 = HEAP32[$27 + 4 >> 2];
     }
     if (($12 | 0) < ($72 | 0)) {
      continue;
     }
     break;
    }
   }
   if (($72 | 0) <= -1) {
    if (HEAP32[$56 + 8 >> 2] <= -1) {
     $12 = HEAP32[$18 + 12 >> 2];
     if ($12) {
      if (HEAPU8[$48 + 16 | 0]) {
       btAlignedFreeInternal_28void__29($12);
      }
      HEAP32[$18 + 12 >> 2] = 0;
     }
     HEAP8[$48 + 16 | 0] = 1;
     HEAP32[$18 + 12 >> 2] = 0;
     HEAP32[$56 + 8 >> 2] = 0;
    }
    while (1) {
     HEAP32[HEAP32[$18 + 12 >> 2] + ($72 << 2) >> 2] = 0;
     $12 = $72 + 1 | 0;
     $10 = $12 >>> 0 >= $72 >>> 0;
     $72 = $12;
     if ($10) {
      continue;
     }
     break;
    }
   }
   HEAP32[$27 + 4 >> 2] = 0;
   HEAP32[$1 + 24 >> 2] = -1;
   HEAP32[$1 + 20 >> 2] = $97;
   HEAP32[$1 + 16 >> 2] = $95;
   HEAP32[$1 + 12 >> 2] = $96;
  }
  $7 = 1;
 }
 $0 = $25 + 128 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $7;
}
function btDiscreteDynamicsWorld__debugDrawConstraint_28btTypedConstraint__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0, $20 = Math_fround(0), $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = 0, $33 = Math_fround(0), $34 = 0, $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = 0, $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = 0, $43 = 0, $44 = 0;
 $2 = global$0 - 176 | 0;
 $5 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
 $6 = FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 56 >> 2]]($7) | 0;
 $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
 $7 = FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 56 >> 2]]($7) | 0;
 $26 = HEAPF32[$1 + 40 >> 2];
 label$2 : {
  if ($26 <= Math_fround(0)) {
   break label$2;
  }
  $11 = HEAP32[$1 + 4 >> 2] + -3 | 0;
  if ($11 >>> 0 > 9) {
   break label$2;
  }
  $6 = $6 & 2048;
  $7 = $7 & 4096;
  label$3 : {
   switch ($11 - 1 | 0) {
   default:
    HEAP32[$2 + 124 >> 2] = 0;
    HEAP32[$2 + 128 >> 2] = 0;
    HEAP32[$2 + 136 >> 2] = 0;
    HEAP32[$2 + 140 >> 2] = 0;
    HEAP32[$2 + 132 >> 2] = 1065353216;
    HEAP32[$2 + 156 >> 2] = 0;
    HEAP32[$2 + 160 >> 2] = 0;
    HEAP32[$2 + 152 >> 2] = 1065353216;
    $11 = $2 + 164 | 0;
    $5 = $11;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    $19 = $2 + 172 | 0;
    HEAP32[$19 >> 2] = 0;
    HEAP32[$2 + 116 >> 2] = 0;
    HEAP32[$2 + 120 >> 2] = 0;
    HEAP32[$2 + 112 >> 2] = 1065353216;
    HEAP32[$2 + 144 >> 2] = 0;
    HEAP32[$2 + 148 >> 2] = 0;
    $7 = HEAP32[$1 + 28 >> 2];
    $12 = HEAPF32[$7 + 52 >> 2];
    $13 = HEAPF32[$7 + 8 >> 2];
    $14 = HEAPF32[$7 + 12 >> 2];
    $15 = HEAPF32[$7 + 56 >> 2];
    $17 = HEAPF32[$7 + 28 >> 2];
    $18 = HEAPF32[$7 + 20 >> 2];
    $20 = HEAPF32[$7 + 24 >> 2];
    $16 = HEAPF32[$7 + 60 >> 2];
    $9 = HEAPF32[$1 + 308 >> 2];
    $24 = HEAPF32[$7 + 44 >> 2];
    $10 = HEAPF32[$1 + 300 >> 2];
    $25 = HEAPF32[$7 + 36 >> 2];
    $8 = HEAPF32[$1 + 304 >> 2];
    $30 = HEAPF32[$7 + 40 >> 2];
    $31 = HEAPF32[$7 + 4 >> 2];
    HEAP32[$2 + 172 >> 2] = 0;
    $21 = $2 + 168 | 0;
    HEAPF32[$21 >> 2] = $16 + Math_fround(Math_fround(Math_fround($10 * $25) + Math_fround($8 * $30)) + Math_fround($9 * $24));
    HEAPF32[$2 + 164 >> 2] = $15 + Math_fround(Math_fround(Math_fround($10 * $18) + Math_fround($8 * $20)) + Math_fround($9 * $17));
    HEAPF32[$2 + 160 >> 2] = $12 + Math_fround(Math_fround(Math_fround($10 * $31) + Math_fround($8 * $13)) + Math_fround($9 * $14));
    $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 64 >> 2]]($7, $2 + 112 | 0, $26);
    $7 = HEAP32[$1 + 32 >> 2];
    $12 = HEAPF32[$7 + 52 >> 2];
    $13 = HEAPF32[$7 + 8 >> 2];
    $14 = HEAPF32[$7 + 12 >> 2];
    $15 = HEAPF32[$7 + 56 >> 2];
    $17 = HEAPF32[$7 + 28 >> 2];
    $18 = HEAPF32[$7 + 20 >> 2];
    $20 = HEAPF32[$7 + 24 >> 2];
    $16 = HEAPF32[$7 + 60 >> 2];
    $9 = HEAPF32[$1 + 324 >> 2];
    $24 = HEAPF32[$7 + 44 >> 2];
    $10 = HEAPF32[$1 + 316 >> 2];
    $25 = HEAPF32[$7 + 36 >> 2];
    $8 = HEAPF32[$1 + 320 >> 2];
    $30 = HEAPF32[$7 + 40 >> 2];
    $31 = HEAPF32[$7 + 4 >> 2];
    HEAP32[$2 + 172 >> 2] = 0;
    HEAPF32[$2 + 168 >> 2] = $16 + Math_fround(Math_fround(Math_fround($10 * $25) + Math_fround($8 * $30)) + Math_fround($9 * $24));
    HEAPF32[$2 + 164 >> 2] = $15 + Math_fround(Math_fround(Math_fround($10 * $18) + Math_fround($8 * $20)) + Math_fround($9 * $17));
    HEAPF32[$2 + 160 >> 2] = $12 + Math_fround(Math_fround(Math_fround($10 * $31) + Math_fround($8 * $13)) + Math_fround($9 * $14));
    if (!$6) {
     break label$2;
    }
    $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 64 >> 2]]($1, $2 + 112 | 0, $26);
    break label$2;
   case 0:
    $11 = HEAP32[$1 + 28 >> 2];
    $35 = HEAPF32[$11 + 52 >> 2];
    $9 = HEAPF32[$11 + 8 >> 2];
    $10 = HEAPF32[$11 + 12 >> 2];
    $20 = HEAPF32[$1 + 584 >> 2];
    $16 = HEAPF32[$1 + 552 >> 2];
    $24 = HEAPF32[$1 + 568 >> 2];
    $36 = HEAPF32[$11 + 56 >> 2];
    $37 = HEAPF32[$11 + 60 >> 2];
    $25 = HEAPF32[$1 + 608 >> 2];
    $30 = HEAPF32[$1 + 600 >> 2];
    $31 = HEAPF32[$1 + 604 >> 2];
    $8 = HEAPF32[$11 + 28 >> 2];
    $12 = HEAPF32[$11 + 20 >> 2];
    $13 = HEAPF32[$11 + 24 >> 2];
    $33 = HEAPF32[$1 + 588 >> 2];
    $23 = HEAPF32[$1 + 556 >> 2];
    $22 = HEAPF32[$1 + 572 >> 2];
    $27 = HEAPF32[$1 + 592 >> 2];
    $14 = HEAPF32[$11 + 44 >> 2];
    $28 = HEAPF32[$1 + 560 >> 2];
    $15 = HEAPF32[$11 + 36 >> 2];
    $29 = HEAPF32[$1 + 576 >> 2];
    $17 = HEAPF32[$11 + 40 >> 2];
    $18 = HEAPF32[$11 + 4 >> 2];
    HEAP32[$2 + 172 >> 2] = 0;
    HEAP32[$2 + 156 >> 2] = 0;
    HEAP32[$2 + 140 >> 2] = 0;
    HEAPF32[$2 + 152 >> 2] = Math_fround(Math_fround($28 * $15) + Math_fround($29 * $17)) + Math_fround($27 * $14);
    HEAPF32[$2 + 148 >> 2] = Math_fround(Math_fround($23 * $15) + Math_fround($22 * $17)) + Math_fround($33 * $14);
    HEAPF32[$2 + 136 >> 2] = Math_fround(Math_fround($28 * $12) + Math_fround($29 * $13)) + Math_fround($27 * $8);
    HEAPF32[$2 + 132 >> 2] = Math_fround(Math_fround($23 * $12) + Math_fround($22 * $13)) + Math_fround($33 * $8);
    HEAPF32[$2 + 168 >> 2] = $37 + Math_fround(Math_fround(Math_fround($15 * $30) + Math_fround($17 * $31)) + Math_fround($14 * $25));
    HEAPF32[$2 + 164 >> 2] = $36 + Math_fround(Math_fround(Math_fround($12 * $30) + Math_fround($13 * $31)) + Math_fround($8 * $25));
    HEAP32[$2 + 124 >> 2] = 0;
    HEAPF32[$2 + 144 >> 2] = Math_fround(Math_fround($16 * $15) + Math_fround($24 * $17)) + Math_fround($20 * $14);
    HEAPF32[$2 + 128 >> 2] = Math_fround(Math_fround($16 * $12) + Math_fround($24 * $13)) + Math_fround($20 * $8);
    HEAPF32[$2 + 120 >> 2] = Math_fround(Math_fround($18 * $28) + Math_fround($9 * $29)) + Math_fround($10 * $27);
    HEAPF32[$2 + 116 >> 2] = Math_fround(Math_fround($18 * $23) + Math_fround($9 * $22)) + Math_fround($10 * $33);
    HEAPF32[$2 + 112 >> 2] = Math_fround(Math_fround($16 * $18) + Math_fround($24 * $9)) + Math_fround($20 * $10);
    HEAPF32[$2 + 160 >> 2] = $35 + Math_fround(Math_fround(Math_fround($18 * $30) + Math_fround($9 * $31)) + Math_fround($10 * $25));
    label$9 : {
     if ($6) {
      $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $2 + 112 | 0, $26);
      $6 = HEAP32[$1 + 32 >> 2];
      $35 = HEAPF32[$6 + 52 >> 2];
      $36 = HEAPF32[$6 + 56 >> 2];
      $37 = HEAPF32[$6 + 60 >> 2];
      $20 = HEAPF32[$1 + 672 >> 2];
      $16 = HEAPF32[$1 + 664 >> 2];
      $24 = HEAPF32[$1 + 668 >> 2];
      $9 = HEAPF32[$6 + 8 >> 2];
      $10 = HEAPF32[$6 + 12 >> 2];
      $8 = HEAPF32[$6 + 28 >> 2];
      $12 = HEAPF32[$6 + 20 >> 2];
      $13 = HEAPF32[$6 + 24 >> 2];
      $25 = HEAPF32[$1 + 648 >> 2];
      $30 = HEAPF32[$1 + 616 >> 2];
      $31 = HEAPF32[$1 + 632 >> 2];
      $33 = HEAPF32[$1 + 652 >> 2];
      $23 = HEAPF32[$1 + 620 >> 2];
      $22 = HEAPF32[$1 + 636 >> 2];
      $27 = HEAPF32[$1 + 656 >> 2];
      $14 = HEAPF32[$6 + 44 >> 2];
      $28 = HEAPF32[$1 + 624 >> 2];
      $15 = HEAPF32[$6 + 36 >> 2];
      $29 = HEAPF32[$1 + 640 >> 2];
      $17 = HEAPF32[$6 + 40 >> 2];
      $18 = HEAPF32[$6 + 4 >> 2];
      HEAP32[$2 + 172 >> 2] = 0;
      HEAP32[$2 + 156 >> 2] = 0;
      HEAP32[$2 + 140 >> 2] = 0;
      HEAP32[$2 + 124 >> 2] = 0;
      HEAPF32[$2 + 152 >> 2] = Math_fround(Math_fround($28 * $15) + Math_fround($29 * $17)) + Math_fround($27 * $14);
      HEAPF32[$2 + 148 >> 2] = Math_fround(Math_fround($23 * $15) + Math_fround($22 * $17)) + Math_fround($33 * $14);
      HEAPF32[$2 + 144 >> 2] = Math_fround(Math_fround($30 * $15) + Math_fround($31 * $17)) + Math_fround($25 * $14);
      HEAPF32[$2 + 136 >> 2] = Math_fround(Math_fround($28 * $12) + Math_fround($29 * $13)) + Math_fround($27 * $8);
      HEAPF32[$2 + 132 >> 2] = Math_fround(Math_fround($23 * $12) + Math_fround($22 * $13)) + Math_fround($33 * $8);
      HEAPF32[$2 + 128 >> 2] = Math_fround(Math_fround($30 * $12) + Math_fround($31 * $13)) + Math_fround($25 * $8);
      HEAPF32[$2 + 120 >> 2] = Math_fround(Math_fround($18 * $28) + Math_fround($9 * $29)) + Math_fround($10 * $27);
      HEAPF32[$2 + 116 >> 2] = Math_fround(Math_fround($18 * $23) + Math_fround($9 * $22)) + Math_fround($10 * $33);
      HEAPF32[$2 + 112 >> 2] = Math_fround(Math_fround($30 * $18) + Math_fround($31 * $9)) + Math_fround($25 * $10);
      HEAPF32[$2 + 168 >> 2] = $37 + Math_fround(Math_fround(Math_fround($15 * $16) + Math_fround($17 * $24)) + Math_fround($14 * $20));
      HEAPF32[$2 + 164 >> 2] = $36 + Math_fround(Math_fround(Math_fround($12 * $16) + Math_fround($13 * $24)) + Math_fround($8 * $20));
      HEAPF32[$2 + 160 >> 2] = $35 + Math_fround(Math_fround(Math_fround($18 * $16) + Math_fround($9 * $24)) + Math_fround($10 * $20));
      $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $2 + 112 | 0, $26);
      break label$9;
     }
     $6 = HEAP32[$1 + 32 >> 2];
     $35 = HEAPF32[$6 + 52 >> 2];
     $36 = HEAPF32[$6 + 56 >> 2];
     $37 = HEAPF32[$6 + 60 >> 2];
     $20 = HEAPF32[$1 + 672 >> 2];
     $16 = HEAPF32[$1 + 664 >> 2];
     $24 = HEAPF32[$1 + 668 >> 2];
     $9 = HEAPF32[$6 + 8 >> 2];
     $10 = HEAPF32[$6 + 12 >> 2];
     $8 = HEAPF32[$6 + 28 >> 2];
     $12 = HEAPF32[$6 + 20 >> 2];
     $13 = HEAPF32[$6 + 24 >> 2];
     $25 = HEAPF32[$1 + 648 >> 2];
     $30 = HEAPF32[$1 + 616 >> 2];
     $31 = HEAPF32[$1 + 632 >> 2];
     $33 = HEAPF32[$1 + 652 >> 2];
     $23 = HEAPF32[$1 + 620 >> 2];
     $22 = HEAPF32[$1 + 636 >> 2];
     $27 = HEAPF32[$1 + 656 >> 2];
     $14 = HEAPF32[$6 + 44 >> 2];
     $28 = HEAPF32[$1 + 624 >> 2];
     $15 = HEAPF32[$6 + 36 >> 2];
     $29 = HEAPF32[$1 + 640 >> 2];
     $17 = HEAPF32[$6 + 40 >> 2];
     $18 = HEAPF32[$6 + 4 >> 2];
     HEAP32[$2 + 172 >> 2] = 0;
     HEAP32[$2 + 156 >> 2] = 0;
     HEAP32[$2 + 140 >> 2] = 0;
     HEAP32[$2 + 124 >> 2] = 0;
     HEAPF32[$2 + 152 >> 2] = Math_fround(Math_fround($28 * $15) + Math_fround($29 * $17)) + Math_fround($27 * $14);
     HEAPF32[$2 + 148 >> 2] = Math_fround(Math_fround($23 * $15) + Math_fround($22 * $17)) + Math_fround($33 * $14);
     HEAPF32[$2 + 144 >> 2] = Math_fround(Math_fround($30 * $15) + Math_fround($31 * $17)) + Math_fround($25 * $14);
     HEAPF32[$2 + 136 >> 2] = Math_fround(Math_fround($28 * $12) + Math_fround($29 * $13)) + Math_fround($27 * $8);
     HEAPF32[$2 + 132 >> 2] = Math_fround(Math_fround($23 * $12) + Math_fround($22 * $13)) + Math_fround($33 * $8);
     HEAPF32[$2 + 128 >> 2] = Math_fround(Math_fround($30 * $12) + Math_fround($31 * $13)) + Math_fround($25 * $8);
     HEAPF32[$2 + 120 >> 2] = Math_fround(Math_fround($18 * $28) + Math_fround($9 * $29)) + Math_fround($10 * $27);
     HEAPF32[$2 + 116 >> 2] = Math_fround(Math_fround($18 * $23) + Math_fround($9 * $22)) + Math_fround($10 * $33);
     HEAPF32[$2 + 112 >> 2] = Math_fround(Math_fround($30 * $18) + Math_fround($31 * $9)) + Math_fround($25 * $10);
     HEAPF32[$2 + 168 >> 2] = $37 + Math_fround(Math_fround(Math_fround($15 * $16) + Math_fround($17 * $24)) + Math_fround($14 * $20));
     HEAPF32[$2 + 164 >> 2] = $36 + Math_fround(Math_fround(Math_fround($12 * $16) + Math_fround($13 * $24)) + Math_fround($8 * $20));
     HEAPF32[$2 + 160 >> 2] = $35 + Math_fround(Math_fround(Math_fround($18 * $16) + Math_fround($9 * $24)) + Math_fround($10 * $20));
    }
    $5 = !$7;
    $6 = $1 + 688 | 0;
    $9 = btAngularLimit__getLow_28_29_20const($6);
    $10 = btAngularLimit__getHigh_28_29_20const($6);
    if ($5 | $9 == $10) {
     break label$2;
    }
    $8 = HEAPF32[$1 + 692 >> 2];
    HEAP32[$2 + 96 >> 2] = HEAP32[$2 + 120 >> 2];
    HEAP32[$2 + 100 >> 2] = HEAP32[$2 + 136 >> 2];
    HEAP32[$2 + 108 >> 2] = 0;
    HEAP32[$2 + 104 >> 2] = HEAP32[$2 + 152 >> 2];
    HEAP32[$2 + 80 >> 2] = HEAP32[$2 + 112 >> 2];
    HEAP32[$2 + 84 >> 2] = HEAP32[$2 + 128 >> 2];
    HEAP32[$2 + 92 >> 2] = 0;
    HEAP32[$2 + 88 >> 2] = HEAP32[$2 + 144 >> 2];
    $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
    HEAP32[$2 + 72 >> 2] = 0;
    HEAP32[$2 + 76 >> 2] = 0;
    HEAP32[$2 + 64 >> 2] = 0;
    HEAP32[$2 + 68 >> 2] = 0;
    $0 = $8 > Math_fround(0);
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($1, $2 + 160 | 0, $2 + 96 | 0, $2 + 80 | 0, $26, $26, $0 ? $9 : Math_fround(0), $0 ? $10 : Math_fround(6.2831854820251465), $2 - -64 | 0, $0, Math_fround(10));
    break label$2;
   case 1:
    $11 = HEAP32[$1 + 28 >> 2];
    $35 = HEAPF32[$11 + 52 >> 2];
    $9 = HEAPF32[$11 + 8 >> 2];
    $10 = HEAPF32[$11 + 12 >> 2];
    $20 = HEAPF32[$1 + 332 >> 2];
    $16 = HEAPF32[$1 + 300 >> 2];
    $24 = HEAPF32[$1 + 316 >> 2];
    $36 = HEAPF32[$11 + 56 >> 2];
    $37 = HEAPF32[$11 + 60 >> 2];
    $25 = HEAPF32[$1 + 356 >> 2];
    $30 = HEAPF32[$1 + 348 >> 2];
    $31 = HEAPF32[$1 + 352 >> 2];
    $8 = HEAPF32[$11 + 28 >> 2];
    $12 = HEAPF32[$11 + 20 >> 2];
    $13 = HEAPF32[$11 + 24 >> 2];
    $33 = HEAPF32[$1 + 336 >> 2];
    $23 = HEAPF32[$1 + 304 >> 2];
    $22 = HEAPF32[$1 + 320 >> 2];
    $27 = HEAPF32[$1 + 340 >> 2];
    $14 = HEAPF32[$11 + 44 >> 2];
    $28 = HEAPF32[$1 + 308 >> 2];
    $15 = HEAPF32[$11 + 36 >> 2];
    $29 = HEAPF32[$1 + 324 >> 2];
    $17 = HEAPF32[$11 + 40 >> 2];
    $18 = HEAPF32[$11 + 4 >> 2];
    HEAP32[$2 + 172 >> 2] = 0;
    HEAP32[$2 + 156 >> 2] = 0;
    HEAP32[$2 + 140 >> 2] = 0;
    HEAPF32[$2 + 152 >> 2] = Math_fround(Math_fround($28 * $15) + Math_fround($29 * $17)) + Math_fround($27 * $14);
    HEAPF32[$2 + 148 >> 2] = Math_fround(Math_fround($23 * $15) + Math_fround($22 * $17)) + Math_fround($33 * $14);
    HEAPF32[$2 + 136 >> 2] = Math_fround(Math_fround($28 * $12) + Math_fround($29 * $13)) + Math_fround($27 * $8);
    HEAPF32[$2 + 132 >> 2] = Math_fround(Math_fround($23 * $12) + Math_fround($22 * $13)) + Math_fround($33 * $8);
    HEAPF32[$2 + 168 >> 2] = $37 + Math_fround(Math_fround(Math_fround($15 * $30) + Math_fround($17 * $31)) + Math_fround($14 * $25));
    HEAPF32[$2 + 164 >> 2] = $36 + Math_fround(Math_fround(Math_fround($12 * $30) + Math_fround($13 * $31)) + Math_fround($8 * $25));
    HEAP32[$2 + 124 >> 2] = 0;
    HEAPF32[$2 + 144 >> 2] = Math_fround(Math_fround($16 * $15) + Math_fround($24 * $17)) + Math_fround($20 * $14);
    HEAPF32[$2 + 128 >> 2] = Math_fround(Math_fround($16 * $12) + Math_fround($24 * $13)) + Math_fround($20 * $8);
    HEAPF32[$2 + 120 >> 2] = Math_fround(Math_fround($18 * $28) + Math_fround($9 * $29)) + Math_fround($10 * $27);
    HEAPF32[$2 + 116 >> 2] = Math_fround(Math_fround($18 * $23) + Math_fround($9 * $22)) + Math_fround($10 * $33);
    HEAPF32[$2 + 112 >> 2] = Math_fround(Math_fround($16 * $18) + Math_fround($24 * $9)) + Math_fround($20 * $10);
    HEAPF32[$2 + 160 >> 2] = $35 + Math_fround(Math_fround(Math_fround($18 * $30) + Math_fround($9 * $31)) + Math_fround($10 * $25));
    label$11 : {
     if ($6) {
      $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $2 + 112 | 0, $26);
      $6 = HEAP32[$1 + 32 >> 2];
      $35 = HEAPF32[$6 + 52 >> 2];
      $36 = HEAPF32[$6 + 56 >> 2];
      $37 = HEAPF32[$6 + 60 >> 2];
      $20 = HEAPF32[$1 + 420 >> 2];
      $16 = HEAPF32[$1 + 412 >> 2];
      $24 = HEAPF32[$1 + 416 >> 2];
      $9 = HEAPF32[$6 + 8 >> 2];
      $10 = HEAPF32[$6 + 12 >> 2];
      $8 = HEAPF32[$6 + 28 >> 2];
      $12 = HEAPF32[$6 + 20 >> 2];
      $13 = HEAPF32[$6 + 24 >> 2];
      $25 = HEAPF32[$1 + 396 >> 2];
      $30 = HEAPF32[$1 + 364 >> 2];
      $31 = HEAPF32[$1 + 380 >> 2];
      $33 = HEAPF32[$1 + 400 >> 2];
      $23 = HEAPF32[$1 + 368 >> 2];
      $22 = HEAPF32[$1 + 384 >> 2];
      $27 = HEAPF32[$1 + 404 >> 2];
      $14 = HEAPF32[$6 + 44 >> 2];
      $28 = HEAPF32[$1 + 372 >> 2];
      $15 = HEAPF32[$6 + 36 >> 2];
      $29 = HEAPF32[$1 + 388 >> 2];
      $17 = HEAPF32[$6 + 40 >> 2];
      $18 = HEAPF32[$6 + 4 >> 2];
      HEAP32[$2 + 172 >> 2] = 0;
      HEAP32[$2 + 156 >> 2] = 0;
      HEAP32[$2 + 140 >> 2] = 0;
      HEAP32[$2 + 124 >> 2] = 0;
      HEAPF32[$2 + 152 >> 2] = Math_fround(Math_fround($28 * $15) + Math_fround($29 * $17)) + Math_fround($27 * $14);
      HEAPF32[$2 + 148 >> 2] = Math_fround(Math_fround($23 * $15) + Math_fround($22 * $17)) + Math_fround($33 * $14);
      HEAPF32[$2 + 144 >> 2] = Math_fround(Math_fround($30 * $15) + Math_fround($31 * $17)) + Math_fround($25 * $14);
      HEAPF32[$2 + 136 >> 2] = Math_fround(Math_fround($28 * $12) + Math_fround($29 * $13)) + Math_fround($27 * $8);
      HEAPF32[$2 + 132 >> 2] = Math_fround(Math_fround($23 * $12) + Math_fround($22 * $13)) + Math_fround($33 * $8);
      HEAPF32[$2 + 128 >> 2] = Math_fround(Math_fround($30 * $12) + Math_fround($31 * $13)) + Math_fround($25 * $8);
      HEAPF32[$2 + 120 >> 2] = Math_fround(Math_fround($18 * $28) + Math_fround($9 * $29)) + Math_fround($10 * $27);
      HEAPF32[$2 + 116 >> 2] = Math_fround(Math_fround($18 * $23) + Math_fround($9 * $22)) + Math_fround($10 * $33);
      HEAPF32[$2 + 112 >> 2] = Math_fround(Math_fround($30 * $18) + Math_fround($31 * $9)) + Math_fround($25 * $10);
      HEAPF32[$2 + 168 >> 2] = $37 + Math_fround(Math_fround(Math_fround($15 * $16) + Math_fround($17 * $24)) + Math_fround($14 * $20));
      HEAPF32[$2 + 164 >> 2] = $36 + Math_fround(Math_fround(Math_fround($12 * $16) + Math_fround($13 * $24)) + Math_fround($8 * $20));
      HEAPF32[$2 + 160 >> 2] = $35 + Math_fround(Math_fround(Math_fround($18 * $16) + Math_fround($9 * $24)) + Math_fround($10 * $20));
      $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $2 + 112 | 0, $26);
      break label$11;
     }
     $6 = HEAP32[$1 + 32 >> 2];
     $35 = HEAPF32[$6 + 52 >> 2];
     $36 = HEAPF32[$6 + 56 >> 2];
     $37 = HEAPF32[$6 + 60 >> 2];
     $20 = HEAPF32[$1 + 420 >> 2];
     $16 = HEAPF32[$1 + 412 >> 2];
     $24 = HEAPF32[$1 + 416 >> 2];
     $9 = HEAPF32[$6 + 8 >> 2];
     $10 = HEAPF32[$6 + 12 >> 2];
     $8 = HEAPF32[$6 + 28 >> 2];
     $12 = HEAPF32[$6 + 20 >> 2];
     $13 = HEAPF32[$6 + 24 >> 2];
     $25 = HEAPF32[$1 + 396 >> 2];
     $30 = HEAPF32[$1 + 364 >> 2];
     $31 = HEAPF32[$1 + 380 >> 2];
     $33 = HEAPF32[$1 + 400 >> 2];
     $23 = HEAPF32[$1 + 368 >> 2];
     $22 = HEAPF32[$1 + 384 >> 2];
     $27 = HEAPF32[$1 + 404 >> 2];
     $14 = HEAPF32[$6 + 44 >> 2];
     $28 = HEAPF32[$1 + 372 >> 2];
     $15 = HEAPF32[$6 + 36 >> 2];
     $29 = HEAPF32[$1 + 388 >> 2];
     $17 = HEAPF32[$6 + 40 >> 2];
     $18 = HEAPF32[$6 + 4 >> 2];
     HEAP32[$2 + 172 >> 2] = 0;
     HEAP32[$2 + 156 >> 2] = 0;
     HEAP32[$2 + 140 >> 2] = 0;
     HEAP32[$2 + 124 >> 2] = 0;
     HEAPF32[$2 + 152 >> 2] = Math_fround(Math_fround($28 * $15) + Math_fround($29 * $17)) + Math_fround($27 * $14);
     HEAPF32[$2 + 148 >> 2] = Math_fround(Math_fround($23 * $15) + Math_fround($22 * $17)) + Math_fround($33 * $14);
     HEAPF32[$2 + 144 >> 2] = Math_fround(Math_fround($30 * $15) + Math_fround($31 * $17)) + Math_fround($25 * $14);
     HEAPF32[$2 + 136 >> 2] = Math_fround(Math_fround($28 * $12) + Math_fround($29 * $13)) + Math_fround($27 * $8);
     HEAPF32[$2 + 132 >> 2] = Math_fround(Math_fround($23 * $12) + Math_fround($22 * $13)) + Math_fround($33 * $8);
     HEAPF32[$2 + 128 >> 2] = Math_fround(Math_fround($30 * $12) + Math_fround($31 * $13)) + Math_fround($25 * $8);
     HEAPF32[$2 + 120 >> 2] = Math_fround(Math_fround($18 * $28) + Math_fround($9 * $29)) + Math_fround($10 * $27);
     HEAPF32[$2 + 116 >> 2] = Math_fround(Math_fround($18 * $23) + Math_fround($9 * $22)) + Math_fround($10 * $33);
     HEAPF32[$2 + 112 >> 2] = Math_fround(Math_fround($30 * $18) + Math_fround($31 * $9)) + Math_fround($25 * $10);
     HEAPF32[$2 + 168 >> 2] = $37 + Math_fround(Math_fround(Math_fround($15 * $16) + Math_fround($17 * $24)) + Math_fround($14 * $20));
     HEAPF32[$2 + 164 >> 2] = $36 + Math_fround(Math_fround(Math_fround($12 * $16) + Math_fround($13 * $24)) + Math_fround($8 * $20));
     HEAPF32[$2 + 160 >> 2] = $35 + Math_fround(Math_fround(Math_fround($18 * $16) + Math_fround($9 * $24)) + Math_fround($10 * $20));
    }
    if (!$7) {
     break label$2;
    }
    btConeTwistConstraint__GetPointForAngle_28float_2c_20float_29_20const($2 + 96 | 0, $1, Math_fround(6.0868353843688965), $26);
    HEAP32[$2 + 108 >> 2] = 0;
    $9 = HEAPF32[$2 + 96 >> 2];
    $10 = HEAPF32[$2 + 100 >> 2];
    $8 = HEAPF32[$2 + 104 >> 2];
    HEAPF32[$2 + 104 >> 2] = Math_fround(Math_fround(Math_fround($9 * HEAPF32[$2 + 144 >> 2]) + Math_fround($10 * HEAPF32[$2 + 148 >> 2])) + Math_fround($8 * HEAPF32[$2 + 152 >> 2])) + HEAPF32[$2 + 168 >> 2];
    HEAPF32[$2 + 100 >> 2] = Math_fround(Math_fround(Math_fround($9 * HEAPF32[$2 + 128 >> 2]) + Math_fround($10 * HEAPF32[$2 + 132 >> 2])) + Math_fround($8 * HEAPF32[$2 + 136 >> 2])) + HEAPF32[$2 + 164 >> 2];
    HEAPF32[$2 + 96 >> 2] = Math_fround(Math_fround(Math_fround($9 * HEAPF32[$2 + 112 >> 2]) + Math_fround($10 * HEAPF32[$2 + 116 >> 2])) + Math_fround($8 * HEAPF32[$2 + 120 >> 2])) + HEAPF32[$2 + 160 >> 2];
    $19 = $2 + 160 | 0;
    $4 = $2;
    $7 = 0;
    while (1) {
     btConeTwistConstraint__GetPointForAngle_28float_2c_20float_29_20const($2 + 80 | 0, $1, Math_fround(Math_fround(Math_fround($7 | 0) * Math_fround(6.283185005187988)) * Math_fround(.03125)), $26);
     HEAP32[$2 + 92 >> 2] = 0;
     $9 = HEAPF32[$2 + 80 >> 2];
     $10 = HEAPF32[$2 + 84 >> 2];
     $8 = HEAPF32[$2 + 88 >> 2];
     HEAPF32[$2 + 88 >> 2] = Math_fround(Math_fround(Math_fround($9 * HEAPF32[$2 + 144 >> 2]) + Math_fround($10 * HEAPF32[$2 + 148 >> 2])) + Math_fround($8 * HEAPF32[$2 + 152 >> 2])) + HEAPF32[$2 + 168 >> 2];
     HEAPF32[$2 + 84 >> 2] = Math_fround(Math_fround(Math_fround($9 * HEAPF32[$2 + 128 >> 2]) + Math_fround($10 * HEAPF32[$2 + 132 >> 2])) + Math_fround($8 * HEAPF32[$2 + 136 >> 2])) + HEAPF32[$2 + 164 >> 2];
     HEAPF32[$2 + 80 >> 2] = Math_fround(Math_fround(Math_fround($9 * HEAPF32[$2 + 112 >> 2]) + Math_fround($10 * HEAPF32[$2 + 116 >> 2])) + Math_fround($8 * HEAPF32[$2 + 120 >> 2])) + HEAPF32[$2 + 160 >> 2];
     $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     $5 = $4;
     HEAP32[$5 + 72 >> 2] = 0;
     HEAP32[$5 + 76 >> 2] = 0;
     HEAP32[$2 + 64 >> 2] = 0;
     HEAP32[$2 + 68 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 16 >> 2]]($6, $2 + 96 | 0, $2 + 80 | 0, $2 - -64 | 0);
     if (!($7 & 3)) {
      $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      HEAP32[$4 + 72 >> 2] = 0;
      HEAP32[$5 + 76 >> 2] = 0;
      HEAP32[$2 + 64 >> 2] = 0;
      HEAP32[$2 + 68 >> 2] = 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 16 >> 2]]($6, $19, $2 + 80 | 0, $2 - -64 | 0);
     }
     $5 = HEAP32[$2 + 92 >> 2];
     $3 = HEAP32[$2 + 88 >> 2];
     HEAP32[$2 + 104 >> 2] = $3;
     HEAP32[$2 + 108 >> 2] = $5;
     $3 = HEAP32[$2 + 84 >> 2];
     $5 = HEAP32[$2 + 80 >> 2];
     HEAP32[$2 + 96 >> 2] = $5;
     HEAP32[$2 + 100 >> 2] = $3;
     $7 = $7 + 1 | 0;
     if (($7 | 0) != 32) {
      continue;
     }
     break;
    }
    $9 = HEAPF32[$1 + 512 >> 2];
    $10 = HEAPF32[$1 + 452 >> 2];
    $7 = HEAP32[$1 + 32 >> 2];
    label$15 : {
     if (HEAPF32[$7 + 404 >> 2] > Math_fround(0)) {
      $12 = HEAPF32[$7 + 36 >> 2];
      $8 = HEAPF32[$1 + 412 >> 2];
      $13 = HEAPF32[$7 + 40 >> 2];
      $16 = HEAPF32[$1 + 416 >> 2];
      $24 = Math_fround(Math_fround($12 * $8) + Math_fround($13 * $16));
      $14 = HEAPF32[$7 + 20 >> 2];
      $15 = HEAPF32[$7 + 24 >> 2];
      $17 = HEAPF32[$7 + 28 >> 2];
      $27 = HEAPF32[$1 + 420 >> 2];
      $25 = Math_fround(Math_fround(Math_fround($14 * $8) + Math_fround($15 * $16)) + Math_fround($17 * $27));
      $18 = HEAPF32[$7 + 4 >> 2];
      $20 = HEAPF32[$7 + 8 >> 2];
      $8 = Math_fround(Math_fround($18 * $8) + Math_fround($20 * $16));
      $16 = HEAPF32[$7 + 12 >> 2];
      $30 = Math_fround($8 + Math_fround($16 * $27));
      $23 = HEAPF32[$1 + 372 >> 2];
      $28 = HEAPF32[$1 + 388 >> 2];
      $29 = HEAPF32[$1 + 404 >> 2];
      $22 = HEAPF32[$7 + 44 >> 2];
      $31 = Math_fround(Math_fround(Math_fround($23 * $12) + Math_fround($28 * $13)) + Math_fround($29 * $22));
      $35 = HEAPF32[$1 + 368 >> 2];
      $36 = HEAPF32[$1 + 384 >> 2];
      $37 = HEAPF32[$1 + 400 >> 2];
      $8 = Math_fround(Math_fround(Math_fround($35 * $12) + Math_fround($36 * $13)) + Math_fround($37 * $22));
      $39 = HEAPF32[$1 + 364 >> 2];
      $40 = HEAPF32[$1 + 380 >> 2];
      $41 = HEAPF32[$1 + 396 >> 2];
      $12 = Math_fround(Math_fround(Math_fround($39 * $12) + Math_fround($40 * $13)) + Math_fround($41 * $22));
      $33 = Math_fround(Math_fround(Math_fround($23 * $14) + Math_fround($28 * $15)) + Math_fround($29 * $17));
      $13 = Math_fround(Math_fround(Math_fround($35 * $14) + Math_fround($36 * $15)) + Math_fround($37 * $17));
      $14 = Math_fround(Math_fround(Math_fround($39 * $14) + Math_fround($40 * $15)) + Math_fround($41 * $17));
      $23 = Math_fround(Math_fround(Math_fround($18 * $23) + Math_fround($20 * $28)) + Math_fround($16 * $29));
      $22 = Math_fround($22 * $27);
      $15 = Math_fround(Math_fround(Math_fround($18 * $35) + Math_fround($20 * $36)) + Math_fround($16 * $37));
      $17 = Math_fround(Math_fround(Math_fround($39 * $18) + Math_fround($40 * $20)) + Math_fround($41 * $16));
      break label$15;
     }
     $7 = HEAP32[$1 + 28 >> 2];
     $12 = HEAPF32[$7 + 36 >> 2];
     $8 = HEAPF32[$1 + 348 >> 2];
     $13 = HEAPF32[$7 + 40 >> 2];
     $16 = HEAPF32[$1 + 352 >> 2];
     $24 = Math_fround(Math_fround($12 * $8) + Math_fround($13 * $16));
     $14 = HEAPF32[$7 + 20 >> 2];
     $15 = HEAPF32[$7 + 24 >> 2];
     $17 = HEAPF32[$7 + 28 >> 2];
     $27 = HEAPF32[$1 + 356 >> 2];
     $25 = Math_fround(Math_fround(Math_fround($14 * $8) + Math_fround($15 * $16)) + Math_fround($17 * $27));
     $18 = HEAPF32[$7 + 4 >> 2];
     $20 = HEAPF32[$7 + 8 >> 2];
     $8 = Math_fround(Math_fround($18 * $8) + Math_fround($20 * $16));
     $16 = HEAPF32[$7 + 12 >> 2];
     $30 = Math_fround($8 + Math_fround($16 * $27));
     $23 = HEAPF32[$1 + 308 >> 2];
     $28 = HEAPF32[$1 + 324 >> 2];
     $29 = HEAPF32[$1 + 340 >> 2];
     $22 = HEAPF32[$7 + 44 >> 2];
     $31 = Math_fround(Math_fround(Math_fround($23 * $12) + Math_fround($28 * $13)) + Math_fround($29 * $22));
     $35 = HEAPF32[$1 + 304 >> 2];
     $36 = HEAPF32[$1 + 320 >> 2];
     $37 = HEAPF32[$1 + 336 >> 2];
     $8 = Math_fround(Math_fround(Math_fround($35 * $12) + Math_fround($36 * $13)) + Math_fround($37 * $22));
     $39 = HEAPF32[$1 + 300 >> 2];
     $40 = HEAPF32[$1 + 316 >> 2];
     $41 = HEAPF32[$1 + 332 >> 2];
     $12 = Math_fround(Math_fround(Math_fround($39 * $12) + Math_fround($40 * $13)) + Math_fround($41 * $22));
     $33 = Math_fround(Math_fround(Math_fround($23 * $14) + Math_fround($28 * $15)) + Math_fround($29 * $17));
     $13 = Math_fround(Math_fround(Math_fround($35 * $14) + Math_fround($36 * $15)) + Math_fround($37 * $17));
     $14 = Math_fround(Math_fround(Math_fround($39 * $14) + Math_fround($40 * $15)) + Math_fround($41 * $17));
     $23 = Math_fround(Math_fround(Math_fround($18 * $23) + Math_fround($20 * $28)) + Math_fround($16 * $29));
     $22 = Math_fround($22 * $27);
     $15 = Math_fround(Math_fround(Math_fround($18 * $35) + Math_fround($20 * $36)) + Math_fround($16 * $37));
     $17 = Math_fround(Math_fround(Math_fround($39 * $18) + Math_fround($40 * $20)) + Math_fround($41 * $16));
    }
    $18 = HEAPF32[$7 + 52 >> 2];
    $20 = HEAPF32[$7 + 56 >> 2];
    $16 = HEAPF32[$7 + 60 >> 2];
    HEAP32[$2 + 172 >> 2] = 0;
    HEAP32[$2 + 156 >> 2] = 0;
    HEAPF32[$2 + 152 >> 2] = $31;
    HEAPF32[$2 + 148 >> 2] = $8;
    HEAPF32[$2 + 144 >> 2] = $12;
    HEAP32[$2 + 140 >> 2] = 0;
    HEAPF32[$2 + 136 >> 2] = $33;
    HEAPF32[$2 + 132 >> 2] = $13;
    HEAPF32[$2 + 128 >> 2] = $14;
    HEAP32[$2 + 124 >> 2] = 0;
    HEAPF32[$2 + 120 >> 2] = $23;
    HEAPF32[$2 + 116 >> 2] = $15;
    HEAPF32[$2 + 112 >> 2] = $17;
    HEAPF32[$2 + 168 >> 2] = $16 + Math_fround($24 + $22);
    HEAPF32[$2 + 164 >> 2] = $25 + $20;
    HEAPF32[$2 + 160 >> 2] = $18 + $30;
    $4 = $19;
    $3 = HEAP32[$4 + 8 >> 2];
    $5 = HEAP32[$4 + 12 >> 2];
    HEAP32[$2 + 88 >> 2] = $3;
    HEAP32[$2 + 92 >> 2] = $5;
    $3 = HEAP32[$4 + 4 >> 2];
    $5 = HEAP32[$4 >> 2];
    HEAP32[$2 + 80 >> 2] = $5;
    HEAP32[$2 + 84 >> 2] = $3;
    HEAP32[$2 + 76 >> 2] = 0;
    HEAPF32[$2 + 72 >> 2] = $12;
    HEAPF32[$2 + 68 >> 2] = $14;
    HEAPF32[$2 + 64 >> 2] = $17;
    HEAP32[$2 + 60 >> 2] = 0;
    HEAPF32[$2 + 56 >> 2] = $8;
    HEAPF32[$2 + 52 >> 2] = $13;
    HEAPF32[$2 + 48 >> 2] = $15;
    $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
    HEAP32[$2 + 40 >> 2] = 0;
    HEAP32[$2 + 44 >> 2] = 0;
    HEAP32[$2 + 32 >> 2] = 0;
    HEAP32[$2 + 36 >> 2] = 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($1, $2 + 80 | 0, $2 - -64 | 0, $2 + 48 | 0, $26, $26, Math_fround(Math_fround(-$9) - $10), Math_fround($10 - $9), $2 + 32 | 0, 1, Math_fround(10));
    break label$2;
   case 2:
   case 5:
    $44 = $2;
    $4 = $1 + 1072 | 0;
    $3 = HEAP32[$4 >> 2];
    $5 = HEAP32[$4 + 4 >> 2];
    $4 = $3;
    $32 = $2 + 120 | 0;
    $3 = $32;
    HEAP32[$3 >> 2] = $4;
    HEAP32[$3 + 4 >> 2] = $5;
    $34 = $1 + 1064 | 0;
    $4 = $34;
    $5 = HEAP32[$4 >> 2];
    $3 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 + 112 >> 2] = $5;
    HEAP32[$2 + 116 >> 2] = $3;
    $4 = $1 + 1088 | 0;
    $3 = HEAP32[$4 >> 2];
    $5 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 + 136 >> 2] = $3;
    HEAP32[$2 + 140 >> 2] = $5;
    $38 = $1 + 1080 | 0;
    $4 = $38;
    $5 = HEAP32[$4 >> 2];
    $3 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 + 128 >> 2] = $5;
    HEAP32[$2 + 132 >> 2] = $3;
    $4 = $1 + 1104 | 0;
    $3 = HEAP32[$4 >> 2];
    $5 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 + 152 >> 2] = $3;
    HEAP32[$2 + 156 >> 2] = $5;
    $42 = $1 + 1096 | 0;
    $4 = $42;
    $5 = HEAP32[$4 >> 2];
    $3 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 + 144 >> 2] = $5;
    HEAP32[$2 + 148 >> 2] = $3;
    $4 = $1 + 1120 | 0;
    $3 = HEAP32[$4 >> 2];
    $5 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 + 168 >> 2] = $3;
    HEAP32[$2 + 172 >> 2] = $5;
    $43 = $1 + 1112 | 0;
    $4 = $43;
    $5 = HEAP32[$4 >> 2];
    $3 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 + 160 >> 2] = $5;
    HEAP32[$2 + 164 >> 2] = $3;
    $11 = $2 + 160 | 0;
    $19 = $2 + 144 | 0;
    $21 = $2 + 128 | 0;
    label$17 : {
     if ($6) {
      $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $2 + 112 | 0, $26);
      $4 = $1 + 1136 | 0;
      $3 = HEAP32[$4 >> 2];
      $5 = HEAP32[$4 + 4 >> 2];
      $4 = $3;
      $3 = $44;
      HEAP32[$3 + 120 >> 2] = $4;
      HEAP32[$3 + 124 >> 2] = $5;
      $4 = $1 + 1128 | 0;
      $5 = HEAP32[$4 >> 2];
      $3 = HEAP32[$4 + 4 >> 2];
      HEAP32[$2 + 112 >> 2] = $5;
      HEAP32[$2 + 116 >> 2] = $3;
      $4 = $1 + 1152 | 0;
      $3 = HEAP32[$4 >> 2];
      $5 = HEAP32[$4 + 4 >> 2];
      $4 = $3;
      $3 = $21;
      HEAP32[$3 + 8 >> 2] = $4;
      HEAP32[$3 + 12 >> 2] = $5;
      $4 = $1 + 1144 | 0;
      $5 = HEAP32[$4 >> 2];
      $3 = HEAP32[$4 + 4 >> 2];
      $4 = $5;
      $5 = $21;
      HEAP32[$5 >> 2] = $4;
      HEAP32[$5 + 4 >> 2] = $3;
      $4 = $1 + 1168 | 0;
      $3 = HEAP32[$4 >> 2];
      $5 = HEAP32[$4 + 4 >> 2];
      $4 = $3;
      $3 = $19;
      HEAP32[$3 + 8 >> 2] = $4;
      HEAP32[$3 + 12 >> 2] = $5;
      $4 = $1 + 1160 | 0;
      $5 = HEAP32[$4 >> 2];
      $3 = HEAP32[$4 + 4 >> 2];
      $4 = $5;
      $5 = $19;
      HEAP32[$5 >> 2] = $4;
      HEAP32[$5 + 4 >> 2] = $3;
      $4 = $1 + 1184 | 0;
      $3 = HEAP32[$4 >> 2];
      $5 = HEAP32[$4 + 4 >> 2];
      $4 = $3;
      $3 = $11;
      HEAP32[$3 + 8 >> 2] = $4;
      HEAP32[$3 + 12 >> 2] = $5;
      $4 = $1 + 1176 | 0;
      $5 = HEAP32[$4 >> 2];
      $3 = HEAP32[$4 + 4 >> 2];
      $4 = $5;
      $5 = $11;
      HEAP32[$5 >> 2] = $4;
      HEAP32[$5 + 4 >> 2] = $3;
      $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $2 + 112 | 0, $26);
      break label$17;
     }
     $4 = $1 + 1136 | 0;
     $3 = HEAP32[$4 >> 2];
     $5 = HEAP32[$4 + 4 >> 2];
     $4 = $3;
     $3 = $44;
     HEAP32[$3 + 120 >> 2] = $4;
     HEAP32[$3 + 124 >> 2] = $5;
     $4 = $1 + 1128 | 0;
     $5 = HEAP32[$4 >> 2];
     $3 = HEAP32[$4 + 4 >> 2];
     HEAP32[$2 + 112 >> 2] = $5;
     HEAP32[$2 + 116 >> 2] = $3;
     $4 = $1 + 1152 | 0;
     $3 = HEAP32[$4 >> 2];
     $5 = HEAP32[$4 + 4 >> 2];
     $4 = $3;
     $3 = $21;
     HEAP32[$3 + 8 >> 2] = $4;
     HEAP32[$3 + 12 >> 2] = $5;
     $4 = $1 + 1144 | 0;
     $5 = HEAP32[$4 >> 2];
     $3 = HEAP32[$4 + 4 >> 2];
     $4 = $5;
     $5 = $21;
     HEAP32[$5 >> 2] = $4;
     HEAP32[$5 + 4 >> 2] = $3;
     $4 = $1 + 1168 | 0;
     $3 = HEAP32[$4 >> 2];
     $5 = HEAP32[$4 + 4 >> 2];
     $4 = $3;
     $3 = $19;
     HEAP32[$3 + 8 >> 2] = $4;
     HEAP32[$3 + 12 >> 2] = $5;
     $4 = $1 + 1160 | 0;
     $5 = HEAP32[$4 >> 2];
     $3 = HEAP32[$4 + 4 >> 2];
     $4 = $5;
     $5 = $19;
     HEAP32[$5 >> 2] = $4;
     HEAP32[$5 + 4 >> 2] = $3;
     $4 = $1 + 1184 | 0;
     $3 = HEAP32[$4 >> 2];
     $5 = HEAP32[$4 + 4 >> 2];
     $4 = $3;
     $3 = $11;
     HEAP32[$3 + 8 >> 2] = $4;
     HEAP32[$3 + 12 >> 2] = $5;
     $4 = $1 + 1176 | 0;
     $5 = HEAP32[$4 >> 2];
     $3 = HEAP32[$4 + 4 >> 2];
     $4 = $5;
     $5 = $11;
     HEAP32[$5 >> 2] = $4;
     HEAP32[$5 + 4 >> 2] = $3;
    }
    if (!$7) {
     break label$2;
    }
    $4 = $34;
    $3 = HEAP32[$4 + 8 >> 2];
    $5 = HEAP32[$4 + 12 >> 2];
    $32 = $3;
    $7 = $2 + 120 | 0;
    $3 = $7;
    HEAP32[$3 >> 2] = $32;
    HEAP32[$3 + 4 >> 2] = $5;
    $3 = HEAP32[$4 + 4 >> 2];
    $5 = HEAP32[$4 >> 2];
    HEAP32[$2 + 112 >> 2] = $5;
    HEAP32[$2 + 116 >> 2] = $3;
    $4 = $38;
    $3 = HEAP32[$4 + 8 >> 2];
    $5 = HEAP32[$4 + 12 >> 2];
    $32 = $3;
    $3 = $21 + 8 | 0;
    HEAP32[$3 >> 2] = $32;
    HEAP32[$3 + 4 >> 2] = $5;
    $3 = HEAP32[$4 + 4 >> 2];
    $5 = HEAP32[$4 >> 2];
    $4 = $5;
    $5 = $21;
    HEAP32[$5 >> 2] = $4;
    HEAP32[$5 + 4 >> 2] = $3;
    $4 = $42;
    $3 = HEAP32[$4 + 8 >> 2];
    $5 = HEAP32[$4 + 12 >> 2];
    $32 = $3;
    $3 = $19 + 8 | 0;
    HEAP32[$3 >> 2] = $32;
    HEAP32[$3 + 4 >> 2] = $5;
    $3 = HEAP32[$4 + 4 >> 2];
    $5 = HEAP32[$4 >> 2];
    $4 = $5;
    $5 = $19;
    HEAP32[$5 >> 2] = $4;
    HEAP32[$5 + 4 >> 2] = $3;
    $4 = $43;
    $3 = HEAP32[$4 + 8 >> 2];
    $5 = HEAP32[$4 + 12 >> 2];
    $32 = $3;
    $3 = $11 + 8 | 0;
    HEAP32[$3 >> 2] = $32;
    HEAP32[$3 + 4 >> 2] = $5;
    $3 = HEAP32[$4 + 4 >> 2];
    $5 = HEAP32[$4 >> 2];
    $4 = $5;
    $5 = $11;
    HEAP32[$5 >> 2] = $4;
    HEAP32[$5 + 4 >> 2] = $3;
    HEAP32[$2 + 96 >> 2] = HEAP32[$2 + 120 >> 2];
    HEAP32[$2 + 100 >> 2] = HEAP32[$2 + 136 >> 2];
    HEAP32[$2 + 108 >> 2] = 0;
    HEAP32[$2 + 104 >> 2] = HEAP32[$2 + 152 >> 2];
    HEAP32[$2 + 80 >> 2] = HEAP32[$2 + 112 >> 2];
    HEAP32[$2 + 84 >> 2] = HEAP32[$2 + 128 >> 2];
    HEAP32[$2 + 92 >> 2] = 0;
    HEAP32[$2 + 88 >> 2] = HEAP32[$2 + 144 >> 2];
    $9 = HEAPF32[$1 + 1e3 >> 2];
    $10 = HEAPF32[$1 + 996 >> 2];
    $8 = HEAPF32[$1 + 936 >> 2];
    $12 = HEAPF32[$1 + 932 >> 2];
    $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
    HEAP32[$2 + 72 >> 2] = 0;
    HEAP32[$2 + 76 >> 2] = 0;
    HEAP32[$2 + 64 >> 2] = 0;
    HEAP32[$2 + 68 >> 2] = 0;
    $32 = $1 + 1176 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 72 >> 2]]($6, $32, $2 + 96 | 0, $2 + 80 | 0, Math_fround($26 * Math_fround(.8999999761581421)), $12, $8, $10, $9, $2 - -64 | 0, Math_fround(10), 1);
    HEAP32[$2 + 92 >> 2] = 0;
    HEAP32[$2 + 88 >> 2] = HEAP32[$2 + 148 >> 2];
    HEAP32[$2 + 84 >> 2] = HEAP32[$2 + 132 >> 2];
    HEAP32[$2 + 80 >> 2] = HEAP32[$2 + 116 >> 2];
    $8 = btGeneric6DofConstraint__getAngle_28int_29_20const($1, 1);
    $12 = btGeneric6DofConstraint__getAngle_28int_29_20const($1, 2);
    $9 = HEAPF32[$2 + 80 >> 2];
    $10 = sinf($12);
    $13 = HEAPF32[$2 + 84 >> 2];
    $12 = cosf($12);
    HEAPF32[$2 + 68 >> 2] = Math_fround($13 * $12) - Math_fround($10 * $9);
    $14 = sinf($8);
    $16 = Math_fround(Math_fround($9 * Math_fround($12 * $14)) + Math_fround($13 * Math_fround($14 * $10)));
    $15 = HEAPF32[$2 + 88 >> 2];
    $8 = cosf($8);
    HEAPF32[$2 + 72 >> 2] = $16 + Math_fround($15 * $8);
    HEAPF32[$2 + 64 >> 2] = Math_fround(Math_fround($9 * Math_fround($8 * $12)) + Math_fround($13 * Math_fround($8 * $10))) - Math_fround($14 * $15);
    $4 = $1 + 1136 | 0;
    $3 = HEAP32[$4 >> 2];
    $5 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 + 120 >> 2] = $3;
    HEAP32[$2 + 124 >> 2] = $5;
    $4 = $1 + 1128 | 0;
    $5 = HEAP32[$4 >> 2];
    $3 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 + 112 >> 2] = $5;
    HEAP32[$2 + 116 >> 2] = $3;
    $4 = $1 + 1152 | 0;
    $3 = HEAP32[$4 >> 2];
    $5 = HEAP32[$4 + 4 >> 2];
    $4 = $3;
    $3 = $21;
    HEAP32[$3 + 8 >> 2] = $4;
    HEAP32[$3 + 12 >> 2] = $5;
    $4 = $1 + 1144 | 0;
    $5 = HEAP32[$4 >> 2];
    $3 = HEAP32[$4 + 4 >> 2];
    $4 = $5;
    $5 = $21;
    HEAP32[$5 >> 2] = $4;
    HEAP32[$5 + 4 >> 2] = $3;
    $4 = $1 + 1168 | 0;
    $3 = HEAP32[$4 >> 2];
    $5 = HEAP32[$4 + 4 >> 2];
    $4 = $3;
    $3 = $19;
    HEAP32[$3 + 8 >> 2] = $4;
    HEAP32[$3 + 12 >> 2] = $5;
    $4 = $1 + 1160 | 0;
    $5 = HEAP32[$4 >> 2];
    $3 = HEAP32[$4 + 4 >> 2];
    $4 = $5;
    $5 = $19;
    HEAP32[$5 >> 2] = $4;
    HEAP32[$5 + 4 >> 2] = $3;
    $4 = $32;
    $3 = HEAP32[$4 >> 2];
    $5 = HEAP32[$4 + 4 >> 2];
    $4 = $3;
    $3 = $11;
    HEAP32[$3 >> 2] = $4;
    HEAP32[$3 + 4 >> 2] = $5;
    $4 = $1 + 1184 | 0;
    $5 = HEAP32[$4 >> 2];
    $3 = HEAP32[$4 + 4 >> 2];
    $4 = $5;
    $5 = $11;
    HEAP32[$5 + 8 >> 2] = $4;
    HEAP32[$5 + 12 >> 2] = $3;
    HEAP32[$2 + 60 >> 2] = 0;
    HEAPF32[$2 + 56 >> 2] = -HEAPF32[$2 + 144 >> 2];
    HEAPF32[$2 + 52 >> 2] = -HEAPF32[$2 + 128 >> 2];
    HEAPF32[$2 + 48 >> 2] = -HEAPF32[$2 + 112 >> 2];
    $9 = HEAPF32[$1 + 868 >> 2];
    $10 = HEAPF32[$1 + 872 >> 2];
    label$19 : {
     if (!!($9 > $10)) {
      $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      HEAP32[$2 + 40 >> 2] = 0;
      HEAP32[$2 + 44 >> 2] = 0;
      HEAP32[$2 + 32 >> 2] = 0;
      HEAP32[$2 + 36 >> 2] = 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 68 >> 2]]($7, $32, $2 + 48 | 0, $2 - -64 | 0, $26, $26, Math_fround(-3.1415927410125732), Math_fround(3.1415927410125732), $2 + 32 | 0, 0, Math_fround(10));
      break label$19;
     }
     if (!($9 < $10)) {
      break label$19;
     }
     $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     HEAP32[$2 + 40 >> 2] = 0;
     HEAP32[$2 + 44 >> 2] = 0;
     HEAP32[$2 + 32 >> 2] = 0;
     HEAP32[$2 + 36 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 68 >> 2]]($7, $32, $2 + 48 | 0, $2 - -64 | 0, $26, $26, $9, $10, $2 + 32 | 0, 1, Math_fround(10));
    }
    $4 = $34;
    $3 = HEAP32[$4 + 8 >> 2];
    $5 = HEAP32[$4 + 12 >> 2];
    HEAP32[$2 + 120 >> 2] = $3;
    HEAP32[$2 + 124 >> 2] = $5;
    $3 = HEAP32[$4 + 4 >> 2];
    $5 = HEAP32[$4 >> 2];
    HEAP32[$2 + 112 >> 2] = $5;
    HEAP32[$2 + 116 >> 2] = $3;
    $4 = $38;
    $3 = HEAP32[$4 + 8 >> 2];
    $5 = HEAP32[$4 + 12 >> 2];
    $34 = $3;
    $3 = $21;
    HEAP32[$3 + 8 >> 2] = $34;
    HEAP32[$3 + 12 >> 2] = $5;
    $3 = HEAP32[$4 + 4 >> 2];
    $5 = HEAP32[$4 >> 2];
    $4 = $5;
    $5 = $21;
    HEAP32[$5 >> 2] = $4;
    HEAP32[$5 + 4 >> 2] = $3;
    $4 = $42;
    $3 = HEAP32[$4 + 8 >> 2];
    $5 = HEAP32[$4 + 12 >> 2];
    $21 = $3;
    $3 = $19;
    HEAP32[$3 + 8 >> 2] = $21;
    HEAP32[$3 + 12 >> 2] = $5;
    $3 = HEAP32[$4 + 4 >> 2];
    $5 = HEAP32[$4 >> 2];
    $4 = $5;
    $5 = $19;
    HEAP32[$5 >> 2] = $4;
    HEAP32[$5 + 4 >> 2] = $3;
    $4 = $43;
    $3 = HEAP32[$4 + 8 >> 2];
    $5 = HEAP32[$4 + 12 >> 2];
    $19 = $3;
    $3 = $11;
    HEAP32[$3 + 8 >> 2] = $19;
    HEAP32[$3 + 12 >> 2] = $5;
    $3 = HEAP32[$4 + 4 >> 2];
    $5 = HEAP32[$4 >> 2];
    $4 = $5;
    $5 = $11;
    HEAP32[$5 >> 2] = $4;
    HEAP32[$5 + 4 >> 2] = $3;
    $5 = HEAP32[$1 + 692 >> 2];
    $3 = HEAP32[$1 + 688 >> 2];
    HEAP32[$2 + 40 >> 2] = $3;
    HEAP32[$2 + 44 >> 2] = $5;
    $3 = HEAP32[$1 + 684 >> 2];
    $5 = HEAP32[$1 + 680 >> 2];
    HEAP32[$2 + 32 >> 2] = $5;
    HEAP32[$2 + 36 >> 2] = $3;
    $5 = HEAP32[$1 + 708 >> 2];
    $3 = HEAP32[$1 + 704 >> 2];
    HEAP32[$2 + 24 >> 2] = $3;
    HEAP32[$2 + 28 >> 2] = $5;
    $3 = HEAP32[$1 + 700 >> 2];
    $5 = HEAP32[$1 + 696 >> 2];
    HEAP32[$2 + 16 >> 2] = $5;
    HEAP32[$2 + 20 >> 2] = $3;
    $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
    HEAP32[$2 + 8 >> 2] = 0;
    HEAP32[$2 + 12 >> 2] = 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 80 >> 2]]($1, $2 + 32 | 0, $2 + 16 | 0, $2 + 112 | 0, $2);
    break label$2;
   case 8:
    $44 = $2;
    $4 = $1 + 1244 | 0;
    $3 = HEAP32[$4 >> 2];
    $5 = HEAP32[$4 + 4 >> 2];
    $4 = $3;
    $32 = $2 + 120 | 0;
    $3 = $32;
    HEAP32[$3 >> 2] = $4;
    HEAP32[$3 + 4 >> 2] = $5;
    $34 = $1 + 1236 | 0;
    $4 = $34;
    $5 = HEAP32[$4 >> 2];
    $3 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 + 112 >> 2] = $5;
    HEAP32[$2 + 116 >> 2] = $3;
    $4 = $1 + 1260 | 0;
    $3 = HEAP32[$4 >> 2];
    $5 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 + 136 >> 2] = $3;
    HEAP32[$2 + 140 >> 2] = $5;
    $38 = $1 + 1252 | 0;
    $4 = $38;
    $5 = HEAP32[$4 >> 2];
    $3 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 + 128 >> 2] = $5;
    HEAP32[$2 + 132 >> 2] = $3;
    $4 = $1 + 1276 | 0;
    $3 = HEAP32[$4 >> 2];
    $5 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 + 152 >> 2] = $3;
    HEAP32[$2 + 156 >> 2] = $5;
    $42 = $1 + 1268 | 0;
    $4 = $42;
    $5 = HEAP32[$4 >> 2];
    $3 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 + 144 >> 2] = $5;
    HEAP32[$2 + 148 >> 2] = $3;
    $4 = $1 + 1292 | 0;
    $3 = HEAP32[$4 >> 2];
    $5 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 + 168 >> 2] = $3;
    HEAP32[$2 + 172 >> 2] = $5;
    $43 = $1 + 1284 | 0;
    $4 = $43;
    $5 = HEAP32[$4 >> 2];
    $3 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 + 160 >> 2] = $5;
    HEAP32[$2 + 164 >> 2] = $3;
    $11 = $2 + 160 | 0;
    $19 = $2 + 144 | 0;
    $21 = $2 + 128 | 0;
    label$21 : {
     if ($6) {
      $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $2 + 112 | 0, $26);
      $4 = $1 + 1308 | 0;
      $3 = HEAP32[$4 >> 2];
      $5 = HEAP32[$4 + 4 >> 2];
      $4 = $3;
      $3 = $44;
      HEAP32[$3 + 120 >> 2] = $4;
      HEAP32[$3 + 124 >> 2] = $5;
      $4 = $1 + 1300 | 0;
      $5 = HEAP32[$4 >> 2];
      $3 = HEAP32[$4 + 4 >> 2];
      HEAP32[$2 + 112 >> 2] = $5;
      HEAP32[$2 + 116 >> 2] = $3;
      $4 = $1 + 1324 | 0;
      $3 = HEAP32[$4 >> 2];
      $5 = HEAP32[$4 + 4 >> 2];
      $4 = $3;
      $3 = $21;
      HEAP32[$3 + 8 >> 2] = $4;
      HEAP32[$3 + 12 >> 2] = $5;
      $4 = $1 + 1316 | 0;
      $5 = HEAP32[$4 >> 2];
      $3 = HEAP32[$4 + 4 >> 2];
      $4 = $5;
      $5 = $21;
      HEAP32[$5 >> 2] = $4;
      HEAP32[$5 + 4 >> 2] = $3;
      $4 = $1 + 1340 | 0;
      $3 = HEAP32[$4 >> 2];
      $5 = HEAP32[$4 + 4 >> 2];
      $4 = $3;
      $3 = $19;
      HEAP32[$3 + 8 >> 2] = $4;
      HEAP32[$3 + 12 >> 2] = $5;
      $4 = $1 + 1332 | 0;
      $5 = HEAP32[$4 >> 2];
      $3 = HEAP32[$4 + 4 >> 2];
      $4 = $5;
      $5 = $19;
      HEAP32[$5 >> 2] = $4;
      HEAP32[$5 + 4 >> 2] = $3;
      $4 = $1 + 1356 | 0;
      $3 = HEAP32[$4 >> 2];
      $5 = HEAP32[$4 + 4 >> 2];
      $4 = $3;
      $3 = $11;
      HEAP32[$3 + 8 >> 2] = $4;
      HEAP32[$3 + 12 >> 2] = $5;
      $4 = $1 + 1348 | 0;
      $5 = HEAP32[$4 >> 2];
      $3 = HEAP32[$4 + 4 >> 2];
      $4 = $5;
      $5 = $11;
      HEAP32[$5 >> 2] = $4;
      HEAP32[$5 + 4 >> 2] = $3;
      $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $2 + 112 | 0, $26);
      break label$21;
     }
     $4 = $1 + 1308 | 0;
     $3 = HEAP32[$4 >> 2];
     $5 = HEAP32[$4 + 4 >> 2];
     $4 = $3;
     $3 = $44;
     HEAP32[$3 + 120 >> 2] = $4;
     HEAP32[$3 + 124 >> 2] = $5;
     $4 = $1 + 1300 | 0;
     $5 = HEAP32[$4 >> 2];
     $3 = HEAP32[$4 + 4 >> 2];
     HEAP32[$2 + 112 >> 2] = $5;
     HEAP32[$2 + 116 >> 2] = $3;
     $4 = $1 + 1324 | 0;
     $3 = HEAP32[$4 >> 2];
     $5 = HEAP32[$4 + 4 >> 2];
     $4 = $3;
     $3 = $21;
     HEAP32[$3 + 8 >> 2] = $4;
     HEAP32[$3 + 12 >> 2] = $5;
     $4 = $1 + 1316 | 0;
     $5 = HEAP32[$4 >> 2];
     $3 = HEAP32[$4 + 4 >> 2];
     $4 = $5;
     $5 = $21;
     HEAP32[$5 >> 2] = $4;
     HEAP32[$5 + 4 >> 2] = $3;
     $4 = $1 + 1340 | 0;
     $3 = HEAP32[$4 >> 2];
     $5 = HEAP32[$4 + 4 >> 2];
     $4 = $3;
     $3 = $19;
     HEAP32[$3 + 8 >> 2] = $4;
     HEAP32[$3 + 12 >> 2] = $5;
     $4 = $1 + 1332 | 0;
     $5 = HEAP32[$4 >> 2];
     $3 = HEAP32[$4 + 4 >> 2];
     $4 = $5;
     $5 = $19;
     HEAP32[$5 >> 2] = $4;
     HEAP32[$5 + 4 >> 2] = $3;
     $4 = $1 + 1356 | 0;
     $3 = HEAP32[$4 >> 2];
     $5 = HEAP32[$4 + 4 >> 2];
     $4 = $3;
     $3 = $11;
     HEAP32[$3 + 8 >> 2] = $4;
     HEAP32[$3 + 12 >> 2] = $5;
     $4 = $1 + 1348 | 0;
     $5 = HEAP32[$4 >> 2];
     $3 = HEAP32[$4 + 4 >> 2];
     $4 = $5;
     $5 = $11;
     HEAP32[$5 >> 2] = $4;
     HEAP32[$5 + 4 >> 2] = $3;
    }
    if (!$7) {
     break label$2;
    }
    $4 = $34;
    $3 = HEAP32[$4 + 8 >> 2];
    $5 = HEAP32[$4 + 12 >> 2];
    $32 = $3;
    $7 = $2 + 120 | 0;
    $3 = $7;
    HEAP32[$3 >> 2] = $32;
    HEAP32[$3 + 4 >> 2] = $5;
    $3 = HEAP32[$4 + 4 >> 2];
    $5 = HEAP32[$4 >> 2];
    HEAP32[$2 + 112 >> 2] = $5;
    HEAP32[$2 + 116 >> 2] = $3;
    $4 = $38;
    $3 = HEAP32[$4 + 8 >> 2];
    $5 = HEAP32[$4 + 12 >> 2];
    $32 = $3;
    $3 = $21 + 8 | 0;
    HEAP32[$3 >> 2] = $32;
    HEAP32[$3 + 4 >> 2] = $5;
    $3 = HEAP32[$4 + 4 >> 2];
    $5 = HEAP32[$4 >> 2];
    $4 = $5;
    $5 = $21;
    HEAP32[$5 >> 2] = $4;
    HEAP32[$5 + 4 >> 2] = $3;
    $4 = $42;
    $3 = HEAP32[$4 + 8 >> 2];
    $5 = HEAP32[$4 + 12 >> 2];
    $32 = $3;
    $3 = $19 + 8 | 0;
    HEAP32[$3 >> 2] = $32;
    HEAP32[$3 + 4 >> 2] = $5;
    $3 = HEAP32[$4 + 4 >> 2];
    $5 = HEAP32[$4 >> 2];
    $4 = $5;
    $5 = $19;
    HEAP32[$5 >> 2] = $4;
    HEAP32[$5 + 4 >> 2] = $3;
    $4 = $43;
    $3 = HEAP32[$4 + 8 >> 2];
    $5 = HEAP32[$4 + 12 >> 2];
    $32 = $3;
    $3 = $11 + 8 | 0;
    HEAP32[$3 >> 2] = $32;
    HEAP32[$3 + 4 >> 2] = $5;
    $3 = HEAP32[$4 + 4 >> 2];
    $5 = HEAP32[$4 >> 2];
    $4 = $5;
    $5 = $11;
    HEAP32[$5 >> 2] = $4;
    HEAP32[$5 + 4 >> 2] = $3;
    HEAP32[$2 + 96 >> 2] = HEAP32[$2 + 120 >> 2];
    HEAP32[$2 + 100 >> 2] = HEAP32[$2 + 136 >> 2];
    HEAP32[$2 + 108 >> 2] = 0;
    HEAP32[$2 + 104 >> 2] = HEAP32[$2 + 152 >> 2];
    HEAP32[$2 + 80 >> 2] = HEAP32[$2 + 112 >> 2];
    HEAP32[$2 + 84 >> 2] = HEAP32[$2 + 128 >> 2];
    HEAP32[$2 + 92 >> 2] = 0;
    HEAP32[$2 + 88 >> 2] = HEAP32[$2 + 144 >> 2];
    $9 = HEAPF32[$1 + 1148 >> 2];
    $10 = HEAPF32[$1 + 1144 >> 2];
    $8 = HEAPF32[$1 + 1060 >> 2];
    $12 = HEAPF32[$1 + 1056 >> 2];
    $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
    HEAP32[$2 + 72 >> 2] = 0;
    HEAP32[$2 + 76 >> 2] = 0;
    HEAP32[$2 + 64 >> 2] = 0;
    HEAP32[$2 + 68 >> 2] = 0;
    $32 = $1 + 1348 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 72 >> 2]]($6, $32, $2 + 96 | 0, $2 + 80 | 0, Math_fround($26 * Math_fround(.8999999761581421)), $12, $8, $10, $9, $2 - -64 | 0, Math_fround(10), 1);
    HEAP32[$2 + 92 >> 2] = 0;
    $15 = HEAPF32[$2 + 148 >> 2];
    $6 = HEAP32[$2 + 148 >> 2];
    HEAP32[$2 + 88 >> 2] = $6;
    $12 = HEAPF32[$2 + 132 >> 2];
    HEAP32[$2 + 84 >> 2] = HEAP32[$2 + 132 >> 2];
    $13 = HEAPF32[$2 + 116 >> 2];
    HEAP32[$2 + 80 >> 2] = HEAP32[$2 + 116 >> 2];
    $10 = HEAPF32[$1 + 1372 >> 2];
    $9 = sinf($10);
    $10 = cosf($10);
    $8 = HEAPF32[$1 + 1368 >> 2];
    HEAPF32[$2 + 68 >> 2] = Math_fround($10 * $12) - Math_fround($9 * $13);
    $14 = sinf($8);
    $16 = Math_fround(Math_fround(Math_fround($10 * $14) * $13) + Math_fround(Math_fround($14 * $9) * $12));
    $8 = cosf($8);
    HEAPF32[$2 + 72 >> 2] = $16 + Math_fround($8 * $15);
    HEAPF32[$2 + 64 >> 2] = Math_fround(Math_fround(Math_fround($8 * $10) * $13) + Math_fround(Math_fround($8 * $9) * $12)) - Math_fround($14 * $15);
    $4 = $1 + 1308 | 0;
    $3 = HEAP32[$4 >> 2];
    $5 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 + 120 >> 2] = $3;
    HEAP32[$2 + 124 >> 2] = $5;
    $4 = $1 + 1300 | 0;
    $5 = HEAP32[$4 >> 2];
    $3 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 + 112 >> 2] = $5;
    HEAP32[$2 + 116 >> 2] = $3;
    $4 = $1 + 1324 | 0;
    $3 = HEAP32[$4 >> 2];
    $5 = HEAP32[$4 + 4 >> 2];
    $4 = $3;
    $3 = $21;
    HEAP32[$3 + 8 >> 2] = $4;
    HEAP32[$3 + 12 >> 2] = $5;
    $4 = $1 + 1316 | 0;
    $5 = HEAP32[$4 >> 2];
    $3 = HEAP32[$4 + 4 >> 2];
    $4 = $5;
    $5 = $21;
    HEAP32[$5 >> 2] = $4;
    HEAP32[$5 + 4 >> 2] = $3;
    $4 = $1 + 1340 | 0;
    $3 = HEAP32[$4 >> 2];
    $5 = HEAP32[$4 + 4 >> 2];
    $4 = $3;
    $3 = $19;
    HEAP32[$3 + 8 >> 2] = $4;
    HEAP32[$3 + 12 >> 2] = $5;
    $4 = $1 + 1332 | 0;
    $5 = HEAP32[$4 >> 2];
    $3 = HEAP32[$4 + 4 >> 2];
    $4 = $5;
    $5 = $19;
    HEAP32[$5 >> 2] = $4;
    HEAP32[$5 + 4 >> 2] = $3;
    $4 = $1 + 1356 | 0;
    $3 = HEAP32[$4 >> 2];
    $5 = HEAP32[$4 + 4 >> 2];
    $4 = $3;
    $3 = $11;
    HEAP32[$3 + 8 >> 2] = $4;
    HEAP32[$3 + 12 >> 2] = $5;
    $4 = $32;
    $5 = HEAP32[$4 >> 2];
    $3 = HEAP32[$4 + 4 >> 2];
    $4 = $5;
    $5 = $11;
    HEAP32[$5 >> 2] = $4;
    HEAP32[$5 + 4 >> 2] = $3;
    HEAP32[$2 + 60 >> 2] = 0;
    HEAPF32[$2 + 56 >> 2] = -HEAPF32[$2 + 144 >> 2];
    HEAPF32[$2 + 52 >> 2] = -HEAPF32[$2 + 128 >> 2];
    HEAPF32[$2 + 48 >> 2] = -HEAPF32[$2 + 112 >> 2];
    $9 = HEAPF32[$1 + 968 >> 2];
    $10 = HEAPF32[$1 + 972 >> 2];
    label$23 : {
     if (!!($9 > $10)) {
      $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      HEAP32[$2 + 40 >> 2] = 0;
      HEAP32[$2 + 44 >> 2] = 0;
      HEAP32[$2 + 32 >> 2] = 0;
      HEAP32[$2 + 36 >> 2] = 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 68 >> 2]]($7, $32, $2 + 48 | 0, $2 - -64 | 0, $26, $26, Math_fround(-3.1415927410125732), Math_fround(3.1415927410125732), $2 + 32 | 0, 0, Math_fround(10));
      break label$23;
     }
     if (!($9 < $10)) {
      break label$23;
     }
     $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     HEAP32[$2 + 40 >> 2] = 0;
     HEAP32[$2 + 44 >> 2] = 0;
     HEAP32[$2 + 32 >> 2] = 0;
     HEAP32[$2 + 36 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 68 >> 2]]($7, $32, $2 + 48 | 0, $2 - -64 | 0, $26, $26, $9, $10, $2 + 32 | 0, 1, Math_fround(10));
    }
    $4 = $34;
    $3 = HEAP32[$4 + 8 >> 2];
    $5 = HEAP32[$4 + 12 >> 2];
    HEAP32[$2 + 120 >> 2] = $3;
    HEAP32[$2 + 124 >> 2] = $5;
    $3 = HEAP32[$4 + 4 >> 2];
    $5 = HEAP32[$4 >> 2];
    HEAP32[$2 + 112 >> 2] = $5;
    HEAP32[$2 + 116 >> 2] = $3;
    $4 = $38;
    $3 = HEAP32[$4 + 8 >> 2];
    $5 = HEAP32[$4 + 12 >> 2];
    $34 = $3;
    $3 = $21;
    HEAP32[$3 + 8 >> 2] = $34;
    HEAP32[$3 + 12 >> 2] = $5;
    $3 = HEAP32[$4 + 4 >> 2];
    $5 = HEAP32[$4 >> 2];
    $4 = $5;
    $5 = $21;
    HEAP32[$5 >> 2] = $4;
    HEAP32[$5 + 4 >> 2] = $3;
    $4 = $42;
    $3 = HEAP32[$4 + 8 >> 2];
    $5 = HEAP32[$4 + 12 >> 2];
    $21 = $3;
    $3 = $19;
    HEAP32[$3 + 8 >> 2] = $21;
    HEAP32[$3 + 12 >> 2] = $5;
    $3 = HEAP32[$4 + 4 >> 2];
    $5 = HEAP32[$4 >> 2];
    $4 = $5;
    $5 = $19;
    HEAP32[$5 >> 2] = $4;
    HEAP32[$5 + 4 >> 2] = $3;
    $4 = $43;
    $3 = HEAP32[$4 + 8 >> 2];
    $5 = HEAP32[$4 + 12 >> 2];
    $19 = $3;
    $3 = $11;
    HEAP32[$3 + 8 >> 2] = $19;
    HEAP32[$3 + 12 >> 2] = $5;
    $3 = HEAP32[$4 + 4 >> 2];
    $5 = HEAP32[$4 >> 2];
    $4 = $5;
    $5 = $11;
    HEAP32[$5 >> 2] = $4;
    HEAP32[$5 + 4 >> 2] = $3;
    $5 = HEAP32[$1 + 692 >> 2];
    $3 = HEAP32[$1 + 688 >> 2];
    HEAP32[$2 + 40 >> 2] = $3;
    HEAP32[$2 + 44 >> 2] = $5;
    $3 = HEAP32[$1 + 684 >> 2];
    $5 = HEAP32[$1 + 680 >> 2];
    HEAP32[$2 + 32 >> 2] = $5;
    HEAP32[$2 + 36 >> 2] = $3;
    $5 = HEAP32[$1 + 708 >> 2];
    $3 = HEAP32[$1 + 704 >> 2];
    HEAP32[$2 + 24 >> 2] = $3;
    HEAP32[$2 + 28 >> 2] = $5;
    $3 = HEAP32[$1 + 700 >> 2];
    $5 = HEAP32[$1 + 696 >> 2];
    HEAP32[$2 + 16 >> 2] = $5;
    HEAP32[$2 + 20 >> 2] = $3;
    $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
    HEAP32[$2 + 8 >> 2] = 0;
    HEAP32[$2 + 12 >> 2] = 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 80 >> 2]]($1, $2 + 32 | 0, $2 + 16 | 0, $2 + 112 | 0, $2);
    break label$2;
   case 4:
   case 6:
   case 7:
    break label$2;
   case 3:
    break label$3;
   }
  }
  $21 = $2;
  $5 = HEAP32[$1 + 836 >> 2];
  $3 = HEAP32[$1 + 832 >> 2];
  $4 = $3;
  $34 = $2 + 120 | 0;
  $3 = $34;
  HEAP32[$3 >> 2] = $4;
  HEAP32[$3 + 4 >> 2] = $5;
  $38 = $1 + 824 | 0;
  $4 = $38;
  $5 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$2 + 112 >> 2] = $5;
  HEAP32[$2 + 116 >> 2] = $3;
  $5 = HEAP32[$1 + 852 >> 2];
  $3 = HEAP32[$1 + 848 >> 2];
  HEAP32[$2 + 136 >> 2] = $3;
  HEAP32[$2 + 140 >> 2] = $5;
  $3 = HEAP32[$1 + 844 >> 2];
  $5 = HEAP32[$1 + 840 >> 2];
  HEAP32[$2 + 128 >> 2] = $5;
  HEAP32[$2 + 132 >> 2] = $3;
  $5 = HEAP32[$1 + 868 >> 2];
  $3 = HEAP32[$1 + 864 >> 2];
  HEAP32[$2 + 152 >> 2] = $3;
  HEAP32[$2 + 156 >> 2] = $5;
  $3 = HEAP32[$1 + 860 >> 2];
  $5 = HEAP32[$1 + 856 >> 2];
  HEAP32[$2 + 144 >> 2] = $5;
  HEAP32[$2 + 148 >> 2] = $3;
  $5 = HEAP32[$1 + 884 >> 2];
  $3 = HEAP32[$1 + 880 >> 2];
  HEAP32[$2 + 168 >> 2] = $3;
  HEAP32[$2 + 172 >> 2] = $5;
  $3 = HEAP32[$1 + 876 >> 2];
  $5 = HEAP32[$1 + 872 >> 2];
  HEAP32[$2 + 160 >> 2] = $5;
  HEAP32[$2 + 164 >> 2] = $3;
  $4 = $2;
  $11 = $2;
  $19 = $2;
  label$25 : {
   if ($6) {
    $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $2 + 112 | 0, $26);
    $5 = HEAP32[$1 + 900 >> 2];
    $3 = HEAP32[$1 + 896 >> 2];
    $34 = $3;
    $3 = $21;
    HEAP32[$3 + 120 >> 2] = $34;
    HEAP32[$3 + 124 >> 2] = $5;
    $3 = HEAP32[$1 + 892 >> 2];
    $5 = HEAP32[$1 + 888 >> 2];
    HEAP32[$2 + 112 >> 2] = $5;
    HEAP32[$2 + 116 >> 2] = $3;
    $5 = HEAP32[$1 + 916 >> 2];
    $3 = HEAP32[$1 + 912 >> 2];
    $21 = $3;
    $3 = $19;
    HEAP32[$3 + 136 >> 2] = $21;
    HEAP32[$3 + 140 >> 2] = $5;
    $3 = HEAP32[$1 + 908 >> 2];
    $5 = HEAP32[$1 + 904 >> 2];
    $21 = $5;
    $5 = $19;
    HEAP32[$5 + 128 >> 2] = $21;
    HEAP32[$5 + 132 >> 2] = $3;
    $5 = HEAP32[$1 + 932 >> 2];
    $3 = HEAP32[$1 + 928 >> 2];
    $19 = $3;
    $3 = $11;
    HEAP32[$3 + 152 >> 2] = $19;
    HEAP32[$3 + 156 >> 2] = $5;
    $3 = HEAP32[$1 + 924 >> 2];
    $5 = HEAP32[$1 + 920 >> 2];
    $19 = $5;
    $5 = $11;
    HEAP32[$5 + 144 >> 2] = $19;
    HEAP32[$5 + 148 >> 2] = $3;
    $5 = HEAP32[$1 + 948 >> 2];
    $3 = HEAP32[$1 + 944 >> 2];
    $11 = $3;
    $3 = $4;
    HEAP32[$3 + 168 >> 2] = $11;
    HEAP32[$3 + 172 >> 2] = $5;
    $3 = HEAP32[$1 + 940 >> 2];
    $5 = HEAP32[$1 + 936 >> 2];
    $11 = $5;
    $5 = $4;
    HEAP32[$5 + 160 >> 2] = $11;
    HEAP32[$5 + 164 >> 2] = $3;
    $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $2 + 112 | 0, $26);
    break label$25;
   }
   $5 = HEAP32[$1 + 900 >> 2];
   $3 = HEAP32[$1 + 896 >> 2];
   $34 = $3;
   $3 = $21;
   HEAP32[$3 + 120 >> 2] = $34;
   HEAP32[$3 + 124 >> 2] = $5;
   $3 = HEAP32[$1 + 892 >> 2];
   $5 = HEAP32[$1 + 888 >> 2];
   HEAP32[$2 + 112 >> 2] = $5;
   HEAP32[$2 + 116 >> 2] = $3;
   $5 = HEAP32[$1 + 916 >> 2];
   $3 = HEAP32[$1 + 912 >> 2];
   $21 = $3;
   $3 = $19;
   HEAP32[$3 + 136 >> 2] = $21;
   HEAP32[$3 + 140 >> 2] = $5;
   $3 = HEAP32[$1 + 908 >> 2];
   $5 = HEAP32[$1 + 904 >> 2];
   $21 = $5;
   $5 = $19;
   HEAP32[$5 + 128 >> 2] = $21;
   HEAP32[$5 + 132 >> 2] = $3;
   $5 = HEAP32[$1 + 932 >> 2];
   $3 = HEAP32[$1 + 928 >> 2];
   $19 = $3;
   $3 = $11;
   HEAP32[$3 + 152 >> 2] = $19;
   HEAP32[$3 + 156 >> 2] = $5;
   $3 = HEAP32[$1 + 924 >> 2];
   $5 = HEAP32[$1 + 920 >> 2];
   $19 = $5;
   $5 = $11;
   HEAP32[$5 + 144 >> 2] = $19;
   HEAP32[$5 + 148 >> 2] = $3;
   $5 = HEAP32[$1 + 948 >> 2];
   $3 = HEAP32[$1 + 944 >> 2];
   $11 = $3;
   $3 = $4;
   HEAP32[$3 + 168 >> 2] = $11;
   HEAP32[$3 + 172 >> 2] = $5;
   $3 = HEAP32[$1 + 940 >> 2];
   $5 = HEAP32[$1 + 936 >> 2];
   $11 = $5;
   $5 = $4;
   HEAP32[$5 + 160 >> 2] = $11;
   HEAP32[$5 + 164 >> 2] = $3;
  }
  if (!$7) {
   break label$2;
  }
  $34 = HEAPU8[$1 + 180 | 0];
  $7 = $34 ? $38 : $1 + 888 | 0;
  $10 = HEAPF32[$7 + 48 >> 2];
  $13 = HEAPF32[$7 + 8 >> 2];
  $22 = HEAPF32[$7 + 4 >> 2];
  $6 = HEAP32[$7 + 4 >> 2];
  $8 = HEAPF32[$7 + 52 >> 2];
  $14 = HEAPF32[$7 + 24 >> 2];
  $16 = HEAPF32[$7 + 16 >> 2];
  $11 = HEAP32[$7 + 16 >> 2];
  $20 = HEAPF32[$7 + 20 >> 2];
  $19 = HEAP32[$7 + 20 >> 2];
  $12 = HEAPF32[$7 + 56 >> 2];
  $15 = HEAPF32[$7 + 40 >> 2];
  $18 = HEAPF32[$7 + 32 >> 2];
  $21 = HEAP32[$7 + 32 >> 2];
  $17 = HEAPF32[$7 + 36 >> 2];
  $7 = HEAP32[$7 + 36 >> 2];
  $5 = ($34 ? 824 : 888) + $1 | 0;
  $25 = HEAPF32[$5 >> 2];
  $34 = HEAP32[$5 >> 2];
  $9 = HEAPF32[$1 + 184 >> 2];
  HEAP32[$2 + 108 >> 2] = 0;
  $15 = Math_fround($15 * Math_fround(0));
  $17 = Math_fround($17 * Math_fround(0));
  HEAPF32[$2 + 104 >> 2] = $12 + Math_fround($15 + Math_fround($17 + Math_fround($9 * $18)));
  $14 = Math_fround($14 * Math_fround(0));
  $20 = Math_fround($20 * Math_fround(0));
  HEAPF32[$2 + 100 >> 2] = $8 + Math_fround($14 + Math_fround($20 + Math_fround($9 * $16)));
  $13 = Math_fround($13 * Math_fround(0));
  $24 = Math_fround($22 * Math_fround(0));
  HEAPF32[$2 + 96 >> 2] = $10 + Math_fround($13 + Math_fround($24 + Math_fround($9 * $25)));
  $9 = HEAPF32[$1 + 188 >> 2];
  HEAP32[$2 + 92 >> 2] = 0;
  HEAPF32[$2 + 88 >> 2] = $12 + Math_fround($15 + Math_fround($17 + Math_fround($9 * $18)));
  HEAPF32[$2 + 84 >> 2] = $8 + Math_fround($14 + Math_fround($20 + Math_fround($9 * $16)));
  HEAPF32[$2 + 80 >> 2] = $10 + Math_fround($13 + Math_fround($24 + Math_fround($9 * $25)));
  $38 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
  HEAP32[$2 + 72 >> 2] = 0;
  HEAP32[$2 + 76 >> 2] = 0;
  HEAP32[$2 + 64 >> 2] = 0;
  HEAP32[$2 + 68 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$38 >> 2] + 16 >> 2]]($38, $2 + 96 | 0, $2 + 80 | 0, $2 - -64 | 0);
  HEAP32[$2 + 76 >> 2] = 0;
  HEAP32[$2 + 72 >> 2] = $21;
  HEAP32[$2 + 68 >> 2] = $11;
  HEAP32[$2 + 64 >> 2] = $34;
  HEAP32[$2 + 60 >> 2] = 0;
  HEAP32[$2 + 56 >> 2] = $7;
  HEAP32[$2 + 52 >> 2] = $19;
  HEAP32[$2 + 48 >> 2] = $6;
  $9 = HEAPF32[$1 + 196 >> 2];
  $10 = HEAPF32[$1 + 192 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
  HEAP32[$2 + 40 >> 2] = 0;
  HEAP32[$2 + 44 >> 2] = 0;
  HEAP32[$2 + 32 >> 2] = 0;
  HEAP32[$2 + 36 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $1 + 936 | 0, $2 - -64 | 0, $2 + 48 | 0, $26, $26, $10, $9, $2 + 32 | 0, 1, Math_fround(10));
 }
 $0 = $2 + 176 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0, $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = 0, $27 = 0, $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = 0, $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = 0, $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = Math_fround(0), $50 = 0, $51 = 0, $52 = Math_fround(0), $53 = 0;
 $5 = global$0 - 928 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 $9 = HEAP32[$0 + 56 >> 2];
 if (!$9) {
  $13 = HEAP32[$0 + 4 >> 2];
  $9 = FUNCTION_TABLE[HEAP32[HEAP32[$13 >> 2] + 12 >> 2]]($13, HEAP32[$1 + 8 >> 2], HEAP32[$2 + 8 >> 2]) | 0;
  HEAP8[$0 + 52 | 0] = 1;
  HEAP32[$0 + 56 >> 2] = $9;
 }
 HEAP32[$4 + 4 >> 2] = $9;
 $13 = HEAP32[$2 + 4 >> 2];
 label$3 : {
  label$4 : {
   $11 = HEAP32[$1 + 4 >> 2];
   $16 = HEAP32[$11 + 4 >> 2] + -8 | 0;
   if ($16 >>> 0 > 2) {
    break label$4;
   }
   label$5 : {
    switch ($16 - 1 | 0) {
    case 1:
     $16 = HEAP32[$13 + 4 >> 2] + -8 | 0;
     if ($16 >>> 0 > 2) {
      break label$4;
     }
     label$7 : {
      switch ($16 - 1 | 0) {
      case 1:
       $10 = btPersistentManifold__getContactBreakingThreshold_28_29_20const($9);
       $9 = $11 + 36 | 0;
       $0 = HEAP32[$11 + 60 >> 2];
       $11 = $13 + 36 | 0;
       $13 = HEAP32[$13 + 60 >> 2];
       $12 = capsuleCapsuleDistance_28btVector3__2c_20btVector3__2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_2c_20int_2c_20btTransform_20const__2c_20btTransform_20const__2c_20float_29($5 + 432 | 0, $5 + 8 | 0, HEAPF32[$9 + ($0 << 2) >> 2], HEAPF32[(($0 + 2 | 0) % 3 << 2) + $9 >> 2], HEAPF32[$11 + ($13 << 2) >> 2], HEAPF32[(($13 + 2 | 0) % 3 << 2) + $11 >> 2], $0, $13, HEAP32[$1 + 12 >> 2], HEAP32[$2 + 12 >> 2], $10);
       if (!!($12 < $10)) {
        FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $5 + 432 | 0, $5 + 8 | 0, $12);
       }
       $0 = HEAP32[$4 + 4 >> 2];
       if (!HEAP32[$0 + 844 >> 2]) {
        break label$3;
       }
       $11 = HEAP32[$0 + 836 >> 2];
       $13 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
       if (($11 | 0) != ($13 | 0)) {
        btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0, $13 + 4 | 0);
        break label$3;
       }
       btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, $11 + 4 | 0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0);
       break label$3;
      case 0:
       break label$4;
      default:
       break label$7;
      }
     }
     $10 = btPersistentManifold__getContactBreakingThreshold_28_29_20const($9);
     $9 = $11 + 36 | 0;
     $0 = HEAP32[$11 + 60 >> 2];
     $12 = capsuleCapsuleDistance_28btVector3__2c_20btVector3__2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_2c_20int_2c_20btTransform_20const__2c_20btTransform_20const__2c_20float_29($5 + 432 | 0, $5 + 8 | 0, HEAPF32[$9 + ($0 << 2) >> 2], HEAPF32[(($0 + 2 | 0) % 3 << 2) + $9 >> 2], Math_fround(0), Math_fround(HEAPF32[$13 + 36 >> 2] * HEAPF32[$13 + 20 >> 2]), $0, 1, HEAP32[$1 + 12 >> 2], HEAP32[$2 + 12 >> 2], $10);
     if (!!($12 < $10)) {
      FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $5 + 432 | 0, $5 + 8 | 0, $12);
     }
     $0 = HEAP32[$4 + 4 >> 2];
     if (!HEAP32[$0 + 844 >> 2]) {
      break label$3;
     }
     $11 = HEAP32[$0 + 836 >> 2];
     $13 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
     if (($11 | 0) != ($13 | 0)) {
      btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0, $13 + 4 | 0);
      break label$3;
     }
     btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, $11 + 4 | 0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0);
     break label$3;
    case 0:
     break label$4;
    default:
     break label$5;
    }
   }
   if (HEAP32[$13 + 4 >> 2] != 10) {
    break label$4;
   }
   $10 = btPersistentManifold__getContactBreakingThreshold_28_29_20const($9);
   $12 = Math_fround(HEAPF32[$11 + 36 >> 2] * HEAPF32[$11 + 20 >> 2]);
   $11 = $13 + 36 | 0;
   $0 = HEAP32[$13 + 60 >> 2];
   $12 = capsuleCapsuleDistance_28btVector3__2c_20btVector3__2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_2c_20int_2c_20btTransform_20const__2c_20btTransform_20const__2c_20float_29($5 + 432 | 0, $5 + 8 | 0, Math_fround(0), $12, HEAPF32[$11 + ($0 << 2) >> 2], HEAPF32[(($0 + 2 | 0) % 3 << 2) + $11 >> 2], 1, $0, HEAP32[$1 + 12 >> 2], HEAP32[$2 + 12 >> 2], $10);
   if (!!($12 < $10)) {
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $5 + 432 | 0, $5 + 8 | 0, $12);
   }
   $0 = HEAP32[$4 + 4 >> 2];
   if (!HEAP32[$0 + 844 >> 2]) {
    break label$3;
   }
   $11 = HEAP32[$0 + 836 >> 2];
   $13 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
   if (($11 | 0) != ($13 | 0)) {
    btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0, $13 + 4 | 0);
    break label$3;
   }
   btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, $11 + 4 | 0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0);
   break label$3;
  }
  HEAP32[$5 + 920 >> 2] = 1566444395;
  HEAP8[$5 + 764 | 0] = 0;
  HEAP32[$5 + 740 >> 2] = 953267991;
  $27 = btGjkPairDetector__btGjkPairDetector_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($5 + 352 | 0, $11, $13, $5 + 432 | 0, HEAP32[$0 + 8 >> 2]);
  HEAP32[$27 + 32 >> 2] = $13;
  HEAP32[$27 + 28 >> 2] = $11;
  $10 = Math_fround(Math_fround(Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 48 >> 2]]($11)) + Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$13 >> 2] + 48 >> 2]]($13))) + btPersistentManifold__getContactBreakingThreshold_28_29_20const(HEAP32[$0 + 56 >> 2])) + HEAPF32[$4 + 32 >> 2]);
  HEAPF32[$5 + 920 >> 2] = $10 * $10;
  $9 = HEAP32[$1 + 12 >> 2];
  $8 = $9;
  $7 = HEAP32[$8 + 8 >> 2];
  $6 = HEAP32[$8 + 12 >> 2];
  HEAP32[$5 + 800 >> 2] = $7;
  HEAP32[$5 + 804 >> 2] = $6;
  $7 = HEAP32[$8 + 4 >> 2];
  $6 = HEAP32[$8 >> 2];
  HEAP32[$5 + 792 >> 2] = $6;
  HEAP32[$5 + 796 >> 2] = $7;
  $6 = HEAP32[$8 + 28 >> 2];
  $7 = HEAP32[$8 + 24 >> 2];
  HEAP32[$5 + 816 >> 2] = $7;
  HEAP32[$5 + 820 >> 2] = $6;
  $7 = HEAP32[$8 + 20 >> 2];
  $6 = HEAP32[$8 + 16 >> 2];
  HEAP32[$5 + 808 >> 2] = $6;
  HEAP32[$5 + 812 >> 2] = $7;
  $6 = HEAP32[$8 + 44 >> 2];
  $7 = HEAP32[$8 + 40 >> 2];
  HEAP32[$5 + 832 >> 2] = $7;
  HEAP32[$5 + 836 >> 2] = $6;
  $7 = HEAP32[$8 + 36 >> 2];
  $6 = HEAP32[$8 + 32 >> 2];
  HEAP32[$5 + 824 >> 2] = $6;
  HEAP32[$5 + 828 >> 2] = $7;
  $6 = HEAP32[$8 + 60 >> 2];
  $7 = HEAP32[$8 + 56 >> 2];
  HEAP32[$5 + 848 >> 2] = $7;
  HEAP32[$5 + 852 >> 2] = $6;
  $7 = HEAP32[$8 + 52 >> 2];
  $6 = HEAP32[$8 + 48 >> 2];
  HEAP32[$5 + 840 >> 2] = $6;
  HEAP32[$5 + 844 >> 2] = $7;
  $9 = HEAP32[$2 + 12 >> 2];
  $8 = $9;
  $7 = HEAP32[$8 + 8 >> 2];
  $6 = HEAP32[$8 + 12 >> 2];
  HEAP32[$5 + 864 >> 2] = $7;
  HEAP32[$5 + 868 >> 2] = $6;
  $7 = HEAP32[$8 + 4 >> 2];
  $6 = HEAP32[$8 >> 2];
  HEAP32[$5 + 856 >> 2] = $6;
  HEAP32[$5 + 860 >> 2] = $7;
  $6 = HEAP32[$8 + 20 >> 2];
  $7 = HEAP32[$8 + 16 >> 2];
  $9 = $7;
  $16 = $5 + 872 | 0;
  $7 = $16;
  HEAP32[$7 >> 2] = $9;
  HEAP32[$7 + 4 >> 2] = $6;
  $7 = HEAP32[$8 + 28 >> 2];
  $6 = HEAP32[$8 + 24 >> 2];
  HEAP32[$5 + 880 >> 2] = $6;
  HEAP32[$5 + 884 >> 2] = $7;
  $6 = HEAP32[$8 + 36 >> 2];
  $7 = HEAP32[$8 + 32 >> 2];
  $9 = $7;
  $20 = $5 + 888 | 0;
  $7 = $20;
  HEAP32[$7 >> 2] = $9;
  HEAP32[$7 + 4 >> 2] = $6;
  $7 = HEAP32[$8 + 44 >> 2];
  $6 = HEAP32[$8 + 40 >> 2];
  HEAP32[$5 + 896 >> 2] = $6;
  HEAP32[$5 + 900 >> 2] = $7;
  $6 = HEAP32[$8 + 52 >> 2];
  $7 = HEAP32[$8 + 48 >> 2];
  $9 = $7;
  $26 = $5 + 904 | 0;
  $7 = $26;
  HEAP32[$7 >> 2] = $9;
  HEAP32[$7 + 4 >> 2] = $6;
  $7 = HEAP32[$8 + 60 >> 2];
  $6 = HEAP32[$8 + 56 >> 2];
  HEAP32[$5 + 912 >> 2] = $6;
  HEAP32[$5 + 916 >> 2] = $7;
  label$15 : {
   $9 = HEAP32[$11 + 4 >> 2];
   if (($9 | 0) > 6) {
    break label$15;
   }
   $21 = HEAP32[$13 + 4 >> 2];
   if (($21 | 0) > 6) {
    break label$15;
   }
   HEAP32[$5 + 344 >> 2] = 9984;
   $10 = Math_fround(0);
   if ($9) {
    $12 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 48 >> 2]]($11));
    $21 = HEAP32[$13 + 4 >> 2];
   }
   if ($21) {
    $10 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$13 >> 2] + 48 >> 2]]($13));
   }
   HEAP8[$5 + 44 | 0] = 0;
   HEAPF32[$5 + 36 >> 2] = $10;
   HEAPF32[$5 + 32 >> 2] = $12;
   HEAP32[$5 + 12 >> 2] = $4;
   HEAP32[$5 + 8 >> 2] = 10160;
   if (!HEAP32[$11 + 60 >> 2]) {
    break label$15;
   }
   if (HEAP32[$13 + 60 >> 2]) {
    $10 = btPersistentManifold__getContactBreakingThreshold_28_29_20const(HEAP32[$0 + 56 >> 2]);
    label$20 : {
     label$21 : {
      if (HEAPU8[$3 + 24 | 0]) {
       $12 = Math_fround(-1.0000000150474662e+30);
       if (btPolyhedralContactClipping__findSeparatingAxis_28btConvexPolyhedron_20const__2c_20btConvexPolyhedron_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btDiscreteCollisionDetectorInterface__Result__29(HEAP32[$11 + 60 >> 2], HEAP32[$13 + 60 >> 2], HEAP32[$1 + 12 >> 2], HEAP32[$2 + 12 >> 2], $5 + 248 | 0, $4)) {
        break label$21;
       }
       break label$20;
      }
      btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($27, $5 + 792 | 0, $5 + 8 | 0, HEAP32[$3 + 20 >> 2], 0);
      $6 = HEAP32[$5 + 28 >> 2];
      $7 = HEAP32[$5 + 24 >> 2];
      HEAP32[$5 + 256 >> 2] = $7;
      HEAP32[$5 + 260 >> 2] = $6;
      $7 = HEAP32[$5 + 20 >> 2];
      $6 = HEAP32[$5 + 16 >> 2];
      HEAP32[$5 + 248 >> 2] = $6;
      HEAP32[$5 + 252 >> 2] = $7;
      $12 = HEAPF32[$5 + 40 >> 2];
      if (!HEAPU8[$5 + 44 | 0] | $12 < Math_fround(0) ^ 1) {
       break label$20;
      }
     }
     $26 = $0 + 12 | 0;
     $9 = HEAP32[$0 + 16 >> 2];
     if (($9 | 0) <= -1) {
      if (HEAP32[$0 + 20 >> 2] <= -1) {
       $16 = HEAP32[$0 + 24 >> 2];
       if ($16) {
        if (HEAPU8[$0 + 28 | 0]) {
         btAlignedFreeInternal_28void__29($16);
        }
        HEAP32[$0 + 24 >> 2] = 0;
       }
       $6 = $0;
       HEAP32[$6 + 20 >> 2] = 0;
       HEAP32[$6 + 24 >> 2] = 0;
       HEAP8[$6 + 28 | 0] = 1;
      }
      while (1) {
       $6 = HEAP32[$5 + 332 >> 2];
       $7 = HEAP32[$5 + 328 >> 2];
       $3 = $7;
       $16 = HEAP32[$0 + 24 >> 2] + ($9 << 4) | 0;
       $7 = $16;
       HEAP32[$7 >> 2] = $3;
       HEAP32[$7 + 4 >> 2] = $6;
       $7 = HEAP32[$5 + 340 >> 2];
       $6 = HEAP32[$5 + 336 >> 2];
       $3 = $6;
       $6 = $16;
       HEAP32[$6 + 8 >> 2] = $3;
       HEAP32[$6 + 12 >> 2] = $7;
       $16 = $9 + 1 | 0;
       $20 = $16 >>> 0 >= $9 >>> 0;
       $9 = $16;
       if ($20) {
        continue;
       }
       break;
      }
     }
     HEAP32[$0 + 16 >> 2] = 0;
     btPolyhedralContactClipping__clipHullAgainstHull_28btVector3_20const__2c_20btConvexPolyhedron_20const__2c_20btConvexPolyhedron_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20float_2c_20float_2c_20btAlignedObjectArray_btVector3___2c_20btAlignedObjectArray_btVector3___2c_20btDiscreteCollisionDetectorInterface__Result__29($5 + 248 | 0, HEAP32[$11 + 60 >> 2], HEAP32[$13 + 60 >> 2], HEAP32[$1 + 12 >> 2], HEAP32[$2 + 12 >> 2], Math_fround($12 - $10), $10, $26, $0 + 32 | 0, $4);
    }
    if (!HEAPU8[$0 + 52 | 0]) {
     break label$3;
    }
    $0 = HEAP32[$4 + 4 >> 2];
    if (!HEAP32[$0 + 844 >> 2]) {
     break label$3;
    }
    $11 = HEAP32[$0 + 836 >> 2];
    $13 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
    if (($11 | 0) != ($13 | 0)) {
     btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0, $13 + 4 | 0);
     break label$3;
    }
    btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, $11 + 4 | 0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0);
    break label$3;
   }
   if (HEAP32[$13 + 4 >> 2] != 1) {
    break label$15;
   }
   HEAP32[$5 + 252 >> 2] = 0;
   $9 = HEAP32[$2 + 12 >> 2];
   $15 = HEAPF32[$9 + 52 >> 2];
   $17 = HEAPF32[$9 + 20 >> 2];
   $29 = HEAPF32[$9 + 24 >> 2];
   $31 = HEAPF32[$9 + 56 >> 2];
   $28 = HEAPF32[$9 + 36 >> 2];
   $18 = HEAPF32[$9 + 40 >> 2];
   $10 = HEAPF32[$13 + 72 >> 2];
   $12 = HEAPF32[$13 - -64 >> 2];
   $14 = HEAPF32[$13 + 68 >> 2];
   $19 = HEAPF32[$9 + 16 >> 2];
   $49 = HEAPF32[$9 + 32 >> 2];
   $32 = HEAPF32[$9 + 48 >> 2];
   $33 = HEAPF32[$9 + 8 >> 2];
   $34 = HEAPF32[$9 >> 2];
   $35 = HEAPF32[$9 + 4 >> 2];
   $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(16, 16);
   HEAP32[$5 + 260 >> 2] = $9;
   HEAP8[$5 + 264 | 0] = 1;
   HEAP32[$5 + 256 >> 2] = 1;
   HEAP32[$9 + 12 >> 2] = 0;
   HEAPF32[$9 >> 2] = $32 + Math_fround(Math_fround(Math_fround($12 * $34) + Math_fround($14 * $35)) + Math_fround($10 * $33));
   HEAPF32[$9 + 8 >> 2] = $31 + Math_fround(Math_fround(Math_fround($12 * $49) + Math_fround($14 * $28)) + Math_fround($10 * $18));
   HEAPF32[$9 + 4 >> 2] = $15 + Math_fround(Math_fround(Math_fround($12 * $19) + Math_fround($14 * $17)) + Math_fround($10 * $29));
   $16 = HEAP32[$5 + 252 >> 2] + 1 | 0;
   HEAP32[$5 + 252 >> 2] = $16;
   $10 = HEAPF32[$13 + 80 >> 2];
   $9 = HEAP32[$2 + 12 >> 2];
   $12 = HEAPF32[$13 + 84 >> 2];
   $14 = HEAPF32[$13 + 88 >> 2];
   $15 = Math_fround(Math_fround(Math_fround(Math_fround($10 * HEAPF32[$9 + 32 >> 2]) + Math_fround($12 * HEAPF32[$9 + 36 >> 2])) + Math_fround($14 * HEAPF32[$9 + 40 >> 2])) + HEAPF32[$9 + 56 >> 2]);
   $17 = Math_fround(Math_fround(Math_fround(Math_fround($10 * HEAPF32[$9 + 16 >> 2]) + Math_fround($12 * HEAPF32[$9 + 20 >> 2])) + Math_fround($14 * HEAPF32[$9 + 24 >> 2])) + HEAPF32[$9 + 52 >> 2]);
   $10 = Math_fround(Math_fround(Math_fround(Math_fround($10 * HEAPF32[$9 >> 2]) + Math_fround($12 * HEAPF32[$9 + 4 >> 2])) + Math_fround($14 * HEAPF32[$9 + 8 >> 2])) + HEAPF32[$9 + 48 >> 2]);
   label$29 : {
    if (HEAP32[$5 + 256 >> 2] != ($16 | 0)) {
     break label$29;
    }
    $36 = $16 ? $16 << 1 : 1;
    if (($16 | 0) >= ($36 | 0)) {
     break label$29;
    }
    $9 = 0;
    $21 = 0;
    if ($36) {
     $21 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($36 << 4, 16);
     $16 = HEAP32[$5 + 252 >> 2];
    }
    if (($16 | 0) >= 1) {
     while (1) {
      $20 = $9 << 4;
      $26 = $20 + $21 | 0;
      $20 = HEAP32[$5 + 260 >> 2] + $20 | 0;
      $8 = $20;
      $7 = HEAP32[$8 >> 2];
      $6 = HEAP32[$8 + 4 >> 2];
      $20 = $7;
      $7 = $26;
      HEAP32[$7 >> 2] = $20;
      HEAP32[$7 + 4 >> 2] = $6;
      $7 = HEAP32[$8 + 12 >> 2];
      $6 = HEAP32[$8 + 8 >> 2];
      $8 = $6;
      $6 = $26;
      HEAP32[$6 + 8 >> 2] = $8;
      HEAP32[$6 + 12 >> 2] = $7;
      $9 = $9 + 1 | 0;
      if (($16 | 0) != ($9 | 0)) {
       continue;
      }
      break;
     }
    }
    $9 = HEAP32[$5 + 260 >> 2];
    if ($9) {
     if (HEAPU8[$5 + 264 | 0]) {
      btAlignedFreeInternal_28void__29($9);
     }
     HEAP32[$5 + 260 >> 2] = 0;
    }
    HEAP32[$5 + 260 >> 2] = $21;
    HEAP8[$5 + 264 | 0] = 1;
    HEAP32[$5 + 256 >> 2] = $36;
    $16 = HEAP32[$5 + 252 >> 2];
   }
   $9 = HEAP32[$5 + 260 >> 2] + ($16 << 4) | 0;
   HEAP32[$9 + 12 >> 2] = 0;
   HEAPF32[$9 + 8 >> 2] = $15;
   HEAPF32[$9 + 4 >> 2] = $17;
   HEAPF32[$9 >> 2] = $10;
   $16 = HEAP32[$5 + 252 >> 2] + 1 | 0;
   HEAP32[$5 + 252 >> 2] = $16;
   $10 = HEAPF32[$13 + 96 >> 2];
   $9 = HEAP32[$2 + 12 >> 2];
   $12 = HEAPF32[$13 + 100 >> 2];
   $14 = HEAPF32[$13 + 104 >> 2];
   $15 = Math_fround(Math_fround(Math_fround(Math_fround($10 * HEAPF32[$9 >> 2]) + Math_fround($12 * HEAPF32[$9 + 4 >> 2])) + Math_fround($14 * HEAPF32[$9 + 8 >> 2])) + HEAPF32[$9 + 48 >> 2]);
   $17 = Math_fround(Math_fround(Math_fround(Math_fround($10 * HEAPF32[$9 + 32 >> 2]) + Math_fround($12 * HEAPF32[$9 + 36 >> 2])) + Math_fround($14 * HEAPF32[$9 + 40 >> 2])) + HEAPF32[$9 + 56 >> 2]);
   $10 = Math_fround(Math_fround(Math_fround(Math_fround($10 * HEAPF32[$9 + 16 >> 2]) + Math_fround($12 * HEAPF32[$9 + 20 >> 2])) + Math_fround($14 * HEAPF32[$9 + 24 >> 2])) + HEAPF32[$9 + 52 >> 2]);
   label$36 : {
    if (HEAP32[$5 + 256 >> 2] != ($16 | 0)) {
     break label$36;
    }
    $21 = $16 ? $16 << 1 : 1;
    if (($16 | 0) >= ($21 | 0)) {
     break label$36;
    }
    $9 = 0;
    $26 = 0;
    if ($21) {
     $26 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($21 << 4, 16);
     $16 = HEAP32[$5 + 252 >> 2];
    }
    if (($16 | 0) >= 1) {
     while (1) {
      $2 = $9 << 4;
      $20 = $26 + $2 | 0;
      $2 = HEAP32[$5 + 260 >> 2] + $2 | 0;
      $8 = $2;
      $7 = HEAP32[$8 >> 2];
      $6 = HEAP32[$8 + 4 >> 2];
      $2 = $7;
      $7 = $20;
      HEAP32[$7 >> 2] = $2;
      HEAP32[$7 + 4 >> 2] = $6;
      $7 = HEAP32[$8 + 12 >> 2];
      $6 = HEAP32[$8 + 8 >> 2];
      $2 = $6;
      $6 = $20;
      HEAP32[$6 + 8 >> 2] = $2;
      HEAP32[$6 + 12 >> 2] = $7;
      $9 = $9 + 1 | 0;
      if (($16 | 0) != ($9 | 0)) {
       continue;
      }
      break;
     }
    }
    $9 = HEAP32[$5 + 260 >> 2];
    if ($9) {
     if (HEAPU8[$5 + 264 | 0]) {
      btAlignedFreeInternal_28void__29($9);
     }
     HEAP32[$5 + 260 >> 2] = 0;
    }
    HEAP32[$5 + 260 >> 2] = $26;
    HEAP8[$5 + 264 | 0] = 1;
    HEAP32[$5 + 256 >> 2] = $21;
    $16 = HEAP32[$5 + 252 >> 2];
   }
   $9 = HEAP32[$5 + 260 >> 2] + ($16 << 4) | 0;
   HEAP32[$9 + 12 >> 2] = 0;
   HEAPF32[$9 + 8 >> 2] = $17;
   HEAPF32[$9 + 4 >> 2] = $10;
   HEAPF32[$9 >> 2] = $15;
   HEAP32[$5 + 252 >> 2] = HEAP32[$5 + 252 >> 2] + 1;
   $15 = btPersistentManifold__getContactBreakingThreshold_28_29_20const(HEAP32[$0 + 56 >> 2]);
   btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($27, $5 + 792 | 0, $5 + 344 | 0, HEAP32[$3 + 20 >> 2], 0);
   $10 = HEAPF32[$27 + 4 >> 2];
   $12 = HEAPF32[$27 + 8 >> 2];
   $14 = HEAPF32[$27 + 12 >> 2];
   $17 = Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($12 * $12)) + Math_fround($14 * $14));
   if (!!($17 > Math_fround(1.1920928955078125e-7))) {
    HEAP32[$5 + 340 >> 2] = 0;
    $17 = Math_fround(Math_fround(1) / $17);
    HEAPF32[$5 + 336 >> 2] = $14 * $17;
    HEAPF32[$5 + 332 >> 2] = $12 * $17;
    HEAPF32[$5 + 328 >> 2] = $10 * $17;
    $10 = Math_fround(Math_fround(HEAPF32[$27 + 56 >> 2] - Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 48 >> 2]]($11))) - Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$13 >> 2] + 48 >> 2]]($13)));
    $16 = $0 + 32 | 0;
    $13 = HEAP32[$0 + 36 >> 2];
    if (($13 | 0) <= -1) {
     if (HEAP32[$0 + 40 >> 2] <= -1) {
      $9 = HEAP32[$0 + 44 >> 2];
      if ($9) {
       if (HEAPU8[$0 + 48 | 0]) {
        btAlignedFreeInternal_28void__29($9);
       }
       HEAP32[$0 + 44 >> 2] = 0;
      }
      $6 = $0;
      HEAP32[$6 + 40 >> 2] = 0;
      HEAP32[$6 + 44 >> 2] = 0;
      HEAP8[$6 + 48 | 0] = 1;
     }
     while (1) {
      $6 = HEAP32[$5 + 316 >> 2];
      $7 = HEAP32[$5 + 312 >> 2];
      $2 = $7;
      $9 = HEAP32[$0 + 44 >> 2] + ($13 << 4) | 0;
      $7 = $9;
      HEAP32[$7 >> 2] = $2;
      HEAP32[$7 + 4 >> 2] = $6;
      $7 = HEAP32[$5 + 324 >> 2];
      $6 = HEAP32[$5 + 320 >> 2];
      $2 = $6;
      $6 = $9;
      HEAP32[$6 + 8 >> 2] = $2;
      HEAP32[$6 + 12 >> 2] = $7;
      $9 = $13 + 1 | 0;
      $2 = $9 >>> 0 >= $13 >>> 0;
      $13 = $9;
      if ($2) {
       continue;
      }
      break;
     }
    }
    HEAP32[$0 + 36 >> 2] = 0;
    btPolyhedralContactClipping__clipFaceAgainstHull_28btVector3_20const__2c_20btConvexPolyhedron_20const__2c_20btTransform_20const__2c_20btAlignedObjectArray_btVector3___2c_20btAlignedObjectArray_btVector3___2c_20float_2c_20float_2c_20btDiscreteCollisionDetectorInterface__Result__29($5 + 328 | 0, HEAP32[$11 + 60 >> 2], HEAP32[$1 + 12 >> 2], $5 + 248 | 0, $16, Math_fround($10 - $15), $15, $4);
   }
   label$49 : {
    if (!HEAPU8[$0 + 52 | 0]) {
     break label$49;
    }
    $0 = HEAP32[$4 + 4 >> 2];
    if (!HEAP32[$0 + 844 >> 2]) {
     break label$49;
    }
    $11 = HEAP32[$0 + 836 >> 2];
    $13 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
    if (($11 | 0) != ($13 | 0)) {
     btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0, $13 + 4 | 0);
     break label$49;
    }
    btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, $11 + 4 | 0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0);
   }
   $0 = HEAP32[$5 + 260 >> 2];
   if (!$0) {
    break label$3;
   }
   if (HEAPU8[$5 + 264 | 0]) {
    btAlignedFreeInternal_28void__29($0);
   }
   HEAP32[$5 + 260 >> 2] = 0;
   break label$3;
  }
  btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($27, $5 + 792 | 0, $4, HEAP32[$3 + 20 >> 2], 0);
  label$52 : {
   if (!HEAP32[$0 + 64 >> 2] | HEAP32[HEAP32[$4 + 4 >> 2] + 844 >> 2] >= HEAP32[$0 + 68 >> 2]) {
    break label$52;
   }
   $10 = HEAPF32[$27 + 4 >> 2];
   $12 = HEAPF32[$27 + 8 >> 2];
   $14 = HEAPF32[$27 + 12 >> 2];
   $15 = Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($12 * $12)) + Math_fround($14 * $14));
   if (!($15 > Math_fround(1.1920928955078125e-7))) {
    break label$52;
   }
   $9 = $5 + 856 | 0;
   $21 = $5 + 840 | 0;
   $36 = $5 + 824 | 0;
   $50 = $5 + 808 | 0;
   $15 = Math_fround(Math_fround(1) / $15);
   $37 = Math_fround($12 * $15);
   $46 = Math_fround($10 * $15);
   $39 = Math_fround($14 * $15);
   label$53 : {
    if (!!(Math_fround(Math_abs($39)) > Math_fround(.7071067690849304))) {
     $12 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround($39 * $39) + Math_fround($37 * $37)))));
     $10 = Math_fround($37 * $12);
     $12 = Math_fround($12 * Math_fround(-$39));
     $14 = Math_fround(0);
     break label$53;
    }
    $10 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround($46 * $46) + Math_fround($37 * $37)))));
    $12 = Math_fround($46 * $10);
    $14 = Math_fround($10 * Math_fround(-$37));
    $10 = Math_fround(0);
   }
   $15 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 16 >> 2]]($11));
   $17 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$13 >> 2] + 16 >> 2]]($13));
   $29 = HEAPF32[4966];
   $40 = $15 < $17;
   $13 = $40 ? $5 + 792 | 0 : $9;
   $8 = $13;
   $7 = HEAP32[$8 + 8 >> 2];
   $6 = HEAP32[$8 + 12 >> 2];
   HEAP32[$5 + 256 >> 2] = $7;
   HEAP32[$5 + 260 >> 2] = $6;
   $7 = HEAP32[$8 + 4 >> 2];
   $6 = HEAP32[$8 >> 2];
   HEAP32[$5 + 248 >> 2] = $6;
   HEAP32[$5 + 252 >> 2] = $7;
   $13 = $40 ? $50 : $16;
   $8 = $13;
   $7 = HEAP32[$8 + 8 >> 2];
   $6 = HEAP32[$8 + 12 >> 2];
   HEAP32[$5 + 272 >> 2] = $7;
   HEAP32[$5 + 276 >> 2] = $6;
   $7 = HEAP32[$8 + 4 >> 2];
   $6 = HEAP32[$8 >> 2];
   HEAP32[$5 + 264 >> 2] = $6;
   HEAP32[$5 + 268 >> 2] = $7;
   $13 = $40 ? $36 : $20;
   $8 = $13;
   $7 = HEAP32[$8 + 8 >> 2];
   $6 = HEAP32[$8 + 12 >> 2];
   HEAP32[$5 + 288 >> 2] = $7;
   HEAP32[$5 + 292 >> 2] = $6;
   $7 = HEAP32[$8 + 4 >> 2];
   $6 = HEAP32[$8 >> 2];
   HEAP32[$5 + 280 >> 2] = $6;
   HEAP32[$5 + 284 >> 2] = $7;
   $13 = $40 ? $21 : $26;
   $8 = $13;
   $7 = HEAP32[$8 + 8 >> 2];
   $6 = HEAP32[$8 + 12 >> 2];
   HEAP32[$5 + 304 >> 2] = $7;
   HEAP32[$5 + 308 >> 2] = $6;
   $7 = HEAP32[$8 + 4 >> 2];
   $6 = HEAP32[$8 >> 2];
   HEAP32[$5 + 296 >> 2] = $6;
   HEAP32[$5 + 300 >> 2] = $7;
   $11 = HEAP32[$0 + 64 >> 2];
   if (($11 | 0) < 1) {
    break label$52;
   }
   $28 = Math_fround(Math_fround(Math_min(Math_fround($29 / ($40 ? $15 : $17)), Math_fround(.39269909262657166))) * Math_fround(.5));
   $15 = sinf($28);
   $49 = Math_fround(Math_fround(Math_fround($14 * $14) + Math_fround($12 * $12)) + Math_fround($10 * $10));
   $15 = Math_fround($15 / Math_fround(Math_sqrt($49)));
   $17 = Math_fround($10 * $15);
   $29 = Math_fround($12 * $15);
   $31 = Math_fround($14 * $15);
   $52 = Math_fround(Math_sqrt(Math_fround(Math_fround($39 * $39) + Math_fround(Math_fround($46 * $46) + Math_fround($37 * $37)))));
   $51 = $5 - -64 | 0;
   $28 = cosf($28);
   $13 = 0;
   while (1) {
    if (!!($49 > Math_fround(1.1920928955078125e-7))) {
     $15 = Math_fround(Math_fround(Math_fround(Math_fround(6.2831854820251465) / Math_fround($11 | 0)) * Math_fround($13 | 0)) * Math_fround(.5));
     $14 = Math_fround(sinf($15) / $52);
     $10 = Math_fround($39 * $14);
     $12 = Math_fround($37 * $14);
     $14 = Math_fround($46 * $14);
     $15 = cosf($15);
     label$57 : {
      if (!!$40) {
       $11 = HEAP32[$1 + 12 >> 2];
       $32 = HEAPF32[$11 + 36 >> 2];
       $33 = HEAPF32[$11 + 20 >> 2];
       $34 = HEAPF32[$11 + 40 >> 2];
       $35 = HEAPF32[$11 + 24 >> 2];
       $41 = HEAPF32[$11 + 32 >> 2];
       $42 = HEAPF32[$11 >> 2];
       $43 = HEAPF32[$11 + 16 >> 2];
       $44 = HEAPF32[$11 + 4 >> 2];
       $45 = HEAPF32[$11 + 8 >> 2];
       HEAP32[$5 + 836 >> 2] = 0;
       HEAP32[$5 + 820 >> 2] = 0;
       HEAP32[$5 + 804 >> 2] = 0;
       $22 = Math_fround(Math_fround($17 * $14) + Math_fround(Math_fround(Math_fround($29 * $15) - Math_fround($28 * $12)) - Math_fround($31 * $10)));
       $23 = Math_fround(Math_fround($17 * $10) + Math_fround(Math_fround($29 * $12) + Math_fround(Math_fround($28 * $15) + Math_fround($31 * $14))));
       $24 = Math_fround(Math_fround($29 * $10) + Math_fround(Math_fround(Math_fround($31 * $15) - Math_fround($28 * $14)) - Math_fround($17 * $12)));
       $25 = Math_fround(Math_fround($31 * $12) + Math_fround(Math_fround(Math_fround($17 * $15) - Math_fround($28 * $10)) - Math_fround($29 * $14)));
       $18 = Math_fround(Math_fround(Math_fround($10 * $22) + Math_fround(Math_fround($14 * $23) + Math_fround($15 * $24))) - Math_fround($12 * $25));
       $38 = Math_fround(Math_fround(Math_fround($12 * $24) + Math_fround(Math_fround($10 * $23) + Math_fround($15 * $25))) - Math_fround($14 * $22));
       $19 = Math_fround(Math_fround(Math_fround(Math_fround($15 * $23) - Math_fround($14 * $24)) - Math_fround($12 * $22)) - Math_fround($10 * $25));
       $10 = Math_fround(Math_fround(Math_fround($14 * $25) + Math_fround(Math_fround($15 * $22) + Math_fround($12 * $23))) - Math_fround($10 * $24));
       $14 = Math_fround(Math_fround(2) / Math_fround(Math_fround($19 * $19) + Math_fround(Math_fround($38 * $38) + Math_fround(Math_fround($18 * $18) + Math_fround($10 * $10)))));
       $12 = Math_fround($38 * $14);
       $23 = Math_fround($18 * $12);
       $15 = Math_fround($10 * $14);
       $24 = Math_fround($19 * $15);
       $22 = Math_fround($23 - $24);
       $25 = Math_fround($10 * $12);
       $30 = Math_fround($18 * $14);
       $47 = Math_fround($19 * $30);
       $14 = Math_fround($25 + $47);
       $30 = Math_fround($18 * $30);
       $48 = Math_fround($10 * $15);
       $10 = Math_fround(Math_fround(1) - Math_fround($30 + $48));
       HEAPF32[$5 + 832 >> 2] = Math_fround(Math_fround($45 * $22) + Math_fround($35 * $14)) + Math_fround($34 * $10);
       HEAPF32[$5 + 828 >> 2] = Math_fround(Math_fround($22 * $44) + Math_fround($14 * $33)) + Math_fround($10 * $32);
       HEAPF32[$5 + 824 >> 2] = Math_fround(Math_fround($22 * $42) + Math_fround($14 * $43)) + Math_fround($10 * $41);
       $15 = Math_fround($18 * $15);
       $18 = Math_fround($19 * $12);
       $10 = Math_fround($15 + $18);
       $19 = Math_fround($38 * $12);
       $12 = Math_fround(Math_fround(1) - Math_fround($30 + $19));
       $14 = Math_fround($25 - $47);
       HEAPF32[$5 + 816 >> 2] = Math_fround(Math_fround($45 * $10) + Math_fround($35 * $12)) + Math_fround($34 * $14);
       HEAPF32[$5 + 812 >> 2] = Math_fround(Math_fround($10 * $44) + Math_fround($12 * $33)) + Math_fround($14 * $32);
       HEAPF32[$5 + 808 >> 2] = Math_fround(Math_fround($10 * $42) + Math_fround($12 * $43)) + Math_fround($14 * $41);
       $10 = Math_fround(Math_fround(1) - Math_fround($48 + $19));
       $12 = Math_fround($15 - $18);
       $14 = Math_fround($23 + $24);
       HEAPF32[$5 + 800 >> 2] = Math_fround(Math_fround($45 * $10) + Math_fround($35 * $12)) + Math_fround($34 * $14);
       HEAPF32[$5 + 796 >> 2] = Math_fround(Math_fround($10 * $44) + Math_fround($12 * $33)) + Math_fround($14 * $32);
       HEAPF32[$5 + 792 >> 2] = Math_fround(Math_fround($10 * $42) + Math_fround($12 * $43)) + Math_fround($14 * $41);
       $11 = HEAP32[$2 + 12 >> 2];
       $8 = $11;
       $7 = HEAP32[$8 >> 2];
       $6 = HEAP32[$8 + 4 >> 2];
       $11 = $7;
       $7 = $9;
       HEAP32[$7 >> 2] = $11;
       HEAP32[$7 + 4 >> 2] = $6;
       $7 = HEAP32[$8 + 12 >> 2];
       $6 = HEAP32[$8 + 8 >> 2];
       $11 = $6;
       $6 = $9;
       HEAP32[$6 + 8 >> 2] = $11;
       HEAP32[$6 + 12 >> 2] = $7;
       $6 = HEAP32[$8 + 28 >> 2];
       $7 = HEAP32[$8 + 24 >> 2];
       $11 = $7;
       $7 = $16;
       HEAP32[$7 + 8 >> 2] = $11;
       HEAP32[$7 + 12 >> 2] = $6;
       $7 = HEAP32[$8 + 20 >> 2];
       $6 = HEAP32[$8 + 16 >> 2];
       $11 = $6;
       $6 = $16;
       HEAP32[$6 >> 2] = $11;
       HEAP32[$6 + 4 >> 2] = $7;
       $6 = HEAP32[$8 + 44 >> 2];
       $7 = HEAP32[$8 + 40 >> 2];
       $11 = $7;
       $7 = $20;
       HEAP32[$7 + 8 >> 2] = $11;
       HEAP32[$7 + 12 >> 2] = $6;
       $7 = HEAP32[$8 + 36 >> 2];
       $6 = HEAP32[$8 + 32 >> 2];
       $11 = $6;
       $6 = $20;
       HEAP32[$6 >> 2] = $11;
       HEAP32[$6 + 4 >> 2] = $7;
       $6 = HEAP32[$8 + 60 >> 2];
       $7 = HEAP32[$8 + 56 >> 2];
       $11 = $7;
       $7 = $26;
       HEAP32[$7 + 8 >> 2] = $11;
       HEAP32[$7 + 12 >> 2] = $6;
       $7 = HEAP32[$8 + 52 >> 2];
       $6 = HEAP32[$8 + 48 >> 2];
       $8 = $6;
       $6 = $26;
       HEAP32[$6 >> 2] = $8;
       HEAP32[$6 + 4 >> 2] = $7;
       break label$57;
      }
      $11 = HEAP32[$1 + 12 >> 2];
      $8 = $11;
      $7 = HEAP32[$8 + 8 >> 2];
      $6 = HEAP32[$8 + 12 >> 2];
      HEAP32[$5 + 800 >> 2] = $7;
      HEAP32[$5 + 804 >> 2] = $6;
      $7 = HEAP32[$8 + 4 >> 2];
      $6 = HEAP32[$8 >> 2];
      HEAP32[$5 + 792 >> 2] = $6;
      HEAP32[$5 + 796 >> 2] = $7;
      $6 = HEAP32[$8 + 28 >> 2];
      $7 = HEAP32[$8 + 24 >> 2];
      $11 = $7;
      $7 = $50;
      HEAP32[$7 + 8 >> 2] = $11;
      HEAP32[$7 + 12 >> 2] = $6;
      $7 = HEAP32[$8 + 20 >> 2];
      $6 = HEAP32[$8 + 16 >> 2];
      $11 = $6;
      $6 = $50;
      HEAP32[$6 >> 2] = $11;
      HEAP32[$6 + 4 >> 2] = $7;
      $6 = HEAP32[$8 + 44 >> 2];
      $7 = HEAP32[$8 + 40 >> 2];
      $11 = $7;
      $7 = $36;
      HEAP32[$7 + 8 >> 2] = $11;
      HEAP32[$7 + 12 >> 2] = $6;
      $7 = HEAP32[$8 + 36 >> 2];
      $6 = HEAP32[$8 + 32 >> 2];
      $11 = $6;
      $6 = $36;
      HEAP32[$6 >> 2] = $11;
      HEAP32[$6 + 4 >> 2] = $7;
      $6 = HEAP32[$8 + 60 >> 2];
      $7 = HEAP32[$8 + 56 >> 2];
      $11 = $7;
      $7 = $21;
      HEAP32[$7 + 8 >> 2] = $11;
      HEAP32[$7 + 12 >> 2] = $6;
      $7 = HEAP32[$8 + 52 >> 2];
      $6 = HEAP32[$8 + 48 >> 2];
      $8 = $6;
      $6 = $21;
      HEAP32[$6 >> 2] = $8;
      HEAP32[$6 + 4 >> 2] = $7;
      $11 = HEAP32[$2 + 12 >> 2];
      $32 = HEAPF32[$11 + 36 >> 2];
      $33 = HEAPF32[$11 + 20 >> 2];
      $34 = HEAPF32[$11 + 40 >> 2];
      $35 = HEAPF32[$11 + 24 >> 2];
      $41 = HEAPF32[$11 + 32 >> 2];
      $42 = HEAPF32[$11 >> 2];
      $43 = HEAPF32[$11 + 16 >> 2];
      $44 = HEAPF32[$11 + 4 >> 2];
      $45 = HEAPF32[$11 + 8 >> 2];
      HEAP32[$5 + 900 >> 2] = 0;
      HEAP32[$5 + 884 >> 2] = 0;
      HEAP32[$5 + 868 >> 2] = 0;
      $22 = Math_fround(Math_fround($17 * $14) + Math_fround(Math_fround(Math_fround($29 * $15) - Math_fround($28 * $12)) - Math_fround($31 * $10)));
      $23 = Math_fround(Math_fround($17 * $10) + Math_fround(Math_fround($29 * $12) + Math_fround(Math_fround($28 * $15) + Math_fround($31 * $14))));
      $24 = Math_fround(Math_fround($29 * $10) + Math_fround(Math_fround(Math_fround($31 * $15) - Math_fround($28 * $14)) - Math_fround($17 * $12)));
      $25 = Math_fround(Math_fround($31 * $12) + Math_fround(Math_fround(Math_fround($17 * $15) - Math_fround($28 * $10)) - Math_fround($29 * $14)));
      $18 = Math_fround(Math_fround(Math_fround($10 * $22) + Math_fround(Math_fround($14 * $23) + Math_fround($15 * $24))) - Math_fround($12 * $25));
      $38 = Math_fround(Math_fround(Math_fround($12 * $24) + Math_fround(Math_fround($10 * $23) + Math_fround($15 * $25))) - Math_fround($14 * $22));
      $19 = Math_fround(Math_fround(Math_fround(Math_fround($15 * $23) - Math_fround($14 * $24)) - Math_fround($12 * $22)) - Math_fround($10 * $25));
      $10 = Math_fround(Math_fround(Math_fround($14 * $25) + Math_fround(Math_fround($15 * $22) + Math_fround($12 * $23))) - Math_fround($10 * $24));
      $14 = Math_fround(Math_fround(2) / Math_fround(Math_fround($19 * $19) + Math_fround(Math_fround($38 * $38) + Math_fround(Math_fround($18 * $18) + Math_fround($10 * $10)))));
      $12 = Math_fround($38 * $14);
      $23 = Math_fround($18 * $12);
      $15 = Math_fround($10 * $14);
      $24 = Math_fround($19 * $15);
      $22 = Math_fround($23 - $24);
      $25 = Math_fround($10 * $12);
      $30 = Math_fround($18 * $14);
      $47 = Math_fround($19 * $30);
      $14 = Math_fround($25 + $47);
      $30 = Math_fround($18 * $30);
      $48 = Math_fround($10 * $15);
      $10 = Math_fround(Math_fround(1) - Math_fround($30 + $48));
      HEAPF32[$5 + 896 >> 2] = Math_fround(Math_fround($45 * $22) + Math_fround($35 * $14)) + Math_fround($34 * $10);
      HEAPF32[$5 + 892 >> 2] = Math_fround(Math_fround($22 * $44) + Math_fround($14 * $33)) + Math_fround($10 * $32);
      HEAPF32[$5 + 888 >> 2] = Math_fround(Math_fround($22 * $42) + Math_fround($14 * $43)) + Math_fround($10 * $41);
      $15 = Math_fround($18 * $15);
      $18 = Math_fround($19 * $12);
      $10 = Math_fround($15 + $18);
      $19 = Math_fround($38 * $12);
      $12 = Math_fround(Math_fround(1) - Math_fround($30 + $19));
      $14 = Math_fround($25 - $47);
      HEAPF32[$5 + 880 >> 2] = Math_fround(Math_fround($45 * $10) + Math_fround($35 * $12)) + Math_fround($34 * $14);
      HEAPF32[$5 + 876 >> 2] = Math_fround(Math_fround($10 * $44) + Math_fround($12 * $33)) + Math_fround($14 * $32);
      HEAPF32[$5 + 872 >> 2] = Math_fround(Math_fround($10 * $42) + Math_fround($12 * $43)) + Math_fround($14 * $41);
      $10 = Math_fround(Math_fround(1) - Math_fround($48 + $19));
      $12 = Math_fround($15 - $18);
      $14 = Math_fround($23 + $24);
      HEAPF32[$5 + 864 >> 2] = Math_fround(Math_fround($45 * $10) + Math_fround($35 * $12)) + Math_fround($34 * $14);
      HEAPF32[$5 + 860 >> 2] = Math_fround(Math_fround($10 * $44) + Math_fround($12 * $33)) + Math_fround($14 * $32);
      HEAPF32[$5 + 856 >> 2] = Math_fround(Math_fround($10 * $42) + Math_fround($12 * $43)) + Math_fround($14 * $41);
     }
     $11 = HEAP32[$3 + 20 >> 2];
     HEAP32[$5 + 44 >> 2] = $4;
     HEAP32[$5 + 8 >> 2] = 10344;
     HEAP32[$5 + 40 >> 2] = 0;
     $6 = HEAP32[$5 + 804 >> 2];
     $7 = HEAP32[$5 + 800 >> 2];
     HEAP32[$5 + 56 >> 2] = $7;
     HEAP32[$5 + 60 >> 2] = $6;
     $7 = HEAP32[$5 + 796 >> 2];
     $6 = HEAP32[$5 + 792 >> 2];
     HEAP32[$5 + 48 >> 2] = $6;
     HEAP32[$5 + 52 >> 2] = $7;
     $8 = $50;
     $7 = HEAP32[$8 + 8 >> 2];
     $6 = HEAP32[$8 + 12 >> 2];
     $53 = $7;
     $7 = $51;
     HEAP32[$7 + 8 >> 2] = $53;
     HEAP32[$7 + 12 >> 2] = $6;
     $7 = HEAP32[$8 + 4 >> 2];
     $6 = HEAP32[$8 >> 2];
     $8 = $6;
     $6 = $51;
     HEAP32[$6 >> 2] = $8;
     HEAP32[$6 + 4 >> 2] = $7;
     $8 = $36;
     $7 = HEAP32[$8 + 8 >> 2];
     $6 = HEAP32[$8 + 12 >> 2];
     HEAP32[$5 + 88 >> 2] = $7;
     HEAP32[$5 + 92 >> 2] = $6;
     $7 = HEAP32[$8 + 4 >> 2];
     $6 = HEAP32[$8 >> 2];
     HEAP32[$5 + 80 >> 2] = $6;
     HEAP32[$5 + 84 >> 2] = $7;
     $8 = $21;
     $7 = HEAP32[$8 + 8 >> 2];
     $6 = HEAP32[$8 + 12 >> 2];
     HEAP32[$5 + 104 >> 2] = $7;
     HEAP32[$5 + 108 >> 2] = $6;
     $7 = HEAP32[$8 + 4 >> 2];
     $6 = HEAP32[$8 >> 2];
     HEAP32[$5 + 96 >> 2] = $6;
     HEAP32[$5 + 100 >> 2] = $7;
     $8 = $9;
     $7 = HEAP32[$8 + 8 >> 2];
     $6 = HEAP32[$8 + 12 >> 2];
     HEAP32[$5 + 120 >> 2] = $7;
     HEAP32[$5 + 124 >> 2] = $6;
     $7 = HEAP32[$8 + 4 >> 2];
     $6 = HEAP32[$8 >> 2];
     HEAP32[$5 + 112 >> 2] = $6;
     HEAP32[$5 + 116 >> 2] = $7;
     $8 = $16;
     $7 = HEAP32[$8 + 8 >> 2];
     $6 = HEAP32[$8 + 12 >> 2];
     HEAP32[$5 + 136 >> 2] = $7;
     HEAP32[$5 + 140 >> 2] = $6;
     $7 = HEAP32[$8 + 4 >> 2];
     $6 = HEAP32[$8 >> 2];
     HEAP32[$5 + 128 >> 2] = $6;
     HEAP32[$5 + 132 >> 2] = $7;
     $8 = $20;
     $7 = HEAP32[$8 + 8 >> 2];
     $6 = HEAP32[$8 + 12 >> 2];
     HEAP32[$5 + 152 >> 2] = $7;
     HEAP32[$5 + 156 >> 2] = $6;
     $7 = HEAP32[$8 + 4 >> 2];
     $6 = HEAP32[$8 >> 2];
     HEAP32[$5 + 144 >> 2] = $6;
     HEAP32[$5 + 148 >> 2] = $7;
     $8 = $26;
     $7 = HEAP32[$8 + 8 >> 2];
     $6 = HEAP32[$8 + 12 >> 2];
     HEAP32[$5 + 168 >> 2] = $7;
     HEAP32[$5 + 172 >> 2] = $6;
     $7 = HEAP32[$8 + 4 >> 2];
     $6 = HEAP32[$8 >> 2];
     HEAP32[$5 + 160 >> 2] = $6;
     HEAP32[$5 + 164 >> 2] = $7;
     $6 = HEAP32[$5 + 260 >> 2];
     $7 = HEAP32[$5 + 256 >> 2];
     HEAP32[$5 + 184 >> 2] = $7;
     HEAP32[$5 + 188 >> 2] = $6;
     $7 = HEAP32[$5 + 252 >> 2];
     $6 = HEAP32[$5 + 248 >> 2];
     HEAP32[$5 + 176 >> 2] = $6;
     HEAP32[$5 + 180 >> 2] = $7;
     $6 = HEAP32[$5 + 276 >> 2];
     $7 = HEAP32[$5 + 272 >> 2];
     HEAP32[$5 + 200 >> 2] = $7;
     HEAP32[$5 + 204 >> 2] = $6;
     $7 = HEAP32[$5 + 268 >> 2];
     $6 = HEAP32[$5 + 264 >> 2];
     HEAP32[$5 + 192 >> 2] = $6;
     HEAP32[$5 + 196 >> 2] = $7;
     $6 = HEAP32[$5 + 292 >> 2];
     $7 = HEAP32[$5 + 288 >> 2];
     HEAP32[$5 + 216 >> 2] = $7;
     HEAP32[$5 + 220 >> 2] = $6;
     $7 = HEAP32[$5 + 284 >> 2];
     $6 = HEAP32[$5 + 280 >> 2];
     HEAP32[$5 + 208 >> 2] = $6;
     HEAP32[$5 + 212 >> 2] = $7;
     $6 = HEAP32[$5 + 300 >> 2];
     $7 = HEAP32[$5 + 296 >> 2];
     HEAP32[$5 + 224 >> 2] = $7;
     HEAP32[$5 + 228 >> 2] = $6;
     $7 = HEAP32[$5 + 308 >> 2];
     $6 = HEAP32[$5 + 304 >> 2];
     HEAP32[$5 + 232 >> 2] = $6;
     HEAP32[$5 + 236 >> 2] = $7;
     HEAP32[$5 + 244 >> 2] = $11;
     HEAP8[$5 + 240 | 0] = $40;
     btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($27, $5 + 792 | 0, $5 + 8 | 0, $11, 0);
     $11 = HEAP32[$0 + 64 >> 2];
    }
    $13 = $13 + 1 | 0;
    if (($13 | 0) < ($11 | 0)) {
     continue;
    }
    break;
   }
  }
  if (!HEAPU8[$0 + 52 | 0]) {
   break label$3;
  }
  $0 = HEAP32[$4 + 4 >> 2];
  if (!HEAP32[$0 + 844 >> 2]) {
   break label$3;
  }
  $11 = HEAP32[$0 + 836 >> 2];
  $13 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
  if (($11 | 0) != ($13 | 0)) {
   btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0, $13 + 4 | 0);
   break label$3;
  }
  btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, $11 + 4 | 0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0);
 }
 $0 = $5 + 928 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexHullInternal__findEdgeForCoplanarFaces_28btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Edge___2c_20btConvexHullInternal__Edge___2c_20btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 $13 = global$0 - 48 | 0;
 $7 = $13;
 if ($13 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 $35 = HEAP32[$4 >> 2];
 $24 = $1;
 $39 = HEAP32[$3 >> 2];
 if ($39) {
  $24 = HEAP32[$39 + 12 >> 2];
 }
 $21 = HEAP32[$24 + 96 >> 2];
 $15 = $2;
 $23 = HEAP32[($39 ? $39 : $35) + 12 >> 2];
 $18 = HEAP32[$1 + 92 >> 2];
 $31 = HEAP32[$23 + 92 >> 2] - $18 | 0;
 $25 = HEAP32[$1 + 96 >> 2];
 $50 = HEAP32[$2 + 96 >> 2] - $25 | 0;
 $32 = HEAP32[$23 + 96 >> 2] - $25 | 0;
 $44 = HEAP32[$2 + 92 >> 2] - $18 | 0;
 $7 = Math_imul($31, $50) - Math_imul($32, $44) | 0;
 $12 = $7 >> 31;
 $45 = $7;
 $46 = $12;
 $7 = $50;
 $12 = $7 >> 31;
 $20 = $7;
 $22 = $12;
 $12 = $46;
 $7 = $22;
 $7 = __wasm_i64_mul($45, $12, $20, $7);
 $9 = $7;
 $12 = i64toi32_i32$HIGH_BITS;
 $10 = $12;
 $1 = HEAP32[$1 + 88 >> 2];
 $23 = HEAP32[$23 + 88 >> 2] - $1 | 0;
 $51 = HEAP32[$2 + 88 >> 2] - $1 | 0;
 $7 = Math_imul($44, $23) - Math_imul($51, $31) | 0;
 $12 = $7 >> 31;
 $47 = $7;
 $48 = $12;
 $7 = $51;
 $12 = $7 >> 31;
 $29 = $7;
 $30 = $12;
 $12 = $48;
 $7 = $30;
 $7 = __wasm_i64_mul($47, $12, $29, $7);
 $12 = i64toi32_i32$HIGH_BITS;
 $2 = $12;
 $8 = $7;
 $11 = $9 - $8 | 0;
 $42 = $11;
 $12 = $10;
 $7 = $2;
 $10 = $7 + ($9 >>> 0 < $8 >>> 0) | 0;
 $10 = $12 - $10 | 0;
 $40 = $10;
 $33 = HEAP32[$24 + 92 >> 2];
 $9 = $33;
 $10 = $9 >> 31;
 $9 = $10;
 $10 = $40;
 $9 = __wasm_i64_mul($11, $10, $33, $9);
 $27 = $9;
 $10 = i64toi32_i32$HIGH_BITS;
 $19 = $10;
 $9 = $44;
 $10 = $9 >> 31;
 $14 = $9;
 $16 = $10;
 $10 = $48;
 $9 = $16;
 $9 = __wasm_i64_mul($47, $10, $14, $9);
 $12 = $9;
 $10 = i64toi32_i32$HIGH_BITS;
 $11 = $10;
 $9 = Math_imul($32, $29) - Math_imul($23, $20) | 0;
 $10 = $9 >> 31;
 $49 = $9;
 $52 = $10;
 $9 = $22;
 $9 = __wasm_i64_mul($49, $10, $20, $9);
 $10 = i64toi32_i32$HIGH_BITS;
 $2 = $10;
 $8 = $9;
 $7 = $12 - $8 | 0;
 $43 = $7;
 $10 = $11;
 $9 = $2;
 $11 = $9 + ($12 >>> 0 < $8 >>> 0) | 0;
 $11 = $10 - $11 | 0;
 $41 = $11;
 $24 = HEAP32[$24 + 88 >> 2];
 $12 = $24;
 $11 = $12 >> 31;
 $12 = $11;
 $11 = $41;
 $12 = __wasm_i64_mul($7, $11, $24, $12);
 $8 = $12;
 $11 = i64toi32_i32$HIGH_BITS;
 $12 = $11;
 $11 = $19;
 $7 = $12 + $11 | 0;
 $10 = $27;
 $9 = $8 + $10 | 0;
 if ($9 >>> 0 < $8 >>> 0) {
  $7 = $7 + 1 | 0;
 }
 $22 = $9;
 $20 = $7;
 $7 = $30;
 $10 = $52;
 $10 = __wasm_i64_mul($29, $7, $49, $10);
 $11 = $10;
 $7 = i64toi32_i32$HIGH_BITS;
 $9 = $7;
 $7 = $16;
 $10 = $46;
 $10 = __wasm_i64_mul($14, $7, $45, $10);
 $7 = i64toi32_i32$HIGH_BITS;
 $2 = $7;
 $8 = $10;
 $12 = $11 - $8 | 0;
 $29 = $12;
 $7 = $9;
 $10 = $2;
 $9 = $10 + ($11 >>> 0 < $8 >>> 0) | 0;
 $9 = $7 - $9 | 0;
 $30 = $9;
 $11 = $21;
 $9 = $11 >> 31;
 $11 = $9;
 $9 = $30;
 $11 = __wasm_i64_mul($12, $9, $21, $11);
 $8 = $11;
 $9 = i64toi32_i32$HIGH_BITS;
 $11 = $9;
 $9 = $20;
 $12 = $9 + $11 | 0;
 $7 = $22;
 $10 = $7 + $8 | 0;
 if ($10 >>> 0 < $8 >>> 0) {
  $12 = $12 + 1 | 0;
 }
 $20 = $10;
 $22 = $12;
 $7 = $1;
 $12 = $7 >> 31;
 $7 = $12;
 $12 = $46;
 $7 = __wasm_i64_mul($45, $12, $1, $7);
 $9 = $7;
 $12 = i64toi32_i32$HIGH_BITS;
 $1 = $12;
 $7 = $25;
 $12 = $7 >> 31;
 $7 = $12;
 $12 = $48;
 $7 = __wasm_i64_mul($47, $12, $25, $7);
 $8 = $7;
 $12 = i64toi32_i32$HIGH_BITS;
 $7 = $12;
 $12 = $1;
 $10 = $12 + $7 | 0;
 $11 = $9 + $8 | 0;
 if ($11 >>> 0 < $8 >>> 0) {
  $10 = $10 + 1 | 0;
 }
 $12 = $11;
 $1 = $10;
 $9 = $18;
 $10 = $9 >> 31;
 $9 = $10;
 $10 = $52;
 $9 = __wasm_i64_mul($49, $10, $18, $9);
 $8 = $9;
 $10 = i64toi32_i32$HIGH_BITS;
 $9 = $10;
 $10 = $1;
 $11 = $9 + $10 | 0;
 $7 = $12 + $8 | 0;
 if ($7 >>> 0 < $8 >>> 0) {
  $11 = $11 + 1 | 0;
 }
 $28 = $7;
 $27 = $11;
 $15 = $35 ? HEAP32[$35 + 12 >> 2] : $15;
 $25 = HEAP32[$15 + 96 >> 2];
 $31 = HEAP32[$15 + 92 >> 2];
 $32 = HEAP32[$15 + 88 >> 2];
 $1 = $35;
 label$4 : {
  if (!$39) {
   break label$4;
  }
  $1 = $35;
  if (HEAP32[$39 + 12 >> 2] == ($5 | 0)) {
   break label$4;
  }
  $1 = HEAP32[HEAP32[$39 + 8 >> 2] + 4 >> 2];
  $2 = HEAP32[$1 + 12 >> 2];
  $10 = $2;
  $11 = HEAP32[$10 + 92 >> 2];
  $12 = $11 >> 31;
  $14 = $11;
  $16 = $12;
  $11 = $52;
  $11 = __wasm_i64_mul($14, $12, $49, $11);
  $9 = $11;
  $12 = i64toi32_i32$HIGH_BITS;
  $7 = $12;
  $12 = HEAP32[$10 + 88 >> 2];
  $11 = $12 >> 31;
  $17 = $12;
  $19 = $11;
  $12 = $46;
  $12 = __wasm_i64_mul($17, $11, $45, $12);
  $8 = $12;
  $11 = i64toi32_i32$HIGH_BITS;
  $12 = $11;
  $11 = $7;
  $7 = $12 + $11 | 0;
  $10 = $9;
  $9 = $8 + $10 | 0;
  if ($9 >>> 0 < $8 >>> 0) {
   $7 = $7 + 1 | 0;
  }
  $12 = $9;
  $9 = $7;
  $11 = $2;
  $7 = HEAP32[$11 + 96 >> 2];
  $10 = $7 >> 31;
  $36 = $7;
  $26 = $10;
  $7 = $48;
  $7 = __wasm_i64_mul($36, $10, $47, $7);
  $8 = $7;
  $10 = i64toi32_i32$HIGH_BITS;
  $7 = $10;
  $10 = $9;
  $9 = $7 + $10 | 0;
  $11 = $12;
  $12 = $8 + $11 | 0;
  if ($12 >>> 0 < $8 >>> 0) {
   $9 = $9 + 1 | 0;
  }
  $10 = $12;
  $8 = $28;
  $11 = $27;
  label$5 : {
   if (($9 | 0) < ($11 | 0) ? 1 : ($9 | 0) <= ($11 | 0) ? $10 >>> 0 >= $8 >>> 0 ? 0 : 1 : 0) {
    break label$5;
   }
   $15 = $1 + 12 | 0;
   $23 = HEAP32[$0 + 100 >> 2];
   while (1) {
    if (HEAP32[$1 + 20 >> 2] == ($23 | 0)) {
     break label$5;
    }
    $10 = $16;
    $9 = $40;
    $9 = __wasm_i64_mul($14, $10, $42, $9);
    $8 = $9;
    $10 = i64toi32_i32$HIGH_BITS;
    $2 = $10;
    $10 = $19;
    $9 = $41;
    $9 = __wasm_i64_mul($17, $10, $43, $9);
    $11 = $9;
    $10 = i64toi32_i32$HIGH_BITS;
    $9 = $10;
    $10 = $2;
    $12 = $9 + $10 | 0;
    $7 = $8 + $11 | 0;
    if ($7 >>> 0 < $11 >>> 0) {
     $12 = $12 + 1 | 0;
    }
    $10 = $7;
    $2 = $12;
    $12 = $30;
    $8 = $26;
    $8 = __wasm_i64_mul($29, $12, $36, $8);
    $11 = $8;
    $12 = i64toi32_i32$HIGH_BITS;
    $8 = $12;
    $12 = $2;
    $7 = $12 + $8 | 0;
    $9 = $11 + $10 | 0;
    if ($9 >>> 0 < $11 >>> 0) {
     $7 = $7 + 1 | 0;
    }
    $14 = $9;
    $11 = $20;
    $16 = $7;
    $10 = $22;
    if (($7 | 0) < ($10 | 0) ? 1 : ($7 | 0) <= ($10 | 0) ? $9 >>> 0 > $11 >>> 0 ? 0 : 1 : 0) {
     break label$5;
    }
    HEAP32[$3 >> 2] = $1;
    $2 = HEAP32[$15 >> 2];
    $21 = HEAP32[$2 + 96 >> 2];
    $33 = HEAP32[$2 + 92 >> 2];
    $24 = HEAP32[$2 + 88 >> 2];
    if (($2 | 0) != ($5 | 0)) {
     $1 = HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2];
     $15 = $1 + 12 | 0;
     $20 = $14;
     $12 = $16;
     $22 = $12;
     $2 = HEAP32[$1 + 12 >> 2];
     $11 = $2;
     $12 = HEAP32[$11 + 92 >> 2];
     $7 = $12 >> 31;
     $14 = $12;
     $16 = $7;
     $12 = $52;
     $12 = __wasm_i64_mul($14, $7, $49, $12);
     $8 = $12;
     $7 = i64toi32_i32$HIGH_BITS;
     $9 = $7;
     $7 = HEAP32[$11 + 88 >> 2];
     $12 = $7 >> 31;
     $17 = $7;
     $19 = $12;
     $7 = $46;
     $7 = __wasm_i64_mul($17, $12, $45, $7);
     $10 = $7;
     $12 = i64toi32_i32$HIGH_BITS;
     $7 = $12;
     $12 = $9;
     $9 = $12 + $7 | 0;
     $11 = $8;
     $8 = $11 + $10 | 0;
     if ($8 >>> 0 < $10 >>> 0) {
      $9 = $9 + 1 | 0;
     }
     $37 = $8;
     $7 = $9;
     $12 = $2;
     $9 = HEAP32[$12 + 96 >> 2];
     $11 = $9 >> 31;
     $36 = $9;
     $26 = $11;
     $9 = $48;
     $9 = __wasm_i64_mul($36, $11, $47, $9);
     $10 = $9;
     $11 = i64toi32_i32$HIGH_BITS;
     $9 = $11;
     $11 = $7;
     $8 = $9 + $11 | 0;
     $12 = $37;
     $7 = $12 + $10 | 0;
     if ($7 >>> 0 < $10 >>> 0) {
      $8 = $8 + 1 | 0;
     }
     $10 = $28;
     $12 = $27;
     if (($8 | 0) < ($12 | 0) ? 1 : ($8 | 0) <= ($12 | 0) ? $7 >>> 0 >= $10 >>> 0 ? 0 : 1 : 0) {
      break label$5;
     }
     continue;
    }
    break;
   }
   $20 = $14;
   $11 = $16;
   $22 = $11;
  }
  $1 = HEAP32[$4 >> 2];
 }
 $8 = $31;
 $11 = $8 >> 31;
 $8 = $11;
 $11 = $40;
 $8 = __wasm_i64_mul($42, $11, $31, $8);
 $10 = $8;
 $11 = i64toi32_i32$HIGH_BITS;
 $2 = $11;
 $8 = $32;
 $11 = $8 >> 31;
 $8 = $11;
 $11 = $41;
 $8 = __wasm_i64_mul($43, $11, $32, $8);
 $12 = $8;
 $11 = i64toi32_i32$HIGH_BITS;
 $8 = $11;
 $11 = $2;
 $7 = $8 + $11 | 0;
 $9 = $12 + $10 | 0;
 if ($9 >>> 0 < $12 >>> 0) {
  $7 = $7 + 1 | 0;
 }
 $11 = $9;
 $2 = $7;
 $10 = $25;
 $7 = $10 >> 31;
 $10 = $7;
 $7 = $30;
 $10 = __wasm_i64_mul($29, $7, $25, $10);
 $12 = $10;
 $7 = i64toi32_i32$HIGH_BITS;
 $10 = $7;
 $7 = $2;
 $9 = $7 + $10 | 0;
 $8 = $12 + $11 | 0;
 if ($8 >>> 0 < $12 >>> 0) {
  $9 = $9 + 1 | 0;
 }
 $14 = $8;
 $16 = $9;
 label$8 : {
  if (!$1) {
   $1 = 0;
   break label$8;
  }
  if (HEAP32[$1 + 12 >> 2] == ($6 | 0)) {
   break label$8;
  }
  $15 = HEAP32[HEAP32[$1 + 8 >> 2] >> 2];
  $2 = HEAP32[$15 + 12 >> 2];
  $7 = $2;
  $9 = HEAP32[$7 + 92 >> 2];
  $11 = $9 >> 31;
  $17 = $9;
  $19 = $11;
  $9 = $52;
  $9 = __wasm_i64_mul($17, $11, $49, $9);
  $10 = $9;
  $11 = i64toi32_i32$HIGH_BITS;
  $8 = $11;
  $11 = HEAP32[$7 + 88 >> 2];
  $9 = $11 >> 31;
  $36 = $11;
  $26 = $9;
  $11 = $46;
  $11 = __wasm_i64_mul($36, $9, $45, $11);
  $12 = $11;
  $9 = i64toi32_i32$HIGH_BITS;
  $11 = $9;
  $9 = $8;
  $8 = $9 + $11 | 0;
  $7 = $10;
  $10 = $12 + $7 | 0;
  if ($10 >>> 0 < $12 >>> 0) {
   $8 = $8 + 1 | 0;
  }
  $11 = $10;
  $10 = $8;
  $9 = $2;
  $8 = HEAP32[$9 + 96 >> 2];
  $7 = $8 >> 31;
  $38 = $8;
  $37 = $7;
  $8 = $48;
  $8 = __wasm_i64_mul($38, $7, $47, $8);
  $12 = $8;
  $7 = i64toi32_i32$HIGH_BITS;
  $8 = $7;
  $7 = $10;
  $10 = $7 + $8 | 0;
  $9 = $11;
  $11 = $12 + $9 | 0;
  if ($11 >>> 0 < $12 >>> 0) {
   $10 = $10 + 1 | 0;
  }
  $7 = $11;
  $12 = $28;
  $9 = $27;
  if (($10 | 0) < ($9 | 0) ? 1 : ($10 | 0) <= ($9 | 0) ? $7 >>> 0 >= $12 >>> 0 ? 0 : 1 : 0) {
   break label$8;
  }
  $23 = $15 + 12 | 0;
  $18 = HEAP32[$0 + 100 >> 2];
  while (1) {
   $2 = $15;
   if (HEAP32[$2 + 20 >> 2] == ($18 | 0)) {
    break label$8;
   }
   $7 = $19;
   $10 = $40;
   $10 = __wasm_i64_mul($17, $7, $42, $10);
   $12 = $10;
   $7 = i64toi32_i32$HIGH_BITS;
   $8 = $7;
   $7 = $41;
   $10 = $26;
   $10 = __wasm_i64_mul($43, $7, $36, $10);
   $9 = $10;
   $7 = i64toi32_i32$HIGH_BITS;
   $10 = $7;
   $7 = $8;
   $11 = $7 + $10 | 0;
   $8 = $12 + $9 | 0;
   if ($8 >>> 0 < $9 >>> 0) {
    $11 = $11 + 1 | 0;
   }
   $10 = $8;
   $7 = $11;
   $11 = $30;
   $12 = $37;
   $12 = __wasm_i64_mul($29, $11, $38, $12);
   $9 = $12;
   $11 = i64toi32_i32$HIGH_BITS;
   $12 = $11;
   $11 = $7;
   $8 = $12 + $11 | 0;
   $7 = $10;
   $10 = $7 + $9 | 0;
   if ($10 >>> 0 < $9 >>> 0) {
    $8 = $8 + 1 | 0;
   }
   $17 = $10;
   $11 = $10;
   $9 = $14;
   $19 = $8;
   $7 = $16;
   if (($8 | 0) < ($7 | 0) ? 1 : ($8 | 0) <= ($7 | 0) ? $11 >>> 0 > $9 >>> 0 ? 0 : 1 : 0) {
    break label$8;
   }
   HEAP32[$4 >> 2] = $2;
   $1 = HEAP32[$23 >> 2];
   $25 = HEAP32[$1 + 96 >> 2];
   $31 = HEAP32[$1 + 92 >> 2];
   $32 = HEAP32[$1 + 88 >> 2];
   if (($1 | 0) != ($6 | 0)) {
    $15 = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
    $23 = $15 + 12 | 0;
    $14 = $17;
    $11 = $19;
    $16 = $11;
    $1 = $2;
    $2 = HEAP32[$15 + 12 >> 2];
    $9 = $2;
    $11 = HEAP32[$9 + 92 >> 2];
    $8 = $11 >> 31;
    $17 = $11;
    $19 = $8;
    $11 = $52;
    $11 = __wasm_i64_mul($17, $8, $49, $11);
    $12 = $11;
    $8 = i64toi32_i32$HIGH_BITS;
    $10 = $8;
    $8 = HEAP32[$9 + 88 >> 2];
    $11 = $8 >> 31;
    $36 = $8;
    $26 = $11;
    $8 = $46;
    $8 = __wasm_i64_mul($36, $11, $45, $8);
    $7 = $8;
    $11 = i64toi32_i32$HIGH_BITS;
    $8 = $11;
    $11 = $10;
    $10 = $8 + $11 | 0;
    $9 = $12;
    $12 = $7 + $9 | 0;
    if ($12 >>> 0 < $7 >>> 0) {
     $10 = $10 + 1 | 0;
    }
    $34 = $12;
    $8 = $10;
    $11 = $2;
    $10 = HEAP32[$11 + 96 >> 2];
    $9 = $10 >> 31;
    $38 = $10;
    $37 = $9;
    $10 = $48;
    $10 = __wasm_i64_mul($38, $9, $47, $10);
    $7 = $10;
    $9 = i64toi32_i32$HIGH_BITS;
    $10 = $9;
    $9 = $8;
    $12 = $9 + $10 | 0;
    $11 = $34;
    $8 = $7 + $11 | 0;
    if ($8 >>> 0 < $7 >>> 0) {
     $12 = $12 + 1 | 0;
    }
    $7 = $28;
    $11 = $27;
    if (($12 | 0) < ($11 | 0) ? 1 : ($12 | 0) <= ($11 | 0) ? $8 >>> 0 >= $7 >>> 0 ? 0 : 1 : 0) {
     break label$8;
    }
    continue;
   }
   break;
  }
  $1 = $2;
  $14 = $17;
  $9 = $19;
  $16 = $9;
 }
 $7 = $14;
 $11 = $20;
 $10 = $7 - $11 | 0;
 $20 = $10;
 $9 = $16;
 $12 = $22;
 $8 = $12 + ($7 >>> 0 < $11 >>> 0) | 0;
 $8 = $9 - $8 | 0;
 $22 = $8;
 label$12 : {
  $9 = $10;
  if (($8 | 0) > 0 ? 1 : ($8 | 0) >= 0 ? $9 >>> 0 < 1 ? 0 : 1 : 0) {
   while (1) {
    $34 = (Math_imul($31 - $33 | 0, $44) + Math_imul($32 - $24 | 0, $51) | 0) + Math_imul($25 - $21 | 0, $50) | 0;
    $8 = $34;
    $9 = $8 >> 31;
    $28 = $8;
    $27 = $9;
    label$15 : {
     $1 = HEAP32[$3 >> 2];
     if (!$1 | HEAP32[$1 + 12 >> 2] == ($5 | 0)) {
      break label$15;
     }
     $15 = HEAP32[HEAP32[$1 >> 2] + 8 >> 2];
     if (HEAP32[$15 + 20 >> 2] <= HEAP32[$0 + 100 >> 2]) {
      break label$15;
     }
     $2 = HEAP32[$15 + 12 >> 2];
     $35 = HEAP32[$2 + 92 >> 2];
     $26 = $35 - $33 | 0;
     $23 = HEAP32[$2 + 88 >> 2];
     $17 = $23 - $24 | 0;
     $2 = HEAP32[$2 + 96 >> 2];
     $19 = $2 - $21 | 0;
     $18 = (Math_imul($26, $44) + Math_imul($17, $51) | 0) + Math_imul($19, $50) | 0;
     $8 = $26;
     $9 = $8 >> 31;
     $8 = $9;
     $9 = $40;
     $8 = __wasm_i64_mul($42, $9, $26, $8);
     $11 = $8;
     $9 = i64toi32_i32$HIGH_BITS;
     $10 = $9;
     $8 = $17;
     $9 = $8 >> 31;
     $8 = $9;
     $9 = $41;
     $8 = __wasm_i64_mul($43, $9, $17, $8);
     $7 = $8;
     $9 = i64toi32_i32$HIGH_BITS;
     $8 = $9;
     $9 = $10;
     $10 = $9 + $8 | 0;
     $12 = $7 + $11 | 0;
     if ($12 >>> 0 < $7 >>> 0) {
      $10 = $10 + 1 | 0;
     }
     $8 = $12;
     $9 = $10;
     $11 = $19;
     $10 = $11 >> 31;
     $11 = $10;
     $10 = $30;
     $11 = __wasm_i64_mul($29, $10, $19, $11);
     $7 = $11;
     $10 = i64toi32_i32$HIGH_BITS;
     $11 = $10;
     $10 = $9;
     $12 = $11 + $10 | 0;
     $9 = $8;
     $8 = $7 + $9 | 0;
     if ($8 >>> 0 < $7 >>> 0) {
      $12 = $12 + 1 | 0;
     }
     $14 = $8;
     $16 = $12;
     label$16 : {
      if (!($12 | $8)) {
       if (($18 | 0) < 0) {
        break label$16;
       }
       break label$15;
      }
      $10 = $14;
      if (($12 | 0) > -1 ? 1 : ($16 | 0) >= -1 ? $10 >>> 0 <= 4294967295 ? 0 : 1 : 0) {
       break label$15;
      }
      $12 = $18;
      $10 = $12 >> 31;
      $17 = $12;
      $19 = $10;
      $10 = $13;
      label$18 : {
       if (($12 | 0) >= 1) {
        $12 = $13;
        HEAP32[$12 + 24 >> 2] = $17;
        HEAP32[$12 + 28 >> 2] = $19;
        HEAP32[$12 + 40 >> 2] = 1;
        $18 = -1;
        break label$18;
       }
       if (($18 | 0) <= -1) {
        HEAP32[$13 + 40 >> 2] = -1;
        $7 = $13;
        $9 = $17;
        $11 = 0 - $9 | 0;
        HEAP32[$7 + 24 >> 2] = $11;
        $12 = $19;
        $8 = $12 + (0 < $9 >>> 0) | 0;
        $8 = 0 - $8 | 0;
        HEAP32[$7 + 28 >> 2] = $8;
        $18 = 1;
        break label$18;
       }
       $7 = $13;
       HEAP32[$7 + 24 >> 2] = 0;
       HEAP32[$7 + 28 >> 2] = 0;
       HEAP32[$7 + 40 >> 2] = 0;
       $18 = 0;
      }
      HEAP32[$10 + 40 >> 2] = $18;
      $10 = $13;
      $9 = $14;
      $12 = 0 - $9 | 0;
      HEAP32[$10 + 32 >> 2] = $12;
      $7 = $16;
      $11 = $7 + (0 < $9 >>> 0) | 0;
      $11 = 0 - $11 | 0;
      HEAP32[$10 + 36 >> 2] = $11;
      label$21 : {
       if (($34 | 0) >= 1) {
        HEAP32[$13 >> 2] = $28;
        $11 = $27;
        HEAP32[$10 + 4 >> 2] = $11;
        HEAP32[$10 + 16 >> 2] = 1;
        $18 = -1;
        break label$21;
       }
       if (($34 | 0) <= -1) {
        HEAP32[$13 + 16 >> 2] = -1;
        $8 = $13;
        $9 = $28;
        $7 = 0 - $9 | 0;
        HEAP32[$8 >> 2] = $7;
        $10 = $27;
        $12 = $10 + (0 < $9 >>> 0) | 0;
        $12 = 0 - $12 | 0;
        HEAP32[$8 + 4 >> 2] = $12;
        $18 = 1;
        break label$21;
       }
       $8 = $13;
       HEAP32[$8 >> 2] = 0;
       HEAP32[$8 + 4 >> 2] = 0;
       HEAP32[$8 + 16 >> 2] = 0;
       $18 = 0;
      }
      $12 = $22;
      $16 = $12;
      $8 = 0;
      $14 = $20;
      $11 = $14;
      label$24 : {
       if (($12 | 0) > 0 ? 1 : ($12 | 0) >= 0 ? $11 >>> 0 <= 0 ? 0 : 1 : 0) {
        break label$24;
       }
       $14 = 0;
       $16 = 0;
       $8 = -1;
       $9 = $20;
       $11 = $22;
       if (($11 | 0) > -1 ? 1 : ($11 | 0) >= -1 ? $9 >>> 0 <= 4294967295 ? 0 : 1 : 0) {
        break label$24;
       }
       HEAP32[$13 + 16 >> 2] = $18;
       $12 = $20;
       $10 = 0 - $12 | 0;
       $14 = $10;
       $7 = $22 + (0 < $12 >>> 0) | 0;
       $7 = 0 - $7 | 0;
       $16 = $7;
       $8 = 0;
      }
      $8 = $13;
      HEAP32[$8 + 8 >> 2] = $14;
      $7 = $16;
      HEAP32[$8 + 12 >> 2] = $7;
      if ((btConvexHullInternal__Rational64__compare_28btConvexHullInternal__Rational64_20const__29_20const($8 + 24 | 0, $8) | 0) <= -1) {
       break label$15;
      }
     }
     HEAP32[$3 >> 2] = ($1 | 0) == ($39 | 0) ? 0 : $15;
     $8 = $31 - $35 | 0;
     $7 = $8 >> 31;
     $1 = $7;
     $7 = $40;
     $9 = $8;
     $8 = $1;
     $8 = __wasm_i64_mul($42, $7, $9, $8);
     $11 = $8;
     $7 = i64toi32_i32$HIGH_BITS;
     $9 = $7;
     $8 = $32 - $23 | 0;
     $7 = $8 >> 31;
     $1 = $7;
     $7 = $41;
     $10 = $8;
     $8 = $1;
     $8 = __wasm_i64_mul($43, $7, $10, $8);
     $12 = $8;
     $7 = i64toi32_i32$HIGH_BITS;
     $8 = $7;
     $7 = $9;
     $10 = $7 + $8 | 0;
     $9 = $11;
     $11 = $12 + $9 | 0;
     if ($11 >>> 0 < $12 >>> 0) {
      $10 = $10 + 1 | 0;
     }
     $8 = $11;
     $7 = $10;
     $9 = $25 - $2 | 0;
     $10 = $9 >> 31;
     $1 = $10;
     $10 = $30;
     $11 = $9;
     $9 = $1;
     $9 = __wasm_i64_mul($29, $10, $11, $9);
     $12 = $9;
     $10 = i64toi32_i32$HIGH_BITS;
     $9 = $10;
     $10 = $7;
     $11 = $9 + $10 | 0;
     $7 = $8;
     $8 = $12 + $7 | 0;
     if ($8 >>> 0 < $12 >>> 0) {
      $11 = $11 + 1 | 0;
     }
     $20 = $8;
     $22 = $11;
     $24 = $23;
     $33 = $35;
     $21 = $2;
     continue;
    }
    $1 = HEAP32[$4 >> 2];
    if (!$1 | HEAP32[$1 + 12 >> 2] == ($6 | 0)) {
     break label$12;
    }
    $1 = HEAP32[HEAP32[$1 + 8 >> 2] >> 2];
    if (HEAP32[$1 + 20 >> 2] <= HEAP32[$0 + 100 >> 2]) {
     break label$12;
    }
    $2 = HEAP32[$1 + 12 >> 2];
    $15 = HEAP32[$2 + 92 >> 2];
    $23 = $15 - $31 | 0;
    $7 = $23;
    $11 = $7 >> 31;
    $14 = $7;
    $16 = $11;
    $7 = $52;
    $7 = __wasm_i64_mul($14, $11, $49, $7);
    $10 = $7;
    $11 = i64toi32_i32$HIGH_BITS;
    $9 = $11;
    $35 = HEAP32[$2 + 88 >> 2];
    $18 = $35 - $32 | 0;
    $7 = $18;
    $11 = $7 >> 31;
    $17 = $7;
    $19 = $11;
    $7 = $46;
    $7 = __wasm_i64_mul($18, $11, $45, $7);
    $12 = $7;
    $11 = i64toi32_i32$HIGH_BITS;
    $7 = $11;
    $11 = $9;
    $8 = $7 + $11 | 0;
    $9 = $12 + $10 | 0;
    if ($9 >>> 0 < $12 >>> 0) {
     $8 = $8 + 1 | 0;
    }
    $38 = $9;
    $37 = $8;
    $2 = HEAP32[$2 + 96 >> 2];
    $25 = $2 - $25 | 0;
    $10 = $25;
    $8 = $10 >> 31;
    $36 = $10;
    $26 = $8;
    $8 = $48;
    $10 = $26;
    $10 = __wasm_i64_mul($47, $8, $25, $10);
    $12 = $10;
    $7 = 0 - $10 | 0;
    $8 = i64toi32_i32$HIGH_BITS;
    $9 = $8 + (0 < $12 >>> 0) | 0;
    $9 = 0 - $9 | 0;
    $11 = $9;
    $8 = $38;
    $9 = $37;
    if (($7 | 0) != ($8 | 0) | ($9 | 0) != ($11 | 0)) {
     break label$12;
    }
    $9 = $15 - $33 | 0;
    $8 = $9 >> 31;
    $7 = $8;
    $8 = $40;
    $10 = $9;
    $9 = $7;
    $9 = __wasm_i64_mul($42, $8, $10, $9);
    $12 = $9;
    $8 = i64toi32_i32$HIGH_BITS;
    $10 = $8;
    $9 = $35 - $24 | 0;
    $8 = $9 >> 31;
    $7 = $8;
    $8 = $41;
    $11 = $9;
    $9 = $7;
    $9 = __wasm_i64_mul($43, $8, $11, $9);
    $11 = $9;
    $8 = i64toi32_i32$HIGH_BITS;
    $9 = $8;
    $8 = $10;
    $7 = $9 + $8 | 0;
    $10 = $12 + $11 | 0;
    if ($10 >>> 0 < $11 >>> 0) {
     $7 = $7 + 1 | 0;
    }
    $8 = $10;
    $9 = $7;
    $12 = $2 - $21 | 0;
    $7 = $12 >> 31;
    $2 = $7;
    $7 = $30;
    $10 = $12;
    $12 = $2;
    $12 = __wasm_i64_mul($29, $7, $10, $12);
    $11 = $12;
    $7 = i64toi32_i32$HIGH_BITS;
    $12 = $7;
    $7 = $9;
    $10 = $12 + $7 | 0;
    $9 = $8 + $11 | 0;
    if ($9 >>> 0 < $11 >>> 0) {
     $10 = $10 + 1 | 0;
    }
    $38 = $9;
    $37 = $10;
    $7 = $9;
    if (($10 | 0) < 0 ? 1 : ($10 | 0) <= 0 ? $7 >>> 0 >= 1 ? 0 : 1 : 0) {
     break label$12;
    }
    $2 = (Math_imul($23, $44) + Math_imul($18, $51) | 0) + Math_imul($25, $50) | 0;
    $7 = $16;
    $10 = $40;
    $10 = __wasm_i64_mul($14, $7, $42, $10);
    $11 = $10;
    $7 = i64toi32_i32$HIGH_BITS;
    $9 = $7;
    $7 = $19;
    $10 = $41;
    $10 = __wasm_i64_mul($17, $7, $43, $10);
    $8 = $10;
    $7 = i64toi32_i32$HIGH_BITS;
    $10 = $7;
    $7 = $9;
    $9 = $7 + $10 | 0;
    $12 = $8 + $11 | 0;
    if ($12 >>> 0 < $8 >>> 0) {
     $9 = $9 + 1 | 0;
    }
    $10 = $12;
    $7 = $9;
    $9 = $30;
    $11 = $26;
    $11 = __wasm_i64_mul($29, $9, $36, $11);
    $8 = $11;
    $9 = i64toi32_i32$HIGH_BITS;
    $11 = $9;
    $9 = $7;
    $12 = $9 + $11 | 0;
    $7 = $10;
    $10 = $7 + $8 | 0;
    if ($10 >>> 0 < $8 >>> 0) {
     $12 = $12 + 1 | 0;
    }
    $14 = $10;
    $16 = $12;
    label$25 : {
     if (!($12 | $10)) {
      if (($2 | 0) < 0) {
       break label$25;
      }
      break label$12;
     }
     $9 = $14;
     if (($12 | 0) > -1 ? 1 : ($16 | 0) >= -1 ? $9 >>> 0 <= 4294967295 ? 0 : 1 : 0) {
      break label$12;
     }
     $12 = $2;
     $9 = $12 >> 31;
     $17 = $12;
     $19 = $9;
     $9 = $13;
     label$27 : {
      if (($12 | 0) >= 1) {
       $12 = $13;
       HEAP32[$12 + 24 >> 2] = $17;
       HEAP32[$12 + 28 >> 2] = $19;
       HEAP32[$12 + 40 >> 2] = 1;
       $2 = -1;
       break label$27;
      }
      if (($2 | 0) <= -1) {
       HEAP32[$13 + 40 >> 2] = -1;
       $8 = $13;
       $7 = $17;
       $11 = 0 - $7 | 0;
       HEAP32[$8 + 24 >> 2] = $11;
       $12 = $19;
       $10 = $12 + (0 < $7 >>> 0) | 0;
       $10 = 0 - $10 | 0;
       HEAP32[$8 + 28 >> 2] = $10;
       $2 = 1;
       break label$27;
      }
      $8 = $13;
      HEAP32[$8 + 24 >> 2] = 0;
      HEAP32[$8 + 28 >> 2] = 0;
      HEAP32[$8 + 40 >> 2] = 0;
      $2 = 0;
     }
     HEAP32[$9 + 40 >> 2] = $2;
     $9 = $13;
     $7 = $14;
     $12 = 0 - $7 | 0;
     HEAP32[$9 + 32 >> 2] = $12;
     $8 = $16;
     $11 = $8 + (0 < $7 >>> 0) | 0;
     $11 = 0 - $11 | 0;
     HEAP32[$9 + 36 >> 2] = $11;
     label$30 : {
      if (($34 | 0) >= 1) {
       HEAP32[$13 >> 2] = $28;
       $11 = $27;
       HEAP32[$9 + 4 >> 2] = $11;
       HEAP32[$9 + 16 >> 2] = 1;
       $2 = -1;
       break label$30;
      }
      if (($34 | 0) <= -1) {
       HEAP32[$13 + 16 >> 2] = -1;
       $10 = $13;
       $7 = $28;
       $8 = 0 - $7 | 0;
       HEAP32[$10 >> 2] = $8;
       $9 = $27;
       $12 = $9 + (0 < $7 >>> 0) | 0;
       $12 = 0 - $12 | 0;
       HEAP32[$10 + 4 >> 2] = $12;
       $2 = 1;
       break label$30;
      }
      $10 = $13;
      HEAP32[$10 >> 2] = 0;
      HEAP32[$10 + 4 >> 2] = 0;
      HEAP32[$10 + 16 >> 2] = 0;
      $2 = 0;
     }
     $10 = $13;
     $11 = $20;
     $12 = $22;
     $16 = ($12 | 0) > 0 ? 1 : ($12 | 0) >= 0 ? $11 >>> 0 <= 0 ? 0 : 1 : 0;
     $9 = $11;
     $11 = $12;
     $8 = $11;
     $7 = 0;
     label$33 : {
      if ($16) {
       break label$33;
      }
      $7 = $20;
      $11 = ($11 | 0) > -1 ? 1 : ($22 | 0) >= -1 ? $7 >>> 0 <= 4294967295 ? 0 : 1 : 0;
      $9 = 0;
      $8 = 0;
      $7 = 0;
      if ($11) {
       break label$33;
      }
      HEAP32[$13 + 16 >> 2] = $2;
      $12 = $20;
      $9 = 0 - $12 | 0;
      $8 = $22 + (0 < $12 >>> 0) | 0;
      $8 = 0 - $8 | 0;
      $7 = 0;
     }
     $14 = $9;
     HEAP32[$10 + 8 >> 2] = $14;
     HEAP32[$10 + 12 >> 2] = $8;
     if ((btConvexHullInternal__Rational64__compare_28btConvexHullInternal__Rational64_20const__29_20const($13 + 24 | 0, $13) | 0) <= 0) {
      break label$12;
     }
    }
    HEAP32[$4 >> 2] = $1;
    $1 = HEAP32[$1 + 12 >> 2];
    $25 = HEAP32[$1 + 96 >> 2];
    $31 = HEAP32[$1 + 92 >> 2];
    $32 = HEAP32[$1 + 88 >> 2];
    $20 = $38;
    $8 = $37;
    $22 = $8;
    continue;
   }
  }
  $7 = $20;
  $8 = $22;
  if (($8 | 0) > -1 ? 1 : ($8 | 0) >= -1 ? $7 >>> 0 <= 4294967295 ? 0 : 1 : 0) {
   break label$12;
  }
  while (1) {
   $23 = (Math_imul($31 - $33 | 0, $44) + Math_imul($32 - $24 | 0, $51) | 0) + Math_imul($25 - $21 | 0, $50) | 0;
   $8 = $23;
   $7 = $8 >> 31;
   $38 = $8;
   $37 = $7;
   label$35 : {
    if (!$1 | HEAP32[$1 + 12 >> 2] == ($6 | 0)) {
     break label$35;
    }
    $2 = HEAP32[HEAP32[$1 + 4 >> 2] + 8 >> 2];
    if (HEAP32[$2 + 20 >> 2] <= HEAP32[$0 + 100 >> 2]) {
     break label$35;
    }
    $15 = HEAP32[$2 + 12 >> 2];
    $17 = HEAP32[$15 + 92 >> 2];
    $18 = $17 - $31 | 0;
    $19 = HEAP32[$15 + 88 >> 2];
    $34 = $19 - $32 | 0;
    $39 = HEAP32[$15 + 96 >> 2];
    $15 = $39 - $25 | 0;
    $26 = (Math_imul($44, $18) + Math_imul($34, $51) | 0) + Math_imul($50, $15) | 0;
    $8 = $18;
    $7 = $8 >> 31;
    $8 = $7;
    $7 = $40;
    $8 = __wasm_i64_mul($42, $7, $18, $8);
    $12 = $8;
    $7 = i64toi32_i32$HIGH_BITS;
    $9 = $7;
    $8 = $34;
    $7 = $8 >> 31;
    $8 = $7;
    $7 = $41;
    $8 = __wasm_i64_mul($43, $7, $34, $8);
    $10 = $8;
    $7 = i64toi32_i32$HIGH_BITS;
    $8 = $7;
    $7 = $9;
    $9 = $7 + $8 | 0;
    $11 = $12 + $10 | 0;
    if ($11 >>> 0 < $10 >>> 0) {
     $9 = $9 + 1 | 0;
    }
    $8 = $11;
    $7 = $9;
    $12 = $15;
    $9 = $12 >> 31;
    $12 = $9;
    $9 = $30;
    $12 = __wasm_i64_mul($29, $9, $15, $12);
    $10 = $12;
    $9 = i64toi32_i32$HIGH_BITS;
    $12 = $9;
    $9 = $7;
    $11 = $12 + $9 | 0;
    $7 = $8;
    $8 = $7 + $10 | 0;
    if ($8 >>> 0 < $10 >>> 0) {
     $11 = $11 + 1 | 0;
    }
    $14 = $8;
    $16 = $11;
    label$36 : {
     if (!($11 | $8)) {
      if (($26 | 0) > 0) {
       break label$36;
      }
      break label$35;
     }
     $9 = $14;
     if (($11 | 0) > -1 ? 1 : ($16 | 0) >= -1 ? $9 >>> 0 <= 4294967295 ? 0 : 1 : 0) {
      break label$35;
     }
     $11 = $26;
     $9 = $11 >> 31;
     $28 = $11;
     $27 = $9;
     $9 = $13;
     label$38 : {
      if (($11 | 0) >= 1) {
       $11 = $13;
       HEAP32[$11 + 24 >> 2] = $28;
       HEAP32[$11 + 28 >> 2] = $27;
       HEAP32[$11 + 40 >> 2] = 1;
       $15 = -1;
       break label$38;
      }
      if (($26 | 0) <= -1) {
       HEAP32[$13 + 40 >> 2] = -1;
       $10 = $13;
       $7 = $28;
       $12 = 0 - $7 | 0;
       HEAP32[$10 + 24 >> 2] = $12;
       $11 = $27;
       $8 = $11 + (0 < $7 >>> 0) | 0;
       $8 = 0 - $8 | 0;
       HEAP32[$10 + 28 >> 2] = $8;
       $15 = 1;
       break label$38;
      }
      $10 = $13;
      HEAP32[$10 + 24 >> 2] = 0;
      HEAP32[$10 + 28 >> 2] = 0;
      HEAP32[$10 + 40 >> 2] = 0;
      $15 = 0;
     }
     HEAP32[$9 + 40 >> 2] = $15;
     $9 = $13;
     $7 = $14;
     $11 = 0 - $7 | 0;
     HEAP32[$9 + 32 >> 2] = $11;
     $10 = $16;
     $12 = $10 + (0 < $7 >>> 0) | 0;
     $12 = 0 - $12 | 0;
     HEAP32[$9 + 36 >> 2] = $12;
     label$41 : {
      if (($23 | 0) >= 1) {
       HEAP32[$13 >> 2] = $38;
       $12 = $37;
       HEAP32[$9 + 4 >> 2] = $12;
       HEAP32[$9 + 16 >> 2] = 1;
       $15 = -1;
       break label$41;
      }
      if (($23 | 0) <= -1) {
       HEAP32[$13 + 16 >> 2] = -1;
       $8 = $13;
       $7 = $38;
       $10 = 0 - $7 | 0;
       HEAP32[$8 >> 2] = $10;
       $9 = $37;
       $11 = $9 + (0 < $7 >>> 0) | 0;
       $11 = 0 - $11 | 0;
       HEAP32[$8 + 4 >> 2] = $11;
       $15 = 1;
       break label$41;
      }
      $8 = $13;
      HEAP32[$8 >> 2] = 0;
      HEAP32[$8 + 4 >> 2] = 0;
      HEAP32[$8 + 16 >> 2] = 0;
      $15 = 0;
     }
     $11 = $22;
     $16 = $11;
     $8 = 0;
     $14 = $20;
     $12 = $14;
     label$44 : {
      if (($11 | 0) > 0 ? 1 : ($11 | 0) >= 0 ? $12 >>> 0 <= 0 ? 0 : 1 : 0) {
       break label$44;
      }
      $14 = 0;
      $16 = 0;
      $8 = -1;
      $7 = $20;
      $12 = $22;
      if (($12 | 0) > -1 ? 1 : ($12 | 0) >= -1 ? $7 >>> 0 <= 4294967295 ? 0 : 1 : 0) {
       break label$44;
      }
      HEAP32[$13 + 16 >> 2] = $15;
      $11 = $20;
      $9 = 0 - $11 | 0;
      $14 = $9;
      $10 = $22 + (0 < $11 >>> 0) | 0;
      $10 = 0 - $10 | 0;
      $16 = $10;
      $8 = 0;
     }
     $8 = $13;
     HEAP32[$8 + 8 >> 2] = $14;
     $10 = $16;
     HEAP32[$8 + 12 >> 2] = $10;
     if ((btConvexHullInternal__Rational64__compare_28btConvexHullInternal__Rational64_20const__29_20const($8 + 24 | 0, $8) | 0) >= 1) {
      break label$35;
     }
    }
    $1 = ($1 | 0) == ($35 | 0) ? 0 : $2;
    HEAP32[$4 >> 2] = $1;
    $8 = $17 - $33 | 0;
    $10 = $8 >> 31;
    $2 = $10;
    $10 = $40;
    $7 = $8;
    $8 = $2;
    $8 = __wasm_i64_mul($42, $10, $7, $8);
    $12 = $8;
    $10 = i64toi32_i32$HIGH_BITS;
    $7 = $10;
    $8 = $19 - $24 | 0;
    $10 = $8 >> 31;
    $2 = $10;
    $10 = $41;
    $9 = $8;
    $8 = $2;
    $8 = __wasm_i64_mul($43, $10, $9, $8);
    $11 = $8;
    $10 = i64toi32_i32$HIGH_BITS;
    $8 = $10;
    $10 = $7;
    $9 = $8 + $10 | 0;
    $7 = $12;
    $12 = $7 + $11 | 0;
    if ($12 >>> 0 < $11 >>> 0) {
     $9 = $9 + 1 | 0;
    }
    $10 = $12;
    $8 = $9;
    $7 = $39 - $21 | 0;
    $9 = $7 >> 31;
    $2 = $9;
    $9 = $30;
    $11 = $7;
    $7 = $2;
    $7 = __wasm_i64_mul($29, $9, $11, $7);
    $11 = $7;
    $9 = i64toi32_i32$HIGH_BITS;
    $7 = $9;
    $9 = $8;
    $12 = $7 + $9 | 0;
    $8 = $11 + $10 | 0;
    if ($8 >>> 0 < $11 >>> 0) {
     $12 = $12 + 1 | 0;
    }
    $20 = $8;
    $22 = $12;
    $32 = $19;
    $31 = $17;
    $25 = $39;
    continue;
   }
   $1 = HEAP32[$3 >> 2];
   if (!$1 | HEAP32[$1 + 12 >> 2] == ($5 | 0)) {
    break label$12;
   }
   $1 = HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2];
   if (HEAP32[$1 + 20 >> 2] <= HEAP32[$0 + 100 >> 2]) {
    break label$12;
   }
   $2 = HEAP32[$1 + 12 >> 2];
   $15 = HEAP32[$2 + 92 >> 2];
   $18 = $15 - $33 | 0;
   $10 = $18;
   $12 = $10 >> 31;
   $14 = $10;
   $16 = $12;
   $10 = $52;
   $10 = __wasm_i64_mul($14, $12, $49, $10);
   $9 = $10;
   $12 = i64toi32_i32$HIGH_BITS;
   $7 = $12;
   $33 = HEAP32[$2 + 88 >> 2];
   $34 = $33 - $24 | 0;
   $10 = $34;
   $12 = $10 >> 31;
   $28 = $10;
   $27 = $12;
   $10 = $46;
   $10 = __wasm_i64_mul($28, $12, $45, $10);
   $11 = $10;
   $12 = i64toi32_i32$HIGH_BITS;
   $10 = $12;
   $12 = $7;
   $8 = $12 + $10 | 0;
   $7 = $9 + $11 | 0;
   if ($7 >>> 0 < $11 >>> 0) {
    $8 = $8 + 1 | 0;
   }
   $12 = $7;
   $26 = $8;
   $24 = HEAP32[$2 + 96 >> 2];
   $21 = $24 - $21 | 0;
   $9 = $21;
   $8 = $9 >> 31;
   $17 = $9;
   $19 = $8;
   $8 = $48;
   $9 = $19;
   $9 = __wasm_i64_mul($47, $8, $21, $9);
   $11 = $9;
   $10 = 0 - $9 | 0;
   $8 = i64toi32_i32$HIGH_BITS;
   $7 = $8 + (0 < $11 >>> 0) | 0;
   $7 = 0 - $7 | 0;
   $8 = $12;
   $11 = $10;
   $12 = $7;
   $7 = $26;
   if (($8 | 0) != ($11 | 0) | ($12 | 0) != ($7 | 0)) {
    break label$12;
   }
   $7 = $31 - $15 | 0;
   $8 = $7 >> 31;
   $2 = $8;
   $8 = $40;
   $9 = $7;
   $7 = $2;
   $7 = __wasm_i64_mul($42, $8, $9, $7);
   $11 = $7;
   $8 = i64toi32_i32$HIGH_BITS;
   $9 = $8;
   $7 = $32 - $33 | 0;
   $8 = $7 >> 31;
   $2 = $8;
   $8 = $41;
   $10 = $7;
   $7 = $2;
   $7 = __wasm_i64_mul($43, $8, $10, $7);
   $12 = $7;
   $8 = i64toi32_i32$HIGH_BITS;
   $7 = $8;
   $8 = $9;
   $10 = $7 + $8 | 0;
   $9 = $12 + $11 | 0;
   if ($9 >>> 0 < $12 >>> 0) {
    $10 = $10 + 1 | 0;
   }
   $8 = $9;
   $7 = $10;
   $11 = $25 - $24 | 0;
   $10 = $11 >> 31;
   $2 = $10;
   $10 = $30;
   $9 = $11;
   $11 = $2;
   $11 = __wasm_i64_mul($29, $10, $9, $11);
   $12 = $11;
   $10 = i64toi32_i32$HIGH_BITS;
   $11 = $10;
   $10 = $7;
   $9 = $11 + $10 | 0;
   $7 = $12 + $8 | 0;
   if ($7 >>> 0 < $12 >>> 0) {
    $9 = $9 + 1 | 0;
   }
   $36 = $7;
   $26 = $9;
   if (($9 | 0) > -1 ? 1 : ($9 | 0) >= -1 ? $7 >>> 0 <= 4294967295 ? 0 : 1 : 0) {
    break label$12;
   }
   $21 = (Math_imul($18, $44) + Math_imul($51, $34) | 0) + Math_imul($21, $50) | 0;
   $10 = $16;
   $9 = $40;
   $9 = __wasm_i64_mul($14, $10, $42, $9);
   $12 = $9;
   $10 = i64toi32_i32$HIGH_BITS;
   $2 = $10;
   $10 = $27;
   $9 = $41;
   $9 = __wasm_i64_mul($28, $10, $43, $9);
   $8 = $9;
   $10 = i64toi32_i32$HIGH_BITS;
   $9 = $10;
   $10 = $2;
   $7 = $9 + $10 | 0;
   $11 = $12 + $8 | 0;
   if ($11 >>> 0 < $8 >>> 0) {
    $7 = $7 + 1 | 0;
   }
   $10 = $11;
   $2 = $7;
   $7 = $19;
   $12 = $30;
   $12 = __wasm_i64_mul($17, $7, $29, $12);
   $8 = $12;
   $7 = i64toi32_i32$HIGH_BITS;
   $12 = $7;
   $7 = $2;
   $11 = $12 + $7 | 0;
   $9 = $8 + $10 | 0;
   if ($9 >>> 0 < $8 >>> 0) {
    $11 = $11 + 1 | 0;
   }
   $14 = $9;
   $16 = $11;
   label$45 : {
    if (!($11 | $9)) {
     if (($21 | 0) <= 0) {
      break label$12;
     }
     break label$45;
    }
    $7 = $14;
    if (($11 | 0) > -1 ? 1 : ($16 | 0) >= -1 ? $7 >>> 0 <= 4294967295 ? 0 : 1 : 0) {
     break label$12;
    }
    $11 = $21;
    $7 = $11 >> 31;
    $28 = $11;
    $27 = $7;
    $2 = $13;
    label$47 : {
     if (($11 | 0) >= 1) {
      $11 = $13;
      HEAP32[$11 + 24 >> 2] = $28;
      HEAP32[$11 + 28 >> 2] = $27;
      HEAP32[$11 + 40 >> 2] = 1;
      $21 = -1;
      break label$47;
     }
     if (($21 | 0) <= -1) {
      HEAP32[$13 + 40 >> 2] = -1;
      $8 = $13;
      $10 = $28;
      $12 = 0 - $10 | 0;
      HEAP32[$8 + 24 >> 2] = $12;
      $11 = $27;
      $9 = $11 + (0 < $10 >>> 0) | 0;
      $9 = 0 - $9 | 0;
      HEAP32[$8 + 28 >> 2] = $9;
      $21 = 1;
      break label$47;
     }
     $8 = $13;
     HEAP32[$8 + 24 >> 2] = 0;
     HEAP32[$8 + 28 >> 2] = 0;
     HEAP32[$8 + 40 >> 2] = 0;
     $21 = 0;
    }
    HEAP32[$2 + 40 >> 2] = $21;
    $7 = $13;
    $10 = $14;
    $11 = 0 - $10 | 0;
    HEAP32[$7 + 32 >> 2] = $11;
    $8 = $16;
    $12 = $8 + (0 < $10 >>> 0) | 0;
    $12 = 0 - $12 | 0;
    HEAP32[$7 + 36 >> 2] = $12;
    label$50 : {
     if (($23 | 0) >= 1) {
      HEAP32[$13 >> 2] = $38;
      $12 = $37;
      HEAP32[$7 + 4 >> 2] = $12;
      HEAP32[$7 + 16 >> 2] = 1;
      $21 = -1;
      break label$50;
     }
     if (($23 | 0) <= -1) {
      HEAP32[$13 + 16 >> 2] = -1;
      $9 = $13;
      $10 = $38;
      $8 = 0 - $10 | 0;
      HEAP32[$9 >> 2] = $8;
      $7 = $37;
      $11 = $7 + (0 < $10 >>> 0) | 0;
      $11 = 0 - $11 | 0;
      HEAP32[$9 + 4 >> 2] = $11;
      $21 = 1;
      break label$50;
     }
     $9 = $13;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     HEAP32[$9 + 16 >> 2] = 0;
     $21 = 0;
    }
    $2 = $13;
    $12 = $20;
    $11 = $22;
    $10 = ($11 | 0) > 0 ? 1 : ($11 | 0) >= 0 ? $12 >>> 0 <= 0 ? 0 : 1 : 0;
    $7 = $12;
    $12 = $11;
    $8 = $11;
    $9 = 0;
    label$53 : {
     if ($10) {
      break label$53;
     }
     $10 = $20;
     $10 = ($12 | 0) > -1 ? 1 : ($22 | 0) >= -1 ? $10 >>> 0 <= 4294967295 ? 0 : 1 : 0;
     $7 = 0;
     $8 = 0;
     $9 = -1;
     if ($10) {
      break label$53;
     }
     HEAP32[$13 + 16 >> 2] = $21;
     $11 = $20;
     $7 = 0 - $11 | 0;
     $8 = $22 + (0 < $11 >>> 0) | 0;
     $8 = 0 - $8 | 0;
     $9 = 0;
    }
    $9 = $2;
    $14 = $7;
    HEAP32[$9 + 8 >> 2] = $14;
    HEAP32[$9 + 12 >> 2] = $8;
    if ((btConvexHullInternal__Rational64__compare_28btConvexHullInternal__Rational64_20const__29_20const($13 + 24 | 0, $13) | 0) >= 0) {
     break label$12;
    }
   }
   HEAP32[$3 >> 2] = $1;
   $24 = HEAP32[$1 + 12 >> 2];
   $21 = HEAP32[$24 + 96 >> 2];
   $33 = HEAP32[$24 + 92 >> 2];
   $1 = HEAP32[$4 >> 2];
   $24 = HEAP32[$24 + 88 >> 2];
   $20 = $36;
   $8 = $26;
   $22 = $8;
   continue;
  }
 }
 $0 = $13 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function dBoxBox2_28btVector3_20const__2c_20float_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_20const__2c_20btVector3_20const__2c_20btVector3__2c_20float__2c_20int__2c_20int_2c_20dContactGeom__2c_20int_2c_20btDiscreteCollisionDetectorInterface__Result__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) {
 var $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = 0, $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = 0, $37 = 0, $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = 0, $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = Math_fround(0), $50 = Math_fround(0), $51 = Math_fround(0), $52 = Math_fround(0), $53 = Math_fround(0), $54 = Math_fround(0), $55 = Math_fround(0), $56 = 0, $57 = 0, $58 = Math_fround(0), $59 = Math_fround(0), $60 = Math_fround(0), $61 = Math_fround(0), $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = Math_fround(0), $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = Math_fround(0);
 $10 = global$0 - 384 | 0;
 $11 = $10;
 if ($10 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $11;
 $16 = HEAPF32[$1 + 36 >> 2];
 $21 = HEAPF32[$1 + 4 >> 2];
 $17 = HEAPF32[$1 + 20 >> 2];
 $23 = HEAPF32[$1 + 40 >> 2];
 $30 = HEAPF32[$1 + 8 >> 2];
 $19 = HEAPF32[$1 + 24 >> 2];
 $29 = HEAPF32[$0 + 8 >> 2];
 $26 = HEAPF32[$3 + 8 >> 2];
 $18 = HEAPF32[$0 >> 2];
 $20 = HEAPF32[$3 >> 2];
 $38 = HEAPF32[$0 + 4 >> 2];
 $39 = HEAPF32[$3 + 4 >> 2];
 $13 = HEAPF32[$1 + 32 >> 2];
 $14 = HEAPF32[$1 >> 2];
 $15 = HEAPF32[$1 + 16 >> 2];
 $27 = Math_fround(HEAPF32[$2 >> 2] * Math_fround(.5));
 HEAPF32[$10 + 372 >> 2] = $27;
 $40 = Math_fround(HEAPF32[$2 + 4 >> 2] * Math_fround(.5));
 HEAPF32[$10 + 376 >> 2] = $40;
 $41 = Math_fround(HEAPF32[$2 + 8 >> 2] * Math_fround(.5));
 HEAPF32[$10 + 380 >> 2] = $41;
 $25 = Math_fround(HEAPF32[$5 >> 2] * Math_fround(.5));
 HEAPF32[$10 + 360 >> 2] = $25;
 $32 = Math_fround(HEAPF32[$5 + 4 >> 2] * Math_fround(.5));
 HEAPF32[$10 + 364 >> 2] = $32;
 $22 = Math_fround(HEAPF32[$5 + 8 >> 2] * Math_fround(.5));
 HEAPF32[$10 + 368 >> 2] = $22;
 $5 = 0;
 $18 = Math_fround($20 - $18);
 $20 = Math_fround($39 - $38);
 $29 = Math_fround($26 - $29);
 $44 = Math_fround(Math_fround(Math_fround($14 * $18) + Math_fround($15 * $20)) + Math_fround($13 * $29));
 $26 = HEAPF32[$4 >> 2];
 $38 = HEAPF32[$4 + 16 >> 2];
 $39 = HEAPF32[$4 + 32 >> 2];
 $48 = Math_fround(Math_fround(Math_fround($14 * $26) + Math_fround($15 * $38)) + Math_fround($13 * $39));
 $45 = Math_fround(Math_abs($48));
 $33 = HEAPF32[$4 + 4 >> 2];
 $34 = HEAPF32[$4 + 20 >> 2];
 $28 = HEAPF32[$4 + 36 >> 2];
 $49 = Math_fround(Math_fround(Math_fround($14 * $33) + Math_fround($15 * $34)) + Math_fround($13 * $28));
 $58 = Math_fround(Math_abs($49));
 $35 = HEAPF32[$4 + 8 >> 2];
 $31 = HEAPF32[$4 + 24 >> 2];
 $42 = Math_fround(Math_fround($14 * $35) + Math_fround($15 * $31));
 $15 = HEAPF32[$4 + 40 >> 2];
 $50 = Math_fround($42 + Math_fround($13 * $15));
 $59 = Math_fround(Math_abs($50));
 $13 = Math_fround(Math_fround(Math_abs($44)) - Math_fround(Math_fround(Math_fround($27 + Math_fround($25 * $45)) + Math_fround($32 * $58)) + Math_fround($22 * $59)));
 label$2 : {
  if ($13 > Math_fround(0)) {
   break label$2;
  }
  $46 = Math_fround(Math_fround(Math_fround($18 * $21) + Math_fround($20 * $17)) + Math_fround($29 * $16));
  $51 = Math_fround(Math_fround(Math_fround($21 * $35) + Math_fround($17 * $31)) + Math_fround($16 * $15));
  $60 = Math_fround(Math_abs($51));
  $52 = Math_fround(Math_fround(Math_fround($21 * $33) + Math_fround($17 * $34)) + Math_fround($16 * $28));
  $42 = Math_fround(Math_abs($52));
  $53 = Math_fround(Math_fround(Math_fround($21 * $26) + Math_fround($17 * $38)) + Math_fround($16 * $39));
  $17 = Math_fround(Math_abs($53));
  $16 = Math_fround(-3.4028234663852886e+38);
  $2 = 0;
  if (!!($13 > Math_fround(-3.4028234663852886e+38))) {
   $36 = $44 < Math_fround(0);
   $16 = $13;
   $24 = $1;
   $2 = 1;
  }
  $13 = Math_fround(Math_fround(Math_abs($46)) - Math_fround(Math_fround(Math_fround($40 + Math_fround($25 * $17)) + Math_fround($32 * $42)) + Math_fround($22 * $60)));
  if ($13 > Math_fround(0)) {
   break label$2;
  }
  $47 = Math_fround(Math_fround(Math_fround($18 * $30) + Math_fround($20 * $19)) + Math_fround($29 * $23));
  $54 = Math_fround(Math_fround(Math_fround($30 * $35) + Math_fround($19 * $31)) + Math_fround($23 * $15));
  $66 = Math_fround(Math_abs($54));
  $55 = Math_fround(Math_fround(Math_fround($30 * $33) + Math_fround($19 * $34)) + Math_fround($23 * $28));
  $61 = Math_fround(Math_abs($55));
  $19 = Math_fround(Math_fround(Math_fround($30 * $26) + Math_fround($19 * $38)) + Math_fround($23 * $39));
  $23 = Math_fround(Math_abs($19));
  if (!!($13 > $16)) {
   $24 = $1 + 4 | 0;
   $36 = $46 < Math_fround(0);
   $16 = $13;
   $2 = 2;
  }
  $13 = Math_fround(Math_fround(Math_abs($47)) - Math_fround(Math_fround(Math_fround($41 + Math_fround($25 * $23)) + Math_fround($32 * $61)) + Math_fround($22 * $66)));
  if ($13 > Math_fround(0)) {
   break label$2;
  }
  if (!!($13 > $16)) {
   $24 = $1 + 8 | 0;
   $36 = $47 < Math_fround(0);
   $16 = $13;
   $2 = 3;
  }
  $26 = Math_fround(Math_fround(Math_fround($18 * $26) + Math_fround($20 * $38)) + Math_fround($29 * $39));
  $13 = Math_fround(Math_fround(Math_abs($26)) - Math_fround($25 + Math_fround(Math_fround($41 * $23) + Math_fround(Math_fround($27 * $45) + Math_fround($40 * $17)))));
  if ($13 > Math_fround(0)) {
   break label$2;
  }
  if (!!($13 > $16)) {
   $36 = $26 < Math_fround(0);
   $16 = $13;
   $24 = $4;
   $2 = 4;
  }
  $26 = Math_fround(Math_fround(Math_fround($18 * $33) + Math_fround($20 * $34)) + Math_fround($29 * $28));
  $13 = Math_fround(Math_fround(Math_abs($26)) - Math_fround($32 + Math_fround(Math_fround($41 * $61) + Math_fround(Math_fround($27 * $58) + Math_fround($40 * $42)))));
  if ($13 > Math_fround(0)) {
   break label$2;
  }
  if (!!($13 > $16)) {
   $24 = $4 + 4 | 0;
   $36 = $26 < Math_fround(0);
   $16 = $13;
   $2 = 5;
  }
  $15 = Math_fround(Math_fround(Math_fround($18 * $35) + Math_fround($20 * $31)) + Math_fround($29 * $15));
  $13 = Math_fround(Math_fround(Math_abs($15)) - Math_fround($22 + Math_fround(Math_fround($41 * $66) + Math_fround(Math_fround($27 * $59) + Math_fround($40 * $60)))));
  if ($13 > Math_fround(0)) {
   break label$2;
  }
  if (!!($13 > $16)) {
   $24 = $4 + 8 | 0;
   $36 = $15 < Math_fround(0);
   $16 = $13;
   $2 = 6;
  }
  $18 = Math_fround(Math_fround($47 * $53) - Math_fround($46 * $19));
  $29 = Math_fround($58 + Math_fround(9999999747378752e-21));
  $26 = Math_fround($23 + Math_fround(9999999747378752e-21));
  $38 = Math_fround($17 + Math_fround(9999999747378752e-21));
  $13 = Math_fround($59 + Math_fround(9999999747378752e-21));
  $17 = Math_fround(Math_fround(Math_abs($18)) - Math_fround(Math_fround($22 * $29) + Math_fround(Math_fround(Math_fround($40 * $26) + Math_fround($41 * $38)) + Math_fround($32 * $13))));
  if ($17 > Math_fround(1.1920928955078125e-7)) {
   break label$2;
  }
  $39 = Math_fround($61 + Math_fround(9999999747378752e-21));
  $23 = Math_fround($42 + Math_fround(9999999747378752e-21));
  $15 = Math_fround($45 + Math_fround(9999999747378752e-21));
  $33 = Math_fround(0);
  $58 = Math_fround($53 * $53);
  $35 = Math_fround(Math_fround($19 * $19) + Math_fround(0));
  $20 = Math_fround(Math_sqrt(Math_fround($58 + $35)));
  label$9 : {
   if (!($20 > Math_fround(1.1920928955078125e-7))) {
    $28 = Math_fround(0);
    break label$9;
   }
   $28 = Math_fround(0);
   $17 = Math_fround($17 / $20);
   if (!(Math_fround($17 * Math_fround(1.0499999523162842)) > $16)) {
    break label$9;
   }
   $36 = $18 < Math_fround(0);
   $33 = Math_fround(Math_fround(0) / $20);
   $24 = 0;
   $2 = 7;
   $16 = $17;
   $72 = Math_fround(Math_fround(-$19) / $20);
   $28 = Math_fround($53 / $20);
  }
  $34 = $72;
  $20 = Math_fround(Math_fround($47 * $52) - Math_fround($46 * $55));
  $18 = Math_fround(Math_fround(Math_abs($20)) - Math_fround(Math_fround($22 * $15) + Math_fround(Math_fround(Math_fround($40 * $39) + Math_fround($41 * $23)) + Math_fround($25 * $13))));
  if ($18 > Math_fround(1.1920928955078125e-7)) {
   break label$2;
  }
  $45 = Math_fround($66 + Math_fround(9999999747378752e-21));
  $17 = Math_fround($60 + Math_fround(9999999747378752e-21));
  $59 = Math_fround($52 * $52);
  $42 = Math_fround(Math_fround($55 * $55) + Math_fround(0));
  $31 = Math_fround(Math_sqrt(Math_fround($59 + $42)));
  label$11 : {
   if (!($31 > Math_fround(1.1920928955078125e-7))) {
    break label$11;
   }
   $18 = Math_fround($18 / $31);
   if (!(Math_fround($18 * Math_fround(1.0499999523162842)) > $16)) {
    break label$11;
   }
   $36 = $20 < Math_fround(0);
   $28 = Math_fround($52 / $31);
   $34 = Math_fround(Math_fround(-$55) / $31);
   $33 = Math_fround(Math_fround(0) / $31);
   $24 = 0;
   $2 = 8;
   $16 = $18;
  }
  $20 = Math_fround(Math_fround($47 * $51) - Math_fround($46 * $54));
  $18 = Math_fround(Math_fround(Math_abs($20)) - Math_fround(Math_fround($32 * $15) + Math_fround(Math_fround($25 * $29) + Math_fround(Math_fround($40 * $45) + Math_fround($41 * $17)))));
  if ($18 > Math_fround(1.1920928955078125e-7)) {
   break label$2;
  }
  $61 = Math_fround($51 * $51);
  $60 = Math_fround(Math_fround($54 * $54) + Math_fround(0));
  $31 = Math_fround(Math_sqrt(Math_fround($61 + $60)));
  label$12 : {
   if (!($31 > Math_fround(1.1920928955078125e-7))) {
    break label$12;
   }
   $18 = Math_fround($18 / $31);
   if (!(Math_fround($18 * Math_fround(1.0499999523162842)) > $16)) {
    break label$12;
   }
   $36 = $20 < Math_fround(0);
   $28 = Math_fround($51 / $31);
   $34 = Math_fround(Math_fround(-$54) / $31);
   $33 = Math_fround(Math_fround(0) / $31);
   $24 = 0;
   $2 = 9;
   $16 = $18;
  }
  $20 = Math_fround(Math_fround($44 * $19) - Math_fround($47 * $48));
  $18 = Math_fround(Math_fround(Math_abs($20)) - Math_fround(Math_fround($22 * $23) + Math_fround(Math_fround(Math_fround($27 * $26) + Math_fround($41 * $15)) + Math_fround($32 * $17))));
  if ($18 > Math_fround(1.1920928955078125e-7)) {
   break label$2;
  }
  $31 = Math_fround($48 * $48);
  $35 = Math_fround(Math_sqrt(Math_fround($31 + $35)));
  label$13 : {
   if (!($35 > Math_fround(1.1920928955078125e-7))) {
    break label$13;
   }
   $18 = Math_fround($18 / $35);
   if (!(Math_fround($18 * Math_fround(1.0499999523162842)) > $16)) {
    break label$13;
   }
   $36 = $20 < Math_fround(0);
   $28 = Math_fround(Math_fround(-$48) / $35);
   $34 = Math_fround(Math_fround(0) / $35);
   $33 = Math_fround($19 / $35);
   $24 = 0;
   $2 = 10;
   $16 = $18;
  }
  $18 = Math_fround(Math_fround($44 * $55) - Math_fround($47 * $49));
  $19 = Math_fround(Math_fround(Math_abs($18)) - Math_fround(Math_fround($22 * $38) + Math_fround(Math_fround(Math_fround($27 * $39) + Math_fround($41 * $29)) + Math_fround($25 * $17))));
  if ($19 > Math_fround(1.1920928955078125e-7)) {
   break label$2;
  }
  $35 = Math_fround($49 * $49);
  $20 = Math_fround(Math_sqrt(Math_fround($35 + $42)));
  label$14 : {
   if (!($20 > Math_fround(1.1920928955078125e-7))) {
    break label$14;
   }
   $19 = Math_fround($19 / $20);
   if (!(Math_fround($19 * Math_fround(1.0499999523162842)) > $16)) {
    break label$14;
   }
   $36 = $18 < Math_fround(0);
   $28 = Math_fround(Math_fround(-$49) / $20);
   $34 = Math_fround(Math_fround(0) / $20);
   $33 = Math_fround($55 / $20);
   $24 = 0;
   $2 = 11;
   $16 = $19;
  }
  $18 = Math_fround(Math_fround($44 * $54) - Math_fround($47 * $50));
  $19 = Math_fround(Math_fround(Math_abs($18)) - Math_fround(Math_fround($32 * $38) + Math_fround(Math_fround($25 * $23) + Math_fround(Math_fround($27 * $45) + Math_fround($41 * $13)))));
  if ($19 > Math_fround(1.1920928955078125e-7)) {
   break label$2;
  }
  $42 = Math_fround($50 * $50);
  $20 = Math_fround(Math_sqrt(Math_fround($42 + $60)));
  label$15 : {
   if (!($20 > Math_fround(1.1920928955078125e-7))) {
    break label$15;
   }
   $19 = Math_fround($19 / $20);
   if (!(Math_fround($19 * Math_fround(1.0499999523162842)) > $16)) {
    break label$15;
   }
   $36 = $18 < Math_fround(0);
   $28 = Math_fround(Math_fround(-$50) / $20);
   $34 = Math_fround(Math_fround(0) / $20);
   $33 = Math_fround($54 / $20);
   $24 = 0;
   $2 = 12;
   $16 = $19;
  }
  $19 = Math_fround(Math_fround($46 * $48) - Math_fround($44 * $53));
  $15 = Math_fround(Math_fround(Math_abs($19)) - Math_fround(Math_fround($22 * $39) + Math_fround(Math_fround(Math_fround($27 * $38) + Math_fround($40 * $15)) + Math_fround($32 * $45))));
  if ($15 > Math_fround(1.1920928955078125e-7)) {
   break label$2;
  }
  $18 = Math_fround(Math_sqrt(Math_fround(Math_fround($58 + $31) + Math_fround(0))));
  label$16 : {
   if (!($18 > Math_fround(1.1920928955078125e-7))) {
    break label$16;
   }
   $15 = Math_fround($15 / $18);
   if (!(Math_fround($15 * Math_fround(1.0499999523162842)) > $16)) {
    break label$16;
   }
   $36 = $19 < Math_fround(0);
   $28 = Math_fround(Math_fround(0) / $18);
   $34 = Math_fround($48 / $18);
   $33 = Math_fround(Math_fround(-$53) / $18);
   $24 = 0;
   $2 = 13;
   $16 = $15;
  }
  $19 = Math_fround(Math_fround($46 * $49) - Math_fround($44 * $52));
  $15 = Math_fround(Math_fround(Math_abs($19)) - Math_fround(Math_fround($22 * $26) + Math_fround(Math_fround(Math_fround($27 * $23) + Math_fround($40 * $29)) + Math_fround($25 * $45))));
  if ($15 > Math_fround(1.1920928955078125e-7)) {
   break label$2;
  }
  $22 = Math_fround(Math_sqrt(Math_fround(Math_fround($59 + $35) + Math_fround(0))));
  label$17 : {
   if (!($22 > Math_fround(1.1920928955078125e-7))) {
    break label$17;
   }
   $15 = Math_fround($15 / $22);
   if (!(Math_fround($15 * Math_fround(1.0499999523162842)) > $16)) {
    break label$17;
   }
   $36 = $19 < Math_fround(0);
   $28 = Math_fround(Math_fround(0) / $22);
   $34 = Math_fround($49 / $22);
   $33 = Math_fround(Math_fround(-$52) / $22);
   $24 = 0;
   $2 = 14;
   $16 = $15;
  }
  $15 = Math_fround(Math_fround($46 * $50) - Math_fround($44 * $51));
  $13 = Math_fround(Math_fround(Math_abs($15)) - Math_fround(Math_fround($32 * $26) + Math_fround(Math_fround($25 * $39) + Math_fround(Math_fround($27 * $17) + Math_fround($40 * $13)))));
  if ($13 > Math_fround(1.1920928955078125e-7)) {
   break label$2;
  }
  label$18 : {
   label$19 : {
    label$20 : {
     label$21 : {
      $17 = Math_fround(Math_sqrt(Math_fround(Math_fround($61 + $42) + Math_fround(0))));
      if (!($17 > Math_fround(1.1920928955078125e-7))) {
       break label$21;
      }
      $32 = Math_fround($13 / $17);
      if (!(Math_fround($32 * Math_fround(1.0499999523162842)) > $16)) {
       break label$21;
      }
      $36 = $15 < Math_fround(0);
      $28 = Math_fround(Math_fround(0) / $17);
      $34 = Math_fround($50 / $17);
      $33 = Math_fround(Math_fround(-$51) / $17);
      $2 = 15;
      break label$20;
     }
     if (!$2) {
      break label$2;
     }
     if ($24) {
      break label$19;
     }
     $32 = $16;
    }
    $14 = Math_fround(Math_fround(Math_fround($14 * $33) + Math_fround($21 * $34)) + Math_fround($30 * $28));
    HEAPF32[$6 >> 2] = $14;
    $13 = Math_fround(Math_fround(Math_fround($33 * HEAPF32[$1 + 16 >> 2]) + Math_fround($34 * HEAPF32[$1 + 20 >> 2])) + Math_fround($28 * HEAPF32[$1 + 24 >> 2]));
    HEAPF32[$6 + 4 >> 2] = $13;
    $15 = Math_fround(Math_fround(Math_fround($33 * HEAPF32[$1 + 32 >> 2]) + Math_fround($34 * HEAPF32[$1 + 36 >> 2])) + Math_fround($28 * HEAPF32[$1 + 40 >> 2]));
    HEAPF32[$6 + 8 >> 2] = $15;
    break label$18;
   }
   $14 = HEAPF32[$24 >> 2];
   $5 = HEAP32[$24 >> 2];
   HEAP32[$6 >> 2] = $5;
   $13 = HEAPF32[$24 + 16 >> 2];
   $56 = HEAP32[$24 + 16 >> 2];
   HEAP32[$6 + 4 >> 2] = $56;
   $15 = HEAPF32[$24 + 32 >> 2];
   $24 = HEAP32[$24 + 32 >> 2];
   HEAP32[$6 + 8 >> 2] = $24;
   $32 = $16;
  }
  if ($36) {
   HEAPF32[$6 + 8 >> 2] = -$15;
   HEAPF32[$6 + 4 >> 2] = -$13;
   HEAPF32[$6 >> 2] = -$14;
  }
  HEAPF32[$7 >> 2] = -$32;
  if (($2 | 0) >= 7) {
   $7 = $10;
   $5 = $10 + 120 | 0;
   HEAP32[$5 >> 2] = HEAP32[$0 + 8 >> 2];
   $5 = HEAP32[$0 + 4 >> 2];
   $0 = HEAP32[$0 >> 2];
   HEAP32[$10 + 112 >> 2] = $0;
   HEAP32[$10 + 116 >> 2] = $5;
   $21 = Math_fround(0);
   $27 = HEAPF32[$10 + 112 >> 2];
   $30 = HEAPF32[$10 + 116 >> 2];
   $14 = HEAPF32[$10 + 372 >> 2];
   $16 = $14;
   $18 = Math_fround(-$14);
   $14 = HEAPF32[$6 >> 2];
   $23 = HEAPF32[$1 >> 2];
   $13 = HEAPF32[$6 + 4 >> 2];
   $19 = HEAPF32[$1 + 16 >> 2];
   $15 = HEAPF32[$6 + 8 >> 2];
   $17 = HEAPF32[$1 + 32 >> 2];
   $16 = Math_fround(Math_fround(Math_fround($14 * $23) + Math_fround($13 * $19)) + Math_fround($15 * $17)) > Math_fround(0) ? $16 : $18;
   $18 = Math_fround(HEAPF32[$10 + 120 >> 2] + Math_fround($16 * $17));
   $17 = HEAPF32[$10 + 376 >> 2];
   $29 = HEAPF32[$1 + 4 >> 2];
   $26 = HEAPF32[$1 + 20 >> 2];
   $22 = HEAPF32[$1 + 36 >> 2];
   $17 = Math_fround(Math_fround(Math_fround($14 * $29) + Math_fround($13 * $26)) + Math_fround($15 * $22)) > Math_fround(0) ? $17 : Math_fround(-$17);
   $28 = Math_fround($18 + Math_fround($17 * $22));
   $18 = HEAPF32[$1 + 8 >> 2];
   $20 = HEAPF32[$1 + 24 >> 2];
   $38 = HEAPF32[$1 + 40 >> 2];
   $22 = Math_fround(Math_fround(Math_fround($14 * $18) + Math_fround($13 * $20)) + Math_fround($15 * $38)) > Math_fround(0) ? $41 : Math_fround(-$41);
   HEAPF32[$10 + 120 >> 2] = $28 + Math_fround($22 * $38);
   HEAPF32[$10 + 116 >> 2] = Math_fround(Math_fround($30 + Math_fround($16 * $19)) + Math_fround($17 * $26)) + Math_fround($22 * $20);
   HEAPF32[$10 + 112 >> 2] = Math_fround(Math_fround($27 + Math_fround($16 * $23)) + Math_fround($17 * $29)) + Math_fround($22 * $18);
   $0 = $10 + 216 | 0;
   HEAP32[$0 >> 2] = HEAP32[$3 + 8 >> 2];
   $0 = HEAP32[$3 + 4 >> 2];
   $5 = HEAP32[$3 >> 2];
   HEAP32[$10 + 208 >> 2] = $5;
   HEAP32[$10 + 212 >> 2] = $0;
   $22 = HEAPF32[$4 >> 2];
   $27 = HEAPF32[$4 + 16 >> 2];
   $17 = HEAPF32[$4 + 32 >> 2];
   $16 = Math_fround(Math_fround(Math_fround($14 * $22) + Math_fround($13 * $27)) + Math_fround($15 * $17)) > Math_fround(0) ? Math_fround(-$25) : $25;
   $18 = Math_fround(HEAPF32[$10 + 216 >> 2] + Math_fround($16 * $17));
   $17 = HEAPF32[$10 + 364 >> 2];
   $25 = HEAPF32[$4 + 4 >> 2];
   $30 = HEAPF32[$4 + 20 >> 2];
   $23 = HEAPF32[$4 + 36 >> 2];
   $17 = Math_fround(Math_fround(Math_fround($14 * $25) + Math_fround($13 * $30)) + Math_fround($15 * $23)) > Math_fround(0) ? Math_fround(-$17) : $17;
   $18 = Math_fround($18 + Math_fround($17 * $23));
   $23 = HEAPF32[$10 + 368 >> 2];
   $19 = HEAPF32[$4 + 8 >> 2];
   $29 = HEAPF32[$4 + 24 >> 2];
   $14 = Math_fround(Math_fround($14 * $19) + Math_fround($13 * $29));
   $13 = HEAPF32[$4 + 40 >> 2];
   $14 = Math_fround($14 + Math_fround($15 * $13)) > Math_fround(0) ? Math_fround(-$23) : $23;
   $13 = Math_fround($18 + Math_fround($14 * $13));
   HEAPF32[$10 + 216 >> 2] = $13;
   $15 = Math_fround(Math_fround(Math_fround(HEAPF32[$10 + 212 >> 2] + Math_fround($16 * $27)) + Math_fround($17 * $30)) + Math_fround($14 * $29));
   HEAPF32[$10 + 212 >> 2] = $15;
   $14 = Math_fround(Math_fround(Math_fround(HEAPF32[$10 + 208 >> 2] + Math_fround($16 * $22)) + Math_fround($17 * $25)) + Math_fround($14 * $19));
   HEAPF32[$10 + 208 >> 2] = $14;
   $0 = $2 + -7 | 0;
   $3 = ($0 | 0) / 3 | 0;
   $1 = ($3 << 2) + $1 | 0;
   $27 = HEAPF32[$1 >> 2];
   $4 = ($0 - Math_imul($3, 3) << 2) + $4 | 0;
   $16 = HEAPF32[$4 >> 2];
   $30 = HEAPF32[$1 + 16 >> 2];
   $17 = HEAPF32[$4 + 16 >> 2];
   $23 = HEAPF32[$1 + 32 >> 2];
   $25 = HEAPF32[$4 + 32 >> 2];
   $22 = Math_fround(Math_fround(Math_fround($27 * $16) + Math_fround($30 * $17)) + Math_fround($23 * $25));
   $19 = Math_fround(Math_fround(1) - Math_fround($22 * $22));
   if (!($19 <= Math_fround(9999999747378752e-20))) {
    $21 = Math_fround($14 - HEAPF32[$10 + 112 >> 2]);
    $18 = Math_fround($21 * $27);
    $27 = Math_fround($15 - HEAPF32[$10 + 116 >> 2]);
    $18 = Math_fround($18 + Math_fround($27 * $30));
    $30 = Math_fround($13 - HEAPF32[$7 + 120 >> 2]);
    $21 = Math_fround(Math_fround(Math_fround(Math_fround($18 + Math_fround($30 * $23)) * $22) - Math_fround(Math_fround(Math_fround($21 * $16) + Math_fround($27 * $17)) + Math_fround($30 * $25))) * Math_fround(Math_fround(1) / $19));
   }
   HEAPF32[$10 + 216 >> 2] = $13 + Math_fround($21 * $25);
   HEAPF32[$10 + 212 >> 2] = $15 + Math_fround($21 * $17);
   HEAPF32[$10 + 208 >> 2] = $14 + Math_fround($21 * $16);
   $14 = HEAPF32[$6 >> 2];
   $13 = HEAPF32[$6 + 4 >> 2];
   $15 = HEAPF32[$6 + 8 >> 2];
   HEAP32[$10 + 300 >> 2] = 0;
   HEAPF32[$10 + 296 >> 2] = -$15;
   HEAPF32[$10 + 292 >> 2] = -$13;
   HEAPF32[$10 + 288 >> 2] = -$14;
   FUNCTION_TABLE[HEAP32[HEAP32[$12 >> 2] + 16 >> 2]]($12, $10 + 288 | 0, $10 + 208 | 0, $32);
   HEAP32[$8 >> 2] = $2;
   $5 = 1;
   break label$2;
  }
  $25 = HEAPF32[$6 >> 2];
  label$25 : {
   if (($2 | 0) <= 3) {
    $32 = HEAPF32[$6 + 8 >> 2];
    $63 = $10 + 372 | 0;
    $37 = $4;
    $5 = $10 + 360 | 0;
    $22 = HEAPF32[$6 + 4 >> 2];
    break label$25;
   }
   $25 = Math_fround(-$25);
   $32 = Math_fround(-HEAPF32[$6 + 8 >> 2]);
   $7 = $3;
   $63 = $10 + 360 | 0;
   $3 = $0;
   $0 = $7;
   $37 = $1;
   $1 = $4;
   $5 = $10 + 372 | 0;
   $22 = Math_fround(-HEAPF32[$6 + 4 >> 2]);
  }
  $14 = Math_fround(Math_fround(Math_fround($25 * HEAPF32[$37 >> 2]) + Math_fround($22 * HEAPF32[$37 + 16 >> 2])) + Math_fround($32 * HEAPF32[$37 + 32 >> 2]));
  HEAPF32[$10 + 344 >> 2] = $14;
  $13 = Math_fround(Math_fround(Math_fround($25 * HEAPF32[$37 + 4 >> 2]) + Math_fround($22 * HEAPF32[$37 + 20 >> 2])) + Math_fround($32 * HEAPF32[$37 + 36 >> 2]));
  HEAPF32[$10 + 348 >> 2] = $13;
  $15 = Math_fround(Math_fround(Math_fround($25 * HEAPF32[$37 + 8 >> 2]) + Math_fround($22 * HEAPF32[$37 + 24 >> 2])) + Math_fround($32 * HEAPF32[$37 + 40 >> 2]));
  HEAPF32[$10 + 352 >> 2] = $15;
  $15 = Math_fround(Math_abs($15));
  $13 = Math_fround(Math_abs($13));
  $14 = Math_fround(Math_abs($14));
  label$27 : {
   if (!!($13 > $14)) {
    $7 = $13 > $15;
    $4 = $7 ? 1 : 2;
    $11 = 0;
    break label$27;
   }
   $7 = $14 > $15;
   $4 = ($7 ^ 1) << 1;
   $11 = $7;
  }
  $69 = $11;
  $4 = $4 << 2;
  $14 = HEAPF32[$5 + $4 >> 2];
  $13 = Math_fround($14 * HEAPF32[$4 + $37 >> 2]);
  $15 = Math_fround(HEAPF32[$3 >> 2] - HEAPF32[$0 >> 2]);
  $70 = $7 ? 2 : 1;
  $7 = $10;
  label$29 : {
   if (!(HEAPF32[($10 + 344 | 0) + $4 >> 2] < Math_fround(0))) {
    $23 = Math_fround($15 - $13);
    HEAPF32[$10 + 328 >> 2] = $23;
    $19 = Math_fround(Math_fround(HEAPF32[$3 + 4 >> 2] - HEAPF32[$0 + 4 >> 2]) - Math_fround($14 * HEAPF32[($4 | 16) + $37 >> 2]));
    HEAPF32[$10 + 332 >> 2] = $19;
    $16 = Math_fround(Math_fround(HEAPF32[$3 + 8 >> 2] - HEAPF32[$0 + 8 >> 2]) - Math_fround($14 * HEAPF32[($4 | 32) + $37 >> 2]));
    break label$29;
   }
   $23 = Math_fround($15 + $13);
   HEAPF32[$10 + 328 >> 2] = $23;
   $19 = Math_fround(Math_fround(HEAPF32[$3 + 4 >> 2] - HEAPF32[$0 + 4 >> 2]) + Math_fround($14 * HEAPF32[($4 | 16) + $37 >> 2]));
   HEAPF32[$10 + 332 >> 2] = $19;
   $16 = Math_fround(Math_fround(HEAPF32[$3 + 8 >> 2] - HEAPF32[$0 + 8 >> 2]) + Math_fround($14 * HEAPF32[($4 | 32) + $37 >> 2]));
  }
  HEAPF32[$7 + 336 >> 2] = $16;
  $4 = 1;
  $67 = (($2 | 0) < 4 ? -1 : -4) + $2 | 0;
  label$31 : {
   label$32 : {
    if ($67 >>> 0 <= 1) {
     $3 = 2;
     if ($67 - 1) {
      break label$31;
     }
     break label$32;
    }
    $3 = 1;
   }
   $4 = 0;
  }
  $7 = $4 << 2;
  $4 = $7 + $1 | 0;
  $14 = HEAPF32[$4 + 32 >> 2];
  $13 = HEAPF32[$4 >> 2];
  $15 = HEAPF32[$4 + 16 >> 2];
  $4 = $3 << 2;
  $1 = $4 + $1 | 0;
  $21 = HEAPF32[$1 >> 2];
  $17 = HEAPF32[$1 + 16 >> 2];
  $30 = HEAPF32[$1 + 32 >> 2];
  $27 = Math_fround(Math_fround(Math_fround($23 * $21) + Math_fround($19 * $17)) + Math_fround($16 * $30));
  $1 = $69 << 2;
  $64 = $37 + $1 | 0;
  $26 = HEAPF32[$64 >> 2];
  $18 = HEAPF32[$64 + 16 >> 2];
  $20 = HEAPF32[$64 + 32 >> 2];
  $29 = Math_fround(Math_fround(Math_fround($21 * $26) + Math_fround($17 * $18)) + Math_fround($30 * $20));
  $38 = HEAPF32[$1 + $5 >> 2];
  $39 = Math_fround($29 * $38);
  $33 = Math_fround($27 + $39);
  $1 = $70 << 2;
  $65 = $37 + $1 | 0;
  $34 = HEAPF32[$65 >> 2];
  $28 = HEAPF32[$65 + 16 >> 2];
  $35 = HEAPF32[$65 + 32 >> 2];
  $17 = Math_fround(Math_fround(Math_fround($21 * $34) + Math_fround($17 * $28)) + Math_fround($30 * $35));
  $31 = HEAPF32[$1 + $5 >> 2];
  $21 = Math_fround($17 * $31);
  HEAPF32[$10 + 316 >> 2] = $33 - $21;
  $30 = Math_fround(Math_fround(Math_fround($23 * $13) + Math_fround($19 * $15)) + Math_fround($16 * $14));
  $16 = Math_fround(Math_fround(Math_fround($13 * $26) + Math_fround($15 * $18)) + Math_fround($14 * $20));
  $23 = Math_fround($38 * $16);
  $19 = Math_fround($30 + $23);
  $26 = Math_fround(Math_fround(Math_fround($13 * $34) + Math_fround($15 * $28)) + Math_fround($14 * $35));
  $14 = Math_fround($31 * $26);
  HEAPF32[$10 + 312 >> 2] = $19 - $14;
  HEAPF32[$10 + 308 >> 2] = $33 + $21;
  HEAPF32[$10 + 304 >> 2] = $19 + $14;
  $13 = Math_fround($27 - $39);
  HEAPF32[$10 + 300 >> 2] = $13 + $21;
  $15 = Math_fround($30 - $23);
  HEAPF32[$10 + 296 >> 2] = $15 + $14;
  HEAPF32[$10 + 292 >> 2] = $13 - $21;
  HEAPF32[$10 + 288 >> 2] = $15 - $14;
  HEAP32[$10 + 280 >> 2] = HEAP32[$7 + $63 >> 2];
  HEAP32[$10 + 284 >> 2] = HEAP32[$4 + $63 >> 2];
  $1 = 4;
  $4 = 0;
  $57 = $10 + 208 | 0;
  $11 = $10 + 288 | 0;
  label$34 : {
   while (1) {
    label$36 : {
     $68 = $4;
     label$37 : {
      if (($1 | 0) >= 1) {
       $71 = $68 ^ 1;
       $5 = $68 << 2;
       $62 = $5 + ($10 + 280 | 0) | 0;
       $14 = HEAPF32[$62 >> 2];
       $7 = 0;
       $3 = $57;
       $4 = $11;
       while (1) {
        $24 = $4 + $5 | 0;
        $13 = HEAPF32[$24 >> 2];
        $15 = Math_fround(-$13);
        if (!!($14 > $15)) {
         HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
         HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
         $7 = $7 + 1 | 0;
         if ($7 & 8) {
          break label$36;
         }
         $14 = HEAPF32[$62 >> 2];
         $13 = HEAPF32[$24 >> 2];
         $15 = Math_fround(-$13);
         $3 = $3 + 8 | 0;
        }
        $43 = $15 < $14;
        $24 = $4 + 8 | 0;
        $36 = ($1 | 0) > 1;
        $56 = $36 ? $24 : $11;
        $15 = HEAPF32[$56 + $5 >> 2];
        if (($43 | 0) != ($14 > Math_fround(-$15) | 0)) {
         $43 = $71 << 2;
         $21 = HEAPF32[$43 + $4 >> 2];
         HEAPF32[$3 + $43 >> 2] = $21 + Math_fround(Math_fround(Math_fround(-$14) - $13) * Math_fround(Math_fround(HEAPF32[$43 + $56 >> 2] - $21) / Math_fround($15 - $13)));
         $14 = HEAPF32[$62 >> 2];
         HEAPF32[$3 + $5 >> 2] = -$14;
         $7 = $7 + 1 | 0;
         if ($7 & 8) {
          break label$36;
         }
         $3 = $3 + 8 | 0;
        }
        $1 = $1 + -1 | 0;
        $4 = $24;
        if ($36) {
         continue;
        }
        break;
       }
       $1 = 0;
       $11 = ($10 + 208 | 0) == ($57 | 0) ? $10 + 112 | 0 : $10 + 208 | 0;
       if (($7 | 0) <= 0) {
        break label$37;
       }
       $3 = $11;
       $4 = $57;
       while (1) {
        $24 = $4 + $5 | 0;
        $13 = HEAPF32[$24 >> 2];
        if (!!($13 < $14)) {
         HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
         HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
         $1 = $1 + 1 | 0;
         if ($1 & 8) {
          break label$34;
         }
         $14 = HEAPF32[$62 >> 2];
         $13 = HEAPF32[$24 >> 2];
         $3 = $3 + 8 | 0;
        }
        $24 = $4 + 8 | 0;
        $36 = ($7 | 0) > 1;
        $56 = $36 ? $24 : $57;
        $15 = HEAPF32[$56 + $5 >> 2];
        if (($13 < $14 | 0) != ($15 < $14 | 0)) {
         $43 = $71 << 2;
         $21 = HEAPF32[$43 + $4 >> 2];
         HEAPF32[$3 + $43 >> 2] = $21 + Math_fround(Math_fround($14 - $13) * Math_fround(Math_fround(HEAPF32[$43 + $56 >> 2] - $21) / Math_fround($15 - $13)));
         $14 = HEAPF32[$62 >> 2];
         $4 = HEAP32[$62 >> 2];
         HEAP32[$3 + $5 >> 2] = $4;
         $1 = $1 + 1 | 0;
         if ($1 & 8) {
          break label$34;
         }
         $3 = $3 + 8 | 0;
        }
        $7 = $7 + -1 | 0;
        $4 = $24;
        if ($36) {
         continue;
        }
        break;
       }
       break label$37;
      }
      $11 = ($10 + 208 | 0) == ($57 | 0) ? $10 + 112 | 0 : $10 + 208 | 0;
      $1 = 0;
     }
     $57 = ($10 + 208 | 0) == ($11 | 0) ? $10 + 112 | 0 : $10 + 208 | 0;
     $4 = 1;
     if (!$68) {
      continue;
     }
     break label$34;
    }
    break;
   }
   $11 = $57;
   $1 = $7;
  }
  if (($10 + 208 | 0) != ($11 | 0)) {
   memcpy($10 + 208 | 0, $11, $1 << 3);
  }
  if (($1 | 0) < 1) {
   $5 = 0;
   break label$2;
  }
  $14 = Math_fround(Math_fround(1) / Math_fround(Math_fround($16 * $17) - Math_fround($29 * $26)));
  $23 = Math_fround($14 * Math_fround(-$29));
  $19 = Math_fround($17 * $14);
  $29 = Math_fround($26 * $14);
  $26 = Math_fround($16 * $14);
  $18 = HEAPF32[($67 << 2) + $63 >> 2];
  $4 = $70 << 2;
  $20 = HEAPF32[($4 | 32) + $37 >> 2];
  $3 = $69 << 2;
  $38 = HEAPF32[($3 | 32) + $37 >> 2];
  $39 = HEAPF32[($4 | 16) + $37 >> 2];
  $33 = HEAPF32[($3 | 16) + $37 >> 2];
  $34 = HEAPF32[$65 >> 2];
  $28 = HEAPF32[$64 >> 2];
  $4 = 0;
  $35 = HEAPF32[$10 + 336 >> 2];
  $31 = HEAPF32[$10 + 332 >> 2];
  $40 = HEAPF32[$10 + 328 >> 2];
  $3 = 0;
  while (1) {
   $5 = ($10 + 112 | 0) + Math_imul($4, 12) | 0;
   $7 = $3 << 3;
   $16 = HEAPF32[$7 + ($10 + 208 | 0) >> 2];
   $13 = Math_fround($16 - $30);
   $17 = HEAPF32[($10 + 208 | 0) + ($7 | 4) >> 2];
   $15 = Math_fround($17 - $27);
   $14 = Math_fround(Math_fround($19 * $13) - Math_fround($29 * $15));
   $13 = Math_fround(Math_fround($23 * $13) + Math_fround($26 * $15));
   $15 = Math_fround(Math_fround($40 + Math_fround($14 * $28)) + Math_fround($13 * $34));
   HEAPF32[$5 >> 2] = $15;
   $21 = Math_fround(Math_fround($31 + Math_fround($14 * $33)) + Math_fround($13 * $39));
   HEAPF32[$5 + 4 >> 2] = $21;
   $14 = Math_fround(Math_fround($35 + Math_fround($14 * $38)) + Math_fround($13 * $20));
   HEAPF32[$5 + 8 >> 2] = $14;
   $14 = Math_fround($18 - Math_fround(Math_fround(Math_fround($25 * $15) + Math_fround($22 * $21)) + Math_fround($32 * $14)));
   HEAPF32[($10 + 80 | 0) + ($4 << 2) >> 2] = $14;
   if (!!($14 >= Math_fround(0))) {
    $5 = $4 << 3;
    HEAPF32[$5 + ($10 + 208 | 0) >> 2] = $16;
    HEAPF32[($10 + 208 | 0) + ($5 | 4) >> 2] = $17;
    $4 = $4 + 1 | 0;
   }
   $3 = $3 + 1 | 0;
   if (($3 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
  if (($4 | 0) < 1) {
   $5 = 0;
   break label$2;
  }
  $1 = ($4 | 0) < ($9 | 0) ? $4 : $9;
  $5 = ($1 | 0) > 1 ? $1 : 1;
  label$50 : {
   if (($4 | 0) <= ($5 | 0)) {
    if (($2 | 0) >= 4) {
     $1 = 0;
     while (1) {
      $3 = ($10 + 112 | 0) + Math_imul($1, 12) | 0;
      $13 = HEAPF32[$6 >> 2];
      $14 = HEAPF32[($10 + 80 | 0) + ($1 << 2) >> 2];
      HEAPF32[$10 + 32 >> 2] = Math_fround(HEAPF32[$3 >> 2] + HEAPF32[$0 >> 2]) - Math_fround($13 * $14);
      $15 = HEAPF32[$6 + 4 >> 2];
      HEAPF32[$10 + 36 >> 2] = Math_fround(HEAPF32[$3 + 4 >> 2] + HEAPF32[$0 + 4 >> 2]) - Math_fround($14 * $15);
      $21 = HEAPF32[$6 + 8 >> 2];
      HEAPF32[$10 + 40 >> 2] = Math_fround(HEAPF32[$3 + 8 >> 2] + HEAPF32[$0 + 8 >> 2]) - Math_fround($14 * $21);
      HEAP32[$10 + 76 >> 2] = 0;
      HEAPF32[$10 + 72 >> 2] = -$21;
      HEAPF32[$10 + 68 >> 2] = -$15;
      HEAPF32[$10 + 64 >> 2] = -$13;
      FUNCTION_TABLE[HEAP32[HEAP32[$12 >> 2] + 16 >> 2]]($12, $10 - -64 | 0, $10 + 32 | 0, Math_fround(-$14));
      $1 = $1 + 1 | 0;
      if (($4 | 0) != ($1 | 0)) {
       continue;
      }
      break;
     }
     $5 = $4;
     break label$50;
    }
    $1 = 0;
    while (1) {
     $3 = ($10 + 112 | 0) + Math_imul($1, 12) | 0;
     HEAPF32[$10 + 32 >> 2] = HEAPF32[$3 >> 2] + HEAPF32[$0 >> 2];
     HEAPF32[$10 + 36 >> 2] = HEAPF32[$3 + 4 >> 2] + HEAPF32[$0 + 4 >> 2];
     HEAPF32[$10 + 40 >> 2] = HEAPF32[$3 + 8 >> 2] + HEAPF32[$0 + 8 >> 2];
     $14 = HEAPF32[$6 >> 2];
     $13 = HEAPF32[$6 + 4 >> 2];
     $15 = HEAPF32[$6 + 8 >> 2];
     HEAP32[$10 + 76 >> 2] = 0;
     HEAPF32[$10 + 72 >> 2] = -$15;
     HEAPF32[$10 + 68 >> 2] = -$13;
     HEAPF32[$10 + 64 >> 2] = -$14;
     FUNCTION_TABLE[HEAP32[HEAP32[$12 >> 2] + 16 >> 2]]($12, $10 - -64 | 0, $10 + 32 | 0, Math_fround(-HEAPF32[($10 + 80 | 0) + ($1 << 2) >> 2]));
     $1 = $1 + 1 | 0;
     if (($4 | 0) != ($1 | 0)) {
      continue;
     }
     break;
    }
    $5 = $4;
    break label$50;
   }
   $3 = 0;
   if (($4 | 0) >= 2) {
    $14 = HEAPF32[$10 + 80 >> 2];
    $1 = 1;
    while (1) {
     $13 = HEAPF32[($10 + 80 | 0) + ($1 << 2) >> 2];
     $7 = $13 > $14;
     $14 = $7 ? $13 : $14;
     $3 = $7 ? $1 : $3;
     $1 = $1 + 1 | 0;
     if (($4 | 0) != ($1 | 0)) {
      continue;
     }
     break;
    }
   }
   cullPoints2_28int_2c_20float__2c_20int_2c_20int_2c_20int__29($4, $10 + 208 | 0, $5, $3, $10 + 32 | 0);
   $7 = ($2 | 0) > 3;
   $1 = 0;
   while (1) {
    $3 = HEAP32[($10 + 32 | 0) + ($1 << 2) >> 2];
    $4 = ($10 + 112 | 0) + Math_imul($3, 12) | 0;
    $13 = Math_fround(HEAPF32[$4 >> 2] + HEAPF32[$0 >> 2]);
    HEAPF32[$10 + 64 >> 2] = $13;
    $15 = Math_fround(HEAPF32[$4 + 4 >> 2] + HEAPF32[$0 + 4 >> 2]);
    HEAPF32[$10 + 68 >> 2] = $15;
    $21 = Math_fround(HEAPF32[$4 + 8 >> 2] + HEAPF32[$0 + 8 >> 2]);
    HEAPF32[$10 + 72 >> 2] = $21;
    label$58 : {
     if (!$7) {
      $14 = HEAPF32[$6 >> 2];
      $13 = HEAPF32[$6 + 4 >> 2];
      $15 = HEAPF32[$6 + 8 >> 2];
      HEAP32[$10 + 28 >> 2] = 0;
      HEAPF32[$10 + 24 >> 2] = -$15;
      HEAPF32[$10 + 20 >> 2] = -$13;
      HEAPF32[$10 + 16 >> 2] = -$14;
      FUNCTION_TABLE[HEAP32[HEAP32[$12 >> 2] + 16 >> 2]]($12, $10 + 16 | 0, $10 - -64 | 0, Math_fround(-HEAPF32[($10 + 80 | 0) + ($3 << 2) >> 2]));
      break label$58;
     }
     $16 = HEAPF32[$6 >> 2];
     $17 = HEAPF32[$6 + 4 >> 2];
     $25 = HEAPF32[$6 + 8 >> 2];
     HEAP32[$10 + 28 >> 2] = 0;
     HEAPF32[$10 + 24 >> 2] = -$25;
     HEAPF32[$10 + 20 >> 2] = -$17;
     HEAPF32[$10 + 16 >> 2] = -$16;
     HEAP32[$10 + 12 >> 2] = 0;
     $14 = HEAPF32[($10 + 80 | 0) + ($3 << 2) >> 2];
     HEAPF32[$10 + 8 >> 2] = $21 - Math_fround($25 * $14);
     HEAPF32[$10 + 4 >> 2] = $15 - Math_fround($17 * $14);
     HEAPF32[$10 >> 2] = $13 - Math_fround($16 * $14);
     FUNCTION_TABLE[HEAP32[HEAP32[$12 >> 2] + 16 >> 2]]($12, $10 + 16 | 0, $10, Math_fround(-$14));
    }
    $1 = $1 + 1 | 0;
    if ($1 >>> 0 < $5 >>> 0) {
     continue;
    }
    break;
   }
  }
  HEAP32[$8 >> 2] = $2;
 }
 $0 = $10 + 384 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $5;
}
function btPolyhedralConvexShape__initializePolyhedralFeatures_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = Math_fround(0), $23 = 0, $24 = Math_fround(0), $25 = 0, $26 = Math_fround(0), $27 = 0, $28 = 0, $29 = Math_fround(0), $30 = 0, $31 = 0;
 $2 = global$0 - 240 | 0;
 $7 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 $3 = HEAP32[$0 + 56 >> 2];
 if ($3) {
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] >> 2]]($3) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 56 >> 2]);
 }
 $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(132, 16);
 btConvexPolyhedron__btConvexPolyhedron_28_29($3);
 HEAP32[$0 + 56 >> 2] = $3;
 HEAP32[$2 + 228 >> 2] = 0;
 HEAP8[$2 + 232 | 0] = 1;
 HEAP32[$2 + 220 >> 2] = 0;
 HEAP32[$2 + 224 >> 2] = 0;
 while (1) {
  if (($14 | 0) < (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0)) {
   $11 = HEAP32[$2 + 220 >> 2];
   $6 = $11;
   label$5 : {
    if (($6 | 0) != HEAP32[$2 + 224 >> 2]) {
     break label$5;
    }
    $6 = $11;
    $15 = $6 ? $6 << 1 : 1;
    if (($6 | 0) >= ($15 | 0)) {
     break label$5;
    }
    $3 = 0;
    $9 = 0;
    if ($15) {
     $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($15 << 4, 16);
     $6 = HEAP32[$2 + 220 >> 2];
    }
    $10 = HEAP32[$2 + 228 >> 2];
    label$7 : {
     label$8 : {
      if (($6 | 0) >= 1) {
       while (1) {
        $4 = $3 << 4;
        $5 = $9 + $4 | 0;
        $4 = $4 + $10 | 0;
        $7 = HEAP32[$4 + 4 >> 2];
        $8 = HEAP32[$4 >> 2];
        HEAP32[$5 >> 2] = $8;
        HEAP32[$5 + 4 >> 2] = $7;
        $8 = HEAP32[$4 + 12 >> 2];
        $7 = HEAP32[$4 + 8 >> 2];
        HEAP32[$5 + 8 >> 2] = $7;
        HEAP32[$5 + 12 >> 2] = $8;
        $3 = $3 + 1 | 0;
        if (($6 | 0) != ($3 | 0)) {
         continue;
        }
        break label$8;
       }
      }
      if (!$10) {
       break label$7;
      }
     }
     if (HEAPU8[$2 + 232 | 0]) {
      btAlignedFreeInternal_28void__29($10);
      $6 = HEAP32[$2 + 220 >> 2];
     }
     HEAP32[$2 + 228 >> 2] = 0;
    }
    HEAP32[$2 + 228 >> 2] = $9;
    HEAP8[$2 + 232 | 0] = 1;
    HEAP32[$2 + 224 >> 2] = $15;
   }
   HEAP32[$2 + 220 >> 2] = $6 + 1;
   $7 = HEAP32[$2 + 156 >> 2];
   $8 = HEAP32[$2 + 152 >> 2];
   $3 = $11 << 4;
   $4 = $3 + HEAP32[$2 + 228 >> 2] | 0;
   HEAP32[$4 >> 2] = $8;
   HEAP32[$4 + 4 >> 2] = $7;
   $8 = HEAP32[$2 + 164 >> 2];
   $7 = HEAP32[$2 + 160 >> 2];
   HEAP32[$4 + 8 >> 2] = $7;
   HEAP32[$4 + 12 >> 2] = $8;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, $14, HEAP32[$2 + 228 >> 2] + $3 | 0);
   $14 = $14 + 1 | 0;
   continue;
  }
  break;
 }
 HEAP8[$2 + 188 | 0] = 1;
 HEAP32[$2 + 184 >> 2] = 0;
 HEAP8[$2 + 208 | 0] = 1;
 HEAP32[$2 + 176 >> 2] = 0;
 HEAP32[$2 + 180 >> 2] = 0;
 HEAP32[$2 + 204 >> 2] = 0;
 HEAP32[$2 + 196 >> 2] = 0;
 HEAP32[$2 + 200 >> 2] = 0;
 HEAP32[$2 + 164 >> 2] = 0;
 HEAP8[$2 + 168 | 0] = 1;
 HEAP32[$2 + 156 >> 2] = 0;
 HEAP32[$2 + 160 >> 2] = 0;
 label$12 : {
  if ($1) {
   HEAP32[$2 + 60 >> 2] = 0;
   HEAP8[$2 + 64 | 0] = 1;
   HEAP32[$2 + 52 >> 2] = 0;
   HEAP32[$2 + 56 >> 2] = 0;
   btGeometryUtil__getPlaneEquationsFromVertices_28btAlignedObjectArray_btVector3___2c_20btAlignedObjectArray_btVector3___29($2 + 216 | 0, $2 + 48 | 0);
   HEAP32[$2 + 140 >> 2] = 0;
   HEAP8[$2 + 144 | 0] = 1;
   HEAP32[$2 + 132 >> 2] = 0;
   HEAP32[$2 + 136 >> 2] = 0;
   if (HEAP32[$2 + 52 >> 2] >= 1) {
    $10 = 0;
    while (1) {
     $1 = $2;
     $11 = $2 + 112 | 0;
     $3 = HEAP32[$2 + 60 >> 2] + ($10 << 4) | 0;
     HEAP32[$11 >> 2] = HEAP32[$3 + 8 >> 2];
     $7 = HEAP32[$3 + 4 >> 2];
     $8 = HEAP32[$3 >> 2];
     HEAP32[$2 + 104 >> 2] = $8;
     HEAP32[$2 + 108 >> 2] = $7;
     $12 = Math_fround(HEAPF32[$3 + 12 >> 2] - Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0)));
     $6 = HEAP32[$2 + 132 >> 2];
     label$16 : {
      if (($6 | 0) != HEAP32[$2 + 136 >> 2]) {
       break label$16;
      }
      $14 = $6 ? $6 << 1 : 1;
      if (($6 | 0) >= ($14 | 0)) {
       break label$16;
      }
      $3 = 0;
      $9 = 0;
      if ($14) {
       $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($14 << 4, 16);
       $6 = HEAP32[$2 + 132 >> 2];
      }
      if (($6 | 0) >= 1) {
       while (1) {
        $4 = $3 << 4;
        $5 = $9 + $4 | 0;
        $4 = HEAP32[$2 + 140 >> 2] + $4 | 0;
        $8 = HEAP32[$4 + 4 >> 2];
        $7 = HEAP32[$4 >> 2];
        HEAP32[$5 >> 2] = $7;
        HEAP32[$5 + 4 >> 2] = $8;
        $7 = HEAP32[$4 + 12 >> 2];
        $8 = HEAP32[$4 + 8 >> 2];
        HEAP32[$5 + 8 >> 2] = $8;
        HEAP32[$5 + 12 >> 2] = $7;
        $3 = $3 + 1 | 0;
        if (($6 | 0) != ($3 | 0)) {
         continue;
        }
        break;
       }
      }
      $3 = HEAP32[$2 + 140 >> 2];
      if ($3) {
       if (HEAPU8[$2 + 144 | 0]) {
        btAlignedFreeInternal_28void__29($3);
       }
       HEAP32[$2 + 140 >> 2] = 0;
      }
      HEAP32[$2 + 140 >> 2] = $9;
      HEAP8[$2 + 144 | 0] = 1;
      HEAP32[$2 + 136 >> 2] = $14;
      $6 = HEAP32[$2 + 132 >> 2];
     }
     $8 = HEAP32[$2 + 108 >> 2];
     $7 = HEAP32[$2 + 104 >> 2];
     $3 = HEAP32[$2 + 140 >> 2] + ($6 << 4) | 0;
     HEAP32[$3 >> 2] = $7;
     HEAP32[$3 + 4 >> 2] = $8;
     $4 = HEAP32[$1 + 112 >> 2];
     HEAPF32[$3 + 12 >> 2] = $12;
     HEAP32[$3 + 8 >> 2] = $4;
     HEAP32[$2 + 132 >> 2] = HEAP32[$2 + 132 >> 2] + 1;
     $10 = $10 + 1 | 0;
     if (($10 | 0) < HEAP32[$2 + 52 >> 2]) {
      continue;
     }
     break;
    }
   }
   HEAP32[$2 + 116 >> 2] = 0;
   HEAP8[$2 + 120 | 0] = 1;
   HEAP32[$2 + 108 >> 2] = 0;
   HEAP32[$2 + 112 >> 2] = 0;
   btGeometryUtil__getVerticesFromPlaneEquations_28btAlignedObjectArray_btVector3__20const__2c_20btAlignedObjectArray_btVector3___29($2 + 128 | 0, $2 + 104 | 0);
   btConvexHullComputer__compute_28void_20const__2c_20bool_2c_20int_2c_20int_2c_20float_2c_20float_29($2 + 152 | 0, HEAP32[$2 + 116 >> 2], 0, 16, HEAP32[$2 + 108 >> 2], Math_fround(0), Math_fround(0));
   $3 = HEAP32[$2 + 116 >> 2];
   if ($3) {
    if (HEAPU8[$2 + 120 | 0]) {
     btAlignedFreeInternal_28void__29($3);
    }
    HEAP32[$2 + 116 >> 2] = 0;
   }
   $3 = HEAP32[$2 + 140 >> 2];
   if ($3) {
    if (HEAPU8[$2 + 144 | 0]) {
     btAlignedFreeInternal_28void__29($3);
    }
    HEAP32[$2 + 140 >> 2] = 0;
   }
   $3 = HEAP32[$2 + 60 >> 2];
   if (!$3) {
    break label$12;
   }
   if (HEAPU8[$2 + 64 | 0]) {
    btAlignedFreeInternal_28void__29($3);
   }
   HEAP32[$2 + 60 >> 2] = 0;
   break label$12;
  }
  btConvexHullComputer__compute_28void_20const__2c_20bool_2c_20int_2c_20int_2c_20float_2c_20float_29($2 + 152 | 0, HEAP32[$2 + 228 >> 2], 0, 16, HEAP32[$2 + 220 >> 2], Math_fround(0), Math_fround(0));
 }
 $5 = 0;
 $19 = HEAP32[$2 + 196 >> 2];
 if (($19 | 0) >= 1) {
  $25 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($19 << 4, 16);
  $3 = 0;
  while (1) {
   $7 = HEAP32[$2 + 52 >> 2];
   $8 = HEAP32[$2 + 48 >> 2];
   $4 = ($3 << 4) + $25 | 0;
   HEAP32[$4 >> 2] = $8;
   HEAP32[$4 + 4 >> 2] = $7;
   $8 = HEAP32[$2 + 60 >> 2];
   $7 = HEAP32[$2 + 56 >> 2];
   HEAP32[$4 + 8 >> 2] = $7;
   HEAP32[$4 + 12 >> 2] = $8;
   $3 = $3 + 1 | 0;
   if (($19 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$2 + 140 >> 2] = 0;
 HEAP8[$2 + 144 | 0] = 1;
 HEAP32[$2 + 132 >> 2] = 0;
 HEAP32[$2 + 136 >> 2] = 0;
 HEAP8[$2 + 63 | 0] = 0;
 HEAP8[$2 + 64 | 0] = 0;
 HEAP8[$2 + 65 | 0] = 0;
 HEAP8[$2 + 66 | 0] = 0;
 HEAP32[$2 + 56 >> 2] = 0;
 HEAP32[$2 + 60 >> 2] = 0;
 HEAP32[$2 + 48 >> 2] = 0;
 HEAP32[$2 + 52 >> 2] = 0;
 label$30 : {
  if (($19 | 0) <= -1) {
   $4 = $19;
   while (1) {
    $3 = Math_imul($4, 36) + $5 | 0;
    $1 = $3;
    $7 = $3;
    $9 = HEAP32[$3 + 12 >> 2];
    if ($9) {
     if (HEAPU8[$3 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($9);
     }
     HEAP32[$1 + 12 >> 2] = 0;
    }
    HEAP8[$3 + 16 | 0] = 1;
    HEAP32[$1 + 12 >> 2] = 0;
    HEAP32[$7 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    $3 = $4 + 1 | 0;
    if ($3 >>> 0 < $4 >>> 0) {
     break label$30;
    }
    $5 = HEAP32[$2 + 140 >> 2];
    $4 = $3;
    continue;
   }
  }
  if (!$19) {
   break label$30;
  }
  btAlignedObjectArray_btFace___reserve_28int_29($2 + 128 | 0, $19);
  $5 = $2 + 48 | 3;
  $6 = $5;
  $4 = 0;
  while (1) {
   $3 = HEAP32[$2 + 140 >> 2] + Math_imul($4, 36) | 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$3 + 8 >> 2] = 0;
   HEAP8[$3 + 16 | 0] = 1;
   HEAP32[$3 + 12 >> 2] = 0;
   $7 = HEAPU8[$5 + 4 | 0] | HEAPU8[$5 + 5 | 0] << 8 | (HEAPU8[$5 + 6 | 0] << 16 | HEAPU8[$5 + 7 | 0] << 24);
   $8 = HEAPU8[$5 | 0] | HEAPU8[$5 + 1 | 0] << 8 | (HEAPU8[$5 + 2 | 0] << 16 | HEAPU8[$5 + 3 | 0] << 24);
   HEAP8[$3 + 20 | 0] = $8;
   HEAP8[$3 + 21 | 0] = $8 >>> 8;
   HEAP8[$3 + 22 | 0] = $8 >>> 16;
   HEAP8[$3 + 23 | 0] = $8 >>> 24;
   HEAP8[$3 + 24 | 0] = $7;
   HEAP8[$3 + 25 | 0] = $7 >>> 8;
   HEAP8[$3 + 26 | 0] = $7 >>> 16;
   HEAP8[$3 + 27 | 0] = $7 >>> 24;
   $1 = $6;
   $7 = HEAPU8[$1 + 8 | 0] | HEAPU8[$1 + 9 | 0] << 8 | (HEAPU8[$1 + 10 | 0] << 16 | HEAPU8[$1 + 11 | 0] << 24);
   $8 = HEAPU8[$1 + 12 | 0] | HEAPU8[$1 + 13 | 0] << 8 | (HEAPU8[$1 + 14 | 0] << 16 | HEAPU8[$1 + 15 | 0] << 24);
   HEAP8[$3 + 28 | 0] = $7;
   HEAP8[$3 + 29 | 0] = $7 >>> 8;
   HEAP8[$3 + 30 | 0] = $7 >>> 16;
   HEAP8[$3 + 31 | 0] = $7 >>> 24;
   HEAP8[$3 + 32 | 0] = $8;
   HEAP8[$3 + 33 | 0] = $8 >>> 8;
   HEAP8[$3 + 34 | 0] = $8 >>> 16;
   HEAP8[$3 + 35 | 0] = $8 >>> 24;
   $4 = $4 + 1 | 0;
   if (($19 | 0) != ($4 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$2 + 132 >> 2] = $19;
 $6 = HEAP32[$0 + 56 >> 2];
 $3 = HEAP32[$6 + 8 >> 2];
 $4 = HEAP32[$2 + 156 >> 2];
 if (($3 | 0) < ($4 | 0)) {
  if (HEAP32[$6 + 12 >> 2] < ($4 | 0)) {
   label$38 : {
    if (!$4) {
     $11 = 0;
     $1 = $3;
     break label$38;
    }
    $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 4, 16);
    $1 = HEAP32[$6 + 8 >> 2];
   }
   $14 = $1;
   if (($14 | 0) >= 1) {
    $5 = 0;
    while (1) {
     $9 = $5 << 4;
     $10 = $11 + $9 | 0;
     $9 = HEAP32[$6 + 16 >> 2] + $9 | 0;
     $8 = HEAP32[$9 >> 2];
     $7 = HEAP32[$9 + 4 >> 2];
     $1 = $8;
     $8 = $10;
     HEAP32[$8 >> 2] = $1;
     HEAP32[$8 + 4 >> 2] = $7;
     $8 = HEAP32[$9 + 12 >> 2];
     $7 = HEAP32[$9 + 8 >> 2];
     $1 = $7;
     $7 = $10;
     HEAP32[$7 + 8 >> 2] = $1;
     HEAP32[$7 + 12 >> 2] = $8;
     $5 = $5 + 1 | 0;
     if (($14 | 0) != ($5 | 0)) {
      continue;
     }
     break;
    }
   }
   $5 = HEAP32[$6 + 16 >> 2];
   if ($5) {
    if (HEAPU8[$6 + 20 | 0]) {
     btAlignedFreeInternal_28void__29($5);
    }
    HEAP32[$6 + 16 >> 2] = 0;
   }
   HEAP32[$6 + 16 >> 2] = $11;
   HEAP32[$6 + 12 >> 2] = $4;
   HEAP8[$6 + 20 | 0] = 1;
  }
  while (1) {
   $7 = HEAP32[$2 + 52 >> 2];
   $8 = HEAP32[$2 + 48 >> 2];
   $5 = HEAP32[$6 + 16 >> 2] + ($3 << 4) | 0;
   HEAP32[$5 >> 2] = $8;
   HEAP32[$5 + 4 >> 2] = $7;
   $8 = HEAP32[$2 + 60 >> 2];
   $7 = HEAP32[$2 + 56 >> 2];
   HEAP32[$5 + 8 >> 2] = $7;
   HEAP32[$5 + 12 >> 2] = $8;
   $3 = $3 + 1 | 0;
   if (($4 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$6 + 8 >> 2] = $4;
 $3 = 0;
 if (($4 | 0) > 0) {
  while (1) {
   $5 = $3 << 4;
   $6 = $5 + HEAP32[HEAP32[$0 + 56 >> 2] + 16 >> 2] | 0;
   $5 = HEAP32[$2 + 164 >> 2] + $5 | 0;
   $7 = HEAP32[$5 + 4 >> 2];
   $8 = HEAP32[$5 >> 2];
   HEAP32[$6 >> 2] = $8;
   HEAP32[$6 + 4 >> 2] = $7;
   $8 = HEAP32[$5 + 12 >> 2];
   $7 = HEAP32[$5 + 8 >> 2];
   HEAP32[$6 + 8 >> 2] = $7;
   HEAP32[$6 + 12 >> 2] = $8;
   $3 = $3 + 1 | 0;
   if (($4 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 if (($19 | 0) >= 1) {
  while (1) {
   $15 = 0;
   $13 = HEAP32[$2 + 184 >> 2] + Math_imul(HEAP32[HEAP32[$2 + 204 >> 2] + ($18 << 2) >> 2], 12) | 0;
   $9 = $13;
   while (1) {
    $27 = Math_imul($18, 36);
    $11 = $27 + HEAP32[$2 + 140 >> 2] | 0;
    $7 = $11;
    $1 = HEAP32[(Math_imul(HEAP32[$9 + 4 >> 2], 12) + $9 | 0) + 8 >> 2];
    $5 = HEAP32[$11 + 4 >> 2];
    label$50 : {
     if (($5 | 0) != HEAP32[$11 + 8 >> 2]) {
      break label$50;
     }
     $23 = $5 ? $5 << 1 : 1;
     if (($5 | 0) >= ($23 | 0)) {
      break label$50;
     }
     $3 = 0;
     $6 = 0;
     if ($23) {
      $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($23 << 2, 16);
      $5 = HEAP32[$7 + 4 >> 2];
     }
     $21 = $11;
     $8 = $11;
     $10 = HEAP32[$11 + 12 >> 2];
     label$52 : {
      label$53 : {
       if (($5 | 0) >= 1) {
        while (1) {
         $4 = $3 << 2;
         HEAP32[$6 + $4 >> 2] = HEAP32[$4 + $10 >> 2];
         $3 = $3 + 1 | 0;
         if (($5 | 0) != ($3 | 0)) {
          continue;
         }
         break label$53;
        }
       }
       if (!$10) {
        break label$52;
       }
      }
      if (HEAPU8[$11 + 16 | 0]) {
       btAlignedFreeInternal_28void__29($10);
      }
      HEAP32[$8 + 12 >> 2] = 0;
      $5 = HEAP32[$7 + 4 >> 2];
     }
     HEAP8[$11 + 16 | 0] = 1;
     HEAP32[$8 + 12 >> 2] = $6;
     HEAP32[$21 + 8 >> 2] = $23;
    }
    HEAP32[HEAP32[$11 + 12 >> 2] + ($5 << 2) >> 2] = $1;
    HEAP32[$7 + 4 >> 2] = HEAP32[$7 + 4 >> 2] + 1;
    if (($15 | 0) <= 1) {
     $4 = HEAP32[$2 + 164 >> 2];
     $3 = $4 + ($1 << 4) | 0;
     $17 = HEAPF32[$3 + 4 >> 2];
     $4 = (HEAP32[$9 + 8 >> 2] << 4) + $4 | 0;
     $22 = HEAPF32[$4 + 4 >> 2];
     $16 = HEAPF32[$3 >> 2];
     $24 = HEAPF32[$4 >> 2];
     $12 = HEAPF32[$3 + 8 >> 2];
     $26 = HEAPF32[$4 + 8 >> 2];
     $3 = ($2 + 48 | 0) + ($15 << 4) | 0;
     HEAP32[$3 + 12 >> 2] = 0;
     $12 = Math_fround($26 - $12);
     $26 = $12;
     $16 = Math_fround($24 - $16);
     $17 = Math_fround($22 - $17);
     $12 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($16 * $16) + Math_fround($17 * $17)) + Math_fround($12 * $12)))));
     HEAPF32[$3 + 8 >> 2] = $26 * $12;
     HEAPF32[$3 + 4 >> 2] = $17 * $12;
     HEAPF32[$3 >> 2] = $16 * $12;
     $15 = $15 + 1 | 0;
    }
    $3 = Math_imul(HEAP32[$9 + 4 >> 2], 12) + $9 | 0;
    $9 = $3 + Math_imul(HEAP32[$3 >> 2], 12) | 0;
    if (($13 | 0) != ($9 | 0)) {
     continue;
    }
    break;
   }
   label$58 : {
    if (($15 | 0) == 2) {
     $12 = HEAPF32[$2 + 52 >> 2];
     $16 = HEAPF32[$2 + 68 >> 2];
     $17 = HEAPF32[$2 + 64 >> 2];
     $22 = HEAPF32[$2 + 56 >> 2];
     $24 = HEAPF32[$2 + 48 >> 2];
     $26 = HEAPF32[$2 + 72 >> 2];
     $3 = ($18 << 4) + $25 | 0;
     HEAP32[$3 + 12 >> 2] = 0;
     $29 = Math_fround(Math_fround($16 * $24) - Math_fround($12 * $17));
     $12 = Math_fround(Math_fround($12 * $26) - Math_fround($22 * $16));
     $16 = Math_fround(Math_fround($22 * $17) - Math_fround($26 * $24));
     $17 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround($29 * $29) + Math_fround(Math_fround($12 * $12) + Math_fround($16 * $16))))));
     HEAPF32[$3 + 8 >> 2] = $29 * $17;
     HEAPF32[$3 + 4 >> 2] = $16 * $17;
     $12 = Math_fround($12 * $17);
     HEAPF32[$3 >> 2] = $12;
     $4 = HEAP32[$2 + 140 >> 2];
     $5 = $27 + $4 | 0;
     HEAPF32[$5 + 20 >> 2] = $12;
     HEAP32[$5 + 24 >> 2] = HEAP32[$3 + 4 >> 2];
     $3 = HEAP32[$3 + 8 >> 2];
     HEAP32[$5 + 32 >> 2] = 1900671690;
     HEAP32[$5 + 28 >> 2] = $3;
     break label$58;
    }
    $3 = ($18 << 4) + $25 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = 0;
    $4 = HEAP32[$2 + 140 >> 2];
   }
   $10 = $4 + $27 | 0;
   $5 = HEAP32[$10 + 4 >> 2];
   label$60 : {
    if (($5 | 0) < 1) {
     $12 = Math_fround(1.0000000150474662e+30);
     break label$60;
    }
    $6 = HEAP32[$10 + 12 >> 2];
    $3 = ($18 << 4) + $25 | 0;
    $17 = HEAPF32[$3 + 8 >> 2];
    $22 = HEAPF32[$3 + 4 >> 2];
    $24 = HEAPF32[$3 >> 2];
    $9 = HEAP32[HEAP32[$0 + 56 >> 2] + 16 >> 2];
    $12 = Math_fround(1.0000000150474662e+30);
    $3 = 0;
    while (1) {
     $4 = (HEAP32[($3 << 2) + $6 >> 2] << 4) + $9 | 0;
     $16 = Math_fround(Math_fround(Math_fround(HEAPF32[$4 >> 2] * $24) + Math_fround(HEAPF32[$4 + 4 >> 2] * $22)) + Math_fround(HEAPF32[$4 + 8 >> 2] * $17));
     $12 = $12 > $16 ? $16 : $12;
     $3 = $3 + 1 | 0;
     if (($3 | 0) < ($5 | 0)) {
      continue;
     }
     break;
    }
   }
   HEAPF32[$10 + 32 >> 2] = -$12;
   $18 = $18 + 1 | 0;
   if (($19 | 0) != ($18 | 0)) {
    continue;
   }
   break;
  }
 }
 $13 = 0;
 if (HEAP32[$2 + 132 >> 2] > 0) {
  $21 = 0;
  $6 = 0;
  while (1) {
   label$65 : {
    if (($6 | 0) != ($13 | 0)) {
     break label$65;
    }
    $6 = $13 ? $13 << 1 : 1;
    if (($13 | 0) >= ($6 | 0)) {
     $6 = $13;
     break label$65;
    }
    $3 = 0;
    $5 = 0;
    if ($6) {
     $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 2, 16);
    }
    label$68 : {
     label$69 : {
      if ($13) {
       while (1) {
        $4 = $3 << 2;
        HEAP32[$5 + $4 >> 2] = HEAP32[$4 + $21 >> 2];
        $3 = $3 + 1 | 0;
        if (($13 | 0) != ($3 | 0)) {
         continue;
        }
        break label$69;
       }
      }
      if ($21) {
       break label$69;
      }
      $6 = 1;
      break label$68;
     }
     btAlignedFreeInternal_28void__29($21);
    }
    $21 = $5;
   }
   HEAP32[($13 << 2) + $21 >> 2] = $13;
   $13 = $13 + 1 | 0;
   if (($13 | 0) < HEAP32[$2 + 132 >> 2]) {
    continue;
   }
   break;
  }
  $19 = $2;
  while (1) {
   $6 = $13 + -1 | 0;
   $4 = HEAP32[($6 << 2) + $21 >> 2];
   $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(4, 16);
   HEAP32[$9 >> 2] = $4;
   label$73 : {
    label$74 : {
     if (($13 | 0) < 2) {
      $13 = $6;
      $18 = $9;
      $20 = 1;
      break label$74;
     }
     $3 = HEAP32[$2 + 140 >> 2];
     $4 = $3 + Math_imul($4, 36) | 0;
     $12 = HEAPF32[$4 + 20 >> 2];
     $16 = HEAPF32[$4 + 28 >> 2];
     $17 = HEAPF32[$4 + 24 >> 2];
     $10 = $13 + -2 | 0;
     $5 = 1;
     $13 = $6;
     $20 = 1;
     while (1) {
      $4 = HEAP32[($10 << 2) + $21 >> 2];
      $3 = Math_imul($4, 36) + $3 | 0;
      label$77 : {
       if (!(Math_fround(Math_fround(Math_fround($12 * HEAPF32[$3 + 20 >> 2]) + Math_fround($17 * HEAPF32[$3 + 24 >> 2])) + Math_fround($16 * HEAPF32[$3 + 28 >> 2])) > Math_fround(.9990000128746033))) {
        $11 = $5;
        $18 = $9;
        break label$77;
       }
       label$79 : {
        label$80 : {
         if (($5 | 0) != ($20 | 0)) {
          break label$80;
         }
         $11 = $5 ? $5 << 1 : 1;
         if (($5 | 0) >= ($11 | 0)) {
          break label$80;
         }
         $3 = 0;
         $18 = 0;
         if ($11) {
          $18 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($11 << 2, 16);
         }
         label$82 : {
          if (($5 | 0) >= 1) {
           while (1) {
            $6 = $3 << 2;
            HEAP32[$18 + $6 >> 2] = HEAP32[$6 + $9 >> 2];
            $3 = $3 + 1 | 0;
            if (($5 | 0) != ($3 | 0)) {
             continue;
            }
            break label$82;
           }
          }
          if (!$9) {
           break label$79;
          }
         }
         btAlignedFreeInternal_28void__29($9);
         break label$79;
        }
        $11 = $5;
        $18 = $9;
       }
       HEAP32[($20 << 2) + $18 >> 2] = $4;
       $20 = $20 + 1 | 0;
       $3 = 0;
       if (($13 | 0) < 1) {
        break label$77;
       }
       while (1) {
        $5 = ($3 << 2) + $21 | 0;
        if (HEAP32[$5 >> 2] != ($4 | 0)) {
         $3 = $3 + 1 | 0;
         if (($13 | 0) != ($3 | 0)) {
          continue;
         }
         break label$77;
        }
        break;
       }
       if (($13 | 0) <= ($3 | 0)) {
        break label$77;
       }
       $13 = $13 + -1 | 0;
       $3 = ($13 << 2) + $21 | 0;
       HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$3 >> 2] = $4;
      }
      if (($10 | 0) >= 1) {
       $10 = $10 + -1 | 0;
       $3 = HEAP32[$2 + 140 >> 2];
       $9 = $18;
       $5 = $11;
       continue;
      }
      break;
     }
     label$88 : {
      if (($20 | 0) > 1) {
       $4 = 0;
       HEAP32[$2 + 116 >> 2] = 0;
       HEAP8[$2 + 120 | 0] = 1;
       HEAP32[$2 + 108 >> 2] = 0;
       HEAP32[$2 + 112 >> 2] = 0;
       HEAP32[$2 + 40 >> 2] = 0;
       HEAP32[$2 + 44 >> 2] = 0;
       HEAP32[$2 + 32 >> 2] = 0;
       HEAP32[$2 + 36 >> 2] = 0;
       $12 = Math_fround(0);
       $16 = Math_fround(0);
       $17 = Math_fround(0);
       $28 = 0;
       while (1) {
        $3 = HEAP32[$2 + 140 >> 2] + Math_imul(HEAP32[($28 << 2) + $18 >> 2], 36) | 0;
        $22 = HEAPF32[$3 + 24 >> 2];
        $24 = HEAPF32[$3 + 28 >> 2];
        HEAPF32[$2 + 32 >> 2] = HEAPF32[$3 + 20 >> 2] + $17;
        HEAPF32[$2 + 40 >> 2] = $24 + $12;
        HEAPF32[$2 + 36 >> 2] = $22 + $16;
        $9 = HEAP32[$3 + 4 >> 2];
        if (($9 | 0) >= 1) {
         $30 = $3;
         $31 = $3;
         $14 = 0;
         while (1) {
          $1 = $2;
          $5 = HEAP32[HEAP32[$31 + 12 >> 2] + ($14 << 2) >> 2];
          $3 = HEAP32[HEAP32[$0 + 56 >> 2] + 16 >> 2] + ($5 << 4) | 0;
          $7 = HEAP32[$3 + 12 >> 2];
          $8 = HEAP32[$3 + 8 >> 2];
          $6 = $8;
          $10 = $2 + 16 | 0;
          $8 = $10;
          HEAP32[$8 >> 2] = $6;
          HEAP32[$8 + 4 >> 2] = $7;
          $8 = HEAP32[$3 + 4 >> 2];
          $7 = HEAP32[$3 >> 2];
          HEAP32[$2 + 8 >> 2] = $7;
          HEAP32[$2 + 12 >> 2] = $8;
          label$93 : {
           if (($4 | 0) >= 1) {
            $3 = 0;
            $6 = HEAP32[$2 + 116 >> 2];
            while (1) {
             if (HEAP32[(Math_imul($3, 24) + $6 | 0) + 20 >> 2] == ($5 | 0)) {
              break label$93;
             }
             $3 = $3 + 1 | 0;
             if (($3 | 0) < ($4 | 0)) {
              continue;
             }
             break;
            }
           }
           $27 = $2;
           $8 = HEAP32[$1 + 16 >> 2];
           $7 = HEAP32[$1 + 20 >> 2];
           $1 = $8;
           $15 = $2 + 56 | 0;
           $8 = $15;
           HEAP32[$8 >> 2] = $1;
           HEAP32[$8 + 4 >> 2] = $7;
           $8 = HEAP32[$2 + 12 >> 2];
           $7 = HEAP32[$2 + 8 >> 2];
           HEAP32[$2 + 48 >> 2] = $7;
           HEAP32[$2 + 52 >> 2] = $8;
           label$96 : {
            if (HEAP32[$2 + 112 >> 2] != ($4 | 0)) {
             break label$96;
            }
            $23 = $4 ? $4 << 1 : 1;
            if (($4 | 0) >= ($23 | 0)) {
             break label$96;
            }
            $3 = 0;
            $10 = 0;
            if ($23) {
             $10 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($23, 24), 16);
             $4 = HEAP32[$2 + 108 >> 2];
            }
            $11 = HEAP32[$2 + 116 >> 2];
            label$98 : {
             label$99 : {
              if (($4 | 0) >= 1) {
               while (1) {
                $9 = Math_imul($3, 24);
                $6 = $10 + $9 | 0;
                $9 = $9 + $11 | 0;
                $7 = HEAP32[$9 + 4 >> 2];
                $8 = HEAP32[$9 >> 2];
                HEAP32[$6 >> 2] = $8;
                HEAP32[$6 + 4 >> 2] = $7;
                $8 = HEAP32[$9 + 20 >> 2];
                $7 = HEAP32[$9 + 16 >> 2];
                HEAP32[$6 + 16 >> 2] = $7;
                HEAP32[$6 + 20 >> 2] = $8;
                $7 = HEAP32[$9 + 12 >> 2];
                $8 = HEAP32[$9 + 8 >> 2];
                HEAP32[$6 + 8 >> 2] = $8;
                HEAP32[$6 + 12 >> 2] = $7;
                $3 = $3 + 1 | 0;
                if (($4 | 0) != ($3 | 0)) {
                 continue;
                }
                break label$99;
               }
              }
              if (!$11) {
               break label$98;
              }
             }
             if (HEAPU8[$2 + 120 | 0]) {
              btAlignedFreeInternal_28void__29($11);
              $4 = HEAP32[$2 + 108 >> 2];
             }
             HEAP32[$2 + 116 >> 2] = 0;
            }
            HEAP32[$2 + 116 >> 2] = $10;
            HEAP8[$2 + 120 | 0] = 1;
            HEAP32[$2 + 112 >> 2] = $23;
           }
           $8 = HEAP32[$2 + 52 >> 2];
           $7 = HEAP32[$2 + 48 >> 2];
           $3 = HEAP32[$2 + 116 >> 2] + Math_imul($4, 24) | 0;
           HEAP32[$3 >> 2] = $7;
           HEAP32[$3 + 4 >> 2] = $8;
           $1 = $27;
           $8 = HEAP32[$1 + 56 >> 2];
           $7 = HEAP32[$1 + 60 >> 2];
           $4 = HEAP32[$2 - -64 >> 2];
           HEAP32[$3 + 20 >> 2] = $5;
           HEAP32[$3 + 16 >> 2] = $4;
           HEAP32[$3 + 8 >> 2] = $8;
           HEAP32[$3 + 12 >> 2] = $7;
           $4 = HEAP32[$2 + 108 >> 2] + 1 | 0;
           HEAP32[$2 + 108 >> 2] = $4;
           $9 = HEAP32[$30 + 4 >> 2];
          }
          $14 = $14 + 1 | 0;
          if (($14 | 0) < ($9 | 0)) {
           continue;
          }
          break;
         }
        }
        $12 = HEAPF32[$2 + 40 >> 2];
        $16 = HEAPF32[$2 + 36 >> 2];
        $17 = HEAPF32[$2 + 32 >> 2];
        $28 = $28 + 1 | 0;
        if (($28 | 0) != ($20 | 0)) {
         continue;
        }
        break;
       }
       HEAP32[$2 + 60 >> 2] = 0;
       HEAP8[$2 + 64 | 0] = 1;
       HEAP32[$2 + 52 >> 2] = 0;
       HEAP32[$2 + 56 >> 2] = 0;
       $3 = HEAP32[$2 + 140 >> 2] + Math_imul(HEAP32[$18 >> 2], 36) | 0;
       HEAP32[$2 + 68 >> 2] = HEAP32[$3 + 20 >> 2];
       HEAP32[$2 + 72 >> 2] = HEAP32[$3 + 24 >> 2];
       HEAP32[$2 + 76 >> 2] = HEAP32[$3 + 28 >> 2];
       HEAP32[$2 + 80 >> 2] = HEAP32[$3 + 32 >> 2];
       $22 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($17 * $17) + Math_fround($16 * $16)) + Math_fround($12 * $12)))));
       HEAPF32[$2 + 32 >> 2] = $17 * $22;
       HEAPF32[$2 + 36 >> 2] = $16 * $22;
       HEAPF32[$2 + 40 >> 2] = $12 * $22;
       HEAP32[$2 + 20 >> 2] = 0;
       HEAP8[$2 + 24 | 0] = 1;
       HEAP32[$2 + 12 >> 2] = 0;
       HEAP32[$2 + 16 >> 2] = 0;
       GrahamScanConvexHull2D_28btAlignedObjectArray_GrahamVector3___2c_20btAlignedObjectArray_GrahamVector3___2c_20btVector3_20const__29($2 + 104 | 0, $2 + 8 | 0, $2 + 32 | 0);
       if (HEAP32[$2 + 12 >> 2] <= 0) {
        $4 = HEAP32[$2 + 108 >> 2];
        break label$88;
       }
       $11 = 0;
       $10 = HEAP32[$2 + 52 >> 2];
       while (1) {
        $14 = Math_imul($11, 24);
        $1 = $14 + HEAP32[$2 + 20 >> 2] | 0;
        label$105 : {
         if (HEAP32[$2 + 56 >> 2] != ($10 | 0)) {
          break label$105;
         }
         $15 = $10 ? $10 << 1 : 1;
         if (($10 | 0) >= ($15 | 0)) {
          break label$105;
         }
         $3 = 0;
         $5 = 0;
         if ($15) {
          $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($15 << 2, 16);
          $10 = HEAP32[$2 + 52 >> 2];
         }
         $6 = HEAP32[$2 + 60 >> 2];
         label$107 : {
          label$108 : {
           if (($10 | 0) >= 1) {
            while (1) {
             $4 = $3 << 2;
             HEAP32[$5 + $4 >> 2] = HEAP32[$4 + $6 >> 2];
             $3 = $3 + 1 | 0;
             if (($10 | 0) != ($3 | 0)) {
              continue;
             }
             break label$108;
            }
           }
           if (!$6) {
            break label$107;
           }
          }
          if (HEAPU8[$2 + 64 | 0]) {
           btAlignedFreeInternal_28void__29($6);
          }
          HEAP32[$2 + 60 >> 2] = 0;
          $10 = HEAP32[$2 + 52 >> 2];
         }
         HEAP32[$2 + 60 >> 2] = $5;
         HEAP8[$2 + 64 | 0] = 1;
         HEAP32[$2 + 56 >> 2] = $15;
        }
        HEAP32[HEAP32[$2 + 60 >> 2] + ($10 << 2) >> 2] = HEAP32[$1 + 20 >> 2];
        $10 = HEAP32[$2 + 52 >> 2] + 1 | 0;
        HEAP32[$2 + 52 >> 2] = $10;
        $4 = HEAP32[$2 + 108 >> 2];
        label$112 : {
         if (($4 | 0) < 1) {
          break label$112;
         }
         $5 = HEAP32[(HEAP32[$2 + 20 >> 2] + $14 | 0) + 20 >> 2];
         $3 = 0;
         $6 = HEAP32[$2 + 116 >> 2];
         while (1) {
          $9 = Math_imul($3, 24) + $6 | 0;
          if (HEAP32[$9 + 20 >> 2] != ($5 | 0)) {
           $3 = $3 + 1 | 0;
           if (($3 | 0) < ($4 | 0)) {
            continue;
           }
           break label$112;
          }
          break;
         }
         HEAP32[$9 + 20 >> 2] = -1;
        }
        $11 = $11 + 1 | 0;
        if (($11 | 0) < HEAP32[$2 + 12 >> 2]) {
         continue;
        }
        break;
       }
       break label$88;
      }
      $3 = ($20 | 0) != 1;
      $20 = 1;
      if ($3) {
       break label$73;
      }
      break label$74;
     }
     label$115 : {
      if (($4 | 0) >= 1) {
       $15 = 0;
       $1 = HEAP32[$2 + 140 >> 2];
       $14 = HEAP32[$2 + 132 >> 2];
       $23 = HEAP32[$2 + 116 >> 2];
       while (1) {
        $9 = HEAP32[(Math_imul($15, 24) + $23 | 0) + 20 >> 2];
        label$118 : {
         if (($9 | 0) == -1) {
          break label$118;
         }
         $5 = 0;
         if (($14 | 0) < 1) {
          break label$118;
         }
         while (1) {
          $3 = 0;
          label$120 : {
           if (($20 | 0) > 0) {
            while (1) {
             if (HEAP32[($3 << 2) + $18 >> 2] == ($5 | 0)) {
              break label$120;
             }
             $3 = $3 + 1 | 0;
             if (($20 | 0) != ($3 | 0)) {
              continue;
             }
             break;
            }
           }
           $3 = Math_imul($5, 36) + $1 | 0;
           $10 = HEAP32[$3 + 4 >> 2];
           if (($10 | 0) < 1) {
            break label$120;
           }
           $11 = HEAP32[$3 + 12 >> 2];
           $3 = 0;
           while (1) {
            $6 = 1;
            if (HEAP32[($3 << 2) + $11 >> 2] == ($9 | 0)) {
             break label$115;
            }
            $3 = $3 + 1 | 0;
            if (($3 | 0) < ($10 | 0)) {
             continue;
            }
            break;
           }
          }
          $5 = $5 + 1 | 0;
          if (($14 | 0) != ($5 | 0)) {
           continue;
          }
          break;
         }
        }
        $15 = $15 + 1 | 0;
        if (($15 | 0) < ($4 | 0)) {
         continue;
        }
        break;
       }
      }
      btAlignedObjectArray_btFace___push_back_28btFace_20const__29(HEAP32[$0 + 56 >> 2] + 24 | 0, $2 + 48 | 0);
      $6 = 0;
     }
     $3 = HEAP32[$2 + 20 >> 2];
     if ($3) {
      if (HEAPU8[$2 + 24 | 0]) {
       btAlignedFreeInternal_28void__29($3);
      }
      HEAP32[$2 + 20 >> 2] = 0;
     }
     $3 = HEAP32[$2 + 60 >> 2];
     if ($3) {
      if (HEAPU8[$2 + 64 | 0]) {
       btAlignedFreeInternal_28void__29($3);
      }
      HEAP32[$2 + 60 >> 2] = 0;
     }
     $3 = HEAP32[$2 + 116 >> 2];
     if ($3) {
      if (HEAPU8[$2 + 120 | 0]) {
       btAlignedFreeInternal_28void__29($3);
      }
      HEAP32[$2 + 116 >> 2] = 0;
     }
     if (!(($20 | 0) > 0 & $6)) {
      break label$73;
     }
    }
    $14 = 0;
    while (1) {
     $3 = HEAP32[($14 << 2) + $18 >> 2];
     HEAP32[$2 + 60 >> 2] = 0;
     HEAP32[$2 + 52 >> 2] = 0;
     HEAP32[$2 + 56 >> 2] = 0;
     $4 = HEAP32[$2 + 140 >> 2];
     HEAP8[$2 + 64 | 0] = 1;
     $11 = Math_imul($3, 36) + $4 | 0;
     $5 = HEAP32[$11 + 4 >> 2];
     label$131 : {
      if (($5 | 0) >= 1) {
       $15 = $5 << 2;
       $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($15, 16);
       $3 = 0;
       $9 = HEAP32[$2 + 60 >> 2];
       $10 = HEAP32[$2 + 52 >> 2];
       label$133 : {
        label$134 : {
         if (($10 | 0) >= 1) {
          while (1) {
           $4 = $3 << 2;
           HEAP32[$6 + $4 >> 2] = HEAP32[$4 + $9 >> 2];
           $3 = $3 + 1 | 0;
           if (($10 | 0) != ($3 | 0)) {
            continue;
           }
           break label$134;
          }
         }
         if (!$9) {
          break label$133;
         }
        }
        if (!HEAPU8[$2 + 64 | 0]) {
         break label$133;
        }
        btAlignedFreeInternal_28void__29($9);
       }
       HEAP32[$2 + 60 >> 2] = $6;
       HEAP8[$2 + 64 | 0] = 1;
       HEAP32[$2 + 56 >> 2] = $5;
       $3 = 0;
       memset($6, 0, $15);
       HEAP32[$2 + 52 >> 2] = $5;
       $6 = HEAP32[$11 + 12 >> 2];
       $9 = HEAP32[$2 + 60 >> 2];
       while (1) {
        $4 = $3 << 2;
        HEAP32[$9 + $4 >> 2] = HEAP32[$4 + $6 >> 2];
        $3 = $3 + 1 | 0;
        if (($5 | 0) != ($3 | 0)) {
         continue;
        }
        break;
       }
       break label$131;
      }
      HEAP32[$2 + 52 >> 2] = $5;
     }
     $8 = HEAP32[$11 + 24 >> 2];
     $7 = HEAP32[$11 + 20 >> 2];
     $1 = $7;
     $7 = $19;
     HEAP32[$7 + 68 >> 2] = $1;
     HEAP32[$7 + 72 >> 2] = $8;
     $7 = HEAP32[$11 + 32 >> 2];
     $8 = HEAP32[$11 + 28 >> 2];
     $1 = $8;
     $8 = $19;
     HEAP32[$8 + 76 >> 2] = $1;
     HEAP32[$8 + 80 >> 2] = $7;
     btAlignedObjectArray_btFace___push_back_28btFace_20const__29(HEAP32[$0 + 56 >> 2] + 24 | 0, $2 + 48 | 0);
     $3 = HEAP32[$2 + 60 >> 2];
     if ($3) {
      if (HEAPU8[$2 + 64 | 0]) {
       btAlignedFreeInternal_28void__29($3);
      }
      HEAP32[$2 + 60 >> 2] = 0;
     }
     $14 = $14 + 1 | 0;
     if (($14 | 0) < ($20 | 0)) {
      continue;
     }
     break;
    }
   }
   if ($18) {
    btAlignedFreeInternal_28void__29($18);
   }
   if ($13) {
    continue;
   }
   break;
  }
  $13 = $21;
 }
 btConvexPolyhedron__initialize_28_29(HEAP32[$0 + 56 >> 2]);
 if ($13) {
  btAlignedFreeInternal_28void__29($13);
 }
 $10 = HEAP32[$2 + 132 >> 2];
 if (($10 | 0) >= 1) {
  $4 = 0;
  while (1) {
   $3 = HEAP32[$2 + 140 >> 2] + Math_imul($4, 36) | 0;
   $0 = $3;
   $1 = $3;
   $9 = HEAP32[$3 + 12 >> 2];
   if ($9) {
    if (HEAPU8[$3 + 16 | 0]) {
     btAlignedFreeInternal_28void__29($9);
    }
    HEAP32[$0 + 12 >> 2] = 0;
   }
   HEAP8[$3 + 16 | 0] = 1;
   HEAP32[$0 + 12 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$3 + 8 >> 2] = 0;
   $4 = $4 + 1 | 0;
   if (($10 | 0) != ($4 | 0)) {
    continue;
   }
   break;
  }
 }
 $3 = HEAP32[$2 + 140 >> 2];
 if ($3) {
  if (HEAPU8[$2 + 144 | 0]) {
   btAlignedFreeInternal_28void__29($3);
  }
  HEAP32[$2 + 140 >> 2] = 0;
 }
 if ($25) {
  btAlignedFreeInternal_28void__29($25);
 }
 btConvexHullComputer___btConvexHullComputer_28_29($2 + 152 | 0);
 $3 = HEAP32[$2 + 228 >> 2];
 if ($3) {
  if (HEAPU8[$2 + 232 | 0]) {
   btAlignedFreeInternal_28void__29($3);
  }
  HEAP32[$2 + 228 >> 2] = 0;
 }
 $0 = $2 + 240 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return 1;
}
function dlmalloc($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $10 = global$0 - 16 | 0;
 $1 = $10;
 if ($10 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 label$2 : {
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            if ($0 >>> 0 <= 244) {
             $6 = HEAP32[6265];
             $4 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8;
             $1 = $4 >>> 3 | 0;
             $0 = $6 >>> $1 | 0;
             if ($0 & 3) {
              $4 = (($0 ^ -1) & 1) + $1 | 0;
              $2 = $4 << 3;
              $1 = HEAP32[$2 + 25108 >> 2];
              $0 = $1 + 8 | 0;
              $2 = $2 + 25100 | 0;
              $3 = HEAP32[$1 + 8 >> 2];
              label$15 : {
               if (($2 | 0) == ($3 | 0)) {
                HEAP32[6265] = __wasm_rotl_i32(-2, $4) & $6;
                break label$15;
               }
               HEAP32[$3 + 12 >> 2] = $2;
               HEAP32[$2 + 8 >> 2] = $3;
              }
              $3 = $4 << 3;
              HEAP32[$1 + 4 >> 2] = $3 | 3;
              $1 = $1 + $3 | 0;
              HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
              break label$2;
             }
             $8 = HEAP32[6267];
             if ($4 >>> 0 <= $8 >>> 0) {
              break label$12;
             }
             if ($0) {
              $2 = $0 << $1;
              $0 = 2 << $1;
              $0 = $2 & ($0 | 0 - $0);
              $0 = ($0 & 0 - $0) + -1 | 0;
              $1 = $0;
              $0 = $0 >>> 12 & 16;
              $1 = $1 >>> $0 | 0;
              $3 = $1 >>> 5 & 8;
              $2 = $0 | $3;
              $0 = $1 >>> $3 | 0;
              $1 = $0 >>> 2 & 4;
              $2 = $2 | $1;
              $0 = $0 >>> $1 | 0;
              $1 = $0 >>> 1 & 2;
              $2 = $2 | $1;
              $0 = $0 >>> $1 | 0;
              $1 = $0 >>> 1 & 1;
              $3 = ($2 | $1) + ($0 >>> $1 | 0) | 0;
              $2 = $3 << 3;
              $1 = HEAP32[$2 + 25108 >> 2];
              $0 = HEAP32[$1 + 8 >> 2];
              $2 = $2 + 25100 | 0;
              label$18 : {
               if (($0 | 0) == ($2 | 0)) {
                $6 = __wasm_rotl_i32(-2, $3) & $6;
                HEAP32[6265] = $6;
                break label$18;
               }
               HEAP32[$0 + 12 >> 2] = $2;
               HEAP32[$2 + 8 >> 2] = $0;
              }
              $0 = $1 + 8 | 0;
              HEAP32[$1 + 4 >> 2] = $4 | 3;
              $2 = $1 + $4 | 0;
              $5 = $3 << 3;
              $3 = $5 - $4 | 0;
              HEAP32[$2 + 4 >> 2] = $3 | 1;
              HEAP32[$1 + $5 >> 2] = $3;
              if ($8) {
               $5 = $8 >>> 3 | 0;
               $4 = ($5 << 3) + 25100 | 0;
               $1 = HEAP32[6270];
               $5 = 1 << $5;
               label$21 : {
                if (!($6 & $5)) {
                 HEAP32[6265] = $5 | $6;
                 $5 = $4;
                 break label$21;
                }
                $5 = HEAP32[$4 + 8 >> 2];
               }
               HEAP32[$4 + 8 >> 2] = $1;
               HEAP32[$5 + 12 >> 2] = $1;
               HEAP32[$1 + 12 >> 2] = $4;
               HEAP32[$1 + 8 >> 2] = $5;
              }
              HEAP32[6270] = $2;
              HEAP32[6267] = $3;
              break label$2;
             }
             $9 = HEAP32[6266];
             if (!$9) {
              break label$12;
             }
             $0 = (0 - $9 & $9) + -1 | 0;
             $1 = $0;
             $0 = $0 >>> 12 & 16;
             $1 = $1 >>> $0 | 0;
             $3 = $1 >>> 5 & 8;
             $2 = $0 | $3;
             $0 = $1 >>> $3 | 0;
             $1 = $0 >>> 2 & 4;
             $2 = $2 | $1;
             $0 = $0 >>> $1 | 0;
             $1 = $0 >>> 1 & 2;
             $2 = $2 | $1;
             $0 = $0 >>> $1 | 0;
             $1 = $0 >>> 1 & 1;
             $2 = HEAP32[(($2 | $1) + ($0 >>> $1 | 0) << 2) + 25364 >> 2];
             $1 = (HEAP32[$2 + 4 >> 2] & -8) - $4 | 0;
             $3 = $2;
             while (1) {
              label$24 : {
               $0 = HEAP32[$3 + 16 >> 2];
               if (!$0) {
                $0 = HEAP32[$3 + 20 >> 2];
                if (!$0) {
                 break label$24;
                }
               }
               $3 = (HEAP32[$0 + 4 >> 2] & -8) - $4 | 0;
               $5 = $3;
               $3 = $3 >>> 0 < $1 >>> 0;
               $1 = $3 ? $5 : $1;
               $2 = $3 ? $0 : $2;
               $3 = $0;
               continue;
              }
              break;
             }
             $11 = HEAP32[$2 + 24 >> 2];
             $5 = HEAP32[$2 + 12 >> 2];
             if (($5 | 0) != ($2 | 0)) {
              $0 = HEAP32[$2 + 8 >> 2];
              HEAP32[$0 + 12 >> 2] = $5;
              HEAP32[$5 + 8 >> 2] = $0;
              break label$3;
             }
             $3 = $2 + 20 | 0;
             $0 = HEAP32[$3 >> 2];
             if (!$0) {
              $0 = HEAP32[$2 + 16 >> 2];
              if (!$0) {
               break label$11;
              }
              $3 = $2 + 16 | 0;
             }
             while (1) {
              $7 = $3;
              $5 = $0;
              $3 = $0 + 20 | 0;
              $0 = HEAP32[$3 >> 2];
              if ($0) {
               continue;
              }
              $3 = $5 + 16 | 0;
              $0 = HEAP32[$5 + 16 >> 2];
              if ($0) {
               continue;
              }
              break;
             }
             HEAP32[$7 >> 2] = 0;
             break label$3;
            }
            $4 = -1;
            if ($0 >>> 0 > 4294967231) {
             break label$12;
            }
            $0 = $0 + 11 | 0;
            $4 = $0 & -8;
            $8 = HEAP32[6266];
            if (!$8) {
             break label$12;
            }
            $0 = $0 >>> 8 | 0;
            $7 = 0;
            label$30 : {
             if (!$0) {
              break label$30;
             }
             $7 = 31;
             if ($4 >>> 0 > 16777215) {
              break label$30;
             }
             $1 = $0 + 1048320 >>> 16 & 8;
             $0 = $0 << $1;
             $2 = $0;
             $0 = $0 + 520192 >>> 16 & 4;
             $3 = $2 << $0;
             $2 = $3;
             $3 = $3 + 245760 >>> 16 & 2;
             $0 = ($2 << $3 >>> 15 | 0) - ($0 | $1 | $3) | 0;
             $7 = ($0 << 1 | $4 >>> $0 + 21 & 1) + 28 | 0;
            }
            $3 = 0 - $4 | 0;
            $1 = HEAP32[($7 << 2) + 25364 >> 2];
            label$31 : {
             label$32 : {
              label$33 : {
               if (!$1) {
                $0 = 0;
                break label$33;
               }
               $2 = $4 << (($7 | 0) == 31 ? 0 : 25 - ($7 >>> 1 | 0) | 0);
               $0 = 0;
               while (1) {
                label$36 : {
                 $6 = (HEAP32[$1 + 4 >> 2] & -8) - $4 | 0;
                 if ($6 >>> 0 >= $3 >>> 0) {
                  break label$36;
                 }
                 $5 = $1;
                 $3 = $6;
                 if ($3) {
                  break label$36;
                 }
                 $3 = 0;
                 $0 = $1;
                 break label$32;
                }
                $6 = HEAP32[$1 + 20 >> 2];
                $1 = HEAP32[(($2 >>> 29 & 4) + $1 | 0) + 16 >> 2];
                $0 = $6 ? ($6 | 0) == ($1 | 0) ? $0 : $6 : $0;
                $2 = $2 << (($1 | 0) != 0);
                if ($1) {
                 continue;
                }
                break;
               }
              }
              if (!($0 | $5)) {
               $0 = 2 << $7;
               $0 = ($0 | 0 - $0) & $8;
               if (!$0) {
                break label$12;
               }
               $0 = (0 - $0 & $0) + -1 | 0;
               $1 = $0;
               $0 = $0 >>> 12 & 16;
               $1 = $1 >>> $0 | 0;
               $2 = $1 >>> 5 & 8;
               $6 = $0 | $2;
               $0 = $1 >>> $2 | 0;
               $1 = $0 >>> 2 & 4;
               $2 = $6 | $1;
               $0 = $0 >>> $1 | 0;
               $1 = $0 >>> 1 & 2;
               $2 = $2 | $1;
               $0 = $0 >>> $1 | 0;
               $1 = $0 >>> 1 & 1;
               $0 = HEAP32[(($2 | $1) + ($0 >>> $1 | 0) << 2) + 25364 >> 2];
              }
              if (!$0) {
               break label$31;
              }
             }
             while (1) {
              $6 = (HEAP32[$0 + 4 >> 2] & -8) - $4 | 0;
              $2 = $6 >>> 0 < $3 >>> 0;
              $3 = $2 ? $6 : $3;
              $5 = $2 ? $0 : $5;
              $1 = HEAP32[$0 + 16 >> 2];
              if (!$1) {
               $1 = HEAP32[$0 + 20 >> 2];
              }
              $0 = $1;
              if ($0) {
               continue;
              }
              break;
             }
            }
            if (!$5 | $3 >>> 0 >= HEAP32[6267] - $4 >>> 0) {
             break label$12;
            }
            $7 = HEAP32[$5 + 24 >> 2];
            $2 = HEAP32[$5 + 12 >> 2];
            if (($5 | 0) != ($2 | 0)) {
             $0 = HEAP32[$5 + 8 >> 2];
             HEAP32[$0 + 12 >> 2] = $2;
             HEAP32[$2 + 8 >> 2] = $0;
             break label$4;
            }
            $1 = $5 + 20 | 0;
            $0 = HEAP32[$1 >> 2];
            if (!$0) {
             $0 = HEAP32[$5 + 16 >> 2];
             if (!$0) {
              break label$10;
             }
             $1 = $5 + 16 | 0;
            }
            while (1) {
             $6 = $1;
             $2 = $0;
             $1 = $0 + 20 | 0;
             $0 = HEAP32[$1 >> 2];
             if ($0) {
              continue;
             }
             $1 = $2 + 16 | 0;
             $0 = HEAP32[$2 + 16 >> 2];
             if ($0) {
              continue;
             }
             break;
            }
            HEAP32[$6 >> 2] = 0;
            break label$4;
           }
           $0 = HEAP32[6267];
           if ($0 >>> 0 >= $4 >>> 0) {
            $1 = HEAP32[6270];
            $3 = $0 - $4 | 0;
            label$45 : {
             if ($3 >>> 0 >= 16) {
              HEAP32[6267] = $3;
              $2 = $1 + $4 | 0;
              HEAP32[6270] = $2;
              HEAP32[$2 + 4 >> 2] = $3 | 1;
              HEAP32[$0 + $1 >> 2] = $3;
              HEAP32[$1 + 4 >> 2] = $4 | 3;
              break label$45;
             }
             HEAP32[6270] = 0;
             HEAP32[6267] = 0;
             HEAP32[$1 + 4 >> 2] = $0 | 3;
             $0 = $0 + $1 | 0;
             HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
            }
            $0 = $1 + 8 | 0;
            break label$2;
           }
           $2 = HEAP32[6268];
           if ($2 >>> 0 > $4 >>> 0) {
            $1 = $2 - $4 | 0;
            HEAP32[6268] = $1;
            $0 = HEAP32[6271];
            $3 = $4 + $0 | 0;
            HEAP32[6271] = $3;
            HEAP32[$3 + 4 >> 2] = $1 | 1;
            HEAP32[$0 + 4 >> 2] = $4 | 3;
            $0 = $0 + 8 | 0;
            break label$2;
           }
           $0 = 0;
           $8 = $4 + 47 | 0;
           $3 = $8;
           if (HEAP32[6383]) {
            $1 = HEAP32[6385];
           } else {
            HEAP32[6386] = -1;
            HEAP32[6387] = -1;
            HEAP32[6384] = 4096;
            HEAP32[6385] = 4096;
            HEAP32[6383] = $10 + 12 & -16 ^ 1431655768;
            HEAP32[6388] = 0;
            HEAP32[6376] = 0;
            $1 = 4096;
           }
           $6 = $3 + $1 | 0;
           $7 = 0 - $1 | 0;
           $5 = $6 & $7;
           if ($5 >>> 0 <= $4 >>> 0) {
            break label$2;
           }
           $1 = HEAP32[6375];
           if ($1) {
            $3 = HEAP32[6373];
            $9 = $5 + $3 | 0;
            if ($9 >>> 0 <= $3 >>> 0 | $9 >>> 0 > $1 >>> 0) {
             break label$2;
            }
           }
           if (HEAPU8[25504] & 4) {
            break label$7;
           }
           label$51 : {
            label$52 : {
             $1 = HEAP32[6271];
             if ($1) {
              $0 = 25508;
              while (1) {
               $3 = HEAP32[$0 >> 2];
               if (HEAP32[$0 + 4 >> 2] + $3 >>> 0 > $1 >>> 0 ? $3 >>> 0 <= $1 >>> 0 : 0) {
                break label$52;
               }
               $0 = HEAP32[$0 + 8 >> 2];
               if ($0) {
                continue;
               }
               break;
              }
             }
             $2 = sbrk(0);
             if (($2 | 0) == -1) {
              break label$8;
             }
             $6 = $5;
             $0 = HEAP32[6384];
             $1 = $0 + -1 | 0;
             if ($2 & $1) {
              $6 = ($5 - $2 | 0) + ($1 + $2 & 0 - $0) | 0;
             }
             if ($6 >>> 0 <= $4 >>> 0 | $6 >>> 0 > 2147483646) {
              break label$8;
             }
             $0 = HEAP32[6375];
             if ($0) {
              $1 = HEAP32[6373];
              $3 = $6 + $1 | 0;
              if ($3 >>> 0 <= $1 >>> 0 | $3 >>> 0 > $0 >>> 0) {
               break label$8;
              }
             }
             $0 = sbrk($6);
             if (($2 | 0) != ($0 | 0)) {
              break label$51;
             }
             break label$6;
            }
            $6 = $6 - $2 & $7;
            if ($6 >>> 0 > 2147483646) {
             break label$8;
            }
            $2 = sbrk($6);
            if (($2 | 0) == (HEAP32[$0 >> 2] + HEAP32[$0 + 4 >> 2] | 0)) {
             break label$9;
            }
            $0 = $2;
           }
           if (!(($0 | 0) == -1 | $4 + 48 >>> 0 <= $6 >>> 0)) {
            $1 = HEAP32[6385];
            $1 = $1 + ($8 - $6 | 0) & 0 - $1;
            if ($1 >>> 0 > 2147483646) {
             $2 = $0;
             break label$6;
            }
            if ((sbrk($1) | 0) != -1) {
             $6 = $1 + $6 | 0;
             $2 = $0;
             break label$6;
            }
            sbrk(0 - $6 | 0);
            break label$8;
           }
           $2 = $0;
           if (($0 | 0) != -1) {
            break label$6;
           }
           break label$8;
          }
          $5 = 0;
          break label$3;
         }
         $2 = 0;
         break label$4;
        }
        if (($2 | 0) != -1) {
         break label$6;
        }
       }
       HEAP32[6376] = HEAP32[6376] | 4;
      }
      if ($5 >>> 0 > 2147483646) {
       break label$5;
      }
      $2 = sbrk($5);
      $0 = sbrk(0);
      if ($2 >>> 0 >= $0 >>> 0 | ($2 | 0) == -1 | ($0 | 0) == -1) {
       break label$5;
      }
      $6 = $0 - $2 | 0;
      if ($6 >>> 0 <= $4 + 40 >>> 0) {
       break label$5;
      }
     }
     $0 = HEAP32[6373] + $6 | 0;
     HEAP32[6373] = $0;
     if ($0 >>> 0 > HEAPU32[6374]) {
      HEAP32[6374] = $0;
     }
     label$62 : {
      label$63 : {
       label$64 : {
        $1 = HEAP32[6271];
        if ($1) {
         $0 = 25508;
         while (1) {
          $3 = HEAP32[$0 >> 2];
          $5 = HEAP32[$0 + 4 >> 2];
          if (($3 + $5 | 0) == ($2 | 0)) {
           break label$64;
          }
          $0 = HEAP32[$0 + 8 >> 2];
          if ($0) {
           continue;
          }
          break;
         }
         break label$63;
        }
        $0 = HEAP32[6269];
        if (!($2 >>> 0 >= $0 >>> 0 ? $0 : 0)) {
         HEAP32[6269] = $2;
        }
        $0 = 0;
        HEAP32[6378] = $6;
        HEAP32[6377] = $2;
        HEAP32[6273] = -1;
        HEAP32[6274] = HEAP32[6383];
        HEAP32[6380] = 0;
        while (1) {
         $1 = $0 << 3;
         $3 = $1 + 25100 | 0;
         HEAP32[$1 + 25108 >> 2] = $3;
         HEAP32[$1 + 25112 >> 2] = $3;
         $0 = $0 + 1 | 0;
         if (($0 | 0) != 32) {
          continue;
         }
         break;
        }
        $0 = $6 + -40 | 0;
        $1 = $2 + 8 & 7 ? -8 - $2 & 7 : 0;
        $3 = $0 - $1 | 0;
        HEAP32[6268] = $3;
        $1 = $1 + $2 | 0;
        HEAP32[6271] = $1;
        HEAP32[$1 + 4 >> 2] = $3 | 1;
        HEAP32[($0 + $2 | 0) + 4 >> 2] = 40;
        HEAP32[6272] = HEAP32[6387];
        break label$62;
       }
       if (HEAPU8[$0 + 12 | 0] & 8 | $2 >>> 0 <= $1 >>> 0 | $3 >>> 0 > $1 >>> 0) {
        break label$63;
       }
       HEAP32[$0 + 4 >> 2] = $5 + $6;
       $0 = $1 + 8 & 7 ? -8 - $1 & 7 : 0;
       $3 = $1 + $0 | 0;
       HEAP32[6271] = $3;
       $2 = HEAP32[6268] + $6 | 0;
       $0 = $2 - $0 | 0;
       HEAP32[6268] = $0;
       HEAP32[$3 + 4 >> 2] = $0 | 1;
       HEAP32[($1 + $2 | 0) + 4 >> 2] = 40;
       HEAP32[6272] = HEAP32[6387];
       break label$62;
      }
      $5 = HEAP32[6269];
      if ($2 >>> 0 < $5 >>> 0) {
       HEAP32[6269] = $2;
      }
      $3 = $2 + $6 | 0;
      $0 = 25508;
      label$70 : {
       label$71 : {
        label$72 : {
         label$73 : {
          label$74 : {
           label$75 : {
            while (1) {
             if (HEAP32[$0 >> 2] != ($3 | 0)) {
              $0 = HEAP32[$0 + 8 >> 2];
              if ($0) {
               continue;
              }
              break label$75;
             }
             break;
            }
            if (!(HEAPU8[$0 + 12 | 0] & 8)) {
             break label$74;
            }
           }
           $0 = 25508;
           while (1) {
            $3 = HEAP32[$0 >> 2];
            if ($3 >>> 0 <= $1 >>> 0) {
             $3 = HEAP32[$0 + 4 >> 2] + $3 | 0;
             if ($3 >>> 0 > $1 >>> 0) {
              break label$73;
             }
            }
            $0 = HEAP32[$0 + 8 >> 2];
            continue;
           }
          }
          HEAP32[$0 >> 2] = $2;
          HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + $6;
          $7 = ($2 + 8 & 7 ? -8 - $2 & 7 : 0) + $2 | 0;
          HEAP32[$7 + 4 >> 2] = $4 | 3;
          $2 = ($3 + 8 & 7 ? -8 - $3 & 7 : 0) + $3 | 0;
          $0 = ($2 - $7 | 0) - $4 | 0;
          $3 = $4 + $7 | 0;
          if (($1 | 0) == ($2 | 0)) {
           HEAP32[6271] = $3;
           $0 = HEAP32[6268] + $0 | 0;
           HEAP32[6268] = $0;
           HEAP32[$3 + 4 >> 2] = $0 | 1;
           break label$71;
          }
          if (HEAP32[6270] == ($2 | 0)) {
           HEAP32[6270] = $3;
           $0 = HEAP32[6267] + $0 | 0;
           HEAP32[6267] = $0;
           HEAP32[$3 + 4 >> 2] = $0 | 1;
           HEAP32[$0 + $3 >> 2] = $0;
           break label$71;
          }
          $1 = HEAP32[$2 + 4 >> 2];
          if (($1 & 3) == 1) {
           $8 = $1 & -8;
           label$83 : {
            if ($1 >>> 0 <= 255) {
             $9 = $1 >>> 3 | 0;
             $1 = ($9 << 3) + 25100 | 0;
             $6 = HEAP32[$2 + 8 >> 2];
             $4 = HEAP32[$2 + 12 >> 2];
             if (($6 | 0) == ($4 | 0)) {
              HEAP32[6265] = HEAP32[6265] & __wasm_rotl_i32(-2, $9);
              break label$83;
             }
             HEAP32[$6 + 12 >> 2] = $4;
             HEAP32[$4 + 8 >> 2] = $6;
             break label$83;
            }
            $9 = HEAP32[$2 + 24 >> 2];
            $6 = HEAP32[$2 + 12 >> 2];
            label$86 : {
             if (($6 | 0) != ($2 | 0)) {
              $1 = HEAP32[$2 + 8 >> 2];
              HEAP32[$1 + 12 >> 2] = $6;
              HEAP32[$6 + 8 >> 2] = $1;
              break label$86;
             }
             label$89 : {
              $1 = $2 + 20 | 0;
              $4 = HEAP32[$1 >> 2];
              if ($4) {
               break label$89;
              }
              $1 = $2 + 16 | 0;
              $4 = HEAP32[$1 >> 2];
              if ($4) {
               break label$89;
              }
              $6 = 0;
              break label$86;
             }
             while (1) {
              $5 = $1;
              $6 = $4;
              $1 = $4 + 20 | 0;
              $4 = HEAP32[$1 >> 2];
              if ($4) {
               continue;
              }
              $1 = $6 + 16 | 0;
              $4 = HEAP32[$6 + 16 >> 2];
              if ($4) {
               continue;
              }
              break;
             }
             HEAP32[$5 >> 2] = 0;
            }
            if (!$9) {
             break label$83;
            }
            $4 = HEAP32[$2 + 28 >> 2];
            $1 = ($4 << 2) + 25364 | 0;
            label$91 : {
             if (HEAP32[$1 >> 2] == ($2 | 0)) {
              HEAP32[$1 >> 2] = $6;
              if ($6) {
               break label$91;
              }
              HEAP32[6266] = HEAP32[6266] & __wasm_rotl_i32(-2, $4);
              break label$83;
             }
             HEAP32[(HEAP32[$9 + 16 >> 2] == ($2 | 0) ? 16 : 20) + $9 >> 2] = $6;
             if (!$6) {
              break label$83;
             }
            }
            HEAP32[$6 + 24 >> 2] = $9;
            $1 = HEAP32[$2 + 16 >> 2];
            if ($1) {
             HEAP32[$6 + 16 >> 2] = $1;
             HEAP32[$1 + 24 >> 2] = $6;
            }
            $1 = HEAP32[$2 + 20 >> 2];
            if (!$1) {
             break label$83;
            }
            HEAP32[$6 + 20 >> 2] = $1;
            HEAP32[$1 + 24 >> 2] = $6;
           }
           $2 = $2 + $8 | 0;
           $0 = $0 + $8 | 0;
          }
          HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] & -2;
          HEAP32[$3 + 4 >> 2] = $0 | 1;
          HEAP32[$0 + $3 >> 2] = $0;
          if ($0 >>> 0 <= 255) {
           $1 = $0 >>> 3 | 0;
           $0 = ($1 << 3) + 25100 | 0;
           $1 = 1 << $1;
           $4 = HEAP32[6265];
           label$95 : {
            if (!($1 & $4)) {
             HEAP32[6265] = $1 | $4;
             $1 = $0;
             break label$95;
            }
            $1 = HEAP32[$0 + 8 >> 2];
           }
           HEAP32[$0 + 8 >> 2] = $3;
           HEAP32[$1 + 12 >> 2] = $3;
           HEAP32[$3 + 12 >> 2] = $0;
           HEAP32[$3 + 8 >> 2] = $1;
           break label$71;
          }
          $5 = $3;
          $4 = $0 >>> 8 | 0;
          $1 = 0;
          label$97 : {
           if (!$4) {
            break label$97;
           }
           $1 = 31;
           if ($0 >>> 0 > 16777215) {
            break label$97;
           }
           $1 = $4 + 1048320 >>> 16 & 8;
           $4 = $4 << $1;
           $2 = $4;
           $4 = $4 + 520192 >>> 16 & 4;
           $2 = $2 << $4;
           $6 = $2;
           $2 = $2 + 245760 >>> 16 & 2;
           $1 = ($6 << $2 >>> 15 | 0) - ($1 | $4 | $2) | 0;
           $1 = ($1 << 1 | $0 >>> $1 + 21 & 1) + 28 | 0;
          }
          HEAP32[$5 + 28 >> 2] = $1;
          HEAP32[$3 + 16 >> 2] = 0;
          HEAP32[$3 + 20 >> 2] = 0;
          $4 = ($1 << 2) + 25364 | 0;
          $2 = HEAP32[6266];
          $5 = 1 << $1;
          label$98 : {
           if (!($2 & $5)) {
            HEAP32[6266] = $2 | $5;
            HEAP32[$4 >> 2] = $3;
            break label$98;
           }
           $1 = $0 << (($1 | 0) == 31 ? 0 : 25 - ($1 >>> 1 | 0) | 0);
           $2 = HEAP32[$4 >> 2];
           while (1) {
            $4 = $2;
            if ((HEAP32[$2 + 4 >> 2] & -8) == ($0 | 0)) {
             break label$72;
            }
            $2 = $1 >>> 29 | 0;
            $1 = $1 << 1;
            $6 = ($2 & 4) + $4 | 0;
            $5 = $6 + 16 | 0;
            $2 = HEAP32[$5 >> 2];
            if ($2) {
             continue;
            }
            break;
           }
           HEAP32[$6 + 16 >> 2] = $3;
          }
          HEAP32[$3 + 24 >> 2] = $4;
          HEAP32[$3 + 12 >> 2] = $3;
          HEAP32[$3 + 8 >> 2] = $3;
          break label$71;
         }
         $0 = $6 + -40 | 0;
         $5 = $2 + 8 & 7 ? -8 - $2 & 7 : 0;
         $7 = $0 - $5 | 0;
         HEAP32[6268] = $7;
         $5 = $2 + $5 | 0;
         HEAP32[6271] = $5;
         HEAP32[$5 + 4 >> 2] = $7 | 1;
         HEAP32[($0 + $2 | 0) + 4 >> 2] = 40;
         HEAP32[6272] = HEAP32[6387];
         $0 = (($3 + -39 & 7 ? 39 - $3 & 7 : 0) + $3 | 0) + -47 | 0;
         $5 = $0 >>> 0 < $1 + 16 >>> 0 ? $1 : $0;
         HEAP32[$5 + 4 >> 2] = 27;
         $0 = HEAP32[6380];
         $7 = HEAP32[6379];
         HEAP32[$5 + 16 >> 2] = $7;
         HEAP32[$5 + 20 >> 2] = $0;
         $7 = HEAP32[6378];
         $0 = HEAP32[6377];
         HEAP32[$5 + 8 >> 2] = $0;
         HEAP32[$5 + 12 >> 2] = $7;
         HEAP32[6379] = $5 + 8;
         HEAP32[6378] = $6;
         HEAP32[6377] = $2;
         HEAP32[6380] = 0;
         $0 = $5 + 24 | 0;
         while (1) {
          HEAP32[$0 + 4 >> 2] = 7;
          $2 = $0 + 8 | 0;
          $0 = $0 + 4 | 0;
          if ($3 >>> 0 > $2 >>> 0) {
           continue;
          }
          break;
         }
         if (($1 | 0) == ($5 | 0)) {
          break label$62;
         }
         HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] & -2;
         $6 = $5 - $1 | 0;
         HEAP32[$1 + 4 >> 2] = $6 | 1;
         HEAP32[$5 >> 2] = $6;
         if ($6 >>> 0 <= 255) {
          $3 = $6 >>> 3 | 0;
          $0 = ($3 << 3) + 25100 | 0;
          $2 = HEAP32[6265];
          $3 = 1 << $3;
          label$103 : {
           if (!($2 & $3)) {
            HEAP32[6265] = $2 | $3;
            $3 = $0;
            break label$103;
           }
           $3 = HEAP32[$0 + 8 >> 2];
          }
          HEAP32[$0 + 8 >> 2] = $1;
          HEAP32[$3 + 12 >> 2] = $1;
          HEAP32[$1 + 12 >> 2] = $0;
          HEAP32[$1 + 8 >> 2] = $3;
          break label$62;
         }
         HEAP32[$1 + 16 >> 2] = 0;
         HEAP32[$1 + 20 >> 2] = 0;
         $5 = $1;
         $3 = $6 >>> 8 | 0;
         $0 = 0;
         label$105 : {
          if (!$3) {
           break label$105;
          }
          $0 = 31;
          if ($6 >>> 0 > 16777215) {
           break label$105;
          }
          $0 = $3 + 1048320 >>> 16 & 8;
          $3 = $3 << $0;
          $2 = $3;
          $3 = $3 + 520192 >>> 16 & 4;
          $2 = $2 << $3;
          $7 = $2;
          $2 = $2 + 245760 >>> 16 & 2;
          $0 = ($7 << $2 >>> 15 | 0) - ($0 | $3 | $2) | 0;
          $0 = ($0 << 1 | $6 >>> $0 + 21 & 1) + 28 | 0;
         }
         HEAP32[$5 + 28 >> 2] = $0;
         $3 = ($0 << 2) + 25364 | 0;
         $2 = HEAP32[6266];
         $5 = 1 << $0;
         label$106 : {
          if (!($2 & $5)) {
           HEAP32[6266] = $2 | $5;
           HEAP32[$3 >> 2] = $1;
           break label$106;
          }
          $0 = $6 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1 | 0) | 0);
          $2 = HEAP32[$3 >> 2];
          while (1) {
           $3 = $2;
           if ((HEAP32[$2 + 4 >> 2] & -8) == ($6 | 0)) {
            break label$70;
           }
           $2 = $0 >>> 29 | 0;
           $0 = $0 << 1;
           $7 = ($2 & 4) + $3 | 0;
           $5 = $7 + 16 | 0;
           $2 = HEAP32[$5 >> 2];
           if ($2) {
            continue;
           }
           break;
          }
          HEAP32[$7 + 16 >> 2] = $1;
         }
         HEAP32[$1 + 24 >> 2] = $3;
         HEAP32[$1 + 12 >> 2] = $1;
         HEAP32[$1 + 8 >> 2] = $1;
         break label$62;
        }
        $0 = HEAP32[$4 + 8 >> 2];
        HEAP32[$0 + 12 >> 2] = $3;
        HEAP32[$4 + 8 >> 2] = $3;
        HEAP32[$3 + 24 >> 2] = 0;
        HEAP32[$3 + 12 >> 2] = $4;
        HEAP32[$3 + 8 >> 2] = $0;
       }
       $0 = $7 + 8 | 0;
       break label$2;
      }
      $0 = HEAP32[$3 + 8 >> 2];
      HEAP32[$0 + 12 >> 2] = $1;
      HEAP32[$3 + 8 >> 2] = $1;
      HEAP32[$1 + 24 >> 2] = 0;
      HEAP32[$1 + 12 >> 2] = $3;
      HEAP32[$1 + 8 >> 2] = $0;
     }
     $0 = HEAP32[6268];
     if ($0 >>> 0 <= $4 >>> 0) {
      break label$5;
     }
     $1 = $0 - $4 | 0;
     HEAP32[6268] = $1;
     $0 = HEAP32[6271];
     $3 = $4 + $0 | 0;
     HEAP32[6271] = $3;
     HEAP32[$3 + 4 >> 2] = $1 | 1;
     HEAP32[$0 + 4 >> 2] = $4 | 3;
     $0 = $0 + 8 | 0;
     break label$2;
    }
    HEAP32[__errno_location() >> 2] = 48;
    $0 = 0;
    break label$2;
   }
   label$109 : {
    if (!$7) {
     break label$109;
    }
    $1 = HEAP32[$5 + 28 >> 2];
    $0 = ($1 << 2) + 25364 | 0;
    label$110 : {
     if (HEAP32[$0 >> 2] == ($5 | 0)) {
      HEAP32[$0 >> 2] = $2;
      if ($2) {
       break label$110;
      }
      $8 = __wasm_rotl_i32(-2, $1) & $8;
      HEAP32[6266] = $8;
      break label$109;
     }
     HEAP32[(HEAP32[$7 + 16 >> 2] == ($5 | 0) ? 16 : 20) + $7 >> 2] = $2;
     if (!$2) {
      break label$109;
     }
    }
    HEAP32[$2 + 24 >> 2] = $7;
    $0 = HEAP32[$5 + 16 >> 2];
    if ($0) {
     HEAP32[$2 + 16 >> 2] = $0;
     HEAP32[$0 + 24 >> 2] = $2;
    }
    $0 = HEAP32[$5 + 20 >> 2];
    if (!$0) {
     break label$109;
    }
    HEAP32[$2 + 20 >> 2] = $0;
    HEAP32[$0 + 24 >> 2] = $2;
   }
   label$113 : {
    if ($3 >>> 0 <= 15) {
     $0 = $3 + $4 | 0;
     HEAP32[$5 + 4 >> 2] = $0 | 3;
     $0 = $0 + $5 | 0;
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
     break label$113;
    }
    HEAP32[$5 + 4 >> 2] = $4 | 3;
    $2 = $4 + $5 | 0;
    HEAP32[$2 + 4 >> 2] = $3 | 1;
    HEAP32[$2 + $3 >> 2] = $3;
    if ($3 >>> 0 <= 255) {
     $1 = $3 >>> 3 | 0;
     $0 = ($1 << 3) + 25100 | 0;
     $1 = 1 << $1;
     $3 = HEAP32[6265];
     label$116 : {
      if (!($1 & $3)) {
       HEAP32[6265] = $1 | $3;
       $1 = $0;
       break label$116;
      }
      $1 = HEAP32[$0 + 8 >> 2];
     }
     HEAP32[$0 + 8 >> 2] = $2;
     HEAP32[$1 + 12 >> 2] = $2;
     HEAP32[$2 + 12 >> 2] = $0;
     HEAP32[$2 + 8 >> 2] = $1;
     break label$113;
    }
    $6 = $2;
    $1 = $3 >>> 8 | 0;
    $0 = 0;
    label$118 : {
     if (!$1) {
      break label$118;
     }
     $0 = 31;
     if ($3 >>> 0 > 16777215) {
      break label$118;
     }
     $0 = $1 + 1048320 >>> 16 & 8;
     $1 = $1 << $0;
     $4 = $1;
     $1 = $1 + 520192 >>> 16 & 4;
     $4 = $4 << $1;
     $7 = $4;
     $4 = $4 + 245760 >>> 16 & 2;
     $0 = ($7 << $4 >>> 15 | 0) - ($0 | $1 | $4) | 0;
     $0 = ($0 << 1 | $3 >>> $0 + 21 & 1) + 28 | 0;
    }
    HEAP32[$6 + 28 >> 2] = $0;
    HEAP32[$2 + 16 >> 2] = 0;
    HEAP32[$2 + 20 >> 2] = 0;
    $1 = ($0 << 2) + 25364 | 0;
    label$119 : {
     $4 = 1 << $0;
     label$120 : {
      if (!($8 & $4)) {
       HEAP32[6266] = $4 | $8;
       HEAP32[$1 >> 2] = $2;
       break label$120;
      }
      $0 = $3 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1 | 0) | 0);
      $4 = HEAP32[$1 >> 2];
      while (1) {
       $1 = $4;
       if ((HEAP32[$1 + 4 >> 2] & -8) == ($3 | 0)) {
        break label$119;
       }
       $4 = $0 >>> 29 | 0;
       $0 = $0 << 1;
       $7 = ($4 & 4) + $1 | 0;
       $6 = $7 + 16 | 0;
       $4 = HEAP32[$6 >> 2];
       if ($4) {
        continue;
       }
       break;
      }
      HEAP32[$7 + 16 >> 2] = $2;
     }
     HEAP32[$2 + 24 >> 2] = $1;
     HEAP32[$2 + 12 >> 2] = $2;
     HEAP32[$2 + 8 >> 2] = $2;
     break label$113;
    }
    $0 = HEAP32[$1 + 8 >> 2];
    HEAP32[$0 + 12 >> 2] = $2;
    HEAP32[$1 + 8 >> 2] = $2;
    HEAP32[$2 + 24 >> 2] = 0;
    HEAP32[$2 + 12 >> 2] = $1;
    HEAP32[$2 + 8 >> 2] = $0;
   }
   $0 = $5 + 8 | 0;
   break label$2;
  }
  label$123 : {
   if (!$11) {
    break label$123;
   }
   $3 = HEAP32[$2 + 28 >> 2];
   $0 = ($3 << 2) + 25364 | 0;
   label$124 : {
    if (HEAP32[$0 >> 2] == ($2 | 0)) {
     HEAP32[$0 >> 2] = $5;
     if ($5) {
      break label$124;
     }
     HEAP32[6266] = __wasm_rotl_i32(-2, $3) & $9;
     break label$123;
    }
    HEAP32[(HEAP32[$11 + 16 >> 2] == ($2 | 0) ? 16 : 20) + $11 >> 2] = $5;
    if (!$5) {
     break label$123;
    }
   }
   HEAP32[$5 + 24 >> 2] = $11;
   $0 = HEAP32[$2 + 16 >> 2];
   if ($0) {
    HEAP32[$5 + 16 >> 2] = $0;
    HEAP32[$0 + 24 >> 2] = $5;
   }
   $0 = HEAP32[$2 + 20 >> 2];
   if (!$0) {
    break label$123;
   }
   HEAP32[$5 + 20 >> 2] = $0;
   HEAP32[$0 + 24 >> 2] = $5;
  }
  label$127 : {
   if ($1 >>> 0 <= 15) {
    $0 = $1 + $4 | 0;
    HEAP32[$2 + 4 >> 2] = $0 | 3;
    $0 = $0 + $2 | 0;
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
    break label$127;
   }
   HEAP32[$2 + 4 >> 2] = $4 | 3;
   $3 = $2 + $4 | 0;
   HEAP32[$3 + 4 >> 2] = $1 | 1;
   HEAP32[$1 + $3 >> 2] = $1;
   if ($8) {
    $5 = $8 >>> 3 | 0;
    $4 = ($5 << 3) + 25100 | 0;
    $0 = HEAP32[6270];
    $5 = 1 << $5;
    label$130 : {
     if (!($6 & $5)) {
      HEAP32[6265] = $5 | $6;
      $5 = $4;
      break label$130;
     }
     $5 = HEAP32[$4 + 8 >> 2];
    }
    HEAP32[$4 + 8 >> 2] = $0;
    HEAP32[$5 + 12 >> 2] = $0;
    HEAP32[$0 + 12 >> 2] = $4;
    HEAP32[$0 + 8 >> 2] = $5;
   }
   HEAP32[6270] = $3;
   HEAP32[6267] = $1;
  }
  $0 = $2 + 8 | 0;
 }
 $1 = $10 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function btHeightfieldTerrainShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 $4 = global$0 - 48 | 0;
 $12 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $12;
 $10 = HEAPF32[$0 + 44 >> 2];
 $7 = HEAPF32[$0 + 28 >> 2];
 $5 = Math_fround(Math_fround(1) / HEAPF32[$0 + 120 >> 2]);
 $6 = HEAPF32[$0 + 60 >> 2];
 $9 = Math_fround(Math_fround($5 * HEAPF32[$3 + 8 >> 2]) + $6);
 $9 = $9 < $7 ? $7 : $9;
 $9 = $10 < $9 ? $10 : $9;
 $13 = ($9 < Math_fround(0) ? -.5 : .5) + +$9;
 label$2 : {
  if (Math_abs($13) < 2147483648) {
   $12 = ~~$13;
   break label$2;
  }
  $12 = -2147483648;
 }
 $5 = Math_fround(Math_fround($5 * HEAPF32[$2 + 8 >> 2]) + $6);
 $7 = $5 < $7 ? $7 : $5;
 $10 = $10 < $7 ? $10 : $7;
 $13 = ($10 < Math_fround(0) ? -.5 : .5) + +$10;
 label$4 : {
  if (Math_abs($13) < 2147483648) {
   $14 = ~~$13;
   break label$4;
  }
  $14 = -2147483648;
 }
 $10 = HEAPF32[$0 + 40 >> 2];
 $7 = HEAPF32[$0 + 24 >> 2];
 $5 = Math_fround(Math_fround(1) / HEAPF32[$0 + 116 >> 2]);
 $6 = HEAPF32[$0 + 56 >> 2];
 $9 = Math_fround(Math_fround($5 * HEAPF32[$3 + 4 >> 2]) + $6);
 $9 = $9 < $7 ? $7 : $9;
 $9 = $10 < $9 ? $10 : $9;
 $13 = ($9 < Math_fround(0) ? -.5 : .5) + +$9;
 label$6 : {
  if (Math_abs($13) < 2147483648) {
   $11 = ~~$13;
   break label$6;
  }
  $11 = -2147483648;
 }
 $5 = Math_fround(Math_fround($5 * HEAPF32[$2 + 4 >> 2]) + $6);
 $7 = $5 < $7 ? $7 : $5;
 $10 = $10 < $7 ? $10 : $7;
 $13 = ($10 < Math_fround(0) ? -.5 : .5) + +$10;
 label$8 : {
  if (Math_abs($13) < 2147483648) {
   $20 = ~~$13;
   break label$8;
  }
  $20 = -2147483648;
 }
 $10 = HEAPF32[$0 + 36 >> 2];
 $7 = HEAPF32[$0 + 20 >> 2];
 $5 = Math_fround(Math_fround(1) / HEAPF32[$0 + 112 >> 2]);
 $6 = HEAPF32[$0 + 52 >> 2];
 $9 = Math_fround(Math_fround($5 * HEAPF32[$3 >> 2]) + $6);
 $9 = $9 < $7 ? $7 : $9;
 $9 = $10 < $9 ? $10 : $9;
 $13 = ($9 < Math_fround(0) ? -.5 : .5) + +$9;
 label$10 : {
  if (Math_abs($13) < 2147483648) {
   $3 = ~~$13;
   break label$10;
  }
  $3 = -2147483648;
 }
 $5 = Math_fround(Math_fround($5 * HEAPF32[$2 >> 2]) + $6);
 $7 = $5 < $7 ? $7 : $5;
 $10 = $10 < $7 ? $10 : $7;
 $13 = ($10 < Math_fround(0) ? -.5 : .5) + +$10;
 label$12 : {
  if (Math_abs($13) < 2147483648) {
   $2 = ~~$13;
   break label$12;
  }
  $2 = -2147483648;
 }
 $15 = HEAP32[$0 + 72 >> 2] + -1 | 0;
 $16 = HEAP32[$0 + 68 >> 2] + -1 | 0;
 $19 = HEAP32[$0 + 108 >> 2];
 label$14 : {
  if ($19 >>> 0 > 2) {
   $19 = 0;
   break label$14;
  }
  $12 = $12 + 1 | 0;
  $18 = $14 + -1 | 0;
  $14 = $11 + 1 | 0;
  $11 = $20 + -1 | 0;
  $3 = $3 + 1 | 0;
  $2 = $2 + -1 | 0;
  label$16 : {
   switch ($19 - 1 | 0) {
   default:
    $15 = ($12 | 0) < ($15 | 0) ? $12 : $15;
    $16 = ($14 | 0) < ($16 | 0) ? $14 : $16;
    $18 = ($18 | 0) > 0 ? $18 : 0;
    $19 = ($11 | 0) > 0 ? $11 : 0;
    break label$14;
   case 0:
    $15 = ($12 | 0) < ($15 | 0) ? $12 : $15;
    $16 = ($3 | 0) < ($16 | 0) ? $3 : $16;
    $18 = ($18 | 0) > 0 ? $18 : 0;
    $19 = ($2 | 0) > 0 ? $2 : 0;
    break label$14;
   case 1:
    break label$16;
   }
  }
  $15 = ($14 | 0) < ($15 | 0) ? $14 : $15;
  $16 = ($3 | 0) < ($16 | 0) ? $3 : $16;
  $18 = ($11 | 0) > 0 ? $11 : 0;
  $19 = ($2 | 0) > 0 ? $2 : 0;
 }
 $12 = $18;
 if (($12 | 0) < ($15 | 0)) {
  while (1) {
   $18 = $15;
   if (($19 | 0) >= ($16 | 0)) {
    $12 = $12 + 1 | 0;
   } else {
    $20 = $12 & 1;
    $14 = $12 + 1 | 0;
    $10 = Math_fround($14 | 0);
    $9 = Math_fround($12 | 0);
    $2 = $19;
    while (1) {
     label$24 : {
      if (!(!HEAPU8[$0 + 106 | 0] | $20 ? !(HEAPU8[$0 + 104 | 0] | ($2 + $12 & 1 ? 0 : HEAPU8[$0 + 105 | 0])) : 0)) {
       $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $2, $12));
       $11 = $4;
       label$27 : {
        label$28 : {
         label$29 : {
          label$30 : {
           label$31 : {
            $3 = HEAP32[$0 + 108 >> 2];
            if ($3 >>> 0 <= 2) {
             switch ($3 - 1 | 0) {
             case 1:
              break label$29;
             case 0:
              break label$30;
             default:
              break label$31;
             }
            }
            $5 = HEAPF32[$4 + 8 >> 2];
            $6 = HEAPF32[$4 + 4 >> 2];
            $7 = HEAPF32[$4 >> 2];
            break label$27;
           }
           $6 = HEAPF32[$0 + 84 >> 2];
           $5 = HEAPF32[$0 + 88 >> 2];
           $8 = HEAPF32[$0 + 52 >> 2];
           HEAP32[$4 + 12 >> 2] = 0;
           $7 = Math_fround($7 - $8);
           HEAPF32[$4 >> 2] = $7;
           $5 = Math_fround($9 - Math_fround($5 * Math_fround(.5)));
           HEAPF32[$4 + 8 >> 2] = $5;
           $6 = Math_fround(Math_fround($2 | 0) - Math_fround($6 * Math_fround(.5)));
           HEAPF32[$4 + 4 >> 2] = $6;
           break label$27;
          }
          $8 = HEAPF32[$0 + 84 >> 2];
          $5 = HEAPF32[$0 + 88 >> 2];
          $6 = HEAPF32[$0 + 56 >> 2];
          HEAP32[$4 + 12 >> 2] = 0;
          $6 = Math_fround($7 - $6);
          HEAPF32[$4 + 4 >> 2] = $6;
          $5 = Math_fround($9 - Math_fround($5 * Math_fround(.5)));
          HEAPF32[$4 + 8 >> 2] = $5;
          $7 = Math_fround(Math_fround($2 | 0) - Math_fround($8 * Math_fround(.5)));
          break label$28;
         }
         $8 = HEAPF32[$0 + 84 >> 2];
         $6 = HEAPF32[$0 + 88 >> 2];
         $5 = HEAPF32[$0 + 60 >> 2];
         HEAP32[$4 + 12 >> 2] = 0;
         $5 = Math_fround($7 - $5);
         HEAPF32[$4 + 8 >> 2] = $5;
         $6 = Math_fround($9 - Math_fround($6 * Math_fround(.5)));
         HEAPF32[$4 + 4 >> 2] = $6;
         $7 = Math_fround(Math_fround($2 | 0) - Math_fround($8 * Math_fround(.5)));
        }
        HEAPF32[$11 >> 2] = $7;
       }
       HEAPF32[$4 >> 2] = $7 * HEAPF32[$0 + 112 >> 2];
       HEAPF32[$4 + 4 >> 2] = $6 * HEAPF32[$0 + 116 >> 2];
       HEAPF32[$4 + 8 >> 2] = $5 * HEAPF32[$0 + 120 >> 2];
       $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $2, $14));
       $11 = $4;
       label$33 : {
        label$34 : {
         label$35 : {
          label$36 : {
           label$37 : {
            $3 = HEAP32[$0 + 108 >> 2];
            if ($3 >>> 0 <= 2) {
             switch ($3 - 1 | 0) {
             case 1:
              break label$35;
             case 0:
              break label$36;
             default:
              break label$37;
             }
            }
            $5 = HEAPF32[$4 + 24 >> 2];
            $6 = HEAPF32[$4 + 20 >> 2];
            $7 = HEAPF32[$4 + 16 >> 2];
            break label$33;
           }
           $6 = HEAPF32[$0 + 84 >> 2];
           $5 = HEAPF32[$0 + 88 >> 2];
           $8 = HEAPF32[$0 + 52 >> 2];
           HEAP32[$4 + 28 >> 2] = 0;
           $7 = Math_fround($7 - $8);
           HEAPF32[$4 + 16 >> 2] = $7;
           $5 = Math_fround($10 - Math_fround($5 * Math_fround(.5)));
           HEAPF32[$4 + 24 >> 2] = $5;
           $6 = Math_fround(Math_fround($2 | 0) - Math_fround($6 * Math_fround(.5)));
           HEAPF32[$4 + 20 >> 2] = $6;
           break label$33;
          }
          $8 = HEAPF32[$0 + 84 >> 2];
          $5 = HEAPF32[$0 + 88 >> 2];
          $6 = HEAPF32[$0 + 56 >> 2];
          HEAP32[$4 + 28 >> 2] = 0;
          $6 = Math_fround($7 - $6);
          HEAPF32[$4 + 20 >> 2] = $6;
          $5 = Math_fround($10 - Math_fround($5 * Math_fround(.5)));
          HEAPF32[$4 + 24 >> 2] = $5;
          $7 = Math_fround(Math_fround($2 | 0) - Math_fround($8 * Math_fround(.5)));
          break label$34;
         }
         $8 = HEAPF32[$0 + 84 >> 2];
         $6 = HEAPF32[$0 + 88 >> 2];
         $5 = HEAPF32[$0 + 60 >> 2];
         HEAP32[$4 + 28 >> 2] = 0;
         $5 = Math_fround($7 - $5);
         HEAPF32[$4 + 24 >> 2] = $5;
         $6 = Math_fround($10 - Math_fround($6 * Math_fround(.5)));
         HEAPF32[$4 + 20 >> 2] = $6;
         $7 = Math_fround(Math_fround($2 | 0) - Math_fround($8 * Math_fround(.5)));
        }
        HEAPF32[$11 + 16 >> 2] = $7;
       }
       HEAPF32[$4 + 16 >> 2] = $7 * HEAPF32[$0 + 112 >> 2];
       HEAPF32[$4 + 20 >> 2] = $6 * HEAPF32[$0 + 116 >> 2];
       HEAPF32[$4 + 24 >> 2] = $5 * HEAPF32[$0 + 120 >> 2];
       $3 = $2 + 1 | 0;
       $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $3, $14));
       $17 = $4;
       label$39 : {
        label$40 : {
         label$41 : {
          label$42 : {
           label$43 : {
            $11 = HEAP32[$0 + 108 >> 2];
            if ($11 >>> 0 <= 2) {
             switch ($11 - 1 | 0) {
             case 1:
              break label$41;
             case 0:
              break label$42;
             default:
              break label$43;
             }
            }
            $5 = HEAPF32[$4 + 40 >> 2];
            $6 = HEAPF32[$4 + 36 >> 2];
            $7 = HEAPF32[$4 + 32 >> 2];
            break label$39;
           }
           $6 = HEAPF32[$0 + 84 >> 2];
           $5 = HEAPF32[$0 + 88 >> 2];
           $8 = HEAPF32[$0 + 52 >> 2];
           HEAP32[$4 + 44 >> 2] = 0;
           $7 = Math_fround($7 - $8);
           HEAPF32[$4 + 32 >> 2] = $7;
           $5 = Math_fround($10 - Math_fround($5 * Math_fround(.5)));
           HEAPF32[$4 + 40 >> 2] = $5;
           $6 = Math_fround(Math_fround($3 | 0) - Math_fround($6 * Math_fround(.5)));
           HEAPF32[$4 + 36 >> 2] = $6;
           break label$39;
          }
          $8 = HEAPF32[$0 + 84 >> 2];
          $5 = HEAPF32[$0 + 88 >> 2];
          $6 = HEAPF32[$0 + 56 >> 2];
          HEAP32[$4 + 44 >> 2] = 0;
          $6 = Math_fround($7 - $6);
          HEAPF32[$4 + 36 >> 2] = $6;
          $5 = Math_fround($10 - Math_fround($5 * Math_fround(.5)));
          HEAPF32[$4 + 40 >> 2] = $5;
          $7 = Math_fround(Math_fround($3 | 0) - Math_fround($8 * Math_fround(.5)));
          break label$40;
         }
         $8 = HEAPF32[$0 + 84 >> 2];
         $6 = HEAPF32[$0 + 88 >> 2];
         $5 = HEAPF32[$0 + 60 >> 2];
         HEAP32[$4 + 44 >> 2] = 0;
         $5 = Math_fround($7 - $5);
         HEAPF32[$4 + 40 >> 2] = $5;
         $6 = Math_fround($10 - Math_fround($6 * Math_fround(.5)));
         HEAPF32[$4 + 36 >> 2] = $6;
         $7 = Math_fround(Math_fround($3 | 0) - Math_fround($8 * Math_fround(.5)));
        }
        HEAPF32[$17 + 32 >> 2] = $7;
       }
       HEAPF32[$4 + 32 >> 2] = $7 * HEAPF32[$0 + 112 >> 2];
       HEAPF32[$4 + 36 >> 2] = $6 * HEAPF32[$0 + 116 >> 2];
       HEAPF32[$4 + 40 >> 2] = $5 * HEAPF32[$0 + 120 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $4, $2, $12);
       $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $3, $14));
       $17 = $4;
       label$45 : {
        label$46 : {
         label$47 : {
          label$48 : {
           label$49 : {
            $11 = HEAP32[$0 + 108 >> 2];
            if ($11 >>> 0 <= 2) {
             switch ($11 - 1 | 0) {
             case 1:
              break label$47;
             case 0:
              break label$48;
             default:
              break label$49;
             }
            }
            $5 = HEAPF32[$4 + 24 >> 2];
            $6 = HEAPF32[$4 + 20 >> 2];
            $7 = HEAPF32[$4 + 16 >> 2];
            break label$45;
           }
           $6 = HEAPF32[$0 + 84 >> 2];
           $5 = HEAPF32[$0 + 88 >> 2];
           $8 = HEAPF32[$0 + 52 >> 2];
           HEAP32[$4 + 28 >> 2] = 0;
           $7 = Math_fround($7 - $8);
           HEAPF32[$4 + 16 >> 2] = $7;
           $5 = Math_fround($10 - Math_fround($5 * Math_fround(.5)));
           HEAPF32[$4 + 24 >> 2] = $5;
           $6 = Math_fround(Math_fround($3 | 0) - Math_fround($6 * Math_fround(.5)));
           HEAPF32[$4 + 20 >> 2] = $6;
           break label$45;
          }
          $8 = HEAPF32[$0 + 84 >> 2];
          $5 = HEAPF32[$0 + 88 >> 2];
          $6 = HEAPF32[$0 + 56 >> 2];
          HEAP32[$4 + 28 >> 2] = 0;
          $6 = Math_fround($7 - $6);
          HEAPF32[$4 + 20 >> 2] = $6;
          $5 = Math_fround($10 - Math_fround($5 * Math_fround(.5)));
          HEAPF32[$4 + 24 >> 2] = $5;
          $7 = Math_fround(Math_fround($3 | 0) - Math_fround($8 * Math_fround(.5)));
          break label$46;
         }
         $8 = HEAPF32[$0 + 84 >> 2];
         $6 = HEAPF32[$0 + 88 >> 2];
         $5 = HEAPF32[$0 + 60 >> 2];
         HEAP32[$4 + 28 >> 2] = 0;
         $5 = Math_fround($7 - $5);
         HEAPF32[$4 + 24 >> 2] = $5;
         $6 = Math_fround($10 - Math_fround($6 * Math_fround(.5)));
         HEAPF32[$4 + 20 >> 2] = $6;
         $7 = Math_fround(Math_fround($3 | 0) - Math_fround($8 * Math_fround(.5)));
        }
        HEAPF32[$17 + 16 >> 2] = $7;
       }
       HEAPF32[$4 + 16 >> 2] = $7 * HEAPF32[$0 + 112 >> 2];
       HEAPF32[$4 + 20 >> 2] = $6 * HEAPF32[$0 + 116 >> 2];
       HEAPF32[$4 + 24 >> 2] = $5 * HEAPF32[$0 + 120 >> 2];
       $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $3, $12));
       $17 = $4;
       label$51 : {
        label$52 : {
         label$53 : {
          label$54 : {
           label$55 : {
            $11 = HEAP32[$0 + 108 >> 2];
            if ($11 >>> 0 <= 2) {
             switch ($11 - 1 | 0) {
             case 1:
              break label$53;
             case 0:
              break label$54;
             default:
              break label$55;
             }
            }
            $5 = HEAPF32[$4 + 40 >> 2];
            $6 = HEAPF32[$4 + 36 >> 2];
            $7 = HEAPF32[$4 + 32 >> 2];
            break label$51;
           }
           $6 = HEAPF32[$0 + 84 >> 2];
           $5 = HEAPF32[$0 + 88 >> 2];
           $8 = HEAPF32[$0 + 52 >> 2];
           HEAP32[$4 + 44 >> 2] = 0;
           $7 = Math_fround($7 - $8);
           HEAPF32[$4 + 32 >> 2] = $7;
           $5 = Math_fround($9 - Math_fround($5 * Math_fround(.5)));
           HEAPF32[$4 + 40 >> 2] = $5;
           $6 = Math_fround(Math_fround($3 | 0) - Math_fround($6 * Math_fround(.5)));
           HEAPF32[$4 + 36 >> 2] = $6;
           break label$51;
          }
          $8 = HEAPF32[$0 + 84 >> 2];
          $5 = HEAPF32[$0 + 88 >> 2];
          $6 = HEAPF32[$0 + 56 >> 2];
          HEAP32[$4 + 44 >> 2] = 0;
          $6 = Math_fround($7 - $6);
          HEAPF32[$4 + 36 >> 2] = $6;
          $5 = Math_fround($9 - Math_fround($5 * Math_fround(.5)));
          HEAPF32[$4 + 40 >> 2] = $5;
          $7 = Math_fround(Math_fround($3 | 0) - Math_fround($8 * Math_fround(.5)));
          break label$52;
         }
         $8 = HEAPF32[$0 + 84 >> 2];
         $6 = HEAPF32[$0 + 88 >> 2];
         $5 = HEAPF32[$0 + 60 >> 2];
         HEAP32[$4 + 44 >> 2] = 0;
         $5 = Math_fround($7 - $5);
         HEAPF32[$4 + 40 >> 2] = $5;
         $6 = Math_fround($9 - Math_fround($6 * Math_fround(.5)));
         HEAPF32[$4 + 36 >> 2] = $6;
         $7 = Math_fround(Math_fround($3 | 0) - Math_fround($8 * Math_fround(.5)));
        }
        HEAPF32[$17 + 32 >> 2] = $7;
       }
       break label$24;
      }
      $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $2, $12));
      $11 = $4;
      label$57 : {
       label$58 : {
        label$59 : {
         label$60 : {
          label$61 : {
           $3 = HEAP32[$0 + 108 >> 2];
           if ($3 >>> 0 <= 2) {
            switch ($3 - 1 | 0) {
            case 1:
             break label$59;
            case 0:
             break label$60;
            default:
             break label$61;
            }
           }
           $5 = HEAPF32[$4 + 8 >> 2];
           $6 = HEAPF32[$4 + 4 >> 2];
           $7 = HEAPF32[$4 >> 2];
           break label$57;
          }
          $6 = HEAPF32[$0 + 84 >> 2];
          $5 = HEAPF32[$0 + 88 >> 2];
          $8 = HEAPF32[$0 + 52 >> 2];
          HEAP32[$4 + 12 >> 2] = 0;
          $7 = Math_fround($7 - $8);
          HEAPF32[$4 >> 2] = $7;
          $5 = Math_fround($9 - Math_fround($5 * Math_fround(.5)));
          HEAPF32[$4 + 8 >> 2] = $5;
          $6 = Math_fround(Math_fround($2 | 0) - Math_fround($6 * Math_fround(.5)));
          HEAPF32[$4 + 4 >> 2] = $6;
          break label$57;
         }
         $8 = HEAPF32[$0 + 84 >> 2];
         $5 = HEAPF32[$0 + 88 >> 2];
         $6 = HEAPF32[$0 + 56 >> 2];
         HEAP32[$4 + 12 >> 2] = 0;
         $6 = Math_fround($7 - $6);
         HEAPF32[$4 + 4 >> 2] = $6;
         $5 = Math_fround($9 - Math_fround($5 * Math_fround(.5)));
         HEAPF32[$4 + 8 >> 2] = $5;
         $7 = Math_fround(Math_fround($2 | 0) - Math_fround($8 * Math_fround(.5)));
         break label$58;
        }
        $8 = HEAPF32[$0 + 84 >> 2];
        $6 = HEAPF32[$0 + 88 >> 2];
        $5 = HEAPF32[$0 + 60 >> 2];
        HEAP32[$4 + 12 >> 2] = 0;
        $5 = Math_fround($7 - $5);
        HEAPF32[$4 + 8 >> 2] = $5;
        $6 = Math_fround($9 - Math_fround($6 * Math_fround(.5)));
        HEAPF32[$4 + 4 >> 2] = $6;
        $7 = Math_fround(Math_fround($2 | 0) - Math_fround($8 * Math_fround(.5)));
       }
       HEAPF32[$11 >> 2] = $7;
      }
      HEAPF32[$4 >> 2] = $7 * HEAPF32[$0 + 112 >> 2];
      HEAPF32[$4 + 4 >> 2] = $6 * HEAPF32[$0 + 116 >> 2];
      HEAPF32[$4 + 8 >> 2] = $5 * HEAPF32[$0 + 120 >> 2];
      $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $2, $14));
      $11 = $4;
      label$63 : {
       label$64 : {
        label$65 : {
         label$66 : {
          label$67 : {
           $3 = HEAP32[$0 + 108 >> 2];
           if ($3 >>> 0 <= 2) {
            switch ($3 - 1 | 0) {
            case 1:
             break label$65;
            case 0:
             break label$66;
            default:
             break label$67;
            }
           }
           $5 = HEAPF32[$4 + 24 >> 2];
           $6 = HEAPF32[$4 + 20 >> 2];
           $7 = HEAPF32[$4 + 16 >> 2];
           break label$63;
          }
          $6 = HEAPF32[$0 + 84 >> 2];
          $5 = HEAPF32[$0 + 88 >> 2];
          $8 = HEAPF32[$0 + 52 >> 2];
          HEAP32[$4 + 28 >> 2] = 0;
          $7 = Math_fround($7 - $8);
          HEAPF32[$4 + 16 >> 2] = $7;
          $5 = Math_fround($10 - Math_fround($5 * Math_fround(.5)));
          HEAPF32[$4 + 24 >> 2] = $5;
          $6 = Math_fround(Math_fround($2 | 0) - Math_fround($6 * Math_fround(.5)));
          HEAPF32[$4 + 20 >> 2] = $6;
          break label$63;
         }
         $8 = HEAPF32[$0 + 84 >> 2];
         $5 = HEAPF32[$0 + 88 >> 2];
         $6 = HEAPF32[$0 + 56 >> 2];
         HEAP32[$4 + 28 >> 2] = 0;
         $6 = Math_fround($7 - $6);
         HEAPF32[$4 + 20 >> 2] = $6;
         $5 = Math_fround($10 - Math_fround($5 * Math_fround(.5)));
         HEAPF32[$4 + 24 >> 2] = $5;
         $7 = Math_fround(Math_fround($2 | 0) - Math_fround($8 * Math_fround(.5)));
         break label$64;
        }
        $8 = HEAPF32[$0 + 84 >> 2];
        $6 = HEAPF32[$0 + 88 >> 2];
        $5 = HEAPF32[$0 + 60 >> 2];
        HEAP32[$4 + 28 >> 2] = 0;
        $5 = Math_fround($7 - $5);
        HEAPF32[$4 + 24 >> 2] = $5;
        $6 = Math_fround($10 - Math_fround($6 * Math_fround(.5)));
        HEAPF32[$4 + 20 >> 2] = $6;
        $7 = Math_fround(Math_fround($2 | 0) - Math_fround($8 * Math_fround(.5)));
       }
       HEAPF32[$11 + 16 >> 2] = $7;
      }
      HEAPF32[$4 + 16 >> 2] = $7 * HEAPF32[$0 + 112 >> 2];
      HEAPF32[$4 + 20 >> 2] = $6 * HEAPF32[$0 + 116 >> 2];
      HEAPF32[$4 + 24 >> 2] = $5 * HEAPF32[$0 + 120 >> 2];
      $3 = $2 + 1 | 0;
      $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $3, $12));
      $17 = $4;
      label$69 : {
       label$70 : {
        label$71 : {
         label$72 : {
          label$73 : {
           $11 = HEAP32[$0 + 108 >> 2];
           if ($11 >>> 0 <= 2) {
            switch ($11 - 1 | 0) {
            case 1:
             break label$71;
            case 0:
             break label$72;
            default:
             break label$73;
            }
           }
           $5 = HEAPF32[$4 + 40 >> 2];
           $6 = HEAPF32[$4 + 36 >> 2];
           $7 = HEAPF32[$4 + 32 >> 2];
           break label$69;
          }
          $6 = HEAPF32[$0 + 84 >> 2];
          $5 = HEAPF32[$0 + 88 >> 2];
          $8 = HEAPF32[$0 + 52 >> 2];
          HEAP32[$4 + 44 >> 2] = 0;
          $7 = Math_fround($7 - $8);
          HEAPF32[$4 + 32 >> 2] = $7;
          $5 = Math_fround($9 - Math_fround($5 * Math_fround(.5)));
          HEAPF32[$4 + 40 >> 2] = $5;
          $6 = Math_fround(Math_fround($3 | 0) - Math_fround($6 * Math_fround(.5)));
          HEAPF32[$4 + 36 >> 2] = $6;
          break label$69;
         }
         $8 = HEAPF32[$0 + 84 >> 2];
         $5 = HEAPF32[$0 + 88 >> 2];
         $6 = HEAPF32[$0 + 56 >> 2];
         HEAP32[$4 + 44 >> 2] = 0;
         $6 = Math_fround($7 - $6);
         HEAPF32[$4 + 36 >> 2] = $6;
         $5 = Math_fround($9 - Math_fround($5 * Math_fround(.5)));
         HEAPF32[$4 + 40 >> 2] = $5;
         $7 = Math_fround(Math_fround($3 | 0) - Math_fround($8 * Math_fround(.5)));
         break label$70;
        }
        $8 = HEAPF32[$0 + 84 >> 2];
        $6 = HEAPF32[$0 + 88 >> 2];
        $5 = HEAPF32[$0 + 60 >> 2];
        HEAP32[$4 + 44 >> 2] = 0;
        $5 = Math_fround($7 - $5);
        HEAPF32[$4 + 40 >> 2] = $5;
        $6 = Math_fround($9 - Math_fround($6 * Math_fround(.5)));
        HEAPF32[$4 + 36 >> 2] = $6;
        $7 = Math_fround(Math_fround($3 | 0) - Math_fround($8 * Math_fround(.5)));
       }
       HEAPF32[$17 + 32 >> 2] = $7;
      }
      HEAPF32[$4 + 32 >> 2] = $7 * HEAPF32[$0 + 112 >> 2];
      HEAPF32[$4 + 36 >> 2] = $6 * HEAPF32[$0 + 116 >> 2];
      HEAPF32[$4 + 40 >> 2] = $5 * HEAPF32[$0 + 120 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $4, $2, $12);
      $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $3, $12));
      $17 = $4;
      label$75 : {
       label$76 : {
        label$77 : {
         label$78 : {
          label$79 : {
           $11 = HEAP32[$0 + 108 >> 2];
           if ($11 >>> 0 <= 2) {
            switch ($11 - 1 | 0) {
            case 1:
             break label$77;
            case 0:
             break label$78;
            default:
             break label$79;
            }
           }
           $5 = HEAPF32[$4 + 8 >> 2];
           $6 = HEAPF32[$4 + 4 >> 2];
           $7 = HEAPF32[$4 >> 2];
           break label$75;
          }
          $6 = HEAPF32[$0 + 84 >> 2];
          $5 = HEAPF32[$0 + 88 >> 2];
          $8 = HEAPF32[$0 + 52 >> 2];
          HEAP32[$4 + 12 >> 2] = 0;
          $7 = Math_fround($7 - $8);
          HEAPF32[$4 >> 2] = $7;
          $5 = Math_fround($9 - Math_fround($5 * Math_fround(.5)));
          HEAPF32[$4 + 8 >> 2] = $5;
          $6 = Math_fround(Math_fround($3 | 0) - Math_fround($6 * Math_fround(.5)));
          HEAPF32[$4 + 4 >> 2] = $6;
          break label$75;
         }
         $8 = HEAPF32[$0 + 84 >> 2];
         $5 = HEAPF32[$0 + 88 >> 2];
         $6 = HEAPF32[$0 + 56 >> 2];
         HEAP32[$4 + 12 >> 2] = 0;
         $6 = Math_fround($7 - $6);
         HEAPF32[$4 + 4 >> 2] = $6;
         $5 = Math_fround($9 - Math_fround($5 * Math_fround(.5)));
         HEAPF32[$4 + 8 >> 2] = $5;
         $7 = Math_fround(Math_fround($3 | 0) - Math_fround($8 * Math_fround(.5)));
         break label$76;
        }
        $8 = HEAPF32[$0 + 84 >> 2];
        $6 = HEAPF32[$0 + 88 >> 2];
        $5 = HEAPF32[$0 + 60 >> 2];
        HEAP32[$4 + 12 >> 2] = 0;
        $5 = Math_fround($7 - $5);
        HEAPF32[$4 + 8 >> 2] = $5;
        $6 = Math_fround($9 - Math_fround($6 * Math_fround(.5)));
        HEAPF32[$4 + 4 >> 2] = $6;
        $7 = Math_fround(Math_fround($3 | 0) - Math_fround($8 * Math_fround(.5)));
       }
       HEAPF32[$17 >> 2] = $7;
      }
      HEAPF32[$4 >> 2] = $7 * HEAPF32[$0 + 112 >> 2];
      HEAPF32[$4 + 4 >> 2] = $6 * HEAPF32[$0 + 116 >> 2];
      HEAPF32[$4 + 8 >> 2] = $5 * HEAPF32[$0 + 120 >> 2];
      $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $3, $14));
      $17 = $4;
      label$81 : {
       label$82 : {
        label$83 : {
         label$84 : {
          label$85 : {
           $11 = HEAP32[$0 + 108 >> 2];
           if ($11 >>> 0 <= 2) {
            switch ($11 - 1 | 0) {
            case 1:
             break label$83;
            case 0:
             break label$84;
            default:
             break label$85;
            }
           }
           $5 = HEAPF32[$4 + 40 >> 2];
           $6 = HEAPF32[$4 + 36 >> 2];
           $7 = HEAPF32[$4 + 32 >> 2];
           break label$81;
          }
          $6 = HEAPF32[$0 + 84 >> 2];
          $5 = HEAPF32[$0 + 88 >> 2];
          $8 = HEAPF32[$0 + 52 >> 2];
          HEAP32[$4 + 44 >> 2] = 0;
          $7 = Math_fround($7 - $8);
          HEAPF32[$4 + 32 >> 2] = $7;
          $5 = Math_fround($10 - Math_fround($5 * Math_fround(.5)));
          HEAPF32[$4 + 40 >> 2] = $5;
          $6 = Math_fround(Math_fround($3 | 0) - Math_fround($6 * Math_fround(.5)));
          HEAPF32[$4 + 36 >> 2] = $6;
          break label$81;
         }
         $8 = HEAPF32[$0 + 84 >> 2];
         $5 = HEAPF32[$0 + 88 >> 2];
         $6 = HEAPF32[$0 + 56 >> 2];
         HEAP32[$4 + 44 >> 2] = 0;
         $6 = Math_fround($7 - $6);
         HEAPF32[$4 + 36 >> 2] = $6;
         $5 = Math_fround($10 - Math_fround($5 * Math_fround(.5)));
         HEAPF32[$4 + 40 >> 2] = $5;
         $7 = Math_fround(Math_fround($3 | 0) - Math_fround($8 * Math_fround(.5)));
         break label$82;
        }
        $8 = HEAPF32[$0 + 84 >> 2];
        $6 = HEAPF32[$0 + 88 >> 2];
        $5 = HEAPF32[$0 + 60 >> 2];
        HEAP32[$4 + 44 >> 2] = 0;
        $5 = Math_fround($7 - $5);
        HEAPF32[$4 + 40 >> 2] = $5;
        $6 = Math_fround($10 - Math_fround($6 * Math_fround(.5)));
        HEAPF32[$4 + 36 >> 2] = $6;
        $7 = Math_fround(Math_fround($3 | 0) - Math_fround($8 * Math_fround(.5)));
       }
       HEAPF32[$17 + 32 >> 2] = $7;
      }
     }
     HEAPF32[$4 + 32 >> 2] = $7 * HEAPF32[$0 + 112 >> 2];
     HEAPF32[$4 + 36 >> 2] = $6 * HEAPF32[$0 + 116 >> 2];
     HEAPF32[$4 + 40 >> 2] = $5 * HEAPF32[$0 + 120 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $4, $2, $12);
     $2 = $3;
     if (($3 | 0) != ($16 | 0)) {
      continue;
     }
     break;
    }
    $12 = $14;
   }
   if (($18 | 0) != ($12 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = $4 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btGjkPairDetector__getClosestPointsNonVirtual_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0, $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = 0, $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = Math_fround(0), $50 = Math_fround(0), $51 = Math_fround(0), $52 = Math_fround(0), $53 = Math_fround(0), $54 = Math_fround(0), $55 = Math_fround(0), $56 = Math_fround(0), $57 = Math_fround(0), $58 = Math_fround(0);
 $4 = global$0 - 272 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP32[$4 + 264 >> 2] = 0;
 HEAP32[$4 + 268 >> 2] = 0;
 HEAP32[$4 + 256 >> 2] = 0;
 HEAP32[$4 + 260 >> 2] = 0;
 $5 = HEAP32[$1 + 12 >> 2];
 $6 = HEAP32[$1 + 8 >> 2];
 HEAP32[$4 + 168 >> 2] = $6;
 HEAP32[$4 + 172 >> 2] = $5;
 $6 = HEAP32[$1 + 4 >> 2];
 $5 = HEAP32[$1 >> 2];
 HEAP32[$4 + 160 >> 2] = $5;
 HEAP32[$4 + 164 >> 2] = $6;
 $5 = HEAP32[$1 + 28 >> 2];
 $6 = HEAP32[$1 + 24 >> 2];
 HEAP32[$4 + 184 >> 2] = $6;
 HEAP32[$4 + 188 >> 2] = $5;
 $6 = HEAP32[$1 + 20 >> 2];
 $5 = HEAP32[$1 + 16 >> 2];
 HEAP32[$4 + 176 >> 2] = $5;
 HEAP32[$4 + 180 >> 2] = $6;
 $5 = HEAP32[$1 + 44 >> 2];
 $6 = HEAP32[$1 + 40 >> 2];
 HEAP32[$4 + 200 >> 2] = $6;
 HEAP32[$4 + 204 >> 2] = $5;
 $6 = HEAP32[$1 + 36 >> 2];
 $5 = HEAP32[$1 + 32 >> 2];
 HEAP32[$4 + 192 >> 2] = $5;
 HEAP32[$4 + 196 >> 2] = $6;
 $5 = HEAP32[$1 + 60 >> 2];
 $6 = HEAP32[$1 + 56 >> 2];
 $17 = $6;
 $14 = $4 + 216 | 0;
 $6 = $14;
 HEAP32[$6 >> 2] = $17;
 HEAP32[$6 + 4 >> 2] = $5;
 $6 = HEAP32[$1 + 52 >> 2];
 $5 = HEAP32[$1 + 48 >> 2];
 HEAP32[$4 + 208 >> 2] = $5;
 HEAP32[$4 + 212 >> 2] = $6;
 $5 = HEAP32[$1 + 76 >> 2];
 $6 = HEAP32[$1 + 72 >> 2];
 HEAP32[$4 + 104 >> 2] = $6;
 HEAP32[$4 + 108 >> 2] = $5;
 $6 = HEAP32[$1 + 68 >> 2];
 $5 = HEAP32[$1 + 64 >> 2];
 HEAP32[$4 + 96 >> 2] = $5;
 HEAP32[$4 + 100 >> 2] = $6;
 $5 = HEAP32[$1 + 92 >> 2];
 $6 = HEAP32[$1 + 88 >> 2];
 HEAP32[$4 + 120 >> 2] = $6;
 HEAP32[$4 + 124 >> 2] = $5;
 $6 = HEAP32[$1 + 84 >> 2];
 $5 = HEAP32[$1 + 80 >> 2];
 HEAP32[$4 + 112 >> 2] = $5;
 HEAP32[$4 + 116 >> 2] = $6;
 $5 = HEAP32[$1 + 108 >> 2];
 $6 = HEAP32[$1 + 104 >> 2];
 HEAP32[$4 + 136 >> 2] = $6;
 HEAP32[$4 + 140 >> 2] = $5;
 $6 = HEAP32[$1 + 100 >> 2];
 $5 = HEAP32[$1 + 96 >> 2];
 HEAP32[$4 + 128 >> 2] = $5;
 HEAP32[$4 + 132 >> 2] = $6;
 $5 = HEAP32[$1 + 124 >> 2];
 $6 = HEAP32[$1 + 120 >> 2];
 $17 = $6;
 $21 = $4 + 152 | 0;
 $6 = $21;
 HEAP32[$6 >> 2] = $17;
 HEAP32[$6 + 4 >> 2] = $5;
 $6 = HEAP32[$1 + 116 >> 2];
 $5 = HEAP32[$1 + 112 >> 2];
 HEAP32[$4 + 144 >> 2] = $5;
 HEAP32[$4 + 148 >> 2] = $6;
 $20 = $4 + 212 | 0;
 $5 = $20;
 $7 = HEAPF32[$4 + 212 >> 2];
 $20 = $4 + 148 | 0;
 $8 = HEAPF32[$20 >> 2];
 $26 = Math_fround(Math_fround($7 + $8) * Math_fround(.5));
 HEAPF32[$5 >> 2] = $7 - $26;
 $7 = HEAPF32[$4 + 216 >> 2];
 $9 = HEAPF32[$4 + 152 >> 2];
 $27 = Math_fround(Math_fround($7 + $9) * Math_fround(.5));
 HEAPF32[$4 + 216 >> 2] = $7 - $27;
 HEAPF32[$4 + 148 >> 2] = $8 - $26;
 HEAPF32[$4 + 152 >> 2] = $9 - $27;
 $7 = HEAPF32[$4 + 208 >> 2];
 $8 = HEAPF32[$4 + 144 >> 2];
 $28 = Math_fround(Math_fround($7 + $8) * Math_fround(.5));
 HEAPF32[$4 + 208 >> 2] = $7 - $28;
 HEAPF32[$4 + 144 >> 2] = $8 - $28;
 $21 = 0;
 $21 = HEAP32[HEAP32[$0 + 28 >> 2] + 4 >> 2] + -17 >>> 0 <= 1 ? HEAP32[HEAP32[$0 + 32 >> 2] + 4 >> 2] + -17 >>> 0 < 2 : $21;
 $29 = HEAPF32[$0 + 44 >> 2];
 $7 = HEAPF32[$0 + 48 >> 2];
 HEAP32[5389] = HEAP32[5389] + 1;
 HEAP32[$0 + 68 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 1065353216;
 HEAP32[$0 + 60 >> 2] = -1;
 HEAP32[$0 + 64 >> 2] = 0;
 $39 = HEAPU8[$0 + 52 | 0];
 btVoronoiSimplexSolver__reset_28_29(HEAP32[$0 + 24 >> 2]);
 $24 = $39 ? Math_fround(0) : $7;
 $17 = $0 + 4 | 0;
 $16 = Math_fround(0xde0b6b000000000);
 $20 = 0;
 while (1) {
  $13 = HEAPF32[$1 + 32 >> 2];
  $12 = HEAPF32[$1 + 16 >> 2];
  $10 = HEAPF32[$1 >> 2];
  $15 = HEAPF32[$1 + 36 >> 2];
  $18 = HEAPF32[$1 + 20 >> 2];
  $22 = HEAPF32[$1 + 4 >> 2];
  $19 = HEAPF32[$1 + 40 >> 2];
  $7 = HEAPF32[$0 + 12 >> 2];
  $23 = HEAPF32[$1 + 24 >> 2];
  $9 = HEAPF32[$0 + 8 >> 2];
  $25 = HEAPF32[$1 + 8 >> 2];
  $8 = HEAPF32[$0 + 4 >> 2];
  HEAP32[$4 + 252 >> 2] = 0;
  $11 = Math_fround(-$9);
  HEAPF32[$4 + 248 >> 2] = Math_fround(Math_fround($23 * $11) - Math_fround($8 * $25)) - Math_fround($7 * $19);
  HEAPF32[$4 + 244 >> 2] = Math_fround(Math_fround($18 * $11) - Math_fround($8 * $22)) - Math_fround($7 * $15);
  HEAPF32[$4 + 240 >> 2] = Math_fround(Math_fround($12 * $11) - Math_fround($8 * $10)) - Math_fround($7 * $13);
  $11 = HEAPF32[$1 + 96 >> 2];
  $13 = HEAPF32[$1 + 64 >> 2];
  $12 = HEAPF32[$1 + 80 >> 2];
  $10 = HEAPF32[$1 + 100 >> 2];
  $15 = HEAPF32[$1 + 68 >> 2];
  $18 = HEAPF32[$1 + 84 >> 2];
  $22 = HEAPF32[$1 + 104 >> 2];
  $19 = HEAPF32[$1 + 72 >> 2];
  $23 = HEAPF32[$1 + 88 >> 2];
  HEAP32[$4 + 236 >> 2] = 0;
  HEAPF32[$4 + 232 >> 2] = Math_fround(Math_fround($8 * $19) + Math_fround($9 * $23)) + Math_fround($7 * $22);
  HEAPF32[$4 + 228 >> 2] = Math_fround(Math_fround($8 * $15) + Math_fround($9 * $18)) + Math_fround($7 * $10);
  HEAPF32[$4 + 224 >> 2] = Math_fround(Math_fround($8 * $13) + Math_fround($9 * $12)) + Math_fround($7 * $11);
  btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($4 + 80 | 0, HEAP32[$0 + 28 >> 2], $4 + 240 | 0);
  btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($4 - -64 | 0, HEAP32[$0 + 32 >> 2], $4 + 224 | 0);
  HEAP32[$4 + 60 >> 2] = 0;
  $7 = HEAPF32[$4 + 80 >> 2];
  $8 = HEAPF32[$4 + 84 >> 2];
  $9 = HEAPF32[$4 + 88 >> 2];
  $11 = Math_fround(Math_fround(Math_fround(Math_fround($7 * HEAPF32[$4 + 192 >> 2]) + Math_fround($8 * HEAPF32[$4 + 196 >> 2])) + Math_fround($9 * HEAPF32[$4 + 200 >> 2])) + HEAPF32[$4 + 216 >> 2]);
  HEAPF32[$4 + 56 >> 2] = $11;
  $12 = Math_fround(Math_fround(Math_fround(Math_fround($7 * HEAPF32[$4 + 176 >> 2]) + Math_fround($8 * HEAPF32[$4 + 180 >> 2])) + Math_fround($9 * HEAPF32[$4 + 184 >> 2])) + HEAPF32[$4 + 212 >> 2]);
  HEAPF32[$4 + 52 >> 2] = $12;
  $10 = Math_fround(Math_fround(Math_fround(Math_fround($7 * HEAPF32[$4 + 160 >> 2]) + Math_fround($8 * HEAPF32[$4 + 164 >> 2])) + Math_fround($9 * HEAPF32[$4 + 168 >> 2])) + HEAPF32[$4 + 208 >> 2]);
  HEAPF32[$4 + 48 >> 2] = $10;
  HEAP32[$4 + 44 >> 2] = 0;
  $7 = HEAPF32[$4 + 64 >> 2];
  $8 = HEAPF32[$4 + 68 >> 2];
  $9 = HEAPF32[$4 + 72 >> 2];
  $13 = Math_fround(Math_fround(Math_fround(Math_fround($7 * HEAPF32[$4 + 128 >> 2]) + Math_fround($8 * HEAPF32[$4 + 132 >> 2])) + Math_fround($9 * HEAPF32[$4 + 136 >> 2])) + HEAPF32[$4 + 152 >> 2]);
  HEAPF32[$4 + 40 >> 2] = $13;
  $15 = Math_fround(Math_fround(Math_fround(Math_fround($7 * HEAPF32[$4 + 112 >> 2]) + Math_fround($8 * HEAPF32[$4 + 116 >> 2])) + Math_fround($9 * HEAPF32[$4 + 120 >> 2])) + HEAPF32[$4 + 148 >> 2]);
  HEAPF32[$4 + 36 >> 2] = $15;
  $7 = Math_fround(Math_fround(Math_fround(Math_fround($7 * HEAPF32[$4 + 96 >> 2]) + Math_fround($8 * HEAPF32[$4 + 100 >> 2])) + Math_fround($9 * HEAPF32[$4 + 104 >> 2])) + HEAPF32[$4 + 144 >> 2]);
  HEAPF32[$4 + 32 >> 2] = $7;
  if ($21) {
   HEAP32[$4 + 40 >> 2] = 0;
   HEAP32[$4 + 56 >> 2] = 0;
   $13 = Math_fround(0);
   $11 = Math_fround(0);
  }
  HEAP32[$4 + 28 >> 2] = 0;
  $8 = Math_fround($11 - $13);
  HEAPF32[$4 + 24 >> 2] = $8;
  $7 = Math_fround($10 - $7);
  HEAPF32[$4 + 16 >> 2] = $7;
  $9 = Math_fround($12 - $15);
  HEAPF32[$4 + 20 >> 2] = $9;
  label$5 : {
   label$6 : {
    $7 = Math_fround(Math_fround(Math_fround($7 * HEAPF32[$0 + 4 >> 2]) + Math_fround($9 * HEAPF32[$0 + 8 >> 2])) + Math_fround($8 * HEAPF32[$0 + 12 >> 2]));
    if (!($7 > Math_fround(0) ^ 1 | Math_fround($7 * $7) > Math_fround($16 * HEAPF32[$1 + 128 >> 2]) ^ 1)) {
     HEAP32[$0 + 68 >> 2] = 10;
     break label$6;
    }
    if (btVoronoiSimplexSolver__inSimplex_28btVector3_20const__29(HEAP32[$0 + 24 >> 2], $4 + 16 | 0)) {
     $20 = 1;
     HEAP32[$0 + 68 >> 2] = 1;
     $14 = 2;
     break label$5;
    }
    $7 = Math_fround($16 - $7);
    if (!!($7 <= Math_fround($16 * Math_fround(9.999999974752427e-7)))) {
     $14 = 2;
     HEAP32[$0 + 68 >> 2] = $7 <= Math_fround(0) ? 2 : 11;
     $20 = 1;
     break label$5;
    }
    btVoronoiSimplexSolver__addVertex_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29(HEAP32[$0 + 24 >> 2], $4 + 16 | 0, $4 + 48 | 0, $4 + 32 | 0);
    if (!btVoronoiSimplexSolver__closest_28btVector3__29(HEAP32[$0 + 24 >> 2], $4)) {
     HEAP32[$0 + 68 >> 2] = 3;
     break label$6;
    }
    $7 = HEAPF32[$4 >> 2];
    $8 = Math_fround($7 * $7);
    $7 = HEAPF32[$4 + 4 >> 2];
    $8 = Math_fround($8 + Math_fround($7 * $7));
    $7 = HEAPF32[$4 + 8 >> 2];
    $7 = Math_fround($8 + Math_fround($7 * $7));
    if (!!($7 < Math_fround(9.999999974752427e-7))) {
     $5 = HEAP32[$4 + 4 >> 2];
     $6 = HEAP32[$4 >> 2];
     $14 = $6;
     $6 = $17;
     HEAP32[$6 >> 2] = $14;
     HEAP32[$6 + 4 >> 2] = $5;
     $6 = HEAP32[$4 + 12 >> 2];
     $5 = HEAP32[$4 + 8 >> 2];
     $14 = $5;
     $5 = $17;
     HEAP32[$5 + 8 >> 2] = $14;
     HEAP32[$5 + 12 >> 2] = $6;
     HEAP32[$0 + 68 >> 2] = 6;
     break label$6;
    }
    label$12 : {
     if (!!(Math_fround($16 - $7) <= Math_fround($16 * Math_fround(1.1920928955078125e-7)))) {
      HEAP32[$0 + 68 >> 2] = 12;
      $20 = 1;
      $14 = 2;
      break label$12;
     }
     $5 = HEAP32[$4 + 4 >> 2];
     $6 = HEAP32[$4 >> 2];
     $14 = $6;
     $6 = $17;
     HEAP32[$6 >> 2] = $14;
     HEAP32[$6 + 4 >> 2] = $5;
     $6 = HEAP32[$4 + 12 >> 2];
     $5 = HEAP32[$4 + 8 >> 2];
     $14 = $5;
     $5 = $17;
     HEAP32[$5 + 8 >> 2] = $14;
     HEAP32[$5 + 12 >> 2] = $6;
     $5 = HEAP32[$0 + 64 >> 2];
     HEAP32[$0 + 64 >> 2] = $5 + 1;
     $14 = 2;
     if (($5 | 0) > 1e3) {
      break label$12;
     }
     if (HEAP32[HEAP32[$0 + 24 >> 2] >> 2] != 4) {
      $14 = 0;
      break label$12;
     }
     HEAP32[$0 + 68 >> 2] = 13;
    }
    $16 = $7;
    break label$5;
   }
   $20 = 1;
   $14 = 2;
  }
  if (!$14) {
   continue;
  }
  break;
 }
 $7 = Math_fround(0);
 $13 = $39 ? Math_fround(0) : $29;
 $8 = Math_fround($13 + $24);
 $21 = 0;
 $14 = 0;
 if ($20 & 1) {
  btVoronoiSimplexSolver__compute_points_28btVector3__2c_20btVector3__29(HEAP32[$0 + 24 >> 2], $4 + 240 | 0, $4 + 224 | 0);
  $5 = HEAP32[$17 + 12 >> 2];
  $6 = HEAP32[$17 + 8 >> 2];
  HEAP32[$4 + 264 >> 2] = $6;
  HEAP32[$4 + 268 >> 2] = $5;
  $6 = HEAP32[$17 + 4 >> 2];
  $5 = HEAP32[$17 >> 2];
  HEAP32[$4 + 256 >> 2] = $5;
  HEAP32[$4 + 260 >> 2] = $6;
  $7 = HEAPF32[$0 + 4 >> 2];
  $9 = HEAPF32[$0 + 8 >> 2];
  $11 = HEAPF32[$0 + 12 >> 2];
  $12 = Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($9 * $9)) + Math_fround($11 * $11));
  if (!!($12 < Math_fround(9.999999974752427e-7))) {
   HEAP32[$0 + 68 >> 2] = 5;
  }
  $20 = 1;
  label$17 : {
   if (!($12 > Math_fround(1.4210854715202004e-14))) {
    $20 = 2;
    $7 = Math_fround(0);
    break label$17;
   }
   $12 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($12)));
   HEAPF32[$4 + 256 >> 2] = $12 * HEAPF32[$4 + 256 >> 2];
   HEAPF32[$4 + 260 >> 2] = $12 * HEAPF32[$4 + 260 >> 2];
   HEAPF32[$4 + 264 >> 2] = $12 * HEAPF32[$4 + 264 >> 2];
   $15 = Math_fround(Math_sqrt($16));
   $10 = Math_fround($13 / $15);
   HEAPF32[$4 + 240 >> 2] = HEAPF32[$4 + 240 >> 2] - Math_fround($10 * $7);
   HEAPF32[$4 + 244 >> 2] = HEAPF32[$4 + 244 >> 2] - Math_fround($10 * $9);
   HEAPF32[$4 + 248 >> 2] = HEAPF32[$4 + 248 >> 2] - Math_fround($10 * $11);
   $10 = Math_fround($24 / $15);
   HEAPF32[$4 + 224 >> 2] = Math_fround($10 * $7) + HEAPF32[$4 + 224 >> 2];
   HEAPF32[$4 + 228 >> 2] = Math_fround($10 * $9) + HEAPF32[$4 + 228 >> 2];
   HEAPF32[$4 + 232 >> 2] = Math_fround($10 * $11) + HEAPF32[$4 + 232 >> 2];
   $14 = 1;
   $7 = Math_fround(Math_fround(Math_fround(1) / $12) - $8);
  }
  HEAP32[$0 + 60 >> 2] = $20;
 }
 if (!(!HEAP32[$0 + 68 >> 2] | (!HEAP32[$0 + 72 >> 2] | !HEAP32[$0 + 20 >> 2]))) {
  $21 = Math_fround($8 + $7) < HEAPF32[4968];
 }
 $20 = $14 ^ 1;
 label$20 : {
  label$21 : {
   label$22 : {
    if ($20 ? 0 : !$21) {
     break label$22;
    }
    $21 = HEAP32[$0 + 20 >> 2];
    if (!$21) {
     break label$22;
    }
    HEAP32[5388] = HEAP32[5388] + 1;
    $5 = $17;
    HEAP32[$5 + 8 >> 2] = 0;
    HEAP32[$5 + 12 >> 2] = 0;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    if (FUNCTION_TABLE[HEAP32[HEAP32[$21 >> 2] + 8 >> 2]]($21, HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2], HEAP32[$0 + 32 >> 2], $4 + 160 | 0, $4 + 96 | 0, $5, $4 + 80 | 0, $4 - -64 | 0, $3)) {
     $12 = Math_fround(0);
     $10 = HEAPF32[$4 + 64 >> 2];
     $15 = HEAPF32[$4 + 80 >> 2];
     $8 = Math_fround($10 - $15);
     $18 = HEAPF32[$4 + 68 >> 2];
     $22 = HEAPF32[$4 + 84 >> 2];
     $9 = Math_fround($18 - $22);
     $19 = HEAPF32[$4 + 72 >> 2];
     $23 = HEAPF32[$4 + 88 >> 2];
     $11 = Math_fround($19 - $23);
     $13 = Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($9 * $9)) + Math_fround($11 * $11));
     if (!!($13 <= Math_fround(1.4210854715202004e-14))) {
      $8 = HEAPF32[$0 + 4 >> 2];
      $9 = HEAPF32[$0 + 8 >> 2];
      $11 = HEAPF32[$0 + 12 >> 2];
      $13 = Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($9 * $9)) + Math_fround($11 * $11));
      $12 = HEAPF32[$0 + 16 >> 2];
     }
     if (!!($13 > Math_fround(1.4210854715202004e-14))) {
      HEAP32[$0 + 60 >> 2] = 3;
      $10 = Math_fround($15 - $10);
      $16 = Math_fround($10 * $10);
      $10 = Math_fround($22 - $18);
      $16 = Math_fround($16 + Math_fround($10 * $10));
      $10 = Math_fround($23 - $19);
      $10 = Math_fround(-Math_fround(Math_sqrt(Math_fround($16 + Math_fround($10 * $10)))));
      if (!(($7 > $10 ^ -1) & ($20 ^ 1))) {
       $5 = HEAP32[$4 + 92 >> 2];
       $6 = HEAP32[$4 + 88 >> 2];
       HEAP32[$4 + 248 >> 2] = $6;
       HEAP32[$4 + 252 >> 2] = $5;
       $6 = HEAP32[$4 + 76 >> 2];
       $5 = HEAP32[$4 + 72 >> 2];
       HEAP32[$4 + 232 >> 2] = $5;
       HEAP32[$4 + 236 >> 2] = $6;
       $5 = HEAP32[$4 + 84 >> 2];
       $6 = HEAP32[$4 + 80 >> 2];
       HEAP32[$4 + 240 >> 2] = $6;
       HEAP32[$4 + 244 >> 2] = $5;
       $6 = HEAP32[$4 + 68 >> 2];
       $5 = HEAP32[$4 + 64 >> 2];
       HEAP32[$4 + 224 >> 2] = $5;
       HEAP32[$4 + 228 >> 2] = $6;
       HEAPF32[$4 + 268 >> 2] = $12;
       $7 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($13)));
       HEAPF32[$4 + 264 >> 2] = $11 * $7;
       HEAPF32[$4 + 260 >> 2] = $9 * $7;
       HEAPF32[$4 + 256 >> 2] = $8 * $7;
       $7 = $10;
       break label$21;
      }
      HEAP32[$0 + 60 >> 2] = 8;
      if ($14) {
       break label$21;
      }
      break label$20;
     }
     HEAP32[$0 + 60 >> 2] = 9;
     if ($14) {
      break label$21;
     }
     break label$20;
    }
    $9 = HEAPF32[$0 + 4 >> 2];
    $11 = HEAPF32[$0 + 8 >> 2];
    $12 = HEAPF32[$0 + 12 >> 2];
    if (!(Math_fround(Math_fround(Math_fround($9 * $9) + Math_fround($11 * $11)) + Math_fround($12 * $12)) > Math_fround(0))) {
     break label$22;
    }
    $10 = Math_fround(HEAPF32[$4 + 80 >> 2] - HEAPF32[$4 + 64 >> 2]);
    $16 = Math_fround($10 * $10);
    $10 = Math_fround(HEAPF32[$4 + 84 >> 2] - HEAPF32[$4 + 68 >> 2]);
    $16 = Math_fround($16 + Math_fround($10 * $10));
    $10 = Math_fround(HEAPF32[$4 + 88 >> 2] - HEAPF32[$4 + 72 >> 2]);
    $8 = Math_fround(Math_fround(Math_sqrt(Math_fround($16 + Math_fround($10 * $10)))) - $8);
    if (!(($8 < $7 ^ -1) & ($20 ^ 1))) {
     $5 = HEAP32[$4 + 92 >> 2];
     $6 = HEAP32[$4 + 88 >> 2];
     $3 = $6;
     $14 = $4 + 248 | 0;
     $6 = $14;
     HEAP32[$6 >> 2] = $3;
     HEAP32[$6 + 4 >> 2] = $5;
     $6 = HEAP32[$4 + 76 >> 2];
     $5 = HEAP32[$4 + 72 >> 2];
     $3 = $5;
     $21 = $4 + 232 | 0;
     $5 = $21;
     HEAP32[$5 >> 2] = $3;
     HEAP32[$5 + 4 >> 2] = $6;
     HEAPF32[$4 + 248 >> 2] = HEAPF32[$4 + 248 >> 2] - Math_fround($13 * $12);
     HEAPF32[$4 + 232 >> 2] = Math_fround($24 * $12) + HEAPF32[$4 + 232 >> 2];
     $5 = HEAP32[$4 + 68 >> 2];
     $6 = HEAP32[$4 + 64 >> 2];
     HEAP32[$4 + 224 >> 2] = $6;
     HEAP32[$4 + 228 >> 2] = $5;
     $6 = HEAP32[$4 + 84 >> 2];
     $5 = HEAP32[$4 + 80 >> 2];
     HEAP32[$4 + 240 >> 2] = $5;
     HEAP32[$4 + 244 >> 2] = $6;
     HEAPF32[$4 + 224 >> 2] = Math_fround($24 * $9) + HEAPF32[$4 + 224 >> 2];
     HEAPF32[$4 + 228 >> 2] = Math_fround($24 * $11) + HEAPF32[$4 + 228 >> 2];
     HEAPF32[$4 + 240 >> 2] = HEAPF32[$4 + 240 >> 2] - Math_fround($13 * $9);
     HEAPF32[$4 + 244 >> 2] = HEAPF32[$4 + 244 >> 2] - Math_fround($13 * $11);
     $5 = HEAP32[$17 + 12 >> 2];
     $6 = HEAP32[$17 + 8 >> 2];
     $3 = $6;
     $14 = $4 + 264 | 0;
     $6 = $14;
     HEAP32[$6 >> 2] = $3;
     HEAP32[$6 + 4 >> 2] = $5;
     $6 = HEAP32[$17 + 4 >> 2];
     $5 = HEAP32[$17 >> 2];
     HEAP32[$4 + 256 >> 2] = $5;
     HEAP32[$4 + 260 >> 2] = $6;
     $7 = HEAPF32[$4 + 264 >> 2];
     $10 = $7;
     $9 = HEAPF32[$4 + 256 >> 2];
     $11 = HEAPF32[$4 + 260 >> 2];
     $7 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($9 * $9) + Math_fround($11 * $11)) + Math_fround($7 * $7)))));
     HEAPF32[$4 + 264 >> 2] = $10 * $7;
     HEAPF32[$4 + 260 >> 2] = $11 * $7;
     HEAPF32[$4 + 256 >> 2] = $9 * $7;
     HEAP32[$0 + 60 >> 2] = 6;
     $7 = $8;
     break label$21;
    }
    HEAP32[$0 + 60 >> 2] = 5;
   }
   if (!$14) {
    break label$20;
   }
  }
  if (Math_fround($7 * $7) < HEAPF32[$1 + 128 >> 2] ^ 1 ? !($7 < Math_fround(0)) : 0) {
   break label$20;
  }
  $5 = HEAP32[$4 + 260 >> 2];
  $6 = HEAP32[$4 + 256 >> 2];
  $3 = $6;
  $6 = $17;
  HEAP32[$6 >> 2] = $3;
  HEAP32[$6 + 4 >> 2] = $5;
  $14 = $4 + 264 | 0;
  $5 = HEAP32[$14 >> 2];
  $6 = HEAP32[$14 + 4 >> 2];
  $3 = $5;
  $5 = $17;
  HEAP32[$5 + 8 >> 2] = $3;
  HEAP32[$5 + 12 >> 2] = $6;
  HEAPF32[$0 + 56 >> 2] = $7;
  $13 = HEAPF32[$1 + 32 >> 2];
  $12 = HEAPF32[$1 >> 2];
  $10 = HEAPF32[$1 + 16 >> 2];
  $15 = HEAPF32[$1 + 36 >> 2];
  $18 = HEAPF32[$1 + 4 >> 2];
  $22 = HEAPF32[$1 + 20 >> 2];
  $19 = HEAPF32[$1 + 40 >> 2];
  $9 = HEAPF32[$1 + 8 >> 2];
  $23 = HEAPF32[$1 + 24 >> 2];
  HEAP32[$4 + 92 >> 2] = 0;
  $8 = HEAPF32[$4 + 256 >> 2];
  $11 = HEAPF32[$4 + 260 >> 2];
  $16 = Math_fround(Math_fround($9 * $8) + Math_fround($23 * $11));
  $9 = HEAPF32[$4 + 264 >> 2];
  HEAPF32[$4 + 88 >> 2] = $16 + Math_fround($19 * $9);
  HEAPF32[$4 + 84 >> 2] = Math_fround(Math_fround($8 * $18) + Math_fround($11 * $22)) + Math_fround($9 * $15);
  HEAPF32[$4 + 80 >> 2] = Math_fround(Math_fround($12 * $8) + Math_fround($10 * $11)) + Math_fround($13 * $9);
  $13 = HEAPF32[$1 + 96 >> 2];
  $12 = HEAPF32[$1 + 80 >> 2];
  $10 = HEAPF32[$1 + 64 >> 2];
  $15 = HEAPF32[$1 + 100 >> 2];
  $18 = HEAPF32[$1 + 84 >> 2];
  $22 = HEAPF32[$1 + 68 >> 2];
  $19 = HEAPF32[$1 + 104 >> 2];
  $23 = HEAPF32[$1 + 88 >> 2];
  $25 = HEAPF32[$1 + 72 >> 2];
  HEAP32[$4 + 76 >> 2] = 0;
  $11 = Math_fround(-$11);
  HEAPF32[$4 + 72 >> 2] = Math_fround(Math_fround($23 * $11) - Math_fround($8 * $25)) - Math_fround($9 * $19);
  HEAPF32[$4 + 68 >> 2] = Math_fround(Math_fround($18 * $11) - Math_fround($8 * $22)) - Math_fround($9 * $15);
  HEAPF32[$4 + 64 >> 2] = Math_fround(Math_fround($12 * $11) - Math_fround($8 * $10)) - Math_fround($9 * $13);
  btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($4 + 48 | 0, HEAP32[$0 + 28 >> 2], $4 + 80 | 0);
  btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($4 + 32 | 0, HEAP32[$0 + 32 >> 2], $4 - -64 | 0);
  $8 = HEAPF32[$4 + 264 >> 2];
  $23 = HEAPF32[$4 + 216 >> 2];
  $25 = HEAPF32[$4 + 200 >> 2];
  $16 = HEAPF32[$4 + 192 >> 2];
  $24 = HEAPF32[$4 + 196 >> 2];
  $29 = HEAPF32[$4 + 152 >> 2];
  $40 = HEAPF32[$4 + 136 >> 2];
  $41 = HEAPF32[$4 + 128 >> 2];
  $42 = HEAPF32[$4 + 132 >> 2];
  $43 = HEAPF32[$4 + 212 >> 2];
  $44 = HEAPF32[$4 + 184 >> 2];
  $45 = HEAPF32[$4 + 176 >> 2];
  $46 = HEAPF32[$4 + 180 >> 2];
  $47 = HEAPF32[$4 + 148 >> 2];
  $48 = HEAPF32[$4 + 120 >> 2];
  $49 = HEAPF32[$4 + 112 >> 2];
  $50 = HEAPF32[$4 + 116 >> 2];
  $51 = HEAPF32[$4 + 208 >> 2];
  $52 = HEAPF32[$4 + 168 >> 2];
  $13 = HEAPF32[$4 + 56 >> 2];
  $53 = HEAPF32[$4 + 160 >> 2];
  $12 = HEAPF32[$4 + 48 >> 2];
  $54 = HEAPF32[$4 + 164 >> 2];
  $10 = HEAPF32[$4 + 52 >> 2];
  $55 = HEAPF32[$4 + 144 >> 2];
  $56 = HEAPF32[$4 + 104 >> 2];
  $15 = HEAPF32[$4 + 40 >> 2];
  $57 = HEAPF32[$4 + 96 >> 2];
  $18 = HEAPF32[$4 + 32 >> 2];
  $58 = HEAPF32[$4 + 100 >> 2];
  $22 = HEAPF32[$4 + 36 >> 2];
  $11 = HEAPF32[$4 + 260 >> 2];
  $9 = HEAPF32[$4 + 256 >> 2];
  $30 = HEAPF32[$1 + 32 >> 2];
  $31 = HEAPF32[$1 + 16 >> 2];
  $32 = HEAPF32[$1 >> 2];
  $33 = HEAPF32[$1 + 36 >> 2];
  $34 = HEAPF32[$1 + 20 >> 2];
  $35 = HEAPF32[$1 + 4 >> 2];
  $36 = HEAPF32[$1 + 40 >> 2];
  $37 = HEAPF32[$1 + 24 >> 2];
  $38 = HEAPF32[$1 + 8 >> 2];
  HEAP32[$4 + 92 >> 2] = 0;
  $19 = Math_fround(-$11);
  HEAPF32[$4 + 88 >> 2] = Math_fround(Math_fround($37 * $19) - Math_fround($9 * $38)) - Math_fround($8 * $36);
  HEAPF32[$4 + 84 >> 2] = Math_fround(Math_fround($34 * $19) - Math_fround($9 * $35)) - Math_fround($8 * $33);
  HEAPF32[$4 + 80 >> 2] = Math_fround(Math_fround($31 * $19) - Math_fround($9 * $32)) - Math_fround($8 * $30);
  $30 = HEAPF32[$1 + 96 >> 2];
  $31 = HEAPF32[$1 + 64 >> 2];
  $32 = HEAPF32[$1 + 80 >> 2];
  $33 = HEAPF32[$1 + 100 >> 2];
  $34 = HEAPF32[$1 + 68 >> 2];
  $35 = HEAPF32[$1 + 84 >> 2];
  $36 = HEAPF32[$1 + 104 >> 2];
  $37 = HEAPF32[$1 + 72 >> 2];
  $38 = HEAPF32[$1 + 88 >> 2];
  HEAP32[$4 + 76 >> 2] = 0;
  HEAPF32[$4 + 72 >> 2] = Math_fround(Math_fround($9 * $37) + Math_fround($11 * $38)) + Math_fround($8 * $36);
  HEAPF32[$4 + 68 >> 2] = Math_fround(Math_fround($9 * $34) + Math_fround($11 * $35)) + Math_fround($8 * $33);
  HEAPF32[$4 + 64 >> 2] = Math_fround(Math_fround($9 * $31) + Math_fround($11 * $32)) + Math_fround($8 * $30);
  btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($4 + 48 | 0, HEAP32[$0 + 28 >> 2], $4 + 80 | 0);
  btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($4 + 32 | 0, HEAP32[$0 + 32 >> 2], $4 - -64 | 0);
  $16 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($43 + Math_fround(Math_fround(Math_fround($12 * $45) + Math_fround($10 * $46)) + Math_fround($13 * $44))) - Math_fround($47 + Math_fround(Math_fround(Math_fround($18 * $49) + Math_fround($22 * $50)) + Math_fround($15 * $48)))) * $19) - Math_fround($9 * Math_fround(Math_fround($51 + Math_fround(Math_fround(Math_fround($12 * $53) + Math_fround($10 * $54)) + Math_fround($13 * $52))) - Math_fround($55 + Math_fround(Math_fround(Math_fround($18 * $57) + Math_fround($22 * $58)) + Math_fround($15 * $56)))))) - Math_fround($8 * Math_fround(Math_fround($23 + Math_fround(Math_fround(Math_fround($12 * $16) + Math_fround($10 * $24)) + Math_fround($13 * $25))) - Math_fround($29 + Math_fround(Math_fround(Math_fround($18 * $41) + Math_fround($22 * $42)) + Math_fround($15 * $40))))));
  $8 = HEAPF32[$4 + 48 >> 2];
  $9 = HEAPF32[$4 + 52 >> 2];
  $11 = HEAPF32[$4 + 56 >> 2];
  $13 = HEAPF32[$4 + 32 >> 2];
  $12 = HEAPF32[$4 + 36 >> 2];
  $10 = HEAPF32[$4 + 40 >> 2];
  $15 = HEAPF32[$4 + 256 >> 2];
  $18 = HEAPF32[$4 + 260 >> 2];
  $19 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($8 * HEAPF32[$4 + 160 >> 2]) + Math_fround($9 * HEAPF32[$4 + 164 >> 2])) + Math_fround($11 * HEAPF32[$4 + 168 >> 2])) + HEAPF32[$4 + 208 >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround($13 * HEAPF32[$4 + 96 >> 2]) + Math_fround($12 * HEAPF32[$4 + 100 >> 2])) + Math_fround($10 * HEAPF32[$4 + 104 >> 2])) + HEAPF32[$4 + 144 >> 2])) * $15) + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($8 * HEAPF32[$4 + 176 >> 2]) + Math_fround($9 * HEAPF32[$4 + 180 >> 2])) + Math_fround($11 * HEAPF32[$4 + 184 >> 2])) + HEAPF32[$4 + 212 >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround($13 * HEAPF32[$4 + 112 >> 2]) + Math_fround($12 * HEAPF32[$4 + 116 >> 2])) + Math_fround($10 * HEAPF32[$4 + 120 >> 2])) + HEAPF32[$4 + 148 >> 2])) * $18));
  $10 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($8 * HEAPF32[$4 + 192 >> 2]) + Math_fround($9 * HEAPF32[$4 + 196 >> 2])) + Math_fround($11 * HEAPF32[$4 + 200 >> 2])) + HEAPF32[$4 + 216 >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround($13 * HEAPF32[$4 + 128 >> 2]) + Math_fround($12 * HEAPF32[$4 + 132 >> 2])) + Math_fround($10 * HEAPF32[$4 + 136 >> 2])) + HEAPF32[$4 + 152 >> 2]));
  $8 = HEAPF32[$4 + 264 >> 2];
  if (!!($16 > Math_fround($19 + Math_fround($10 * $8)))) {
   HEAP32[$0 + 60 >> 2] = 10;
   HEAPF32[$4 + 264 >> 2] = -$8;
   HEAPF32[$4 + 260 >> 2] = -$18;
   HEAPF32[$4 + 256 >> 2] = -$15;
  }
  HEAP32[$4 + 92 >> 2] = 0;
  HEAPF32[$4 + 88 >> 2] = $27 + HEAPF32[$4 + 232 >> 2];
  HEAPF32[$4 + 84 >> 2] = $26 + HEAPF32[$4 + 228 >> 2];
  HEAPF32[$4 + 80 >> 2] = $28 + HEAPF32[$4 + 224 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $4 + 256 | 0, $4 + 80 | 0, $7);
 }
 $0 = $4 + 272 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = 0, $34 = 0, $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0);
 $6 = global$0 - 688 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 $7 = HEAP32[$3 + 12 >> 2];
 $21 = HEAP32[$3 + 4 >> 2];
 $33 = HEAP32[$21 + 4 >> 2];
 label$2 : {
  if (($33 | 0) <= 19) {
   HEAPF32[$6 + 660 >> 2] = $5;
   HEAP32[$6 + 656 >> 2] = 0;
   HEAP32[$6 + 488 >> 2] = 6988;
   HEAP32[$6 + 652 >> 2] = HEAP32[$4 + 4 >> 2];
   HEAP8[$6 + 460 | 0] = 0;
   HEAP32[$6 + 436 >> 2] = 953267991;
   HEAP32[$6 + 64 >> 2] = 4316;
   $21 = btContinuousConvexCollision__btContinuousConvexCollision_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($6 + 664 | 0, $0, $21, $6 + 128 | 0, $6 - -64 | 0);
   label$4 : {
    if (!FUNCTION_TABLE[HEAP32[HEAP32[$21 >> 2] + 8 >> 2]]($21, $1, $2, $7, $7, $6 + 488 | 0)) {
     break label$4;
    }
    $5 = HEAPF32[$6 + 620 >> 2];
    $8 = HEAPF32[$6 + 624 >> 2];
    $10 = HEAPF32[$6 + 628 >> 2];
    $9 = Math_fround(Math_fround(Math_fround($5 * $5) + Math_fround($8 * $8)) + Math_fround($10 * $10));
    if (!($9 > Math_fround(9999999747378752e-20))) {
     break label$4;
    }
    $11 = HEAPF32[$6 + 652 >> 2];
    if (!($11 < HEAPF32[$4 + 4 >> 2])) {
     break label$4;
    }
    $9 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($9)));
    HEAPF32[$6 + 628 >> 2] = $10 * $9;
    HEAPF32[$6 + 624 >> 2] = $8 * $9;
    HEAPF32[$6 + 620 >> 2] = $5 * $9;
    $7 = HEAP32[$3 + 8 >> 2];
    HEAP32[$6 + 84 >> 2] = 0;
    HEAP32[$6 + 80 >> 2] = $7;
    $7 = $6 + 620 | 0;
    $3 = HEAP32[$7 + 8 >> 2];
    $0 = HEAP32[$7 + 12 >> 2];
    HEAP32[$6 + 96 >> 2] = $3;
    HEAP32[$6 + 100 >> 2] = $0;
    $0 = HEAP32[$6 + 620 >> 2];
    $2 = $0;
    $3 = HEAP32[$6 + 624 >> 2];
    $1 = $3;
    $0 = HEAP32[$6 + 648 >> 2];
    $3 = HEAP32[$6 + 644 >> 2];
    HEAP32[$6 + 112 >> 2] = $3;
    HEAP32[$6 + 116 >> 2] = $0;
    HEAP32[$6 + 88 >> 2] = $2;
    $0 = $1;
    HEAP32[$6 + 92 >> 2] = $0;
    $3 = HEAP32[$6 + 640 >> 2];
    $0 = HEAP32[$6 + 636 >> 2];
    HEAP32[$6 + 104 >> 2] = $0;
    HEAP32[$6 + 108 >> 2] = $3;
    HEAPF32[$6 + 120 >> 2] = $11;
    Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, $6 + 80 | 0, 1));
   }
   btConvexCast___btConvexCast_28_29($21);
   break label$2;
  }
  $34 = $33 + -21 | 0;
  if ($34 >>> 0 <= 8) {
   label$6 : {
    if ($34 >>> 0 > 7) {
     break label$6;
    }
    label$7 : {
     switch ($34 - 1 | 0) {
     default:
      $8 = HEAPF32[$7 + 20 >> 2];
      $10 = HEAPF32[$7 + 36 >> 2];
      $9 = HEAPF32[$7 + 24 >> 2];
      $19 = HEAPF32[$7 + 52 >> 2];
      $12 = HEAPF32[$7 + 56 >> 2];
      $11 = HEAPF32[$7 + 40 >> 2];
      $13 = HEAPF32[$7 + 32 >> 2];
      $14 = HEAPF32[$7 + 16 >> 2];
      $17 = HEAPF32[$7 >> 2];
      $18 = HEAPF32[$7 + 4 >> 2];
      $15 = HEAPF32[$7 + 48 >> 2];
      $16 = HEAPF32[$7 + 8 >> 2];
      $20 = HEAPF32[$1 + 52 >> 2];
      $23 = HEAPF32[$1 + 56 >> 2];
      $24 = HEAPF32[$1 + 48 >> 2];
      HEAP32[$6 + 92 >> 2] = 0;
      $19 = Math_fround(-$19);
      $25 = Math_fround(Math_fround(Math_fround($9 * $19) - Math_fround($16 * $15)) - Math_fround($11 * $12));
      HEAPF32[$6 + 88 >> 2] = $25 + Math_fround(Math_fround(Math_fround($16 * $24) + Math_fround($9 * $20)) + Math_fround($11 * $23));
      $22 = Math_fround(Math_fround(Math_fround($8 * $19) - Math_fround($18 * $15)) - Math_fround($10 * $12));
      HEAPF32[$6 + 84 >> 2] = $22 + Math_fround(Math_fround(Math_fround($18 * $24) + Math_fround($8 * $20)) + Math_fround($10 * $23));
      $19 = Math_fround(Math_fround(Math_fround($14 * $19) - Math_fround($17 * $15)) - Math_fround($13 * $12));
      HEAPF32[$6 + 80 >> 2] = $19 + Math_fround(Math_fround(Math_fround($17 * $24) + Math_fround($14 * $20)) + Math_fround($13 * $23));
      $12 = HEAPF32[$2 + 52 >> 2];
      $15 = HEAPF32[$2 + 56 >> 2];
      $20 = HEAPF32[$2 + 48 >> 2];
      HEAP32[$6 + 676 >> 2] = 0;
      HEAPF32[$6 + 672 >> 2] = $25 + Math_fround(Math_fround(Math_fround($16 * $20) + Math_fround($9 * $12)) + Math_fround($11 * $15));
      HEAPF32[$6 + 668 >> 2] = $22 + Math_fround(Math_fround(Math_fround($18 * $20) + Math_fround($8 * $12)) + Math_fround($10 * $15));
      HEAPF32[$6 + 664 >> 2] = $19 + Math_fround(Math_fround(Math_fround($17 * $20) + Math_fround($14 * $12)) + Math_fround($13 * $15));
      $12 = HEAPF32[$2 + 20 >> 2];
      $15 = HEAPF32[$2 + 36 >> 2];
      $20 = HEAPF32[$2 + 24 >> 2];
      $23 = HEAPF32[$2 + 40 >> 2];
      $24 = HEAPF32[$2 + 32 >> 2];
      $19 = HEAPF32[$2 >> 2];
      $25 = HEAPF32[$2 + 16 >> 2];
      $22 = HEAPF32[$2 + 4 >> 2];
      $26 = HEAPF32[$2 + 8 >> 2];
      HEAP32[$6 + 532 >> 2] = 0;
      HEAP32[$6 + 536 >> 2] = 0;
      HEAP32[$6 + 516 >> 2] = 0;
      HEAP32[$6 + 540 >> 2] = 0;
      HEAP32[$6 + 544 >> 2] = 0;
      HEAP32[$6 + 548 >> 2] = 0;
      HEAPF32[$6 + 528 >> 2] = Math_fround(Math_fround($16 * $26) + Math_fround($9 * $20)) + Math_fround($11 * $23);
      HEAPF32[$6 + 524 >> 2] = Math_fround(Math_fround($16 * $22) + Math_fround($9 * $12)) + Math_fround($11 * $15);
      HEAPF32[$6 + 512 >> 2] = Math_fround(Math_fround($18 * $26) + Math_fround($8 * $20)) + Math_fround($10 * $23);
      HEAPF32[$6 + 508 >> 2] = Math_fround(Math_fround($18 * $22) + Math_fround($8 * $12)) + Math_fround($10 * $15);
      HEAP32[$6 + 500 >> 2] = 0;
      HEAPF32[$6 + 520 >> 2] = Math_fround(Math_fround($16 * $19) + Math_fround($9 * $25)) + Math_fround($11 * $24);
      HEAPF32[$6 + 504 >> 2] = Math_fround(Math_fround($18 * $19) + Math_fround($8 * $25)) + Math_fround($10 * $24);
      HEAPF32[$6 + 496 >> 2] = Math_fround(Math_fround($17 * $26) + Math_fround($14 * $20)) + Math_fround($13 * $23);
      HEAPF32[$6 + 492 >> 2] = Math_fround(Math_fround($17 * $22) + Math_fround($14 * $12)) + Math_fround($13 * $15);
      HEAPF32[$6 + 488 >> 2] = Math_fround(Math_fround($17 * $19) + Math_fround($14 * $25)) + Math_fround($13 * $24);
      $3 = HEAP32[$3 + 8 >> 2];
      btTriangleConvexcastCallback__btTriangleConvexcastCallback_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20float_29($6 + 128 | 0, $0, $1, $2, $7, Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$21 >> 2] + 48 >> 2]]($21)));
      HEAP32[$6 + 348 >> 2] = $21;
      HEAP32[$6 + 344 >> 2] = $3;
      HEAP32[$6 + 128 >> 2] = 8520;
      HEAP32[$6 + 340 >> 2] = $4;
      $7 = HEAP32[$4 + 4 >> 2];
      HEAPF32[$6 + 336 >> 2] = $5;
      HEAP32[$6 + 328 >> 2] = $7;
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $6 + 488 | 0, $6 - -64 | 0, $6 + 48 | 0);
      btBvhTriangleMeshShape__performConvexcast_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29($21, $6 + 128 | 0, $6 + 80 | 0, $6 + 664 | 0, $6 - -64 | 0, $6 + 48 | 0);
      btTriangleCallback___btTriangleCallback_28_29($6 + 128 | 0);
      break label$2;
     case 0:
     case 1:
     case 2:
     case 3:
     case 4:
     case 5:
      break label$6;
     case 6:
      break label$7;
     }
    }
    HEAPF32[$6 + 300 >> 2] = $5;
    HEAP32[$6 + 296 >> 2] = 0;
    HEAP32[$6 + 128 >> 2] = 6988;
    HEAP32[$6 + 292 >> 2] = HEAP32[$4 + 4 >> 2];
    $21 = btContinuousConvexCollision__btContinuousConvexCollision_28btConvexShape_20const__2c_20btStaticPlaneShape_20const__29($6 + 80 | 0, $0, $21);
    label$9 : {
     if (!FUNCTION_TABLE[HEAP32[HEAP32[$21 >> 2] + 8 >> 2]]($21, $1, $2, $7, $7, $6 + 128 | 0)) {
      break label$9;
     }
     $5 = HEAPF32[$6 + 260 >> 2];
     $8 = HEAPF32[$6 + 264 >> 2];
     $10 = HEAPF32[$6 + 268 >> 2];
     $9 = Math_fround(Math_fround(Math_fround($5 * $5) + Math_fround($8 * $8)) + Math_fround($10 * $10));
     if (!($9 > Math_fround(9999999747378752e-20))) {
      break label$9;
     }
     $11 = HEAPF32[$6 + 292 >> 2];
     if (!($11 < HEAPF32[$4 + 4 >> 2])) {
      break label$9;
     }
     $9 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($9)));
     HEAPF32[$6 + 268 >> 2] = $10 * $9;
     HEAPF32[$6 + 264 >> 2] = $8 * $9;
     HEAPF32[$6 + 260 >> 2] = $5 * $9;
     $7 = HEAP32[$3 + 8 >> 2];
     HEAP32[$6 + 492 >> 2] = 0;
     HEAP32[$6 + 488 >> 2] = $7;
     $7 = $6 + 260 | 0;
     $3 = HEAP32[$7 + 8 >> 2];
     $0 = HEAP32[$7 + 12 >> 2];
     HEAP32[$6 + 504 >> 2] = $3;
     HEAP32[$6 + 508 >> 2] = $0;
     $0 = HEAP32[$6 + 260 >> 2];
     $2 = $0;
     $3 = HEAP32[$6 + 264 >> 2];
     $1 = $3;
     $0 = HEAP32[$6 + 288 >> 2];
     $3 = HEAP32[$6 + 284 >> 2];
     HEAP32[$6 + 520 >> 2] = $3;
     HEAP32[$6 + 524 >> 2] = $0;
     HEAP32[$6 + 496 >> 2] = $2;
     $0 = $1;
     HEAP32[$6 + 500 >> 2] = $0;
     $3 = HEAP32[$6 + 280 >> 2];
     $0 = HEAP32[$6 + 276 >> 2];
     HEAP32[$6 + 512 >> 2] = $0;
     HEAP32[$6 + 516 >> 2] = $3;
     HEAPF32[$6 + 528 >> 2] = $11;
     Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, $6 + 488 | 0, 1));
    }
    btConvexCast___btConvexCast_28_29($21);
    break label$2;
   }
   $20 = HEAPF32[$2 + 52 >> 2];
   $23 = HEAPF32[$2 + 56 >> 2];
   $37 = HEAPF32[$7 + 52 >> 2];
   $15 = HEAPF32[$7 + 56 >> 2];
   $24 = HEAPF32[$1 + 52 >> 2];
   $19 = HEAPF32[$1 + 56 >> 2];
   $8 = HEAPF32[$7 + 20 >> 2];
   $10 = HEAPF32[$7 + 36 >> 2];
   $9 = HEAPF32[$7 + 24 >> 2];
   $11 = HEAPF32[$7 + 40 >> 2];
   $25 = HEAPF32[$2 + 48 >> 2];
   $22 = HEAPF32[$7 + 48 >> 2];
   $26 = HEAPF32[$1 + 48 >> 2];
   $13 = HEAPF32[$7 + 32 >> 2];
   $14 = HEAPF32[$7 >> 2];
   $17 = HEAPF32[$7 + 16 >> 2];
   $18 = HEAPF32[$7 + 4 >> 2];
   $16 = HEAPF32[$7 + 8 >> 2];
   $12 = HEAPF32[$2 + 20 >> 2];
   $27 = HEAPF32[$2 + 36 >> 2];
   $28 = HEAPF32[$2 + 24 >> 2];
   $29 = HEAPF32[$2 + 40 >> 2];
   $31 = HEAPF32[$2 + 32 >> 2];
   $32 = HEAPF32[$2 >> 2];
   $30 = HEAPF32[$2 + 16 >> 2];
   $35 = HEAPF32[$2 + 4 >> 2];
   $36 = HEAPF32[$2 + 8 >> 2];
   HEAP32[$6 + 532 >> 2] = 0;
   HEAP32[$6 + 536 >> 2] = 0;
   HEAP32[$6 + 516 >> 2] = 0;
   HEAP32[$6 + 540 >> 2] = 0;
   HEAP32[$6 + 544 >> 2] = 0;
   HEAP32[$6 + 548 >> 2] = 0;
   HEAPF32[$6 + 528 >> 2] = Math_fround(Math_fround($16 * $36) + Math_fround($9 * $28)) + Math_fround($11 * $29);
   HEAPF32[$6 + 524 >> 2] = Math_fround(Math_fround($16 * $35) + Math_fround($9 * $12)) + Math_fround($11 * $27);
   HEAPF32[$6 + 512 >> 2] = Math_fround(Math_fround($18 * $36) + Math_fround($8 * $28)) + Math_fround($10 * $29);
   HEAPF32[$6 + 508 >> 2] = Math_fround(Math_fround($18 * $35) + Math_fround($8 * $12)) + Math_fround($10 * $27);
   HEAP32[$6 + 500 >> 2] = 0;
   HEAPF32[$6 + 520 >> 2] = Math_fround(Math_fround($16 * $32) + Math_fround($9 * $30)) + Math_fround($11 * $31);
   HEAPF32[$6 + 504 >> 2] = Math_fround(Math_fround($18 * $32) + Math_fround($8 * $30)) + Math_fround($10 * $31);
   HEAPF32[$6 + 496 >> 2] = Math_fround(Math_fround($14 * $36) + Math_fround($17 * $28)) + Math_fround($13 * $29);
   HEAPF32[$6 + 492 >> 2] = Math_fround(Math_fround($14 * $35) + Math_fround($17 * $12)) + Math_fround($13 * $27);
   HEAPF32[$6 + 488 >> 2] = Math_fround(Math_fround($14 * $32) + Math_fround($17 * $30)) + Math_fround($13 * $31);
   $3 = HEAP32[$3 + 8 >> 2];
   btTriangleConvexcastCallback__btTriangleConvexcastCallback_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20float_29($6 + 128 | 0, $0, $1, $2, $7, Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$21 >> 2] + 48 >> 2]]($21)));
   HEAP32[$6 + 348 >> 2] = $21;
   HEAP32[$6 + 344 >> 2] = $3;
   HEAP32[$6 + 128 >> 2] = 8732;
   HEAP32[$6 + 340 >> 2] = $4;
   $7 = HEAP32[$4 + 4 >> 2];
   HEAPF32[$6 + 336 >> 2] = $5;
   HEAP32[$6 + 328 >> 2] = $7;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $6 + 488 | 0, $6 + 80 | 0, $6 + 664 | 0);
   HEAP32[$6 + 76 >> 2] = 0;
   $27 = Math_fround(-$37);
   $28 = Math_fround(Math_fround(Math_fround($9 * $27) - Math_fround($16 * $22)) - Math_fround($11 * $15));
   $5 = Math_fround($28 + Math_fround(Math_fround(Math_fround($16 * $26) + Math_fround($9 * $24)) + Math_fround($11 * $19)));
   HEAPF32[$6 + 72 >> 2] = $5;
   $29 = Math_fround(Math_fround(Math_fround($8 * $27) - Math_fround($18 * $22)) - Math_fround($10 * $15));
   $12 = Math_fround($29 + Math_fround(Math_fround(Math_fround($18 * $26) + Math_fround($8 * $24)) + Math_fround($10 * $19)));
   HEAPF32[$6 + 68 >> 2] = $12;
   $22 = Math_fround(Math_fround(Math_fround($17 * $27) - Math_fround($14 * $22)) - Math_fround($13 * $15));
   $15 = Math_fround($22 + Math_fround(Math_fround(Math_fround($14 * $26) + Math_fround($17 * $24)) + Math_fround($13 * $19)));
   HEAPF32[$6 + 64 >> 2] = $15;
   $16 = Math_fround(Math_fround(Math_fround($16 * $25) + Math_fround($9 * $20)) + Math_fround($11 * $23));
   $8 = Math_fround($29 + Math_fround(Math_fround(Math_fround($18 * $25) + Math_fround($8 * $20)) + Math_fround($10 * $23)));
   $9 = Math_fround($22 + Math_fround(Math_fround(Math_fround($14 * $25) + Math_fround($17 * $20)) + Math_fround($13 * $23)));
   $11 = $15;
   if (!!($9 < $11)) {
    HEAPF32[$6 + 64 >> 2] = $9;
    $11 = $9;
   }
   $10 = Math_fround($28 + $16);
   $13 = $12;
   if (!!($8 < $13)) {
    HEAPF32[$6 + 68 >> 2] = $8;
    $13 = $8;
   }
   $14 = $5;
   if (!!($10 < $14)) {
    HEAPF32[$6 + 72 >> 2] = $10;
    $14 = $10;
   }
   HEAP32[$6 + 60 >> 2] = 0;
   HEAPF32[$6 + 56 >> 2] = $5;
   HEAPF32[$6 + 52 >> 2] = $12;
   HEAPF32[$6 + 48 >> 2] = $15;
   if (!!($15 < $9)) {
    HEAPF32[$6 + 48 >> 2] = $9;
    $15 = $9;
   }
   if (!!($12 < $8)) {
    HEAPF32[$6 + 52 >> 2] = $8;
    $12 = $8;
   }
   if (!!($5 < $10)) {
    HEAPF32[$6 + 56 >> 2] = $10;
    $5 = $10;
   }
   HEAPF32[$6 + 64 >> 2] = HEAPF32[$6 + 80 >> 2] + $11;
   HEAPF32[$6 + 68 >> 2] = HEAPF32[$6 + 84 >> 2] + $13;
   HEAPF32[$6 + 72 >> 2] = HEAPF32[$6 + 88 >> 2] + $14;
   HEAPF32[$6 + 48 >> 2] = HEAPF32[$6 + 664 >> 2] + $15;
   HEAPF32[$6 + 52 >> 2] = HEAPF32[$6 + 668 >> 2] + $12;
   HEAPF32[$6 + 56 >> 2] = HEAPF32[$6 + 672 >> 2] + $5;
   FUNCTION_TABLE[HEAP32[HEAP32[$21 >> 2] + 64 >> 2]]($21, $6 + 128 | 0, $6 - -64 | 0, $6 + 48 | 0);
   btTriangleCallback___btTriangleCallback_28_29($6 + 128 | 0);
   break label$2;
  }
  if (($33 | 0) != 31) {
   break label$2;
  }
  $33 = CProfileSample__CProfileSample_28char_20const__29($6 + 40 | 0, 7889);
  $34 = $7 + 52 | 0;
  $30 = HEAPF32[$34 >> 2];
  $12 = HEAPF32[$7 + 56 >> 2];
  $15 = HEAPF32[$1 + 52 >> 2];
  $20 = HEAPF32[$1 + 56 >> 2];
  $8 = HEAPF32[$7 + 20 >> 2];
  $10 = HEAPF32[$7 + 36 >> 2];
  $23 = HEAPF32[$1 + 20 >> 2];
  $24 = HEAPF32[$1 + 36 >> 2];
  $19 = HEAPF32[$1 + 24 >> 2];
  $9 = HEAPF32[$7 + 24 >> 2];
  $25 = HEAPF32[$1 + 40 >> 2];
  $11 = HEAPF32[$7 + 40 >> 2];
  $13 = HEAPF32[$7 + 32 >> 2];
  $14 = HEAPF32[$7 >> 2];
  $17 = HEAPF32[$7 + 16 >> 2];
  $22 = HEAPF32[$1 + 32 >> 2];
  $26 = HEAPF32[$1 >> 2];
  $27 = HEAPF32[$1 + 16 >> 2];
  $28 = HEAPF32[$7 + 48 >> 2];
  $29 = HEAPF32[$1 + 48 >> 2];
  $18 = HEAPF32[$7 + 4 >> 2];
  $31 = HEAPF32[$1 + 4 >> 2];
  $32 = HEAPF32[$1 + 8 >> 2];
  $16 = HEAPF32[$7 + 8 >> 2];
  HEAP32[$6 + 188 >> 2] = 0;
  HEAP32[$6 + 172 >> 2] = 0;
  HEAP32[$6 + 156 >> 2] = 0;
  HEAPF32[$6 + 168 >> 2] = Math_fround(Math_fround($16 * $32) + Math_fround($9 * $19)) + Math_fround($11 * $25);
  HEAPF32[$6 + 164 >> 2] = Math_fround(Math_fround($16 * $31) + Math_fround($9 * $23)) + Math_fround($11 * $24);
  HEAPF32[$6 + 152 >> 2] = Math_fround(Math_fround($18 * $32) + Math_fround($8 * $19)) + Math_fround($10 * $25);
  HEAPF32[$6 + 148 >> 2] = Math_fround(Math_fround($18 * $31) + Math_fround($8 * $23)) + Math_fround($10 * $24);
  $30 = Math_fround(-$30);
  HEAPF32[$6 + 184 >> 2] = Math_fround(Math_fround(Math_fround($9 * $30) - Math_fround($16 * $28)) - Math_fround($11 * $12)) + Math_fround(Math_fround(Math_fround($16 * $29) + Math_fround($9 * $15)) + Math_fround($11 * $20));
  HEAPF32[$6 + 180 >> 2] = Math_fround(Math_fround(Math_fround($8 * $30) - Math_fround($18 * $28)) - Math_fround($10 * $12)) + Math_fround(Math_fround(Math_fround($18 * $29) + Math_fround($8 * $15)) + Math_fround($10 * $20));
  HEAP32[$6 + 140 >> 2] = 0;
  HEAPF32[$6 + 160 >> 2] = Math_fround(Math_fround($16 * $26) + Math_fround($9 * $27)) + Math_fround($11 * $22);
  HEAPF32[$6 + 144 >> 2] = Math_fround(Math_fround($18 * $26) + Math_fround($8 * $27)) + Math_fround($10 * $22);
  HEAPF32[$6 + 136 >> 2] = Math_fround(Math_fround($14 * $32) + Math_fround($17 * $19)) + Math_fround($13 * $25);
  HEAPF32[$6 + 132 >> 2] = Math_fround(Math_fround($14 * $31) + Math_fround($17 * $23)) + Math_fround($13 * $24);
  HEAPF32[$6 + 128 >> 2] = Math_fround(Math_fround($14 * $26) + Math_fround($17 * $27)) + Math_fround($13 * $22);
  HEAPF32[$6 + 176 >> 2] = Math_fround(Math_fround(Math_fround($17 * $30) - Math_fround($14 * $28)) - Math_fround($13 * $12)) + Math_fround(Math_fround(Math_fround($14 * $29) + Math_fround($17 * $15)) + Math_fround($13 * $20));
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $6 + 128 | 0, $6 - -64 | 0, $6 + 48 | 0);
  $30 = HEAPF32[$7 + 52 >> 2];
  $12 = HEAPF32[$7 + 56 >> 2];
  $15 = HEAPF32[$2 + 52 >> 2];
  $20 = HEAPF32[$2 + 56 >> 2];
  $8 = HEAPF32[$7 + 20 >> 2];
  $10 = HEAPF32[$7 + 36 >> 2];
  $23 = HEAPF32[$2 + 20 >> 2];
  $24 = HEAPF32[$2 + 36 >> 2];
  $19 = HEAPF32[$2 + 24 >> 2];
  $9 = HEAPF32[$7 + 24 >> 2];
  $25 = HEAPF32[$2 + 40 >> 2];
  $11 = HEAPF32[$7 + 40 >> 2];
  $13 = HEAPF32[$7 + 32 >> 2];
  $14 = HEAPF32[$7 >> 2];
  $17 = HEAPF32[$7 + 16 >> 2];
  $22 = HEAPF32[$2 + 32 >> 2];
  $26 = HEAPF32[$2 >> 2];
  $27 = HEAPF32[$2 + 16 >> 2];
  $28 = HEAPF32[$7 + 48 >> 2];
  $29 = HEAPF32[$2 + 48 >> 2];
  $18 = HEAPF32[$7 + 4 >> 2];
  $31 = HEAPF32[$2 + 4 >> 2];
  $32 = HEAPF32[$2 + 8 >> 2];
  $16 = HEAPF32[$7 + 8 >> 2];
  HEAP32[$6 + 188 >> 2] = 0;
  HEAP32[$6 + 172 >> 2] = 0;
  HEAP32[$6 + 156 >> 2] = 0;
  HEAPF32[$6 + 168 >> 2] = Math_fround(Math_fround($16 * $32) + Math_fround($9 * $19)) + Math_fround($11 * $25);
  HEAPF32[$6 + 164 >> 2] = Math_fround(Math_fround($16 * $31) + Math_fround($9 * $23)) + Math_fround($11 * $24);
  HEAPF32[$6 + 152 >> 2] = Math_fround(Math_fround($18 * $32) + Math_fround($8 * $19)) + Math_fround($10 * $25);
  HEAPF32[$6 + 148 >> 2] = Math_fround(Math_fround($18 * $31) + Math_fround($8 * $23)) + Math_fround($10 * $24);
  $30 = Math_fround(-$30);
  HEAPF32[$6 + 184 >> 2] = Math_fround(Math_fround(Math_fround($9 * $30) - Math_fround($16 * $28)) - Math_fround($11 * $12)) + Math_fround(Math_fround(Math_fround($16 * $29) + Math_fround($9 * $15)) + Math_fround($11 * $20));
  HEAPF32[$6 + 180 >> 2] = Math_fround(Math_fround(Math_fround($8 * $30) - Math_fround($18 * $28)) - Math_fround($10 * $12)) + Math_fround(Math_fround(Math_fround($18 * $29) + Math_fround($8 * $15)) + Math_fround($10 * $20));
  HEAP32[$6 + 140 >> 2] = 0;
  HEAPF32[$6 + 160 >> 2] = Math_fround(Math_fround($16 * $26) + Math_fround($9 * $27)) + Math_fround($11 * $22);
  HEAPF32[$6 + 144 >> 2] = Math_fround(Math_fround($18 * $26) + Math_fround($8 * $27)) + Math_fround($10 * $22);
  HEAPF32[$6 + 136 >> 2] = Math_fround(Math_fround($14 * $32) + Math_fround($17 * $19)) + Math_fround($13 * $25);
  HEAPF32[$6 + 132 >> 2] = Math_fround(Math_fround($14 * $31) + Math_fround($17 * $23)) + Math_fround($13 * $24);
  HEAPF32[$6 + 128 >> 2] = Math_fround(Math_fround($14 * $26) + Math_fround($17 * $27)) + Math_fround($13 * $22);
  HEAPF32[$6 + 176 >> 2] = Math_fround(Math_fround(Math_fround($17 * $30) - Math_fround($14 * $28)) - Math_fround($13 * $12)) + Math_fround(Math_fround(Math_fround($14 * $29) + Math_fround($17 * $15)) + Math_fround($13 * $20));
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $6 + 128 | 0, $6 + 24 | 0, $6 + 8 | 0);
  $8 = HEAPF32[$6 + 24 >> 2];
  if (!!($8 < HEAPF32[$6 + 64 >> 2])) {
   HEAPF32[$6 + 64 >> 2] = $8;
  }
  $8 = HEAPF32[$6 + 28 >> 2];
  if (!!($8 < HEAPF32[$6 + 68 >> 2])) {
   HEAPF32[$6 + 68 >> 2] = $8;
  }
  $8 = HEAPF32[$6 + 32 >> 2];
  if (!!($8 < HEAPF32[$6 + 72 >> 2])) {
   HEAPF32[$6 + 72 >> 2] = $8;
  }
  $8 = HEAPF32[$6 + 36 >> 2];
  if (!!($8 < HEAPF32[$6 + 76 >> 2])) {
   HEAPF32[$6 + 76 >> 2] = $8;
  }
  $8 = HEAPF32[$6 + 8 >> 2];
  if (!!(HEAPF32[$6 + 48 >> 2] < $8)) {
   HEAPF32[$6 + 48 >> 2] = $8;
  }
  $8 = HEAPF32[$6 + 12 >> 2];
  if (!!(HEAPF32[$6 + 52 >> 2] < $8)) {
   HEAPF32[$6 + 52 >> 2] = $8;
  }
  $8 = HEAPF32[$6 + 16 >> 2];
  if (!!(HEAPF32[$6 + 56 >> 2] < $8)) {
   HEAPF32[$6 + 56 >> 2] = $8;
  }
  $8 = HEAPF32[$6 + 20 >> 2];
  if (!!(HEAPF32[$6 + 60 >> 2] < $8)) {
   HEAPF32[$6 + 60 >> 2] = $8;
  }
  HEAP32[$6 + 520 >> 2] = $4;
  HEAP32[$6 + 516 >> 2] = $7;
  HEAPF32[$6 + 508 >> 2] = $5;
  HEAP32[$6 + 504 >> 2] = $2;
  HEAP32[$6 + 500 >> 2] = $1;
  HEAP32[$6 + 496 >> 2] = $0;
  HEAP32[$6 + 492 >> 2] = $3;
  HEAP32[$6 + 488 >> 2] = 8948;
  HEAP32[$6 + 512 >> 2] = $21;
  $2 = HEAP32[$21 + 68 >> 2];
  label$24 : {
   if (!$2) {
    if (HEAP32[$21 + 20 >> 2] < 1) {
     break label$24;
    }
    $1 = 0;
    while (1) {
     $2 = HEAP32[$21 + 28 >> 2] + Math_imul($1, 80) | 0;
     $3 = HEAP32[$2 + 64 >> 2];
     $16 = HEAPF32[$2 + 48 >> 2];
     $12 = HEAPF32[$2 + 52 >> 2];
     $15 = HEAPF32[$2 + 56 >> 2];
     $20 = HEAPF32[$2 >> 2];
     $23 = HEAPF32[$2 + 16 >> 2];
     $24 = HEAPF32[$2 + 32 >> 2];
     $19 = HEAPF32[$2 + 4 >> 2];
     $25 = HEAPF32[$2 + 20 >> 2];
     $22 = HEAPF32[$2 + 36 >> 2];
     $26 = HEAPF32[$2 + 8 >> 2];
     $27 = HEAPF32[$2 + 24 >> 2];
     $28 = HEAPF32[$2 + 40 >> 2];
     $29 = HEAPF32[$7 + 52 >> 2];
     $31 = HEAPF32[$7 + 56 >> 2];
     $5 = HEAPF32[$7 + 20 >> 2];
     $8 = HEAPF32[$7 + 24 >> 2];
     $10 = HEAPF32[$7 + 36 >> 2];
     $9 = HEAPF32[$7 + 40 >> 2];
     $32 = HEAPF32[$7 + 48 >> 2];
     $11 = HEAPF32[$7 + 8 >> 2];
     $13 = HEAPF32[$7 >> 2];
     $14 = HEAPF32[$7 + 4 >> 2];
     $17 = HEAPF32[$7 + 16 >> 2];
     $18 = HEAPF32[$7 + 32 >> 2];
     HEAP32[$6 + 188 >> 2] = 0;
     HEAP32[$6 + 172 >> 2] = 0;
     HEAP32[$6 + 156 >> 2] = 0;
     HEAP32[$6 + 140 >> 2] = 0;
     HEAPF32[$6 + 168 >> 2] = Math_fround(Math_fround($26 * $18) + Math_fround($27 * $10)) + Math_fround($28 * $9);
     HEAPF32[$6 + 164 >> 2] = Math_fround(Math_fround($19 * $18) + Math_fround($25 * $10)) + Math_fround($22 * $9);
     HEAPF32[$6 + 160 >> 2] = Math_fround(Math_fround($20 * $18) + Math_fround($23 * $10)) + Math_fround($24 * $9);
     HEAPF32[$6 + 152 >> 2] = Math_fround(Math_fround($26 * $17) + Math_fround($27 * $5)) + Math_fround($28 * $8);
     HEAPF32[$6 + 148 >> 2] = Math_fround(Math_fround($19 * $17) + Math_fround($25 * $5)) + Math_fround($22 * $8);
     HEAPF32[$6 + 144 >> 2] = Math_fround(Math_fround($20 * $17) + Math_fround($23 * $5)) + Math_fround($24 * $8);
     HEAPF32[$6 + 136 >> 2] = Math_fround(Math_fround($26 * $13) + Math_fround($27 * $14)) + Math_fround($28 * $11);
     HEAPF32[$6 + 132 >> 2] = Math_fround(Math_fround($19 * $13) + Math_fround($25 * $14)) + Math_fround($22 * $11);
     HEAPF32[$6 + 128 >> 2] = Math_fround(Math_fround($20 * $13) + Math_fround($23 * $14)) + Math_fround($24 * $11);
     HEAPF32[$6 + 184 >> 2] = $31 + Math_fround(Math_fround(Math_fround($16 * $18) + Math_fround($12 * $10)) + Math_fround($15 * $9));
     HEAPF32[$6 + 180 >> 2] = $29 + Math_fround(Math_fround(Math_fround($16 * $17) + Math_fround($12 * $5)) + Math_fround($15 * $8));
     HEAPF32[$6 + 176 >> 2] = $32 + Math_fround(Math_fround(Math_fround($16 * $13) + Math_fround($12 * $14)) + Math_fround($15 * $11));
     HEAP32[$6 + 92 >> 2] = -1;
     HEAP32[$6 + 84 >> 2] = 1065353216;
     HEAP32[$6 + 88 >> 2] = 1;
     HEAP32[$6 + 100 >> 2] = $1;
     HEAP32[$6 + 80 >> 2] = 9164;
     $7 = HEAP32[$6 + 520 >> 2];
     HEAP32[$6 + 96 >> 2] = $7;
     HEAP32[$6 + 84 >> 2] = HEAP32[$7 + 4 >> 2];
     $7 = HEAP32[$6 + 492 >> 2];
     $2 = HEAP32[$7 + 8 >> 2];
     HEAP32[$6 + 684 >> 2] = $1;
     HEAP32[$6 + 680 >> 2] = -1;
     HEAP32[$6 + 672 >> 2] = $2;
     HEAP32[$6 + 668 >> 2] = $3;
     HEAP32[$6 + 664 >> 2] = $7;
     HEAP32[$6 + 676 >> 2] = $6 + 128;
     btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29(HEAP32[$6 + 496 >> 2], HEAP32[$6 + 500 >> 2], HEAP32[$6 + 504 >> 2], $6 + 664 | 0, $6 + 80 | 0, HEAPF32[$6 + 508 >> 2]);
     $1 = $1 + 1 | 0;
     if (($1 | 0) >= HEAP32[$21 + 20 >> 2]) {
      break label$24;
     }
     $7 = HEAP32[$6 + 516 >> 2];
     continue;
    }
   }
   $0 = HEAP32[$6 + 76 >> 2];
   $3 = HEAP32[$6 + 72 >> 2];
   HEAP32[$6 + 136 >> 2] = $3;
   HEAP32[$6 + 140 >> 2] = $0;
   $3 = HEAP32[$6 + 60 >> 2];
   $0 = HEAP32[$6 + 56 >> 2];
   HEAP32[$6 + 152 >> 2] = $0;
   HEAP32[$6 + 156 >> 2] = $3;
   $0 = HEAP32[$6 + 52 >> 2];
   $3 = HEAP32[$6 + 48 >> 2];
   HEAP32[$6 + 144 >> 2] = $3;
   HEAP32[$6 + 148 >> 2] = $0;
   $3 = HEAP32[$6 + 68 >> 2];
   $0 = HEAP32[$6 + 64 >> 2];
   HEAP32[$6 + 128 >> 2] = $0;
   HEAP32[$6 + 132 >> 2] = $3;
   btDbvt__collideTV_28btDbvtNode_20const__2c_20btDbvtAabbMm_20const__2c_20btDbvt__ICollide__29_20const($2, HEAP32[$2 >> 2], $6 + 128 | 0, $6 + 488 | 0);
  }
  CProfileSample___CProfileSample_28_29($33);
 }
 $0 = $6 + 688 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSequentialImpulseConstraintSolver__solveGroupCacheFriendlySetup_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0, $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = 0, $33 = Math_fround(0), $34 = Math_fround(0), $35 = 0, $36 = Math_fround(0), $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = Math_fround(0), $60 = Math_fround(0), $61 = Math_fround(0), $62 = Math_fround(0), $63 = Math_fround(0), $64 = Math_fround(0), $65 = Math_fround(0), $66 = Math_fround(0), $67 = Math_fround(0), $68 = Math_fround(0), $69 = Math_fround(0), $70 = Math_fround(0), $71 = Math_fround(0);
 $16 = global$0 - 256 | 0;
 $8 = $16;
 if ($16 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 HEAP32[$0 + 188 >> 2] = -1;
 $49 = CProfileSample__CProfileSample_28char_20const__29($16 + 248 | 0, 3816);
 $8 = HEAP32[$7 + 72 >> 2];
 if (($8 | 0) != HEAP32[$0 + 224 >> 2]) {
  HEAP32[$0 + 224 >> 2] = $8;
  HEAP32[$0 + 220 >> 2] = 144;
  HEAP32[$0 + 216 >> 2] = 143;
  HEAP32[$0 + 212 >> 2] = 142;
 }
 $8 = 0;
 HEAP32[$0 + 184 >> 2] = 0;
 if (($2 | 0) > 0) {
  while (1) {
   HEAP32[HEAP32[($8 << 2) + $1 >> 2] + 212 >> 2] = -1;
   $8 = $8 + 1 | 0;
   if (($8 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 $19 = HEAP32[$0 + 12 >> 2];
 if (($19 | 0) <= ($2 | 0)) {
  $19 = $2 + 1 | 0;
  $9 = 0;
  label$6 : {
   if (!$19) {
    break label$6;
   }
   $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($19, 244), 16);
  }
  $12 = HEAP32[$0 + 8 >> 2];
  if (($12 | 0) >= 1) {
   while (1) {
    $10 = Math_imul($15, 244);
    $8 = $9 + $10 | 0;
    $10 = HEAP32[$0 + 16 >> 2] + $10 | 0;
    $14 = HEAP32[$10 + 4 >> 2];
    $11 = HEAP32[$10 >> 2];
    HEAP32[$8 >> 2] = $11;
    HEAP32[$8 + 4 >> 2] = $14;
    $11 = HEAP32[$10 + 12 >> 2];
    $14 = HEAP32[$10 + 8 >> 2];
    HEAP32[$8 + 8 >> 2] = $14;
    HEAP32[$8 + 12 >> 2] = $11;
    $14 = HEAP32[$10 + 28 >> 2];
    $11 = HEAP32[$10 + 24 >> 2];
    HEAP32[$8 + 24 >> 2] = $11;
    HEAP32[$8 + 28 >> 2] = $14;
    $11 = HEAP32[$10 + 20 >> 2];
    $14 = HEAP32[$10 + 16 >> 2];
    HEAP32[$8 + 16 >> 2] = $14;
    HEAP32[$8 + 20 >> 2] = $11;
    $14 = HEAP32[$10 + 44 >> 2];
    $11 = HEAP32[$10 + 40 >> 2];
    HEAP32[$8 + 40 >> 2] = $11;
    HEAP32[$8 + 44 >> 2] = $14;
    $11 = HEAP32[$10 + 36 >> 2];
    $14 = HEAP32[$10 + 32 >> 2];
    HEAP32[$8 + 32 >> 2] = $14;
    HEAP32[$8 + 36 >> 2] = $11;
    $14 = HEAP32[$10 + 52 >> 2];
    $11 = HEAP32[$10 + 48 >> 2];
    HEAP32[$8 + 48 >> 2] = $11;
    HEAP32[$8 + 52 >> 2] = $14;
    $11 = HEAP32[$10 + 60 >> 2];
    $14 = HEAP32[$10 + 56 >> 2];
    HEAP32[$8 + 56 >> 2] = $14;
    HEAP32[$8 + 60 >> 2] = $11;
    memcpy($8 - -64 | 0, $10 - -64 | 0, 180);
    $15 = $15 + 1 | 0;
    if (($15 | 0) != ($12 | 0)) {
     continue;
    }
    break;
   }
  }
  $8 = HEAP32[$0 + 16 >> 2];
  if ($8) {
   if (HEAPU8[$0 + 20 | 0]) {
    btAlignedFreeInternal_28void__29($8);
   }
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = $9;
  HEAP32[$0 + 12 >> 2] = $19;
  HEAP8[$0 + 20 | 0] = 1;
 }
 $13 = memset($16, 0, 244);
 $10 = HEAP32[$0 + 8 >> 2];
 if (($10 | 0) <= -1) {
  if (($19 | 0) <= -1) {
   $8 = HEAP32[$0 + 16 >> 2];
   if ($8) {
    if (HEAPU8[$0 + 20 | 0]) {
     btAlignedFreeInternal_28void__29($8);
    }
    HEAP32[$0 + 16 >> 2] = 0;
   }
   HEAP32[$0 + 12 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP8[$0 + 20 | 0] = 1;
  }
  $19 = $13 - -64 | 0;
  $37 = $13;
  $38 = $13;
  $32 = $13;
  while (1) {
   $14 = HEAP32[$13 + 4 >> 2];
   $11 = HEAP32[$13 >> 2];
   $8 = HEAP32[$0 + 16 >> 2] + Math_imul($10, 244) | 0;
   HEAP32[$8 >> 2] = $11;
   HEAP32[$8 + 4 >> 2] = $14;
   $11 = HEAP32[$13 + 12 >> 2];
   $14 = HEAP32[$13 + 8 >> 2];
   HEAP32[$8 + 8 >> 2] = $14;
   HEAP32[$8 + 12 >> 2] = $11;
   $9 = $32;
   $11 = HEAP32[$9 + 24 >> 2];
   $14 = HEAP32[$9 + 28 >> 2];
   HEAP32[$8 + 24 >> 2] = $11;
   HEAP32[$8 + 28 >> 2] = $14;
   $11 = HEAP32[$9 + 20 >> 2];
   $14 = HEAP32[$9 + 16 >> 2];
   HEAP32[$8 + 16 >> 2] = $14;
   HEAP32[$8 + 20 >> 2] = $11;
   $11 = HEAP32[$38 + 40 >> 2];
   $14 = HEAP32[$9 + 44 >> 2];
   HEAP32[$8 + 40 >> 2] = $11;
   HEAP32[$8 + 44 >> 2] = $14;
   $11 = HEAP32[$9 + 36 >> 2];
   $14 = HEAP32[$9 + 32 >> 2];
   HEAP32[$8 + 32 >> 2] = $14;
   HEAP32[$8 + 36 >> 2] = $11;
   $11 = HEAP32[$37 + 48 >> 2];
   $14 = HEAP32[$9 + 52 >> 2];
   HEAP32[$8 + 48 >> 2] = $11;
   HEAP32[$8 + 52 >> 2] = $14;
   $11 = HEAP32[$9 + 60 >> 2];
   $14 = HEAP32[$9 + 56 >> 2];
   HEAP32[$8 + 56 >> 2] = $14;
   HEAP32[$8 + 60 >> 2] = $11;
   memcpy($8 - -64 | 0, $19, 180);
   $8 = $10 + 1 | 0;
   $16 = $8 >>> 0 >= $10 >>> 0;
   $10 = $8;
   if ($16) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 8 >> 2] = 0;
 if (($2 | 0) >= 1) {
  $10 = 0;
  while (1) {
   $8 = ($10 << 2) + $1 | 0;
   $15 = btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20float_29($0, HEAP32[$8 >> 2], HEAPF32[$7 + 12 >> 2]);
   $8 = HEAP32[$8 >> 2];
   label$18 : {
    if (!$8 | !(HEAP32[$8 + 252 >> 2] & 2) | HEAPF32[$8 + 404 >> 2] == Math_fround(0)) {
     break label$18;
    }
    $12 = HEAP32[$0 + 16 >> 2];
    $9 = HEAP32[$8 + 564 >> 2];
    if ($9 & 2) {
     btRigidBody__computeGyroscopicForceExplicit_28float_29_20const($13, $8, HEAPF32[$7 + 84 >> 2]);
     $20 = HEAPF32[$8 + 364 >> 2];
     $21 = HEAPF32[$8 + 332 >> 2];
     $26 = HEAPF32[$8 + 348 >> 2];
     $25 = HEAPF32[$8 + 360 >> 2];
     $27 = HEAPF32[$8 + 328 >> 2];
     $28 = HEAPF32[$8 + 344 >> 2];
     $9 = Math_imul($15, 244) + $12 | 0;
     $17 = HEAPF32[$13 >> 2];
     $18 = HEAPF32[$13 + 4 >> 2];
     $22 = HEAPF32[$13 + 8 >> 2];
     $23 = HEAPF32[$7 + 12 >> 2];
     HEAPF32[$9 + 224 >> 2] = HEAPF32[$9 + 224 >> 2] - Math_fround(Math_fround(Math_fround(Math_fround($17 * HEAPF32[$8 + 324 >> 2]) + Math_fround($18 * HEAPF32[$8 + 340 >> 2])) + Math_fround($22 * HEAPF32[$8 + 356 >> 2])) * $23);
     $16 = $9 + 228 | 0;
     HEAPF32[$16 >> 2] = HEAPF32[$9 + 228 >> 2] - Math_fround($23 * Math_fround(Math_fround(Math_fround($17 * $27) + Math_fround($18 * $28)) + Math_fround($22 * $25)));
     $11 = $9;
     $9 = $9 + 232 | 0;
     HEAPF32[$9 >> 2] = HEAPF32[$11 + 232 >> 2] - Math_fround($23 * Math_fround(Math_fround(Math_fround($17 * $21) + Math_fround($18 * $26)) + Math_fround($22 * $20)));
     $9 = HEAP32[$8 + 564 >> 2];
    }
    if ($9 & 4) {
     btRigidBody__computeGyroscopicImpulseImplicit_World_28float_29_20const($13, $8, HEAPF32[$7 + 12 >> 2]);
     $17 = HEAPF32[$13 + 8 >> 2];
     $18 = HEAPF32[$13 + 4 >> 2];
     $9 = Math_imul($15, 244) + $12 | 0;
     HEAPF32[$9 + 224 >> 2] = HEAPF32[$13 >> 2] + HEAPF32[$9 + 224 >> 2];
     $16 = $9 + 228 | 0;
     HEAPF32[$16 >> 2] = $18 + HEAPF32[$9 + 228 >> 2];
     $11 = $9;
     $9 = $9 + 232 | 0;
     HEAPF32[$9 >> 2] = $17 + HEAPF32[$11 + 232 >> 2];
     $9 = HEAP32[$8 + 564 >> 2];
    }
    if (!($9 & 8)) {
     break label$18;
    }
    btRigidBody__computeGyroscopicImpulseImplicit_Body_28float_29_20const($13, $8, HEAPF32[$7 + 12 >> 2]);
    $17 = HEAPF32[$13 + 8 >> 2];
    $18 = HEAPF32[$13 + 4 >> 2];
    $8 = Math_imul($15, 244) + $12 | 0;
    HEAPF32[$8 + 224 >> 2] = HEAPF32[$13 >> 2] + HEAPF32[$8 + 224 >> 2];
    $15 = $8 + 228 | 0;
    HEAPF32[$15 >> 2] = $18 + HEAPF32[$8 + 228 >> 2];
    $11 = $8;
    $8 = $8 + 232 | 0;
    HEAPF32[$8 >> 2] = $17 + HEAPF32[$11 + 232 >> 2];
   }
   $10 = $10 + 1 | 0;
   if (($10 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 $8 = 0;
 if (($6 | 0) > 0) {
  while (1) {
   $10 = HEAP32[($8 << 2) + $5 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 8 >> 2]]($10);
   HEAP32[$10 + 36 >> 2] = 0;
   $8 = $8 + 1 | 0;
   if (($8 | 0) != ($6 | 0)) {
    continue;
   }
   break;
  }
 }
 $2 = HEAP32[$0 + 168 >> 2];
 if (!(($2 | 0) >= ($6 | 0) | HEAP32[$0 + 172 >> 2] >= ($6 | 0))) {
  label$25 : {
   if (!$6) {
    $1 = 0;
    break label$25;
   }
   $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 3, 16);
   $2 = HEAP32[$0 + 168 >> 2];
  }
  if (($2 | 0) >= 1) {
   $8 = 0;
   while (1) {
    $10 = $8 << 3;
    $9 = $10 + HEAP32[$0 + 176 >> 2] | 0;
    $11 = HEAP32[$9 >> 2];
    $14 = HEAP32[$9 + 4 >> 2];
    $9 = $11;
    $11 = $1 + $10 | 0;
    HEAP32[$11 >> 2] = $9;
    HEAP32[$11 + 4 >> 2] = $14;
    $8 = $8 + 1 | 0;
    if (($8 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
  }
  $8 = HEAP32[$0 + 176 >> 2];
  if ($8) {
   if (HEAPU8[$0 + 180 | 0]) {
    btAlignedFreeInternal_28void__29($8);
   }
   HEAP32[$0 + 176 >> 2] = 0;
  }
  HEAP32[$0 + 176 >> 2] = $1;
  HEAP32[$0 + 172 >> 2] = $6;
  HEAP8[$0 + 180 | 0] = 1;
 }
 HEAP32[$0 + 168 >> 2] = $6;
 $1 = 0;
 if (($6 | 0) >= 1) {
  $10 = 0;
  while (1) {
   $15 = $10 << 3;
   $9 = HEAP32[$0 + 176 >> 2];
   $12 = ($10 << 2) + $5 | 0;
   $2 = HEAP32[$12 >> 2];
   $8 = HEAP32[$2 + 44 >> 2];
   if ($8) {
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 0;
    HEAP32[$8 + 56 >> 2] = 0;
    HEAP32[$8 + 60 >> 2] = 0;
    HEAP32[$8 + 48 >> 2] = 0;
    HEAP32[$8 + 52 >> 2] = 0;
    HEAP32[$8 + 40 >> 2] = 0;
    HEAP32[$8 + 44 >> 2] = 0;
    HEAP32[$8 + 32 >> 2] = 0;
    HEAP32[$8 + 36 >> 2] = 0;
    HEAP32[$8 + 24 >> 2] = 0;
    HEAP32[$8 + 28 >> 2] = 0;
    HEAP32[$8 + 16 >> 2] = 0;
    HEAP32[$8 + 20 >> 2] = 0;
    HEAP32[$8 + 8 >> 2] = 0;
    HEAP32[$8 + 12 >> 2] = 0;
    $2 = HEAP32[$12 >> 2];
   }
   $8 = $9 + $15 | 0;
   label$34 : {
    if (HEAPU8[$2 + 20 | 0]) {
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $8);
     $2 = HEAP32[$8 >> 2];
     break label$34;
    }
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 0;
    $2 = 0;
   }
   $1 = $2 + $1 | 0;
   $10 = $10 + 1 | 0;
   if (($10 | 0) != ($6 | 0)) {
    continue;
   }
   break;
  }
 }
 $2 = HEAP32[$0 + 48 >> 2];
 if (!(($2 | 0) >= ($1 | 0) | HEAP32[$0 + 52 >> 2] >= ($1 | 0))) {
  label$37 : {
   if (!$1) {
    $15 = 0;
    break label$37;
   }
   $15 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($1, 152), 16);
   $2 = HEAP32[$0 + 48 >> 2];
  }
  if (($2 | 0) >= 1) {
   $8 = 0;
   while (1) {
    $10 = Math_imul($8, 152);
    memcpy($15 + $10 | 0, HEAP32[$0 + 56 >> 2] + $10 | 0, 152);
    $8 = $8 + 1 | 0;
    if (($8 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
  }
  $8 = HEAP32[$0 + 56 >> 2];
  if ($8) {
   if (HEAPU8[$0 + 60 | 0]) {
    btAlignedFreeInternal_28void__29($8);
   }
   HEAP32[$0 + 56 >> 2] = 0;
  }
  HEAP32[$0 + 56 >> 2] = $15;
  HEAP32[$0 + 52 >> 2] = $1;
  HEAP8[$0 + 60 | 0] = 1;
 }
 HEAP32[$0 + 48 >> 2] = $1;
 if (($6 | 0) >= 1) {
  $8 = HEAP32[$0 + 176 >> 2];
  while (1) {
   $39 = $35 << 3;
   $16 = $39 + $8 | 0;
   if (HEAP32[$16 >> 2]) {
    $19 = ($35 << 2) + $5 | 0;
    $15 = HEAP32[$19 >> 2];
    $10 = HEAP32[$15 + 32 >> 2];
    $8 = HEAP32[$0 + 56 >> 2];
    $2 = HEAP32[$15 + 28 >> 2];
    $9 = btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20float_29($0, $2, HEAPF32[$7 + 12 >> 2]);
    $14 = btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20float_29($0, $10, HEAPF32[$7 + 12 >> 2]);
    $1 = Math_imul($40, 152);
    $32 = HEAP32[$0 + 16 >> 2];
    $12 = HEAP32[$15 + 24 >> 2];
    $11 = ($12 | 0) > 0 ? $12 : HEAP32[$7 + 20 >> 2];
    if (($11 | 0) > HEAP32[$0 + 184 >> 2]) {
     HEAP32[$0 + 184 >> 2] = $11;
    }
    $12 = $1 + $8 | 0;
    $1 = 0;
    if (HEAP32[$16 >> 2] >= 1) {
     while (1) {
      $8 = memset(Math_imul($1, 152) + $12 | 0, 0, 152);
      HEAP32[$8 + 120 >> 2] = -8388609;
      HEAP32[$8 + 124 >> 2] = 2139095039;
      HEAP32[$8 + 148 >> 2] = $14;
      HEAP32[$8 + 144 >> 2] = $9;
      HEAP32[$8 + 96 >> 2] = 0;
      HEAP32[$8 + 100 >> 2] = 0;
      HEAP32[$8 + 136 >> 2] = $11;
      $1 = $1 + 1 | 0;
      if (($1 | 0) < HEAP32[$16 >> 2]) {
       continue;
      }
      break;
     }
    }
    $8 = Math_imul($9, 244) + $32 | 0;
    HEAP32[$8 + 64 >> 2] = 0;
    HEAP32[$8 + 68 >> 2] = 0;
    HEAP32[$8 + 144 >> 2] = 0;
    HEAP32[$8 + 148 >> 2] = 0;
    HEAP32[$8 + 88 >> 2] = 0;
    HEAP32[$8 + 92 >> 2] = 0;
    HEAP32[$8 + 80 >> 2] = 0;
    HEAP32[$8 + 84 >> 2] = 0;
    HEAP32[$8 + 72 >> 2] = 0;
    HEAP32[$8 + 76 >> 2] = 0;
    HEAP32[$8 + 152 >> 2] = 0;
    HEAP32[$8 + 156 >> 2] = 0;
    HEAP32[$8 + 160 >> 2] = 0;
    HEAP32[$8 + 164 >> 2] = 0;
    HEAP32[$8 + 168 >> 2] = 0;
    HEAP32[$8 + 172 >> 2] = 0;
    $1 = Math_imul($14, 244) + $32 | 0;
    HEAP32[$1 + 88 >> 2] = 0;
    HEAP32[$1 + 92 >> 2] = 0;
    HEAP32[$1 + 80 >> 2] = 0;
    HEAP32[$1 + 84 >> 2] = 0;
    HEAP32[$1 + 72 >> 2] = 0;
    HEAP32[$1 + 76 >> 2] = 0;
    HEAP32[$1 + 64 >> 2] = 0;
    HEAP32[$1 + 68 >> 2] = 0;
    HEAP32[$1 + 144 >> 2] = 0;
    HEAP32[$1 + 148 >> 2] = 0;
    HEAP32[$1 + 152 >> 2] = 0;
    HEAP32[$1 + 156 >> 2] = 0;
    HEAP32[$1 + 160 >> 2] = 0;
    HEAP32[$1 + 164 >> 2] = 0;
    HEAP32[$1 + 168 >> 2] = 0;
    HEAP32[$1 + 172 >> 2] = 0;
    HEAPF32[$13 >> 2] = Math_fround(1) / HEAPF32[$7 + 12 >> 2];
    $9 = HEAP32[$7 + 32 >> 2];
    HEAP32[$13 + 28 >> 2] = $12 + 112;
    HEAP32[$13 + 24 >> 2] = 38;
    HEAP32[$13 + 20 >> 2] = $12 + 32;
    HEAP32[$13 + 16 >> 2] = $12 + 48;
    HEAP32[$13 + 12 >> 2] = $12;
    HEAP32[$13 + 8 >> 2] = $12 + 16;
    HEAP32[$13 + 4 >> 2] = $9;
    HEAP32[$12 + 116 >> 2] = HEAP32[$7 + 40 >> 2];
    $9 = HEAP32[$7 + 4 >> 2];
    HEAP32[$13 + 40 >> 2] = $12 + 124;
    HEAP32[$13 + 36 >> 2] = $12 + 120;
    HEAP32[$13 + 32 >> 2] = $12 + 116;
    HEAP32[$13 + 48 >> 2] = $9;
    HEAP32[$13 + 44 >> 2] = HEAP32[$7 + 20 >> 2];
    $9 = HEAP32[$19 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 20 >> 2]]($9, $13);
    if (HEAP32[$16 >> 2] >= 1) {
     $11 = $1;
     $14 = $1;
     $32 = $1;
     $37 = $1;
     $38 = $1;
     $50 = $1;
     $51 = $1;
     $52 = $8;
     $53 = $8;
     $54 = $8;
     $55 = $8;
     $56 = $8;
     $57 = $8;
     $58 = $8;
     $9 = 0;
     while (1) {
      $8 = Math_imul($9, 152) + $12 | 0;
      $17 = HEAPF32[HEAP32[$19 >> 2] + 16 >> 2];
      if (!!(HEAPF32[$8 + 124 >> 2] >= $17)) {
       HEAPF32[$8 + 124 >> 2] = $17;
      }
      $17 = Math_fround(-$17);
      if (!!(HEAPF32[$8 + 120 >> 2] <= $17)) {
       HEAPF32[$8 + 120 >> 2] = $17;
      }
      HEAP32[$8 + 132 >> 2] = $15;
      $1 = HEAP32[$15 + 28 >> 2];
      $23 = HEAPF32[$1 + 328 >> 2];
      $20 = HEAPF32[$1 + 332 >> 2];
      $21 = HEAPF32[$1 + 608 >> 2];
      $26 = HEAPF32[$1 + 348 >> 2];
      $25 = HEAPF32[$1 + 340 >> 2];
      $27 = HEAPF32[$1 + 344 >> 2];
      $28 = HEAPF32[$1 + 612 >> 2];
      $24 = HEAPF32[$1 + 364 >> 2];
      $18 = HEAPF32[$1 + 356 >> 2];
      $22 = HEAPF32[$1 + 360 >> 2];
      $30 = HEAPF32[$1 + 604 >> 2];
      $31 = HEAPF32[$1 + 324 >> 2];
      HEAP32[$8 + 76 >> 2] = 0;
      $17 = HEAPF32[$8 >> 2];
      $29 = Math_fround($18 * $17);
      $18 = HEAPF32[$8 + 4 >> 2];
      $29 = Math_fround($29 + Math_fround($22 * $18));
      $22 = HEAPF32[$8 + 8 >> 2];
      HEAPF32[$8 + 72 >> 2] = $28 * Math_fround($29 + Math_fround($24 * $22));
      HEAPF32[$8 + 68 >> 2] = $21 * Math_fround(Math_fround(Math_fround($17 * $25) + Math_fround($18 * $27)) + Math_fround($22 * $26));
      HEAPF32[$8 + 64 >> 2] = $30 * Math_fround(Math_fround(Math_fround($31 * $17) + Math_fround($23 * $18)) + Math_fround($20 * $22));
      $1 = HEAP32[$15 + 32 >> 2];
      $26 = HEAPF32[$1 + 328 >> 2];
      $25 = HEAPF32[$1 + 332 >> 2];
      $27 = HEAPF32[$1 + 608 >> 2];
      $28 = HEAPF32[$1 + 348 >> 2];
      $24 = HEAPF32[$1 + 340 >> 2];
      $30 = HEAPF32[$1 + 344 >> 2];
      $31 = HEAPF32[$1 + 612 >> 2];
      $29 = HEAPF32[$1 + 364 >> 2];
      $20 = HEAPF32[$1 + 356 >> 2];
      $21 = HEAPF32[$1 + 360 >> 2];
      $33 = HEAPF32[$1 + 604 >> 2];
      $36 = HEAPF32[$1 + 324 >> 2];
      HEAP32[$8 + 92 >> 2] = 0;
      $23 = HEAPF32[$8 + 32 >> 2];
      $34 = Math_fround($20 * $23);
      $20 = HEAPF32[$8 + 36 >> 2];
      $34 = Math_fround($34 + Math_fround($21 * $20));
      $21 = HEAPF32[$8 + 40 >> 2];
      HEAPF32[$8 + 88 >> 2] = $31 * Math_fround($34 + Math_fround($29 * $21));
      HEAPF32[$8 + 84 >> 2] = $27 * Math_fround(Math_fround(Math_fround($23 * $24) + Math_fround($20 * $30)) + Math_fround($21 * $28));
      HEAPF32[$8 + 80 >> 2] = $33 * Math_fround(Math_fround(Math_fround($36 * $23) + Math_fround($26 * $20)) + Math_fround($25 * $21));
      $29 = Math_fround(0);
      $26 = HEAPF32[$8 + 16 >> 2];
      $25 = HEAPF32[$2 + 404 >> 2];
      $27 = HEAPF32[$8 + 20 >> 2];
      $28 = HEAPF32[$8 + 24 >> 2];
      $33 = Math_fround(Math_fround(Math_fround(Math_fround($26 * Math_fround($26 * $25)) + Math_fround($27 * Math_fround($25 * $27))) + Math_fround($28 * Math_fround($25 * $28))) + Math_fround(Math_fround(Math_fround($17 * Math_fround(Math_fround(Math_fround($17 * HEAPF32[$2 + 324 >> 2]) + Math_fround($18 * HEAPF32[$2 + 328 >> 2])) + Math_fround($22 * HEAPF32[$2 + 332 >> 2]))) + Math_fround($18 * Math_fround(Math_fround(Math_fround($17 * HEAPF32[$2 + 340 >> 2]) + Math_fround($18 * HEAPF32[$2 + 344 >> 2])) + Math_fround($22 * HEAPF32[$2 + 348 >> 2])))) + Math_fround($22 * Math_fround(Math_fround(Math_fround($17 * HEAPF32[$2 + 356 >> 2]) + Math_fround($18 * HEAPF32[$2 + 360 >> 2])) + Math_fround($22 * HEAPF32[$2 + 364 >> 2])))));
      $25 = HEAPF32[$8 + 48 >> 2];
      $24 = HEAPF32[$10 + 404 >> 2];
      $30 = HEAPF32[$8 + 52 >> 2];
      $31 = HEAPF32[$8 + 56 >> 2];
      $24 = Math_fround(Math_fround($33 + Math_fround(Math_fround(Math_fround($25 * Math_fround($25 * $24)) + Math_fround($30 * Math_fround($24 * $30))) + Math_fround($31 * Math_fround($24 * $31)))) + Math_fround(Math_fround(Math_fround($23 * Math_fround(Math_fround(Math_fround($23 * HEAPF32[$10 + 324 >> 2]) + Math_fround($20 * HEAPF32[$10 + 328 >> 2])) + Math_fround($21 * HEAPF32[$10 + 332 >> 2]))) + Math_fround($20 * Math_fround(Math_fround(Math_fround($23 * HEAPF32[$10 + 340 >> 2]) + Math_fround($20 * HEAPF32[$10 + 344 >> 2])) + Math_fround($21 * HEAPF32[$10 + 348 >> 2])))) + Math_fround($21 * Math_fround(Math_fround(Math_fround($23 * HEAPF32[$10 + 356 >> 2]) + Math_fround($20 * HEAPF32[$10 + 360 >> 2])) + Math_fround($21 * HEAPF32[$10 + 364 >> 2])))));
      $24 = Math_fround(Math_abs($24)) > Math_fround(1.1920928955078125e-7) ? Math_fround(Math_fround(1) / $24) : Math_fround(0);
      HEAPF32[$8 + 108 >> 2] = $24;
      $33 = Math_fround(0);
      $36 = Math_fround(0);
      $34 = Math_fround(0);
      $41 = Math_fround(0);
      $42 = Math_fround(0);
      $43 = Math_fround(0);
      if (HEAP32[$58 + 240 >> 2]) {
       $43 = HEAPF32[$52 + 232 >> 2];
       $42 = HEAPF32[$53 + 228 >> 2];
       $41 = HEAPF32[$54 + 224 >> 2];
       $36 = HEAPF32[$56 + 212 >> 2];
       $34 = HEAPF32[$57 + 208 >> 2];
       $33 = HEAPF32[$55 + 216 >> 2];
      }
      $44 = Math_fround(0);
      $45 = Math_fround(0);
      $46 = Math_fround(0);
      $47 = Math_fround(0);
      $48 = Math_fround(0);
      if (HEAP32[$51 + 240 >> 2]) {
       $48 = HEAPF32[$11 + 232 >> 2];
       $47 = HEAPF32[$14 + 228 >> 2];
       $46 = HEAPF32[$32 + 224 >> 2];
       $44 = HEAPF32[$38 + 212 >> 2];
       $45 = HEAPF32[$50 + 208 >> 2];
       $29 = HEAPF32[$37 + 216 >> 2];
      }
      $59 = HEAPF32[$2 + 380 >> 2];
      $60 = HEAPF32[$2 + 372 >> 2];
      $61 = HEAPF32[$2 + 376 >> 2];
      $62 = HEAPF32[$2 + 396 >> 2];
      $63 = HEAPF32[$2 + 388 >> 2];
      $64 = HEAPF32[$2 + 392 >> 2];
      $65 = HEAPF32[$10 + 380 >> 2];
      $66 = HEAPF32[$10 + 372 >> 2];
      $67 = HEAPF32[$10 + 376 >> 2];
      $68 = HEAPF32[$10 + 396 >> 2];
      $69 = HEAPF32[$10 + 388 >> 2];
      $70 = HEAPF32[$10 + 392 >> 2];
      $71 = HEAPF32[$13 + 48 >> 2];
      HEAP32[$8 + 100 >> 2] = 0;
      HEAPF32[$8 + 112 >> 2] = Math_fround($24 * HEAPF32[$8 + 112 >> 2]) + Math_fround($24 * Math_fround(Math_fround(0) - Math_fround($71 * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($26 * Math_fround($34 + $60)) + Math_fround($27 * Math_fround($36 + $61))) + Math_fround($28 * Math_fround($33 + $59))) + Math_fround(Math_fround(Math_fround($17 * Math_fround($41 + $63)) + Math_fround($18 * Math_fround($42 + $64))) + Math_fround($22 * Math_fround($43 + $62)))) + Math_fround(Math_fround(Math_fround(Math_fround($25 * Math_fround($45 + $66)) + Math_fround($30 * Math_fround($44 + $67))) + Math_fround($31 * Math_fround($29 + $65))) + Math_fround(Math_fround(Math_fround($23 * Math_fround($46 + $69)) + Math_fround($20 * Math_fround($47 + $70))) + Math_fround($21 * Math_fround($48 + $68))))))));
      $9 = $9 + 1 | 0;
      if (($9 | 0) < HEAP32[$16 >> 2]) {
       continue;
      }
      break;
     }
    }
    $8 = HEAP32[$0 + 176 >> 2];
   }
   $40 = HEAP32[$8 + $39 >> 2] + $40 | 0;
   $35 = $35 + 1 | 0;
   if (($35 | 0) != ($6 | 0)) {
    continue;
   }
   break;
  }
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $3, $4, $7);
 $10 = HEAP32[$0 + 68 >> 2];
 $2 = HEAP32[$0 + 28 >> 2];
 $9 = HEAP32[$0 + 128 >> 2];
 $1 = HEAP32[$0 + 48 >> 2];
 if (!(($9 | 0) >= ($1 | 0) | HEAP32[$0 + 132 >> 2] >= ($1 | 0))) {
  $8 = 0;
  $12 = 0;
  if ($1) {
   $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 2, 16);
   $9 = HEAP32[$0 + 128 >> 2];
  }
  $16 = HEAP32[$0 + 136 >> 2];
  label$57 : {
   label$58 : {
    if (($9 | 0) >= 1) {
     while (1) {
      $15 = $8 << 2;
      HEAP32[$15 + $12 >> 2] = HEAP32[$15 + $16 >> 2];
      $8 = $8 + 1 | 0;
      if (($9 | 0) != ($8 | 0)) {
       continue;
      }
      break label$58;
     }
    }
    if (!$16) {
     break label$57;
    }
   }
   if (HEAPU8[$0 + 140 | 0]) {
    btAlignedFreeInternal_28void__29($16);
   }
   HEAP32[$0 + 136 >> 2] = 0;
  }
  HEAP32[$0 + 136 >> 2] = $12;
  HEAP32[$0 + 132 >> 2] = $1;
  HEAP8[$0 + 140 | 0] = 1;
 }
 HEAP32[$0 + 128 >> 2] = $1;
 label$62 : {
  if (HEAPU8[$7 + 72 | 0] & 16) {
   $9 = HEAP32[$0 + 108 >> 2];
   $19 = $2 << 1;
   if (!(($9 | 0) >= ($19 | 0) | HEAP32[$0 + 112 >> 2] >= ($19 | 0))) {
    $8 = 0;
    $12 = 0;
    if ($2) {
     $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($2 << 3, 16);
     $9 = HEAP32[$0 + 108 >> 2];
    }
    $16 = HEAP32[$0 + 116 >> 2];
    label$66 : {
     label$67 : {
      if (($9 | 0) >= 1) {
       while (1) {
        $15 = $8 << 2;
        HEAP32[$15 + $12 >> 2] = HEAP32[$15 + $16 >> 2];
        $8 = $8 + 1 | 0;
        if (($9 | 0) != ($8 | 0)) {
         continue;
        }
        break label$67;
       }
      }
      if (!$16) {
       break label$66;
      }
     }
     if (HEAPU8[$0 + 120 | 0]) {
      btAlignedFreeInternal_28void__29($16);
     }
     HEAP32[$0 + 116 >> 2] = 0;
    }
    HEAP32[$0 + 116 >> 2] = $12;
    HEAP32[$0 + 112 >> 2] = $19;
    HEAP8[$0 + 120 | 0] = 1;
   }
   HEAP32[$0 + 108 >> 2] = $19;
   break label$62;
  }
  $9 = HEAP32[$0 + 108 >> 2];
  if (!(($9 | 0) >= ($2 | 0) | HEAP32[$0 + 112 >> 2] >= ($2 | 0))) {
   $8 = 0;
   $12 = 0;
   if ($2) {
    $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($2 << 2, 16);
    $9 = HEAP32[$0 + 108 >> 2];
   }
   $16 = HEAP32[$0 + 116 >> 2];
   label$73 : {
    label$74 : {
     if (($9 | 0) >= 1) {
      while (1) {
       $15 = $8 << 2;
       HEAP32[$15 + $12 >> 2] = HEAP32[$15 + $16 >> 2];
       $8 = $8 + 1 | 0;
       if (($9 | 0) != ($8 | 0)) {
        continue;
       }
       break label$74;
      }
     }
     if (!$16) {
      break label$73;
     }
    }
    if (HEAPU8[$0 + 120 | 0]) {
     btAlignedFreeInternal_28void__29($16);
    }
    HEAP32[$0 + 116 >> 2] = 0;
   }
   HEAP32[$0 + 116 >> 2] = $12;
   HEAP32[$0 + 112 >> 2] = $2;
   HEAP8[$0 + 120 | 0] = 1;
  }
  HEAP32[$0 + 108 >> 2] = $2;
 }
 $9 = HEAP32[$0 + 148 >> 2];
 if (!(($9 | 0) >= ($10 | 0) | HEAP32[$0 + 152 >> 2] >= ($10 | 0))) {
  $8 = 0;
  $12 = 0;
  if ($10) {
   $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($10 << 2, 16);
   $9 = HEAP32[$0 + 148 >> 2];
  }
  $16 = HEAP32[$0 + 156 >> 2];
  label$80 : {
   label$81 : {
    if (($9 | 0) >= 1) {
     while (1) {
      $15 = $8 << 2;
      HEAP32[$15 + $12 >> 2] = HEAP32[$15 + $16 >> 2];
      $8 = $8 + 1 | 0;
      if (($9 | 0) != ($8 | 0)) {
       continue;
      }
      break label$81;
     }
    }
    if (!$16) {
     break label$80;
    }
   }
   if (HEAPU8[$0 + 160 | 0]) {
    btAlignedFreeInternal_28void__29($16);
   }
   HEAP32[$0 + 156 >> 2] = 0;
  }
  HEAP32[$0 + 156 >> 2] = $12;
  HEAP32[$0 + 152 >> 2] = $10;
  HEAP8[$0 + 160 | 0] = 1;
 }
 HEAP32[$0 + 148 >> 2] = $10;
 if (($1 | 0) >= 1) {
  $15 = HEAP32[$0 + 136 >> 2];
  $8 = 0;
  while (1) {
   HEAP32[($8 << 2) + $15 >> 2] = $8;
   $8 = $8 + 1 | 0;
   if (($8 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 if (($2 | 0) >= 1) {
  $1 = HEAP32[$0 + 116 >> 2];
  $8 = 0;
  while (1) {
   HEAP32[($8 << 2) + $1 >> 2] = $8;
   $8 = $8 + 1 | 0;
   if (($8 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 if (($10 | 0) >= 1) {
  $2 = HEAP32[$0 + 156 >> 2];
  $8 = 0;
  while (1) {
   HEAP32[($8 << 2) + $2 >> 2] = $8;
   $8 = $8 + 1 | 0;
   if (($10 | 0) != ($8 | 0)) {
    continue;
   }
   break;
  }
 }
 CProfileSample___CProfileSample_28_29($49);
 $0 = $13 + 256 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround(Math_fround(0));
}
function btSequentialImpulseConstraintSolver__convertContact_28btPersistentManifold__2c_20btContactSolverInfo_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = 0, $19 = Math_fround(0), $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = Math_fround(0), $25 = 0, $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = 0, $34 = 0, $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = 0, $42 = 0, $43 = Math_fround(0), $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = Math_fround(0), $71 = Math_fround(0), $72 = Math_fround(0);
 $3 = global$0 - 80 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $11 = HEAP32[$1 + 840 >> 2];
 $12 = HEAP32[$1 + 836 >> 2];
 $21 = btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20float_29($0, $12, HEAPF32[$2 + 12 >> 2]);
 $22 = btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20float_29($0, $11, HEAPF32[$2 + 12 >> 2]);
 $13 = HEAP32[$0 + 16 >> 2];
 $4 = $13 + Math_imul($21, 244) | 0;
 $5 = HEAPF32[$4 + 128 >> 2];
 $6 = Math_fround($5 * $5);
 $5 = HEAPF32[$4 + 132 >> 2];
 $6 = Math_fround($6 + Math_fround($5 * $5));
 $5 = HEAPF32[$4 + 136 >> 2];
 label$2 : {
  if (!!(Math_fround($6 + Math_fround($5 * $5)) < Math_fround(1.4210854715202004e-14))) {
   $4 = Math_imul($22, 244) + $13 | 0;
   $5 = HEAPF32[$4 + 128 >> 2];
   $6 = Math_fround($5 * $5);
   $5 = HEAPF32[$4 + 132 >> 2];
   $6 = Math_fround($6 + Math_fround($5 * $5));
   $5 = HEAPF32[$4 + 136 >> 2];
   if (Math_fround($6 + Math_fround($5 * $5)) < Math_fround(1.4210854715202004e-14)) {
    break label$2;
   }
  }
  $17 = HEAP32[$1 + 844 >> 2];
  if (($17 | 0) < 1) {
   break label$2;
  }
  $4 = Math_imul($22, 244) + $13 | 0;
  $44 = $4;
  $45 = $4;
  $46 = $4;
  $47 = $4;
  $48 = $4;
  $49 = $4;
  $50 = $4;
  $51 = $4;
  $52 = $4;
  $53 = $4;
  $54 = $4;
  $55 = $4;
  $56 = $4;
  $4 = Math_imul($21, 244) + $13 | 0;
  $57 = $4;
  $58 = $4;
  $59 = $4;
  $60 = $4;
  $61 = $4;
  $62 = $4;
  $63 = $4;
  $64 = $4;
  $65 = $4;
  $66 = $4;
  $67 = $4;
  $68 = $4;
  $69 = $4;
  while (1) {
   $4 = Math_imul($41, 208) + $1 | 0;
   if (!!(HEAPF32[$4 + 84 >> 2] <= HEAPF32[$1 + 852 >> 2])) {
    $33 = $4 + 4 | 0;
    $18 = HEAP32[$0 + 28 >> 2];
    $17 = $18;
    label$6 : {
     if (HEAP32[$0 + 32 >> 2] != ($18 | 0)) {
      break label$6;
     }
     $17 = $18;
     $23 = $18 ? $18 << 1 : 1;
     if (($18 | 0) >= ($23 | 0)) {
      break label$6;
     }
     $17 = 0;
     $20 = $18;
     $25 = 0;
     if ($23) {
      $25 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($23, 152), 16);
      $20 = HEAP32[$0 + 28 >> 2];
     }
     if (($20 | 0) >= 1) {
      while (1) {
       $13 = Math_imul($17, 152);
       memcpy($25 + $13 | 0, HEAP32[$0 + 36 >> 2] + $13 | 0, 152);
       $17 = $17 + 1 | 0;
       if (($20 | 0) != ($17 | 0)) {
        continue;
       }
       break;
      }
     }
     $17 = HEAP32[$0 + 36 >> 2];
     if ($17) {
      if (HEAPU8[$0 + 40 | 0]) {
       btAlignedFreeInternal_28void__29($17);
      }
      HEAP32[$0 + 36 >> 2] = 0;
     }
     HEAP32[$0 + 36 >> 2] = $25;
     HEAP8[$0 + 40 | 0] = 1;
     HEAP32[$0 + 32 >> 2] = $23;
     $17 = HEAP32[$0 + 28 >> 2];
    }
    HEAP32[$0 + 28 >> 2] = $17 + 1;
    $17 = HEAP32[$0 + 36 >> 2] + Math_imul($18, 152) | 0;
    HEAP32[$17 + 148 >> 2] = $22;
    HEAP32[$17 + 144 >> 2] = $21;
    HEAP32[$17 + 132 >> 2] = $33;
    $6 = HEAPF32[$4 + 52 >> 2];
    $9 = HEAPF32[$4 + 56 >> 2];
    $5 = HEAPF32[$4 + 60 >> 2];
    $7 = HEAPF32[$12 + 52 >> 2];
    $10 = HEAPF32[$12 + 56 >> 2];
    $8 = HEAPF32[$12 + 60 >> 2];
    HEAP32[$3 + 76 >> 2] = 0;
    $5 = Math_fround($5 - $8);
    HEAPF32[$3 + 72 >> 2] = $5;
    $9 = Math_fround($9 - $10);
    HEAPF32[$3 + 68 >> 2] = $9;
    $6 = Math_fround($6 - $7);
    HEAPF32[$3 + 64 >> 2] = $6;
    $8 = HEAPF32[$4 + 36 >> 2];
    $10 = HEAPF32[$4 + 40 >> 2];
    $7 = HEAPF32[$4 + 44 >> 2];
    $19 = HEAPF32[$11 + 52 >> 2];
    $26 = HEAPF32[$11 + 56 >> 2];
    $40 = HEAPF32[$11 + 60 >> 2];
    HEAP32[$3 + 60 >> 2] = 0;
    $7 = Math_fround($7 - $40);
    HEAPF32[$3 + 56 >> 2] = $7;
    $10 = Math_fround($10 - $26);
    HEAPF32[$3 + 52 >> 2] = $10;
    $8 = Math_fround($8 - $19);
    HEAPF32[$3 + 48 >> 2] = $8;
    $19 = Math_fround(0);
    $26 = Math_fround(0);
    $40 = Math_fround(0);
    $43 = Math_fround(0);
    if (HEAP32[$69 + 240 >> 2]) {
     $26 = Math_fround(HEAPF32[$62 + 192 >> 2] + HEAPF32[$61 + 224 >> 2]);
     $38 = Math_fround(HEAPF32[$60 + 196 >> 2] + HEAPF32[$59 + 228 >> 2]);
     $43 = Math_fround(Math_fround(HEAPF32[$64 + 184 >> 2] + HEAPF32[$63 + 216 >> 2]) + Math_fround(Math_fround($9 * $26) - Math_fround($6 * $38)));
     $39 = Math_fround(HEAPF32[$58 + 200 >> 2] + HEAPF32[$57 + 232 >> 2]);
     $40 = Math_fround(Math_fround(HEAPF32[$66 + 180 >> 2] + HEAPF32[$65 + 212 >> 2]) + Math_fround(Math_fround($6 * $39) - Math_fround($5 * $26)));
     $26 = Math_fround(Math_fround(HEAPF32[$68 + 176 >> 2] + HEAPF32[$67 + 208 >> 2]) + Math_fround(Math_fround($5 * $38) - Math_fround($9 * $39)));
    }
    $38 = Math_fround(0);
    $39 = Math_fround(0);
    if (HEAP32[$56 + 240 >> 2]) {
     $5 = Math_fround(HEAPF32[$49 + 192 >> 2] + HEAPF32[$48 + 224 >> 2]);
     $9 = Math_fround(HEAPF32[$47 + 196 >> 2] + HEAPF32[$46 + 228 >> 2]);
     $39 = Math_fround(Math_fround(HEAPF32[$51 + 184 >> 2] + HEAPF32[$50 + 216 >> 2]) + Math_fround(Math_fround($10 * $5) - Math_fround($8 * $9)));
     $6 = Math_fround(HEAPF32[$45 + 200 >> 2] + HEAPF32[$44 + 232 >> 2]);
     $38 = Math_fround(Math_fround(HEAPF32[$53 + 180 >> 2] + HEAPF32[$52 + 212 >> 2]) + Math_fround(Math_fround($8 * $6) - Math_fround($7 * $5)));
     $19 = Math_fround(Math_fround(HEAPF32[$55 + 176 >> 2] + HEAPF32[$54 + 208 >> 2]) + Math_fround(Math_fround($7 * $9) - Math_fround($10 * $6)));
    }
    $42 = $4;
    $25 = $4 + 76 | 0;
    $70 = HEAPF32[$25 >> 2];
    $20 = $4 + 68 | 0;
    $71 = HEAPF32[$20 >> 2];
    $25 = $4;
    $23 = $4 + 72 | 0;
    $72 = HEAPF32[$23 >> 2];
    btSequentialImpulseConstraintSolver__setupContactConstraint_28btSolverConstraint__2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btContactSolverInfo_20const__2c_20float__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $17, $21, $22, $33, $2, $3 + 44 | 0, $3 - -64 | 0, $3 + 48 | 0);
    HEAP32[$17 + 140 >> 2] = HEAP32[$0 + 68 >> 2];
    $13 = $4 + 92 | 0;
    label$15 : {
     if (!(HEAPF32[$13 >> 2] > Math_fround(0))) {
      break label$15;
     }
     $23 = $4;
     btSequentialImpulseConstraintSolver__addTorsionalFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20float_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20float_2c_20float_29($0, $20, $21, $22, $18, $3, HEAPF32[$4 + 96 >> 2], $3, $3, $3, $3, $5, Math_fround(0), Math_fround(0));
     $7 = HEAPF32[$42 + 76 >> 2];
     label$16 : {
      if (!!(Math_fround(Math_abs($7)) > Math_fround(.7071067690849304))) {
       $5 = HEAPF32[$25 + 72 >> 2];
       HEAP32[$3 + 24 >> 2] = 0;
       $10 = Math_fround(Math_fround($7 * $7) + Math_fround($5 * $5));
       $6 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($10)));
       $5 = Math_fround($5 * $6);
       HEAPF32[$3 + 32 >> 2] = $5;
       $9 = Math_fround($6 * Math_fround(-$7));
       HEAPF32[$3 + 28 >> 2] = $9;
       $8 = Math_fround($10 * $6);
       HEAPF32[$3 + 8 >> 2] = $8;
       $6 = HEAPF32[$20 >> 2];
       $10 = Math_fround($5 * Math_fround(-$6));
       HEAPF32[$3 + 12 >> 2] = $10;
       $7 = Math_fround($6 * $9);
       $6 = Math_fround(0);
       break label$16;
      }
      $5 = HEAPF32[$20 >> 2];
      $6 = HEAPF32[$25 + 72 >> 2];
      HEAP32[$3 + 32 >> 2] = 0;
      $24 = Math_fround(Math_fround($5 * $5) + Math_fround($6 * $6));
      $15 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($24)));
      $9 = Math_fround($5 * $15);
      HEAPF32[$3 + 28 >> 2] = $9;
      $6 = Math_fround($15 * Math_fround(-$6));
      HEAPF32[$3 + 24 >> 2] = $6;
      $10 = Math_fround($7 * $6);
      HEAPF32[$3 + 12 >> 2] = $10;
      $8 = Math_fround($9 * Math_fround(-$7));
      HEAPF32[$3 + 8 >> 2] = $8;
      $7 = Math_fround($24 * $15);
      $5 = Math_fround(0);
     }
     $15 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($6 * $6) + Math_fround($9 * $9)) + Math_fround($5 * $5)))));
     $5 = Math_fround($5 * $15);
     HEAPF32[$3 + 32 >> 2] = $5;
     $9 = Math_fround($9 * $15);
     HEAPF32[$3 + 28 >> 2] = $9;
     $6 = Math_fround($6 * $15);
     HEAPF32[$3 + 24 >> 2] = $6;
     $15 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround($7 * $7) + Math_fround(Math_fround($8 * $8) + Math_fround($10 * $10))))));
     $7 = Math_fround($7 * $15);
     HEAPF32[$3 + 16 >> 2] = $7;
     $10 = Math_fround($10 * $15);
     HEAPF32[$3 + 12 >> 2] = $10;
     $8 = Math_fround($8 * $15);
     HEAPF32[$3 + 8 >> 2] = $8;
     $34 = HEAP32[$12 + 180 >> 2] & 2;
     if ($34) {
      $35 = HEAPF32[$12 + 172 >> 2];
      $15 = HEAPF32[$12 + 44 >> 2];
      $24 = HEAPF32[$12 + 12 >> 2];
      $27 = HEAPF32[$12 + 28 >> 2];
      $16 = HEAPF32[$12 + 164 >> 2];
      $14 = HEAPF32[$12 + 36 >> 2];
      $28 = HEAPF32[$12 + 4 >> 2];
      $29 = HEAPF32[$12 + 20 >> 2];
      $36 = HEAPF32[$12 + 168 >> 2];
      $30 = HEAPF32[$12 + 40 >> 2];
      $31 = HEAPF32[$12 + 8 >> 2];
      $32 = HEAPF32[$12 + 24 >> 2];
      HEAP32[$3 + 36 >> 2] = 0;
      $16 = Math_fround($16 * Math_fround(Math_fround(Math_fround($6 * $28) + Math_fround($9 * $29)) + Math_fround($5 * $14)));
      $37 = Math_fround($14 * $16);
      $14 = Math_fround($36 * Math_fround(Math_fround(Math_fround($6 * $31) + Math_fround($9 * $32)) + Math_fround($5 * $30)));
      $6 = Math_fround($35 * Math_fround(Math_fround(Math_fround($6 * $24) + Math_fround($9 * $27)) + Math_fround($5 * $15)));
      $5 = Math_fround(Math_fround($37 + Math_fround($30 * $14)) + Math_fround($15 * $6));
      HEAPF32[$3 + 32 >> 2] = $5;
      $9 = Math_fround(Math_fround(Math_fround($29 * $16) + Math_fround($32 * $14)) + Math_fround($27 * $6));
      HEAPF32[$3 + 28 >> 2] = $9;
      $6 = Math_fround(Math_fround(Math_fround($28 * $16) + Math_fround($31 * $14)) + Math_fround($24 * $6));
      HEAPF32[$3 + 24 >> 2] = $6;
     }
     $13 = HEAP32[$11 + 180 >> 2] & 2;
     if ($13) {
      $35 = HEAPF32[$11 + 172 >> 2];
      $15 = HEAPF32[$11 + 44 >> 2];
      $24 = HEAPF32[$11 + 12 >> 2];
      $27 = HEAPF32[$11 + 28 >> 2];
      $16 = HEAPF32[$11 + 164 >> 2];
      $14 = HEAPF32[$11 + 36 >> 2];
      $28 = HEAPF32[$11 + 4 >> 2];
      $29 = HEAPF32[$11 + 20 >> 2];
      $36 = HEAPF32[$11 + 168 >> 2];
      $30 = HEAPF32[$11 + 40 >> 2];
      $31 = HEAPF32[$11 + 8 >> 2];
      $32 = HEAPF32[$11 + 24 >> 2];
      HEAP32[$3 + 36 >> 2] = 0;
      $16 = Math_fround($16 * Math_fround(Math_fround(Math_fround($28 * $6) + Math_fround($29 * $9)) + Math_fround($14 * $5)));
      $37 = Math_fround($14 * $16);
      $14 = Math_fround($36 * Math_fround(Math_fround(Math_fround($6 * $31) + Math_fround($9 * $32)) + Math_fround($5 * $30)));
      $6 = Math_fround($35 * Math_fround(Math_fround(Math_fround($6 * $24) + Math_fround($9 * $27)) + Math_fround($5 * $15)));
      $5 = Math_fround(Math_fround($37 + Math_fround($30 * $14)) + Math_fround($15 * $6));
      HEAPF32[$3 + 32 >> 2] = $5;
      $9 = Math_fround(Math_fround(Math_fround($29 * $16) + Math_fround($32 * $14)) + Math_fround($27 * $6));
      HEAPF32[$3 + 28 >> 2] = $9;
      $6 = Math_fround(Math_fround(Math_fround($28 * $16) + Math_fround($31 * $14)) + Math_fround($24 * $6));
      HEAPF32[$3 + 24 >> 2] = $6;
     }
     if ($34) {
      $35 = HEAPF32[$12 + 172 >> 2];
      $15 = HEAPF32[$12 + 44 >> 2];
      $24 = HEAPF32[$12 + 12 >> 2];
      $27 = HEAPF32[$12 + 28 >> 2];
      $16 = HEAPF32[$12 + 164 >> 2];
      $14 = HEAPF32[$12 + 36 >> 2];
      $28 = HEAPF32[$12 + 4 >> 2];
      $29 = HEAPF32[$12 + 20 >> 2];
      $36 = HEAPF32[$12 + 168 >> 2];
      $30 = HEAPF32[$12 + 40 >> 2];
      $31 = HEAPF32[$12 + 8 >> 2];
      $32 = HEAPF32[$12 + 24 >> 2];
      HEAP32[$3 + 20 >> 2] = 0;
      $16 = Math_fround($16 * Math_fround(Math_fround(Math_fround($8 * $28) + Math_fround($10 * $29)) + Math_fround($7 * $14)));
      $37 = Math_fround($14 * $16);
      $14 = Math_fround($36 * Math_fround(Math_fround(Math_fround($8 * $31) + Math_fround($10 * $32)) + Math_fround($7 * $30)));
      $8 = Math_fround($35 * Math_fround(Math_fround(Math_fround($8 * $24) + Math_fround($10 * $27)) + Math_fround($7 * $15)));
      $7 = Math_fround(Math_fround($37 + Math_fround($30 * $14)) + Math_fround($15 * $8));
      HEAPF32[$3 + 16 >> 2] = $7;
      $10 = Math_fround(Math_fround(Math_fround($29 * $16) + Math_fround($32 * $14)) + Math_fround($27 * $8));
      HEAPF32[$3 + 12 >> 2] = $10;
      $8 = Math_fround(Math_fround(Math_fround($28 * $16) + Math_fround($31 * $14)) + Math_fround($24 * $8));
      HEAPF32[$3 + 8 >> 2] = $8;
     }
     if ($13) {
      $35 = HEAPF32[$11 + 172 >> 2];
      $15 = HEAPF32[$11 + 44 >> 2];
      $24 = HEAPF32[$11 + 12 >> 2];
      $27 = HEAPF32[$11 + 28 >> 2];
      $16 = HEAPF32[$11 + 164 >> 2];
      $14 = HEAPF32[$11 + 36 >> 2];
      $28 = HEAPF32[$11 + 4 >> 2];
      $29 = HEAPF32[$11 + 20 >> 2];
      $36 = HEAPF32[$11 + 168 >> 2];
      $30 = HEAPF32[$11 + 40 >> 2];
      $31 = HEAPF32[$11 + 8 >> 2];
      $32 = HEAPF32[$11 + 24 >> 2];
      HEAP32[$3 + 20 >> 2] = 0;
      $16 = Math_fround($16 * Math_fround(Math_fround(Math_fround($28 * $8) + Math_fround($29 * $10)) + Math_fround($14 * $7)));
      $37 = Math_fround($14 * $16);
      $14 = Math_fround($36 * Math_fround(Math_fround(Math_fround($8 * $31) + Math_fround($10 * $32)) + Math_fround($7 * $30)));
      $8 = Math_fround($35 * Math_fround(Math_fround(Math_fround($8 * $24) + Math_fround($10 * $27)) + Math_fround($7 * $15)));
      $7 = Math_fround(Math_fround($37 + Math_fround($30 * $14)) + Math_fround($15 * $8));
      HEAPF32[$3 + 16 >> 2] = $7;
      $10 = Math_fround(Math_fround(Math_fround($29 * $16) + Math_fround($32 * $14)) + Math_fround($27 * $8));
      HEAPF32[$3 + 12 >> 2] = $10;
      $8 = Math_fround(Math_fround(Math_fround($28 * $16) + Math_fround($31 * $14)) + Math_fround($24 * $8));
      HEAPF32[$3 + 8 >> 2] = $8;
     }
     if (!!(+Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($6 * $6) + Math_fround($9 * $9)) + Math_fround($5 * $5)))) > .001)) {
      btSequentialImpulseConstraintSolver__addTorsionalFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20float_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20float_2c_20float_29($0, $3 + 24 | 0, $21, $22, $18, $3, HEAPF32[$23 + 92 >> 2], $3, $3, $3, $3, $5, Math_fround(0), Math_fround(0));
     }
     if (!(+Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($10 * $10)) + Math_fround($7 * $7)))) > .001)) {
      break label$15;
     }
     btSequentialImpulseConstraintSolver__addTorsionalFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20float_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20float_2c_20float_29($0, $3 + 8 | 0, $21, $22, $18, $3, HEAPF32[$23 + 92 >> 2], $3, $3, $3, $3, $5, Math_fround(0), Math_fround(0));
    }
    label$23 : {
     if (!(HEAP8[$4 + 132 | 0] & 1 ? HEAPU8[$2 + 72 | 0] & 32 : 0)) {
      $6 = HEAPF32[$20 >> 2];
      $9 = HEAPF32[$25 + 72 >> 2];
      $5 = HEAPF32[$42 + 76 >> 2];
      HEAP32[$4 + 184 >> 2] = 0;
      $23 = $4;
      $34 = $4 + 180 | 0;
      $7 = Math_fround($43 - $39);
      $10 = $7;
      $19 = Math_fround($26 - $19);
      $8 = Math_fround($40 - $38);
      $7 = Math_fround(Math_fround(Math_fround($19 * $71) + Math_fround($8 * $72)) + Math_fround($7 * $70));
      $10 = Math_fround($10 - Math_fround($5 * $7));
      HEAPF32[$34 >> 2] = $10;
      $34 = $4;
      $13 = $4 + 176 | 0;
      $8 = Math_fround($8 - Math_fround($7 * $9));
      HEAPF32[$13 >> 2] = $8;
      $13 = $4 + 172 | 0;
      $7 = Math_fround($19 - Math_fround($7 * $6));
      HEAPF32[$13 >> 2] = $7;
      label$26 : {
       if (HEAPU8[$2 + 72 | 0] & 64) {
        break label$26;
       }
       $19 = Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($8 * $8)) + Math_fround($10 * $10));
       if (!($19 > Math_fround(1.1920928955078125e-7))) {
        break label$26;
       }
       $5 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($19)));
       HEAPF32[$13 >> 2] = $7 * $5;
       HEAPF32[$34 + 176 >> 2] = $8 * $5;
       HEAPF32[$23 + 180 >> 2] = $10 * $5;
       btSequentialImpulseConstraintSolver__applyAnisotropicFriction_28btCollisionObject__2c_20btVector3__2c_20int_29($12, $13, 1);
       btSequentialImpulseConstraintSolver__applyAnisotropicFriction_28btCollisionObject__2c_20btVector3__2c_20int_29($11, $13, 1);
       $5 = HEAPF32[$3 + 44 >> 2];
       btSequentialImpulseConstraintSolver__addFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20btContactSolverInfo_20const__2c_20float_2c_20float_29($0, $13, $21, $22, $18, $33, $3 - -64 | 0, $3 + 48 | 0, $3, $3, $5, $2, Math_fround(0), Math_fround(0));
       if (!(HEAPU8[$2 + 72 | 0] & 16)) {
        break label$23;
       }
       $9 = HEAPF32[$34 + 176 >> 2];
       $6 = HEAPF32[$25 + 72 >> 2];
       $7 = HEAPF32[$20 >> 2];
       $10 = HEAPF32[$23 + 180 >> 2];
       $8 = HEAPF32[$13 >> 2];
       $19 = HEAPF32[$42 + 76 >> 2];
       HEAP32[$4 + 200 >> 2] = 0;
       $26 = Math_fround(Math_fround($6 * $8) - Math_fround($9 * $7));
       $9 = Math_fround(Math_fround($9 * $19) - Math_fround($10 * $6));
       $6 = Math_fround(Math_fround($10 * $7) - Math_fround($19 * $8));
       $7 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($9 * $9) + Math_fround($6 * $6)) + Math_fround($26 * $26)))));
       HEAPF32[$4 + 196 >> 2] = $26 * $7;
       HEAPF32[$4 + 192 >> 2] = $6 * $7;
       $4 = $4 + 188 | 0;
       HEAPF32[$4 >> 2] = $9 * $7;
       btSequentialImpulseConstraintSolver__applyAnisotropicFriction_28btCollisionObject__2c_20btVector3__2c_20int_29($12, $4, 1);
       btSequentialImpulseConstraintSolver__applyAnisotropicFriction_28btCollisionObject__2c_20btVector3__2c_20int_29($11, $4, 1);
       btSequentialImpulseConstraintSolver__addFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20btContactSolverInfo_20const__2c_20float_2c_20float_29($0, $4, $21, $22, $18, $33, $3 - -64 | 0, $3 + 48 | 0, $3, $3, $5, $2, Math_fround(0), Math_fround(0));
       break label$23;
      }
      $20 = $4 + 188 | 0;
      $25 = $20;
      label$27 : {
       if (!!(Math_fround(Math_abs($5)) > Math_fround(.7071067690849304))) {
        HEAP32[$13 >> 2] = 0;
        $10 = Math_fround(Math_fround($9 * $9) + Math_fround($5 * $5));
        $7 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($10)));
        $8 = Math_fround($7 * Math_fround(-$5));
        HEAPF32[$34 + 176 >> 2] = $8;
        $19 = Math_fround($9 * $7);
        HEAPF32[$23 + 180 >> 2] = $19;
        $9 = Math_fround($6 * $8);
        $7 = Math_fround($10 * $7);
        $6 = Math_fround($19 * Math_fround(-$6));
        break label$27;
       }
       $10 = Math_fround(Math_fround($6 * $6) + Math_fround($9 * $9));
       $7 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($10)));
       $8 = Math_fround($7 * Math_fround(-$9));
       HEAPF32[$13 >> 2] = $8;
       $19 = Math_fround($6 * $7);
       HEAPF32[$34 + 176 >> 2] = $19;
       HEAP32[$23 + 180 >> 2] = 0;
       $9 = Math_fround($10 * $7);
       $7 = Math_fround($19 * Math_fround(-$5));
       $6 = Math_fround($5 * $8);
      }
      $5 = $7;
      HEAPF32[$25 >> 2] = $5;
      HEAPF32[$4 + 196 >> 2] = $9;
      HEAPF32[$4 + 192 >> 2] = $6;
      btSequentialImpulseConstraintSolver__applyAnisotropicFriction_28btCollisionObject__2c_20btVector3__2c_20int_29($12, $13, 1);
      btSequentialImpulseConstraintSolver__applyAnisotropicFriction_28btCollisionObject__2c_20btVector3__2c_20int_29($11, $13, 1);
      $5 = HEAPF32[$3 + 44 >> 2];
      btSequentialImpulseConstraintSolver__addFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20btContactSolverInfo_20const__2c_20float_2c_20float_29($0, $13, $21, $22, $18, $33, $3 - -64 | 0, $3 + 48 | 0, $3, $3, $5, $2, Math_fround(0), Math_fround(0));
      $13 = HEAP32[$2 + 72 >> 2];
      if ($13 & 16) {
       btSequentialImpulseConstraintSolver__applyAnisotropicFriction_28btCollisionObject__2c_20btVector3__2c_20int_29($12, $20, 1);
       btSequentialImpulseConstraintSolver__applyAnisotropicFriction_28btCollisionObject__2c_20btVector3__2c_20int_29($11, $20, 1);
       btSequentialImpulseConstraintSolver__addFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20btContactSolverInfo_20const__2c_20float_2c_20float_29($0, $20, $21, $22, $18, $33, $3 - -64 | 0, $3 + 48 | 0, $3, $3, $5, $2, Math_fround(0), Math_fround(0));
       $13 = HEAP32[$2 + 72 >> 2];
      }
      if (($13 & 80) != 80) {
       break label$23;
      }
      $18 = $4;
      $4 = $4 + 132 | 0;
      HEAP32[$4 >> 2] = HEAP32[$18 + 132 >> 2] | 1;
      break label$23;
     }
     $20 = $4;
     $5 = HEAPF32[$3 + 44 >> 2];
     $13 = $4 + 164 | 0;
     btSequentialImpulseConstraintSolver__addFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20btContactSolverInfo_20const__2c_20float_2c_20float_29($0, $4 + 172 | 0, $21, $22, $18, $33, $3 - -64 | 0, $3 + 48 | 0, $3, $3, $5, $2, HEAPF32[$4 + 148 >> 2], HEAPF32[$13 >> 2]);
     if (!(HEAPU8[$2 + 72 | 0] & 16)) {
      break label$23;
     }
     btSequentialImpulseConstraintSolver__addFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20btContactSolverInfo_20const__2c_20float_2c_20float_29($0, $4 + 188 | 0, $21, $22, $18, $33, $3 - -64 | 0, $3 + 48 | 0, $3, $3, $5, $2, HEAPF32[$4 + 152 >> 2], HEAPF32[$20 + 164 >> 2]);
    }
    btSequentialImpulseConstraintSolver__setFrictionConstraintImpulse_28btSolverConstraint__2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btContactSolverInfo_20const__29($0, $17, $21, $22, $33, $2);
    $17 = HEAP32[$1 + 844 >> 2];
   }
   $41 = $41 + 1 | 0;
   if (($41 | 0) < ($17 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = $3 + 80 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundCompoundCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0, $23 = Math_fround(0), $24 = Math_fround(0), $25 = 0, $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = 0, $35 = 0, $36 = 0, $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = 0, $41 = 0, $42 = Math_fround(0), $43 = 0, $44 = 0, $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = Math_fround(0), $50 = Math_fround(0), $51 = Math_fround(0), $52 = Math_fround(0), $53 = Math_fround(0), $54 = Math_fround(0), $55 = 0;
 $5 = global$0 - 3584 | 0;
 $36 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $36;
 label$2 : {
  label$3 : {
   $43 = HEAP32[$1 + 4 >> 2];
   $25 = HEAP32[$43 + 68 >> 2];
   if ($25) {
    $44 = HEAP32[$2 + 4 >> 2];
    $22 = HEAP32[$44 + 68 >> 2];
    if ($22) {
     break label$3;
    }
   }
   btCompoundCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4);
   break label$2;
  }
  if (!(HEAP32[$44 + 72 >> 2] == HEAP32[$0 + 112 >> 2] ? HEAP32[$43 + 72 >> 2] == HEAP32[$0 + 108 >> 2] : 0)) {
   $10 = HEAP32[$0 + 84 >> 2];
   $11 = HEAP32[$10 + 8 >> 2];
   if (($11 | 0) >= 1) {
    while (1) {
     $7 = HEAP32[(HEAP32[$10 + 16 >> 2] + Math_imul($6, 12) | 0) + 8 >> 2];
     if ($7) {
      FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] >> 2]]($7) | 0;
      $8 = HEAP32[$0 + 4 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 60 >> 2]]($8, $7);
     }
     $6 = $6 + 1 | 0;
     if (($11 | 0) != ($6 | 0)) {
      continue;
     }
     break;
    }
    $10 = HEAP32[$0 + 84 >> 2];
   }
   btHashedSimplePairCache__removeAllPairs_28_29($10);
   HEAP32[$0 + 108 >> 2] = HEAP32[$43 + 72 >> 2];
   HEAP32[$0 + 112 >> 2] = HEAP32[$44 + 72 >> 2];
  }
  HEAP32[$5 + 84 >> 2] = 0;
  HEAP8[$5 + 88 | 0] = 1;
  HEAP32[$5 + 76 >> 2] = 0;
  HEAP32[$5 + 80 >> 2] = 0;
  btPersistentManifold__btPersistentManifold_28_29($5 + 112 | 0);
  btPersistentManifold__btPersistentManifold_28_29($5 + 980 | 0);
  btPersistentManifold__btPersistentManifold_28_29($5 + 1848 | 0);
  btPersistentManifold__btPersistentManifold_28_29($5 + 2716 | 0);
  $6 = HEAP32[$5 + 84 >> 2];
  if ($6) {
   if (HEAPU8[$5 + 88 | 0]) {
    btAlignedFreeInternal_28void__29($6);
   }
   HEAP32[$5 + 84 >> 2] = 0;
  }
  HEAP32[$5 + 76 >> 2] = 0;
  HEAP32[$5 + 80 >> 2] = 4;
  HEAP32[$5 + 84 >> 2] = $5 + 112;
  HEAP8[$5 + 88 | 0] = 0;
  $16 = HEAP32[$0 + 84 >> 2];
  $7 = HEAP32[$16 + 8 >> 2];
  label$13 : {
   label$14 : {
    if (($7 | 0) <= 0) {
     $6 = $5 + 112 | 0;
     break label$14;
    }
    $11 = 0;
    while (1) {
     $6 = HEAP32[(HEAP32[$16 + 16 >> 2] + Math_imul($11, 12) | 0) + 8 >> 2];
     if ($6) {
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 16 >> 2]]($6, $5 + 72 | 0);
      $7 = 0;
      $6 = HEAP32[$5 + 76 >> 2];
      if (($6 | 0) > 0) {
       while (1) {
        $8 = HEAP32[HEAP32[$5 + 84 >> 2] + ($7 << 2) >> 2];
        if (HEAP32[$8 + 844 >> 2]) {
         HEAP32[$4 + 4 >> 2] = $8;
         $6 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
         $10 = HEAP32[$8 + 836 >> 2];
         label$21 : {
          if (($6 | 0) != ($10 | 0)) {
           btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($8, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0, $6 + 4 | 0);
           break label$21;
          }
          btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($8, $10 + 4 | 0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0);
         }
         HEAP32[$4 + 4 >> 2] = 0;
         $6 = HEAP32[$5 + 76 >> 2];
        }
        $7 = $7 + 1 | 0;
        if (($7 | 0) < ($6 | 0)) {
         continue;
        }
        break;
       }
      }
      if (($6 | 0) <= -1) {
       if (HEAP32[$5 + 80 >> 2] <= -1) {
        $7 = HEAP32[$5 + 84 >> 2];
        if ($7) {
         if (HEAPU8[$5 + 88 | 0]) {
          btAlignedFreeInternal_28void__29($7);
         }
         HEAP32[$5 + 84 >> 2] = 0;
        }
        HEAP8[$5 + 88 | 0] = 1;
        HEAP32[$5 + 80 >> 2] = 0;
        HEAP32[$5 + 84 >> 2] = 0;
       }
       while (1) {
        HEAP32[HEAP32[$5 + 84 >> 2] + ($6 << 2) >> 2] = 0;
        $7 = $6 + 1 | 0;
        $8 = $7 >>> 0 < $6 >>> 0;
        $6 = $7;
        if (!$8) {
         continue;
        }
        break;
       }
      }
      HEAP32[$5 + 76 >> 2] = 0;
      $7 = HEAP32[$16 + 8 >> 2];
     }
     $11 = $11 + 1 | 0;
     if (($11 | 0) < ($7 | 0)) {
      continue;
     }
     break;
    }
    $6 = HEAP32[$5 + 84 >> 2];
    if (!$6) {
     break label$13;
    }
   }
   if (HEAPU8[$5 + 88 | 0]) {
    btAlignedFreeInternal_28void__29($6);
   }
   HEAP32[$5 + 84 >> 2] = 0;
  }
  $6 = HEAP32[$0 + 4 >> 2];
  $7 = HEAP32[$0 + 84 >> 2];
  HEAP32[$5 + 104 >> 2] = HEAP32[$0 + 72 >> 2];
  HEAP32[$5 + 100 >> 2] = $7;
  HEAP32[$5 + 92 >> 2] = $3;
  HEAP32[$5 + 88 >> 2] = $6;
  HEAP32[$5 + 76 >> 2] = 0;
  HEAP32[$5 + 72 >> 2] = 10704;
  HEAP32[$5 + 96 >> 2] = $4;
  HEAP32[$5 + 80 >> 2] = $1;
  HEAP32[$5 + 84 >> 2] = $2;
  $8 = HEAP32[$25 >> 2];
  label$29 : {
   if (!$8) {
    break label$29;
   }
   $10 = HEAP32[$22 >> 2];
   if (!$10) {
    break label$29;
   }
   $6 = HEAP32[$1 + 12 >> 2];
   $9 = HEAPF32[$6 + 24 >> 2];
   $17 = Math_fround(-HEAPF32[$6 + 52 >> 2]);
   $12 = HEAPF32[$6 + 8 >> 2];
   $18 = HEAPF32[$6 + 48 >> 2];
   $13 = HEAPF32[$6 + 40 >> 2];
   $30 = HEAPF32[$6 + 56 >> 2];
   $7 = HEAP32[$2 + 12 >> 2];
   $23 = HEAPF32[$7 + 48 >> 2];
   $26 = HEAPF32[$7 + 52 >> 2];
   $31 = HEAPF32[$7 + 56 >> 2];
   $51 = Math_fround(Math_fround(Math_fround(Math_fround($9 * $17) - Math_fround($12 * $18)) - Math_fround($13 * $30)) + Math_fround(Math_fround(Math_fround($12 * $23) + Math_fround($9 * $26)) + Math_fround($13 * $31)));
   $14 = HEAPF32[$6 + 20 >> 2];
   $15 = HEAPF32[$6 + 4 >> 2];
   $19 = HEAPF32[$6 + 36 >> 2];
   $37 = Math_fround(Math_fround(Math_fround(Math_fround($14 * $17) - Math_fround($15 * $18)) - Math_fround($19 * $30)) + Math_fround(Math_fround(Math_fround($15 * $23) + Math_fround($14 * $26)) + Math_fround($19 * $31)));
   $24 = HEAPF32[$7 + 40 >> 2];
   $27 = HEAPF32[$7 + 24 >> 2];
   $32 = HEAPF32[$7 + 8 >> 2];
   $28 = HEAPF32[$7 + 36 >> 2];
   $33 = HEAPF32[$7 + 20 >> 2];
   $29 = HEAPF32[$7 + 4 >> 2];
   $21 = HEAPF32[$6 + 16 >> 2];
   $20 = HEAPF32[$6 >> 2];
   $17 = Math_fround(Math_fround($21 * $17) - Math_fround($20 * $18));
   $18 = HEAPF32[$6 + 32 >> 2];
   $30 = Math_fround(Math_fround($17 - Math_fround($18 * $30)) + Math_fround(Math_fround(Math_fround($20 * $23) + Math_fround($21 * $26)) + Math_fround($18 * $31)));
   $23 = HEAPF32[$7 + 16 >> 2];
   $45 = HEAPF32[$7 >> 2];
   $46 = HEAPF32[$7 + 32 >> 2];
   $17 = HEAPF32[$4 + 32 >> 2];
   HEAP32[$5 + 116 >> 2] = $10;
   HEAP32[$5 + 112 >> 2] = $8;
   $48 = Math_fround(Math_fround(Math_fround($12 * $32) + Math_fround($9 * $27)) + Math_fround($13 * $24));
   $52 = Math_fround(Math_abs($48));
   $49 = Math_fround(Math_fround(Math_fround($12 * $29) + Math_fround($9 * $33)) + Math_fround($13 * $28));
   $53 = Math_fround(Math_abs($49));
   $50 = Math_fround(Math_fround(Math_fround($12 * $45) + Math_fround($9 * $23)) + Math_fround($13 * $46));
   $54 = Math_fround(Math_abs($50));
   $26 = Math_fround(Math_fround(Math_fround($15 * $32) + Math_fround($14 * $27)) + Math_fround($19 * $24));
   $31 = Math_fround(Math_abs($26));
   $38 = Math_fround(Math_fround(Math_fround($15 * $29) + Math_fround($14 * $33)) + Math_fround($19 * $28));
   $42 = Math_fround(Math_abs($38));
   $39 = Math_fround(Math_fround(Math_fround($15 * $45) + Math_fround($14 * $23)) + Math_fround($19 * $46));
   $47 = Math_fround(Math_abs($39));
   $27 = Math_fround(Math_fround(Math_fround($20 * $32) + Math_fround($21 * $27)) + Math_fround($18 * $24));
   $32 = Math_fround(Math_abs($27));
   $28 = Math_fround(Math_fround(Math_fround($20 * $29) + Math_fround($21 * $33)) + Math_fround($18 * $28));
   $33 = Math_fround(Math_abs($28));
   $29 = Math_fround(Math_fround(Math_fround($20 * $45) + Math_fround($21 * $23)) + Math_fround($18 * $46));
   $23 = Math_fround(Math_abs($29));
   $3 = 124;
   $25 = 128;
   $11 = $5 + 112 | 0;
   $35 = 128;
   $7 = 1;
   while (1) {
    label$31 : {
     label$32 : {
      label$33 : {
       $10 = $7 + -1 | 0;
       $16 = $10 << 3;
       $6 = $16 + $11 | 0;
       $8 = HEAP32[$6 >> 2];
       $6 = HEAP32[$6 + 4 >> 2];
       $9 = HEAPF32[$6 + 16 >> 2];
       $12 = HEAPF32[$6 >> 2];
       $20 = Math_fround(Math_fround(Math_fround($9 - $12) * Math_fround(.5)) + Math_fround(0));
       $13 = HEAPF32[$6 + 20 >> 2];
       $14 = HEAPF32[$6 + 4 >> 2];
       $18 = Math_fround(Math_fround(Math_fround($13 - $14) * Math_fround(.5)) + Math_fround(0));
       $15 = HEAPF32[$6 + 24 >> 2];
       $19 = HEAPF32[$6 + 8 >> 2];
       $24 = Math_fround(Math_fround(Math_fround($15 - $19) * Math_fround(.5)) + Math_fround(0));
       $21 = Math_fround(Math_fround(Math_fround($23 * $20) + Math_fround($33 * $18)) + Math_fround($32 * $24));
       $12 = Math_fround(Math_fround($9 + $12) * Math_fround(.5));
       $13 = Math_fround(Math_fround($13 + $14) * Math_fround(.5));
       $14 = Math_fround(Math_fround($15 + $19) * Math_fround(.5));
       $9 = Math_fround($30 + Math_fround(Math_fround(Math_fround($29 * $12) + Math_fround($28 * $13)) + Math_fround($27 * $14)));
       label$34 : {
        if (HEAPF32[$8 >> 2] <= Math_fround($17 + Math_fround($21 + $9)) ^ 1 | HEAPF32[$8 + 16 >> 2] >= Math_fround(Math_fround($9 - $21) - $17) ^ 1) {
         break label$34;
        }
        $9 = Math_fround(Math_fround(Math_fround($47 * $20) + Math_fround($42 * $18)) + Math_fround($31 * $24));
        $15 = Math_fround($37 + Math_fround(Math_fround(Math_fround($39 * $12) + Math_fround($38 * $13)) + Math_fround($26 * $14)));
        if (HEAPF32[$8 + 4 >> 2] <= Math_fround($17 + Math_fround($9 + $15)) ^ 1 | HEAPF32[$8 + 20 >> 2] >= Math_fround(Math_fround($15 - $9) - $17) ^ 1) {
         break label$34;
        }
        $9 = Math_fround(Math_fround(Math_fround($54 * $20) + Math_fround($53 * $18)) + Math_fround($52 * $24));
        $12 = Math_fround($51 + Math_fround(Math_fround(Math_fround($50 * $12) + Math_fround($49 * $13)) + Math_fround($48 * $14)));
        if (HEAPF32[$8 + 8 >> 2] <= Math_fround($17 + Math_fround($9 + $12)) ^ 1 | HEAPF32[$8 + 24 >> 2] >= Math_fround(Math_fround($12 - $9) - $17) ^ 1) {
         break label$34;
        }
        label$35 : {
         if (($10 | 0) <= ($3 | 0)) {
          $36 = $25;
          $22 = $11;
          $34 = $40;
          break label$35;
         }
         $36 = $25 << 1;
         label$37 : {
          if (!(($25 | 0) >= ($36 | 0) | ($35 | 0) >= ($36 | 0))) {
           label$39 : {
            label$41 : {
             label$42 : {
              if (!$25) {
               $22 = 0;
               break label$42;
              }
              $22 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($25 << 4, 16);
              if (($25 | 0) < 1) {
               break label$42;
              }
              $3 = 0;
              while (1) {
               $35 = $3 << 3;
               $34 = $35 + $11 | 0;
               $41 = HEAP32[$34 >> 2];
               $34 = HEAP32[$34 + 4 >> 2];
               $55 = $41;
               $41 = $22 + $35 | 0;
               HEAP32[$41 >> 2] = $55;
               HEAP32[$41 + 4 >> 2] = $34;
               $3 = $3 + 1 | 0;
               if (($25 | 0) != ($3 | 0)) {
                continue;
               }
               break;
              }
              if (!($40 & 255)) {
               break label$39;
              }
              break label$41;
             }
             $34 = 1;
             if (!$11) {
              break label$39;
             }
             $35 = $36;
             if (!($40 & 255)) {
              break label$37;
             }
            }
            btAlignedFreeInternal_28void__29($11);
           }
           $34 = 1;
           $35 = $36;
           break label$37;
          }
          $22 = $11;
          $34 = $40;
         }
         $3 = $36 + -4 | 0;
        }
        $11 = HEAP32[$6 + 40 >> 2];
        if (HEAP32[$8 + 40 >> 2]) {
         $10 = HEAP32[$8 + 36 >> 2];
         if ($11) {
          $11 = $16 + $22 | 0;
          HEAP32[$11 + 4 >> 2] = HEAP32[$6 + 36 >> 2];
          HEAP32[$11 >> 2] = $10;
          $11 = HEAP32[$8 + 40 >> 2];
          $10 = ($7 << 3) + $22 | 0;
          HEAP32[$10 + 4 >> 2] = HEAP32[$6 + 36 >> 2];
          HEAP32[$10 >> 2] = $11;
          $11 = HEAP32[$8 + 36 >> 2];
          HEAP32[$10 + 12 >> 2] = HEAP32[$6 + 40 >> 2];
          HEAP32[$10 + 8 >> 2] = $11;
          $8 = HEAP32[$8 + 40 >> 2];
          HEAP32[$10 + 20 >> 2] = HEAP32[$6 + 40 >> 2];
          HEAP32[$10 + 16 >> 2] = $8;
          $7 = $7 + 3 | 0;
          break label$32;
         }
         $11 = $16 + $22 | 0;
         HEAP32[$11 + 4 >> 2] = $6;
         HEAP32[$11 >> 2] = $10;
         $8 = HEAP32[$8 + 40 >> 2];
         $10 = ($7 << 3) + $22 | 0;
         HEAP32[$10 + 4 >> 2] = $6;
         break label$33;
        }
        if ($11) {
         $10 = $16 + $22 | 0;
         HEAP32[$10 + 4 >> 2] = HEAP32[$6 + 36 >> 2];
         HEAP32[$10 >> 2] = $8;
         $10 = ($7 << 3) + $22 | 0;
         HEAP32[$10 + 4 >> 2] = HEAP32[$6 + 40 >> 2];
         break label$33;
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$5 + 72 >> 2] + 8 >> 2]]($5 + 72 | 0, $8, $6);
        $25 = $36;
        $11 = $22;
        $40 = $34;
       }
       $7 = $10;
       break label$31;
      }
      HEAP32[$10 >> 2] = $8;
      $7 = $7 + 1 | 0;
     }
     $25 = $36;
     $11 = $22;
     $40 = $34;
    }
    if ($7) {
     continue;
    }
    break;
   }
   if (!$11 | !($40 & 255)) {
    break label$29;
   }
   btAlignedFreeInternal_28void__29($11);
  }
  $11 = HEAP32[$0 + 84 >> 2];
  if (HEAP32[$11 + 8 >> 2] >= 1) {
   $10 = 0;
   while (1) {
    $8 = Math_imul($10, 12);
    $6 = $8 + HEAP32[$11 + 16 >> 2] | 0;
    $16 = HEAP32[$6 + 8 >> 2];
    label$50 : {
     if (!$16) {
      break label$50;
     }
     $6 = HEAP32[$43 + 28 >> 2] + Math_imul(HEAP32[$6 >> 2], 80) | 0;
     $3 = HEAP32[$6 + 64 >> 2];
     $7 = HEAP32[$1 + 12 >> 2];
     $38 = HEAPF32[$7 + 52 >> 2];
     $42 = HEAPF32[$7 + 56 >> 2];
     $18 = HEAPF32[$6 + 48 >> 2];
     $24 = HEAPF32[$6 + 52 >> 2];
     $30 = HEAPF32[$6 + 56 >> 2];
     $27 = HEAPF32[$6 + 4 >> 2];
     $32 = HEAPF32[$6 + 20 >> 2];
     $28 = HEAPF32[$6 + 36 >> 2];
     $33 = HEAPF32[$6 + 8 >> 2];
     $29 = HEAPF32[$6 + 24 >> 2];
     $23 = HEAPF32[$6 + 40 >> 2];
     $9 = HEAPF32[$7 + 20 >> 2];
     $12 = HEAPF32[$7 + 24 >> 2];
     $37 = HEAPF32[$6 >> 2];
     $13 = HEAPF32[$7 + 36 >> 2];
     $26 = HEAPF32[$6 + 16 >> 2];
     $14 = HEAPF32[$7 + 40 >> 2];
     $31 = HEAPF32[$6 + 32 >> 2];
     $39 = HEAPF32[$7 + 48 >> 2];
     $15 = HEAPF32[$7 + 8 >> 2];
     $19 = HEAPF32[$7 >> 2];
     $17 = HEAPF32[$7 + 4 >> 2];
     $21 = HEAPF32[$7 + 16 >> 2];
     $20 = HEAPF32[$7 + 32 >> 2];
     HEAP32[$5 + 172 >> 2] = 0;
     HEAP32[$5 + 156 >> 2] = 0;
     HEAP32[$5 + 140 >> 2] = 0;
     HEAP32[$5 + 124 >> 2] = 0;
     HEAPF32[$5 + 144 >> 2] = Math_fround(Math_fround($20 * $37) + Math_fround($13 * $26)) + Math_fround($14 * $31);
     HEAPF32[$5 + 128 >> 2] = Math_fround(Math_fround($21 * $37) + Math_fround($9 * $26)) + Math_fround($12 * $31);
     HEAPF32[$5 + 112 >> 2] = Math_fround(Math_fround($19 * $37) + Math_fround($17 * $26)) + Math_fround($15 * $31);
     HEAPF32[$5 + 152 >> 2] = Math_fround(Math_fround($20 * $33) + Math_fround($13 * $29)) + Math_fround($14 * $23);
     HEAPF32[$5 + 148 >> 2] = Math_fround(Math_fround($20 * $27) + Math_fround($13 * $32)) + Math_fround($14 * $28);
     HEAPF32[$5 + 136 >> 2] = Math_fround(Math_fround($21 * $33) + Math_fround($9 * $29)) + Math_fround($12 * $23);
     HEAPF32[$5 + 132 >> 2] = Math_fround(Math_fround($21 * $27) + Math_fround($9 * $32)) + Math_fround($12 * $28);
     HEAPF32[$5 + 120 >> 2] = Math_fround(Math_fround($19 * $33) + Math_fround($17 * $29)) + Math_fround($15 * $23);
     HEAPF32[$5 + 116 >> 2] = Math_fround(Math_fround($19 * $27) + Math_fround($17 * $32)) + Math_fround($15 * $28);
     HEAPF32[$5 + 168 >> 2] = $42 + Math_fround(Math_fround(Math_fround($20 * $18) + Math_fround($13 * $24)) + Math_fround($14 * $30));
     HEAPF32[$5 + 164 >> 2] = $38 + Math_fround(Math_fround(Math_fround($21 * $18) + Math_fround($9 * $24)) + Math_fround($12 * $30));
     HEAPF32[$5 + 160 >> 2] = $39 + Math_fround(Math_fround(Math_fround($19 * $18) + Math_fround($17 * $24)) + Math_fround($15 * $30));
     FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $5 + 112 | 0, $5 + 56 | 0, $5 + 40 | 0);
     $9 = HEAPF32[$4 + 32 >> 2];
     HEAPF32[$5 + 56 >> 2] = HEAPF32[$5 + 56 >> 2] - $9;
     HEAPF32[$5 + 60 >> 2] = HEAPF32[$5 + 60 >> 2] - $9;
     HEAPF32[$5 + 64 >> 2] = HEAPF32[$5 + 64 >> 2] - $9;
     HEAPF32[$5 + 40 >> 2] = $9 + HEAPF32[$5 + 40 >> 2];
     HEAPF32[$5 + 44 >> 2] = $9 + HEAPF32[$5 + 44 >> 2];
     HEAPF32[$5 + 48 >> 2] = $9 + HEAPF32[$5 + 48 >> 2];
     $6 = HEAP32[$44 + 28 >> 2] + Math_imul(HEAP32[(HEAP32[$11 + 16 >> 2] + $8 | 0) + 4 >> 2], 80) | 0;
     $3 = HEAP32[$6 + 64 >> 2];
     $7 = HEAP32[$2 + 12 >> 2];
     $42 = HEAPF32[$7 + 52 >> 2];
     $39 = HEAPF32[$7 + 56 >> 2];
     $24 = HEAPF32[$6 + 48 >> 2];
     $30 = HEAPF32[$6 + 52 >> 2];
     $27 = HEAPF32[$6 + 56 >> 2];
     $32 = HEAPF32[$6 + 4 >> 2];
     $28 = HEAPF32[$6 + 20 >> 2];
     $33 = HEAPF32[$6 + 36 >> 2];
     $29 = HEAPF32[$6 + 8 >> 2];
     $23 = HEAPF32[$6 + 24 >> 2];
     $37 = HEAPF32[$6 + 40 >> 2];
     $12 = HEAPF32[$7 + 20 >> 2];
     $13 = HEAPF32[$7 + 24 >> 2];
     $26 = HEAPF32[$6 >> 2];
     $14 = HEAPF32[$7 + 36 >> 2];
     $31 = HEAPF32[$6 + 16 >> 2];
     $15 = HEAPF32[$7 + 40 >> 2];
     $38 = HEAPF32[$6 + 32 >> 2];
     $47 = HEAPF32[$7 + 48 >> 2];
     $19 = HEAPF32[$7 + 8 >> 2];
     $17 = HEAPF32[$7 >> 2];
     $21 = HEAPF32[$7 + 4 >> 2];
     $20 = HEAPF32[$7 + 16 >> 2];
     $18 = HEAPF32[$7 + 32 >> 2];
     HEAP32[$5 + 172 >> 2] = 0;
     HEAP32[$5 + 156 >> 2] = 0;
     HEAP32[$5 + 140 >> 2] = 0;
     HEAP32[$5 + 124 >> 2] = 0;
     HEAPF32[$5 + 144 >> 2] = Math_fround(Math_fround($18 * $26) + Math_fround($14 * $31)) + Math_fround($15 * $38);
     HEAPF32[$5 + 128 >> 2] = Math_fround(Math_fround($20 * $26) + Math_fround($12 * $31)) + Math_fround($13 * $38);
     HEAPF32[$5 + 112 >> 2] = Math_fround(Math_fround($17 * $26) + Math_fround($21 * $31)) + Math_fround($19 * $38);
     HEAPF32[$5 + 152 >> 2] = Math_fround(Math_fround($18 * $29) + Math_fround($14 * $23)) + Math_fround($15 * $37);
     HEAPF32[$5 + 148 >> 2] = Math_fround(Math_fround($18 * $32) + Math_fround($14 * $28)) + Math_fround($15 * $33);
     HEAPF32[$5 + 136 >> 2] = Math_fround(Math_fround($20 * $29) + Math_fround($12 * $23)) + Math_fround($13 * $37);
     HEAPF32[$5 + 132 >> 2] = Math_fround(Math_fround($20 * $32) + Math_fround($12 * $28)) + Math_fround($13 * $33);
     HEAPF32[$5 + 120 >> 2] = Math_fround(Math_fround($17 * $29) + Math_fround($21 * $23)) + Math_fround($19 * $37);
     HEAPF32[$5 + 116 >> 2] = Math_fround(Math_fround($17 * $32) + Math_fround($21 * $28)) + Math_fround($19 * $33);
     HEAPF32[$5 + 168 >> 2] = $39 + Math_fround(Math_fround(Math_fround($18 * $24) + Math_fround($14 * $30)) + Math_fround($15 * $27));
     HEAPF32[$5 + 164 >> 2] = $42 + Math_fround(Math_fround(Math_fround($20 * $24) + Math_fround($12 * $30)) + Math_fround($13 * $27));
     HEAPF32[$5 + 160 >> 2] = $47 + Math_fround(Math_fround(Math_fround($17 * $24) + Math_fround($21 * $30)) + Math_fround($19 * $27));
     FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $5 + 112 | 0, $5 + 24 | 0, $5 + 8 | 0);
     $12 = Math_fround(HEAPF32[$5 + 24 >> 2] - $9);
     HEAPF32[$5 + 24 >> 2] = $12;
     $19 = Math_fround(HEAPF32[$5 + 28 >> 2] - $9);
     HEAPF32[$5 + 28 >> 2] = $19;
     $14 = Math_fround(HEAPF32[$5 + 32 >> 2] - $9);
     HEAPF32[$5 + 32 >> 2] = $14;
     $15 = Math_fround($9 + HEAPF32[$5 + 12 >> 2]);
     HEAPF32[$5 + 12 >> 2] = $15;
     $13 = Math_fround($9 + HEAPF32[$5 + 16 >> 2]);
     HEAPF32[$5 + 16 >> 2] = $13;
     $9 = Math_fround($9 + HEAPF32[$5 + 8 >> 2]);
     HEAPF32[$5 + 8 >> 2] = $9;
     label$51 : {
      if (HEAPF32[$5 + 40 >> 2] < $12 | HEAPF32[$5 + 56 >> 2] > $9 | (HEAPF32[$5 + 48 >> 2] < $14 | HEAPF32[$5 + 64 >> 2] > $13)) {
       break label$51;
      }
      if (HEAPF32[$5 + 60 >> 2] > $15) {
       break label$51;
      }
      if (!(HEAPF32[$5 + 44 >> 2] < $19)) {
       break label$50;
      }
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$16 >> 2] >> 2]]($16) | 0;
     $6 = HEAP32[$0 + 4 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 60 >> 2]]($6, $16);
     $6 = HEAP32[$11 + 16 >> 2] + $8 | 0;
     $25 = HEAP32[$6 + 4 >> 2];
     $22 = HEAP32[$6 >> 2];
     $16 = HEAP32[$0 + 92 >> 2];
     label$52 : {
      if (($16 | 0) != HEAP32[$0 + 96 >> 2]) {
       break label$52;
      }
      $35 = $16 ? $16 << 1 : 1;
      if (($16 | 0) >= ($35 | 0)) {
       break label$52;
      }
      $6 = 0;
      $3 = 0;
      if ($35) {
       $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($35, 12), 16);
       $16 = HEAP32[$0 + 92 >> 2];
      }
      if (($16 | 0) >= 1) {
       while (1) {
        $7 = Math_imul($6, 12);
        $8 = $7 + $3 | 0;
        $7 = HEAP32[$0 + 100 >> 2] + $7 | 0;
        $41 = HEAP32[$7 + 4 >> 2];
        $34 = HEAP32[$7 >> 2];
        HEAP32[$8 >> 2] = $34;
        HEAP32[$8 + 4 >> 2] = $41;
        HEAP32[$8 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
        $6 = $6 + 1 | 0;
        if (($16 | 0) != ($6 | 0)) {
         continue;
        }
        break;
       }
      }
      $6 = HEAP32[$0 + 100 >> 2];
      if ($6) {
       if (HEAPU8[$0 + 104 | 0]) {
        btAlignedFreeInternal_28void__29($6);
       }
       HEAP32[$0 + 100 >> 2] = 0;
      }
      HEAP32[$0 + 100 >> 2] = $3;
      HEAP8[$0 + 104 | 0] = 1;
      HEAP32[$0 + 96 >> 2] = $35;
      $16 = HEAP32[$0 + 92 >> 2];
     }
     $6 = HEAP32[$0 + 100 >> 2] + Math_imul($16, 12) | 0;
     HEAP32[$6 + 8 >> 2] = 0;
     HEAP32[$6 + 4 >> 2] = $25;
     HEAP32[$6 >> 2] = $22;
     HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 92 >> 2] + 1;
    }
    $10 = $10 + 1 | 0;
    if (($10 | 0) < HEAP32[$11 + 8 >> 2]) {
     continue;
    }
    break;
   }
  }
  if (HEAP32[$0 + 92 >> 2] >= 1) {
   $6 = 0;
   while (1) {
    $7 = HEAP32[$0 + 84 >> 2];
    $8 = HEAP32[$0 + 100 >> 2] + Math_imul($6, 12) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 8 >> 2]]($7, HEAP32[$8 >> 2], HEAP32[$8 + 4 >> 2]) | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) < HEAP32[$0 + 92 >> 2]) {
     continue;
    }
    break;
   }
  }
  $6 = HEAP32[$0 + 100 >> 2];
  if ($6) {
   if (HEAPU8[$0 + 104 | 0]) {
    btAlignedFreeInternal_28void__29($6);
   }
   HEAP32[$0 + 100 >> 2] = 0;
  }
  HEAP32[$0 + 100 >> 2] = 0;
  HEAP32[$0 + 92 >> 2] = 0;
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP8[$0 + 104 | 0] = 1;
 }
 $0 = $5 + 3584 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexHullInternal__merge_28btConvexHullInternal__IntermediateHull__2c_20btConvexHullInternal__IntermediateHull__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 $5 = global$0 - 128 | 0;
 $4 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 label$2 : {
  if (!HEAP32[$2 + 4 >> 2]) {
   break label$2;
  }
  if (!HEAP32[$1 + 4 >> 2]) {
   $4 = HEAP32[$2 + 4 >> 2];
   $3 = HEAP32[$2 >> 2];
   HEAP32[$1 >> 2] = $3;
   HEAP32[$1 + 4 >> 2] = $4;
   $3 = HEAP32[$2 + 12 >> 2];
   $4 = HEAP32[$2 + 8 >> 2];
   HEAP32[$1 + 8 >> 2] = $4;
   HEAP32[$1 + 12 >> 2] = $3;
   break label$2;
  }
  HEAP32[$0 + 100 >> 2] = HEAP32[$0 + 100 >> 2] + -1;
  HEAP32[$5 + 124 >> 2] = 0;
  HEAP32[$5 + 120 >> 2] = 0;
  label$4 : {
   if (btConvexHullInternal__mergeProjection_28btConvexHullInternal__IntermediateHull__2c_20btConvexHullInternal__IntermediateHull__2c_20btConvexHullInternal__Vertex___2c_20btConvexHullInternal__Vertex___29($0, $1, $2, $5 + 124 | 0, $5 + 120 | 0)) {
    $24 = HEAP32[$5 + 124 >> 2];
    $10 = HEAP32[$24 + 92 >> 2];
    $16 = HEAP32[$5 + 120 >> 2];
    $11 = HEAP32[$16 + 92 >> 2];
    $15 = HEAP32[$24 + 96 >> 2];
    $21 = HEAP32[$16 + 96 >> 2];
    $13 = HEAP32[$24 + 88 >> 2];
    $19 = HEAP32[$16 + 88 >> 2];
    HEAP32[$5 + 92 >> 2] = -1;
    $1 = $21 - $15 | 0;
    HEAP32[$5 + 88 >> 2] = $1;
    $17 = $11 - $10 | 0;
    HEAP32[$5 + 84 >> 2] = $17;
    $2 = $19 - $13 | 0;
    HEAP32[$5 + 80 >> 2] = $2;
    $12 = HEAP32[$24 + 8 >> 2];
    HEAP32[$5 + 32 >> 2] = 0;
    $3 = $1 >> 31;
    $26 = $3;
    $4 = $17;
    $3 = $4 >> 31;
    $27 = $4;
    $30 = $3;
    $3 = $26;
    $4 = $30;
    $4 = __wasm_i64_mul($1, $3, $27, $4);
    $31 = $4;
    $3 = i64toi32_i32$HIGH_BITS;
    $35 = $3;
    $4 = 0 - $2 | 0;
    $3 = $4 >> 31;
    $29 = $4;
    $32 = $3;
    $3 = $2 >> 31;
    $4 = $3;
    $3 = $32;
    $4 = __wasm_i64_mul($29, $3, $2, $4);
    $8 = $4;
    $3 = i64toi32_i32$HIGH_BITS;
    $2 = $3;
    $3 = $30;
    $4 = __wasm_i64_mul($27, $3, $27, $3);
    $3 = i64toi32_i32$HIGH_BITS;
    $9 = $3;
    $6 = $4;
    $7 = $8 - $4 | 0;
    $37 = $7;
    $3 = $2;
    $4 = $9;
    $9 = $4 + ($8 >>> 0 < $6 >>> 0) | 0;
    $9 = $3 - $9 | 0;
    $36 = $9;
    $9 = $26;
    $8 = $32;
    $8 = __wasm_i64_mul($1, $9, $29, $8);
    $9 = i64toi32_i32$HIGH_BITS;
    $6 = $8;
    $4 = 0 - $6 | 0;
    $38 = $4;
    $8 = $9;
    $7 = $8 + (0 < $6 >>> 0) | 0;
    $7 = 0 - $7 | 0;
    $33 = $7;
    if ($12) {
     $2 = $12;
     while (1) {
      $1 = HEAP32[$2 + 12 >> 2];
      $3 = HEAP32[$1 + 92 >> 2] - $10 | 0;
      $7 = $3 >> 31;
      $28 = $3;
      $26 = $7;
      $3 = $32;
      $3 = __wasm_i64_mul($28, $7, $29, $3);
      $9 = $3;
      $7 = i64toi32_i32$HIGH_BITS;
      $40 = $7;
      $3 = HEAP32[$1 + 88 >> 2] - $13 | 0;
      $7 = $3 >> 31;
      $17 = $3;
      $25 = $7;
      $7 = $30;
      $3 = $25;
      $3 = __wasm_i64_mul($27, $7, $17, $3);
      $6 = $3;
      $8 = 0 - $3 | 0;
      $7 = i64toi32_i32$HIGH_BITS;
      $3 = $7;
      $4 = $3 + (0 < $6 >>> 0) | 0;
      $4 = 0 - $4 | 0;
      $3 = $4;
      $6 = $8;
      $7 = $9;
      $4 = $40;
      $9 = $3;
      label$8 : {
       if (($6 | 0) != ($7 | 0) | ($4 | 0) != ($9 | 0)) {
        break label$8;
       }
       $7 = $26;
       $4 = $35;
       $4 = __wasm_i64_mul($28, $7, $31, $4);
       $6 = $4;
       $7 = i64toi32_i32$HIGH_BITS;
       $3 = $7;
       $7 = $25;
       $4 = $33;
       $4 = __wasm_i64_mul($17, $7, $38, $4);
       $9 = $4;
       $7 = i64toi32_i32$HIGH_BITS;
       $4 = $7;
       $7 = $3;
       $8 = $4 + $7 | 0;
       $3 = $6 + $9 | 0;
       if ($3 >>> 0 < $9 >>> 0) {
        $8 = $8 + 1 | 0;
       }
       $7 = $3;
       $4 = $8;
       $6 = HEAP32[$1 + 96 >> 2] - $15 | 0;
       $8 = $6 >> 31;
       $1 = $8;
       $8 = $36;
       $3 = $6;
       $6 = $1;
       $6 = __wasm_i64_mul($37, $8, $3, $6);
       $9 = $6;
       $8 = i64toi32_i32$HIGH_BITS;
       $6 = $8;
       $8 = $4;
       $3 = $8 + $6 | 0;
       $4 = $7 + $9 | 0;
       if ($4 >>> 0 < $9 >>> 0) {
        $3 = $3 + 1 | 0;
       }
       if (($3 | 0) < 0 ? 1 : ($3 | 0) <= 0 ? $4 >>> 0 >= 1 ? 0 : 1 : 0) {
        break label$8;
       }
       if ($14) {
        HEAP32[$5 + 64 >> 2] = -1;
        HEAP32[$5 + 68 >> 2] = -1;
        HEAP32[$5 + 56 >> 2] = 0;
        HEAP32[$5 + 60 >> 2] = 0;
        if ((btConvexHullInternal__getOrientation_28btConvexHullInternal__Edge_20const__2c_20btConvexHullInternal__Edge_20const__2c_20btConvexHullInternal__Point32_20const__2c_20btConvexHullInternal__Point32_20const__29($14, $2, $5 + 80 | 0, $5 + 56 | 0) | 0) != 1) {
         break label$8;
        }
       }
       $14 = $2;
      }
      $2 = HEAP32[$2 >> 2];
      if (($12 | 0) != ($2 | 0)) {
       continue;
      }
      break;
     }
     HEAP32[$5 + 32 >> 2] = $14;
    }
    $12 = HEAP32[$16 + 8 >> 2];
    $10 = 0;
    HEAP32[$5 + 8 >> 2] = 0;
    if ($12) {
     $2 = $12;
     while (1) {
      $1 = HEAP32[$2 + 12 >> 2];
      $3 = HEAP32[$1 + 92 >> 2] - $11 | 0;
      $8 = $3 >> 31;
      $28 = $3;
      $26 = $8;
      $3 = $32;
      $3 = __wasm_i64_mul($28, $8, $29, $3);
      $9 = $3;
      $8 = i64toi32_i32$HIGH_BITS;
      $13 = $8;
      $3 = HEAP32[$1 + 88 >> 2] - $19 | 0;
      $8 = $3 >> 31;
      $17 = $3;
      $25 = $8;
      $8 = $30;
      $3 = $25;
      $3 = __wasm_i64_mul($27, $8, $17, $3);
      $7 = $3;
      $6 = 0 - $3 | 0;
      $8 = i64toi32_i32$HIGH_BITS;
      $3 = $8;
      $4 = $3 + (0 < $7 >>> 0) | 0;
      $4 = 0 - $4 | 0;
      $3 = $4;
      $8 = $9;
      $4 = $13;
      $9 = $3;
      label$12 : {
       if (($8 | 0) != ($6 | 0) | ($4 | 0) != ($9 | 0)) {
        break label$12;
       }
       $8 = $26;
       $4 = $35;
       $4 = __wasm_i64_mul($28, $8, $31, $4);
       $7 = $4;
       $8 = i64toi32_i32$HIGH_BITS;
       $3 = $8;
       $8 = $25;
       $4 = $33;
       $4 = __wasm_i64_mul($17, $8, $38, $4);
       $9 = $4;
       $8 = i64toi32_i32$HIGH_BITS;
       $4 = $8;
       $8 = $3;
       $6 = $4 + $8 | 0;
       $3 = $7 + $9 | 0;
       if ($3 >>> 0 < $9 >>> 0) {
        $6 = $6 + 1 | 0;
       }
       $8 = $3;
       $4 = $6;
       $7 = HEAP32[$1 + 96 >> 2] - $21 | 0;
       $6 = $7 >> 31;
       $1 = $6;
       $6 = $36;
       $3 = $7;
       $7 = $1;
       $7 = __wasm_i64_mul($37, $6, $3, $7);
       $9 = $7;
       $6 = i64toi32_i32$HIGH_BITS;
       $7 = $6;
       $6 = $4;
       $3 = $6 + $7 | 0;
       $4 = $8 + $9 | 0;
       if ($4 >>> 0 < $9 >>> 0) {
        $3 = $3 + 1 | 0;
       }
       if (($3 | 0) < 0 ? 1 : ($3 | 0) <= 0 ? $4 >>> 0 >= 1 ? 0 : 1 : 0) {
        break label$12;
       }
       if ($10) {
        HEAP32[$5 + 64 >> 2] = -1;
        HEAP32[$5 + 68 >> 2] = -1;
        HEAP32[$5 + 56 >> 2] = 0;
        HEAP32[$5 + 60 >> 2] = 0;
        if ((btConvexHullInternal__getOrientation_28btConvexHullInternal__Edge_20const__2c_20btConvexHullInternal__Edge_20const__2c_20btConvexHullInternal__Point32_20const__2c_20btConvexHullInternal__Point32_20const__29($10, $2, $5 + 80 | 0, $5 + 56 | 0) | 0) != 2) {
         break label$12;
        }
       }
       $10 = $2;
      }
      $2 = HEAP32[$2 >> 2];
      if (($12 | 0) != ($2 | 0)) {
       continue;
      }
      break;
     }
     HEAP32[$5 + 8 >> 2] = $10;
    }
    label$14 : {
     if (!($10 | $14)) {
      break label$14;
     }
     btConvexHullInternal__findEdgeForCoplanarFaces_28btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Edge___2c_20btConvexHullInternal__Edge___2c_20btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__29($0, $24, $16, $5 + 32 | 0, $5 + 8 | 0, 0, 0);
     $2 = HEAP32[$5 + 32 >> 2];
     if ($2) {
      $24 = HEAP32[$2 + 12 >> 2];
      HEAP32[$5 + 124 >> 2] = $24;
     }
     $2 = HEAP32[$5 + 8 >> 2];
     if (!$2) {
      break label$14;
     }
     $16 = HEAP32[$2 + 12 >> 2];
     HEAP32[$5 + 120 >> 2] = $16;
    }
    $39 = HEAP32[$16 + 88 >> 2];
    $31 = HEAP32[$16 + 96 >> 2] + 1 | 0;
    $33 = HEAP32[$16 + 92 >> 2];
    break label$4;
   }
   $16 = HEAP32[$5 + 120 >> 2];
   $39 = HEAP32[$16 + 88 >> 2] + 1 | 0;
   $24 = HEAP32[$5 + 124 >> 2];
   $31 = HEAP32[$16 + 96 >> 2];
   $33 = HEAP32[$16 + 92 >> 2];
  }
  $14 = $24;
  $15 = $16;
  $17 = 0;
  $43 = 1;
  while (1) {
   $37 = $15;
   $1 = HEAP32[$15 + 96 >> 2];
   $40 = $14;
   $10 = HEAP32[$14 + 96 >> 2];
   $38 = $14;
   $11 = HEAP32[$14 + 92 >> 2];
   $44 = $15;
   $2 = HEAP32[$15 + 92 >> 2];
   $13 = HEAP32[$14 + 88 >> 2];
   $12 = HEAP32[$15 + 88 >> 2];
   HEAP32[$5 + 116 >> 2] = -1;
   $2 = $2 - $11 | 0;
   HEAP32[$5 + 108 >> 2] = $2;
   $1 = $1 - $10 | 0;
   HEAP32[$5 + 112 >> 2] = $1;
   $12 = $12 - $13 | 0;
   HEAP32[$5 + 104 >> 2] = $12;
   $11 = $33 - $11 | 0;
   $10 = $31 - $10 | 0;
   $3 = Math_imul($11, $1) - Math_imul($10, $2) | 0;
   $6 = $3 >> 31;
   $27 = $3;
   $30 = $6;
   HEAP32[$5 + 80 >> 2] = $27;
   HEAP32[$5 + 84 >> 2] = $6;
   $4 = Math_imul($10, $12);
   $10 = $39 - $13 | 0;
   $3 = $4 - Math_imul($10, $1) | 0;
   $6 = $3 >> 31;
   $29 = $3;
   $32 = $6;
   HEAP32[$5 + 88 >> 2] = $29;
   HEAP32[$5 + 92 >> 2] = $6;
   $3 = Math_imul($2, $10) - Math_imul($11, $12) | 0;
   $6 = $3 >> 31;
   $28 = $3;
   $26 = $6;
   HEAP32[$5 + 96 >> 2] = $28;
   HEAP32[$5 + 100 >> 2] = $6;
   $3 = $12;
   $6 = $3 >> 31;
   $25 = $6;
   $6 = $32;
   $3 = $25;
   $3 = __wasm_i64_mul($29, $6, $12, $3);
   $9 = $3;
   $6 = i64toi32_i32$HIGH_BITS;
   $4 = $6;
   $6 = $2 >> 31;
   $35 = $6;
   $6 = $30;
   $3 = $35;
   $3 = __wasm_i64_mul($27, $6, $2, $3);
   $6 = i64toi32_i32$HIGH_BITS;
   $10 = $6;
   $8 = $3;
   $7 = $9 - $3 | 0;
   HEAP32[$5 + 72 >> 2] = $7;
   $6 = $4;
   $3 = $10;
   $4 = $3 + ($9 >>> 0 < $8 >>> 0) | 0;
   $4 = $6 - $4 | 0;
   HEAP32[$5 + 76 >> 2] = $4;
   $4 = $1 >> 31;
   $36 = $4;
   $4 = $30;
   $9 = $36;
   $9 = __wasm_i64_mul($27, $4, $1, $9);
   $6 = $9;
   $4 = i64toi32_i32$HIGH_BITS;
   $7 = $4;
   $4 = $26;
   $9 = $25;
   $9 = __wasm_i64_mul($28, $4, $12, $9);
   $4 = i64toi32_i32$HIGH_BITS;
   $25 = $4;
   $8 = $9;
   $3 = $6 - $8 | 0;
   HEAP32[$5 + 64 >> 2] = $3;
   $4 = $7;
   $9 = $25;
   $7 = $9 + ($6 >>> 0 < $8 >>> 0) | 0;
   $7 = $4 - $7 | 0;
   HEAP32[$5 + 68 >> 2] = $7;
   $7 = $26;
   $6 = $35;
   $6 = __wasm_i64_mul($28, $7, $2, $6);
   $4 = $6;
   $7 = i64toi32_i32$HIGH_BITS;
   $2 = $7;
   $7 = $32;
   $6 = $36;
   $6 = __wasm_i64_mul($29, $7, $1, $6);
   $7 = i64toi32_i32$HIGH_BITS;
   $1 = $7;
   $8 = $6;
   $9 = $4 - $6 | 0;
   $7 = $2;
   $6 = $1;
   $3 = $6 + ($4 >>> 0 < $8 >>> 0) | 0;
   $3 = $7 - $3 | 0;
   HEAP32[$5 + 56 >> 2] = $9;
   HEAP32[$5 + 60 >> 2] = $3;
   HEAP32[$5 + 48 >> 2] = 0;
   HEAP32[$5 + 40 >> 2] = 0;
   HEAP32[$5 + 44 >> 2] = 0;
   HEAP32[$5 + 32 >> 2] = 0;
   HEAP32[$5 + 36 >> 2] = 0;
   $21 = btConvexHullInternal__findMaxAngle_28bool_2c_20btConvexHullInternal__Vertex_20const__2c_20btConvexHullInternal__Point32_20const__2c_20btConvexHullInternal__Point64_20const__2c_20btConvexHullInternal__Point64_20const__2c_20btConvexHullInternal__Rational64__29($0, 0, $14, $5 + 104 | 0, $5 + 80 | 0, $5 + 56 | 0, $5 + 32 | 0);
   HEAP32[$5 + 24 >> 2] = 0;
   HEAP32[$5 + 16 >> 2] = 0;
   HEAP32[$5 + 20 >> 2] = 0;
   HEAP32[$5 + 8 >> 2] = 0;
   HEAP32[$5 + 12 >> 2] = 0;
   $13 = btConvexHullInternal__findMaxAngle_28bool_2c_20btConvexHullInternal__Vertex_20const__2c_20btConvexHullInternal__Point32_20const__2c_20btConvexHullInternal__Point64_20const__2c_20btConvexHullInternal__Point64_20const__2c_20btConvexHullInternal__Rational64__29($0, 1, $15, $5 + 104 | 0, $5 + 80 | 0, $5 + 56 | 0, $5 + 8 | 0);
   label$17 : {
    if (!($21 | $13)) {
     $2 = btConvexHullInternal__newEdgePair_28btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__29($0, $14, $15);
     HEAP32[$2 + 4 >> 2] = $2;
     HEAP32[$2 >> 2] = $2;
     HEAP32[$14 + 8 >> 2] = $2;
     $2 = HEAP32[$2 + 8 >> 2];
     HEAP32[$2 + 4 >> 2] = $2;
     HEAP32[$2 >> 2] = $2;
     HEAP32[$15 + 8 >> 2] = $2;
     $2 = 0;
     break label$17;
    }
    $19 = $21 ? -1 : 1;
    if (!(!$21 | !$13)) {
     $19 = btConvexHullInternal__Rational64__compare_28btConvexHullInternal__Rational64_20const__29_20const($5 + 32 | 0, $5 + 8 | 0);
    }
    label$20 : {
     label$21 : {
      if ($43) {
       break label$21;
      }
      label$22 : {
       if (($19 | 0) >= 0) {
        if (HEAP32[$5 + 24 >> 2] > -1) {
         break label$21;
        }
        $3 = HEAP32[$5 + 16 >> 2];
        $4 = HEAP32[$5 + 20 >> 2];
        if (!($3 | $4)) {
         break label$22;
        }
        break label$21;
       }
       if (HEAP32[$5 + 48 >> 2] > -1) {
        break label$21;
       }
       $4 = HEAP32[$5 + 40 >> 2];
       $3 = HEAP32[$5 + 44 >> 2];
       if ($4 | $3) {
        break label$21;
       }
      }
      $4 = $18;
      $3 = $41;
      $7 = $20;
      $6 = $42;
      break label$20;
     }
     $7 = btConvexHullInternal__newEdgePair_28btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__29($0, $14, $15);
     $6 = $7;
     if ($20) {
      HEAP32[$20 + 4 >> 2] = $7;
      $6 = $42;
     }
     HEAP32[$7 >> 2] = $20;
     $4 = HEAP32[$7 + 8 >> 2];
     $3 = $4;
     if ($18) {
      HEAP32[$18 >> 2] = $4;
      $3 = $41;
     }
     HEAP32[$4 + 4 >> 2] = $18;
    }
    HEAP32[$5 + 4 >> 2] = $21;
    HEAP32[$5 >> 2] = $13;
    $18 = $13;
    if (!$19) {
     btConvexHullInternal__findEdgeForCoplanarFaces_28btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Edge___2c_20btConvexHullInternal__Edge___2c_20btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__29($0, $14, $15, $5 + 4 | 0, $5, 0, 0);
     $18 = HEAP32[$5 >> 2];
    }
    $1 = $4;
    label$27 : {
     if (($19 | 0) < 0) {
      break label$27;
     }
     $1 = $4;
     if (!$18) {
      break label$27;
     }
     label$28 : {
      if (!$22) {
       break label$28;
      }
      $2 = HEAP32[$22 >> 2];
      if (($13 | 0) == ($2 | 0)) {
       break label$28;
      }
      while (1) {
       $1 = HEAP32[$2 + 8 >> 2];
       $11 = 0;
       $10 = 0;
       $12 = HEAP32[$2 >> 2];
       if (($12 | 0) != ($2 | 0)) {
        HEAP32[$12 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
        HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = $12;
        $10 = $12;
       }
       HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] = $10;
       $10 = HEAP32[$1 >> 2];
       if (($10 | 0) != ($1 | 0)) {
        HEAP32[$10 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
        HEAP32[HEAP32[$1 + 4 >> 2] >> 2] = $10;
        $11 = $10;
       }
       HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = $11;
       HEAP32[$2 + 12 >> 2] = 0;
       HEAP32[$2 + 16 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       HEAP32[$2 + 8 >> 2] = 0;
       HEAP32[$2 >> 2] = HEAP32[$0 + 56 >> 2];
       HEAP32[$0 + 56 >> 2] = $2;
       HEAP32[$1 + 12 >> 2] = 0;
       HEAP32[$1 + 16 >> 2] = 0;
       HEAP32[$1 + 4 >> 2] = 0;
       HEAP32[$1 + 8 >> 2] = 0;
       HEAP32[$1 >> 2] = HEAP32[$0 + 56 >> 2];
       HEAP32[$0 + 56 >> 2] = $1;
       HEAP32[$0 + 116 >> 2] = HEAP32[$0 + 116 >> 2] + -1;
       $2 = $12;
       if (($13 | 0) != ($2 | 0)) {
        continue;
       }
       break;
      }
     }
     label$32 : {
      if ($4) {
       if (!$22) {
        $17 = $3;
        $22 = HEAP32[$13 + 4 >> 2];
       }
       HEAP32[$22 >> 2] = $3;
       HEAP32[$3 + 4 >> 2] = $22;
       HEAP32[$4 >> 2] = $13;
       HEAP32[$13 + 4 >> 2] = $4;
       $3 = 0;
       break label$32;
      }
      $17 = $22 ? $17 : $13;
     }
     $31 = HEAP32[$37 + 96 >> 2];
     $33 = HEAP32[$44 + 92 >> 2];
     $39 = HEAP32[$15 + 88 >> 2];
     $15 = HEAP32[$18 + 12 >> 2];
     HEAP32[$5 + 120 >> 2] = $15;
     $22 = HEAP32[$18 + 8 >> 2];
     $1 = 0;
    }
    $18 = $1;
    $1 = $7;
    label$35 : {
     if (($19 | 0) > 0) {
      break label$35;
     }
     $20 = HEAP32[$5 + 4 >> 2];
     $1 = $7;
     if (!$20) {
      break label$35;
     }
     label$36 : {
      if (!$23) {
       break label$36;
      }
      $1 = HEAP32[$23 + 4 >> 2];
      if (($21 | 0) == ($1 | 0)) {
       break label$36;
      }
      while (1) {
       $4 = $1;
       $2 = HEAP32[$1 + 8 >> 2];
       $10 = HEAP32[$1 + 4 >> 2];
       $13 = 0;
       $19 = 0;
       $11 = HEAP32[$1 >> 2];
       if (($11 | 0) != ($1 | 0)) {
        HEAP32[$11 + 4 >> 2] = $10;
        HEAP32[HEAP32[$4 + 4 >> 2] >> 2] = $11;
        $19 = $11;
       }
       HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = $19;
       $11 = HEAP32[$2 >> 2];
       if (($11 | 0) != ($2 | 0)) {
        HEAP32[$11 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
        HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = $11;
        $13 = $11;
       }
       HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] = $13;
       HEAP32[$4 + 12 >> 2] = 0;
       HEAP32[$4 + 16 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       HEAP32[$4 + 8 >> 2] = 0;
       HEAP32[$1 >> 2] = HEAP32[$0 + 56 >> 2];
       HEAP32[$0 + 56 >> 2] = $1;
       HEAP32[$2 + 12 >> 2] = 0;
       HEAP32[$2 + 16 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       HEAP32[$2 + 8 >> 2] = 0;
       HEAP32[$2 >> 2] = HEAP32[$0 + 56 >> 2];
       HEAP32[$0 + 56 >> 2] = $2;
       HEAP32[$0 + 116 >> 2] = HEAP32[$0 + 116 >> 2] + -1;
       $1 = $10;
       if (($21 | 0) != ($1 | 0)) {
        continue;
       }
       break;
      }
     }
     label$40 : {
      if ($7) {
       if (!$23) {
        $34 = $6;
        $23 = HEAP32[$21 >> 2];
       }
       HEAP32[$23 + 4 >> 2] = $6;
       HEAP32[$6 >> 2] = $23;
       HEAP32[$21 >> 2] = $7;
       HEAP32[$7 + 4 >> 2] = $21;
       $6 = 0;
       break label$40;
      }
      $34 = $23 ? $34 : $21;
     }
     $31 = HEAP32[$40 + 96 >> 2];
     $33 = HEAP32[$38 + 92 >> 2];
     $39 = HEAP32[$14 + 88 >> 2];
     $14 = HEAP32[$20 + 12 >> 2];
     HEAP32[$5 + 124 >> 2] = $14;
     $23 = HEAP32[$20 + 8 >> 2];
     $1 = 0;
    }
    $20 = $1;
    $2 = 1;
    label$43 : {
     if (!(($14 | 0) != ($24 | 0) | ($15 | 0) != ($16 | 0))) {
      label$45 : {
       if (!$23) {
        HEAP32[$6 >> 2] = $20;
        HEAP32[$20 + 4 >> 2] = $6;
        HEAP32[$14 + 8 >> 2] = $20;
        break label$45;
       }
       $1 = HEAP32[$23 + 4 >> 2];
       if (($34 | 0) != ($1 | 0)) {
        while (1) {
         $4 = $1;
         $2 = HEAP32[$1 + 8 >> 2];
         $10 = HEAP32[$1 + 4 >> 2];
         $13 = 0;
         $19 = 0;
         $11 = HEAP32[$1 >> 2];
         if (($11 | 0) != ($1 | 0)) {
          HEAP32[$11 + 4 >> 2] = $10;
          HEAP32[HEAP32[$4 + 4 >> 2] >> 2] = $11;
          $19 = $11;
         }
         HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = $19;
         $11 = HEAP32[$2 >> 2];
         if (($11 | 0) != ($2 | 0)) {
          HEAP32[$11 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
          HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = $11;
          $13 = $11;
         }
         HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] = $13;
         HEAP32[$4 + 12 >> 2] = 0;
         HEAP32[$4 + 16 >> 2] = 0;
         HEAP32[$4 + 4 >> 2] = 0;
         HEAP32[$4 + 8 >> 2] = 0;
         HEAP32[$1 >> 2] = HEAP32[$0 + 56 >> 2];
         HEAP32[$0 + 56 >> 2] = $1;
         HEAP32[$2 + 12 >> 2] = 0;
         HEAP32[$2 + 16 >> 2] = 0;
         HEAP32[$2 + 4 >> 2] = 0;
         HEAP32[$2 + 8 >> 2] = 0;
         HEAP32[$2 >> 2] = HEAP32[$0 + 56 >> 2];
         HEAP32[$0 + 56 >> 2] = $2;
         HEAP32[$0 + 116 >> 2] = HEAP32[$0 + 116 >> 2] + -1;
         $1 = $10;
         if (($34 | 0) != ($1 | 0)) {
          continue;
         }
         break;
        }
       }
       if (!$20) {
        break label$45;
       }
       HEAP32[$6 >> 2] = $23;
       HEAP32[$23 + 4 >> 2] = $6;
       HEAP32[$34 >> 2] = $20;
       HEAP32[$20 + 4 >> 2] = $34;
      }
      if (!$22) {
       HEAP32[$18 >> 2] = $3;
       HEAP32[$3 + 4 >> 2] = $18;
       HEAP32[HEAP32[$5 + 120 >> 2] + 8 >> 2] = $18;
       $22 = 0;
       $41 = $3;
       $42 = $6;
       $2 = 0;
       break label$17;
      }
      $2 = HEAP32[$22 >> 2];
      if (($17 | 0) != ($2 | 0)) {
       while (1) {
        $1 = HEAP32[$2 + 8 >> 2];
        $11 = 0;
        $10 = 0;
        $12 = HEAP32[$2 >> 2];
        if (($12 | 0) != ($2 | 0)) {
         HEAP32[$12 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
         HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = $12;
         $10 = $12;
        }
        HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] = $10;
        $10 = HEAP32[$1 >> 2];
        if (($10 | 0) != ($1 | 0)) {
         HEAP32[$10 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
         HEAP32[HEAP32[$1 + 4 >> 2] >> 2] = $10;
         $11 = $10;
        }
        HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = $11;
        HEAP32[$2 + 12 >> 2] = 0;
        HEAP32[$2 + 16 >> 2] = 0;
        HEAP32[$2 + 4 >> 2] = 0;
        HEAP32[$2 + 8 >> 2] = 0;
        HEAP32[$2 >> 2] = HEAP32[$0 + 56 >> 2];
        HEAP32[$0 + 56 >> 2] = $2;
        HEAP32[$1 + 12 >> 2] = 0;
        HEAP32[$1 + 16 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        HEAP32[$1 + 8 >> 2] = 0;
        HEAP32[$1 >> 2] = HEAP32[$0 + 56 >> 2];
        HEAP32[$0 + 56 >> 2] = $1;
        HEAP32[$0 + 116 >> 2] = HEAP32[$0 + 116 >> 2] + -1;
        $2 = $12;
        if (($17 | 0) != ($2 | 0)) {
         continue;
        }
        break;
       }
      }
      $2 = 0;
      label$56 : {
       if (!$18) {
        $18 = 0;
        break label$56;
       }
       HEAP32[$22 >> 2] = $3;
       HEAP32[$3 + 4 >> 2] = $22;
       HEAP32[$18 >> 2] = $17;
       HEAP32[$17 + 4 >> 2] = $18;
      }
      break label$43;
     }
     $43 = 0;
    }
    $41 = $3;
    $42 = $6;
   }
   if (!$2) {
    break label$2;
   }
   $14 = HEAP32[$5 + 124 >> 2];
   $15 = HEAP32[$5 + 120 >> 2];
   continue;
  }
 }
 $0 = $5 + 128 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionWorld__debugDrawObject_28btTransform_20const__2c_20btCollisionShape_20const__2c_20btVector3_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0);
 $4 = global$0 - 144 | 0;
 $6 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 label$2 : {
  if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
   break label$2;
  }
  $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
  if (!(FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 56 >> 2]]($7) & 32768)) {
   break label$2;
  }
  $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 64 >> 2]]($7, $1, Math_fround(.10000000149011612));
 }
 label$3 : {
  label$4 : {
   $7 = HEAP32[$2 + 4 >> 2];
   if ($7 >>> 0 > 31) {
    break label$4;
   }
   label$5 : {
    switch ($7 - 1 | 0) {
    case 30:
     $5 = HEAP32[$2 + 20 >> 2];
     if (($5 | 0) < 1) {
      break label$3;
     }
     while (1) {
      $12 = $5 + -1 | 0;
      $7 = HEAP32[$2 + 28 >> 2] + Math_imul($12, 80) | 0;
      $6 = HEAP32[$7 + 64 >> 2];
      $23 = HEAPF32[$7 + 56 >> 2];
      $13 = HEAPF32[$7 + 48 >> 2];
      $14 = HEAPF32[$7 + 52 >> 2];
      $15 = HEAPF32[$7 + 32 >> 2];
      $24 = HEAPF32[$7 >> 2];
      $25 = HEAPF32[$7 + 16 >> 2];
      $27 = HEAPF32[$7 + 36 >> 2];
      $11 = HEAPF32[$7 + 4 >> 2];
      $16 = HEAPF32[$7 + 20 >> 2];
      $26 = HEAPF32[$7 + 40 >> 2];
      $28 = HEAPF32[$7 + 8 >> 2];
      $29 = HEAPF32[$7 + 24 >> 2];
      $36 = HEAPF32[$1 + 48 >> 2];
      $37 = HEAPF32[$1 + 52 >> 2];
      $38 = HEAPF32[$1 + 56 >> 2];
      $8 = HEAPF32[$1 + 8 >> 2];
      $9 = HEAPF32[$1 >> 2];
      $10 = HEAPF32[$1 + 4 >> 2];
      $17 = HEAPF32[$1 + 24 >> 2];
      $18 = HEAPF32[$1 + 16 >> 2];
      $19 = HEAPF32[$1 + 20 >> 2];
      $20 = HEAPF32[$1 + 40 >> 2];
      $21 = HEAPF32[$1 + 32 >> 2];
      $22 = HEAPF32[$1 + 36 >> 2];
      HEAP32[$4 + 60 >> 2] = 0;
      HEAP32[$4 + 44 >> 2] = 0;
      HEAP32[$4 + 28 >> 2] = 0;
      HEAP32[$4 + 12 >> 2] = 0;
      HEAPF32[$4 + 40 >> 2] = Math_fround(Math_fround($28 * $21) + Math_fround($29 * $22)) + Math_fround($26 * $20);
      HEAPF32[$4 + 36 >> 2] = Math_fround(Math_fround($11 * $21) + Math_fround($16 * $22)) + Math_fround($27 * $20);
      HEAPF32[$4 + 32 >> 2] = Math_fround(Math_fround($24 * $21) + Math_fround($25 * $22)) + Math_fround($15 * $20);
      HEAPF32[$4 + 24 >> 2] = Math_fround(Math_fround($28 * $18) + Math_fround($29 * $19)) + Math_fround($26 * $17);
      HEAPF32[$4 + 20 >> 2] = Math_fround(Math_fround($11 * $18) + Math_fround($16 * $19)) + Math_fround($27 * $17);
      HEAPF32[$4 + 16 >> 2] = Math_fround(Math_fround($24 * $18) + Math_fround($25 * $19)) + Math_fround($15 * $17);
      HEAPF32[$4 + 8 >> 2] = Math_fround(Math_fround($28 * $9) + Math_fround($29 * $10)) + Math_fround($26 * $8);
      HEAPF32[$4 + 4 >> 2] = Math_fround(Math_fround($11 * $9) + Math_fround($16 * $10)) + Math_fround($27 * $8);
      HEAPF32[$4 >> 2] = Math_fround(Math_fround($24 * $9) + Math_fround($25 * $10)) + Math_fround($15 * $8);
      HEAPF32[$4 + 56 >> 2] = $38 + Math_fround(Math_fround(Math_fround($13 * $21) + Math_fround($14 * $22)) + Math_fround($23 * $20));
      HEAPF32[$4 + 52 >> 2] = $37 + Math_fround(Math_fround(Math_fround($13 * $18) + Math_fround($14 * $19)) + Math_fround($23 * $17));
      HEAPF32[$4 + 48 >> 2] = $36 + Math_fround(Math_fround(Math_fround($13 * $9) + Math_fround($14 * $10)) + Math_fround($23 * $8));
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $4, $6, $3);
      $7 = ($5 | 0) > 1;
      $5 = $12;
      if ($7) {
       continue;
      }
      break;
     }
     break label$3;
    default:
     $6 = HEAP32[$2 + 44 >> 2];
     $5 = HEAP32[$2 + 40 >> 2];
     $7 = $4 + 8 | 0;
     HEAP32[$7 >> 2] = $5;
     HEAP32[$7 + 4 >> 2] = $6;
     $5 = HEAP32[$2 + 36 >> 2];
     $6 = HEAP32[$2 + 32 >> 2];
     HEAP32[$4 >> 2] = $6;
     HEAP32[$4 + 4 >> 2] = $5;
     $8 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2));
     $9 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2));
     $10 = Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2)) + HEAPF32[$4 + 8 >> 2]);
     HEAPF32[$4 + 8 >> 2] = $10;
     $8 = Math_fround($8 + HEAPF32[$4 >> 2]);
     HEAPF32[$4 >> 2] = $8;
     $9 = Math_fround($9 + HEAPF32[$4 + 4 >> 2]);
     HEAPF32[$4 + 4 >> 2] = $9;
     $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     HEAP32[$4 + 140 >> 2] = 0;
     HEAPF32[$4 + 136 >> 2] = -$10;
     HEAPF32[$4 + 132 >> 2] = -$9;
     HEAPF32[$4 + 128 >> 2] = -$8;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0, $4 + 128 | 0, $4, $1, $3);
     break label$3;
    case 7:
     $8 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2));
     $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $8, $1, $3);
     break label$3;
    case 8:
     $7 = HEAP32[$2 + 96 >> 2];
     if (($7 | 0) < 1) {
      break label$3;
     }
     while (1) {
      $5 = $7 + -1 | 0;
      $12 = HEAP32[$2 + 104 >> 2] + ($5 << 4) | 0;
      $8 = HEAPF32[$12 + 8 >> 2];
      $9 = HEAPF32[$12 >> 2];
      $10 = HEAPF32[$12 + 4 >> 2];
      $12 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      $15 = HEAPF32[HEAP32[$2 + 124 >> 2] + ($5 << 2) >> 2];
      $24 = HEAPF32[$1 + 48 >> 2];
      $25 = HEAPF32[$1 + 52 >> 2];
      $27 = HEAPF32[$1 + 56 >> 2];
      $17 = HEAPF32[$1 + 8 >> 2];
      $18 = HEAPF32[$1 >> 2];
      $19 = HEAPF32[$1 + 4 >> 2];
      $20 = HEAPF32[$1 + 24 >> 2];
      $21 = HEAPF32[$1 + 16 >> 2];
      $22 = HEAPF32[$1 + 20 >> 2];
      $23 = HEAPF32[$1 + 40 >> 2];
      $13 = HEAPF32[$1 + 32 >> 2];
      $14 = HEAPF32[$1 + 36 >> 2];
      HEAP32[$4 + 60 >> 2] = 0;
      HEAP32[$4 + 44 >> 2] = 0;
      HEAP32[$4 + 28 >> 2] = 0;
      HEAP32[$4 + 12 >> 2] = 0;
      $11 = Math_fround($13 * Math_fround(0));
      $16 = Math_fround($14 * Math_fround(0));
      HEAPF32[$4 + 40 >> 2] = $23 + Math_fround($11 + $16);
      $26 = Math_fround($11 + $14);
      $11 = Math_fround($23 * Math_fround(0));
      HEAPF32[$4 + 36 >> 2] = $26 + $11;
      HEAPF32[$4 + 32 >> 2] = Math_fround($13 + $16) + $11;
      $11 = Math_fround($21 * Math_fround(0));
      $16 = Math_fround($22 * Math_fround(0));
      HEAPF32[$4 + 24 >> 2] = $20 + Math_fround($11 + $16);
      $26 = Math_fround($11 + $22);
      $11 = Math_fround($20 * Math_fround(0));
      HEAPF32[$4 + 20 >> 2] = $26 + $11;
      HEAPF32[$4 + 16 >> 2] = Math_fround($21 + $16) + $11;
      $11 = Math_fround($18 * Math_fround(0));
      $16 = Math_fround($19 * Math_fround(0));
      HEAPF32[$4 + 8 >> 2] = $17 + Math_fround($11 + $16);
      $26 = Math_fround($11 + $19);
      $11 = Math_fround($17 * Math_fround(0));
      HEAPF32[$4 + 4 >> 2] = $26 + $11;
      HEAPF32[$4 >> 2] = Math_fround($18 + $16) + $11;
      HEAPF32[$4 + 56 >> 2] = $27 + Math_fround(Math_fround(Math_fround($9 * $13) + Math_fround($10 * $14)) + Math_fround($8 * $23));
      HEAPF32[$4 + 52 >> 2] = $25 + Math_fround(Math_fround(Math_fround($9 * $21) + Math_fround($10 * $22)) + Math_fround($8 * $20));
      HEAPF32[$4 + 48 >> 2] = $24 + Math_fround(Math_fround(Math_fround($9 * $18) + Math_fround($10 * $19)) + Math_fround($8 * $17));
      FUNCTION_TABLE[HEAP32[HEAP32[$12 >> 2] + 24 >> 2]]($12, $15, $4, $3);
      $12 = ($7 | 0) > 1;
      $7 = $5;
      if ($12) {
       continue;
      }
      break;
     }
     break label$3;
    case 9:
     $5 = $2 + 32 | 0;
     $7 = HEAP32[$2 + 56 >> 2];
     $8 = HEAPF32[$5 + ($7 << 2) >> 2];
     $9 = HEAPF32[(($7 + 2 | 0) % 3 << 2) + $5 >> 2];
     $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0, $9, $8, $7, $1, $3);
     break label$3;
    case 10:
     $7 = HEAP32[$2 + 72 >> 2];
     $8 = HEAPF32[$2 + 60 >> 2];
     $9 = HEAPF32[$2 + 64 >> 2];
     $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 92 >> 2]]($0, $8, $9, $7, $1, $3);
     break label$3;
    case 12:
     $7 = HEAP32[$2 + 56 >> 2];
     $8 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 92 >> 2]]($2));
     $6 = HEAP32[$2 + 44 >> 2];
     $5 = HEAP32[$2 + 40 >> 2];
     $30 = $5;
     $5 = $4 + 8 | 0;
     HEAP32[$5 >> 2] = $30;
     HEAP32[$5 + 4 >> 2] = $6;
     $5 = HEAP32[$2 + 36 >> 2];
     $6 = HEAP32[$2 + 32 >> 2];
     HEAP32[$4 >> 2] = $6;
     HEAP32[$4 + 4 >> 2] = $5;
     $9 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2));
     $10 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2));
     HEAPF32[$4 + 8 >> 2] = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2)) + HEAPF32[$4 + 8 >> 2];
     HEAPF32[$4 >> 2] = $9 + HEAPF32[$4 >> 2];
     HEAPF32[$4 + 4 >> 2] = $10 + HEAPF32[$4 + 4 >> 2];
     $9 = HEAPF32[($7 << 2) + $4 >> 2];
     $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 88 >> 2]]($0, $8, $9, $7, $1, $3);
     break label$3;
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 11:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 28:
    case 29:
     break label$4;
    case 27:
     break label$5;
    }
   }
   $8 = HEAPF32[$2 + 68 >> 2];
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0, $2 + 52 | 0, $8, $1, $3);
   break label$3;
  }
  label$15 : {
   if (($7 | 0) > 6) {
    break label$15;
   }
   $7 = HEAP32[$2 + 56 >> 2];
   if ($7) {
    if (HEAP32[$7 + 28 >> 2] < 1) {
     break label$15;
    }
    while (1) {
     $27 = Math_fround(0);
     label$18 : {
      $33 = Math_imul($32, 36);
      $5 = $33 + HEAP32[$7 + 36 >> 2] | 0;
      $31 = HEAP32[$5 + 4 >> 2];
      if (!$31) {
       $11 = Math_fround(0);
       $16 = Math_fround(0);
       break label$18;
      }
      $11 = Math_fround(0);
      $16 = Math_fround(0);
      if (($31 | 0) < 1) {
       break label$18;
      }
      $12 = HEAP32[$5 + 12 >> 2];
      $6 = HEAP32[($12 + ($31 << 2) | 0) + -4 >> 2];
      $5 = 0;
      while (1) {
       $30 = HEAP32[($5 << 2) + $12 >> 2];
       $34 = $30 << 4;
       $12 = $34 + HEAP32[$7 + 16 >> 2] | 0;
       $26 = HEAPF32[$12 >> 2];
       $28 = HEAPF32[$12 + 4 >> 2];
       $29 = HEAPF32[$12 + 8 >> 2];
       $12 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       $35 = HEAP32[$7 + 16 >> 2];
       $6 = $35 + ($6 << 4) | 0;
       $8 = HEAPF32[$6 + 8 >> 2];
       $9 = HEAPF32[$6 >> 2];
       $10 = HEAPF32[$6 + 4 >> 2];
       $17 = HEAPF32[$1 + 48 >> 2];
       $18 = HEAPF32[$1 + 8 >> 2];
       $19 = HEAPF32[$1 >> 2];
       $20 = HEAPF32[$1 + 4 >> 2];
       $21 = HEAPF32[$1 + 52 >> 2];
       $22 = HEAPF32[$1 + 24 >> 2];
       $23 = HEAPF32[$1 + 16 >> 2];
       $13 = HEAPF32[$1 + 20 >> 2];
       $14 = HEAPF32[$1 + 56 >> 2];
       $15 = HEAPF32[$1 + 40 >> 2];
       $24 = HEAPF32[$1 + 32 >> 2];
       $25 = HEAPF32[$1 + 36 >> 2];
       HEAP32[$4 + 12 >> 2] = 0;
       HEAPF32[$4 + 8 >> 2] = $14 + Math_fround(Math_fround(Math_fround($9 * $24) + Math_fround($10 * $25)) + Math_fround($8 * $15));
       HEAPF32[$4 + 4 >> 2] = $21 + Math_fround(Math_fround(Math_fround($9 * $23) + Math_fround($10 * $13)) + Math_fround($8 * $22));
       HEAPF32[$4 >> 2] = $17 + Math_fround(Math_fround(Math_fround($9 * $19) + Math_fround($10 * $20)) + Math_fround($8 * $18));
       $6 = $34 + $35 | 0;
       $8 = HEAPF32[$6 + 8 >> 2];
       $9 = HEAPF32[$6 >> 2];
       $10 = HEAPF32[$6 + 4 >> 2];
       HEAP32[$4 + 140 >> 2] = 0;
       HEAPF32[$4 + 136 >> 2] = $14 + Math_fround(Math_fround(Math_fround($24 * $9) + Math_fround($25 * $10)) + Math_fround($15 * $8));
       HEAPF32[$4 + 132 >> 2] = $21 + Math_fround(Math_fround(Math_fround($23 * $9) + Math_fround($13 * $10)) + Math_fround($22 * $8));
       HEAPF32[$4 + 128 >> 2] = $17 + Math_fround(Math_fround(Math_fround($19 * $9) + Math_fround($20 * $10)) + Math_fround($18 * $8));
       FUNCTION_TABLE[HEAP32[HEAP32[$12 >> 2] + 16 >> 2]]($12, $4, $4 + 128 | 0, $3);
       $16 = Math_fround($16 + $29);
       $11 = Math_fround($11 + $28);
       $27 = Math_fround($27 + $26);
       $5 = $5 + 1 | 0;
       $12 = HEAP32[$7 + 36 >> 2] + $33 | 0;
       if (($5 | 0) >= HEAP32[$12 + 4 >> 2]) {
        break label$18;
       }
       $12 = HEAP32[$12 + 12 >> 2];
       $6 = $30;
       continue;
      }
     }
     $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     if (FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 56 >> 2]]($5) & 16384) {
      HEAP32[$4 + 8 >> 2] = 0;
      HEAP32[$4 + 12 >> 2] = 0;
      HEAP32[$4 >> 2] = 1065353216;
      HEAP32[$4 + 4 >> 2] = 1065353216;
      $5 = HEAP32[$7 + 36 >> 2] + $33 | 0;
      $26 = HEAPF32[$5 + 28 >> 2];
      $28 = HEAPF32[$5 + 20 >> 2];
      $29 = HEAPF32[$5 + 24 >> 2];
      $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      $17 = HEAPF32[$1 + 48 >> 2];
      $18 = HEAPF32[$1 + 8 >> 2];
      $19 = HEAPF32[$1 >> 2];
      $20 = HEAPF32[$1 + 4 >> 2];
      $21 = HEAPF32[$1 + 52 >> 2];
      $22 = HEAPF32[$1 + 24 >> 2];
      $23 = HEAPF32[$1 + 16 >> 2];
      $13 = HEAPF32[$1 + 20 >> 2];
      $14 = HEAPF32[$1 + 56 >> 2];
      $15 = HEAPF32[$1 + 40 >> 2];
      $24 = HEAPF32[$1 + 32 >> 2];
      $25 = HEAPF32[$1 + 36 >> 2];
      HEAP32[$4 + 140 >> 2] = 0;
      $10 = Math_fround(Math_fround(1) / Math_fround($31 | 0));
      $8 = Math_fround($10 * $27);
      $9 = Math_fround($10 * $11);
      $10 = Math_fround($10 * $16);
      HEAPF32[$4 + 136 >> 2] = $14 + Math_fround(Math_fround(Math_fround($24 * $8) + Math_fround($25 * $9)) + Math_fround($15 * $10));
      HEAPF32[$4 + 132 >> 2] = $21 + Math_fround(Math_fround(Math_fround($8 * $23) + Math_fround($9 * $13)) + Math_fround($10 * $22));
      HEAPF32[$4 + 128 >> 2] = $17 + Math_fround(Math_fround(Math_fround($8 * $19) + Math_fround($9 * $20)) + Math_fround($10 * $18));
      HEAP32[$4 + 124 >> 2] = 0;
      $8 = Math_fround($8 + $28);
      $9 = Math_fround($9 + $29);
      $10 = Math_fround($10 + $26);
      HEAPF32[$4 + 120 >> 2] = $14 + Math_fround(Math_fround(Math_fround($24 * $8) + Math_fround($25 * $9)) + Math_fround($15 * $10));
      HEAPF32[$4 + 116 >> 2] = $21 + Math_fround(Math_fround(Math_fround($8 * $23) + Math_fround($9 * $13)) + Math_fround($10 * $22));
      HEAPF32[$4 + 112 >> 2] = $17 + Math_fround(Math_fround(Math_fround($8 * $19) + Math_fround($9 * $20)) + Math_fround($10 * $18));
      FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 16 >> 2]]($5, $4 + 128 | 0, $4 + 112 | 0, $4);
     }
     $32 = $32 + 1 | 0;
     if (($32 | 0) < HEAP32[$7 + 28 >> 2]) {
      continue;
     }
     break;
    }
    break label$15;
   }
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 100 >> 2]]($2) | 0) < 1) {
    break label$15;
   }
   $7 = 0;
   while (1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 104 >> 2]]($2, $7, $4, $4 + 128 | 0);
    $8 = HEAPF32[$1 + 48 >> 2];
    $9 = HEAPF32[$1 + 8 >> 2];
    $10 = HEAPF32[$1 >> 2];
    $17 = HEAPF32[$1 + 4 >> 2];
    $18 = HEAPF32[$1 + 52 >> 2];
    $19 = HEAPF32[$1 + 24 >> 2];
    $20 = HEAPF32[$1 + 16 >> 2];
    $21 = HEAPF32[$1 + 20 >> 2];
    $22 = HEAPF32[$1 + 56 >> 2];
    $23 = HEAPF32[$1 + 40 >> 2];
    $13 = HEAPF32[$1 + 32 >> 2];
    $14 = HEAPF32[$1 + 36 >> 2];
    HEAP32[$4 + 124 >> 2] = 0;
    $15 = HEAPF32[$4 >> 2];
    $24 = HEAPF32[$4 + 4 >> 2];
    $25 = HEAPF32[$4 + 8 >> 2];
    HEAPF32[$4 + 120 >> 2] = $22 + Math_fround(Math_fround(Math_fround($13 * $15) + Math_fround($14 * $24)) + Math_fround($23 * $25));
    HEAPF32[$4 + 116 >> 2] = $18 + Math_fround(Math_fround(Math_fround($15 * $20) + Math_fround($24 * $21)) + Math_fround($25 * $19));
    HEAPF32[$4 + 112 >> 2] = $8 + Math_fround(Math_fround(Math_fround($15 * $10) + Math_fround($24 * $17)) + Math_fround($25 * $9));
    HEAP32[$4 + 108 >> 2] = 0;
    $15 = HEAPF32[$4 + 128 >> 2];
    $11 = Math_fround($13 * $15);
    $13 = HEAPF32[$4 + 132 >> 2];
    $11 = Math_fround($11 + Math_fround($14 * $13));
    $14 = HEAPF32[$4 + 136 >> 2];
    HEAPF32[$4 + 104 >> 2] = $22 + Math_fround($11 + Math_fround($23 * $14));
    HEAPF32[$4 + 100 >> 2] = $18 + Math_fround(Math_fround(Math_fround($20 * $15) + Math_fround($21 * $13)) + Math_fround($19 * $14));
    HEAPF32[$4 + 96 >> 2] = $8 + Math_fround(Math_fround(Math_fround($10 * $15) + Math_fround($17 * $13)) + Math_fround($9 * $14));
    $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 16 >> 2]]($5, $4 + 112 | 0, $4 + 96 | 0, $3);
    $7 = $7 + 1 | 0;
    if (($7 | 0) < (FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 100 >> 2]]($2) | 0)) {
     continue;
    }
    break;
   }
  }
  $7 = HEAP32[$2 + 4 >> 2];
  if ($7 + -21 >>> 0 <= 8) {
   HEAP32[$4 + 136 >> 2] = 1566444395;
   HEAP32[$4 + 140 >> 2] = 0;
   HEAP32[$4 + 128 >> 2] = 1566444395;
   HEAP32[$4 + 132 >> 2] = 1566444395;
   HEAP32[$4 + 120 >> 2] = -581039253;
   HEAP32[$4 + 124 >> 2] = 0;
   HEAP32[$4 + 112 >> 2] = -581039253;
   HEAP32[$4 + 116 >> 2] = -581039253;
   HEAP32[$4 + 8 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0);
   HEAP32[$4 + 4 >> 2] = 9632;
   HEAP32[$4 >> 2] = 9608;
   $6 = HEAP32[$3 + 12 >> 2];
   $5 = HEAP32[$3 + 8 >> 2];
   HEAP32[$4 + 20 >> 2] = $5;
   HEAP32[$4 + 24 >> 2] = $6;
   $5 = HEAP32[$3 + 4 >> 2];
   $6 = HEAP32[$3 >> 2];
   HEAP32[$4 + 12 >> 2] = $6;
   HEAP32[$4 + 16 >> 2] = $5;
   $6 = HEAP32[$1 + 12 >> 2];
   $5 = HEAP32[$1 + 8 >> 2];
   HEAP32[$4 + 36 >> 2] = $5;
   HEAP32[$4 + 40 >> 2] = $6;
   $5 = HEAP32[$1 + 4 >> 2];
   $6 = HEAP32[$1 >> 2];
   HEAP32[$4 + 28 >> 2] = $6;
   HEAP32[$4 + 32 >> 2] = $5;
   $6 = HEAP32[$1 + 20 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   HEAP32[$4 + 44 >> 2] = $5;
   HEAP32[$4 + 48 >> 2] = $6;
   $5 = HEAP32[$1 + 28 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   HEAP32[$4 + 52 >> 2] = $6;
   HEAP32[$4 + 56 >> 2] = $5;
   $6 = HEAP32[$1 + 44 >> 2];
   $5 = HEAP32[$1 + 40 >> 2];
   HEAP32[$4 + 68 >> 2] = $5;
   HEAP32[$4 + 72 >> 2] = $6;
   $5 = HEAP32[$1 + 36 >> 2];
   $6 = HEAP32[$1 + 32 >> 2];
   HEAP32[$4 + 60 >> 2] = $6;
   HEAP32[$4 + 64 >> 2] = $5;
   $6 = HEAP32[$1 + 52 >> 2];
   $5 = HEAP32[$1 + 48 >> 2];
   HEAP32[$4 + 76 >> 2] = $5;
   HEAP32[$4 + 80 >> 2] = $6;
   $5 = HEAP32[$1 + 60 >> 2];
   $6 = HEAP32[$1 + 56 >> 2];
   HEAP32[$4 + 84 >> 2] = $6;
   HEAP32[$4 + 88 >> 2] = $5;
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 64 >> 2]]($2, $4, $4 + 112 | 0, $4 + 128 | 0);
   btInternalTriangleIndexCallback___btInternalTriangleIndexCallback_28_29($4 | 4);
   btTriangleCallback___btTriangleCallback_28_29($4);
   $7 = HEAP32[$2 + 4 >> 2];
  }
  if (($7 | 0) != 3) {
   break label$3;
  }
  HEAP32[$4 + 136 >> 2] = 1566444395;
  HEAP32[$4 + 140 >> 2] = 0;
  HEAP32[$4 + 128 >> 2] = 1566444395;
  HEAP32[$4 + 132 >> 2] = 1566444395;
  HEAP32[$4 + 120 >> 2] = -581039253;
  HEAP32[$4 + 124 >> 2] = 0;
  HEAP32[$4 + 112 >> 2] = -581039253;
  HEAP32[$4 + 116 >> 2] = -581039253;
  HEAP32[$4 + 8 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0);
  HEAP32[$4 + 4 >> 2] = 9632;
  HEAP32[$4 >> 2] = 9608;
  $6 = HEAP32[$3 + 12 >> 2];
  $5 = HEAP32[$3 + 8 >> 2];
  HEAP32[$4 + 20 >> 2] = $5;
  HEAP32[$4 + 24 >> 2] = $6;
  $5 = HEAP32[$3 + 4 >> 2];
  $6 = HEAP32[$3 >> 2];
  HEAP32[$4 + 12 >> 2] = $6;
  HEAP32[$4 + 16 >> 2] = $5;
  $6 = HEAP32[$1 + 12 >> 2];
  $5 = HEAP32[$1 + 8 >> 2];
  HEAP32[$4 + 36 >> 2] = $5;
  HEAP32[$4 + 40 >> 2] = $6;
  $5 = HEAP32[$1 + 4 >> 2];
  $6 = HEAP32[$1 >> 2];
  HEAP32[$4 + 28 >> 2] = $6;
  HEAP32[$4 + 32 >> 2] = $5;
  $6 = HEAP32[$1 + 20 >> 2];
  $5 = HEAP32[$1 + 16 >> 2];
  HEAP32[$4 + 44 >> 2] = $5;
  HEAP32[$4 + 48 >> 2] = $6;
  $5 = HEAP32[$1 + 28 >> 2];
  $6 = HEAP32[$1 + 24 >> 2];
  HEAP32[$4 + 52 >> 2] = $6;
  HEAP32[$4 + 56 >> 2] = $5;
  $6 = HEAP32[$1 + 44 >> 2];
  $5 = HEAP32[$1 + 40 >> 2];
  HEAP32[$4 + 68 >> 2] = $5;
  HEAP32[$4 + 72 >> 2] = $6;
  $5 = HEAP32[$1 + 36 >> 2];
  $6 = HEAP32[$1 + 32 >> 2];
  HEAP32[$4 + 60 >> 2] = $6;
  HEAP32[$4 + 64 >> 2] = $5;
  $6 = HEAP32[$1 + 52 >> 2];
  $5 = HEAP32[$1 + 48 >> 2];
  HEAP32[$4 + 76 >> 2] = $5;
  HEAP32[$4 + 80 >> 2] = $6;
  $5 = HEAP32[$1 + 60 >> 2];
  $6 = HEAP32[$1 + 56 >> 2];
  HEAP32[$4 + 84 >> 2] = $6;
  HEAP32[$4 + 88 >> 2] = $5;
  $1 = HEAP32[$2 + 96 >> 2];
  $0 = $4 | 4;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $0, $4 + 112 | 0, $4 + 128 | 0);
  btInternalTriangleIndexCallback___btInternalTriangleIndexCallback_28_29($0);
  btTriangleCallback___btTriangleCallback_28_29($4);
 }
 $0 = $4 + 144 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexHullInternal__shrink_28float_2c_20float_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = Math_fround(0), $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = Math_fround(0), $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = Math_fround(0), $31 = 0, $32 = 0, $33 = 0, $34 = Math_fround(0), $35 = Math_fround(0), $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = Math_fround(0), $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = Math_fround(0), $50 = Math_fround(0), $51 = Math_fround(0), $52 = Math_fround(0), $53 = Math_fround(0);
 $4 = global$0 - 128 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $9 = HEAP32[$0 + 124 >> 2];
 label$2 : {
  if (!$9) {
   break label$2;
  }
  $36 = HEAP32[$0 + 100 >> 2] + -1 | 0;
  HEAP32[$0 + 100 >> 2] = $36;
  HEAP32[$9 + 104 >> 2] = $36;
  $31 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(4, 16);
  HEAP32[$31 >> 2] = HEAP32[$0 + 124 >> 2];
  $9 = HEAP32[$0 + 124 >> 2];
  $23 = HEAP32[$9 + 96 >> 2];
  $40 = HEAP32[$9 + 92 >> 2];
  $41 = HEAP32[$9 + 88 >> 2];
  HEAP32[$4 + 104 >> 2] = 0;
  HEAP32[$4 + 108 >> 2] = 0;
  HEAP32[$4 + 96 >> 2] = 0;
  HEAP32[$4 + 100 >> 2] = 0;
  HEAP32[$4 + 88 >> 2] = 0;
  HEAP32[$4 + 92 >> 2] = 0;
  HEAP32[$4 + 80 >> 2] = 0;
  HEAP32[$4 + 84 >> 2] = 0;
  HEAP32[$4 + 72 >> 2] = 0;
  HEAP32[$4 + 76 >> 2] = 0;
  HEAP32[$4 + 64 >> 2] = 0;
  HEAP32[$4 + 68 >> 2] = 0;
  HEAP32[$4 + 56 >> 2] = 0;
  HEAP32[$4 + 60 >> 2] = 0;
  HEAP32[$4 + 48 >> 2] = 0;
  HEAP32[$4 + 52 >> 2] = 0;
  $37 = 1;
  $21 = 1;
  while (1) {
   $21 = $21 + -1 | 0;
   $32 = HEAP32[($21 << 2) + $31 >> 2];
   $26 = HEAP32[$32 + 8 >> 2];
   if ($26) {
    while (1) {
     $9 = HEAP32[$26 + 12 >> 2];
     if (HEAP32[$9 + 104 >> 2] != ($36 | 0)) {
      HEAP32[$9 + 104 >> 2] = $36;
      label$8 : {
       if (($21 | 0) != ($37 | 0)) {
        break label$8;
       }
       $37 = $21 ? $21 << 1 : 1;
       if (($21 | 0) >= ($37 | 0)) {
        $37 = $21;
        break label$8;
       }
       $9 = 0;
       $11 = 0;
       if ($37) {
        $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($37 << 2, 16);
       }
       label$11 : {
        label$12 : {
         if (($21 | 0) >= 1) {
          while (1) {
           $12 = $9 << 2;
           HEAP32[$12 + $11 >> 2] = HEAP32[$12 + $31 >> 2];
           $9 = $9 + 1 | 0;
           if (($21 | 0) != ($9 | 0)) {
            continue;
           }
           break label$12;
          }
         }
         if (!$31) {
          break label$11;
         }
        }
        btAlignedFreeInternal_28void__29($31);
       }
       $31 = $11;
      }
      HEAP32[($21 << 2) + $31 >> 2] = HEAP32[$26 + 12 >> 2];
      $21 = $21 + 1 | 0;
     }
     if (HEAP32[$26 + 20 >> 2] != ($36 | 0)) {
      $27 = HEAP32[$0 + 72 >> 2];
      label$16 : {
       if ($27) {
        break label$16;
       }
       $11 = HEAP32[$0 + 68 >> 2];
       label$17 : {
        if ($11) {
         HEAP32[$0 + 68 >> 2] = HEAP32[$11 + 8 >> 2];
         break label$17;
        }
        $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(12, 16);
        $9 = HEAP32[$0 + 76 >> 2];
        HEAP32[$11 + 8 >> 2] = 0;
        HEAP32[$11 + 4 >> 2] = $9;
        HEAP32[$11 >> 2] = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($9, 60), 16);
        HEAP32[$11 + 8 >> 2] = HEAP32[$0 + 64 >> 2];
        HEAP32[$0 + 64 >> 2] = $11;
       }
       $9 = 0;
       $27 = HEAP32[$11 >> 2];
       $12 = $27;
       $11 = HEAP32[$11 + 4 >> 2];
       if (($11 | 0) < 1) {
        break label$16;
       }
       while (1) {
        $19 = $12 + 60 | 0;
        $9 = $9 + 1 | 0;
        HEAP32[$12 >> 2] = ($9 | 0) < ($11 | 0) ? $19 : 0;
        $12 = $19;
        if (($9 | 0) != ($11 | 0)) {
         continue;
        }
        break;
       }
      }
      HEAP32[$0 + 72 >> 2] = HEAP32[$27 >> 2];
      HEAP32[$27 + 8 >> 2] = 0;
      HEAP32[$27 >> 2] = 0;
      $12 = HEAP32[HEAP32[HEAP32[$26 + 8 >> 2] + 4 >> 2] + 12 >> 2];
      $9 = HEAP32[$26 + 12 >> 2];
      HEAP32[$27 + 4 >> 2] = $9;
      $6 = HEAP32[$9 + 92 >> 2];
      $3 = HEAP32[$9 + 88 >> 2];
      $5 = $3;
      $3 = $27;
      HEAP32[$3 + 12 >> 2] = $5;
      HEAP32[$3 + 16 >> 2] = $6;
      $11 = $9 + 96 | 0;
      $7 = $11;
      $6 = HEAP32[$7 >> 2];
      $3 = HEAP32[$7 + 4 >> 2];
      $5 = $6;
      $6 = $27;
      HEAP32[$6 + 20 >> 2] = $5;
      HEAP32[$6 + 24 >> 2] = $3;
      $19 = HEAP32[$12 + 92 >> 2];
      $15 = $9 + 92 | 0;
      $13 = HEAP32[$15 >> 2];
      $24 = HEAP32[$12 + 96 >> 2];
      $14 = HEAP32[$9 + 96 >> 2];
      $12 = HEAP32[$12 + 88 >> 2];
      $42 = HEAP32[$9 + 88 >> 2];
      HEAP32[$6 + 40 >> 2] = -1;
      HEAP32[$6 + 36 >> 2] = $24 - $14;
      HEAP32[$6 + 32 >> 2] = $19 - $13;
      HEAP32[$6 + 28 >> 2] = $12 - $42;
      $12 = HEAP32[$9 + 92 >> 2];
      $11 = HEAP32[$9 + 96 >> 2];
      $19 = HEAP32[$9 + 88 >> 2];
      $15 = HEAP32[$32 + 88 >> 2];
      $13 = HEAP32[$32 + 92 >> 2];
      $24 = HEAP32[$32 + 96 >> 2];
      HEAP32[$6 + 56 >> 2] = -1;
      HEAP32[$6 + 52 >> 2] = $24 - $11;
      HEAP32[$6 + 48 >> 2] = $13 - $12;
      HEAP32[$6 + 44 >> 2] = $15 - $19;
      $12 = HEAP32[$9 + 16 >> 2];
      HEAP32[($12 ? $12 + 8 | 0 : $9 + 12 | 0) >> 2] = $6;
      HEAP32[$9 + 16 >> 2] = $6;
      label$20 : {
       if (($20 | 0) != ($39 | 0)) {
        $38 = $16;
        break label$20;
       }
       $39 = $20 ? $20 << 1 : 1;
       if (($20 | 0) >= ($39 | 0)) {
        $39 = $20;
        $38 = $16;
        break label$20;
       }
       $9 = 0;
       $38 = 0;
       if ($39) {
        $38 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($39 << 2, 16);
       }
       label$24 : {
        if (($20 | 0) >= 1) {
         while (1) {
          $12 = $9 << 2;
          HEAP32[$38 + $12 >> 2] = HEAP32[$12 + $16 >> 2];
          $9 = $9 + 1 | 0;
          if (($20 | 0) != ($9 | 0)) {
           continue;
          }
          break label$24;
         }
        }
        if (!$16) {
         break label$20;
        }
       }
       btAlignedFreeInternal_28void__29($16);
      }
      HEAP32[($20 << 2) + $38 >> 2] = $27;
      $11 = 0;
      $9 = $26;
      $19 = 0;
      while (1) {
       $12 = $19;
       if (!(!$11 | !$12)) {
        $19 = HEAP32[$12 + 96 >> 2];
        $16 = $19 - $23 | 0;
        $15 = HEAP32[$11 + 92 >> 2];
        $13 = $15 - $40 | 0;
        $24 = HEAP32[$12 + 92 >> 2];
        $14 = $24 - $40 | 0;
        $42 = HEAP32[$11 + 96 >> 2];
        $22 = $42 - $23 | 0;
        $6 = Math_imul($16, $13) - Math_imul($14, $22) | 0;
        $3 = $6 >> 31;
        $8 = $6;
        $5 = $3;
        $33 = HEAP32[$32 + 88 >> 2];
        $6 = $33 - $41 | 0;
        $3 = $6 >> 31;
        $7 = $3;
        $3 = $5;
        $5 = $6;
        $6 = $7;
        $6 = __wasm_i64_mul($8, $3, $5, $6);
        $7 = $6;
        $3 = i64toi32_i32$HIGH_BITS;
        $5 = $3;
        $11 = HEAP32[$11 + 88 >> 2];
        $28 = $11 - $41 | 0;
        $3 = Math_imul($28, $14);
        $14 = HEAP32[$12 + 88 >> 2];
        $29 = $14 - $41 | 0;
        $6 = $3 - Math_imul($29, $13) | 0;
        $3 = $6 >> 31;
        $17 = $6;
        $8 = $3;
        $13 = HEAP32[$32 + 96 >> 2];
        $6 = $13 - $23 | 0;
        $3 = $6 >> 31;
        $10 = $3;
        $3 = $8;
        $8 = $6;
        $6 = $10;
        $6 = __wasm_i64_mul($17, $3, $8, $6);
        $10 = $6;
        $3 = i64toi32_i32$HIGH_BITS;
        $6 = $3;
        $3 = $5;
        $5 = $3 + $6 | 0;
        $8 = $7 + $10 | 0;
        if ($8 >>> 0 < $10 >>> 0) {
         $5 = $5 + 1 | 0;
        }
        $3 = $8;
        $8 = $5;
        $7 = Math_imul($22, $29) - Math_imul($16, $28) | 0;
        $5 = $7 >> 31;
        $17 = $7;
        $10 = $5;
        $16 = HEAP32[$32 + 92 >> 2];
        $7 = $16 - $40 | 0;
        $5 = $7 >> 31;
        $6 = $5;
        $5 = $10;
        $10 = $7;
        $7 = $6;
        $7 = __wasm_i64_mul($17, $5, $10, $7);
        $10 = $7;
        $5 = i64toi32_i32$HIGH_BITS;
        $7 = $5;
        $5 = $8;
        $8 = $7 + $5 | 0;
        $6 = $3 + $10 | 0;
        if ($6 >>> 0 < $10 >>> 0) {
         $8 = $8 + 1 | 0;
        }
        $28 = $6;
        $22 = $8;
        $3 = (($41 + $33 | 0) + $11 | 0) + $14 | 0;
        $8 = $3 >> 31;
        $5 = $8;
        $8 = $22;
        $7 = $3;
        $3 = $5;
        $3 = __wasm_i64_mul($6, $8, $7, $3);
        $17 = $3;
        $8 = i64toi32_i32$HIGH_BITS;
        $14 = $8;
        $29 = $8 >> 31;
        $3 = $8 >> 31;
        $33 = $3;
        $11 = ($23 + $13 | 0) + $42 | 0;
        $16 = (($16 + $40 | 0) + $15 | 0) + $24 | 0;
        $3 = HEAP32[$4 + 104 >> 2];
        $15 = $3;
        $5 = HEAP32[$4 + 108 >> 2];
        $13 = $5;
        $3 = HEAP32[$4 + 100 >> 2];
        $6 = $3;
        $5 = HEAP32[$4 + 96 >> 2];
        $10 = $5;
        $8 = $17;
        $7 = $5 + $8 | 0;
        $3 = $14;
        $5 = $6;
        $6 = $3 + $5 | 0;
        $24 = $7;
        $6 = $7 >>> 0 < $10 >>> 0 ? $6 + 1 | 0 : $6;
        $14 = $6;
        $8 = $3;
        $3 = $7;
        $10 = $17;
        if (($6 | 0) == ($8 | 0) & $3 >>> 0 < $10 >>> 0 | $6 >>> 0 < $8 >>> 0) {
         $8 = $4;
         $3 = $13;
         $7 = $3;
         $10 = $15;
         $5 = $10 + 1 | 0;
         if ($5 >>> 0 < 1) {
          $7 = $7 + 1 | 0;
         }
         $15 = $5;
         $10 = $8;
         HEAP32[$10 + 104 >> 2] = $5;
         HEAP32[$10 + 108 >> 2] = $7;
         $13 = $7;
        }
        $11 = $11 + $19 | 0;
        HEAP32[$4 + 96 >> 2] = $24;
        $7 = $14;
        HEAP32[$4 + 100 >> 2] = $7;
        $17 = $4;
        $7 = $13;
        $10 = $33;
        $5 = $7 + $10 | 0;
        $3 = $15;
        $8 = $29;
        $6 = $3 + $8 | 0;
        if ($6 >>> 0 < $8 >>> 0) {
         $5 = $5 + 1 | 0;
        }
        $3 = $17;
        HEAP32[$3 + 104 >> 2] = $6;
        HEAP32[$3 + 108 >> 2] = $5;
        $3 = $16;
        $5 = $3 >> 31;
        $3 = $5;
        $5 = $22;
        $3 = __wasm_i64_mul($28, $5, $16, $3);
        $15 = $3;
        $5 = i64toi32_i32$HIGH_BITS;
        $13 = $5;
        $29 = $5 >> 31;
        $3 = $5 >> 31;
        $33 = $3;
        $3 = HEAP32[$4 + 88 >> 2];
        $17 = $3;
        $7 = HEAP32[$4 + 92 >> 2];
        $14 = $7;
        $8 = $15;
        $7 = HEAP32[$4 + 80 >> 2];
        $24 = $7;
        $5 = $7;
        $10 = $8 + $5 | 0;
        $3 = HEAP32[$4 + 84 >> 2];
        $7 = $13;
        $6 = $3 + $7 | 0;
        $15 = $10;
        $6 = $10 >>> 0 < $8 >>> 0 ? $6 + 1 | 0 : $6;
        $13 = $6;
        $5 = $3;
        $3 = $10;
        $8 = $24;
        if (($6 | 0) == ($5 | 0) & $3 >>> 0 < $8 >>> 0 | $6 >>> 0 < $5 >>> 0) {
         $5 = $4;
         $3 = $14;
         $10 = $3;
         $8 = $17;
         $7 = $8 + 1 | 0;
         if ($7 >>> 0 < 1) {
          $10 = $10 + 1 | 0;
         }
         $17 = $7;
         $8 = $5;
         HEAP32[$8 + 88 >> 2] = $7;
         HEAP32[$8 + 92 >> 2] = $10;
         $14 = $10;
        }
        HEAP32[$4 + 80 >> 2] = $15;
        $10 = $13;
        HEAP32[$4 + 84 >> 2] = $10;
        $13 = $4;
        $10 = $14;
        $8 = $33;
        $7 = $10 + $8 | 0;
        $3 = $17;
        $5 = $29;
        $6 = $3 + $5 | 0;
        if ($6 >>> 0 < $5 >>> 0) {
         $7 = $7 + 1 | 0;
        }
        $3 = $13;
        HEAP32[$3 + 88 >> 2] = $6;
        HEAP32[$3 + 92 >> 2] = $7;
        $3 = $11;
        $7 = $3 >> 31;
        $3 = $7;
        $7 = $22;
        $3 = __wasm_i64_mul($28, $7, $11, $3);
        $15 = $3;
        $7 = i64toi32_i32$HIGH_BITS;
        $13 = $7;
        $29 = $7 >> 31;
        $3 = $7 >> 31;
        $33 = $3;
        $3 = HEAP32[$4 + 72 >> 2];
        $17 = $3;
        $10 = HEAP32[$4 + 76 >> 2];
        $14 = $10;
        $10 = HEAP32[$4 + 64 >> 2];
        $24 = $10;
        $7 = $10;
        $5 = $15;
        $8 = $7 + $5 | 0;
        $3 = HEAP32[$4 + 68 >> 2];
        $10 = $13;
        $6 = $3 + $10 | 0;
        $15 = $8;
        $6 = $8 >>> 0 < $5 >>> 0 ? $6 + 1 | 0 : $6;
        $13 = $6;
        $7 = $3;
        $3 = $8;
        $5 = $24;
        if (($6 | 0) == ($7 | 0) & $3 >>> 0 < $5 >>> 0 | $6 >>> 0 < $7 >>> 0) {
         $7 = $4;
         $3 = $14;
         $8 = $3;
         $5 = $17;
         $10 = $5 + 1 | 0;
         if ($10 >>> 0 < 1) {
          $8 = $8 + 1 | 0;
         }
         $17 = $10;
         $5 = $7;
         HEAP32[$5 + 72 >> 2] = $10;
         HEAP32[$5 + 76 >> 2] = $8;
         $14 = $8;
        }
        HEAP32[$4 + 64 >> 2] = $15;
        $8 = $13;
        HEAP32[$4 + 68 >> 2] = $8;
        $13 = $4;
        $8 = $14;
        $5 = $33;
        $10 = $8 + $5 | 0;
        $3 = $17;
        $7 = $29;
        $6 = $3 + $7 | 0;
        if ($6 >>> 0 < $7 >>> 0) {
         $10 = $10 + 1 | 0;
        }
        $3 = $13;
        HEAP32[$3 + 72 >> 2] = $6;
        HEAP32[$3 + 76 >> 2] = $10;
        $10 = $22;
        $3 = $10 >> 31;
        $15 = $10 >> 31;
        $13 = $3;
        $3 = HEAP32[$4 + 56 >> 2];
        $17 = $3;
        $8 = HEAP32[$4 + 60 >> 2];
        $14 = $8;
        $7 = $28;
        $8 = HEAP32[$4 + 48 >> 2];
        $29 = $8;
        $5 = $7 + $8 | 0;
        $3 = HEAP32[$4 + 52 >> 2];
        $8 = $22;
        $6 = $3 + $8 | 0;
        $28 = $5;
        $6 = $5 >>> 0 < $7 >>> 0 ? $6 + 1 | 0 : $6;
        $22 = $6;
        $10 = $3;
        $3 = $5;
        $7 = $29;
        if (($6 | 0) == ($10 | 0) & $3 >>> 0 < $7 >>> 0 | $6 >>> 0 < $10 >>> 0) {
         $10 = $4;
         $3 = $14;
         $5 = $3;
         $7 = $17;
         $8 = $7 + 1 | 0;
         if ($8 >>> 0 < 1) {
          $5 = $5 + 1 | 0;
         }
         $17 = $8;
         $7 = $10;
         HEAP32[$7 + 56 >> 2] = $8;
         HEAP32[$7 + 60 >> 2] = $5;
         $14 = $5;
        }
        HEAP32[$4 + 48 >> 2] = $28;
        $5 = $22;
        HEAP32[$4 + 52 >> 2] = $5;
        $22 = $4;
        $7 = $13;
        $5 = $14;
        $8 = $7 + $5 | 0;
        $3 = $17;
        $10 = $15;
        $6 = $3 + $10 | 0;
        if ($6 >>> 0 < $10 >>> 0) {
         $8 = $8 + 1 | 0;
        }
        $3 = $22;
        HEAP32[$3 + 56 >> 2] = $6;
        HEAP32[$3 + 60 >> 2] = $8;
       }
       HEAP32[$9 + 16 >> 2] = $27;
       HEAP32[$9 + 20 >> 2] = $36;
       $19 = HEAP32[$9 + 12 >> 2];
       $11 = $12;
       $9 = HEAP32[HEAP32[$9 + 8 >> 2] + 4 >> 2];
       if (($26 | 0) != ($9 | 0)) {
        continue;
       }
       break;
      }
      $20 = $20 + 1 | 0;
      $16 = $38;
     }
     $26 = HEAP32[$26 >> 2];
     if (($26 | 0) != HEAP32[$32 + 8 >> 2]) {
      continue;
     }
     break;
    }
   }
   if (($21 | 0) > 0) {
    continue;
   }
   break;
  }
  $8 = HEAP32[$4 + 56 >> 2];
  $28 = $8;
  $3 = HEAP32[$4 + 60 >> 2];
  $22 = $3;
  $5 = $28;
  label$33 : {
   if (($3 | 0) < 0 ? 1 : ($3 | 0) <= 0 ? $5 >>> 0 >= 0 ? 0 : 1 : 0) {
    break label$33;
   }
   $5 = HEAP32[$4 + 48 >> 2];
   $8 = $5;
   $3 = HEAP32[$4 + 52 >> 2];
   $5 = $3;
   $3 = $22;
   $5 = $3 | $5;
   $10 = $28;
   if (!($5 | ($10 | $8))) {
    break label$33;
   }
   $18 = btConvexHullInternal__Int128__toScalar_28_29_20const($4 + 96 | 0);
   HEAPF32[($4 + 32 | 0) + (HEAP32[$0 + 108 >> 2] << 2) >> 2] = $18;
   $18 = btConvexHullInternal__Int128__toScalar_28_29_20const($4 + 80 | 0);
   HEAPF32[($4 + 32 | 0) + (HEAP32[$0 + 112 >> 2] << 2) >> 2] = $18;
   $18 = btConvexHullInternal__Int128__toScalar_28_29_20const($4 - -64 | 0);
   HEAPF32[($4 + 32 | 0) + (HEAP32[$0 + 104 >> 2] << 2) >> 2] = $18;
   $18 = Math_fround(Math_fround(1) / Math_fround(btConvexHullInternal__Int128__toScalar_28_29_20const($4 + 48 | 0) * Math_fround(4)));
   $30 = HEAPF32[$0 >> 2];
   $48 = Math_fround(Math_fround($18 * HEAPF32[$4 + 32 >> 2]) * $30);
   HEAPF32[$4 + 32 >> 2] = $48;
   $43 = HEAPF32[$0 + 4 >> 2];
   $49 = Math_fround(Math_fround($18 * HEAPF32[$4 + 36 >> 2]) * $43);
   HEAPF32[$4 + 36 >> 2] = $49;
   $44 = HEAPF32[$0 + 8 >> 2];
   $50 = Math_fround(Math_fround($18 * HEAPF32[$4 + 40 >> 2]) * $44);
   HEAPF32[$4 + 40 >> 2] = $50;
   if (!!($2 > Math_fround(0))) {
    label$35 : {
     if (($20 | 0) < 1) {
      $18 = Math_fround(3.4028234663852886e+38);
      break label$35;
     }
     $12 = ($4 + 112 | 0) + (HEAP32[$0 + 104 >> 2] << 2) | 0;
     $11 = ($4 + 112 | 0) + (HEAP32[$0 + 112 >> 2] << 2) | 0;
     $19 = ($4 + 112 | 0) + (HEAP32[$0 + 108 >> 2] << 2) | 0;
     $18 = Math_fround(3.4028234663852886e+38);
     $23 = 0;
     while (1) {
      $9 = HEAP32[($23 << 2) + $16 >> 2];
      HEAPF32[$19 >> 2] = HEAP32[$9 + 28 >> 2];
      HEAPF32[$11 >> 2] = HEAP32[$9 + 32 >> 2];
      HEAPF32[$12 >> 2] = HEAP32[$9 + 36 >> 2];
      $25 = HEAPF32[$4 + 116 >> 2];
      $34 = HEAPF32[$4 + 120 >> 2];
      $35 = HEAPF32[$4 + 112 >> 2];
      HEAPF32[$19 >> 2] = HEAP32[$9 + 44 >> 2];
      HEAPF32[$11 >> 2] = HEAP32[$9 + 48 >> 2];
      HEAPF32[$12 >> 2] = HEAP32[$9 + 52 >> 2];
      $45 = HEAPF32[$4 + 116 >> 2];
      $52 = HEAPF32[$4 + 112 >> 2];
      $46 = HEAPF32[$4 + 120 >> 2];
      HEAPF32[$19 >> 2] = HEAP32[$9 + 12 >> 2];
      HEAPF32[$11 >> 2] = HEAP32[$9 + 16 >> 2];
      HEAPF32[$12 >> 2] = HEAP32[$9 + 20 >> 2];
      $47 = Math_fround($25 * $43);
      $46 = Math_fround($44 * $46);
      $51 = Math_fround($34 * $44);
      $34 = Math_fround($43 * $45);
      $25 = Math_fround(Math_fround($47 * $46) - Math_fround($51 * $34));
      $53 = $25;
      $35 = Math_fround($35 * $30);
      $45 = Math_fround($30 * $52);
      $34 = Math_fround(Math_fround($35 * $34) - Math_fround($47 * $45));
      $47 = Math_fround($25 * $25);
      $25 = Math_fround(Math_fround($51 * $45) - Math_fround($35 * $46));
      $35 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround($34 * $34) + Math_fround($47 + Math_fround($25 * $25))))));
      $25 = Math_fround(Math_fround(Math_fround(Math_fround($53 * $35) * Math_fround(Math_fround($30 * HEAPF32[$4 + 112 >> 2]) - $48)) + Math_fround(Math_fround($25 * $35) * Math_fround(Math_fround($43 * HEAPF32[$4 + 116 >> 2]) - $49))) + Math_fround(Math_fround($34 * $35) * Math_fround(Math_fround($44 * HEAPF32[$4 + 120 >> 2]) - $50)));
      $18 = $25 < $18 ? $25 : $18;
      $23 = $23 + 1 | 0;
      if (($23 | 0) != ($20 | 0)) {
       continue;
      }
      break;
     }
     $30 = Math_fround(0);
     if (!!($18 <= Math_fround(0))) {
      break label$33;
     }
    }
    $18 = Math_fround($18 * $2);
    $1 = $18 > $1 ? $1 : $18;
   }
   $9 = 0;
   if (($20 | 0) <= 0) {
    $30 = $1;
    break label$33;
   }
   $12 = 243703;
   while (1) {
    $11 = ($9 << 2) + $16 | 0;
    $19 = HEAP32[$11 >> 2];
    $23 = (($12 >>> 0) % ($20 >>> 0) << 2) + $16 | 0;
    HEAP32[$11 >> 2] = HEAP32[$23 >> 2];
    HEAP32[$23 >> 2] = $19;
    $12 = Math_imul($12, 1664525) + 1013904223 | 0;
    $9 = $9 + 1 | 0;
    if (($20 | 0) != ($9 | 0)) {
     continue;
    }
    break;
   }
   if (($20 | 0) < 1) {
    $30 = $1;
    break label$33;
   }
   $9 = 0;
   label$41 : {
    while (1) {
     $12 = HEAP32[($9 << 2) + $16 >> 2];
     HEAP8[$4 + 24 | 0] = 1;
     HEAP32[$4 + 16 >> 2] = 0;
     HEAP32[$4 + 20 >> 2] = 0;
     HEAP32[$4 + 12 >> 2] = $21;
     $12 = btConvexHullInternal__shiftFace_28btConvexHullInternal__Face__2c_20float_2c_20btAlignedObjectArray_btConvexHullInternal__Vertex___29($0, $12, $1, $4 + 8 | 0);
     $11 = HEAP32[$4 + 20 >> 2];
     if ($11) {
      if (HEAPU8[$4 + 24 | 0]) {
       btAlignedFreeInternal_28void__29($11);
      }
      HEAP32[$4 + 20 >> 2] = 0;
     }
     HEAP32[$4 + 20 >> 2] = 0;
     HEAP32[$4 + 12 >> 2] = 0;
     HEAP32[$4 + 16 >> 2] = 0;
     HEAP8[$4 + 24 | 0] = 1;
     if (!$12) {
      break label$41;
     }
     $9 = $9 + 1 | 0;
     if (($20 | 0) != ($9 | 0)) {
      continue;
     }
     break;
    }
    $30 = $1;
    break label$33;
   }
   $30 = Math_fround(-$1);
  }
  if ($16) {
   btAlignedFreeInternal_28void__29($16);
  }
  if (!$31) {
   break label$2;
  }
  btAlignedFreeInternal_28void__29($31);
 }
 $0 = $4 + 128 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $30;
}
function btPolyhedralContactClipping__findSeparatingAxis_28btConvexPolyhedron_20const__2c_20btConvexPolyhedron_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btDiscreteCollisionDetectorInterface__Result__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0, $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = Math_fround(0);
 $6 = global$0 - 112 | 0;
 $16 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $16;
 HEAP32[5645] = HEAP32[5645] + 1;
 $26 = HEAPF32[$2 + 52 >> 2];
 $12 = HEAPF32[$2 + 20 >> 2];
 $17 = HEAPF32[$2 + 24 >> 2];
 $28 = HEAPF32[$3 + 52 >> 2];
 $24 = HEAPF32[$3 + 20 >> 2];
 $40 = HEAPF32[$3 + 24 >> 2];
 $27 = HEAPF32[$2 + 56 >> 2];
 $10 = HEAPF32[$2 + 36 >> 2];
 $7 = HEAPF32[$0 + 68 >> 2];
 $15 = HEAPF32[$2 + 40 >> 2];
 $8 = HEAPF32[$0 + 72 >> 2];
 $41 = HEAPF32[$3 + 56 >> 2];
 $29 = HEAPF32[$3 + 36 >> 2];
 $9 = HEAPF32[$1 + 68 >> 2];
 $34 = HEAPF32[$3 + 40 >> 2];
 $13 = HEAPF32[$1 + 72 >> 2];
 $35 = HEAPF32[$2 + 48 >> 2];
 $19 = HEAPF32[$2 + 8 >> 2];
 $36 = HEAPF32[$2 >> 2];
 $37 = HEAPF32[$2 + 4 >> 2];
 $38 = HEAPF32[$3 + 48 >> 2];
 $39 = HEAPF32[$3 + 8 >> 2];
 $30 = HEAPF32[$3 >> 2];
 $31 = HEAPF32[$3 + 4 >> 2];
 $20 = HEAPF32[$2 + 16 >> 2];
 $32 = HEAPF32[$3 + 16 >> 2];
 $21 = HEAPF32[$2 + 32 >> 2];
 $23 = HEAPF32[$0 + 64 >> 2];
 $33 = HEAPF32[$3 + 32 >> 2];
 $25 = HEAPF32[$1 + 64 >> 2];
 HEAP32[$6 + 28 >> 2] = 0;
 $27 = Math_fround(Math_fround($27 + Math_fround(Math_fround(Math_fround($23 * $21) + Math_fround($7 * $10)) + Math_fround($8 * $15))) - Math_fround($41 + Math_fround(Math_fround(Math_fround($25 * $33) + Math_fround($9 * $29)) + Math_fround($13 * $34))));
 HEAPF32[$6 + 24 >> 2] = $27;
 $26 = Math_fround(Math_fround($26 + Math_fround(Math_fround(Math_fround($23 * $20) + Math_fround($7 * $12)) + Math_fround($8 * $17))) - Math_fround($28 + Math_fround(Math_fround(Math_fround($25 * $32) + Math_fround($9 * $24)) + Math_fround($13 * $40))));
 HEAPF32[$6 + 20 >> 2] = $26;
 $23 = Math_fround(Math_fround($35 + Math_fround(Math_fround(Math_fround($23 * $36) + Math_fround($7 * $37)) + Math_fround($8 * $19))) - Math_fround($38 + Math_fround(Math_fround(Math_fround($25 * $30) + Math_fround($9 * $31)) + Math_fround($13 * $39))));
 HEAPF32[$6 + 16 >> 2] = $23;
 $13 = Math_fround(3.4028234663852886e+38);
 label$2 : {
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       $22 = HEAP32[$0 + 28 >> 2];
       if (($22 | 0) < 1) {
        break label$7;
       }
       while (1) {
        $11 = HEAP32[$0 + 36 >> 2] + Math_imul($14, 36) | 0;
        $7 = HEAPF32[$11 + 28 >> 2];
        $8 = HEAPF32[$11 + 24 >> 2];
        $9 = HEAPF32[$11 + 20 >> 2];
        $25 = HEAPF32[$2 >> 2];
        $28 = HEAPF32[$2 + 4 >> 2];
        HEAP32[$6 + 12 >> 2] = 0;
        $10 = Math_fround(Math_fround(Math_fround($9 * $21) + Math_fround($8 * $10)) + Math_fround($7 * $15));
        HEAPF32[$6 + 8 >> 2] = $10;
        $12 = Math_fround(Math_fround(Math_fround($9 * $20) + Math_fround($8 * $12)) + Math_fround($7 * $17));
        HEAPF32[$6 + 4 >> 2] = $12;
        $7 = Math_fround(Math_fround(Math_fround($9 * $25) + Math_fround($8 * $28)) + Math_fround($7 * $19));
        HEAPF32[$6 >> 2] = $7;
        if (!!(Math_fround(Math_fround(Math_fround($7 * $23) + Math_fround($12 * $26)) + Math_fround($10 * $27)) < Math_fround(0))) {
         HEAPF32[$6 + 8 >> 2] = -$10;
         HEAPF32[$6 + 4 >> 2] = -$12;
         HEAPF32[$6 >> 2] = -$7;
        }
        HEAP32[5643] = HEAP32[5643] + 1;
        label$10 : {
         if (HEAPU8[19876]) {
          if (!TestInternalObjects_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btConvexPolyhedron_20const__2c_20btConvexPolyhedron_20const__2c_20float_29($2, $3, $6 + 16 | 0, $6, $0, $1, $13)) {
           break label$10;
          }
         }
         $11 = 0;
         HEAP32[5644] = HEAP32[5644] + 1;
         btConvexPolyhedron__project_28btTransform_20const__2c_20btVector3_20const__2c_20float__2c_20float__2c_20btVector3__2c_20btVector3__29_20const($0, $2, $6, $6 + 108 | 0, $6 + 104 | 0, $6 + 80 | 0, $6 - -64 | 0);
         btConvexPolyhedron__project_28btTransform_20const__2c_20btVector3_20const__2c_20float__2c_20float__2c_20btVector3__2c_20btVector3__29_20const($1, $3, $6, $6 + 100 | 0, $6 + 96 | 0, $6 + 48 | 0, $6 + 32 | 0);
         $7 = HEAPF32[$6 + 104 >> 2];
         $8 = HEAPF32[$6 + 100 >> 2];
         label$12 : {
          if ($7 < $8) {
           break label$12;
          }
          $9 = HEAPF32[$6 + 96 >> 2];
          $10 = HEAPF32[$6 + 108 >> 2];
          if ($9 < $10) {
           break label$12;
          }
          $7 = Math_fround($7 - $8);
          $8 = Math_fround($9 - $10);
          $24 = $7 < $8 ? $7 : $8;
          $11 = 1;
         }
         if (!$11) {
          break label$6;
         }
         if (!($24 < $13)) {
          break label$10;
         }
         $16 = HEAP32[$6 + 4 >> 2];
         $18 = HEAP32[$6 >> 2];
         HEAP32[$4 >> 2] = $18;
         HEAP32[$4 + 4 >> 2] = $16;
         $18 = HEAP32[$6 + 12 >> 2];
         $16 = HEAP32[$6 + 8 >> 2];
         HEAP32[$4 + 8 >> 2] = $16;
         HEAP32[$4 + 12 >> 2] = $18;
         $13 = $24;
        }
        $14 = $14 + 1 | 0;
        if (($22 | 0) == ($14 | 0)) {
         break label$7;
        }
        $15 = HEAPF32[$2 + 40 >> 2];
        $10 = HEAPF32[$2 + 36 >> 2];
        $21 = HEAPF32[$2 + 32 >> 2];
        $17 = HEAPF32[$2 + 24 >> 2];
        $12 = HEAPF32[$2 + 20 >> 2];
        $20 = HEAPF32[$2 + 16 >> 2];
        $19 = HEAPF32[$2 + 8 >> 2];
        continue;
       }
      }
      $22 = HEAP32[$1 + 28 >> 2];
      if (($22 | 0) >= 1) {
       $14 = 0;
       while (1) {
        $11 = HEAP32[$1 + 36 >> 2] + Math_imul($14, 36) | 0;
        $7 = HEAPF32[$11 + 28 >> 2];
        $8 = HEAPF32[$11 + 20 >> 2];
        $9 = HEAPF32[$11 + 24 >> 2];
        $17 = HEAPF32[$3 + 8 >> 2];
        $15 = HEAPF32[$3 >> 2];
        $19 = HEAPF32[$3 + 4 >> 2];
        $12 = HEAPF32[$3 + 24 >> 2];
        $20 = HEAPF32[$3 + 16 >> 2];
        $21 = HEAPF32[$3 + 20 >> 2];
        $10 = HEAPF32[$3 + 40 >> 2];
        $25 = HEAPF32[$3 + 32 >> 2];
        $28 = HEAPF32[$3 + 36 >> 2];
        HEAP32[$6 + 12 >> 2] = 0;
        $10 = Math_fround(Math_fround(Math_fround($8 * $25) + Math_fround($9 * $28)) + Math_fround($7 * $10));
        HEAPF32[$6 + 8 >> 2] = $10;
        $12 = Math_fround(Math_fround(Math_fround($8 * $20) + Math_fround($9 * $21)) + Math_fround($7 * $12));
        HEAPF32[$6 + 4 >> 2] = $12;
        $7 = Math_fround(Math_fround(Math_fround($8 * $15) + Math_fround($9 * $19)) + Math_fround($7 * $17));
        HEAPF32[$6 >> 2] = $7;
        if (!!(Math_fround(Math_fround(Math_fround($7 * $23) + Math_fround($12 * $26)) + Math_fround($10 * $27)) < Math_fround(0))) {
         HEAPF32[$6 + 8 >> 2] = -$10;
         HEAPF32[$6 + 4 >> 2] = -$12;
         HEAPF32[$6 >> 2] = -$7;
        }
        HEAP32[5643] = HEAP32[5643] + 1;
        label$16 : {
         if (HEAPU8[19876]) {
          if (!TestInternalObjects_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btConvexPolyhedron_20const__2c_20btConvexPolyhedron_20const__2c_20float_29($2, $3, $6 + 16 | 0, $6, $0, $1, $13)) {
           break label$16;
          }
         }
         $11 = 0;
         HEAP32[5644] = HEAP32[5644] + 1;
         btConvexPolyhedron__project_28btTransform_20const__2c_20btVector3_20const__2c_20float__2c_20float__2c_20btVector3__2c_20btVector3__29_20const($0, $2, $6, $6 + 108 | 0, $6 + 104 | 0, $6 + 80 | 0, $6 - -64 | 0);
         btConvexPolyhedron__project_28btTransform_20const__2c_20btVector3_20const__2c_20float__2c_20float__2c_20btVector3__2c_20btVector3__29_20const($1, $3, $6, $6 + 100 | 0, $6 + 96 | 0, $6 + 48 | 0, $6 + 32 | 0);
         $7 = HEAPF32[$6 + 104 >> 2];
         $8 = HEAPF32[$6 + 100 >> 2];
         label$18 : {
          if ($7 < $8) {
           break label$18;
          }
          $9 = HEAPF32[$6 + 96 >> 2];
          $10 = HEAPF32[$6 + 108 >> 2];
          if ($9 < $10) {
           break label$18;
          }
          $7 = Math_fround($7 - $8);
          $8 = Math_fround($9 - $10);
          $24 = $7 < $8 ? $7 : $8;
          $11 = 1;
         }
         if (!$11) {
          break label$6;
         }
         if (!($24 < $13)) {
          break label$16;
         }
         $16 = HEAP32[$6 + 4 >> 2];
         $18 = HEAP32[$6 >> 2];
         HEAP32[$4 >> 2] = $18;
         HEAP32[$4 + 4 >> 2] = $16;
         $18 = HEAP32[$6 + 12 >> 2];
         $16 = HEAP32[$6 + 8 >> 2];
         HEAP32[$4 + 8 >> 2] = $16;
         HEAP32[$4 + 12 >> 2] = $18;
         $13 = $24;
        }
        $14 = $14 + 1 | 0;
        if (($22 | 0) != ($14 | 0)) {
         continue;
        }
        break;
       }
      }
      $14 = HEAP32[$0 + 48 >> 2];
      if (($14 | 0) >= 1) {
       break label$5;
      }
      $16 = -1;
      $18 = -1;
      break label$4;
     }
     $3 = 0;
     break label$2;
    }
    $11 = HEAP32[$1 + 48 >> 2];
    $18 = -1;
    $22 = 0;
    $16 = -1;
    while (1) {
     if (($11 | 0) >= 1) {
      $14 = HEAP32[$0 + 56 >> 2] + ($22 << 4) | 0;
      $7 = HEAPF32[$14 >> 2];
      $8 = HEAPF32[$14 + 4 >> 2];
      $9 = HEAPF32[$14 + 8 >> 2];
      $12 = Math_fround(Math_fround(Math_fround($7 * HEAPF32[$2 + 32 >> 2]) + Math_fround($8 * HEAPF32[$2 + 36 >> 2])) + Math_fround($9 * HEAPF32[$2 + 40 >> 2]));
      $17 = Math_fround(Math_fround(Math_fround($7 * HEAPF32[$2 + 16 >> 2]) + Math_fround($8 * HEAPF32[$2 + 20 >> 2])) + Math_fround($9 * HEAPF32[$2 + 24 >> 2]));
      $15 = Math_fround(Math_fround(Math_fround($7 * HEAPF32[$2 >> 2]) + Math_fround($8 * HEAPF32[$2 + 4 >> 2])) + Math_fround($9 * HEAPF32[$2 + 8 >> 2]));
      $14 = 0;
      while (1) {
       $11 = HEAP32[$1 + 56 >> 2] + ($14 << 4) | 0;
       $7 = HEAPF32[$11 + 8 >> 2];
       $8 = HEAPF32[$11 >> 2];
       $9 = HEAPF32[$11 + 4 >> 2];
       $21 = HEAPF32[$3 + 40 >> 2];
       $25 = HEAPF32[$3 + 32 >> 2];
       $28 = HEAPF32[$3 + 36 >> 2];
       $10 = HEAPF32[$3 + 24 >> 2];
       $19 = HEAPF32[$3 + 16 >> 2];
       $20 = HEAPF32[$3 + 20 >> 2];
       $24 = HEAPF32[$3 + 8 >> 2];
       $40 = HEAPF32[$3 >> 2];
       $41 = HEAPF32[$3 + 4 >> 2];
       HEAP32[$6 + 12 >> 2] = 0;
       $19 = Math_fround(Math_fround(Math_fround($8 * $19) + Math_fround($9 * $20)) + Math_fround($7 * $10));
       $20 = Math_fround(Math_fround(Math_fround($8 * $40) + Math_fround($9 * $41)) + Math_fround($7 * $24));
       $10 = Math_fround(Math_fround($15 * $19) - Math_fround($17 * $20));
       HEAPF32[$6 + 8 >> 2] = $10;
       $21 = Math_fround(Math_fround(Math_fround($8 * $25) + Math_fround($9 * $28)) + Math_fround($7 * $21));
       $8 = Math_fround(Math_fround($12 * $20) - Math_fround($15 * $21));
       HEAPF32[$6 + 4 >> 2] = $8;
       $7 = Math_fround(Math_fround($17 * $21) - Math_fround($12 * $19));
       HEAPF32[$6 >> 2] = $7;
       label$22 : {
        if (+Math_fround(Math_abs($10)) > 1e-6 ^ 1 ? !(+Math_fround(Math_abs($7)) > 1e-6 | +Math_fround(Math_abs($8)) > 1e-6) : 0) {
         break label$22;
        }
        $9 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround($10 * $10) + Math_fround(Math_fround($7 * $7) + Math_fround($8 * $8))))));
        $10 = Math_fround($10 * $9);
        HEAPF32[$6 + 8 >> 2] = $10;
        $8 = Math_fround($8 * $9);
        HEAPF32[$6 + 4 >> 2] = $8;
        $7 = Math_fround($7 * $9);
        HEAPF32[$6 >> 2] = $7;
        if (!!(Math_fround(Math_fround(Math_fround($7 * $23) + Math_fround($8 * $26)) + Math_fround($27 * $10)) < Math_fround(0))) {
         HEAPF32[$6 + 8 >> 2] = -$10;
         HEAPF32[$6 + 4 >> 2] = -$8;
         HEAPF32[$6 >> 2] = -$7;
        }
        HEAP32[5643] = HEAP32[5643] + 1;
        if (HEAPU8[19876]) {
         if (!TestInternalObjects_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btConvexPolyhedron_20const__2c_20btConvexPolyhedron_20const__2c_20float_29($2, $3, $6 + 16 | 0, $6, $0, $1, $13)) {
          break label$22;
         }
        }
        $11 = 0;
        HEAP32[5644] = HEAP32[5644] + 1;
        btConvexPolyhedron__project_28btTransform_20const__2c_20btVector3_20const__2c_20float__2c_20float__2c_20btVector3__2c_20btVector3__29_20const($0, $2, $6, $6 + 108 | 0, $6 + 104 | 0, $6 + 80 | 0, $6 - -64 | 0);
        btConvexPolyhedron__project_28btTransform_20const__2c_20btVector3_20const__2c_20float__2c_20float__2c_20btVector3__2c_20btVector3__29_20const($1, $3, $6, $6 + 100 | 0, $6 + 96 | 0, $6 + 48 | 0, $6 + 32 | 0);
        $7 = HEAPF32[$6 + 104 >> 2];
        $8 = HEAPF32[$6 + 100 >> 2];
        label$26 : {
         if ($7 < $8) {
          break label$26;
         }
         $9 = HEAPF32[$6 + 96 >> 2];
         $10 = HEAPF32[$6 + 108 >> 2];
         if ($9 < $10) {
          break label$26;
         }
         $29 = Math_fround($7 - $8);
         $7 = Math_fround($9 - $10);
         if (!!($29 < $7)) {
          $11 = 1;
          $37 = HEAPF32[$6 + 56 >> 2];
          $38 = HEAPF32[$6 + 52 >> 2];
          $39 = HEAPF32[$6 + 48 >> 2];
          $34 = HEAPF32[$6 + 72 >> 2];
          $35 = HEAPF32[$6 + 68 >> 2];
          $36 = HEAPF32[$6 + 64 >> 2];
          break label$26;
         }
         $11 = 1;
         $37 = HEAPF32[$6 + 40 >> 2];
         $38 = HEAPF32[$6 + 36 >> 2];
         $39 = HEAPF32[$6 + 32 >> 2];
         $34 = HEAPF32[$6 + 88 >> 2];
         $35 = HEAPF32[$6 + 84 >> 2];
         $36 = HEAPF32[$6 + 80 >> 2];
         $29 = $7;
        }
        if (!$11) {
         break label$3;
        }
        if (!($29 < $13)) {
         break label$22;
        }
        $16 = HEAP32[$6 + 4 >> 2];
        $18 = HEAP32[$6 >> 2];
        HEAP32[$4 >> 2] = $18;
        HEAP32[$4 + 4 >> 2] = $16;
        $18 = HEAP32[$6 + 12 >> 2];
        $16 = HEAP32[$6 + 8 >> 2];
        HEAP32[$4 + 8 >> 2] = $16;
        HEAP32[$4 + 12 >> 2] = $18;
        $44 = $39;
        $45 = $38;
        $46 = $37;
        $47 = $36;
        $48 = $35;
        $49 = $34;
        $30 = $20;
        $31 = $19;
        $32 = $21;
        $33 = $15;
        $42 = $17;
        $43 = $12;
        $16 = $22;
        $18 = $14;
        $13 = $29;
       }
       $14 = $14 + 1 | 0;
       $11 = HEAP32[$1 + 48 >> 2];
       if (($14 | 0) < ($11 | 0)) {
        continue;
       }
       break;
      }
      $14 = HEAP32[$0 + 48 >> 2];
     }
     $22 = $22 + 1 | 0;
     if (($22 | 0) < ($14 | 0)) {
      continue;
     }
     break;
    }
   }
   label$28 : {
    if (($16 | $18) < 0) {
     break label$28;
    }
    $13 = Math_fround($44 - $47);
    $10 = Math_fround($45 - $48);
    $12 = Math_fround($46 - $49);
    $8 = Math_fround(Math_fround(Math_fround($13 * $30) + Math_fround($10 * $31)) + Math_fround($12 * $32));
    $17 = Math_fround(Math_fround(Math_fround($13 * $33) + Math_fround($10 * $42)) + Math_fround($12 * $43));
    $7 = Math_fround(0);
    $9 = Math_fround(Math_fround(Math_fround($30 * $33) + Math_fround($31 * $42)) + Math_fround($32 * $43));
    $15 = Math_fround(Math_fround(1) - Math_fround($9 * $9));
    label$29 : {
     if ($15 == Math_fround(0)) {
      break label$29;
     }
     $7 = Math_fround(-1.0000000150474662e+30);
     $15 = Math_fround(Math_fround($17 - Math_fround($8 * $9)) / $15);
     if ($15 < Math_fround(-1.0000000150474662e+30)) {
      break label$29;
     }
     $7 = $15;
     if (!($7 > Math_fround(1.0000000150474662e+30))) {
      break label$29;
     }
     $7 = Math_fround(1.0000000150474662e+30);
    }
    $8 = Math_fround(Math_fround($9 * $7) - $8);
    label$30 : {
     if (!!($8 < Math_fround(-1.0000000150474662e+30))) {
      $9 = Math_fround($17 + Math_fround($9 * Math_fround(-1.0000000150474662e+30)));
      if ($9 < Math_fround(-1.0000000150474662e+30)) {
       $8 = Math_fround(-1.0000000150474662e+30);
       $7 = Math_fround(-1.0000000150474662e+30);
       break label$30;
      }
      $7 = Math_fround(1.0000000150474662e+30);
      if (!($9 > Math_fround(1.0000000150474662e+30))) {
       $8 = Math_fround(-1.0000000150474662e+30);
       $7 = $9;
       break label$30;
      }
      $8 = Math_fround(-1.0000000150474662e+30);
      break label$30;
     }
     if (!($8 > Math_fround(1.0000000150474662e+30))) {
      break label$30;
     }
     $7 = Math_fround(-1.0000000150474662e+30);
     $8 = Math_fround(1.0000000150474662e+30);
     $9 = Math_fround($17 + Math_fround($9 * Math_fround(1.0000000150474662e+30)));
     if ($9 < Math_fround(-1.0000000150474662e+30)) {
      break label$30;
     }
     $7 = $9;
     if (!($7 > Math_fround(1.0000000150474662e+30))) {
      break label$30;
     }
     $7 = Math_fround(1.0000000150474662e+30);
    }
    HEAP32[$6 + 92 >> 2] = 0;
    $17 = Math_fround($32 * $8);
    $9 = Math_fround($17 + Math_fround($12 - Math_fround($43 * $7)));
    HEAPF32[$6 + 88 >> 2] = $9;
    $12 = Math_fround($31 * $8);
    $10 = Math_fround($12 + Math_fround($10 - Math_fround($42 * $7)));
    HEAPF32[$6 + 84 >> 2] = $10;
    $8 = Math_fround($30 * $8);
    $7 = Math_fround($8 + Math_fround($13 - Math_fround($33 * $7)));
    HEAPF32[$6 + 80 >> 2] = $7;
    $13 = Math_fround(Math_fround($9 * $9) + Math_fround(Math_fround($7 * $7) + Math_fround($10 * $10)));
    if (!($13 > Math_fround(1.1920928955078125e-7))) {
     break label$28;
    }
    $15 = Math_fround(Math_sqrt($13));
    $13 = Math_fround(Math_fround(1) / $15);
    $9 = Math_fround($9 * $13);
    HEAPF32[$6 + 88 >> 2] = $9;
    $10 = Math_fround($10 * $13);
    HEAPF32[$6 + 84 >> 2] = $10;
    $7 = Math_fround($7 * $13);
    HEAPF32[$6 + 80 >> 2] = $7;
    if (!!(Math_fround(Math_fround(Math_fround($7 * $23) + Math_fround($10 * $26)) + Math_fround($9 * $27)) < Math_fround(0))) {
     HEAPF32[$6 + 88 >> 2] = -$9;
     HEAPF32[$6 + 84 >> 2] = -$10;
     HEAPF32[$6 + 80 >> 2] = -$7;
    }
    HEAP32[$6 + 76 >> 2] = 0;
    HEAPF32[$6 + 72 >> 2] = $46 + $17;
    HEAPF32[$6 + 68 >> 2] = $45 + $12;
    HEAPF32[$6 + 64 >> 2] = $44 + $8;
    FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 16 >> 2]]($5, $6 + 80 | 0, $6 - -64 | 0, Math_fround(-$15));
   }
   $3 = 1;
   $7 = HEAPF32[$4 >> 2];
   $8 = HEAPF32[$4 + 4 >> 2];
   $9 = HEAPF32[$4 + 8 >> 2];
   if (!(Math_fround(Math_fround(Math_fround($23 * $7) + Math_fround($26 * $8)) + Math_fround($27 * $9)) < Math_fround(0))) {
    break label$2;
   }
   HEAP32[$4 + 12 >> 2] = 0;
   HEAPF32[$4 + 8 >> 2] = -$9;
   HEAPF32[$4 + 4 >> 2] = -$8;
   HEAPF32[$4 >> 2] = -$7;
   break label$2;
  }
  $3 = 0;
 }
 $0 = $6 + 112 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $3;
}
function btHingeConstraint__buildJacobian_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = Math_fround(0), $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = 0, $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0);
 $5 = global$0 - 176 | 0;
 $18 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $18;
 if (HEAPU8[$0 + 738 | 0]) {
  HEAP32[$0 + 744 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  label$3 : {
   if (HEAPU8[$0 + 736 | 0]) {
    break label$3;
   }
   $4 = HEAPF32[$0 + 664 >> 2];
   $1 = HEAP32[$0 + 32 >> 2];
   $7 = HEAPF32[$0 + 668 >> 2];
   $2 = HEAPF32[$0 + 672 >> 2];
   $6 = Math_fround(Math_fround(Math_fround(Math_fround($4 * HEAPF32[$1 + 4 >> 2]) + Math_fround($7 * HEAPF32[$1 + 8 >> 2])) + Math_fround($2 * HEAPF32[$1 + 12 >> 2])) + HEAPF32[$1 + 52 >> 2]);
   $14 = HEAPF32[$0 + 600 >> 2];
   $3 = HEAP32[$0 + 28 >> 2];
   $8 = HEAPF32[$0 + 604 >> 2];
   $9 = HEAPF32[$0 + 608 >> 2];
   $10 = Math_fround(Math_fround(Math_fround(Math_fround($14 * HEAPF32[$3 + 4 >> 2]) + Math_fround($8 * HEAPF32[$3 + 8 >> 2])) + Math_fround($9 * HEAPF32[$3 + 12 >> 2])) + HEAPF32[$3 + 52 >> 2]);
   $15 = Math_fround($6 - $10);
   $23 = Math_fround(Math_fround(Math_fround(Math_fround($4 * HEAPF32[$1 + 20 >> 2]) + Math_fround($7 * HEAPF32[$1 + 24 >> 2])) + Math_fround($2 * HEAPF32[$1 + 28 >> 2])) + HEAPF32[$1 + 56 >> 2]);
   $24 = Math_fround(Math_fround(Math_fround(Math_fround($14 * HEAPF32[$3 + 20 >> 2]) + Math_fround($8 * HEAPF32[$3 + 24 >> 2])) + Math_fround($9 * HEAPF32[$3 + 28 >> 2])) + HEAPF32[$3 + 56 >> 2]);
   $16 = Math_fround($23 - $24);
   $25 = Math_fround(Math_fround(Math_fround(Math_fround($4 * HEAPF32[$1 + 36 >> 2]) + Math_fround($7 * HEAPF32[$1 + 40 >> 2])) + Math_fround($2 * HEAPF32[$1 + 44 >> 2])) + HEAPF32[$1 + 60 >> 2]);
   $14 = Math_fround(Math_fround(Math_fround(Math_fround($14 * HEAPF32[$3 + 36 >> 2]) + Math_fround($8 * HEAPF32[$3 + 40 >> 2])) + Math_fround($9 * HEAPF32[$3 + 44 >> 2])) + HEAPF32[$3 + 60 >> 2]);
   $4 = Math_fround($25 - $14);
   $7 = Math_fround(Math_fround(Math_fround($15 * $15) + Math_fround($16 * $16)) + Math_fround($4 * $4));
   label$4 : {
    if (!!($7 > Math_fround(1.1920928955078125e-7))) {
     HEAP32[$5 + 140 >> 2] = 0;
     $2 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($7)));
     $4 = Math_fround($4 * $2);
     HEAPF32[$5 + 136 >> 2] = $4;
     $7 = Math_fround($16 * $2);
     HEAPF32[$5 + 132 >> 2] = $7;
     $2 = Math_fround($15 * $2);
     HEAPF32[$5 + 128 >> 2] = $2;
     break label$4;
    }
    HEAP32[$5 + 136 >> 2] = 0;
    HEAP32[$5 + 140 >> 2] = 0;
    HEAP32[$5 + 128 >> 2] = 1065353216;
    HEAP32[$5 + 132 >> 2] = 0;
    $2 = Math_fround(1);
    $7 = Math_fround(0);
    $4 = Math_fround(0);
   }
   label$6 : {
    if (!!(Math_fround(Math_abs($4)) > Math_fround(.7071067690849304))) {
     $8 = Math_fround(Math_fround($4 * $4) + Math_fround($7 * $7));
     $16 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($8)));
     $8 = Math_fround($8 * $16);
     $9 = Math_fround($16 * Math_fround(-$4));
     $15 = Math_fround($2 * $9);
     $4 = Math_fround($7 * $16);
     $7 = Math_fround($4 * Math_fround(-$2));
     $16 = Math_fround(0);
     break label$6;
    }
    $8 = Math_fround(Math_fround($2 * $2) + Math_fround($7 * $7));
    $17 = $8;
    $8 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($8)));
    $15 = Math_fround($17 * $8);
    $16 = Math_fround($8 * Math_fround(-$7));
    $7 = Math_fround($4 * $16);
    $9 = Math_fround($2 * $8);
    $8 = Math_fround($9 * Math_fround(-$4));
    $4 = Math_fround(0);
   }
   HEAPF32[$5 + 168 >> 2] = $15;
   HEAPF32[$5 + 164 >> 2] = $7;
   HEAPF32[$5 + 152 >> 2] = $4;
   HEAPF32[$5 + 148 >> 2] = $9;
   HEAPF32[$5 + 160 >> 2] = $8;
   HEAPF32[$5 + 144 >> 2] = $16;
   while (1) {
    $3 = HEAP32[$0 + 28 >> 2];
    HEAP32[$5 + 80 >> 2] = HEAP32[$3 + 4 >> 2];
    HEAP32[$5 + 84 >> 2] = HEAP32[$3 + 20 >> 2];
    $18 = HEAP32[$3 + 36 >> 2];
    HEAP32[$5 + 92 >> 2] = 0;
    HEAP32[$5 + 88 >> 2] = $18;
    HEAP32[$5 + 96 >> 2] = HEAP32[$3 + 8 >> 2];
    HEAP32[$5 + 100 >> 2] = HEAP32[$3 + 24 >> 2];
    $18 = HEAP32[$3 + 40 >> 2];
    HEAP32[$5 + 108 >> 2] = 0;
    HEAP32[$5 + 104 >> 2] = $18;
    HEAP32[$5 + 112 >> 2] = HEAP32[$3 + 12 >> 2];
    HEAP32[$5 + 116 >> 2] = HEAP32[$3 + 28 >> 2];
    $18 = HEAP32[$3 + 44 >> 2];
    HEAP32[$5 + 124 >> 2] = 0;
    HEAP32[$5 + 120 >> 2] = $18;
    HEAP32[$5 + 32 >> 2] = HEAP32[$1 + 4 >> 2];
    HEAP32[$5 + 36 >> 2] = HEAP32[$1 + 20 >> 2];
    $18 = HEAP32[$1 + 36 >> 2];
    HEAP32[$5 + 44 >> 2] = 0;
    HEAP32[$5 + 40 >> 2] = $18;
    HEAP32[$5 + 48 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$5 + 52 >> 2] = HEAP32[$1 + 24 >> 2];
    $18 = HEAP32[$1 + 40 >> 2];
    HEAP32[$5 + 60 >> 2] = 0;
    HEAP32[$5 + 56 >> 2] = $18;
    HEAP32[$5 + 64 >> 2] = HEAP32[$1 + 12 >> 2];
    HEAP32[$5 + 68 >> 2] = HEAP32[$1 + 28 >> 2];
    $18 = HEAP32[$1 + 44 >> 2];
    HEAP32[$5 + 76 >> 2] = 0;
    HEAP32[$5 + 72 >> 2] = $18;
    $4 = HEAPF32[$3 + 52 >> 2];
    $7 = HEAPF32[$3 + 56 >> 2];
    $2 = HEAPF32[$3 + 60 >> 2];
    HEAP32[$5 + 28 >> 2] = 0;
    HEAPF32[$5 + 24 >> 2] = $14 - $2;
    HEAPF32[$5 + 20 >> 2] = $24 - $7;
    HEAPF32[$5 + 16 >> 2] = $10 - $4;
    $4 = HEAPF32[$1 + 52 >> 2];
    $7 = HEAPF32[$1 + 56 >> 2];
    $2 = HEAPF32[$1 + 60 >> 2];
    HEAP32[$5 + 12 >> 2] = 0;
    HEAPF32[$5 + 8 >> 2] = $25 - $2;
    HEAPF32[$5 + 4 >> 2] = $23 - $7;
    HEAPF32[$5 >> 2] = $6 - $4;
    btJacobianEntry__btJacobianEntry_28btMatrix3x3_20const__2c_20btMatrix3x3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20btVector3_20const__2c_20float_29((Math_imul($31, 84) + $0 | 0) + 48 | 0, $5 + 80 | 0, $5 + 32 | 0, $5 + 16 | 0, $5, ($5 + 128 | 0) + ($31 << 4) | 0, $3 + 456 | 0, HEAPF32[$3 + 404 >> 2], $1 + 456 | 0, HEAPF32[$1 + 404 >> 2]);
    $31 = $31 + 1 | 0;
    if (($31 | 0) == 3) {
     break label$3;
    }
    $1 = HEAP32[$0 + 32 >> 2];
    continue;
   }
  }
  $7 = HEAPF32[$0 + 576 >> 2];
  $0;
  $10 = HEAPF32[$0 + 560 >> 2];
  $0;
  $4 = HEAPF32[$0 + 592 >> 2];
  label$9 : {
   if (!!(Math_fround(Math_abs($4)) > Math_fround(.7071067690849304))) {
    $2 = Math_fround(Math_fround($4 * $4) + Math_fround($7 * $7));
    $17 = $2;
    $2 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($2)));
    $26 = Math_fround($17 * $2);
    $6 = Math_fround($2 * Math_fround(-$4));
    $27 = Math_fround($6 * $10);
    $12 = Math_fround($2 * $7);
    $17 = Math_fround($12 * Math_fround(-$10));
    break label$9;
   }
   $2 = Math_fround(Math_fround($10 * $10) + Math_fround($7 * $7));
   $17 = $2;
   $2 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($2)));
   $27 = Math_fround($17 * $2);
   $6 = Math_fround($2 * $10);
   $26 = Math_fround($6 * Math_fround(-$4));
   $13 = Math_fround($2 * Math_fround(-$7));
   $17 = Math_fround($4 * $13);
  }
  $1 = HEAP32[$0 + 32 >> 2];
  $31 = $1 + 36 | 0;
  $19 = HEAPF32[$31 >> 2];
  $18 = $1 + 20 | 0;
  $28 = HEAPF32[$18 >> 2];
  $20 = HEAPF32[$1 + 40 >> 2];
  $29 = HEAPF32[$1 + 24 >> 2];
  $30 = HEAPF32[$1 + 8 >> 2];
  $21 = HEAPF32[$1 + 44 >> 2];
  $32 = HEAPF32[$1 + 28 >> 2];
  $33 = HEAPF32[$1 + 12 >> 2];
  $3 = HEAP32[$0 + 28 >> 2];
  $23 = HEAPF32[$3 + 44 >> 2];
  $24 = HEAPF32[$3 + 36 >> 2];
  $25 = HEAPF32[$3 + 40 >> 2];
  $14 = HEAPF32[$3 + 12 >> 2];
  $8 = HEAPF32[$3 + 8 >> 2];
  $9 = HEAPF32[$3 + 28 >> 2];
  $15 = HEAPF32[$3 + 20 >> 2];
  $16 = HEAPF32[$3 + 24 >> 2];
  $34 = HEAPF32[$1 + 4 >> 2];
  $36 = HEAPF32[$3 + 4 >> 2];
  HEAP32[$0 + 344 >> 2] = 0;
  HEAP32[$0 + 328 >> 2] = 0;
  HEAP32[$0 + 308 >> 2] = 0;
  HEAP32[$0 + 312 >> 2] = 0;
  HEAP32[$0 + 300 >> 2] = 0;
  HEAP32[$0 + 304 >> 2] = 0;
  $2 = Math_fround(Math_fround(Math_fround($13 * $36) + Math_fround($6 * $8)) + Math_fround($12 * $14));
  $11 = Math_fround(Math_fround(Math_fround($13 * $15) + Math_fround($6 * $16)) + Math_fround($12 * $9));
  $6 = Math_fround(Math_fround(Math_fround($13 * $24) + Math_fround($6 * $25)) + Math_fround($12 * $23));
  $12 = Math_fround(Math_fround(Math_fround($14 * $2) + Math_fround($9 * $11)) + Math_fround($23 * $6));
  HEAPF32[$0 + 324 >> 2] = $12;
  $13 = Math_fround(Math_fround(Math_fround($2 * $8) + Math_fround($11 * $16)) + Math_fround($6 * $25));
  HEAPF32[$0 + 320 >> 2] = $13;
  $22 = Math_fround(Math_fround(Math_fround($2 * $36) + Math_fround($11 * $15)) + Math_fround($6 * $24));
  HEAPF32[$0 + 316 >> 2] = $22;
  $11 = Math_fround(-$11);
  $21 = Math_fround(Math_fround(Math_fround($32 * $11) - Math_fround($2 * $33)) - Math_fround($6 * $21));
  HEAPF32[$0 + 340 >> 2] = $21;
  $20 = Math_fround(Math_fround(Math_fround($29 * $11) - Math_fround($2 * $30)) - Math_fround($6 * $20));
  HEAPF32[$0 + 336 >> 2] = $20;
  $2 = Math_fround(Math_fround(Math_fround($28 * $11) - Math_fround($2 * $34)) - Math_fround($6 * $19));
  HEAPF32[$0 + 332 >> 2] = $2;
  $6 = HEAPF32[$3 + 460 >> 2];
  $11 = HEAPF32[$3 + 464 >> 2];
  $19 = HEAPF32[$3 + 456 >> 2];
  HEAP32[$0 + 360 >> 2] = 0;
  $11 = Math_fround($12 * $11);
  HEAPF32[$0 + 356 >> 2] = $11;
  $6 = Math_fround($13 * $6);
  HEAPF32[$0 + 352 >> 2] = $6;
  $19 = Math_fround($22 * $19);
  HEAPF32[$0 + 348 >> 2] = $19;
  $28 = HEAPF32[$1 + 460 >> 2];
  $29 = HEAPF32[$1 + 464 >> 2];
  $30 = HEAPF32[$1 + 456 >> 2];
  HEAP32[$0 + 376 >> 2] = 0;
  $29 = Math_fround($21 * $29);
  HEAPF32[$0 + 372 >> 2] = $29;
  $28 = Math_fround($20 * $28);
  HEAPF32[$0 + 368 >> 2] = $28;
  $30 = Math_fround($2 * $30);
  HEAPF32[$0 + 364 >> 2] = $30;
  HEAPF32[$0 + 380 >> 2] = Math_fround(Math_fround(Math_fround($22 * $19) + Math_fround($13 * $6)) + Math_fround($12 * $11)) + Math_fround(Math_fround(Math_fround($2 * $30) + Math_fround($20 * $28)) + Math_fround($21 * $29));
  $22 = HEAPF32[$3 + 36 >> 2];
  $21 = HEAPF32[$3 + 20 >> 2];
  $11 = HEAPF32[$3 + 40 >> 2];
  $20 = HEAPF32[$3 + 8 >> 2];
  $19 = HEAPF32[$3 + 24 >> 2];
  $28 = HEAPF32[$3 + 44 >> 2];
  $29 = HEAPF32[$3 + 12 >> 2];
  $30 = HEAPF32[$3 + 28 >> 2];
  $32 = HEAPF32[$1 + 36 >> 2];
  $33 = HEAPF32[$1 + 20 >> 2];
  $34 = HEAPF32[$1 + 40 >> 2];
  $37 = HEAPF32[$1 + 24 >> 2];
  $38 = HEAPF32[$1 + 8 >> 2];
  $39 = HEAPF32[$1 + 44 >> 2];
  $2 = HEAPF32[$1 + 28 >> 2];
  $6 = HEAPF32[$1 + 12 >> 2];
  $40 = HEAPF32[$3 + 4 >> 2];
  $41 = HEAPF32[$1 + 4 >> 2];
  HEAP32[$0 + 428 >> 2] = 0;
  HEAP32[$0 + 412 >> 2] = 0;
  HEAP32[$0 + 392 >> 2] = 0;
  HEAP32[$0 + 396 >> 2] = 0;
  HEAP32[$0 + 384 >> 2] = 0;
  HEAP32[$0 + 388 >> 2] = 0;
  $12 = Math_fround(Math_fround(Math_fround($26 * $15) + Math_fround($17 * $16)) + Math_fround($27 * $9));
  $13 = Math_fround(-$12);
  $35 = Math_fround($2 * $13);
  $2 = Math_fround(Math_fround(Math_fround($26 * $36) + Math_fround($17 * $8)) + Math_fround($27 * $14));
  $35 = Math_fround($35 - Math_fround($6 * $2));
  $6 = Math_fround(Math_fround(Math_fround($26 * $24) + Math_fround($17 * $25)) + Math_fround($27 * $23));
  $26 = Math_fround($35 - Math_fround($39 * $6));
  HEAPF32[$0 + 424 >> 2] = $26;
  $27 = Math_fround(Math_fround(Math_fround($37 * $13) - Math_fround($2 * $38)) - Math_fround($6 * $34));
  HEAPF32[$0 + 420 >> 2] = $27;
  $17 = Math_fround(Math_fround(Math_fround($33 * $13) - Math_fround($2 * $41)) - Math_fround($6 * $32));
  HEAPF32[$0 + 416 >> 2] = $17;
  $13 = Math_fround(Math_fround(Math_fround($2 * $29) + Math_fround($12 * $30)) + Math_fround($6 * $28));
  HEAPF32[$0 + 408 >> 2] = $13;
  $11 = Math_fround(Math_fround(Math_fround($2 * $20) + Math_fround($12 * $19)) + Math_fround($6 * $11));
  HEAPF32[$0 + 404 >> 2] = $11;
  $2 = Math_fround(Math_fround(Math_fround($2 * $40) + Math_fround($12 * $21)) + Math_fround($6 * $22));
  HEAPF32[$0 + 400 >> 2] = $2;
  $6 = HEAPF32[$3 + 460 >> 2];
  $12 = HEAPF32[$3 + 464 >> 2];
  $22 = HEAPF32[$3 + 456 >> 2];
  HEAP32[$0 + 444 >> 2] = 0;
  $12 = Math_fround($13 * $12);
  HEAPF32[$0 + 440 >> 2] = $12;
  $6 = Math_fround($11 * $6);
  HEAPF32[$0 + 436 >> 2] = $6;
  $22 = Math_fround($2 * $22);
  HEAPF32[$0 + 432 >> 2] = $22;
  $21 = HEAPF32[$1 + 460 >> 2];
  $20 = HEAPF32[$1 + 464 >> 2];
  $19 = HEAPF32[$1 + 456 >> 2];
  HEAP32[$0 + 460 >> 2] = 0;
  $20 = Math_fround($26 * $20);
  HEAPF32[$0 + 456 >> 2] = $20;
  $21 = Math_fround($27 * $21);
  HEAPF32[$0 + 452 >> 2] = $21;
  $19 = Math_fround($17 * $19);
  HEAPF32[$0 + 448 >> 2] = $19;
  HEAPF32[$0 + 464 >> 2] = Math_fround(Math_fround(Math_fround($2 * $22) + Math_fround($11 * $6)) + Math_fround($13 * $12)) + Math_fround(Math_fround(Math_fround($17 * $19) + Math_fround($27 * $21)) + Math_fround($26 * $20));
  $26 = HEAPF32[$3 + 36 >> 2];
  $27 = HEAPF32[$3 + 20 >> 2];
  $12 = HEAPF32[$3 + 40 >> 2];
  $17 = HEAPF32[$3 + 8 >> 2];
  $13 = HEAPF32[$3 + 24 >> 2];
  $11 = HEAPF32[$3 + 44 >> 2];
  $22 = HEAPF32[$3 + 12 >> 2];
  $21 = HEAPF32[$3 + 28 >> 2];
  $20 = HEAPF32[$1 + 36 >> 2];
  $19 = HEAPF32[$1 + 20 >> 2];
  $28 = HEAPF32[$1 + 40 >> 2];
  $29 = HEAPF32[$1 + 24 >> 2];
  $30 = HEAPF32[$1 + 8 >> 2];
  $32 = HEAPF32[$1 + 44 >> 2];
  $2 = HEAPF32[$1 + 28 >> 2];
  $33 = HEAPF32[$1 + 12 >> 2];
  $34 = HEAPF32[$3 + 4 >> 2];
  $37 = HEAPF32[$1 + 4 >> 2];
  HEAP32[$0 + 512 >> 2] = 0;
  HEAP32[$0 + 496 >> 2] = 0;
  HEAP32[$0 + 476 >> 2] = 0;
  HEAP32[$0 + 480 >> 2] = 0;
  HEAP32[$0 + 468 >> 2] = 0;
  HEAP32[$0 + 472 >> 2] = 0;
  $6 = Math_fround(Math_fround(Math_fround($15 * $10) + Math_fround($16 * $7)) + Math_fround($4 * $9));
  $9 = Math_fround(-$6);
  $35 = Math_fround($2 * $9);
  $2 = Math_fround(Math_fround(Math_fround($36 * $10) + Math_fround($8 * $7)) + Math_fround($4 * $14));
  $4 = Math_fround(Math_fround(Math_fround($24 * $10) + Math_fround($25 * $7)) + Math_fround($4 * $23));
  $7 = Math_fround(Math_fround($35 - Math_fround($33 * $2)) - Math_fround($32 * $4));
  HEAPF32[$0 + 508 >> 2] = $7;
  $10 = Math_fround(Math_fround(Math_fround($29 * $9) - Math_fround($2 * $30)) - Math_fround($4 * $28));
  HEAPF32[$0 + 504 >> 2] = $10;
  $23 = Math_fround(Math_fround(Math_fround($19 * $9) - Math_fround($2 * $37)) - Math_fround($4 * $20));
  HEAPF32[$0 + 500 >> 2] = $23;
  $24 = Math_fround(Math_fround(Math_fround($2 * $22) + Math_fround($6 * $21)) + Math_fround($4 * $11));
  HEAPF32[$0 + 492 >> 2] = $24;
  $25 = Math_fround(Math_fround(Math_fround($2 * $17) + Math_fround($6 * $13)) + Math_fround($4 * $12));
  HEAPF32[$0 + 488 >> 2] = $25;
  $4 = Math_fround(Math_fround(Math_fround($2 * $34) + Math_fround($6 * $27)) + Math_fround($4 * $26));
  HEAPF32[$0 + 484 >> 2] = $4;
  $2 = HEAPF32[$3 + 460 >> 2];
  $6 = HEAPF32[$3 + 464 >> 2];
  $14 = HEAPF32[$3 + 456 >> 2];
  HEAP32[$0 + 528 >> 2] = 0;
  $6 = Math_fround($24 * $6);
  HEAPF32[$0 + 524 >> 2] = $6;
  $2 = Math_fround($25 * $2);
  HEAPF32[$0 + 520 >> 2] = $2;
  $14 = Math_fround($4 * $14);
  HEAPF32[$0 + 516 >> 2] = $14;
  $8 = HEAPF32[$1 + 460 >> 2];
  $9 = HEAPF32[$1 + 464 >> 2];
  $15 = HEAPF32[$1 + 456 >> 2];
  HEAP32[$0 + 724 >> 2] = 0;
  HEAP32[$0 + 544 >> 2] = 0;
  $9 = Math_fround($7 * $9);
  HEAPF32[$0 + 540 >> 2] = $9;
  $8 = Math_fround($10 * $8);
  HEAPF32[$0 + 536 >> 2] = $8;
  $15 = Math_fround($23 * $15);
  HEAPF32[$0 + 532 >> 2] = $15;
  HEAPF32[$0 + 548 >> 2] = Math_fround(Math_fround(Math_fround($4 * $14) + Math_fround($25 * $2)) + Math_fround($24 * $6)) + Math_fround(Math_fround(Math_fround($23 * $15) + Math_fround($10 * $8)) + Math_fround($7 * $9));
  $4 = btHingeConstraint__getHingeAngle_28btTransform_20const__2c_20btTransform_20const__29($0, $3 + 4 | 0, $1 + 4 | 0);
  HEAPF32[$0 + 728 >> 2] = $4;
  btAngularLimit__test_28float_29($0 + 688 | 0, $4);
  $2 = HEAPF32[$0 + 560 >> 2];
  $1 = HEAP32[$0 + 28 >> 2];
  $6 = HEAPF32[$0 + 576 >> 2];
  $10 = HEAPF32[$0 + 592 >> 2];
  $4 = Math_fround(Math_fround(Math_fround($2 * HEAPF32[$1 + 4 >> 2]) + Math_fround($6 * HEAPF32[$1 + 8 >> 2])) + Math_fround($10 * HEAPF32[$1 + 12 >> 2]));
  $7 = Math_fround(Math_fround(Math_fround($2 * HEAPF32[$1 + 20 >> 2]) + Math_fround($6 * HEAPF32[$1 + 24 >> 2])) + Math_fround($10 * HEAPF32[$1 + 28 >> 2]));
  $2 = Math_fround(Math_fround(Math_fround($2 * HEAPF32[$1 + 36 >> 2]) + Math_fround($6 * HEAPF32[$1 + 40 >> 2])) + Math_fround($10 * HEAPF32[$1 + 44 >> 2]));
  $10 = Math_fround(Math_fround(Math_fround($4 * Math_fround(Math_fround(Math_fround($4 * HEAPF32[$1 + 324 >> 2]) + Math_fround($7 * HEAPF32[$1 + 340 >> 2])) + Math_fround($2 * HEAPF32[$1 + 356 >> 2]))) + Math_fround($7 * Math_fround(Math_fround(Math_fround($4 * HEAPF32[$1 + 328 >> 2]) + Math_fround($7 * HEAPF32[$1 + 344 >> 2])) + Math_fround($2 * HEAPF32[$1 + 360 >> 2])))) + Math_fround($2 * Math_fround(Math_fround(Math_fround($4 * HEAPF32[$1 + 332 >> 2]) + Math_fround($7 * HEAPF32[$1 + 348 >> 2])) + Math_fround($2 * HEAPF32[$1 + 364 >> 2]))));
  $1 = HEAP32[$0 + 32 >> 2];
  HEAPF32[$0 + 720 >> 2] = Math_fround(1) / Math_fround($10 + Math_fround(Math_fround(Math_fround($4 * Math_fround(Math_fround(Math_fround($4 * HEAPF32[$1 + 324 >> 2]) + Math_fround($7 * HEAPF32[$1 + 340 >> 2])) + Math_fround($2 * HEAPF32[$1 + 356 >> 2]))) + Math_fround($7 * Math_fround(Math_fround(Math_fround($4 * HEAPF32[$1 + 328 >> 2]) + Math_fround($7 * HEAPF32[$1 + 344 >> 2])) + Math_fround($2 * HEAPF32[$1 + 360 >> 2])))) + Math_fround($2 * Math_fround(Math_fround(Math_fround($4 * HEAPF32[$1 + 332 >> 2]) + Math_fround($7 * HEAPF32[$1 + 348 >> 2])) + Math_fround($2 * HEAPF32[$1 + 364 >> 2])))));
 }
 $0 = $5 + 176 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHingeConstraint__getInfo2InternalUsingFrameOffset_28btTypedConstraint__btConstraintInfo2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = 0, $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = 0, $27 = Math_fround(0), $28 = 0, $29 = Math_fround(0), $30 = 0, $31 = 0, $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = 0, $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = Math_fround(0), $50 = Math_fround(0), $51 = Math_fround(0), $52 = Math_fround(0), $53 = Math_fround(0), $54 = Math_fround(0), $55 = Math_fround(0), $56 = Math_fround(0), $57 = Math_fround(0), $58 = Math_fround(0), $59 = Math_fround(0), $60 = Math_fround(0), $61 = Math_fround(0), $62 = Math_fround(0), $63 = Math_fround(0), $64 = Math_fround(0), $65 = Math_fround(0), $66 = 0, $67 = Math_fround(0), $68 = 0;
 $6 = global$0 + -64 | 0;
 $22 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $22;
 $50 = HEAPF32[$0 + 588 >> 2];
 $51 = HEAPF32[$0 + 572 >> 2];
 $52 = HEAPF32[$0 + 556 >> 2];
 $15 = HEAPF32[$3 + 56 >> 2];
 $25 = HEAPF32[$3 + 52 >> 2];
 $10 = HEAPF32[$0 + 664 >> 2];
 $8 = HEAPF32[$0 + 668 >> 2];
 $16 = HEAPF32[$0 + 672 >> 2];
 $20 = HEAPF32[$2 + 56 >> 2];
 $39 = HEAPF32[$2 + 52 >> 2];
 $19 = HEAPF32[$0 + 600 >> 2];
 $17 = HEAPF32[$0 + 604 >> 2];
 $24 = HEAPF32[$0 + 608 >> 2];
 $40 = HEAPF32[$3 + 36 >> 2];
 $41 = HEAPF32[$3 + 40 >> 2];
 $32 = HEAPF32[$2 + 36 >> 2];
 $33 = HEAPF32[$2 + 40 >> 2];
 $9 = HEAPF32[$0 + 624 >> 2];
 $42 = HEAPF32[$3 + 20 >> 2];
 $13 = HEAPF32[$0 + 640 >> 2];
 $43 = HEAPF32[$3 + 24 >> 2];
 $11 = HEAPF32[$0 + 656 >> 2];
 $18 = HEAPF32[$0 + 560 >> 2];
 $36 = HEAPF32[$2 + 20 >> 2];
 $27 = HEAPF32[$0 + 576 >> 2];
 $37 = HEAPF32[$2 + 24 >> 2];
 $23 = HEAPF32[$0 + 592 >> 2];
 $21 = HEAP32[$1 + 24 >> 2];
 $44 = HEAPF32[$3 + 48 >> 2];
 $45 = HEAPF32[$2 + 48 >> 2];
 $46 = HEAPF32[$3 + 32 >> 2];
 $38 = HEAPF32[$2 + 32 >> 2];
 $47 = HEAPF32[$3 + 8 >> 2];
 $48 = HEAPF32[$3 >> 2];
 $49 = HEAPF32[$3 + 4 >> 2];
 $53 = HEAPF32[$2 + 8 >> 2];
 $54 = HEAPF32[$2 >> 2];
 $55 = HEAPF32[$2 + 4 >> 2];
 $64 = HEAPF32[$3 + 16 >> 2];
 $29 = HEAPF32[HEAP32[$0 + 32 >> 2] + 404 >> 2];
 $65 = HEAPF32[HEAP32[$0 + 28 >> 2] + 404 >> 2];
 $56 = HEAPF32[$2 + 16 >> 2];
 HEAP32[$6 + 60 >> 2] = 0;
 $7 = Math_fround($65 + $29);
 $7 = $7 > Math_fround(0) ? Math_fround($29 / $7) : Math_fround(.5);
 $14 = Math_fround(Math_fround(1) - $7);
 $57 = Math_fround(Math_fround(Math_fround($18 * $38) + Math_fround($27 * $32)) + Math_fround($23 * $33));
 $58 = Math_fround(Math_fround(Math_fround($9 * $46) + Math_fround($13 * $40)) + Math_fround($11 * $41));
 $34 = Math_fround(Math_fround($57 * $7) + Math_fround($58 * $14));
 $59 = $34;
 $67 = Math_fround($34 * $34);
 $34 = Math_fround(Math_fround(Math_fround($54 * $18) + Math_fround($55 * $27)) + Math_fround($53 * $23));
 $60 = Math_fround(Math_fround(Math_fround($48 * $9) + Math_fround($49 * $13)) + Math_fround($47 * $11));
 $61 = Math_fround(Math_fround($34 * $7) + Math_fround($60 * $14));
 $62 = Math_fround(Math_fround(Math_fround($18 * $56) + Math_fround($27 * $36)) + Math_fround($23 * $37));
 $63 = Math_fround(Math_fround(Math_fround($9 * $64) + Math_fround($13 * $42)) + Math_fround($11 * $43));
 $13 = Math_fround(Math_fround($62 * $7) + Math_fround($63 * $14));
 $11 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround($67 + Math_fround(Math_fround($61 * $61) + Math_fround($13 * $13))))));
 $9 = Math_fround($59 * $11);
 HEAPF32[$6 + 56 >> 2] = $9;
 $13 = Math_fround($13 * $11);
 HEAPF32[$6 + 52 >> 2] = $13;
 $11 = Math_fround($61 * $11);
 HEAPF32[$6 + 48 >> 2] = $11;
 HEAP32[$6 + 28 >> 2] = 0;
 $46 = Math_fround($15 + Math_fround(Math_fround(Math_fround($46 * $10) + Math_fround($40 * $8)) + Math_fround($41 * $16)));
 $18 = Math_fround($46 - $15);
 $59 = $18;
 $15 = Math_fround($18 * $9);
 $47 = Math_fround($44 + Math_fround(Math_fround(Math_fround($48 * $10) + Math_fround($49 * $8)) + Math_fround($47 * $16)));
 $18 = Math_fround($47 - $44);
 $44 = Math_fround($25 + Math_fround(Math_fround(Math_fround($64 * $10) + Math_fround($42 * $8)) + Math_fround($43 * $16)));
 $16 = Math_fround($44 - $25);
 $8 = Math_fround($15 + Math_fround(Math_fround($18 * $11) + Math_fround($16 * $13)));
 $27 = Math_fround($9 * $8);
 $23 = Math_fround($59 - $27);
 $48 = Math_fround($20 + Math_fround(Math_fround(Math_fround($38 * $19) + Math_fround($32 * $17)) + Math_fround($33 * $24)));
 $10 = Math_fround($48 - $20);
 $49 = Math_fround($45 + Math_fround(Math_fround(Math_fround($54 * $19) + Math_fround($55 * $17)) + Math_fround($53 * $24)));
 $15 = Math_fround($49 - $45);
 $45 = Math_fround($39 + Math_fround(Math_fround(Math_fround($56 * $19) + Math_fround($36 * $17)) + Math_fround($37 * $24)));
 $17 = Math_fround($45 - $39);
 $19 = Math_fround(Math_fround($10 * $9) + Math_fround(Math_fround($15 * $11) + Math_fround($17 * $13)));
 $24 = Math_fround($9 * $19);
 $25 = Math_fround($10 - $24);
 $10 = Math_fround(Math_fround($7 * $23) + Math_fround($14 * $25));
 HEAPF32[$6 + 24 >> 2] = $10;
 $20 = Math_fround($13 * $8);
 $39 = Math_fround($16 - $20);
 $40 = Math_fround($13 * $19);
 $17 = Math_fround($17 - $40);
 $16 = Math_fround(Math_fround($7 * $39) + Math_fround($14 * $17));
 HEAPF32[$6 + 20 >> 2] = $16;
 $8 = Math_fround($11 * $8);
 $41 = Math_fround($18 - $8);
 $42 = Math_fround($11 * $19);
 $43 = Math_fround($15 - $42);
 $19 = Math_fround(Math_fround($7 * $41) + Math_fround($14 * $43));
 HEAPF32[$6 + 16 >> 2] = $19;
 $24 = Math_fround($24 - $27);
 $18 = Math_fround($23 - Math_fround($14 * $24));
 $20 = Math_fround($40 - $20);
 $27 = Math_fround($39 - Math_fround($14 * $20));
 $8 = Math_fround($42 - $8);
 $23 = Math_fround($41 - Math_fround($14 * $8));
 $15 = Math_fround($25 + Math_fround($7 * $24));
 $25 = Math_fround($17 + Math_fround($7 * $20));
 $20 = Math_fround($43 + Math_fround($7 * $8));
 $2 = $65 < Math_fround(1.1920928955078125e-7) | $29 < Math_fround(1.1920928955078125e-7);
 $3 = $6;
 $8 = Math_fround(Math_fround($10 * $10) + Math_fround(Math_fround($19 * $19) + Math_fround($16 * $16)));
 label$2 : {
  if (!!($8 > Math_fround(1.1920928955078125e-7))) {
   $17 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($8)));
   $8 = Math_fround($10 * $17);
   HEAPF32[$6 + 24 >> 2] = $8;
   $16 = Math_fround($16 * $17);
   HEAPF32[$6 + 20 >> 2] = $16;
   $10 = Math_fround($19 * $17);
   break label$2;
  }
  HEAP32[$6 + 28 >> 2] = 0;
  $8 = Math_fround(Math_fround(Math_fround($52 * $38) + Math_fround($51 * $32)) + Math_fround($50 * $33));
  HEAPF32[$6 + 24 >> 2] = $8;
  $16 = Math_fround(Math_fround(Math_fround($52 * $56) + Math_fround($51 * $36)) + Math_fround($50 * $37));
  HEAPF32[$6 + 20 >> 2] = $16;
  $10 = Math_fround(Math_fround(Math_fround($54 * $52) + Math_fround($55 * $51)) + Math_fround($53 * $50));
 }
 HEAPF32[$3 + 16 >> 2] = $10;
 HEAP32[$6 + 12 >> 2] = 0;
 $19 = Math_fround(Math_fround($11 * $16) - Math_fround($13 * $10));
 HEAPF32[$6 + 8 >> 2] = $19;
 $17 = Math_fround(Math_fround($9 * $10) - Math_fround($11 * $8));
 HEAPF32[$6 + 4 >> 2] = $17;
 $24 = Math_fround(Math_fround($13 * $8) - Math_fround($9 * $16));
 HEAPF32[$6 >> 2] = $24;
 HEAPF32[$6 + 40 >> 2] = Math_fround($20 * $16) - Math_fround($25 * $10);
 HEAPF32[$6 + 36 >> 2] = Math_fround($15 * $10) - Math_fround($20 * $8);
 HEAPF32[$6 + 32 >> 2] = Math_fround($25 * $8) - Math_fround($15 * $16);
 $22 = HEAP32[$6 + 36 >> 2];
 $30 = HEAP32[$6 + 32 >> 2];
 $3 = HEAP32[$1 + 12 >> 2];
 HEAP32[$3 >> 2] = $30;
 HEAP32[$3 + 4 >> 2] = $22;
 HEAP32[$3 + 8 >> 2] = HEAP32[$6 + 40 >> 2];
 $3 = HEAP32[$1 + 20 >> 2];
 HEAPF32[$3 + 8 >> 2] = -Math_fround(Math_fround($23 * $16) - Math_fround($27 * $10));
 HEAPF32[$3 + 4 >> 2] = -Math_fround(Math_fround($18 * $10) - Math_fround($23 * $8));
 HEAPF32[$3 >> 2] = -Math_fround(Math_fround($27 * $8) - Math_fround($18 * $16));
 HEAP32[$6 + 44 >> 2] = 0;
 $36 = Math_fround(Math_fround($20 * $17) - Math_fround($25 * $24));
 HEAPF32[$6 + 40 >> 2] = $36;
 $37 = Math_fround(Math_fround($15 * $24) - Math_fround($20 * $19));
 HEAPF32[$6 + 36 >> 2] = $37;
 $38 = Math_fround(Math_fround($25 * $19) - Math_fround($15 * $17));
 HEAPF32[$6 + 32 >> 2] = $38;
 $29 = Math_fround(Math_fround($23 * $17) - Math_fround($27 * $24));
 $32 = Math_fround(Math_fround($18 * $24) - Math_fround($23 * $19));
 $33 = Math_fround(Math_fround($27 * $19) - Math_fround($18 * $17));
 if (!(!$2 | !HEAPU8[$0 + 716 | 0])) {
  HEAPF32[$6 + 40 >> 2] = $7 * $36;
  HEAPF32[$6 + 36 >> 2] = $7 * $37;
  HEAPF32[$6 + 32 >> 2] = $7 * $38;
  $32 = Math_fround($14 * $32);
  $33 = Math_fround($14 * $33);
  $29 = Math_fround($14 * $29);
 }
 $3 = $21 << 1;
 $30 = HEAP32[$6 + 36 >> 2];
 $22 = HEAP32[$6 + 32 >> 2];
 $26 = $21 << 2;
 $12 = $26 + HEAP32[$1 + 12 >> 2] | 0;
 HEAP32[$12 >> 2] = $22;
 HEAP32[$12 + 4 >> 2] = $30;
 $28 = $6 + 40 | 0;
 HEAP32[$12 + 8 >> 2] = HEAP32[$28 >> 2];
 $12 = HEAP32[$1 + 20 >> 2];
 HEAPF32[$26 + $12 >> 2] = -$33;
 $26 = $21 + 1 | 0;
 HEAPF32[($26 << 2) + $12 >> 2] = -$32;
 $35 = $21 + 2 | 0;
 HEAPF32[($35 << 2) + $12 >> 2] = -$29;
 $29 = Math_fround(Math_fround($20 * $13) - Math_fround($25 * $11));
 HEAPF32[$6 + 40 >> 2] = $29;
 HEAP32[$6 + 44 >> 2] = 0;
 $20 = Math_fround(Math_fround($15 * $11) - Math_fround($20 * $9));
 HEAPF32[$6 + 36 >> 2] = $20;
 $25 = Math_fround(Math_fround($25 * $9) - Math_fround($15 * $13));
 HEAPF32[$6 + 32 >> 2] = $25;
 $15 = Math_fround(Math_fround($23 * $13) - Math_fround($27 * $11));
 $23 = Math_fround(Math_fround($18 * $11) - Math_fround($23 * $9));
 $18 = Math_fround(Math_fround($27 * $9) - Math_fround($18 * $13));
 if ($2) {
  HEAPF32[$6 + 40 >> 2] = $7 * $29;
  HEAPF32[$6 + 36 >> 2] = $7 * $20;
  HEAPF32[$6 + 32 >> 2] = $7 * $25;
  $15 = Math_fround($14 * $15);
  $23 = Math_fround($14 * $23);
  $18 = Math_fround($14 * $18);
 }
 $22 = HEAP32[$6 + 36 >> 2];
 $30 = HEAP32[$6 + 32 >> 2];
 $12 = $3 << 2;
 $2 = $12 + HEAP32[$1 + 12 >> 2] | 0;
 HEAP32[$2 >> 2] = $30;
 HEAP32[$2 + 4 >> 2] = $22;
 HEAP32[$2 + 8 >> 2] = HEAP32[$6 + 40 >> 2];
 $2 = HEAP32[$1 + 20 >> 2];
 HEAPF32[$12 + $2 >> 2] = -$18;
 $12 = $3 | 1;
 HEAPF32[($12 << 2) + $2 >> 2] = -$23;
 $28 = $3 + 2 | 0;
 HEAPF32[($28 << 2) + $2 >> 2] = -$15;
 $7 = HEAPF32[(HEAPU8[$0 + 748 | 0] & 8 ? $0 + 756 | 0 : $1 + 4 | 0) >> 2];
 label$6 : {
  if (HEAPU8[$0 + 736 | 0]) {
   $14 = Math_fround(-$19);
   $18 = Math_fround(-$17);
   $27 = Math_fround(-$24);
   $23 = Math_fround(-$10);
   $26 = HEAP32[$1 + 28 >> 2];
   break label$6;
  }
  $15 = HEAPF32[$1 >> 2];
  $30 = HEAP32[$6 + 20 >> 2];
  $22 = HEAP32[$6 + 16 >> 2];
  $2 = HEAP32[$1 + 8 >> 2];
  HEAP32[$2 >> 2] = $22;
  HEAP32[$2 + 4 >> 2] = $30;
  HEAP32[$2 + 8 >> 2] = HEAP32[$6 + 24 >> 2];
  $22 = HEAP32[$6 + 4 >> 2];
  $30 = HEAP32[$6 >> 2];
  $31 = $21 << 2;
  $2 = $31 + HEAP32[$1 + 8 >> 2] | 0;
  HEAP32[$2 >> 2] = $30;
  HEAP32[$2 + 4 >> 2] = $22;
  HEAP32[$2 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
  $30 = HEAP32[$6 + 52 >> 2];
  $22 = HEAP32[$6 + 48 >> 2];
  $3 = $3 << 2;
  $2 = $3 + HEAP32[$1 + 8 >> 2] | 0;
  HEAP32[$2 >> 2] = $22;
  HEAP32[$2 + 4 >> 2] = $30;
  HEAP32[$2 + 8 >> 2] = HEAP32[$6 + 56 >> 2];
  $2 = HEAP32[$1 + 16 >> 2];
  $23 = Math_fround(-$10);
  HEAPF32[$2 >> 2] = $23;
  HEAPF32[$2 + 4 >> 2] = -$16;
  HEAPF32[$2 + 8 >> 2] = -$8;
  $27 = Math_fround(-$24);
  HEAPF32[$2 + $31 >> 2] = $27;
  $18 = Math_fround(-$17);
  HEAPF32[($26 << 2) + $2 >> 2] = $18;
  $14 = Math_fround(-$19);
  HEAPF32[($35 << 2) + $2 >> 2] = $14;
  HEAPF32[$2 + $3 >> 2] = -$11;
  HEAPF32[($12 << 2) + $2 >> 2] = -$13;
  HEAPF32[($28 << 2) + $2 >> 2] = -$9;
  $26 = HEAP32[$1 + 28 >> 2];
  $15 = Math_fround($7 * $15);
  $25 = Math_fround($47 - $49);
  $20 = Math_fround($44 - $45);
  $29 = Math_fround($46 - $48);
  HEAPF32[$26 >> 2] = $15 * Math_fround(Math_fround(Math_fround($25 * $10) + Math_fround($20 * $16)) + Math_fround($29 * $8));
  HEAPF32[$26 + $31 >> 2] = $15 * Math_fround(Math_fround(Math_fround($25 * $24) + Math_fround($20 * $17)) + Math_fround($29 * $19));
  HEAPF32[$3 + $26 >> 2] = $15 * Math_fround(Math_fround(Math_fround($25 * $11) + Math_fround($20 * $13)) + Math_fround($29 * $9));
  $2 = HEAP32[$1 + 20 >> 2];
 }
 $3 = HEAP32[$1 + 12 >> 2];
 $12 = Math_imul($21, 12);
 HEAPF32[$3 + $12 >> 2] = $10;
 $28 = $12 + 8 | 0;
 HEAPF32[$28 + $3 >> 2] = $8;
 $35 = $12 + 4 | 0;
 HEAPF32[$35 + $3 >> 2] = $16;
 $21 = $21 << 4;
 HEAPF32[$21 + $3 >> 2] = $24;
 $31 = $21 | 4;
 HEAPF32[$31 + $3 >> 2] = $17;
 $22 = $21 | 8;
 HEAPF32[$22 + $3 >> 2] = $19;
 HEAPF32[$2 + $12 >> 2] = $23;
 $9 = HEAPF32[$6 + 20 >> 2];
 HEAPF32[$2 + $35 >> 2] = -$9;
 $13 = HEAPF32[$6 + 24 >> 2];
 HEAPF32[$2 + $28 >> 2] = -$13;
 HEAPF32[$2 + $21 >> 2] = $27;
 HEAPF32[$2 + $31 >> 2] = $18;
 HEAPF32[$2 + $22 >> 2] = $14;
 $11 = Math_fround($7 * HEAPF32[$1 >> 2]);
 $14 = Math_fround(Math_fround($62 * $58) - Math_fround($57 * $63));
 $8 = Math_fround($14 * $10);
 $10 = Math_fround(Math_fround($57 * $60) - Math_fround($34 * $58));
 $8 = Math_fround($8 + Math_fround($9 * $10));
 $9 = Math_fround(Math_fround($34 * $63) - Math_fround($62 * $60));
 HEAPF32[$12 + $26 >> 2] = $11 * Math_fround($8 + Math_fround($13 * $9));
 HEAPF32[$21 + $26 >> 2] = $11 * Math_fround(Math_fround(Math_fround($14 * $24) + Math_fround($10 * $17)) + Math_fround($9 * $19));
 label$8 : {
  label$9 : {
   if (HEAPU8[$0 + 716 | 0]) {
    $11 = Math_fround(HEAPF32[$0 + 708 >> 2] * HEAPF32[$0 + 732 >> 2]);
    $66 = $11 > Math_fround(0) ? 1 : 2;
    $68 = 1;
    $28 = HEAPU8[$0 + 737 | 0] != 0;
    break label$9;
   }
   if (!HEAPU8[$0 + 737 | 0]) {
    break label$8;
   }
   $11 = Math_fround(0);
   $28 = 1;
  }
  $26 = $68;
  $10 = HEAPF32[$6 + 48 >> 2];
  $12 = Math_imul(HEAP32[$1 + 24 >> 2], 5);
  $21 = $12 << 2;
  $35 = HEAP32[$6 + 48 >> 2];
  HEAP32[$21 + $3 >> 2] = $35;
  $14 = HEAPF32[$6 + 52 >> 2];
  $31 = $21 + 4 | 0;
  $22 = HEAP32[$6 + 52 >> 2];
  HEAP32[$31 + $3 >> 2] = $22;
  $22 = $21 + 8 | 0;
  $30 = $22 + $3 | 0;
  $8 = HEAPF32[$6 + 56 >> 2];
  $3 = HEAP32[$6 + 56 >> 2];
  HEAP32[$30 >> 2] = $3;
  HEAPF32[$2 + $31 >> 2] = -$14;
  HEAPF32[$2 + $21 >> 2] = -$10;
  HEAPF32[$2 + $22 >> 2] = -$8;
  $2 = $0 + 688 | 0;
  $9 = btAngularLimit__getLow_28_29_20const($2);
  $13 = btAngularLimit__getHigh_28_29_20const($2);
  $3 = HEAP32[$1 + 28 >> 2];
  HEAP32[$21 + $3 >> 2] = 0;
  $21 = $9 != $13;
  $2 = ($21 | $26 ^ 1) & $28;
  $28 = HEAP32[$0 + 748 >> 2];
  if ($28 & 2) {
   $7 = HEAPF32[$0 + 764 >> 2];
  }
  if ($2) {
   if ($28 & 4) {
    HEAP32[HEAP32[$1 + 32 >> 2] + ($12 << 2) >> 2] = HEAP32[$0 + 752 >> 2];
   }
   $9 = btTypedConstraint__getMotorFactor_28float_2c_20float_2c_20float_2c_20float_2c_20float_29($0, HEAPF32[$0 + 728 >> 2], $9, $13, HEAPF32[$0 + 680 >> 2], Math_fround($7 * HEAPF32[$1 >> 2]));
   $2 = $12 << 2;
   $3 = HEAP32[$1 + 28 >> 2];
   $28 = $2 + $3 | 0;
   HEAPF32[$28 >> 2] = Math_fround(Math_fround($9 * HEAPF32[$0 + 680 >> 2]) * HEAPF32[$0 + 732 >> 2]) + HEAPF32[$28 >> 2];
   HEAPF32[HEAP32[$1 + 36 >> 2] + $2 >> 2] = -HEAPF32[$0 + 684 >> 2];
   HEAP32[HEAP32[$1 + 40 >> 2] + $2 >> 2] = HEAP32[$0 + 684 >> 2];
  }
  if (!$26) {
   break label$8;
  }
  $26 = $12 << 2;
  $2 = $26 + $3 | 0;
  HEAPF32[$2 >> 2] = HEAPF32[$2 >> 2] + Math_fround($11 * Math_fround($7 * HEAPF32[$1 >> 2]));
  if (HEAP8[$0 + 748 | 0] & 1) {
   HEAP32[HEAP32[$1 + 32 >> 2] + $26 >> 2] = HEAP32[$0 + 760 >> 2];
  }
  label$15 : {
   if (!$21) {
    HEAP32[HEAP32[$1 + 36 >> 2] + ($12 << 2) >> 2] = -8388609;
    $7 = Math_fround(3.4028234663852886e+38);
    break label$15;
   }
   $3 = HEAP32[$1 + 36 >> 2] + ($12 << 2) | 0;
   if (($66 | 0) == 1) {
    HEAP32[$3 >> 2] = 0;
    $7 = Math_fround(3.4028234663852886e+38);
    break label$15;
   }
   HEAP32[$3 >> 2] = -8388609;
   $7 = Math_fround(0);
  }
  HEAPF32[HEAP32[$1 + 40 >> 2] + ($12 << 2) >> 2] = $7;
  $7 = HEAPF32[$0 + 704 >> 2];
  label$18 : {
   if (!($7 > Math_fround(0))) {
    break label$18;
   }
   $9 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$4 >> 2] * $10) + Math_fround(HEAPF32[$4 + 4 >> 2] * $14)) + Math_fround(HEAPF32[$4 + 8 >> 2] * $8)) - Math_fround(Math_fround(Math_fround(HEAPF32[$5 >> 2] * $10) + Math_fround(HEAPF32[$5 + 4 >> 2] * $14)) + Math_fround(HEAPF32[$5 + 8 >> 2] * $8)));
   if (($66 | 0) == 1) {
    if (!($9 < Math_fround(0))) {
     break label$18;
    }
    $7 = Math_fround($9 * Math_fround(-$7));
    if (!($7 > HEAPF32[$2 >> 2])) {
     break label$18;
    }
    HEAPF32[$2 >> 2] = $7;
    break label$18;
   }
   if (!($9 > Math_fround(0))) {
    break label$18;
   }
   $7 = Math_fround($9 * Math_fround(-$7));
   if (!($7 < HEAPF32[$2 >> 2])) {
    break label$18;
   }
   HEAPF32[$2 >> 2] = $7;
  }
  HEAPF32[$2 >> 2] = HEAPF32[$0 + 700 >> 2] * HEAPF32[$2 >> 2];
 }
 $0 = $6 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function GrahamScanConvexHull2D_28btAlignedObjectArray_GrahamVector3___2c_20btAlignedObjectArray_GrahamVector3___2c_20btVector3_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = 0, $20 = 0, $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0);
 $19 = global$0 - 32 | 0;
 $5 = $19;
 if ($19 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $15 = HEAPF32[$2 + 8 >> 2];
 label$2 : {
  if (!!(Math_fround(Math_abs($15)) > Math_fround(.7071067690849304))) {
   $11 = HEAPF32[$2 + 4 >> 2];
   $13 = Math_fround(Math_fround($15 * $15) + Math_fround($11 * $11));
   $10 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($13)));
   $22 = Math_fround($13 * $10);
   $18 = HEAPF32[$2 >> 2];
   $13 = Math_fround($10 * Math_fround(-$15));
   $23 = Math_fround($18 * $13);
   $15 = Math_fround($11 * $10);
   $24 = Math_fround($15 * Math_fround(-$18));
   $11 = Math_fround(0);
   break label$2;
  }
  $13 = HEAPF32[$2 >> 2];
  $11 = HEAPF32[$2 + 4 >> 2];
  $10 = Math_fround(Math_fround($13 * $13) + Math_fround($11 * $11));
  $16 = $10;
  $10 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($10)));
  $23 = Math_fround($16 * $10);
  $11 = Math_fround($10 * Math_fround(-$11));
  $24 = Math_fround($15 * $11);
  $13 = Math_fround($13 * $10);
  $22 = Math_fround($13 * Math_fround(-$15));
  $15 = Math_fround(0);
 }
 $8 = HEAP32[$0 + 4 >> 2];
 label$4 : {
  if (($8 | 0) >= 2) {
   $3 = HEAP32[$0 + 12 >> 2];
   while (1) {
    $12 = Math_imul($7, 24);
    $9 = $12 + $3 | 0;
    if (!!(Math_fround(Math_fround(Math_fround($11 * HEAPF32[$9 >> 2]) + Math_fround($13 * HEAPF32[$9 + 4 >> 2])) + Math_fround($15 * HEAPF32[$9 + 8 >> 2])) < Math_fround(Math_fround(Math_fround($11 * HEAPF32[$3 >> 2]) + Math_fround($13 * HEAPF32[$3 + 4 >> 2])) + Math_fround($15 * HEAPF32[$3 + 8 >> 2])))) {
     $17 = $3 + 16 | 0;
     $6 = $17;
     $5 = HEAP32[$6 >> 2];
     $4 = HEAP32[$6 + 4 >> 2];
     $6 = $5;
     $8 = $19 + 24 | 0;
     $5 = $8;
     HEAP32[$5 >> 2] = $6;
     HEAP32[$5 + 4 >> 2] = $4;
     $20 = $3 + 8 | 0;
     $6 = $20;
     $4 = HEAP32[$6 >> 2];
     $5 = HEAP32[$6 + 4 >> 2];
     $6 = $4;
     $14 = $19 + 16 | 0;
     $4 = $14;
     HEAP32[$4 >> 2] = $6;
     HEAP32[$4 + 4 >> 2] = $5;
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = HEAP32[$3 >> 2];
     $6 = $5;
     $5 = $19;
     HEAP32[$5 + 8 >> 2] = $6;
     HEAP32[$5 + 12 >> 2] = $4;
     $6 = $9;
     $4 = HEAP32[$6 >> 2];
     $5 = HEAP32[$6 + 4 >> 2];
     HEAP32[$3 >> 2] = $4;
     HEAP32[$3 + 4 >> 2] = $5;
     $4 = HEAP32[$6 + 12 >> 2];
     $5 = HEAP32[$6 + 8 >> 2];
     HEAP32[$3 + 8 >> 2] = $5;
     HEAP32[$3 + 12 >> 2] = $4;
     $5 = HEAP32[$6 + 20 >> 2];
     $4 = HEAP32[$6 + 16 >> 2];
     HEAP32[$3 + 16 >> 2] = $4;
     HEAP32[$3 + 20 >> 2] = $5;
     $6 = $19;
     $5 = HEAP32[$6 + 8 >> 2];
     $4 = HEAP32[$6 + 12 >> 2];
     $3 = HEAP32[$0 + 12 >> 2] + $12 | 0;
     HEAP32[$3 >> 2] = $5;
     HEAP32[$3 + 4 >> 2] = $4;
     $5 = HEAP32[$6 + 28 >> 2];
     $4 = HEAP32[$6 + 24 >> 2];
     HEAP32[$3 + 16 >> 2] = $4;
     HEAP32[$3 + 20 >> 2] = $5;
     $4 = HEAP32[$6 + 20 >> 2];
     $5 = HEAP32[$6 + 16 >> 2];
     HEAP32[$3 + 8 >> 2] = $5;
     HEAP32[$3 + 12 >> 2] = $4;
     $8 = HEAP32[$0 + 4 >> 2];
     $3 = HEAP32[$0 + 12 >> 2];
    }
    $7 = $7 + 1 | 0;
    if (($7 | 0) < ($8 | 0)) {
     continue;
    }
    break;
   }
   HEAP32[$3 + 16 >> 2] = -246811958;
   if (($8 | 0) >= 2) {
    $26 = HEAPF32[$3 + 8 >> 2];
    $27 = HEAPF32[$3 + 4 >> 2];
    $28 = HEAPF32[$3 >> 2];
    $7 = 1;
    while (1) {
     $16 = Math_fround(0);
     $9 = Math_imul($7, 24) + $3 | 0;
     $10 = Math_fround(HEAPF32[$9 >> 2] - $28);
     $21 = Math_fround(HEAPF32[$9 + 4 >> 2] - $27);
     $25 = Math_fround(HEAPF32[$9 + 8 >> 2] - $26);
     $18 = Math_fround(Math_fround(Math_fround($22 * $10) + Math_fround($24 * $21)) + Math_fround($23 * $25));
     $10 = Math_fround(Math_fround(Math_fround($11 * $10) + Math_fround($13 * $21)) + Math_fround($15 * $25));
     if (!(Math_fround(Math_fround($18 * $18) + Math_fround($10 * $10)) < Math_fround(1.1920928955078125e-7))) {
      $16 = Math_fround(Math_abs($18));
      label$11 : {
       if (!!($10 >= Math_fround(0))) {
        $21 = Math_fround(.7853981852531433);
        $10 = Math_fround(Math_fround($10 - $16) / Math_fround($10 + $16));
        break label$11;
       }
       $21 = Math_fround(2.356194496154785);
       $10 = Math_fround(Math_fround($10 + $16) / Math_fround($16 - $10));
      }
      $16 = $21;
      $10 = Math_fround($16 + Math_fround($10 * Math_fround(-.7853981852531433)));
      $16 = $18 < Math_fround(0) ? Math_fround(-$10) : $10;
     }
     HEAPF32[$9 + 16 >> 2] = $16;
     $7 = $7 + 1 | 0;
     if (($7 | 0) != ($8 | 0)) {
      continue;
     }
     break;
    }
   }
   $5 = HEAP32[$3 + 12 >> 2];
   $4 = HEAP32[$3 + 8 >> 2];
   $9 = $4;
   $4 = $19;
   HEAP32[$4 + 16 >> 2] = $9;
   HEAP32[$4 + 20 >> 2] = $5;
   $4 = HEAP32[$3 + 4 >> 2];
   $5 = HEAP32[$3 >> 2];
   $3 = $5;
   $5 = $19;
   HEAP32[$5 + 8 >> 2] = $3;
   HEAP32[$5 + 12 >> 2] = $4;
   void_20btAlignedObjectArray_GrahamVector3___quickSortInternal_btAngleCompareFunc__28btAngleCompareFunc_20const__2c_20int_2c_20int_29($0, $5 + 8 | 0, 1, $8 + -1 | 0);
   $17 = HEAP32[$0 + 12 >> 2];
   $8 = HEAP32[$1 + 4 >> 2];
   label$13 : {
    if (($8 | 0) != HEAP32[$1 + 8 >> 2]) {
     break label$13;
    }
    $14 = $8 ? $8 << 1 : 1;
    if (($8 | 0) >= ($14 | 0)) {
     break label$13;
    }
    $3 = 0;
    $12 = 0;
    if ($14) {
     $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($14, 24), 16);
     $8 = HEAP32[$1 + 4 >> 2];
    }
    if (($8 | 0) >= 1) {
     while (1) {
      $7 = Math_imul($3, 24);
      $9 = $12 + $7 | 0;
      $7 = HEAP32[$1 + 12 >> 2] + $7 | 0;
      $6 = $7;
      $4 = HEAP32[$6 >> 2];
      $5 = HEAP32[$6 + 4 >> 2];
      $7 = $4;
      $4 = $9;
      HEAP32[$4 >> 2] = $7;
      HEAP32[$4 + 4 >> 2] = $5;
      $4 = HEAP32[$6 + 20 >> 2];
      $5 = HEAP32[$6 + 16 >> 2];
      $7 = $5;
      $5 = $9;
      HEAP32[$5 + 16 >> 2] = $7;
      HEAP32[$5 + 20 >> 2] = $4;
      $5 = HEAP32[$6 + 12 >> 2];
      $4 = HEAP32[$6 + 8 >> 2];
      $6 = $4;
      $4 = $9;
      HEAP32[$4 + 8 >> 2] = $6;
      HEAP32[$4 + 12 >> 2] = $5;
      $3 = $3 + 1 | 0;
      if (($8 | 0) != ($3 | 0)) {
       continue;
      }
      break;
     }
    }
    $3 = HEAP32[$1 + 12 >> 2];
    if ($3) {
     if (HEAPU8[$1 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($3);
     }
     HEAP32[$1 + 12 >> 2] = 0;
    }
    HEAP32[$1 + 12 >> 2] = $12;
    HEAP8[$1 + 16 | 0] = 1;
    HEAP32[$1 + 8 >> 2] = $14;
    $8 = HEAP32[$1 + 4 >> 2];
   }
   $6 = $17;
   $5 = HEAP32[$6 >> 2];
   $4 = HEAP32[$6 + 4 >> 2];
   $3 = HEAP32[$1 + 12 >> 2] + Math_imul($8, 24) | 0;
   HEAP32[$3 >> 2] = $5;
   HEAP32[$3 + 4 >> 2] = $4;
   $5 = HEAP32[$6 + 20 >> 2];
   $4 = HEAP32[$6 + 16 >> 2];
   HEAP32[$3 + 16 >> 2] = $4;
   HEAP32[$3 + 20 >> 2] = $5;
   $4 = HEAP32[$6 + 12 >> 2];
   $5 = HEAP32[$6 + 8 >> 2];
   HEAP32[$3 + 8 >> 2] = $5;
   HEAP32[$3 + 12 >> 2] = $4;
   $8 = HEAP32[$1 + 4 >> 2] + 1 | 0;
   HEAP32[$1 + 4 >> 2] = $8;
   $17 = HEAP32[$0 + 12 >> 2];
   label$20 : {
    if (HEAP32[$1 + 8 >> 2] != ($8 | 0)) {
     break label$20;
    }
    $14 = $8 ? $8 << 1 : 1;
    if (($8 | 0) >= ($14 | 0)) {
     break label$20;
    }
    $3 = 0;
    $12 = 0;
    if ($14) {
     $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($14, 24), 16);
     $8 = HEAP32[$1 + 4 >> 2];
    }
    if (($8 | 0) >= 1) {
     while (1) {
      $7 = Math_imul($3, 24);
      $9 = $12 + $7 | 0;
      $7 = HEAP32[$1 + 12 >> 2] + $7 | 0;
      $6 = $7;
      $4 = HEAP32[$6 >> 2];
      $5 = HEAP32[$6 + 4 >> 2];
      $7 = $4;
      $4 = $9;
      HEAP32[$4 >> 2] = $7;
      HEAP32[$4 + 4 >> 2] = $5;
      $4 = HEAP32[$6 + 20 >> 2];
      $5 = HEAP32[$6 + 16 >> 2];
      $7 = $5;
      $5 = $9;
      HEAP32[$5 + 16 >> 2] = $7;
      HEAP32[$5 + 20 >> 2] = $4;
      $5 = HEAP32[$6 + 12 >> 2];
      $4 = HEAP32[$6 + 8 >> 2];
      $6 = $4;
      $4 = $9;
      HEAP32[$4 + 8 >> 2] = $6;
      HEAP32[$4 + 12 >> 2] = $5;
      $3 = $3 + 1 | 0;
      if (($8 | 0) != ($3 | 0)) {
       continue;
      }
      break;
     }
    }
    $3 = HEAP32[$1 + 12 >> 2];
    if ($3) {
     if (HEAPU8[$1 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($3);
     }
     HEAP32[$1 + 12 >> 2] = 0;
    }
    HEAP32[$1 + 12 >> 2] = $12;
    HEAP8[$1 + 16 | 0] = 1;
    HEAP32[$1 + 8 >> 2] = $14;
    $8 = HEAP32[$1 + 4 >> 2];
   }
   $6 = $17;
   $5 = HEAP32[$6 + 24 >> 2];
   $4 = HEAP32[$6 + 28 >> 2];
   $3 = HEAP32[$1 + 12 >> 2] + Math_imul($8, 24) | 0;
   HEAP32[$3 >> 2] = $5;
   HEAP32[$3 + 4 >> 2] = $4;
   $5 = HEAP32[$6 + 44 >> 2];
   $4 = HEAP32[$6 + 40 >> 2];
   HEAP32[$3 + 16 >> 2] = $4;
   HEAP32[$3 + 20 >> 2] = $5;
   $4 = HEAP32[$6 + 36 >> 2];
   $5 = HEAP32[$6 + 32 >> 2];
   HEAP32[$3 + 8 >> 2] = $5;
   HEAP32[$3 + 12 >> 2] = $4;
   $9 = HEAP32[$1 + 4 >> 2] + 1 | 0;
   HEAP32[$1 + 4 >> 2] = $9;
   if (HEAP32[$0 + 4 >> 2] == 2) {
    break label$4;
   }
   $17 = 2;
   while (1) {
    label$28 : {
     if (($9 | 0) < 2) {
      break label$28;
     }
     $12 = HEAP32[$0 + 12 >> 2] + Math_imul($17, 24) | 0;
     $21 = HEAPF32[$12 + 8 >> 2];
     $25 = HEAPF32[$12 + 4 >> 2];
     $22 = HEAPF32[$12 >> 2];
     $23 = HEAPF32[$2 + 8 >> 2];
     $24 = HEAPF32[$2 + 4 >> 2];
     $26 = HEAPF32[$2 >> 2];
     $8 = HEAP32[$1 + 12 >> 2];
     $3 = $9;
     while (1) {
      $7 = Math_imul($3, 24) + $8 | 0;
      $9 = $7 + -48 | 0;
      $13 = HEAPF32[$9 >> 2];
      $7 = $7 + -24 | 0;
      $15 = Math_fround($13 - HEAPF32[$7 >> 2]);
      $11 = HEAPF32[$9 + 4 >> 2];
      $10 = Math_fround($11 - $25);
      $11 = Math_fround($11 - HEAPF32[$7 + 4 >> 2]);
      $13 = Math_fround($13 - $22);
      $27 = Math_fround(Math_fround(Math_fround($15 * $10) - Math_fround($11 * $13)) * $23);
      $18 = HEAPF32[$9 + 8 >> 2];
      $16 = Math_fround($18 - $21);
      $28 = Math_fround($11 * $16);
      $11 = Math_fround($18 - HEAPF32[$7 + 8 >> 2]);
      if (!(Math_fround($27 + Math_fround(Math_fround($26 * Math_fround($28 - Math_fround($11 * $10))) + Math_fround($24 * Math_fround(Math_fround($11 * $13) - Math_fround($15 * $16))))) > Math_fround(0))) {
       $9 = $3 + -1 | 0;
       HEAP32[$1 + 4 >> 2] = $9;
       $7 = ($3 | 0) > 2;
       $3 = $9;
       if ($7) {
        continue;
       }
       break label$28;
      }
      break;
     }
     label$31 : {
      if (HEAP32[$1 + 8 >> 2] != ($3 | 0)) {
       break label$31;
      }
      $20 = $3 << 1;
      if (($3 | 0) >= ($20 | 0)) {
       break label$31;
      }
      $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($3, 48), 16);
      $3 = 0;
      $14 = HEAP32[$1 + 4 >> 2];
      if (($14 | 0) >= 1) {
       while (1) {
        $7 = Math_imul($3, 24);
        $9 = $7 + $8 | 0;
        $7 = HEAP32[$1 + 12 >> 2] + $7 | 0;
        $6 = $7;
        $4 = HEAP32[$6 >> 2];
        $5 = HEAP32[$6 + 4 >> 2];
        $7 = $4;
        $4 = $9;
        HEAP32[$4 >> 2] = $7;
        HEAP32[$4 + 4 >> 2] = $5;
        $4 = HEAP32[$6 + 20 >> 2];
        $5 = HEAP32[$6 + 16 >> 2];
        $7 = $5;
        $5 = $9;
        HEAP32[$5 + 16 >> 2] = $7;
        HEAP32[$5 + 20 >> 2] = $4;
        $5 = HEAP32[$6 + 12 >> 2];
        $4 = HEAP32[$6 + 8 >> 2];
        $6 = $4;
        $4 = $9;
        HEAP32[$4 + 8 >> 2] = $6;
        HEAP32[$4 + 12 >> 2] = $5;
        $3 = $3 + 1 | 0;
        if (($14 | 0) != ($3 | 0)) {
         continue;
        }
        break;
       }
      }
      $3 = HEAP32[$1 + 12 >> 2];
      if ($3) {
       if (HEAPU8[$1 + 16 | 0]) {
        btAlignedFreeInternal_28void__29($3);
       }
       HEAP32[$1 + 12 >> 2] = 0;
      }
      HEAP32[$1 + 12 >> 2] = $8;
      HEAP8[$1 + 16 | 0] = 1;
      HEAP32[$1 + 8 >> 2] = $20;
      $3 = HEAP32[$1 + 4 >> 2];
     }
     $6 = $12;
     $5 = HEAP32[$6 >> 2];
     $4 = HEAP32[$6 + 4 >> 2];
     $3 = Math_imul($3, 24) + $8 | 0;
     HEAP32[$3 >> 2] = $5;
     HEAP32[$3 + 4 >> 2] = $4;
     $5 = HEAP32[$6 + 20 >> 2];
     $4 = HEAP32[$6 + 16 >> 2];
     HEAP32[$3 + 16 >> 2] = $4;
     HEAP32[$3 + 20 >> 2] = $5;
     $4 = HEAP32[$6 + 12 >> 2];
     $5 = HEAP32[$6 + 8 >> 2];
     HEAP32[$3 + 8 >> 2] = $5;
     HEAP32[$3 + 12 >> 2] = $4;
     $9 = HEAP32[$1 + 4 >> 2] + 1 | 0;
     HEAP32[$1 + 4 >> 2] = $9;
    }
    if (($9 | 0) == 1) {
     $14 = HEAP32[$0 + 12 >> 2] + Math_imul($17, 24) | 0;
     $3 = 1;
     if (HEAP32[$1 + 8 >> 2] == 1) {
      $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(48, 16);
      $3 = 0;
      $12 = HEAP32[$1 + 4 >> 2];
      if (($12 | 0) >= 1) {
       while (1) {
        $7 = Math_imul($3, 24);
        $9 = $7 + $8 | 0;
        $7 = HEAP32[$1 + 12 >> 2] + $7 | 0;
        $6 = $7;
        $4 = HEAP32[$6 >> 2];
        $5 = HEAP32[$6 + 4 >> 2];
        $7 = $4;
        $4 = $9;
        HEAP32[$4 >> 2] = $7;
        HEAP32[$4 + 4 >> 2] = $5;
        $4 = HEAP32[$6 + 20 >> 2];
        $5 = HEAP32[$6 + 16 >> 2];
        $7 = $5;
        $5 = $9;
        HEAP32[$5 + 16 >> 2] = $7;
        HEAP32[$5 + 20 >> 2] = $4;
        $5 = HEAP32[$6 + 12 >> 2];
        $4 = HEAP32[$6 + 8 >> 2];
        $6 = $4;
        $4 = $9;
        HEAP32[$4 + 8 >> 2] = $6;
        HEAP32[$4 + 12 >> 2] = $5;
        $3 = $3 + 1 | 0;
        if (($12 | 0) != ($3 | 0)) {
         continue;
        }
        break;
       }
      }
      $3 = HEAP32[$1 + 12 >> 2];
      if ($3) {
       if (HEAPU8[$1 + 16 | 0]) {
        btAlignedFreeInternal_28void__29($3);
       }
       HEAP32[$1 + 12 >> 2] = 0;
      }
      HEAP32[$1 + 12 >> 2] = $8;
      HEAP8[$1 + 16 | 0] = 1;
      HEAP32[$1 + 8 >> 2] = 2;
      $3 = HEAP32[$1 + 4 >> 2];
     }
     $6 = $14;
     $5 = HEAP32[$6 >> 2];
     $4 = HEAP32[$6 + 4 >> 2];
     $3 = HEAP32[$1 + 12 >> 2] + Math_imul($3, 24) | 0;
     HEAP32[$3 >> 2] = $5;
     HEAP32[$3 + 4 >> 2] = $4;
     $5 = HEAP32[$6 + 20 >> 2];
     $4 = HEAP32[$6 + 16 >> 2];
     HEAP32[$3 + 16 >> 2] = $4;
     HEAP32[$3 + 20 >> 2] = $5;
     $4 = HEAP32[$6 + 12 >> 2];
     $5 = HEAP32[$6 + 8 >> 2];
     HEAP32[$3 + 8 >> 2] = $5;
     HEAP32[$3 + 12 >> 2] = $4;
     $9 = HEAP32[$1 + 4 >> 2] + 1 | 0;
     HEAP32[$1 + 4 >> 2] = $9;
    }
    $17 = $17 + 1 | 0;
    if (($17 | 0) != HEAP32[$0 + 4 >> 2]) {
     continue;
    }
    break;
   }
   break label$4;
  }
  if (($8 | 0) != 1) {
   break label$4;
  }
  $8 = HEAP32[$1 + 4 >> 2];
  while (1) {
   $17 = HEAP32[$0 + 12 >> 2];
   label$43 : {
    if (HEAP32[$1 + 8 >> 2] != ($8 | 0)) {
     break label$43;
    }
    $20 = $8 ? $8 << 1 : 1;
    if (($8 | 0) >= ($20 | 0)) {
     break label$43;
    }
    $3 = 0;
    $12 = 0;
    if ($20) {
     $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($20, 24), 16);
     $8 = HEAP32[$1 + 4 >> 2];
    }
    if (($8 | 0) >= 1) {
     while (1) {
      $7 = Math_imul($3, 24);
      $9 = $12 + $7 | 0;
      $7 = HEAP32[$1 + 12 >> 2] + $7 | 0;
      $6 = $7;
      $4 = HEAP32[$6 >> 2];
      $5 = HEAP32[$6 + 4 >> 2];
      $2 = $4;
      $4 = $9;
      HEAP32[$4 >> 2] = $2;
      HEAP32[$4 + 4 >> 2] = $5;
      $4 = HEAP32[$6 + 20 >> 2];
      $5 = HEAP32[$6 + 16 >> 2];
      $2 = $5;
      $5 = $9;
      HEAP32[$5 + 16 >> 2] = $2;
      HEAP32[$5 + 20 >> 2] = $4;
      $5 = HEAP32[$6 + 12 >> 2];
      $4 = HEAP32[$6 + 8 >> 2];
      $2 = $4;
      $4 = $9;
      HEAP32[$4 + 8 >> 2] = $2;
      HEAP32[$4 + 12 >> 2] = $5;
      $3 = $3 + 1 | 0;
      if (($8 | 0) != ($3 | 0)) {
       continue;
      }
      break;
     }
    }
    $3 = HEAP32[$1 + 12 >> 2];
    if ($3) {
     if (HEAPU8[$1 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($3);
     }
     HEAP32[$1 + 12 >> 2] = 0;
    }
    HEAP32[$1 + 12 >> 2] = $12;
    HEAP8[$1 + 16 | 0] = 1;
    HEAP32[$1 + 8 >> 2] = $20;
    $8 = HEAP32[$1 + 4 >> 2];
   }
   $6 = $17;
   $5 = HEAP32[$6 >> 2];
   $4 = HEAP32[$6 + 4 >> 2];
   $3 = HEAP32[$1 + 12 >> 2] + Math_imul($8, 24) | 0;
   HEAP32[$3 >> 2] = $5;
   HEAP32[$3 + 4 >> 2] = $4;
   $5 = HEAP32[$6 + 20 >> 2];
   $4 = HEAP32[$6 + 16 >> 2];
   HEAP32[$3 + 16 >> 2] = $4;
   HEAP32[$3 + 20 >> 2] = $5;
   $4 = HEAP32[$6 + 12 >> 2];
   $5 = HEAP32[$6 + 8 >> 2];
   HEAP32[$3 + 8 >> 2] = $5;
   HEAP32[$3 + 12 >> 2] = $4;
   $8 = HEAP32[$1 + 4 >> 2] + 1 | 0;
   HEAP32[$1 + 4 >> 2] = $8;
   $14 = $14 + 1 | 0;
   if (($14 | 0) < HEAP32[$0 + 4 >> 2]) {
    continue;
   }
   break;
  }
 }
 $0 = $19 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = 0, $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0);
 $4 = global$0 - 704 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 btConvexInternalShape__btConvexInternalShape_28_29($4 + 624 | 0);
 HEAP32[$4 + 652 >> 2] = 0;
 HEAP32[$4 + 656 >> 2] = 0;
 HEAP32[$4 + 648 >> 2] = 1065353216;
 HEAP32[$4 + 660 >> 2] = 0;
 HEAP32[$4 + 664 >> 2] = 0;
 HEAP32[$4 + 668 >> 2] = 0;
 HEAP32[$4 + 672 >> 2] = 0;
 HEAP32[$4 + 676 >> 2] = 0;
 HEAP32[$4 + 640 >> 2] = 1065353216;
 HEAP32[$4 + 644 >> 2] = 1065353216;
 HEAP32[$4 + 628 >> 2] = 8;
 HEAP32[$4 + 624 >> 2] = 11396;
 $5 = HEAP32[$2 + 12 >> 2];
 label$2 : {
  $6 = HEAP32[$2 + 4 >> 2];
  $17 = HEAP32[$6 + 4 >> 2];
  if (($17 | 0) <= 19) {
   HEAP32[$4 + 616 >> 2] = 0;
   HEAP32[$4 + 620 >> 2] = 0;
   HEAP32[$4 + 448 >> 2] = 6988;
   HEAP32[$4 + 612 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP8[$4 + 420 | 0] = 0;
   HEAP32[$4 + 396 >> 2] = 953267991;
   $17 = btSubsimplexConvexCast__btSubsimplexConvexCast_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__29($4 + 680 | 0, $4 + 624 | 0, $6, $4 + 88 | 0);
   $6 = btGjkConvexCast__btGjkConvexCast_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__29($4 + 72 | 0, $4 + 624 | 0, $6, $4 + 88 | 0);
   $29 = HEAP32[$3 + 16 >> 2] & 8 ? $6 : $17;
   label$4 : {
    if (!FUNCTION_TABLE[HEAP32[HEAP32[$29 >> 2] + 8 >> 2]]($29, $0, $1, $5, $5, $4 + 448 | 0)) {
     break label$4;
    }
    $9 = HEAPF32[$4 + 580 >> 2];
    $10 = HEAPF32[$4 + 584 >> 2];
    $7 = HEAPF32[$4 + 588 >> 2];
    $8 = Math_fround(Math_fround(Math_fround($9 * $9) + Math_fround($10 * $10)) + Math_fround($7 * $7));
    if (!($8 > Math_fround(9999999747378752e-20))) {
     break label$4;
    }
    $15 = HEAPF32[$4 + 612 >> 2];
    if (!($15 < HEAPF32[$3 + 4 >> 2])) {
     break label$4;
    }
    $8 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($8)));
    HEAPF32[$4 + 588 >> 2] = $7 * $8;
    HEAPF32[$4 + 584 >> 2] = $10 * $8;
    HEAPF32[$4 + 580 >> 2] = $9 * $8;
    $5 = HEAP32[$2 + 8 >> 2];
    HEAP32[$4 + 44 >> 2] = 0;
    HEAP32[$4 + 40 >> 2] = $5;
    $5 = $4 + 580 | 0;
    $0 = HEAP32[$5 + 12 >> 2];
    $2 = HEAP32[$5 + 8 >> 2];
    HEAP32[$4 + 56 >> 2] = $2;
    HEAP32[$4 + 60 >> 2] = $0;
    $2 = HEAP32[$4 + 584 >> 2];
    $0 = HEAP32[$4 + 580 >> 2];
    HEAP32[$4 + 48 >> 2] = $0;
    HEAP32[$4 + 52 >> 2] = $2;
    HEAPF32[$4 + 64 >> 2] = $15;
    Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($3, $4 + 40 | 0, 1));
   }
   btConvexCast___btConvexCast_28_29($6);
   btConvexCast___btConvexCast_28_29($17);
   break label$2;
  }
  if ($17 + -21 >>> 0 <= 8) {
   $13 = HEAPF32[$5 + 20 >> 2];
   $11 = HEAPF32[$5 + 36 >> 2];
   $12 = HEAPF32[$5 + 24 >> 2];
   $7 = HEAPF32[$5 + 52 >> 2];
   $29 = $5;
   $17 = $5 + 56 | 0;
   $8 = HEAPF32[$17 >> 2];
   $14 = HEAPF32[$5 + 40 >> 2];
   $16 = HEAPF32[$5 + 32 >> 2];
   $18 = HEAPF32[$5 + 16 >> 2];
   $19 = HEAPF32[$5 >> 2];
   $23 = HEAPF32[$5 + 4 >> 2];
   $9 = HEAPF32[$5 + 48 >> 2];
   $24 = HEAPF32[$5 + 8 >> 2];
   $15 = HEAPF32[$0 + 52 >> 2];
   $20 = HEAPF32[$0 + 56 >> 2];
   $10 = HEAPF32[$0 + 48 >> 2];
   HEAP32[$4 + 460 >> 2] = 0;
   $26 = Math_fround(-$7);
   $30 = Math_fround($12 * $26);
   $31 = Math_fround($14 * $8);
   $25 = Math_fround(Math_fround($30 - Math_fround($24 * $9)) - $31);
   $32 = Math_fround($12 * $15);
   $33 = Math_fround($14 * $20);
   HEAPF32[$4 + 456 >> 2] = $25 + Math_fround(Math_fround(Math_fround($24 * $10) + $32) + $33);
   $34 = Math_fround($13 * $26);
   $35 = Math_fround($11 * $8);
   $27 = Math_fround(Math_fround($34 - Math_fround($23 * $9)) - $35);
   $36 = Math_fround($13 * $15);
   $37 = Math_fround($11 * $20);
   HEAPF32[$4 + 452 >> 2] = $27 + Math_fround(Math_fround(Math_fround($23 * $10) + $36) + $37);
   $28 = Math_fround(Math_fround(Math_fround($18 * $26) - Math_fround($19 * $9)) - Math_fround($16 * $8));
   HEAPF32[$4 + 448 >> 2] = $28 + Math_fround(Math_fround(Math_fround($19 * $10) + Math_fround($18 * $15)) + Math_fround($16 * $20));
   $21 = HEAPF32[$1 + 52 >> 2];
   $22 = HEAPF32[$1 + 56 >> 2];
   $7 = HEAPF32[$1 + 48 >> 2];
   HEAP32[$4 + 52 >> 2] = 0;
   $39 = Math_fround($24 * $7);
   $24 = Math_fround($12 * $21);
   $38 = Math_fround($14 * $22);
   HEAPF32[$4 + 48 >> 2] = $25 + Math_fround(Math_fround($39 + $24) + $38);
   $12 = Math_fround($23 * $7);
   $23 = Math_fround($13 * $21);
   $25 = Math_fround($11 * $22);
   HEAPF32[$4 + 44 >> 2] = $27 + Math_fround(Math_fround($12 + $23) + $25);
   HEAPF32[$4 + 40 >> 2] = $28 + Math_fround(Math_fround(Math_fround($19 * $7) + Math_fround($18 * $21)) + Math_fround($16 * $22));
   $17 = $5;
   $1 = $5;
   if (HEAP32[$6 + 4 >> 2] == 21) {
    $2 = HEAP32[$2 + 8 >> 2];
    btTriangleRaycastCallback__btTriangleRaycastCallback_28btVector3_20const__2c_20btVector3_20const__2c_20unsigned_20int_29($4 + 88 | 0, $4 + 448 | 0, $4 + 40 | 0, HEAP32[$3 + 16 >> 2]);
    HEAP32[$4 + 140 >> 2] = $6;
    HEAP32[$4 + 136 >> 2] = $2;
    HEAP32[$4 + 132 >> 2] = $3;
    HEAP32[$4 + 88 >> 2] = 7960;
    $0 = HEAP32[$5 + 12 >> 2];
    $2 = HEAP32[$5 + 8 >> 2];
    HEAP32[$4 + 152 >> 2] = $2;
    HEAP32[$4 + 156 >> 2] = $0;
    $2 = HEAP32[$5 + 4 >> 2];
    $0 = HEAP32[$5 >> 2];
    HEAP32[$4 + 144 >> 2] = $0;
    HEAP32[$4 + 148 >> 2] = $2;
    $2 = HEAP32[$1 + 24 >> 2];
    $0 = HEAP32[$1 + 28 >> 2];
    HEAP32[$4 + 168 >> 2] = $2;
    HEAP32[$4 + 172 >> 2] = $0;
    $2 = HEAP32[$1 + 20 >> 2];
    $0 = HEAP32[$1 + 16 >> 2];
    HEAP32[$4 + 160 >> 2] = $0;
    HEAP32[$4 + 164 >> 2] = $2;
    $2 = HEAP32[$17 + 40 >> 2];
    $0 = HEAP32[$1 + 44 >> 2];
    HEAP32[$4 + 184 >> 2] = $2;
    HEAP32[$4 + 188 >> 2] = $0;
    $2 = HEAP32[$1 + 36 >> 2];
    $0 = HEAP32[$1 + 32 >> 2];
    HEAP32[$4 + 176 >> 2] = $0;
    HEAP32[$4 + 180 >> 2] = $2;
    $2 = HEAP32[$29 + 56 >> 2];
    $0 = HEAP32[$1 + 60 >> 2];
    HEAP32[$4 + 200 >> 2] = $2;
    HEAP32[$4 + 204 >> 2] = $0;
    $2 = HEAP32[$5 + 52 >> 2];
    $0 = HEAP32[$5 + 48 >> 2];
    HEAP32[$4 + 192 >> 2] = $0;
    HEAP32[$4 + 196 >> 2] = $2;
    HEAP32[$4 + 128 >> 2] = HEAP32[$3 + 4 >> 2];
    btBvhTriangleMeshShape__performRaycast_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29($6, $4 + 88 | 0, $4 + 448 | 0, $4 + 40 | 0);
    btTriangleCallback___btTriangleCallback_28_29($4 + 88 | 0);
    break label$2;
   }
   $13 = HEAPF32[$5 + 32 >> 2];
   $11 = HEAPF32[$5 + 16 >> 2];
   $12 = HEAPF32[$5 >> 2];
   $14 = HEAPF32[$5 + 4 >> 2];
   $16 = HEAPF32[$5 + 8 >> 2];
   HEAP32[$4 + 692 >> 2] = 0;
   $18 = Math_fround(Math_fround($30 - Math_fround($16 * $9)) - $31);
   HEAPF32[$4 + 688 >> 2] = Math_fround(Math_fround(Math_fround($10 * $16) + $32) + $33) + $18;
   $19 = Math_fround(Math_fround($34 - Math_fround($14 * $9)) - $35);
   HEAPF32[$4 + 684 >> 2] = Math_fround(Math_fround(Math_fround($10 * $14) + $36) + $37) + $19;
   $9 = Math_fround(Math_fround(Math_fround($11 * $26) - Math_fround($12 * $9)) - Math_fround($13 * $8));
   HEAPF32[$4 + 680 >> 2] = Math_fround(Math_fround(Math_fround($10 * $12) + Math_fround($15 * $11)) + Math_fround($20 * $13)) + $9;
   HEAP32[$4 + 84 >> 2] = 0;
   HEAPF32[$4 + 80 >> 2] = Math_fround(Math_fround(Math_fround($7 * $16) + $24) + $38) + $18;
   HEAPF32[$4 + 76 >> 2] = Math_fround(Math_fround(Math_fround($7 * $14) + $23) + $25) + $19;
   HEAPF32[$4 + 72 >> 2] = Math_fround(Math_fround(Math_fround($7 * $12) + Math_fround($21 * $11)) + Math_fround($22 * $13)) + $9;
   $2 = HEAP32[$2 + 8 >> 2];
   btTriangleRaycastCallback__btTriangleRaycastCallback_28btVector3_20const__2c_20btVector3_20const__2c_20unsigned_20int_29($4 + 88 | 0, $4 + 680 | 0, $4 + 72 | 0, HEAP32[$3 + 16 >> 2]);
   HEAP32[$4 + 140 >> 2] = $6;
   HEAP32[$4 + 136 >> 2] = $2;
   HEAP32[$4 + 132 >> 2] = $3;
   HEAP32[$4 + 88 >> 2] = 7960;
   $0 = HEAP32[$5 + 12 >> 2];
   $2 = HEAP32[$5 + 8 >> 2];
   HEAP32[$4 + 152 >> 2] = $2;
   HEAP32[$4 + 156 >> 2] = $0;
   $2 = HEAP32[$5 + 4 >> 2];
   $0 = HEAP32[$5 >> 2];
   HEAP32[$4 + 144 >> 2] = $0;
   HEAP32[$4 + 148 >> 2] = $2;
   $2 = HEAP32[$1 + 24 >> 2];
   $0 = HEAP32[$1 + 28 >> 2];
   HEAP32[$4 + 168 >> 2] = $2;
   HEAP32[$4 + 172 >> 2] = $0;
   $2 = HEAP32[$1 + 20 >> 2];
   $0 = HEAP32[$1 + 16 >> 2];
   HEAP32[$4 + 160 >> 2] = $0;
   HEAP32[$4 + 164 >> 2] = $2;
   $2 = HEAP32[$17 + 40 >> 2];
   $0 = HEAP32[$1 + 44 >> 2];
   HEAP32[$4 + 184 >> 2] = $2;
   HEAP32[$4 + 188 >> 2] = $0;
   $2 = HEAP32[$1 + 36 >> 2];
   $0 = HEAP32[$1 + 32 >> 2];
   HEAP32[$4 + 176 >> 2] = $0;
   HEAP32[$4 + 180 >> 2] = $2;
   $2 = HEAP32[$29 + 56 >> 2];
   $0 = HEAP32[$1 + 60 >> 2];
   HEAP32[$4 + 200 >> 2] = $2;
   HEAP32[$4 + 204 >> 2] = $0;
   $2 = HEAP32[$5 + 52 >> 2];
   $0 = HEAP32[$5 + 48 >> 2];
   HEAP32[$4 + 192 >> 2] = $0;
   HEAP32[$4 + 196 >> 2] = $2;
   HEAP32[$4 + 128 >> 2] = HEAP32[$3 + 4 >> 2];
   $0 = HEAP32[$4 + 692 >> 2];
   $2 = HEAP32[$4 + 688 >> 2];
   HEAP32[$4 + 32 >> 2] = $2;
   HEAP32[$4 + 36 >> 2] = $0;
   $2 = HEAP32[$4 + 684 >> 2];
   $0 = HEAP32[$4 + 680 >> 2];
   HEAP32[$4 + 24 >> 2] = $0;
   HEAP32[$4 + 28 >> 2] = $2;
   $9 = HEAPF32[$4 + 72 >> 2];
   if (!!($9 < HEAPF32[$4 + 24 >> 2])) {
    HEAPF32[$4 + 24 >> 2] = $9;
   }
   $10 = HEAPF32[$4 + 76 >> 2];
   if (!!($10 < HEAPF32[$4 + 28 >> 2])) {
    HEAPF32[$4 + 28 >> 2] = $10;
   }
   $7 = HEAPF32[$4 + 80 >> 2];
   if (!!($7 < HEAPF32[$4 + 32 >> 2])) {
    HEAPF32[$4 + 32 >> 2] = $7;
   }
   $8 = HEAPF32[$4 + 84 >> 2];
   if (!!($8 < HEAPF32[$4 + 36 >> 2])) {
    HEAPF32[$4 + 36 >> 2] = $8;
   }
   $0 = HEAP32[$4 + 692 >> 2];
   $2 = HEAP32[$4 + 688 >> 2];
   HEAP32[$4 + 16 >> 2] = $2;
   HEAP32[$4 + 20 >> 2] = $0;
   $2 = HEAP32[$4 + 684 >> 2];
   $0 = HEAP32[$4 + 680 >> 2];
   HEAP32[$4 + 8 >> 2] = $0;
   HEAP32[$4 + 12 >> 2] = $2;
   if (!!(HEAPF32[$4 + 8 >> 2] < $9)) {
    HEAPF32[$4 + 8 >> 2] = $9;
   }
   if (!!(HEAPF32[$4 + 12 >> 2] < $10)) {
    HEAPF32[$4 + 12 >> 2] = $10;
   }
   if (!!(HEAPF32[$4 + 16 >> 2] < $7)) {
    HEAPF32[$4 + 16 >> 2] = $7;
   }
   if (!!(HEAPF32[$4 + 20 >> 2] < $8)) {
    HEAPF32[$4 + 20 >> 2] = $8;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $4 + 88 | 0, $4 + 24 | 0, $4 + 8 | 0);
   btTriangleCallback___btTriangleCallback_28_29($4 + 88 | 0);
   break label$2;
  }
  if (($17 | 0) != 31) {
   break label$2;
  }
  $17 = HEAP32[$6 + 68 >> 2];
  $2 = HEAP32[$2 + 8 >> 2];
  HEAP32[$4 + 64 >> 2] = $3;
  HEAP32[$4 + 60 >> 2] = $1;
  HEAP32[$4 + 56 >> 2] = $0;
  HEAP32[$4 + 52 >> 2] = $5;
  HEAP32[$4 + 48 >> 2] = $6;
  HEAP32[$4 + 44 >> 2] = $2;
  HEAP32[$4 + 40 >> 2] = 8144;
  if ($17) {
   $9 = HEAPF32[$5 + 20 >> 2];
   $10 = HEAPF32[$5 + 36 >> 2];
   $7 = HEAPF32[$5 + 24 >> 2];
   $8 = HEAPF32[$5 + 52 >> 2];
   $12 = HEAPF32[$0 + 52 >> 2];
   $15 = HEAPF32[$5 + 40 >> 2];
   $20 = HEAPF32[$5 + 56 >> 2];
   $14 = HEAPF32[$0 + 56 >> 2];
   $16 = HEAPF32[$5 >> 2];
   $21 = HEAPF32[$5 + 16 >> 2];
   $22 = HEAPF32[$5 + 32 >> 2];
   $18 = HEAPF32[$5 + 4 >> 2];
   $19 = HEAPF32[$5 + 8 >> 2];
   $13 = HEAPF32[$5 + 48 >> 2];
   $11 = HEAPF32[$0 + 48 >> 2];
   HEAP32[$4 + 100 >> 2] = 0;
   $11 = Math_fround($11 - $13);
   $12 = Math_fround($12 - $8);
   $14 = Math_fround($14 - $20);
   HEAPF32[$4 + 96 >> 2] = Math_fround(Math_fround($19 * $11) + Math_fround($7 * $12)) + Math_fround($15 * $14);
   HEAPF32[$4 + 92 >> 2] = Math_fround(Math_fround($11 * $18) + Math_fround($12 * $9)) + Math_fround($14 * $10);
   HEAPF32[$4 + 88 >> 2] = Math_fround(Math_fround($11 * $16) + Math_fround($12 * $21)) + Math_fround($14 * $22);
   $11 = HEAPF32[$1 + 52 >> 2];
   $12 = HEAPF32[$1 + 56 >> 2];
   $14 = HEAPF32[$5 >> 2];
   $16 = HEAPF32[$5 + 4 >> 2];
   $18 = HEAPF32[$5 + 8 >> 2];
   $19 = HEAPF32[$1 + 48 >> 2];
   HEAP32[$4 + 460 >> 2] = 0;
   $13 = Math_fround($19 - $13);
   $8 = Math_fround($11 - $8);
   $11 = Math_fround(Math_fround($18 * $13) + Math_fround($7 * $8));
   $7 = Math_fround($12 - $20);
   HEAPF32[$4 + 456 >> 2] = $11 + Math_fround($15 * $7);
   HEAPF32[$4 + 452 >> 2] = Math_fround(Math_fround($13 * $16) + Math_fround($8 * $9)) + Math_fround($7 * $10);
   HEAPF32[$4 + 448 >> 2] = Math_fround(Math_fround($13 * $14) + Math_fround($8 * $21)) + Math_fround($7 * $22);
   btDbvt__rayTest_28btDbvtNode_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btDbvt__ICollide__29(HEAP32[$17 >> 2], $4 + 88 | 0, $4 + 448 | 0, $4 + 40 | 0);
   break label$2;
  }
  $0 = HEAP32[$6 + 20 >> 2];
  if (($0 | 0) < 1) {
   break label$2;
  }
  $2 = 0;
  while (1) {
   $6 = HEAP32[$6 + 28 >> 2] + Math_imul($2, 80) | 0;
   $3 = HEAP32[$6 + 64 >> 2];
   $11 = HEAPF32[$6 + 56 >> 2];
   $12 = HEAPF32[$6 + 48 >> 2];
   $14 = HEAPF32[$6 + 52 >> 2];
   $16 = HEAPF32[$6 + 32 >> 2];
   $18 = HEAPF32[$6 >> 2];
   $19 = HEAPF32[$6 + 16 >> 2];
   $23 = HEAPF32[$6 + 36 >> 2];
   $24 = HEAPF32[$6 + 4 >> 2];
   $26 = HEAPF32[$6 + 20 >> 2];
   $25 = HEAPF32[$6 + 40 >> 2];
   $27 = HEAPF32[$6 + 8 >> 2];
   $28 = HEAPF32[$6 + 24 >> 2];
   $30 = HEAPF32[$5 + 52 >> 2];
   $31 = HEAPF32[$5 + 56 >> 2];
   $9 = HEAPF32[$5 + 24 >> 2];
   $10 = HEAPF32[$5 + 20 >> 2];
   $7 = HEAPF32[$5 + 40 >> 2];
   $8 = HEAPF32[$5 + 36 >> 2];
   $32 = HEAPF32[$5 + 48 >> 2];
   $15 = HEAPF32[$5 + 8 >> 2];
   $20 = HEAPF32[$5 >> 2];
   $21 = HEAPF32[$5 + 4 >> 2];
   $22 = HEAPF32[$5 + 16 >> 2];
   $13 = HEAPF32[$5 + 32 >> 2];
   HEAP32[$4 + 148 >> 2] = 0;
   HEAP32[$4 + 132 >> 2] = 0;
   HEAP32[$4 + 116 >> 2] = 0;
   HEAP32[$4 + 100 >> 2] = 0;
   HEAPF32[$4 + 128 >> 2] = Math_fround(Math_fround($27 * $13) + Math_fround($28 * $8)) + Math_fround($25 * $7);
   HEAPF32[$4 + 124 >> 2] = Math_fround(Math_fround($24 * $13) + Math_fround($26 * $8)) + Math_fround($23 * $7);
   HEAPF32[$4 + 120 >> 2] = Math_fround(Math_fround($18 * $13) + Math_fround($19 * $8)) + Math_fround($16 * $7);
   HEAPF32[$4 + 112 >> 2] = Math_fround(Math_fround($27 * $22) + Math_fround($28 * $10)) + Math_fround($25 * $9);
   HEAPF32[$4 + 108 >> 2] = Math_fround(Math_fround($24 * $22) + Math_fround($26 * $10)) + Math_fround($23 * $9);
   HEAPF32[$4 + 104 >> 2] = Math_fround(Math_fround($18 * $22) + Math_fround($19 * $10)) + Math_fround($16 * $9);
   HEAPF32[$4 + 96 >> 2] = Math_fround(Math_fround($20 * $27) + Math_fround($21 * $28)) + Math_fround($15 * $25);
   HEAPF32[$4 + 92 >> 2] = Math_fround(Math_fround($20 * $24) + Math_fround($21 * $26)) + Math_fround($15 * $23);
   HEAPF32[$4 + 88 >> 2] = Math_fround(Math_fround($18 * $20) + Math_fround($19 * $21)) + Math_fround($16 * $15);
   HEAPF32[$4 + 144 >> 2] = $31 + Math_fround(Math_fround(Math_fround($13 * $12) + Math_fround($8 * $14)) + Math_fround($7 * $11));
   HEAPF32[$4 + 140 >> 2] = $30 + Math_fround(Math_fround(Math_fround($22 * $12) + Math_fround($10 * $14)) + Math_fround($9 * $11));
   HEAPF32[$4 + 136 >> 2] = $32 + Math_fround(Math_fround(Math_fround($20 * $12) + Math_fround($21 * $14)) + Math_fround($15 * $11));
   HEAP32[$4 + 700 >> 2] = $2;
   HEAP32[$4 + 696 >> 2] = -1;
   HEAP32[$4 + 688 >> 2] = HEAP32[$4 + 44 >> 2];
   HEAP32[$4 + 684 >> 2] = $3;
   HEAP32[$4 + 680 >> 2] = 0;
   HEAP32[$4 + 692 >> 2] = $4 + 88;
   HEAP32[$4 + 460 >> 2] = -65535;
   HEAP32[$4 + 464 >> 2] = 0;
   HEAP32[$4 + 452 >> 2] = 1065353216;
   HEAP32[$4 + 456 >> 2] = 0;
   HEAP32[$4 + 472 >> 2] = $2;
   HEAP32[$4 + 448 >> 2] = 8348;
   $5 = HEAP32[$4 + 64 >> 2];
   HEAP32[$4 + 468 >> 2] = $5;
   HEAP32[$4 + 452 >> 2] = HEAP32[$5 + 4 >> 2];
   HEAP32[$4 + 464 >> 2] = HEAP32[$5 + 16 >> 2];
   btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29(HEAP32[$4 + 56 >> 2], HEAP32[$4 + 60 >> 2], $4 + 680 | 0, $4 + 448 | 0);
   $2 = $2 + 1 | 0;
   if (($2 | 0) == ($0 | 0)) {
    break label$2;
   }
   $5 = HEAP32[$4 + 52 >> 2];
   $6 = HEAP32[$4 + 48 >> 2];
   continue;
  }
 }
 btConvexShape___btConvexShape_28_29($4 + 624 | 0);
 $0 = $4 + 704 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexHullInternal__Vertex__dot_28btConvexHullInternal__Point64_20const__29_20const($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 if (HEAP32[$1 + 100 >> 2] >= 0) {
  $4 = $2;
  $7 = HEAP32[$4 + 8 >> 2];
  $8 = $7;
  $5 = HEAP32[$4 + 12 >> 2];
  $6 = $5;
  $4 = $1;
  $5 = HEAP32[$4 + 92 >> 2];
  $7 = $5 >> 31;
  $3 = $7;
  $7 = $6;
  $4 = $5;
  $5 = $3;
  $5 = __wasm_i64_mul($8, $7, $4, $5);
  $9 = $5;
  $7 = i64toi32_i32$HIGH_BITS;
  $8 = $7;
  $4 = $2;
  $7 = HEAP32[$4 >> 2];
  $13 = $7;
  $5 = HEAP32[$4 + 4 >> 2];
  $6 = $5;
  $4 = $1;
  $5 = HEAP32[$4 + 88 >> 2];
  $7 = $5 >> 31;
  $3 = $7;
  $7 = $6;
  $4 = $5;
  $5 = $3;
  $5 = __wasm_i64_mul($13, $7, $4, $5);
  $6 = $5;
  $7 = i64toi32_i32$HIGH_BITS;
  $5 = $7;
  $7 = $8;
  $3 = $7 + $5 | 0;
  $4 = $9;
  $8 = $4 + $6 | 0;
  if ($8 >>> 0 < $6 >>> 0) {
   $3 = $3 + 1 | 0;
  }
  $9 = $8;
  $5 = $3;
  $7 = $2;
  $3 = HEAP32[$7 + 16 >> 2];
  $6 = $3;
  $4 = HEAP32[$7 + 20 >> 2];
  $2 = $4;
  $7 = $1;
  $4 = HEAP32[$7 + 96 >> 2];
  $3 = $4 >> 31;
  $1 = $3;
  $3 = $2;
  $2 = $4;
  $4 = $1;
  $4 = __wasm_i64_mul($6, $3, $2, $4);
  $6 = $4;
  $3 = i64toi32_i32$HIGH_BITS;
  $4 = $3;
  $3 = $5;
  $8 = $4 + $3 | 0;
  $7 = $9;
  $5 = $7 + $6 | 0;
  if ($5 >>> 0 < $6 >>> 0) {
   $8 = $8 + 1 | 0;
  }
  $15 = $5;
  $18 = $8;
  $3 = $5;
  label$2 : {
   if (($8 | 0) > 0 ? 1 : ($8 | 0) >= 0 ? $3 >>> 0 < 1 ? 0 : 1 : 0) {
    $8 = $0;
    HEAP32[$8 >> 2] = $15;
    $3 = $18;
    HEAP32[$8 + 4 >> 2] = $3;
    HEAP32[$8 + 32 >> 2] = 1;
    $6 = $8;
    HEAP32[$8 + 8 >> 2] = $3 >>> 31;
    $8 = 0;
    HEAP32[$6 + 12 >> 2] = $8;
    break label$2;
   }
   if (($8 | 0) < -1 ? 1 : ($18 | 0) <= -1 ? $15 >>> 0 > 4294967295 ? 0 : 1 : 0) {
    HEAP32[$0 + 32 >> 2] = -1;
    $6 = $15;
    $4 = 0 - $6 | 0;
    $5 = $18 + (0 < $6 >>> 0) | 0;
    $5 = 0 - $5 | 0;
    $7 = $0;
    HEAP32[$7 >> 2] = $4;
    HEAP32[$7 + 4 >> 2] = $5;
    $3 = $7;
    HEAP32[$3 + 8 >> 2] = $5 >> 31;
    $7 = $5 >> 31;
    HEAP32[$3 + 12 >> 2] = $7;
    break label$2;
   }
   $3 = $0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$3 + 32 >> 2] = 0;
   HEAP32[$3 + 8 >> 2] = 0;
   HEAP32[$3 + 12 >> 2] = 0;
  }
  $3 = $0;
  HEAP32[$3 + 16 >> 2] = 1;
  HEAP32[$3 + 20 >> 2] = 0;
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
  HEAP8[$3 + 36 | 0] = 1;
  return;
 }
 $5 = $1;
 $7 = HEAP32[$5 + 24 >> 2];
 $10 = $7;
 $3 = HEAP32[$5 + 28 >> 2];
 $9 = $3;
 $5 = $2;
 $3 = HEAP32[$5 >> 2];
 $15 = $3;
 $7 = HEAP32[$5 + 4 >> 2];
 $18 = $7;
 $5 = $1;
 $7 = HEAP32[$5 + 32 >> 2];
 $12 = $7;
 $3 = HEAP32[$5 + 36 >> 2];
 $13 = $3;
 $5 = $12;
 label$5 : {
  if (($3 | 0) > -1 ? 1 : ($3 | 0) >= -1 ? $5 >>> 0 <= 4294967295 ? 0 : 1 : 0) {
   $19 = $10;
   $5 = $9;
   $16 = $5;
   $17 = $12;
   $5 = $13;
   $8 = $5;
   break label$5;
  }
  $7 = $10;
  $8 = 0 - $7 | 0;
  $19 = $8;
  $3 = $9;
  $4 = $3 + (0 < $7 >>> 0) | 0;
  $4 = 0 - $4 | 0;
  $16 = $4;
  $3 = !($3 | $7);
  $4 = $13;
  $6 = $4 ^ -1;
  $5 = $6;
  $7 = $12 ^ -1;
  $4 = $3;
  $3 = $7 + $4 | 0;
  $17 = $3;
  $8 = $3 >>> 0 < $7 >>> 0 ? $5 + 1 | 0 : $5;
 }
 $11 = $8;
 $8 = $18;
 $4 = $8 >> 31;
 $9 = $4;
 $4 = $8;
 $6 = $9;
 $3 = $4 + $6 | 0;
 $10 = $4 >> 31;
 $7 = $10;
 $8 = $15;
 $5 = $7 + $8 | 0;
 if ($5 >>> 0 < $7 >>> 0) {
  $3 = $3 + 1 | 0;
 }
 $8 = $9;
 $8 = $3 ^ $8;
 $9 = $8;
 $8 = $11;
 $7 = $10;
 $4 = $5;
 $10 = $7 ^ $4;
 $4 = $9;
 $4 = __wasm_i64_mul($17, $8, $10, $4);
 $6 = $4;
 $8 = i64toi32_i32$HIGH_BITS;
 $5 = $8;
 $4 = 0;
 $20 = $4;
 $3 = 0;
 $24 = $3;
 $8 = $16;
 $17 = $8;
 $4 = $9;
 $23 = $4;
 $8 = __wasm_i64_mul($16, $20, $4, $3);
 $7 = $8;
 $3 = i64toi32_i32$HIGH_BITS;
 $8 = $3;
 $3 = $5;
 $5 = $8 + $3 | 0;
 $4 = $6;
 $6 = $7 + $4 | 0;
 if ($6 >>> 0 < $7 >>> 0) {
  $5 = $5 + 1 | 0;
 }
 $8 = $6;
 $6 = $5;
 $3 = $19;
 $19 = $3;
 $4 = 0;
 $16 = $4;
 $3 = $24;
 $3 = __wasm_i64_mul($19, $4, $23, $3);
 $23 = $3;
 $4 = i64toi32_i32$HIGH_BITS;
 $3 = 0;
 $5 = $3;
 $3 = $6;
 $6 = $5 + $3 | 0;
 $7 = $4;
 $4 = $8;
 $8 = $7 + $4 | 0;
 if ($8 >>> 0 < $7 >>> 0) {
  $6 = $6 + 1 | 0;
 }
 $11 = $8;
 $5 = $6;
 $3 = $10;
 $10 = $3;
 $4 = 0;
 $9 = $4;
 $4 = $20;
 $3 = $9;
 $3 = __wasm_i64_mul($17, $4, $10, $3);
 $17 = $3;
 $4 = i64toi32_i32$HIGH_BITS;
 $3 = 0;
 $6 = $3;
 $3 = $5;
 $8 = $6 + $3 | 0;
 $7 = $4;
 $4 = $11;
 $5 = $7 + $4 | 0;
 if ($5 >>> 0 < $7 >>> 0) {
  $8 = $8 + 1 | 0;
 }
 $14 = $5;
 $11 = $8;
 $4 = 0;
 $8 = $17;
 $7 = $8;
 $3 = $23;
 $6 = $7 + $3 | 0;
 $3 = 0;
 $8 = $3;
 $3 = $4;
 $5 = $8 + $3 | 0;
 $17 = $6;
 $5 = $6 >>> 0 < $7 >>> 0 ? $5 + 1 | 0 : $5;
 $20 = $5;
 $4 = 0;
 $3 = $4;
 $4 = $11;
 $6 = $4 + $3 | 0;
 $7 = $5;
 $5 = $14;
 $8 = $7 + $5 | 0;
 if ($8 >>> 0 < $7 >>> 0) {
  $6 = $6 + 1 | 0;
 }
 $14 = $8;
 $11 = $6;
 $4 = $17;
 $17 = 0;
 $20 = $4;
 $5 = $9;
 $4 = $16;
 $4 = __wasm_i64_mul($10, $5, $19, $4);
 $7 = $4;
 $5 = i64toi32_i32$HIGH_BITS;
 $4 = $5;
 $5 = $20;
 $8 = $5 + $4 | 0;
 $6 = $17;
 $3 = $7 + $6 | 0;
 if ($3 >>> 0 < $7 >>> 0) {
  $8 = $8 + 1 | 0;
 }
 $19 = $3;
 $6 = $20;
 $16 = $8;
 $7 = $17;
 $6 = ($6 | 0) == ($8 | 0) & $3 >>> 0 < $7 >>> 0 | $8 >>> 0 < $6 >>> 0;
 $5 = $11;
 $3 = $5;
 $7 = $14;
 $4 = $7 + $6 | 0;
 if ($4 >>> 0 < $6 >>> 0) {
  $3 = $3 + 1 | 0;
 }
 $10 = $4;
 $9 = $3;
 $5 = $15;
 $3 = $18;
 $3 = ($3 | 0) < 0 ? 1 : ($3 | 0) <= 0 ? $5 >>> 0 >= 0 ? 0 : 1 : 0;
 $6 = $12;
 $5 = $13;
 if (($3 | 0) == ((($5 | 0) < 0 ? 1 : ($5 | 0) <= 0 ? $6 >>> 0 >= 0 ? 0 : 1 : 0) | 0)) {
  $7 = $19;
  $6 = $16;
  $8 = $6;
 } else {
  $6 = $16;
  $3 = !($6 | $19);
  $6 = $9;
  $5 = $6 ^ -1;
  $6 = $3;
  $7 = $10;
  $3 = $7 ^ -1;
  $8 = $6 + $3 | 0;
  $7 = $5;
  $4 = $7;
  $10 = $8;
  $4 = $8 >>> 0 < $3 >>> 0 ? $4 + 1 | 0 : $4;
  $9 = $4;
  $3 = $19;
  $7 = 0 - $3 | 0;
  $6 = $16;
  $8 = $6 + (0 < $3 >>> 0) | 0;
  $8 = 0 - $8 | 0;
 }
 $23 = $7;
 $24 = $8;
 $4 = $1;
 $8 = HEAP32[$4 + 40 >> 2];
 $12 = $8;
 $5 = HEAP32[$4 + 44 >> 2];
 $13 = $5;
 $4 = $2;
 $5 = HEAP32[$4 + 8 >> 2];
 $15 = $5;
 $8 = HEAP32[$4 + 12 >> 2];
 $18 = $8;
 $4 = $1;
 $8 = HEAP32[$4 + 48 >> 2];
 $19 = $8;
 $5 = HEAP32[$4 + 52 >> 2];
 $16 = $5;
 $4 = $19;
 label$9 : {
  if (($5 | 0) > -1 ? 1 : ($5 | 0) >= -1 ? $4 >>> 0 <= 4294967295 ? 0 : 1 : 0) {
   $14 = $19;
   $4 = $16;
   $11 = $4;
   $3 = $12;
   $4 = $13;
   $6 = $4;
   break label$9;
  }
  $4 = $13;
  $3 = !($4 | $12);
  $4 = $16;
  $5 = $4 ^ -1;
  $4 = $3;
  $3 = $19;
  $8 = $3 ^ -1;
  $6 = $4 + $8 | 0;
  $3 = $5;
  $14 = $6;
  $7 = $6 >>> 0 < $8 >>> 0 ? $3 + 1 | 0 : $3;
  $11 = $7;
  $8 = $12;
  $3 = 0 - $8 | 0;
  $4 = $13;
  $6 = $4 + (0 < $8 >>> 0) | 0;
  $6 = 0 - $6 | 0;
 }
 $17 = $3;
 $20 = $6;
 $6 = $11;
 $11 = $6;
 $6 = $18;
 $12 = $6 >> 31;
 $5 = $6 >> 31;
 $13 = $5;
 $7 = $5;
 $5 = $6;
 $3 = $7 + $5 | 0;
 $6 = $15;
 $8 = $12;
 $4 = $6 + $8 | 0;
 if ($4 >>> 0 < $8 >>> 0) {
  $3 = $3 + 1 | 0;
 }
 $12 = $4 ^ $12;
 $6 = $13;
 $6 = $3 ^ $6;
 $13 = $6;
 $6 = $11;
 $5 = $13;
 $5 = __wasm_i64_mul($14, $6, $12, $5);
 $7 = $5;
 $6 = i64toi32_i32$HIGH_BITS;
 $4 = $6;
 $5 = 0;
 $11 = $5;
 $3 = 0;
 $21 = $3;
 $6 = $20;
 $14 = $6;
 $5 = $13;
 $22 = $5;
 $6 = __wasm_i64_mul($20, $11, $5, $3);
 $8 = $6;
 $3 = i64toi32_i32$HIGH_BITS;
 $6 = $3;
 $3 = $4;
 $4 = $6 + $3 | 0;
 $5 = $7;
 $7 = $5 + $8 | 0;
 if ($7 >>> 0 < $8 >>> 0) {
  $4 = $4 + 1 | 0;
 }
 $8 = $7;
 $6 = $4;
 $3 = $17;
 $17 = $3;
 $5 = 0;
 $20 = $5;
 $3 = $21;
 $3 = __wasm_i64_mul($17, $5, $22, $3);
 $22 = $3;
 $5 = i64toi32_i32$HIGH_BITS;
 $21 = $5;
 $3 = 0;
 $4 = $3;
 $3 = $6;
 $7 = $4 + $3 | 0;
 $5 = $8;
 $8 = $21;
 $6 = $5 + $8 | 0;
 if ($6 >>> 0 < $8 >>> 0) {
  $7 = $7 + 1 | 0;
 }
 $8 = $6;
 $4 = $7;
 $3 = $12;
 $12 = $3;
 $5 = 0;
 $13 = $5;
 $5 = $11;
 $3 = $13;
 $3 = __wasm_i64_mul($14, $5, $12, $3);
 $14 = $3;
 $5 = i64toi32_i32$HIGH_BITS;
 $11 = $5;
 $3 = 0;
 $7 = $3;
 $3 = $4;
 $6 = $7 + $3 | 0;
 $5 = $8;
 $8 = $11;
 $4 = $5 + $8 | 0;
 if ($4 >>> 0 < $8 >>> 0) {
  $6 = $6 + 1 | 0;
 }
 $25 = $4;
 $21 = $6;
 $5 = 0;
 $3 = $22;
 $6 = $14;
 $8 = $6;
 $7 = $3 + $8 | 0;
 $3 = 0;
 $6 = $3;
 $3 = $5;
 $4 = $6 + $3 | 0;
 $14 = $7;
 $4 = $7 >>> 0 < $8 >>> 0 ? $4 + 1 | 0 : $4;
 $11 = $4;
 $5 = 0;
 $3 = $5;
 $5 = $21;
 $7 = $5 + $3 | 0;
 $4 = $25;
 $8 = $11;
 $6 = $4 + $8 | 0;
 if ($6 >>> 0 < $8 >>> 0) {
  $7 = $7 + 1 | 0;
 }
 $22 = $6;
 $21 = $7;
 $5 = $14;
 $4 = $5;
 $14 = 0;
 $11 = $4;
 $4 = $13;
 $5 = $20;
 $5 = __wasm_i64_mul($12, $4, $17, $5);
 $8 = $5;
 $4 = i64toi32_i32$HIGH_BITS;
 $5 = $4;
 $4 = $11;
 $6 = $5 + $4 | 0;
 $7 = $14;
 $3 = $7 + $8 | 0;
 if ($3 >>> 0 < $8 >>> 0) {
  $6 = $6 + 1 | 0;
 }
 $17 = $3;
 $7 = $11;
 $20 = $6;
 $8 = $14;
 $7 = ($7 | 0) == ($6 | 0) & $3 >>> 0 < $8 >>> 0 | $6 >>> 0 < $7 >>> 0;
 $4 = $21;
 $3 = $4;
 $8 = $22;
 $5 = $7 + $8 | 0;
 if ($5 >>> 0 < $7 >>> 0) {
  $3 = $3 + 1 | 0;
 }
 $12 = $5;
 $13 = $3;
 $4 = $15;
 $3 = $18;
 $3 = ($3 | 0) < 0 ? 1 : ($3 | 0) <= 0 ? $4 >>> 0 >= 0 ? 0 : 1 : 0;
 $7 = $19;
 $4 = $16;
 if (($3 | 0) == ((($4 | 0) < 0 ? 1 : ($4 | 0) <= 0 ? $7 >>> 0 >= 0 ? 0 : 1 : 0) | 0)) {
  $8 = $17;
  $7 = $20;
  $6 = $7;
 } else {
  $7 = $20;
  $3 = !($7 | $17);
  $7 = $13;
  $4 = $7 ^ -1;
  $7 = $3;
  $8 = $12;
  $3 = $8 ^ -1;
  $6 = $7 + $3 | 0;
  $8 = $4;
  $5 = $8;
  $12 = $6;
  $5 = $6 >>> 0 < $3 >>> 0 ? $5 + 1 | 0 : $5;
  $13 = $5;
  $3 = $17;
  $8 = 0 - $3 | 0;
  $7 = $20;
  $6 = $7 + (0 < $3 >>> 0) | 0;
  $6 = 0 - $6 | 0;
 }
 $15 = $8;
 $18 = $6;
 $4 = $13;
 $6 = $9;
 $8 = $4 + $6 | 0;
 $5 = $10;
 $3 = $12;
 $7 = $5 + $3 | 0;
 if ($7 >>> 0 < $3 >>> 0) {
  $8 = $8 + 1 | 0;
 }
 $17 = $7;
 $20 = $8;
 $5 = $24;
 $8 = $18;
 $7 = $5 + $8 | 0;
 $6 = $15;
 $3 = $23;
 $4 = $6 + $3 | 0;
 if ($4 >>> 0 < $3 >>> 0) {
  $7 = $7 + 1 | 0;
 }
 $23 = $4;
 $24 = $7;
 $6 = $18;
 $3 = $15;
 $14 = ($7 | 0) == ($6 | 0) & $4 >>> 0 < $3 >>> 0 | $7 >>> 0 < $6 >>> 0;
 $3 = $1;
 $8 = HEAP32[$3 + 56 >> 2];
 $10 = $8;
 $7 = HEAP32[$3 + 60 >> 2];
 $9 = $7;
 $3 = $2;
 $7 = HEAP32[$3 + 16 >> 2];
 $15 = $7;
 $8 = HEAP32[$3 + 20 >> 2];
 $18 = $8;
 $3 = $1 - -64 | 0;
 $8 = HEAP32[$3 >> 2];
 $12 = $8;
 $7 = HEAP32[$3 + 4 >> 2];
 $13 = $7;
 $3 = $12;
 label$13 : {
  if (($7 | 0) > -1 ? 1 : ($7 | 0) >= -1 ? $3 >>> 0 <= 4294967295 ? 0 : 1 : 0) {
   $22 = $12;
   $3 = $13;
   $21 = $3;
   $6 = $10;
   $3 = $9;
   $5 = $3;
   break label$13;
  }
  $3 = $9;
  $2 = !($3 | $10);
  $3 = $13;
  $7 = $3 ^ -1;
  $6 = $12;
  $8 = $6 ^ -1;
  $3 = $2;
  $5 = $8 + $3 | 0;
  $6 = $7;
  $4 = $6;
  $22 = $5;
  $4 = $5 >>> 0 < $8 >>> 0 ? $4 + 1 | 0 : $4;
  $21 = $4;
  $8 = $10;
  $6 = 0 - $8 | 0;
  $3 = $9;
  $5 = $3 + (0 < $8 >>> 0) | 0;
  $5 = 0 - $5 | 0;
 }
 $19 = $6;
 $16 = $5;
 $5 = $20;
 $6 = $5;
 $4 = $17;
 $8 = $14;
 $3 = $4 + $8 | 0;
 if ($3 >>> 0 < $8 >>> 0) {
  $6 = $6 + 1 | 0;
 }
 $17 = $3;
 $20 = $6;
 $6 = $21;
 $2 = $6;
 $6 = $18;
 $10 = $6 >> 31;
 $4 = $6 >> 31;
 $9 = $4;
 $5 = $4;
 $4 = $6;
 $3 = $5 + $4 | 0;
 $6 = $15;
 $8 = $10;
 $7 = $6 + $8 | 0;
 if ($7 >>> 0 < $8 >>> 0) {
  $3 = $3 + 1 | 0;
 }
 $4 = $7;
 $10 = $4 ^ $10;
 $6 = $9;
 $6 = $3 ^ $6;
 $9 = $6;
 $6 = $2;
 $4 = $9;
 $4 = __wasm_i64_mul($22, $6, $10, $4);
 $5 = $4;
 $6 = i64toi32_i32$HIGH_BITS;
 $2 = $6;
 $4 = 0;
 $11 = $4;
 $3 = 0;
 $21 = $3;
 $6 = $16;
 $14 = $6;
 $4 = $9;
 $22 = $4;
 $6 = __wasm_i64_mul($16, $11, $4, $3);
 $8 = $6;
 $3 = i64toi32_i32$HIGH_BITS;
 $6 = $3;
 $3 = $2;
 $7 = $6 + $3 | 0;
 $4 = $5;
 $5 = $4 + $8 | 0;
 if ($5 >>> 0 < $8 >>> 0) {
  $7 = $7 + 1 | 0;
 }
 $6 = $5;
 $2 = $7;
 $3 = $19;
 $19 = $3;
 $4 = 0;
 $16 = $4;
 $3 = $21;
 $3 = __wasm_i64_mul($19, $4, $22, $3);
 $22 = $3;
 $4 = i64toi32_i32$HIGH_BITS;
 $21 = $4;
 $3 = 0;
 $7 = $3;
 $3 = $2;
 $5 = $7 + $3 | 0;
 $4 = $6;
 $8 = $21;
 $6 = $4 + $8 | 0;
 if ($6 >>> 0 < $8 >>> 0) {
  $5 = $5 + 1 | 0;
 }
 $7 = $6;
 $2 = $5;
 $3 = $10;
 $10 = $3;
 $4 = 0;
 $9 = $4;
 $4 = $11;
 $3 = $9;
 $3 = __wasm_i64_mul($14, $4, $10, $3);
 $14 = $3;
 $4 = i64toi32_i32$HIGH_BITS;
 $11 = $4;
 $3 = 0;
 $5 = $3;
 $3 = $2;
 $6 = $5 + $3 | 0;
 $4 = $7;
 $8 = $11;
 $7 = $4 + $8 | 0;
 if ($7 >>> 0 < $8 >>> 0) {
  $6 = $6 + 1 | 0;
 }
 $21 = $7;
 $2 = $6;
 $4 = 0;
 $3 = $22;
 $6 = $14;
 $8 = $6;
 $5 = $3 + $8 | 0;
 $3 = 0;
 $6 = $3;
 $3 = $4;
 $7 = $6 + $3 | 0;
 $14 = $5;
 $7 = $5 >>> 0 < $8 >>> 0 ? $7 + 1 | 0 : $7;
 $11 = $7;
 $4 = 0;
 $3 = $4;
 $4 = $2;
 $5 = $4 + $3 | 0;
 $7 = $21;
 $8 = $11;
 $6 = $7 + $8 | 0;
 if ($6 >>> 0 < $8 >>> 0) {
  $5 = $5 + 1 | 0;
 }
 $21 = $6;
 $2 = $5;
 $4 = $14;
 $14 = 0;
 $11 = $4;
 $7 = $9;
 $4 = $16;
 $4 = __wasm_i64_mul($10, $7, $19, $4);
 $8 = $4;
 $7 = i64toi32_i32$HIGH_BITS;
 $4 = $7;
 $7 = $11;
 $6 = $7 + $4 | 0;
 $5 = $14;
 $3 = $5 + $8 | 0;
 if ($3 >>> 0 < $8 >>> 0) {
  $6 = $6 + 1 | 0;
 }
 $19 = $3;
 $5 = $11;
 $16 = $6;
 $8 = $14;
 $5 = ($5 | 0) == ($6 | 0) & $3 >>> 0 < $8 >>> 0 | $6 >>> 0 < $5 >>> 0;
 $7 = $2;
 $3 = $7;
 $8 = $21;
 $4 = $5 + $8 | 0;
 if ($4 >>> 0 < $5 >>> 0) {
  $3 = $3 + 1 | 0;
 }
 $10 = $4;
 $9 = $3;
 $3 = $24;
 $2 = $3;
 $7 = $15;
 $3 = $18;
 $3 = ($3 | 0) < 0 ? 1 : ($3 | 0) <= 0 ? $7 >>> 0 >= 0 ? 0 : 1 : 0;
 $5 = $12;
 $7 = $13;
 if (($3 | 0) == ((($7 | 0) < 0 ? 1 : ($7 | 0) <= 0 ? $5 >>> 0 >= 0 ? 0 : 1 : 0) | 0)) {
  $12 = $19;
  $5 = $16;
  $6 = $5;
 } else {
  $5 = $16;
  $3 = !($5 | $19);
  $5 = $9;
  $7 = $5 ^ -1;
  $5 = $3;
  $8 = $10;
  $3 = $8 ^ -1;
  $6 = $5 + $3 | 0;
  $8 = $7;
  $4 = $8;
  $10 = $6;
  $4 = $6 >>> 0 < $3 >>> 0 ? $4 + 1 | 0 : $4;
  $9 = $4;
  $3 = $19;
  $8 = 0 - $3 | 0;
  $12 = $8;
  $5 = $16;
  $6 = $5 + (0 < $3 >>> 0) | 0;
  $6 = 0 - $6 | 0;
 }
 $13 = $6;
 $7 = $6;
 $6 = $2;
 $8 = $7 + $6 | 0;
 $4 = $23;
 $3 = $12;
 $5 = $4 + $3 | 0;
 if ($5 >>> 0 < $3 >>> 0) {
  $8 = $8 + 1 | 0;
 }
 $15 = $5;
 $4 = $13;
 $18 = $8;
 $3 = $12;
 $2 = ($4 | 0) == ($8 | 0) & $5 >>> 0 < $3 >>> 0 | $8 >>> 0 < $4 >>> 0;
 $6 = $9;
 $8 = $20;
 $5 = $6 + $8 | 0;
 $4 = $17;
 $3 = $10;
 $7 = $4 + $3 | 0;
 if ($7 >>> 0 < $4 >>> 0) {
  $5 = $5 + 1 | 0;
 }
 $4 = $7;
 $3 = $5;
 $7 = $3;
 $6 = $2;
 $8 = $4 + $6 | 0;
 if ($8 >>> 0 < $4 >>> 0) {
  $7 = $7 + 1 | 0;
 }
 $10 = $8;
 $9 = $7;
 $5 = $8;
 label$15 : {
  if (($7 | 0) > 0 ? 1 : ($7 | 0) >= 0 ? $5 >>> 0 < 0 ? 0 : 1 : 0) {
   $7 = $18;
   $5 = $9;
   $7 = $7 | $5;
   $4 = $10;
   $6 = $15;
   $5 = $4 | $6;
   $2 = ($5 | 0) != 0 | ($7 | 0) != 0;
   HEAP32[$0 + 32 >> 2] = $2;
   $4 = $2 ? -1 : 0;
   break label$15;
  }
  HEAP32[$0 + 32 >> 2] = -1;
  $5 = $18;
  $2 = !($5 | $15);
  $5 = $9;
  $7 = $5 ^ -1;
  $5 = $2;
  $6 = $10;
  $4 = $6 ^ -1;
  $3 = $5 + $4 | 0;
  $6 = $7;
  $8 = $6;
  $10 = $3;
  $8 = $3 >>> 0 < $4 >>> 0 ? $8 + 1 | 0 : $8;
  $9 = $8;
  $4 = $15;
  $6 = 0 - $4 | 0;
  $15 = $6;
  $5 = $18;
  $3 = $5 + (0 < $4 >>> 0) | 0;
  $3 = 0 - $3 | 0;
  $18 = $3;
  $4 = 1;
 }
 $2 = $1 + 72 | 0;
 $7 = $0;
 HEAP32[$7 + 8 >> 2] = $10;
 $3 = $9;
 HEAP32[$7 + 12 >> 2] = $3;
 HEAP32[$7 >> 2] = $15;
 $3 = $18;
 HEAP32[$7 + 4 >> 2] = $3;
 $8 = $1;
 $3 = HEAP32[$8 + 80 >> 2];
 $15 = $3;
 $7 = HEAP32[$8 + 84 >> 2];
 $18 = $7;
 $8 = $15;
 label$19 : {
  if (($7 | 0) > 0 ? 1 : ($7 | 0) >= 0 ? $8 >>> 0 < 0 ? 0 : 1 : 0) {
   $4 = $2;
   $8 = HEAP32[$4 >> 2];
   $7 = HEAP32[$4 + 4 >> 2];
   $2 = $8;
   $1 = $0 + 16 | 0;
   $8 = $1;
   HEAP32[$8 >> 2] = $2;
   HEAP32[$8 + 4 >> 2] = $7;
   $8 = HEAP32[$4 + 12 >> 2];
   $7 = HEAP32[$4 + 8 >> 2];
   $2 = $7;
   $7 = $1;
   HEAP32[$7 + 8 >> 2] = $2;
   HEAP32[$7 + 12 >> 2] = $8;
   break label$19;
  }
  HEAP32[$0 + 32 >> 2] = $4;
  $4 = $2;
  $8 = HEAP32[$4 >> 2];
  $7 = HEAP32[$4 + 4 >> 2];
  $4 = $0;
  $3 = $8;
  $5 = 0 - $3 | 0;
  HEAP32[$4 + 16 >> 2] = $5;
  $8 = $7;
  $6 = $8 + (0 < $3 >>> 0) | 0;
  $6 = 0 - $6 | 0;
  HEAP32[$4 + 20 >> 2] = $6;
  $6 = $18;
  $4 = $6 ^ -1;
  $6 = !($3 | $8);
  $7 = $15;
  $3 = $7 ^ -1;
  $8 = $6 + $3 | 0;
  $7 = $4;
  $5 = $7;
  $6 = $0;
  HEAP32[$6 + 24 >> 2] = $8;
  $5 = $8 >>> 0 < $3 >>> 0 ? $5 + 1 | 0 : $5;
  HEAP32[$6 + 28 >> 2] = $5;
 }
 HEAP8[$0 + 36 | 0] = 0;
}
function gjkepa2_impl__GJK__Evaluate_28gjkepa2_impl__MinkowskiDiff_20const__2c_20btVector3_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = 0, $26 = 0, $27 = 0;
 $5 = global$0 - 96 | 0;
 $3 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$0 + 376 >> 2] = 0;
 HEAP32[$0 + 364 >> 2] = 4;
 HEAP32[$0 + 368 >> 2] = 0;
 $11 = $0 + 316 | 0;
 HEAP32[$0 + 360 >> 2] = $11;
 HEAP32[$0 + 356 >> 2] = $0 + 284;
 HEAP32[$0 + 352 >> 2] = $0 + 252;
 HEAP32[$0 + 348 >> 2] = $0 + 220;
 $4 = $1;
 $6 = HEAP32[$4 >> 2];
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$0 >> 2] = $6;
 HEAP32[$0 + 4 >> 2] = $3;
 $6 = HEAP32[$4 + 20 >> 2];
 $3 = HEAP32[$4 + 16 >> 2];
 HEAP32[$0 + 16 >> 2] = $3;
 HEAP32[$0 + 20 >> 2] = $6;
 $3 = HEAP32[$4 + 12 >> 2];
 $6 = HEAP32[$4 + 8 >> 2];
 HEAP32[$0 + 8 >> 2] = $6;
 HEAP32[$0 + 12 >> 2] = $3;
 $6 = HEAP32[$4 + 36 >> 2];
 $3 = HEAP32[$4 + 32 >> 2];
 HEAP32[$0 + 32 >> 2] = $3;
 HEAP32[$0 + 36 >> 2] = $6;
 $3 = HEAP32[$4 + 28 >> 2];
 $6 = HEAP32[$4 + 24 >> 2];
 HEAP32[$0 + 24 >> 2] = $6;
 HEAP32[$0 + 28 >> 2] = $3;
 $6 = HEAP32[$4 + 52 >> 2];
 $3 = HEAP32[$4 + 48 >> 2];
 HEAP32[$0 + 48 >> 2] = $3;
 HEAP32[$0 + 52 >> 2] = $6;
 $3 = HEAP32[$4 + 44 >> 2];
 $6 = HEAP32[$4 + 40 >> 2];
 HEAP32[$0 + 40 >> 2] = $6;
 HEAP32[$0 + 44 >> 2] = $3;
 $4 = $4 - -64 | 0;
 $3 = HEAP32[$4 >> 2];
 $6 = HEAP32[$4 + 4 >> 2];
 $4 = $3;
 $3 = $0 - -64 | 0;
 HEAP32[$3 >> 2] = $4;
 HEAP32[$3 + 4 >> 2] = $6;
 $4 = $1;
 $6 = HEAP32[$4 + 56 >> 2];
 $3 = HEAP32[$4 + 60 >> 2];
 HEAP32[$0 + 56 >> 2] = $6;
 HEAP32[$0 + 60 >> 2] = $3;
 $6 = HEAP32[$4 + 84 >> 2];
 $3 = HEAP32[$4 + 80 >> 2];
 HEAP32[$0 + 80 >> 2] = $3;
 HEAP32[$0 + 84 >> 2] = $6;
 $3 = HEAP32[$4 + 76 >> 2];
 $6 = HEAP32[$4 + 72 >> 2];
 HEAP32[$0 + 72 >> 2] = $6;
 HEAP32[$0 + 76 >> 2] = $3;
 $6 = HEAP32[$4 + 100 >> 2];
 $3 = HEAP32[$4 + 96 >> 2];
 HEAP32[$0 + 96 >> 2] = $3;
 HEAP32[$0 + 100 >> 2] = $6;
 $3 = HEAP32[$4 + 92 >> 2];
 $6 = HEAP32[$4 + 88 >> 2];
 HEAP32[$0 + 88 >> 2] = $6;
 HEAP32[$0 + 92 >> 2] = $3;
 $6 = HEAP32[$4 + 108 >> 2];
 $3 = HEAP32[$4 + 104 >> 2];
 HEAP32[$0 + 104 >> 2] = $3;
 HEAP32[$0 + 108 >> 2] = $6;
 $3 = HEAP32[$4 + 116 >> 2];
 $6 = HEAP32[$4 + 112 >> 2];
 HEAP32[$0 + 112 >> 2] = $6;
 HEAP32[$0 + 116 >> 2] = $3;
 $6 = HEAP32[$4 + 124 >> 2];
 $3 = HEAP32[$4 + 120 >> 2];
 HEAP32[$0 + 180 >> 2] = 0;
 HEAP32[$0 + 144 >> 2] = 0;
 HEAP32[$0 + 120 >> 2] = $3;
 HEAP32[$0 + 124 >> 2] = $6;
 $4 = $2;
 $6 = HEAP32[$4 + 8 >> 2];
 $3 = HEAP32[$4 + 12 >> 2];
 $2 = $6;
 $1 = $0 + 136 | 0;
 $6 = $1;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$6 + 4 >> 2] = $3;
 $6 = HEAP32[$4 + 4 >> 2];
 $3 = HEAP32[$4 >> 2];
 HEAP32[$0 + 128 >> 2] = $3;
 HEAP32[$0 + 132 >> 2] = $6;
 $20 = $0 + 128 | 0;
 $8 = HEAPF32[$0 + 128 >> 2];
 $12 = HEAPF32[$0 + 132 >> 2];
 $9 = HEAPF32[$0 + 136 >> 2];
 $13 = Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($12 * $12)) + Math_fround($9 * $9));
 label$2 : {
  if (!!($13 > Math_fround(0))) {
   HEAPF32[$5 + 40 >> 2] = -$9;
   HEAPF32[$5 + 36 >> 2] = -$12;
   HEAPF32[$5 + 32 >> 2] = -$8;
   break label$2;
  }
  HEAP32[$5 + 40 >> 2] = 0;
  HEAP32[$5 + 32 >> 2] = 1065353216;
  HEAP32[$5 + 36 >> 2] = 0;
 }
 HEAP32[$5 + 44 >> 2] = 0;
 HEAP32[$0 + 364 >> 2] = 3;
 $1 = $0 + 164 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$0 + 180 >> 2] = 1;
 HEAP32[$0 + 148 >> 2] = $11;
 gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $5 + 32 | 0, $11);
 HEAP32[$0 + 164 >> 2] = 1065353216;
 $1 = HEAP32[$0 + 148 >> 2];
 $4 = $1;
 $6 = HEAP32[$4 + 16 >> 2];
 $3 = HEAP32[$4 + 20 >> 2];
 $2 = $6;
 $6 = $20;
 HEAP32[$6 >> 2] = $2;
 HEAP32[$6 + 4 >> 2] = $3;
 $2 = $4 + 24 | 0;
 $4 = $2;
 $3 = HEAP32[$4 >> 2];
 $6 = HEAP32[$4 + 4 >> 2];
 $2 = $3;
 $3 = $20;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $6;
 $4 = $1;
 $6 = HEAP32[$4 + 24 >> 2];
 $3 = HEAP32[$4 + 28 >> 2];
 HEAP32[$5 + 88 >> 2] = $6;
 HEAP32[$5 + 92 >> 2] = $3;
 $6 = HEAP32[$4 + 20 >> 2];
 $3 = HEAP32[$4 + 16 >> 2];
 HEAP32[$5 + 80 >> 2] = $3;
 HEAP32[$5 + 84 >> 2] = $6;
 $3 = HEAP32[$4 + 28 >> 2];
 $6 = HEAP32[$4 + 24 >> 2];
 HEAP32[$5 + 72 >> 2] = $6;
 HEAP32[$5 + 76 >> 2] = $3;
 $6 = HEAP32[$4 + 20 >> 2];
 $3 = HEAP32[$4 + 16 >> 2];
 HEAP32[$5 + 64 >> 2] = $3;
 HEAP32[$5 + 68 >> 2] = $6;
 $3 = HEAP32[$4 + 28 >> 2];
 $6 = HEAP32[$4 + 24 >> 2];
 HEAP32[$5 + 56 >> 2] = $6;
 HEAP32[$5 + 60 >> 2] = $3;
 $6 = HEAP32[$4 + 20 >> 2];
 $3 = HEAP32[$4 + 16 >> 2];
 HEAP32[$5 + 48 >> 2] = $3;
 HEAP32[$5 + 52 >> 2] = $6;
 $3 = HEAP32[$4 + 28 >> 2];
 $6 = HEAP32[$4 + 24 >> 2];
 HEAP32[$5 + 40 >> 2] = $6;
 HEAP32[$5 + 44 >> 2] = $3;
 $6 = HEAP32[$4 + 20 >> 2];
 $3 = HEAP32[$4 + 16 >> 2];
 HEAP32[$5 + 32 >> 2] = $3;
 HEAP32[$5 + 36 >> 2] = $6;
 $8 = HEAPF32[$0 + 136 >> 2];
 $9 = HEAPF32[$0 + 132 >> 2];
 $7 = HEAPF32[$0 + 128 >> 2];
 $14 = HEAP32[$0 + 368 >> 2];
 label$4 : {
  label$5 : {
   label$6 : {
    while (1) {
     $16 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($9 * $9)) + Math_fround($8 * $8))));
     if (!!($16 < Math_fround(9999999747378752e-20))) {
      HEAP32[$0 + 376 >> 2] = 1;
      break label$6;
     }
     HEAP32[$5 + 28 >> 2] = 0;
     HEAPF32[$5 + 24 >> 2] = -$8;
     HEAPF32[$5 + 20 >> 2] = -$9;
     HEAPF32[$5 + 16 >> 2] = -$7;
     $15 = Math_imul($14, 36) + $0 | 0;
     $11 = $15 + 148 | 0;
     $18 = $15;
     $2 = $15 + 180 | 0;
     $1 = HEAP32[$2 >> 2];
     $17 = ($1 << 2) + $11 | 0;
     HEAP32[$17 + 16 >> 2] = 0;
     $2 = HEAP32[$0 + 364 >> 2] + -1 | 0;
     HEAP32[$0 + 364 >> 2] = $2;
     $2 = HEAP32[(($2 << 2) + $0 | 0) + 348 >> 2];
     HEAP32[$17 >> 2] = $2;
     HEAP32[$15 + 180 >> 2] = $1 + 1;
     gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $5 + 16 | 0, $2);
     label$9 : {
      $17 = HEAP32[$15 + 180 >> 2];
      $1 = HEAP32[(($17 << 2) + $11 | 0) + -4 >> 2];
      $8 = HEAPF32[$1 + 16 >> 2];
      $12 = Math_fround($8 - HEAPF32[$5 + 32 >> 2]);
      $7 = Math_fround($12 * $12);
      $12 = HEAPF32[$1 + 20 >> 2];
      $9 = Math_fround($12 - HEAPF32[$5 + 36 >> 2]);
      $10 = Math_fround($7 + Math_fround($9 * $9));
      $9 = HEAPF32[$1 + 24 >> 2];
      $7 = Math_fround($9 - HEAPF32[$5 + 40 >> 2]);
      if (Math_fround($10 + Math_fround($7 * $7)) < Math_fround(9999999747378752e-20)) {
       break label$9;
      }
      $7 = Math_fround($8 - HEAPF32[$5 + 48 >> 2]);
      $10 = Math_fround($7 * $7);
      $7 = Math_fround($12 - HEAPF32[$5 + 52 >> 2]);
      $10 = Math_fround($10 + Math_fround($7 * $7));
      $7 = Math_fround($9 - HEAPF32[$5 + 56 >> 2]);
      if (!!(Math_fround($10 + Math_fround($7 * $7)) < Math_fround(9999999747378752e-20))) {
       break label$9;
      }
      $7 = Math_fround($8 - HEAPF32[$5 + 64 >> 2]);
      $10 = Math_fround($7 * $7);
      $7 = Math_fround($12 - HEAPF32[$5 + 68 >> 2]);
      $10 = Math_fround($10 + Math_fround($7 * $7));
      $7 = Math_fround($9 - HEAPF32[$5 + 72 >> 2]);
      if (Math_fround($10 + Math_fround($7 * $7)) < Math_fround(9999999747378752e-20)) {
       break label$9;
      }
      $7 = Math_fround($8 - HEAPF32[$5 + 80 >> 2]);
      $10 = Math_fround($7 * $7);
      $7 = Math_fround($12 - HEAPF32[$5 + 84 >> 2]);
      $10 = Math_fround($10 + Math_fround($7 * $7));
      $7 = Math_fround($9 - HEAPF32[$5 + 88 >> 2]);
      if (Math_fround($10 + Math_fround($7 * $7)) < Math_fround(9999999747378752e-20)) {
       break label$9;
      }
      $19 = $1;
      $1 = $1 + 16 | 0;
      $4 = $1;
      $6 = HEAP32[$4 + 8 >> 2];
      $3 = HEAP32[$4 + 12 >> 2];
      $1 = $6;
      $25 = $25 + 1 & 3;
      $2 = ($5 + 32 | 0) + ($25 << 4) | 0;
      $6 = $2;
      HEAP32[$6 + 8 >> 2] = $1;
      HEAP32[$6 + 12 >> 2] = $3;
      $4 = $19;
      $3 = HEAP32[$4 + 16 >> 2];
      $6 = HEAP32[$4 + 20 >> 2];
      $1 = $3;
      $3 = $2;
      HEAP32[$3 >> 2] = $1;
      HEAP32[$3 + 4 >> 2] = $6;
      $8 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 128 >> 2] * $8) + Math_fround(HEAPF32[$0 + 132 >> 2] * $12)) + Math_fround(HEAPF32[$0 + 136 >> 2] * $9)) / $16);
      $21 = $8 > $21 ? $8 : $21;
      if (!!(Math_fround(Math_fround($16 - $21) + Math_fround($16 * Math_fround(-9999999747378752e-20))) <= Math_fround(0))) {
       $14 = HEAP32[$0 + 368 >> 2];
       $1 = Math_imul($14, 36) + $0 | 0;
       $2 = $1 + 180 | 0;
       $3 = $2;
       $2 = HEAP32[$1 + 180 >> 2] + -1 | 0;
       HEAP32[$3 >> 2] = $2;
       $1 = HEAP32[(($2 << 2) + $1 | 0) + 148 >> 2];
       $2 = HEAP32[$0 + 364 >> 2];
       HEAP32[$0 + 364 >> 2] = $2 + 1;
       HEAP32[(($2 << 2) + $0 | 0) + 348 >> 2] = $1;
       break label$6;
      }
      HEAP32[$5 + 12 >> 2] = 0;
      label$11 : {
       label$12 : {
        $1 = $17 + -2 | 0;
        label$13 : {
         if ($1 >>> 0 > 2) {
          break label$13;
         }
         label$14 : {
          switch ($1 - 1 | 0) {
          default:
           $1 = HEAP32[$15 + 152 >> 2];
           $22 = HEAPF32[$1 + 16 >> 2];
           $11 = HEAP32[$11 >> 2];
           $7 = HEAPF32[$11 + 16 >> 2];
           $8 = Math_fround($22 - $7);
           $23 = HEAPF32[$1 + 20 >> 2];
           $16 = HEAPF32[$11 + 20 >> 2];
           $12 = Math_fround($23 - $16);
           $24 = HEAPF32[$1 + 24 >> 2];
           $13 = HEAPF32[$11 + 24 >> 2];
           $9 = Math_fround($24 - $13);
           $10 = Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($12 * $12)) + Math_fround($9 * $9));
           if (!($10 > Math_fround(0))) {
            break label$12;
           }
           $10 = Math_fround(Math_fround(-Math_fround(Math_fround(Math_fround($7 * $8) + Math_fround($16 * $12)) + Math_fround($13 * $9))) / $10);
           if (!!($10 >= Math_fround(1))) {
            HEAP32[$5 + 16 >> 2] = 0;
            HEAP32[$5 + 20 >> 2] = 1065353216;
            HEAP32[$5 + 12 >> 2] = 2;
            $13 = Math_fround(Math_fround(Math_fround($22 * $22) + Math_fround($23 * $23)) + Math_fround($24 * $24));
            break label$13;
           }
           if (!!($10 <= Math_fround(0))) {
            HEAP32[$5 + 16 >> 2] = 1065353216;
            HEAP32[$5 + 20 >> 2] = 0;
            HEAP32[$5 + 12 >> 2] = 1;
            $13 = Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($16 * $16)) + Math_fround($13 * $13));
            break label$13;
           }
           HEAP32[$5 + 12 >> 2] = 3;
           HEAPF32[$5 + 20 >> 2] = $10;
           HEAPF32[$5 + 16 >> 2] = Math_fround(1) - $10;
           $9 = Math_fround($13 + Math_fround($9 * $10));
           $8 = Math_fround($7 + Math_fround($8 * $10));
           $7 = Math_fround($8 * $8);
           $8 = Math_fround($16 + Math_fround($12 * $10));
           $13 = Math_fround(Math_fround($9 * $9) + Math_fround($7 + Math_fround($8 * $8)));
           break label$13;
          case 0:
           $13 = gjkepa2_impl__GJK__projectorigin_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float__2c_20unsigned_20int__29(HEAP32[$11 >> 2] + 16 | 0, HEAP32[$15 + 152 >> 2] + 16 | 0, HEAP32[$15 + 156 >> 2] + 16 | 0, $5 + 16 | 0, $5 + 12 | 0);
           break label$13;
          case 1:
           break label$14;
          }
         }
         $13 = gjkepa2_impl__GJK__projectorigin_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float__2c_20unsigned_20int__29(HEAP32[$11 >> 2] + 16 | 0, HEAP32[$15 + 152 >> 2] + 16 | 0, HEAP32[$15 + 156 >> 2] + 16 | 0, HEAP32[$15 + 160 >> 2] + 16 | 0, $5 + 16 | 0, $5 + 12 | 0);
        }
        if (!($13 >= Math_fround(0))) {
         break label$12;
        }
        $1 = 0;
        $14 = 1 - $14 | 0;
        $4 = Math_imul($14, 36) + $0 | 0;
        $6 = $4;
        $2 = $6 + 180 | 0;
        HEAP32[$2 >> 2] = 0;
        $3 = $20;
        HEAP32[$3 + 8 >> 2] = 0;
        HEAP32[$3 + 12 >> 2] = 0;
        HEAP32[$3 >> 2] = 0;
        HEAP32[$3 + 4 >> 2] = 0;
        HEAP32[$0 + 368 >> 2] = $14;
        $8 = Math_fround(0);
        $3 = HEAP32[$5 + 12 >> 2];
        $9 = Math_fround(0);
        $7 = Math_fround(0);
        $19 = HEAP32[$18 + 180 >> 2];
        if (!$19) {
         break label$11;
        }
        while (1) {
         $11 = $1 << 2;
         $18 = $15 + $11 | 0;
         $17 = $18 + 148 | 0;
         $2 = HEAP32[$17 >> 2];
         label$20 : {
          if ($3 >>> $1 & 1) {
           $17 = HEAP32[$6 + 180 >> 2];
           $26 = ($17 << 2) + $4 | 0;
           HEAP32[$26 + 148 >> 2] = $2;
           $2 = ($5 + 16 | 0) + $11 | 0;
           $8 = HEAPF32[$2 >> 2];
           $2 = HEAP32[$2 >> 2];
           HEAP32[$6 + 180 >> 2] = $17 + 1;
           HEAP32[$26 + 164 >> 2] = $2;
           $11 = HEAP32[$18 + 148 >> 2];
           $12 = HEAPF32[$11 + 24 >> 2];
           $9 = HEAPF32[$11 + 20 >> 2];
           $7 = Math_fround(Math_fround(HEAPF32[$11 + 16 >> 2] * $8) + HEAPF32[$0 + 128 >> 2]);
           HEAPF32[$0 + 128 >> 2] = $7;
           $9 = Math_fround(Math_fround($9 * $8) + HEAPF32[$0 + 132 >> 2]);
           HEAPF32[$0 + 132 >> 2] = $9;
           $8 = Math_fround(Math_fround($12 * $8) + HEAPF32[$0 + 136 >> 2]);
           HEAPF32[$0 + 136 >> 2] = $8;
           break label$20;
          }
          $11 = HEAP32[$0 + 364 >> 2];
          HEAP32[$0 + 364 >> 2] = $11 + 1;
          HEAP32[(($11 << 2) + $0 | 0) + 348 >> 2] = $2;
         }
         $1 = $1 + 1 | 0;
         if (($19 | 0) != ($1 | 0)) {
          continue;
         }
         break;
        }
        break label$11;
       }
       $14 = HEAP32[$0 + 368 >> 2];
       $1 = Math_imul($14, 36) + $0 | 0;
       $2 = $1 + 180 | 0;
       $3 = $2;
       $2 = HEAP32[$1 + 180 >> 2] + -1 | 0;
       HEAP32[$3 >> 2] = $2;
       $1 = HEAP32[(($2 << 2) + $1 | 0) + 148 >> 2];
       $2 = HEAP32[$0 + 364 >> 2];
       HEAP32[$0 + 364 >> 2] = $2 + 1;
       HEAP32[(($2 << 2) + $0 | 0) + 348 >> 2] = $1;
       break label$6;
      }
      if (($3 | 0) == 15) {
       HEAP32[$0 + 376 >> 2] = 1;
      }
      if (($27 | 0) == 127) {
       $1 = 2;
       HEAP32[$0 + 376 >> 2] = 2;
       HEAP32[$0 + 372 >> 2] = (Math_imul($14, 36) + $0 | 0) + 148;
       break label$4;
      }
      $27 = $27 + 1 | 0;
      $1 = HEAP32[$0 + 376 >> 2];
      if (!$1) {
       continue;
      }
      break label$5;
     }
     break;
    }
    $14 = HEAP32[$0 + 368 >> 2];
    $1 = Math_imul($14, 36) + $0 | 0;
    $2 = $1 + 180 | 0;
    $3 = $2;
    $2 = HEAP32[$1 + 180 >> 2] + -1 | 0;
    HEAP32[$3 >> 2] = $2;
    $1 = HEAP32[(($2 << 2) + $1 | 0) + 148 >> 2];
    $2 = HEAP32[$0 + 364 >> 2];
    HEAP32[$0 + 364 >> 2] = $2 + 1;
    HEAP32[(($2 << 2) + $0 | 0) + 348 >> 2] = $1;
   }
   $1 = HEAP32[$0 + 376 >> 2];
  }
  HEAP32[$0 + 372 >> 2] = (Math_imul($14, 36) + $0 | 0) + 148;
  if ($1 >>> 0 > 1) {
   break label$4;
  }
  if ($1 - 1) {
   $8 = HEAPF32[$0 + 128 >> 2];
   $7 = Math_fround($8 * $8);
   $8 = HEAPF32[$0 + 132 >> 2];
   $7 = Math_fround($7 + Math_fround($8 * $8));
   $8 = HEAPF32[$0 + 136 >> 2];
   HEAPF32[$0 + 144 >> 2] = Math_sqrt(Math_fround($7 + Math_fround($8 * $8)));
   $1 = 0;
   break label$4;
  }
  HEAP32[$0 + 144 >> 2] = 0;
  $1 = 1;
 }
 $0 = $5 + 96 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function btMinkowskiPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = 0, $27 = 0, $28 = 0, $29 = Math_fround(0), $30 = 0, $31 = Math_fround(0);
 $10 = global$0 - 4240 | 0;
 $0 = $10;
 if ($10 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 $30 = HEAP32[$2 + 4 >> 2] + -17 >>> 0 <= 1 ? HEAP32[$3 + 4 >> 2] + -17 >>> 0 < 2 : $30;
 while (1) {
  btMinkowskiPenetrationDepthSolver__getPenetrationDirections_28_29();
  $19 = HEAPF32[$4 + 32 >> 2];
  $21 = HEAPF32[$4 + 16 >> 2];
  $22 = HEAPF32[$4 >> 2];
  $23 = HEAPF32[$4 + 36 >> 2];
  $24 = HEAPF32[$4 + 20 >> 2];
  $20 = HEAPF32[$4 + 4 >> 2];
  $25 = HEAPF32[$4 + 40 >> 2];
  $12 = HEAPF32[$4 + 24 >> 2];
  $13 = HEAPF32[$4 + 8 >> 2];
  $18 = $11 << 4;
  $17 = $18 + ($10 + 1264 | 0) | 0;
  HEAP32[$17 + 12 >> 2] = 0;
  $14 = HEAPF32[$18 + 21572 >> 2];
  $15 = Math_fround(-$14);
  $16 = Math_fround($12 * $15);
  $12 = HEAPF32[$18 + 21568 >> 2];
  $16 = Math_fround($16 - Math_fround($13 * $12));
  $13 = HEAPF32[$18 + 21576 >> 2];
  HEAPF32[$17 + 8 >> 2] = $16 - Math_fround($25 * $13);
  HEAPF32[$17 + 4 >> 2] = Math_fround(Math_fround($24 * $15) - Math_fround($12 * $20)) - Math_fround($13 * $23);
  HEAPF32[$17 >> 2] = Math_fround(Math_fround($21 * $15) - Math_fround($12 * $22)) - Math_fround($13 * $19);
  $15 = HEAPF32[$5 + 40 >> 2];
  $19 = HEAPF32[$5 + 8 >> 2];
  $21 = HEAPF32[$5 + 24 >> 2];
  $22 = HEAPF32[$5 + 36 >> 2];
  $23 = HEAPF32[$5 + 4 >> 2];
  $24 = HEAPF32[$5 + 20 >> 2];
  $20 = HEAPF32[$5 + 32 >> 2];
  $25 = HEAPF32[$5 >> 2];
  $16 = HEAPF32[$5 + 16 >> 2];
  $18 = ($10 + 272 | 0) + $18 | 0;
  HEAP32[$18 + 12 >> 2] = 0;
  HEAPF32[$18 >> 2] = Math_fround(Math_fround($12 * $25) + Math_fround($14 * $16)) + Math_fround($13 * $20);
  HEAPF32[$18 + 4 >> 2] = Math_fround(Math_fround($12 * $23) + Math_fround($14 * $24)) + Math_fround($13 * $22);
  HEAPF32[$18 + 8 >> 2] = Math_fround(Math_fround($12 * $19) + Math_fround($14 * $21)) + Math_fround($13 * $15);
  $11 = $11 + 1 | 0;
  if (($11 | 0) != 42) {
   continue;
  }
  break;
 }
 $18 = 42;
 $28 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 84 >> 2]]($2) | 0;
 if (($28 | 0) >= 1) {
  while (1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 88 >> 2]]($2, $26, $10 + 3248 | 0);
   $15 = HEAPF32[$4 + 8 >> 2];
   $19 = HEAPF32[$4 >> 2];
   $21 = HEAPF32[$4 + 4 >> 2];
   $22 = HEAPF32[$4 + 24 >> 2];
   $23 = HEAPF32[$4 + 16 >> 2];
   $24 = HEAPF32[$4 + 20 >> 2];
   $20 = HEAPF32[$4 + 40 >> 2];
   $13 = HEAPF32[$4 + 32 >> 2];
   $14 = HEAPF32[$4 + 36 >> 2];
   HEAP32[$10 + 3260 >> 2] = 0;
   $12 = HEAPF32[$10 + 3248 >> 2];
   $16 = Math_fround($13 * $12);
   $13 = HEAPF32[$10 + 3252 >> 2];
   $16 = Math_fround($16 + Math_fround($14 * $13));
   $14 = HEAPF32[$10 + 3256 >> 2];
   HEAPF32[$10 + 3256 >> 2] = $16 + Math_fround($20 * $14);
   HEAPF32[$10 + 3252 >> 2] = Math_fround(Math_fround($12 * $23) + Math_fround($13 * $24)) + Math_fround($14 * $22);
   HEAPF32[$10 + 3248 >> 2] = Math_fround(Math_fround($19 * $12) + Math_fround($21 * $13)) + Math_fround($15 * $14);
   btMinkowskiPenetrationDepthSolver__getPenetrationDirections_28_29();
   $11 = HEAP32[$10 + 3260 >> 2];
   $0 = HEAP32[$10 + 3256 >> 2];
   $27 = $0;
   $17 = $18 << 4;
   $0 = $17 + 21576 | 0;
   HEAP32[$0 >> 2] = $27;
   HEAP32[$0 + 4 >> 2] = $11;
   $0 = HEAP32[$10 + 3252 >> 2];
   $11 = HEAP32[$10 + 3248 >> 2];
   $27 = $11;
   $11 = $17 + 21568 | 0;
   HEAP32[$11 >> 2] = $27;
   HEAP32[$11 + 4 >> 2] = $0;
   $19 = HEAPF32[$4 + 40 >> 2];
   $21 = HEAPF32[$4 + 24 >> 2];
   $22 = HEAPF32[$4 + 8 >> 2];
   $23 = HEAPF32[$4 + 36 >> 2];
   $24 = HEAPF32[$4 + 20 >> 2];
   $20 = HEAPF32[$4 + 4 >> 2];
   $25 = HEAPF32[$4 + 32 >> 2];
   $12 = HEAPF32[$4 + 16 >> 2];
   $13 = HEAPF32[$4 >> 2];
   $11 = ($10 + 1264 | 0) + $17 | 0;
   HEAP32[$11 + 12 >> 2] = 0;
   $14 = HEAPF32[$10 + 3252 >> 2];
   $15 = Math_fround(-$14);
   $16 = Math_fround($12 * $15);
   $12 = HEAPF32[$10 + 3248 >> 2];
   $16 = Math_fround($16 - Math_fround($13 * $12));
   $13 = HEAPF32[$10 + 3256 >> 2];
   HEAPF32[$11 >> 2] = $16 - Math_fround($25 * $13);
   HEAPF32[$11 + 4 >> 2] = Math_fround(Math_fround($24 * $15) - Math_fround($12 * $20)) - Math_fround($13 * $23);
   HEAPF32[$11 + 8 >> 2] = Math_fround(Math_fround($21 * $15) - Math_fround($12 * $22)) - Math_fround($13 * $19);
   $15 = HEAPF32[$5 + 32 >> 2];
   $19 = HEAPF32[$5 >> 2];
   $21 = HEAPF32[$5 + 16 >> 2];
   $22 = HEAPF32[$5 + 36 >> 2];
   $23 = HEAPF32[$5 + 4 >> 2];
   $24 = HEAPF32[$5 + 20 >> 2];
   $20 = HEAPF32[$5 + 40 >> 2];
   $25 = HEAPF32[$5 + 8 >> 2];
   $16 = HEAPF32[$5 + 24 >> 2];
   $17 = ($10 + 272 | 0) + $17 | 0;
   HEAP32[$17 + 12 >> 2] = 0;
   HEAPF32[$17 + 8 >> 2] = Math_fround(Math_fround($12 * $25) + Math_fround($14 * $16)) + Math_fround($13 * $20);
   HEAPF32[$17 + 4 >> 2] = Math_fround(Math_fround($12 * $23) + Math_fround($14 * $24)) + Math_fround($13 * $22);
   HEAPF32[$17 >> 2] = Math_fround(Math_fround($12 * $19) + Math_fround($14 * $21)) + Math_fround($13 * $15);
   $18 = $18 + 1 | 0;
   $26 = $26 + 1 | 0;
   if (($28 | 0) != ($26 | 0)) {
    continue;
   }
   break;
  }
 }
 $28 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 84 >> 2]]($3) | 0;
 if (($28 | 0) >= 1) {
  $26 = 0;
  while (1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 88 >> 2]]($3, $26, $10 + 3248 | 0);
   $15 = HEAPF32[$5 + 8 >> 2];
   $19 = HEAPF32[$5 >> 2];
   $21 = HEAPF32[$5 + 4 >> 2];
   $22 = HEAPF32[$5 + 24 >> 2];
   $23 = HEAPF32[$5 + 16 >> 2];
   $24 = HEAPF32[$5 + 20 >> 2];
   $20 = HEAPF32[$5 + 40 >> 2];
   $13 = HEAPF32[$5 + 32 >> 2];
   $14 = HEAPF32[$5 + 36 >> 2];
   HEAP32[$10 + 3260 >> 2] = 0;
   $12 = HEAPF32[$10 + 3248 >> 2];
   $16 = Math_fround($13 * $12);
   $13 = HEAPF32[$10 + 3252 >> 2];
   $16 = Math_fround($16 + Math_fround($14 * $13));
   $14 = HEAPF32[$10 + 3256 >> 2];
   HEAPF32[$10 + 3256 >> 2] = $16 + Math_fround($20 * $14);
   HEAPF32[$10 + 3252 >> 2] = Math_fround(Math_fround($12 * $23) + Math_fround($13 * $24)) + Math_fround($14 * $22);
   HEAPF32[$10 + 3248 >> 2] = Math_fround(Math_fround($19 * $12) + Math_fround($21 * $13)) + Math_fround($15 * $14);
   btMinkowskiPenetrationDepthSolver__getPenetrationDirections_28_29();
   $11 = HEAP32[$10 + 3260 >> 2];
   $0 = HEAP32[$10 + 3256 >> 2];
   $27 = $0;
   $17 = $18 << 4;
   $0 = $17 + 21576 | 0;
   HEAP32[$0 >> 2] = $27;
   HEAP32[$0 + 4 >> 2] = $11;
   $0 = HEAP32[$10 + 3252 >> 2];
   $11 = HEAP32[$10 + 3248 >> 2];
   $27 = $11;
   $11 = $17 + 21568 | 0;
   HEAP32[$11 >> 2] = $27;
   HEAP32[$11 + 4 >> 2] = $0;
   $19 = HEAPF32[$4 + 40 >> 2];
   $21 = HEAPF32[$4 + 24 >> 2];
   $22 = HEAPF32[$4 + 8 >> 2];
   $23 = HEAPF32[$4 + 36 >> 2];
   $24 = HEAPF32[$4 + 20 >> 2];
   $20 = HEAPF32[$4 + 4 >> 2];
   $25 = HEAPF32[$4 + 32 >> 2];
   $12 = HEAPF32[$4 + 16 >> 2];
   $13 = HEAPF32[$4 >> 2];
   $11 = ($10 + 1264 | 0) + $17 | 0;
   HEAP32[$11 + 12 >> 2] = 0;
   $14 = HEAPF32[$10 + 3252 >> 2];
   $15 = Math_fround(-$14);
   $16 = Math_fround($12 * $15);
   $12 = HEAPF32[$10 + 3248 >> 2];
   $16 = Math_fround($16 - Math_fround($13 * $12));
   $13 = HEAPF32[$10 + 3256 >> 2];
   HEAPF32[$11 >> 2] = $16 - Math_fround($25 * $13);
   HEAPF32[$11 + 4 >> 2] = Math_fround(Math_fround($24 * $15) - Math_fround($12 * $20)) - Math_fround($13 * $23);
   HEAPF32[$11 + 8 >> 2] = Math_fround(Math_fround($21 * $15) - Math_fround($12 * $22)) - Math_fround($13 * $19);
   $15 = HEAPF32[$5 + 32 >> 2];
   $19 = HEAPF32[$5 >> 2];
   $21 = HEAPF32[$5 + 16 >> 2];
   $22 = HEAPF32[$5 + 36 >> 2];
   $23 = HEAPF32[$5 + 4 >> 2];
   $24 = HEAPF32[$5 + 20 >> 2];
   $20 = HEAPF32[$5 + 40 >> 2];
   $25 = HEAPF32[$5 + 8 >> 2];
   $16 = HEAPF32[$5 + 24 >> 2];
   $17 = ($10 + 272 | 0) + $17 | 0;
   HEAP32[$17 + 12 >> 2] = 0;
   HEAPF32[$17 + 8 >> 2] = Math_fround(Math_fround($12 * $25) + Math_fround($14 * $16)) + Math_fround($13 * $20);
   HEAPF32[$17 + 4 >> 2] = Math_fround(Math_fround($12 * $23) + Math_fround($14 * $24)) + Math_fround($13 * $22);
   HEAPF32[$17 >> 2] = Math_fround(Math_fround($12 * $19) + Math_fround($14 * $21)) + Math_fround($13 * $15);
   $18 = $18 + 1 | 0;
   $26 = $26 + 1 | 0;
   if (($28 | 0) != ($26 | 0)) {
    continue;
   }
   break;
  }
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 76 >> 2]]($2, $10 + 1264 | 0, $10 + 3248 | 0, $18);
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 76 >> 2]]($3, $10 + 272 | 0, $10 + 2256 | 0, $18);
 label$8 : {
  if (($18 | 0) < 1) {
   $20 = Math_fround(0xde0b6b000000000);
   $25 = Math_fround(0);
   $16 = Math_fround(0);
   break label$8;
  }
  $11 = 0;
  $20 = Math_fround(0xde0b6b000000000);
  $16 = Math_fround(0);
  $25 = Math_fround(0);
  while (1) {
   btMinkowskiPenetrationDepthSolver__getPenetrationDirections_28_29();
   $17 = $11 << 4;
   $12 = HEAPF32[$17 + 21568 >> 2];
   $13 = HEAPF32[$17 + 21572 >> 2];
   $14 = $30 ? Math_fround(0) : HEAPF32[$17 + 21576 >> 2];
   label$11 : {
    if (!(+Math_fround(Math_fround(Math_fround($12 * $12) + Math_fround($13 * $13)) + Math_fround($14 * $14)) > .01)) {
     break label$11;
    }
    $26 = ($10 + 2256 | 0) + $17 | 0;
    $15 = HEAPF32[$26 >> 2];
    $19 = HEAPF32[$26 + 4 >> 2];
    $21 = HEAPF32[$26 + 8 >> 2];
    $26 = ($10 + 3248 | 0) + $17 | 0;
    $22 = HEAPF32[$26 >> 2];
    $23 = HEAPF32[$26 + 4 >> 2];
    $24 = HEAPF32[$26 + 8 >> 2];
    $15 = Math_fround(Math_fround(Math_fround($12 * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($15 * HEAPF32[$5 >> 2]) + Math_fround($19 * HEAPF32[$5 + 4 >> 2])) + Math_fround($21 * HEAPF32[$5 + 8 >> 2])) + HEAPF32[$5 + 48 >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround($22 * HEAPF32[$4 >> 2]) + Math_fround($23 * HEAPF32[$4 + 4 >> 2])) + Math_fround($24 * HEAPF32[$4 + 8 >> 2])) + HEAPF32[$4 + 48 >> 2]))) + Math_fround($13 * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($15 * HEAPF32[$5 + 16 >> 2]) + Math_fround($19 * HEAPF32[$5 + 20 >> 2])) + Math_fround($21 * HEAPF32[$5 + 24 >> 2])) + HEAPF32[$5 + 52 >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround($22 * HEAPF32[$4 + 16 >> 2]) + Math_fround($23 * HEAPF32[$4 + 20 >> 2])) + Math_fround($24 * HEAPF32[$4 + 24 >> 2])) + HEAPF32[$4 + 52 >> 2])))) + Math_fround($14 * ($30 ? Math_fround(0) : Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($15 * HEAPF32[$5 + 32 >> 2]) + Math_fround($19 * HEAPF32[$5 + 36 >> 2])) + Math_fround($21 * HEAPF32[$5 + 40 >> 2])) + HEAPF32[$5 + 56 >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround($22 * HEAPF32[$4 + 32 >> 2]) + Math_fround($23 * HEAPF32[$4 + 36 >> 2])) + Math_fround($24 * HEAPF32[$4 + 40 >> 2])) + HEAPF32[$4 + 56 >> 2])))));
    if (!($15 < $20)) {
     break label$11;
    }
    $31 = HEAPF32[$17 + 21580 >> 2];
    $25 = $12;
    $16 = $13;
    $29 = $14;
    $20 = $15;
   }
   $11 = $11 + 1 | 0;
   if (($11 | 0) != ($18 | 0)) {
    continue;
   }
   break;
  }
 }
 btConvexShape__getMarginNonVirtual_28_29_20const($2);
 btConvexShape__getMarginNonVirtual_28_29_20const($3);
 $18 = 0;
 if (!($20 < Math_fround(0))) {
  $12 = btConvexShape__getMarginNonVirtual_28_29_20const($2);
  $13 = btConvexShape__getMarginNonVirtual_28_29_20const($3);
  $18 = btGjkPairDetector__btGjkPairDetector_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($10 + 192 | 0, $2, $3, $1, 0);
  $14 = HEAPF32[$4 + 52 >> 2];
  $15 = HEAPF32[$4 + 56 >> 2];
  $19 = HEAPF32[$4 + 48 >> 2];
  $11 = HEAP32[$4 + 12 >> 2];
  $0 = HEAP32[$4 + 8 >> 2];
  $1 = $0;
  $0 = $10 - -64 | 0;
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $11;
  $0 = HEAP32[$4 + 4 >> 2];
  $11 = HEAP32[$4 >> 2];
  HEAP32[$10 + 56 >> 2] = $11;
  HEAP32[$10 + 60 >> 2] = $0;
  $11 = HEAP32[$4 + 28 >> 2];
  $0 = HEAP32[$4 + 24 >> 2];
  HEAP32[$10 + 80 >> 2] = $0;
  HEAP32[$10 + 84 >> 2] = $11;
  $0 = HEAP32[$4 + 20 >> 2];
  $11 = HEAP32[$4 + 16 >> 2];
  HEAP32[$10 + 72 >> 2] = $11;
  HEAP32[$10 + 76 >> 2] = $0;
  $0 = HEAP32[$4 + 40 >> 2];
  $3 = $0;
  $11 = HEAP32[$4 + 44 >> 2];
  $2 = $11;
  $11 = HEAP32[$4 + 32 >> 2];
  $0 = HEAP32[$4 + 36 >> 2];
  $1 = $0;
  HEAP32[$10 + 116 >> 2] = 0;
  $12 = Math_fround($20 + Math_fround(Math_fround($12 + $13) + Math_fround(.5)));
  HEAPF32[$10 + 112 >> 2] = $15 + Math_fround($29 * $12);
  HEAPF32[$10 + 108 >> 2] = $14 + Math_fround($16 * $12);
  HEAP32[$10 + 96 >> 2] = $3;
  $0 = $2;
  HEAP32[$10 + 100 >> 2] = $0;
  HEAPF32[$10 + 104 >> 2] = $19 + Math_fround($25 * $12);
  HEAP32[$10 + 88 >> 2] = $11;
  $0 = $1;
  HEAP32[$10 + 92 >> 2] = $0;
  $11 = HEAP32[$5 + 12 >> 2];
  $0 = HEAP32[$5 + 8 >> 2];
  HEAP32[$10 + 128 >> 2] = $0;
  HEAP32[$10 + 132 >> 2] = $11;
  $0 = HEAP32[$5 + 4 >> 2];
  $11 = HEAP32[$5 >> 2];
  HEAP32[$10 + 120 >> 2] = $11;
  HEAP32[$10 + 124 >> 2] = $0;
  $11 = HEAP32[$5 + 28 >> 2];
  $0 = HEAP32[$5 + 24 >> 2];
  HEAP32[$10 + 144 >> 2] = $0;
  HEAP32[$10 + 148 >> 2] = $11;
  $0 = HEAP32[$5 + 20 >> 2];
  $11 = HEAP32[$5 + 16 >> 2];
  HEAP32[$10 + 136 >> 2] = $11;
  HEAP32[$10 + 140 >> 2] = $0;
  $11 = HEAP32[$5 + 44 >> 2];
  $0 = HEAP32[$5 + 40 >> 2];
  HEAP32[$10 + 160 >> 2] = $0;
  HEAP32[$10 + 164 >> 2] = $11;
  $0 = HEAP32[$5 + 36 >> 2];
  $11 = HEAP32[$5 + 32 >> 2];
  HEAP32[$10 + 152 >> 2] = $11;
  HEAP32[$10 + 156 >> 2] = $0;
  $11 = HEAP32[$5 + 60 >> 2];
  $0 = HEAP32[$5 + 56 >> 2];
  HEAP32[$10 + 176 >> 2] = $0;
  HEAP32[$10 + 180 >> 2] = $11;
  $0 = HEAP32[$5 + 52 >> 2];
  $11 = HEAP32[$5 + 48 >> 2];
  HEAP32[$10 + 168 >> 2] = $11;
  HEAP32[$10 + 172 >> 2] = $0;
  HEAP32[$10 + 184 >> 2] = 1566444395;
  HEAP8[$10 + 48 | 0] = 0;
  HEAP32[$10 + 8 >> 2] = 4592;
  HEAP32[$18 + 16 >> 2] = 0;
  HEAPF32[$18 + 12 >> 2] = -$29;
  HEAPF32[$18 + 8 >> 2] = -$16;
  HEAPF32[$18 + 4 >> 2] = -$25;
  btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($18, $10 + 56 | 0, $10 + 8 | 0, $9, 0);
  $4 = HEAPU8[$10 + 48 | 0];
  if ($4) {
   $13 = HEAPF32[$10 + 44 >> 2];
   $14 = HEAPF32[$10 + 32 >> 2];
   $5 = $10 + 36 | 0;
   $15 = HEAPF32[$5 >> 2];
   $19 = HEAPF32[$10 + 28 >> 2];
   HEAP32[$7 + 12 >> 2] = 0;
   $12 = Math_fround($12 - $13);
   HEAPF32[$7 >> 2] = $19 - Math_fround($25 * $12);
   HEAPF32[$7 + 8 >> 2] = $15 - Math_fround($29 * $12);
   HEAPF32[$7 + 4 >> 2] = $14 - Math_fround($16 * $12);
   $11 = HEAP32[$10 + 40 >> 2];
   $0 = HEAP32[$10 + 36 >> 2];
   $1 = $0;
   $0 = $8;
   HEAP32[$0 + 8 >> 2] = $1;
   HEAP32[$0 + 12 >> 2] = $11;
   $0 = HEAP32[$10 + 32 >> 2];
   $11 = HEAP32[$10 + 28 >> 2];
   $1 = $11;
   $11 = $8;
   HEAP32[$11 >> 2] = $1;
   HEAP32[$11 + 4 >> 2] = $0;
   HEAPF32[$6 + 12 >> 2] = $31;
   HEAPF32[$6 + 8 >> 2] = $29;
   HEAPF32[$6 + 4 >> 2] = $16;
   HEAPF32[$6 >> 2] = $25;
  }
  $18 = ($4 | 0) != 0;
 }
 $0 = $10 + 4240 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $18 | 0;
}
function btConvexHullComputer__compute_28void_20const__2c_20bool_2c_20int_2c_20int_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = Math_fround(0), $20 = 0, $21 = 0, $22 = 0;
 $7 = global$0 - 144 | 0;
 $8 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 label$2 : {
  if (($4 | 0) <= 0) {
   $4 = HEAP32[$0 + 12 >> 2];
   if ($4) {
    if (HEAPU8[$0 + 16 | 0]) {
     btAlignedFreeInternal_28void__29($4);
    }
    HEAP32[$0 + 12 >> 2] = 0;
   }
   HEAP32[$0 + 12 >> 2] = 0;
   HEAP8[$0 + 16 | 0] = 1;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   $4 = HEAP32[$0 + 32 >> 2];
   if ($4) {
    if (HEAPU8[$0 + 36 | 0]) {
     btAlignedFreeInternal_28void__29($4);
    }
    HEAP32[$0 + 32 >> 2] = 0;
   }
   HEAP32[$0 + 32 >> 2] = 0;
   HEAP32[$0 + 24 >> 2] = 0;
   HEAP32[$0 + 28 >> 2] = 0;
   HEAP8[$0 + 36 | 0] = 1;
   $4 = HEAP32[$0 + 52 >> 2];
   if ($4) {
    if (HEAPU8[$0 + 56 | 0]) {
     btAlignedFreeInternal_28void__29($4);
    }
    HEAP32[$0 + 52 >> 2] = 0;
   }
   HEAP32[$0 + 52 >> 2] = 0;
   HEAP32[$0 + 44 >> 2] = 0;
   HEAP32[$0 + 48 >> 2] = 0;
   HEAP8[$0 + 56 | 0] = 1;
   break label$2;
  }
  HEAP8[$7 + 112 | 0] = 1;
  HEAP32[$7 + 88 >> 2] = 0;
  HEAP32[$7 + 92 >> 2] = 256;
  HEAP32[$7 + 72 >> 2] = 0;
  HEAP32[$7 + 76 >> 2] = 256;
  HEAP32[$7 + 56 >> 2] = 0;
  HEAP32[$7 + 60 >> 2] = 256;
  HEAP32[$7 + 108 >> 2] = 0;
  HEAP32[$7 + 100 >> 2] = 0;
  HEAP32[$7 + 104 >> 2] = 0;
  HEAP32[$7 + 80 >> 2] = 0;
  HEAP32[$7 + 84 >> 2] = 0;
  HEAP32[$7 + 64 >> 2] = 0;
  HEAP32[$7 + 68 >> 2] = 0;
  HEAP32[$7 + 48 >> 2] = 0;
  HEAP32[$7 + 52 >> 2] = 0;
  btConvexHullInternal__compute_28void_20const__2c_20bool_2c_20int_2c_20int_29($7 + 16 | 0, $1, $2, $3, $4);
  label$10 : {
   label$11 : {
    if (!($5 > Math_fround(0))) {
     break label$11;
    }
    $19 = btConvexHullInternal__shrink_28float_2c_20float_29($7 + 16 | 0, $5, $6);
    if (!($19 < Math_fround(0))) {
     break label$11;
    }
    $4 = HEAP32[$0 + 12 >> 2];
    if ($4) {
     if (HEAPU8[$0 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($4);
     }
     HEAP32[$0 + 12 >> 2] = 0;
    }
    HEAP32[$0 + 12 >> 2] = 0;
    HEAP8[$0 + 16 | 0] = 1;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    $4 = HEAP32[$0 + 32 >> 2];
    if ($4) {
     if (HEAPU8[$0 + 36 | 0]) {
      btAlignedFreeInternal_28void__29($4);
     }
     HEAP32[$0 + 32 >> 2] = 0;
    }
    HEAP32[$0 + 32 >> 2] = 0;
    HEAP32[$0 + 24 >> 2] = 0;
    HEAP32[$0 + 28 >> 2] = 0;
    HEAP8[$0 + 36 | 0] = 1;
    $4 = HEAP32[$0 + 52 >> 2];
    if ($4) {
     if (HEAPU8[$0 + 56 | 0]) {
      btAlignedFreeInternal_28void__29($4);
     }
     HEAP32[$0 + 52 >> 2] = 0;
    }
    HEAP32[$0 + 52 >> 2] = 0;
    HEAP32[$0 + 44 >> 2] = 0;
    HEAP32[$0 + 48 >> 2] = 0;
    HEAP8[$0 + 56 | 0] = 1;
    break label$10;
   }
   $4 = HEAP32[$0 + 4 >> 2];
   if (($4 | 0) <= -1) {
    if (HEAP32[$0 + 8 >> 2] <= -1) {
     $1 = HEAP32[$0 + 12 >> 2];
     if ($1) {
      if (HEAPU8[$0 + 16 | 0]) {
       btAlignedFreeInternal_28void__29($1);
      }
      HEAP32[$0 + 12 >> 2] = 0;
     }
     HEAP8[$0 + 16 | 0] = 1;
     HEAP32[$0 + 8 >> 2] = 0;
     HEAP32[$0 + 12 >> 2] = 0;
    }
    while (1) {
     $8 = HEAP32[$7 + 4 >> 2];
     $9 = HEAP32[$7 >> 2];
     $1 = HEAP32[$0 + 12 >> 2] + ($4 << 4) | 0;
     HEAP32[$1 >> 2] = $9;
     HEAP32[$1 + 4 >> 2] = $8;
     $9 = HEAP32[$7 + 12 >> 2];
     $8 = HEAP32[$7 + 8 >> 2];
     HEAP32[$1 + 8 >> 2] = $8;
     HEAP32[$1 + 12 >> 2] = $9;
     $1 = $4 + 1 | 0;
     $2 = $1 >>> 0 >= $4 >>> 0;
     $4 = $1;
     if ($2) {
      continue;
     }
     break;
    }
   }
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$7 + 8 >> 2] = 0;
   HEAP32[$7 >> 2] = 0;
   HEAP32[$7 + 4 >> 2] = 0;
   $4 = HEAP32[$0 + 24 >> 2];
   if (($4 | 0) <= -1) {
    if (HEAP32[$0 + 28 >> 2] <= -1) {
     $1 = HEAP32[$0 + 32 >> 2];
     if ($1) {
      if (HEAPU8[$0 + 36 | 0]) {
       btAlignedFreeInternal_28void__29($1);
      }
      HEAP32[$0 + 32 >> 2] = 0;
     }
     HEAP32[$0 + 28 >> 2] = 0;
     HEAP32[$0 + 32 >> 2] = 0;
     HEAP8[$0 + 36 | 0] = 1;
    }
    while (1) {
     $8 = HEAP32[$7 + 4 >> 2];
     $9 = HEAP32[$7 >> 2];
     $1 = HEAP32[$0 + 32 >> 2] + Math_imul($4, 12) | 0;
     HEAP32[$1 >> 2] = $9;
     HEAP32[$1 + 4 >> 2] = $8;
     HEAP32[$1 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
     $1 = $4 + 1 | 0;
     $2 = $1 >>> 0 >= $4 >>> 0;
     $4 = $1;
     if ($2) {
      continue;
     }
     break;
    }
   }
   HEAP32[$0 + 24 >> 2] = 0;
   $4 = HEAP32[$0 + 44 >> 2];
   if (($4 | 0) <= -1) {
    $1 = HEAP32[$0 + 52 >> 2];
    if (HEAP32[$0 + 48 >> 2] <= -1) {
     if (!(!$1 | !HEAPU8[$0 + 56 | 0])) {
      btAlignedFreeInternal_28void__29($1);
     }
     HEAP8[$0 + 56 | 0] = 1;
     HEAP32[$0 + 48 >> 2] = 0;
     HEAP32[$0 + 52 >> 2] = 0;
     $1 = 0;
    }
    $4 = $4 << 2;
    memset($4 + $1 | 0, 0, 0 - $4 | 0);
   }
   HEAP32[$0 + 44 >> 2] = 0;
   $4 = HEAP32[$7 + 140 >> 2];
   if (HEAP32[$4 + 104 >> 2] > -1) {
    break label$10;
   }
   HEAP32[$4 + 104 >> 2] = 0;
   $16 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(4, 16);
   HEAP32[$16 >> 2] = $4;
   $4 = 0;
   $13 = 1;
   $17 = 1;
   while (1) {
    $18 = $4;
    $10 = HEAP32[($4 << 2) + $16 >> 2];
    btConvexHullInternal__getCoordinates_28btConvexHullInternal__Vertex_20const__29($7, $7 + 16 | 0, $10);
    $3 = HEAP32[$0 + 4 >> 2];
    label$32 : {
     if (($3 | 0) != HEAP32[$0 + 8 >> 2]) {
      break label$32;
     }
     $15 = $3 ? $3 << 1 : 1;
     if (($3 | 0) >= ($15 | 0)) {
      break label$32;
     }
     $4 = 0;
     $11 = 0;
     if ($15) {
      $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($15 << 4, 16);
      $3 = HEAP32[$0 + 4 >> 2];
     }
     if (($3 | 0) >= 1) {
      while (1) {
       $1 = $4 << 4;
       $2 = $11 + $1 | 0;
       $1 = HEAP32[$0 + 12 >> 2] + $1 | 0;
       $8 = HEAP32[$1 >> 2];
       $9 = HEAP32[$1 + 4 >> 2];
       HEAP32[$2 >> 2] = $8;
       HEAP32[$2 + 4 >> 2] = $9;
       $8 = HEAP32[$1 + 12 >> 2];
       $9 = HEAP32[$1 + 8 >> 2];
       HEAP32[$2 + 8 >> 2] = $9;
       HEAP32[$2 + 12 >> 2] = $8;
       $4 = $4 + 1 | 0;
       if (($4 | 0) != ($3 | 0)) {
        continue;
       }
       break;
      }
     }
     $4 = HEAP32[$0 + 12 >> 2];
     if ($4) {
      if (HEAPU8[$0 + 16 | 0]) {
       btAlignedFreeInternal_28void__29($4);
      }
      HEAP32[$0 + 12 >> 2] = 0;
     }
     HEAP32[$0 + 12 >> 2] = $11;
     HEAP8[$0 + 16 | 0] = 1;
     HEAP32[$0 + 8 >> 2] = $15;
     $3 = HEAP32[$0 + 4 >> 2];
    }
    $9 = HEAP32[$7 + 4 >> 2];
    $8 = HEAP32[$7 >> 2];
    $4 = HEAP32[$0 + 12 >> 2] + ($3 << 4) | 0;
    HEAP32[$4 >> 2] = $8;
    HEAP32[$4 + 4 >> 2] = $9;
    $8 = HEAP32[$7 + 12 >> 2];
    $9 = HEAP32[$7 + 8 >> 2];
    HEAP32[$4 + 8 >> 2] = $9;
    HEAP32[$4 + 12 >> 2] = $8;
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
    $20 = -1;
    $15 = -1;
    $21 = HEAP32[$10 + 8 >> 2];
    $1 = $21;
    if ($1) {
     while (1) {
      $4 = HEAP32[$1 + 20 >> 2];
      if (($4 | 0) <= -1) {
       $10 = HEAP32[$0 + 24 >> 2];
       HEAP32[$7 + 8 >> 2] = 0;
       HEAP32[$7 >> 2] = 0;
       HEAP32[$7 + 4 >> 2] = 0;
       $4 = $10;
       label$42 : {
        if (($4 | 0) != HEAP32[$0 + 28 >> 2]) {
         break label$42;
        }
        $14 = $4 ? $4 << 1 : 1;
        if (($10 | 0) >= ($14 | 0)) {
         break label$42;
        }
        $4 = 0;
        $11 = $10;
        $12 = 0;
        if ($14) {
         $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($14, 12), 16);
         $11 = HEAP32[$0 + 24 >> 2];
        }
        if (($11 | 0) >= 1) {
         while (1) {
          $2 = Math_imul($4, 12);
          $3 = $12 + $2 | 0;
          $2 = HEAP32[$0 + 32 >> 2] + $2 | 0;
          $8 = HEAP32[$2 >> 2];
          $9 = HEAP32[$2 + 4 >> 2];
          HEAP32[$3 >> 2] = $8;
          HEAP32[$3 + 4 >> 2] = $9;
          HEAP32[$3 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
          $4 = $4 + 1 | 0;
          if (($11 | 0) != ($4 | 0)) {
           continue;
          }
          break;
         }
        }
        $4 = HEAP32[$0 + 32 >> 2];
        if ($4) {
         if (HEAPU8[$0 + 36 | 0]) {
          btAlignedFreeInternal_28void__29($4);
         }
         HEAP32[$0 + 32 >> 2] = 0;
        }
        HEAP32[$0 + 32 >> 2] = $12;
        HEAP8[$0 + 36 | 0] = 1;
        HEAP32[$0 + 28 >> 2] = $14;
        $4 = HEAP32[$0 + 24 >> 2];
       }
       $8 = HEAP32[$7 + 4 >> 2];
       $9 = HEAP32[$7 >> 2];
       $4 = HEAP32[$0 + 32 >> 2] + Math_imul($4, 12) | 0;
       HEAP32[$4 >> 2] = $9;
       HEAP32[$4 + 4 >> 2] = $8;
       HEAP32[$4 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
       $2 = HEAP32[$0 + 24 >> 2] + 1 | 0;
       HEAP32[$0 + 24 >> 2] = $2;
       HEAP32[$7 + 8 >> 2] = 0;
       HEAP32[$7 >> 2] = 0;
       HEAP32[$7 + 4 >> 2] = 0;
       label$49 : {
        if (HEAP32[$0 + 28 >> 2] != ($2 | 0)) {
         break label$49;
        }
        $14 = $2 ? $2 << 1 : 1;
        if (($2 | 0) >= ($14 | 0)) {
         break label$49;
        }
        $4 = 0;
        $12 = 0;
        if ($14) {
         $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($14, 12), 16);
         $2 = HEAP32[$0 + 24 >> 2];
        }
        if (($2 | 0) >= 1) {
         while (1) {
          $3 = Math_imul($4, 12);
          $11 = $12 + $3 | 0;
          $3 = HEAP32[$0 + 32 >> 2] + $3 | 0;
          $8 = HEAP32[$3 >> 2];
          $9 = HEAP32[$3 + 4 >> 2];
          $22 = $8;
          $8 = $11;
          HEAP32[$8 >> 2] = $22;
          HEAP32[$8 + 4 >> 2] = $9;
          HEAP32[$8 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
          $4 = $4 + 1 | 0;
          if (($4 | 0) != ($2 | 0)) {
           continue;
          }
          break;
         }
        }
        $4 = HEAP32[$0 + 32 >> 2];
        if ($4) {
         if (HEAPU8[$0 + 36 | 0]) {
          btAlignedFreeInternal_28void__29($4);
         }
         HEAP32[$0 + 32 >> 2] = 0;
        }
        HEAP32[$0 + 32 >> 2] = $12;
        HEAP8[$0 + 36 | 0] = 1;
        HEAP32[$0 + 28 >> 2] = $14;
        $2 = HEAP32[$0 + 24 >> 2];
       }
       $8 = HEAP32[$7 + 4 >> 2];
       $9 = HEAP32[$7 >> 2];
       $4 = HEAP32[$0 + 32 >> 2] + Math_imul($2, 12) | 0;
       HEAP32[$4 >> 2] = $9;
       HEAP32[$4 + 4 >> 2] = $8;
       HEAP32[$4 + 8 >> 2] = HEAP32[$7 + 8 >> 2];
       HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
       $11 = HEAP32[$0 + 32 >> 2];
       HEAP32[$1 + 20 >> 2] = $10;
       $12 = $10 + 1 | 0;
       HEAP32[HEAP32[$1 + 8 >> 2] + 20 >> 2] = $12;
       $10 = Math_imul($10, 12) + $11 | 0;
       HEAP32[$10 + 16 >> 2] = -1;
       HEAP32[$10 + 4 >> 2] = 1;
       $14 = HEAP32[$1 + 12 >> 2];
       $4 = HEAP32[$14 + 104 >> 2];
       label$56 : {
        if (($4 | 0) > -1) {
         $2 = $13;
         $13 = $4;
         break label$56;
        }
        HEAP32[$14 + 104 >> 2] = $13;
        label$58 : {
         label$59 : {
          if (($13 | 0) != ($17 | 0)) {
           break label$59;
          }
          $8 = $17 ? $17 << 1 : 1;
          if (($17 | 0) >= ($8 | 0)) {
           break label$59;
          }
          $4 = 0;
          $3 = 0;
          if ($8) {
           $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8 << 2, 16);
          }
          label$61 : {
           if (($17 | 0) >= 1) {
            while (1) {
             $2 = $4 << 2;
             HEAP32[$3 + $2 >> 2] = HEAP32[$2 + $16 >> 2];
             $4 = $4 + 1 | 0;
             if (($17 | 0) != ($4 | 0)) {
              continue;
             }
             break label$61;
            }
           }
           if (!$16) {
            break label$58;
           }
          }
          btAlignedFreeInternal_28void__29($16);
          break label$58;
         }
         $3 = $16;
         $8 = $17;
        }
        HEAP32[($13 << 2) + $3 >> 2] = $14;
        $2 = $13 + 1 | 0;
        $16 = $3;
        $17 = $8;
       }
       HEAP32[$10 + 8 >> 2] = $13;
       HEAP32[(Math_imul($12, 12) + $11 | 0) + 8 >> 2] = $18;
       $13 = $2;
       $4 = HEAP32[$1 + 20 >> 2];
      }
      $2 = $4;
      if (($15 | 0) >= 0) {
       HEAP32[HEAP32[$0 + 32 >> 2] + Math_imul($4, 12) >> 2] = $15 - $4;
       $2 = $20;
      }
      $20 = $2;
      $15 = $4;
      $1 = HEAP32[$1 >> 2];
      if (($21 | 0) != ($1 | 0)) {
       continue;
      }
      break;
     }
     HEAP32[HEAP32[$0 + 32 >> 2] + Math_imul($2, 12) >> 2] = $4 - $2;
    }
    $4 = $18 + 1 | 0;
    if (($4 | 0) < ($13 | 0)) {
     continue;
    }
    break;
   }
   $13 = 0;
   while (1) {
    $15 = HEAP32[HEAP32[($13 << 2) + $16 >> 2] + 8 >> 2];
    $1 = $15;
    if ($1) {
     while (1) {
      $4 = HEAP32[$1 + 20 >> 2];
      if (($4 | 0) >= 0) {
       $3 = HEAP32[$0 + 44 >> 2];
       label$69 : {
        if (($3 | 0) != HEAP32[$0 + 48 >> 2]) {
         break label$69;
        }
        $12 = $3 ? $3 << 1 : 1;
        if (($3 | 0) >= ($12 | 0)) {
         break label$69;
        }
        $4 = 0;
        $11 = 0;
        if ($12) {
         $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($12 << 2, 16);
         $3 = HEAP32[$0 + 44 >> 2];
        }
        $10 = HEAP32[$0 + 52 >> 2];
        label$71 : {
         label$72 : {
          if (($3 | 0) >= 1) {
           while (1) {
            $2 = $4 << 2;
            HEAP32[$11 + $2 >> 2] = HEAP32[$2 + $10 >> 2];
            $4 = $4 + 1 | 0;
            if (($4 | 0) != ($3 | 0)) {
             continue;
            }
            break label$72;
           }
          }
          if (!$10) {
           break label$71;
          }
         }
         if (HEAPU8[$0 + 56 | 0]) {
          btAlignedFreeInternal_28void__29($10);
         }
         HEAP32[$0 + 52 >> 2] = 0;
         $3 = HEAP32[$0 + 44 >> 2];
        }
        HEAP32[$0 + 52 >> 2] = $11;
        HEAP8[$0 + 56 | 0] = 1;
        HEAP32[$0 + 48 >> 2] = $12;
        $4 = HEAP32[$1 + 20 >> 2];
       }
       HEAP32[HEAP32[$0 + 52 >> 2] + ($3 << 2) >> 2] = $4;
       HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + 1;
       $4 = $1;
       while (1) {
        HEAP32[$4 + 20 >> 2] = -1;
        $4 = HEAP32[HEAP32[$4 + 8 >> 2] + 4 >> 2];
        if (($4 | 0) != ($1 | 0)) {
         continue;
        }
        break;
       }
      }
      $1 = HEAP32[$1 >> 2];
      if (($15 | 0) != ($1 | 0)) {
       continue;
      }
      break;
     }
    }
    $4 = ($13 | 0) == ($18 | 0);
    $13 = $13 + 1 | 0;
    if (!$4) {
     continue;
    }
    break;
   }
   if (!$16) {
    break label$10;
   }
   btAlignedFreeInternal_28void__29($16);
  }
  btConvexHullInternal___btConvexHullInternal_28_29($7 + 16 | 0);
 }
 $0 = $7 + 144 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $19;
}
function btGeneric6DofSpring2Constraint__calculateAngleInfo_28_29($0) {
 var $1 = Math_fround(0), $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0);
 $12 = global$0 - 48 | 0;
 $16 = $12;
 if ($12 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $16;
 $11 = HEAPF32[$0 + 1332 >> 2];
 $17 = HEAPF32[$0 + 1316 >> 2];
 $18 = HEAPF32[$0 + 1336 >> 2];
 $19 = HEAPF32[$0 + 1304 >> 2];
 $20 = HEAPF32[$0 + 1320 >> 2];
 $21 = HEAPF32[$0 + 1340 >> 2];
 $22 = HEAPF32[$0 + 1308 >> 2];
 $23 = HEAPF32[$0 + 1324 >> 2];
 $10 = HEAPF32[$0 + 1244 >> 2];
 $7 = HEAPF32[$0 + 1256 >> 2];
 $6 = HEAPF32[$0 + 1272 >> 2];
 $4 = HEAPF32[$0 + 1240 >> 2];
 $3 = HEAPF32[$0 + 1268 >> 2];
 $8 = HEAPF32[$0 + 1260 >> 2];
 $5 = HEAPF32[$0 + 1252 >> 2];
 $9 = HEAPF32[$0 + 1276 >> 2];
 $24 = HEAPF32[$0 + 1300 >> 2];
 $1 = HEAPF32[$0 + 1236 >> 2];
 HEAP32[$12 + 44 >> 2] = 0;
 HEAP32[$12 + 28 >> 2] = 0;
 $2 = Math_fround(Math_fround($6 * $5) - Math_fround($7 * $3));
 $14 = $2;
 $27 = Math_fround(Math_fround($7 * $9) - Math_fround($8 * $6));
 $13 = Math_fround(Math_fround($8 * $3) - Math_fround($9 * $5));
 $2 = Math_fround(Math_fround(1) / Math_fround(Math_fround(Math_fround($1 * $27) + Math_fround($4 * $13)) + Math_fround($2 * $10)));
 $14 = Math_fround($14 * $2);
 $25 = Math_fround(Math_fround(Math_fround($3 * $4) - Math_fround($6 * $1)) * $2);
 $26 = Math_fround(Math_fround(Math_fround($7 * $1) - Math_fround($5 * $4)) * $2);
 HEAPF32[$12 + 40 >> 2] = Math_fround(Math_fround($22 * $14) + Math_fround($23 * $25)) + Math_fround($21 * $26);
 HEAPF32[$12 + 36 >> 2] = Math_fround(Math_fround($19 * $14) + Math_fround($25 * $20)) + Math_fround($26 * $18);
 $13 = Math_fround($13 * $2);
 $3 = Math_fround(Math_fround(Math_fround($9 * $1) - Math_fround($3 * $10)) * $2);
 $1 = Math_fround(Math_fround(Math_fround($5 * $10) - Math_fround($8 * $1)) * $2);
 HEAPF32[$12 + 24 >> 2] = Math_fround(Math_fround($22 * $13) + Math_fround($23 * $3)) + Math_fround($21 * $1);
 HEAPF32[$12 + 20 >> 2] = Math_fround(Math_fround($19 * $13) + Math_fround($3 * $20)) + Math_fround($1 * $18);
 HEAP32[$12 + 12 >> 2] = 0;
 HEAPF32[$12 + 32 >> 2] = Math_fround($11 * $26) + Math_fround(Math_fround($24 * $14) + Math_fround($17 * $25));
 HEAPF32[$12 + 16 >> 2] = Math_fround($11 * $1) + Math_fround(Math_fround($24 * $13) + Math_fround($17 * $3));
 $1 = Math_fround($27 * $2);
 $6 = Math_fround(Math_fround(Math_fround($6 * $10) - Math_fround($9 * $4)) * $2);
 $2 = Math_fround(Math_fround(Math_fround($8 * $4) - Math_fround($7 * $10)) * $2);
 HEAPF32[$12 + 8 >> 2] = Math_fround(Math_fround($22 * $1) + Math_fround($23 * $6)) + Math_fround($21 * $2);
 HEAPF32[$12 + 4 >> 2] = Math_fround(Math_fround($1 * $19) + Math_fround($6 * $20)) + Math_fround($2 * $18);
 HEAPF32[$12 >> 2] = Math_fround($11 * $2) + Math_fround(Math_fround($24 * $1) + Math_fround($17 * $6));
 $16 = $0;
 label$2 : {
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         $15 = HEAP32[$0 + 1232 >> 2];
         if ($15 >>> 0 <= 5) {
          label$12 : {
           label$13 : {
            switch ($15 - 1 | 0) {
            default:
             btGeneric6DofSpring2Constraint__matrixToEulerXYZ_28btMatrix3x3_20const__2c_20btVector3__29($12, $0 + 1364 | 0);
             break label$12;
            case 0:
             btGeneric6DofSpring2Constraint__matrixToEulerXZY_28btMatrix3x3_20const__2c_20btVector3__29($12, $0 + 1364 | 0);
             break label$12;
            case 1:
             btGeneric6DofSpring2Constraint__matrixToEulerYXZ_28btMatrix3x3_20const__2c_20btVector3__29($12, $0 + 1364 | 0);
             break label$12;
            case 2:
             btGeneric6DofSpring2Constraint__matrixToEulerYZX_28btMatrix3x3_20const__2c_20btVector3__29($12, $0 + 1364 | 0);
             break label$12;
            case 3:
             btGeneric6DofSpring2Constraint__matrixToEulerZXY_28btMatrix3x3_20const__2c_20btVector3__29($12, $0 + 1364 | 0);
             break label$12;
            case 4:
             break label$13;
            }
           }
           btGeneric6DofSpring2Constraint__matrixToEulerZYX_28btMatrix3x3_20const__2c_20btVector3__29($12, $0 + 1364 | 0);
          }
          $15 = HEAP32[$0 + 1232 >> 2];
         }
         if ($15 >>> 0 <= 5) {
          switch ($15 - 1 | 0) {
          case 4:
           break label$4;
          case 3:
           break label$5;
          case 2:
           break label$6;
          case 1:
           break label$7;
          case 0:
           break label$8;
          default:
           break label$9;
          }
         }
         $10 = HEAPF32[$0 + 1420 >> 2];
         $4 = HEAPF32[$0 + 1416 >> 2];
         $1 = HEAPF32[$0 + 1412 >> 2];
         $7 = HEAPF32[$0 + 1404 >> 2];
         $6 = HEAPF32[$0 + 1400 >> 2];
         $3 = HEAPF32[$0 + 1396 >> 2];
         $8 = HEAPF32[$0 + 1388 >> 2];
         $5 = HEAPF32[$0 + 1384 >> 2];
         $2 = HEAPF32[$0 + 1380 >> 2];
         break label$2;
        }
        HEAP32[$0 + 1408 >> 2] = 0;
        HEAP32[$0 + 1424 >> 2] = 0;
        HEAP32[$0 + 1392 >> 2] = 0;
        $2 = HEAPF32[$0 + 1316 >> 2];
        $5 = HEAPF32[$0 + 1244 >> 2];
        $4 = HEAPF32[$0 + 1300 >> 2];
        $9 = HEAPF32[$0 + 1260 >> 2];
        $7 = Math_fround(Math_fround($2 * $5) - Math_fround($4 * $9));
        HEAPF32[$0 + 1404 >> 2] = $7;
        $11 = HEAPF32[$0 + 1276 >> 2];
        $1 = HEAPF32[$0 + 1332 >> 2];
        $6 = Math_fround(Math_fround($4 * $11) - Math_fround($5 * $1));
        HEAPF32[$0 + 1400 >> 2] = $6;
        $3 = Math_fround(Math_fround($1 * $9) - Math_fround($2 * $11));
        HEAPF32[$0 + 1396 >> 2] = $3;
        $10 = Math_fround(Math_fround($4 * $6) - Math_fround($2 * $3));
        HEAPF32[$0 + 1420 >> 2] = $10;
        $4 = Math_fround(Math_fround($1 * $3) - Math_fround($4 * $7));
        HEAPF32[$0 + 1416 >> 2] = $4;
        $1 = Math_fround(Math_fround($2 * $7) - Math_fround($1 * $6));
        HEAPF32[$0 + 1412 >> 2] = $1;
        $8 = Math_fround(Math_fround($9 * $3) - Math_fround($5 * $6));
        HEAPF32[$0 + 1388 >> 2] = $8;
        $5 = Math_fround(Math_fround($5 * $7) - Math_fround($11 * $3));
        HEAPF32[$0 + 1384 >> 2] = $5;
        $2 = Math_fround(Math_fround($11 * $6) - Math_fround($9 * $7));
        break label$3;
       }
       HEAP32[$0 + 1424 >> 2] = 0;
       HEAP32[$0 + 1408 >> 2] = 0;
       HEAP32[$0 + 1392 >> 2] = 0;
       $2 = HEAPF32[$0 + 1300 >> 2];
       $9 = HEAPF32[$0 + 1256 >> 2];
       $3 = HEAPF32[$0 + 1316 >> 2];
       $5 = HEAPF32[$0 + 1240 >> 2];
       $10 = Math_fround(Math_fround($2 * $9) - Math_fround($3 * $5));
       HEAPF32[$0 + 1420 >> 2] = $10;
       $8 = HEAPF32[$0 + 1332 >> 2];
       $11 = HEAPF32[$0 + 1272 >> 2];
       $4 = Math_fround(Math_fround($5 * $8) - Math_fround($2 * $11));
       HEAPF32[$0 + 1416 >> 2] = $4;
       $1 = Math_fround(Math_fround($3 * $11) - Math_fround($8 * $9));
       HEAPF32[$0 + 1412 >> 2] = $1;
       $7 = Math_fround(Math_fround($3 * $1) - Math_fround($2 * $4));
       HEAPF32[$0 + 1404 >> 2] = $7;
       $6 = Math_fround(Math_fround($2 * $10) - Math_fround($8 * $1));
       HEAPF32[$0 + 1400 >> 2] = $6;
       $3 = Math_fround(Math_fround($8 * $4) - Math_fround($3 * $10));
       HEAPF32[$0 + 1396 >> 2] = $3;
       $8 = Math_fround(Math_fround($5 * $4) - Math_fround($9 * $1));
       HEAPF32[$0 + 1388 >> 2] = $8;
       $5 = Math_fround(Math_fround($11 * $1) - Math_fround($5 * $10));
       HEAPF32[$0 + 1384 >> 2] = $5;
       $2 = Math_fround(Math_fround($9 * $10) - Math_fround($11 * $4));
       break label$3;
      }
      HEAP32[$0 + 1424 >> 2] = 0;
      HEAP32[$0 + 1408 >> 2] = 0;
      HEAP32[$0 + 1392 >> 2] = 0;
      $4 = HEAPF32[$0 + 1304 >> 2];
      $3 = HEAPF32[$0 + 1260 >> 2];
      $1 = HEAPF32[$0 + 1320 >> 2];
      $6 = HEAPF32[$0 + 1244 >> 2];
      $8 = Math_fround(Math_fround($4 * $3) - Math_fround($1 * $6));
      HEAPF32[$0 + 1388 >> 2] = $8;
      $7 = HEAPF32[$0 + 1336 >> 2];
      $9 = HEAPF32[$0 + 1276 >> 2];
      $5 = Math_fround(Math_fround($6 * $7) - Math_fround($4 * $9));
      HEAPF32[$0 + 1384 >> 2] = $5;
      $2 = Math_fround(Math_fround($1 * $9) - Math_fround($7 * $3));
      HEAPF32[$0 + 1380 >> 2] = $2;
      $10 = Math_fround(Math_fround($1 * $2) - Math_fround($4 * $5));
      HEAPF32[$0 + 1420 >> 2] = $10;
      $4 = Math_fround(Math_fround($4 * $8) - Math_fround($7 * $2));
      HEAPF32[$0 + 1416 >> 2] = $4;
      $1 = Math_fround(Math_fround($7 * $5) - Math_fround($1 * $8));
      HEAPF32[$0 + 1412 >> 2] = $1;
      $7 = Math_fround(Math_fround($6 * $5) - Math_fround($3 * $2));
      HEAPF32[$0 + 1404 >> 2] = $7;
      $6 = Math_fround(Math_fround($9 * $2) - Math_fround($6 * $8));
      HEAPF32[$0 + 1400 >> 2] = $6;
      $3 = Math_fround(Math_fround($3 * $8) - Math_fround($9 * $5));
      HEAPF32[$0 + 1396 >> 2] = $3;
      break label$2;
     }
     HEAP32[$0 + 1424 >> 2] = 0;
     HEAP32[$0 + 1408 >> 2] = 0;
     HEAP32[$0 + 1392 >> 2] = 0;
     $2 = HEAPF32[$0 + 1236 >> 2];
     $9 = HEAPF32[$0 + 1320 >> 2];
     $3 = HEAPF32[$0 + 1252 >> 2];
     $5 = HEAPF32[$0 + 1304 >> 2];
     $10 = Math_fround(Math_fround($2 * $9) - Math_fround($3 * $5));
     HEAPF32[$0 + 1420 >> 2] = $10;
     $8 = HEAPF32[$0 + 1268 >> 2];
     $11 = HEAPF32[$0 + 1336 >> 2];
     $4 = Math_fround(Math_fround($5 * $8) - Math_fround($2 * $11));
     HEAPF32[$0 + 1416 >> 2] = $4;
     $1 = Math_fround(Math_fround($3 * $11) - Math_fround($8 * $9));
     HEAPF32[$0 + 1412 >> 2] = $1;
     $7 = Math_fround(Math_fround($3 * $1) - Math_fround($2 * $4));
     HEAPF32[$0 + 1404 >> 2] = $7;
     $6 = Math_fround(Math_fround($2 * $10) - Math_fround($8 * $1));
     HEAPF32[$0 + 1400 >> 2] = $6;
     $3 = Math_fround(Math_fround($8 * $4) - Math_fround($3 * $10));
     HEAPF32[$0 + 1396 >> 2] = $3;
     $8 = Math_fround(Math_fround($5 * $4) - Math_fround($9 * $1));
     HEAPF32[$0 + 1388 >> 2] = $8;
     $5 = Math_fround(Math_fround($11 * $1) - Math_fround($5 * $10));
     HEAPF32[$0 + 1384 >> 2] = $5;
     $2 = Math_fround(Math_fround($9 * $10) - Math_fround($11 * $4));
     break label$3;
    }
    HEAP32[$0 + 1424 >> 2] = 0;
    HEAP32[$0 + 1408 >> 2] = 0;
    HEAP32[$0 + 1392 >> 2] = 0;
    $4 = HEAPF32[$0 + 1240 >> 2];
    $3 = HEAPF32[$0 + 1324 >> 2];
    $1 = HEAPF32[$0 + 1256 >> 2];
    $6 = HEAPF32[$0 + 1308 >> 2];
    $8 = Math_fround(Math_fround($4 * $3) - Math_fround($1 * $6));
    HEAPF32[$0 + 1388 >> 2] = $8;
    $7 = HEAPF32[$0 + 1272 >> 2];
    $9 = HEAPF32[$0 + 1340 >> 2];
    $5 = Math_fround(Math_fround($6 * $7) - Math_fround($4 * $9));
    HEAPF32[$0 + 1384 >> 2] = $5;
    $2 = Math_fround(Math_fround($1 * $9) - Math_fround($7 * $3));
    HEAPF32[$0 + 1380 >> 2] = $2;
    $10 = Math_fround(Math_fround($1 * $2) - Math_fround($4 * $5));
    HEAPF32[$0 + 1420 >> 2] = $10;
    $4 = Math_fround(Math_fround($4 * $8) - Math_fround($7 * $2));
    HEAPF32[$0 + 1416 >> 2] = $4;
    $1 = Math_fround(Math_fround($7 * $5) - Math_fround($1 * $8));
    HEAPF32[$0 + 1412 >> 2] = $1;
    $7 = Math_fround(Math_fround($6 * $5) - Math_fround($3 * $2));
    HEAPF32[$0 + 1404 >> 2] = $7;
    $6 = Math_fround(Math_fround($9 * $2) - Math_fround($6 * $8));
    HEAPF32[$0 + 1400 >> 2] = $6;
    $3 = Math_fround(Math_fround($3 * $8) - Math_fround($9 * $5));
    HEAPF32[$0 + 1396 >> 2] = $3;
    break label$2;
   }
   HEAP32[$0 + 1408 >> 2] = 0;
   HEAP32[$0 + 1424 >> 2] = 0;
   HEAP32[$0 + 1392 >> 2] = 0;
   $2 = HEAPF32[$0 + 1252 >> 2];
   $5 = HEAPF32[$0 + 1308 >> 2];
   $4 = HEAPF32[$0 + 1236 >> 2];
   $9 = HEAPF32[$0 + 1324 >> 2];
   $7 = Math_fround(Math_fround($2 * $5) - Math_fround($4 * $9));
   HEAPF32[$0 + 1404 >> 2] = $7;
   $11 = HEAPF32[$0 + 1340 >> 2];
   $1 = HEAPF32[$0 + 1268 >> 2];
   $6 = Math_fround(Math_fround($4 * $11) - Math_fround($5 * $1));
   HEAPF32[$0 + 1400 >> 2] = $6;
   $3 = Math_fround(Math_fround($1 * $9) - Math_fround($2 * $11));
   HEAPF32[$0 + 1396 >> 2] = $3;
   $10 = Math_fround(Math_fround($4 * $6) - Math_fround($2 * $3));
   HEAPF32[$0 + 1420 >> 2] = $10;
   $4 = Math_fround(Math_fround($1 * $3) - Math_fround($4 * $7));
   HEAPF32[$0 + 1416 >> 2] = $4;
   $1 = Math_fround(Math_fround($2 * $7) - Math_fround($1 * $6));
   HEAPF32[$0 + 1412 >> 2] = $1;
   $8 = Math_fround(Math_fround($9 * $3) - Math_fround($5 * $6));
   HEAPF32[$0 + 1388 >> 2] = $8;
   $5 = Math_fround(Math_fround($5 * $7) - Math_fround($11 * $3));
   HEAPF32[$0 + 1384 >> 2] = $5;
   $2 = Math_fround(Math_fround($11 * $6) - Math_fround($9 * $7));
  }
  HEAPF32[$16 + 1380 >> 2] = $2;
 }
 $9 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($1 * $1) + Math_fround($4 * $4)) + Math_fround($10 * $10)))));
 HEAPF32[$0 + 1420 >> 2] = $10 * $9;
 HEAPF32[$0 + 1416 >> 2] = $4 * $9;
 HEAPF32[$0 + 1412 >> 2] = $1 * $9;
 $10 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($3 * $3) + Math_fround($6 * $6)) + Math_fround($7 * $7)))));
 HEAPF32[$0 + 1404 >> 2] = $7 * $10;
 HEAPF32[$0 + 1400 >> 2] = $6 * $10;
 HEAPF32[$0 + 1396 >> 2] = $3 * $10;
 $10 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($2 * $2) + Math_fround($5 * $5)) + Math_fround($8 * $8)))));
 HEAPF32[$0 + 1388 >> 2] = $8 * $10;
 HEAPF32[$0 + 1384 >> 2] = $5 * $10;
 HEAPF32[$0 + 1380 >> 2] = $2 * $10;
 $0 = $12 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexHullInternal__compute_28void_20const__2c_20bool_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = 0, $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = 0, $27 = 0, $28 = 0;
 $6 = global$0 - 48 | 0;
 $11 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $11;
 label$2 : {
  label$3 : {
   label$4 : {
    if (!$2) {
     $9 = -246811958;
     $5 = 1900671690;
     if (($4 | 0) > 0) {
      break label$4;
     }
     break label$3;
    }
    $9 = -246811958;
    $5 = 1900671690;
    if (($4 | 0) < 1) {
     break label$3;
    }
    $14 = $1;
    $16 = 1900671690;
    $12 = 1900671690;
    $8 = -246811958;
    $7 = -246811958;
    while (1) {
     $10 = Math_fround(HEAPF64[$14 + 16 >> 3]);
     $21 = (wasm2js_scratch_store_f32($10), wasm2js_scratch_load_i32(0));
     $9 = (wasm2js_scratch_store_i32(0, $9), wasm2js_scratch_load_f32()) < $10 ? $21 : $9;
     $15 = Math_fround(HEAPF64[$14 + 8 >> 3]);
     $11 = (wasm2js_scratch_store_f32($15), wasm2js_scratch_load_i32(0));
     $8 = (wasm2js_scratch_store_i32(0, $8), wasm2js_scratch_load_f32()) < $15 ? $11 : $8;
     $17 = Math_fround(HEAPF64[$14 >> 3]);
     $13 = (wasm2js_scratch_store_f32($17), wasm2js_scratch_load_i32(0));
     $7 = (wasm2js_scratch_store_i32(0, $7), wasm2js_scratch_load_f32()) < $17 ? $13 : $7;
     $5 = $10 < (wasm2js_scratch_store_i32(0, $5), wasm2js_scratch_load_f32()) ? $21 : $5;
     $16 = $15 < (wasm2js_scratch_store_i32(0, $16), wasm2js_scratch_load_f32()) ? $11 : $16;
     $12 = $17 < (wasm2js_scratch_store_i32(0, $12), wasm2js_scratch_load_f32()) ? $13 : $12;
     $14 = $3 + $14 | 0;
     $22 = $22 + 1 | 0;
     if (($22 | 0) != ($4 | 0)) {
      continue;
     }
     break;
    }
    break label$2;
   }
   $14 = $1;
   $16 = 1900671690;
   $12 = 1900671690;
   $8 = -246811958;
   $7 = -246811958;
   while (1) {
    $22 = HEAP32[$14 + 8 >> 2];
    $10 = HEAPF32[$14 + 8 >> 2];
    $9 = (wasm2js_scratch_store_i32(0, $9), wasm2js_scratch_load_f32()) < $10 ? $22 : $9;
    $21 = HEAP32[$14 + 4 >> 2];
    $15 = HEAPF32[$14 + 4 >> 2];
    $8 = (wasm2js_scratch_store_i32(0, $8), wasm2js_scratch_load_f32()) < $15 ? $21 : $8;
    $11 = HEAP32[$14 >> 2];
    $17 = HEAPF32[$14 >> 2];
    $7 = (wasm2js_scratch_store_i32(0, $7), wasm2js_scratch_load_f32()) < $17 ? $11 : $7;
    $5 = $10 < (wasm2js_scratch_store_i32(0, $5), wasm2js_scratch_load_f32()) ? $22 : $5;
    $16 = $15 < (wasm2js_scratch_store_i32(0, $16), wasm2js_scratch_load_f32()) ? $21 : $16;
    $12 = $17 < (wasm2js_scratch_store_i32(0, $12), wasm2js_scratch_load_f32()) ? $11 : $12;
    $14 = $3 + $14 | 0;
    $13 = $13 + 1 | 0;
    if (($13 | 0) != ($4 | 0)) {
     continue;
    }
    break;
   }
   break label$2;
  }
  $7 = -246811958;
  $8 = -246811958;
  $12 = 1900671690;
  $16 = 1900671690;
 }
 $18 = (wasm2js_scratch_store_i32(0, $8), wasm2js_scratch_load_f32());
 $19 = (wasm2js_scratch_store_i32(0, $16), wasm2js_scratch_load_f32());
 $10 = Math_fround($18 - $19);
 $20 = (wasm2js_scratch_store_i32(0, $9), wasm2js_scratch_load_f32());
 $23 = (wasm2js_scratch_store_i32(0, $5), wasm2js_scratch_load_f32());
 $15 = Math_fround($20 - $23);
 $9 = $10 < $15;
 $24 = (wasm2js_scratch_store_i32(0, $7), wasm2js_scratch_load_f32());
 $25 = (wasm2js_scratch_store_i32(0, $12), wasm2js_scratch_load_f32());
 $17 = Math_fround($24 - $25);
 $7 = $17 < $15;
 $8 = $17 < $10;
 $5 = $8 ? $9 ? 2 : 1 : $7 << 1;
 HEAP32[$0 + 112 >> 2] = $5;
 $7 = $8 ? ($7 ^ 1) << 1 : $9 ? 1 : 2;
 if (($7 | 0) == ($5 | 0)) {
  $7 = ($5 + 1 >>> 0) % 3 | 0;
 }
 HEAP32[$0 + 104 >> 2] = $7;
 $9 = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 $7 = ($5 ^ 3) - $7 | 0;
 HEAP32[$0 + 108 >> 2] = $7;
 HEAPF32[$0 + 24 >> 2] = Math_fround($20 + $23) * Math_fround(.5);
 HEAPF32[$0 + 20 >> 2] = Math_fround($18 + $19) * Math_fround(.5);
 HEAPF32[$0 + 16 >> 2] = Math_fround($24 + $25) * Math_fround(.5);
 $5 = (($7 + 1 | 0) % 3 | 0) == ($5 | 0);
 $15 = $5 ? Math_fround($15 * Math_fround(9788566967472434e-20)) : Math_fround($15 * Math_fround(-9788566967472434e-20));
 HEAPF32[$0 + 8 >> 2] = $15;
 $10 = $5 ? Math_fround($10 * Math_fround(9788566967472434e-20)) : Math_fround($10 * Math_fround(-9788566967472434e-20));
 HEAPF32[$0 + 4 >> 2] = $10;
 $18 = $5 ? Math_fround($17 * Math_fround(9788566967472434e-20)) : Math_fround($17 * Math_fround(-9788566967472434e-20));
 HEAPF32[$0 >> 2] = $18;
 HEAP32[$6 + 36 >> 2] = 0;
 HEAP8[$6 + 40 | 0] = 1;
 HEAP32[$6 + 28 >> 2] = 0;
 HEAP32[$6 + 32 >> 2] = 0;
 $14 = $15 != Math_fround(0);
 $17 = Math_fround(Math_fround(1) / $15);
 $22 = $10 != Math_fround(0);
 $19 = Math_fround(Math_fround(1) / $10);
 $21 = $18 != Math_fround(0);
 $20 = Math_fround(Math_fround(1) / $18);
 label$9 : {
  if (($4 | 0) < 1) {
   break label$9;
  }
  $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 4, 16);
  $12 = HEAP32[$6 + 36 >> 2];
  $16 = HEAP32[$6 + 28 >> 2];
  label$10 : {
   label$11 : {
    if (($16 | 0) >= 1) {
     while (1) {
      $5 = $9 << 4;
      $7 = $8 + $5 | 0;
      $5 = $5 + $12 | 0;
      $11 = HEAP32[$5 + 4 >> 2];
      $13 = HEAP32[$5 >> 2];
      HEAP32[$7 >> 2] = $13;
      HEAP32[$7 + 4 >> 2] = $11;
      $13 = HEAP32[$5 + 12 >> 2];
      $11 = HEAP32[$5 + 8 >> 2];
      HEAP32[$7 + 8 >> 2] = $11;
      HEAP32[$7 + 12 >> 2] = $13;
      $9 = $9 + 1 | 0;
      if (($16 | 0) != ($9 | 0)) {
       continue;
      }
      break label$11;
     }
    }
    if (!$12) {
     break label$10;
    }
   }
   if (HEAPU8[$6 + 40 | 0]) {
    btAlignedFreeInternal_28void__29($12);
   }
   HEAP32[$6 + 36 >> 2] = 0;
  }
  HEAP32[$6 + 36 >> 2] = $8;
  $9 = 1;
  HEAP8[$6 + 40 | 0] = 1;
  HEAP32[$6 + 32 >> 2] = $4;
  $11 = HEAP32[$6 + 12 >> 2];
  $13 = HEAP32[$6 + 8 >> 2];
  HEAP32[$8 >> 2] = $13;
  HEAP32[$8 + 4 >> 2] = $11;
  $7 = $6 + 16 | 0;
  $13 = HEAP32[$7 + 4 >> 2];
  $11 = HEAP32[$7 >> 2];
  HEAP32[$8 + 8 >> 2] = $11;
  HEAP32[$8 + 12 >> 2] = $13;
  if (($4 | 0) == 1) {
   break label$9;
  }
  $7 = $6;
  while (1) {
   $11 = HEAP32[$6 + 12 >> 2];
   $13 = HEAP32[$6 + 8 >> 2];
   $5 = HEAP32[$6 + 36 >> 2] + ($9 << 4) | 0;
   HEAP32[$5 >> 2] = $13;
   HEAP32[$5 + 4 >> 2] = $11;
   $13 = HEAP32[$7 + 20 >> 2];
   $11 = HEAP32[$7 + 16 >> 2];
   HEAP32[$5 + 8 >> 2] = $11;
   HEAP32[$5 + 12 >> 2] = $13;
   $9 = $9 + 1 | 0;
   if (($9 | 0) != ($4 | 0)) {
    continue;
   }
   break;
  }
 }
 $15 = $14 ? $17 : $15;
 $17 = $22 ? $19 : $10;
 $18 = $21 ? $20 : $18;
 HEAP32[$6 + 28 >> 2] = $4;
 label$16 : {
  label$17 : {
   if (!$2) {
    if (($4 | 0) < 1) {
     break label$16;
    }
    $8 = ($6 + 8 | 0) + (HEAP32[$0 + 104 >> 2] << 2) | 0;
    $12 = ($6 + 8 | 0) + (HEAP32[$0 + 112 >> 2] << 2) | 0;
    $16 = ($6 + 8 | 0) + (HEAP32[$0 + 108 >> 2] << 2) | 0;
    $23 = HEAPF32[$0 + 24 >> 2];
    $24 = HEAPF32[$0 + 20 >> 2];
    $25 = HEAPF32[$0 + 16 >> 2];
    $14 = HEAP32[$6 + 36 >> 2];
    $5 = 0;
    while (1) {
     $10 = HEAPF32[$1 >> 2];
     $19 = HEAPF32[$1 + 4 >> 2];
     $20 = HEAPF32[$1 + 8 >> 2];
     HEAP32[$6 + 20 >> 2] = 0;
     HEAPF32[$6 + 16 >> 2] = $15 * Math_fround($20 - $23);
     HEAPF32[$6 + 12 >> 2] = $17 * Math_fround($19 - $24);
     HEAPF32[$6 + 8 >> 2] = $18 * Math_fround($10 - $25);
     $9 = ($5 << 4) + $14 | 0;
     $2 = $9;
     $10 = HEAPF32[$16 >> 2];
     label$20 : {
      if (Math_fround(Math_abs($10)) < Math_fround(2147483648)) {
       $7 = ~~$10;
       break label$20;
      }
      $7 = -2147483648;
     }
     HEAP32[$2 >> 2] = $7;
     $2 = $9;
     $10 = HEAPF32[$12 >> 2];
     label$22 : {
      if (Math_fround(Math_abs($10)) < Math_fround(2147483648)) {
       $7 = ~~$10;
       break label$22;
      }
      $7 = -2147483648;
     }
     HEAP32[$2 + 4 >> 2] = $7;
     $10 = HEAPF32[$8 >> 2];
     HEAP32[$9 + 12 >> 2] = $5;
     if (Math_fround(Math_abs($10)) < Math_fround(2147483648)) {
      $7 = ~~$10;
     } else {
      $7 = -2147483648;
     }
     HEAP32[$9 + 8 >> 2] = $7;
     $1 = $1 + $3 | 0;
     $5 = $5 + 1 | 0;
     if (($5 | 0) != ($4 | 0)) {
      continue;
     }
     break;
    }
    break label$17;
   }
   if (($4 | 0) < 1) {
    break label$16;
   }
   $8 = ($6 + 8 | 0) + (HEAP32[$0 + 104 >> 2] << 2) | 0;
   $12 = ($6 + 8 | 0) + (HEAP32[$0 + 112 >> 2] << 2) | 0;
   $16 = ($6 + 8 | 0) + (HEAP32[$0 + 108 >> 2] << 2) | 0;
   $19 = HEAPF32[$0 + 24 >> 2];
   $20 = HEAPF32[$0 + 20 >> 2];
   $23 = HEAPF32[$0 + 16 >> 2];
   $14 = HEAP32[$6 + 36 >> 2];
   $5 = 0;
   while (1) {
    $26 = HEAPF64[$1 >> 3];
    $27 = HEAPF64[$1 + 8 >> 3];
    $28 = HEAPF64[$1 + 16 >> 3];
    HEAP32[$6 + 20 >> 2] = 0;
    HEAPF32[$6 + 16 >> 2] = $15 * Math_fround(Math_fround($28) - $19);
    HEAPF32[$6 + 12 >> 2] = $17 * Math_fround(Math_fround($27) - $20);
    HEAPF32[$6 + 8 >> 2] = $18 * Math_fround(Math_fround($26) - $23);
    $9 = ($5 << 4) + $14 | 0;
    $2 = $9;
    $10 = HEAPF32[$16 >> 2];
    label$27 : {
     if (Math_fround(Math_abs($10)) < Math_fround(2147483648)) {
      $7 = ~~$10;
      break label$27;
     }
     $7 = -2147483648;
    }
    HEAP32[$2 >> 2] = $7;
    $2 = $9;
    $10 = HEAPF32[$12 >> 2];
    label$29 : {
     if (Math_fround(Math_abs($10)) < Math_fround(2147483648)) {
      $7 = ~~$10;
      break label$29;
     }
     $7 = -2147483648;
    }
    HEAP32[$2 + 4 >> 2] = $7;
    $10 = HEAPF32[$8 >> 2];
    HEAP32[$9 + 12 >> 2] = $5;
    if (Math_fround(Math_abs($10)) < Math_fround(2147483648)) {
     $7 = ~~$10;
    } else {
     $7 = -2147483648;
    }
    HEAP32[$9 + 8 >> 2] = $7;
    $1 = $1 + $3 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) != ($4 | 0)) {
     continue;
    }
    break;
   }
  }
  if (($4 | 0) < 2) {
   break label$16;
  }
  void_20btAlignedObjectArray_btConvexHullInternal__Point32___quickSortInternal_pointCmp__28pointCmp_20const__2c_20int_2c_20int_29($6 + 24 | 0, $6 + 8 | 0, 0, $4 + -1 | 0);
 }
 HEAP32[$0 + 44 >> 2] = $4;
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 32 >> 2];
 $1 = HEAP32[$0 + 84 >> 2];
 if (($1 | 0) < ($4 | 0)) {
  if (HEAP32[$0 + 88 >> 2] < ($4 | 0)) {
   label$35 : {
    if (!$4) {
     $7 = 0;
     $8 = $1;
     break label$35;
    }
    $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2, 16);
    $8 = HEAP32[$0 + 84 >> 2];
   }
   if (($8 | 0) >= 1) {
    $9 = 0;
    while (1) {
     $5 = $9 << 2;
     HEAP32[$7 + $5 >> 2] = HEAP32[HEAP32[$0 + 92 >> 2] + $5 >> 2];
     $9 = $9 + 1 | 0;
     if (($8 | 0) != ($9 | 0)) {
      continue;
     }
     break;
    }
   }
   $9 = HEAP32[$0 + 92 >> 2];
   if ($9) {
    if (HEAPU8[$0 + 96 | 0]) {
     btAlignedFreeInternal_28void__29($9);
    }
    HEAP32[$0 + 92 >> 2] = 0;
   }
   HEAP32[$0 + 92 >> 2] = $7;
   HEAP32[$0 + 88 >> 2] = $4;
   HEAP8[$0 + 96 | 0] = 1;
  }
  while (1) {
   HEAP32[HEAP32[$0 + 92 >> 2] + ($1 << 2) >> 2] = 0;
   $1 = $1 + 1 | 0;
   if (($4 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 84 >> 2] = $4;
 if (($4 | 0) >= 1) {
  $12 = 0;
  while (1) {
   $8 = HEAP32[$0 + 40 >> 2];
   label$44 : {
    if ($8) {
     break label$44;
    }
    $5 = HEAP32[$0 + 36 >> 2];
    label$45 : {
     if ($5) {
      HEAP32[$0 + 36 >> 2] = HEAP32[$5 + 8 >> 2];
      break label$45;
     }
     $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(12, 16);
     $1 = HEAP32[$0 + 44 >> 2];
     HEAP32[$5 + 8 >> 2] = 0;
     HEAP32[$5 + 4 >> 2] = $1;
     HEAP32[$5 >> 2] = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($1, 112), 16);
     HEAP32[$5 + 8 >> 2] = HEAP32[$0 + 32 >> 2];
     HEAP32[$0 + 32 >> 2] = $5;
    }
    $1 = 0;
    $8 = HEAP32[$5 >> 2];
    $9 = $8;
    $5 = HEAP32[$5 + 4 >> 2];
    if (($5 | 0) < 1) {
     break label$44;
    }
    while (1) {
     $7 = $9 + 112 | 0;
     $1 = $1 + 1 | 0;
     HEAP32[$9 >> 2] = ($1 | 0) < ($5 | 0) ? $7 : 0;
     $9 = $7;
     if (($1 | 0) != ($5 | 0)) {
      continue;
     }
     break;
    }
   }
   HEAP32[$0 + 40 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$8 + 16 >> 2] = 0;
   HEAP32[$8 >> 2] = 0;
   HEAP32[$8 + 4 >> 2] = 0;
   HEAP32[$8 + 104 >> 2] = -1;
   HEAP32[$8 + 8 >> 2] = 0;
   HEAP32[$8 + 12 >> 2] = 0;
   $1 = HEAP32[$6 + 36 >> 2] + ($12 << 4) | 0;
   $11 = HEAP32[$1 + 4 >> 2];
   $13 = HEAP32[$1 >> 2];
   HEAP32[$8 + 88 >> 2] = $13;
   HEAP32[$8 + 92 >> 2] = $11;
   $13 = HEAP32[$1 + 12 >> 2];
   $11 = HEAP32[$1 + 8 >> 2];
   HEAP32[$8 + 96 >> 2] = $11;
   HEAP32[$8 + 100 >> 2] = $13;
   HEAP32[$8 + 104 >> 2] = -1;
   HEAP32[HEAP32[$0 + 92 >> 2] + ($12 << 2) >> 2] = $8;
   $12 = $12 + 1 | 0;
   if (($12 | 0) != ($4 | 0)) {
    continue;
   }
   break;
  }
 }
 $1 = HEAP32[$6 + 36 >> 2];
 if ($1) {
  if (HEAPU8[$6 + 40 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$6 + 36 >> 2] = 0;
 }
 HEAP32[$6 + 36 >> 2] = 0;
 HEAP8[$6 + 40 | 0] = 1;
 HEAP32[$6 + 28 >> 2] = 0;
 HEAP32[$6 + 32 >> 2] = 0;
 HEAP32[$0 + 100 >> 2] = -3;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP32[$0 + 60 >> 2] = Math_imul($4, 6);
 HEAP32[$0 + 116 >> 2] = 0;
 HEAP32[$0 + 120 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 48 >> 2];
 HEAP32[$6 + 16 >> 2] = 0;
 HEAP32[$6 + 20 >> 2] = 0;
 HEAP32[$6 + 8 >> 2] = 0;
 HEAP32[$6 + 12 >> 2] = 0;
 btConvexHullInternal__computeInternal_28int_2c_20int_2c_20btConvexHullInternal__IntermediateHull__29($0, 0, $4, $6 + 8 | 0);
 HEAP32[$0 + 124 >> 2] = HEAP32[$6 + 8 >> 2];
 $1 = HEAP32[$6 + 36 >> 2];
 if ($1) {
  if (HEAPU8[$6 + 40 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$6 + 36 >> 2] = 0;
 }
 $0 = $6 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuantizedBvh__serialize_28void__2c_20unsigned_20int_2c_20bool_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 HEAP32[$0 + 168 >> 2] = HEAP32[$0 + 152 >> 2];
 HEAP8[$1 + 80 | 0] = 1;
 HEAP8[$1 + 60 | 0] = 0;
 HEAP32[$1 + 52 >> 2] = 287;
 HEAP32[$1 >> 2] = 16304;
 HEAP32[$1 + 76 >> 2] = 0;
 HEAP8[$1 + 100 | 0] = 1;
 HEAP32[$1 + 68 >> 2] = 0;
 HEAP32[$1 + 72 >> 2] = 0;
 HEAP32[$1 + 96 >> 2] = 0;
 HEAP8[$1 + 120 | 0] = 1;
 HEAP32[$1 + 88 >> 2] = 0;
 HEAP32[$1 + 92 >> 2] = 0;
 HEAP32[$1 + 116 >> 2] = 0;
 HEAP8[$1 + 140 | 0] = 1;
 HEAP32[$1 + 108 >> 2] = 0;
 HEAP32[$1 + 112 >> 2] = 0;
 HEAP32[$1 + 136 >> 2] = 0;
 HEAP8[$1 + 164 | 0] = 1;
 HEAP32[$1 + 144 >> 2] = 0;
 HEAP32[$1 + 128 >> 2] = 0;
 HEAP32[$1 + 132 >> 2] = 0;
 HEAP32[$1 + 160 >> 2] = 0;
 HEAP32[$1 + 152 >> 2] = 0;
 HEAP32[$1 + 156 >> 2] = 0;
 HEAP32[$1 + 168 >> 2] = 0;
 HEAP32[$1 + 28 >> 2] = 2139095039;
 HEAP32[$1 + 32 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 2139095039;
 HEAP32[$1 + 24 >> 2] = 2139095039;
 HEAP32[$1 + 12 >> 2] = -8388609;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = -8388609;
 HEAP32[$1 + 8 >> 2] = -8388609;
 $4 = HEAP32[$0 + 56 >> 2];
 $5 = $1;
 label$1 : {
  if ($3) {
   HEAP32[$1 + 56 >> 2] = $4 << 8 & 16711680 | $4 << 24 | ($4 >>> 8 & 65280 | $4 >>> 24);
   HEAP8[$1 + 4 | 0] = HEAPU8[$0 + 7 | 0];
   HEAP8[$1 + 5 | 0] = HEAPU8[$0 + 6 | 0];
   HEAP8[$1 + 6 | 0] = HEAPU8[$0 + 5 | 0];
   HEAP8[$1 + 7 | 0] = HEAPU8[$0 + 4 | 0];
   HEAP8[$1 + 8 | 0] = HEAPU8[$0 + 11 | 0];
   HEAP8[$1 + 9 | 0] = HEAPU8[$0 + 10 | 0];
   HEAP8[$1 + 10 | 0] = HEAPU8[$0 + 9 | 0];
   HEAP8[$1 + 11 | 0] = HEAPU8[$0 + 8 | 0];
   HEAP8[$1 + 12 | 0] = HEAPU8[$0 + 15 | 0];
   HEAP8[$1 + 13 | 0] = HEAPU8[$0 + 14 | 0];
   HEAP8[$1 + 14 | 0] = HEAPU8[$0 + 13 | 0];
   HEAP8[$1 + 15 | 0] = HEAPU8[$0 + 12 | 0];
   HEAP8[$1 + 16 | 0] = HEAPU8[$0 + 19 | 0];
   HEAP8[$1 + 17 | 0] = HEAPU8[$0 + 18 | 0];
   HEAP8[$1 + 18 | 0] = HEAPU8[$0 + 17 | 0];
   HEAP8[$1 + 19 | 0] = HEAPU8[$0 + 16 | 0];
   HEAP8[$1 + 20 | 0] = HEAPU8[$0 + 23 | 0];
   HEAP8[$1 + 21 | 0] = HEAPU8[$0 + 22 | 0];
   HEAP8[$1 + 22 | 0] = HEAPU8[$0 + 21 | 0];
   HEAP8[$1 + 23 | 0] = HEAPU8[$0 + 20 | 0];
   HEAP8[$1 + 24 | 0] = HEAPU8[$0 + 27 | 0];
   HEAP8[$1 + 25 | 0] = HEAPU8[$0 + 26 | 0];
   HEAP8[$1 + 26 | 0] = HEAPU8[$0 + 25 | 0];
   HEAP8[$1 + 27 | 0] = HEAPU8[$0 + 24 | 0];
   HEAP8[$1 + 28 | 0] = HEAPU8[$0 + 31 | 0];
   HEAP8[$1 + 29 | 0] = HEAPU8[$0 + 30 | 0];
   HEAP8[$1 + 30 | 0] = HEAPU8[$0 + 29 | 0];
   HEAP8[$1 + 31 | 0] = HEAPU8[$0 + 28 | 0];
   HEAP8[$1 + 32 | 0] = HEAPU8[$0 + 35 | 0];
   HEAP8[$1 + 33 | 0] = HEAPU8[$0 + 34 | 0];
   HEAP8[$1 + 34 | 0] = HEAPU8[$0 + 33 | 0];
   HEAP8[$1 + 35 | 0] = HEAPU8[$0 + 32 | 0];
   HEAP8[$1 + 36 | 0] = HEAPU8[$0 + 39 | 0];
   HEAP8[$1 + 37 | 0] = HEAPU8[$0 + 38 | 0];
   HEAP8[$1 + 38 | 0] = HEAPU8[$0 + 37 | 0];
   HEAP8[$1 + 39 | 0] = HEAPU8[$0 + 36 | 0];
   HEAP8[$1 + 40 | 0] = HEAPU8[$0 + 43 | 0];
   HEAP8[$1 + 41 | 0] = HEAPU8[$0 + 42 | 0];
   HEAP8[$1 + 42 | 0] = HEAPU8[$0 + 41 | 0];
   HEAP8[$1 + 43 | 0] = HEAPU8[$0 + 40 | 0];
   HEAP8[$1 + 44 | 0] = HEAPU8[$0 + 47 | 0];
   HEAP8[$1 + 45 | 0] = HEAPU8[$0 + 46 | 0];
   HEAP8[$1 + 46 | 0] = HEAPU8[$0 + 45 | 0];
   HEAP8[$1 + 47 | 0] = HEAPU8[$0 + 44 | 0];
   HEAP8[$1 + 48 | 0] = HEAPU8[$0 + 51 | 0];
   HEAP8[$1 + 49 | 0] = HEAPU8[$0 + 50 | 0];
   HEAP8[$1 + 50 | 0] = HEAPU8[$0 + 49 | 0];
   HEAP8[$1 + 51 | 0] = HEAPU8[$0 + 48 | 0];
   $4 = HEAP32[$0 + 144 >> 2];
   HEAP32[$1 + 144 >> 2] = $4 << 24 | $4 << 8 & 16711680 | ($4 >>> 8 & 65280 | $4 >>> 24);
   $4 = HEAP32[$0 + 168 >> 2];
   $4 = $4 << 24 | $4 << 8 & 16711680 | ($4 >>> 8 & 65280 | $4 >>> 24);
   break label$1;
  }
  HEAP32[$1 + 56 >> 2] = $4;
  $2 = HEAP32[$0 + 16 >> 2];
  $7 = HEAP32[$0 + 12 >> 2];
  $4 = $1 + 4 | 0;
  HEAP32[$4 + 8 >> 2] = $7;
  HEAP32[$4 + 12 >> 2] = $2;
  $7 = HEAP32[$0 + 8 >> 2];
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[$1 + 8 >> 2] = $7;
  $2 = HEAP32[$0 + 32 >> 2];
  $7 = HEAP32[$0 + 28 >> 2];
  $4 = $1 + 20 | 0;
  HEAP32[$4 + 8 >> 2] = $7;
  HEAP32[$4 + 12 >> 2] = $2;
  $7 = HEAP32[$0 + 24 >> 2];
  $2 = HEAP32[$0 + 20 >> 2];
  HEAP32[$1 + 20 >> 2] = $2;
  HEAP32[$1 + 24 >> 2] = $7;
  $2 = HEAP32[$0 + 48 >> 2];
  $7 = HEAP32[$0 + 44 >> 2];
  HEAP32[$1 + 44 >> 2] = $7;
  HEAP32[$1 + 48 >> 2] = $2;
  $7 = HEAP32[$0 + 40 >> 2];
  $2 = HEAP32[$0 + 36 >> 2];
  HEAP32[$1 + 36 >> 2] = $2;
  HEAP32[$1 + 40 >> 2] = $7;
  HEAP32[$1 + 144 >> 2] = HEAP32[$0 + 144 >> 2];
  $4 = HEAP32[$0 + 168 >> 2];
 }
 HEAP32[$5 + 168 >> 2] = $4;
 HEAP8[$1 + 60 | 0] = HEAPU8[$0 + 60 | 0];
 $10 = $1 + 172 | 0;
 $9 = HEAP32[$0 + 56 >> 2];
 label$3 : {
  if (HEAPU8[$0 + 60 | 0]) {
   $4 = HEAP32[$1 + 136 >> 2];
   if ($4) {
    if (HEAPU8[$1 + 140 | 0]) {
     btAlignedFreeInternal_28void__29($4);
    }
    HEAP32[$1 + 136 >> 2] = 0;
   }
   HEAP32[$1 + 136 >> 2] = $10;
   HEAP8[$1 + 140 | 0] = 0;
   HEAP32[$1 + 132 >> 2] = $9;
   HEAP32[$1 + 128 >> 2] = $9;
   label$7 : {
    if (!$3) {
     if (($9 | 0) < 1) {
      break label$7;
     }
     $6 = HEAP32[$0 + 136 >> 2];
     while (1) {
      $5 = $8 << 4;
      $4 = $10 + $5 | 0;
      $5 = $5 + $6 | 0;
      HEAP16[$4 >> 1] = HEAPU16[$5 >> 1];
      HEAP16[$4 + 2 >> 1] = HEAPU16[$5 + 2 >> 1];
      HEAP16[$4 + 4 >> 1] = HEAPU16[$5 + 4 >> 1];
      HEAP16[$4 + 6 >> 1] = HEAPU16[$5 + 6 >> 1];
      HEAP16[$4 + 8 >> 1] = HEAPU16[$5 + 8 >> 1];
      HEAP16[$4 + 10 >> 1] = HEAPU16[$5 + 10 >> 1];
      HEAP32[$4 + 12 >> 2] = HEAP32[$5 + 12 >> 2];
      $8 = $8 + 1 | 0;
      if (($9 | 0) != ($8 | 0)) {
       continue;
      }
      break;
     }
     break label$7;
    }
    if (($9 | 0) < 1) {
     break label$7;
    }
    $7 = HEAP32[$0 + 136 >> 2];
    while (1) {
     $5 = $8 << 4;
     $4 = $10 + $5 | 0;
     $5 = $5 + $7 | 0;
     $6 = HEAPU16[$5 >> 1];
     HEAP16[$4 >> 1] = ($6 << 24 | $6 << 8 & 16711680) >>> 16;
     $6 = HEAPU16[$5 + 2 >> 1];
     HEAP16[$4 + 2 >> 1] = ($6 << 24 | $6 << 8 & 16711680) >>> 16;
     $6 = HEAPU16[$5 + 4 >> 1];
     HEAP16[$4 + 4 >> 1] = ($6 << 24 | $6 << 8 & 16711680) >>> 16;
     $6 = HEAPU16[$5 + 6 >> 1];
     HEAP16[$4 + 6 >> 1] = ($6 << 24 | $6 << 8 & 16711680) >>> 16;
     $6 = HEAPU16[$5 + 8 >> 1];
     HEAP16[$4 + 8 >> 1] = ($6 << 24 | $6 << 8 & 16711680) >>> 16;
     $6 = HEAPU16[$5 + 10 >> 1];
     HEAP16[$4 + 10 >> 1] = ($6 << 24 | $6 << 8 & 16711680) >>> 16;
     $5 = HEAP32[$5 + 12 >> 2];
     HEAP32[$4 + 12 >> 2] = $5 << 24 | $5 << 8 & 16711680 | ($5 >>> 8 & 65280 | $5 >>> 24);
     $8 = $8 + 1 | 0;
     if (($9 | 0) != ($8 | 0)) {
      continue;
     }
     break;
    }
   }
   $11 = $1 + 128 | 0;
   $4 = $9 << 4;
   break label$3;
  }
  $4 = HEAP32[$1 + 96 >> 2];
  if ($4) {
   if (HEAPU8[$1 + 100 | 0]) {
    btAlignedFreeInternal_28void__29($4);
   }
   HEAP32[$1 + 96 >> 2] = 0;
  }
  $11 = $1 + 88 | 0;
  HEAP32[$1 + 96 >> 2] = $10;
  HEAP8[$1 + 100 | 0] = 0;
  HEAP32[$1 + 92 >> 2] = $9;
  HEAP32[$1 + 88 >> 2] = $9;
  label$13 : {
   label$14 : {
    label$15 : {
     if (!$3) {
      if (($9 | 0) < 1) {
       break label$14;
      }
      $7 = HEAP32[$0 + 96 >> 2];
      $5 = $10;
      while (1) {
       $4 = $8 << 6;
       $5 = $5 + $4 | 0;
       $6 = $4 + $7 | 0;
       $7 = HEAP32[$6 >> 2];
       $2 = HEAP32[$6 + 4 >> 2];
       HEAP32[$5 >> 2] = $7;
       HEAP32[$5 + 4 >> 2] = $2;
       $7 = HEAP32[$6 + 12 >> 2];
       $2 = HEAP32[$6 + 8 >> 2];
       HEAP32[$5 + 8 >> 2] = $2;
       HEAP32[$5 + 12 >> 2] = $7;
       $6 = HEAP32[$0 + 96 >> 2] + $4 | 0;
       $7 = HEAP32[$6 + 16 >> 2];
       $2 = HEAP32[$6 + 20 >> 2];
       $5 = HEAP32[$1 + 96 >> 2] + $4 | 0;
       HEAP32[$5 + 16 >> 2] = $7;
       HEAP32[$5 + 20 >> 2] = $2;
       $7 = HEAP32[$6 + 28 >> 2];
       $2 = HEAP32[$6 + 24 >> 2];
       HEAP32[$5 + 24 >> 2] = $2;
       HEAP32[$5 + 28 >> 2] = $7;
       $5 = HEAP32[$1 + 96 >> 2];
       $6 = $5 + $4 | 0;
       $7 = HEAP32[$0 + 96 >> 2];
       $4 = $7 + $4 | 0;
       HEAP32[$6 + 32 >> 2] = HEAP32[$4 + 32 >> 2];
       HEAP32[$6 + 36 >> 2] = HEAP32[$4 + 36 >> 2];
       HEAP32[$6 + 40 >> 2] = HEAP32[$4 + 40 >> 2];
       $8 = $8 + 1 | 0;
       if (($9 | 0) != ($8 | 0)) {
        continue;
       }
       break;
      }
      break label$15;
     }
     if (($9 | 0) < 1) {
      break label$14;
     }
     $2 = HEAP32[$0 + 96 >> 2];
     $5 = $10;
     while (1) {
      $8 = $6 << 6;
      $4 = $8 + $5 | 0;
      $5 = $8 + $2 | 0;
      HEAP8[$4 | 0] = HEAPU8[$5 + 3 | 0];
      HEAP8[$4 + 1 | 0] = HEAPU8[$5 + 2 | 0];
      HEAP8[$4 + 2 | 0] = HEAPU8[$5 + 1 | 0];
      HEAP8[$4 + 3 | 0] = HEAPU8[$5 | 0];
      HEAP8[$4 + 4 | 0] = HEAPU8[$5 + 7 | 0];
      HEAP8[$4 + 5 | 0] = HEAPU8[$5 + 6 | 0];
      HEAP8[$4 + 6 | 0] = HEAPU8[$5 + 5 | 0];
      HEAP8[$4 + 7 | 0] = HEAPU8[$5 + 4 | 0];
      HEAP8[$4 + 8 | 0] = HEAPU8[$5 + 11 | 0];
      HEAP8[$4 + 9 | 0] = HEAPU8[$5 + 10 | 0];
      HEAP8[$4 + 10 | 0] = HEAPU8[$5 + 9 | 0];
      HEAP8[$4 + 11 | 0] = HEAPU8[$5 + 8 | 0];
      HEAP8[$4 + 12 | 0] = HEAPU8[$5 + 15 | 0];
      HEAP8[$4 + 13 | 0] = HEAPU8[$5 + 14 | 0];
      HEAP8[$4 + 14 | 0] = HEAPU8[$5 + 13 | 0];
      HEAP8[$4 + 15 | 0] = HEAPU8[$5 + 12 | 0];
      $4 = HEAP32[$1 + 96 >> 2] + $8 | 0;
      $5 = HEAP32[$0 + 96 >> 2] + $8 | 0;
      HEAP8[$4 + 16 | 0] = HEAPU8[$5 + 19 | 0];
      HEAP8[$4 + 17 | 0] = HEAPU8[$5 + 18 | 0];
      HEAP8[$4 + 18 | 0] = HEAPU8[$5 + 17 | 0];
      HEAP8[$4 + 19 | 0] = HEAPU8[$5 + 16 | 0];
      HEAP8[$4 + 20 | 0] = HEAPU8[$5 + 23 | 0];
      HEAP8[$4 + 21 | 0] = HEAPU8[$5 + 22 | 0];
      HEAP8[$4 + 22 | 0] = HEAPU8[$5 + 21 | 0];
      HEAP8[$4 + 23 | 0] = HEAPU8[$5 + 20 | 0];
      HEAP8[$4 + 24 | 0] = HEAPU8[$5 + 27 | 0];
      HEAP8[$4 + 25 | 0] = HEAPU8[$5 + 26 | 0];
      HEAP8[$4 + 26 | 0] = HEAPU8[$5 + 25 | 0];
      HEAP8[$4 + 27 | 0] = HEAPU8[$5 + 24 | 0];
      HEAP8[$4 + 28 | 0] = HEAPU8[$5 + 31 | 0];
      HEAP8[$4 + 29 | 0] = HEAPU8[$5 + 30 | 0];
      HEAP8[$4 + 30 | 0] = HEAPU8[$5 + 29 | 0];
      HEAP8[$4 + 31 | 0] = HEAPU8[$5 + 28 | 0];
      $5 = HEAP32[$1 + 96 >> 2];
      $7 = $8 + $5 | 0;
      $2 = HEAP32[$0 + 96 >> 2];
      $8 = $2 + $8 | 0;
      $4 = HEAP32[$8 + 32 >> 2];
      HEAP32[$7 + 32 >> 2] = $4 << 24 | $4 << 8 & 16711680 | ($4 >>> 8 & 65280 | $4 >>> 24);
      $4 = HEAP32[$8 + 36 >> 2];
      HEAP32[$7 + 36 >> 2] = $4 << 24 | $4 << 8 & 16711680 | ($4 >>> 8 & 65280 | $4 >>> 24);
      $4 = HEAP32[$8 + 40 >> 2];
      HEAP32[$7 + 40 >> 2] = $4 << 24 | $4 << 8 & 16711680 | ($4 >>> 8 & 65280 | $4 >>> 24);
      $6 = $6 + 1 | 0;
      if (($9 | 0) != ($6 | 0)) {
       continue;
      }
      break;
     }
    }
    $4 = $9 << 6;
    $2 = $4;
    if ($5) {
     break label$13;
    }
    break label$3;
   }
   $5 = $10;
   $2 = $9 << 6;
  }
  $4 = $2;
  if (HEAPU8[$1 + 100 | 0]) {
   btAlignedFreeInternal_28void__29($5);
  }
  HEAP32[$1 + 96 >> 2] = 0;
 }
 $2 = $11;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP8[$2 + 5 | 0] = 0;
 HEAP8[$2 + 6 | 0] = 0;
 HEAP8[$2 + 7 | 0] = 0;
 HEAP8[$2 + 8 | 0] = 0;
 HEAP8[$2 + 9 | 0] = 0;
 HEAP8[$2 + 10 | 0] = 0;
 HEAP8[$2 + 11 | 0] = 0;
 HEAP8[$2 + 12 | 0] = 0;
 $8 = $4 + $10 | 0;
 $4 = HEAP32[$0 + 168 >> 2];
 $5 = HEAP32[$1 + 160 >> 2];
 if ($5) {
  if (HEAPU8[$1 + 164 | 0]) {
   btAlignedFreeInternal_28void__29($5);
  }
  HEAP32[$1 + 160 >> 2] = 0;
 }
 $2 = $1;
 HEAP32[$1 + 160 >> 2] = $8;
 HEAP8[$1 + 164 | 0] = 0;
 HEAP32[$1 + 156 >> 2] = $4;
 HEAP32[$1 + 152 >> 2] = $4;
 $10 = HEAP32[$0 + 168 >> 2];
 label$22 : {
  if (!$3) {
   if (($10 | 0) < 1) {
    break label$22;
   }
   $10 = HEAP32[$0 + 160 >> 2];
   $9 = 0;
   while (1) {
    $5 = $9 << 5;
    $4 = $8 + $5 | 0;
    $5 = $5 + $10 | 0;
    HEAP16[$4 >> 1] = HEAPU16[$5 >> 1];
    HEAP16[$4 + 2 >> 1] = HEAPU16[$5 + 2 >> 1];
    HEAP16[$4 + 4 >> 1] = HEAPU16[$5 + 4 >> 1];
    HEAP16[$4 + 6 >> 1] = HEAPU16[$5 + 6 >> 1];
    HEAP16[$4 + 8 >> 1] = HEAPU16[$5 + 8 >> 1];
    HEAP16[$4 + 10 >> 1] = HEAPU16[$5 + 10 >> 1];
    HEAP32[$4 + 12 >> 2] = HEAP32[$5 + 12 >> 2];
    $5 = HEAP32[$5 + 16 >> 2];
    HEAP32[$4 + 28 >> 2] = 0;
    HEAP32[$4 + 20 >> 2] = 0;
    HEAP32[$4 + 24 >> 2] = 0;
    HEAP32[$4 + 16 >> 2] = $5;
    $9 = $9 + 1 | 0;
    if (($9 | 0) < HEAP32[$0 + 168 >> 2]) {
     continue;
    }
    break;
   }
   break label$22;
  }
  if (($10 | 0) < 1) {
   break label$22;
  }
  $6 = HEAP32[$0 + 160 >> 2];
  $9 = 0;
  while (1) {
   $5 = $9 << 5;
   $4 = $8 + $5 | 0;
   $5 = $5 + $6 | 0;
   $0 = HEAPU16[$5 >> 1];
   HEAP16[$4 >> 1] = ($0 << 24 | $0 << 8 & 16711680) >>> 16;
   $0 = HEAPU16[$5 + 2 >> 1];
   HEAP16[$4 + 2 >> 1] = ($0 << 24 | $0 << 8 & 16711680) >>> 16;
   $0 = HEAPU16[$5 + 4 >> 1];
   HEAP16[$4 + 4 >> 1] = ($0 << 24 | $0 << 8 & 16711680) >>> 16;
   $0 = HEAPU16[$5 + 6 >> 1];
   HEAP16[$4 + 6 >> 1] = ($0 << 24 | $0 << 8 & 16711680) >>> 16;
   $0 = HEAPU16[$5 + 8 >> 1];
   HEAP16[$4 + 8 >> 1] = ($0 << 24 | $0 << 8 & 16711680) >>> 16;
   $0 = HEAPU16[$5 + 10 >> 1];
   HEAP16[$4 + 10 >> 1] = ($0 << 24 | $0 << 8 & 16711680) >>> 16;
   $0 = HEAP32[$5 + 12 >> 2];
   HEAP32[$4 + 12 >> 2] = $0 << 24 | $0 << 8 & 16711680 | ($0 >>> 8 & 65280 | $0 >>> 24);
   $5 = HEAP32[$5 + 16 >> 2];
   HEAP32[$4 + 16 >> 2] = $5 << 24 | $5 << 8 & 16711680 | ($5 >>> 8 & 65280 | $5 >>> 24);
   $9 = $9 + 1 | 0;
   if (($9 | 0) < ($10 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$1 >> 2] = 0;
 HEAP8[$2 + 157 | 0] = 0;
 HEAP8[$2 + 158 | 0] = 0;
 HEAP8[$2 + 159 | 0] = 0;
 HEAP8[$2 + 160 | 0] = 0;
 HEAP8[$2 + 161 | 0] = 0;
 HEAP8[$2 + 162 | 0] = 0;
 HEAP8[$2 + 163 | 0] = 0;
 HEAP8[$2 + 164 | 0] = 0;
 HEAP32[$2 + 152 >> 2] = 0;
 HEAP32[$2 + 156 >> 2] = 0;
 return 1;
}
function btSequentialImpulseConstraintSolver__setupContactConstraint_28btSolverConstraint__2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btContactSolverInfo_20const__2c_20float__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = 0, $26 = 0, $27 = Math_fround(0), $28 = 0, $29 = 0, $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = 0, $34 = 0;
 $26 = HEAP32[$0 + 16 >> 2];
 $28 = $26 + Math_imul($3, 244) | 0;
 $0 = HEAP32[$28 + 240 >> 2];
 $29 = Math_imul($2, 244) + $26 | 0;
 $11 = HEAP32[$29 + 240 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$5 + 28 >> 2];
 $27 = HEAPF32[$5 + 12 >> 2];
 $32 = HEAPF32[$5 + 36 >> 2];
 $24 = HEAPF32[$5 + 40 >> 2];
 $25 = HEAP32[$4 + 128 >> 2];
 label$1 : {
  if ($25 & 6) {
   $24 = $25 & 2 ? HEAPF32[$4 + 152 >> 2] : $24;
   if (!($25 & 4)) {
    break label$1;
   }
   $32 = HEAPF32[$4 + 156 >> 2];
   break label$1;
  }
  if (!($25 & 8)) {
   break label$1;
  }
  $9 = Math_fround($27 * HEAPF32[$4 + 152 >> 2]);
  $18 = $9;
  $9 = Math_fround(Math_max(Math_fround($9 + HEAPF32[$4 + 156 >> 2]), Math_fround(1.1920928955078125e-7)));
  $32 = Math_fround($18 / $9);
  $24 = Math_fround(Math_fround(1) / $9);
 }
 $9 = HEAPF32[$4 + 68 >> 2];
 $12 = HEAPF32[$7 >> 2];
 $10 = HEAPF32[$7 + 4 >> 2];
 $20 = HEAPF32[$4 + 64 >> 2];
 $15 = Math_fround(Math_fround($9 * $12) - Math_fround($10 * $20));
 $13 = HEAPF32[$7 + 8 >> 2];
 $18 = Math_fround($13 * $20);
 $20 = HEAPF32[$4 + 72 >> 2];
 $16 = Math_fround($18 - Math_fround($20 * $12));
 $17 = Math_fround(Math_fround($10 * $20) - Math_fround($13 * $9));
 $9 = Math_fround(0);
 $12 = Math_fround(0);
 $10 = Math_fround(0);
 $20 = Math_fround(0);
 if ($11) {
  $20 = Math_fround(Math_fround(Math_fround(Math_fround($17 * HEAPF32[$11 + 356 >> 2]) + Math_fround($16 * HEAPF32[$11 + 360 >> 2])) + Math_fround($15 * HEAPF32[$11 + 364 >> 2])) * HEAPF32[$11 + 612 >> 2]);
  $12 = Math_fround(Math_fround(Math_fround(Math_fround($17 * HEAPF32[$11 + 324 >> 2]) + Math_fround($16 * HEAPF32[$11 + 328 >> 2])) + Math_fround($15 * HEAPF32[$11 + 332 >> 2])) * HEAPF32[$11 + 604 >> 2]);
  $10 = Math_fround(Math_fround(Math_fround(Math_fround($17 * HEAPF32[$11 + 340 >> 2]) + Math_fround($16 * HEAPF32[$11 + 344 >> 2])) + Math_fround($15 * HEAPF32[$11 + 348 >> 2])) * HEAPF32[$11 + 608 >> 2]);
 }
 HEAPF32[$1 + 64 >> 2] = $12;
 HEAP32[$1 + 76 >> 2] = 0;
 HEAPF32[$1 + 72 >> 2] = $20;
 HEAPF32[$1 + 68 >> 2] = $10;
 $13 = HEAPF32[$4 + 68 >> 2];
 $14 = HEAPF32[$8 >> 2];
 $21 = HEAPF32[$8 + 4 >> 2];
 $22 = HEAPF32[$4 + 64 >> 2];
 $19 = Math_fround(Math_fround($13 * $14) - Math_fround($21 * $22));
 $23 = HEAPF32[$8 + 8 >> 2];
 $18 = Math_fround($23 * $22);
 $22 = HEAPF32[$4 + 72 >> 2];
 $30 = Math_fround($18 - Math_fround($22 * $14));
 $21 = Math_fround(Math_fround($21 * $22) - Math_fround($23 * $13));
 $13 = Math_fround(0);
 $14 = Math_fround(0);
 $27 = Math_fround(Math_fround(1) / $27);
 if ($0) {
  $9 = Math_fround(-$30);
  $14 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 360 >> 2] * $9) - Math_fround($21 * HEAPF32[$0 + 356 >> 2])) - Math_fround($19 * HEAPF32[$0 + 364 >> 2])) * HEAPF32[$0 + 612 >> 2]);
  $13 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 344 >> 2] * $9) - Math_fround($21 * HEAPF32[$0 + 340 >> 2])) - Math_fround($19 * HEAPF32[$0 + 348 >> 2])) * HEAPF32[$0 + 608 >> 2]);
  $9 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 328 >> 2] * $9) - Math_fround($21 * HEAPF32[$0 + 324 >> 2])) - Math_fround($19 * HEAPF32[$0 + 332 >> 2])) * HEAPF32[$0 + 604 >> 2]);
 }
 HEAPF32[$1 + 80 >> 2] = $9;
 HEAP32[$1 + 92 >> 2] = 0;
 HEAPF32[$1 + 88 >> 2] = $14;
 HEAPF32[$1 + 84 >> 2] = $13;
 $22 = Math_fround(0);
 $23 = Math_fround(0);
 if ($11) {
  $23 = HEAPF32[$7 + 8 >> 2];
  $31 = HEAPF32[$7 + 4 >> 2];
  $18 = HEAPF32[$7 >> 2];
  $23 = Math_fround(HEAPF32[$11 + 404 >> 2] + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($10 * $23) - Math_fround($20 * $31)) * HEAPF32[$4 + 64 >> 2]) + Math_fround(Math_fround(Math_fround($20 * $18) - Math_fround($23 * $12)) * HEAPF32[$4 + 68 >> 2])) + Math_fround(Math_fround(Math_fround($31 * $12) - Math_fround($10 * $18)) * HEAPF32[$4 + 72 >> 2])));
 }
 if ($0) {
  $12 = HEAPF32[$8 + 4 >> 2];
  $10 = HEAPF32[$8 + 8 >> 2];
  $31 = Math_fround(Math_fround(Math_fround($14 * $12) - Math_fround($13 * $10)) * HEAPF32[$4 + 64 >> 2]);
  $18 = Math_fround($9 * $10);
  $10 = HEAPF32[$8 >> 2];
  $22 = Math_fround(HEAPF32[$0 + 404 >> 2] + Math_fround(Math_fround($31 + Math_fround(Math_fround($18 - Math_fround($14 * $10)) * HEAPF32[$4 + 68 >> 2])) + Math_fround(Math_fround(Math_fround($13 * $10) - Math_fround($9 * $12)) * HEAPF32[$4 + 72 >> 2])));
 }
 $20 = Math_fround($27 * $24);
 HEAPF32[$1 + 108 >> 2] = HEAPF32[$6 >> 2] / Math_fround($20 + Math_fround($23 + $22));
 $6 = $1;
 label$7 : {
  if ($11) {
   $25 = $4 - -64 | 0;
   $33 = HEAP32[$25 >> 2];
   $34 = HEAP32[$25 + 4 >> 2];
   HEAP32[$6 + 16 >> 2] = $33;
   HEAP32[$6 + 20 >> 2] = $34;
   $33 = HEAP32[$25 + 12 >> 2];
   $34 = HEAP32[$25 + 8 >> 2];
   HEAP32[$6 + 24 >> 2] = $34;
   HEAP32[$6 + 28 >> 2] = $33;
   HEAP32[$1 + 12 >> 2] = 0;
   HEAPF32[$1 + 8 >> 2] = $15;
   HEAPF32[$1 + 4 >> 2] = $16;
   HEAPF32[$1 >> 2] = $17;
   break label$7;
  }
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 24 >> 2] = 0;
  HEAP32[$1 + 28 >> 2] = 0;
  HEAP32[$6 + 16 >> 2] = 0;
  HEAP32[$6 + 20 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = 0;
 }
 label$9 : {
  if ($0) {
   $9 = HEAPF32[$4 + 64 >> 2];
   $12 = HEAPF32[$4 + 68 >> 2];
   $10 = HEAPF32[$4 + 72 >> 2];
   HEAP32[$1 + 60 >> 2] = 0;
   HEAP32[$1 + 44 >> 2] = 0;
   HEAPF32[$1 + 40 >> 2] = -$19;
   HEAPF32[$1 + 36 >> 2] = -$30;
   HEAPF32[$1 + 32 >> 2] = -$21;
   HEAPF32[$1 + 56 >> 2] = -$10;
   HEAPF32[$1 + 52 >> 2] = -$12;
   HEAPF32[$1 + 48 >> 2] = -$9;
   break label$9;
  }
  HEAP32[$1 + 32 >> 2] = 0;
  HEAP32[$1 + 36 >> 2] = 0;
  HEAP32[$1 + 56 >> 2] = 0;
  HEAP32[$1 + 60 >> 2] = 0;
  HEAP32[$1 + 48 >> 2] = 0;
  HEAP32[$1 + 52 >> 2] = 0;
  HEAP32[$1 + 40 >> 2] = 0;
  HEAP32[$1 + 44 >> 2] = 0;
 }
 $21 = HEAPF32[$5 + 64 >> 2];
 $24 = HEAPF32[$4 + 80 >> 2];
 $9 = Math_fround(0);
 $12 = Math_fround(0);
 $10 = Math_fround(0);
 $13 = Math_fround(0);
 if ($11) {
  $12 = HEAPF32[$7 + 4 >> 2];
  $10 = HEAPF32[$11 + 388 >> 2];
  $14 = HEAPF32[$11 + 392 >> 2];
  $15 = HEAPF32[$7 >> 2];
  $13 = Math_fround(Math_fround(Math_fround($12 * $10) - Math_fround($14 * $15)) + HEAPF32[$11 + 380 >> 2]);
  $16 = HEAPF32[$11 + 396 >> 2];
  $18 = Math_fround($16 * $15);
  $15 = HEAPF32[$7 + 8 >> 2];
  $10 = Math_fround(HEAPF32[$11 + 376 >> 2] + Math_fround($18 - Math_fround($15 * $10)));
  $12 = Math_fround(Math_fround(Math_fround($14 * $15) - Math_fround($16 * $12)) + HEAPF32[$11 + 372 >> 2]);
 }
 $14 = Math_fround(0);
 $15 = Math_fround(0);
 if ($0) {
  $9 = HEAPF32[$8 + 4 >> 2];
  $14 = HEAPF32[$0 + 388 >> 2];
  $16 = HEAPF32[$0 + 392 >> 2];
  $17 = HEAPF32[$8 >> 2];
  $15 = Math_fround(Math_fround(Math_fround($9 * $14) - Math_fround($16 * $17)) + HEAPF32[$0 + 380 >> 2]);
  $19 = HEAPF32[$0 + 396 >> 2];
  $18 = Math_fround($19 * $17);
  $17 = HEAPF32[$8 + 8 >> 2];
  $14 = Math_fround(HEAPF32[$0 + 376 >> 2] + Math_fround($18 - Math_fround($17 * $14)));
  $9 = Math_fround(Math_fround(Math_fround($16 * $17) - Math_fround($19 * $9)) + HEAPF32[$0 + 372 >> 2]);
 }
 $16 = HEAPF32[$4 + 72 >> 2];
 $17 = HEAPF32[$4 + 64 >> 2];
 $19 = HEAPF32[$4 + 68 >> 2];
 HEAP32[$1 + 104 >> 2] = HEAP32[$4 + 84 >> 2];
 $9 = Math_fround(Math_fround(Math_fround($17 * Math_fround($12 - $9)) + Math_fround($19 * Math_fround($10 - $14))) + Math_fround($16 * Math_fround($13 - $15)));
 $12 = Math_fround(Math_abs($9)) < HEAPF32[$5 + 96 >> 2] ? Math_fround(0) : Math_fround(HEAPF32[$4 + 96 >> 2] * Math_fround(-$9));
 label$13 : {
  if (HEAPU8[$5 + 72 | 0] & 4) {
   $9 = Math_fround(HEAPF32[$4 + 132 >> 2] * HEAPF32[$5 + 68 >> 2]);
   HEAPF32[$1 + 100 >> 2] = $9;
   if (!(!$11 | !HEAP32[$29 + 240 >> 2])) {
    $10 = HEAPF32[$11 + 416 >> 2];
    $13 = HEAPF32[$1 + 24 >> 2];
    $14 = HEAPF32[$11 + 412 >> 2];
    $15 = HEAPF32[$1 + 20 >> 2];
    $4 = Math_imul($2, 244) + $26 | 0;
    HEAPF32[$4 + 64 >> 2] = Math_fround(HEAPF32[$4 + 112 >> 2] * Math_fround($9 * Math_fround(Math_fround(HEAPF32[$1 + 16 >> 2] * HEAPF32[$4 + 128 >> 2]) * HEAPF32[$11 + 408 >> 2]))) + HEAPF32[$4 + 64 >> 2];
    $11 = $4 + 68 | 0;
    HEAPF32[$11 >> 2] = Math_fround(Math_fround($9 * Math_fround($14 * Math_fround($15 * HEAPF32[$4 + 132 >> 2]))) * HEAPF32[$4 + 116 >> 2]) + HEAPF32[$4 + 68 >> 2];
    $11 = $4 + 72 | 0;
    HEAPF32[$11 >> 2] = Math_fround(Math_fround($9 * Math_fround($10 * Math_fround($13 * HEAPF32[$4 + 136 >> 2]))) * HEAPF32[$4 + 120 >> 2]) + HEAPF32[$4 + 72 >> 2];
    $10 = HEAPF32[$1 + 72 >> 2];
    $13 = HEAPF32[$1 + 68 >> 2];
    HEAPF32[$4 + 80 >> 2] = Math_fround(Math_fround($9 * HEAPF32[$4 + 96 >> 2]) * HEAPF32[$1 + 64 >> 2]) + HEAPF32[$4 + 80 >> 2];
    $14 = HEAPF32[$4 + 104 >> 2];
    $11 = $4 + 84 | 0;
    HEAPF32[$11 >> 2] = Math_fround($13 * Math_fround($9 * HEAPF32[$4 + 100 >> 2])) + HEAPF32[$4 + 84 >> 2];
    $6 = $4;
    $4 = $4 + 88 | 0;
    HEAPF32[$4 >> 2] = Math_fround($10 * Math_fround($9 * $14)) + HEAPF32[$6 + 88 >> 2];
   }
   if (!$0 | !HEAP32[$28 + 240 >> 2]) {
    break label$13;
   }
   $10 = HEAPF32[$0 + 416 >> 2];
   $13 = HEAPF32[$1 + 56 >> 2];
   $14 = HEAPF32[$0 + 412 >> 2];
   $15 = HEAPF32[$1 + 52 >> 2];
   $16 = HEAPF32[$1 + 88 >> 2];
   $17 = HEAPF32[$1 + 84 >> 2];
   $19 = HEAPF32[$1 + 80 >> 2];
   $4 = Math_imul($3, 244) + $26 | 0;
   $9 = Math_fround(-HEAPF32[$1 + 100 >> 2]);
   HEAPF32[$4 + 64 >> 2] = HEAPF32[$4 + 64 >> 2] - Math_fround(HEAPF32[$4 + 112 >> 2] * Math_fround(Math_fround(Math_fround(HEAPF32[$4 + 128 >> 2] * HEAPF32[$1 + 48 >> 2]) * HEAPF32[$0 + 408 >> 2]) * $9));
   $0 = $4 + 68 | 0;
   HEAPF32[$0 >> 2] = HEAPF32[$4 + 68 >> 2] - Math_fround(Math_fround(Math_fround($14 * Math_fround($15 * HEAPF32[$4 + 132 >> 2])) * $9) * HEAPF32[$4 + 116 >> 2]);
   $0 = $4 + 72 | 0;
   HEAPF32[$0 >> 2] = HEAPF32[$4 + 72 >> 2] - Math_fround(Math_fround(Math_fround($10 * Math_fround($13 * HEAPF32[$4 + 136 >> 2])) * $9) * HEAPF32[$4 + 120 >> 2]);
   HEAPF32[$4 + 80 >> 2] = HEAPF32[$4 + 80 >> 2] - Math_fround($19 * Math_fround(HEAPF32[$4 + 96 >> 2] * $9));
   $10 = HEAPF32[$4 + 104 >> 2];
   $0 = $4 + 84 | 0;
   HEAPF32[$0 >> 2] = HEAPF32[$4 + 84 >> 2] - Math_fround($17 * Math_fround(HEAPF32[$4 + 100 >> 2] * $9));
   $0 = $4;
   $4 = $4 + 88 | 0;
   HEAPF32[$4 >> 2] = HEAPF32[$0 + 88 >> 2] - Math_fround($16 * Math_fround($10 * $9));
   break label$13;
  }
  HEAP32[$1 + 100 >> 2] = 0;
 }
 $0 = $12 <= Math_fround(0);
 HEAP32[$1 + 96 >> 2] = 0;
 $10 = Math_fround(0);
 $13 = Math_fround(0);
 $14 = Math_fround(0);
 $15 = Math_fround(0);
 $16 = Math_fround(0);
 $17 = Math_fround(0);
 $19 = Math_fround(0);
 if (HEAP32[$29 + 240 >> 2]) {
  $4 = Math_imul($2, 244) + $26 | 0;
  $19 = HEAPF32[$4 + 224 >> 2];
  $15 = HEAPF32[$4 + 208 >> 2];
  $16 = HEAPF32[$4 + 232 >> 2];
  $17 = HEAPF32[$4 + 228 >> 2];
  $14 = HEAPF32[$4 + 212 >> 2];
  $13 = HEAPF32[$4 + 216 >> 2];
 }
 $9 = Math_fround($24 + $21);
 $30 = $0 ? Math_fround(0) : $12;
 $12 = Math_fround(0);
 $21 = Math_fround(0);
 $24 = Math_fround(0);
 $22 = Math_fround(0);
 $23 = Math_fround(0);
 if (HEAP32[$28 + 240 >> 2]) {
  $4 = Math_imul($3, 244) + $26 | 0;
  $23 = HEAPF32[$4 + 224 >> 2];
  $24 = HEAPF32[$4 + 232 >> 2];
  $22 = HEAPF32[$4 + 228 >> 2];
  $21 = HEAPF32[$4 + 216 >> 2];
  $12 = HEAPF32[$4 + 212 >> 2];
  $10 = HEAPF32[$4 + 208 >> 2];
 }
 $4 = Math_imul($2, 244) + $26 | 0;
 $18 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($15 + HEAPF32[$4 + 176 >> 2]) * HEAPF32[$1 + 16 >> 2]) + Math_fround(Math_fround($14 + HEAPF32[$4 + 180 >> 2]) * HEAPF32[$1 + 20 >> 2])) + Math_fround(Math_fround($13 + HEAPF32[$4 + 184 >> 2]) * HEAPF32[$1 + 24 >> 2])) + Math_fround(Math_fround(Math_fround(Math_fround($19 + HEAPF32[$4 + 192 >> 2]) * HEAPF32[$1 >> 2]) + Math_fround(Math_fround($17 + HEAPF32[$4 + 196 >> 2]) * HEAPF32[$1 + 4 >> 2])) + Math_fround(Math_fround($16 + HEAPF32[$4 + 200 >> 2]) * HEAPF32[$1 + 8 >> 2])));
 $4 = Math_imul($3, 244) + $26 | 0;
 $12 = Math_fround($30 - Math_fround($18 + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($10 + HEAPF32[$4 + 176 >> 2]) * HEAPF32[$1 + 48 >> 2]) + Math_fround(Math_fround($12 + HEAPF32[$4 + 180 >> 2]) * HEAPF32[$1 + 52 >> 2])) + Math_fround(Math_fround($21 + HEAPF32[$4 + 184 >> 2]) * HEAPF32[$1 + 56 >> 2])) + Math_fround(Math_fround(Math_fround(Math_fround($23 + HEAPF32[$4 + 192 >> 2]) * HEAPF32[$1 + 32 >> 2]) + Math_fround(Math_fround($22 + HEAPF32[$4 + 196 >> 2]) * HEAPF32[$1 + 36 >> 2])) + Math_fround(Math_fround($24 + HEAPF32[$4 + 200 >> 2]) * HEAPF32[$1 + 40 >> 2])))));
 $10 = Math_fround(0);
 label$18 : {
  if (!!($9 > Math_fround(0))) {
   $12 = Math_fround($12 - Math_fround($27 * $9));
   break label$18;
  }
  $10 = Math_fround($27 * Math_fround($32 * Math_fround(-$9)));
 }
 $13 = HEAPF32[$1 + 108 >> 2];
 $12 = Math_fround($12 * $13);
 $10 = Math_fround($10 * $13);
 if (!($9 > HEAPF32[$5 + 56 >> 2] ^ 1 ? HEAP32[$5 + 52 >> 2] : 0)) {
  $12 = Math_fround($10 + $12);
  $10 = Math_fround(0);
 }
 HEAPF32[$1 + 128 >> 2] = $10;
 HEAPF32[$1 + 112 >> 2] = $12;
 HEAP32[$1 + 120 >> 2] = 0;
 HEAP32[$1 + 124 >> 2] = 1343554297;
 HEAPF32[$1 + 116 >> 2] = $20 * $13;
}
function _GLOBAL__sub_I_btQuickprof_cpp() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(8);
 HEAP32[5682] = $0;
 gettimeofday($0 | 0, 0) | 0;
 HEAP32[5685] = 0;
 HEAP32[5686] = 0;
 HEAP32[5684] = 16476;
 HEAP32[5687] = 0;
 HEAP32[5688] = 0;
 HEAP32[5689] = 0;
 HEAP32[5690] = 0;
 HEAP32[5691] = 0;
 HEAP32[5692] = 0;
 CProfileNode__Reset_28_29(22736);
 HEAP32[5694] = 0;
 HEAP32[5695] = 0;
 HEAP32[5693] = 16476;
 HEAP32[5696] = 0;
 HEAP32[5697] = 0;
 HEAP32[5698] = 0;
 HEAP32[5699] = 0;
 HEAP32[5700] = 0;
 HEAP32[5701] = 0;
 CProfileNode__Reset_28_29(22772);
 HEAP32[5703] = 0;
 HEAP32[5704] = 0;
 HEAP32[5702] = 16476;
 HEAP32[5705] = 0;
 HEAP32[5706] = 0;
 HEAP32[5707] = 0;
 HEAP32[5708] = 0;
 HEAP32[5709] = 0;
 HEAP32[5710] = 0;
 CProfileNode__Reset_28_29(22808);
 HEAP32[5712] = 0;
 HEAP32[5713] = 0;
 HEAP32[5711] = 16476;
 HEAP32[5714] = 0;
 HEAP32[5715] = 0;
 HEAP32[5716] = 0;
 HEAP32[5717] = 0;
 HEAP32[5718] = 0;
 HEAP32[5719] = 0;
 CProfileNode__Reset_28_29(22844);
 HEAP32[5721] = 0;
 HEAP32[5722] = 0;
 HEAP32[5720] = 16476;
 HEAP32[5723] = 0;
 HEAP32[5724] = 0;
 HEAP32[5725] = 0;
 HEAP32[5726] = 0;
 HEAP32[5727] = 0;
 HEAP32[5728] = 0;
 CProfileNode__Reset_28_29(22880);
 HEAP32[5730] = 0;
 HEAP32[5731] = 0;
 HEAP32[5729] = 16476;
 HEAP32[5732] = 0;
 HEAP32[5733] = 0;
 HEAP32[5734] = 0;
 HEAP32[5735] = 0;
 HEAP32[5736] = 0;
 HEAP32[5737] = 0;
 CProfileNode__Reset_28_29(22916);
 HEAP32[5739] = 0;
 HEAP32[5740] = 0;
 HEAP32[5738] = 16476;
 HEAP32[5741] = 0;
 HEAP32[5742] = 0;
 HEAP32[5743] = 0;
 HEAP32[5744] = 0;
 HEAP32[5745] = 0;
 HEAP32[5746] = 0;
 CProfileNode__Reset_28_29(22952);
 HEAP32[5748] = 0;
 HEAP32[5749] = 0;
 HEAP32[5747] = 16476;
 HEAP32[5750] = 0;
 HEAP32[5751] = 0;
 HEAP32[5752] = 0;
 HEAP32[5753] = 0;
 HEAP32[5754] = 0;
 HEAP32[5755] = 0;
 CProfileNode__Reset_28_29(22988);
 HEAP32[5757] = 0;
 HEAP32[5758] = 0;
 HEAP32[5756] = 16476;
 HEAP32[5759] = 0;
 HEAP32[5760] = 0;
 HEAP32[5761] = 0;
 HEAP32[5762] = 0;
 HEAP32[5763] = 0;
 HEAP32[5764] = 0;
 CProfileNode__Reset_28_29(23024);
 HEAP32[5766] = 0;
 HEAP32[5767] = 0;
 HEAP32[5765] = 16476;
 HEAP32[5768] = 0;
 HEAP32[5769] = 0;
 HEAP32[5770] = 0;
 HEAP32[5771] = 0;
 HEAP32[5772] = 0;
 HEAP32[5773] = 0;
 CProfileNode__Reset_28_29(23060);
 HEAP32[5775] = 0;
 HEAP32[5776] = 0;
 HEAP32[5774] = 16476;
 HEAP32[5777] = 0;
 HEAP32[5778] = 0;
 HEAP32[5779] = 0;
 HEAP32[5780] = 0;
 HEAP32[5781] = 0;
 HEAP32[5782] = 0;
 CProfileNode__Reset_28_29(23096);
 HEAP32[5784] = 0;
 HEAP32[5785] = 0;
 HEAP32[5783] = 16476;
 HEAP32[5786] = 0;
 HEAP32[5787] = 0;
 HEAP32[5788] = 0;
 HEAP32[5789] = 0;
 HEAP32[5790] = 0;
 HEAP32[5791] = 0;
 CProfileNode__Reset_28_29(23132);
 HEAP32[5793] = 0;
 HEAP32[5794] = 0;
 HEAP32[5792] = 16476;
 HEAP32[5795] = 0;
 HEAP32[5796] = 0;
 HEAP32[5797] = 0;
 HEAP32[5798] = 0;
 HEAP32[5799] = 0;
 HEAP32[5800] = 0;
 CProfileNode__Reset_28_29(23168);
 HEAP32[5802] = 0;
 HEAP32[5803] = 0;
 HEAP32[5801] = 16476;
 HEAP32[5804] = 0;
 HEAP32[5805] = 0;
 HEAP32[5806] = 0;
 HEAP32[5807] = 0;
 HEAP32[5808] = 0;
 HEAP32[5809] = 0;
 CProfileNode__Reset_28_29(23204);
 HEAP32[5811] = 0;
 HEAP32[5812] = 0;
 HEAP32[5810] = 16476;
 HEAP32[5813] = 0;
 HEAP32[5814] = 0;
 HEAP32[5815] = 0;
 HEAP32[5816] = 0;
 HEAP32[5817] = 0;
 HEAP32[5818] = 0;
 CProfileNode__Reset_28_29(23240);
 HEAP32[5820] = 0;
 HEAP32[5821] = 0;
 HEAP32[5819] = 16476;
 HEAP32[5822] = 0;
 HEAP32[5823] = 0;
 HEAP32[5824] = 0;
 HEAP32[5825] = 0;
 HEAP32[5826] = 0;
 HEAP32[5827] = 0;
 CProfileNode__Reset_28_29(23276);
 HEAP32[5829] = 0;
 HEAP32[5830] = 0;
 HEAP32[5828] = 16476;
 HEAP32[5831] = 0;
 HEAP32[5832] = 0;
 HEAP32[5833] = 0;
 HEAP32[5834] = 0;
 HEAP32[5835] = 0;
 HEAP32[5836] = 0;
 CProfileNode__Reset_28_29(23312);
 HEAP32[5838] = 0;
 HEAP32[5839] = 0;
 HEAP32[5837] = 16476;
 HEAP32[5840] = 0;
 HEAP32[5841] = 0;
 HEAP32[5842] = 0;
 HEAP32[5843] = 0;
 HEAP32[5844] = 0;
 HEAP32[5845] = 0;
 CProfileNode__Reset_28_29(23348);
 HEAP32[5847] = 0;
 HEAP32[5848] = 0;
 HEAP32[5846] = 16476;
 HEAP32[5849] = 0;
 HEAP32[5850] = 0;
 HEAP32[5851] = 0;
 HEAP32[5852] = 0;
 HEAP32[5853] = 0;
 HEAP32[5854] = 0;
 CProfileNode__Reset_28_29(23384);
 HEAP32[5856] = 0;
 HEAP32[5857] = 0;
 HEAP32[5855] = 16476;
 HEAP32[5858] = 0;
 HEAP32[5859] = 0;
 HEAP32[5860] = 0;
 HEAP32[5861] = 0;
 HEAP32[5862] = 0;
 HEAP32[5863] = 0;
 CProfileNode__Reset_28_29(23420);
 HEAP32[5865] = 0;
 HEAP32[5866] = 0;
 HEAP32[5864] = 16476;
 HEAP32[5867] = 0;
 HEAP32[5868] = 0;
 HEAP32[5869] = 0;
 HEAP32[5870] = 0;
 HEAP32[5871] = 0;
 HEAP32[5872] = 0;
 CProfileNode__Reset_28_29(23456);
 HEAP32[5874] = 0;
 HEAP32[5875] = 0;
 HEAP32[5873] = 16476;
 HEAP32[5876] = 0;
 HEAP32[5877] = 0;
 HEAP32[5878] = 0;
 HEAP32[5879] = 0;
 HEAP32[5880] = 0;
 HEAP32[5881] = 0;
 CProfileNode__Reset_28_29(23492);
 HEAP32[5883] = 0;
 HEAP32[5884] = 0;
 HEAP32[5882] = 16476;
 HEAP32[5885] = 0;
 HEAP32[5886] = 0;
 HEAP32[5887] = 0;
 HEAP32[5888] = 0;
 HEAP32[5889] = 0;
 HEAP32[5890] = 0;
 CProfileNode__Reset_28_29(23528);
 HEAP32[5892] = 0;
 HEAP32[5893] = 0;
 HEAP32[5891] = 16476;
 HEAP32[5894] = 0;
 HEAP32[5895] = 0;
 HEAP32[5896] = 0;
 HEAP32[5897] = 0;
 HEAP32[5898] = 0;
 HEAP32[5899] = 0;
 CProfileNode__Reset_28_29(23564);
 HEAP32[5901] = 0;
 HEAP32[5902] = 0;
 HEAP32[5900] = 16476;
 HEAP32[5903] = 0;
 HEAP32[5904] = 0;
 HEAP32[5905] = 0;
 HEAP32[5906] = 0;
 HEAP32[5907] = 0;
 HEAP32[5908] = 0;
 CProfileNode__Reset_28_29(23600);
 HEAP32[5910] = 0;
 HEAP32[5911] = 0;
 HEAP32[5909] = 16476;
 HEAP32[5912] = 0;
 HEAP32[5913] = 0;
 HEAP32[5914] = 0;
 HEAP32[5915] = 0;
 HEAP32[5916] = 0;
 HEAP32[5917] = 0;
 CProfileNode__Reset_28_29(23636);
 HEAP32[5919] = 0;
 HEAP32[5920] = 0;
 HEAP32[5918] = 16476;
 HEAP32[5921] = 0;
 HEAP32[5922] = 0;
 HEAP32[5923] = 0;
 HEAP32[5924] = 0;
 HEAP32[5925] = 0;
 HEAP32[5926] = 0;
 CProfileNode__Reset_28_29(23672);
 HEAP32[5928] = 0;
 HEAP32[5929] = 0;
 HEAP32[5927] = 16476;
 HEAP32[5930] = 0;
 HEAP32[5931] = 0;
 HEAP32[5932] = 0;
 HEAP32[5933] = 0;
 HEAP32[5934] = 0;
 HEAP32[5935] = 0;
 CProfileNode__Reset_28_29(23708);
 HEAP32[5937] = 0;
 HEAP32[5938] = 0;
 HEAP32[5936] = 16476;
 HEAP32[5939] = 0;
 HEAP32[5940] = 0;
 HEAP32[5941] = 0;
 HEAP32[5942] = 0;
 HEAP32[5943] = 0;
 HEAP32[5944] = 0;
 CProfileNode__Reset_28_29(23744);
 HEAP32[5946] = 0;
 HEAP32[5947] = 0;
 HEAP32[5945] = 16476;
 HEAP32[5948] = 0;
 HEAP32[5949] = 0;
 HEAP32[5950] = 0;
 HEAP32[5951] = 0;
 HEAP32[5952] = 0;
 HEAP32[5953] = 0;
 CProfileNode__Reset_28_29(23780);
 HEAP32[5955] = 0;
 HEAP32[5956] = 0;
 HEAP32[5954] = 16476;
 HEAP32[5957] = 0;
 HEAP32[5958] = 0;
 HEAP32[5959] = 0;
 HEAP32[5960] = 0;
 HEAP32[5961] = 0;
 HEAP32[5962] = 0;
 CProfileNode__Reset_28_29(23816);
 HEAP32[5964] = 0;
 HEAP32[5965] = 0;
 HEAP32[5963] = 16476;
 HEAP32[5966] = 0;
 HEAP32[5967] = 0;
 HEAP32[5968] = 0;
 HEAP32[5969] = 0;
 HEAP32[5970] = 0;
 HEAP32[5971] = 0;
 CProfileNode__Reset_28_29(23852);
 HEAP32[5973] = 0;
 HEAP32[5974] = 0;
 HEAP32[5972] = 16476;
 HEAP32[5975] = 0;
 HEAP32[5976] = 0;
 HEAP32[5977] = 0;
 HEAP32[5978] = 0;
 HEAP32[5979] = 0;
 HEAP32[5980] = 0;
 CProfileNode__Reset_28_29(23888);
 HEAP32[5982] = 0;
 HEAP32[5983] = 0;
 HEAP32[5981] = 16476;
 HEAP32[5984] = 0;
 HEAP32[5985] = 0;
 HEAP32[5986] = 0;
 HEAP32[5987] = 0;
 HEAP32[5988] = 0;
 HEAP32[5989] = 0;
 CProfileNode__Reset_28_29(23924);
 HEAP32[5991] = 0;
 HEAP32[5992] = 0;
 HEAP32[5990] = 16476;
 HEAP32[5993] = 0;
 HEAP32[5994] = 0;
 HEAP32[5995] = 0;
 HEAP32[5996] = 0;
 HEAP32[5997] = 0;
 HEAP32[5998] = 0;
 CProfileNode__Reset_28_29(23960);
 HEAP32[6e3] = 0;
 HEAP32[6001] = 0;
 HEAP32[5999] = 16476;
 HEAP32[6002] = 0;
 HEAP32[6003] = 0;
 HEAP32[6004] = 0;
 HEAP32[6005] = 0;
 HEAP32[6006] = 0;
 HEAP32[6007] = 0;
 CProfileNode__Reset_28_29(23996);
 HEAP32[6009] = 0;
 HEAP32[6010] = 0;
 HEAP32[6008] = 16476;
 HEAP32[6011] = 0;
 HEAP32[6012] = 0;
 HEAP32[6013] = 0;
 HEAP32[6014] = 0;
 HEAP32[6015] = 0;
 HEAP32[6016] = 0;
 CProfileNode__Reset_28_29(24032);
 HEAP32[6018] = 0;
 HEAP32[6019] = 0;
 HEAP32[6017] = 16476;
 HEAP32[6020] = 0;
 HEAP32[6021] = 0;
 HEAP32[6022] = 0;
 HEAP32[6023] = 0;
 HEAP32[6024] = 0;
 HEAP32[6025] = 0;
 CProfileNode__Reset_28_29(24068);
 HEAP32[6027] = 0;
 HEAP32[6028] = 0;
 HEAP32[6026] = 16476;
 HEAP32[6029] = 0;
 HEAP32[6030] = 0;
 HEAP32[6031] = 0;
 HEAP32[6032] = 0;
 HEAP32[6033] = 0;
 HEAP32[6034] = 0;
 CProfileNode__Reset_28_29(24104);
 HEAP32[6036] = 0;
 HEAP32[6037] = 0;
 HEAP32[6035] = 16476;
 HEAP32[6038] = 0;
 HEAP32[6039] = 0;
 HEAP32[6040] = 0;
 HEAP32[6041] = 0;
 HEAP32[6042] = 0;
 HEAP32[6043] = 0;
 CProfileNode__Reset_28_29(24140);
 HEAP32[6045] = 0;
 HEAP32[6046] = 0;
 HEAP32[6044] = 16476;
 HEAP32[6047] = 0;
 HEAP32[6048] = 0;
 HEAP32[6049] = 0;
 HEAP32[6050] = 0;
 HEAP32[6051] = 0;
 HEAP32[6052] = 0;
 CProfileNode__Reset_28_29(24176);
 HEAP32[6054] = 0;
 HEAP32[6055] = 0;
 HEAP32[6053] = 16476;
 HEAP32[6056] = 0;
 HEAP32[6057] = 0;
 HEAP32[6058] = 0;
 HEAP32[6059] = 0;
 HEAP32[6060] = 0;
 HEAP32[6061] = 0;
 CProfileNode__Reset_28_29(24212);
 HEAP32[6063] = 0;
 HEAP32[6064] = 0;
 HEAP32[6062] = 16476;
 HEAP32[6065] = 0;
 HEAP32[6066] = 0;
 HEAP32[6067] = 0;
 HEAP32[6068] = 0;
 HEAP32[6069] = 0;
 HEAP32[6070] = 0;
 CProfileNode__Reset_28_29(24248);
 HEAP32[6072] = 0;
 HEAP32[6073] = 0;
 HEAP32[6071] = 16476;
 HEAP32[6074] = 0;
 HEAP32[6075] = 0;
 HEAP32[6076] = 0;
 HEAP32[6077] = 0;
 HEAP32[6078] = 0;
 HEAP32[6079] = 0;
 CProfileNode__Reset_28_29(24284);
 HEAP32[6081] = 0;
 HEAP32[6082] = 0;
 HEAP32[6080] = 16476;
 HEAP32[6083] = 0;
 HEAP32[6084] = 0;
 HEAP32[6085] = 0;
 HEAP32[6086] = 0;
 HEAP32[6087] = 0;
 HEAP32[6088] = 0;
 CProfileNode__Reset_28_29(24320);
 HEAP32[6090] = 0;
 HEAP32[6091] = 0;
 HEAP32[6089] = 16476;
 HEAP32[6092] = 0;
 HEAP32[6093] = 0;
 HEAP32[6094] = 0;
 HEAP32[6095] = 0;
 HEAP32[6096] = 0;
 HEAP32[6097] = 0;
 CProfileNode__Reset_28_29(24356);
 HEAP32[6099] = 0;
 HEAP32[6100] = 0;
 HEAP32[6098] = 16476;
 HEAP32[6101] = 0;
 HEAP32[6102] = 0;
 HEAP32[6103] = 0;
 HEAP32[6104] = 0;
 HEAP32[6105] = 0;
 HEAP32[6106] = 0;
 CProfileNode__Reset_28_29(24392);
 HEAP32[6108] = 0;
 HEAP32[6109] = 0;
 HEAP32[6107] = 16476;
 HEAP32[6110] = 0;
 HEAP32[6111] = 0;
 HEAP32[6112] = 0;
 HEAP32[6113] = 0;
 HEAP32[6114] = 0;
 HEAP32[6115] = 0;
 CProfileNode__Reset_28_29(24428);
 HEAP32[6117] = 0;
 HEAP32[6118] = 0;
 HEAP32[6116] = 16476;
 HEAP32[6119] = 0;
 HEAP32[6120] = 0;
 HEAP32[6121] = 0;
 HEAP32[6122] = 0;
 HEAP32[6123] = 0;
 HEAP32[6124] = 0;
 CProfileNode__Reset_28_29(24464);
 HEAP32[6126] = 0;
 HEAP32[6127] = 0;
 HEAP32[6125] = 16476;
 HEAP32[6128] = 0;
 HEAP32[6129] = 0;
 HEAP32[6130] = 0;
 HEAP32[6131] = 0;
 HEAP32[6132] = 0;
 HEAP32[6133] = 0;
 CProfileNode__Reset_28_29(24500);
 HEAP32[6135] = 0;
 HEAP32[6136] = 0;
 HEAP32[6134] = 16476;
 HEAP32[6137] = 0;
 HEAP32[6138] = 0;
 HEAP32[6139] = 0;
 HEAP32[6140] = 0;
 HEAP32[6141] = 0;
 HEAP32[6142] = 0;
 CProfileNode__Reset_28_29(24536);
 HEAP32[6144] = 0;
 HEAP32[6145] = 0;
 HEAP32[6143] = 16476;
 HEAP32[6146] = 0;
 HEAP32[6147] = 0;
 HEAP32[6148] = 0;
 HEAP32[6149] = 0;
 HEAP32[6150] = 0;
 HEAP32[6151] = 0;
 CProfileNode__Reset_28_29(24572);
 HEAP32[6153] = 0;
 HEAP32[6154] = 0;
 HEAP32[6152] = 16476;
 HEAP32[6155] = 0;
 HEAP32[6156] = 0;
 HEAP32[6157] = 0;
 HEAP32[6158] = 0;
 HEAP32[6159] = 0;
 HEAP32[6160] = 0;
 CProfileNode__Reset_28_29(24608);
 HEAP32[6162] = 0;
 HEAP32[6163] = 0;
 HEAP32[6161] = 16476;
 HEAP32[6164] = 0;
 HEAP32[6165] = 0;
 HEAP32[6166] = 0;
 HEAP32[6167] = 0;
 HEAP32[6168] = 0;
 HEAP32[6169] = 0;
 CProfileNode__Reset_28_29(24644);
 HEAP32[6171] = 0;
 HEAP32[6172] = 0;
 HEAP32[6170] = 16476;
 HEAP32[6173] = 0;
 HEAP32[6174] = 0;
 HEAP32[6175] = 0;
 HEAP32[6176] = 0;
 HEAP32[6177] = 0;
 HEAP32[6178] = 0;
 CProfileNode__Reset_28_29(24680);
 HEAP32[6180] = 0;
 HEAP32[6181] = 0;
 HEAP32[6179] = 16476;
 HEAP32[6182] = 0;
 HEAP32[6183] = 0;
 HEAP32[6184] = 0;
 HEAP32[6185] = 0;
 HEAP32[6186] = 0;
 HEAP32[6187] = 0;
 CProfileNode__Reset_28_29(24716);
 HEAP32[6189] = 0;
 HEAP32[6190] = 0;
 HEAP32[6188] = 16476;
 HEAP32[6191] = 0;
 HEAP32[6192] = 0;
 HEAP32[6193] = 0;
 HEAP32[6194] = 0;
 HEAP32[6195] = 0;
 HEAP32[6196] = 0;
 CProfileNode__Reset_28_29(24752);
 HEAP32[6198] = 0;
 HEAP32[6199] = 0;
 HEAP32[6197] = 16476;
 HEAP32[6200] = 0;
 HEAP32[6201] = 0;
 HEAP32[6202] = 0;
 HEAP32[6203] = 0;
 HEAP32[6204] = 0;
 HEAP32[6205] = 0;
 CProfileNode__Reset_28_29(24788);
 HEAP32[6207] = 0;
 HEAP32[6208] = 0;
 HEAP32[6206] = 16476;
 HEAP32[6209] = 0;
 HEAP32[6210] = 0;
 HEAP32[6211] = 0;
 HEAP32[6212] = 0;
 HEAP32[6213] = 0;
 HEAP32[6214] = 0;
 CProfileNode__Reset_28_29(24824);
 HEAP32[6216] = 0;
 HEAP32[6217] = 0;
 HEAP32[6215] = 16476;
 HEAP32[6218] = 0;
 HEAP32[6219] = 0;
 HEAP32[6220] = 0;
 HEAP32[6221] = 0;
 HEAP32[6222] = 0;
 HEAP32[6223] = 0;
 CProfileNode__Reset_28_29(24860);
 HEAP32[6225] = 0;
 HEAP32[6226] = 0;
 HEAP32[6224] = 16476;
 HEAP32[6227] = 0;
 HEAP32[6228] = 0;
 HEAP32[6229] = 0;
 HEAP32[6230] = 0;
 HEAP32[6231] = 0;
 HEAP32[6232] = 0;
 CProfileNode__Reset_28_29(24896);
 HEAP32[6234] = 0;
 HEAP32[6235] = 0;
 HEAP32[6233] = 16476;
 HEAP32[6236] = 0;
 HEAP32[6237] = 0;
 HEAP32[6238] = 0;
 HEAP32[6239] = 0;
 HEAP32[6240] = 0;
 HEAP32[6241] = 0;
 CProfileNode__Reset_28_29(24932);
 HEAP32[6243] = 0;
 HEAP32[6244] = 0;
 HEAP32[6242] = 16476;
 HEAP32[6245] = 0;
 HEAP32[6246] = 0;
 HEAP32[6247] = 0;
 HEAP32[6248] = 0;
 HEAP32[6249] = 0;
 HEAP32[6250] = 0;
 CProfileNode__Reset_28_29(24968);
 HEAP32[6252] = 0;
 HEAP32[6253] = 0;
 HEAP32[6251] = 16476;
 HEAP32[6254] = 0;
 HEAP32[6255] = 0;
 HEAP32[6256] = 0;
 HEAP32[6257] = 0;
 HEAP32[6258] = 0;
 HEAP32[6259] = 0;
 CProfileNode__Reset_28_29(25004);
}
function btCompoundCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = 0, $33 = Math_fround(0), $34 = Math_fround(0), $35 = 0, $36 = 0, $37 = 0;
 $5 = global$0 - 176 | 0;
 $7 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 $37 = HEAPU8[$0 + 68 | 0];
 $35 = $37 ? $2 : $1;
 $32 = HEAP32[$35 + 4 >> 2];
 if (HEAP32[$32 + 72 >> 2] != HEAP32[$0 + 80 >> 2]) {
  $18 = HEAP32[$0 + 52 >> 2];
  if (($18 | 0) >= 1) {
   while (1) {
    $8 = $6 << 2;
    $7 = HEAP32[$8 + HEAP32[$0 + 60 >> 2] >> 2];
    if ($7) {
     FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] >> 2]]($7) | 0;
     $7 = HEAP32[$0 + 4 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 60 >> 2]]($7, HEAP32[HEAP32[$0 + 60 >> 2] + $8 >> 2]);
    }
    $6 = $6 + 1 | 0;
    if (($18 | 0) != ($6 | 0)) {
     continue;
    }
    break;
   }
  }
  btCompoundCollisionAlgorithm__preallocateChildAlgorithms_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2);
  HEAP32[$0 + 80 >> 2] = HEAP32[$32 + 72 >> 2];
 }
 $7 = HEAP32[$0 + 52 >> 2];
 label$6 : {
  if (!$7) {
   break label$6;
  }
  $36 = HEAP32[$32 + 68 >> 2];
  $6 = HEAP32[$0 + 60 >> 2];
  $8 = HEAP32[$0 + 4 >> 2];
  HEAP32[$5 + 172 >> 2] = HEAP32[$0 + 72 >> 2];
  HEAP32[$5 + 168 >> 2] = $6;
  HEAP32[$5 + 164 >> 2] = $4;
  HEAP32[$5 + 160 >> 2] = $3;
  HEAP32[$5 + 156 >> 2] = $8;
  $2 = $37 ? $1 : $2;
  HEAP32[$5 + 152 >> 2] = $2;
  HEAP32[$5 + 148 >> 2] = $35;
  HEAP32[$5 + 144 >> 2] = 10484;
  $6 = HEAP32[$0 + 32 >> 2];
  if (($6 | 0) <= -1) {
   if (HEAP32[$0 + 36 >> 2] <= -1) {
    $7 = HEAP32[$0 + 40 >> 2];
    if ($7) {
     if (HEAPU8[$0 + 44 | 0]) {
      btAlignedFreeInternal_28void__29($7);
     }
     HEAP32[$0 + 40 >> 2] = 0;
    }
    HEAP32[$0 + 36 >> 2] = 0;
    HEAP32[$0 + 40 >> 2] = 0;
    HEAP8[$0 + 44 | 0] = 1;
   }
   while (1) {
    HEAP32[HEAP32[$0 + 40 >> 2] + ($6 << 2) >> 2] = 0;
    $7 = $6 + 1 | 0;
    $8 = $7 >>> 0 >= $6 >>> 0;
    $6 = $7;
    if ($8) {
     continue;
    }
    break;
   }
   $7 = HEAP32[$0 + 52 >> 2];
  }
  HEAP32[$0 + 32 >> 2] = 0;
  if (($7 | 0) >= 1) {
   $3 = $0 + 28 | 0;
   $1 = 0;
   while (1) {
    $6 = HEAP32[HEAP32[$0 + 60 >> 2] + ($1 << 2) >> 2];
    if ($6) {
     FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 16 >> 2]]($6, $3);
     $7 = 0;
     $6 = HEAP32[$0 + 32 >> 2];
     if (($6 | 0) > 0) {
      while (1) {
       $8 = HEAP32[HEAP32[$0 + 40 >> 2] + ($7 << 2) >> 2];
       if (HEAP32[$8 + 844 >> 2]) {
        HEAP32[$4 + 4 >> 2] = $8;
        $6 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
        $18 = HEAP32[$8 + 836 >> 2];
        label$18 : {
         if (($6 | 0) != ($18 | 0)) {
          btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($8, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0, $6 + 4 | 0);
          break label$18;
         }
         btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($8, $18 + 4 | 0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0);
        }
        HEAP32[$4 + 4 >> 2] = 0;
        $6 = HEAP32[$0 + 32 >> 2];
       }
       $7 = $7 + 1 | 0;
       if (($7 | 0) < ($6 | 0)) {
        continue;
       }
       break;
      }
     }
     if (($6 | 0) <= -1) {
      if (HEAP32[$0 + 36 >> 2] <= -1) {
       $7 = HEAP32[$0 + 40 >> 2];
       if ($7) {
        if (HEAPU8[$0 + 44 | 0]) {
         btAlignedFreeInternal_28void__29($7);
        }
        HEAP32[$0 + 40 >> 2] = 0;
       }
       HEAP8[$0 + 44 | 0] = 1;
       HEAP32[$0 + 36 >> 2] = 0;
       HEAP32[$0 + 40 >> 2] = 0;
      }
      while (1) {
       HEAP32[HEAP32[$0 + 40 >> 2] + ($6 << 2) >> 2] = 0;
       $7 = $6 + 1 | 0;
       $8 = $7 >>> 0 < $6 >>> 0;
       $6 = $7;
       if (!$8) {
        continue;
       }
       break;
      }
     }
     HEAP32[$0 + 32 >> 2] = 0;
     $7 = HEAP32[$0 + 52 >> 2];
    }
    $1 = $1 + 1 | 0;
    if (($1 | 0) < ($7 | 0)) {
     continue;
    }
    break;
   }
  }
  label$25 : {
   if (!$36) {
    if (($7 | 0) < 1) {
     break label$25;
    }
    $6 = 0;
    while (1) {
     btCompoundLeafCallback__ProcessChildShape_28btCollisionShape_20const__2c_20int_29($5 + 144 | 0, HEAP32[(HEAP32[$32 + 28 >> 2] + Math_imul($6, 80) | 0) + 64 >> 2], $6);
     $6 = $6 + 1 | 0;
     if (($7 | 0) != ($6 | 0)) {
      continue;
     }
     break;
    }
    break label$25;
   }
   $6 = HEAP32[$35 + 12 >> 2];
   $19 = HEAPF32[$6 + 52 >> 2];
   $20 = HEAPF32[$6 + 56 >> 2];
   $7 = HEAP32[$2 + 12 >> 2];
   $21 = HEAPF32[$7 + 52 >> 2];
   $22 = HEAPF32[$7 + 56 >> 2];
   $9 = HEAPF32[$6 + 20 >> 2];
   $10 = HEAPF32[$6 + 36 >> 2];
   $23 = HEAPF32[$7 + 20 >> 2];
   $24 = HEAPF32[$7 + 36 >> 2];
   $25 = HEAPF32[$7 + 24 >> 2];
   $11 = HEAPF32[$6 + 24 >> 2];
   $26 = HEAPF32[$7 + 40 >> 2];
   $12 = HEAPF32[$6 + 40 >> 2];
   $27 = HEAPF32[$7 + 32 >> 2];
   $13 = HEAPF32[$6 + 32 >> 2];
   $28 = HEAPF32[$7 >> 2];
   $14 = HEAPF32[$6 >> 2];
   $29 = HEAPF32[$7 + 16 >> 2];
   $15 = HEAPF32[$6 + 16 >> 2];
   $30 = HEAPF32[$6 + 48 >> 2];
   $31 = HEAPF32[$7 + 48 >> 2];
   $16 = HEAPF32[$6 + 4 >> 2];
   $33 = HEAPF32[$7 + 4 >> 2];
   $34 = HEAPF32[$7 + 8 >> 2];
   $17 = HEAPF32[$6 + 8 >> 2];
   HEAP32[$5 + 108 >> 2] = 0;
   HEAP32[$5 + 92 >> 2] = 0;
   HEAP32[$5 + 76 >> 2] = 0;
   HEAPF32[$5 + 88 >> 2] = Math_fround(Math_fround($17 * $34) + Math_fround($11 * $25)) + Math_fround($12 * $26);
   HEAPF32[$5 + 84 >> 2] = Math_fround(Math_fround($17 * $33) + Math_fround($11 * $23)) + Math_fround($12 * $24);
   HEAPF32[$5 + 72 >> 2] = Math_fround(Math_fround($16 * $34) + Math_fround($9 * $25)) + Math_fround($10 * $26);
   HEAPF32[$5 + 68 >> 2] = Math_fround(Math_fround($16 * $33) + Math_fround($9 * $23)) + Math_fround($10 * $24);
   $19 = Math_fround(-$19);
   HEAPF32[$5 + 104 >> 2] = Math_fround(Math_fround(Math_fround($11 * $19) - Math_fround($17 * $30)) - Math_fround($12 * $20)) + Math_fround(Math_fround(Math_fround($17 * $31) + Math_fround($11 * $21)) + Math_fround($12 * $22));
   HEAPF32[$5 + 100 >> 2] = Math_fround(Math_fround(Math_fround($9 * $19) - Math_fround($16 * $30)) - Math_fround($10 * $20)) + Math_fround(Math_fround(Math_fround($16 * $31) + Math_fround($9 * $21)) + Math_fround($10 * $22));
   HEAP32[$5 + 60 >> 2] = 0;
   HEAPF32[$5 + 48 >> 2] = Math_fround(Math_fround($14 * $28) + Math_fround($15 * $29)) + Math_fround($13 * $27);
   HEAPF32[$5 + 80 >> 2] = Math_fround(Math_fround($17 * $28) + Math_fround($11 * $29)) + Math_fround($12 * $27);
   HEAPF32[$5 + 64 >> 2] = Math_fround(Math_fround($16 * $28) + Math_fround($9 * $29)) + Math_fround($10 * $27);
   HEAPF32[$5 + 56 >> 2] = Math_fround(Math_fround($14 * $34) + Math_fround($15 * $25)) + Math_fround($13 * $26);
   HEAPF32[$5 + 52 >> 2] = Math_fround(Math_fround($14 * $33) + Math_fround($15 * $23)) + Math_fround($13 * $24);
   HEAPF32[$5 + 96 >> 2] = Math_fround(Math_fround(Math_fround($15 * $19) - Math_fround($14 * $30)) - Math_fround($13 * $20)) + Math_fround(Math_fround(Math_fround($14 * $31) + Math_fround($15 * $21)) + Math_fround($13 * $22));
   $6 = HEAP32[$2 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6, $5 + 48 | 0, $5 + 128 | 0, $5 + 112 | 0);
   $9 = HEAPF32[$4 + 32 >> 2];
   HEAPF32[$5 + 128 >> 2] = HEAPF32[$5 + 128 >> 2] - $9;
   HEAPF32[$5 + 132 >> 2] = HEAPF32[$5 + 132 >> 2] - $9;
   HEAPF32[$5 + 136 >> 2] = HEAPF32[$5 + 136 >> 2] - $9;
   HEAPF32[$5 + 112 >> 2] = $9 + HEAPF32[$5 + 112 >> 2];
   HEAPF32[$5 + 116 >> 2] = $9 + HEAPF32[$5 + 116 >> 2];
   HEAPF32[$5 + 120 >> 2] = $9 + HEAPF32[$5 + 120 >> 2];
   $1 = HEAP32[$5 + 140 >> 2];
   $3 = HEAP32[$5 + 136 >> 2];
   HEAP32[$5 + 24 >> 2] = $3;
   HEAP32[$5 + 28 >> 2] = $1;
   $3 = HEAP32[$5 + 124 >> 2];
   $1 = HEAP32[$5 + 120 >> 2];
   HEAP32[$5 + 40 >> 2] = $1;
   HEAP32[$5 + 44 >> 2] = $3;
   $1 = HEAP32[$5 + 116 >> 2];
   $3 = HEAP32[$5 + 112 >> 2];
   HEAP32[$5 + 32 >> 2] = $3;
   HEAP32[$5 + 36 >> 2] = $1;
   $3 = HEAP32[$5 + 132 >> 2];
   $1 = HEAP32[$5 + 128 >> 2];
   HEAP32[$5 + 16 >> 2] = $1;
   HEAP32[$5 + 20 >> 2] = $3;
   btDbvt__collideTVNoStackAlloc_28btDbvtNode_20const__2c_20btDbvtAabbMm_20const__2c_20btAlignedObjectArray_btDbvtNode_20const____2c_20btDbvt__ICollide__29_20const($36, HEAP32[$36 >> 2], $5 + 16 | 0, $0 + 8 | 0, $5 + 144 | 0);
  }
  $1 = HEAP32[$0 + 52 >> 2];
  $6 = HEAP32[$0 + 32 >> 2];
  if (($6 | 0) <= -1) {
   if (HEAP32[$0 + 36 >> 2] <= -1) {
    $7 = HEAP32[$0 + 40 >> 2];
    if ($7) {
     if (HEAPU8[$0 + 44 | 0]) {
      btAlignedFreeInternal_28void__29($7);
     }
     HEAP32[$0 + 40 >> 2] = 0;
    }
    HEAP32[$0 + 36 >> 2] = 0;
    HEAP32[$0 + 40 >> 2] = 0;
    HEAP8[$0 + 44 | 0] = 1;
   }
   while (1) {
    HEAP32[HEAP32[$0 + 40 >> 2] + ($6 << 2) >> 2] = 0;
    $7 = $6 + 1 | 0;
    $8 = $7 >>> 0 >= $6 >>> 0;
    $6 = $7;
    if ($8) {
     continue;
    }
    break;
   }
  }
  HEAP32[$0 + 32 >> 2] = 0;
  if (($1 | 0) < 1) {
   break label$6;
  }
  $8 = 0;
  while (1) {
   $4 = $8 << 2;
   label$34 : {
    if (!HEAP32[$4 + HEAP32[$0 + 60 >> 2] >> 2]) {
     break label$34;
    }
    $6 = HEAP32[$32 + 28 >> 2] + Math_imul($8, 80) | 0;
    $18 = HEAP32[$6 + 64 >> 2];
    $7 = HEAP32[$35 + 12 >> 2];
    $33 = HEAPF32[$7 + 52 >> 2];
    $34 = HEAPF32[$7 + 56 >> 2];
    $20 = HEAPF32[$6 + 48 >> 2];
    $21 = HEAPF32[$6 + 52 >> 2];
    $22 = HEAPF32[$6 + 56 >> 2];
    $23 = HEAPF32[$6 + 4 >> 2];
    $24 = HEAPF32[$6 + 20 >> 2];
    $25 = HEAPF32[$6 + 36 >> 2];
    $26 = HEAPF32[$6 + 8 >> 2];
    $27 = HEAPF32[$6 + 24 >> 2];
    $28 = HEAPF32[$6 + 40 >> 2];
    $9 = HEAPF32[$7 + 20 >> 2];
    $10 = HEAPF32[$7 + 24 >> 2];
    $29 = HEAPF32[$6 >> 2];
    $30 = HEAPF32[$6 + 16 >> 2];
    $11 = HEAPF32[$7 + 36 >> 2];
    $31 = HEAPF32[$6 + 32 >> 2];
    $12 = HEAPF32[$7 + 40 >> 2];
    $19 = HEAPF32[$7 + 48 >> 2];
    $13 = HEAPF32[$7 + 8 >> 2];
    $14 = HEAPF32[$7 >> 2];
    $15 = HEAPF32[$7 + 4 >> 2];
    $16 = HEAPF32[$7 + 16 >> 2];
    $17 = HEAPF32[$7 + 32 >> 2];
    $7 = 0;
    HEAP32[$5 + 108 >> 2] = 0;
    HEAP32[$5 + 92 >> 2] = 0;
    HEAP32[$5 + 76 >> 2] = 0;
    HEAP32[$5 + 60 >> 2] = 0;
    HEAPF32[$5 + 80 >> 2] = Math_fround(Math_fround($17 * $29) + Math_fround($11 * $30)) + Math_fround($12 * $31);
    HEAPF32[$5 + 64 >> 2] = Math_fround(Math_fround($16 * $29) + Math_fround($9 * $30)) + Math_fround($10 * $31);
    HEAPF32[$5 + 48 >> 2] = Math_fround(Math_fround($14 * $29) + Math_fround($15 * $30)) + Math_fround($13 * $31);
    HEAPF32[$5 + 88 >> 2] = Math_fround(Math_fround($17 * $26) + Math_fround($11 * $27)) + Math_fround($12 * $28);
    HEAPF32[$5 + 84 >> 2] = Math_fround(Math_fround($17 * $23) + Math_fround($11 * $24)) + Math_fround($12 * $25);
    HEAPF32[$5 + 72 >> 2] = Math_fround(Math_fround($16 * $26) + Math_fround($9 * $27)) + Math_fround($10 * $28);
    HEAPF32[$5 + 68 >> 2] = Math_fround(Math_fround($16 * $23) + Math_fround($9 * $24)) + Math_fround($10 * $25);
    HEAPF32[$5 + 56 >> 2] = Math_fround(Math_fround($14 * $26) + Math_fround($15 * $27)) + Math_fround($13 * $28);
    HEAPF32[$5 + 52 >> 2] = Math_fround(Math_fround($14 * $23) + Math_fround($15 * $24)) + Math_fround($13 * $25);
    HEAPF32[$5 + 104 >> 2] = $34 + Math_fround(Math_fround(Math_fround($17 * $20) + Math_fround($11 * $21)) + Math_fround($12 * $22));
    HEAPF32[$5 + 100 >> 2] = $33 + Math_fround(Math_fround(Math_fround($16 * $20) + Math_fround($9 * $21)) + Math_fround($10 * $22));
    HEAPF32[$5 + 96 >> 2] = $19 + Math_fround(Math_fround(Math_fround($14 * $20) + Math_fround($15 * $21)) + Math_fround($13 * $22));
    FUNCTION_TABLE[HEAP32[HEAP32[$18 >> 2] + 8 >> 2]]($18, $5 + 48 | 0, $5 + 16 | 0, $5 + 128 | 0);
    $6 = HEAP32[$2 + 4 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6, HEAP32[$2 + 12 >> 2], $5 + 112 | 0, $5);
    $6 = 0;
    label$35 : {
     if (HEAPF32[$5 + 16 >> 2] > HEAPF32[$5 >> 2]) {
      break label$35;
     }
     $6 = 0;
     if (HEAPF32[$5 + 128 >> 2] < HEAPF32[$5 + 112 >> 2]) {
      break label$35;
     }
     $6 = 1;
    }
    $7 = HEAPF32[$5 + 136 >> 2] < HEAPF32[$5 + 120 >> 2] | HEAPF32[$5 + 24 >> 2] > HEAPF32[$5 + 8 >> 2] ? $7 : $6;
    if ($7 ^ 1 ? 0 : !(HEAPF32[$5 + 132 >> 2] < HEAPF32[$5 + 116 >> 2] | HEAPF32[$5 + 20 >> 2] > HEAPF32[$5 + 4 >> 2])) {
     break label$34;
    }
    $6 = HEAP32[HEAP32[$0 + 60 >> 2] + $4 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] >> 2]]($6) | 0;
    $6 = HEAP32[$0 + 4 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 60 >> 2]]($6, HEAP32[HEAP32[$0 + 60 >> 2] + $4 >> 2]);
    HEAP32[HEAP32[$0 + 60 >> 2] + $4 >> 2] = 0;
   }
   $8 = $8 + 1 | 0;
   if (($8 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = $5 + 176 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btPersistentManifold__sortCachedPoints_28btManifoldPoint_20const__29($0, $1) {
 var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = 0, $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = 0;
 $4 = HEAPF32[$0 + 84 >> 2];
 $2 = HEAPF32[$1 + 80 >> 2];
 $18 = $4 < $2;
 $35 = $18 ? 0 : -1;
 $3 = HEAPF32[$0 + 292 >> 2];
 $4 = $18 ? $4 : $2;
 $18 = $3 < $4;
 $41 = $18 ? 1 : $35;
 $2 = HEAPF32[$0 + 500 >> 2];
 $4 = $18 ? $3 : $4;
 $18 = $2 < $4;
 $35 = HEAPF32[$0 + 708 >> 2] < ($18 ? $2 : $4);
 $18 = $35 ? 3 : $18 ? 2 : $41;
 $4 = HEAPF32[$1 >> 2];
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     if (HEAPU8[19868]) {
      if (!$18) {
       $13 = HEAPF32[$0 + 636 >> 2];
       $17 = HEAPF32[$0 + 428 >> 2];
       $5 = Math_fround($13 - $17);
       $15 = HEAPF32[$0 + 632 >> 2];
       $19 = HEAPF32[$0 + 424 >> 2];
       $8 = Math_fround($15 - $19);
       $22 = HEAPF32[$0 + 628 >> 2];
       $6 = HEAPF32[$0 + 420 >> 2];
       $9 = Math_fround($22 - $6);
       $3 = HEAPF32[$1 + 8 >> 2];
       $2 = HEAPF32[$1 + 4 >> 2];
       break label$4;
      }
      $11 = HEAPF32[$0 + 212 >> 2];
      $14 = Math_fround($4 - $11);
      $15 = HEAPF32[$0 + 632 >> 2];
      $19 = HEAPF32[$0 + 424 >> 2];
      $8 = Math_fround($15 - $19);
      $2 = HEAPF32[$1 + 4 >> 2];
      $12 = HEAPF32[$0 + 216 >> 2];
      $3 = Math_fround($2 - $12);
      $22 = HEAPF32[$0 + 628 >> 2];
      $6 = HEAPF32[$0 + 420 >> 2];
      $9 = Math_fround($22 - $6);
      $5 = Math_fround(Math_fround($14 * $8) - Math_fround($3 * $9));
      $10 = Math_fround($5 * $5);
      $13 = HEAPF32[$0 + 636 >> 2];
      $17 = HEAPF32[$0 + 428 >> 2];
      $5 = Math_fround($13 - $17);
      $16 = Math_fround($3 * $5);
      $3 = HEAPF32[$1 + 8 >> 2];
      $7 = HEAPF32[$0 + 220 >> 2];
      $24 = Math_fround($3 - $7);
      $25 = Math_fround($16 - Math_fround($24 * $8));
      $14 = Math_fround(Math_fround($24 * $9) - Math_fround($14 * $5));
      $14 = Math_fround($10 + Math_fround(Math_fround($25 * $25) + Math_fround($14 * $14)));
      if (($18 | 0) != 1) {
       break label$4;
      }
      $4 = Math_fround($4 - HEAPF32[$0 + 4 >> 2]);
      $3 = Math_fround($3 - HEAPF32[$0 + 12 >> 2]);
      $2 = Math_fround($2 - HEAPF32[$0 + 8 >> 2]);
      $9 = Math_fround(0);
      break label$3;
     }
     label$7 : {
      label$8 : {
       label$9 : {
        if (!$18) {
         $7 = HEAPF32[$0 + 428 >> 2];
         $16 = HEAPF32[$0 + 636 >> 2];
         $9 = Math_fround($7 - $16);
         $12 = HEAPF32[$0 + 424 >> 2];
         $20 = HEAPF32[$0 + 632 >> 2];
         $23 = Math_fround($12 - $20);
         $11 = HEAPF32[$0 + 420 >> 2];
         $21 = HEAPF32[$0 + 628 >> 2];
         $27 = Math_fround($11 - $21);
         $17 = HEAPF32[$1 + 8 >> 2];
         $8 = Math_fround($17 - $16);
         $19 = HEAPF32[$1 + 4 >> 2];
         $33 = Math_fround($19 - $20);
         $34 = Math_fround($4 - $21);
         $2 = Math_fround($17 - $7);
         $3 = Math_fround($19 - $12);
         $5 = Math_fround($4 - $11);
         break label$9;
        }
        $25 = HEAPF32[$0 + 212 >> 2];
        $15 = Math_fround($4 - $25);
        $12 = HEAPF32[$0 + 424 >> 2];
        $20 = HEAPF32[$0 + 632 >> 2];
        $23 = Math_fround($12 - $20);
        $19 = HEAPF32[$1 + 4 >> 2];
        $24 = HEAPF32[$0 + 216 >> 2];
        $13 = Math_fround($19 - $24);
        $11 = HEAPF32[$0 + 420 >> 2];
        $21 = HEAPF32[$0 + 628 >> 2];
        $27 = Math_fround($11 - $21);
        $2 = Math_fround(Math_fround($15 * $23) - Math_fround($13 * $27));
        $5 = Math_fround($2 * $2);
        $7 = HEAPF32[$0 + 428 >> 2];
        $16 = HEAPF32[$0 + 636 >> 2];
        $9 = Math_fround($7 - $16);
        $17 = HEAPF32[$1 + 8 >> 2];
        $22 = HEAPF32[$0 + 220 >> 2];
        $6 = Math_fround($17 - $22);
        $2 = Math_fround(Math_fround($13 * $9) - Math_fround($6 * $23));
        $3 = Math_fround($2 * $2);
        $2 = Math_fround(Math_fround($6 * $27) - Math_fround($15 * $9));
        $8 = Math_fround($5 + Math_fround($3 + Math_fround($2 * $2)));
        $5 = Math_fround($4 - $11);
        $28 = Math_fround($24 - $20);
        $3 = Math_fround($19 - $12);
        $36 = Math_fround($25 - $21);
        $2 = Math_fround(Math_fround($5 * $28) - Math_fround($3 * $36));
        $10 = Math_fround($2 * $2);
        $37 = Math_fround($22 - $16);
        $2 = Math_fround($17 - $7);
        $14 = Math_fround(Math_fround($3 * $37) - Math_fround($2 * $28));
        $26 = Math_fround($14 * $14);
        $14 = Math_fround(Math_fround($2 * $36) - Math_fround($5 * $37));
        $14 = Math_fround($10 + Math_fround($26 + Math_fround($14 * $14)));
        $14 = $8 > $14 ? $8 : $14;
        $10 = Math_fround($24 - $12);
        $34 = Math_fround($4 - $21);
        $26 = Math_fround($25 - $11);
        $33 = Math_fround($19 - $20);
        $8 = Math_fround(Math_fround($10 * $34) - Math_fround($26 * $33));
        $29 = Math_fround($8 * $8);
        $31 = Math_fround($22 - $7);
        $8 = Math_fround($17 - $16);
        $10 = Math_fround(Math_fround($31 * $33) - Math_fround($10 * $8));
        $30 = Math_fround($10 * $10);
        $10 = Math_fround(Math_fround($26 * $8) - Math_fround($31 * $34));
        $10 = Math_fround($29 + Math_fround($30 + Math_fround($10 * $10)));
        $14 = $14 > $10 ? $14 : $10;
        if (($18 | 0) != 1) {
         break label$9;
        }
        $29 = HEAPF32[$0 + 4 >> 2];
        $38 = Math_fround($29 - $21);
        $10 = Math_fround($4 - $29);
        $30 = HEAPF32[$0 + 12 >> 2];
        $39 = Math_fround($30 - $16);
        $32 = HEAPF32[$0 + 8 >> 2];
        $40 = Math_fround($32 - $20);
        $31 = Math_fround($17 - $30);
        $26 = Math_fround($19 - $32);
        $9 = Math_fround(0);
        break label$8;
       }
       $29 = HEAPF32[$0 + 4 >> 2];
       $10 = Math_fround($4 - $29);
       $32 = HEAPF32[$0 + 8 >> 2];
       $26 = Math_fround($19 - $32);
       $6 = Math_fround(Math_fround($10 * $23) - Math_fround($26 * $27));
       $13 = Math_fround($6 * $6);
       $30 = HEAPF32[$0 + 12 >> 2];
       $31 = Math_fround($17 - $30);
       $6 = Math_fround(Math_fround($26 * $9) - Math_fround($31 * $23));
       $9 = Math_fround(Math_fround($31 * $27) - Math_fround($10 * $9));
       $9 = Math_fround($13 + Math_fround(Math_fround($6 * $6) + Math_fround($9 * $9)));
       $40 = Math_fround($32 - $20);
       $38 = Math_fround($29 - $21);
       $6 = Math_fround(Math_fround($5 * $40) - Math_fround($3 * $38));
       $13 = Math_fround($6 * $6);
       $39 = Math_fround($30 - $16);
       $6 = Math_fround(Math_fround($3 * $39) - Math_fround($2 * $40));
       $15 = Math_fround($6 * $6);
       $6 = Math_fround(Math_fround($2 * $38) - Math_fround($5 * $39));
       $6 = Math_fround($13 + Math_fround($15 + Math_fround($6 * $6)));
       $9 = $9 > $6 ? $9 : $6;
       $23 = Math_fround($32 - $12);
       $27 = Math_fround($29 - $11);
       $6 = Math_fround(Math_fround($23 * $34) - Math_fround($27 * $33));
       $13 = Math_fround($6 * $6);
       $28 = Math_fround($30 - $7);
       $6 = Math_fround(Math_fround($28 * $33) - Math_fround($23 * $8));
       $15 = Math_fround($6 * $6);
       $6 = Math_fround(Math_fround($27 * $8) - Math_fround($28 * $34));
       $6 = Math_fround($13 + Math_fround($15 + Math_fround($6 * $6)));
       $9 = $9 > $6 ? $9 : $6;
       $22 = HEAPF32[$0 + 220 >> 2];
       $6 = Math_fround($17 - $22);
       $24 = HEAPF32[$0 + 216 >> 2];
       $13 = Math_fround($19 - $24);
       $25 = HEAPF32[$0 + 212 >> 2];
       $15 = Math_fround($4 - $25);
       if (($18 | 0) == 2) {
        $16 = Math_fround($30 - $22);
        $20 = Math_fround($32 - $24);
        $21 = Math_fround($29 - $25);
        $8 = Math_fround(0);
        break label$7;
       }
       $37 = Math_fround($22 - $16);
       $28 = Math_fround($24 - $20);
       $36 = Math_fround($25 - $21);
      }
      $2 = Math_fround(Math_fround($10 * $28) - Math_fround($26 * $36));
      $5 = Math_fround($2 * $2);
      $2 = Math_fround(Math_fround($26 * $37) - Math_fround($31 * $28));
      $3 = Math_fround($2 * $2);
      $2 = Math_fround(Math_fround($31 * $36) - Math_fround($10 * $37));
      $2 = Math_fround($5 + Math_fround($3 + Math_fround($2 * $2)));
      $3 = Math_fround(Math_fround($15 * $40) - Math_fround($13 * $38));
      $5 = Math_fround($3 * $3);
      $3 = Math_fround(Math_fround($13 * $39) - Math_fround($6 * $40));
      $16 = Math_fround($3 * $3);
      $3 = Math_fround(Math_fround($6 * $38) - Math_fround($15 * $39));
      $3 = Math_fround($5 + Math_fround($16 + Math_fround($3 * $3)));
      $2 = $2 > $3 ? $2 : $3;
      $20 = Math_fround($32 - $24);
      $21 = Math_fround($29 - $25);
      $3 = Math_fround(Math_fround($20 * $34) - Math_fround($21 * $33));
      $5 = Math_fround($3 * $3);
      $16 = Math_fround($30 - $22);
      $3 = Math_fround(Math_fround($16 * $33) - Math_fround($20 * $8));
      $23 = Math_fround($3 * $3);
      $3 = Math_fround(Math_fround($21 * $8) - Math_fround($16 * $34));
      $3 = Math_fround($5 + Math_fround($23 + Math_fround($3 * $3)));
      $8 = $2 > $3 ? $2 : $3;
      $5 = Math_fround(0);
      if ($35) {
       break label$1;
      }
      $28 = Math_fround($30 - $7);
      $23 = Math_fround($32 - $12);
      $27 = Math_fround($29 - $11);
      $2 = Math_fround($17 - $7);
      $3 = Math_fround($19 - $12);
      $5 = Math_fround($4 - $11);
     }
     $4 = Math_fround($24 - $12);
     $12 = Math_fround($25 - $11);
     $11 = Math_fround(Math_fround($10 * $4) - Math_fround($26 * $12));
     $7 = Math_fround($22 - $7);
     $4 = Math_fround(Math_fround($26 * $7) - Math_fround($31 * $4));
     $17 = Math_fround($4 * $4);
     $4 = Math_fround(Math_fround($31 * $12) - Math_fround($10 * $7));
     $4 = Math_fround(Math_fround($11 * $11) + Math_fround($17 + Math_fround($4 * $4)));
     $7 = Math_fround(Math_fround($15 * $23) - Math_fround($13 * $27));
     $11 = Math_fround($7 * $7);
     $7 = Math_fround(Math_fround($13 * $28) - Math_fround($6 * $23));
     $12 = Math_fround($7 * $7);
     $7 = Math_fround(Math_fround($6 * $27) - Math_fround($15 * $28));
     $7 = Math_fround($11 + Math_fround($12 + Math_fround($7 * $7)));
     $4 = $4 > $7 ? $4 : $7;
     $7 = Math_fround(Math_fround($20 * $5) - Math_fround($21 * $3));
     $3 = Math_fround(Math_fround($16 * $3) - Math_fround($20 * $2));
     $2 = Math_fround(Math_fround($21 * $2) - Math_fround($16 * $5));
     $2 = Math_fround(Math_fround($7 * $7) + Math_fround(Math_fround($3 * $3) + Math_fround($2 * $2)));
     $5 = $4 > $2 ? $4 : $2;
     break label$1;
    }
    $4 = Math_fround($4 - HEAPF32[$0 + 4 >> 2]);
    $2 = Math_fround($2 - HEAPF32[$0 + 8 >> 2]);
    $7 = Math_fround(Math_fround($4 * $8) - Math_fround($2 * $9));
    $3 = Math_fround($3 - HEAPF32[$0 + 12 >> 2]);
    $8 = Math_fround(Math_fround($2 * $5) - Math_fround($3 * $8));
    $5 = Math_fround(Math_fround($3 * $9) - Math_fround($4 * $5));
    $9 = Math_fround(Math_fround($7 * $7) + Math_fround(Math_fround($8 * $8) + Math_fround($5 * $5)));
    $7 = HEAPF32[$0 + 220 >> 2];
    $12 = HEAPF32[$0 + 216 >> 2];
    $11 = HEAPF32[$0 + 212 >> 2];
    $8 = Math_fround(0);
    if (($18 | 0) == 2) {
     break label$2;
    }
   }
   $5 = Math_fround($15 - $12);
   $8 = Math_fround($22 - $11);
   $15 = Math_fround(Math_fround($4 * $5) - Math_fround($2 * $8));
   $13 = Math_fround($13 - $7);
   $5 = Math_fround(Math_fround($2 * $13) - Math_fround($3 * $5));
   $10 = Math_fround($5 * $5);
   $5 = Math_fround(Math_fround($3 * $8) - Math_fround($4 * $13));
   $8 = Math_fround(Math_fround($15 * $15) + Math_fround($10 + Math_fround($5 * $5)));
   $5 = Math_fround(0);
   if ($35) {
    break label$1;
   }
  }
  $5 = Math_fround($19 - $12);
  $12 = Math_fround($6 - $11);
  $11 = Math_fround(Math_fround($4 * $5) - Math_fround($2 * $12));
  $7 = Math_fround($17 - $7);
  $2 = Math_fround(Math_fround($2 * $7) - Math_fround($3 * $5));
  $4 = Math_fround(Math_fround($3 * $12) - Math_fround($4 * $7));
  $5 = Math_fround(Math_fround($11 * $11) + Math_fround(Math_fround($2 * $2) + Math_fround($4 * $4)));
 }
 $4 = Math_fround(Math_abs($14));
 $0 = $4 > Math_fround(-0xde0b6b000000000);
 $1 = $0 ? 0 : -1;
 $2 = Math_fround(Math_abs($9));
 $4 = $0 ? $4 : Math_fround(-0xde0b6b000000000);
 $0 = $2 > $4;
 $1 = $0 ? 1 : $1;
 $3 = Math_fround(Math_abs($8));
 $4 = $0 ? $2 : $4;
 $0 = $3 > $4;
 return Math_fround(Math_abs($5)) > ($0 ? $3 : $4) ? 3 : $0 ? 2 : $1;
}
function btManifoldResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 var $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0, $21 = 0, $22 = 0, $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = 0, $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = 0, $37 = 0;
 $4 = global$0 - 208 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 label$2 : {
  if (btPersistentManifold__getContactBreakingThreshold_28_29_20const(HEAP32[$0 + 4 >> 2]) < $3) {
   break label$2;
  }
  $10 = HEAPF32[$2 + 8 >> 2];
  $13 = Math_fround(Math_fround(HEAPF32[$1 + 8 >> 2] * $3) + $10);
  $8 = HEAPF32[$2 + 4 >> 2];
  $12 = Math_fround(Math_fround(HEAPF32[$1 + 4 >> 2] * $3) + $8);
  $7 = HEAPF32[$2 >> 2];
  $14 = Math_fround(Math_fround(HEAPF32[$1 >> 2] * $3) + $7);
  $11 = HEAP32[$0 + 4 >> 2];
  $26 = HEAP32[$11 + 844 >> 2];
  $16 = HEAP32[$11 + 836 >> 2];
  $22 = HEAP32[HEAP32[$0 + 8 >> 2] + 8 >> 2];
  $6 = ($16 | 0) == ($22 | 0);
  label$3 : {
   if (!$6) {
    $5 = HEAP32[HEAP32[$0 + 12 >> 2] + 8 >> 2];
    $15 = Math_fround($14 - HEAPF32[$5 + 52 >> 2]);
    $18 = Math_fround($12 - HEAPF32[$5 + 56 >> 2]);
    $19 = Math_fround($13 - HEAPF32[$5 + 60 >> 2]);
    $23 = Math_fround(Math_fround(Math_fround($15 * HEAPF32[$5 + 12 >> 2]) + Math_fround($18 * HEAPF32[$5 + 28 >> 2])) + Math_fround($19 * HEAPF32[$5 + 44 >> 2]));
    $24 = Math_fround(Math_fround(Math_fround($15 * HEAPF32[$5 + 4 >> 2]) + Math_fround($18 * HEAPF32[$5 + 20 >> 2])) + Math_fround($19 * HEAPF32[$5 + 36 >> 2]));
    $9 = $22;
    $25 = Math_fround(Math_fround(Math_fround($15 * HEAPF32[$5 + 8 >> 2]) + Math_fround($18 * HEAPF32[$5 + 24 >> 2])) + Math_fround($19 * HEAPF32[$5 + 40 >> 2]));
    break label$3;
   }
   $15 = Math_fround($14 - HEAPF32[$16 + 52 >> 2]);
   $18 = Math_fround($12 - HEAPF32[$16 + 56 >> 2]);
   $19 = Math_fround($13 - HEAPF32[$16 + 60 >> 2]);
   $23 = Math_fround(Math_fround(Math_fround($15 * HEAPF32[$16 + 12 >> 2]) + Math_fround($18 * HEAPF32[$16 + 28 >> 2])) + Math_fround($19 * HEAPF32[$16 + 44 >> 2]));
   $24 = Math_fround(Math_fround(Math_fround($15 * HEAPF32[$16 + 4 >> 2]) + Math_fround($18 * HEAPF32[$16 + 20 >> 2])) + Math_fround($19 * HEAPF32[$16 + 36 >> 2]));
   $9 = HEAP32[HEAP32[$0 + 12 >> 2] + 8 >> 2];
   $25 = Math_fround(Math_fround(Math_fround($15 * HEAPF32[$16 + 8 >> 2]) + Math_fround($18 * HEAPF32[$16 + 24 >> 2])) + Math_fround($19 * HEAPF32[$16 + 40 >> 2]));
  }
  $5 = $9;
  $15 = HEAPF32[$5 + 20 >> 2];
  $18 = HEAPF32[$5 + 36 >> 2];
  $19 = HEAPF32[$5 + 40 >> 2];
  $27 = HEAPF32[$5 + 8 >> 2];
  $28 = HEAPF32[$5 + 24 >> 2];
  $29 = HEAPF32[$5 + 44 >> 2];
  $30 = HEAPF32[$5 + 60 >> 2];
  $31 = HEAPF32[$5 + 12 >> 2];
  $32 = HEAPF32[$5 + 52 >> 2];
  $33 = HEAPF32[$5 + 28 >> 2];
  $34 = HEAPF32[$5 + 56 >> 2];
  $35 = HEAPF32[$5 + 4 >> 2];
  HEAP32[$4 + 28 >> 2] = 0;
  $7 = Math_fround($7 - $32);
  $8 = Math_fround($8 - $34);
  $10 = Math_fround($10 - $30);
  HEAPF32[$4 + 24 >> 2] = Math_fround(Math_fround($31 * $7) + Math_fround($33 * $8)) + Math_fround($29 * $10);
  HEAPF32[$4 + 20 >> 2] = Math_fround(Math_fround($7 * $27) + Math_fround($8 * $28)) + Math_fround($10 * $19);
  HEAP32[$4 + 12 >> 2] = 0;
  HEAPF32[$4 + 8 >> 2] = $23;
  HEAPF32[$4 + 4 >> 2] = $25;
  HEAPF32[$4 >> 2] = $24;
  HEAPF32[$4 + 16 >> 2] = Math_fround(Math_fround($7 * $35) + Math_fround($8 * $15)) + Math_fround($10 * $18);
  $5 = HEAP32[$1 + 12 >> 2];
  $9 = HEAP32[$1 + 8 >> 2];
  HEAP32[$4 + 72 >> 2] = $9;
  HEAP32[$4 + 76 >> 2] = $5;
  $5 = HEAP32[$1 >> 2];
  $9 = HEAP32[$1 + 4 >> 2];
  HEAP32[$4 + 92 >> 2] = 0;
  HEAP32[$4 + 96 >> 2] = 0;
  HEAP32[$4 + 124 >> 2] = 0;
  HEAP32[$4 + 128 >> 2] = 0;
  HEAP32[$4 + 132 >> 2] = 0;
  HEAP32[$4 + 136 >> 2] = 0;
  HEAP32[$4 + 140 >> 2] = 0;
  HEAP32[$4 + 144 >> 2] = 0;
  HEAP32[$4 + 148 >> 2] = 0;
  HEAP32[$4 + 152 >> 2] = 0;
  HEAP32[$4 + 156 >> 2] = 0;
  HEAP32[$4 + 160 >> 2] = 0;
  HEAP32[$4 + 164 >> 2] = 0;
  HEAPF32[$4 + 52 >> 2] = $12;
  HEAPF32[$4 + 56 >> 2] = $13;
  HEAP32[$4 + 60 >> 2] = 0;
  HEAP32[$4 + 64 >> 2] = $5;
  HEAP32[$4 + 68 >> 2] = $9;
  HEAP32[$4 + 84 >> 2] = 0;
  HEAP32[$4 + 88 >> 2] = 0;
  HEAPF32[$4 + 80 >> 2] = $3;
  HEAP32[$4 + 116 >> 2] = 0;
  HEAP32[$4 + 120 >> 2] = 0;
  HEAPF32[$4 + 48 >> 2] = $14;
  $5 = HEAP32[$2 + 12 >> 2];
  $9 = HEAP32[$2 + 8 >> 2];
  HEAP32[$4 + 40 >> 2] = $9;
  HEAP32[$4 + 44 >> 2] = $5;
  $9 = HEAP32[$2 + 4 >> 2];
  $5 = HEAP32[$2 >> 2];
  HEAP32[$4 + 32 >> 2] = $5;
  HEAP32[$4 + 36 >> 2] = $9;
  $2 = btPersistentManifold__getCacheEntry_28btManifoldPoint_20const__29_20const($11, $4);
  $1 = HEAP32[$0 + 12 >> 2];
  $5 = HEAP32[$1 + 8 >> 2];
  $11 = HEAP32[$0 + 8 >> 2];
  $9 = HEAP32[$11 + 8 >> 2];
  label$5 : {
   if (!$6) {
    HEAP32[$4 + 100 >> 2] = HEAP32[$0 + 20 >> 2];
    HEAP32[$4 + 104 >> 2] = HEAP32[$0 + 16 >> 2];
    $20 = HEAP32[$0 + 28 >> 2];
    HEAP32[$4 + 108 >> 2] = $20;
    $21 = HEAP32[$0 + 24 >> 2];
    HEAP32[$4 + 112 >> 2] = $21;
    $6 = HEAP32[$1 >> 2];
    $6 = HEAP32[($6 ? $6 : $1) + 4 >> 2];
    HEAP32[$4 + 200 >> 2] = $6;
    $1 = HEAP32[$11 >> 2];
    $11 = HEAP32[($1 ? $1 : $11) + 4 >> 2];
    $17 = $11;
    $1 = $9;
    $9 = $4 + 204 | 0;
    break label$5;
   }
   HEAP32[$4 + 100 >> 2] = HEAP32[$0 + 16 >> 2];
   HEAP32[$4 + 104 >> 2] = HEAP32[$0 + 20 >> 2];
   $20 = HEAP32[$0 + 24 >> 2];
   HEAP32[$4 + 108 >> 2] = $20;
   $21 = HEAP32[$0 + 28 >> 2];
   HEAP32[$4 + 112 >> 2] = $21;
   $6 = HEAP32[$1 >> 2];
   $17 = HEAP32[($6 ? $6 : $1) + 4 >> 2];
   HEAP32[$4 + 204 >> 2] = $17;
   $1 = HEAP32[$11 >> 2];
   $11 = HEAP32[($1 ? $1 : $11) + 4 >> 2];
   $6 = $11;
   $1 = $5;
   $5 = $9;
   $9 = $4 + 200 | 0;
  }
  HEAP32[$9 >> 2] = $11;
  $11 = HEAP32[$5 + 260 >> 2];
  $3 = HEAPF32[$5 + 240 >> 2];
  $7 = HEAPF32[$5 + 236 >> 2];
  $8 = HEAPF32[$5 + 232 >> 2];
  $10 = HEAPF32[$5 + 228 >> 2];
  $9 = HEAP32[$6 + 4 >> 2] + -21 | 0;
  label$7 : {
   if ($9 >>> 0 > 10) {
    break label$7;
   }
   label$8 : {
    switch ($9 - 1 | 0) {
    case 9:
     if (!HEAPU8[$6 + 180 | 0]) {
      break label$7;
     }
     $5 = $20 << 2;
     $11 = HEAP32[$5 + HEAP32[$6 + 172 >> 2] >> 2];
     $3 = HEAPF32[HEAP32[$6 + 152 >> 2] + $5 >> 2];
     $8 = HEAPF32[HEAP32[$6 + 132 >> 2] + $5 >> 2];
     $10 = HEAPF32[HEAP32[$6 + 92 >> 2] + $5 >> 2];
     $7 = HEAPF32[HEAP32[$6 + 112 >> 2] + $5 >> 2];
     break label$7;
    case 0:
    case 1:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
     break label$7;
    default:
     break label$8;
    }
   }
   $5 = HEAP32[$5 + 192 >> 2];
   if (HEAP32[$5 + 4 >> 2] != 31 | !HEAPU8[$5 + 180 | 0]) {
    break label$7;
   }
   $6 = HEAP32[$6 + 12 >> 2] << 2;
   $11 = HEAP32[$6 + HEAP32[$5 + 172 >> 2] >> 2];
   $3 = HEAPF32[HEAP32[$5 + 152 >> 2] + $6 >> 2];
   $8 = HEAPF32[HEAP32[$5 + 132 >> 2] + $6 >> 2];
   $10 = HEAPF32[HEAP32[$5 + 92 >> 2] + $6 >> 2];
   $7 = HEAPF32[HEAP32[$5 + 112 >> 2] + $6 >> 2];
  }
  $5 = HEAP32[$1 + 260 >> 2];
  $13 = HEAPF32[$1 + 240 >> 2];
  $12 = HEAPF32[$1 + 236 >> 2];
  $14 = HEAPF32[$1 + 232 >> 2];
  $15 = HEAPF32[$1 + 228 >> 2];
  $6 = HEAP32[$17 + 4 >> 2] + -21 | 0;
  label$10 : {
   if ($6 >>> 0 > 10) {
    break label$10;
   }
   label$11 : {
    switch ($6 - 1 | 0) {
    case 9:
     if (!HEAPU8[$17 + 180 | 0]) {
      break label$10;
     }
     $1 = $21 << 2;
     $5 = HEAP32[$1 + HEAP32[$17 + 172 >> 2] >> 2];
     $13 = HEAPF32[HEAP32[$17 + 152 >> 2] + $1 >> 2];
     $14 = HEAPF32[HEAP32[$17 + 132 >> 2] + $1 >> 2];
     $15 = HEAPF32[HEAP32[$17 + 92 >> 2] + $1 >> 2];
     $12 = HEAPF32[HEAP32[$17 + 112 >> 2] + $1 >> 2];
     break label$10;
    case 0:
    case 1:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
     break label$10;
    default:
     break label$11;
    }
   }
   $1 = HEAP32[$1 + 192 >> 2];
   if (HEAP32[$1 + 4 >> 2] != 31 | !HEAPU8[$1 + 180 | 0]) {
    break label$10;
   }
   $6 = HEAP32[$17 + 12 >> 2] << 2;
   $5 = HEAP32[$6 + HEAP32[$1 + 172 >> 2] >> 2];
   $13 = HEAPF32[HEAP32[$1 + 152 >> 2] + $6 >> 2];
   $14 = HEAPF32[HEAP32[$1 + 132 >> 2] + $6 >> 2];
   $15 = HEAPF32[HEAP32[$1 + 92 >> 2] + $6 >> 2];
   $12 = HEAPF32[HEAP32[$1 + 112 >> 2] + $6 >> 2];
  }
  $1 = $0 + 4 | 0;
  $9 = $4;
  $5 = ($11 | 0) > ($5 | 0) ? $11 : $5;
  label$13 : {
   if ($5 >>> 0 <= 2) {
    label$15 : {
     switch ($5 - 1 | 0) {
     default:
      HEAPF32[$4 + 96 >> 2] = Math_fround($8 + $14) * Math_fround(.5);
      HEAPF32[$4 + 84 >> 2] = Math_fround($10 + $15) * Math_fround(.5);
      HEAPF32[$4 + 88 >> 2] = Math_min(Math_fround(Math_max(Math_fround(Math_fround($7 + $12) * Math_fround(.5)), Math_fround(-10))), Math_fround(10));
      $3 = Math_fround(Math_fround($3 + $13) * Math_fround(.5));
      break label$13;
     case 0:
      HEAPF32[$4 + 96 >> 2] = $8 < $14 ? $8 : $14;
      HEAPF32[$4 + 84 >> 2] = $10 < $15 ? $10 : $15;
      HEAPF32[$4 + 88 >> 2] = Math_min(Math_fround(Math_max($7 < $12 ? $7 : $12, Math_fround(-10))), Math_fround(10));
      $3 = $3 < $13 ? $3 : $13;
      break label$13;
     case 1:
      break label$15;
     }
    }
    HEAPF32[$4 + 96 >> 2] = $8 * $14;
    HEAPF32[$4 + 84 >> 2] = $10 * $15;
    HEAPF32[$4 + 88 >> 2] = Math_min(Math_fround(Math_max(Math_fround($7 * $12), Math_fround(-10))), Math_fround(10));
    $3 = Math_fround($3 * $13);
    break label$13;
   }
   HEAPF32[$4 + 96 >> 2] = $8 > $14 ? $8 : $14;
   HEAPF32[$4 + 84 >> 2] = $10 > $15 ? $10 : $15;
   HEAPF32[$4 + 88 >> 2] = Math_min(Math_fround(Math_max($7 > $12 ? $7 : $12, Math_fround(-10))), Math_fround(10));
   $3 = $3 > $13 ? $3 : $13;
  }
  HEAPF32[$9 + 92 >> 2] = Math_min(Math_fround(Math_max($3, Math_fround(-10))), Math_fround(10));
  $3 = HEAPF32[$4 + 72 >> 2];
  label$18 : {
   if (!!(Math_fround(Math_abs($3)) > Math_fround(.7071067690849304))) {
    $13 = HEAPF32[$4 + 68 >> 2];
    $7 = Math_fround(Math_fround($3 * $3) + Math_fround($13 * $13));
    $12 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($7)));
    $7 = Math_fround($7 * $12);
    $14 = HEAPF32[$4 + 64 >> 2];
    $8 = Math_fround($12 * Math_fround(-$3));
    $10 = Math_fround($14 * $8);
    $3 = Math_fround($13 * $12);
    $13 = Math_fround($3 * Math_fround(-$14));
    $12 = Math_fround(0);
    break label$18;
   }
   $7 = HEAPF32[$4 + 64 >> 2];
   $8 = HEAPF32[$4 + 68 >> 2];
   $10 = Math_fround(Math_fround($7 * $7) + Math_fround($8 * $8));
   $14 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($10)));
   $10 = Math_fround($10 * $14);
   $12 = Math_fround($14 * Math_fround(-$8));
   $13 = Math_fround($3 * $12);
   $8 = Math_fround($7 * $14);
   $7 = Math_fround($8 * Math_fround(-$3));
   $3 = Math_fround(0);
  }
  HEAPF32[$4 + 192 >> 2] = $10;
  HEAPF32[$4 + 188 >> 2] = $13;
  HEAPF32[$4 + 176 >> 2] = $3;
  HEAPF32[$4 + 172 >> 2] = $8;
  HEAPF32[$4 + 184 >> 2] = $7;
  HEAPF32[$4 + 168 >> 2] = $12;
  $5 = HEAP32[$1 >> 2];
  label$20 : {
   if (($2 | 0) >= 0) {
    $5 = Math_imul($2, 208) + $5 | 0;
    $36 = $5;
    $17 = $5 + 144 | 0;
    $3 = HEAPF32[$17 >> 2];
    $17 = $5;
    $9 = $5 + 140 | 0;
    $7 = HEAPF32[$9 >> 2];
    $9 = $5;
    $8 = HEAPF32[$5 + 136 >> 2];
    $37 = $5;
    $11 = $5 + 168 | 0;
    $6 = HEAP32[$11 >> 2];
    label$22 : {
     if (HEAPU8[$4 + 128 | 0] & 16) {
      $10 = Math_fround(Math_fround($8 * HEAPF32[$5 + 88 >> 2]) + Math_fround(0));
      if (!(Math_fround(Math_fround($7 * $7) + Math_fround($3 * $3)) > Math_fround($10 * $10))) {
       break label$22;
      }
     }
     $20 = $5 + 120 | 0;
     $21 = HEAP32[$20 >> 2];
     memcpy($5 + 4 | 0, $4, 208);
     HEAP32[$5 + 120 >> 2] = $21;
     HEAPF32[$9 + 136 >> 2] = $8;
     HEAPF32[$17 + 140 >> 2] = $7;
     HEAPF32[$36 + 144 >> 2] = $3;
    }
    HEAP32[$37 + 168 >> 2] = $6;
    break label$20;
   }
   $2 = btPersistentManifold__addManifoldPoint_28btManifoldPoint_20const__2c_20bool_29($5, $4, 0);
  }
  $11 = HEAP32[5641];
  label$24 : {
   if (!$11) {
    break label$24;
   }
   $5 = $0 + 12 | 0;
   $0 = $0 + 8 | 0;
   if (HEAPU8[HEAP32[HEAP32[$5 >> 2] + 8 >> 2] + 204 | 0] & 8 ? 0 : !(HEAPU8[HEAP32[HEAP32[$0 >> 2] + 8 >> 2] + 204 | 0] & 8)) {
    break label$24;
   }
   $9 = (HEAP32[$1 >> 2] + Math_imul($2, 208) | 0) + 4 | 0;
   $2 = ($16 | 0) != ($22 | 0);
   FUNCTION_TABLE[$11]($9, HEAP32[($2 ? $5 : $0) >> 2], HEAP32[$4 + 100 >> 2], HEAP32[$4 + 108 >> 2], HEAP32[($2 ? $0 : $5) >> 2], HEAP32[$4 + 104 >> 2], HEAP32[$4 + 112 >> 2]) | 0;
  }
  if ($26) {
   break label$2;
  }
  $0 = HEAP32[5385];
  if (!$0) {
   break label$2;
  }
  FUNCTION_TABLE[$0]($1);
 }
 $0 = $4 + 208 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSubsimplexConvexCast__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0, $23 = Math_fround(0), $24 = Math_fround(0), $25 = 0, $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = Math_fround(0), $50 = Math_fround(0), $51 = Math_fround(0), $52 = 0;
 $6 = global$0 - 96 | 0;
 $14 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $14;
 btVoronoiSimplexSolver__reset_28_29(HEAP32[$0 + 4 >> 2]);
 $22 = $3 + 40 | 0;
 $42 = HEAPF32[$22 >> 2];
 $25 = $3 + 36 | 0;
 $43 = HEAPF32[$25 >> 2];
 $14 = $3 + 24 | 0;
 $44 = HEAPF32[$14 >> 2];
 $45 = HEAPF32[$3 + 20 >> 2];
 $33 = HEAPF32[$1 + 20 >> 2];
 $34 = HEAPF32[$1 + 36 >> 2];
 $35 = HEAPF32[$1 + 24 >> 2];
 $23 = HEAPF32[$1 + 52 >> 2];
 $9 = HEAPF32[$2 + 52 >> 2];
 $26 = HEAPF32[$3 + 52 >> 2];
 $7 = HEAPF32[$4 + 52 >> 2];
 $36 = HEAPF32[$1 + 40 >> 2];
 $27 = HEAPF32[$1 + 56 >> 2];
 $8 = HEAPF32[$2 + 56 >> 2];
 $28 = HEAPF32[$3 + 56 >> 2];
 $10 = HEAPF32[$4 + 56 >> 2];
 $46 = HEAPF32[$3 + 32 >> 2];
 $47 = HEAPF32[$3 + 16 >> 2];
 $48 = HEAPF32[$3 + 8 >> 2];
 $49 = HEAPF32[$3 + 4 >> 2];
 $50 = HEAPF32[$3 >> 2];
 $37 = HEAPF32[$1 >> 2];
 $38 = HEAPF32[$1 + 16 >> 2];
 $39 = HEAPF32[$1 + 32 >> 2];
 $40 = HEAPF32[$1 + 4 >> 2];
 $41 = HEAPF32[$1 + 8 >> 2];
 $29 = HEAPF32[$1 + 48 >> 2];
 $12 = HEAPF32[$2 + 48 >> 2];
 $30 = HEAPF32[$3 + 48 >> 2];
 $13 = HEAPF32[$4 + 48 >> 2];
 $14 = HEAP32[$0 + 8 >> 2];
 HEAP32[$6 + 60 >> 2] = 0;
 $24 = Math_fround(Math_fround($9 - $23) - Math_fround($7 - $26));
 $9 = Math_fround(-$24);
 $20 = Math_fround(Math_fround($12 - $29) - Math_fround($13 - $30));
 $21 = Math_fround(Math_fround($8 - $27) - Math_fround($10 - $28));
 HEAPF32[$6 + 56 >> 2] = Math_fround(Math_fround($35 * $9) - Math_fround($41 * $20)) - Math_fround($36 * $21);
 HEAPF32[$6 + 52 >> 2] = Math_fround(Math_fround($33 * $9) - Math_fround($20 * $40)) - Math_fround($21 * $34);
 HEAPF32[$6 + 48 >> 2] = Math_fround(Math_fround($38 * $9) - Math_fround($20 * $37)) - Math_fround($21 * $39);
 FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 64 >> 2]]($6 + 80 | 0, $14, $6 + 48 | 0);
 $10 = HEAPF32[$1 + 52 >> 2];
 $12 = HEAPF32[$1 + 24 >> 2];
 $13 = HEAPF32[$1 + 20 >> 2];
 $11 = HEAPF32[$1 + 56 >> 2];
 $16 = HEAPF32[$1 + 40 >> 2];
 $8 = HEAPF32[$1 + 36 >> 2];
 $15 = HEAPF32[$1 + 48 >> 2];
 $17 = HEAPF32[$1 + 8 >> 2];
 $18 = HEAPF32[$1 >> 2];
 $31 = HEAPF32[$1 + 4 >> 2];
 $32 = HEAPF32[$1 + 16 >> 2];
 $7 = HEAPF32[$1 + 32 >> 2];
 HEAP32[$6 + 76 >> 2] = 0;
 $9 = HEAPF32[$6 + 80 >> 2];
 $19 = Math_fround($7 * $9);
 $7 = HEAPF32[$6 + 84 >> 2];
 $19 = Math_fround($19 + Math_fround($8 * $7));
 $8 = HEAPF32[$6 + 88 >> 2];
 HEAPF32[$6 + 72 >> 2] = $11 + Math_fround($19 + Math_fround($16 * $8));
 HEAPF32[$6 + 68 >> 2] = $10 + Math_fround(Math_fround(Math_fround($9 * $32) + Math_fround($7 * $13)) + Math_fround($8 * $12));
 HEAPF32[$6 + 64 >> 2] = $15 + Math_fround(Math_fround(Math_fround($9 * $18) + Math_fround($7 * $31)) + Math_fround($8 * $17));
 $14 = HEAP32[$0 + 12 >> 2];
 $9 = HEAPF32[$3 + 20 >> 2];
 $7 = HEAPF32[$3 + 36 >> 2];
 $8 = HEAPF32[$3 + 24 >> 2];
 $10 = HEAPF32[$3 + 40 >> 2];
 $12 = HEAPF32[$3 >> 2];
 $13 = HEAPF32[$3 + 16 >> 2];
 $11 = HEAPF32[$3 + 32 >> 2];
 $16 = HEAPF32[$3 + 4 >> 2];
 $15 = HEAPF32[$3 + 8 >> 2];
 HEAP32[$6 + 28 >> 2] = 0;
 HEAPF32[$6 + 24 >> 2] = Math_fround(Math_fround($20 * $15) + Math_fround($24 * $8)) + Math_fround($21 * $10);
 HEAPF32[$6 + 20 >> 2] = Math_fround(Math_fround($20 * $16) + Math_fround($24 * $9)) + Math_fround($21 * $7);
 HEAPF32[$6 + 16 >> 2] = Math_fround(Math_fround($20 * $12) + Math_fround($24 * $13)) + Math_fround($21 * $11);
 FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 64 >> 2]]($6 + 32 | 0, $14, $6 + 16 | 0);
 $10 = HEAPF32[$3 + 52 >> 2];
 $12 = HEAPF32[$3 + 24 >> 2];
 $13 = HEAPF32[$3 + 20 >> 2];
 $11 = HEAPF32[$3 + 56 >> 2];
 $16 = HEAPF32[$3 + 40 >> 2];
 $8 = HEAPF32[$3 + 36 >> 2];
 $15 = HEAPF32[$3 + 16 >> 2];
 $17 = HEAPF32[$3 + 48 >> 2];
 $18 = HEAPF32[$3 + 8 >> 2];
 $31 = HEAPF32[$3 >> 2];
 $32 = HEAPF32[$3 + 4 >> 2];
 $7 = HEAPF32[$3 + 32 >> 2];
 HEAP32[$6 + 60 >> 2] = 0;
 HEAP32[$6 + 92 >> 2] = 0;
 $9 = HEAPF32[$6 + 32 >> 2];
 $19 = Math_fround($7 * $9);
 $7 = HEAPF32[$6 + 36 >> 2];
 $19 = Math_fround($19 + Math_fround($8 * $7));
 $8 = HEAPF32[$6 + 40 >> 2];
 $11 = Math_fround($11 + Math_fround($19 + Math_fround($16 * $8)));
 HEAPF32[$6 + 56 >> 2] = $11;
 $16 = Math_fround($17 + Math_fround(Math_fround(Math_fround($9 * $31) + Math_fround($7 * $32)) + Math_fround($8 * $18)));
 HEAPF32[$6 + 48 >> 2] = $16;
 $9 = Math_fround($10 + Math_fround(Math_fround(Math_fround($9 * $15) + Math_fround($7 * $13)) + Math_fround($8 * $12)));
 HEAPF32[$6 + 52 >> 2] = $9;
 $7 = Math_fround(HEAPF32[$6 + 68 >> 2] - $9);
 HEAPF32[$6 + 84 >> 2] = $7;
 $8 = Math_fround(HEAPF32[$6 + 64 >> 2] - $16);
 HEAPF32[$6 + 80 >> 2] = $8;
 $10 = Math_fround(HEAPF32[$6 + 72 >> 2] - $11);
 HEAPF32[$6 + 88 >> 2] = $10;
 $15 = Math_fround(0);
 $17 = Math_fround(0);
 $18 = Math_fround(0);
 $9 = Math_fround(0);
 label$2 : {
  label$3 : {
   if (!(Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($7 * $7)) + Math_fround($10 * $10)) > Math_fround(9999999747378752e-20))) {
    break label$3;
   }
   $25 = 32;
   while (1) {
    if (!$25) {
     break label$3;
    }
    $22 = HEAP32[$0 + 8 >> 2];
    $14 = 0;
    HEAP32[$6 + 12 >> 2] = 0;
    $7 = Math_fround(-HEAPF32[$6 + 84 >> 2]);
    $8 = HEAPF32[$6 + 80 >> 2];
    $10 = HEAPF32[$6 + 88 >> 2];
    HEAPF32[$6 + 8 >> 2] = Math_fround(Math_fround($35 * $7) - Math_fround($41 * $8)) - Math_fround($36 * $10);
    HEAPF32[$6 + 4 >> 2] = Math_fround(Math_fround($33 * $7) - Math_fround($40 * $8)) - Math_fround($34 * $10);
    HEAPF32[$6 >> 2] = Math_fround(Math_fround($38 * $7) - Math_fround($37 * $8)) - Math_fround($39 * $10);
    FUNCTION_TABLE[HEAP32[HEAP32[$22 >> 2] + 64 >> 2]]($6 + 16 | 0, $22, $6);
    HEAP32[$6 + 76 >> 2] = 0;
    $7 = HEAPF32[$6 + 16 >> 2];
    $8 = HEAPF32[$6 + 20 >> 2];
    $10 = HEAPF32[$6 + 24 >> 2];
    HEAPF32[$6 + 72 >> 2] = $27 + Math_fround(Math_fround(Math_fround($39 * $7) + Math_fround($34 * $8)) + Math_fround($36 * $10));
    HEAPF32[$6 + 68 >> 2] = $23 + Math_fround(Math_fround(Math_fround($38 * $7) + Math_fround($33 * $8)) + Math_fround($35 * $10));
    HEAPF32[$6 + 64 >> 2] = $29 + Math_fround(Math_fround(Math_fround($37 * $7) + Math_fround($40 * $8)) + Math_fround($41 * $10));
    $22 = HEAP32[$0 + 12 >> 2];
    HEAP32[$6 + 12 >> 2] = 0;
    $7 = HEAPF32[$6 + 80 >> 2];
    $8 = HEAPF32[$6 + 84 >> 2];
    $10 = HEAPF32[$6 + 88 >> 2];
    HEAPF32[$6 + 8 >> 2] = Math_fround(Math_fround($48 * $7) + Math_fround($44 * $8)) + Math_fround($42 * $10);
    HEAPF32[$6 + 4 >> 2] = Math_fround(Math_fround($49 * $7) + Math_fround($45 * $8)) + Math_fround($43 * $10);
    HEAPF32[$6 >> 2] = Math_fround(Math_fround($50 * $7) + Math_fround($47 * $8)) + Math_fround($46 * $10);
    FUNCTION_TABLE[HEAP32[HEAP32[$22 >> 2] + 64 >> 2]]($6 + 16 | 0, $22, $6);
    HEAP32[$6 + 60 >> 2] = 0;
    HEAP32[$6 + 44 >> 2] = 0;
    $7 = HEAPF32[$6 + 16 >> 2];
    $8 = HEAPF32[$6 + 20 >> 2];
    $10 = HEAPF32[$6 + 24 >> 2];
    $12 = Math_fround($28 + Math_fround(Math_fround(Math_fround($46 * $7) + Math_fround($43 * $8)) + Math_fround($42 * $10)));
    HEAPF32[$6 + 56 >> 2] = $12;
    $12 = Math_fround(HEAPF32[$6 + 72 >> 2] - $12);
    HEAPF32[$6 + 40 >> 2] = $12;
    $13 = Math_fround($26 + Math_fround(Math_fround(Math_fround($47 * $7) + Math_fround($45 * $8)) + Math_fround($44 * $10)));
    HEAPF32[$6 + 52 >> 2] = $13;
    $13 = Math_fround(HEAPF32[$6 + 68 >> 2] - $13);
    HEAPF32[$6 + 36 >> 2] = $13;
    $7 = Math_fround($30 + Math_fround(Math_fround(Math_fround($50 * $7) + Math_fround($49 * $8)) + Math_fround($48 * $10)));
    HEAPF32[$6 + 48 >> 2] = $7;
    $7 = Math_fround(HEAPF32[$6 + 64 >> 2] - $7);
    HEAPF32[$6 + 32 >> 2] = $7;
    if ($9 > Math_fround(1)) {
     break label$2;
    }
    $8 = HEAPF32[$6 + 80 >> 2];
    $10 = HEAPF32[$6 + 84 >> 2];
    $11 = HEAPF32[$6 + 88 >> 2];
    $16 = Math_fround(Math_fround(Math_fround($7 * $8) + Math_fround($13 * $10)) + Math_fround($12 * $11));
    if (!!($16 > Math_fround(0))) {
     $23 = Math_fround(Math_fround(Math_fround($20 * $8) + Math_fround($24 * $10)) + Math_fround($21 * $11));
     if ($23 >= Math_fround(-1.4210854715202004e-14)) {
      break label$2;
     }
     $29 = HEAPF32[$1 + 48 >> 2];
     $15 = HEAPF32[$2 + 48 >> 2];
     $17 = HEAPF32[$1 + 52 >> 2];
     $18 = HEAPF32[$2 + 52 >> 2];
     $27 = HEAPF32[$1 + 56 >> 2];
     $31 = HEAPF32[$2 + 56 >> 2];
     $30 = HEAPF32[$3 + 48 >> 2];
     $32 = HEAPF32[$4 + 48 >> 2];
     $26 = HEAPF32[$3 + 52 >> 2];
     $51 = HEAPF32[$4 + 52 >> 2];
     $28 = HEAPF32[$3 + 56 >> 2];
     $19 = HEAPF32[$4 + 56 >> 2];
     HEAP32[$6 + 44 >> 2] = 0;
     HEAPF32[$6 + 40 >> 2] = $12;
     HEAPF32[$6 + 36 >> 2] = $13;
     HEAPF32[$6 + 32 >> 2] = $7;
     $9 = Math_fround($9 - Math_fround($16 / $23));
     $7 = Math_fround(Math_fround(1) - $9);
     $28 = Math_fround(Math_fround($28 * $7) + Math_fround($9 * $19));
     $26 = Math_fround(Math_fround($7 * $26) + Math_fround($9 * $51));
     $30 = Math_fround(Math_fround($7 * $30) + Math_fround($9 * $32));
     $27 = Math_fround(Math_fround($7 * $27) + Math_fround($9 * $31));
     $23 = Math_fround(Math_fround($7 * $17) + Math_fround($9 * $18));
     $29 = Math_fround(Math_fround($7 * $29) + Math_fround($9 * $15));
     $52 = HEAP32[$6 + 92 >> 2];
     $17 = $10;
     $18 = $11;
     $15 = $8;
    }
    if (!btVoronoiSimplexSolver__inSimplex_28btVector3_20const__29(HEAP32[$0 + 4 >> 2], $6 + 32 | 0)) {
     btVoronoiSimplexSolver__addVertex_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29(HEAP32[$0 + 4 >> 2], $6 + 32 | 0, $6 - -64 | 0, $6 + 48 | 0);
    }
    if (!btVoronoiSimplexSolver__closest_28btVector3__29(HEAP32[$0 + 4 >> 2], $6 + 80 | 0)) {
     break label$3;
    }
    $25 = $25 + -1 | 0;
    $7 = HEAPF32[$6 + 80 >> 2];
    $11 = Math_fround($7 * $7);
    $7 = HEAPF32[$6 + 84 >> 2];
    $11 = Math_fround($11 + Math_fround($7 * $7));
    $7 = HEAPF32[$6 + 88 >> 2];
    if (Math_fround($11 + Math_fround($7 * $7)) > Math_fround(9999999747378752e-20)) {
     continue;
    }
    break;
   }
  }
  HEAPF32[$5 + 164 >> 2] = $9;
  $9 = Math_fround(Math_fround(Math_fround($15 * $15) + Math_fround($17 * $17)) + Math_fround($18 * $18));
  label$7 : {
   if (!!($9 >= Math_fround(1.4210854715202004e-14))) {
    HEAP32[$5 + 144 >> 2] = $52;
    $8 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($9)));
    $9 = Math_fround($18 * $8);
    HEAPF32[$5 + 140 >> 2] = $9;
    $7 = Math_fround($17 * $8);
    HEAPF32[$5 + 136 >> 2] = $7;
    $8 = Math_fround($15 * $8);
    HEAPF32[$5 + 132 >> 2] = $8;
    break label$7;
   }
   HEAP32[$5 + 132 >> 2] = 0;
   HEAP32[$5 + 136 >> 2] = 0;
   HEAP32[$5 + 140 >> 2] = 0;
   HEAP32[$5 + 144 >> 2] = 0;
   $9 = Math_fround(0);
   $7 = Math_fround(0);
   $8 = Math_fround(0);
  }
  $14 = 0;
  if (Math_fround(Math_fround(Math_fround($20 * $8) + Math_fround($24 * $7)) + Math_fround($21 * $9)) >= Math_fround(-HEAPF32[$5 + 172 >> 2])) {
   break label$2;
  }
  btVoronoiSimplexSolver__compute_points_28btVector3__2c_20btVector3__29(HEAP32[$0 + 4 >> 2], $6 + 16 | 0, $6);
  $0 = HEAP32[$6 + 12 >> 2];
  $1 = HEAP32[$6 + 8 >> 2];
  HEAP32[$5 + 156 >> 2] = $1;
  HEAP32[$5 + 160 >> 2] = $0;
  $1 = HEAP32[$6 + 4 >> 2];
  $0 = HEAP32[$6 >> 2];
  HEAP32[$5 + 148 >> 2] = $0;
  HEAP32[$5 + 152 >> 2] = $1;
  $14 = 1;
 }
 $0 = $6 + 96 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $14 | 0;
}
function btConvexPolyhedron__initialize_28_29($0) {
 var $1 = 0, $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = 0, $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0);
 $4 = global$0 - 96 | 0;
 $17 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $17;
 HEAP8[$4 + 52 | 0] = 1;
 HEAP32[$4 + 48 >> 2] = 0;
 HEAP8[$4 + 72 | 0] = 1;
 HEAP32[$4 + 40 >> 2] = 0;
 HEAP32[$4 + 44 >> 2] = 0;
 HEAP32[$4 + 68 >> 2] = 0;
 HEAP8[$4 + 92 | 0] = 1;
 HEAP32[$4 + 60 >> 2] = 0;
 HEAP32[$4 + 64 >> 2] = 0;
 HEAP32[$4 + 88 >> 2] = 0;
 HEAP32[$4 + 80 >> 2] = 0;
 HEAP32[$4 + 84 >> 2] = 0;
 HEAP32[$4 + 28 >> 2] = 0;
 HEAP8[$4 + 32 | 0] = 1;
 HEAP32[$4 + 20 >> 2] = 0;
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP32[$0 + 72 >> 2] = 0;
 HEAP32[$0 + 76 >> 2] = 0;
 HEAP32[$0 + 64 >> 2] = 0;
 HEAP32[$0 + 68 >> 2] = 0;
 $11 = HEAP32[$0 + 28 >> 2];
 label$2 : {
  if (($11 | 0) < 1) {
   break label$2;
  }
  while (1) {
   $1 = HEAP32[$0 + 36 >> 2];
   $24 = Math_imul($18, 36);
   $22 = HEAP32[($1 + $24 | 0) + 4 >> 2];
   if (($22 | 0) >= 1) {
    $15 = 0;
    while (1) {
     $3 = HEAP32[($1 + $24 | 0) + 12 >> 2];
     $1 = HEAP32[$3 + ($15 << 2) >> 2];
     $15 = $15 + 1 | 0;
     $25 = ($22 | 0) == ($15 | 0);
     $3 = HEAP32[(($25 ? 0 : $15) << 2) + $3 >> 2];
     HEAP16[$4 + 10 >> 1] = $3;
     HEAP16[$4 + 8 >> 1] = $1;
     $23 = 0;
     $13 = $3 << 16 >> 16;
     $5 = $1 << 16 >> 16;
     if (($13 | 0) > ($5 | 0)) {
      HEAP16[$4 + 10 >> 1] = $1;
      HEAP16[$4 + 8 >> 1] = $3;
      $13 = $1;
      $5 = $3;
     }
     $11 = $5 << 16 >> 16;
     $17 = $13 << 16;
     $1 = $11 + $17 & HEAP32[$4 + 64 >> 2] + -1;
     label$7 : {
      if ($1 >>> 0 >= HEAPU32[$4 + 20 >> 2]) {
       break label$7;
      }
      $1 = HEAP32[HEAP32[$4 + 28 >> 2] + ($1 << 2) >> 2];
      if (($1 | 0) == -1) {
       break label$7;
      }
      $14 = HEAP32[$4 + 48 >> 2];
      $8 = HEAP32[$4 + 88 >> 2];
      while (1) {
       $1 = $1 << 2;
       $3 = $8 + $1 | 0;
       if (!(HEAPU16[$3 + 2 >> 1] == ($13 & 65535) ? HEAPU16[$3 >> 1] == ($5 & 65535) : 0)) {
        $1 = HEAP32[$1 + $14 >> 2];
        if (($1 | 0) != -1) {
         continue;
        }
        break label$7;
       }
       break;
      }
      $23 = HEAP32[$4 + 68 >> 2] + $1 | 0;
     }
     $3 = HEAP32[$0 + 16 >> 2];
     $1 = $3 + ($17 >> 16 << 4) | 0;
     $3 = ($11 << 4) + $3 | 0;
     $2 = Math_fround(HEAPF32[$1 + 8 >> 2] - HEAPF32[$3 + 8 >> 2]);
     $16 = $2;
     $7 = Math_fround(HEAPF32[$1 >> 2] - HEAPF32[$3 >> 2]);
     $6 = Math_fround(HEAPF32[$1 + 4 >> 2] - HEAPF32[$3 + 4 >> 2]);
     $2 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($6 * $6)) + Math_fround($2 * $2)))));
     $12 = Math_fround($16 * $2);
     $9 = Math_fround($6 * $2);
     $2 = Math_fround($7 * $2);
     $5 = HEAP32[$0 + 48 >> 2];
     label$11 : {
      if (($5 | 0) >= 1) {
       $8 = HEAP32[$0 + 56 >> 2];
       $1 = 0;
       while (1) {
        $3 = ($1 << 4) + $8 | 0;
        $10 = HEAPF32[$3 + 8 >> 2];
        $6 = HEAPF32[$3 >> 2];
        $7 = HEAPF32[$3 + 4 >> 2];
        if ((+Math_fround(Math_abs(Math_fround($10 - $12))) > 1e-6 ^ 1 ? !(+Math_fround(Math_abs(Math_fround($6 - $2))) > 1e-6 | +Math_fround(Math_abs(Math_fround($7 - $9))) > 1e-6) : 0) | (+Math_fround(Math_abs(Math_fround($12 + $10))) > 1e-6 ^ 1 ? !(+Math_fround(Math_abs(Math_fround($2 + $6))) > 1e-6 | +Math_fround(Math_abs(Math_fround($9 + $7))) > 1e-6) : 0)) {
         break label$11;
        }
        $1 = $1 + 1 | 0;
        if (($1 | 0) < ($5 | 0)) {
         continue;
        }
        break;
       }
      }
      label$16 : {
       if (HEAP32[$0 + 52 >> 2] != ($5 | 0)) {
        break label$16;
       }
       $13 = $5 ? $5 << 1 : 1;
       if (($5 | 0) >= ($13 | 0)) {
        break label$16;
       }
       $1 = 0;
       $14 = 0;
       if ($13) {
        $14 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($13 << 4, 16);
        $5 = HEAP32[$0 + 48 >> 2];
       }
       if (($5 | 0) >= 1) {
        while (1) {
         $3 = $1 << 4;
         $8 = $14 + $3 | 0;
         $3 = HEAP32[$0 + 56 >> 2] + $3 | 0;
         $11 = HEAP32[$3 >> 2];
         $17 = HEAP32[$3 + 4 >> 2];
         HEAP32[$8 >> 2] = $11;
         HEAP32[$8 + 4 >> 2] = $17;
         $11 = HEAP32[$3 + 12 >> 2];
         $17 = HEAP32[$3 + 8 >> 2];
         HEAP32[$8 + 8 >> 2] = $17;
         HEAP32[$8 + 12 >> 2] = $11;
         $1 = $1 + 1 | 0;
         if (($5 | 0) != ($1 | 0)) {
          continue;
         }
         break;
        }
       }
       $1 = HEAP32[$0 + 56 >> 2];
       if ($1) {
        if (HEAPU8[$0 + 60 | 0]) {
         btAlignedFreeInternal_28void__29($1);
        }
        HEAP32[$0 + 56 >> 2] = 0;
       }
       HEAP32[$0 + 56 >> 2] = $14;
       HEAP8[$0 + 60 | 0] = 1;
       HEAP32[$0 + 52 >> 2] = $13;
       $5 = HEAP32[$0 + 48 >> 2];
      }
      $1 = HEAP32[$0 + 56 >> 2] + ($5 << 4) | 0;
      HEAP32[$1 + 12 >> 2] = 0;
      HEAPF32[$1 + 8 >> 2] = $12;
      HEAPF32[$1 + 4 >> 2] = $9;
      HEAPF32[$1 >> 2] = $2;
      HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 48 >> 2] + 1;
     }
     label$23 : {
      if ($23) {
       HEAP16[$23 + 2 >> 1] = $18;
       break label$23;
      }
      HEAP16[$4 >> 1] = $18;
      HEAP16[$4 + 2 >> 1] = 65535;
      btHashMap_btInternalVertexPair_2c_20btInternalEdge___insert_28btInternalVertexPair_20const__2c_20btInternalEdge_20const__29($4 + 16 | 0, $4 + 8 | 0, $4);
     }
     if (!$25) {
      $1 = HEAP32[$0 + 36 >> 2];
      continue;
     }
     break;
    }
    $11 = HEAP32[$0 + 28 >> 2];
   }
   $18 = $18 + 1 | 0;
   if (($18 | 0) < ($11 | 0)) {
    continue;
   }
   break;
  }
  $22 = 0;
  if (($11 | 0) < 1) {
   break label$2;
  }
  $22 = ($11 | 0) > 0;
  $8 = HEAP32[$0 + 16 >> 2];
  $24 = HEAP32[$0 + 36 >> 2];
  $18 = 0;
  while (1) {
   $1 = Math_imul($18, 36) + $24 | 0;
   $13 = HEAP32[$1 + 4 >> 2];
   if (($13 | 0) >= 3) {
    $23 = $13 + -1 | 0;
    $14 = HEAP32[$1 + 12 >> 2];
    $15 = (HEAP32[$14 >> 2] << 4) + $8 | 0;
    $17 = $15;
    $25 = $15;
    $10 = HEAPF32[$0 + 72 >> 2];
    $9 = HEAPF32[$0 + 68 >> 2];
    $12 = HEAPF32[$0 + 64 >> 2];
    $1 = 1;
    while (1) {
     $2 = HEAPF32[$17 + 8 >> 2];
     $3 = (HEAP32[($1 << 2) + $14 >> 2] << 4) + $8 | 0;
     $16 = HEAPF32[$3 + 8 >> 2];
     $1 = $1 + 1 | 0;
     $5 = (HEAP32[(($1 | 0) % ($13 | 0) << 2) + $14 >> 2] << 4) + $8 | 0;
     $19 = HEAPF32[$5 + 8 >> 2];
     $34 = Math_fround(Math_fround(Math_fround($2 + $16) + $19) * Math_fround(.3333333432674408));
     $7 = HEAPF32[$15 >> 2];
     $21 = HEAPF32[$3 >> 2];
     $26 = Math_fround($7 - $21);
     $6 = HEAPF32[$25 + 4 >> 2];
     $27 = HEAPF32[$5 + 4 >> 2];
     $28 = Math_fround($6 - $27);
     $29 = HEAPF32[$3 + 4 >> 2];
     $30 = Math_fround($6 - $29);
     $31 = HEAPF32[$5 >> 2];
     $32 = Math_fround($7 - $31);
     $33 = Math_fround(Math_fround($26 * $28) - Math_fround($30 * $32));
     $19 = Math_fround($2 - $19);
     $2 = Math_fround($2 - $16);
     $16 = Math_fround(Math_fround($30 * $19) - Math_fround($2 * $28));
     $2 = Math_fround(Math_fround($2 * $32) - Math_fround($26 * $19));
     $2 = Math_fround(Math_fround(Math_sqrt(Math_fround(Math_fround($33 * $33) + Math_fround(Math_fround($16 * $16) + Math_fround($2 * $2))))) * Math_fround(.5));
     $10 = Math_fround($10 + Math_fround($34 * $2));
     HEAPF32[$0 + 72 >> 2] = $10;
     $9 = Math_fround($9 + Math_fround(Math_fround(Math_fround($27 + Math_fround($6 + $29)) * Math_fround(.3333333432674408)) * $2));
     HEAPF32[$0 + 68 >> 2] = $9;
     $12 = Math_fround($12 + Math_fround(Math_fround(Math_fround($31 + Math_fround($7 + $21)) * Math_fround(.3333333432674408)) * $2));
     HEAPF32[$0 + 64 >> 2] = $12;
     $20 = Math_fround($20 + $2);
     if (($1 | 0) != ($23 | 0)) {
      continue;
     }
     break;
    }
   }
   $18 = $18 + 1 | 0;
   if (($18 | 0) != ($11 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 96 >> 2] = 2139095039;
 $2 = Math_fround(Math_fround(1) / $20);
 $6 = Math_fround($2 * HEAPF32[$0 + 64 >> 2]);
 HEAPF32[$0 + 64 >> 2] = $6;
 $10 = Math_fround($2 * HEAPF32[$0 + 68 >> 2]);
 HEAPF32[$0 + 68 >> 2] = $10;
 $9 = Math_fround($2 * HEAPF32[$0 + 72 >> 2]);
 HEAPF32[$0 + 72 >> 2] = $9;
 $7 = Math_fround(3.4028234663852886e+38);
 $16 = Math_fround(3.4028234663852886e+38);
 if ($22) {
  $5 = HEAP32[$0 + 36 >> 2];
  $3 = 0;
  while (1) {
   $1 = Math_imul($3, 36) + $5 | 0;
   $2 = Math_fround(Math_abs(Math_fround(HEAPF32[$1 + 32 >> 2] + Math_fround(Math_fround(Math_fround($6 * HEAPF32[$1 + 20 >> 2]) + Math_fround($10 * HEAPF32[$1 + 24 >> 2])) + Math_fround($9 * HEAPF32[$1 + 28 >> 2])))));
   if (!!($2 < $16)) {
    HEAPF32[$0 + 96 >> 2] = $2;
    $16 = $2;
   }
   $3 = $3 + 1 | 0;
   if (($11 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 $5 = HEAP32[$0 + 8 >> 2];
 label$32 : {
  if (($5 | 0) < 1) {
   $6 = Math_fround(-3.4028234663852886e+38);
   $10 = Math_fround(3.4028234663852886e+38);
   $9 = Math_fround(3.4028234663852886e+38);
   $12 = Math_fround(-3.4028234663852886e+38);
   $20 = Math_fround(-3.4028234663852886e+38);
   break label$32;
  }
  $8 = HEAP32[$0 + 16 >> 2];
  $9 = Math_fround(3.4028234663852886e+38);
  $20 = Math_fround(-3.4028234663852886e+38);
  $1 = 0;
  $12 = Math_fround(-3.4028234663852886e+38);
  $6 = Math_fround(-3.4028234663852886e+38);
  $10 = Math_fround(3.4028234663852886e+38);
  while (1) {
   $3 = ($1 << 4) + $8 | 0;
   $2 = HEAPF32[$3 + 8 >> 2];
   $20 = $2 > $20 ? $2 : $20;
   $9 = $2 < $9 ? $2 : $9;
   $2 = HEAPF32[$3 + 4 >> 2];
   $12 = $2 > $12 ? $2 : $12;
   $10 = $2 < $10 ? $2 : $10;
   $2 = HEAPF32[$3 >> 2];
   $6 = $2 > $6 ? $2 : $6;
   $7 = $2 < $7 ? $2 : $7;
   $1 = $1 + 1 | 0;
   if (($1 | 0) < ($5 | 0)) {
    continue;
   }
   break;
  }
 }
 $1 = 0;
 HEAP32[$0 + 128 >> 2] = 0;
 $2 = Math_fround($20 - $9);
 HEAPF32[$0 + 124 >> 2] = $2;
 $19 = Math_fround($12 - $10);
 HEAPF32[$0 + 120 >> 2] = $19;
 $21 = Math_fround($6 - $7);
 HEAPF32[$0 + 116 >> 2] = $21;
 HEAP32[$0 + 112 >> 2] = 0;
 HEAPF32[$0 + 108 >> 2] = $9 + $20;
 HEAPF32[$0 + 104 >> 2] = $10 + $12;
 HEAPF32[$0 + 100 >> 2] = $7 + $6;
 $8 = $21 < $19 ? $19 < $2 ? 2 : 1 : ($21 < $2) << 1;
 $3 = $8 << 2;
 $5 = $3 + ($0 + 116 | 0) | 0;
 $7 = HEAPF32[$5 >> 2];
 $6 = Math_fround($16 / Math_fround(1.7320507764816284));
 HEAPF32[$0 + 84 >> 2] = $6;
 HEAPF32[$0 + 88 >> 2] = $6;
 HEAPF32[$0 + 80 >> 2] = $6;
 $3 = ($0 + 80 | 0) + $3 | 0;
 $2 = Math_fround(HEAPF32[$5 >> 2] * Math_fround(.5));
 HEAPF32[$3 >> 2] = $2;
 $7 = Math_fround(Math_fround(Math_fround($7 * Math_fround(.5)) - $6) * Math_fround(.0009765625));
 label$35 : {
  label$36 : {
   while (1) {
    if (btConvexPolyhedron__testContainment_28_29_20const($0)) {
     break label$36;
    }
    $2 = Math_fround($2 - $7);
    HEAPF32[$3 >> 2] = $2;
    $1 = $1 + 1 | 0;
    if (($1 | 0) != 1024) {
     continue;
    }
    break;
   }
   HEAPF32[$0 + 84 >> 2] = $6;
   HEAPF32[$0 + 88 >> 2] = $6;
   HEAPF32[$0 + 80 >> 2] = $6;
   break label$35;
  }
  $3 = $0 + 80 | 0;
  $5 = 1 << $8 & 3;
  $1 = $3 + ((1 << $5 & 3) << 2) | 0;
  $14 = HEAP32[$1 >> 2];
  $3 = ($5 << 2) + $3 | 0;
  $8 = HEAP32[$3 >> 2];
  $2 = Math_fround(Math_fround(HEAPF32[$0 + 96 >> 2] - $6) * Math_fround(.0009765625));
  HEAPF32[$3 >> 2] = $2 + HEAPF32[$3 >> 2];
  $7 = Math_fround($2 + HEAPF32[$1 >> 2]);
  HEAPF32[$1 >> 2] = $7;
  if (btConvexPolyhedron__testContainment_28_29_20const($0)) {
   $5 = 0;
   while (1) {
    $6 = $7;
    $5 = $5 + 1 | 0;
    if (($5 | 0) == 1024) {
     break label$35;
    }
    $8 = HEAP32[$3 >> 2];
    HEAPF32[$3 >> 2] = $2 + HEAPF32[$3 >> 2];
    $7 = Math_fround($2 + HEAPF32[$1 >> 2]);
    HEAPF32[$1 >> 2] = $7;
    if (btConvexPolyhedron__testContainment_28_29_20const($0)) {
     continue;
    }
    break;
   }
   $14 = (wasm2js_scratch_store_f32($6), wasm2js_scratch_load_i32(0));
  }
  HEAP32[$3 >> 2] = $8;
  HEAP32[$1 >> 2] = $14;
 }
 btHashMap_btInternalVertexPair_2c_20btInternalEdge____btHashMap_28_29($4 + 16 | 0);
 $0 = $4 + 96 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function gjkepa2_impl__EPA__Evaluate_28gjkepa2_impl__GJK__2c_20btVector3_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = Math_fround(0), $25 = Math_fround(0);
 $17 = global$0 - 16 | 0;
 $3 = $17;
 if ($17 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 label$2 : {
  label$3 : {
   $10 = HEAP32[$1 + 372 >> 2];
   if (HEAPU32[$10 + 32 >> 2] < 2) {
    break label$3;
   }
   if (!gjkepa2_impl__GJK__EncloseOrigin_28_29($1)) {
    break label$3;
   }
   $3 = HEAP32[$0 + 18496 >> 2];
   if ($3) {
    $4 = HEAP32[$0 + 18508 >> 2];
    $8 = HEAP32[$0 + 18500 >> 2];
    while (1) {
     $7 = HEAP32[$3 + 48 >> 2];
     if ($7) {
      HEAP32[$7 + 44 >> 2] = HEAP32[$3 + 44 >> 2];
     }
     $7 = HEAP32[$3 + 44 >> 2];
     if ($7) {
      HEAP32[$7 + 48 >> 2] = HEAP32[$3 + 48 >> 2];
     }
     if (HEAP32[$0 + 18496 >> 2] == ($3 | 0)) {
      HEAP32[$0 + 18496 >> 2] = HEAP32[$3 + 48 >> 2];
     }
     HEAP32[$3 + 44 >> 2] = 0;
     HEAP32[$3 + 48 >> 2] = HEAP32[$0 + 18504 >> 2];
     $7 = HEAP32[$0 + 18504 >> 2];
     if ($7) {
      HEAP32[$7 + 44 >> 2] = $3;
     }
     $8 = $8 + -1 | 0;
     HEAP32[$0 + 18504 >> 2] = $3;
     $4 = $4 + 1 | 0;
     $3 = HEAP32[$0 + 18496 >> 2];
     if ($3) {
      continue;
     }
     break;
    }
    HEAP32[$0 + 18508 >> 2] = $4;
    HEAP32[$0 + 18500 >> 2] = $8;
   }
   HEAP32[$0 + 18492 >> 2] = 0;
   HEAP32[$0 >> 2] = 0;
   $4 = HEAP32[$10 >> 2];
   $7 = HEAP32[$10 + 12 >> 2];
   $5 = HEAPF32[$7 + 16 >> 2];
   $13 = Math_fround(HEAPF32[$4 + 16 >> 2] - $5);
   $3 = HEAP32[$10 + 4 >> 2];
   $6 = HEAPF32[$7 + 20 >> 2];
   $11 = Math_fround(HEAPF32[$3 + 20 >> 2] - $6);
   $8 = HEAP32[$10 + 8 >> 2];
   $9 = HEAPF32[$7 + 24 >> 2];
   $12 = Math_fround(HEAPF32[$8 + 24 >> 2] - $9);
   $14 = Math_fround(HEAPF32[$4 + 20 >> 2] - $6);
   $15 = Math_fround(HEAPF32[$3 + 24 >> 2] - $9);
   $16 = Math_fround(HEAPF32[$8 + 16 >> 2] - $5);
   $9 = Math_fround(HEAPF32[$4 + 24 >> 2] - $9);
   $5 = Math_fround(HEAPF32[$3 + 16 >> 2] - $5);
   $6 = Math_fround(HEAPF32[$8 + 20 >> 2] - $6);
   label$10 : {
    if (!(Math_fround(Math_fround(Math_fround(Math_fround($13 * $11) * $12) + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($14 * $15) * $16) + Math_fround(Math_fround($9 * $5) * $6)) - Math_fround(Math_fround($13 * $15) * $6)) - Math_fround(Math_fround($14 * $5) * $12))) - Math_fround(Math_fround($9 * $11) * $16)) < Math_fround(0))) {
     $7 = $3;
     $3 = $4;
     break label$10;
    }
    HEAP32[$10 + 4 >> 2] = $4;
    HEAP32[$10 >> 2] = $3;
    $7 = HEAP32[$10 + 16 >> 2];
    $18 = $10 + 20 | 0;
    HEAP32[$10 + 16 >> 2] = HEAP32[$18 >> 2];
    HEAP32[$10 + 20 >> 2] = $7;
    $7 = $4;
   }
   $7 = gjkepa2_impl__EPA__newface_28gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20bool_29($0, $3, $7, $8, 1);
   $19 = gjkepa2_impl__EPA__newface_28gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20bool_29($0, HEAP32[$10 + 4 >> 2], HEAP32[$10 >> 2], HEAP32[$10 + 12 >> 2], 1);
   $20 = gjkepa2_impl__EPA__newface_28gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20bool_29($0, HEAP32[$10 + 8 >> 2], HEAP32[$10 + 4 >> 2], HEAP32[$10 + 12 >> 2], 1);
   $21 = gjkepa2_impl__EPA__newface_28gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20bool_29($0, HEAP32[$10 >> 2], HEAP32[$10 + 8 >> 2], HEAP32[$10 + 12 >> 2], 1);
   if (HEAP32[$0 + 18500 >> 2] != 4) {
    break label$3;
   }
   $4 = HEAP32[$0 + 18496 >> 2];
   $5 = HEAPF32[$4 + 16 >> 2];
   $3 = HEAP32[$4 + 48 >> 2];
   if ($3) {
    $5 = Math_fround($5 * $5);
    while (1) {
     $6 = HEAPF32[$3 + 16 >> 2];
     $6 = Math_fround($6 * $6);
     $8 = $6 < $5;
     $4 = $8 ? $3 : $4;
     $5 = $8 ? $6 : $5;
     $3 = HEAP32[$3 + 48 >> 2];
     if ($3) {
      continue;
     }
     break;
    }
    $5 = HEAPF32[$4 + 16 >> 2];
   }
   $18 = HEAP32[$4 + 28 >> 2];
   $22 = HEAP32[$4 + 24 >> 2];
   $23 = HEAP32[$4 + 20 >> 2];
   $11 = HEAPF32[$4 + 12 >> 2];
   $6 = HEAPF32[$4 + 8 >> 2];
   $9 = HEAPF32[$4 + 4 >> 2];
   $13 = HEAPF32[$4 >> 2];
   HEAP32[$7 + 32 >> 2] = $19;
   HEAP8[$7 + 52 | 0] = 0;
   HEAP32[$19 + 32 >> 2] = $7;
   HEAP8[$19 + 52 | 0] = 0;
   HEAP32[$7 + 36 >> 2] = $20;
   HEAP8[$7 + 53 | 0] = 0;
   HEAP32[$20 + 32 >> 2] = $7;
   HEAP8[$20 + 52 | 0] = 1;
   HEAP32[$7 + 40 >> 2] = $21;
   HEAP8[$7 + 54 | 0] = 0;
   HEAP32[$21 + 32 >> 2] = $7;
   HEAP8[$21 + 52 | 0] = 2;
   HEAP32[$19 + 36 >> 2] = $21;
   HEAP8[$19 + 53 | 0] = 2;
   HEAP32[$21 + 40 >> 2] = $19;
   HEAP8[$21 + 54 | 0] = 1;
   HEAP32[$19 + 40 >> 2] = $20;
   HEAP8[$19 + 54 | 0] = 1;
   HEAP32[$20 + 36 >> 2] = $19;
   HEAP8[$20 + 53 | 0] = 258;
   HEAP8[$20 + 54 | 0] = 1;
   HEAP32[$20 + 40 >> 2] = $21;
   HEAP32[$21 + 36 >> 2] = $20;
   HEAP8[$21 + 53 | 0] = 2;
   HEAP32[$0 >> 2] = 0;
   $7 = 0;
   while (1) {
    label$15 : {
     label$16 : {
      $8 = HEAP32[$0 + 18492 >> 2];
      if ($8 >>> 0 <= 127) {
       $3 = 0;
       HEAP32[$17 + 8 >> 2] = 0;
       HEAP32[$17 >> 2] = 0;
       HEAP32[$17 + 4 >> 2] = 0;
       HEAP32[$0 + 18492 >> 2] = $8 + 1;
       $7 = $7 + 1 | 0;
       HEAP8[$4 + 55 | 0] = $7;
       $8 = ($8 << 5) + $0 | 0;
       $10 = $8 + 60 | 0;
       gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($1, $4, $10);
       if (!(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$4 >> 2] * HEAPF32[$8 + 76 >> 2]) + Math_fround(HEAPF32[$4 + 4 >> 2] * HEAPF32[$8 + 80 >> 2])) + Math_fround(HEAPF32[$4 + 8 >> 2] * HEAPF32[$8 + 84 >> 2])) - HEAPF32[$4 + 16 >> 2]) > Math_fround(9999999747378752e-20))) {
        HEAP32[$0 >> 2] = 7;
        break label$15;
       }
       while (1) {
        $2 = gjkepa2_impl__EPA__expand_28unsigned_20int_2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__EPA__sFace__2c_20unsigned_20int_2c_20gjkepa2_impl__EPA__sHorizon__29($0, $7, $10, HEAP32[(($3 << 2) + $4 | 0) + 32 >> 2], HEAPU8[($4 + $3 | 0) + 52 | 0], $17);
        if (!$2) {
         break label$16;
        }
        $8 = $3 >>> 0 < 2;
        $3 = $3 + 1 | 0;
        if ($8) {
         continue;
        }
        break;
       }
       break label$16;
      }
      HEAP32[$0 >> 2] = 6;
      break label$15;
     }
     if (!(HEAPU32[$17 + 8 >> 2] > 2 & $2)) {
      HEAP32[$0 >> 2] = 4;
      break label$15;
     }
     $3 = HEAP32[$17 >> 2];
     $8 = HEAP32[$17 + 4 >> 2];
     HEAP32[$3 + 36 >> 2] = $8;
     HEAP8[$3 + 53 | 0] = 2;
     HEAP32[$8 + 40 >> 2] = $3;
     HEAP8[$8 + 54 | 0] = 1;
     $3 = HEAP32[$4 + 48 >> 2];
     if ($3) {
      HEAP32[$3 + 44 >> 2] = HEAP32[$4 + 44 >> 2];
     }
     $3 = HEAP32[$4 + 44 >> 2];
     if ($3) {
      HEAP32[$3 + 48 >> 2] = HEAP32[$4 + 48 >> 2];
     }
     if (HEAP32[$0 + 18496 >> 2] == ($4 | 0)) {
      HEAP32[$0 + 18496 >> 2] = HEAP32[$4 + 48 >> 2];
     }
     HEAP32[$0 + 18500 >> 2] = HEAP32[$0 + 18500 >> 2] + -1;
     HEAP32[$4 + 44 >> 2] = 0;
     HEAP32[$4 + 48 >> 2] = HEAP32[$0 + 18504 >> 2];
     $3 = HEAP32[$0 + 18504 >> 2];
     if ($3) {
      HEAP32[$3 + 44 >> 2] = $4;
     }
     HEAP32[$0 + 18504 >> 2] = $4;
     HEAP32[$0 + 18508 >> 2] = HEAP32[$0 + 18508 >> 2] + 1;
     $4 = HEAP32[$0 + 18496 >> 2];
     $5 = HEAPF32[$4 + 16 >> 2];
     $3 = HEAP32[$4 + 48 >> 2];
     if ($3) {
      $5 = Math_fround($5 * $5);
      while (1) {
       $6 = HEAPF32[$3 + 16 >> 2];
       $6 = Math_fround($6 * $6);
       $8 = $6 < $5;
       $4 = $8 ? $3 : $4;
       $5 = $8 ? $6 : $5;
       $3 = HEAP32[$3 + 48 >> 2];
       if ($3) {
        continue;
       }
       break;
      }
      $5 = HEAPF32[$4 + 16 >> 2];
     }
     $18 = HEAP32[$4 + 28 >> 2];
     $22 = HEAP32[$4 + 24 >> 2];
     $23 = HEAP32[$4 + 20 >> 2];
     $11 = HEAPF32[$4 + 12 >> 2];
     $6 = HEAPF32[$4 + 8 >> 2];
     $9 = HEAPF32[$4 + 4 >> 2];
     $13 = HEAPF32[$4 >> 2];
     if (($7 | 0) != 255) {
      continue;
     }
    }
    break;
   }
   HEAPF32[$0 + 56 >> 2] = $5;
   HEAPF32[$0 + 40 >> 2] = $13;
   HEAP32[$0 + 4 >> 2] = $23;
   HEAPF32[$0 + 52 >> 2] = $11;
   HEAPF32[$0 + 48 >> 2] = $6;
   HEAPF32[$0 + 44 >> 2] = $9;
   HEAP32[$0 + 36 >> 2] = 3;
   HEAP32[$0 + 12 >> 2] = $18;
   HEAP32[$0 + 8 >> 2] = $22;
   $3 = $0 + 20 | 0;
   $13 = Math_fround($13 * $5);
   $11 = Math_fround(HEAPF32[$22 + 16 >> 2] - $13);
   $4 = $18 + 20 | 0;
   $9 = Math_fround($9 * $5);
   $12 = Math_fround(HEAPF32[$4 >> 2] - $9);
   $8 = $22 + 20 | 0;
   $14 = Math_fround(HEAPF32[$8 >> 2] - $9);
   $15 = Math_fround(HEAPF32[$18 + 16 >> 2] - $13);
   $16 = Math_fround(Math_fround($11 * $12) - Math_fround($14 * $15));
   $7 = $18 + 24 | 0;
   $5 = Math_fround($6 * $5);
   $6 = Math_fround(HEAPF32[$7 >> 2] - $5);
   $24 = Math_fround($14 * $6);
   $10 = $22 + 24 | 0;
   $14 = Math_fround(HEAPF32[$10 >> 2] - $5);
   $12 = Math_fround($24 - Math_fround($14 * $12));
   $6 = Math_fround(Math_fround($14 * $15) - Math_fround($11 * $6));
   $6 = Math_fround(Math_sqrt(Math_fround(Math_fround($16 * $16) + Math_fround(Math_fround($12 * $12) + Math_fround($6 * $6)))));
   HEAPF32[$3 >> 2] = $6;
   $2 = $0 + 24 | 0;
   $11 = Math_fround(HEAPF32[$18 + 16 >> 2] - $13);
   $1 = $23 + 20 | 0;
   $12 = Math_fround(HEAPF32[$1 >> 2] - $9);
   $14 = Math_fround(HEAPF32[$18 + 20 >> 2] - $9);
   $15 = Math_fround(HEAPF32[$23 + 16 >> 2] - $13);
   $16 = Math_fround(Math_fround($11 * $12) - Math_fround($14 * $15));
   $25 = Math_fround($16 * $16);
   $4 = $23 + 24 | 0;
   $16 = Math_fround(HEAPF32[$4 >> 2] - $5);
   $24 = Math_fround($14 * $16);
   $14 = Math_fround(HEAPF32[$18 + 24 >> 2] - $5);
   $12 = Math_fround($24 - Math_fround($14 * $12));
   $11 = Math_fround(Math_fround($14 * $15) - Math_fround($11 * $16));
   $11 = Math_fround(Math_sqrt(Math_fround($25 + Math_fround(Math_fround($12 * $12) + Math_fround($11 * $11)))));
   HEAPF32[$2 >> 2] = $11;
   $12 = Math_fround(HEAPF32[$23 + 16 >> 2] - $13);
   $14 = Math_fround(HEAPF32[$22 + 20 >> 2] - $9);
   $9 = Math_fround(HEAPF32[$23 + 20 >> 2] - $9);
   $13 = Math_fround(HEAPF32[$22 + 16 >> 2] - $13);
   $15 = Math_fround(Math_fround($12 * $14) - Math_fround($9 * $13));
   $24 = Math_fround($15 * $15);
   $15 = Math_fround(HEAPF32[$22 + 24 >> 2] - $5);
   $5 = Math_fround(HEAPF32[$23 + 24 >> 2] - $5);
   $9 = Math_fround(Math_fround($9 * $15) - Math_fround($5 * $14));
   $5 = Math_fround(Math_fround($5 * $13) - Math_fround($12 * $15));
   $5 = Math_fround(Math_sqrt(Math_fround($24 + Math_fround(Math_fround($9 * $9) + Math_fround($5 * $5)))));
   $24 = $5;
   $5 = Math_fround($5 + Math_fround($6 + $11));
   HEAPF32[$0 + 28 >> 2] = $24 / $5;
   HEAPF32[$0 + 24 >> 2] = $11 / $5;
   HEAPF32[$0 + 20 >> 2] = $6 / $5;
   $3 = HEAP32[$0 >> 2];
   break label$2;
  }
  HEAP32[$0 >> 2] = 8;
  $5 = HEAPF32[$2 >> 2];
  $6 = HEAPF32[$2 + 4 >> 2];
  $9 = HEAPF32[$2 + 8 >> 2];
  HEAP32[$0 + 52 >> 2] = 0;
  $13 = Math_fround(-$9);
  HEAPF32[$0 + 48 >> 2] = $13;
  $11 = Math_fround(-$6);
  HEAPF32[$0 + 44 >> 2] = $11;
  $12 = Math_fround(-$5);
  HEAPF32[$0 + 40 >> 2] = $12;
  $5 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($5 * $5) + Math_fround($6 * $6)) + Math_fround($9 * $9))));
  label$27 : {
   if (!!($5 > Math_fround(0))) {
    $5 = Math_fround(Math_fround(1) / $5);
    HEAPF32[$0 + 48 >> 2] = $5 * $13;
    HEAPF32[$0 + 44 >> 2] = $5 * $11;
    HEAPF32[$0 + 40 >> 2] = $5 * $12;
    break label$27;
   }
   HEAP32[$0 + 48 >> 2] = 0;
   HEAP32[$0 + 40 >> 2] = 1065353216;
   HEAP32[$0 + 44 >> 2] = 0;
  }
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 1;
  $3 = HEAP32[$10 >> 2];
  HEAP32[$0 + 20 >> 2] = 1065353216;
  HEAP32[$0 + 4 >> 2] = $3;
  $3 = 8;
 }
 $0 = $17 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $3;
}
function btConvexPlaneCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = 0, $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = Math_fround(0), $50 = Math_fround(0), $51 = Math_fround(0), $52 = Math_fround(0), $53 = Math_fround(0);
 $3 = global$0 - 48 | 0;
 $5 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 label$2 : {
  if (!HEAP32[$0 + 12 >> 2]) {
   break label$2;
  }
  $5 = HEAPU8[$0 + 16 | 0];
  $34 = $5 ? $1 : $2;
  $9 = HEAP32[$34 + 12 >> 2];
  $18 = HEAPF32[$9 + 56 >> 2];
  $40 = HEAPF32[$9 + 52 >> 2];
  $19 = HEAPF32[$9 + 48 >> 2];
  $13 = $5 ? $2 : $1;
  $5 = HEAP32[$13 + 12 >> 2];
  $20 = HEAPF32[$5 + 56 >> 2];
  $31 = HEAPF32[$5 + 52 >> 2];
  $32 = HEAPF32[$5 + 48 >> 2];
  $13 = HEAP32[$13 + 4 >> 2];
  $21 = HEAPF32[$5 + 32 >> 2];
  $24 = HEAPF32[$5 >> 2];
  $25 = HEAPF32[$5 + 16 >> 2];
  $17 = HEAPF32[$5 + 36 >> 2];
  $26 = HEAPF32[$5 + 20 >> 2];
  $27 = HEAPF32[$5 + 4 >> 2];
  $6 = HEAPF32[$9 + 40 >> 2];
  $8 = HEAPF32[$9 + 24 >> 2];
  $7 = HEAPF32[$9 + 8 >> 2];
  $10 = HEAPF32[$9 + 36 >> 2];
  $14 = HEAPF32[$9 + 20 >> 2];
  $12 = HEAPF32[$9 + 4 >> 2];
  $15 = HEAPF32[$9 + 32 >> 2];
  $28 = HEAPF32[$5 + 40 >> 2];
  $16 = HEAPF32[$9 + 16 >> 2];
  $22 = HEAPF32[$5 + 24 >> 2];
  $11 = HEAPF32[$9 >> 2];
  $29 = HEAPF32[$5 + 8 >> 2];
  $9 = HEAP32[$34 + 4 >> 2];
  $33 = HEAPF32[$9 + 60 >> 2];
  $23 = HEAPF32[$9 + 56 >> 2];
  $30 = HEAPF32[$9 + 52 >> 2];
  HEAP32[$3 + 28 >> 2] = 0;
  $35 = Math_fround(Math_fround(Math_fround($29 * $12) + Math_fround($22 * $14)) + Math_fround($28 * $10));
  $23 = Math_fround(-$23);
  $36 = Math_fround(Math_fround(Math_fround($29 * $11) + Math_fround($22 * $16)) + Math_fround($28 * $15));
  $22 = Math_fround(Math_fround(Math_fround($29 * $7) + Math_fround($22 * $8)) + Math_fround($28 * $6));
  HEAPF32[$3 + 24 >> 2] = Math_fround(Math_fround($35 * $23) - Math_fround($30 * $36)) - Math_fround($33 * $22);
  $29 = Math_fround(Math_fround(Math_fround($27 * $12) + Math_fround($26 * $14)) + Math_fround($17 * $10));
  $37 = Math_fround(Math_fround(Math_fround($27 * $11) + Math_fround($26 * $16)) + Math_fround($17 * $15));
  $38 = Math_fround(Math_fround(Math_fround($27 * $7) + Math_fround($26 * $8)) + Math_fround($17 * $6));
  HEAPF32[$3 + 20 >> 2] = Math_fround(Math_fround($29 * $23) - Math_fround($30 * $37)) - Math_fround($33 * $38);
  $39 = Math_fround(Math_fround(Math_fround($24 * $12) + Math_fround($25 * $14)) + Math_fround($21 * $10));
  $17 = Math_fround($39 * $23);
  $23 = Math_fround(Math_fround(Math_fround($24 * $11) + Math_fround($25 * $16)) + Math_fround($21 * $15));
  $17 = Math_fround($17 - Math_fround($30 * $23));
  $30 = Math_fround(Math_fround(Math_fround($24 * $7) + Math_fround($25 * $8)) + Math_fround($21 * $6));
  HEAPF32[$3 + 16 >> 2] = $17 - Math_fround($33 * $30);
  FUNCTION_TABLE[HEAP32[HEAP32[$13 >> 2] + 64 >> 2]]($3 + 32 | 0, $13, $3 + 16 | 0);
  $5 = HEAP32[$34 + 12 >> 2];
  $41 = HEAPF32[$5 + 48 >> 2];
  $42 = HEAPF32[$5 + 32 >> 2];
  $43 = HEAPF32[$5 + 16 >> 2];
  $44 = HEAPF32[$5 + 8 >> 2];
  $45 = HEAPF32[$5 + 4 >> 2];
  $46 = HEAPF32[$5 >> 2];
  $47 = HEAPF32[$5 + 56 >> 2];
  $48 = HEAPF32[$5 + 52 >> 2];
  $49 = HEAPF32[$5 + 40 >> 2];
  $50 = HEAPF32[$5 + 36 >> 2];
  $51 = HEAPF32[$5 + 24 >> 2];
  $52 = HEAPF32[$5 + 20 >> 2];
  $33 = HEAPF32[$9 + 68 >> 2];
  $26 = HEAPF32[$9 + 60 >> 2];
  $27 = HEAPF32[$9 + 52 >> 2];
  $28 = HEAPF32[$9 + 56 >> 2];
  $21 = HEAPF32[$3 + 40 >> 2];
  $24 = HEAPF32[$3 + 32 >> 2];
  $25 = HEAPF32[$3 + 36 >> 2];
  $53 = btPersistentManifold__getContactBreakingThreshold_28_29_20const(HEAP32[$0 + 12 >> 2]);
  HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 12 >> 2];
  $17 = Math_fround(-$40);
  $22 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($32 * $7) + Math_fround($31 * $8)) + Math_fround($20 * $6)) + Math_fround(Math_fround(Math_fround($8 * $17) - Math_fround($19 * $7)) - Math_fround($18 * $6))) + Math_fround(Math_fround(Math_fround($30 * $24) + Math_fround($38 * $25)) + Math_fround($22 * $21)));
  $15 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($32 * $11) + Math_fround($31 * $16)) + Math_fround($20 * $15)) + Math_fround(Math_fround(Math_fround($16 * $17) - Math_fround($19 * $11)) - Math_fround($18 * $15))) + Math_fround(Math_fround(Math_fround($23 * $24) + Math_fround($37 * $25)) + Math_fround($36 * $21)));
  $14 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($32 * $12) + Math_fround($31 * $14)) + Math_fround($20 * $10)) + Math_fround(Math_fround(Math_fround($14 * $17) - Math_fround($19 * $12)) - Math_fround($18 * $10))) + Math_fround(Math_fround(Math_fround($39 * $24) + Math_fround($29 * $25)) + Math_fround($35 * $21)));
  $6 = Math_fround(Math_fround(Math_fround($26 * $22) + Math_fround(Math_fround($27 * $15) + Math_fround($28 * $14))) - $33);
  if (!!($6 < $53)) {
   $5 = HEAP32[$34 + 12 >> 2];
   $12 = HEAPF32[$5 + 24 >> 2];
   $16 = HEAPF32[$5 + 20 >> 2];
   $11 = HEAPF32[$5 + 40 >> 2];
   $18 = HEAPF32[$5 + 36 >> 2];
   $19 = HEAPF32[$5 + 16 >> 2];
   $20 = HEAPF32[$5 + 32 >> 2];
   $8 = HEAPF32[$9 + 60 >> 2];
   $31 = HEAPF32[$5 + 8 >> 2];
   $7 = HEAPF32[$9 + 52 >> 2];
   $32 = HEAPF32[$5 >> 2];
   $10 = HEAPF32[$9 + 56 >> 2];
   $21 = HEAPF32[$5 + 4 >> 2];
   HEAP32[$3 + 28 >> 2] = 0;
   HEAPF32[$3 + 16 >> 2] = Math_fround(Math_fround($32 * $7) + Math_fround($21 * $10)) + Math_fround($31 * $8);
   HEAPF32[$3 + 24 >> 2] = Math_fround(Math_fround($7 * $20) + Math_fround($10 * $18)) + Math_fround($8 * $11);
   HEAPF32[$3 + 20 >> 2] = Math_fround(Math_fround($7 * $19) + Math_fround($10 * $16)) + Math_fround($8 * $12);
   HEAP32[$3 + 12 >> 2] = 0;
   $8 = Math_fround($15 - Math_fround($27 * $6));
   $7 = Math_fround($14 - Math_fround($28 * $6));
   $10 = Math_fround($22 - Math_fround($26 * $6));
   HEAPF32[$3 + 8 >> 2] = Math_fround(Math_fround(Math_fround($8 * $42) + Math_fround($7 * $50)) + Math_fround($10 * $49)) + $47;
   HEAPF32[$3 + 4 >> 2] = Math_fround(Math_fround(Math_fround($8 * $43) + Math_fround($7 * $52)) + Math_fround($10 * $51)) + $48;
   HEAPF32[$3 >> 2] = Math_fround(Math_fround($44 * $10) + Math_fround(Math_fround($46 * $8) + Math_fround($45 * $7))) + $41;
   FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $3 + 16 | 0, $3, $6);
  }
  label$4 : {
   if (HEAP32[$13 + 4 >> 2] > 6 | HEAP32[HEAP32[$4 + 4 >> 2] + 844 >> 2] >= HEAP32[$0 + 24 >> 2]) {
    break label$4;
   }
   $8 = HEAPF32[$9 + 60 >> 2];
   label$5 : {
    if (!!(Math_fround(Math_abs($8)) > Math_fround(.7071067690849304))) {
     $6 = HEAPF32[$9 + 56 >> 2];
     $7 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround($8 * $8) + Math_fround($6 * $6)))));
     $6 = Math_fround($6 * $7);
     $8 = Math_fround($7 * Math_fround(-$8));
     $7 = Math_fround(0);
     break label$5;
    }
    $6 = HEAPF32[$9 + 52 >> 2];
    $8 = $6;
    $7 = Math_fround($6 * $6);
    $6 = HEAPF32[$9 + 56 >> 2];
    $7 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround($7 + Math_fround($6 * $6)))));
    $8 = Math_fround($8 * $7);
    $7 = Math_fround($7 * Math_fround(-$6));
    $6 = Math_fround(0);
   }
   $10 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$13 >> 2] + 16 >> 2]]($13));
   $5 = 0;
   $10 = Math_fround(Math_fround(Math_min(Math_fround(HEAPF32[4966] / $10), Math_fround(.39269909262657166))) * Math_fround(.5));
   $12 = sinf($10);
   $13 = HEAP32[$0 + 20 >> 2];
   $14 = cosf($10);
   if (($13 | 0) < 1) {
    break label$4;
   }
   $10 = Math_fround($12 / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($8 * $8)) + Math_fround($6 * $6)))));
   $12 = Math_fround($6 * $10);
   $15 = Math_fround($8 * $10);
   $16 = Math_fround($7 * $10);
   while (1) {
    $7 = HEAPF32[$9 + 56 >> 2];
    $10 = HEAPF32[$9 + 52 >> 2];
    $8 = HEAPF32[$9 + 60 >> 2];
    $6 = Math_fround(Math_fround(Math_fround(Math_fround(6.2831854820251465) / Math_fround($13 | 0)) * Math_fround($5 | 0)) * Math_fround(.5));
    $11 = sinf($6);
    $6 = cosf($6);
    $11 = Math_fround($11 / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($7 * $7)) + Math_fround($8 * $8)))));
    $8 = Math_fround($8 * $11);
    $7 = Math_fround($7 * $11);
    $10 = Math_fround($10 * $11);
    $11 = Math_fround(Math_fround($12 * $8) + Math_fround(Math_fround($15 * $7) + Math_fround(Math_fround($14 * $6) + Math_fround($16 * $10))));
    $18 = Math_fround(Math_fround($15 * $8) + Math_fround(Math_fround(Math_fround($16 * $6) - Math_fround($14 * $10)) - Math_fround($12 * $7)));
    $19 = Math_fround(Math_fround($12 * $10) + Math_fround(Math_fround(Math_fround($15 * $6) - Math_fround($14 * $7)) - Math_fround($16 * $8)));
    $20 = Math_fround(Math_fround($16 * $7) + Math_fround(Math_fround(Math_fround($12 * $6) - Math_fround($14 * $8)) - Math_fround($15 * $10)));
    HEAPF32[$3 + 28 >> 2] = Math_fround(Math_fround(Math_fround($6 * $11) - Math_fround($10 * $18)) - Math_fround($7 * $19)) - Math_fround($8 * $20);
    HEAPF32[$3 + 24 >> 2] = Math_fround(Math_fround($7 * $18) + Math_fround(Math_fround($8 * $11) + Math_fround($6 * $20))) - Math_fround($10 * $19);
    HEAPF32[$3 + 20 >> 2] = Math_fround(Math_fround($10 * $20) + Math_fround(Math_fround($6 * $19) + Math_fround($7 * $11))) - Math_fround($8 * $18);
    HEAPF32[$3 + 16 >> 2] = Math_fround(Math_fround($8 * $19) + Math_fround(Math_fround($10 * $11) + Math_fround($6 * $18))) - Math_fround($7 * $20);
    btConvexPlaneCollisionAlgorithm__collideSingleContact_28btQuaternion_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $3 + 16 | 0, $1, $2, $3, $4);
    $5 = $5 + 1 | 0;
    $13 = HEAP32[$0 + 20 >> 2];
    if (($5 | 0) < ($13 | 0)) {
     continue;
    }
    break;
   }
  }
  if (!HEAPU8[$0 + 8 | 0] | !HEAP32[HEAP32[$0 + 12 >> 2] + 844 >> 2]) {
   break label$2;
  }
  $9 = HEAP32[$4 + 4 >> 2];
  if (!HEAP32[$9 + 844 >> 2]) {
   break label$2;
  }
  $0 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
  $5 = HEAP32[$9 + 836 >> 2];
  if (($0 | 0) != ($5 | 0)) {
   btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($9, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0, $0 + 4 | 0);
   break label$2;
  }
  btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($9, $5 + 4 | 0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0);
 }
 $0 = $3 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDiscreteDynamicsWorld__createPredictiveContactsInternal_28btRigidBody___2c_20int_2c_20float_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = 0, $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0);
 $4 = global$0 - 512 | 0;
 $6 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 if (($2 | 0) >= 1) {
  $22 = $4 - -64 | 0;
  $19 = $4 + 240 | 0;
  $20 = $4 + 224 | 0;
  $23 = $4 + 496 | 0;
  while (1) {
   $8 = HEAP32[($21 << 2) + $1 >> 2];
   HEAP32[$8 + 268 >> 2] = 1065353216;
   label$4 : {
    label$5 : {
     $5 = HEAP32[$8 + 220 >> 2] + -2 | 0;
     if ($5 >>> 0 > 3) {
      break label$5;
     }
     switch ($5 - 1 | 0) {
     case 0:
     case 1:
      break label$5;
     default:
      break label$4;
     }
    }
    if (HEAPU8[$8 + 204 | 0] & 3) {
     break label$4;
    }
    btRigidBody__predictIntegratedTransform_28float_2c_20btTransform__29($8, $3, $4 + 448 | 0);
    if (!HEAPU8[$0 + 44 | 0]) {
     break label$4;
    }
    $10 = HEAPF32[$8 + 276 >> 2];
    $10 = Math_fround($10 * $10);
    if ($10 == Math_fround(0)) {
     break label$4;
    }
    $11 = Math_fround(HEAPF32[$4 + 496 >> 2] - HEAPF32[$8 + 52 >> 2]);
    $16 = Math_fround($11 * $11);
    $11 = Math_fround(HEAPF32[$4 + 500 >> 2] - HEAPF32[$8 + 56 >> 2]);
    $16 = Math_fround($16 + Math_fround($11 * $11));
    $11 = Math_fround(HEAPF32[$4 + 504 >> 2] - HEAPF32[$8 + 60 >> 2]);
    if (!($10 < Math_fround($16 + Math_fround($11 * $11)))) {
     break label$4;
    }
    $33 = CProfileSample__CProfileSample_28char_20const__29($4 + 440 | 0, 2648);
    if (HEAP32[HEAP32[$8 + 192 >> 2] + 4 >> 2] <= 19) {
     HEAP32[5211] = HEAP32[5211] + 1;
     $5 = HEAP32[$0 + 68 >> 2];
     $5 = FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 36 >> 2]]($5) | 0;
     $15 = HEAP32[$0 + 24 >> 2];
     HEAP32[$4 + 348 >> 2] = -1;
     HEAP32[$4 + 340 >> 2] = 1065353216;
     HEAP32[$4 + 344 >> 2] = 1;
     $6 = HEAP32[$8 + 64 >> 2];
     $7 = HEAP32[$8 + 60 >> 2];
     HEAP32[$4 + 360 >> 2] = $7;
     HEAP32[$4 + 364 >> 2] = $6;
     $7 = HEAP32[$8 + 56 >> 2];
     $6 = HEAP32[$8 + 52 >> 2];
     HEAP32[$4 + 352 >> 2] = $6;
     HEAP32[$4 + 356 >> 2] = $7;
     $9 = $23 + 8 | 0;
     $7 = HEAP32[$9 >> 2];
     $6 = HEAP32[$9 + 4 >> 2];
     HEAP32[$4 + 376 >> 2] = $7;
     HEAP32[$4 + 380 >> 2] = $6;
     $9 = $23;
     $6 = HEAP32[$9 >> 2];
     $7 = HEAP32[$9 + 4 >> 2];
     HEAP32[$4 + 368 >> 2] = $6;
     HEAP32[$4 + 372 >> 2] = $7;
     HEAP32[$4 + 416 >> 2] = 0;
     HEAP32[$4 + 336 >> 2] = 3060;
     HEAP32[$4 + 428 >> 2] = $5;
     HEAP32[$4 + 432 >> 2] = $15;
     HEAP32[$4 + 424 >> 2] = 0;
     HEAP32[$4 + 420 >> 2] = $8;
     $5 = HEAP32[$8 + 272 >> 2];
     btConvexInternalShape__btConvexInternalShape_28_29($4 + 272 | 0);
     HEAP32[$4 + 300 >> 2] = 1065353216;
     HEAP32[$4 + 292 >> 2] = 1065353216;
     HEAP32[$4 + 296 >> 2] = 1065353216;
     HEAP32[$4 + 276 >> 2] = 8;
     HEAP32[$4 + 272 >> 2] = 11396;
     HEAP32[$4 + 312 >> 2] = 0;
     HEAP32[$4 + 316 >> 2] = 0;
     HEAP32[$4 + 320 >> 2] = 0;
     HEAP32[$4 + 304 >> 2] = 0;
     HEAP32[$4 + 308 >> 2] = 0;
     HEAP32[$4 + 328 >> 2] = 0;
     HEAP32[$4 + 324 >> 2] = $5;
     HEAP32[$4 + 308 >> 2] = $5;
     HEAP32[$4 + 424 >> 2] = HEAP32[$0 + 56 >> 2];
     $5 = HEAP32[$8 + 188 >> 2];
     HEAP32[$4 + 344 >> 2] = HEAP32[$5 + 4 >> 2];
     HEAP32[$4 + 348 >> 2] = HEAP32[$5 + 8 >> 2];
     $6 = HEAP32[$4 + 460 >> 2];
     $7 = HEAP32[$4 + 456 >> 2];
     $5 = $7;
     $15 = $4 + 216 | 0;
     $7 = $15;
     HEAP32[$7 >> 2] = $5;
     HEAP32[$7 + 4 >> 2] = $6;
     $7 = HEAP32[$4 + 452 >> 2];
     $6 = HEAP32[$4 + 448 >> 2];
     HEAP32[$4 + 208 >> 2] = $6;
     HEAP32[$4 + 212 >> 2] = $7;
     $6 = HEAP32[$4 + 476 >> 2];
     $7 = HEAP32[$4 + 472 >> 2];
     $5 = $7;
     $7 = $20 + 8 | 0;
     HEAP32[$7 >> 2] = $5;
     HEAP32[$7 + 4 >> 2] = $6;
     $7 = HEAP32[$4 + 468 >> 2];
     $6 = HEAP32[$4 + 464 >> 2];
     $5 = $6;
     $6 = $20;
     HEAP32[$6 >> 2] = $5;
     HEAP32[$6 + 4 >> 2] = $7;
     $6 = HEAP32[$4 + 492 >> 2];
     $7 = HEAP32[$4 + 488 >> 2];
     $5 = $7;
     $17 = $19 + 8 | 0;
     $7 = $17;
     HEAP32[$7 >> 2] = $5;
     HEAP32[$7 + 4 >> 2] = $6;
     $7 = HEAP32[$4 + 484 >> 2];
     $6 = HEAP32[$4 + 480 >> 2];
     $5 = $6;
     $6 = $19;
     HEAP32[$6 >> 2] = $5;
     HEAP32[$6 + 4 >> 2] = $7;
     $6 = HEAP32[$9 + 12 >> 2];
     $7 = HEAP32[$9 + 8 >> 2];
     HEAP32[$4 + 264 >> 2] = $7;
     HEAP32[$4 + 268 >> 2] = $6;
     $7 = HEAP32[$9 + 4 >> 2];
     $6 = HEAP32[$9 >> 2];
     HEAP32[$4 + 256 >> 2] = $6;
     HEAP32[$4 + 260 >> 2] = $7;
     $5 = $8 + 4 | 0;
     $6 = HEAP32[$5 + 12 >> 2];
     $7 = HEAP32[$5 + 8 >> 2];
     HEAP32[$4 + 216 >> 2] = $7;
     HEAP32[$4 + 220 >> 2] = $6;
     $7 = HEAP32[$5 + 4 >> 2];
     $6 = HEAP32[$5 >> 2];
     HEAP32[$4 + 208 >> 2] = $6;
     HEAP32[$4 + 212 >> 2] = $7;
     $6 = HEAP32[$8 + 32 >> 2];
     $7 = HEAP32[$8 + 28 >> 2];
     $9 = $7;
     $7 = $20;
     HEAP32[$7 + 8 >> 2] = $9;
     HEAP32[$7 + 12 >> 2] = $6;
     $7 = HEAP32[$8 + 24 >> 2];
     $6 = HEAP32[$8 + 20 >> 2];
     $9 = $6;
     $6 = $20;
     HEAP32[$6 >> 2] = $9;
     HEAP32[$6 + 4 >> 2] = $7;
     $6 = HEAP32[$8 + 48 >> 2];
     $7 = HEAP32[$8 + 44 >> 2];
     $9 = $7;
     $7 = $19;
     HEAP32[$7 + 8 >> 2] = $9;
     HEAP32[$7 + 12 >> 2] = $6;
     $7 = HEAP32[$8 + 40 >> 2];
     $6 = HEAP32[$8 + 36 >> 2];
     $9 = $6;
     $6 = $19;
     HEAP32[$6 >> 2] = $9;
     HEAP32[$6 + 4 >> 2] = $7;
     btCollisionWorld__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29_20const($0, $4 + 272 | 0, $5, $4 + 208 | 0, $4 + 336 | 0, Math_fround(0));
     $10 = HEAPF32[$4 + 340 >> 2];
     if (!!($10 < Math_fround(1))) {
      $12 = Math_fround($10 * Math_fround(HEAPF32[$4 + 500 >> 2] - HEAPF32[$8 + 56 >> 2]));
      $13 = Math_fround($10 * Math_fround(HEAPF32[$4 + 496 >> 2] - HEAPF32[$8 + 52 >> 2]));
      $14 = Math_fround($10 * Math_fround(HEAPF32[$4 + 504 >> 2] - HEAPF32[$8 + 60 >> 2]));
      $34 = Math_fround(Math_fround(Math_fround($12 * Math_fround(-HEAPF32[$4 + 388 >> 2])) - Math_fround($13 * HEAPF32[$4 + 384 >> 2])) - Math_fround($14 * HEAPF32[$4 + 392 >> 2]));
      $5 = HEAP32[$0 + 24 >> 2];
      $17 = FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 12 >> 2]]($5, $8, HEAP32[$4 + 416 >> 2]) | 0;
      $9 = HEAP32[$0 + 324 >> 2];
      label$8 : {
       if (($9 | 0) != HEAP32[$0 + 328 >> 2]) {
        break label$8;
       }
       $6 = $9 ? $9 << 1 : 1;
       if (($9 | 0) >= ($6 | 0)) {
        break label$8;
       }
       $5 = 0;
       $7 = 0;
       if ($6) {
        $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 2, 16);
        $9 = HEAP32[$0 + 324 >> 2];
       }
       if (($9 | 0) >= 1) {
        while (1) {
         $15 = $5 << 2;
         HEAP32[$7 + $15 >> 2] = HEAP32[HEAP32[$0 + 332 >> 2] + $15 >> 2];
         $5 = $5 + 1 | 0;
         if (($9 | 0) != ($5 | 0)) {
          continue;
         }
         break;
        }
       }
       $5 = HEAP32[$0 + 332 >> 2];
       if ($5) {
        if (HEAPU8[$0 + 336 | 0]) {
         btAlignedFreeInternal_28void__29($5);
         $9 = HEAP32[$0 + 324 >> 2];
        }
        HEAP32[$0 + 332 >> 2] = 0;
       }
       HEAP32[$0 + 332 >> 2] = $7;
       HEAP8[$0 + 336 | 0] = 1;
       HEAP32[$0 + 328 >> 2] = $6;
      }
      HEAP32[HEAP32[$0 + 332 >> 2] + ($9 << 2) >> 2] = $17;
      HEAP32[$0 + 324 >> 2] = $9 + 1;
      $5 = HEAP32[$4 + 416 >> 2];
      $24 = HEAPF32[$5 + 20 >> 2];
      $25 = HEAPF32[$5 + 36 >> 2];
      $26 = HEAPF32[$5 + 40 >> 2];
      $27 = HEAPF32[$5 + 8 >> 2];
      $28 = HEAPF32[$5 + 24 >> 2];
      $10 = HEAPF32[$5 + 60 >> 2];
      $18 = HEAPF32[$5 + 56 >> 2];
      $11 = HEAPF32[$5 + 52 >> 2];
      $29 = HEAPF32[$5 + 44 >> 2];
      $30 = HEAPF32[$5 + 12 >> 2];
      $31 = HEAPF32[$5 + 28 >> 2];
      $32 = HEAPF32[$5 + 4 >> 2];
      $35 = HEAPF32[$8 + 60 >> 2];
      $36 = HEAPF32[$8 + 52 >> 2];
      $16 = HEAPF32[$8 + 56 >> 2];
      HEAP32[$4 + 8 >> 2] = 0;
      HEAP32[$4 + 12 >> 2] = 0;
      HEAP32[$4 + 28 >> 2] = 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      $13 = Math_fround($13 + $36);
      $12 = Math_fround($12 + $16);
      $14 = Math_fround($14 + $35);
      $18 = Math_fround(-$18);
      HEAPF32[$4 + 24 >> 2] = Math_fround(Math_fround(Math_fround($30 * $13) + Math_fround($31 * $12)) + Math_fround($29 * $14)) + Math_fround(Math_fround(Math_fround($31 * $18) - Math_fround($30 * $11)) - Math_fround($29 * $10));
      HEAPF32[$4 + 20 >> 2] = Math_fround(Math_fround(Math_fround($13 * $27) + Math_fround($12 * $28)) + Math_fround($14 * $26)) + Math_fround(Math_fround(Math_fround($28 * $18) - Math_fround($27 * $11)) - Math_fround($26 * $10));
      HEAPF32[$4 + 16 >> 2] = Math_fround(Math_fround(Math_fround($13 * $32) + Math_fround($12 * $24)) + Math_fround($14 * $25)) + Math_fround(Math_fround(Math_fround($24 * $18) - Math_fround($32 * $11)) - Math_fround($25 * $10));
      $6 = HEAP32[$4 + 388 >> 2];
      $7 = HEAP32[$4 + 384 >> 2];
      $9 = $7;
      $7 = $22;
      HEAP32[$7 >> 2] = $9;
      HEAP32[$7 + 4 >> 2] = $6;
      $7 = HEAP32[$4 + 396 >> 2];
      $6 = HEAP32[$4 + 392 >> 2];
      $9 = $6;
      $6 = $22;
      HEAP32[$6 + 8 >> 2] = $9;
      HEAP32[$6 + 12 >> 2] = $7;
      HEAPF32[$4 + 80 >> 2] = $34;
      HEAP32[$4 + 92 >> 2] = 0;
      HEAP32[$4 + 96 >> 2] = 0;
      HEAP32[$4 + 84 >> 2] = 0;
      HEAP32[$4 + 88 >> 2] = 0;
      HEAP32[$4 + 164 >> 2] = 0;
      HEAP32[$4 + 156 >> 2] = 0;
      HEAP32[$4 + 160 >> 2] = 0;
      HEAP32[$4 + 148 >> 2] = 0;
      HEAP32[$4 + 152 >> 2] = 0;
      HEAP32[$4 + 140 >> 2] = 0;
      HEAP32[$4 + 144 >> 2] = 0;
      HEAP32[$4 + 132 >> 2] = 0;
      HEAP32[$4 + 136 >> 2] = 0;
      HEAP32[$4 + 124 >> 2] = 0;
      HEAP32[$4 + 128 >> 2] = 0;
      HEAP32[$4 + 116 >> 2] = 0;
      HEAP32[$4 + 120 >> 2] = 0;
      $5 = Math_imul(btPersistentManifold__addManifoldPoint_28btManifoldPoint_20const__2c_20bool_29($17, $4, 1), 208) + $17 | 0;
      HEAP32[$5 + 100 >> 2] = 0;
      HEAPF32[$5 + 88 >> 2] = btManifoldResult__calculateCombinedFriction_28btCollisionObject_20const__2c_20btCollisionObject_20const__29($8, HEAP32[$4 + 416 >> 2]);
      $6 = HEAP32[$8 + 56 >> 2];
      $7 = HEAP32[$8 + 52 >> 2];
      HEAP32[$5 + 52 >> 2] = $7;
      HEAP32[$5 + 56 >> 2] = $6;
      $7 = HEAP32[$8 + 64 >> 2];
      $6 = HEAP32[$8 + 60 >> 2];
      HEAP32[$5 + 60 >> 2] = $6;
      HEAP32[$5 + 64 >> 2] = $7;
      HEAP32[$5 + 48 >> 2] = 0;
      HEAPF32[$5 + 44 >> 2] = $14;
      HEAPF32[$5 + 40 >> 2] = $12;
      HEAPF32[$5 + 36 >> 2] = $13;
     }
     btConvexShape___btConvexShape_28_29($4 + 272 | 0);
    }
    CProfileSample___CProfileSample_28_29($33);
   }
   $21 = $21 + 1 | 0;
   if (($21 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = $4 + 512 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHingeConstraint__getInfo2Internal_28btTypedConstraint__btConstraintInfo2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = 0, $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = 0, $35 = Math_fround(0), $36 = 0, $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = 0, $43 = Math_fround(0), $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = Math_fround(0), $50 = Math_fround(0), $51 = Math_fround(0), $52 = Math_fround(0), $53 = Math_fround(0), $54 = Math_fround(0), $55 = Math_fround(0), $56 = Math_fround(0), $57 = Math_fround(0), $58 = Math_fround(0), $59 = Math_fround(0), $60 = Math_fround(0), $61 = Math_fround(0), $62 = Math_fround(0);
 $24 = HEAPF32[$0 + 656 >> 2];
 $22 = HEAPF32[$3 + 40 >> 2];
 $43 = Math_fround($24 * $22);
 $19 = HEAPF32[$0 + 624 >> 2];
 $26 = HEAPF32[$3 + 32 >> 2];
 $20 = HEAPF32[$0 + 640 >> 2];
 $27 = HEAPF32[$3 + 36 >> 2];
 $44 = Math_fround(Math_fround($19 * $26) + Math_fround($20 * $27));
 $28 = HEAPF32[$3 + 24 >> 2];
 $45 = Math_fround($24 * $28);
 $29 = HEAPF32[$3 + 16 >> 2];
 $35 = HEAPF32[$3 + 20 >> 2];
 $46 = Math_fround(Math_fround($19 * $29) + Math_fround($20 * $35));
 $18 = HEAPF32[$0 + 592 >> 2];
 $8 = HEAPF32[$2 + 40 >> 2];
 $47 = Math_fround($18 * $8);
 $30 = HEAPF32[$0 + 560 >> 2];
 $14 = HEAPF32[$2 + 32 >> 2];
 $31 = HEAPF32[$0 + 576 >> 2];
 $15 = HEAPF32[$2 + 36 >> 2];
 $48 = Math_fround(Math_fround($30 * $14) + Math_fround($31 * $15));
 $32 = HEAPF32[$0 + 588 >> 2];
 $49 = Math_fround($32 * $8);
 $21 = HEAPF32[$0 + 556 >> 2];
 $33 = HEAPF32[$0 + 572 >> 2];
 $50 = Math_fround(Math_fround($21 * $14) + Math_fround($33 * $15));
 $10 = HEAPF32[$0 + 584 >> 2];
 $51 = Math_fround($10 * $8);
 $16 = HEAPF32[$0 + 552 >> 2];
 $37 = HEAPF32[$0 + 568 >> 2];
 $52 = Math_fround(Math_fround($16 * $14) + Math_fround($37 * $15));
 $7 = HEAPF32[$2 + 24 >> 2];
 $53 = Math_fround($18 * $7);
 $17 = HEAPF32[$2 + 16 >> 2];
 $12 = HEAPF32[$2 + 20 >> 2];
 $54 = Math_fround(Math_fround($30 * $17) + Math_fround($31 * $12));
 $55 = Math_fround($32 * $7);
 $56 = Math_fround(Math_fround($21 * $17) + Math_fround($33 * $12));
 $57 = Math_fround($10 * $7);
 $58 = Math_fround(Math_fround($16 * $17) + Math_fround($37 * $12));
 $38 = HEAPF32[$0 + 664 >> 2];
 $25 = Math_fround($26 * $38);
 $26 = HEAPF32[$0 + 668 >> 2];
 $25 = Math_fround($25 + Math_fround($27 * $26));
 $27 = HEAPF32[$0 + 672 >> 2];
 $39 = Math_fround(Math_fround($25 + Math_fround($22 * $27)) + HEAPF32[$3 + 56 >> 2]);
 $35 = Math_fround(Math_fround(Math_fround(Math_fround($29 * $38) + Math_fround($35 * $26)) + Math_fround($28 * $27)) + HEAPF32[$3 + 52 >> 2]);
 $22 = HEAPF32[$0 + 600 >> 2];
 $28 = HEAPF32[$0 + 604 >> 2];
 $29 = HEAPF32[$0 + 608 >> 2];
 $25 = HEAPF32[$2 + 56 >> 2];
 $40 = Math_fround(Math_fround(Math_fround(Math_fround($14 * $22) + Math_fround($15 * $28)) + Math_fround($8 * $29)) + $25);
 $8 = Math_fround(Math_fround(Math_fround($17 * $22) + Math_fround($12 * $28)) + Math_fround($7 * $29));
 $7 = HEAPF32[$2 + 52 >> 2];
 $41 = Math_fround($8 + $7);
 $17 = HEAPF32[$3 >> 2];
 $12 = HEAPF32[$3 + 4 >> 2];
 $20 = Math_fround(Math_fround($17 * $19) + Math_fround($12 * $20));
 $19 = HEAPF32[$3 + 8 >> 2];
 $59 = Math_fround($19 * $24);
 $8 = HEAPF32[$2 >> 2];
 $14 = HEAPF32[$2 + 4 >> 2];
 $60 = Math_fround(Math_fround($8 * $30) + Math_fround($14 * $31));
 $15 = HEAPF32[$2 + 8 >> 2];
 $18 = Math_fround($15 * $18);
 $61 = Math_fround(Math_fround($8 * $21) + Math_fround($14 * $33));
 $62 = Math_fround($15 * $32);
 $16 = Math_fround(Math_fround($16 * $8) + Math_fround($37 * $14));
 $10 = Math_fround($10 * $15);
 $21 = Math_fround(HEAPF32[$3 + 48 >> 2] + Math_fround(Math_fround(Math_fround($17 * $38) + Math_fround($12 * $26)) + Math_fround($19 * $27)));
 $33 = Math_fround(HEAPF32[$2 + 48 >> 2] + Math_fround(Math_fround(Math_fround($8 * $22) + Math_fround($14 * $28)) + Math_fround($15 * $29)));
 $13 = HEAP32[$1 + 24 >> 2];
 $23 = HEAPU8[$0 + 736 | 0];
 $9 = $13 << 1;
 label$1 : {
  if ($23) {
   break label$1;
  }
  $6 = HEAP32[$1 + 8 >> 2];
  HEAP32[$6 >> 2] = 1065353216;
  $11 = ($13 << 2) + 4 | 0;
  HEAP32[$11 + $6 >> 2] = 1065353216;
  $9 = ($13 << 3) + 8 | 0;
  HEAP32[$9 + $6 >> 2] = 1065353216;
  $6 = HEAP32[$1 + 16 >> 2];
  HEAP32[$6 >> 2] = -1082130432;
  HEAP32[$6 + $11 >> 2] = -1082130432;
  HEAP32[$6 + $9 >> 2] = -1082130432;
  $25 = HEAPF32[$2 + 56 >> 2];
  $7 = HEAPF32[$2 + 52 >> 2];
  $9 = $13 << 1;
 }
 $30 = Math_fround($44 + $43);
 $31 = Math_fround($46 + $45);
 $8 = Math_fround($48 + $47);
 $17 = Math_fround($50 + $49);
 $12 = Math_fround($52 + $51);
 $14 = Math_fround($54 + $53);
 $24 = Math_fround($56 + $55);
 $19 = Math_fround($58 + $57);
 $32 = Math_fround($20 + $59);
 $15 = Math_fround($60 + $18);
 $20 = Math_fround($61 + $62);
 $18 = Math_fround($16 + $10);
 $10 = HEAPF32[$2 + 48 >> 2];
 $2 = HEAP32[$1 + 12 >> 2];
 HEAP32[$2 + 12 >> 2] = 0;
 $16 = Math_fround($40 - $25);
 HEAPF32[$2 + 4 >> 2] = $16;
 HEAP32[$2 >> 2] = 0;
 $7 = Math_fround($41 - $7);
 HEAPF32[$2 + 8 >> 2] = -$7;
 $11 = $13 << 2;
 $6 = $11 + $2 | 0;
 HEAP32[$6 + 12 >> 2] = 0;
 $10 = Math_fround($33 - $10);
 HEAPF32[$6 + 8 >> 2] = $10;
 HEAP32[$6 + 4 >> 2] = 0;
 HEAPF32[$6 >> 2] = -$16;
 $9 = $9 << 2;
 $6 = $9 + $2 | 0;
 HEAP32[$6 + 8 >> 2] = 0;
 HEAP32[$6 + 12 >> 2] = 0;
 HEAPF32[$6 + 4 >> 2] = -$10;
 HEAPF32[$6 >> 2] = $7;
 $7 = HEAPF32[$3 + 48 >> 2];
 $10 = HEAPF32[$3 + 56 >> 2];
 $16 = HEAPF32[$3 + 52 >> 2];
 $3 = HEAP32[$1 + 20 >> 2];
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 >> 2] = 0;
 $16 = Math_fround($35 - $16);
 HEAPF32[$3 + 8 >> 2] = $16;
 $10 = Math_fround($39 - $10);
 HEAPF32[$3 + 4 >> 2] = -$10;
 $6 = $3 + $11 | 0;
 HEAP32[$6 + 12 >> 2] = 0;
 $7 = Math_fround($21 - $7);
 HEAPF32[$6 + 8 >> 2] = -$7;
 HEAP32[$6 + 4 >> 2] = 0;
 HEAPF32[$6 >> 2] = $10;
 $6 = $3 + $9 | 0;
 HEAP32[$6 + 8 >> 2] = 0;
 HEAP32[$6 + 12 >> 2] = 0;
 HEAPF32[$6 + 4 >> 2] = $7;
 HEAPF32[$6 >> 2] = -$16;
 $10 = HEAPF32[(HEAPU8[$0 + 748 | 0] & 8 ? $0 + 756 | 0 : $1 + 4 | 0) >> 2];
 $7 = Math_fround($10 * HEAPF32[$1 >> 2]);
 $9 = HEAP32[$1 + 28 >> 2];
 if (!$23) {
  HEAPF32[$9 >> 2] = $7 * Math_fround($21 - $33);
  HEAPF32[$9 + $11 >> 2] = $7 * Math_fround($35 - $41);
  HEAPF32[($13 << 3) + $9 >> 2] = $7 * Math_fround($39 - $40);
 }
 $6 = Math_imul($13, 12);
 HEAPF32[$6 + $2 >> 2] = $18;
 $23 = $6 + 8 | 0;
 HEAPF32[$23 + $2 >> 2] = $12;
 $36 = $6 + 4 | 0;
 HEAPF32[$36 + $2 >> 2] = $19;
 $11 = $13 << 4;
 HEAPF32[$11 + $2 >> 2] = $20;
 $34 = $11 | 4;
 HEAPF32[$34 + $2 >> 2] = $24;
 $42 = $11 | 8;
 HEAPF32[$42 + $2 >> 2] = $17;
 HEAPF32[$3 + $6 >> 2] = -$18;
 HEAPF32[$3 + $23 >> 2] = -$12;
 HEAPF32[$3 + $36 >> 2] = -$19;
 HEAPF32[$3 + $11 >> 2] = -$20;
 HEAPF32[$3 + $34 >> 2] = -$24;
 HEAPF32[$3 + $42 >> 2] = -$17;
 $21 = Math_fround(Math_fround($15 * $31) - Math_fround($14 * $32));
 $16 = Math_fround($12 * $21);
 $12 = Math_fround(Math_fround($14 * $30) - Math_fround($8 * $31));
 $22 = Math_fround($18 * $12);
 $18 = Math_fround(Math_fround($8 * $32) - Math_fround($15 * $30));
 HEAPF32[$6 + $9 >> 2] = Math_fround($16 + Math_fround($22 + Math_fround($19 * $18))) * $7;
 HEAPF32[$9 + $11 >> 2] = Math_fround(Math_fround($17 * $21) + Math_fround(Math_fround($20 * $12) + Math_fround($24 * $18))) * $7;
 label$3 : {
  label$4 : {
   if (HEAPU8[$0 + 716 | 0]) {
    $12 = Math_fround(HEAPF32[$0 + 708 >> 2] * HEAPF32[$0 + 732 >> 2]);
    $34 = $12 > Math_fround(0) ? 1 : 2;
    $9 = HEAPU8[$0 + 737 | 0] != 0;
    $11 = 1;
    break label$4;
   }
   if (!HEAPU8[$0 + 737 | 0]) {
    break label$3;
   }
   $12 = Math_fround(0);
   $34 = 0;
   $9 = 1;
   $11 = 0;
  }
  $6 = Math_imul($13, 5);
  $13 = $6 << 2;
  HEAPF32[$13 + $2 >> 2] = $15;
  $23 = $13 + 8 | 0;
  HEAPF32[$23 + $2 >> 2] = $8;
  $36 = $13 + 4 | 0;
  HEAPF32[$36 + $2 >> 2] = $14;
  HEAPF32[$3 + $23 >> 2] = -$8;
  HEAPF32[$3 + $36 >> 2] = -$14;
  HEAPF32[$3 + $13 >> 2] = -$15;
  $3 = $0 + 688 | 0;
  $7 = btAngularLimit__getLow_28_29_20const($3);
  $17 = btAngularLimit__getHigh_28_29_20const($3);
  $2 = HEAP32[$1 + 28 >> 2];
  HEAP32[$13 + $2 >> 2] = 0;
  $13 = $7 != $17;
  $3 = ($13 | $11 ^ 1) & $9;
  $9 = HEAP32[$0 + 748 >> 2];
  if ($9 & 2) {
   $10 = HEAPF32[$0 + 764 >> 2];
  }
  if ($3) {
   if ($9 & 4) {
    HEAP32[HEAP32[$1 + 32 >> 2] + ($6 << 2) >> 2] = HEAP32[$0 + 752 >> 2];
   }
   $7 = btTypedConstraint__getMotorFactor_28float_2c_20float_2c_20float_2c_20float_2c_20float_29($0, HEAPF32[$0 + 728 >> 2], $7, $17, HEAPF32[$0 + 680 >> 2], Math_fround($10 * HEAPF32[$1 >> 2]));
   $2 = HEAP32[$1 + 28 >> 2];
   $3 = $6 << 2;
   $9 = $2 + $3 | 0;
   HEAPF32[$9 >> 2] = Math_fround(Math_fround($7 * HEAPF32[$0 + 680 >> 2]) * HEAPF32[$0 + 732 >> 2]) + HEAPF32[$9 >> 2];
   HEAPF32[HEAP32[$1 + 36 >> 2] + $3 >> 2] = -HEAPF32[$0 + 684 >> 2];
   HEAP32[HEAP32[$1 + 40 >> 2] + $3 >> 2] = HEAP32[$0 + 684 >> 2];
  }
  if (!$11) {
   break label$3;
  }
  $11 = $6 << 2;
  $3 = $11 + $2 | 0;
  HEAPF32[$3 >> 2] = HEAPF32[$3 >> 2] + Math_fround($12 * Math_fround($10 * HEAPF32[$1 >> 2]));
  if (HEAP8[$0 + 748 | 0] & 1) {
   HEAP32[HEAP32[$1 + 32 >> 2] + $11 >> 2] = HEAP32[$0 + 760 >> 2];
  }
  label$10 : {
   if (!$13) {
    HEAP32[HEAP32[$1 + 36 >> 2] + ($6 << 2) >> 2] = -8388609;
    $7 = Math_fround(3.4028234663852886e+38);
    break label$10;
   }
   $2 = HEAP32[$1 + 36 >> 2] + ($6 << 2) | 0;
   if (($34 | 0) == 1) {
    HEAP32[$2 >> 2] = 0;
    $7 = Math_fround(3.4028234663852886e+38);
    break label$10;
   }
   HEAP32[$2 >> 2] = -8388609;
   $7 = Math_fround(0);
  }
  HEAPF32[HEAP32[$1 + 40 >> 2] + ($6 << 2) >> 2] = $7;
  $7 = HEAPF32[$0 + 704 >> 2];
  label$13 : {
   if (!($7 > Math_fround(0))) {
    break label$13;
   }
   $8 = Math_fround(Math_fround(Math_fround(Math_fround($15 * HEAPF32[$4 >> 2]) + Math_fround($14 * HEAPF32[$4 + 4 >> 2])) + Math_fround($8 * HEAPF32[$4 + 8 >> 2])) - Math_fround(Math_fround(Math_fround($15 * HEAPF32[$5 >> 2]) + Math_fround($14 * HEAPF32[$5 + 4 >> 2])) + Math_fround($8 * HEAPF32[$5 + 8 >> 2])));
   if (($34 | 0) == 1) {
    if (!($8 < Math_fround(0))) {
     break label$13;
    }
    $8 = Math_fround($8 * Math_fround(-$7));
    if (!($8 > HEAPF32[$3 >> 2])) {
     break label$13;
    }
    HEAPF32[$3 >> 2] = $8;
    break label$13;
   }
   if (!($8 > Math_fround(0))) {
    break label$13;
   }
   $8 = Math_fround($8 * Math_fround(-$7));
   if (!($8 < HEAPF32[$3 >> 2])) {
    break label$13;
   }
   HEAPF32[$3 >> 2] = $8;
  }
  HEAPF32[$3 >> 2] = HEAPF32[$0 + 700 >> 2] * HEAPF32[$3 >> 2];
 }
}
function btGeneric6DofSpring2Constraint__get_limit_motor_info2_28btRotationalLimitMotor2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btVector3__2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12) {
 var $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0);
 $9 = Math_imul(HEAP32[$8 + 24 >> 2], $9);
 $16 = HEAP32[$1 + 84 >> 2] + -3 | 0;
 label$1 : {
  if ($16 >>> 0 > 1) {
   $16 = 0;
   break label$1;
  }
  label$3 : {
   if (!($16 - 1)) {
    label$5 : {
     if ($11) {
      $17 = HEAPF32[$10 + 8 >> 2];
      $23 = Math_fround(HEAPF32[$6 + 8 >> 2] * $17);
      $16 = $7;
      $13 = HEAPF32[$10 >> 2];
      $15 = HEAPF32[$10 + 4 >> 2];
      $19 = Math_fround(Math_fround(HEAPF32[$6 >> 2] * $13) + Math_fround(HEAPF32[$6 + 4 >> 2] * $15));
      break label$5;
     }
     $17 = HEAPF32[$10 + 8 >> 2];
     $23 = Math_fround(HEAPF32[$4 + 8 >> 2] * $17);
     $16 = $5;
     $13 = HEAPF32[$10 >> 2];
     $15 = HEAPF32[$10 + 4 >> 2];
     $19 = Math_fround(Math_fround(HEAPF32[$4 >> 2] * $13) + Math_fround(HEAPF32[$4 + 4 >> 2] * $15));
    }
    $20 = HEAPF32[$16 + 8 >> 2];
    $24 = HEAPF32[$16 >> 2];
    $21 = HEAPF32[$16 + 4 >> 2];
    btGeneric6DofSpring2Constraint__calculateJacobi_28btRotationalLimitMotor2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btVector3__2c_20int_2c_20int_29($0, $1, $2, $3, $8, $9, $10, $11, $12);
    $16 = HEAP32[$8 + 28 >> 2] + ($9 << 2) | 0;
    $22 = Math_fround(($11 ? -1 : 1) | 0);
    $14 = Math_fround(Math_fround(Math_fround(HEAPF32[$8 >> 2] * HEAPF32[$1 + 12 >> 2]) * HEAPF32[$1 + 72 >> 2]) * $22);
    HEAPF32[$16 >> 2] = $14;
    $13 = Math_fround(Math_fround($19 + $23) - Math_fround(Math_fround(Math_fround($13 * $24) + Math_fround($15 * $21)) + Math_fround($17 * $20)));
    $15 = Math_fround($14 - Math_fround($13 * HEAPF32[$1 + 12 >> 2]));
    label$7 : {
     if ($11) {
      if (!($15 > Math_fround(0))) {
       break label$7;
      }
      $15 = Math_fround($13 * Math_fround(-HEAPF32[$1 + 8 >> 2]));
      if (!($15 > $14)) {
       break label$7;
      }
      HEAPF32[$16 >> 2] = $15;
      break label$7;
     }
     if (!($15 < Math_fround(0))) {
      break label$7;
     }
     $15 = Math_fround($13 * Math_fround(-HEAPF32[$1 + 8 >> 2]));
     if (!($15 < $14)) {
      break label$7;
     }
     HEAPF32[$16 >> 2] = $15;
    }
    $16 = $9 << 2;
    HEAPF32[$16 + HEAP32[$8 + 36 >> 2] >> 2] = $11 ? Math_fround(0) : Math_fround(-3.4028234663852886e+38);
    HEAPF32[HEAP32[$8 + 40 >> 2] + $16 >> 2] = $11 ? Math_fround(3.4028234663852886e+38) : Math_fround(0);
    HEAP32[HEAP32[$8 + 32 >> 2] + $16 >> 2] = HEAP32[$1 + 16 >> 2];
    $9 = HEAP32[$8 + 24 >> 2] + $9 | 0;
    btGeneric6DofSpring2Constraint__calculateJacobi_28btRotationalLimitMotor2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btVector3__2c_20int_2c_20int_29($0, $1, $2, $3, $8, $9, $10, $11, $12);
    $16 = HEAP32[$8 + 28 >> 2] + ($9 << 2) | 0;
    $14 = Math_fround(Math_fround(Math_fround(HEAPF32[$8 >> 2] * HEAPF32[$1 + 12 >> 2]) * HEAPF32[$1 + 76 >> 2]) * $22);
    HEAPF32[$16 >> 2] = $14;
    $15 = Math_fround($14 - Math_fround($13 * HEAPF32[$1 + 12 >> 2]));
    $18 = $1 + 16 | 0;
    label$9 : {
     if ($11) {
      if (!($15 < Math_fround(0))) {
       break label$9;
      }
      $13 = Math_fround($13 * Math_fround(-HEAPF32[$1 + 8 >> 2]));
      if (!($13 < $14)) {
       break label$9;
      }
      HEAPF32[$16 >> 2] = $13;
      break label$9;
     }
     if (!($15 > Math_fround(0))) {
      break label$9;
     }
     $13 = Math_fround($13 * Math_fround(-HEAPF32[$1 + 8 >> 2]));
     if (!($13 > $14)) {
      break label$9;
     }
     HEAPF32[$16 >> 2] = $13;
    }
    $16 = $9 << 2;
    HEAPF32[$16 + HEAP32[$8 + 36 >> 2] >> 2] = $11 ? Math_fround(-3.4028234663852886e+38) : Math_fround(0);
    HEAPF32[HEAP32[$8 + 40 >> 2] + $16 >> 2] = $11 ? Math_fround(0) : Math_fround(3.4028234663852886e+38);
    $16 = 2;
    break label$3;
   }
   btGeneric6DofSpring2Constraint__calculateJacobi_28btRotationalLimitMotor2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btVector3__2c_20int_2c_20int_29($0, $1, $2, $3, $8, $9, $10, $11, $12);
   $18 = $9 << 2;
   HEAPF32[$18 + HEAP32[$8 + 28 >> 2] >> 2] = Math_fround(Math_fround(HEAPF32[$8 >> 2] * HEAPF32[$1 + 12 >> 2]) * HEAPF32[$1 + 72 >> 2]) * Math_fround(($11 ? -1 : 1) | 0);
   HEAP32[HEAP32[$8 + 36 >> 2] + $18 >> 2] = -8388609;
   HEAP32[HEAP32[$8 + 40 >> 2] + $18 >> 2] = 2139095039;
   $18 = $1 + 16 | 0;
   $16 = 1;
  }
  HEAP32[HEAP32[$8 + 32 >> 2] + ($9 << 2) >> 2] = HEAP32[$18 >> 2];
  $9 = HEAP32[$8 + 24 >> 2] + $9 | 0;
 }
 label$11 : {
  if (!HEAPU8[$1 + 28 | 0]) {
   break label$11;
  }
  if (!HEAPU8[$1 + 40 | 0]) {
   btGeneric6DofSpring2Constraint__calculateJacobi_28btRotationalLimitMotor2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btVector3__2c_20int_2c_20int_29($0, $1, $2, $3, $8, $9, $10, $11, $12);
   $13 = HEAPF32[$1 + 32 >> 2];
   $13 = btTypedConstraint__getMotorFactor_28float_2c_20float_2c_20float_2c_20float_2c_20float_29($0, HEAPF32[$1 + 80 >> 2], HEAPF32[$1 >> 2], HEAPF32[$1 + 4 >> 2], $11 ? $13 : Math_fround(-$13), Math_fround(HEAPF32[$8 >> 2] * HEAPF32[$1 + 20 >> 2]));
   $18 = $9 << 2;
   HEAPF32[$18 + HEAP32[$8 + 28 >> 2] >> 2] = $13 * HEAPF32[$1 + 32 >> 2];
   HEAPF32[HEAP32[$8 + 36 >> 2] + $18 >> 2] = -HEAPF32[$1 + 36 >> 2];
   HEAP32[HEAP32[$8 + 40 >> 2] + $18 >> 2] = HEAP32[$1 + 36 >> 2];
   HEAP32[HEAP32[$8 + 32 >> 2] + $18 >> 2] = HEAP32[$1 + 24 >> 2];
   $16 = $16 + 1 | 0;
   $9 = HEAP32[$8 + 24 >> 2] + $9 | 0;
   if (!HEAPU8[$1 + 28 | 0] | !HEAPU8[$1 + 40 | 0]) {
    break label$11;
   }
  }
  $14 = HEAPF32[$1 + 44 >> 2];
  $13 = Math_fround(HEAPF32[$1 + 80 >> 2] - $14);
  label$13 : {
   if (!$11) {
    break label$13;
   }
   $18 = $13 > Math_fround(3.1415927410125732);
   $14 = $18 ? Math_fround($14 + Math_fround(6.2831854820251465)) : $14;
   $13 = $18 ? Math_fround($13 + Math_fround(-6.2831854820251465)) : $13;
   if (!($13 < Math_fround(-3.1415927410125732))) {
    break label$13;
   }
   $14 = Math_fround($14 + Math_fround(-6.2831854820251465));
   $13 = Math_fround($13 + Math_fround(6.2831854820251465));
  }
  btGeneric6DofSpring2Constraint__calculateJacobi_28btRotationalLimitMotor2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btVector3__2c_20int_2c_20int_29($0, $1, $2, $3, $8, $9, $10, $11, $12);
  $15 = Math_fround(0);
  $19 = HEAPF32[$1 + 32 >> 2];
  $19 = $13 < Math_fround(0) ? Math_fround(-$19) : $19;
  if ($13 != Math_fround(0)) {
   $23 = Math_fround(-$19);
   $18 = $0;
   $20 = HEAPF32[$1 + 80 >> 2];
   $15 = HEAPF32[$1 >> 2];
   $17 = HEAPF32[$1 + 4 >> 2];
   label$15 : {
    if (!!($15 > $17)) {
     $21 = $13 > Math_fround(0) ? $14 : Math_fround(-3.4028234663852886e+38);
     $17 = $13 < Math_fround(0) ? $14 : Math_fround(3.4028234663852886e+38);
     break label$15;
    }
    $21 = $13 > Math_fround(0) ? $14 > $15 ? $14 : $15 : $15;
    $17 = $13 < Math_fround(0) ? $14 < $17 ? $14 : $17 : $17;
   }
   $13 = $21;
   $15 = btTypedConstraint__getMotorFactor_28float_2c_20float_2c_20float_2c_20float_2c_20float_29($18, $20, $13, $17, $23, Math_fround(HEAPF32[$8 >> 2] * HEAPF32[$1 + 20 >> 2]));
  }
  $18 = $9 << 2;
  HEAPF32[$18 + HEAP32[$8 + 28 >> 2] >> 2] = Math_fround($19 * $15) * Math_fround(($11 ? -1 : 1) | 0);
  HEAPF32[HEAP32[$8 + 36 >> 2] + $18 >> 2] = -HEAPF32[$1 + 36 >> 2];
  HEAP32[HEAP32[$8 + 40 >> 2] + $18 >> 2] = HEAP32[$1 + 36 >> 2];
  HEAP32[HEAP32[$8 + 32 >> 2] + $18 >> 2] = HEAP32[$1 + 24 >> 2];
  $16 = $16 + 1 | 0;
  $9 = HEAP32[$8 + 24 >> 2] + $9 | 0;
 }
 if (HEAPU8[$1 + 48 | 0]) {
  $14 = HEAPF32[$1 + 68 >> 2];
  $17 = HEAPF32[$1 + 80 >> 2];
  btGeneric6DofSpring2Constraint__calculateJacobi_28btRotationalLimitMotor2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btVector3__2c_20int_2c_20int_29($0, $1, $2, $3, $8, $9, $10, $11, $12);
  $19 = HEAPF32[$1 + 52 >> 2];
  $15 = HEAPF32[$1 + 60 >> 2];
  $13 = HEAPF32[$8 >> 2];
  $13 = Math_fround(Math_fround(1) / $13);
  $23 = Math_fround($17 - $14);
  label$18 : {
   if ($11) {
    $20 = HEAPF32[$10 >> 2];
    $24 = HEAPF32[$10 + 4 >> 2];
    $21 = Math_fround(Math_fround(HEAPF32[$6 >> 2] * $20) + Math_fround(HEAPF32[$6 + 4 >> 2] * $24));
    $22 = HEAPF32[$10 + 8 >> 2];
    $17 = Math_fround(HEAPF32[$6 + 8 >> 2] * $22);
    break label$18;
   }
   $7 = $5;
   $20 = HEAPF32[$10 >> 2];
   $24 = HEAPF32[$10 + 4 >> 2];
   $21 = Math_fround(Math_fround(HEAPF32[$4 >> 2] * $20) + Math_fround(HEAPF32[$4 + 4 >> 2] * $24));
   $22 = HEAPF32[$10 + 8 >> 2];
   $17 = Math_fround(HEAPF32[$4 + 8 >> 2] * $22);
  }
  $10 = $9 << 2;
  $2 = $10 + HEAP32[$8 + 28 >> 2] | 0;
  $17 = Math_fround(Math_fround($21 + $17) - Math_fround(Math_fround(Math_fround($20 * HEAPF32[$7 >> 2]) + Math_fround($24 * HEAPF32[$7 + 4 >> 2])) + Math_fround($22 * HEAPF32[$7 + 8 >> 2])));
  $21 = $17;
  $14 = Math_fround(Math_fround(1) / HEAPF32[HEAP32[$0 + 32 >> 2] + 404 >> 2]);
  $20 = Math_fround(Math_fround(1) / HEAPF32[HEAP32[$0 + 28 >> 2] + 404 >> 2]);
  $14 = $20 > $14 ? $14 : $20;
  if (!(!HEAPU8[$1 + 56 | 0] | Math_fround($13 * Math_fround(Math_sqrt(Math_fround($19 / $14)))) > Math_fround(.25) ^ 1)) {
   $19 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(1) / $13) / $13) * Math_fround(.0625)) * $14);
  }
  $19 = Math_fround($13 * Math_fround($23 * $19));
  $17 = Math_fround($17 * Math_fround(-(Math_fround($15 * $13) > $14 ? HEAPU8[$1 + 64 | 0] ? Math_fround($14 / $13) : $15 : $15)));
  $15 = Math_fround(($11 ? -1 : 1) | 0);
  $13 = Math_fround($13 * Math_fround($17 * $15));
  $14 = Math_fround($19 + $13);
  HEAPF32[$2 >> 2] = $21 + Math_fround($14 * $15);
  $1 = $14 < $13;
  $15 = $1 ? $13 : $14;
  $13 = $1 ? $14 : $13;
  label$21 : {
   if (!$11) {
    HEAPF32[HEAP32[$8 + 36 >> 2] + $10 >> 2] = Math_min($13, Math_fround(0));
    break label$21;
   }
   HEAPF32[HEAP32[$8 + 36 >> 2] + $10 >> 2] = Math_min(Math_fround(-$15), Math_fround(0));
   $15 = Math_fround(-$13);
  }
  $1 = $9 << 2;
  HEAPF32[$1 + HEAP32[$8 + 40 >> 2] >> 2] = Math_max($15, Math_fround(0));
  HEAP32[HEAP32[$8 + 32 >> 2] + $1 >> 2] = 0;
  $16 = $16 + 1 | 0;
 }
 return $16;
}
function btVoronoiSimplexSolver__updateClosestVectorAndPoints_28_29($0) {
 var $1 = Math_fround(0), $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0);
 $12 = global$0 - 16 | 0;
 $4 = $12;
 if ($12 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 label$2 : {
  if (!HEAPU8[$0 + 356 | 0]) {
   $3 = HEAPU8[$0 + 312 | 0];
   break label$2;
  }
  HEAP8[$0 + 356 | 0] = 0;
  HEAP8[$0 + 352 | 0] = 0;
  HEAP32[$0 + 344 >> 2] = 0;
  HEAP32[$0 + 348 >> 2] = 0;
  HEAP32[$0 + 336 >> 2] = 0;
  HEAP32[$0 + 340 >> 2] = 0;
  $4 = $0 + 332 | 0;
  $14 = HEAPU8[$0 + 332 | 0] & -16;
  HEAP8[$4 | 0] = $14;
  $4 = HEAP32[$0 >> 2];
  label$4 : {
   if ($4 >>> 0 > 4) {
    break label$4;
   }
   $3 = $0 + 316 | 0;
   label$5 : {
    label$6 : {
     label$7 : {
      switch ($4 - 1 | 0) {
      case 1:
       $1 = HEAPF32[$0 + 4 >> 2];
       $5 = Math_fround(HEAPF32[$0 + 20 >> 2] - $1);
       $7 = Math_fround(Math_fround(Math_fround(0) - $1) * $5);
       $1 = HEAPF32[$0 + 8 >> 2];
       $6 = Math_fround(HEAPF32[$0 + 24 >> 2] - $1);
       $3 = 1;
       $7 = Math_fround($7 + Math_fround(Math_fround(Math_fround(0) - $1) * $6));
       $1 = HEAPF32[$0 + 12 >> 2];
       $8 = Math_fround(Math_fround(0) - $1);
       $1 = Math_fround(HEAPF32[$0 + 28 >> 2] - $1);
       $7 = Math_fround($7 + Math_fround($8 * $1));
       label$11 : {
        if (!($7 > Math_fround(0))) {
         break label$11;
        }
        $2 = Math_fround(Math_fround(Math_fround($5 * $5) + Math_fround($6 * $6)) + Math_fround($1 * $1));
        if (!($7 < $2)) {
         $2 = Math_fround(1);
         $3 = 2;
         break label$11;
        }
        $2 = Math_fround($7 / $2);
        $3 = 3;
       }
       HEAP32[$0 + 344 >> 2] = 0;
       HEAP32[$0 + 348 >> 2] = 0;
       HEAPF32[$0 + 340 >> 2] = $2;
       HEAPF32[$0 + 336 >> 2] = Math_fround(1) - $2;
       HEAP8[$0 + 332 | 0] = $3 | $14;
       $3 = 0;
       HEAP32[$0 + 256 >> 2] = 0;
       $1 = HEAPF32[$0 + 92 >> 2];
       $7 = Math_fround($1 + Math_fround($2 * Math_fround(HEAPF32[$0 + 108 >> 2] - $1)));
       HEAPF32[$0 + 252 >> 2] = $7;
       $1 = HEAPF32[$0 + 88 >> 2];
       $8 = Math_fround($1 + Math_fround($2 * Math_fround(HEAPF32[$0 + 104 >> 2] - $1)));
       HEAPF32[$0 + 248 >> 2] = $8;
       $1 = HEAPF32[$0 + 84 >> 2];
       $9 = Math_fround($1 + Math_fround($2 * Math_fround(HEAPF32[$0 + 100 >> 2] - $1)));
       HEAPF32[$0 + 244 >> 2] = $9;
       $10 = HEAPF32[$0 + 180 >> 2];
       $11 = HEAPF32[$0 + 184 >> 2];
       $1 = HEAPF32[$0 + 168 >> 2];
       $15 = HEAPF32[$0 + 188 >> 2];
       $5 = HEAPF32[$0 + 172 >> 2];
       $6 = HEAPF32[$0 + 164 >> 2];
       HEAP32[$0 + 288 >> 2] = 0;
       $5 = Math_fround($5 + Math_fround($2 * Math_fround($15 - $5)));
       HEAPF32[$0 + 284 >> 2] = $7 - $5;
       $1 = Math_fround($1 + Math_fround($2 * Math_fround($11 - $1)));
       HEAPF32[$0 + 280 >> 2] = $8 - $1;
       $2 = Math_fround($6 + Math_fround($2 * Math_fround($10 - $6)));
       HEAPF32[$0 + 276 >> 2] = $9 - $2;
       HEAP32[$0 + 272 >> 2] = 0;
       HEAPF32[$0 + 268 >> 2] = $5;
       HEAPF32[$0 + 264 >> 2] = $1;
       HEAPF32[$0 + 260 >> 2] = $2;
       btVoronoiSimplexSolver__reduceVertices_28btUsageBitfield_20const__29($0, $0 + 332 | 0);
       if (HEAPF32[$0 + 336 >> 2] >= Math_fround(0) ^ 1 | HEAPF32[$0 + 340 >> 2] >= Math_fround(0) ^ 1 | HEAPF32[$0 + 344 >> 2] >= Math_fround(0) ^ 1) {
        break label$4;
       }
       $3 = HEAPF32[$0 + 348 >> 2] >= Math_fround(0);
       break label$4;
      case 2:
       $4 = $12;
       HEAP32[$4 + 8 >> 2] = 0;
       HEAP32[$4 + 12 >> 2] = 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       btVoronoiSimplexSolver__closestPtPointTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btSubSimplexClosestResult__29($0, $4, $0 + 4 | 0, $0 + 20 | 0, $0 + 36 | 0, $3);
       $3 = 0;
       HEAP32[$0 + 256 >> 2] = 0;
       $2 = HEAPF32[$0 + 336 >> 2];
       $1 = HEAPF32[$0 + 340 >> 2];
       $5 = HEAPF32[$0 + 344 >> 2];
       $6 = Math_fround(Math_fround(Math_fround($2 * HEAPF32[$0 + 92 >> 2]) + Math_fround($1 * HEAPF32[$0 + 108 >> 2])) + Math_fround($5 * HEAPF32[$0 + 124 >> 2]));
       HEAPF32[$0 + 252 >> 2] = $6;
       $7 = Math_fround(Math_fround(Math_fround($2 * HEAPF32[$0 + 88 >> 2]) + Math_fround($1 * HEAPF32[$0 + 104 >> 2])) + Math_fround($5 * HEAPF32[$0 + 120 >> 2]));
       HEAPF32[$0 + 248 >> 2] = $7;
       $8 = Math_fround(Math_fround(Math_fround($2 * HEAPF32[$0 + 84 >> 2]) + Math_fround($1 * HEAPF32[$0 + 100 >> 2])) + Math_fround($5 * HEAPF32[$0 + 116 >> 2]));
       HEAPF32[$0 + 244 >> 2] = $8;
       $9 = HEAPF32[$0 + 180 >> 2];
       $10 = HEAPF32[$0 + 196 >> 2];
       $11 = HEAPF32[$0 + 168 >> 2];
       $15 = HEAPF32[$0 + 184 >> 2];
       $17 = HEAPF32[$0 + 200 >> 2];
       $13 = HEAPF32[$0 + 172 >> 2];
       $18 = HEAPF32[$0 + 188 >> 2];
       $19 = HEAPF32[$0 + 204 >> 2];
       $20 = HEAPF32[$0 + 164 >> 2];
       HEAP32[$0 + 288 >> 2] = 0;
       $13 = Math_fround(Math_fround(Math_fround($2 * $13) + Math_fround($1 * $18)) + Math_fround($5 * $19));
       HEAPF32[$0 + 284 >> 2] = $6 - $13;
       $6 = Math_fround(Math_fround(Math_fround($2 * $11) + Math_fround($1 * $15)) + Math_fround($5 * $17));
       HEAPF32[$0 + 280 >> 2] = $7 - $6;
       $2 = Math_fround(Math_fround(Math_fround($2 * $20) + Math_fround($1 * $9)) + Math_fround($5 * $10));
       HEAPF32[$0 + 276 >> 2] = $8 - $2;
       HEAP32[$0 + 272 >> 2] = 0;
       HEAPF32[$0 + 268 >> 2] = $13;
       HEAPF32[$0 + 264 >> 2] = $6;
       HEAPF32[$0 + 260 >> 2] = $2;
       btVoronoiSimplexSolver__reduceVertices_28btUsageBitfield_20const__29($0, $0 + 332 | 0);
       if (HEAPF32[$0 + 336 >> 2] >= Math_fround(0) ^ 1 | HEAPF32[$0 + 340 >> 2] >= Math_fround(0) ^ 1 | HEAPF32[$0 + 344 >> 2] >= Math_fround(0) ^ 1) {
        break label$4;
       }
       $3 = HEAPF32[$0 + 348 >> 2] >= Math_fround(0);
       break label$4;
      case 3:
       $4 = $12;
       HEAP32[$4 + 8 >> 2] = 0;
       HEAP32[$4 + 12 >> 2] = 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       if (btVoronoiSimplexSolver__closestPtPointTetrahedron_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btSubSimplexClosestResult__29($0, $4, $0 + 4 | 0, $0 + 20 | 0, $0 + 36 | 0, $0 + 52 | 0, $3)) {
        $3 = 0;
        HEAP32[$0 + 256 >> 2] = 0;
        $2 = HEAPF32[$0 + 336 >> 2];
        $1 = HEAPF32[$0 + 340 >> 2];
        $5 = HEAPF32[$0 + 344 >> 2];
        $6 = HEAPF32[$0 + 348 >> 2];
        $7 = Math_fround(Math_fround(Math_fround(Math_fround($2 * HEAPF32[$0 + 92 >> 2]) + Math_fround($1 * HEAPF32[$0 + 108 >> 2])) + Math_fround($5 * HEAPF32[$0 + 124 >> 2])) + Math_fround($6 * HEAPF32[$0 + 140 >> 2]));
        HEAPF32[$0 + 252 >> 2] = $7;
        $8 = Math_fround(Math_fround(Math_fround(Math_fround($2 * HEAPF32[$0 + 88 >> 2]) + Math_fround($1 * HEAPF32[$0 + 104 >> 2])) + Math_fround($5 * HEAPF32[$0 + 120 >> 2])) + Math_fround($6 * HEAPF32[$0 + 136 >> 2]));
        HEAPF32[$0 + 248 >> 2] = $8;
        $9 = Math_fround(Math_fround(Math_fround(Math_fround($2 * HEAPF32[$0 + 84 >> 2]) + Math_fround($1 * HEAPF32[$0 + 100 >> 2])) + Math_fround($5 * HEAPF32[$0 + 116 >> 2])) + Math_fround($6 * HEAPF32[$0 + 132 >> 2]));
        HEAPF32[$0 + 244 >> 2] = $9;
        HEAP32[$0 + 288 >> 2] = 0;
        HEAP32[$0 + 272 >> 2] = 0;
        $10 = Math_fround(Math_fround(Math_fround(Math_fround($2 * HEAPF32[$0 + 164 >> 2]) + Math_fround($1 * HEAPF32[$0 + 180 >> 2])) + Math_fround($5 * HEAPF32[$0 + 196 >> 2])) + Math_fround($6 * HEAPF32[$0 + 212 >> 2]));
        HEAPF32[$0 + 260 >> 2] = $10;
        $11 = Math_fround(Math_fround(Math_fround(Math_fround($2 * HEAPF32[$0 + 168 >> 2]) + Math_fround($1 * HEAPF32[$0 + 184 >> 2])) + Math_fround($5 * HEAPF32[$0 + 200 >> 2])) + Math_fround($6 * HEAPF32[$0 + 216 >> 2]));
        HEAPF32[$0 + 264 >> 2] = $11;
        $2 = Math_fround(Math_fround(Math_fround(Math_fround($2 * HEAPF32[$0 + 172 >> 2]) + Math_fround($1 * HEAPF32[$0 + 188 >> 2])) + Math_fround($5 * HEAPF32[$0 + 204 >> 2])) + Math_fround($6 * HEAPF32[$0 + 220 >> 2]));
        HEAPF32[$0 + 268 >> 2] = $2;
        HEAPF32[$0 + 276 >> 2] = $9 - $10;
        HEAPF32[$0 + 280 >> 2] = $8 - $11;
        HEAPF32[$0 + 284 >> 2] = $7 - $2;
        btVoronoiSimplexSolver__reduceVertices_28btUsageBitfield_20const__29($0, $0 + 332 | 0);
        if (HEAPF32[$0 + 336 >> 2] >= Math_fround(0) ^ 1 | HEAPF32[$0 + 340 >> 2] >= Math_fround(0) ^ 1 | HEAPF32[$0 + 344 >> 2] >= Math_fround(0) ^ 1) {
         break label$4;
        }
        $3 = HEAPF32[$0 + 348 >> 2] >= Math_fround(0);
        break label$4;
       }
       if (!HEAPU8[$0 + 352 | 0]) {
        break label$6;
       }
       break;
      case 0:
       break label$5;
      default:
       break label$7;
      }
     }
     $3 = 0;
     break label$4;
    }
    HEAP32[$0 + 276 >> 2] = 0;
    HEAP32[$0 + 280 >> 2] = 0;
    $3 = 1;
    HEAP8[$0 + 312 | 0] = 1;
    HEAP32[$0 + 284 >> 2] = 0;
    HEAP32[$0 + 288 >> 2] = 0;
    break label$2;
   }
   $4 = HEAP32[$0 + 168 >> 2];
   $3 = HEAP32[$0 + 164 >> 2];
   HEAP32[$0 + 260 >> 2] = $3;
   HEAP32[$0 + 264 >> 2] = $4;
   $3 = HEAP32[$0 + 88 >> 2];
   $4 = HEAP32[$0 + 84 >> 2];
   HEAP32[$0 + 244 >> 2] = $4;
   HEAP32[$0 + 248 >> 2] = $3;
   $4 = HEAP32[$0 + 176 >> 2];
   $3 = HEAP32[$0 + 172 >> 2];
   $16 = $3;
   $3 = $0 + 268 | 0;
   HEAP32[$3 >> 2] = $16;
   HEAP32[$3 + 4 >> 2] = $4;
   $3 = HEAP32[$0 + 96 >> 2];
   $4 = HEAP32[$0 + 92 >> 2];
   $16 = $4;
   $4 = $0 + 252 | 0;
   HEAP32[$4 >> 2] = $16;
   HEAP32[$4 + 4 >> 2] = $3;
   HEAP8[$0 + 352 | 0] = 0;
   HEAP32[$0 + 288 >> 2] = 0;
   HEAPF32[$0 + 280 >> 2] = HEAPF32[$0 + 248 >> 2] - HEAPF32[$0 + 264 >> 2];
   HEAPF32[$0 + 276 >> 2] = HEAPF32[$0 + 244 >> 2] - HEAPF32[$0 + 260 >> 2];
   HEAPF32[$0 + 284 >> 2] = HEAPF32[$0 + 252 >> 2] - HEAPF32[$0 + 268 >> 2];
   HEAP32[$0 + 344 >> 2] = 0;
   HEAP32[$0 + 348 >> 2] = 0;
   HEAP32[$0 + 336 >> 2] = 1065353216;
   HEAP32[$0 + 340 >> 2] = 0;
   HEAP8[$0 + 332 | 0] = $14;
   $3 = 1;
  }
  HEAP8[$0 + 312 | 0] = $3;
 }
 $0 = $12 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return ($3 & 255) != 0;
}
function btStridingMeshInterface__InternalProcessAllTriangles_28btInternalTriangleIndexCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $2 = global$0 - 80 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $18 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 if (($18 | 0) >= 1) {
  $8 = HEAPF32[$0 + 12 >> 2];
  $9 = HEAPF32[$0 + 8 >> 2];
  $10 = HEAPF32[$0 + 4 >> 2];
  while (1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $2 + 76 | 0, $2 + 52 | 0, $2 - -64 | 0, $2 + 56 | 0, $2 + 72 | 0, $2 + 68 | 0, $2 + 48 | 0, $2 + 60 | 0, $17);
   $5 = HEAP32[$2 + 64 >> 2];
   label$4 : {
    if ($5 >>> 0 > 1) {
     break label$4;
    }
    if ($5 - 1) {
     $5 = HEAP32[$2 + 60 >> 2] + -2 | 0;
     if ($5 >>> 0 > 3) {
      break label$4;
     }
     label$6 : {
      switch ($5 - 1 | 0) {
      default:
       $5 = 0;
       if (HEAP32[$2 + 48 >> 2] < 1) {
        break label$4;
       }
       while (1) {
        $3 = HEAP32[$2 + 76 >> 2];
        $6 = HEAP32[$2 + 56 >> 2];
        $7 = HEAP32[$2 + 72 >> 2] + Math_imul(HEAP32[$2 + 68 >> 2], $5) | 0;
        $4 = $3 + Math_imul($6, HEAP32[$7 >> 2]) | 0;
        $11 = HEAPF32[$4 >> 2];
        $12 = HEAPF32[$4 + 4 >> 2];
        $13 = HEAPF32[$4 + 8 >> 2];
        HEAP32[$2 + 12 >> 2] = 0;
        HEAPF32[$2 + 8 >> 2] = $8 * $13;
        HEAPF32[$2 + 4 >> 2] = $9 * $12;
        HEAPF32[$2 >> 2] = $10 * $11;
        $4 = Math_imul(HEAP32[$7 + 4 >> 2], $6) + $3 | 0;
        $11 = HEAPF32[$4 >> 2];
        $12 = HEAPF32[$4 + 4 >> 2];
        $13 = HEAPF32[$4 + 8 >> 2];
        HEAP32[$2 + 28 >> 2] = 0;
        HEAPF32[$2 + 24 >> 2] = $8 * $13;
        HEAPF32[$2 + 20 >> 2] = $9 * $12;
        HEAPF32[$2 + 16 >> 2] = $10 * $11;
        $3 = Math_imul(HEAP32[$7 + 8 >> 2], $6) + $3 | 0;
        $11 = HEAPF32[$3 >> 2];
        $12 = HEAPF32[$3 + 4 >> 2];
        $13 = HEAPF32[$3 + 8 >> 2];
        HEAP32[$2 + 44 >> 2] = 0;
        HEAPF32[$2 + 40 >> 2] = $8 * $13;
        HEAPF32[$2 + 36 >> 2] = $9 * $12;
        HEAPF32[$2 + 32 >> 2] = $10 * $11;
        FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $2, $17, $5);
        $5 = $5 + 1 | 0;
        if (($5 | 0) < HEAP32[$2 + 48 >> 2]) {
         continue;
        }
        break;
       }
       break label$4;
      case 0:
       $5 = 0;
       if (HEAP32[$2 + 48 >> 2] <= 0) {
        break label$4;
       }
       while (1) {
        $3 = HEAP32[$2 + 76 >> 2];
        $6 = HEAP32[$2 + 56 >> 2];
        $7 = HEAP32[$2 + 72 >> 2] + Math_imul(HEAP32[$2 + 68 >> 2], $5) | 0;
        $4 = $3 + Math_imul($6, HEAPU16[$7 >> 1]) | 0;
        $11 = HEAPF32[$4 >> 2];
        $12 = HEAPF32[$4 + 4 >> 2];
        $13 = HEAPF32[$4 + 8 >> 2];
        HEAP32[$2 + 12 >> 2] = 0;
        HEAPF32[$2 + 8 >> 2] = $8 * $13;
        HEAPF32[$2 + 4 >> 2] = $9 * $12;
        HEAPF32[$2 >> 2] = $10 * $11;
        $4 = Math_imul(HEAPU16[$7 + 2 >> 1], $6) + $3 | 0;
        $11 = HEAPF32[$4 >> 2];
        $12 = HEAPF32[$4 + 4 >> 2];
        $13 = HEAPF32[$4 + 8 >> 2];
        HEAP32[$2 + 28 >> 2] = 0;
        HEAPF32[$2 + 24 >> 2] = $8 * $13;
        HEAPF32[$2 + 20 >> 2] = $9 * $12;
        HEAPF32[$2 + 16 >> 2] = $10 * $11;
        $3 = Math_imul(HEAPU16[$7 + 4 >> 1], $6) + $3 | 0;
        $11 = HEAPF32[$3 >> 2];
        $12 = HEAPF32[$3 + 4 >> 2];
        $13 = HEAPF32[$3 + 8 >> 2];
        HEAP32[$2 + 44 >> 2] = 0;
        HEAPF32[$2 + 40 >> 2] = $8 * $13;
        HEAPF32[$2 + 36 >> 2] = $9 * $12;
        HEAPF32[$2 + 32 >> 2] = $10 * $11;
        FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $2, $17, $5);
        $5 = $5 + 1 | 0;
        if (($5 | 0) < HEAP32[$2 + 48 >> 2]) {
         continue;
        }
        break;
       }
       break label$4;
      case 1:
       break label$4;
      case 2:
       break label$6;
      }
     }
     $5 = 0;
     if (HEAP32[$2 + 48 >> 2] <= 0) {
      break label$4;
     }
     while (1) {
      $3 = HEAP32[$2 + 76 >> 2];
      $6 = HEAP32[$2 + 56 >> 2];
      $7 = HEAP32[$2 + 72 >> 2] + Math_imul(HEAP32[$2 + 68 >> 2], $5) | 0;
      $4 = $3 + Math_imul($6, HEAPU8[$7 | 0]) | 0;
      $11 = HEAPF32[$4 >> 2];
      $12 = HEAPF32[$4 + 4 >> 2];
      $13 = HEAPF32[$4 + 8 >> 2];
      HEAP32[$2 + 12 >> 2] = 0;
      HEAPF32[$2 + 8 >> 2] = $8 * $13;
      HEAPF32[$2 + 4 >> 2] = $9 * $12;
      HEAPF32[$2 >> 2] = $10 * $11;
      $4 = Math_imul(HEAPU8[$7 + 1 | 0], $6) + $3 | 0;
      $11 = HEAPF32[$4 >> 2];
      $12 = HEAPF32[$4 + 4 >> 2];
      $13 = HEAPF32[$4 + 8 >> 2];
      HEAP32[$2 + 28 >> 2] = 0;
      HEAPF32[$2 + 24 >> 2] = $8 * $13;
      HEAPF32[$2 + 20 >> 2] = $9 * $12;
      HEAPF32[$2 + 16 >> 2] = $10 * $11;
      $3 = Math_imul(HEAPU8[$7 + 2 | 0], $6) + $3 | 0;
      $11 = HEAPF32[$3 >> 2];
      $12 = HEAPF32[$3 + 4 >> 2];
      $13 = HEAPF32[$3 + 8 >> 2];
      HEAP32[$2 + 44 >> 2] = 0;
      HEAPF32[$2 + 40 >> 2] = $8 * $13;
      HEAPF32[$2 + 36 >> 2] = $9 * $12;
      HEAPF32[$2 + 32 >> 2] = $10 * $11;
      FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $2, $17, $5);
      $5 = $5 + 1 | 0;
      if (($5 | 0) < HEAP32[$2 + 48 >> 2]) {
       continue;
      }
      break;
     }
     break label$4;
    }
    $5 = HEAP32[$2 + 60 >> 2] + -2 | 0;
    if ($5 >>> 0 > 3) {
     break label$4;
    }
    label$12 : {
     switch ($5 - 1 | 0) {
     default:
      $5 = 0;
      if (HEAP32[$2 + 48 >> 2] < 1) {
       break label$4;
      }
      while (1) {
       $3 = HEAP32[$2 + 76 >> 2];
       $6 = HEAP32[$2 + 56 >> 2];
       $7 = HEAP32[$2 + 72 >> 2] + Math_imul(HEAP32[$2 + 68 >> 2], $5) | 0;
       $4 = $3 + Math_imul($6, HEAP32[$7 >> 2]) | 0;
       $14 = HEAPF64[$4 >> 3];
       $15 = HEAPF64[$4 + 8 >> 3];
       $16 = HEAPF64[$4 + 16 >> 3];
       HEAP32[$2 + 12 >> 2] = 0;
       HEAPF32[$2 + 8 >> 2] = $8 * Math_fround($16);
       HEAPF32[$2 + 4 >> 2] = $9 * Math_fround($15);
       HEAPF32[$2 >> 2] = $10 * Math_fround($14);
       $4 = Math_imul(HEAP32[$7 + 4 >> 2], $6) + $3 | 0;
       $14 = HEAPF64[$4 >> 3];
       $15 = HEAPF64[$4 + 8 >> 3];
       $16 = HEAPF64[$4 + 16 >> 3];
       HEAP32[$2 + 28 >> 2] = 0;
       HEAPF32[$2 + 24 >> 2] = $8 * Math_fround($16);
       HEAPF32[$2 + 20 >> 2] = $9 * Math_fround($15);
       HEAPF32[$2 + 16 >> 2] = $10 * Math_fround($14);
       $3 = Math_imul(HEAP32[$7 + 8 >> 2], $6) + $3 | 0;
       $14 = HEAPF64[$3 >> 3];
       $15 = HEAPF64[$3 + 8 >> 3];
       $16 = HEAPF64[$3 + 16 >> 3];
       HEAP32[$2 + 44 >> 2] = 0;
       HEAPF32[$2 + 40 >> 2] = $8 * Math_fround($16);
       HEAPF32[$2 + 36 >> 2] = $9 * Math_fround($15);
       HEAPF32[$2 + 32 >> 2] = $10 * Math_fround($14);
       FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $2, $17, $5);
       $5 = $5 + 1 | 0;
       if (($5 | 0) < HEAP32[$2 + 48 >> 2]) {
        continue;
       }
       break;
      }
      break label$4;
     case 0:
      $5 = 0;
      if (HEAP32[$2 + 48 >> 2] <= 0) {
       break label$4;
      }
      while (1) {
       $3 = HEAP32[$2 + 76 >> 2];
       $6 = HEAP32[$2 + 56 >> 2];
       $7 = HEAP32[$2 + 72 >> 2] + Math_imul(HEAP32[$2 + 68 >> 2], $5) | 0;
       $4 = $3 + Math_imul($6, HEAPU16[$7 >> 1]) | 0;
       $14 = HEAPF64[$4 >> 3];
       $15 = HEAPF64[$4 + 8 >> 3];
       $16 = HEAPF64[$4 + 16 >> 3];
       HEAP32[$2 + 12 >> 2] = 0;
       HEAPF32[$2 + 8 >> 2] = $8 * Math_fround($16);
       HEAPF32[$2 + 4 >> 2] = $9 * Math_fround($15);
       HEAPF32[$2 >> 2] = $10 * Math_fround($14);
       $4 = Math_imul(HEAPU16[$7 + 2 >> 1], $6) + $3 | 0;
       $14 = HEAPF64[$4 >> 3];
       $15 = HEAPF64[$4 + 8 >> 3];
       $16 = HEAPF64[$4 + 16 >> 3];
       HEAP32[$2 + 28 >> 2] = 0;
       HEAPF32[$2 + 24 >> 2] = $8 * Math_fround($16);
       HEAPF32[$2 + 20 >> 2] = $9 * Math_fround($15);
       HEAPF32[$2 + 16 >> 2] = $10 * Math_fround($14);
       $3 = Math_imul(HEAPU16[$7 + 4 >> 1], $6) + $3 | 0;
       $14 = HEAPF64[$3 >> 3];
       $15 = HEAPF64[$3 + 8 >> 3];
       $16 = HEAPF64[$3 + 16 >> 3];
       HEAP32[$2 + 44 >> 2] = 0;
       HEAPF32[$2 + 40 >> 2] = $8 * Math_fround($16);
       HEAPF32[$2 + 36 >> 2] = $9 * Math_fround($15);
       HEAPF32[$2 + 32 >> 2] = $10 * Math_fround($14);
       FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $2, $17, $5);
       $5 = $5 + 1 | 0;
       if (($5 | 0) < HEAP32[$2 + 48 >> 2]) {
        continue;
       }
       break;
      }
      break label$4;
     case 2:
      break label$12;
     case 1:
      break label$4;
     }
    }
    $5 = 0;
    if (HEAP32[$2 + 48 >> 2] <= 0) {
     break label$4;
    }
    while (1) {
     $3 = HEAP32[$2 + 76 >> 2];
     $6 = HEAP32[$2 + 56 >> 2];
     $7 = HEAP32[$2 + 72 >> 2] + Math_imul(HEAP32[$2 + 68 >> 2], $5) | 0;
     $4 = $3 + Math_imul($6, HEAPU8[$7 | 0]) | 0;
     $14 = HEAPF64[$4 >> 3];
     $15 = HEAPF64[$4 + 8 >> 3];
     $16 = HEAPF64[$4 + 16 >> 3];
     HEAP32[$2 + 12 >> 2] = 0;
     HEAPF32[$2 + 8 >> 2] = $8 * Math_fround($16);
     HEAPF32[$2 + 4 >> 2] = $9 * Math_fround($15);
     HEAPF32[$2 >> 2] = $10 * Math_fround($14);
     $4 = Math_imul(HEAPU8[$7 + 1 | 0], $6) + $3 | 0;
     $14 = HEAPF64[$4 >> 3];
     $15 = HEAPF64[$4 + 8 >> 3];
     $16 = HEAPF64[$4 + 16 >> 3];
     HEAP32[$2 + 28 >> 2] = 0;
     HEAPF32[$2 + 24 >> 2] = $8 * Math_fround($16);
     HEAPF32[$2 + 20 >> 2] = $9 * Math_fround($15);
     HEAPF32[$2 + 16 >> 2] = $10 * Math_fround($14);
     $3 = Math_imul(HEAPU8[$7 + 2 | 0], $6) + $3 | 0;
     $14 = HEAPF64[$3 >> 3];
     $15 = HEAPF64[$3 + 8 >> 3];
     $16 = HEAPF64[$3 + 16 >> 3];
     HEAP32[$2 + 44 >> 2] = 0;
     HEAPF32[$2 + 40 >> 2] = $8 * Math_fround($16);
     HEAPF32[$2 + 36 >> 2] = $9 * Math_fround($15);
     HEAPF32[$2 + 32 >> 2] = $10 * Math_fround($14);
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $2, $17, $5);
     $5 = $5 + 1 | 0;
     if (($5 | 0) < HEAP32[$2 + 48 >> 2]) {
      continue;
     }
     break;
    }
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $17);
   $17 = $17 + 1 | 0;
   if (($18 | 0) != ($17 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = $2 + 80 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSequentialImpulseConstraintSolver__solveSingleIteration_28int_2c_20btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 label$1 : {
  if (!(HEAP8[$8 + 72 | 0] & 1)) {
   break label$1;
  }
  $16 = HEAP32[$0 + 68 >> 2];
  $17 = HEAP32[$0 + 28 >> 2];
  $18 = HEAP32[$0 + 48 >> 2];
  if (($18 | 0) >= 1) {
   $9 = Math_imul(HEAP32[$0 + 232 >> 2], 1664525) + 1013904223 | 0;
   label$3 : {
    if (($18 | 0) == 1) {
     break label$3;
    }
    $5 = 2;
    $11 = HEAP32[$0 + 136 >> 2];
    $4 = HEAP32[$11 + 4 >> 2];
    $9 = Math_imul($9, 1664525) + 1013904223 | 0;
    $2 = $9 ^ $9 >>> 16;
    $2 = $2 ^ $2 >>> 8;
    $2 = $2 ^ $2 >>> 4;
    $2 = $2 ^ $2 >>> 2;
    $2 = ((($2 ^ $2 >>> 1) & 1) << 2) + $11 | 0;
    HEAP32[$11 + 4 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$2 >> 2] = $4;
    if (($18 | 0) == 2) {
     break label$3;
    }
    while (1) {
     $4 = $5;
     $5 = $4 + 1 | 0;
     $2 = ($4 << 2) + $11 | 0;
     $14 = HEAP32[$2 >> 2];
     $15 = $2;
     $9 = Math_imul($9, 1664525) + 1013904223 | 0;
     $2 = $9;
     $3 = $2;
     label$5 : {
      if ($4 >>> 0 > 65535) {
       break label$5;
      }
      $2 = $9 >>> 16 ^ $9;
      $3 = $2;
      if ($4 >>> 0 > 255) {
       break label$5;
      }
      $2 = $2 >>> 8 ^ $2;
      $3 = $2;
      if ($4 >>> 0 > 15) {
       break label$5;
      }
      $2 = $2 >>> 4 ^ $2;
      $3 = $2;
      if ($4 >>> 0 > 3) {
       break label$5;
      }
      $3 = $2 >>> 2 ^ $2;
     }
     $2 = $3;
     $4 = (($2 >>> 0) % ($5 >>> 0) << 2) + $11 | 0;
     HEAP32[$15 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$4 >> 2] = $14;
     if (($5 | 0) != ($18 | 0)) {
      continue;
     }
     break;
    }
   }
   HEAP32[$0 + 232 >> 2] = $9;
  }
  if (HEAP32[$8 + 20 >> 2] <= ($1 | 0)) {
   break label$1;
  }
  if (($17 | 0) >= 1) {
   $9 = Math_imul(HEAP32[$0 + 232 >> 2], 1664525) + 1013904223 | 0;
   label$7 : {
    if (($17 | 0) == 1) {
     break label$7;
    }
    $5 = 2;
    $11 = HEAP32[$0 + 116 >> 2];
    $4 = HEAP32[$11 + 4 >> 2];
    $9 = Math_imul($9, 1664525) + 1013904223 | 0;
    $2 = $9 ^ $9 >>> 16;
    $2 = $2 ^ $2 >>> 8;
    $2 = $2 ^ $2 >>> 4;
    $2 = $2 ^ $2 >>> 2;
    $2 = ((($2 ^ $2 >>> 1) & 1) << 2) + $11 | 0;
    HEAP32[$11 + 4 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$2 >> 2] = $4;
    if (($17 | 0) == 2) {
     break label$7;
    }
    while (1) {
     $4 = $5;
     $5 = $4 + 1 | 0;
     $2 = ($4 << 2) + $11 | 0;
     $14 = HEAP32[$2 >> 2];
     $15 = $2;
     $9 = Math_imul($9, 1664525) + 1013904223 | 0;
     $2 = $9;
     $3 = $2;
     label$9 : {
      if ($4 >>> 0 > 65535) {
       break label$9;
      }
      $2 = $9 >>> 16 ^ $9;
      $3 = $2;
      if ($4 >>> 0 > 255) {
       break label$9;
      }
      $2 = $2 >>> 8 ^ $2;
      $3 = $2;
      if ($4 >>> 0 > 15) {
       break label$9;
      }
      $2 = $2 >>> 4 ^ $2;
      $3 = $2;
      if ($4 >>> 0 > 3) {
       break label$9;
      }
      $3 = $2 >>> 2 ^ $2;
     }
     $2 = $3;
     $4 = (($2 >>> 0) % ($5 >>> 0) << 2) + $11 | 0;
     HEAP32[$15 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$4 >> 2] = $14;
     if (($5 | 0) != ($17 | 0)) {
      continue;
     }
     break;
    }
   }
   HEAP32[$0 + 232 >> 2] = $9;
  }
  if (($16 | 0) < 1) {
   break label$1;
  }
  $9 = Math_imul(HEAP32[$0 + 232 >> 2], 1664525) + 1013904223 | 0;
  label$10 : {
   if (($16 | 0) == 1) {
    break label$10;
   }
   $5 = 2;
   $11 = HEAP32[$0 + 156 >> 2];
   $4 = HEAP32[$11 + 4 >> 2];
   $9 = Math_imul($9, 1664525) + 1013904223 | 0;
   $2 = $9 ^ $9 >>> 16;
   $2 = $2 ^ $2 >>> 8;
   $2 = $2 ^ $2 >>> 4;
   $2 = $2 ^ $2 >>> 2;
   $2 = ((($2 ^ $2 >>> 1) & 1) << 2) + $11 | 0;
   HEAP32[$11 + 4 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$2 >> 2] = $4;
   if (($16 | 0) == 2) {
    break label$10;
   }
   while (1) {
    $4 = $5;
    $5 = $4 + 1 | 0;
    $2 = ($4 << 2) + $11 | 0;
    $14 = HEAP32[$2 >> 2];
    $15 = $2;
    $9 = Math_imul($9, 1664525) + 1013904223 | 0;
    $2 = $9;
    $3 = $2;
    label$12 : {
     if ($4 >>> 0 > 65535) {
      break label$12;
     }
     $2 = $9 >>> 16 ^ $9;
     $3 = $2;
     if ($4 >>> 0 > 255) {
      break label$12;
     }
     $2 = $2 >>> 8 ^ $2;
     $3 = $2;
     if ($4 >>> 0 > 15) {
      break label$12;
     }
     $2 = $2 >>> 4 ^ $2;
     $3 = $2;
     if ($4 >>> 0 > 3) {
      break label$12;
     }
     $3 = $2 >>> 2 ^ $2;
    }
    $2 = $3;
    $4 = (($2 >>> 0) % ($5 >>> 0) << 2) + $11 | 0;
    HEAP32[$15 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$4 >> 2] = $14;
    if (($5 | 0) != ($16 | 0)) {
     continue;
    }
    break;
   }
  }
  HEAP32[$0 + 232 >> 2] = $9;
 }
 $2 = HEAP32[$0 + 48 >> 2];
 if (($2 | 0) >= 1) {
  $5 = 0;
  while (1) {
   $4 = HEAP32[$0 + 56 >> 2] + Math_imul(HEAP32[HEAP32[$0 + 136 >> 2] + ($5 << 2) >> 2], 152) | 0;
   if (HEAP32[$4 + 136 >> 2] > ($1 | 0)) {
    $2 = HEAP32[$0 + 16 >> 2];
    $10 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 212 >> 2]]($2 + Math_imul(HEAP32[$4 + 144 >> 2], 244) | 0, Math_imul(HEAP32[$4 + 148 >> 2], 244) + $2 | 0, $4));
    $13 = Math_fround($13 + Math_fround($10 * $10));
    $2 = HEAP32[$0 + 48 >> 2];
   }
   $5 = $5 + 1 | 0;
   if (($5 | 0) < ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 label$17 : {
  if (HEAP32[$8 + 20 >> 2] <= ($1 | 0)) {
   break label$17;
  }
  if (($7 | 0) >= 1) {
   $5 = 0;
   while (1) {
    $4 = ($5 << 2) + $6 | 0;
    $2 = HEAP32[$4 >> 2];
    if (HEAPU8[$2 + 20 | 0]) {
     $2 = btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20float_29($0, HEAP32[$2 + 28 >> 2], HEAPF32[$8 + 12 >> 2]);
     $1 = btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20float_29($0, HEAP32[HEAP32[$4 >> 2] + 32 >> 2], HEAPF32[$8 + 12 >> 2]);
     $4 = HEAP32[$4 >> 2];
     $9 = HEAP32[$0 + 16 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 24 >> 2]]($4, $9 + Math_imul($2, 244) | 0, Math_imul($1, 244) + $9 | 0, HEAPF32[$8 + 12 >> 2]);
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) != ($7 | 0)) {
     continue;
    }
    break;
   }
  }
  $2 = HEAP32[$0 + 28 >> 2];
  $5 = HEAP32[$8 + 72 >> 2];
  label$21 : {
   if (!($5 & 512)) {
    if (($2 | 0) >= 1) {
     $5 = 0;
     while (1) {
      $8 = HEAP32[$0 + 16 >> 2];
      $4 = HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[HEAP32[$0 + 116 >> 2] + ($5 << 2) >> 2], 152) | 0;
      $10 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 216 >> 2]]($8 + Math_imul(HEAP32[$4 + 144 >> 2], 244) | 0, Math_imul(HEAP32[$4 + 148 >> 2], 244) + $8 | 0, $4));
      $13 = Math_fround($13 + Math_fround($10 * $10));
      $5 = $5 + 1 | 0;
      if (($5 | 0) != ($2 | 0)) {
       continue;
      }
      break;
     }
    }
    $2 = HEAP32[$0 + 68 >> 2];
    if (($2 | 0) < 1) {
     break label$21;
    }
    $4 = 0;
    while (1) {
     $5 = HEAP32[$0 + 76 >> 2] + Math_imul(HEAP32[HEAP32[$0 + 156 >> 2] + ($4 << 2) >> 2], 152) | 0;
     $10 = HEAPF32[(HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[$5 + 140 >> 2], 152) | 0) + 100 >> 2];
     if (!!($10 > Math_fround(0))) {
      $12 = HEAPF32[$5 + 104 >> 2];
      HEAPF32[$5 + 124 >> 2] = $10 * $12;
      HEAPF32[$5 + 120 >> 2] = $10 * Math_fround(-$12);
      $8 = HEAP32[$0 + 16 >> 2];
      $10 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 212 >> 2]]($8 + Math_imul(HEAP32[$5 + 144 >> 2], 244) | 0, Math_imul(HEAP32[$5 + 148 >> 2], 244) + $8 | 0, $5));
      $13 = Math_fround($13 + Math_fround($10 * $10));
     }
     $4 = $4 + 1 | 0;
     if (($4 | 0) != ($2 | 0)) {
      continue;
     }
     break;
    }
    break label$21;
   }
   if (($2 | 0) < 1) {
    break label$21;
   }
   $7 = $5 & 16 ? 2 : 1;
   $5 = 0;
   while (1) {
    $1 = HEAP32[$0 + 16 >> 2];
    $4 = HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[HEAP32[$0 + 116 >> 2] + ($5 << 2) >> 2], 152) | 0;
    $10 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 216 >> 2]]($1 + Math_imul(HEAP32[$4 + 144 >> 2], 244) | 0, Math_imul(HEAP32[$4 + 148 >> 2], 244) + $1 | 0, $4));
    $13 = Math_fround($13 + Math_fround($10 * $10));
    $1 = Math_imul($7, $5) << 2;
    $10 = HEAPF32[$4 + 100 >> 2];
    $9 = $10 > Math_fround(0) ^ 1;
    if (!$9) {
     $4 = HEAP32[$0 + 76 >> 2] + Math_imul(HEAP32[HEAP32[$0 + 156 >> 2] + $1 >> 2], 152) | 0;
     $12 = HEAPF32[$4 + 104 >> 2];
     HEAPF32[$4 + 124 >> 2] = $10 * $12;
     HEAPF32[$4 + 120 >> 2] = $10 * Math_fround(-$12);
     $6 = HEAP32[$0 + 16 >> 2];
     $12 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 212 >> 2]]($6 + Math_imul(HEAP32[$4 + 144 >> 2], 244) | 0, Math_imul(HEAP32[$4 + 148 >> 2], 244) + $6 | 0, $4));
     $13 = Math_fround($13 + Math_fround($12 * $12));
    }
    if (!($9 | !(HEAPU8[$8 + 72 | 0] & 16))) {
     $4 = HEAP32[$0 + 76 >> 2] + Math_imul(HEAP32[(HEAP32[$0 + 156 >> 2] + $1 | 0) + 4 >> 2], 152) | 0;
     $12 = HEAPF32[$4 + 104 >> 2];
     HEAPF32[$4 + 124 >> 2] = $10 * $12;
     HEAPF32[$4 + 120 >> 2] = $10 * Math_fround(-$12);
     $1 = HEAP32[$0 + 16 >> 2];
     $10 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 212 >> 2]]($1 + Math_imul(HEAP32[$4 + 144 >> 2], 244) | 0, Math_imul(HEAP32[$4 + 148 >> 2], 244) + $1 | 0, $4));
     $13 = Math_fround($13 + Math_fround($10 * $10));
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
  }
  $2 = HEAP32[$0 + 88 >> 2];
  if (($2 | 0) < 1) {
   break label$17;
  }
  $4 = 0;
  while (1) {
   $5 = HEAP32[$0 + 96 >> 2] + Math_imul($4, 152) | 0;
   $10 = HEAPF32[(HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[$5 + 140 >> 2], 152) | 0) + 100 >> 2];
   if (!!($10 > Math_fround(0))) {
    $12 = HEAPF32[$5 + 104 >> 2];
    $10 = Math_fround($10 * $12);
    $10 = $10 > $12 ? $12 : $10;
    HEAPF32[$5 + 124 >> 2] = $10;
    HEAPF32[$5 + 120 >> 2] = -$10;
    $8 = HEAP32[$0 + 16 >> 2];
    $10 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 212 >> 2]]($8 + Math_imul(HEAP32[$5 + 144 >> 2], 244) | 0, Math_imul(HEAP32[$5 + 148 >> 2], 244) + $8 | 0, $5));
    $13 = Math_fround($13 + Math_fround($10 * $10));
   }
   $4 = $4 + 1 | 0;
   if (($4 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 return Math_fround($13);
}
function btOptimizedBvh__build_28btStridingMeshInterface__2c_20bool_2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $8 = global$0 - 112 | 0;
 $5 = $8;
 if ($8 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP8[$0 + 60 | 0] = $2;
 label$2 : {
  if ($2) {
   btQuantizedBvh__setQuantizationValues_28btVector3_20const__2c_20btVector3_20const__2c_20float_29($0, $3, $4, Math_fround(1));
   HEAP32[$8 + 96 >> 2] = $0;
   HEAP32[$8 + 92 >> 2] = $0 + 104;
   HEAP32[$8 + 88 >> 2] = 14428;
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $8 + 88 | 0, $0 + 4 | 0, $0 + 20 | 0);
   $11 = HEAP32[$0 + 108 >> 2];
   $5 = $8;
   HEAP32[$5 + 16 >> 2] = 0;
   HEAP32[$5 + 20 >> 2] = 0;
   HEAP32[$5 + 8 >> 2] = 0;
   HEAP32[$5 + 12 >> 2] = 0;
   $2 = HEAP32[$0 + 128 >> 2];
   $3 = $11 << 1;
   if (($2 | 0) < ($3 | 0)) {
    if (HEAP32[$0 + 132 >> 2] < ($3 | 0)) {
     if ($11) {
      $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($11 << 5, 16);
      $9 = HEAP32[$0 + 128 >> 2];
     } else {
      $9 = $2;
     }
     if (($9 | 0) >= 1) {
      $1 = 0;
      while (1) {
       $4 = $1 << 4;
       $10 = $12 + $4 | 0;
       $4 = HEAP32[$0 + 136 >> 2] + $4 | 0;
       $7 = $4;
       $6 = HEAP32[$7 >> 2];
       $5 = HEAP32[$7 + 4 >> 2];
       $4 = $6;
       $6 = $10;
       HEAP32[$6 >> 2] = $4;
       HEAP32[$6 + 4 >> 2] = $5;
       $6 = HEAP32[$7 + 12 >> 2];
       $5 = HEAP32[$7 + 8 >> 2];
       $4 = $5;
       $5 = $10;
       HEAP32[$5 + 8 >> 2] = $4;
       HEAP32[$5 + 12 >> 2] = $6;
       $1 = $1 + 1 | 0;
       if (($9 | 0) != ($1 | 0)) {
        continue;
       }
       break;
      }
     }
     $1 = HEAP32[$0 + 136 >> 2];
     if ($1) {
      if (HEAPU8[$0 + 140 | 0]) {
       btAlignedFreeInternal_28void__29($1);
      }
      HEAP32[$0 + 136 >> 2] = 0;
     }
     HEAP32[$0 + 136 >> 2] = $12;
     HEAP32[$0 + 132 >> 2] = $3;
     HEAP8[$0 + 140 | 0] = 1;
    }
    while (1) {
     $7 = $8;
     $6 = HEAP32[$7 + 8 >> 2];
     $5 = HEAP32[$7 + 12 >> 2];
     $4 = $6;
     $1 = HEAP32[$0 + 136 >> 2] + ($2 << 4) | 0;
     $6 = $1;
     HEAP32[$6 >> 2] = $4;
     HEAP32[$6 + 4 >> 2] = $5;
     $6 = HEAP32[$7 + 20 >> 2];
     $5 = HEAP32[$7 + 16 >> 2];
     $4 = $5;
     $5 = $1;
     HEAP32[$5 + 8 >> 2] = $4;
     HEAP32[$5 + 12 >> 2] = $6;
     $2 = $2 + 1 | 0;
     if (($3 | 0) != ($2 | 0)) {
      continue;
     }
     break;
    }
   }
   HEAP32[$0 + 128 >> 2] = $3;
   btInternalTriangleIndexCallback___btInternalTriangleIndexCallback_28_29($8 + 88 | 0);
   break label$2;
  }
  HEAP32[$8 + 104 >> 2] = 14560;
  HEAP32[$8 + 108 >> 2] = $0 - -64;
  $5 = $8;
  HEAP32[$5 + 96 >> 2] = -581039253;
  HEAP32[$5 + 100 >> 2] = 0;
  HEAP32[$5 + 88 >> 2] = -581039253;
  HEAP32[$5 + 92 >> 2] = -581039253;
  HEAP32[$5 + 80 >> 2] = 1566444395;
  HEAP32[$5 + 84 >> 2] = 0;
  HEAP32[$5 + 72 >> 2] = 1566444395;
  HEAP32[$5 + 76 >> 2] = 1566444395;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $5 + 104 | 0, $5 + 88 | 0, $5 + 72 | 0);
  $11 = HEAP32[$0 + 68 >> 2];
  $5 = $5 - -64 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $5 = $8;
  HEAP32[$5 + 56 >> 2] = 0;
  HEAP32[$5 + 60 >> 2] = 0;
  HEAP32[$5 + 48 >> 2] = 0;
  HEAP32[$5 + 52 >> 2] = 0;
  HEAP32[$5 + 40 >> 2] = 0;
  HEAP32[$5 + 44 >> 2] = 0;
  HEAP32[$5 + 32 >> 2] = 0;
  HEAP32[$5 + 36 >> 2] = 0;
  HEAP32[$5 + 24 >> 2] = 0;
  HEAP32[$5 + 28 >> 2] = 0;
  HEAP32[$5 + 16 >> 2] = 0;
  HEAP32[$5 + 20 >> 2] = 0;
  HEAP32[$5 + 8 >> 2] = 0;
  HEAP32[$5 + 12 >> 2] = 0;
  $1 = HEAP32[$0 + 88 >> 2];
  $4 = $11 << 1;
  if (($1 | 0) < ($4 | 0)) {
   if (HEAP32[$0 + 92 >> 2] < ($4 | 0)) {
    if ($11) {
     $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($11 << 7, 16);
     $9 = HEAP32[$0 + 88 >> 2];
    } else {
     $9 = $1;
    }
    if (($9 | 0) >= 1) {
     while (1) {
      $3 = $10 << 6;
      $2 = $12 + $3 | 0;
      $3 = HEAP32[$0 + 96 >> 2] + $3 | 0;
      $7 = $3;
      $6 = HEAP32[$7 >> 2];
      $5 = HEAP32[$7 + 4 >> 2];
      HEAP32[$2 >> 2] = $6;
      HEAP32[$2 + 4 >> 2] = $5;
      $6 = HEAP32[$7 + 60 >> 2];
      $5 = HEAP32[$7 + 56 >> 2];
      $3 = $5;
      $5 = $2;
      HEAP32[$5 + 56 >> 2] = $3;
      HEAP32[$5 + 60 >> 2] = $6;
      $5 = HEAP32[$7 + 52 >> 2];
      $6 = HEAP32[$7 + 48 >> 2];
      HEAP32[$2 + 48 >> 2] = $6;
      HEAP32[$2 + 52 >> 2] = $5;
      $6 = HEAP32[$7 + 44 >> 2];
      $5 = HEAP32[$7 + 40 >> 2];
      $3 = $5;
      $5 = $2;
      HEAP32[$5 + 40 >> 2] = $3;
      HEAP32[$5 + 44 >> 2] = $6;
      $5 = HEAP32[$7 + 36 >> 2];
      $6 = HEAP32[$7 + 32 >> 2];
      HEAP32[$2 + 32 >> 2] = $6;
      HEAP32[$2 + 36 >> 2] = $5;
      $6 = HEAP32[$7 + 28 >> 2];
      $5 = HEAP32[$7 + 24 >> 2];
      $3 = $5;
      $5 = $2;
      HEAP32[$5 + 24 >> 2] = $3;
      HEAP32[$5 + 28 >> 2] = $6;
      $5 = HEAP32[$7 + 20 >> 2];
      $6 = HEAP32[$7 + 16 >> 2];
      HEAP32[$2 + 16 >> 2] = $6;
      HEAP32[$2 + 20 >> 2] = $5;
      $6 = HEAP32[$7 + 12 >> 2];
      $5 = HEAP32[$7 + 8 >> 2];
      $3 = $5;
      $5 = $2;
      HEAP32[$5 + 8 >> 2] = $3;
      HEAP32[$5 + 12 >> 2] = $6;
      $10 = $10 + 1 | 0;
      if (($9 | 0) != ($10 | 0)) {
       continue;
      }
      break;
     }
    }
    $2 = HEAP32[$0 + 96 >> 2];
    if ($2) {
     if (HEAPU8[$0 + 100 | 0]) {
      btAlignedFreeInternal_28void__29($2);
     }
     HEAP32[$0 + 96 >> 2] = 0;
    }
    HEAP32[$0 + 96 >> 2] = $12;
    HEAP32[$0 + 92 >> 2] = $4;
    HEAP8[$0 + 100 | 0] = 1;
   }
   while (1) {
    $7 = $8;
    $6 = HEAP32[$7 + 8 >> 2];
    $5 = HEAP32[$7 + 12 >> 2];
    $2 = HEAP32[$0 + 96 >> 2] + ($1 << 6) | 0;
    HEAP32[$2 >> 2] = $6;
    HEAP32[$2 + 4 >> 2] = $5;
    $7 = $7 - -64 | 0;
    $5 = HEAP32[$7 >> 2];
    $6 = HEAP32[$7 + 4 >> 2];
    $3 = $5;
    $5 = $2;
    HEAP32[$5 + 56 >> 2] = $3;
    HEAP32[$5 + 60 >> 2] = $6;
    $7 = $8;
    $6 = HEAP32[$7 + 56 >> 2];
    $5 = HEAP32[$7 + 60 >> 2];
    HEAP32[$2 + 48 >> 2] = $6;
    HEAP32[$2 + 52 >> 2] = $5;
    $6 = HEAP32[$7 + 52 >> 2];
    $5 = HEAP32[$7 + 48 >> 2];
    $3 = $5;
    $5 = $2;
    HEAP32[$5 + 40 >> 2] = $3;
    HEAP32[$5 + 44 >> 2] = $6;
    $5 = HEAP32[$7 + 44 >> 2];
    $6 = HEAP32[$7 + 40 >> 2];
    HEAP32[$2 + 32 >> 2] = $6;
    HEAP32[$2 + 36 >> 2] = $5;
    $6 = HEAP32[$7 + 36 >> 2];
    $5 = HEAP32[$7 + 32 >> 2];
    $3 = $5;
    $5 = $2;
    HEAP32[$5 + 24 >> 2] = $3;
    HEAP32[$5 + 28 >> 2] = $6;
    $5 = HEAP32[$7 + 28 >> 2];
    $6 = HEAP32[$7 + 24 >> 2];
    HEAP32[$2 + 16 >> 2] = $6;
    HEAP32[$2 + 20 >> 2] = $5;
    $6 = HEAP32[$7 + 20 >> 2];
    $5 = HEAP32[$7 + 16 >> 2];
    $3 = $5;
    $5 = $2;
    HEAP32[$5 + 8 >> 2] = $3;
    HEAP32[$5 + 12 >> 2] = $6;
    $1 = $1 + 1 | 0;
    if (($4 | 0) != ($1 | 0)) {
     continue;
    }
    break;
   }
  }
  HEAP32[$0 + 88 >> 2] = $4;
  btInternalTriangleIndexCallback___btInternalTriangleIndexCallback_28_29($8 + 104 | 0);
 }
 HEAP32[$0 + 56 >> 2] = 0;
 btQuantizedBvh__buildTree_28int_2c_20int_29($0, 0, $11);
 if (!(HEAP32[$0 + 152 >> 2] | !HEAPU8[$0 + 60 | 0])) {
  $9 = $0;
  label$23 : {
   if (HEAP32[$0 + 156 >> 2]) {
    $4 = HEAP32[$0 + 160 >> 2];
    $2 = 1;
    break label$23;
   }
   $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(32, 16);
   $10 = HEAP32[$0 + 152 >> 2];
   if (($10 | 0) >= 1) {
    $3 = 0;
    while (1) {
     $1 = $3 << 5;
     $2 = $4 + $1 | 0;
     $1 = HEAP32[$0 + 160 >> 2] + $1 | 0;
     $7 = $1;
     $6 = HEAP32[$7 >> 2];
     $5 = HEAP32[$7 + 4 >> 2];
     HEAP32[$2 >> 2] = $6;
     HEAP32[$2 + 4 >> 2] = $5;
     $6 = HEAP32[$7 + 28 >> 2];
     $5 = HEAP32[$7 + 24 >> 2];
     $1 = $5;
     $5 = $2;
     HEAP32[$5 + 24 >> 2] = $1;
     HEAP32[$5 + 28 >> 2] = $6;
     $5 = HEAP32[$7 + 20 >> 2];
     $6 = HEAP32[$7 + 16 >> 2];
     HEAP32[$2 + 16 >> 2] = $6;
     HEAP32[$2 + 20 >> 2] = $5;
     $6 = HEAP32[$7 + 12 >> 2];
     $5 = HEAP32[$7 + 8 >> 2];
     $1 = $5;
     $5 = $2;
     HEAP32[$5 + 8 >> 2] = $1;
     HEAP32[$5 + 12 >> 2] = $6;
     $3 = $3 + 1 | 0;
     if (($10 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$0 + 160 >> 2];
   if ($2) {
    if (HEAPU8[$0 + 164 | 0]) {
     btAlignedFreeInternal_28void__29($2);
    }
    HEAP32[$0 + 160 >> 2] = 0;
   }
   HEAP32[$0 + 160 >> 2] = $4;
   HEAP32[$0 + 156 >> 2] = 1;
   HEAP8[$0 + 164 | 0] = 1;
   $2 = HEAP32[$0 + 152 >> 2] + 1 | 0;
  }
  HEAP32[$9 + 152 >> 2] = $2;
  $7 = $8;
  $6 = HEAP32[$7 + 32 >> 2];
  $5 = HEAP32[$7 + 36 >> 2];
  $1 = $6;
  $6 = $4;
  HEAP32[$6 + 24 >> 2] = $1;
  HEAP32[$6 + 28 >> 2] = $5;
  $6 = HEAP32[$7 + 28 >> 2];
  $5 = HEAP32[$7 + 24 >> 2];
  $1 = $5;
  $5 = $4;
  HEAP32[$5 + 16 >> 2] = $1;
  HEAP32[$5 + 20 >> 2] = $6;
  $5 = HEAP32[$7 + 20 >> 2];
  $6 = HEAP32[$7 + 16 >> 2];
  $1 = $6;
  $6 = $4;
  HEAP32[$6 + 8 >> 2] = $1;
  HEAP32[$6 + 12 >> 2] = $5;
  $6 = HEAP32[$7 + 12 >> 2];
  $5 = HEAP32[$7 + 8 >> 2];
  $1 = $5;
  $5 = $4;
  HEAP32[$5 >> 2] = $1;
  HEAP32[$5 + 4 >> 2] = $6;
  $2 = HEAP32[$0 + 160 >> 2];
  $1 = HEAP32[$0 + 136 >> 2];
  HEAP16[$2 >> 1] = HEAPU16[$1 >> 1];
  HEAP16[$2 + 2 >> 1] = HEAPU16[$1 + 2 >> 1];
  HEAP16[$2 + 4 >> 1] = HEAPU16[$1 + 4 >> 1];
  HEAP16[$2 + 6 >> 1] = HEAPU16[$1 + 6 >> 1];
  HEAP16[$2 + 8 >> 1] = HEAPU16[$1 + 8 >> 1];
  $3 = HEAPU16[$1 + 10 >> 1];
  HEAP32[$2 + 12 >> 2] = 0;
  HEAP16[$2 + 10 >> 1] = $3;
  $1 = HEAP32[$1 + 12 >> 2];
  HEAP32[$2 + 16 >> 2] = ($1 | 0) > -1 ? 1 : 0 - $1 | 0;
 }
 HEAP32[$0 + 168 >> 2] = HEAP32[$0 + 152 >> 2];
 $2 = HEAP32[$0 + 116 >> 2];
 if ($2) {
  if (HEAPU8[$0 + 120 | 0]) {
   btAlignedFreeInternal_28void__29($2);
  }
  HEAP32[$0 + 116 >> 2] = 0;
 }
 HEAP32[$0 + 116 >> 2] = 0;
 $5 = $0;
 HEAP32[$5 + 108 >> 2] = 0;
 HEAP32[$5 + 112 >> 2] = 0;
 HEAP8[$5 + 120 | 0] = 1;
 $2 = HEAP32[$5 + 76 >> 2];
 if ($2) {
  if (HEAPU8[$0 + 80 | 0]) {
   btAlignedFreeInternal_28void__29($2);
  }
  HEAP32[$0 + 76 >> 2] = 0;
 }
 HEAP32[$0 + 76 >> 2] = 0;
 HEAP32[$0 + 68 >> 2] = 0;
 HEAP32[$0 + 72 >> 2] = 0;
 HEAP8[$0 + 80 | 0] = 1;
 $0 = $8 + 112 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuantizedBvh__deSerializeDouble_28btQuantizedBvhDoubleData__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $12 = global$0 + -64 | 0;
 $3 = $12;
 if ($12 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAPF32[$0 + 20 >> 2] = HEAPF64[$1 + 32 >> 3];
 HEAPF32[$0 + 24 >> 2] = HEAPF64[$1 + 40 >> 3];
 HEAPF32[$0 + 28 >> 2] = HEAPF64[$1 + 48 >> 3];
 HEAPF32[$0 + 32 >> 2] = HEAPF64[$1 + 56 >> 3];
 HEAPF32[$0 + 4 >> 2] = HEAPF64[$1 >> 3];
 HEAPF32[$0 + 8 >> 2] = HEAPF64[$1 + 8 >> 3];
 HEAPF32[$0 + 12 >> 2] = HEAPF64[$1 + 16 >> 3];
 HEAPF32[$0 + 16 >> 2] = HEAPF64[$1 + 24 >> 3];
 HEAPF32[$0 + 36 >> 2] = HEAPF64[$1 + 64 >> 3];
 HEAPF32[$0 + 40 >> 2] = HEAPF64[$1 + 72 >> 3];
 HEAPF32[$0 + 44 >> 2] = HEAPF64[$1 + 80 >> 3];
 HEAPF32[$0 + 48 >> 2] = HEAPF64[$1 + 88 >> 3];
 HEAP32[$0 + 56 >> 2] = HEAP32[$1 + 96 >> 2];
 HEAP8[$0 + 60 | 0] = HEAP32[$1 + 100 >> 2] != 0;
 $8 = HEAP32[$1 + 104 >> 2];
 $3 = $12;
 HEAP32[$3 + 56 >> 2] = 0;
 HEAP32[$3 + 60 >> 2] = 0;
 HEAP32[$3 + 48 >> 2] = 0;
 HEAP32[$3 + 52 >> 2] = 0;
 HEAP32[$3 + 40 >> 2] = 0;
 HEAP32[$3 + 44 >> 2] = 0;
 HEAP32[$3 + 32 >> 2] = 0;
 HEAP32[$3 + 36 >> 2] = 0;
 HEAP32[$3 + 24 >> 2] = 0;
 HEAP32[$3 + 28 >> 2] = 0;
 HEAP32[$3 + 16 >> 2] = 0;
 HEAP32[$3 + 20 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 $6 = HEAP32[$0 + 88 >> 2];
 if (($6 | 0) < ($8 | 0)) {
  if (HEAP32[$0 + 92 >> 2] < ($8 | 0)) {
   if ($8) {
    $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8 << 6, 16);
    $10 = HEAP32[$0 + 88 >> 2];
   } else {
    $10 = $6;
   }
   if (($10 | 0) >= 1) {
    while (1) {
     $7 = $9 << 6;
     $2 = $11 + $7 | 0;
     $7 = HEAP32[$0 + 96 >> 2] + $7 | 0;
     $4 = $7;
     $5 = HEAP32[$4 >> 2];
     $3 = HEAP32[$4 + 4 >> 2];
     HEAP32[$2 >> 2] = $5;
     HEAP32[$2 + 4 >> 2] = $3;
     $5 = HEAP32[$4 + 60 >> 2];
     $3 = HEAP32[$4 + 56 >> 2];
     HEAP32[$2 + 56 >> 2] = $3;
     HEAP32[$2 + 60 >> 2] = $5;
     $3 = HEAP32[$4 + 52 >> 2];
     $5 = HEAP32[$4 + 48 >> 2];
     HEAP32[$2 + 48 >> 2] = $5;
     HEAP32[$2 + 52 >> 2] = $3;
     $5 = HEAP32[$4 + 44 >> 2];
     $3 = HEAP32[$4 + 40 >> 2];
     HEAP32[$2 + 40 >> 2] = $3;
     HEAP32[$2 + 44 >> 2] = $5;
     $3 = HEAP32[$4 + 36 >> 2];
     $5 = HEAP32[$4 + 32 >> 2];
     HEAP32[$2 + 32 >> 2] = $5;
     HEAP32[$2 + 36 >> 2] = $3;
     $5 = HEAP32[$4 + 28 >> 2];
     $3 = HEAP32[$4 + 24 >> 2];
     HEAP32[$2 + 24 >> 2] = $3;
     HEAP32[$2 + 28 >> 2] = $5;
     $3 = HEAP32[$4 + 20 >> 2];
     $5 = HEAP32[$4 + 16 >> 2];
     HEAP32[$2 + 16 >> 2] = $5;
     HEAP32[$2 + 20 >> 2] = $3;
     $5 = HEAP32[$4 + 12 >> 2];
     $3 = HEAP32[$4 + 8 >> 2];
     HEAP32[$2 + 8 >> 2] = $3;
     HEAP32[$2 + 12 >> 2] = $5;
     $9 = $9 + 1 | 0;
     if (($10 | 0) != ($9 | 0)) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$0 + 96 >> 2];
   if ($2) {
    if (HEAPU8[$0 + 100 | 0]) {
     btAlignedFreeInternal_28void__29($2);
    }
    HEAP32[$0 + 96 >> 2] = 0;
   }
   HEAP32[$0 + 96 >> 2] = $11;
   HEAP32[$0 + 92 >> 2] = $8;
   HEAP8[$0 + 100 | 0] = 1;
  }
  while (1) {
   $4 = $12;
   $5 = HEAP32[$4 >> 2];
   $3 = HEAP32[$4 + 4 >> 2];
   $2 = HEAP32[$0 + 96 >> 2] + ($6 << 6) | 0;
   HEAP32[$2 >> 2] = $5;
   HEAP32[$2 + 4 >> 2] = $3;
   $5 = HEAP32[$4 + 60 >> 2];
   $3 = HEAP32[$4 + 56 >> 2];
   HEAP32[$2 + 56 >> 2] = $3;
   HEAP32[$2 + 60 >> 2] = $5;
   $3 = HEAP32[$4 + 52 >> 2];
   $5 = HEAP32[$4 + 48 >> 2];
   HEAP32[$2 + 48 >> 2] = $5;
   HEAP32[$2 + 52 >> 2] = $3;
   $5 = HEAP32[$4 + 44 >> 2];
   $3 = HEAP32[$4 + 40 >> 2];
   HEAP32[$2 + 40 >> 2] = $3;
   HEAP32[$2 + 44 >> 2] = $5;
   $3 = HEAP32[$4 + 36 >> 2];
   $5 = HEAP32[$4 + 32 >> 2];
   HEAP32[$2 + 32 >> 2] = $5;
   HEAP32[$2 + 36 >> 2] = $3;
   $5 = HEAP32[$4 + 28 >> 2];
   $3 = HEAP32[$4 + 24 >> 2];
   HEAP32[$2 + 24 >> 2] = $3;
   HEAP32[$2 + 28 >> 2] = $5;
   $3 = HEAP32[$4 + 20 >> 2];
   $5 = HEAP32[$4 + 16 >> 2];
   HEAP32[$2 + 16 >> 2] = $5;
   HEAP32[$2 + 20 >> 2] = $3;
   $5 = HEAP32[$4 + 12 >> 2];
   $3 = HEAP32[$4 + 8 >> 2];
   HEAP32[$2 + 8 >> 2] = $3;
   HEAP32[$2 + 12 >> 2] = $5;
   $6 = $6 + 1 | 0;
   if (($8 | 0) != ($6 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 88 >> 2] = $8;
 if (($8 | 0) >= 1) {
  $9 = HEAP32[$0 + 96 >> 2];
  $2 = HEAP32[$1 + 112 >> 2];
  $7 = 0;
  while (1) {
   $6 = ($7 << 6) + $9 | 0;
   HEAPF32[$6 + 16 >> 2] = HEAPF64[$2 + 32 >> 3];
   HEAPF32[$6 + 20 >> 2] = HEAPF64[$2 + 40 >> 3];
   HEAPF32[$6 + 24 >> 2] = HEAPF64[$2 + 48 >> 3];
   HEAPF32[$6 + 28 >> 2] = HEAPF64[$2 + 56 >> 3];
   HEAPF32[$6 >> 2] = HEAPF64[$2 >> 3];
   HEAPF32[$6 + 4 >> 2] = HEAPF64[$2 + 8 >> 3];
   HEAPF32[$6 + 8 >> 2] = HEAPF64[$2 + 16 >> 3];
   HEAPF32[$6 + 12 >> 2] = HEAPF64[$2 + 24 >> 3];
   HEAP32[$6 + 32 >> 2] = HEAP32[$2 + 64 >> 2];
   HEAP32[$6 + 36 >> 2] = HEAP32[$2 + 68 >> 2];
   HEAP32[$6 + 40 >> 2] = HEAP32[$2 + 72 >> 2];
   $2 = $2 + 80 | 0;
   $7 = $7 + 1 | 0;
   if (($8 | 0) != ($7 | 0)) {
    continue;
   }
   break;
  }
 }
 $8 = HEAP32[$1 + 108 >> 2];
 $3 = $12;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 $2 = HEAP32[$0 + 128 >> 2];
 if (($2 | 0) < ($8 | 0)) {
  if (HEAP32[$0 + 132 >> 2] < ($8 | 0)) {
   label$15 : {
    if (!$8) {
     $11 = 0;
     $10 = $2;
     break label$15;
    }
    $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8 << 4, 16);
    $10 = HEAP32[$0 + 128 >> 2];
   }
   if (($10 | 0) >= 1) {
    $6 = 0;
    while (1) {
     $7 = $6 << 4;
     $9 = $11 + $7 | 0;
     $7 = HEAP32[$0 + 136 >> 2] + $7 | 0;
     $4 = $7;
     $5 = HEAP32[$4 >> 2];
     $3 = HEAP32[$4 + 4 >> 2];
     $7 = $5;
     $5 = $9;
     HEAP32[$5 >> 2] = $7;
     HEAP32[$5 + 4 >> 2] = $3;
     $5 = HEAP32[$4 + 12 >> 2];
     $3 = HEAP32[$4 + 8 >> 2];
     $4 = $3;
     $3 = $9;
     HEAP32[$3 + 8 >> 2] = $4;
     HEAP32[$3 + 12 >> 2] = $5;
     $6 = $6 + 1 | 0;
     if (($10 | 0) != ($6 | 0)) {
      continue;
     }
     break;
    }
   }
   $6 = HEAP32[$0 + 136 >> 2];
   if ($6) {
    if (HEAPU8[$0 + 140 | 0]) {
     btAlignedFreeInternal_28void__29($6);
    }
    HEAP32[$0 + 136 >> 2] = 0;
   }
   HEAP32[$0 + 136 >> 2] = $11;
   HEAP32[$0 + 132 >> 2] = $8;
   HEAP8[$0 + 140 | 0] = 1;
  }
  while (1) {
   $4 = $12;
   $5 = HEAP32[$4 >> 2];
   $3 = HEAP32[$4 + 4 >> 2];
   $6 = HEAP32[$0 + 136 >> 2] + ($2 << 4) | 0;
   HEAP32[$6 >> 2] = $5;
   HEAP32[$6 + 4 >> 2] = $3;
   $5 = HEAP32[$4 + 12 >> 2];
   $3 = HEAP32[$4 + 8 >> 2];
   $4 = $3;
   $3 = $6;
   HEAP32[$3 + 8 >> 2] = $4;
   HEAP32[$3 + 12 >> 2] = $5;
   $2 = $2 + 1 | 0;
   if (($8 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 128 >> 2] = $8;
 if (($8 | 0) >= 1) {
  $9 = HEAP32[$0 + 136 >> 2];
  $2 = HEAP32[$1 + 116 >> 2];
  $7 = 0;
  while (1) {
   $6 = ($7 << 4) + $9 | 0;
   HEAP32[$6 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
   HEAP16[$6 + 6 >> 1] = HEAPU16[$2 + 6 >> 1];
   HEAP16[$6 + 8 >> 1] = HEAPU16[$2 + 8 >> 1];
   HEAP16[$6 + 10 >> 1] = HEAPU16[$2 + 10 >> 1];
   HEAP16[$6 >> 1] = HEAPU16[$2 >> 1];
   HEAP16[$6 + 2 >> 1] = HEAPU16[$2 + 2 >> 1];
   HEAP16[$6 + 4 >> 1] = HEAPU16[$2 + 4 >> 1];
   $2 = $2 + 16 | 0;
   $7 = $7 + 1 | 0;
   if (($8 | 0) != ($7 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 144 >> 2] = HEAP32[$1 + 120 >> 2];
 $6 = HEAP32[$0 + 152 >> 2];
 $7 = HEAP32[$1 + 124 >> 2];
 if (($6 | 0) < ($7 | 0)) {
  if (HEAP32[$0 + 156 >> 2] < ($7 | 0)) {
   label$26 : {
    if (!$7) {
     $11 = 0;
     $10 = $6;
     break label$26;
    }
    $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($7 << 5, 16);
    $10 = HEAP32[$0 + 152 >> 2];
   }
   if (($10 | 0) >= 1) {
    $9 = 0;
    while (1) {
     $8 = $9 << 5;
     $2 = $11 + $8 | 0;
     $8 = HEAP32[$0 + 160 >> 2] + $8 | 0;
     $4 = $8;
     $5 = HEAP32[$4 >> 2];
     $3 = HEAP32[$4 + 4 >> 2];
     HEAP32[$2 >> 2] = $5;
     HEAP32[$2 + 4 >> 2] = $3;
     $5 = HEAP32[$4 + 28 >> 2];
     $3 = HEAP32[$4 + 24 >> 2];
     HEAP32[$2 + 24 >> 2] = $3;
     HEAP32[$2 + 28 >> 2] = $5;
     $3 = HEAP32[$4 + 20 >> 2];
     $5 = HEAP32[$4 + 16 >> 2];
     HEAP32[$2 + 16 >> 2] = $5;
     HEAP32[$2 + 20 >> 2] = $3;
     $5 = HEAP32[$4 + 12 >> 2];
     $3 = HEAP32[$4 + 8 >> 2];
     HEAP32[$2 + 8 >> 2] = $3;
     HEAP32[$2 + 12 >> 2] = $5;
     $9 = $9 + 1 | 0;
     if (($10 | 0) != ($9 | 0)) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$0 + 160 >> 2];
   if ($2) {
    if (HEAPU8[$0 + 164 | 0]) {
     btAlignedFreeInternal_28void__29($2);
    }
    HEAP32[$0 + 160 >> 2] = 0;
   }
   HEAP32[$0 + 160 >> 2] = $11;
   HEAP32[$0 + 156 >> 2] = $7;
   HEAP8[$0 + 164 | 0] = 1;
  }
  while (1) {
   $4 = $12;
   $5 = HEAP32[$4 >> 2];
   $3 = HEAP32[$4 + 4 >> 2];
   $2 = HEAP32[$0 + 160 >> 2] + ($6 << 5) | 0;
   HEAP32[$2 >> 2] = $5;
   HEAP32[$2 + 4 >> 2] = $3;
   $5 = HEAP32[$4 + 28 >> 2];
   $3 = HEAP32[$4 + 24 >> 2];
   HEAP32[$2 + 24 >> 2] = $3;
   HEAP32[$2 + 28 >> 2] = $5;
   $3 = HEAP32[$4 + 20 >> 2];
   $5 = HEAP32[$4 + 16 >> 2];
   HEAP32[$2 + 16 >> 2] = $5;
   HEAP32[$2 + 20 >> 2] = $3;
   $5 = HEAP32[$4 + 12 >> 2];
   $3 = HEAP32[$4 + 8 >> 2];
   HEAP32[$2 + 8 >> 2] = $3;
   HEAP32[$2 + 12 >> 2] = $5;
   $6 = $6 + 1 | 0;
   if (($7 | 0) != ($6 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 152 >> 2] = $7;
 if (($7 | 0) >= 1) {
  $8 = HEAP32[$0 + 160 >> 2];
  $2 = HEAP32[$1 + 128 >> 2];
  $0 = 0;
  while (1) {
   $6 = ($0 << 5) + $8 | 0;
   HEAP16[$6 + 6 >> 1] = HEAPU16[$2 + 14 >> 1];
   HEAP16[$6 + 8 >> 1] = HEAPU16[$2 + 16 >> 1];
   HEAP16[$6 + 10 >> 1] = HEAPU16[$2 + 18 >> 1];
   HEAP16[$6 >> 1] = HEAPU16[$2 + 8 >> 1];
   HEAP16[$6 + 2 >> 1] = HEAPU16[$2 + 10 >> 1];
   HEAP16[$6 + 4 >> 1] = HEAPU16[$2 + 12 >> 1];
   HEAP32[$6 + 12 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 16 >> 2] = HEAP32[$2 + 4 >> 2];
   $2 = $2 + 20 | 0;
   $0 = $0 + 1 | 0;
   if (($7 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = $12 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuantizedBvh__deSerializeFloat_28btQuantizedBvhFloatData__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $12 = global$0 + -64 | 0;
 $3 = $12;
 if ($12 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$0 + 20 >> 2] = HEAP32[$1 + 16 >> 2];
 HEAP32[$0 + 24 >> 2] = HEAP32[$1 + 20 >> 2];
 HEAP32[$0 + 28 >> 2] = HEAP32[$1 + 24 >> 2];
 HEAP32[$0 + 32 >> 2] = HEAP32[$1 + 28 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 12 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$0 + 16 >> 2] = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 36 >> 2] = HEAP32[$1 + 32 >> 2];
 HEAP32[$0 + 40 >> 2] = HEAP32[$1 + 36 >> 2];
 HEAP32[$0 + 44 >> 2] = HEAP32[$1 + 40 >> 2];
 HEAP32[$0 + 48 >> 2] = HEAP32[$1 + 44 >> 2];
 HEAP32[$0 + 56 >> 2] = HEAP32[$1 + 48 >> 2];
 HEAP8[$0 + 60 | 0] = HEAP32[$1 + 52 >> 2] != 0;
 $8 = HEAP32[$1 + 56 >> 2];
 $3 = $12;
 HEAP32[$3 + 56 >> 2] = 0;
 HEAP32[$3 + 60 >> 2] = 0;
 HEAP32[$3 + 48 >> 2] = 0;
 HEAP32[$3 + 52 >> 2] = 0;
 HEAP32[$3 + 40 >> 2] = 0;
 HEAP32[$3 + 44 >> 2] = 0;
 HEAP32[$3 + 32 >> 2] = 0;
 HEAP32[$3 + 36 >> 2] = 0;
 HEAP32[$3 + 24 >> 2] = 0;
 HEAP32[$3 + 28 >> 2] = 0;
 HEAP32[$3 + 16 >> 2] = 0;
 HEAP32[$3 + 20 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 $6 = HEAP32[$0 + 88 >> 2];
 if (($6 | 0) < ($8 | 0)) {
  if (HEAP32[$0 + 92 >> 2] < ($8 | 0)) {
   if ($8) {
    $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8 << 6, 16);
    $10 = HEAP32[$0 + 88 >> 2];
   } else {
    $10 = $6;
   }
   if (($10 | 0) >= 1) {
    while (1) {
     $7 = $9 << 6;
     $2 = $11 + $7 | 0;
     $7 = HEAP32[$0 + 96 >> 2] + $7 | 0;
     $4 = $7;
     $5 = HEAP32[$4 >> 2];
     $3 = HEAP32[$4 + 4 >> 2];
     HEAP32[$2 >> 2] = $5;
     HEAP32[$2 + 4 >> 2] = $3;
     $5 = HEAP32[$4 + 60 >> 2];
     $3 = HEAP32[$4 + 56 >> 2];
     HEAP32[$2 + 56 >> 2] = $3;
     HEAP32[$2 + 60 >> 2] = $5;
     $3 = HEAP32[$4 + 52 >> 2];
     $5 = HEAP32[$4 + 48 >> 2];
     HEAP32[$2 + 48 >> 2] = $5;
     HEAP32[$2 + 52 >> 2] = $3;
     $5 = HEAP32[$4 + 44 >> 2];
     $3 = HEAP32[$4 + 40 >> 2];
     HEAP32[$2 + 40 >> 2] = $3;
     HEAP32[$2 + 44 >> 2] = $5;
     $3 = HEAP32[$4 + 36 >> 2];
     $5 = HEAP32[$4 + 32 >> 2];
     HEAP32[$2 + 32 >> 2] = $5;
     HEAP32[$2 + 36 >> 2] = $3;
     $5 = HEAP32[$4 + 28 >> 2];
     $3 = HEAP32[$4 + 24 >> 2];
     HEAP32[$2 + 24 >> 2] = $3;
     HEAP32[$2 + 28 >> 2] = $5;
     $3 = HEAP32[$4 + 20 >> 2];
     $5 = HEAP32[$4 + 16 >> 2];
     HEAP32[$2 + 16 >> 2] = $5;
     HEAP32[$2 + 20 >> 2] = $3;
     $5 = HEAP32[$4 + 12 >> 2];
     $3 = HEAP32[$4 + 8 >> 2];
     HEAP32[$2 + 8 >> 2] = $3;
     HEAP32[$2 + 12 >> 2] = $5;
     $9 = $9 + 1 | 0;
     if (($10 | 0) != ($9 | 0)) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$0 + 96 >> 2];
   if ($2) {
    if (HEAPU8[$0 + 100 | 0]) {
     btAlignedFreeInternal_28void__29($2);
    }
    HEAP32[$0 + 96 >> 2] = 0;
   }
   HEAP32[$0 + 96 >> 2] = $11;
   HEAP32[$0 + 92 >> 2] = $8;
   HEAP8[$0 + 100 | 0] = 1;
  }
  while (1) {
   $4 = $12;
   $5 = HEAP32[$4 >> 2];
   $3 = HEAP32[$4 + 4 >> 2];
   $2 = HEAP32[$0 + 96 >> 2] + ($6 << 6) | 0;
   HEAP32[$2 >> 2] = $5;
   HEAP32[$2 + 4 >> 2] = $3;
   $5 = HEAP32[$4 + 60 >> 2];
   $3 = HEAP32[$4 + 56 >> 2];
   HEAP32[$2 + 56 >> 2] = $3;
   HEAP32[$2 + 60 >> 2] = $5;
   $3 = HEAP32[$4 + 52 >> 2];
   $5 = HEAP32[$4 + 48 >> 2];
   HEAP32[$2 + 48 >> 2] = $5;
   HEAP32[$2 + 52 >> 2] = $3;
   $5 = HEAP32[$4 + 44 >> 2];
   $3 = HEAP32[$4 + 40 >> 2];
   HEAP32[$2 + 40 >> 2] = $3;
   HEAP32[$2 + 44 >> 2] = $5;
   $3 = HEAP32[$4 + 36 >> 2];
   $5 = HEAP32[$4 + 32 >> 2];
   HEAP32[$2 + 32 >> 2] = $5;
   HEAP32[$2 + 36 >> 2] = $3;
   $5 = HEAP32[$4 + 28 >> 2];
   $3 = HEAP32[$4 + 24 >> 2];
   HEAP32[$2 + 24 >> 2] = $3;
   HEAP32[$2 + 28 >> 2] = $5;
   $3 = HEAP32[$4 + 20 >> 2];
   $5 = HEAP32[$4 + 16 >> 2];
   HEAP32[$2 + 16 >> 2] = $5;
   HEAP32[$2 + 20 >> 2] = $3;
   $5 = HEAP32[$4 + 12 >> 2];
   $3 = HEAP32[$4 + 8 >> 2];
   HEAP32[$2 + 8 >> 2] = $3;
   HEAP32[$2 + 12 >> 2] = $5;
   $6 = $6 + 1 | 0;
   if (($8 | 0) != ($6 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 88 >> 2] = $8;
 if (($8 | 0) >= 1) {
  $9 = HEAP32[$0 + 96 >> 2];
  $2 = HEAP32[$1 + 64 >> 2];
  $7 = 0;
  while (1) {
   $6 = ($7 << 6) + $9 | 0;
   HEAP32[$6 + 16 >> 2] = HEAP32[$2 + 16 >> 2];
   HEAP32[$6 + 20 >> 2] = HEAP32[$2 + 20 >> 2];
   HEAP32[$6 + 24 >> 2] = HEAP32[$2 + 24 >> 2];
   HEAP32[$6 + 28 >> 2] = HEAP32[$2 + 28 >> 2];
   HEAP32[$6 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
   HEAP32[$6 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
   HEAP32[$6 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
   HEAP32[$6 + 32 >> 2] = HEAP32[$2 + 32 >> 2];
   HEAP32[$6 + 36 >> 2] = HEAP32[$2 + 36 >> 2];
   HEAP32[$6 + 40 >> 2] = HEAP32[$2 + 40 >> 2];
   $2 = $2 + 48 | 0;
   $7 = $7 + 1 | 0;
   if (($8 | 0) != ($7 | 0)) {
    continue;
   }
   break;
  }
 }
 $8 = HEAP32[$1 + 60 >> 2];
 $3 = $12;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 $2 = HEAP32[$0 + 128 >> 2];
 if (($2 | 0) < ($8 | 0)) {
  if (HEAP32[$0 + 132 >> 2] < ($8 | 0)) {
   label$15 : {
    if (!$8) {
     $11 = 0;
     $10 = $2;
     break label$15;
    }
    $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8 << 4, 16);
    $10 = HEAP32[$0 + 128 >> 2];
   }
   if (($10 | 0) >= 1) {
    $6 = 0;
    while (1) {
     $7 = $6 << 4;
     $9 = $11 + $7 | 0;
     $7 = HEAP32[$0 + 136 >> 2] + $7 | 0;
     $4 = $7;
     $5 = HEAP32[$4 >> 2];
     $3 = HEAP32[$4 + 4 >> 2];
     $7 = $5;
     $5 = $9;
     HEAP32[$5 >> 2] = $7;
     HEAP32[$5 + 4 >> 2] = $3;
     $5 = HEAP32[$4 + 12 >> 2];
     $3 = HEAP32[$4 + 8 >> 2];
     $4 = $3;
     $3 = $9;
     HEAP32[$3 + 8 >> 2] = $4;
     HEAP32[$3 + 12 >> 2] = $5;
     $6 = $6 + 1 | 0;
     if (($10 | 0) != ($6 | 0)) {
      continue;
     }
     break;
    }
   }
   $6 = HEAP32[$0 + 136 >> 2];
   if ($6) {
    if (HEAPU8[$0 + 140 | 0]) {
     btAlignedFreeInternal_28void__29($6);
    }
    HEAP32[$0 + 136 >> 2] = 0;
   }
   HEAP32[$0 + 136 >> 2] = $11;
   HEAP32[$0 + 132 >> 2] = $8;
   HEAP8[$0 + 140 | 0] = 1;
  }
  while (1) {
   $4 = $12;
   $5 = HEAP32[$4 >> 2];
   $3 = HEAP32[$4 + 4 >> 2];
   $6 = HEAP32[$0 + 136 >> 2] + ($2 << 4) | 0;
   HEAP32[$6 >> 2] = $5;
   HEAP32[$6 + 4 >> 2] = $3;
   $5 = HEAP32[$4 + 12 >> 2];
   $3 = HEAP32[$4 + 8 >> 2];
   $4 = $3;
   $3 = $6;
   HEAP32[$3 + 8 >> 2] = $4;
   HEAP32[$3 + 12 >> 2] = $5;
   $2 = $2 + 1 | 0;
   if (($8 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 128 >> 2] = $8;
 if (($8 | 0) >= 1) {
  $9 = HEAP32[$0 + 136 >> 2];
  $2 = HEAP32[$1 + 68 >> 2];
  $7 = 0;
  while (1) {
   $6 = ($7 << 4) + $9 | 0;
   HEAP32[$6 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
   HEAP16[$6 + 6 >> 1] = HEAPU16[$2 + 6 >> 1];
   HEAP16[$6 + 8 >> 1] = HEAPU16[$2 + 8 >> 1];
   HEAP16[$6 + 10 >> 1] = HEAPU16[$2 + 10 >> 1];
   HEAP16[$6 >> 1] = HEAPU16[$2 >> 1];
   HEAP16[$6 + 2 >> 1] = HEAPU16[$2 + 2 >> 1];
   HEAP16[$6 + 4 >> 1] = HEAPU16[$2 + 4 >> 1];
   $2 = $2 + 16 | 0;
   $7 = $7 + 1 | 0;
   if (($8 | 0) != ($7 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 144 >> 2] = HEAP32[$1 + 76 >> 2];
 $6 = HEAP32[$0 + 152 >> 2];
 $7 = HEAP32[$1 + 80 >> 2];
 if (($6 | 0) < ($7 | 0)) {
  if (HEAP32[$0 + 156 >> 2] < ($7 | 0)) {
   label$26 : {
    if (!$7) {
     $11 = 0;
     $10 = $6;
     break label$26;
    }
    $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($7 << 5, 16);
    $10 = HEAP32[$0 + 152 >> 2];
   }
   if (($10 | 0) >= 1) {
    $9 = 0;
    while (1) {
     $8 = $9 << 5;
     $2 = $11 + $8 | 0;
     $8 = HEAP32[$0 + 160 >> 2] + $8 | 0;
     $4 = $8;
     $5 = HEAP32[$4 >> 2];
     $3 = HEAP32[$4 + 4 >> 2];
     HEAP32[$2 >> 2] = $5;
     HEAP32[$2 + 4 >> 2] = $3;
     $5 = HEAP32[$4 + 28 >> 2];
     $3 = HEAP32[$4 + 24 >> 2];
     HEAP32[$2 + 24 >> 2] = $3;
     HEAP32[$2 + 28 >> 2] = $5;
     $3 = HEAP32[$4 + 20 >> 2];
     $5 = HEAP32[$4 + 16 >> 2];
     HEAP32[$2 + 16 >> 2] = $5;
     HEAP32[$2 + 20 >> 2] = $3;
     $5 = HEAP32[$4 + 12 >> 2];
     $3 = HEAP32[$4 + 8 >> 2];
     HEAP32[$2 + 8 >> 2] = $3;
     HEAP32[$2 + 12 >> 2] = $5;
     $9 = $9 + 1 | 0;
     if (($10 | 0) != ($9 | 0)) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$0 + 160 >> 2];
   if ($2) {
    if (HEAPU8[$0 + 164 | 0]) {
     btAlignedFreeInternal_28void__29($2);
    }
    HEAP32[$0 + 160 >> 2] = 0;
   }
   HEAP32[$0 + 160 >> 2] = $11;
   HEAP32[$0 + 156 >> 2] = $7;
   HEAP8[$0 + 164 | 0] = 1;
  }
  while (1) {
   $4 = $12;
   $5 = HEAP32[$4 >> 2];
   $3 = HEAP32[$4 + 4 >> 2];
   $2 = HEAP32[$0 + 160 >> 2] + ($6 << 5) | 0;
   HEAP32[$2 >> 2] = $5;
   HEAP32[$2 + 4 >> 2] = $3;
   $5 = HEAP32[$4 + 28 >> 2];
   $3 = HEAP32[$4 + 24 >> 2];
   HEAP32[$2 + 24 >> 2] = $3;
   HEAP32[$2 + 28 >> 2] = $5;
   $3 = HEAP32[$4 + 20 >> 2];
   $5 = HEAP32[$4 + 16 >> 2];
   HEAP32[$2 + 16 >> 2] = $5;
   HEAP32[$2 + 20 >> 2] = $3;
   $5 = HEAP32[$4 + 12 >> 2];
   $3 = HEAP32[$4 + 8 >> 2];
   HEAP32[$2 + 8 >> 2] = $3;
   HEAP32[$2 + 12 >> 2] = $5;
   $6 = $6 + 1 | 0;
   if (($7 | 0) != ($6 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 152 >> 2] = $7;
 if (($7 | 0) >= 1) {
  $8 = HEAP32[$0 + 160 >> 2];
  $2 = HEAP32[$1 + 72 >> 2];
  $0 = 0;
  while (1) {
   $6 = ($0 << 5) + $8 | 0;
   HEAP16[$6 + 6 >> 1] = HEAPU16[$2 + 14 >> 1];
   HEAP16[$6 + 8 >> 1] = HEAPU16[$2 + 16 >> 1];
   HEAP16[$6 + 10 >> 1] = HEAPU16[$2 + 18 >> 1];
   HEAP16[$6 >> 1] = HEAPU16[$2 + 8 >> 1];
   HEAP16[$6 + 2 >> 1] = HEAPU16[$2 + 10 >> 1];
   HEAP16[$6 + 4 >> 1] = HEAPU16[$2 + 12 >> 1];
   HEAP32[$6 + 12 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$6 + 16 >> 2] = HEAP32[$2 + 4 >> 2];
   $2 = $2 + 20 | 0;
   $0 = $0 + 1 | 0;
   if (($7 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = $12 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btGjkEpaSolver2__Distance_28btConvexShape_20const__2c_20btTransform_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btGjkEpaSolver2__sResults__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = 0, $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0);
 $6 = global$0 - 544 | 0;
 $26 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $26;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$5 + 4 >> 2] = 0;
 HEAP32[$5 + 32 >> 2] = 0;
 HEAP32[$5 + 24 >> 2] = 0;
 HEAP32[$5 + 28 >> 2] = 0;
 HEAP32[$5 + 16 >> 2] = 0;
 HEAP32[$5 + 20 >> 2] = 0;
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP32[$5 + 12 >> 2] = 0;
 HEAP32[$6 + 388 >> 2] = $2;
 HEAP32[$6 + 384 >> 2] = $0;
 $10 = HEAPF32[$3 + 20 >> 2];
 $7 = HEAPF32[$3 + 36 >> 2];
 $0 = $1 + 20 | 0;
 $8 = HEAPF32[$0 >> 2];
 $2 = $1 + 36 | 0;
 $9 = HEAPF32[$2 >> 2];
 $12 = HEAPF32[$3 + 24 >> 2];
 $26 = $1 + 24 | 0;
 $14 = HEAPF32[$26 >> 2];
 $13 = HEAPF32[$3 + 40 >> 2];
 $15 = HEAPF32[$1 + 40 >> 2];
 $16 = HEAPF32[$3 + 32 >> 2];
 $17 = HEAPF32[$3 >> 2];
 $18 = HEAPF32[$3 + 16 >> 2];
 $19 = HEAPF32[$3 + 4 >> 2];
 $20 = HEAPF32[$1 + 32 >> 2];
 $22 = HEAPF32[$1 >> 2];
 $23 = HEAPF32[$1 + 16 >> 2];
 $24 = HEAPF32[$1 + 4 >> 2];
 $21 = HEAPF32[$3 + 8 >> 2];
 $25 = HEAPF32[$1 + 8 >> 2];
 HEAP32[$6 + 436 >> 2] = 0;
 HEAP32[$6 + 420 >> 2] = 0;
 HEAP32[$6 + 404 >> 2] = 0;
 $27 = Math_fround(Math_fround(Math_fround($25 * $21) + Math_fround($14 * $12)) + Math_fround($15 * $13));
 HEAPF32[$6 + 432 >> 2] = $27;
 $28 = Math_fround(Math_fround(Math_fround($24 * $21) + Math_fround($8 * $12)) + Math_fround($9 * $13));
 HEAPF32[$6 + 428 >> 2] = $28;
 $12 = Math_fround(Math_fround(Math_fround($22 * $21) + Math_fround($23 * $12)) + Math_fround($20 * $13));
 HEAPF32[$6 + 424 >> 2] = $12;
 $13 = Math_fround(Math_fround(Math_fround($25 * $19) + Math_fround($14 * $10)) + Math_fround($15 * $7));
 HEAPF32[$6 + 416 >> 2] = $13;
 $21 = Math_fround(Math_fround(Math_fround($24 * $19) + Math_fround($8 * $10)) + Math_fround($9 * $7));
 HEAPF32[$6 + 412 >> 2] = $21;
 $10 = Math_fround(Math_fround(Math_fround($22 * $19) + Math_fround($23 * $10)) + Math_fround($20 * $7));
 HEAPF32[$6 + 408 >> 2] = $10;
 $7 = Math_fround(Math_fround(Math_fround($17 * $25) + Math_fround($18 * $14)) + Math_fround($16 * $15));
 HEAPF32[$6 + 400 >> 2] = $7;
 $8 = Math_fround(Math_fround(Math_fround($17 * $24) + Math_fround($18 * $8)) + Math_fround($16 * $9));
 HEAPF32[$6 + 396 >> 2] = $8;
 $9 = Math_fround(Math_fround(Math_fround($17 * $22) + Math_fround($18 * $23)) + Math_fround($16 * $20));
 HEAPF32[$6 + 392 >> 2] = $9;
 $14 = HEAPF32[$1 + 20 >> 2];
 $15 = HEAPF32[$1 + 36 >> 2];
 $16 = HEAPF32[$1 + 24 >> 2];
 $17 = HEAPF32[$1 + 52 >> 2];
 $18 = HEAPF32[$3 + 52 >> 2];
 $19 = HEAPF32[$1 + 40 >> 2];
 $20 = HEAPF32[$1 + 56 >> 2];
 $22 = HEAPF32[$3 + 56 >> 2];
 $23 = HEAPF32[$1 >> 2];
 $24 = HEAPF32[$1 + 16 >> 2];
 $25 = HEAPF32[$1 + 32 >> 2];
 $29 = HEAPF32[$1 + 4 >> 2];
 $30 = HEAPF32[$1 + 8 >> 2];
 $31 = HEAPF32[$1 + 48 >> 2];
 $32 = HEAPF32[$3 + 48 >> 2];
 HEAP32[$6 + 508 >> 2] = 0;
 HEAP32[$6 + 500 >> 2] = 0;
 HEAP32[$6 + 484 >> 2] = 0;
 HEAPF32[$6 + 480 >> 2] = $27;
 HEAPF32[$6 + 476 >> 2] = $13;
 HEAPF32[$6 + 472 >> 2] = $7;
 HEAP32[$6 + 468 >> 2] = 0;
 HEAPF32[$6 + 464 >> 2] = $28;
 HEAPF32[$6 + 460 >> 2] = $21;
 HEAPF32[$6 + 456 >> 2] = $8;
 HEAP32[$6 + 452 >> 2] = 0;
 HEAPF32[$6 + 448 >> 2] = $12;
 HEAPF32[$6 + 444 >> 2] = $10;
 $10 = Math_fround($32 - $31);
 $7 = Math_fround($18 - $17);
 $8 = Math_fround($22 - $20);
 HEAPF32[$6 + 496 >> 2] = Math_fround(Math_fround($30 * $10) + Math_fround($16 * $7)) + Math_fround($19 * $8);
 HEAPF32[$6 + 492 >> 2] = Math_fround(Math_fround($10 * $29) + Math_fround($7 * $14)) + Math_fround($8 * $15);
 HEAPF32[$6 + 488 >> 2] = Math_fround(Math_fround($10 * $23) + Math_fround($7 * $24)) + Math_fround($8 * $25);
 HEAP32[$6 + 504 >> 2] = 183;
 HEAPF32[$6 + 440 >> 2] = $9;
 HEAP32[$6 + 136 >> 2] = 0;
 HEAP32[$6 + 140 >> 2] = 0;
 HEAP32[$6 + 128 >> 2] = 0;
 HEAP32[$6 + 132 >> 2] = 0;
 HEAP32[$6 + 364 >> 2] = 0;
 HEAP32[$6 + 368 >> 2] = 0;
 HEAP32[$6 + 376 >> 2] = 2;
 HEAP32[$6 + 144 >> 2] = 0;
 label$2 : {
  label$3 : {
   $3 = gjkepa2_impl__GJK__Evaluate_28gjkepa2_impl__MinkowskiDiff_20const__2c_20btVector3_20const__29($6, $6 + 384 | 0, $4);
   if (!$3) {
    $11 = HEAP32[$6 + 372 >> 2];
    if (!HEAP32[$11 + 32 >> 2]) {
     $12 = Math_fround(0);
     $14 = Math_fround(0);
     $13 = Math_fround(0);
     $15 = Math_fround(0);
     $16 = Math_fround(0);
     $17 = Math_fround(0);
     break label$3;
    }
    $17 = Math_fround(0);
    $3 = 0;
    $16 = Math_fround(0);
    $15 = Math_fround(0);
    $13 = Math_fround(0);
    $14 = Math_fround(0);
    $12 = Math_fround(0);
    while (1) {
     $2 = $3 << 2;
     $11 = $11 + $2 | 0;
     $10 = HEAPF32[$11 + 16 >> 2];
     $26 = HEAP32[$11 >> 2];
     $11 = HEAP32[$6 + 504 >> 2];
     $0 = HEAP32[$6 + 508 >> 2];
     $4 = HEAP32[$6 + 384 >> 2] + ($0 >> 1) | 0;
     $11 = $0 & 1 ? HEAP32[HEAP32[$4 >> 2] + $11 >> 2] : $11;
     FUNCTION_TABLE[$11]($6 + 528 | 0, $4, $26);
     $0 = HEAP32[$6 + 508 >> 2];
     $4 = HEAP32[$6 + 388 >> 2] + ($0 >> 1) | 0;
     $18 = Math_fround($10 * HEAPF32[$6 + 536 >> 2]);
     $19 = Math_fround($10 * HEAPF32[$6 + 532 >> 2]);
     $20 = Math_fround($10 * HEAPF32[$6 + 528 >> 2]);
     $11 = HEAP32[HEAP32[$6 + 372 >> 2] + $2 >> 2];
     $7 = HEAPF32[$11 + 8 >> 2];
     $8 = HEAPF32[$11 >> 2];
     $9 = Math_fround(-HEAPF32[$11 + 4 >> 2]);
     $11 = HEAP32[$6 + 504 >> 2];
     $11 = $0 & 1 ? HEAP32[HEAP32[$4 >> 2] + $11 >> 2] : $11;
     $17 = Math_fround($17 + $18);
     $16 = Math_fround($16 + $19);
     $15 = Math_fround($15 + $20);
     HEAP32[$6 + 524 >> 2] = 0;
     HEAPF32[$6 + 520 >> 2] = Math_fround(Math_fround(HEAPF32[$6 + 428 >> 2] * $9) - Math_fround($8 * HEAPF32[$6 + 424 >> 2])) - Math_fround($7 * HEAPF32[$6 + 432 >> 2]);
     HEAPF32[$6 + 516 >> 2] = Math_fround(Math_fround(HEAPF32[$6 + 412 >> 2] * $9) - Math_fround($8 * HEAPF32[$6 + 408 >> 2])) - Math_fround($7 * HEAPF32[$6 + 416 >> 2]);
     HEAPF32[$6 + 512 >> 2] = Math_fround(Math_fround(HEAPF32[$6 + 396 >> 2] * $9) - Math_fround($8 * HEAPF32[$6 + 392 >> 2])) - Math_fround($7 * HEAPF32[$6 + 400 >> 2]);
     FUNCTION_TABLE[$11]($6 + 528 | 0, $4, $6 + 512 | 0);
     $7 = HEAPF32[$6 + 528 >> 2];
     $8 = HEAPF32[$6 + 532 >> 2];
     $9 = HEAPF32[$6 + 536 >> 2];
     $13 = Math_fround($13 + Math_fround($10 * Math_fround(Math_fround(Math_fround(Math_fround($7 * HEAPF32[$6 + 472 >> 2]) + Math_fround($8 * HEAPF32[$6 + 476 >> 2])) + Math_fround($9 * HEAPF32[$6 + 480 >> 2])) + HEAPF32[$6 + 496 >> 2])));
     $14 = Math_fround($14 + Math_fround($10 * Math_fround(Math_fround(Math_fround(Math_fround($7 * HEAPF32[$6 + 456 >> 2]) + Math_fround($8 * HEAPF32[$6 + 460 >> 2])) + Math_fround($9 * HEAPF32[$6 + 464 >> 2])) + HEAPF32[$6 + 492 >> 2])));
     $12 = Math_fround($12 + Math_fround($10 * Math_fround(Math_fround(Math_fround(Math_fround($7 * HEAPF32[$6 + 440 >> 2]) + Math_fround($8 * HEAPF32[$6 + 444 >> 2])) + Math_fround($9 * HEAPF32[$6 + 448 >> 2])) + HEAPF32[$6 + 488 >> 2])));
     $3 = $3 + 1 | 0;
     $11 = HEAP32[$6 + 372 >> 2];
     if ($3 >>> 0 < HEAPU32[$11 + 32 >> 2]) {
      continue;
     }
     break;
    }
    break label$3;
   }
   HEAP32[$5 >> 2] = ($3 | 0) == 1 ? 1 : 2;
   break label$2;
  }
  $10 = HEAPF32[$1 + 48 >> 2];
  $7 = HEAPF32[$1 + 8 >> 2];
  $8 = HEAPF32[$1 >> 2];
  $9 = HEAPF32[$1 + 4 >> 2];
  $18 = HEAPF32[$1 + 52 >> 2];
  $19 = HEAPF32[$1 + 24 >> 2];
  $20 = HEAPF32[$1 + 16 >> 2];
  $22 = HEAPF32[$1 + 20 >> 2];
  $23 = HEAPF32[$1 + 56 >> 2];
  $24 = HEAPF32[$1 + 40 >> 2];
  $21 = HEAPF32[$1 + 32 >> 2];
  $25 = HEAPF32[$1 + 36 >> 2];
  HEAP32[$5 + 16 >> 2] = 0;
  HEAPF32[$5 + 12 >> 2] = $23 + Math_fround(Math_fround(Math_fround($15 * $21) + Math_fround($16 * $25)) + Math_fround($17 * $24));
  HEAPF32[$5 + 8 >> 2] = $18 + Math_fround(Math_fround(Math_fround($15 * $20) + Math_fround($16 * $22)) + Math_fround($17 * $19));
  HEAPF32[$5 + 4 >> 2] = $10 + Math_fround(Math_fround(Math_fround($15 * $8) + Math_fround($16 * $9)) + Math_fround($17 * $7));
  $18 = HEAPF32[$1 + 48 >> 2];
  $19 = HEAPF32[$1 + 8 >> 2];
  $20 = HEAPF32[$1 >> 2];
  $22 = HEAPF32[$1 + 4 >> 2];
  $23 = HEAPF32[$1 + 52 >> 2];
  $24 = HEAPF32[$1 + 24 >> 2];
  $21 = HEAPF32[$1 + 16 >> 2];
  $25 = HEAPF32[$1 + 20 >> 2];
  $27 = HEAPF32[$1 + 56 >> 2];
  $28 = HEAPF32[$1 + 40 >> 2];
  $29 = HEAPF32[$1 + 32 >> 2];
  $30 = HEAPF32[$1 + 36 >> 2];
  $10 = Math_fround($15 - $12);
  $7 = Math_fround($16 - $14);
  $8 = Math_fround($17 - $13);
  $9 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($7 * $7)) + Math_fround($8 * $8))));
  HEAPF32[$5 + 52 >> 2] = $9;
  HEAP32[$5 + 48 >> 2] = 0;
  HEAP32[$5 + 32 >> 2] = 0;
  $9 = $9 > Math_fround(9999999747378752e-20) ? Math_fround(Math_fround(1) / $9) : Math_fround(1);
  HEAPF32[$5 + 44 >> 2] = $8 * $9;
  HEAPF32[$5 + 40 >> 2] = $7 * $9;
  HEAPF32[$5 + 36 >> 2] = $10 * $9;
  HEAPF32[$5 + 28 >> 2] = $27 + Math_fround(Math_fround(Math_fround($12 * $29) + Math_fround($14 * $30)) + Math_fround($13 * $28));
  HEAPF32[$5 + 24 >> 2] = $23 + Math_fround(Math_fround(Math_fround($12 * $21) + Math_fround($14 * $25)) + Math_fround($13 * $24));
  HEAPF32[$5 + 20 >> 2] = $18 + Math_fround(Math_fround(Math_fround($12 * $20) + Math_fround($14 * $22)) + Math_fround($13 * $19));
  $11 = 1;
 }
 $0 = $6 + 544 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $11;
}
function btConvexConcaveCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = Math_fround(0), $50 = Math_fround(0), $51 = Math_fround(0), $52 = Math_fround(0), $53 = Math_fround(0), $54 = Math_fround(0), $55 = Math_fround(0), $56 = Math_fround(0), $57 = Math_fround(0), $58 = Math_fround(0), $59 = Math_fround(0), $60 = Math_fround(0), $61 = Math_fround(0);
 $4 = global$0 - 240 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $56 = Math_fround(1);
 $3 = HEAPU8[$0 + 76 | 0];
 $0 = $3 ? $2 : $1;
 $5 = Math_fround(HEAPF32[$0 + 116 >> 2] - HEAPF32[$0 + 52 >> 2]);
 $14 = Math_fround($5 * $5);
 $5 = Math_fround(HEAPF32[$0 + 120 >> 2] - HEAPF32[$0 + 56 >> 2]);
 $14 = Math_fround($14 + Math_fround($5 * $5));
 $5 = Math_fround(HEAPF32[$0 + 124 >> 2] - HEAPF32[$0 + 60 >> 2]);
 $14 = Math_fround($14 + Math_fround($5 * $5));
 $5 = HEAPF32[$0 + 276 >> 2];
 label$2 : {
  if ($14 < Math_fround($5 * $5)) {
   break label$2;
  }
  $2 = $3 ? $1 : $2;
  $1 = HEAP32[$2 + 192 >> 2];
  if (HEAP32[$1 + 4 >> 2] + -21 >>> 0 > 8) {
   break label$2;
  }
  $19 = HEAPF32[$0 + 92 >> 2];
  $20 = HEAPF32[$0 + 76 >> 2];
  $25 = HEAPF32[$0 + 108 >> 2];
  $21 = HEAPF32[$0 + 88 >> 2];
  $22 = HEAPF32[$0 + 72 >> 2];
  $26 = HEAPF32[$0 + 104 >> 2];
  $27 = HEAPF32[$0 + 100 >> 2];
  $28 = HEAPF32[$0 + 84 >> 2];
  $29 = HEAPF32[$0 + 68 >> 2];
  $5 = HEAPF32[$2 + 36 >> 2];
  $11 = HEAPF32[$2 + 20 >> 2];
  $7 = HEAPF32[$2 + 4 >> 2];
  $30 = HEAPF32[$0 + 28 >> 2];
  $31 = HEAPF32[$0 + 12 >> 2];
  $42 = HEAPF32[$0 + 44 >> 2];
  $32 = HEAPF32[$0 + 24 >> 2];
  $33 = HEAPF32[$0 + 8 >> 2];
  $43 = HEAPF32[$0 + 40 >> 2];
  $44 = HEAPF32[$0 + 36 >> 2];
  $34 = HEAPF32[$0 + 20 >> 2];
  $35 = HEAPF32[$0 + 4 >> 2];
  $6 = HEAPF32[$2 + 12 >> 2];
  $38 = HEAPF32[$0 + 116 >> 2];
  $8 = HEAPF32[$2 + 28 >> 2];
  $39 = HEAPF32[$0 + 120 >> 2];
  $12 = HEAPF32[$2 + 44 >> 2];
  $23 = HEAPF32[$0 + 124 >> 2];
  $45 = Math_fround(Math_fround(Math_fround($6 * $38) + Math_fround($8 * $39)) + Math_fround($12 * $23));
  $9 = HEAPF32[$2 + 24 >> 2];
  $40 = Math_fround(-HEAPF32[$2 + 56 >> 2]);
  $10 = HEAPF32[$2 + 8 >> 2];
  $17 = HEAPF32[$2 + 52 >> 2];
  $13 = HEAPF32[$2 + 40 >> 2];
  $36 = HEAPF32[$2 + 60 >> 2];
  $24 = Math_fround(Math_fround(Math_fround($9 * $40) - Math_fround($10 * $17)) - Math_fround($13 * $36));
  $37 = Math_fround($24 + Math_fround(Math_fround(Math_fround($10 * $38) + Math_fround($9 * $39)) + Math_fround($13 * $23)));
  $18 = HEAPF32[$0 + 56 >> 2];
  $15 = HEAPF32[$0 + 52 >> 2];
  $16 = HEAPF32[$0 + 60 >> 2];
  HEAP32[$4 + 236 >> 2] = 0;
  $41 = Math_fround(Math_fround(Math_fround($8 * $40) - Math_fround($6 * $17)) - Math_fround($12 * $36));
  $14 = Math_fround($41 + Math_fround(Math_fround(Math_fround($6 * $15) + Math_fround($8 * $18)) + Math_fround($12 * $16)));
  HEAPF32[$4 + 232 >> 2] = $14;
  $24 = Math_fround($24 + Math_fround(Math_fround(Math_fround($10 * $15) + Math_fround($9 * $18)) + Math_fround($13 * $16)));
  HEAPF32[$4 + 228 >> 2] = $24;
  $17 = Math_fround(Math_fround(Math_fround($11 * $40) - Math_fround($7 * $17)) - Math_fround($5 * $36));
  $18 = Math_fround($17 + Math_fround(Math_fround(Math_fround($7 * $15) + Math_fround($11 * $18)) + Math_fround($5 * $16)));
  HEAPF32[$4 + 224 >> 2] = $18;
  $40 = $18;
  $16 = Math_fround($17 + Math_fround(Math_fround(Math_fround($7 * $38) + Math_fround($11 * $39)) + Math_fround($5 * $23)));
  if (!!($16 < $18)) {
   HEAPF32[$4 + 224 >> 2] = $16;
   $40 = $16;
  }
  $15 = Math_fround($41 + $45);
  $38 = $24;
  if (!!($37 < $24)) {
   HEAPF32[$4 + 228 >> 2] = $37;
   $38 = $37;
  }
  $39 = $14;
  if (!!($15 < $14)) {
   HEAPF32[$4 + 232 >> 2] = $15;
   $39 = $15;
  }
  $23 = Math_fround($8 * $19);
  $17 = Math_fround($6 * $20);
  $36 = Math_fround($8 * $21);
  $45 = Math_fround($6 * $22);
  $41 = Math_fround($8 * $28);
  $46 = Math_fround($6 * $29);
  $47 = Math_fround($9 * $19);
  $48 = Math_fround($10 * $20);
  $49 = Math_fround($9 * $21);
  $50 = Math_fround($10 * $22);
  $51 = Math_fround($9 * $28);
  $52 = Math_fround($10 * $29);
  $19 = Math_fround($11 * $19);
  $20 = Math_fround($7 * $20);
  $21 = Math_fround($11 * $21);
  $22 = Math_fround($7 * $22);
  $28 = Math_fround($11 * $28);
  $29 = Math_fround($7 * $29);
  $53 = Math_fround($8 * $30);
  $54 = Math_fround($6 * $31);
  $55 = Math_fround($8 * $32);
  $57 = Math_fround($6 * $33);
  $8 = Math_fround($8 * $34);
  $6 = Math_fround($6 * $35);
  $58 = Math_fround($9 * $30);
  $59 = Math_fround($10 * $31);
  $60 = Math_fround($9 * $32);
  $61 = Math_fround($10 * $33);
  $9 = Math_fround($9 * $34);
  $10 = Math_fround($10 * $35);
  $30 = Math_fround($11 * $30);
  $31 = Math_fround($7 * $31);
  $32 = Math_fround($11 * $32);
  $33 = Math_fround($7 * $33);
  $34 = Math_fround($11 * $34);
  $7 = Math_fround($7 * $35);
  HEAP32[$4 + 220 >> 2] = 0;
  HEAPF32[$4 + 216 >> 2] = $14;
  HEAPF32[$4 + 212 >> 2] = $24;
  HEAPF32[$4 + 208 >> 2] = $18;
  $11 = $18;
  if (!!($11 < $16)) {
   HEAPF32[$4 + 208 >> 2] = $16;
   $11 = $16;
  }
  $35 = Math_fround($17 + $23);
  $23 = Math_fround($12 * $25);
  $17 = Math_fround($45 + $36);
  $36 = Math_fround($12 * $26);
  $45 = Math_fround($12 * $27);
  $41 = Math_fround($46 + $41);
  $46 = Math_fround($48 + $47);
  $47 = Math_fround($13 * $25);
  $48 = Math_fround($50 + $49);
  $49 = Math_fround($13 * $26);
  $50 = Math_fround($13 * $27);
  $51 = Math_fround($52 + $51);
  $25 = Math_fround($5 * $25);
  $19 = Math_fround($20 + $19);
  $20 = Math_fround($5 * $26);
  $21 = Math_fround($22 + $21);
  $22 = Math_fround($5 * $27);
  $26 = Math_fround($29 + $28);
  $27 = Math_fround($54 + $53);
  $28 = Math_fround($12 * $42);
  $29 = Math_fround($57 + $55);
  $52 = Math_fround($12 * $43);
  $12 = Math_fround($12 * $44);
  $6 = Math_fround($6 + $8);
  $8 = Math_fround($59 + $58);
  $53 = Math_fround($13 * $42);
  $54 = Math_fround($61 + $60);
  $55 = Math_fround($13 * $43);
  $13 = Math_fround($13 * $44);
  $9 = Math_fround($10 + $9);
  $10 = Math_fround($5 * $42);
  $30 = Math_fround($31 + $30);
  $31 = Math_fround($5 * $43);
  $42 = Math_fround($33 + $32);
  $5 = Math_fround($5 * $44);
  $32 = Math_fround($7 + $34);
  $7 = $24;
  if (!!($7 < $37)) {
   HEAPF32[$4 + 212 >> 2] = $37;
   $7 = $37;
  }
  $33 = Math_fround($35 + $23);
  $43 = Math_fround($17 + $36);
  $44 = Math_fround($41 + $45);
  $34 = Math_fround($46 + $47);
  $35 = Math_fround($48 + $49);
  $23 = Math_fround($51 + $50);
  $19 = Math_fround($19 + $25);
  $20 = Math_fround($21 + $20);
  $25 = Math_fround($26 + $22);
  $21 = Math_fround($27 + $28);
  $22 = Math_fround($29 + $52);
  $12 = Math_fround($6 + $12);
  $8 = Math_fround($8 + $53);
  $26 = Math_fround($54 + $55);
  $9 = Math_fround($9 + $13);
  $10 = Math_fround($30 + $10);
  $13 = Math_fround($42 + $31);
  $27 = Math_fround($32 + $5);
  $6 = $14;
  if (!!($6 < $15)) {
   HEAPF32[$4 + 216 >> 2] = $15;
   $6 = $15;
  }
  $5 = HEAPF32[$0 + 272 >> 2];
  HEAPF32[$4 + 232 >> 2] = $39 - $5;
  HEAPF32[$4 + 228 >> 2] = $38 - $5;
  HEAPF32[$4 + 224 >> 2] = $40 - $5;
  HEAPF32[$4 + 216 >> 2] = $5 + $6;
  HEAPF32[$4 + 212 >> 2] = $5 + $7;
  HEAPF32[$4 + 208 >> 2] = $5 + $11;
  HEAP32[$4 + 128 >> 2] = 0;
  HEAPF32[$4 + 124 >> 2] = $15;
  HEAPF32[$4 + 120 >> 2] = $37;
  HEAPF32[$4 + 116 >> 2] = $16;
  HEAP32[$4 + 112 >> 2] = 0;
  HEAPF32[$4 + 108 >> 2] = $33;
  HEAPF32[$4 + 104 >> 2] = $43;
  HEAPF32[$4 + 100 >> 2] = $44;
  HEAP32[$4 + 96 >> 2] = 0;
  HEAPF32[$4 + 92 >> 2] = $34;
  HEAPF32[$4 + 88 >> 2] = $35;
  HEAPF32[$4 + 84 >> 2] = $23;
  HEAP32[$4 + 80 >> 2] = 0;
  HEAPF32[$4 + 76 >> 2] = $19;
  HEAPF32[$4 + 72 >> 2] = $20;
  HEAP32[$4 - -64 >> 2] = 0;
  HEAPF32[$4 + 60 >> 2] = $14;
  HEAPF32[$4 + 56 >> 2] = $24;
  HEAPF32[$4 + 52 >> 2] = $18;
  HEAP32[$4 + 48 >> 2] = 0;
  HEAPF32[$4 + 44 >> 2] = $21;
  HEAPF32[$4 + 40 >> 2] = $22;
  HEAPF32[$4 + 36 >> 2] = $12;
  HEAP32[$4 + 32 >> 2] = 0;
  HEAPF32[$4 + 28 >> 2] = $8;
  HEAPF32[$4 + 24 >> 2] = $26;
  HEAPF32[$4 + 20 >> 2] = $9;
  HEAP32[$4 + 16 >> 2] = 0;
  HEAPF32[$4 + 12 >> 2] = $10;
  HEAPF32[$4 + 8 >> 2] = $13;
  HEAPF32[$4 + 196 >> 2] = $5;
  HEAPF32[$4 + 68 >> 2] = $25;
  HEAPF32[$4 + 4 >> 2] = $27;
  HEAP32[$4 >> 2] = 6780;
  HEAP32[$4 + 200 >> 2] = HEAP32[$0 + 268 >> 2];
  label$9 : {
   if (!$1) {
    break label$9;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 64 >> 2]]($1, $4, $4 + 224 | 0, $4 + 208 | 0);
   $5 = HEAPF32[$4 + 200 >> 2];
   if (!($5 < HEAPF32[$0 + 268 >> 2])) {
    break label$9;
   }
   HEAPF32[$0 + 268 >> 2] = $5;
   btTriangleCallback___btTriangleCallback_28_29($4);
   $56 = $5;
   break label$2;
  }
  btTriangleCallback___btTriangleCallback_28_29($4);
 }
 $0 = $4 + 240 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($56);
}
function btConvexPlaneCollisionAlgorithm__collideSingleContact_28btQuaternion_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = 0, $38 = 0, $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = Math_fround(0), $50 = Math_fround(0), $51 = Math_fround(0), $52 = Math_fround(0), $53 = Math_fround(0);
 $4 = global$0 - 48 | 0;
 $6 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 $37 = HEAPU8[$0 + 16 | 0];
 $38 = $37 ? $2 : $3;
 $6 = HEAP32[$38 + 12 >> 2];
 $46 = HEAPF32[$6 + 56 >> 2];
 $39 = HEAPF32[$6 + 52 >> 2];
 $47 = HEAPF32[$6 + 48 >> 2];
 $3 = $37 ? $3 : $2;
 $2 = HEAP32[$3 + 12 >> 2];
 $48 = HEAPF32[$2 + 56 >> 2];
 $49 = HEAPF32[$2 + 52 >> 2];
 $50 = HEAPF32[$2 + 48 >> 2];
 $3 = HEAP32[$3 + 4 >> 2];
 $15 = HEAPF32[$6 + 40 >> 2];
 $10 = HEAPF32[$6 + 8 >> 2];
 $11 = HEAPF32[$6 + 24 >> 2];
 $12 = HEAPF32[$6 + 36 >> 2];
 $17 = HEAPF32[$6 + 4 >> 2];
 $20 = HEAPF32[$6 + 20 >> 2];
 $18 = HEAPF32[$6 + 32 >> 2];
 $23 = HEAPF32[$2 + 40 >> 2];
 $24 = HEAPF32[$2 + 32 >> 2];
 $25 = HEAPF32[$2 + 36 >> 2];
 $21 = HEAPF32[$6 >> 2];
 $26 = HEAPF32[$2 + 8 >> 2];
 $27 = HEAPF32[$2 >> 2];
 $28 = HEAPF32[$2 + 4 >> 2];
 $22 = HEAPF32[$6 + 16 >> 2];
 $31 = HEAPF32[$2 + 24 >> 2];
 $32 = HEAPF32[$2 + 16 >> 2];
 $33 = HEAPF32[$2 + 20 >> 2];
 $9 = HEAPF32[$1 + 12 >> 2];
 $13 = HEAPF32[$1 + 8 >> 2];
 $7 = HEAPF32[$1 >> 2];
 $8 = HEAPF32[$1 + 4 >> 2];
 $2 = HEAP32[$38 + 4 >> 2];
 $1 = $2 + 60 | 0;
 $34 = HEAPF32[$1 >> 2];
 $37 = $2 + 56 | 0;
 $51 = HEAPF32[$37 >> 2];
 $35 = HEAPF32[$2 + 52 >> 2];
 HEAP32[$4 + 28 >> 2] = 0;
 $16 = Math_fround(Math_fround(2) / Math_fround(Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($8 * $8)) + Math_fround($13 * $13)) + Math_fround($9 * $9)));
 $14 = Math_fround($13 * $16);
 $40 = Math_fround($7 * $14);
 $29 = Math_fround($8 * $16);
 $41 = Math_fround($9 * $29);
 $30 = Math_fround($40 + $41);
 $42 = Math_fround($8 * $14);
 $19 = Math_fround($7 * $16);
 $43 = Math_fround($9 * $19);
 $16 = Math_fround($42 - $43);
 $44 = Math_fround($7 * $19);
 $45 = Math_fround($8 * $29);
 $8 = Math_fround(Math_fround(1) - Math_fround($44 + $45));
 $19 = Math_fround(Math_fround(Math_fround($24 * $30) + Math_fround($25 * $16)) + Math_fround($23 * $8));
 $36 = Math_fround(Math_fround(Math_fround($27 * $30) + Math_fround($28 * $16)) + Math_fround($26 * $8));
 $8 = Math_fround(Math_fround(Math_fround($32 * $30) + Math_fround($33 * $16)) + Math_fround($31 * $8));
 $16 = Math_fround(-$51);
 HEAPF32[$4 + 24 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($12 * $19) + Math_fround(Math_fround($17 * $36) + Math_fround($20 * $8))) * $16) - Math_fround($35 * Math_fround(Math_fround($18 * $19) + Math_fround(Math_fround($21 * $36) + Math_fround($22 * $8))))) - Math_fround($34 * Math_fround(Math_fround($15 * $19) + Math_fround(Math_fround($10 * $36) + Math_fround($11 * $8))));
 $8 = Math_fround($42 + $43);
 $29 = Math_fround($7 * $29);
 $30 = Math_fround($9 * $14);
 $7 = Math_fround($29 - $30);
 $19 = Math_fround($13 * $14);
 $9 = Math_fround(Math_fround(1) - Math_fround($44 + $19));
 $13 = Math_fround(Math_fround($23 * $8) + Math_fround(Math_fround($24 * $7) + Math_fround($25 * $9)));
 $14 = Math_fround(Math_fround($26 * $8) + Math_fround(Math_fround($27 * $7) + Math_fround($28 * $9)));
 $7 = Math_fround(Math_fround($31 * $8) + Math_fround(Math_fround($32 * $7) + Math_fround($33 * $9)));
 HEAPF32[$4 + 20 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($12 * $13) + Math_fround(Math_fround($17 * $14) + Math_fround($20 * $7))) * $16) - Math_fround($35 * Math_fround(Math_fround($18 * $13) + Math_fround(Math_fround($21 * $14) + Math_fround($22 * $7))))) - Math_fround($34 * Math_fround(Math_fround($15 * $13) + Math_fround(Math_fround($10 * $14) + Math_fround($11 * $7))));
 $7 = Math_fround($40 - $41);
 $9 = Math_fround($29 + $30);
 $8 = Math_fround(Math_fround(1) - Math_fround($45 + $19));
 $13 = Math_fround(Math_fround($23 * $7) + Math_fround(Math_fround($25 * $9) + Math_fround($24 * $8)));
 $14 = Math_fround(Math_fround($26 * $7) + Math_fround(Math_fround($28 * $9) + Math_fround($27 * $8)));
 $7 = Math_fround(Math_fround($31 * $7) + Math_fround(Math_fround($33 * $9) + Math_fround($32 * $8)));
 HEAPF32[$4 + 16 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($12 * $13) + Math_fround(Math_fround($17 * $14) + Math_fround($20 * $7))) * $16) - Math_fround($35 * Math_fround(Math_fround($18 * $13) + Math_fround(Math_fround($21 * $14) + Math_fround($22 * $7))))) - Math_fround($34 * Math_fround(Math_fround($15 * $13) + Math_fround(Math_fround($10 * $14) + Math_fround($11 * $7))));
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 64 >> 2]]($4 + 32 | 0, $3, $4 + 16 | 0);
 $6 = HEAP32[$38 + 12 >> 2];
 $30 = HEAPF32[$6 + 48 >> 2];
 $19 = HEAPF32[$6 + 32 >> 2];
 $36 = HEAPF32[$6 + 16 >> 2];
 $51 = HEAPF32[$6 + 8 >> 2];
 $40 = HEAPF32[$6 + 4 >> 2];
 $41 = HEAPF32[$6 >> 2];
 $42 = HEAPF32[$6 + 56 >> 2];
 $43 = HEAPF32[$6 + 52 >> 2];
 $44 = HEAPF32[$6 + 40 >> 2];
 $45 = HEAPF32[$6 + 36 >> 2];
 $52 = HEAPF32[$6 + 24 >> 2];
 $53 = HEAPF32[$6 + 20 >> 2];
 $16 = HEAPF32[$2 + 68 >> 2];
 $34 = HEAPF32[$2 + 60 >> 2];
 $35 = HEAPF32[$2 + 52 >> 2];
 $14 = HEAPF32[$2 + 56 >> 2];
 $7 = HEAPF32[$4 + 40 >> 2];
 $9 = HEAPF32[$4 + 32 >> 2];
 $8 = HEAPF32[$4 + 36 >> 2];
 $29 = btPersistentManifold__getContactBreakingThreshold_28_29_20const(HEAP32[$0 + 12 >> 2]);
 HEAP32[$5 + 4 >> 2] = HEAP32[$0 + 12 >> 2];
 $13 = Math_fround(-$39);
 $39 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($50 * $10) + Math_fround($49 * $11)) + Math_fround($48 * $15)) + Math_fround(Math_fround(Math_fround($11 * $13) - Math_fround($10 * $47)) - Math_fround($15 * $46))) + Math_fround(Math_fround(Math_fround($9 * Math_fround(Math_fround(Math_fround($27 * $10) + Math_fround($32 * $11)) + Math_fround($24 * $15))) + Math_fround($8 * Math_fround(Math_fround(Math_fround($28 * $10) + Math_fround($33 * $11)) + Math_fround($25 * $15)))) + Math_fround($7 * Math_fround(Math_fround(Math_fround($26 * $10) + Math_fround($31 * $11)) + Math_fround($23 * $15)))));
 $18 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($50 * $21) + Math_fround($49 * $22)) + Math_fround($48 * $18)) + Math_fround(Math_fround(Math_fround($22 * $13) - Math_fround($21 * $47)) - Math_fround($18 * $46))) + Math_fround(Math_fround(Math_fround($9 * Math_fround(Math_fround(Math_fround($27 * $21) + Math_fround($32 * $22)) + Math_fround($24 * $18))) + Math_fround($8 * Math_fround(Math_fround(Math_fround($28 * $21) + Math_fround($33 * $22)) + Math_fround($25 * $18)))) + Math_fround($7 * Math_fround(Math_fround(Math_fround($26 * $21) + Math_fround($31 * $22)) + Math_fround($23 * $18)))));
 $17 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($50 * $17) + Math_fround($49 * $20)) + Math_fround($48 * $12)) + Math_fround(Math_fround(Math_fround($20 * $13) - Math_fround($17 * $47)) - Math_fround($12 * $46))) + Math_fround(Math_fround(Math_fround($9 * Math_fround(Math_fround(Math_fround($27 * $17) + Math_fround($32 * $20)) + Math_fround($24 * $12))) + Math_fround($8 * Math_fround(Math_fround(Math_fround($28 * $17) + Math_fround($33 * $20)) + Math_fround($25 * $12)))) + Math_fround($7 * Math_fround(Math_fround(Math_fround($26 * $17) + Math_fround($31 * $20)) + Math_fround($23 * $12)))));
 $15 = Math_fround(Math_fround(Math_fround($34 * $39) + Math_fround(Math_fround($35 * $18) + Math_fround($14 * $17))) - $16);
 if (!!($15 < $29)) {
  $6 = HEAP32[$38 + 12 >> 2];
  $20 = HEAPF32[$6 + 24 >> 2];
  $21 = HEAPF32[$6 + 20 >> 2];
  $22 = HEAPF32[$6 + 40 >> 2];
  $23 = HEAPF32[$6 + 36 >> 2];
  $24 = HEAPF32[$6 + 16 >> 2];
  $25 = HEAPF32[$6 + 32 >> 2];
  $10 = HEAPF32[$2 + 60 >> 2];
  $26 = HEAPF32[$6 + 8 >> 2];
  $11 = HEAPF32[$2 + 52 >> 2];
  $27 = HEAPF32[$6 >> 2];
  $12 = HEAPF32[$2 + 56 >> 2];
  $28 = HEAPF32[$6 + 4 >> 2];
  HEAP32[$4 + 28 >> 2] = 0;
  HEAPF32[$4 + 16 >> 2] = Math_fround(Math_fround($27 * $11) + Math_fround($28 * $12)) + Math_fround($26 * $10);
  HEAPF32[$4 + 24 >> 2] = Math_fround(Math_fround($11 * $25) + Math_fround($12 * $23)) + Math_fround($10 * $22);
  HEAPF32[$4 + 20 >> 2] = Math_fround(Math_fround($11 * $24) + Math_fround($12 * $21)) + Math_fround($10 * $20);
  HEAP32[$4 + 12 >> 2] = 0;
  $10 = Math_fround($18 - Math_fround($35 * $15));
  $11 = Math_fround($17 - Math_fround($14 * $15));
  $12 = Math_fround($39 - Math_fround($34 * $15));
  HEAPF32[$4 + 8 >> 2] = Math_fround(Math_fround(Math_fround($10 * $19) + Math_fround($11 * $45)) + Math_fround($12 * $44)) + $42;
  HEAPF32[$4 + 4 >> 2] = Math_fround(Math_fround(Math_fround($10 * $36) + Math_fround($11 * $53)) + Math_fround($12 * $52)) + $43;
  HEAPF32[$4 >> 2] = Math_fround(Math_fround($51 * $12) + Math_fround(Math_fround($41 * $10) + Math_fround($40 * $11))) + $30;
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 16 >> 2]]($5, $4 + 16 | 0, $4, $15);
 }
 $0 = $4 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function __rem_pio2_large($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 $8 = global$0 - 560 | 0;
 $6 = $8;
 if ($8 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 $7 = ($2 + -3 | 0) / 24 | 0;
 $19 = ($7 | 0) > 0 ? $7 : 0;
 $14 = Math_imul($19, -24) + $2 | 0;
 $11 = HEAP32[($4 << 2) + 16496 >> 2];
 $10 = $3 + -1 | 0;
 if (($11 + $10 | 0) >= 0) {
  $6 = $3 + $11 | 0;
  $2 = $19 - $10 | 0;
  $7 = 0;
  while (1) {
   $5 = ($2 | 0) < 0 ? 0 : +HEAP32[($2 << 2) + 16512 >> 2];
   HEAPF64[($8 + 320 | 0) + ($7 << 3) >> 3] = $5;
   $2 = $2 + 1 | 0;
   $7 = $7 + 1 | 0;
   if (($7 | 0) != ($6 | 0)) {
    continue;
   }
   break;
  }
 }
 $15 = $14 + -24 | 0;
 $6 = 0;
 $20 = ($11 | 0) > 0 ? $11 : 0;
 $12 = ($3 | 0) < 1;
 while (1) {
  label$7 : {
   if ($12) {
    $5 = 0;
    break label$7;
   }
   $7 = $6 + $10 | 0;
   $2 = 0;
   $5 = 0;
   while (1) {
    $5 = $5 + HEAPF64[($2 << 3) + $0 >> 3] * HEAPF64[($8 + 320 | 0) + ($7 - $2 << 3) >> 3];
    $2 = $2 + 1 | 0;
    if (($3 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
  }
  HEAPF64[($6 << 3) + $8 >> 3] = $5;
  $2 = ($6 | 0) == ($20 | 0);
  $6 = $6 + 1 | 0;
  if (!$2) {
   continue;
  }
  break;
 }
 $25 = 47 - $14 | 0;
 $22 = 48 - $14 | 0;
 $23 = $14 + -25 | 0;
 $6 = $11;
 label$10 : {
  while (1) {
   $5 = HEAPF64[($6 << 3) + $8 >> 3];
   $2 = 0;
   $7 = $6;
   $18 = ($6 | 0) < 1;
   if (!$18) {
    while (1) {
     $12 = $2 << 2;
     $12 = $12 + ($8 + 480 | 0) | 0;
     $16 = $5;
     $9 = $5 * 5.960464477539063e-8;
     label$15 : {
      if (Math_abs($9) < 2147483648) {
       $10 = ~~$9;
       break label$15;
      }
      $10 = -2147483648;
     }
     $9 = +($10 | 0);
     $5 = $16 + $9 * -16777216;
     label$14 : {
      if (Math_abs($5) < 2147483648) {
       $10 = ~~$5;
       break label$14;
      }
      $10 = -2147483648;
     }
     HEAP32[$12 >> 2] = $10;
     $7 = $7 + -1 | 0;
     $5 = HEAPF64[($7 << 3) + $8 >> 3] + $9;
     $2 = $2 + 1 | 0;
     if (($6 | 0) != ($2 | 0)) {
      continue;
     }
     break;
    }
   }
   $5 = scalbn($5, $15);
   $5 = $5 + floor($5 * .125) * -8;
   label$18 : {
    if (Math_abs($5) < 2147483648) {
     $17 = ~~$5;
     break label$18;
    }
    $17 = -2147483648;
   }
   $5 = $5 - +($17 | 0);
   label$20 : {
    label$21 : {
     label$22 : {
      $24 = ($15 | 0) < 1;
      label$23 : {
       if (!$24) {
        $7 = ($6 << 2) + $8 | 0;
        $2 = $7 + 476 | 0;
        $10 = $2;
        $2 = HEAP32[$7 + 476 >> 2];
        $7 = $2;
        $2 = $2 >> $22;
        $7 = $7 - ($2 << $22) | 0;
        HEAP32[$10 >> 2] = $7;
        $17 = $2 + $17 | 0;
        $13 = $7 >> $25;
        break label$23;
       }
       if ($15) {
        break label$22;
       }
       $13 = HEAP32[(($6 << 2) + $8 | 0) + 476 >> 2] >> 23;
      }
      if (($13 | 0) < 1) {
       break label$20;
      }
      break label$21;
     }
     $13 = 2;
     if (!!($5 >= .5)) {
      break label$21;
     }
     $13 = 0;
     break label$20;
    }
    $2 = 0;
    $10 = 0;
    if (!$18) {
     while (1) {
      $18 = ($8 + 480 | 0) + ($2 << 2) | 0;
      $7 = HEAP32[$18 >> 2];
      $12 = 16777215;
      label$27 : {
       label$28 : {
        if ($10) {
         break label$28;
        }
        $12 = 16777216;
        if ($7) {
         break label$28;
        }
        $10 = 0;
        break label$27;
       }
       HEAP32[$18 >> 2] = $12 - $7;
       $10 = 1;
      }
      $2 = $2 + 1 | 0;
      if (($6 | 0) != ($2 | 0)) {
       continue;
      }
      break;
     }
    }
    label$29 : {
     if ($23 >>> 0 > 1 | $24) {
      break label$29;
     }
     if ($23 - 1) {
      $7 = ($6 << 2) + $8 | 0;
      $2 = $7 + 476 | 0;
      HEAP32[$2 >> 2] = HEAP32[$7 + 476 >> 2] & 8388607;
      break label$29;
     }
     $7 = ($6 << 2) + $8 | 0;
     $2 = $7 + 476 | 0;
     HEAP32[$2 >> 2] = HEAP32[$7 + 476 >> 2] & 4194303;
    }
    $17 = $17 + 1 | 0;
    if (($13 | 0) != 2) {
     break label$20;
    }
    $5 = 1 - $5;
    $13 = 2;
    if (!$10) {
     break label$20;
    }
    $5 = $5 - scalbn(1, $15);
   }
   if ($5 == 0) {
    $7 = 0;
    label$32 : {
     $2 = $6;
     if (($2 | 0) <= ($11 | 0)) {
      break label$32;
     }
     while (1) {
      $2 = $2 + -1 | 0;
      $7 = HEAP32[($8 + 480 | 0) + ($2 << 2) >> 2] | $7;
      if (($2 | 0) > ($11 | 0)) {
       continue;
      }
      break;
     }
     if (!$7) {
      break label$32;
     }
     $14 = $15;
     while (1) {
      $14 = $14 + -24 | 0;
      $6 = $6 + -1 | 0;
      if (!HEAP32[($8 + 480 | 0) + ($6 << 2) >> 2]) {
       continue;
      }
      break;
     }
     break label$10;
    }
    $2 = 1;
    while (1) {
     $7 = $2;
     $2 = $2 + 1 | 0;
     if (!HEAP32[($8 + 480 | 0) + ($11 - $7 << 2) >> 2]) {
      continue;
     }
     break;
    }
    $12 = $6 + $7 | 0;
    while (1) {
     $7 = $3 + $6 | 0;
     $6 = $6 + 1 | 0;
     HEAPF64[($8 + 320 | 0) + ($7 << 3) >> 3] = HEAP32[($19 + $6 << 2) + 16512 >> 2];
     $2 = 0;
     $5 = 0;
     if (($3 | 0) >= 1) {
      while (1) {
       $5 = $5 + HEAPF64[($2 << 3) + $0 >> 3] * HEAPF64[($8 + 320 | 0) + ($7 - $2 << 3) >> 3];
       $2 = $2 + 1 | 0;
       if (($3 | 0) != ($2 | 0)) {
        continue;
       }
       break;
      }
     }
     HEAPF64[($6 << 3) + $8 >> 3] = $5;
     if (($6 | 0) < ($12 | 0)) {
      continue;
     }
     break;
    }
    $6 = $12;
    continue;
   }
   break;
  }
  $5 = scalbn($5, 0 - $15 | 0);
  label$39 : {
   if (!!($5 >= 16777216)) {
    $3 = $6 << 2;
    $3 = $3 + ($8 + 480 | 0) | 0;
    $16 = $5;
    $9 = $5 * 5.960464477539063e-8;
    label$42 : {
     if (Math_abs($9) < 2147483648) {
      $2 = ~~$9;
      break label$42;
     }
     $2 = -2147483648;
    }
    $5 = $16 + +($2 | 0) * -16777216;
    label$41 : {
     if (Math_abs($5) < 2147483648) {
      $7 = ~~$5;
      break label$41;
     }
     $7 = -2147483648;
    }
    HEAP32[$3 >> 2] = $7;
    $6 = $6 + 1 | 0;
    break label$39;
   }
   if (Math_abs($5) < 2147483648) {
    $2 = ~~$5;
   } else {
    $2 = -2147483648;
   }
   $14 = $15;
  }
  HEAP32[($8 + 480 | 0) + ($6 << 2) >> 2] = $2;
 }
 $5 = scalbn(1, $14);
 if (($6 | 0) >= 0) {
  $2 = $6;
  while (1) {
   HEAPF64[($2 << 3) + $8 >> 3] = $5 * +HEAP32[($8 + 480 | 0) + ($2 << 2) >> 2];
   $5 = $5 * 5.960464477539063e-8;
   $11 = 0;
   $3 = ($2 | 0) > 0;
   $2 = $2 + -1 | 0;
   if ($3) {
    continue;
   }
   break;
  }
  $7 = $6;
  while (1) {
   $0 = $20 >>> 0 < $11 >>> 0 ? $20 : $11;
   $12 = $6 - $7 | 0;
   $2 = 0;
   $5 = 0;
   while (1) {
    $5 = $5 + HEAPF64[($2 << 3) + 19280 >> 3] * HEAPF64[($2 + $7 << 3) + $8 >> 3];
    $3 = ($0 | 0) != ($2 | 0);
    $2 = $2 + 1 | 0;
    if ($3) {
     continue;
    }
    break;
   }
   HEAPF64[($8 + 160 | 0) + ($12 << 3) >> 3] = $5;
   $7 = $7 + -1 | 0;
   $2 = ($6 | 0) != ($11 | 0);
   $11 = $11 + 1 | 0;
   if ($2) {
    continue;
   }
   break;
  }
 }
 label$51 : {
  if ($4 >>> 0 > 3) {
   break label$51;
  }
  label$52 : {
   label$53 : {
    switch ($4 - 1 | 0) {
    case 2:
     label$56 : {
      if (($6 | 0) < 1) {
       break label$56;
      }
      $0 = ($8 + 160 | 0) + ($6 << 3) | 0;
      $5 = HEAPF64[$0 >> 3];
      $2 = $6;
      while (1) {
       $3 = $2 + -1 | 0;
       $7 = ($8 + 160 | 0) + ($3 << 3) | 0;
       $9 = HEAPF64[$7 >> 3];
       $16 = $9;
       $9 = $9 + $5;
       HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3] = $5 + ($16 - $9);
       HEAPF64[$7 >> 3] = $9;
       $7 = ($2 | 0) > 1;
       $5 = $9;
       $2 = $3;
       if ($7) {
        continue;
       }
       break;
      }
      if (($6 | 0) < 2) {
       break label$56;
      }
      $5 = HEAPF64[$0 >> 3];
      $2 = $6;
      while (1) {
       $3 = $2 + -1 | 0;
       $7 = ($8 + 160 | 0) + ($3 << 3) | 0;
       $9 = HEAPF64[$7 >> 3];
       $16 = $9;
       $9 = $9 + $5;
       HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3] = $5 + ($16 - $9);
       HEAPF64[$7 >> 3] = $9;
       $7 = ($2 | 0) > 2;
       $5 = $9;
       $2 = $3;
       if ($7) {
        continue;
       }
       break;
      }
      while (1) {
       $21 = $21 + HEAPF64[($8 + 160 | 0) + ($6 << 3) >> 3];
       $2 = ($6 | 0) > 2;
       $6 = $6 + -1 | 0;
       if ($2) {
        continue;
       }
       break;
      }
     }
     $5 = HEAPF64[$8 + 160 >> 3];
     if ($13) {
      break label$52;
     }
     HEAPF64[$1 >> 3] = $5;
     $0 = HEAP32[$8 + 172 >> 2];
     $2 = HEAP32[$8 + 168 >> 2];
     HEAPF64[$1 + 16 >> 3] = $21;
     HEAP32[$1 + 8 >> 2] = $2;
     HEAP32[$1 + 12 >> 2] = $0;
     break label$51;
    default:
     $5 = 0;
     if (($6 | 0) >= 0) {
      while (1) {
       $5 = $5 + HEAPF64[($8 + 160 | 0) + ($6 << 3) >> 3];
       $2 = ($6 | 0) > 0;
       $6 = $6 + -1 | 0;
       if ($2) {
        continue;
       }
       break;
      }
     }
     HEAPF64[$1 >> 3] = $13 ? -$5 : $5;
     break label$51;
    case 0:
    case 1:
     break label$53;
    }
   }
   $5 = 0;
   if (($6 | 0) >= 0) {
    $2 = $6;
    while (1) {
     $5 = $5 + HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3];
     $3 = ($2 | 0) > 0;
     $2 = $2 + -1 | 0;
     if ($3) {
      continue;
     }
     break;
    }
   }
   HEAPF64[$1 >> 3] = $13 ? -$5 : $5;
   $5 = HEAPF64[$8 + 160 >> 3] - $5;
   $2 = 1;
   if (($6 | 0) >= 1) {
    while (1) {
     $5 = $5 + HEAPF64[($8 + 160 | 0) + ($2 << 3) >> 3];
     $3 = ($2 | 0) != ($6 | 0);
     $2 = $2 + 1 | 0;
     if ($3) {
      continue;
     }
     break;
    }
   }
   HEAPF64[$1 + 8 >> 3] = $13 ? -$5 : $5;
   break label$51;
  }
  HEAPF64[$1 >> 3] = -$5;
  $5 = HEAPF64[$8 + 168 >> 3];
  HEAPF64[$1 + 16 >> 3] = -$21;
  HEAPF64[$1 + 8 >> 3] = -$5;
 }
 $0 = $8 + 560 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $17 & 7;
}
function gjkepa2_impl__GJK__EncloseOrigin_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0);
 $3 = global$0 - 48 | 0;
 $15 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $15;
 label$2 : {
  label$3 : {
   $1 = HEAP32[$0 + 372 >> 2];
   $2 = HEAP32[$1 + 32 >> 2] + -1 | 0;
   label$4 : {
    if ($2 >>> 0 > 3) {
     break label$4;
    }
    label$5 : {
     switch ($2 - 1 | 0) {
     default:
      $4 = HEAP32[$0 + 364 >> 2];
      $15 = $3;
      $2 = 1;
      while (1) {
       HEAP32[$15 + 40 >> 2] = 0;
       HEAP32[$15 + 44 >> 2] = 0;
       HEAP32[$3 + 32 >> 2] = 0;
       HEAP32[$3 + 36 >> 2] = 0;
       HEAP32[($3 + 32 | 0) + ($5 << 2) >> 2] = 1065353216;
       $9 = ($2 << 2) + $1 | 0;
       HEAP32[$9 + 16 >> 2] = 0;
       $4 = $4 + -1 | 0;
       HEAP32[$0 + 364 >> 2] = $4;
       $4 = HEAP32[(($4 << 2) + $0 | 0) + 348 >> 2];
       HEAP32[$9 >> 2] = $4;
       HEAP32[$1 + 32 >> 2] = $2 + 1;
       gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $3 + 32 | 0, $4);
       if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
        break label$3;
       }
       $1 = HEAP32[$0 + 372 >> 2];
       $2 = HEAP32[$1 + 32 >> 2] + -1 | 0;
       HEAP32[$1 + 32 >> 2] = $2;
       $4 = HEAP32[$0 + 364 >> 2];
       $2 = HEAP32[($2 << 2) + $1 >> 2];
       HEAP32[(($4 << 2) + $0 | 0) + 348 >> 2] = $2;
       $1 = HEAP32[$0 + 372 >> 2];
       HEAP32[$3 + 28 >> 2] = 0;
       HEAPF32[$3 + 24 >> 2] = -HEAPF32[$3 + 40 >> 2];
       HEAPF32[$3 + 20 >> 2] = -HEAPF32[$3 + 36 >> 2];
       HEAPF32[$3 + 16 >> 2] = -HEAPF32[$3 + 32 >> 2];
       $9 = HEAP32[$1 + 32 >> 2];
       $10 = ($9 << 2) + $1 | 0;
       HEAP32[$10 + 16 >> 2] = 0;
       HEAP32[$0 + 364 >> 2] = $4;
       HEAP32[$10 >> 2] = $2;
       HEAP32[$1 + 32 >> 2] = $9 + 1;
       gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $3 + 16 | 0, $2);
       if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
        break label$3;
       }
       $1 = HEAP32[$0 + 372 >> 2];
       $2 = HEAP32[$1 + 32 >> 2] + -1 | 0;
       HEAP32[$1 + 32 >> 2] = $2;
       $1 = HEAP32[($2 << 2) + $1 >> 2];
       $2 = HEAP32[$0 + 364 >> 2];
       $4 = $2 + 1 | 0;
       HEAP32[$0 + 364 >> 2] = $4;
       HEAP32[(($2 << 2) + $0 | 0) + 348 >> 2] = $1;
       $5 = $5 + 1 | 0;
       if (($5 | 0) == 3) {
        break label$4;
       }
       $1 = HEAP32[$0 + 372 >> 2];
       $2 = HEAP32[$1 + 32 >> 2];
       continue;
      }
     case 0:
      $2 = HEAP32[$1 + 4 >> 2];
      $1 = HEAP32[$1 >> 2];
      $11 = Math_fround(HEAPF32[$2 + 24 >> 2] - HEAPF32[$1 + 24 >> 2]);
      $12 = Math_fround(HEAPF32[$2 + 20 >> 2] - HEAPF32[$1 + 20 >> 2]);
      $13 = Math_fround(HEAPF32[$2 + 16 >> 2] - HEAPF32[$1 + 16 >> 2]);
      $15 = $3;
      $1 = 0;
      while (1) {
       HEAP32[$15 + 40 >> 2] = 0;
       HEAP32[$15 + 44 >> 2] = 0;
       HEAP32[$3 + 32 >> 2] = 0;
       HEAP32[$3 + 36 >> 2] = 0;
       HEAP32[($3 + 32 | 0) + ($1 << 2) >> 2] = 1065353216;
       HEAP32[$3 + 28 >> 2] = 0;
       $6 = HEAPF32[$3 + 32 >> 2];
       $8 = HEAPF32[$15 + 40 >> 2];
       $7 = Math_fround(Math_fround($11 * $6) - Math_fround($13 * $8));
       HEAPF32[$3 + 20 >> 2] = $7;
       $14 = HEAPF32[$3 + 36 >> 2];
       $8 = Math_fround(Math_fround($12 * $8) - Math_fround($11 * $14));
       HEAPF32[$3 + 16 >> 2] = $8;
       $6 = Math_fround(Math_fround($13 * $14) - Math_fround($12 * $6));
       HEAPF32[$3 + 24 >> 2] = $6;
       if (!!(Math_fround(Math_fround($6 * $6) + Math_fround(Math_fround($8 * $8) + Math_fround($7 * $7))) > Math_fround(0))) {
        $5 = HEAP32[$0 + 372 >> 2];
        $4 = HEAP32[$5 + 32 >> 2];
        $9 = ($4 << 2) + $5 | 0;
        HEAP32[$9 + 16 >> 2] = 0;
        $10 = HEAP32[$0 + 364 >> 2] + -1 | 0;
        HEAP32[$0 + 364 >> 2] = $10;
        $10 = HEAP32[(($10 << 2) + $0 | 0) + 348 >> 2];
        HEAP32[$9 >> 2] = $10;
        HEAP32[$5 + 32 >> 2] = $4 + 1;
        gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $3 + 16 | 0, $10);
        if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
         break label$3;
        }
        $5 = HEAP32[$0 + 372 >> 2];
        $4 = HEAP32[$5 + 32 >> 2] + -1 | 0;
        HEAP32[$5 + 32 >> 2] = $4;
        $9 = HEAP32[$0 + 364 >> 2];
        $4 = HEAP32[($4 << 2) + $5 >> 2];
        HEAP32[(($9 << 2) + $0 | 0) + 348 >> 2] = $4;
        $5 = HEAP32[$0 + 372 >> 2];
        HEAP32[$3 + 12 >> 2] = 0;
        HEAPF32[$3 + 8 >> 2] = -HEAPF32[$3 + 24 >> 2];
        HEAPF32[$3 + 4 >> 2] = -HEAPF32[$3 + 20 >> 2];
        HEAPF32[$3 >> 2] = -HEAPF32[$3 + 16 >> 2];
        $10 = HEAP32[$5 + 32 >> 2];
        $2 = ($10 << 2) + $5 | 0;
        HEAP32[$2 + 16 >> 2] = 0;
        HEAP32[$0 + 364 >> 2] = $9;
        HEAP32[$2 >> 2] = $4;
        HEAP32[$5 + 32 >> 2] = $10 + 1;
        gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $3, $4);
        if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
         break label$3;
        }
        $5 = HEAP32[$0 + 372 >> 2];
        $4 = HEAP32[$5 + 32 >> 2] + -1 | 0;
        HEAP32[$5 + 32 >> 2] = $4;
        $5 = HEAP32[($4 << 2) + $5 >> 2];
        $4 = HEAP32[$0 + 364 >> 2];
        HEAP32[$0 + 364 >> 2] = $4 + 1;
        HEAP32[(($4 << 2) + $0 | 0) + 348 >> 2] = $5;
       }
       $1 = $1 + 1 | 0;
       if (($1 | 0) != 3) {
        continue;
       }
       break;
      }
      break label$4;
     case 1:
      $2 = HEAP32[$1 + 4 >> 2];
      $11 = HEAPF32[$2 + 20 >> 2];
      $5 = HEAP32[$1 + 8 >> 2];
      $12 = HEAPF32[$5 + 24 >> 2];
      $4 = HEAP32[$1 >> 2];
      $7 = HEAPF32[$4 + 24 >> 2];
      $13 = HEAPF32[$2 + 24 >> 2];
      $14 = HEAPF32[$5 + 20 >> 2];
      $8 = HEAPF32[$4 + 20 >> 2];
      $16 = HEAPF32[$5 + 16 >> 2];
      $6 = HEAPF32[$4 + 16 >> 2];
      $17 = HEAPF32[$2 + 16 >> 2];
      HEAP32[$3 + 44 >> 2] = 0;
      $11 = Math_fround($11 - $8);
      $12 = Math_fround($12 - $7);
      $13 = Math_fround($13 - $7);
      $14 = Math_fround($14 - $8);
      $7 = Math_fround(Math_fround($11 * $12) - Math_fround($13 * $14));
      HEAPF32[$3 + 32 >> 2] = $7;
      $16 = Math_fround($16 - $6);
      $6 = Math_fround($17 - $6);
      $8 = Math_fround(Math_fround($13 * $16) - Math_fround($6 * $12));
      HEAPF32[$3 + 36 >> 2] = $8;
      $6 = Math_fround(Math_fround($6 * $14) - Math_fround($11 * $16));
      HEAPF32[$3 + 40 >> 2] = $6;
      if (!(Math_fround(Math_fround($6 * $6) + Math_fround(Math_fround($7 * $7) + Math_fround($8 * $8))) > Math_fround(0))) {
       break label$4;
      }
      HEAP32[$1 + 28 >> 2] = 0;
      $2 = HEAP32[$0 + 364 >> 2] + -1 | 0;
      HEAP32[$0 + 364 >> 2] = $2;
      $2 = HEAP32[(($2 << 2) + $0 | 0) + 348 >> 2];
      HEAP32[$1 + 32 >> 2] = 4;
      HEAP32[$1 + 12 >> 2] = $2;
      gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $3 + 32 | 0, $2);
      if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
       break label$3;
      }
      $1 = HEAP32[$0 + 372 >> 2];
      $2 = HEAP32[$1 + 32 >> 2] + -1 | 0;
      HEAP32[$1 + 32 >> 2] = $2;
      $4 = HEAP32[$0 + 364 >> 2];
      $5 = HEAP32[($2 << 2) + $1 >> 2];
      HEAP32[(($4 << 2) + $0 | 0) + 348 >> 2] = $5;
      $1 = HEAP32[$0 + 372 >> 2];
      HEAP32[$3 + 28 >> 2] = 0;
      HEAPF32[$3 + 24 >> 2] = -HEAPF32[$3 + 40 >> 2];
      HEAPF32[$3 + 20 >> 2] = -HEAPF32[$3 + 36 >> 2];
      HEAPF32[$3 + 16 >> 2] = -HEAPF32[$3 + 32 >> 2];
      $9 = HEAP32[$1 + 32 >> 2];
      $2 = ($9 << 2) + $1 | 0;
      HEAP32[$2 + 16 >> 2] = 0;
      HEAP32[$0 + 364 >> 2] = $4;
      HEAP32[$2 >> 2] = $5;
      $2 = 1;
      HEAP32[$1 + 32 >> 2] = $9 + 1;
      gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $3 + 16 | 0, $5);
      if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
       break label$2;
      }
      $1 = HEAP32[$0 + 372 >> 2];
      $2 = HEAP32[$1 + 32 >> 2] + -1 | 0;
      HEAP32[$1 + 32 >> 2] = $2;
      $1 = HEAP32[($2 << 2) + $1 >> 2];
      $2 = HEAP32[$0 + 364 >> 2];
      HEAP32[$0 + 364 >> 2] = $2 + 1;
      HEAP32[(($2 << 2) + $0 | 0) + 348 >> 2] = $1;
      $2 = 0;
      break label$2;
     case 2:
      break label$5;
     }
    }
    $2 = 1;
    $0 = HEAP32[$1 >> 2];
    $5 = HEAP32[$1 + 12 >> 2];
    $7 = HEAPF32[$5 + 16 >> 2];
    $11 = Math_fround(HEAPF32[$0 + 16 >> 2] - $7);
    $4 = HEAP32[$1 + 4 >> 2];
    $8 = HEAPF32[$5 + 20 >> 2];
    $12 = Math_fround(HEAPF32[$4 + 20 >> 2] - $8);
    $1 = HEAP32[$1 + 8 >> 2];
    $6 = HEAPF32[$5 + 24 >> 2];
    $13 = Math_fround(HEAPF32[$1 + 24 >> 2] - $6);
    $14 = Math_fround(HEAPF32[$0 + 20 >> 2] - $8);
    $16 = Math_fround(HEAPF32[$4 + 24 >> 2] - $6);
    $17 = Math_fround(HEAPF32[$1 + 16 >> 2] - $7);
    $6 = Math_fround(HEAPF32[$0 + 24 >> 2] - $6);
    $7 = Math_fround(HEAPF32[$4 + 16 >> 2] - $7);
    $8 = Math_fround(HEAPF32[$1 + 20 >> 2] - $8);
    $7 = Math_fround(Math_fround(Math_fround(Math_fround($11 * $12) * $13) + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($14 * $16) * $17) + Math_fround(Math_fround($6 * $7) * $8)) - Math_fround(Math_fround($11 * $16) * $8)) - Math_fround(Math_fround($14 * $7) * $13))) - Math_fround(Math_fround($6 * $12) * $17));
    if ($7 != Math_fround(0) & $7 == $7) {
     break label$2;
    }
   }
   $2 = 0;
   break label$2;
  }
  $2 = 1;
 }
 $0 = $3 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function btPolyhedralContactClipping__clipFaceAgainstHull_28btVector3_20const__2c_20btConvexPolyhedron_20const__2c_20btTransform_20const__2c_20btAlignedObjectArray_btVector3___2c_20btAlignedObjectArray_btVector3___2c_20float_2c_20float_2c_20btDiscreteCollisionDetectorInterface__Result__29($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = 0, $23 = Math_fround(0), $24 = Math_fround(0), $25 = 0, $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = 0, $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = Math_fround(0);
 $10 = global$0 - 32 | 0;
 $13 = $10;
 if ($10 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $13;
 $9 = HEAP32[$4 + 4 >> 2];
 if (($9 | 0) <= -1) {
  if (HEAP32[$4 + 8 >> 2] <= -1) {
   $8 = HEAP32[$4 + 12 >> 2];
   if ($8) {
    if (HEAPU8[$4 + 16 | 0]) {
     btAlignedFreeInternal_28void__29($8);
    }
    HEAP32[$4 + 12 >> 2] = 0;
   }
   HEAP8[$4 + 16 | 0] = 1;
   HEAP32[$4 + 8 >> 2] = 0;
   HEAP32[$4 + 12 >> 2] = 0;
  }
  while (1) {
   $13 = HEAP32[$10 + 20 >> 2];
   $14 = HEAP32[$10 + 16 >> 2];
   $8 = HEAP32[$4 + 12 >> 2] + ($9 << 4) | 0;
   HEAP32[$8 >> 2] = $14;
   HEAP32[$8 + 4 >> 2] = $13;
   $14 = HEAP32[$10 + 28 >> 2];
   $13 = HEAP32[$10 + 24 >> 2];
   HEAP32[$8 + 8 >> 2] = $13;
   HEAP32[$8 + 12 >> 2] = $14;
   $8 = $9 + 1 | 0;
   $11 = $8 >>> 0 >= $9 >>> 0;
   $9 = $8;
   if ($11) {
    continue;
   }
   break;
  }
 }
 HEAP32[$4 + 4 >> 2] = 0;
 $25 = HEAP32[$3 + 4 >> 2];
 if (HEAP32[$4 + 8 >> 2] < ($25 | 0)) {
  label$8 : {
   if (!$25) {
    break label$8;
   }
   $17 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($25 << 4, 16);
   $22 = HEAP32[$4 + 4 >> 2];
   if (($22 | 0) < 1) {
    break label$8;
   }
   $9 = 0;
   while (1) {
    $8 = $9 << 4;
    $11 = $17 + $8 | 0;
    $8 = HEAP32[$4 + 12 >> 2] + $8 | 0;
    $13 = HEAP32[$8 + 4 >> 2];
    $14 = HEAP32[$8 >> 2];
    HEAP32[$11 >> 2] = $14;
    HEAP32[$11 + 4 >> 2] = $13;
    $14 = HEAP32[$8 + 12 >> 2];
    $13 = HEAP32[$8 + 8 >> 2];
    HEAP32[$11 + 8 >> 2] = $13;
    HEAP32[$11 + 12 >> 2] = $14;
    $9 = $9 + 1 | 0;
    if (($22 | 0) != ($9 | 0)) {
     continue;
    }
    break;
   }
  }
  $9 = HEAP32[$4 + 12 >> 2];
  if ($9) {
   if (HEAPU8[$4 + 16 | 0]) {
    btAlignedFreeInternal_28void__29($9);
   }
   HEAP32[$4 + 12 >> 2] = 0;
  }
  HEAP32[$4 + 12 >> 2] = $17;
  HEAP8[$4 + 16 | 0] = 1;
  HEAP32[$4 + 8 >> 2] = $25;
 }
 $17 = HEAP32[$1 + 28 >> 2];
 label$12 : {
  if (($17 | 0) < 1) {
   break label$12;
  }
  $18 = HEAPF32[$2 + 40 >> 2];
  $27 = HEAPF32[$2 + 36 >> 2];
  $19 = HEAPF32[$2 + 24 >> 2];
  $28 = HEAPF32[$2 + 20 >> 2];
  $22 = HEAP32[$1 + 36 >> 2];
  $23 = HEAPF32[$0 + 8 >> 2];
  $29 = HEAPF32[$0 + 4 >> 2];
  $24 = HEAPF32[$0 >> 2];
  $30 = HEAPF32[$2 + 32 >> 2];
  $31 = HEAPF32[$2 + 16 >> 2];
  $32 = HEAPF32[$2 + 8 >> 2];
  $33 = HEAPF32[$2 + 4 >> 2];
  $26 = HEAPF32[$2 >> 2];
  $9 = 0;
  $12 = Math_fround(3.4028234663852886e+38);
  $11 = -1;
  while (1) {
   $8 = Math_imul($9, 36) + $22 | 0;
   $15 = HEAPF32[$8 + 20 >> 2];
   $20 = HEAPF32[$8 + 24 >> 2];
   $16 = HEAPF32[$8 + 28 >> 2];
   $15 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($15 * $26) + Math_fround($20 * $33)) + Math_fround($16 * $32)) * $24) + Math_fround(Math_fround(Math_fround(Math_fround($15 * $31) + Math_fround($20 * $28)) + Math_fround($16 * $19)) * $29)) + Math_fround(Math_fround(Math_fround(Math_fround($15 * $30) + Math_fround($20 * $27)) + Math_fround($16 * $18)) * $23));
   $8 = $15 < $12;
   $12 = $8 ? $15 : $12;
   $11 = $8 ? $9 : $11;
   $9 = $9 + 1 | 0;
   if (($9 | 0) < ($17 | 0)) {
    continue;
   }
   break;
  }
  if (($11 | 0) < 0) {
   break label$12;
  }
  $21 = HEAP32[$1 + 36 >> 2] + Math_imul($11, 36) | 0;
  $36 = HEAP32[$21 + 4 >> 2];
  label$14 : {
   if (($36 | 0) < 1) {
    $17 = $3;
    break label$14;
   }
   $9 = 0;
   while (1) {
    $17 = $4;
    $22 = $9 + 1 | 0;
    $25 = ($36 | 0) == ($22 | 0);
    $11 = HEAP32[$1 + 16 >> 2];
    $4 = HEAP32[$21 + 12 >> 2];
    $8 = $11 + (HEAP32[$4 + (($25 ? 0 : $22) << 2) >> 2] << 4) | 0;
    $34 = HEAPF32[$8 + 8 >> 2];
    $26 = HEAPF32[$8 >> 2];
    $35 = HEAPF32[$8 + 4 >> 2];
    $9 = (HEAP32[($9 << 2) + $4 >> 2] << 4) + $11 | 0;
    $12 = HEAPF32[$9 + 8 >> 2];
    $15 = HEAPF32[$9 >> 2];
    $20 = HEAPF32[$9 + 4 >> 2];
    $42 = HEAPF32[$2 + 56 >> 2];
    $43 = HEAPF32[$2 + 52 >> 2];
    $44 = HEAPF32[$2 + 48 >> 2];
    $16 = HEAPF32[$2 + 40 >> 2];
    $18 = HEAPF32[$2 + 32 >> 2];
    $27 = HEAPF32[$2 + 36 >> 2];
    $19 = HEAPF32[$21 + 28 >> 2];
    $28 = HEAPF32[$2 + 8 >> 2];
    $23 = HEAPF32[$21 + 20 >> 2];
    $29 = HEAPF32[$2 >> 2];
    $24 = HEAPF32[$21 + 24 >> 2];
    $30 = HEAPF32[$2 + 4 >> 2];
    $31 = HEAPF32[$2 + 24 >> 2];
    $32 = HEAPF32[$2 + 16 >> 2];
    $33 = HEAPF32[$2 + 20 >> 2];
    HEAP32[$10 + 28 >> 2] = 0;
    $26 = Math_fround($15 - $26);
    $35 = Math_fround($20 - $35);
    $34 = Math_fround($12 - $34);
    $37 = Math_fround(Math_fround(Math_fround($29 * $26) + Math_fround($30 * $35)) + Math_fround($28 * $34));
    $38 = Math_fround(Math_fround(Math_fround($32 * $23) + Math_fround($33 * $24)) + Math_fround($31 * $19));
    $39 = Math_fround(Math_fround(Math_fround($26 * $32) + Math_fround($35 * $33)) + Math_fround($34 * $31));
    $40 = Math_fround(Math_fround(Math_fround($29 * $23) + Math_fround($30 * $24)) + Math_fround($28 * $19));
    $41 = Math_fround(Math_fround($37 * $38) - Math_fround($39 * $40));
    HEAPF32[$10 + 24 >> 2] = -$41;
    $19 = Math_fround(Math_fround(Math_fround($18 * $23) + Math_fround($27 * $24)) + Math_fround($16 * $19));
    $23 = Math_fround(Math_fround(Math_fround($26 * $18) + Math_fround($35 * $27)) + Math_fround($34 * $16));
    $24 = Math_fround(Math_fround($39 * $19) - Math_fround($23 * $38));
    HEAPF32[$10 + 16 >> 2] = -$24;
    $19 = Math_fround(-Math_fround(Math_fround($23 * $40) - Math_fround($37 * $19)));
    HEAPF32[$10 + 20 >> 2] = $19;
    $4 = $3;
    btPolyhedralContactClipping__clipFace_28btAlignedObjectArray_btVector3__20const__2c_20btAlignedObjectArray_btVector3___2c_20btVector3_20const__2c_20float_29($4, $17, $10 + 16 | 0, Math_fround(-Math_fround(Math_fround(Math_fround(Math_fround($43 + Math_fround(Math_fround(Math_fround($15 * $32) + Math_fround($20 * $33)) + Math_fround($12 * $31))) * $19) - Math_fround($24 * Math_fround($44 + Math_fround(Math_fround(Math_fround($15 * $29) + Math_fround($20 * $30)) + Math_fround($12 * $28))))) - Math_fround($41 * Math_fround($42 + Math_fround(Math_fround(Math_fround($15 * $18) + Math_fround($20 * $27)) + Math_fround($12 * $16)))))));
    $9 = HEAP32[$4 + 4 >> 2];
    if (($9 | 0) <= -1) {
     if (HEAP32[$4 + 8 >> 2] <= -1) {
      $8 = HEAP32[$4 + 12 >> 2];
      if ($8) {
       if (HEAPU8[$4 + 16 | 0]) {
        btAlignedFreeInternal_28void__29($8);
       }
       HEAP32[$4 + 12 >> 2] = 0;
      }
      HEAP8[$4 + 16 | 0] = 1;
      HEAP32[$4 + 8 >> 2] = 0;
      HEAP32[$4 + 12 >> 2] = 0;
     }
     while (1) {
      $13 = HEAP32[$10 + 4 >> 2];
      $14 = HEAP32[$10 >> 2];
      $8 = HEAP32[$4 + 12 >> 2] + ($9 << 4) | 0;
      HEAP32[$8 >> 2] = $14;
      HEAP32[$8 + 4 >> 2] = $13;
      $14 = HEAP32[$10 + 12 >> 2];
      $13 = HEAP32[$10 + 8 >> 2];
      HEAP32[$8 + 8 >> 2] = $13;
      HEAP32[$8 + 12 >> 2] = $14;
      $8 = $9 + 1 | 0;
      $11 = $8 >>> 0 >= $9 >>> 0;
      $9 = $8;
      if ($11) {
       continue;
      }
      break;
     }
    }
    HEAP32[$4 + 4 >> 2] = 0;
    $9 = $22;
    $3 = $17;
    if (!$25) {
     continue;
    }
    break;
   }
  }
  $11 = HEAP32[$17 + 4 >> 2];
  if (($11 | 0) < 1) {
   break label$12;
  }
  $12 = HEAPF32[$21 + 20 >> 2];
  $16 = HEAPF32[$21 + 24 >> 2];
  $18 = HEAPF32[$21 + 28 >> 2];
  $15 = Math_fround(Math_fround(Math_fround($12 * HEAPF32[$2 >> 2]) + Math_fround($16 * HEAPF32[$2 + 4 >> 2])) + Math_fround($18 * HEAPF32[$2 + 8 >> 2]));
  $20 = Math_fround(Math_fround(Math_fround($12 * HEAPF32[$2 + 16 >> 2]) + Math_fround($16 * HEAPF32[$2 + 20 >> 2])) + Math_fround($18 * HEAPF32[$2 + 24 >> 2]));
  $16 = Math_fround(Math_fround(Math_fround($12 * HEAPF32[$2 + 32 >> 2]) + Math_fround($16 * HEAPF32[$2 + 36 >> 2])) + Math_fround($18 * HEAPF32[$2 + 40 >> 2]));
  $18 = Math_fround(HEAPF32[$21 + 32 >> 2] - Math_fround(Math_fround(Math_fround($15 * HEAPF32[$2 + 48 >> 2]) + Math_fround($20 * HEAPF32[$2 + 52 >> 2])) + Math_fround($16 * HEAPF32[$2 + 56 >> 2])));
  $8 = 0;
  while (1) {
   $9 = HEAP32[$17 + 12 >> 2] + ($8 << 4) | 0;
   $12 = Math_fround($18 + Math_fround(Math_fround(Math_fround($15 * HEAPF32[$9 >> 2]) + Math_fround($20 * HEAPF32[$9 + 4 >> 2])) + Math_fround($16 * HEAPF32[$9 + 8 >> 2])));
   $12 = $12 <= $5 ? $5 : $12;
   if (!!($12 <= $6)) {
    $13 = HEAP32[$9 + 12 >> 2];
    $14 = HEAP32[$9 + 8 >> 2];
    HEAP32[$10 + 24 >> 2] = $14;
    HEAP32[$10 + 28 >> 2] = $13;
    $14 = HEAP32[$9 + 4 >> 2];
    $13 = HEAP32[$9 >> 2];
    HEAP32[$10 + 16 >> 2] = $13;
    HEAP32[$10 + 20 >> 2] = $14;
    FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 16 >> 2]]($7, $0, $10 + 16 | 0, $12);
    $11 = HEAP32[$17 + 4 >> 2];
   }
   $8 = $8 + 1 | 0;
   if (($8 | 0) < ($11 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = $10 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btVoronoiSimplexSolver__closestPtPointTetrahedron_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btSubSimplexClosestResult__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = 0, $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = 0, $43 = 0, $44 = 0;
 $8 = global$0 - 48 | 0;
 $0 = $8;
 if ($8 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 HEAP8[$8 + 24 | 0] = 0;
 $17 = $1 + 8 | 0;
 $23 = HEAP32[$17 >> 2];
 $0 = HEAP32[$17 + 4 >> 2];
 HEAP32[$6 + 8 >> 2] = $23;
 HEAP32[$6 + 12 >> 2] = $0;
 $23 = HEAP32[$1 + 4 >> 2];
 $0 = HEAP32[$1 >> 2];
 HEAP32[$6 >> 2] = $0;
 HEAP32[$6 + 4 >> 2] = $23;
 HEAP8[$6 + 16 | 0] = HEAPU8[$6 + 16 | 0] | 15;
 $33 = HEAPF32[$1 + 8 >> 2];
 $11 = HEAPF32[$2 + 8 >> 2];
 $30 = Math_fround($33 - $11);
 $34 = HEAPF32[$4 >> 2];
 $7 = HEAPF32[$2 >> 2];
 $9 = Math_fround($34 - $7);
 $35 = HEAPF32[$5 + 4 >> 2];
 $13 = HEAPF32[$2 + 4 >> 2];
 $10 = Math_fround($35 - $13);
 $36 = HEAPF32[$4 + 4 >> 2];
 $18 = Math_fround($36 - $13);
 $37 = HEAPF32[$5 >> 2];
 $16 = Math_fround($37 - $7);
 $19 = Math_fround(Math_fround($9 * $10) - Math_fround($18 * $16));
 $38 = HEAPF32[$1 >> 2];
 $31 = Math_fround($38 - $7);
 $39 = HEAPF32[$5 + 8 >> 2];
 $20 = Math_fround($39 - $11);
 $40 = HEAPF32[$4 + 8 >> 2];
 $21 = Math_fround($40 - $11);
 $22 = Math_fround(Math_fround($18 * $20) - Math_fround($21 * $10));
 $41 = HEAPF32[$1 + 4 >> 2];
 $32 = Math_fround($41 - $13);
 $15 = Math_fround(Math_fround($21 * $16) - Math_fround($9 * $20));
 $28 = Math_fround(Math_fround($30 * $19) + Math_fround(Math_fround($31 * $22) + Math_fround($32 * $15)));
 $24 = HEAPF32[$3 + 8 >> 2];
 $25 = Math_fround($24 - $11);
 $29 = Math_fround($25 * $19);
 $19 = HEAPF32[$3 >> 2];
 $26 = Math_fround($19 - $7);
 $14 = Math_fround($26 * $22);
 $22 = HEAPF32[$3 + 4 >> 2];
 $27 = Math_fround($22 - $13);
 $15 = Math_fround($29 + Math_fround($14 + Math_fround($27 * $15)));
 $42 = Math_fround($15 * $15) < Math_fround(9.99999905104687e-9) ? -1 : Math_fround($28 * $15) < Math_fround(0);
 $15 = Math_fround(Math_fround($27 * $21) - Math_fround($25 * $18));
 $28 = Math_fround(Math_fround($25 * $9) - Math_fround($26 * $21));
 $29 = Math_fround(Math_fround($26 * $18) - Math_fround($27 * $9));
 $14 = Math_fround(Math_fround(Math_fround($31 * $15) + Math_fround($32 * $28)) + Math_fround($29 * $30));
 $15 = Math_fround(Math_fround(Math_fround($15 * $16) + Math_fround($28 * $10)) + Math_fround($29 * $20));
 $0 = Math_fround($15 * $15) < Math_fround(9.99999905104687e-9) ? -1 : Math_fround($14 * $15) < Math_fround(0);
 $15 = Math_fround(Math_fround($27 * $16) - Math_fround($26 * $10));
 $10 = Math_fround(Math_fround($25 * $10) - Math_fround($27 * $20));
 $16 = Math_fround(Math_fround($26 * $20) - Math_fround($25 * $16));
 $9 = Math_fround(Math_fround($21 * $15) + Math_fround(Math_fround($9 * $10) + Math_fround($18 * $16)));
 $43 = Math_fround($9 * $9) < Math_fround(9.99999905104687e-9) ? -1 : Math_fround(Math_fround(Math_fround($30 * $15) + Math_fround(Math_fround($31 * $10) + Math_fround($32 * $16))) * $9) < Math_fround(0);
 $9 = Math_fround($36 - $22);
 $10 = Math_fround($37 - $19);
 $18 = Math_fround($34 - $19);
 $16 = Math_fround($35 - $22);
 $20 = Math_fround(Math_fround($9 * $10) - Math_fround($18 * $16));
 $21 = Math_fround($40 - $24);
 $14 = Math_fround($21 * $16);
 $16 = Math_fround($39 - $24);
 $9 = Math_fround($14 - Math_fround($9 * $16));
 $10 = Math_fround(Math_fround($18 * $16) - Math_fround($21 * $10));
 $11 = Math_fround(Math_fround(Math_fround($11 - $24) * $20) + Math_fround(Math_fround(Math_fround($7 - $19) * $9) + Math_fround(Math_fround($13 - $22) * $10)));
 $44 = Math_fround($11 * $11) < Math_fround(9.99999905104687e-9) ? -1 : Math_fround(Math_fround(Math_fround(Math_fround($33 - $24) * $20) + Math_fround(Math_fround(Math_fround($38 - $19) * $9) + Math_fround(Math_fround($41 - $22) * $10))) * $11) < Math_fround(0);
 $17 = $44 | ($42 | $0 | $43);
 label$2 : {
  if (($17 | 0) <= -1) {
   HEAP8[$6 + 36 | 0] = 1;
   break label$2;
  }
  if (!$17) {
   break label$2;
  }
  $11 = Math_fround(3.4028234663852886e+38);
  label$4 : {
   if (!$0) {
    break label$4;
   }
   btVoronoiSimplexSolver__closestPtPointTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btSubSimplexClosestResult__29($6, $1, $2, $3, $4, $8 + 8 | 0);
   $9 = HEAPF32[$8 + 8 >> 2];
   $7 = Math_fround($9 - HEAPF32[$1 >> 2]);
   $11 = Math_fround($7 * $7);
   $13 = HEAPF32[$8 + 12 >> 2];
   $7 = Math_fround($13 - HEAPF32[$1 + 4 >> 2]);
   $11 = Math_fround($11 + Math_fround($7 * $7));
   $10 = HEAPF32[$8 + 16 >> 2];
   $7 = Math_fround($10 - HEAPF32[$1 + 8 >> 2]);
   $7 = Math_fround($11 + Math_fround($7 * $7));
   $11 = Math_fround(3.4028234663852886e+38);
   if (!($7 < Math_fround(3.4028234663852886e+38))) {
    break label$4;
   }
   HEAP32[$6 + 12 >> 2] = HEAP32[$8 + 20 >> 2];
   HEAPF32[$6 + 8 >> 2] = $10;
   HEAPF32[$6 + 4 >> 2] = $13;
   HEAPF32[$6 >> 2] = $9;
   $12 = HEAPU8[$8 + 24 | 0];
   HEAP8[$6 + 16 | 0] = $12 & 1 | HEAPU8[$6 + 16 | 0] & 240 | $12 & 2 | $12 & 4;
   $12 = HEAP32[$8 + 36 >> 2];
   $0 = HEAP32[$8 + 32 >> 2];
   $23 = HEAP32[$8 + 28 >> 2];
   $17 = $23;
   HEAP32[$6 + 32 >> 2] = 0;
   HEAP32[$6 + 28 >> 2] = $12;
   HEAP32[$6 + 20 >> 2] = $17;
   HEAP32[$6 + 24 >> 2] = $0;
   $11 = $7;
  }
  label$5 : {
   if (!$42) {
    break label$5;
   }
   btVoronoiSimplexSolver__closestPtPointTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btSubSimplexClosestResult__29($6, $1, $2, $4, $5, $8 + 8 | 0);
   $9 = HEAPF32[$8 + 8 >> 2];
   $7 = Math_fround($9 - HEAPF32[$1 >> 2]);
   $14 = Math_fround($7 * $7);
   $13 = HEAPF32[$8 + 12 >> 2];
   $7 = Math_fround($13 - HEAPF32[$1 + 4 >> 2]);
   $14 = Math_fround($14 + Math_fround($7 * $7));
   $10 = HEAPF32[$8 + 16 >> 2];
   $7 = Math_fround($10 - HEAPF32[$1 + 8 >> 2]);
   $7 = Math_fround($14 + Math_fround($7 * $7));
   if (!($7 < $11)) {
    break label$5;
   }
   HEAP32[$6 + 12 >> 2] = HEAP32[$8 + 20 >> 2];
   HEAPF32[$6 + 8 >> 2] = $10;
   HEAPF32[$6 + 4 >> 2] = $13;
   HEAPF32[$6 >> 2] = $9;
   $12 = HEAPU8[$8 + 24 | 0];
   $0 = $12 & 1 | HEAPU8[$6 + 16 | 0] & 240;
   $12 = $12 << 1;
   HEAP8[$6 + 16 | 0] = $0 | $12 & 4 | $12 & 8;
   $23 = HEAP32[$8 + 36 >> 2];
   $0 = HEAP32[$8 + 32 >> 2];
   $17 = $0;
   $12 = HEAP32[$8 + 28 >> 2];
   HEAP32[$6 + 24 >> 2] = 0;
   HEAP32[$6 + 28 >> 2] = $17;
   HEAP32[$6 + 32 >> 2] = $23;
   HEAP32[$6 + 20 >> 2] = $12;
   $11 = $7;
  }
  label$6 : {
   if (!$43) {
    break label$6;
   }
   btVoronoiSimplexSolver__closestPtPointTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btSubSimplexClosestResult__29($6, $1, $2, $5, $3, $8 + 8 | 0);
   $9 = HEAPF32[$8 + 8 >> 2];
   $7 = Math_fround($9 - HEAPF32[$1 >> 2]);
   $14 = Math_fround($7 * $7);
   $13 = HEAPF32[$8 + 12 >> 2];
   $7 = Math_fround($13 - HEAPF32[$1 + 4 >> 2]);
   $14 = Math_fround($14 + Math_fround($7 * $7));
   $10 = HEAPF32[$8 + 16 >> 2];
   $7 = Math_fround($10 - HEAPF32[$1 + 8 >> 2]);
   $7 = Math_fround($14 + Math_fround($7 * $7));
   if (!($7 < $11)) {
    break label$6;
   }
   HEAP32[$6 + 12 >> 2] = HEAP32[$8 + 20 >> 2];
   HEAPF32[$6 + 8 >> 2] = $10;
   HEAPF32[$6 + 4 >> 2] = $13;
   HEAPF32[$6 >> 2] = $9;
   $2 = HEAPU8[$8 + 24 | 0];
   HEAP8[$6 + 16 | 0] = $2 & 1 | HEAPU8[$6 + 16 | 0] & 240 | $2 >>> 1 & 2 | $2 << 2 & 8;
   $2 = HEAP32[$8 + 36 >> 2];
   $12 = HEAP32[$8 + 28 >> 2];
   HEAP32[$6 + 32 >> 2] = HEAP32[$8 + 32 >> 2];
   HEAP32[$6 + 28 >> 2] = 0;
   HEAP32[$6 + 24 >> 2] = $2;
   HEAP32[$6 + 20 >> 2] = $12;
   $11 = $7;
  }
  if (!$44) {
   $12 = 1;
   break label$2;
  }
  btVoronoiSimplexSolver__closestPtPointTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btSubSimplexClosestResult__29($6, $1, $3, $5, $4, $8 + 8 | 0);
  $12 = 1;
  $9 = HEAPF32[$8 + 8 >> 2];
  $7 = Math_fround($9 - HEAPF32[$1 >> 2]);
  $14 = Math_fround($7 * $7);
  $13 = HEAPF32[$8 + 12 >> 2];
  $7 = Math_fround($13 - HEAPF32[$1 + 4 >> 2]);
  $14 = Math_fround($14 + Math_fround($7 * $7));
  $10 = HEAPF32[$8 + 16 >> 2];
  $7 = Math_fround($10 - HEAPF32[$1 + 8 >> 2]);
  if (!(Math_fround($14 + Math_fround($7 * $7)) < $11)) {
   break label$2;
  }
  HEAP32[$6 + 12 >> 2] = HEAP32[$8 + 20 >> 2];
  HEAPF32[$6 + 8 >> 2] = $10;
  HEAPF32[$6 + 4 >> 2] = $13;
  HEAPF32[$6 >> 2] = $9;
  $1 = HEAPU8[$8 + 24 | 0];
  HEAP8[$6 + 16 | 0] = $1 & 4 | HEAPU8[$6 + 16 | 0] & 240 | $1 << 1 & 2 | $1 << 2 & 8;
  $1 = HEAP32[$8 + 36 >> 2];
  $5 = HEAP32[$8 + 28 >> 2];
  HEAP32[$6 + 32 >> 2] = HEAP32[$8 + 32 >> 2];
  HEAP32[$6 + 28 >> 2] = $1;
  HEAP32[$6 + 24 >> 2] = $5;
  HEAP32[$6 + 20 >> 2] = 0;
 }
 $0 = $8 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $12;
}
function btGjkEpaSolver2__Penetration_28btConvexShape_20const__2c_20btTransform_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btGjkEpaSolver2__sResults__2c_20bool_29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = 0, $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0);
 $7 = global$0 - 19040 | 0;
 $29 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $29;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$5 + 4 >> 2] = 0;
 HEAP32[$5 + 32 >> 2] = 0;
 HEAP32[$5 + 24 >> 2] = 0;
 HEAP32[$5 + 28 >> 2] = 0;
 HEAP32[$5 + 16 >> 2] = 0;
 HEAP32[$5 + 20 >> 2] = 0;
 HEAP32[$5 + 8 >> 2] = 0;
 HEAP32[$5 + 12 >> 2] = 0;
 HEAP32[$7 + 18916 >> 2] = $2;
 HEAP32[$7 + 18912 >> 2] = $0;
 $8 = HEAPF32[$3 + 20 >> 2];
 $9 = HEAPF32[$3 + 36 >> 2];
 $0 = $1 + 20 | 0;
 $10 = HEAPF32[$0 >> 2];
 $2 = $1 + 36 | 0;
 $11 = HEAPF32[$2 >> 2];
 $13 = HEAPF32[$3 + 24 >> 2];
 $15 = HEAPF32[$1 + 24 >> 2];
 $14 = HEAPF32[$3 + 40 >> 2];
 $16 = HEAPF32[$1 + 40 >> 2];
 $17 = HEAPF32[$3 + 32 >> 2];
 $18 = HEAPF32[$3 >> 2];
 $19 = HEAPF32[$3 + 16 >> 2];
 $20 = HEAPF32[$3 + 4 >> 2];
 $21 = HEAPF32[$1 + 32 >> 2];
 $22 = HEAPF32[$1 >> 2];
 $23 = HEAPF32[$1 + 16 >> 2];
 $25 = HEAPF32[$1 + 4 >> 2];
 $24 = HEAPF32[$3 + 8 >> 2];
 $26 = HEAPF32[$1 + 8 >> 2];
 HEAP32[$7 + 18964 >> 2] = 0;
 HEAP32[$7 + 18948 >> 2] = 0;
 HEAP32[$7 + 18932 >> 2] = 0;
 $27 = Math_fround(Math_fround(Math_fround($26 * $24) + Math_fround($15 * $13)) + Math_fround($16 * $14));
 HEAPF32[$7 + 18960 >> 2] = $27;
 $28 = Math_fround(Math_fround(Math_fround($25 * $24) + Math_fround($10 * $13)) + Math_fround($11 * $14));
 HEAPF32[$7 + 18956 >> 2] = $28;
 $13 = Math_fround(Math_fround(Math_fround($22 * $24) + Math_fround($23 * $13)) + Math_fround($21 * $14));
 HEAPF32[$7 + 18952 >> 2] = $13;
 $14 = Math_fround(Math_fround(Math_fround($26 * $20) + Math_fround($15 * $8)) + Math_fround($16 * $9));
 HEAPF32[$7 + 18944 >> 2] = $14;
 $24 = Math_fround(Math_fround(Math_fround($25 * $20) + Math_fround($10 * $8)) + Math_fround($11 * $9));
 HEAPF32[$7 + 18940 >> 2] = $24;
 $8 = Math_fround(Math_fround(Math_fround($22 * $20) + Math_fround($23 * $8)) + Math_fround($21 * $9));
 HEAPF32[$7 + 18936 >> 2] = $8;
 $9 = Math_fround(Math_fround(Math_fround($18 * $26) + Math_fround($19 * $15)) + Math_fround($17 * $16));
 HEAPF32[$7 + 18928 >> 2] = $9;
 $10 = Math_fround(Math_fround(Math_fround($18 * $25) + Math_fround($19 * $10)) + Math_fround($17 * $11));
 HEAPF32[$7 + 18924 >> 2] = $10;
 $11 = Math_fround(Math_fround(Math_fround($18 * $22) + Math_fround($19 * $23)) + Math_fround($17 * $21));
 HEAPF32[$7 + 18920 >> 2] = $11;
 $15 = HEAPF32[$1 + 20 >> 2];
 $16 = HEAPF32[$1 + 36 >> 2];
 $17 = HEAPF32[$1 + 24 >> 2];
 $18 = HEAPF32[$1 + 52 >> 2];
 $19 = HEAPF32[$3 + 52 >> 2];
 $20 = HEAPF32[$1 + 40 >> 2];
 $21 = HEAPF32[$1 + 56 >> 2];
 $22 = HEAPF32[$3 + 56 >> 2];
 $23 = HEAPF32[$1 >> 2];
 $25 = HEAPF32[$1 + 16 >> 2];
 $26 = HEAPF32[$1 + 32 >> 2];
 $30 = HEAPF32[$1 + 4 >> 2];
 $31 = HEAPF32[$1 + 8 >> 2];
 $32 = HEAPF32[$1 + 48 >> 2];
 $33 = HEAPF32[$3 + 48 >> 2];
 HEAP32[$7 + 19036 >> 2] = 0;
 HEAP32[$7 + 19028 >> 2] = 0;
 HEAP32[$7 + 19012 >> 2] = 0;
 HEAPF32[$7 + 19008 >> 2] = $27;
 HEAPF32[$7 + 19004 >> 2] = $14;
 HEAPF32[$7 + 19e3 >> 2] = $9;
 HEAP32[$7 + 18996 >> 2] = 0;
 HEAPF32[$7 + 18992 >> 2] = $28;
 HEAPF32[$7 + 18988 >> 2] = $24;
 HEAPF32[$7 + 18984 >> 2] = $10;
 HEAP32[$7 + 18980 >> 2] = 0;
 HEAPF32[$7 + 18976 >> 2] = $13;
 HEAPF32[$7 + 18972 >> 2] = $8;
 $8 = Math_fround($33 - $32);
 $9 = Math_fround($19 - $18);
 $10 = Math_fround($22 - $21);
 HEAPF32[$7 + 19024 >> 2] = Math_fround(Math_fround($31 * $8) + Math_fround($17 * $9)) + Math_fround($20 * $10);
 HEAPF32[$7 + 19020 >> 2] = Math_fround(Math_fround($8 * $30) + Math_fround($9 * $15)) + Math_fround($10 * $16);
 HEAPF32[$7 + 19016 >> 2] = Math_fround(Math_fround($8 * $23) + Math_fround($9 * $25)) + Math_fround($10 * $26);
 HEAP32[$7 + 19032 >> 2] = $6 ? 184 : 183;
 HEAPF32[$7 + 18968 >> 2] = $11;
 $0 = $7 + 18664 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$7 + 18656 >> 2] = 0;
 HEAP32[$7 + 18660 >> 2] = 0;
 HEAP32[$7 + 18892 >> 2] = 0;
 HEAP32[$7 + 18896 >> 2] = 0;
 HEAP32[$7 + 18904 >> 2] = 2;
 HEAP32[$7 + 18672 >> 2] = 0;
 $8 = HEAPF32[$4 >> 2];
 $9 = HEAPF32[$4 + 4 >> 2];
 $10 = HEAPF32[$4 + 8 >> 2];
 HEAP32[$7 + 28 >> 2] = 0;
 HEAPF32[$7 + 24 >> 2] = -$10;
 HEAPF32[$7 + 20 >> 2] = -$9;
 HEAPF32[$7 + 16 >> 2] = -$8;
 $3 = gjkepa2_impl__GJK__Evaluate_28gjkepa2_impl__MinkowskiDiff_20const__2c_20btVector3_20const__29($7 + 18528 | 0, $7 + 18912 | 0, $7 + 16 | 0) + -1 | 0;
 label$2 : {
  if ($3 >>> 0 > 1) {
   break label$2;
  }
  label$3 : {
   if ($3 - 1) {
    $0 = $7 + 18520 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    $0 = $7 - -64 | 0;
    HEAP32[$0 >> 2] = 0;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$7 + 72 >> 2] = 0;
    HEAP32[$7 + 18512 >> 2] = 0;
    HEAP32[$7 + 18516 >> 2] = 0;
    HEAP32[$7 + 18508 >> 2] = 0;
    HEAP32[$7 + 16 >> 2] = 9;
    HEAP32[$7 + 56 >> 2] = 0;
    HEAP32[$7 + 60 >> 2] = 0;
    $3 = 0;
    while (1) {
     $12 = (Math_imul(0 - $3 | 0, 56) + $7 | 0) + 14296 | 0;
     HEAP32[$12 + 4200 >> 2] = 0;
     $6 = HEAP32[$7 + 18520 >> 2];
     HEAP32[$12 + 4204 >> 2] = $6;
     $12 = $12 + 4156 | 0;
     if ($6) {
      HEAP32[$6 + 44 >> 2] = $12;
     }
     HEAP32[$7 + 18520 >> 2] = $12;
     $3 = $3 + 1 | 0;
     if (($3 | 0) != 256) {
      continue;
     }
     break;
    }
    HEAP32[$7 + 18524 >> 2] = 256;
    $8 = HEAPF32[$4 >> 2];
    $9 = HEAPF32[$4 + 4 >> 2];
    $10 = HEAPF32[$4 + 8 >> 2];
    $12 = 0;
    HEAP32[$7 + 12 >> 2] = 0;
    HEAPF32[$7 + 8 >> 2] = -$10;
    HEAPF32[$7 + 4 >> 2] = -$9;
    HEAPF32[$7 >> 2] = -$8;
    if ((gjkepa2_impl__EPA__Evaluate_28gjkepa2_impl__GJK__2c_20btVector3_20const__29($7 + 16 | 0, $7 + 18528 | 0, $7) | 0) != 9) {
     if (!HEAP32[$7 + 52 >> 2]) {
      $9 = Math_fround(0);
      $10 = Math_fround(0);
      $11 = Math_fround(0);
      break label$3;
     }
     $11 = Math_fround(0);
     $3 = 0;
     $10 = Math_fround(0);
     $9 = Math_fround(0);
     while (1) {
      $12 = HEAP32[$7 + 19032 >> 2];
      $4 = HEAP32[$7 + 19036 >> 2];
      $6 = HEAP32[$7 + 18912 >> 2] + ($4 >> 1) | 0;
      $0 = ($7 + 16 | 0) + ($3 << 2) | 0;
      $2 = HEAP32[$0 + 4 >> 2];
      $12 = $4 & 1 ? HEAP32[HEAP32[$6 >> 2] + $12 >> 2] : $12;
      FUNCTION_TABLE[$12]($7, $6, $2);
      $8 = HEAPF32[$0 + 20 >> 2];
      $11 = Math_fround($11 + Math_fround($8 * HEAPF32[$7 + 8 >> 2]));
      $10 = Math_fround($10 + Math_fround($8 * HEAPF32[$7 + 4 >> 2]));
      $9 = Math_fround($9 + Math_fround(HEAPF32[$7 >> 2] * $8));
      $3 = $3 + 1 | 0;
      if ($3 >>> 0 < HEAPU32[$7 + 52 >> 2]) {
       continue;
      }
      break;
     }
     break label$3;
    }
    HEAP32[$5 >> 2] = 3;
    break label$2;
   }
   HEAP32[$5 >> 2] = 2;
   break label$2;
  }
  $12 = 1;
  HEAP32[$5 >> 2] = 1;
  $8 = HEAPF32[$1 + 48 >> 2];
  $13 = HEAPF32[$1 + 8 >> 2];
  $15 = HEAPF32[$1 >> 2];
  $14 = HEAPF32[$1 + 4 >> 2];
  $16 = HEAPF32[$1 + 52 >> 2];
  $17 = HEAPF32[$1 + 24 >> 2];
  $18 = HEAPF32[$1 + 16 >> 2];
  $19 = HEAPF32[$1 + 20 >> 2];
  $20 = HEAPF32[$1 + 56 >> 2];
  $21 = HEAPF32[$1 + 40 >> 2];
  $22 = HEAPF32[$1 + 32 >> 2];
  $23 = HEAPF32[$1 + 36 >> 2];
  HEAP32[$5 + 16 >> 2] = 0;
  HEAPF32[$5 + 12 >> 2] = $20 + Math_fround(Math_fround(Math_fround($9 * $22) + Math_fround($10 * $23)) + Math_fround($11 * $21));
  HEAPF32[$5 + 8 >> 2] = $16 + Math_fround(Math_fround(Math_fround($9 * $18) + Math_fround($10 * $19)) + Math_fround($11 * $17));
  HEAPF32[$5 + 4 >> 2] = $8 + Math_fround(Math_fround(Math_fround($9 * $15) + Math_fround($10 * $14)) + Math_fround($11 * $13));
  $16 = HEAPF32[$1 + 48 >> 2];
  $17 = HEAPF32[$1 + 8 >> 2];
  $18 = HEAPF32[$1 >> 2];
  $19 = HEAPF32[$1 + 4 >> 2];
  $20 = HEAPF32[$1 + 52 >> 2];
  $21 = HEAPF32[$1 + 24 >> 2];
  $22 = HEAPF32[$1 + 16 >> 2];
  $23 = HEAPF32[$1 + 20 >> 2];
  $25 = HEAPF32[$1 + 56 >> 2];
  $24 = HEAPF32[$1 + 40 >> 2];
  $26 = HEAPF32[$1 + 32 >> 2];
  $27 = HEAPF32[$1 + 36 >> 2];
  $13 = HEAPF32[$7 + 60 >> 2];
  $15 = HEAPF32[$7 - -64 >> 2];
  $14 = HEAPF32[$7 + 56 >> 2];
  $8 = HEAPF32[$7 + 72 >> 2];
  HEAP32[$5 + 48 >> 2] = 0;
  HEAP32[$5 + 32 >> 2] = 0;
  HEAPF32[$5 + 52 >> 2] = -$8;
  HEAPF32[$5 + 44 >> 2] = -$15;
  HEAPF32[$5 + 40 >> 2] = -$13;
  HEAPF32[$5 + 36 >> 2] = -$14;
  $9 = Math_fround($9 - Math_fround($14 * $8));
  $10 = Math_fround($10 - Math_fround($8 * $13));
  $8 = Math_fround($11 - Math_fround($8 * $15));
  HEAPF32[$5 + 28 >> 2] = $25 + Math_fround(Math_fround(Math_fround($26 * $9) + Math_fround($27 * $10)) + Math_fround($24 * $8));
  HEAPF32[$5 + 24 >> 2] = $20 + Math_fround(Math_fround(Math_fround($9 * $22) + Math_fround($10 * $23)) + Math_fround($8 * $21));
  HEAPF32[$5 + 20 >> 2] = $16 + Math_fround(Math_fround(Math_fround($9 * $18) + Math_fround($10 * $19)) + Math_fround($8 * $17));
 }
 $0 = $7 + 19040 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $12;
}
function btContinuousConvexCollision__computeClosestPoints_28btTransform_20const__2c_20btTransform_20const__2c_20btPointCollector__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0, $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = 0, $48 = 0, $49 = Math_fround(0), $50 = Math_fround(0), $51 = Math_fround(0), $52 = Math_fround(0);
 $4 = global$0 - 240 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 label$2 : {
  if (HEAP32[$0 + 16 >> 2]) {
   btVoronoiSimplexSolver__reset_28_29(HEAP32[$0 + 4 >> 2]);
   $19 = HEAP32[$0 + 16 >> 2];
   $5 = HEAP32[$0 + 12 >> 2];
   $6 = $5;
   $47 = HEAP32[$5 + 4 >> 2];
   $48 = HEAP32[$19 + 4 >> 2];
   $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 48 >> 2]]($5));
   $5 = HEAP32[$0 + 16 >> 2];
   $0 = btGjkPairDetector__btGjkPairDetector_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20int_2c_20int_2c_20float_2c_20float_2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($4 + 160 | 0, $6, $19, $47, $48, $7, Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 48 >> 2]]($5)), HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2]);
   HEAP32[$4 + 152 >> 2] = 1566444395;
   $6 = HEAP32[$1 + 8 >> 2];
   $5 = HEAP32[$1 + 12 >> 2];
   HEAP32[$4 + 32 >> 2] = $6;
   HEAP32[$4 + 36 >> 2] = $5;
   $6 = HEAP32[$1 + 4 >> 2];
   $5 = HEAP32[$1 >> 2];
   HEAP32[$4 + 24 >> 2] = $5;
   HEAP32[$4 + 28 >> 2] = $6;
   $5 = HEAP32[$1 + 28 >> 2];
   $6 = HEAP32[$1 + 24 >> 2];
   HEAP32[$4 + 48 >> 2] = $6;
   HEAP32[$4 + 52 >> 2] = $5;
   $6 = HEAP32[$1 + 20 >> 2];
   $5 = HEAP32[$1 + 16 >> 2];
   HEAP32[$4 + 40 >> 2] = $5;
   HEAP32[$4 + 44 >> 2] = $6;
   $5 = HEAP32[$1 + 44 >> 2];
   $6 = HEAP32[$1 + 40 >> 2];
   $19 = $6;
   $6 = $4 - -64 | 0;
   HEAP32[$6 >> 2] = $19;
   HEAP32[$6 + 4 >> 2] = $5;
   $6 = HEAP32[$1 + 36 >> 2];
   $5 = HEAP32[$1 + 32 >> 2];
   HEAP32[$4 + 56 >> 2] = $5;
   HEAP32[$4 + 60 >> 2] = $6;
   $5 = HEAP32[$1 + 60 >> 2];
   $6 = HEAP32[$1 + 56 >> 2];
   HEAP32[$4 + 80 >> 2] = $6;
   HEAP32[$4 + 84 >> 2] = $5;
   $6 = HEAP32[$1 + 52 >> 2];
   $5 = HEAP32[$1 + 48 >> 2];
   HEAP32[$4 + 72 >> 2] = $5;
   HEAP32[$4 + 76 >> 2] = $6;
   $1 = $2;
   $6 = HEAP32[$1 + 8 >> 2];
   $5 = HEAP32[$1 + 12 >> 2];
   HEAP32[$4 + 96 >> 2] = $6;
   HEAP32[$4 + 100 >> 2] = $5;
   $6 = HEAP32[$1 + 4 >> 2];
   $5 = HEAP32[$1 >> 2];
   HEAP32[$4 + 88 >> 2] = $5;
   HEAP32[$4 + 92 >> 2] = $6;
   $5 = HEAP32[$1 + 20 >> 2];
   $6 = HEAP32[$1 + 16 >> 2];
   HEAP32[$4 + 104 >> 2] = $6;
   HEAP32[$4 + 108 >> 2] = $5;
   $6 = HEAP32[$1 + 28 >> 2];
   $5 = HEAP32[$1 + 24 >> 2];
   HEAP32[$4 + 112 >> 2] = $5;
   HEAP32[$4 + 116 >> 2] = $6;
   $5 = HEAP32[$1 + 44 >> 2];
   $6 = HEAP32[$1 + 40 >> 2];
   HEAP32[$4 + 128 >> 2] = $6;
   HEAP32[$4 + 132 >> 2] = $5;
   $6 = HEAP32[$1 + 36 >> 2];
   $5 = HEAP32[$1 + 32 >> 2];
   HEAP32[$4 + 120 >> 2] = $5;
   HEAP32[$4 + 124 >> 2] = $6;
   $5 = HEAP32[$1 + 52 >> 2];
   $6 = HEAP32[$1 + 48 >> 2];
   HEAP32[$4 + 136 >> 2] = $6;
   HEAP32[$4 + 140 >> 2] = $5;
   $6 = HEAP32[$1 + 60 >> 2];
   $5 = HEAP32[$1 + 56 >> 2];
   HEAP32[$4 + 144 >> 2] = $5;
   HEAP32[$4 + 148 >> 2] = $6;
   btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($0, $4 + 24 | 0, $3, 0, 0);
   break label$2;
  }
  $19 = $2 + 52 | 0;
  $25 = HEAPF32[$19 >> 2];
  $30 = HEAPF32[$2 + 56 >> 2];
  $31 = HEAPF32[$1 + 52 >> 2];
  $32 = HEAPF32[$1 + 56 >> 2];
  $10 = HEAPF32[$1 + 20 >> 2];
  $11 = HEAPF32[$1 + 36 >> 2];
  $9 = HEAPF32[$2 + 20 >> 2];
  $12 = HEAPF32[$2 + 36 >> 2];
  $7 = HEAPF32[$2 + 24 >> 2];
  $13 = HEAPF32[$1 + 24 >> 2];
  $8 = HEAPF32[$2 + 40 >> 2];
  $16 = HEAPF32[$1 + 40 >> 2];
  $33 = HEAPF32[$2 + 48 >> 2];
  $34 = HEAPF32[$1 + 48 >> 2];
  $5 = HEAP32[$0 + 12 >> 2];
  $17 = HEAPF32[$1 + 32 >> 2];
  $18 = HEAPF32[$1 >> 2];
  $20 = HEAPF32[$1 + 16 >> 2];
  $21 = HEAPF32[$1 + 4 >> 2];
  $14 = HEAPF32[$2 + 32 >> 2];
  $26 = HEAPF32[$2 + 16 >> 2];
  $27 = HEAPF32[$2 >> 2];
  $28 = HEAPF32[$2 + 4 >> 2];
  $29 = HEAPF32[$2 + 8 >> 2];
  $22 = HEAPF32[$1 + 8 >> 2];
  $1 = HEAP32[$0 + 20 >> 2];
  $0 = $1 + 56 | 0;
  $15 = HEAPF32[$0 >> 2];
  $23 = HEAPF32[$1 + 60 >> 2];
  $24 = HEAPF32[$1 + 52 >> 2];
  HEAP32[$4 + 172 >> 2] = 0;
  $35 = Math_fround(Math_fround(Math_fround($22 * $28) + Math_fround($13 * $9)) + Math_fround($16 * $12));
  $15 = Math_fround(-$15);
  $36 = Math_fround(Math_fround(Math_fround($22 * $27) + Math_fround($13 * $26)) + Math_fround($16 * $14));
  $37 = Math_fround(Math_fround(Math_fround($22 * $29) + Math_fround($13 * $7)) + Math_fround($16 * $8));
  HEAPF32[$4 + 168 >> 2] = Math_fround(Math_fround($35 * $15) - Math_fround($24 * $36)) - Math_fround($23 * $37);
  $38 = Math_fround(Math_fround(Math_fround($21 * $28) + Math_fround($10 * $9)) + Math_fround($11 * $12));
  $39 = Math_fround(Math_fround(Math_fround($21 * $27) + Math_fround($10 * $26)) + Math_fround($11 * $14));
  $40 = Math_fround(Math_fround(Math_fround($21 * $29) + Math_fround($10 * $7)) + Math_fround($11 * $8));
  HEAPF32[$4 + 164 >> 2] = Math_fround(Math_fround($38 * $15) - Math_fround($24 * $39)) - Math_fround($23 * $40);
  $41 = Math_fround(Math_fround(Math_fround($18 * $28) + Math_fround($20 * $9)) + Math_fround($17 * $12));
  $42 = Math_fround(Math_fround(Math_fround($18 * $27) + Math_fround($20 * $26)) + Math_fround($17 * $14));
  $43 = Math_fround(Math_fround(Math_fround($18 * $29) + Math_fround($20 * $7)) + Math_fround($17 * $8));
  HEAPF32[$4 + 160 >> 2] = Math_fround(Math_fround($41 * $15) - Math_fround($24 * $42)) - Math_fround($23 * $43);
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 64 >> 2]]($4 + 24 | 0, $5, $4 + 160 | 0);
  $10 = HEAPF32[$1 + 56 >> 2];
  $11 = HEAPF32[$1 + 60 >> 2];
  $49 = HEAPF32[$1 + 68 >> 2];
  $13 = HEAPF32[$1 + 52 >> 2];
  $16 = HEAPF32[$4 + 24 >> 2];
  $17 = HEAPF32[$4 + 28 >> 2];
  $18 = HEAPF32[$4 + 32 >> 2];
  $50 = HEAPF32[$2 + 52 >> 2];
  $20 = HEAPF32[$2 + 24 >> 2];
  $21 = HEAPF32[$2 + 20 >> 2];
  $51 = HEAPF32[$2 + 56 >> 2];
  $22 = HEAPF32[$2 + 40 >> 2];
  $23 = HEAPF32[$2 + 36 >> 2];
  $52 = HEAPF32[$2 + 48 >> 2];
  $24 = HEAPF32[$2 + 8 >> 2];
  $15 = HEAPF32[$2 >> 2];
  $44 = HEAPF32[$2 + 4 >> 2];
  $45 = HEAPF32[$2 + 16 >> 2];
  $46 = HEAPF32[$2 + 32 >> 2];
  HEAP32[$4 + 172 >> 2] = 0;
  $25 = Math_fround(-$25);
  $14 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($34 * $27) + Math_fround($31 * $26)) + Math_fround($32 * $14)) + Math_fround(Math_fround(Math_fround($26 * $25) - Math_fround($27 * $33)) - Math_fround($14 * $30))) + Math_fround(Math_fround(Math_fround($42 * $16) + Math_fround($39 * $17)) + Math_fround($36 * $18)));
  $8 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($34 * $29) + Math_fround($31 * $7)) + Math_fround($32 * $8)) + Math_fround(Math_fround(Math_fround($7 * $25) - Math_fround($29 * $33)) - Math_fround($8 * $30))) + Math_fround(Math_fround(Math_fround($43 * $16) + Math_fround($40 * $17)) + Math_fround($37 * $18)));
  $7 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($34 * $28) + Math_fround($31 * $9)) + Math_fround($32 * $12)) + Math_fround(Math_fround(Math_fround($9 * $25) - Math_fround($28 * $33)) - Math_fround($12 * $30))) + Math_fround(Math_fround(Math_fround($41 * $16) + Math_fround($38 * $17)) + Math_fround($35 * $18)));
  $9 = Math_fround(Math_fround(Math_fround($11 * $8) + Math_fround(Math_fround($13 * $14) + Math_fround($10 * $7))) - $49);
  $12 = Math_fround($14 - Math_fround($13 * $9));
  $7 = Math_fround($7 - Math_fround($10 * $9));
  $8 = Math_fround($8 - Math_fround($11 * $9));
  HEAPF32[$4 + 168 >> 2] = $51 + Math_fround(Math_fround(Math_fround($46 * $12) + Math_fround($23 * $7)) + Math_fround($22 * $8));
  HEAPF32[$4 + 164 >> 2] = $50 + Math_fround(Math_fround(Math_fround($12 * $45) + Math_fround($7 * $21)) + Math_fround($8 * $20));
  HEAPF32[$4 + 160 >> 2] = $52 + Math_fround(Math_fround($24 * $8) + Math_fround(Math_fround($15 * $12) + Math_fround($44 * $7)));
  HEAP32[$4 + 20 >> 2] = 0;
  HEAPF32[$4 + 16 >> 2] = Math_fround(Math_fround($13 * $46) + Math_fround($10 * $23)) + Math_fround($11 * $22);
  HEAPF32[$4 + 12 >> 2] = Math_fround(Math_fround($13 * $45) + Math_fround($10 * $21)) + Math_fround($11 * $20);
  HEAPF32[$4 + 8 >> 2] = Math_fround(Math_fround($15 * $13) + Math_fround($44 * $10)) + Math_fround($24 * $11);
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $4 + 8 | 0, $4 + 160 | 0, $9);
 }
 $0 = $4 + 240 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexHullInternal__DMul_btConvexHullInternal__Int128_2c_20unsigned_20long_20long___mul_28btConvexHullInternal__Int128_2c_20btConvexHullInternal__Int128_2c_20btConvexHullInternal__Int128__2c_20btConvexHullInternal__Int128__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 $4 = $0;
 $5 = HEAP32[$4 + 8 >> 2];
 $26 = $5;
 $6 = HEAP32[$4 + 12 >> 2];
 $27 = $6;
 $4 = $1;
 $6 = HEAP32[$4 + 8 >> 2];
 $23 = $6;
 $5 = HEAP32[$4 + 12 >> 2];
 $14 = $5;
 $24 = $2;
 $6 = HEAP32[$4 + 4 >> 2];
 $12 = $6;
 $5 = HEAP32[$4 >> 2];
 $13 = $5;
 $15 = $6;
 $5 = 0;
 $18 = $5;
 $6 = $0;
 $5 = HEAP32[$6 >> 2];
 $8 = $5;
 $4 = HEAP32[$6 + 4 >> 2];
 $10 = $4;
 $5 = 0;
 $16 = $5;
 $5 = $18;
 $6 = $8;
 $17 = $6;
 $6 = $16;
 $6 = __wasm_i64_mul($12, $5, $8, $6);
 $9 = $6;
 $5 = i64toi32_i32$HIGH_BITS;
 $11 = $5;
 $6 = 0;
 $7 = $6;
 $5 = $13;
 $13 = $5;
 $4 = 0;
 $12 = $4;
 $4 = $10;
 $8 = $4;
 $5 = 0;
 $10 = $5;
 $6 = __wasm_i64_mul($13, $19, $4, $5);
 $29 = $6;
 $5 = i64toi32_i32$HIGH_BITS;
 $19 = $5;
 $6 = 0;
 $22 = $6;
 $5 = $9;
 $4 = $29;
 $1 = $4;
 $0 = $5 + $4 | 0;
 $6 = $7;
 $4 = $22;
 $7 = $6 + $4 | 0;
 $7 = $0 >>> 0 < $1 >>> 0 ? $7 + 1 | 0 : $7;
 $30 = $7;
 $22 = $0;
 $5 = $12;
 $6 = $16;
 $6 = __wasm_i64_mul($13, $5, $17, $6);
 $1 = $6;
 $5 = i64toi32_i32$HIGH_BITS;
 $6 = $5;
 $0 = $0 + $6 | 0;
 $7 = $25;
 $4 = $1 + $7 | 0;
 if ($4 >>> 0 < $1 >>> 0) {
  $0 = $0 + 1 | 0;
 }
 $7 = $24;
 HEAP32[$7 >> 2] = $4;
 HEAP32[$7 + 4 >> 2] = $0;
 $32 = $2;
 $7 = $22;
 $1 = $20;
 $9 = ($0 | 0) == ($7 | 0) & $4 >>> 0 < $1 >>> 0 | $0 >>> 0 < $7 >>> 0;
 $5 = $10;
 $0 = $18;
 $0 = __wasm_i64_mul($8, $5, $15, $0);
 $2 = $0;
 $5 = i64toi32_i32$HIGH_BITS;
 $0 = 0;
 $1 = $0;
 $0 = $5;
 $4 = $1 + $0 | 0;
 $5 = $2;
 $7 = $11;
 $6 = $5 + $7 | 0;
 if ($6 >>> 0 < $7 >>> 0) {
  $4 = $4 + 1 | 0;
 }
 $1 = $6;
 $5 = 0;
 $0 = $5;
 $5 = $4;
 $6 = $5 + $0 | 0;
 $4 = $1;
 $7 = $19;
 $1 = $4 + $7 | 0;
 if ($1 >>> 0 < $7 >>> 0) {
  $6 = $6 + 1 | 0;
 }
 $0 = $1;
 $4 = 0;
 $5 = $4;
 $4 = $6;
 $1 = $5 + $4 | 0;
 $6 = $0;
 $7 = $30;
 $0 = $6 + $7 | 0;
 if ($0 >>> 0 < $7 >>> 0) {
  $1 = $1 + 1 | 0;
 }
 $7 = $0;
 $6 = $1;
 $0 = $6;
 $4 = $9;
 $5 = $4 + $7 | 0;
 if ($5 >>> 0 < $7 >>> 0) {
  $0 = $0 + 1 | 0;
 }
 $2 = $5;
 $30 = $0;
 $33 = $5;
 $34 = $0;
 $0 = $27;
 $1 = $26;
 $9 = $1;
 $4 = 0;
 $11 = $4;
 $1 = $18;
 $1 = __wasm_i64_mul($9, $4, $15, $1);
 $20 = $1;
 $4 = i64toi32_i32$HIGH_BITS;
 $22 = $4;
 $1 = 0;
 $5 = $1;
 $1 = $0;
 $26 = $0;
 $0 = 0;
 $27 = $0;
 $4 = $12;
 $4 = __wasm_i64_mul($1, $0, $13, $4);
 $1 = $4;
 $0 = i64toi32_i32$HIGH_BITS;
 $24 = $0;
 $4 = 0;
 $19 = $4;
 $0 = $20;
 $7 = $1;
 $6 = $0 + $7 | 0;
 $4 = $5;
 $1 = $19;
 $5 = $4 + $1 | 0;
 $5 = $6 >>> 0 < $7 >>> 0 ? $5 + 1 | 0 : $5;
 $25 = $5;
 $4 = $6;
 $0 = $4;
 $35 = $0;
 $0 = $12;
 $4 = $11;
 $4 = __wasm_i64_mul($13, $0, $9, $4);
 $7 = $4;
 $0 = i64toi32_i32$HIGH_BITS;
 $4 = $0;
 $0 = $6;
 $6 = $4 + $0 | 0;
 $5 = $21;
 $1 = $5 + $7 | 0;
 if ($1 >>> 0 < $7 >>> 0) {
  $6 = $6 + 1 | 0;
 }
 $29 = $1;
 $19 = $6;
 $20 = $1;
 $31 = $6;
 $6 = $14;
 $13 = $6;
 $5 = 0;
 $12 = $5;
 $0 = $16;
 $0 = __wasm_i64_mul($6, $5, $17, $0);
 $21 = $0;
 $5 = i64toi32_i32$HIGH_BITS;
 $36 = $5;
 $0 = 0;
 $1 = $0;
 $5 = $23;
 $23 = $5;
 $6 = 0;
 $14 = $6;
 $5 = $10;
 $5 = __wasm_i64_mul($23, $6, $8, $5);
 $0 = $5;
 $6 = i64toi32_i32$HIGH_BITS;
 $38 = $6;
 $5 = 0;
 $28 = $5;
 $6 = $21;
 $7 = $0;
 $4 = $6 + $0 | 0;
 $5 = $1;
 $0 = $28;
 $1 = $5 + $0 | 0;
 $1 = $4 >>> 0 < $7 >>> 0 ? $1 + 1 | 0 : $1;
 $21 = $1;
 $28 = $4;
 $6 = $14;
 $5 = $16;
 $5 = __wasm_i64_mul($23, $6, $17, $5);
 $7 = $5;
 $6 = i64toi32_i32$HIGH_BITS;
 $5 = $6;
 $4 = $5 + $4 | 0;
 $1 = $37;
 $0 = $1 + $7 | 0;
 if ($0 >>> 0 < $7 >>> 0) {
  $4 = $4 + 1 | 0;
 }
 $16 = $0;
 $17 = $4;
 $4 = $31;
 $1 = $17;
 $0 = $4 + $1 | 0;
 $6 = $20;
 $7 = $16;
 $5 = $6 + $7 | 0;
 if ($5 >>> 0 < $7 >>> 0) {
  $0 = $0 + 1 | 0;
 }
 $31 = $5;
 $37 = $0;
 $6 = $0;
 $0 = $34;
 $5 = $6 + $0 | 0;
 $4 = $33;
 $7 = $31;
 $1 = $4 + $7 | 0;
 if ($1 >>> 0 < $7 >>> 0) {
  $5 = $5 + 1 | 0;
 }
 $33 = $1;
 $34 = $5;
 $4 = $32;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 12 >> 2] = $5;
 $32 = $3;
 $5 = $19;
 $4 = $35;
 $0 = $29;
 $7 = $39;
 $20 = ($5 | 0) == ($4 | 0) & $0 >>> 0 < $7 >>> 0 | $5 >>> 0 < $4 >>> 0;
 $0 = $18;
 $5 = $27;
 $5 = __wasm_i64_mul($15, $0, $26, $5);
 $6 = $5;
 $5 = 0;
 $0 = i64toi32_i32$HIGH_BITS;
 $7 = $5;
 $1 = $0 + $7 | 0;
 $0 = $22;
 $4 = $0;
 $0 = $6;
 $6 = $4 + $0 | 0;
 if ($6 >>> 0 < $4 >>> 0) {
  $1 = $1 + 1 | 0;
 }
 $7 = $6;
 $0 = 0;
 $5 = $0;
 $0 = $1;
 $6 = $5 + $0 | 0;
 $1 = $24;
 $4 = $1;
 $1 = $7;
 $7 = $4 + $1 | 0;
 if ($7 >>> 0 < $4 >>> 0) {
  $6 = $6 + 1 | 0;
 }
 $5 = $7;
 $1 = 0;
 $0 = $1;
 $1 = $6;
 $7 = $1 + $0 | 0;
 $6 = $5;
 $4 = $25;
 $5 = $6 + $4 | 0;
 if ($5 >>> 0 < $4 >>> 0) {
  $7 = $7 + 1 | 0;
 }
 $4 = $5;
 $6 = $7;
 $5 = $6;
 $1 = $20;
 $0 = $4 + $1 | 0;
 if ($0 >>> 0 < $4 >>> 0) {
  $5 = $5 + 1 | 0;
 }
 $20 = $0;
 $22 = $5;
 $18 = $0;
 $15 = $5;
 $5 = $17;
 $1 = $28;
 $7 = $16;
 $4 = $40;
 $28 = ($5 | 0) == ($1 | 0) & $7 >>> 0 < $4 >>> 0 | $5 >>> 0 < $1 >>> 0;
 $7 = $12;
 $5 = $10;
 $5 = __wasm_i64_mul($13, $7, $8, $5);
 $6 = $5;
 $5 = 0;
 $4 = $5;
 $7 = i64toi32_i32$HIGH_BITS;
 $5 = $7;
 $0 = $5 + $4 | 0;
 $7 = $36;
 $1 = $7;
 $7 = $6;
 $6 = $1 + $7 | 0;
 if ($6 >>> 0 < $1 >>> 0) {
  $0 = $0 + 1 | 0;
 }
 $4 = $6;
 $7 = 0;
 $5 = $7;
 $6 = $5 + $0 | 0;
 $0 = $38;
 $1 = $0;
 $0 = $4;
 $4 = $1 + $0 | 0;
 if ($4 >>> 0 < $1 >>> 0) {
  $6 = $6 + 1 | 0;
 }
 $1 = $4;
 $0 = 0;
 $7 = $0;
 $0 = $6;
 $4 = $0 + $7 | 0;
 $6 = $1;
 $1 = $21;
 $5 = $6 + $1 | 0;
 if ($5 >>> 0 < $1 >>> 0) {
  $4 = $4 + 1 | 0;
 }
 $10 = $5;
 $8 = $4;
 $4 = $12;
 $6 = $11;
 $6 = __wasm_i64_mul($13, $4, $9, $6);
 $1 = $6;
 $4 = i64toi32_i32$HIGH_BITS;
 $24 = $4;
 $6 = 0;
 $5 = $6;
 $6 = $14;
 $0 = $27;
 $0 = __wasm_i64_mul($23, $6, $26, $0);
 $6 = i64toi32_i32$HIGH_BITS;
 $25 = $6;
 $6 = $1;
 $1 = $0;
 $7 = $6 + $0 | 0;
 $0 = 0;
 $4 = $0;
 $0 = $5;
 $5 = $4 + $0 | 0;
 $5 = $7 >>> 0 < $1 >>> 0 ? $5 + 1 | 0 : $5;
 $35 = $5;
 $0 = $7;
 $36 = $0;
 $21 = 0;
 $6 = $14;
 $0 = $11;
 $0 = __wasm_i64_mul($23, $6, $9, $0);
 $1 = $0;
 $6 = i64toi32_i32$HIGH_BITS;
 $0 = $6;
 $6 = $7;
 $7 = $6 + $0 | 0;
 $5 = $21;
 $4 = $5 + $1 | 0;
 if ($4 >>> 0 < $1 >>> 0) {
  $7 = $7 + 1 | 0;
 }
 $17 = $4;
 $16 = $7;
 $5 = $7;
 $7 = $8;
 $4 = $5 + $7 | 0;
 $6 = $10;
 $1 = $17;
 $0 = $6 + $1 | 0;
 if ($0 >>> 0 < $1 >>> 0) {
  $4 = $4 + 1 | 0;
 }
 $1 = $0;
 $0 = $4;
 $7 = $28;
 $5 = $1 + $7 | 0;
 if ($5 >>> 0 < $1 >>> 0) {
  $0 = $0 + 1 | 0;
 }
 $9 = $5;
 $11 = $0;
 $0 = $15;
 $7 = $11;
 $5 = $0 + $7 | 0;
 $4 = $18;
 $1 = $9;
 $6 = $4 + $1 | 0;
 if ($6 >>> 0 < $1 >>> 0) {
  $5 = $5 + 1 | 0;
 }
 $8 = $6;
 $10 = $5;
 $5 = $37;
 $4 = $19;
 $0 = $31;
 $1 = $29;
 $4 = ($5 | 0) == ($4 | 0) & $0 >>> 0 < $1 >>> 0 | $5 >>> 0 < $4 >>> 0;
 $0 = $10;
 $6 = $0;
 $1 = $8;
 $7 = $4 + $1 | 0;
 if ($7 >>> 0 < $4 >>> 0) {
  $6 = $6 + 1 | 0;
 }
 $15 = $7;
 $18 = $6;
 $7 = $6;
 $0 = $15;
 $5 = $0 + 1 | 0;
 if ($5 >>> 0 < 1) {
  $7 = $7 + 1 | 0;
 }
 $14 = $7;
 $0 = $30;
 $7 = $34;
 $6 = $33;
 $4 = $2;
 $2 = ($0 | 0) == ($7 | 0) & $6 >>> 0 < $4 >>> 0 | $7 >>> 0 < $0 >>> 0;
 $1 = $2;
 $0 = $1 ? $5 : $15;
 $6 = $0;
 $0 = $32;
 HEAP32[$0 >> 2] = $6;
 $6 = $14;
 $7 = $18;
 $4 = $1 ? $6 : $7;
 HEAP32[$0 + 4 >> 2] = $4;
 $4 = $6;
 $0 = $7;
 $6 = $15;
 $14 = (($4 | 0) == ($0 | 0) & $5 >>> 0 < $6 >>> 0 | $4 >>> 0 < $0 >>> 0) & $2;
 $4 = $10;
 $0 = $8;
 $10 = ($4 | 0) == ($7 | 0) & $6 >>> 0 < $0 >>> 0 | $7 >>> 0 < $4 >>> 0;
 $6 = $4;
 $1 = $22;
 $4 = $20;
 $8 = ($6 | 0) == ($1 | 0) & $0 >>> 0 < $4 >>> 0 | $6 >>> 0 < $1 >>> 0;
 $6 = $16;
 $0 = $11;
 $4 = $9;
 $1 = $17;
 $11 = ($6 | 0) == ($0 | 0) & $4 >>> 0 < $1 >>> 0 | $0 >>> 0 < $6 >>> 0;
 $4 = $6;
 $0 = $36;
 $6 = $21;
 $9 = ($4 | 0) == ($0 | 0) & $1 >>> 0 < $6 >>> 0 | $4 >>> 0 < $0 >>> 0;
 $1 = $12;
 $4 = $27;
 $4 = __wasm_i64_mul($13, $1, $26, $4);
 $0 = $4;
 $1 = i64toi32_i32$HIGH_BITS;
 $4 = 0;
 $6 = $4;
 $4 = $1;
 $5 = $6 + $4 | 0;
 $1 = $0;
 $0 = $24;
 $7 = $1 + $0 | 0;
 if ($7 >>> 0 < $0 >>> 0) {
  $5 = $5 + 1 | 0;
 }
 $0 = $7;
 $1 = 0;
 $4 = $1;
 $1 = $5;
 $7 = $4 + $1 | 0;
 $5 = $0;
 $0 = $25;
 $6 = $5 + $0 | 0;
 if ($6 >>> 0 < $0 >>> 0) {
  $7 = $7 + 1 | 0;
 }
 $2 = $6;
 $5 = 0;
 $1 = $5;
 $5 = $7;
 $6 = $5 + $1 | 0;
 $7 = $35;
 $0 = $7;
 $7 = $2;
 $4 = $0 + $7 | 0;
 if ($4 >>> 0 < $0 >>> 0) {
  $6 = $6 + 1 | 0;
 }
 $0 = $4;
 $4 = $6;
 $5 = $9;
 $1 = $5 + $0 | 0;
 if ($1 >>> 0 < $0 >>> 0) {
  $4 = $4 + 1 | 0;
 }
 $0 = $1;
 $1 = $4;
 $6 = $11;
 $7 = $6 + $0 | 0;
 if ($7 >>> 0 < $0 >>> 0) {
  $1 = $1 + 1 | 0;
 }
 $0 = $7;
 $6 = $1;
 $7 = $6;
 $4 = $8;
 $5 = $4 + $0 | 0;
 if ($5 >>> 0 < $0 >>> 0) {
  $7 = $7 + 1 | 0;
 }
 $0 = $5;
 $4 = $7;
 $5 = $4;
 $1 = $10;
 $6 = $1 + $0 | 0;
 if ($6 >>> 0 < $0 >>> 0) {
  $5 = $5 + 1 | 0;
 }
 $0 = $6;
 $6 = $5;
 $7 = $14;
 $4 = $0 + $7 | 0;
 if ($4 >>> 0 < $0 >>> 0) {
  $6 = $6 + 1 | 0;
 }
 $7 = $3;
 HEAP32[$7 + 8 >> 2] = $4;
 HEAP32[$7 + 12 >> 2] = $6;
}
function btSequentialImpulseConstraintSolver__solveGroupCacheFriendlyFinish_28btCollisionObject___2c_20int_2c_20btContactSolverInfo_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = 0;
 $2 = HEAP32[$3 + 72 >> 2];
 label$1 : {
  if (!($2 & 4)) {
   break label$1;
  }
  $7 = HEAP32[$0 + 28 >> 2];
  if (($7 | 0) < 1) {
   break label$1;
  }
  $1 = $2 & 16;
  $5 = HEAP32[$0 + 76 >> 2];
  $14 = HEAP32[$0 + 36 >> 2];
  $2 = 0;
  while (1) {
   $4 = Math_imul($2, 152) + $14 | 0;
   $9 = HEAP32[$4 + 132 >> 2];
   HEAP32[$9 + 132 >> 2] = HEAP32[$4 + 100 >> 2];
   $4 = Math_imul(HEAP32[$4 + 140 >> 2], 152) + $5 | 0;
   HEAP32[$9 + 136 >> 2] = HEAP32[$4 + 100 >> 2];
   if ($1) {
    HEAP32[$9 + 140 >> 2] = HEAP32[$4 + 252 >> 2];
   }
   $2 = $2 + 1 | 0;
   if (($7 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 $15 = HEAP32[$0 + 48 >> 2];
 if (($15 | 0) >= 1) {
  $16 = HEAP32[$0 + 56 >> 2];
  $5 = 0;
  while (1) {
   $4 = Math_imul($5, 152) + $16 | 0;
   $9 = HEAP32[$4 + 132 >> 2];
   $2 = HEAP32[$9 + 44 >> 2];
   if ($2) {
    $7 = HEAP32[$9 + 28 >> 2];
    $13 = HEAPF32[$7 + 416 >> 2];
    $10 = HEAPF32[$4 + 24 >> 2];
    $11 = HEAPF32[$7 + 412 >> 2];
    $12 = HEAPF32[$4 + 20 >> 2];
    $6 = HEAPF32[$4 + 100 >> 2];
    $8 = Math_fround(Math_fround(1) / HEAPF32[$3 + 12 >> 2]);
    HEAPF32[$2 >> 2] = HEAPF32[$2 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$4 + 16 >> 2] * $6) * HEAPF32[$7 + 408 >> 2]) * $8);
    HEAPF32[$2 + 4 >> 2] = Math_fround(Math_fround($11 * Math_fround($6 * $12)) * $8) + HEAPF32[$2 + 4 >> 2];
    HEAPF32[$2 + 8 >> 2] = Math_fround(Math_fround($13 * Math_fround($6 * $10)) * $8) + HEAPF32[$2 + 8 >> 2];
    $1 = HEAP32[$9 + 32 >> 2];
    $13 = HEAPF32[$1 + 416 >> 2];
    $10 = HEAPF32[$4 + 56 >> 2];
    $11 = HEAPF32[$1 + 412 >> 2];
    $12 = HEAPF32[$4 + 52 >> 2];
    $6 = HEAPF32[$4 + 100 >> 2];
    $8 = Math_fround(Math_fround(1) / HEAPF32[$3 + 12 >> 2]);
    HEAPF32[$2 + 32 >> 2] = HEAPF32[$2 + 32 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$4 + 48 >> 2] * $6) * HEAPF32[$1 + 408 >> 2]) * $8);
    $14 = $2 + 36 | 0;
    HEAPF32[$14 >> 2] = Math_fround(Math_fround($11 * Math_fround($6 * $12)) * $8) + HEAPF32[$2 + 36 >> 2];
    $14 = $2 + 40 | 0;
    HEAPF32[$14 >> 2] = Math_fround(Math_fround($13 * Math_fround($6 * $10)) * $8) + HEAPF32[$2 + 40 >> 2];
    $13 = HEAPF32[$7 + 612 >> 2];
    $10 = HEAPF32[$4 + 8 >> 2];
    $11 = HEAPF32[$7 + 608 >> 2];
    $12 = HEAPF32[$4 + 4 >> 2];
    $6 = HEAPF32[$4 + 100 >> 2];
    $8 = Math_fround(Math_fround(1) / HEAPF32[$3 + 12 >> 2]);
    HEAPF32[$2 + 16 >> 2] = HEAPF32[$2 + 16 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$4 >> 2] * HEAPF32[$7 + 604 >> 2]) * $6) * $8);
    $7 = $2 + 20 | 0;
    HEAPF32[$7 >> 2] = Math_fround(Math_fround($6 * Math_fround($12 * $11)) * $8) + HEAPF32[$2 + 20 >> 2];
    $7 = $2 + 24 | 0;
    HEAPF32[$7 >> 2] = Math_fround(Math_fround($6 * Math_fround($10 * $13)) * $8) + HEAPF32[$2 + 24 >> 2];
    $13 = HEAPF32[$1 + 612 >> 2];
    $10 = HEAPF32[$4 + 40 >> 2];
    $11 = HEAPF32[$1 + 608 >> 2];
    $12 = HEAPF32[$4 + 36 >> 2];
    $6 = HEAPF32[$4 + 100 >> 2];
    $8 = Math_fround(Math_fround(1) / HEAPF32[$3 + 12 >> 2]);
    HEAPF32[$2 + 48 >> 2] = HEAPF32[$2 + 48 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$4 + 32 >> 2] * HEAPF32[$1 + 604 >> 2]) * $6) * $8);
    $7 = $2 + 52 | 0;
    HEAPF32[$7 >> 2] = Math_fround(Math_fround($6 * Math_fround($12 * $11)) * $8) + HEAPF32[$2 + 52 >> 2];
    $1 = $2;
    $2 = $2 + 56 | 0;
    HEAPF32[$2 >> 2] = Math_fround(Math_fround($6 * Math_fround($10 * $13)) * $8) + HEAPF32[$1 + 56 >> 2];
   }
   $6 = HEAPF32[$4 + 100 >> 2];
   HEAPF32[$9 + 36 >> 2] = $6;
   if (!!(Math_fround(Math_abs($6)) >= HEAPF32[$9 + 16 >> 2])) {
    HEAP8[$9 + 20 | 0] = 0;
   }
   $5 = $5 + 1 | 0;
   if (($15 | 0) != ($5 | 0)) {
    continue;
   }
   break;
  }
 }
 $5 = HEAP32[$0 + 8 >> 2];
 if (($5 | 0) >= 1) {
  $1 = HEAP32[$0 + 16 >> 2];
  $7 = 0;
  while (1) {
   $9 = Math_imul($7, 244);
   $4 = $1 + $9 | 0;
   $2 = HEAP32[$4 + 240 >> 2];
   if ($2) {
    label$11 : {
     if (HEAP32[$3 + 52 >> 2]) {
      btSolverBody__writebackVelocityAndTransform_28float_2c_20float_29($4, HEAPF32[$3 + 12 >> 2], HEAPF32[$3 + 60 >> 2]);
      $1 = HEAP32[$0 + 16 >> 2];
      $4 = $1 + $9 | 0;
      $10 = HEAPF32[$4 + 176 >> 2];
      $2 = HEAP32[$4 + 240 >> 2];
      $11 = HEAPF32[$4 + 184 >> 2];
      $12 = HEAPF32[$4 + 180 >> 2];
      break label$11;
     }
     $10 = Math_fround(HEAPF32[$4 + 64 >> 2] + HEAPF32[$4 + 176 >> 2]);
     HEAPF32[$4 + 176 >> 2] = $10;
     HEAPF32[$4 + 192 >> 2] = HEAPF32[$4 + 80 >> 2] + HEAPF32[$4 + 192 >> 2];
     $5 = $4 + 180 | 0;
     $12 = Math_fround(HEAPF32[$4 + 68 >> 2] + HEAPF32[$4 + 180 >> 2]);
     HEAPF32[$5 >> 2] = $12;
     $5 = $4 + 184 | 0;
     $11 = Math_fround(HEAPF32[$4 + 72 >> 2] + HEAPF32[$4 + 184 >> 2]);
     HEAPF32[$5 >> 2] = $11;
     $5 = $4 + 196 | 0;
     HEAPF32[$5 >> 2] = HEAPF32[$4 + 84 >> 2] + HEAPF32[$4 + 196 >> 2];
     $5 = $4 + 200 | 0;
     HEAPF32[$5 >> 2] = HEAPF32[$4 + 88 >> 2] + HEAPF32[$4 + 200 >> 2];
    }
    $4 = $9 + $1 | 0;
    $6 = HEAPF32[$4 + 212 >> 2];
    $8 = HEAPF32[$4 + 216 >> 2];
    $13 = HEAPF32[$4 + 208 >> 2];
    HEAP32[$2 + 384 >> 2] = 0;
    HEAPF32[$2 + 372 >> 2] = $10 + $13;
    HEAP32[$2 + 304 >> 2] = HEAP32[$2 + 304 >> 2] + 1;
    HEAPF32[$2 + 380 >> 2] = $11 + $8;
    HEAPF32[$2 + 376 >> 2] = $12 + $6;
    $2 = HEAP32[$0 + 16 >> 2] + $9 | 0;
    $6 = HEAPF32[$2 + 228 >> 2];
    $8 = HEAPF32[$2 + 196 >> 2];
    $13 = HEAPF32[$2 + 232 >> 2];
    $10 = HEAPF32[$2 + 200 >> 2];
    $11 = HEAPF32[$2 + 224 >> 2];
    $12 = HEAPF32[$2 + 192 >> 2];
    $2 = HEAP32[$2 + 240 >> 2];
    HEAP32[$2 + 400 >> 2] = 0;
    HEAPF32[$2 + 388 >> 2] = $12 + $11;
    HEAPF32[$2 + 396 >> 2] = $10 + $13;
    HEAPF32[$2 + 392 >> 2] = $8 + $6;
    HEAP32[$2 + 304 >> 2] = HEAP32[$2 + 304 >> 2] + 1;
    if (HEAP32[$3 + 52 >> 2]) {
     $4 = HEAP32[$0 + 16 >> 2] + $9 | 0;
     $2 = HEAP32[$4 + 240 >> 2];
     HEAP32[$2 + 304 >> 2] = HEAP32[$2 + 304 >> 2] + 1;
     $1 = HEAP32[$4 + 12 >> 2];
     $5 = HEAP32[$4 + 8 >> 2];
     HEAP32[$2 + 12 >> 2] = $5;
     HEAP32[$2 + 16 >> 2] = $1;
     $5 = HEAP32[$4 + 4 >> 2];
     $1 = HEAP32[$4 >> 2];
     HEAP32[$2 + 4 >> 2] = $1;
     HEAP32[$2 + 8 >> 2] = $5;
     $1 = HEAP32[$4 + 28 >> 2];
     $5 = HEAP32[$4 + 24 >> 2];
     HEAP32[$2 + 28 >> 2] = $5;
     HEAP32[$2 + 32 >> 2] = $1;
     $5 = HEAP32[$4 + 20 >> 2];
     $1 = HEAP32[$4 + 16 >> 2];
     HEAP32[$2 + 20 >> 2] = $1;
     HEAP32[$2 + 24 >> 2] = $5;
     $1 = HEAP32[$4 + 36 >> 2];
     $5 = HEAP32[$4 + 32 >> 2];
     HEAP32[$2 + 36 >> 2] = $5;
     HEAP32[$2 + 40 >> 2] = $1;
     $5 = HEAP32[$4 + 44 >> 2];
     $1 = HEAP32[$4 + 40 >> 2];
     HEAP32[$2 + 44 >> 2] = $1;
     HEAP32[$2 + 48 >> 2] = $5;
     $1 = HEAP32[$4 + 60 >> 2];
     $5 = HEAP32[$4 + 56 >> 2];
     HEAP32[$2 + 60 >> 2] = $5;
     HEAP32[$2 + 64 >> 2] = $1;
     $5 = HEAP32[$4 + 52 >> 2];
     $1 = HEAP32[$4 + 48 >> 2];
     HEAP32[$2 + 52 >> 2] = $1;
     HEAP32[$2 + 56 >> 2] = $5;
    }
    $1 = HEAP32[$0 + 16 >> 2];
    HEAP32[HEAP32[($1 + $9 | 0) + 240 >> 2] + 212 >> 2] = -1;
    $5 = HEAP32[$0 + 8 >> 2];
   }
   $7 = $7 + 1 | 0;
   if (($7 | 0) < ($5 | 0)) {
    continue;
   }
   break;
  }
 }
 if (!(HEAP32[$0 + 28 >> 2] > -1 | HEAP32[$0 + 32 >> 2] > -1)) {
  $2 = HEAP32[$0 + 36 >> 2];
  if ($2) {
   if (HEAPU8[$0 + 40 | 0]) {
    btAlignedFreeInternal_28void__29($2);
   }
   HEAP32[$0 + 36 >> 2] = 0;
  }
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
 }
 HEAP32[$0 + 28 >> 2] = 0;
 if (!(HEAP32[$0 + 48 >> 2] > -1 | HEAP32[$0 + 52 >> 2] > -1)) {
  $2 = HEAP32[$0 + 56 >> 2];
  if ($2) {
   if (HEAPU8[$0 + 60 | 0]) {
    btAlignedFreeInternal_28void__29($2);
   }
   HEAP32[$0 + 56 >> 2] = 0;
  }
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
 }
 HEAP32[$0 + 48 >> 2] = 0;
 if (!(HEAP32[$0 + 68 >> 2] > -1 | HEAP32[$0 + 72 >> 2] > -1)) {
  $2 = HEAP32[$0 + 76 >> 2];
  if ($2) {
   if (HEAPU8[$0 + 80 | 0]) {
    btAlignedFreeInternal_28void__29($2);
   }
   HEAP32[$0 + 76 >> 2] = 0;
  }
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP32[$0 + 76 >> 2] = 0;
  HEAP8[$0 + 80 | 0] = 1;
 }
 HEAP32[$0 + 68 >> 2] = 0;
 if (!(HEAP32[$0 + 88 >> 2] > -1 | HEAP32[$0 + 92 >> 2] > -1)) {
  $2 = HEAP32[$0 + 96 >> 2];
  if ($2) {
   if (HEAPU8[$0 + 100 | 0]) {
    btAlignedFreeInternal_28void__29($2);
   }
   HEAP32[$0 + 96 >> 2] = 0;
  }
  HEAP32[$0 + 92 >> 2] = 0;
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP8[$0 + 100 | 0] = 1;
 }
 HEAP32[$0 + 88 >> 2] = 0;
 if (!(HEAP32[$0 + 8 >> 2] > -1 | HEAP32[$0 + 12 >> 2] > -1)) {
  $2 = HEAP32[$0 + 16 >> 2];
  if ($2) {
   if (HEAPU8[$0 + 20 | 0]) {
    btAlignedFreeInternal_28void__29($2);
   }
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
 }
 HEAP32[$0 + 8 >> 2] = 0;
 return Math_fround(Math_fround(0));
}
function powf($0, $1) {
 var $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0);
 $2 = Math_fround(1);
 label$1 : {
  label$2 : {
   $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
   label$3 : {
    if (($4 | 0) == 1065353216) {
     break label$3;
    }
    $7 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(0));
    $3 = $7 & 2147483647;
    if (!$3) {
     break label$3;
    }
    $5 = $4 & 2147483647;
    if (!($3 >>> 0 < 2139095041 ? $5 >>> 0 <= 2139095040 : 0)) {
     return Math_fround($0 + $1);
    }
    $6 = 0;
    label$5 : {
     if (($4 | 0) > -1) {
      break label$5;
     }
     $6 = 2;
     if ($3 >>> 0 > 1266679807) {
      break label$5;
     }
     $6 = 0;
     if ($3 >>> 0 < 1065353216) {
      break label$5;
     }
     $13 = 150 - ($3 >>> 23 | 0) | 0;
     $14 = $3 >>> $13 | 0;
     $6 = 0;
     if ($14 << $13 != ($3 | 0)) {
      break label$5;
     }
     $6 = 2 - ($14 & 1) | 0;
    }
    label$6 : {
     if (($3 | 0) != 1065353216) {
      if (($3 | 0) != 2139095040) {
       break label$6;
      }
      if (($5 | 0) == 1065353216) {
       break label$3;
      }
      if ($5 >>> 0 >= 1065353217) {
       return ($7 | 0) > -1 ? $1 : Math_fround(0);
      }
      return ($7 | 0) > -1 ? Math_fround(0) : Math_fround(-$1);
     }
     return ($7 | 0) > -1 ? $0 : Math_fround(Math_fround(1) / $0);
    }
    if (($7 | 0) == 1073741824) {
     return Math_fround($0 * $0);
    }
    if (!(($7 | 0) != 1056964608 | ($4 | 0) < 0)) {
     return sqrtf($0);
    }
    $2 = fabsf($0);
    if (!($5 ? ($4 & 1073741823) != 1065353216 : 0)) {
     $2 = ($7 | 0) < 0 ? Math_fround(Math_fround(1) / $2) : $2;
     if (($4 | 0) > -1) {
      break label$3;
     }
     if (!($5 + -1065353216 | $6)) {
      $0 = Math_fround($2 - $2);
      return Math_fround($0 / $0);
     }
     return ($6 | 0) == 1 ? Math_fround(-$2) : $2;
    }
    $11 = Math_fround(1);
    if (!(($4 | 0) > -1 | $6 >>> 0 > 1)) {
     if ($6 - 1) {
      $0 = Math_fround($0 - $0);
      return Math_fround($0 / $0);
     }
     $11 = Math_fround(-1);
    }
    label$15 : {
     if ($3 >>> 0 >= 1291845633) {
      if ($5 >>> 0 <= 1065353207) {
       return ($7 | 0) < 0 ? Math_fround(Math_fround($11 * Math_fround(1.0000000150474662e+30)) * Math_fround(1.0000000150474662e+30)) : Math_fround(Math_fround($11 * Math_fround(1.0000000031710769e-30)) * Math_fround(1.0000000031710769e-30));
      }
      if ($5 >>> 0 >= 1065353224) {
       return ($7 | 0) > 0 ? Math_fround(Math_fround($11 * Math_fround(1.0000000150474662e+30)) * Math_fround(1.0000000150474662e+30)) : Math_fround(Math_fround($11 * Math_fround(1.0000000031710769e-30)) * Math_fround(1.0000000031710769e-30));
      }
      $0 = Math_fround($2 + Math_fround(-1));
      $2 = Math_fround($0 * Math_fround(1.44268798828125));
      $9 = Math_fround(Math_fround($0 * Math_fround(7052607543300837e-21)) + Math_fround(Math_fround(Math_fround($0 * $0) * Math_fround(Math_fround(.5) - Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(-.25)) + Math_fround(.3333333432674408))))) * Math_fround(-1.4426950216293335)));
      $0 = (wasm2js_scratch_store_i32(0, (wasm2js_scratch_store_f32(Math_fround($2 + $9)), wasm2js_scratch_load_i32(0)) & -4096), wasm2js_scratch_load_f32());
      $8 = Math_fround($0 - $2);
      break label$15;
     }
     $3 = $5 >>> 0 < 8388608;
     $6 = $3 ? (wasm2js_scratch_store_f32(Math_fround($2 * Math_fround(16777216))), wasm2js_scratch_load_i32(0)) : $5;
     $5 = $6 & 8388607;
     $4 = $5 | 1065353216;
     $6 = ($6 >> 23) + ($3 ? -151 : -127) | 0;
     $3 = 0;
     label$19 : {
      if ($5 >>> 0 < 1885298) {
       break label$19;
      }
      if ($5 >>> 0 < 6140887) {
       $3 = 1;
       break label$19;
      }
      $4 = $4 + -8388608 | 0;
      $6 = $6 + 1 | 0;
     }
     $5 = $3 << 2;
     $10 = HEAPF32[$5 + 19424 >> 2];
     $9 = (wasm2js_scratch_store_i32(0, $4), wasm2js_scratch_load_f32());
     $8 = HEAPF32[$5 + 19408 >> 2];
     $12 = Math_fround($9 - $8);
     $15 = Math_fround(Math_fround(1) / Math_fround($8 + $9));
     $2 = Math_fround($12 * $15);
     $0 = (wasm2js_scratch_store_i32(0, (wasm2js_scratch_store_f32($2), wasm2js_scratch_load_i32(0)) & -4096), wasm2js_scratch_load_f32());
     $18 = $0;
     $16 = Math_fround($0 * $0);
     $17 = (wasm2js_scratch_store_i32(0, (($4 >> 1 & -536875008 | 536870912) + ($3 << 21) | 0) + 4194304 | 0), wasm2js_scratch_load_f32());
     $9 = Math_fround($15 * Math_fround(Math_fround($12 - Math_fround($0 * $17)) - Math_fround($0 * Math_fround($9 - Math_fround($17 - $8)))));
     $8 = Math_fround(Math_fround($2 + $0) * $9);
     $0 = Math_fround($2 * $2);
     $8 = Math_fround($8 + Math_fround(Math_fround($0 * $0) * Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(.20697501301765442)) + Math_fround(.23066075146198273))) + Math_fround(.2727281153202057))) + Math_fround(.3333333432674408))) + Math_fround(.4285714328289032))) + Math_fround(.6000000238418579))));
     $0 = (wasm2js_scratch_store_i32(0, (wasm2js_scratch_store_f32(Math_fround(Math_fround($16 + Math_fround(3)) + $8)), wasm2js_scratch_load_i32(0)) & -4096), wasm2js_scratch_load_f32());
     $12 = Math_fround($18 * $0);
     $2 = Math_fround(Math_fround($9 * $0) + Math_fround($2 * Math_fround($8 - Math_fround(Math_fround($0 + Math_fround(-3)) - $16))));
     $0 = (wasm2js_scratch_store_i32(0, (wasm2js_scratch_store_f32(Math_fround($12 + $2)), wasm2js_scratch_load_i32(0)) & -4096), wasm2js_scratch_load_f32());
     $8 = Math_fround($0 * Math_fround(.9619140625));
     $9 = Math_fround(HEAPF32[$5 + 19416 >> 2] + Math_fround(Math_fround(Math_fround($2 - Math_fround($0 - $12)) * Math_fround(.9617967009544373)) + Math_fround($0 * Math_fround(-.00011736857413779944))));
     $2 = Math_fround($6 | 0);
     $0 = (wasm2js_scratch_store_i32(0, (wasm2js_scratch_store_f32(Math_fround(Math_fround($10 + Math_fround($8 + $9)) + $2)), wasm2js_scratch_load_i32(0)) & -4096), wasm2js_scratch_load_f32());
     $8 = Math_fround(Math_fround(Math_fround($0 - $2) - $10) - $8);
    }
    $2 = (wasm2js_scratch_store_i32(0, $7 & -4096), wasm2js_scratch_load_f32());
    $10 = Math_fround($0 * $2);
    $0 = Math_fround(Math_fround(Math_fround($9 - $8) * $1) + Math_fround(Math_fround($1 - $2) * $0));
    $1 = Math_fround($10 + $0);
    $4 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(0));
    if (($4 | 0) >= 1124073473) {
     break label$2;
    }
    $3 = 1124073472;
    label$21 : {
     label$22 : {
      if (($4 | 0) == 1124073472) {
       if (!(Math_fround($0 + Math_fround(4.299566569443414e-8)) > Math_fround($1 - $10))) {
        break label$22;
       }
       break label$2;
      }
      $3 = $4 & 2147483647;
      if (!($0 <= Math_fround($1 - $10) ^ 1 | ($4 | 0) != -1021968384) | $3 >>> 0 >= 1125515265) {
       break label$1;
      }
      $7 = 0;
      if ($3 >>> 0 < 1056964609) {
       break label$21;
      }
     }
     $3 = (8388608 >>> ($3 >>> 23 | 0) + -126 | 0) + $4 | 0;
     $5 = $3 >>> 23 & 255;
     $7 = ($3 & 8388607 | 8388608) >>> 150 - $5 | 0;
     $7 = ($4 | 0) < 0 ? 0 - $7 | 0 : $7;
     $10 = Math_fround($10 - (wasm2js_scratch_store_i32(0, -8388608 >> $5 + -127 & $3), wasm2js_scratch_load_f32()));
     $4 = (wasm2js_scratch_store_f32(Math_fround($0 + $10)), wasm2js_scratch_load_i32(0));
    }
    $1 = (wasm2js_scratch_store_i32(0, $4 & -32768), wasm2js_scratch_load_f32());
    $2 = Math_fround($1 * Math_fround(.693145751953125));
    $9 = Math_fround(Math_fround($1 * Math_fround(14286065379565116e-22)) + Math_fround(Math_fround($0 - Math_fround($1 - $10)) * Math_fround(.6931471824645996)));
    $0 = Math_fround($2 + $9);
    $1 = Math_fround($0 * $0);
    $1 = Math_fround($0 - Math_fround($1 * Math_fround(Math_fround($1 * Math_fround(Math_fround($1 * Math_fround(Math_fround($1 * Math_fround(Math_fround($1 * Math_fround(4.138136944220605e-8)) + Math_fround(-16533901998627698e-22))) + Math_fround(661375597701408e-19))) + Math_fround(-.0027777778450399637))) + Math_fround(.1666666716337204))));
    $8 = Math_fround(Math_fround($0 * $1) / Math_fround($1 + Math_fround(-2)));
    $1 = Math_fround($9 - Math_fround($0 - $2));
    $0 = Math_fround(Math_fround($0 - Math_fround($8 - Math_fround($1 + Math_fround($0 * $1)))) + Math_fround(1));
    $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0)) + ($7 << 23) | 0;
    label$25 : {
     if (($4 | 0) <= 8388607) {
      $0 = scalbnf($0, $7);
      break label$25;
     }
     $0 = (wasm2js_scratch_store_i32(0, $4), wasm2js_scratch_load_f32());
    }
    $2 = Math_fround($11 * $0);
   }
   return $2;
  }
  return Math_fround(Math_fround($11 * Math_fround(1.0000000150474662e+30)) * Math_fround(1.0000000150474662e+30));
 }
 return Math_fround(Math_fround($11 * Math_fround(1.0000000031710769e-30)) * Math_fround(1.0000000031710769e-30));
}
function btSequentialImpulseConstraintSolver__setupFrictionConstraint_28btSolverConstraint__2c_20btVector3_20const__2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20btContactSolverInfo_20const__2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
 var $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = 0, $34 = Math_fround(0), $35 = Math_fround(0), $36 = 0, $37 = Math_fround(0), $38 = Math_fround(0), $39 = 0, $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0);
 $33 = HEAP32[$0 + 16 >> 2];
 $0 = HEAP32[($33 + Math_imul($4, 244) | 0) + 240 >> 2];
 $14 = HEAP32[(Math_imul($3, 244) + $33 | 0) + 240 >> 2];
 HEAP32[$1 + 148 >> 2] = $4;
 HEAP32[$1 + 144 >> 2] = $3;
 $40 = HEAPF32[$5 + 84 >> 2];
 $39 = HEAP32[$5 + 84 >> 2];
 HEAP32[$1 + 132 >> 2] = 0;
 HEAP32[$1 + 104 >> 2] = $39;
 HEAP32[$1 + 96 >> 2] = 0;
 HEAP32[$1 + 100 >> 2] = 0;
 $9 = $1 + 16 | 0;
 label$1 : {
  if ($14) {
   $8 = HEAP32[$2 + 4 >> 2];
   $36 = HEAP32[$2 >> 2];
   HEAP32[$9 >> 2] = $36;
   HEAP32[$9 + 4 >> 2] = $8;
   $36 = HEAP32[$2 + 12 >> 2];
   $8 = HEAP32[$2 + 8 >> 2];
   HEAP32[$9 + 8 >> 2] = $8;
   HEAP32[$9 + 12 >> 2] = $36;
   $20 = HEAPF32[$6 + 8 >> 2];
   $17 = HEAPF32[$6 >> 2];
   $21 = HEAPF32[$6 + 4 >> 2];
   HEAP32[$1 + 12 >> 2] = 0;
   $26 = HEAPF32[$1 + 20 >> 2];
   $27 = HEAPF32[$1 + 16 >> 2];
   $22 = Math_fround(Math_fround($17 * $26) - Math_fround($21 * $27));
   HEAPF32[$1 + 8 >> 2] = $22;
   $28 = HEAPF32[$1 + 24 >> 2];
   $17 = Math_fround(Math_fround($20 * $27) - Math_fround($17 * $28));
   HEAPF32[$1 + 4 >> 2] = $17;
   $20 = Math_fround(Math_fround($21 * $28) - Math_fround($20 * $26));
   HEAPF32[$1 >> 2] = $20;
   $21 = HEAPF32[$14 + 612 >> 2];
   $18 = HEAPF32[$14 + 364 >> 2];
   $19 = HEAPF32[$14 + 356 >> 2];
   $15 = HEAPF32[$14 + 360 >> 2];
   $16 = HEAPF32[$14 + 608 >> 2];
   $30 = HEAPF32[$14 + 348 >> 2];
   $31 = HEAPF32[$14 + 340 >> 2];
   $23 = HEAPF32[$14 + 344 >> 2];
   $24 = HEAPF32[$14 + 332 >> 2];
   $25 = HEAPF32[$14 + 328 >> 2];
   $29 = HEAPF32[$14 + 604 >> 2];
   $32 = HEAPF32[$14 + 324 >> 2];
   HEAP32[$1 + 76 >> 2] = 0;
   $24 = Math_fround($29 * Math_fround(Math_fround(Math_fround($20 * $32) + Math_fround($17 * $25)) + Math_fround($22 * $24)));
   HEAPF32[$1 + 64 >> 2] = $24;
   $30 = Math_fround($16 * Math_fround(Math_fround(Math_fround($20 * $31) + Math_fround($17 * $23)) + Math_fround($22 * $30)));
   HEAPF32[$1 + 68 >> 2] = $30;
   $31 = Math_fround($21 * Math_fround(Math_fround(Math_fround($20 * $19) + Math_fround($17 * $15)) + Math_fround($22 * $18)));
   HEAPF32[$1 + 72 >> 2] = $31;
   break label$1;
  }
  HEAP32[$1 + 64 >> 2] = 0;
  HEAP32[$1 + 68 >> 2] = 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 72 >> 2] = 0;
  HEAP32[$1 + 76 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$9 >> 2] = 0;
  HEAP32[$9 + 4 >> 2] = 0;
  HEAP32[$1 + 24 >> 2] = 0;
  HEAP32[$1 + 28 >> 2] = 0;
 }
 label$3 : {
  if ($0) {
   $18 = HEAPF32[$2 >> 2];
   $19 = HEAPF32[$2 + 4 >> 2];
   $15 = HEAPF32[$2 + 8 >> 2];
   HEAP32[$1 + 60 >> 2] = 0;
   $32 = Math_fround(-$15);
   HEAPF32[$1 + 56 >> 2] = $32;
   $37 = Math_fround(-$19);
   HEAPF32[$1 + 52 >> 2] = $37;
   $38 = Math_fround(-$18);
   HEAPF32[$1 + 48 >> 2] = $38;
   $16 = HEAPF32[$7 + 8 >> 2];
   $23 = HEAPF32[$7 + 4 >> 2];
   $25 = HEAPF32[$7 >> 2];
   HEAP32[$1 + 44 >> 2] = 0;
   $21 = Math_fround(Math_fround($18 * $23) - Math_fround($19 * $25));
   HEAPF32[$1 + 40 >> 2] = $21;
   $18 = Math_fround(Math_fround($15 * $25) - Math_fround($18 * $16));
   HEAPF32[$1 + 36 >> 2] = $18;
   $19 = Math_fround(Math_fround($19 * $16) - Math_fround($15 * $23));
   HEAPF32[$1 + 32 >> 2] = $19;
   $15 = HEAPF32[$0 + 332 >> 2];
   $16 = HEAPF32[$0 + 328 >> 2];
   $25 = HEAPF32[$0 + 608 >> 2];
   $29 = HEAPF32[$0 + 348 >> 2];
   $34 = HEAPF32[$0 + 340 >> 2];
   $35 = HEAPF32[$0 + 344 >> 2];
   $23 = HEAPF32[$0 + 612 >> 2];
   $41 = HEAPF32[$0 + 364 >> 2];
   $42 = HEAPF32[$0 + 356 >> 2];
   $43 = HEAPF32[$0 + 360 >> 2];
   $44 = HEAPF32[$0 + 604 >> 2];
   $45 = HEAPF32[$0 + 324 >> 2];
   HEAP32[$1 + 92 >> 2] = 0;
   $23 = Math_fround($23 * Math_fround(Math_fround(Math_fround($19 * $42) + Math_fround($18 * $43)) + Math_fround($21 * $41)));
   HEAPF32[$1 + 88 >> 2] = $23;
   $25 = Math_fround($25 * Math_fround(Math_fround(Math_fround($19 * $34) + Math_fround($18 * $35)) + Math_fround($21 * $29)));
   HEAPF32[$1 + 84 >> 2] = $25;
   $29 = Math_fround($44 * Math_fround(Math_fround(Math_fround($19 * $45) + Math_fround($18 * $16)) + Math_fround($21 * $15)));
   HEAPF32[$1 + 80 >> 2] = $29;
   break label$3;
  }
  HEAP32[$1 + 80 >> 2] = 0;
  HEAP32[$1 + 84 >> 2] = 0;
  HEAP32[$1 + 32 >> 2] = 0;
  HEAP32[$1 + 36 >> 2] = 0;
  HEAP32[$1 + 88 >> 2] = 0;
  HEAP32[$1 + 92 >> 2] = 0;
  HEAP32[$1 + 40 >> 2] = 0;
  HEAP32[$1 + 44 >> 2] = 0;
  HEAP32[$1 + 48 >> 2] = 0;
  HEAP32[$1 + 52 >> 2] = 0;
  HEAP32[$1 + 56 >> 2] = 0;
  HEAP32[$1 + 60 >> 2] = 0;
  $21 = Math_fround(0);
  $18 = Math_fround(0);
  $19 = Math_fround(0);
  $32 = Math_fround(0);
  $23 = Math_fround(0);
  $25 = Math_fround(0);
  $29 = Math_fround(0);
 }
 $15 = Math_fround(0);
 $16 = Math_fround(0);
 if ($14) {
  $16 = HEAPF32[$6 + 8 >> 2];
  $34 = HEAPF32[$6 + 4 >> 2];
  $35 = HEAPF32[$6 >> 2];
  $16 = Math_fround(HEAPF32[$14 + 404 >> 2] + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($30 * $16) - Math_fround($31 * $34)) * HEAPF32[$2 >> 2]) + Math_fround(Math_fround(Math_fround($31 * $35) - Math_fround($16 * $24)) * HEAPF32[$2 + 4 >> 2])) + Math_fround(Math_fround(Math_fround($34 * $24) - Math_fround($30 * $35)) * HEAPF32[$2 + 8 >> 2])));
 }
 if ($0) {
  $15 = HEAPF32[$7 + 4 >> 2];
  $24 = HEAPF32[$7 + 8 >> 2];
  $30 = Math_fround(Math_fround(Math_fround($23 * $15) - Math_fround($25 * $24)) * HEAPF32[$2 >> 2]);
  $31 = Math_fround($29 * $24);
  $24 = HEAPF32[$7 >> 2];
  $15 = Math_fround(HEAPF32[$0 + 404 >> 2] + Math_fround(Math_fround($30 + Math_fround(Math_fround($31 - Math_fround($23 * $24)) * HEAPF32[$2 + 4 >> 2])) + Math_fround(Math_fround(Math_fround($25 * $24) - Math_fround($29 * $15)) * HEAPF32[$2 + 8 >> 2])));
 }
 $15 = Math_fround($10 / Math_fround($16 + $15));
 HEAPF32[$1 + 108 >> 2] = $15;
 label$7 : {
  if (!$14) {
   $26 = Math_fround(Math_fround(Math_fround($27 * Math_fround(0)) + Math_fround($26 * Math_fround(0))) + Math_fround($28 * Math_fround(0)));
   $28 = Math_fround(0);
   $27 = Math_fround(0);
   break label$7;
  }
  $14 = Math_imul($3, 244) + $33 | 0;
  $26 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$14 + 176 >> 2] + HEAPF32[$14 + 208 >> 2]) * $27) + Math_fround(Math_fround(HEAPF32[$14 + 180 >> 2] + HEAPF32[$14 + 212 >> 2]) * $26)) + Math_fround(Math_fround(HEAPF32[$14 + 184 >> 2] + HEAPF32[$14 + 216 >> 2]) * $28));
  $28 = HEAPF32[$14 + 200 >> 2];
  $46 = HEAPF32[$14 + 192 >> 2];
  $27 = HEAPF32[$14 + 196 >> 2];
 }
 $16 = $46;
 $22 = Math_fround($26 + Math_fround(Math_fround(Math_fround($16 * $20) + Math_fround($27 * $17)) + Math_fround($28 * $22)));
 label$9 : {
  if (!$0) {
   $20 = Math_fround(Math_fround(Math_fround($38 * Math_fround(0)) + Math_fround($37 * Math_fround(0))) + Math_fround($32 * Math_fround(0)));
   $27 = Math_fround(0);
   $26 = Math_fround(0);
   break label$9;
  }
  $0 = Math_imul($4, 244) + $33 | 0;
  $20 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 176 >> 2] + HEAPF32[$0 + 208 >> 2]) * $38) + Math_fround(Math_fround(HEAPF32[$0 + 180 >> 2] + HEAPF32[$0 + 212 >> 2]) * $37)) + Math_fround(Math_fround(HEAPF32[$0 + 184 >> 2] + HEAPF32[$0 + 216 >> 2]) * $32));
  $27 = HEAPF32[$0 + 192 >> 2];
  $47 = HEAPF32[$0 + 200 >> 2];
  $26 = HEAPF32[$0 + 196 >> 2];
 }
 $28 = $40;
 $17 = $47;
 $17 = Math_fround($15 * Math_fround($12 - Math_fround($22 + Math_fround($20 + Math_fround(Math_fround(Math_fround($27 * $19) + Math_fround($26 * $18)) + Math_fround($17 * $21))))));
 $22 = Math_fround(0);
 $22 = HEAPU8[$5 + 128 | 0] & 16 ? Math_fround($15 * Math_fround(Math_fround(HEAPF32[$11 + 44 >> 2] * Math_fround(-Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$5 + 48 >> 2] - HEAPF32[$5 + 32 >> 2]) * HEAPF32[$2 >> 2]) + Math_fround(Math_fround(HEAPF32[$5 + 52 >> 2] - HEAPF32[$5 + 36 >> 2]) * HEAPF32[$2 + 4 >> 2])) + Math_fround(Math_fround(HEAPF32[$5 + 56 >> 2] - HEAPF32[$5 + 40 >> 2]) * HEAPF32[$2 + 8 >> 2])))) / HEAPF32[$11 + 12 >> 2])) : $22;
 HEAP32[$1 + 128 >> 2] = 0;
 HEAP32[$1 + 124 >> 2] = $39;
 HEAPF32[$1 + 116 >> 2] = $13;
 HEAPF32[$1 + 112 >> 2] = $17 + $22;
 HEAPF32[$1 + 120 >> 2] = -$28;
}
function btQuantizedBvh__sortAndCalcSplittingIndex_28int_2c_20int_2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0, $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = 0, $25 = Math_fround(0), $26 = Math_fround(0);
 $8 = global$0 - 96 | 0;
 $6 = $8;
 HEAP32[$6 + 24 >> 2] = 0;
 HEAP32[$6 + 28 >> 2] = 0;
 HEAP32[$6 + 16 >> 2] = 0;
 HEAP32[$6 + 20 >> 2] = 0;
 $10 = ($2 | 0) <= ($1 | 0);
 if (!$10) {
  $12 = HEAPU8[$0 + 60 | 0];
  $9 = $1;
  while (1) {
   label$3 : {
    if ($12) {
     $4 = HEAP32[$0 + 116 >> 2] + ($9 << 4) | 0;
     $14 = HEAPF32[$0 + 44 >> 2];
     $18 = HEAPF32[$0 + 12 >> 2];
     $11 = Math_fround(Math_fround(Math_fround(HEAPU16[$4 + 4 >> 1]) / $14) + $18);
     $19 = HEAPF32[$0 + 40 >> 2];
     $25 = HEAPF32[$0 + 8 >> 2];
     $15 = Math_fround(Math_fround(Math_fround(HEAPU16[$4 + 2 >> 1]) / $19) + $25);
     $16 = HEAPF32[$0 + 36 >> 2];
     $26 = HEAPF32[$0 + 4 >> 2];
     $17 = Math_fround(Math_fround(Math_fround(HEAPU16[$4 >> 1]) / $16) + $26);
     $16 = Math_fround(Math_fround(Math_fround(HEAPU16[$4 + 6 >> 1]) / $16) + $26);
     $19 = Math_fround(Math_fround(Math_fround(HEAPU16[$4 + 8 >> 1]) / $19) + $25);
     $14 = Math_fround(Math_fround(Math_fround(HEAPU16[$4 + 10 >> 1]) / $14) + $18);
     break label$3;
    }
    $4 = HEAP32[$0 + 76 >> 2] + ($9 << 6) | 0;
    $11 = HEAPF32[$4 + 8 >> 2];
    $15 = HEAPF32[$4 + 4 >> 2];
    $17 = HEAPF32[$4 >> 2];
    $16 = HEAPF32[$4 + 16 >> 2];
    $19 = HEAPF32[$4 + 20 >> 2];
    $14 = HEAPF32[$4 + 24 >> 2];
   }
   $21 = Math_fround(Math_fround(Math_fround($14 + $11) * Math_fround(.5)) + $21);
   $18 = $19;
   $22 = Math_fround(Math_fround(Math_fround($18 + $15) * Math_fround(.5)) + $22);
   $23 = Math_fround(Math_fround(Math_fround($16 + $17) * Math_fround(.5)) + $23);
   $9 = $9 + 1 | 0;
   if (($9 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
  HEAPF32[$8 + 24 >> 2] = $21;
  HEAPF32[$8 + 20 >> 2] = $22;
  HEAPF32[$8 + 16 >> 2] = $23;
 }
 $24 = $2 - $1 | 0;
 $11 = Math_fround(Math_fround(1) / Math_fround($24 | 0));
 HEAPF32[$8 + 24 >> 2] = $11 * $21;
 HEAPF32[$8 + 20 >> 2] = $11 * $22;
 HEAPF32[$8 + 16 >> 2] = $11 * $23;
 $12 = $1;
 if (!$10) {
  $4 = $3 << 2;
  $19 = HEAPF32[$4 + ($8 + 16 | 0) >> 2];
  $3 = $4 + $8 | 0;
  $9 = $1;
  $12 = $9;
  while (1) {
   $10 = HEAPU8[$0 + 60 | 0];
   label$7 : {
    if ($10) {
     $4 = HEAP32[$0 + 116 >> 2] + ($9 << 4) | 0;
     $15 = HEAPF32[$0 + 44 >> 2];
     $17 = HEAPF32[$0 + 12 >> 2];
     $21 = Math_fround(Math_fround(Math_fround(HEAPU16[$4 + 4 >> 1]) / $15) + $17);
     $16 = HEAPF32[$0 + 40 >> 2];
     $14 = HEAPF32[$0 + 8 >> 2];
     $22 = Math_fround(Math_fround(Math_fround(HEAPU16[$4 + 2 >> 1]) / $16) + $14);
     $11 = HEAPF32[$0 + 36 >> 2];
     $18 = HEAPF32[$0 + 4 >> 2];
     $23 = Math_fround(Math_fround(Math_fround(HEAPU16[$4 >> 1]) / $11) + $18);
     $15 = Math_fround(Math_fround(Math_fround(HEAPU16[$4 + 10 >> 1]) / $15) + $17);
     $11 = Math_fround(Math_fround(Math_fround(HEAPU16[$4 + 6 >> 1]) / $11) + $18);
     $17 = Math_fround(Math_fround(Math_fround(HEAPU16[$4 + 8 >> 1]) / $16) + $14);
     break label$7;
    }
    $4 = HEAP32[$0 + 76 >> 2] + ($9 << 6) | 0;
    $21 = HEAPF32[$4 + 8 >> 2];
    $22 = HEAPF32[$4 + 4 >> 2];
    $23 = HEAPF32[$4 >> 2];
    $15 = HEAPF32[$4 + 24 >> 2];
    $11 = HEAPF32[$4 + 16 >> 2];
    $17 = HEAPF32[$4 + 20 >> 2];
   }
   HEAP32[$8 + 12 >> 2] = 0;
   HEAPF32[$8 + 8 >> 2] = Math_fround($15 + $21) * Math_fround(.5);
   HEAPF32[$8 + 4 >> 2] = Math_fround($17 + $22) * Math_fround(.5);
   HEAPF32[$8 >> 2] = Math_fround($11 + $23) * Math_fround(.5);
   if (!!(HEAPF32[$3 >> 2] > $19)) {
    label$10 : {
     if ($10) {
      $13 = HEAP32[$0 + 116 >> 2];
      $4 = $13 + ($9 << 4) | 0;
      $5 = $4 + 8 | 0;
      $7 = HEAP32[$5 >> 2];
      $6 = HEAP32[$5 + 4 >> 2];
      $5 = $7;
      $10 = $8 + 40 | 0;
      $7 = $10;
      HEAP32[$7 >> 2] = $5;
      HEAP32[$7 + 4 >> 2] = $6;
      $7 = HEAP32[$4 + 4 >> 2];
      $6 = HEAP32[$4 >> 2];
      $5 = $6;
      $6 = $8;
      HEAP32[$6 + 32 >> 2] = $5;
      HEAP32[$6 + 36 >> 2] = $7;
      $20 = $12 << 4;
      $13 = $20 + $13 | 0;
      $5 = $13;
      $7 = HEAP32[$5 >> 2];
      $6 = HEAP32[$5 + 4 >> 2];
      HEAP32[$4 >> 2] = $7;
      HEAP32[$4 + 4 >> 2] = $6;
      $7 = HEAP32[$5 + 12 >> 2];
      $6 = HEAP32[$5 + 8 >> 2];
      HEAP32[$4 + 8 >> 2] = $6;
      HEAP32[$4 + 12 >> 2] = $7;
      $5 = $8;
      $7 = HEAP32[$5 + 32 >> 2];
      $6 = HEAP32[$5 + 36 >> 2];
      $4 = HEAP32[$0 + 116 >> 2] + $20 | 0;
      HEAP32[$4 >> 2] = $7;
      HEAP32[$4 + 4 >> 2] = $6;
      $7 = HEAP32[$5 + 44 >> 2];
      $6 = HEAP32[$5 + 40 >> 2];
      HEAP32[$4 + 8 >> 2] = $6;
      HEAP32[$4 + 12 >> 2] = $7;
      break label$10;
     }
     $10 = HEAP32[$0 + 76 >> 2];
     $4 = $10 + ($9 << 6) | 0;
     $5 = $4 + 56 | 0;
     $7 = HEAP32[$5 >> 2];
     $6 = HEAP32[$5 + 4 >> 2];
     $5 = $7;
     $13 = $8 + 88 | 0;
     $7 = $13;
     HEAP32[$7 >> 2] = $5;
     HEAP32[$7 + 4 >> 2] = $6;
     $5 = $4 + 48 | 0;
     $6 = HEAP32[$5 >> 2];
     $7 = HEAP32[$5 + 4 >> 2];
     $5 = $6;
     $20 = $8 + 80 | 0;
     $6 = $20;
     HEAP32[$6 >> 2] = $5;
     HEAP32[$6 + 4 >> 2] = $7;
     $5 = $4 + 40 | 0;
     $7 = HEAP32[$5 >> 2];
     $6 = HEAP32[$5 + 4 >> 2];
     $5 = $7;
     $7 = $8 + 72 | 0;
     HEAP32[$7 >> 2] = $5;
     HEAP32[$7 + 4 >> 2] = $6;
     $5 = $4 + 32 | 0;
     $6 = HEAP32[$5 >> 2];
     $7 = HEAP32[$5 + 4 >> 2];
     $5 = $6;
     $13 = $8 - -64 | 0;
     $6 = $13;
     HEAP32[$6 >> 2] = $5;
     HEAP32[$6 + 4 >> 2] = $7;
     $5 = $4 + 24 | 0;
     $7 = HEAP32[$5 >> 2];
     $6 = HEAP32[$5 + 4 >> 2];
     $5 = $7;
     $7 = $8 + 56 | 0;
     HEAP32[$7 >> 2] = $5;
     HEAP32[$7 + 4 >> 2] = $6;
     $5 = $4 + 16 | 0;
     $6 = HEAP32[$5 >> 2];
     $7 = HEAP32[$5 + 4 >> 2];
     $5 = $6;
     $6 = $8 + 48 | 0;
     HEAP32[$6 >> 2] = $5;
     HEAP32[$6 + 4 >> 2] = $7;
     $5 = $4 + 8 | 0;
     $7 = HEAP32[$5 >> 2];
     $6 = HEAP32[$5 + 4 >> 2];
     $5 = $7;
     $7 = $8 + 40 | 0;
     HEAP32[$7 >> 2] = $5;
     HEAP32[$7 + 4 >> 2] = $6;
     $7 = HEAP32[$4 + 4 >> 2];
     $6 = HEAP32[$4 >> 2];
     $5 = $6;
     $6 = $8;
     HEAP32[$6 + 32 >> 2] = $5;
     HEAP32[$6 + 36 >> 2] = $7;
     $20 = $12 << 6;
     $10 = $20 + $10 | 0;
     $5 = $10;
     $7 = HEAP32[$5 >> 2];
     $6 = HEAP32[$5 + 4 >> 2];
     HEAP32[$4 >> 2] = $7;
     HEAP32[$4 + 4 >> 2] = $6;
     $7 = HEAP32[$5 + 12 >> 2];
     $6 = HEAP32[$5 + 8 >> 2];
     HEAP32[$4 + 8 >> 2] = $6;
     HEAP32[$4 + 12 >> 2] = $7;
     $6 = HEAP32[$5 + 20 >> 2];
     $7 = HEAP32[$5 + 16 >> 2];
     HEAP32[$4 + 16 >> 2] = $7;
     HEAP32[$4 + 20 >> 2] = $6;
     $7 = HEAP32[$5 + 28 >> 2];
     $6 = HEAP32[$5 + 24 >> 2];
     HEAP32[$4 + 24 >> 2] = $6;
     HEAP32[$4 + 28 >> 2] = $7;
     $6 = HEAP32[$5 + 36 >> 2];
     $7 = HEAP32[$5 + 32 >> 2];
     HEAP32[$4 + 32 >> 2] = $7;
     HEAP32[$4 + 36 >> 2] = $6;
     $7 = HEAP32[$5 + 44 >> 2];
     $6 = HEAP32[$5 + 40 >> 2];
     HEAP32[$4 + 40 >> 2] = $6;
     HEAP32[$4 + 44 >> 2] = $7;
     $6 = HEAP32[$5 + 52 >> 2];
     $7 = HEAP32[$5 + 48 >> 2];
     HEAP32[$4 + 48 >> 2] = $7;
     HEAP32[$4 + 52 >> 2] = $6;
     $7 = HEAP32[$5 + 60 >> 2];
     $6 = HEAP32[$5 + 56 >> 2];
     HEAP32[$4 + 56 >> 2] = $6;
     HEAP32[$4 + 60 >> 2] = $7;
     $5 = $8;
     $7 = HEAP32[$5 + 32 >> 2];
     $6 = HEAP32[$5 + 36 >> 2];
     $4 = HEAP32[$0 + 76 >> 2] + $20 | 0;
     HEAP32[$4 >> 2] = $7;
     HEAP32[$4 + 4 >> 2] = $6;
     $7 = HEAP32[$5 + 44 >> 2];
     $6 = HEAP32[$5 + 40 >> 2];
     HEAP32[$4 + 8 >> 2] = $6;
     HEAP32[$4 + 12 >> 2] = $7;
     $6 = HEAP32[$5 + 52 >> 2];
     $7 = HEAP32[$5 + 48 >> 2];
     HEAP32[$4 + 16 >> 2] = $7;
     HEAP32[$4 + 20 >> 2] = $6;
     $7 = HEAP32[$5 + 60 >> 2];
     $6 = HEAP32[$5 + 56 >> 2];
     HEAP32[$4 + 24 >> 2] = $6;
     HEAP32[$4 + 28 >> 2] = $7;
     $5 = $13;
     $7 = HEAP32[$5 >> 2];
     $6 = HEAP32[$5 + 4 >> 2];
     HEAP32[$4 + 32 >> 2] = $7;
     HEAP32[$4 + 36 >> 2] = $6;
     $5 = $8;
     $6 = HEAP32[$5 + 72 >> 2];
     $7 = HEAP32[$5 + 76 >> 2];
     HEAP32[$4 + 40 >> 2] = $6;
     HEAP32[$4 + 44 >> 2] = $7;
     $6 = HEAP32[$5 + 84 >> 2];
     $7 = HEAP32[$5 + 80 >> 2];
     HEAP32[$4 + 48 >> 2] = $7;
     HEAP32[$4 + 52 >> 2] = $6;
     $7 = HEAP32[$5 + 92 >> 2];
     $6 = HEAP32[$5 + 88 >> 2];
     HEAP32[$4 + 56 >> 2] = $6;
     HEAP32[$4 + 60 >> 2] = $7;
    }
    $12 = $12 + 1 | 0;
   }
   $9 = $9 + 1 | 0;
   if (($9 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = ($24 >> 1) + $1 | 0;
 $8 = ($24 | 0) / 3 | 0;
 return ($12 | 0) <= ($1 + $8 | 0) ? $0 : ($12 | 0) >= (($8 ^ -1) + $2 | 0) ? $0 : $12;
}
function btCompoundCompoundLeafCallback__Process_28btDbvtNode_20const__2c_20btDbvtNode_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = 0, $34 = 0, $35 = 0;
 $3 = global$0 - 256 | 0;
 $6 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 $35 = CProfileSample__CProfileSample_28char_20const__29($3 + 248 | 0, 10780);
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
 $27 = HEAP32[$2 + 36 >> 2];
 $29 = Math_imul($27, 80);
 $33 = HEAP32[$0 + 12 >> 2];
 $34 = HEAP32[$33 + 4 >> 2];
 $6 = HEAP32[($29 + HEAP32[$34 + 28 >> 2] | 0) + 64 >> 2];
 $2 = HEAP32[$0 + 8 >> 2];
 $28 = HEAP32[$1 + 36 >> 2];
 $1 = HEAP32[HEAP32[$2 + 4 >> 2] + 28 >> 2] + Math_imul($28, 80) | 0;
 $26 = HEAP32[$1 + 64 >> 2];
 $2 = HEAP32[$2 + 12 >> 2];
 $30 = HEAPF32[$2 + 52 >> 2];
 $31 = HEAPF32[$2 + 56 >> 2];
 $4 = HEAPF32[$2 + 24 >> 2];
 $5 = HEAPF32[$2 + 20 >> 2];
 $7 = HEAPF32[$2 + 40 >> 2];
 $8 = HEAPF32[$2 + 36 >> 2];
 $32 = HEAPF32[$2 + 48 >> 2];
 $9 = HEAPF32[$2 + 8 >> 2];
 $10 = HEAPF32[$2 >> 2];
 $11 = HEAPF32[$2 + 4 >> 2];
 $12 = HEAPF32[$2 + 16 >> 2];
 $13 = HEAPF32[$2 + 32 >> 2];
 $14 = HEAPF32[$1 + 32 >> 2];
 $15 = HEAPF32[$1 >> 2];
 $16 = HEAPF32[$1 + 16 >> 2];
 $17 = HEAPF32[$1 + 56 >> 2];
 $18 = HEAPF32[$1 + 48 >> 2];
 $19 = HEAPF32[$1 + 52 >> 2];
 $20 = HEAPF32[$1 + 36 >> 2];
 $21 = HEAPF32[$1 + 4 >> 2];
 $22 = HEAPF32[$1 + 20 >> 2];
 $23 = HEAPF32[$1 + 40 >> 2];
 $24 = HEAPF32[$1 + 8 >> 2];
 $25 = HEAPF32[$1 + 24 >> 2];
 $2 = 0;
 HEAP32[$3 + 244 >> 2] = 0;
 HEAP32[$3 + 228 >> 2] = 0;
 HEAP32[$3 + 212 >> 2] = 0;
 HEAPF32[$3 + 224 >> 2] = Math_fround(Math_fround($13 * $24) + Math_fround($8 * $25)) + Math_fround($7 * $23);
 HEAPF32[$3 + 220 >> 2] = Math_fround(Math_fround($13 * $21) + Math_fround($8 * $22)) + Math_fround($7 * $20);
 HEAPF32[$3 + 208 >> 2] = Math_fround(Math_fround($12 * $24) + Math_fround($5 * $25)) + Math_fround($4 * $23);
 HEAPF32[$3 + 204 >> 2] = Math_fround(Math_fround($12 * $21) + Math_fround($5 * $22)) + Math_fround($4 * $20);
 HEAPF32[$3 + 240 >> 2] = $31 + Math_fround(Math_fround(Math_fround($13 * $18) + Math_fround($8 * $19)) + Math_fround($7 * $17));
 HEAPF32[$3 + 236 >> 2] = $30 + Math_fround(Math_fround(Math_fround($12 * $18) + Math_fround($5 * $19)) + Math_fround($4 * $17));
 HEAP32[$3 + 196 >> 2] = 0;
 HEAPF32[$3 + 216 >> 2] = Math_fround(Math_fround($13 * $15) + Math_fround($8 * $16)) + Math_fround($7 * $14);
 HEAPF32[$3 + 200 >> 2] = Math_fround(Math_fround($12 * $15) + Math_fround($5 * $16)) + Math_fround($4 * $14);
 HEAPF32[$3 + 192 >> 2] = Math_fround(Math_fround($10 * $24) + Math_fround($11 * $25)) + Math_fround($9 * $23);
 HEAPF32[$3 + 188 >> 2] = Math_fround(Math_fround($10 * $21) + Math_fround($11 * $22)) + Math_fround($9 * $20);
 HEAPF32[$3 + 184 >> 2] = Math_fround(Math_fround($10 * $15) + Math_fround($11 * $16)) + Math_fround($9 * $14);
 HEAPF32[$3 + 232 >> 2] = $32 + Math_fround(Math_fround(Math_fround($10 * $18) + Math_fround($11 * $19)) + Math_fround($9 * $17));
 $1 = HEAP32[$33 + 12 >> 2];
 $30 = HEAPF32[$1 + 52 >> 2];
 $31 = HEAPF32[$1 + 56 >> 2];
 $4 = HEAPF32[$1 + 24 >> 2];
 $5 = HEAPF32[$1 + 20 >> 2];
 $7 = HEAPF32[$1 + 40 >> 2];
 $8 = HEAPF32[$1 + 36 >> 2];
 $32 = HEAPF32[$1 + 48 >> 2];
 $9 = HEAPF32[$1 + 8 >> 2];
 $10 = HEAPF32[$1 >> 2];
 $11 = HEAPF32[$1 + 4 >> 2];
 $12 = HEAPF32[$1 + 16 >> 2];
 $13 = HEAPF32[$1 + 32 >> 2];
 $1 = HEAP32[$34 + 28 >> 2] + $29 | 0;
 $14 = HEAPF32[$1 + 32 >> 2];
 $15 = HEAPF32[$1 >> 2];
 $16 = HEAPF32[$1 + 16 >> 2];
 $17 = HEAPF32[$1 + 56 >> 2];
 $18 = HEAPF32[$1 + 48 >> 2];
 $19 = HEAPF32[$1 + 52 >> 2];
 $20 = HEAPF32[$1 + 36 >> 2];
 $21 = HEAPF32[$1 + 4 >> 2];
 $22 = HEAPF32[$1 + 20 >> 2];
 $23 = HEAPF32[$1 + 40 >> 2];
 $24 = HEAPF32[$1 + 8 >> 2];
 $25 = HEAPF32[$1 + 24 >> 2];
 HEAP32[$3 + 180 >> 2] = 0;
 HEAP32[$3 + 164 >> 2] = 0;
 HEAP32[$3 + 148 >> 2] = 0;
 HEAPF32[$3 + 160 >> 2] = Math_fround(Math_fround($13 * $24) + Math_fround($8 * $25)) + Math_fround($7 * $23);
 HEAPF32[$3 + 156 >> 2] = Math_fround(Math_fround($13 * $21) + Math_fround($8 * $22)) + Math_fround($7 * $20);
 HEAPF32[$3 + 144 >> 2] = Math_fround(Math_fround($12 * $24) + Math_fround($5 * $25)) + Math_fround($4 * $23);
 HEAPF32[$3 + 140 >> 2] = Math_fround(Math_fround($12 * $21) + Math_fround($5 * $22)) + Math_fround($4 * $20);
 HEAPF32[$3 + 176 >> 2] = $31 + Math_fround(Math_fround(Math_fround($13 * $18) + Math_fround($8 * $19)) + Math_fround($7 * $17));
 HEAPF32[$3 + 172 >> 2] = $30 + Math_fround(Math_fround(Math_fround($12 * $18) + Math_fround($5 * $19)) + Math_fround($4 * $17));
 HEAP32[$3 + 132 >> 2] = 0;
 HEAPF32[$3 + 152 >> 2] = Math_fround(Math_fround($13 * $15) + Math_fround($8 * $16)) + Math_fround($7 * $14);
 HEAPF32[$3 + 136 >> 2] = Math_fround(Math_fround($12 * $15) + Math_fround($5 * $16)) + Math_fround($4 * $14);
 HEAPF32[$3 + 128 >> 2] = Math_fround(Math_fround($10 * $24) + Math_fround($11 * $25)) + Math_fround($9 * $23);
 HEAPF32[$3 + 124 >> 2] = Math_fround(Math_fround($10 * $21) + Math_fround($11 * $22)) + Math_fround($9 * $20);
 HEAPF32[$3 + 120 >> 2] = Math_fround(Math_fround($10 * $15) + Math_fround($11 * $16)) + Math_fround($9 * $14);
 HEAPF32[$3 + 168 >> 2] = $32 + Math_fround(Math_fround(Math_fround($10 * $18) + Math_fround($11 * $19)) + Math_fround($9 * $17));
 FUNCTION_TABLE[HEAP32[HEAP32[$26 >> 2] + 8 >> 2]]($26, $3 + 184 | 0, $3 + 104 | 0, $3 + 88 | 0);
 FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6, $3 + 120 | 0, $3 + 72 | 0, $3 + 56 | 0);
 $4 = HEAPF32[HEAP32[$0 + 24 >> 2] + 32 >> 2];
 $5 = Math_fround(HEAPF32[$3 + 104 >> 2] - $4);
 HEAPF32[$3 + 104 >> 2] = $5;
 HEAPF32[$3 + 108 >> 2] = HEAPF32[$3 + 108 >> 2] - $4;
 HEAPF32[$3 + 112 >> 2] = HEAPF32[$3 + 112 >> 2] - $4;
 HEAPF32[$3 + 88 >> 2] = $4 + HEAPF32[$3 + 88 >> 2];
 HEAPF32[$3 + 92 >> 2] = $4 + HEAPF32[$3 + 92 >> 2];
 HEAPF32[$3 + 96 >> 2] = $4 + HEAPF32[$3 + 96 >> 2];
 $1 = HEAP32[5651];
 label$2 : {
  if ($1) {
   if (!FUNCTION_TABLE[$1]($26, $6)) {
    break label$2;
   }
   $5 = HEAPF32[$3 + 104 >> 2];
  }
  if (!(HEAPF32[$3 + 88 >> 2] < HEAPF32[$3 + 72 >> 2] | $5 > HEAPF32[$3 + 56 >> 2])) {
   $2 = 1;
  }
  $1 = 0;
  $1 = HEAPF32[$3 + 96 >> 2] < HEAPF32[$3 + 80 >> 2] | HEAPF32[$3 + 112 >> 2] > HEAPF32[$3 + 64 >> 2] ? $1 : $2;
  if (HEAPF32[$3 + 92 >> 2] < HEAPF32[$3 + 76 >> 2] | HEAPF32[$3 + 108 >> 2] > HEAPF32[$3 + 60 >> 2] | $1 ^ 1) {
   break label$2;
  }
  $1 = HEAP32[$0 + 8 >> 2];
  $2 = HEAP32[$1 + 8 >> 2];
  HEAP32[$3 + 48 >> 2] = -1;
  HEAP32[$3 + 40 >> 2] = $2;
  HEAP32[$3 + 36 >> 2] = $26;
  HEAP32[$3 + 32 >> 2] = $1;
  HEAP32[$3 + 44 >> 2] = $3 + 184;
  HEAP32[$3 + 52 >> 2] = $28;
  $1 = HEAP32[$0 + 12 >> 2];
  $2 = HEAP32[$1 + 8 >> 2];
  HEAP32[$3 + 24 >> 2] = -1;
  HEAP32[$3 + 16 >> 2] = $2;
  HEAP32[$3 + 12 >> 2] = $6;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $3 + 120;
  HEAP32[$3 + 28 >> 2] = $27;
  $1 = btHashedSimplePairCache__findPair_28int_2c_20int_29(HEAP32[$0 + 28 >> 2], $28, $27);
  label$6 : {
   if (!!(HEAPF32[HEAP32[$0 + 24 >> 2] + 32 >> 2] > Math_fround(0))) {
    $1 = HEAP32[$0 + 16 >> 2];
    $2 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $3 + 32 | 0, $3 + 8 | 0, 0, 2) | 0;
    break label$6;
   }
   if ($1) {
    $2 = HEAP32[$1 + 8 >> 2];
    break label$6;
   }
   $1 = HEAP32[$0 + 16 >> 2];
   $2 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $3 + 32 | 0, $3 + 8 | 0, HEAP32[$0 + 32 >> 2], 1) | 0;
   $1 = HEAP32[$0 + 28 >> 2];
   HEAP32[(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $28, $27) | 0) + 8 >> 2] = $2;
  }
  $1 = HEAP32[$0 + 24 >> 2];
  $6 = HEAP32[$1 + 8 >> 2];
  $29 = HEAP32[$1 + 12 >> 2];
  $26 = $6;
  HEAP32[$1 + 12 >> 2] = $3 + 8;
  HEAP32[$1 + 8 >> 2] = $3 + 32;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, -1, $28);
  $1 = HEAP32[$0 + 24 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, -1, $27);
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $3 + 32 | 0, $3 + 8 | 0, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2]);
  $6 = HEAP32[$0 + 24 >> 2];
  HEAP32[$6 + 8 >> 2] = $26;
  HEAP32[$6 + 12 >> 2] = $29;
 }
 CProfileSample___CProfileSample_28_29($35);
 $0 = $3 + 256 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0;
 $3 = global$0 - 48 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 label$2 : {
  label$3 : {
   $4 = HEAP32[$1 + 4 >> 2];
   if ($4 >>> 0 > 13) {
    break label$3;
   }
   label$4 : {
    switch ($4 - 1 | 0) {
    case 7:
     HEAP32[$0 >> 2] = 0;
     HEAP32[$0 + 4 >> 2] = 0;
     HEAP32[$0 + 8 >> 2] = 0;
     HEAP32[$0 + 12 >> 2] = 0;
     break label$2;
    default:
     $5 = HEAPF32[$1 + 36 >> 2];
     $6 = HEAPF32[$1 + 40 >> 2];
     $8 = HEAPF32[$2 + 4 >> 2];
     $9 = HEAPF32[$2 + 8 >> 2];
     $7 = HEAPF32[$1 + 32 >> 2];
     $10 = HEAPF32[$2 >> 2];
     HEAP32[$0 + 12 >> 2] = 0;
     HEAPF32[$0 >> 2] = $10 >= Math_fround(0) ? $7 : Math_fround(-$7);
     HEAPF32[$0 + 8 >> 2] = $9 >= Math_fround(0) ? $6 : Math_fround(-$6);
     HEAPF32[$0 + 4 >> 2] = $8 >= Math_fround(0) ? $5 : Math_fround(-$5);
     break label$2;
    case 0:
     $4 = $1 + 60 | 0;
     $5 = HEAPF32[$2 >> 2];
     $6 = HEAPF32[$2 + 4 >> 2];
     $7 = HEAPF32[$2 + 8 >> 2];
     $8 = Math_fround(Math_fround(Math_fround($5 * HEAPF32[$1 + 76 >> 2]) + Math_fround($6 * HEAPF32[$1 + 80 >> 2])) + Math_fround($7 * HEAPF32[$1 + 84 >> 2]));
     $9 = Math_fround(Math_fround(Math_fround($5 * HEAPF32[$1 + 92 >> 2]) + Math_fround($6 * HEAPF32[$1 + 96 >> 2])) + Math_fround($7 * HEAPF32[$1 + 100 >> 2]));
     $5 = Math_fround(Math_fround(Math_fround($5 * HEAPF32[$1 + 60 >> 2]) + Math_fround($6 * HEAPF32[$1 - -64 >> 2])) + Math_fround($7 * HEAPF32[$1 + 68 >> 2]));
     $1 = $4 + (($5 < $8 ? $8 < $9 ? 2 : 1 : ($5 < $9) << 1) << 4) | 0;
     $4 = HEAP32[$1 >> 2];
     $11 = HEAP32[$1 + 4 >> 2];
     $1 = HEAP32[$1 + 8 >> 2];
     HEAP32[$0 + 12 >> 2] = 0;
     HEAP32[$0 + 8 >> 2] = $1;
     HEAP32[$0 >> 2] = $4;
     HEAP32[$0 + 4 >> 2] = $11;
     break label$2;
    case 12:
     $4 = HEAP32[$1 + 44 >> 2];
     $11 = HEAP32[$1 + 40 >> 2];
     HEAP32[$3 + 40 >> 2] = $11;
     HEAP32[$3 + 44 >> 2] = $4;
     $11 = HEAP32[$1 + 36 >> 2];
     $4 = HEAP32[$1 + 32 >> 2];
     HEAP32[$3 + 32 >> 2] = $4;
     HEAP32[$3 + 36 >> 2] = $11;
     HEAP32[$3 + 16 >> 2] = HEAP32[$2 >> 2];
     $6 = HEAPF32[$2 + 4 >> 2];
     $12 = HEAP32[$2 + 4 >> 2];
     HEAP32[$3 + 20 >> 2] = $12;
     $5 = HEAPF32[$2 + 8 >> 2];
     $4 = HEAP32[$2 + 8 >> 2];
     HEAP32[$3 + 28 >> 2] = 0;
     HEAP32[$3 + 24 >> 2] = $4;
     $11 = 2;
     $2 = 1;
     $1 = HEAP32[$1 + 56 >> 2];
     $4 = $1 + -1 | 0;
     label$11 : {
      if ($4 >>> 0 > 1) {
       break label$11;
      }
      if ($4 - 1) {
       $13 = 1;
       $2 = 0;
       break label$11;
      }
      $5 = $6;
      $13 = 2;
      $11 = 1;
      $2 = 0;
     }
     $4 = $11;
     $6 = HEAPF32[($3 + 32 | 0) + ($1 << 2) >> 2];
     $1 = $2 << 2;
     $8 = HEAPF32[($1 | $3 + 32) >> 2];
     $7 = HEAPF32[($3 + 16 | $1) >> 2];
     $9 = Math_fround(Math_sqrt(Math_fround(Math_fround($7 * $7) + Math_fround($5 * $5))));
     label$13 : {
      if ($9 != Math_fround(0)) {
       $8 = Math_fround($8 / $9);
       HEAPF32[($2 << 2 | $3) >> 2] = $7 * $8;
       $1 = $13 << 2;
       HEAPF32[$3 + $1 >> 2] = HEAPF32[($3 + 16 | 0) + $1 >> 2] < Math_fround(0) ? Math_fround(-$6) : $6;
       HEAPF32[($4 << 2) + $3 >> 2] = $5 * $8;
       $1 = $3 + 8 | 0;
       $2 = $3 | 4;
       break label$13;
      }
      HEAPF32[($2 << 2 | $3) >> 2] = $8;
      $1 = $13 << 2;
      HEAPF32[$3 + $1 >> 2] = HEAPF32[($3 + 16 | 0) + $1 >> 2] < Math_fround(0) ? Math_fround(-$6) : $6;
      HEAP32[($4 << 2) + $3 >> 2] = 0;
      $1 = $3 + 8 | 0;
      $2 = $3 | 4;
     }
     HEAP32[$0 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$0 + 4 >> 2] = HEAP32[$2 >> 2];
     $1 = HEAP32[$1 >> 2];
     HEAP32[$0 + 12 >> 2] = 0;
     HEAP32[$0 + 8 >> 2] = $1;
     break label$2;
    case 9:
     $12 = HEAP32[$1 + 56 >> 2];
     $4 = $12 << 2;
     $5 = HEAPF32[($4 + $1 | 0) + 32 >> 2];
     $7 = HEAPF32[$2 >> 2];
     $6 = HEAPF32[$2 + 4 >> 2];
     $8 = HEAPF32[$2 + 8 >> 2];
     $9 = Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($6 * $6)) + Math_fround($8 * $8));
     label$15 : {
      if ($9 < Math_fround(1.4210854715202004e-14)) {
       $8 = Math_fround(0);
       $7 = Math_fround(1);
       break label$15;
      }
      $9 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($9)));
      $8 = Math_fround($8 * $9);
      $10 = Math_fround($6 * $9);
      $7 = Math_fround($7 * $9);
     }
     HEAP32[$3 + 40 >> 2] = 0;
     HEAP32[$3 + 44 >> 2] = 0;
     HEAP32[$3 + 32 >> 2] = 0;
     HEAP32[$3 + 36 >> 2] = 0;
     HEAPF32[($3 + 32 | 0) + $4 >> 2] = $5;
     $14 = Math_fround(-0xde0b6b000000000);
     $2 = 0;
     $4 = 0;
     $1 = HEAP32[$3 + 32 >> 2];
     $11 = HEAP32[$3 + 36 >> 2];
     $16 = HEAP32[$3 + 40 >> 2];
     $9 = HEAPF32[$3 + 32 >> 2];
     $6 = $10;
     $10 = HEAPF32[$3 + 36 >> 2];
     $15 = HEAPF32[$3 + 40 >> 2];
     $10 = Math_fround(Math_fround(Math_fround($7 * $9) + Math_fround($6 * $10)) + Math_fround($8 * $15));
     if (!!($10 > Math_fround(-0xde0b6b000000000))) {
      $13 = $16;
      $4 = $11;
      $14 = $10;
      $2 = $1;
     }
     HEAP32[$3 + 40 >> 2] = 0;
     HEAP32[$3 + 44 >> 2] = 0;
     HEAP32[$3 + 32 >> 2] = 0;
     HEAP32[$3 + 36 >> 2] = 0;
     HEAPF32[($3 + 32 | 0) + ($12 << 2) >> 2] = -$5;
     $11 = HEAP32[$3 + 40 >> 2];
     $5 = HEAPF32[$3 + 40 >> 2];
     $16 = HEAP32[$3 + 32 >> 2];
     $9 = HEAPF32[$3 + 32 >> 2];
     $12 = HEAP32[$3 + 36 >> 2];
     $10 = HEAPF32[$3 + 36 >> 2];
     HEAP32[$0 + 12 >> 2] = 0;
     $1 = Math_fround(Math_fround(Math_fround($7 * $9) + Math_fround($6 * $10)) + Math_fround($8 * $5)) > $14;
     HEAP32[$0 + 8 >> 2] = $1 ? $11 : $13;
     HEAP32[$0 + 4 >> 2] = $1 ? $12 : $4;
     HEAP32[$0 >> 2] = $1 ? $16 : $2;
     break label$2;
    case 4:
     $10 = HEAPF32[$1 + 16 >> 2];
     $14 = HEAPF32[$1 + 24 >> 2];
     $15 = HEAPF32[$1 + 20 >> 2];
     $13 = HEAP32[$1 + 96 >> 2];
     $4 = -1;
     $12 = HEAP32[$1 + 100 >> 2];
     if (($12 | 0) >= 1) {
      $7 = Math_fround(HEAPF32[$2 >> 2] * $10);
      $8 = Math_fround(HEAPF32[$2 + 8 >> 2] * $14);
      $9 = Math_fround(HEAPF32[$2 + 4 >> 2] * $15);
      $1 = 0;
      $5 = Math_fround(-3.4028234663852886e+38);
      while (1) {
       $2 = ($1 << 4) + $13 | 0;
       $6 = Math_fround(Math_fround(Math_fround($7 * HEAPF32[$2 >> 2]) + Math_fround($9 * HEAPF32[$2 + 4 >> 2])) + Math_fround($8 * HEAPF32[$2 + 8 >> 2]));
       $2 = $6 > $5;
       $5 = $2 ? $6 : $5;
       $4 = $2 ? $1 : $4;
       $1 = $1 + 1 | 0;
       if (($12 | 0) != ($1 | 0)) {
        continue;
       }
       break;
      }
     }
     $1 = ($4 << 4) + $13 | 0;
     $5 = HEAPF32[$1 >> 2];
     $6 = HEAPF32[$1 + 4 >> 2];
     $7 = HEAPF32[$1 + 8 >> 2];
     HEAP32[$0 + 12 >> 2] = 0;
     HEAPF32[$0 + 8 >> 2] = $14 * $7;
     HEAPF32[$0 + 4 >> 2] = $15 * $6;
     HEAPF32[$0 >> 2] = $10 * $5;
     break label$2;
    case 1:
    case 2:
    case 5:
    case 6:
    case 8:
    case 10:
    case 11:
     break label$3;
    case 3:
     break label$4;
    }
   }
   $10 = HEAPF32[$1 + 16 >> 2];
   $14 = HEAPF32[$1 + 24 >> 2];
   $15 = HEAPF32[$1 + 20 >> 2];
   $13 = HEAP32[$1 + 108 >> 2];
   $4 = -1;
   $12 = HEAP32[$1 + 100 >> 2];
   if (($12 | 0) >= 1) {
    $7 = Math_fround(HEAPF32[$2 >> 2] * $10);
    $8 = Math_fround(HEAPF32[$2 + 8 >> 2] * $14);
    $9 = Math_fround(HEAPF32[$2 + 4 >> 2] * $15);
    $1 = 0;
    $5 = Math_fround(-3.4028234663852886e+38);
    while (1) {
     $2 = ($1 << 4) + $13 | 0;
     $6 = Math_fround(Math_fround(Math_fround($7 * HEAPF32[$2 >> 2]) + Math_fround($9 * HEAPF32[$2 + 4 >> 2])) + Math_fround($8 * HEAPF32[$2 + 8 >> 2]));
     $2 = $6 > $5;
     $5 = $2 ? $6 : $5;
     $4 = $2 ? $1 : $4;
     $1 = $1 + 1 | 0;
     if (($12 | 0) != ($1 | 0)) {
      continue;
     }
     break;
    }
   }
   $1 = ($4 << 4) + $13 | 0;
   $5 = HEAPF32[$1 >> 2];
   $6 = HEAPF32[$1 + 4 >> 2];
   $7 = HEAPF32[$1 + 8 >> 2];
   HEAP32[$0 + 12 >> 2] = 0;
   HEAPF32[$0 + 8 >> 2] = $14 * $7;
   HEAPF32[$0 + 4 >> 2] = $15 * $6;
   HEAPF32[$0 >> 2] = $10 * $5;
   break label$2;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($0, $1, $2);
 }
 $0 = $3 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btContinuousConvexCollision__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = 0, $24 = Math_fround(0), $25 = 0, $26 = 0;
 $6 = global$0 - 304 | 0;
 $11 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $11;
 $12 = HEAPF32[$1 + 52 >> 2];
 $14 = HEAPF32[$2 + 52 >> 2];
 $9 = HEAPF32[$1 + 56 >> 2];
 $7 = HEAPF32[$2 + 56 >> 2];
 $13 = HEAPF32[$1 + 48 >> 2];
 $8 = HEAPF32[$2 + 48 >> 2];
 HEAP32[$6 + 300 >> 2] = 0;
 $15 = Math_fround($7 - $9);
 HEAPF32[$6 + 296 >> 2] = $15;
 $20 = Math_fround($14 - $12);
 HEAPF32[$6 + 292 >> 2] = $20;
 $21 = Math_fround($8 - $13);
 HEAPF32[$6 + 288 >> 2] = $21;
 btTransformUtil__calculateDiffAxisAngle_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20float__29($1, $2, $6 + 112 | 0, $6 + 48 | 0);
 HEAP32[$6 + 284 >> 2] = 0;
 $9 = HEAPF32[$6 + 48 >> 2];
 $12 = Math_fround($9 * HEAPF32[$6 + 120 >> 2]);
 HEAPF32[$6 + 280 >> 2] = $12;
 $14 = Math_fround($9 * HEAPF32[$6 + 116 >> 2]);
 HEAPF32[$6 + 276 >> 2] = $14;
 $9 = Math_fround($9 * HEAPF32[$6 + 112 >> 2]);
 HEAPF32[$6 + 272 >> 2] = $9;
 $7 = HEAPF32[$3 + 52 >> 2];
 $13 = HEAPF32[$4 + 52 >> 2];
 $8 = HEAPF32[$3 + 56 >> 2];
 $17 = HEAPF32[$4 + 56 >> 2];
 $18 = HEAPF32[$3 + 48 >> 2];
 $19 = HEAPF32[$4 + 48 >> 2];
 HEAP32[$6 + 268 >> 2] = 0;
 $17 = Math_fround($17 - $8);
 HEAPF32[$6 + 264 >> 2] = $17;
 $22 = Math_fround($13 - $7);
 HEAPF32[$6 + 260 >> 2] = $22;
 $18 = Math_fround($19 - $18);
 HEAPF32[$6 + 256 >> 2] = $18;
 btTransformUtil__calculateDiffAxisAngle_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20float__29($3, $4, $6 + 112 | 0, $6 + 48 | 0);
 HEAP32[$6 + 252 >> 2] = 0;
 $8 = HEAPF32[$6 + 48 >> 2];
 $7 = Math_fround($8 * HEAPF32[$6 + 120 >> 2]);
 HEAPF32[$6 + 248 >> 2] = $7;
 $13 = Math_fround($8 * HEAPF32[$6 + 116 >> 2]);
 HEAPF32[$6 + 244 >> 2] = $13;
 $8 = Math_fround($8 * HEAPF32[$6 + 112 >> 2]);
 HEAPF32[$6 + 240 >> 2] = $8;
 $4 = HEAP32[$0 + 12 >> 2];
 $24 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4));
 $19 = Math_fround(0);
 $4 = HEAP32[$0 + 16 >> 2];
 if ($4) {
  $19 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4));
  $15 = HEAPF32[$6 + 296 >> 2];
  $17 = HEAPF32[$6 + 264 >> 2];
  $20 = HEAPF32[$6 + 292 >> 2];
  $22 = HEAPF32[$6 + 260 >> 2];
  $21 = HEAPF32[$6 + 288 >> 2];
  $18 = HEAPF32[$6 + 256 >> 2];
  $13 = HEAPF32[$6 + 244 >> 2];
  $8 = HEAPF32[$6 + 240 >> 2];
  $12 = HEAPF32[$6 + 280 >> 2];
  $14 = HEAPF32[$6 + 276 >> 2];
  $9 = HEAPF32[$6 + 272 >> 2];
  $7 = HEAPF32[$6 + 248 >> 2];
 }
 $13 = Math_fround(Math_fround($24 * Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($9 * $9) + Math_fround($14 * $14)) + Math_fround($12 * $12))))) + Math_fround($19 * Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($13 * $13)) + Math_fround($7 * $7))))));
 $12 = Math_fround($18 - $21);
 $14 = Math_fround($22 - $20);
 $9 = Math_fround($17 - $15);
 label$3 : {
  if (Math_fround($13 + Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($12 * $12) + Math_fround($14 * $14)) + Math_fround($9 * $9))))) == Math_fround(0)) {
   break label$3;
  }
  HEAP8[$6 + 216 | 0] = 0;
  HEAP32[$6 + 212 >> 2] = 1566444395;
  HEAP32[$6 + 176 >> 2] = 7292;
  btContinuousConvexCollision__computeClosestPoints_28btTransform_20const__2c_20btTransform_20const__2c_20btPointCollector__29($0, $1, $3, $6 + 176 | 0);
  $2 = HEAP32[$6 + 208 >> 2];
  $10 = HEAP32[$6 + 204 >> 2];
  HEAP32[$6 + 232 >> 2] = $10;
  HEAP32[$6 + 236 >> 2] = $2;
  $10 = HEAP32[$6 + 200 >> 2];
  $2 = HEAP32[$6 + 196 >> 2];
  HEAP32[$6 + 224 >> 2] = $2;
  HEAP32[$6 + 228 >> 2] = $10;
  if (!HEAPU8[$6 + 216 | 0]) {
   break label$3;
  }
  $2 = HEAP32[$6 + 180 >> 2];
  $10 = HEAP32[$6 + 184 >> 2];
  $23 = HEAP32[$6 + 188 >> 2];
  if (Math_fround($13 + Math_fround(Math_fround(Math_fround($12 * HEAPF32[$6 + 180 >> 2]) + Math_fround($14 * HEAPF32[$6 + 184 >> 2])) + Math_fround($9 * HEAPF32[$6 + 188 >> 2]))) <= Math_fround(1.1920928955078125e-7)) {
   break label$3;
  }
  $16 = 1;
  $8 = Math_fround(0);
  label$4 : {
   $15 = Math_fround(HEAPF32[$6 + 212 >> 2] + HEAPF32[$5 + 172 >> 2]);
   $7 = HEAPF32[$6 + 192 >> 2];
   label$5 : {
    if (!($15 > Math_fround(.0010000000474974513))) {
     break label$5;
    }
    $25 = $6 + 20 | 0;
    $26 = $6 + 160 | 0;
    $4 = 0;
    while (1) {
     $11 = HEAP32[$5 + 168 >> 2];
     if ($11) {
      HEAP32[$6 + 120 >> 2] = 1065353216;
      HEAP32[$6 + 124 >> 2] = 0;
      HEAP32[$6 + 112 >> 2] = 1065353216;
      HEAP32[$6 + 116 >> 2] = 1065353216;
      FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 28 >> 2]]($11, $6 + 224 | 0, Math_fround(.20000000298023224), $6 + 112 | 0);
     }
     $7 = Math_fround($13 + Math_fround(Math_fround(Math_fround($12 * (wasm2js_scratch_store_i32(0, $2), wasm2js_scratch_load_f32())) + Math_fround($14 * (wasm2js_scratch_store_i32(0, $10), wasm2js_scratch_load_f32()))) + Math_fround($9 * (wasm2js_scratch_store_i32(0, $23), wasm2js_scratch_load_f32()))));
     if ($7 <= Math_fround(1.1920928955078125e-7)) {
      $16 = 0;
      break label$3;
     }
     $7 = Math_fround($8 + Math_fround($15 / $7));
     if ($7 <= $8) {
      $16 = 0;
      break label$3;
     }
     if ($7 > Math_fround(1)) {
      $16 = 0;
      break label$3;
     }
     if ($7 < Math_fround(0)) {
      $16 = 0;
      break label$3;
     }
     btTransformUtil__integrateTransform_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20btTransform__29($1, $6 + 288 | 0, $6 + 272 | 0, $7, $6 + 112 | 0);
     btTransformUtil__integrateTransform_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20btTransform__29($3, $6 + 256 | 0, $6 + 240 | 0, $7, $6 + 48 | 0);
     $2 = HEAP32[$5 + 168 >> 2];
     if ($2) {
      HEAP32[$6 + 8 >> 2] = 0;
      HEAP32[$6 + 12 >> 2] = 0;
      HEAP32[$6 >> 2] = 1065353216;
      HEAP32[$6 + 4 >> 2] = 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $26, Math_fround(.20000000298023224), $6);
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] >> 2]]($5, $7);
     HEAP8[$6 + 40 | 0] = 0;
     HEAP32[$6 + 36 >> 2] = 1566444395;
     HEAP32[$6 >> 2] = 7292;
     btContinuousConvexCollision__computeClosestPoints_28btTransform_20const__2c_20btTransform_20const__2c_20btPointCollector__29($0, $6 + 112 | 0, $6 + 48 | 0, $6);
     if (!HEAPU8[$6 + 40 | 0]) {
      break label$4;
     }
     $15 = HEAPF32[$5 + 172 >> 2];
     $11 = $25;
     $10 = HEAP32[$11 + 8 >> 2];
     $2 = HEAP32[$11 + 12 >> 2];
     HEAP32[$6 + 232 >> 2] = $10;
     HEAP32[$6 + 236 >> 2] = $2;
     $10 = HEAP32[$11 + 4 >> 2];
     $2 = HEAP32[$11 >> 2];
     HEAP32[$6 + 224 >> 2] = $2;
     HEAP32[$6 + 228 >> 2] = $10;
     $11 = $4 + 1 | 0;
     if ($4 >>> 0 > 63) {
      FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, -2, $11);
      $16 = 0;
      break label$3;
     }
     $2 = HEAP32[$6 + 4 >> 2];
     $10 = HEAP32[$6 + 8 >> 2];
     $23 = HEAP32[$6 + 12 >> 2];
     $4 = $11;
     $8 = $7;
     $15 = Math_fround(HEAPF32[$6 + 36 >> 2] + $15);
     if ($15 > Math_fround(.0010000000474974513)) {
      continue;
     }
     break;
    }
    $7 = HEAPF32[$6 + 16 >> 2];
   }
   HEAP32[$5 + 132 >> 2] = $2;
   HEAPF32[$5 + 164 >> 2] = $8;
   $12 = $7;
   HEAPF32[$5 + 144 >> 2] = $12;
   HEAP32[$5 + 140 >> 2] = $23;
   HEAP32[$5 + 136 >> 2] = $10;
   $2 = HEAP32[$6 + 228 >> 2];
   $10 = HEAP32[$6 + 224 >> 2];
   HEAP32[$5 + 148 >> 2] = $10;
   HEAP32[$5 + 152 >> 2] = $2;
   $10 = HEAP32[$6 + 236 >> 2];
   $2 = HEAP32[$6 + 232 >> 2];
   HEAP32[$5 + 156 >> 2] = $2;
   HEAP32[$5 + 160 >> 2] = $10;
   break label$3;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, -1, $4);
  $16 = 0;
 }
 $0 = $6 + 304 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $16 | 0;
}
function btGjkConvexCast__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = 0;
 $6 = global$0 - 288 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 btVoronoiSimplexSolver__reset_28_29(HEAP32[$0 + 4 >> 2]);
 $9 = HEAPF32[$1 + 52 >> 2];
 $10 = HEAPF32[$2 + 52 >> 2];
 $12 = HEAPF32[$3 + 52 >> 2];
 $13 = HEAPF32[$4 + 52 >> 2];
 $7 = $1 + 56 | 0;
 $14 = HEAPF32[$7 >> 2];
 $15 = HEAPF32[$2 + 56 >> 2];
 $8 = $3 + 56 | 0;
 $17 = HEAPF32[$8 >> 2];
 $18 = HEAPF32[$4 + 56 >> 2];
 $19 = HEAPF32[$1 + 48 >> 2];
 $20 = HEAPF32[$2 + 48 >> 2];
 $21 = HEAPF32[$3 + 48 >> 2];
 $22 = HEAPF32[$4 + 48 >> 2];
 HEAP8[$6 + 264 | 0] = 0;
 HEAP32[$6 + 260 >> 2] = 1566444395;
 HEAP32[$6 + 224 >> 2] = 7292;
 $16 = btGjkPairDetector__btGjkPairDetector_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($6 + 144 | 0, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2], HEAP32[$0 + 4 >> 2], 0);
 HEAP32[$6 + 136 >> 2] = 1566444395;
 $0 = $1;
 $8 = HEAP32[$0 + 8 >> 2];
 $7 = HEAP32[$0 + 12 >> 2];
 HEAP32[$6 + 16 >> 2] = $8;
 HEAP32[$6 + 20 >> 2] = $7;
 $8 = HEAP32[$0 + 4 >> 2];
 $7 = HEAP32[$0 >> 2];
 HEAP32[$6 + 8 >> 2] = $7;
 HEAP32[$6 + 12 >> 2] = $8;
 $7 = HEAP32[$0 + 28 >> 2];
 $8 = HEAP32[$0 + 24 >> 2];
 HEAP32[$6 + 32 >> 2] = $8;
 HEAP32[$6 + 36 >> 2] = $7;
 $8 = HEAP32[$0 + 20 >> 2];
 $7 = HEAP32[$0 + 16 >> 2];
 HEAP32[$6 + 24 >> 2] = $7;
 HEAP32[$6 + 28 >> 2] = $8;
 $7 = HEAP32[$0 + 44 >> 2];
 $8 = HEAP32[$0 + 40 >> 2];
 HEAP32[$6 + 48 >> 2] = $8;
 HEAP32[$6 + 52 >> 2] = $7;
 $8 = HEAP32[$0 + 36 >> 2];
 $7 = HEAP32[$0 + 32 >> 2];
 HEAP32[$6 + 40 >> 2] = $7;
 HEAP32[$6 + 44 >> 2] = $8;
 $7 = HEAP32[$0 + 60 >> 2];
 $8 = HEAP32[$0 + 56 >> 2];
 $11 = $8;
 $8 = $6 - -64 | 0;
 HEAP32[$8 >> 2] = $11;
 HEAP32[$8 + 4 >> 2] = $7;
 $8 = HEAP32[$0 + 52 >> 2];
 $7 = HEAP32[$0 + 48 >> 2];
 HEAP32[$6 + 56 >> 2] = $7;
 HEAP32[$6 + 60 >> 2] = $8;
 $0 = $3;
 $8 = HEAP32[$0 + 8 >> 2];
 $7 = HEAP32[$0 + 12 >> 2];
 HEAP32[$6 + 80 >> 2] = $8;
 HEAP32[$6 + 84 >> 2] = $7;
 $8 = HEAP32[$0 + 4 >> 2];
 $7 = HEAP32[$0 >> 2];
 HEAP32[$6 + 72 >> 2] = $7;
 HEAP32[$6 + 76 >> 2] = $8;
 $7 = HEAP32[$0 + 20 >> 2];
 $8 = HEAP32[$0 + 16 >> 2];
 HEAP32[$6 + 88 >> 2] = $8;
 HEAP32[$6 + 92 >> 2] = $7;
 $8 = HEAP32[$0 + 28 >> 2];
 $7 = HEAP32[$0 + 24 >> 2];
 HEAP32[$6 + 96 >> 2] = $7;
 HEAP32[$6 + 100 >> 2] = $8;
 $7 = HEAP32[$0 + 44 >> 2];
 $8 = HEAP32[$0 + 40 >> 2];
 HEAP32[$6 + 112 >> 2] = $8;
 HEAP32[$6 + 116 >> 2] = $7;
 $8 = HEAP32[$0 + 36 >> 2];
 $7 = HEAP32[$0 + 32 >> 2];
 HEAP32[$6 + 104 >> 2] = $7;
 HEAP32[$6 + 108 >> 2] = $8;
 $7 = HEAP32[$0 + 52 >> 2];
 $8 = HEAP32[$0 + 48 >> 2];
 HEAP32[$6 + 120 >> 2] = $8;
 HEAP32[$6 + 124 >> 2] = $7;
 $8 = HEAP32[$0 + 60 >> 2];
 $7 = HEAP32[$0 + 56 >> 2];
 HEAP32[$6 + 128 >> 2] = $7;
 HEAP32[$6 + 132 >> 2] = $8;
 btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($16, $6 + 8 | 0, $6 + 224 | 0, 0, 0);
 $7 = HEAP32[$6 + 256 >> 2];
 $8 = HEAP32[$6 + 252 >> 2];
 HEAP32[$6 + 280 >> 2] = $8;
 HEAP32[$6 + 284 >> 2] = $7;
 $8 = HEAP32[$6 + 248 >> 2];
 $7 = HEAP32[$6 + 244 >> 2];
 HEAP32[$6 + 272 >> 2] = $7;
 HEAP32[$6 + 276 >> 2] = $8;
 label$2 : {
  if (!HEAPU8[$6 + 264 | 0]) {
   break label$2;
  }
  $14 = Math_fround(Math_fround($15 - $14) - Math_fround($18 - $17));
  $13 = Math_fround(Math_fround($10 - $9) - Math_fround($13 - $12));
  $15 = Math_fround(Math_fround($20 - $19) - Math_fround($22 - $21));
  $7 = HEAP32[$6 + 232 >> 2];
  $8 = HEAP32[$6 + 236 >> 2];
  $11 = HEAP32[$6 + 228 >> 2];
  $10 = HEAPF32[$6 + 260 >> 2];
  label$3 : {
   label$4 : {
    if (!($10 > Math_fround(.0010000000474974513))) {
     $9 = Math_fround(0);
     $10 = HEAPF32[$6 + 240 >> 2];
     break label$4;
    }
    $0 = 0;
    $12 = Math_fround(0);
    while (1) {
     if (($0 | 0) == 32) {
      break label$2;
     }
     $9 = Math_fround($12 - Math_fround($10 / Math_fround(Math_fround($14 * (wasm2js_scratch_store_i32(0, $8), wasm2js_scratch_load_f32())) + Math_fround(Math_fround($13 * (wasm2js_scratch_store_i32(0, $7), wasm2js_scratch_load_f32())) + Math_fround($15 * (wasm2js_scratch_store_i32(0, $11), wasm2js_scratch_load_f32()))))));
     if ($9 <= $12 | $9 > Math_fround(1) | $9 < Math_fround(0)) {
      break label$2;
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] >> 2]]($5, $9);
     $10 = Math_fround(Math_fround(1) - $9);
     HEAPF32[$6 + 56 >> 2] = Math_fround($10 * HEAPF32[$1 + 48 >> 2]) + Math_fround($9 * HEAPF32[$2 + 48 >> 2]);
     HEAPF32[$6 + 60 >> 2] = Math_fround($10 * HEAPF32[$1 + 52 >> 2]) + Math_fround($9 * HEAPF32[$2 + 52 >> 2]);
     HEAPF32[$6 + 64 >> 2] = Math_fround($10 * HEAPF32[$1 + 56 >> 2]) + Math_fround($9 * HEAPF32[$2 + 56 >> 2]);
     HEAPF32[$6 + 120 >> 2] = Math_fround($10 * HEAPF32[$3 + 48 >> 2]) + Math_fround($9 * HEAPF32[$4 + 48 >> 2]);
     HEAPF32[$6 + 124 >> 2] = Math_fround($10 * HEAPF32[$3 + 52 >> 2]) + Math_fround($9 * HEAPF32[$4 + 52 >> 2]);
     HEAPF32[$6 + 128 >> 2] = Math_fround($10 * HEAPF32[$3 + 56 >> 2]) + Math_fround($9 * HEAPF32[$4 + 56 >> 2]);
     btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($16, $6 + 8 | 0, $6 + 224 | 0, 0, 0);
     if (!HEAPU8[$6 + 264 | 0]) {
      break label$2;
     }
     $10 = HEAPF32[$6 + 260 >> 2];
     if (!!($10 < Math_fround(0))) {
      HEAPF32[$5 + 164 >> 2] = $9;
      $8 = HEAP32[$6 + 228 >> 2];
      $1 = $8;
      $7 = HEAP32[$6 + 232 >> 2];
      $0 = $7;
      $8 = HEAP32[$6 + 240 >> 2];
      $7 = HEAP32[$6 + 236 >> 2];
      $2 = $7;
      $7 = $5;
      HEAP32[$7 + 140 >> 2] = $2;
      HEAP32[$7 + 144 >> 2] = $8;
      HEAP32[$7 + 132 >> 2] = $1;
      $8 = $0;
      HEAP32[$7 + 136 >> 2] = $8;
      $7 = HEAP32[$6 + 256 >> 2];
      $8 = HEAP32[$6 + 252 >> 2];
      $0 = $8;
      $8 = $5;
      HEAP32[$8 + 156 >> 2] = $0;
      HEAP32[$8 + 160 >> 2] = $7;
      $8 = HEAP32[$6 + 248 >> 2];
      $7 = HEAP32[$6 + 244 >> 2];
      $0 = $7;
      $7 = $5;
      HEAP32[$7 + 148 >> 2] = $0;
      HEAP32[$7 + 152 >> 2] = $8;
      break label$3;
     }
     $0 = $0 + 1 | 0;
     $7 = HEAP32[$6 + 256 >> 2];
     $8 = HEAP32[$6 + 252 >> 2];
     HEAP32[$6 + 280 >> 2] = $8;
     HEAP32[$6 + 284 >> 2] = $7;
     $8 = HEAP32[$6 + 248 >> 2];
     $7 = HEAP32[$6 + 244 >> 2];
     HEAP32[$6 + 272 >> 2] = $7;
     HEAP32[$6 + 276 >> 2] = $8;
     $11 = HEAP32[$6 + 228 >> 2];
     $7 = HEAP32[$6 + 232 >> 2];
     $8 = HEAP32[$6 + 236 >> 2];
     $12 = $9;
     if ($10 > Math_fround(.0010000000474974513)) {
      continue;
     }
     break;
    }
    $10 = HEAPF32[$6 + 240 >> 2];
   }
   if (Math_fround(Math_fround($14 * (wasm2js_scratch_store_i32(0, $8), wasm2js_scratch_load_f32())) + Math_fround(Math_fround($13 * (wasm2js_scratch_store_i32(0, $7), wasm2js_scratch_load_f32())) + Math_fround($15 * (wasm2js_scratch_store_i32(0, $11), wasm2js_scratch_load_f32())))) >= Math_fround(-HEAPF32[$5 + 172 >> 2])) {
    break label$2;
   }
   HEAP32[$5 + 132 >> 2] = $11;
   HEAPF32[$5 + 164 >> 2] = $9;
   HEAPF32[$5 + 144 >> 2] = $10;
   HEAP32[$5 + 140 >> 2] = $8;
   HEAP32[$5 + 136 >> 2] = $7;
   $7 = HEAP32[$6 + 276 >> 2];
   $8 = HEAP32[$6 + 272 >> 2];
   $0 = $8;
   $8 = $5;
   HEAP32[$8 + 148 >> 2] = $0;
   HEAP32[$8 + 152 >> 2] = $7;
   $8 = HEAP32[$6 + 284 >> 2];
   $7 = HEAP32[$6 + 280 >> 2];
   $0 = $7;
   $7 = $5;
   HEAP32[$7 + 156 >> 2] = $0;
   HEAP32[$7 + 160 >> 2] = $8;
  }
  $23 = 1;
 }
 $0 = $6 + 288 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $23 | 0;
}
function btGeneric6DofSpring2Constraint__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 btTypedConstraint__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
 HEAP32[$1 + 52 >> 2] = HEAP32[$0 + 48 >> 2];
 HEAP32[$1 + 56 >> 2] = HEAP32[$0 + 52 >> 2];
 HEAP32[$1 + 60 >> 2] = HEAP32[$0 + 56 >> 2];
 HEAP32[$1 + 64 >> 2] = HEAP32[$0 + 60 >> 2];
 HEAP32[$1 + 68 >> 2] = HEAP32[$0 - -64 >> 2];
 HEAP32[$1 + 72 >> 2] = HEAP32[$0 + 68 >> 2];
 HEAP32[$1 + 76 >> 2] = HEAP32[$0 + 72 >> 2];
 HEAP32[$1 + 80 >> 2] = HEAP32[$0 + 76 >> 2];
 HEAP32[$1 + 84 >> 2] = HEAP32[$0 + 80 >> 2];
 HEAP32[$1 + 88 >> 2] = HEAP32[$0 + 84 >> 2];
 HEAP32[$1 + 92 >> 2] = HEAP32[$0 + 88 >> 2];
 HEAP32[$1 + 96 >> 2] = HEAP32[$0 + 92 >> 2];
 HEAP32[$1 + 100 >> 2] = HEAP32[$0 + 96 >> 2];
 HEAP32[$1 + 104 >> 2] = HEAP32[$0 + 100 >> 2];
 HEAP32[$1 + 108 >> 2] = HEAP32[$0 + 104 >> 2];
 HEAP32[$1 + 112 >> 2] = HEAP32[$0 + 108 >> 2];
 HEAP32[$1 + 116 >> 2] = HEAP32[$0 + 112 >> 2];
 HEAP32[$1 + 120 >> 2] = HEAP32[$0 + 116 >> 2];
 HEAP32[$1 + 124 >> 2] = HEAP32[$0 + 120 >> 2];
 HEAP32[$1 + 128 >> 2] = HEAP32[$0 + 124 >> 2];
 HEAP32[$1 + 132 >> 2] = HEAP32[$0 + 128 >> 2];
 HEAP32[$1 + 136 >> 2] = HEAP32[$0 + 132 >> 2];
 HEAP32[$1 + 140 >> 2] = HEAP32[$0 + 136 >> 2];
 HEAP32[$1 + 144 >> 2] = HEAP32[$0 + 140 >> 2];
 HEAP32[$1 + 148 >> 2] = HEAP32[$0 + 144 >> 2];
 HEAP32[$1 + 152 >> 2] = HEAP32[$0 + 148 >> 2];
 HEAP32[$1 + 156 >> 2] = HEAP32[$0 + 152 >> 2];
 HEAP32[$1 + 160 >> 2] = HEAP32[$0 + 156 >> 2];
 HEAP32[$1 + 164 >> 2] = HEAP32[$0 + 160 >> 2];
 HEAP32[$1 + 168 >> 2] = HEAP32[$0 + 164 >> 2];
 HEAP32[$1 + 172 >> 2] = HEAP32[$0 + 168 >> 2];
 HEAP32[$1 + 176 >> 2] = HEAP32[$0 + 172 >> 2];
 HEAP32[$1 + 428 >> 2] = HEAP32[$0 + 968 >> 2];
 HEAP32[$1 + 412 >> 2] = HEAP32[$0 + 972 >> 2];
 HEAP32[$1 + 444 >> 2] = HEAP32[$0 + 976 >> 2];
 HEAP32[$1 + 460 >> 2] = HEAP32[$0 + 980 >> 2];
 HEAP32[$1 + 476 >> 2] = HEAP32[$0 + 984 >> 2];
 HEAP32[$1 + 492 >> 2] = HEAP32[$0 + 988 >> 2];
 HEAP32[$1 + 508 >> 2] = HEAP32[$0 + 992 >> 2];
 HEAP32[$1 + 524 >> 2] = HEAP32[$0 + 1e3 >> 2];
 HEAP32[$1 + 540 >> 2] = HEAP32[$0 + 1004 >> 2];
 HEAP32[$1 + 556 >> 2] = HEAP32[$0 + 1012 >> 2];
 HEAP32[$1 + 572 >> 2] = HEAP32[$0 + 1020 >> 2];
 HEAP32[$1 + 588 >> 2] = HEAP32[$0 + 1028 >> 2];
 HEAP32[$1 + 604 >> 2] = HEAP32[$0 + 1036 >> 2];
 HEAP32[$1 + 432 >> 2] = HEAP32[$0 + 1056 >> 2];
 HEAP32[$1 + 416 >> 2] = HEAP32[$0 + 1060 >> 2];
 HEAP32[$1 + 448 >> 2] = HEAP32[$0 + 1064 >> 2];
 HEAP32[$1 + 464 >> 2] = HEAP32[$0 + 1068 >> 2];
 HEAP32[$1 + 480 >> 2] = HEAP32[$0 + 1072 >> 2];
 HEAP32[$1 + 496 >> 2] = HEAP32[$0 + 1076 >> 2];
 HEAP32[$1 + 512 >> 2] = HEAP32[$0 + 1080 >> 2];
 HEAP32[$1 + 528 >> 2] = HEAP32[$0 + 1088 >> 2];
 HEAP32[$1 + 544 >> 2] = HEAP32[$0 + 1092 >> 2];
 HEAP32[$1 + 560 >> 2] = HEAP32[$0 + 1100 >> 2];
 HEAP32[$1 + 576 >> 2] = HEAP32[$0 + 1108 >> 2];
 HEAP32[$1 + 592 >> 2] = HEAP32[$0 + 1116 >> 2];
 HEAP32[$1 + 608 >> 2] = HEAP32[$0 + 1124 >> 2];
 HEAP32[$1 + 436 >> 2] = HEAP32[$0 + 1144 >> 2];
 HEAP32[$1 + 420 >> 2] = HEAP32[$0 + 1148 >> 2];
 HEAP32[$1 + 452 >> 2] = HEAP32[$0 + 1152 >> 2];
 HEAP32[$1 + 468 >> 2] = HEAP32[$0 + 1156 >> 2];
 HEAP32[$1 + 484 >> 2] = HEAP32[$0 + 1160 >> 2];
 HEAP32[$1 + 500 >> 2] = HEAP32[$0 + 1164 >> 2];
 HEAP32[$1 + 516 >> 2] = HEAP32[$0 + 1168 >> 2];
 HEAP32[$1 + 532 >> 2] = HEAP32[$0 + 1176 >> 2];
 HEAP32[$1 + 548 >> 2] = HEAP32[$0 + 1180 >> 2];
 HEAP32[$1 + 564 >> 2] = HEAP32[$0 + 1188 >> 2];
 HEAP32[$1 + 580 >> 2] = HEAP32[$0 + 1196 >> 2];
 HEAP32[$1 + 596 >> 2] = HEAP32[$0 + 1204 >> 2];
 $2 = HEAP32[$0 + 1212 >> 2];
 HEAP32[$1 + 440 >> 2] = 0;
 HEAP32[$1 + 612 >> 2] = $2;
 HEAP32[$1 + 616 >> 2] = 0;
 HEAP32[$1 + 600 >> 2] = 0;
 HEAP32[$1 + 584 >> 2] = 0;
 HEAP32[$1 + 568 >> 2] = 0;
 HEAP32[$1 + 552 >> 2] = 0;
 HEAP32[$1 + 536 >> 2] = 0;
 HEAP32[$1 + 520 >> 2] = 0;
 HEAP32[$1 + 504 >> 2] = 0;
 HEAP32[$1 + 488 >> 2] = 0;
 HEAP32[$1 + 472 >> 2] = 0;
 HEAP32[$1 + 456 >> 2] = 0;
 HEAP32[$1 + 424 >> 2] = 0;
 HEAP8[$1 + 620 | 0] = HEAPU8[$0 + 996 | 0];
 HEAP8[$1 + 624 | 0] = HEAPU8[$0 + 1008 | 0];
 HEAP8[$1 + 628 | 0] = HEAPU8[$0 + 1016 | 0];
 HEAP8[$1 + 632 | 0] = HEAPU8[$0 + 1024 | 0];
 HEAP8[$1 + 636 | 0] = HEAPU8[$0 + 1032 | 0];
 HEAP8[$1 + 621 | 0] = HEAPU8[$0 + 1084 | 0];
 HEAP8[$1 + 625 | 0] = HEAPU8[$0 + 1096 | 0];
 HEAP8[$1 + 629 | 0] = HEAPU8[$0 + 1104 | 0];
 HEAP8[$1 + 633 | 0] = HEAPU8[$0 + 1112 | 0];
 HEAP8[$1 + 637 | 0] = HEAPU8[$0 + 1120 | 0];
 HEAP8[$1 + 622 | 0] = HEAPU8[$0 + 1172 | 0];
 HEAP8[$1 + 626 | 0] = HEAPU8[$0 + 1184 | 0];
 HEAP8[$1 + 630 | 0] = HEAPU8[$0 + 1192 | 0];
 HEAP8[$1 + 634 | 0] = HEAPU8[$0 + 1200 | 0];
 $2 = HEAPU8[$0 + 1208 | 0];
 HEAP8[$1 + 639 | 0] = 0;
 HEAP8[$1 + 635 | 0] = 0;
 HEAP8[$1 + 631 | 0] = 0;
 HEAP8[$1 + 627 | 0] = 0;
 HEAP8[$1 + 623 | 0] = 0;
 HEAP8[$1 + 638 | 0] = $2;
 HEAP32[$1 + 196 >> 2] = HEAP32[$0 + 680 >> 2];
 HEAP32[$1 + 200 >> 2] = HEAP32[$0 + 684 >> 2];
 HEAP32[$1 + 204 >> 2] = HEAP32[$0 + 688 >> 2];
 HEAP32[$1 + 208 >> 2] = HEAP32[$0 + 692 >> 2];
 HEAP32[$1 + 180 >> 2] = HEAP32[$0 + 696 >> 2];
 HEAP32[$1 + 184 >> 2] = HEAP32[$0 + 700 >> 2];
 HEAP32[$1 + 188 >> 2] = HEAP32[$0 + 704 >> 2];
 HEAP32[$1 + 192 >> 2] = HEAP32[$0 + 708 >> 2];
 HEAP32[$1 + 212 >> 2] = HEAP32[$0 + 712 >> 2];
 HEAP32[$1 + 216 >> 2] = HEAP32[$0 + 716 >> 2];
 HEAP32[$1 + 220 >> 2] = HEAP32[$0 + 720 >> 2];
 HEAP32[$1 + 224 >> 2] = HEAP32[$0 + 724 >> 2];
 HEAP32[$1 + 228 >> 2] = HEAP32[$0 + 728 >> 2];
 HEAP32[$1 + 232 >> 2] = HEAP32[$0 + 732 >> 2];
 HEAP32[$1 + 236 >> 2] = HEAP32[$0 + 736 >> 2];
 HEAP32[$1 + 240 >> 2] = HEAP32[$0 + 740 >> 2];
 HEAP32[$1 + 244 >> 2] = HEAP32[$0 + 744 >> 2];
 HEAP32[$1 + 248 >> 2] = HEAP32[$0 + 748 >> 2];
 HEAP32[$1 + 252 >> 2] = HEAP32[$0 + 752 >> 2];
 HEAP32[$1 + 256 >> 2] = HEAP32[$0 + 756 >> 2];
 HEAP32[$1 + 260 >> 2] = HEAP32[$0 + 760 >> 2];
 HEAP32[$1 + 264 >> 2] = HEAP32[$0 + 764 >> 2];
 HEAP32[$1 + 268 >> 2] = HEAP32[$0 + 768 >> 2];
 HEAP32[$1 + 272 >> 2] = HEAP32[$0 + 772 >> 2];
 HEAP32[$1 + 276 >> 2] = HEAP32[$0 + 776 >> 2];
 HEAP32[$1 + 280 >> 2] = HEAP32[$0 + 780 >> 2];
 HEAP32[$1 + 284 >> 2] = HEAP32[$0 + 784 >> 2];
 HEAP32[$1 + 288 >> 2] = HEAP32[$0 + 788 >> 2];
 HEAP32[$1 + 292 >> 2] = HEAP32[$0 + 876 >> 2];
 HEAP32[$1 + 296 >> 2] = HEAP32[$0 + 880 >> 2];
 HEAP32[$1 + 300 >> 2] = HEAP32[$0 + 884 >> 2];
 HEAP32[$1 + 304 >> 2] = HEAP32[$0 + 888 >> 2];
 HEAP32[$1 + 308 >> 2] = HEAP32[$0 + 892 >> 2];
 HEAP32[$1 + 312 >> 2] = HEAP32[$0 + 896 >> 2];
 HEAP32[$1 + 316 >> 2] = HEAP32[$0 + 900 >> 2];
 HEAP32[$1 + 320 >> 2] = HEAP32[$0 + 904 >> 2];
 HEAP32[$1 + 324 >> 2] = HEAP32[$0 + 804 >> 2];
 HEAP32[$1 + 328 >> 2] = HEAP32[$0 + 808 >> 2];
 HEAP32[$1 + 332 >> 2] = HEAP32[$0 + 812 >> 2];
 HEAP32[$1 + 336 >> 2] = HEAP32[$0 + 816 >> 2];
 HEAP32[$1 + 340 >> 2] = HEAP32[$0 + 820 >> 2];
 HEAP32[$1 + 344 >> 2] = HEAP32[$0 + 824 >> 2];
 HEAP32[$1 + 348 >> 2] = HEAP32[$0 + 828 >> 2];
 HEAP32[$1 + 352 >> 2] = HEAP32[$0 + 832 >> 2];
 HEAP32[$1 + 356 >> 2] = HEAP32[$0 + 840 >> 2];
 HEAP32[$1 + 360 >> 2] = HEAP32[$0 + 844 >> 2];
 HEAP32[$1 + 364 >> 2] = HEAP32[$0 + 848 >> 2];
 HEAP32[$1 + 368 >> 2] = HEAP32[$0 + 852 >> 2];
 HEAP32[$1 + 372 >> 2] = HEAP32[$0 + 860 >> 2];
 HEAP32[$1 + 376 >> 2] = HEAP32[$0 + 864 >> 2];
 HEAP32[$1 + 380 >> 2] = HEAP32[$0 + 868 >> 2];
 HEAP32[$1 + 384 >> 2] = HEAP32[$0 + 872 >> 2];
 HEAP8[$1 + 388 | 0] = HEAPU8[$0 + 792 | 0];
 HEAP8[$1 + 392 | 0] = HEAPU8[$0 + 795 | 0];
 HEAP8[$1 + 396 | 0] = HEAPU8[$0 + 798 | 0];
 HEAP8[$1 + 400 | 0] = HEAPU8[$0 + 836 | 0];
 HEAP8[$1 + 404 | 0] = HEAPU8[$0 + 856 | 0];
 HEAP8[$1 + 389 | 0] = HEAPU8[$0 + 793 | 0];
 HEAP8[$1 + 393 | 0] = HEAPU8[$0 + 796 | 0];
 HEAP8[$1 + 397 | 0] = HEAPU8[$0 + 799 | 0];
 HEAP8[$1 + 401 | 0] = HEAPU8[$0 + 837 | 0];
 HEAP8[$1 + 405 | 0] = HEAPU8[$0 + 857 | 0];
 HEAP8[$1 + 390 | 0] = HEAPU8[$0 + 794 | 0];
 HEAP8[$1 + 394 | 0] = HEAPU8[$0 + 797 | 0];
 HEAP8[$1 + 398 | 0] = HEAPU8[$0 + 800 | 0];
 HEAP8[$1 + 402 | 0] = HEAPU8[$0 + 838 | 0];
 $2 = HEAPU8[$0 + 858 | 0];
 HEAP8[$1 + 407 | 0] = 0;
 HEAP8[$1 + 403 | 0] = 0;
 HEAP8[$1 + 399 | 0] = 0;
 HEAP8[$1 + 395 | 0] = 0;
 HEAP8[$1 + 391 | 0] = 0;
 HEAP8[$1 + 406 | 0] = $2;
 $0 = HEAP32[$0 + 1232 >> 2];
 HEAP32[$1 + 408 >> 2] = 0;
 HEAP32[$1 + 640 >> 2] = $0;
 return 3212;
}
function btPolyhedralContactClipping__clipFace_28btAlignedObjectArray_btVector3__20const__2c_20btAlignedObjectArray_btVector3___2c_20btVector3_20const__2c_20float_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0, $23 = Math_fround(0), $24 = 0, $25 = Math_fround(0);
 label$1 : {
  $24 = HEAP32[$0 + 4 >> 2];
  if (($24 | 0) < 2) {
   break label$1;
  }
  $4 = HEAP32[$0 + 12 >> 2];
  $13 = ($4 + ($24 << 4) | 0) + -16 | 0;
  $16 = HEAPF32[$13 >> 2];
  $14 = HEAPF32[$2 >> 2];
  $17 = HEAPF32[$13 + 4 >> 2];
  $15 = HEAPF32[$2 + 4 >> 2];
  $18 = HEAPF32[$13 + 8 >> 2];
  $25 = HEAPF32[$2 + 8 >> 2];
  $8 = Math_fround(Math_fround(Math_fround(Math_fround($16 * $14) + Math_fround($17 * $15)) + Math_fround($18 * $25)) + $3);
  $13 = 0;
  while (1) {
   $4 = ($13 << 4) + $4 | 0;
   $19 = HEAPF32[$4 >> 2];
   $20 = HEAPF32[$4 + 4 >> 2];
   $21 = HEAPF32[$4 + 8 >> 2];
   $23 = Math_fround(Math_fround(Math_fround(Math_fround($19 * $14) + Math_fround($20 * $15)) + Math_fround($21 * $25)) + $3);
   $22 = HEAP32[$4 + 12 >> 2];
   label$3 : {
    label$4 : {
     if (!!($8 < Math_fround(0))) {
      if (!!($23 < Math_fround(0))) {
       $5 = HEAP32[$1 + 4 >> 2];
       label$7 : {
        if (($5 | 0) != HEAP32[$1 + 8 >> 2]) {
         break label$7;
        }
        $12 = $5 ? $5 << 1 : 1;
        if (($5 | 0) >= ($12 | 0)) {
         break label$7;
        }
        $4 = 0;
        $9 = 0;
        if ($12) {
         $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($12 << 4, 16);
         $5 = HEAP32[$1 + 4 >> 2];
        }
        if (($5 | 0) >= 1) {
         while (1) {
          $6 = $4 << 4;
          $7 = $9 + $6 | 0;
          $6 = HEAP32[$1 + 12 >> 2] + $6 | 0;
          $10 = HEAP32[$6 >> 2];
          $11 = HEAP32[$6 + 4 >> 2];
          HEAP32[$7 >> 2] = $10;
          HEAP32[$7 + 4 >> 2] = $11;
          $10 = HEAP32[$6 + 12 >> 2];
          $11 = HEAP32[$6 + 8 >> 2];
          HEAP32[$7 + 8 >> 2] = $11;
          HEAP32[$7 + 12 >> 2] = $10;
          $4 = $4 + 1 | 0;
          if (($5 | 0) != ($4 | 0)) {
           continue;
          }
          break;
         }
        }
        $4 = HEAP32[$1 + 12 >> 2];
        if ($4) {
         if (HEAPU8[$1 + 16 | 0]) {
          btAlignedFreeInternal_28void__29($4);
         }
         HEAP32[$1 + 12 >> 2] = 0;
        }
        HEAP32[$1 + 12 >> 2] = $9;
        HEAP8[$1 + 16 | 0] = 1;
        HEAP32[$1 + 8 >> 2] = $12;
        $5 = HEAP32[$1 + 4 >> 2];
       }
       $4 = HEAP32[$1 + 12 >> 2] + ($5 << 4) | 0;
       HEAP32[$4 + 12 >> 2] = $22;
       HEAPF32[$4 + 8 >> 2] = $21;
       HEAPF32[$4 + 4 >> 2] = $20;
       HEAPF32[$4 >> 2] = $19;
       break label$4;
      }
      $8 = Math_fround($8 / Math_fround($8 - $23));
      $14 = Math_fround($18 + Math_fround(Math_fround($21 - $18) * $8));
      $15 = Math_fround($17 + Math_fround(Math_fround($20 - $17) * $8));
      $8 = Math_fround($16 + Math_fround(Math_fround($19 - $16) * $8));
      $5 = HEAP32[$1 + 4 >> 2];
      label$14 : {
       if (($5 | 0) != HEAP32[$1 + 8 >> 2]) {
        break label$14;
       }
       $9 = $5 ? $5 << 1 : 1;
       if (($5 | 0) >= ($9 | 0)) {
        break label$14;
       }
       $4 = 0;
       $22 = 0;
       if ($9) {
        $22 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($9 << 4, 16);
        $5 = HEAP32[$1 + 4 >> 2];
       }
       if (($5 | 0) >= 1) {
        while (1) {
         $6 = $4 << 4;
         $7 = $22 + $6 | 0;
         $6 = HEAP32[$1 + 12 >> 2] + $6 | 0;
         $10 = HEAP32[$6 >> 2];
         $11 = HEAP32[$6 + 4 >> 2];
         HEAP32[$7 >> 2] = $10;
         HEAP32[$7 + 4 >> 2] = $11;
         $10 = HEAP32[$6 + 12 >> 2];
         $11 = HEAP32[$6 + 8 >> 2];
         HEAP32[$7 + 8 >> 2] = $11;
         HEAP32[$7 + 12 >> 2] = $10;
         $4 = $4 + 1 | 0;
         if (($5 | 0) != ($4 | 0)) {
          continue;
         }
         break;
        }
       }
       $4 = HEAP32[$1 + 12 >> 2];
       if ($4) {
        if (HEAPU8[$1 + 16 | 0]) {
         btAlignedFreeInternal_28void__29($4);
        }
        HEAP32[$1 + 12 >> 2] = 0;
       }
       HEAP32[$1 + 12 >> 2] = $22;
       HEAP8[$1 + 16 | 0] = 1;
       HEAP32[$1 + 8 >> 2] = $9;
       $5 = HEAP32[$1 + 4 >> 2];
      }
      $4 = HEAP32[$1 + 12 >> 2] + ($5 << 4) | 0;
      HEAP32[$4 + 12 >> 2] = 0;
      HEAPF32[$4 + 8 >> 2] = $14;
      HEAPF32[$4 + 4 >> 2] = $15;
      HEAPF32[$4 >> 2] = $8;
      break label$4;
     }
     if (!($23 < Math_fround(0))) {
      break label$3;
     }
     $8 = Math_fround($8 / Math_fround($8 - $23));
     $14 = Math_fround($18 + Math_fround(Math_fround($21 - $18) * $8));
     $15 = Math_fround($17 + Math_fround(Math_fround($20 - $17) * $8));
     $8 = Math_fround($16 + Math_fround(Math_fround($19 - $16) * $8));
     $5 = HEAP32[$1 + 4 >> 2];
     label$21 : {
      if (($5 | 0) != HEAP32[$1 + 8 >> 2]) {
       break label$21;
      }
      $12 = $5 ? $5 << 1 : 1;
      if (($5 | 0) >= ($12 | 0)) {
       break label$21;
      }
      $4 = 0;
      $9 = 0;
      if ($12) {
       $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($12 << 4, 16);
       $5 = HEAP32[$1 + 4 >> 2];
      }
      if (($5 | 0) >= 1) {
       while (1) {
        $6 = $4 << 4;
        $7 = $9 + $6 | 0;
        $6 = HEAP32[$1 + 12 >> 2] + $6 | 0;
        $10 = HEAP32[$6 >> 2];
        $11 = HEAP32[$6 + 4 >> 2];
        HEAP32[$7 >> 2] = $10;
        HEAP32[$7 + 4 >> 2] = $11;
        $10 = HEAP32[$6 + 12 >> 2];
        $11 = HEAP32[$6 + 8 >> 2];
        HEAP32[$7 + 8 >> 2] = $11;
        HEAP32[$7 + 12 >> 2] = $10;
        $4 = $4 + 1 | 0;
        if (($5 | 0) != ($4 | 0)) {
         continue;
        }
        break;
       }
      }
      $4 = HEAP32[$1 + 12 >> 2];
      if ($4) {
       if (HEAPU8[$1 + 16 | 0]) {
        btAlignedFreeInternal_28void__29($4);
       }
       HEAP32[$1 + 12 >> 2] = 0;
      }
      HEAP32[$1 + 12 >> 2] = $9;
      HEAP8[$1 + 16 | 0] = 1;
      HEAP32[$1 + 8 >> 2] = $12;
      $5 = HEAP32[$1 + 4 >> 2];
     }
     $4 = HEAP32[$1 + 12 >> 2] + ($5 << 4) | 0;
     HEAP32[$4 + 12 >> 2] = 0;
     HEAPF32[$4 + 8 >> 2] = $14;
     HEAPF32[$4 + 4 >> 2] = $15;
     HEAPF32[$4 >> 2] = $8;
     $6 = HEAP32[$1 + 4 >> 2] + 1 | 0;
     HEAP32[$1 + 4 >> 2] = $6;
     label$28 : {
      if (HEAP32[$1 + 8 >> 2] != ($6 | 0)) {
       break label$28;
      }
      $12 = $6 ? $6 << 1 : 1;
      if (($6 | 0) >= ($12 | 0)) {
       break label$28;
      }
      $4 = 0;
      $9 = 0;
      if ($12) {
       $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($12 << 4, 16);
       $6 = HEAP32[$1 + 4 >> 2];
      }
      if (($6 | 0) >= 1) {
       while (1) {
        $7 = $4 << 4;
        $5 = $7 + $9 | 0;
        $7 = HEAP32[$1 + 12 >> 2] + $7 | 0;
        $10 = HEAP32[$7 >> 2];
        $11 = HEAP32[$7 + 4 >> 2];
        HEAP32[$5 >> 2] = $10;
        HEAP32[$5 + 4 >> 2] = $11;
        $10 = HEAP32[$7 + 12 >> 2];
        $11 = HEAP32[$7 + 8 >> 2];
        HEAP32[$5 + 8 >> 2] = $11;
        HEAP32[$5 + 12 >> 2] = $10;
        $4 = $4 + 1 | 0;
        if (($6 | 0) != ($4 | 0)) {
         continue;
        }
        break;
       }
      }
      $4 = HEAP32[$1 + 12 >> 2];
      if ($4) {
       if (HEAPU8[$1 + 16 | 0]) {
        btAlignedFreeInternal_28void__29($4);
       }
       HEAP32[$1 + 12 >> 2] = 0;
      }
      HEAP32[$1 + 12 >> 2] = $9;
      HEAP8[$1 + 16 | 0] = 1;
      HEAP32[$1 + 8 >> 2] = $12;
      $6 = HEAP32[$1 + 4 >> 2];
     }
     $4 = HEAP32[$1 + 12 >> 2] + ($6 << 4) | 0;
     HEAP32[$4 + 12 >> 2] = $22;
     HEAPF32[$4 + 8 >> 2] = $21;
     HEAPF32[$4 + 4 >> 2] = $20;
     HEAPF32[$4 >> 2] = $19;
    }
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
   }
   $13 = $13 + 1 | 0;
   if (($24 | 0) == ($13 | 0)) {
    break label$1;
   }
   $25 = HEAPF32[$2 + 8 >> 2];
   $15 = HEAPF32[$2 + 4 >> 2];
   $14 = HEAPF32[$2 >> 2];
   $4 = HEAP32[$0 + 12 >> 2];
   $8 = $23;
   $18 = $21;
   $17 = $20;
   $16 = $19;
   continue;
  }
 }
}
function btCollisionWorld__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0;
 $6 = global$0 - 400 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 $19 = CProfileSample__CProfileSample_28char_20const__29($6 + 392 | 0, 7909);
 $7 = $2 + 8 | 0;
 $8 = HEAP32[$7 >> 2];
 $9 = HEAP32[$7 + 4 >> 2];
 HEAP32[$6 + 336 >> 2] = $8;
 HEAP32[$6 + 340 >> 2] = $9;
 $7 = $2;
 $9 = HEAP32[$7 >> 2];
 $8 = HEAP32[$7 + 4 >> 2];
 HEAP32[$6 + 328 >> 2] = $9;
 HEAP32[$6 + 332 >> 2] = $8;
 $7 = $7 + 24 | 0;
 $8 = HEAP32[$7 >> 2];
 $9 = HEAP32[$7 + 4 >> 2];
 HEAP32[$6 + 352 >> 2] = $8;
 HEAP32[$6 + 356 >> 2] = $9;
 $7 = $2;
 $9 = HEAP32[$7 + 16 >> 2];
 $8 = HEAP32[$7 + 20 >> 2];
 HEAP32[$6 + 344 >> 2] = $9;
 HEAP32[$6 + 348 >> 2] = $8;
 $7 = $7 + 40 | 0;
 $8 = HEAP32[$7 >> 2];
 $9 = HEAP32[$7 + 4 >> 2];
 HEAP32[$6 + 368 >> 2] = $8;
 HEAP32[$6 + 372 >> 2] = $9;
 $7 = $2;
 $9 = HEAP32[$7 + 32 >> 2];
 $8 = HEAP32[$7 + 36 >> 2];
 HEAP32[$6 + 360 >> 2] = $9;
 HEAP32[$6 + 364 >> 2] = $8;
 $7 = $7 + 56 | 0;
 $8 = HEAP32[$7 >> 2];
 $9 = HEAP32[$7 + 4 >> 2];
 HEAP32[$6 + 384 >> 2] = $8;
 HEAP32[$6 + 388 >> 2] = $9;
 $7 = $2;
 $9 = HEAP32[$7 + 48 >> 2];
 $8 = HEAP32[$7 + 52 >> 2];
 HEAP32[$6 + 376 >> 2] = $9;
 HEAP32[$6 + 380 >> 2] = $8;
 $7 = $3 + 8 | 0;
 $8 = HEAP32[$7 >> 2];
 $9 = HEAP32[$7 + 4 >> 2];
 HEAP32[$6 + 272 >> 2] = $8;
 HEAP32[$6 + 276 >> 2] = $9;
 $7 = $3;
 $9 = HEAP32[$7 >> 2];
 $8 = HEAP32[$7 + 4 >> 2];
 HEAP32[$6 + 264 >> 2] = $9;
 HEAP32[$6 + 268 >> 2] = $8;
 $7 = $7 + 24 | 0;
 $8 = HEAP32[$7 >> 2];
 $9 = HEAP32[$7 + 4 >> 2];
 HEAP32[$6 + 288 >> 2] = $8;
 HEAP32[$6 + 292 >> 2] = $9;
 $7 = $3;
 $9 = HEAP32[$7 + 16 >> 2];
 $8 = HEAP32[$7 + 20 >> 2];
 HEAP32[$6 + 280 >> 2] = $9;
 HEAP32[$6 + 284 >> 2] = $8;
 $7 = $7 + 40 | 0;
 $8 = HEAP32[$7 >> 2];
 $9 = HEAP32[$7 + 4 >> 2];
 HEAP32[$6 + 304 >> 2] = $8;
 HEAP32[$6 + 308 >> 2] = $9;
 $7 = $3;
 $9 = HEAP32[$7 + 32 >> 2];
 $8 = HEAP32[$7 + 36 >> 2];
 HEAP32[$6 + 296 >> 2] = $9;
 HEAP32[$6 + 300 >> 2] = $8;
 $7 = $7 + 56 | 0;
 $8 = HEAP32[$7 >> 2];
 $9 = HEAP32[$7 + 4 >> 2];
 HEAP32[$6 + 320 >> 2] = $8;
 HEAP32[$6 + 324 >> 2] = $9;
 $7 = $3;
 $9 = HEAP32[$7 + 48 >> 2];
 $8 = HEAP32[$7 + 52 >> 2];
 HEAP32[$6 + 312 >> 2] = $9;
 HEAP32[$6 + 316 >> 2] = $8;
 btTransformUtil__calculateDiffAxisAngle_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20float__29($6 + 328 | 0, $6 + 264 | 0, $6, $6 + 248 | 0);
 HEAP32[$6 + 228 >> 2] = 0;
 $10 = HEAPF32[$6 + 248 >> 2];
 HEAPF32[$6 + 224 >> 2] = $10 * HEAPF32[$6 + 8 >> 2];
 HEAPF32[$6 + 220 >> 2] = $10 * HEAPF32[$6 + 4 >> 2];
 HEAPF32[$6 + 216 >> 2] = $10 * HEAPF32[$6 >> 2];
 HEAP32[$6 + 208 >> 2] = 0;
 HEAP32[$6 + 212 >> 2] = 0;
 HEAP32[$6 + 200 >> 2] = 0;
 HEAP32[$6 + 204 >> 2] = 0;
 HEAP32[$6 + 56 >> 2] = 0;
 HEAP32[$6 + 60 >> 2] = 0;
 HEAP32[$6 + 48 >> 2] = 0;
 HEAP32[$6 + 52 >> 2] = 0;
 btMatrix3x3__getRotation_28btQuaternion__29_20const($6 + 328 | 0, $6 + 248 | 0);
 HEAP32[$6 + 44 >> 2] = 0;
 HEAP32[$6 + 28 >> 2] = 0;
 $10 = HEAPF32[$6 + 248 >> 2];
 $11 = HEAPF32[$6 + 252 >> 2];
 $13 = HEAPF32[$6 + 256 >> 2];
 $12 = HEAPF32[$6 + 260 >> 2];
 $14 = Math_fround(Math_fround(2) / Math_fround(Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($11 * $11)) + Math_fround($13 * $13)) + Math_fround($12 * $12)));
 $16 = Math_fround($13 * $14);
 $15 = Math_fround($11 * $16);
 $17 = Math_fround($10 * $14);
 $18 = Math_fround($12 * $17);
 HEAPF32[$6 + 36 >> 2] = $15 + $18;
 HEAPF32[$6 + 24 >> 2] = $15 - $18;
 $15 = Math_fround($10 * $17);
 $14 = Math_fround($11 * $14);
 $11 = Math_fround($11 * $14);
 HEAPF32[$6 + 40 >> 2] = Math_fround(1) - Math_fround($15 + $11);
 $13 = Math_fround($13 * $16);
 HEAPF32[$6 + 20 >> 2] = Math_fround(1) - Math_fround($15 + $13);
 HEAP32[$6 + 12 >> 2] = 0;
 $15 = Math_fround($10 * $16);
 $17 = Math_fround($12 * $14);
 HEAPF32[$6 + 32 >> 2] = $15 - $17;
 $10 = Math_fround($10 * $14);
 $12 = Math_fround($12 * $16);
 HEAPF32[$6 + 16 >> 2] = $10 + $12;
 HEAPF32[$6 + 8 >> 2] = $15 + $17;
 HEAPF32[$6 + 4 >> 2] = $10 - $12;
 HEAPF32[$6 >> 2] = Math_fround(1) - Math_fround($11 + $13);
 btCollisionShape__calculateTemporalAabb_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20btVector3__2c_20btVector3__29_20const($1, $6, $6 + 200 | 0, $6 + 216 | 0, Math_fround(1), $6 + 248 | 0, $6 + 232 | 0);
 HEAP32[$6 >> 2] = 9552;
 $7 = $2;
 $8 = HEAP32[$7 + 8 >> 2];
 $9 = HEAP32[$7 + 12 >> 2];
 HEAP32[$6 + 44 >> 2] = $8;
 HEAP32[$6 + 48 >> 2] = $9;
 $8 = HEAP32[$7 + 4 >> 2];
 $9 = HEAP32[$7 >> 2];
 HEAP32[$6 + 36 >> 2] = $9;
 HEAP32[$6 + 40 >> 2] = $8;
 $9 = HEAP32[$7 + 28 >> 2];
 $8 = HEAP32[$7 + 24 >> 2];
 HEAP32[$6 + 60 >> 2] = $8;
 HEAP32[$6 + 64 >> 2] = $9;
 $8 = HEAP32[$7 + 20 >> 2];
 $9 = HEAP32[$7 + 16 >> 2];
 HEAP32[$6 + 52 >> 2] = $9;
 HEAP32[$6 + 56 >> 2] = $8;
 $9 = HEAP32[$7 + 44 >> 2];
 $8 = HEAP32[$7 + 40 >> 2];
 HEAP32[$6 + 76 >> 2] = $8;
 HEAP32[$6 + 80 >> 2] = $9;
 $8 = HEAP32[$7 + 36 >> 2];
 $9 = HEAP32[$7 + 32 >> 2];
 HEAP32[$6 + 68 >> 2] = $9;
 HEAP32[$6 + 72 >> 2] = $8;
 $9 = HEAP32[$7 + 60 >> 2];
 $8 = HEAP32[$7 + 56 >> 2];
 $2 = $8;
 $8 = $6 + 92 | 0;
 HEAP32[$8 >> 2] = $2;
 HEAP32[$8 + 4 >> 2] = $9;
 $8 = HEAP32[$7 + 52 >> 2];
 $9 = HEAP32[$7 + 48 >> 2];
 $2 = $9;
 $9 = $6 + 84 | 0;
 HEAP32[$9 >> 2] = $2;
 HEAP32[$9 + 4 >> 2] = $8;
 $7 = $3;
 $8 = HEAP32[$7 + 8 >> 2];
 $9 = HEAP32[$7 + 12 >> 2];
 HEAP32[$6 + 108 >> 2] = $8;
 HEAP32[$6 + 112 >> 2] = $9;
 $8 = HEAP32[$7 + 4 >> 2];
 $9 = HEAP32[$7 >> 2];
 HEAP32[$6 + 100 >> 2] = $9;
 HEAP32[$6 + 104 >> 2] = $8;
 $9 = HEAP32[$7 + 20 >> 2];
 $8 = HEAP32[$7 + 16 >> 2];
 HEAP32[$6 + 116 >> 2] = $8;
 HEAP32[$6 + 120 >> 2] = $9;
 $8 = HEAP32[$7 + 28 >> 2];
 $9 = HEAP32[$7 + 24 >> 2];
 HEAP32[$6 + 124 >> 2] = $9;
 HEAP32[$6 + 128 >> 2] = $8;
 $9 = HEAP32[$7 + 44 >> 2];
 $8 = HEAP32[$7 + 40 >> 2];
 HEAP32[$6 + 140 >> 2] = $8;
 HEAP32[$6 + 144 >> 2] = $9;
 $8 = HEAP32[$7 + 36 >> 2];
 $9 = HEAP32[$7 + 32 >> 2];
 HEAP32[$6 + 132 >> 2] = $9;
 HEAP32[$6 + 136 >> 2] = $8;
 $9 = HEAP32[$7 + 52 >> 2];
 $8 = HEAP32[$7 + 48 >> 2];
 $3 = $8;
 $2 = $6 + 148 | 0;
 $8 = $2;
 HEAP32[$8 >> 2] = $3;
 HEAP32[$8 + 4 >> 2] = $9;
 $8 = HEAP32[$7 + 60 >> 2];
 $9 = HEAP32[$7 + 56 >> 2];
 $2 = $9;
 $3 = $6 + 156 | 0;
 $9 = $3;
 HEAP32[$9 >> 2] = $2;
 HEAP32[$9 + 4 >> 2] = $8;
 HEAP32[$6 + 184 >> 2] = $4;
 HEAPF32[$6 + 188 >> 2] = $5;
 HEAP32[$6 + 192 >> 2] = $1;
 HEAP32[$6 + 180 >> 2] = $0;
 $11 = Math_fround(HEAPF32[$6 + 148 >> 2] - HEAPF32[$6 + 84 >> 2]);
 $12 = Math_fround(HEAPF32[$6 + 152 >> 2] - HEAPF32[$6 + 88 >> 2]);
 $10 = Math_fround(HEAPF32[$6 + 156 >> 2] - HEAPF32[$6 + 92 >> 2]);
 $13 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($11 * $11) + Math_fround($12 * $12)) + Math_fround($10 * $10)))));
 $16 = Math_fround($10 * $13);
 $5 = $16 == Math_fround(0) ? Math_fround(0xde0b6b000000000) : Math_fround(Math_fround(1) / $16);
 HEAPF32[$6 + 12 >> 2] = $5;
 $14 = Math_fround($12 * $13);
 $15 = $14 == Math_fround(0) ? Math_fround(0xde0b6b000000000) : Math_fround(Math_fround(1) / $14);
 HEAPF32[$6 + 8 >> 2] = $15;
 HEAP32[$6 + 28 >> 2] = $5 < Math_fround(0);
 HEAP32[$6 + 24 >> 2] = $15 < Math_fround(0);
 $5 = Math_fround($10 * $16);
 $10 = Math_fround($11 * $13);
 HEAPF32[$6 + 32 >> 2] = $5 + Math_fround(Math_fround($11 * $10) + Math_fround($12 * $14));
 $10 = $10 == Math_fround(0) ? Math_fround(0xde0b6b000000000) : Math_fround(Math_fround(1) / $10);
 HEAPF32[$6 + 4 >> 2] = $10;
 HEAP32[$6 + 20 >> 2] = $10 < Math_fround(0);
 $3 = HEAP32[$0 + 68 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 24 >> 2]]($3, $6 + 376 | 0, $6 + 312 | 0, $6, $6 + 248 | 0, $6 + 232 | 0);
 CProfileSample___CProfileSample_28_29($19);
 $0 = $6 + 400 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionWorld__debugDrawWorld_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0);
 $1 = global$0 - 192 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 label$2 : {
  if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
   break label$2;
  }
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 100 >> 2]]($3);
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($1 + 80 | 0, $3);
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
  label$3 : {
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 56 >> 2]]($3) & 8)) {
    break label$3;
   }
   $3 = HEAP32[$0 + 24 >> 2];
   if (!$3) {
    break label$3;
   }
   $10 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 36 >> 2]]($3) | 0;
   if (($10 | 0) < 1) {
    break label$3;
   }
   $13 = $1 + 176 | 0;
   while (1) {
    $6 = 0;
    $3 = HEAP32[$0 + 24 >> 2];
    $11 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 40 >> 2]]($3, $9) | 0;
    $12 = HEAP32[$11 + 844 >> 2];
    if (($12 | 0) > 0) {
     while (1) {
      $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      $3 = Math_imul($6, 208) + $11 | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 40 >> 2]]($2, $3 + 36 | 0, $3 + 68 | 0, HEAPF32[$3 + 84 >> 2], HEAP32[$3 + 168 >> 2], $13);
      $6 = $6 + 1 | 0;
      if (($12 | 0) != ($6 | 0)) {
       continue;
      }
      break;
     }
    }
    $9 = $9 + 1 | 0;
    if (($10 | 0) != ($9 | 0)) {
     continue;
    }
    break;
   }
  }
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
  if (!(FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 56 >> 2]]($3) & 3) | HEAP32[$0 + 8 >> 2] < 1) {
   break label$2;
  }
  $11 = $1 + 160 | 0;
  $12 = $1 + 96 | 0;
  $13 = $1 + 112 | 0;
  $9 = $1 + 128 | 0;
  $10 = $1 + 144 | 0;
  $3 = 0;
  while (1) {
   $6 = HEAP32[HEAP32[$0 + 16 >> 2] + ($3 << 2) >> 2];
   label$8 : {
    if (HEAPU8[$6 + 204 | 0] & 32) {
     break label$8;
    }
    label$9 : {
     if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
      break label$9;
     }
     $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     if (!(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 56 >> 2]]($2) & 1)) {
      break label$9;
     }
     HEAP32[$1 + 72 >> 2] = 1053609165;
     HEAP32[$1 + 76 >> 2] = 0;
     HEAP32[$1 + 64 >> 2] = 1053609165;
     HEAP32[$1 + 68 >> 2] = 1053609165;
     $2 = HEAP32[$6 + 220 >> 2] + -1 | 0;
     label$10 : {
      if ($2 >>> 0 <= 4) {
       label$12 : {
        switch ($2 - 1 | 0) {
        default:
         $4 = HEAP32[$1 + 92 >> 2];
         $5 = HEAP32[$1 + 88 >> 2];
         HEAP32[$1 + 72 >> 2] = $5;
         HEAP32[$1 + 76 >> 2] = $4;
         $5 = HEAP32[$1 + 84 >> 2];
         $4 = HEAP32[$1 + 80 >> 2];
         HEAP32[$1 + 64 >> 2] = $4;
         HEAP32[$1 + 68 >> 2] = $5;
         $2 = $1;
         break label$10;
        case 0:
         $2 = $12;
         $5 = HEAP32[$2 + 8 >> 2];
         $4 = HEAP32[$2 + 12 >> 2];
         HEAP32[$1 + 72 >> 2] = $5;
         HEAP32[$1 + 76 >> 2] = $4;
         $5 = HEAP32[$2 + 4 >> 2];
         $4 = HEAP32[$2 >> 2];
         HEAP32[$1 + 64 >> 2] = $4;
         HEAP32[$1 + 68 >> 2] = $5;
         $2 = $1;
         break label$10;
        case 1:
         $2 = $13;
         $5 = HEAP32[$2 + 8 >> 2];
         $4 = HEAP32[$2 + 12 >> 2];
         HEAP32[$1 + 72 >> 2] = $5;
         HEAP32[$1 + 76 >> 2] = $4;
         $5 = HEAP32[$2 + 4 >> 2];
         $4 = HEAP32[$2 >> 2];
         HEAP32[$1 + 64 >> 2] = $4;
         HEAP32[$1 + 68 >> 2] = $5;
         $2 = $1;
         break label$10;
        case 2:
         $2 = $9;
         $5 = HEAP32[$2 + 8 >> 2];
         $4 = HEAP32[$2 + 12 >> 2];
         HEAP32[$1 + 72 >> 2] = $5;
         HEAP32[$1 + 76 >> 2] = $4;
         $5 = HEAP32[$2 + 4 >> 2];
         $4 = HEAP32[$2 >> 2];
         HEAP32[$1 + 64 >> 2] = $4;
         HEAP32[$1 + 68 >> 2] = $5;
         $2 = $1;
         break label$10;
        case 3:
         break label$12;
        }
       }
       $2 = $10;
       $5 = HEAP32[$2 + 8 >> 2];
       $4 = HEAP32[$2 + 12 >> 2];
       HEAP32[$1 + 72 >> 2] = $5;
       HEAP32[$1 + 76 >> 2] = $4;
       $5 = HEAP32[$2 + 4 >> 2];
       $4 = HEAP32[$2 >> 2];
       HEAP32[$1 + 64 >> 2] = $4;
       HEAP32[$1 + 68 >> 2] = $5;
       $2 = $1;
       break label$10;
      }
      HEAP32[$1 + 72 >> 2] = 1050253722;
      HEAP32[$1 + 76 >> 2] = 0;
      HEAP32[$1 + 64 >> 2] = 1050253722;
      HEAP32[$1 + 68 >> 2] = 1050253722;
      $2 = $1;
     }
     if (HEAP8[$6 + 205 | 0] & 1) {
      $2 = $6;
      $5 = HEAP32[$2 + 316 >> 2];
      $4 = HEAP32[$2 + 320 >> 2];
      HEAP32[$1 + 72 >> 2] = $5;
      HEAP32[$1 + 76 >> 2] = $4;
      $5 = HEAP32[$2 + 312 >> 2];
      $4 = HEAP32[$2 + 308 >> 2];
      HEAP32[$1 + 64 >> 2] = $4;
      HEAP32[$1 + 68 >> 2] = $5;
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $6 + 4 | 0, HEAP32[$6 + 192 >> 2], $1 - -64 | 0);
    }
    $2 = HEAP32[$0 + 72 >> 2];
    if (!$2) {
     break label$8;
    }
    if (!(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 56 >> 2]]($2) & 2)) {
     break label$8;
    }
    $2 = $11;
    $5 = HEAP32[$2 + 8 >> 2];
    $4 = HEAP32[$2 + 12 >> 2];
    HEAP32[$1 + 40 >> 2] = $5;
    HEAP32[$1 + 44 >> 2] = $4;
    $5 = HEAP32[$2 + 4 >> 2];
    $4 = HEAP32[$2 >> 2];
    HEAP32[$1 + 32 >> 2] = $4;
    HEAP32[$1 + 36 >> 2] = $5;
    $2 = HEAP32[$6 + 192 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $6 + 4 | 0, $1 - -64 | 0, $1 + 48 | 0);
    $7 = HEAPF32[4966];
    HEAPF32[$1 + 64 >> 2] = HEAPF32[$1 + 64 >> 2] - $7;
    HEAPF32[$1 + 68 >> 2] = HEAPF32[$1 + 68 >> 2] - $7;
    HEAPF32[$1 + 72 >> 2] = HEAPF32[$1 + 72 >> 2] - $7;
    HEAPF32[$1 + 48 >> 2] = $7 + HEAPF32[$1 + 48 >> 2];
    HEAPF32[$1 + 52 >> 2] = $7 + HEAPF32[$1 + 52 >> 2];
    HEAPF32[$1 + 56 >> 2] = $7 + HEAPF32[$1 + 56 >> 2];
    label$18 : {
     if (HEAPU8[$6 + 204 | 0] & 3 | (!HEAPU8[$0 + 44 | 0] | HEAP32[$6 + 252 >> 2] != 2)) {
      break label$18;
     }
     $2 = HEAP32[$6 + 192 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $6 + 68 | 0, $1 + 16 | 0, $1);
     $8 = Math_fround(HEAPF32[$1 + 16 >> 2] - $7);
     HEAPF32[$1 + 16 >> 2] = $8;
     $14 = Math_fround(HEAPF32[$1 + 20 >> 2] - $7);
     HEAPF32[$1 + 20 >> 2] = $14;
     $15 = Math_fround(HEAPF32[$1 + 24 >> 2] - $7);
     HEAPF32[$1 + 24 >> 2] = $15;
     $16 = Math_fround($7 + HEAPF32[$1 >> 2]);
     HEAPF32[$1 >> 2] = $16;
     $17 = Math_fround($7 + HEAPF32[$1 + 4 >> 2]);
     HEAPF32[$1 + 4 >> 2] = $17;
     $7 = Math_fround($7 + HEAPF32[$1 + 8 >> 2]);
     HEAPF32[$1 + 8 >> 2] = $7;
     if (!!($8 < HEAPF32[$1 + 64 >> 2])) {
      HEAPF32[$1 + 64 >> 2] = $8;
     }
     if (!!($14 < HEAPF32[$1 + 68 >> 2])) {
      HEAPF32[$1 + 68 >> 2] = $14;
     }
     if (!!($15 < HEAPF32[$1 + 72 >> 2])) {
      HEAPF32[$1 + 72 >> 2] = $15;
     }
     $8 = HEAPF32[$1 + 28 >> 2];
     if (!!($8 < HEAPF32[$1 + 76 >> 2])) {
      HEAPF32[$1 + 76 >> 2] = $8;
     }
     if (!!(HEAPF32[$1 + 48 >> 2] < $16)) {
      HEAPF32[$1 + 48 >> 2] = $16;
     }
     if (!!(HEAPF32[$1 + 52 >> 2] < $17)) {
      HEAPF32[$1 + 52 >> 2] = $17;
     }
     if (!!(HEAPF32[$1 + 56 >> 2] < $7)) {
      HEAPF32[$1 + 56 >> 2] = $7;
     }
     $7 = HEAPF32[$1 + 12 >> 2];
     if (!(HEAPF32[$1 + 60 >> 2] < $7)) {
      break label$18;
     }
     HEAPF32[$1 + 60 >> 2] = $7;
    }
    $6 = HEAP32[$0 + 72 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 60 >> 2]]($6, $1 - -64 | 0, $1 + 48 | 0, $1 + 32 | 0);
   }
   $3 = $3 + 1 | 0;
   if (($3 | 0) < HEAP32[$0 + 8 >> 2]) {
    continue;
   }
   break;
  }
 }
 $0 = $1 + 192 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function dlfree($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 label$1 : {
  label$2 : {
   if (!$0) {
    break label$2;
   }
   $3 = $0 + -8 | 0;
   $1 = HEAP32[$0 + -4 >> 2];
   $0 = $1 & -8;
   $5 = $3 + $0 | 0;
   label$3 : {
    if ($1 & 1) {
     break label$3;
    }
    if (!($1 & 3)) {
     break label$2;
    }
    $1 = HEAP32[$3 >> 2];
    $3 = $3 - $1 | 0;
    $4 = HEAP32[6269];
    if ($3 >>> 0 < $4 >>> 0) {
     break label$2;
    }
    $0 = $0 + $1 | 0;
    if (HEAP32[6270] != ($3 | 0)) {
     if ($1 >>> 0 <= 255) {
      $7 = $1 >>> 3 | 0;
      $1 = ($7 << 3) + 25100 | 0;
      $6 = HEAP32[$3 + 8 >> 2];
      $2 = HEAP32[$3 + 12 >> 2];
      if (($6 | 0) == ($2 | 0)) {
       HEAP32[6265] = HEAP32[6265] & __wasm_rotl_i32(-2, $7);
       break label$3;
      }
      HEAP32[$6 + 12 >> 2] = $2;
      HEAP32[$2 + 8 >> 2] = $6;
      break label$3;
     }
     $7 = HEAP32[$3 + 24 >> 2];
     $2 = HEAP32[$3 + 12 >> 2];
     label$7 : {
      if (($2 | 0) != ($3 | 0)) {
       $1 = HEAP32[$3 + 8 >> 2];
       HEAP32[$1 + 12 >> 2] = $2;
       HEAP32[$2 + 8 >> 2] = $1;
       break label$7;
      }
      label$10 : {
       $1 = $3 + 20 | 0;
       $4 = HEAP32[$1 >> 2];
       if ($4) {
        break label$10;
       }
       $1 = $3 + 16 | 0;
       $4 = HEAP32[$1 >> 2];
       if ($4) {
        break label$10;
       }
       $2 = 0;
       break label$7;
      }
      while (1) {
       $6 = $1;
       $2 = $4;
       $1 = $2 + 20 | 0;
       $4 = HEAP32[$1 >> 2];
       if ($4) {
        continue;
       }
       $1 = $2 + 16 | 0;
       $4 = HEAP32[$2 + 16 >> 2];
       if ($4) {
        continue;
       }
       break;
      }
      HEAP32[$6 >> 2] = 0;
     }
     if (!$7) {
      break label$3;
     }
     $4 = HEAP32[$3 + 28 >> 2];
     $1 = ($4 << 2) + 25364 | 0;
     label$12 : {
      if (HEAP32[$1 >> 2] == ($3 | 0)) {
       HEAP32[$1 >> 2] = $2;
       if ($2) {
        break label$12;
       }
       HEAP32[6266] = HEAP32[6266] & __wasm_rotl_i32(-2, $4);
       break label$3;
      }
      HEAP32[(HEAP32[$7 + 16 >> 2] == ($3 | 0) ? 16 : 20) + $7 >> 2] = $2;
      if (!$2) {
       break label$3;
      }
     }
     HEAP32[$2 + 24 >> 2] = $7;
     $1 = HEAP32[$3 + 16 >> 2];
     if ($1) {
      HEAP32[$2 + 16 >> 2] = $1;
      HEAP32[$1 + 24 >> 2] = $2;
     }
     $1 = HEAP32[$3 + 20 >> 2];
     if (!$1) {
      break label$3;
     }
     HEAP32[$2 + 20 >> 2] = $1;
     HEAP32[$1 + 24 >> 2] = $2;
     break label$3;
    }
    $1 = HEAP32[$5 + 4 >> 2];
    if (($1 & 3) != 3) {
     break label$3;
    }
    HEAP32[6267] = $0;
    HEAP32[$5 + 4 >> 2] = $1 & -2;
    break label$1;
   }
   if ($5 >>> 0 <= $3 >>> 0) {
    break label$2;
   }
   $1 = HEAP32[$5 + 4 >> 2];
   if (!($1 & 1)) {
    break label$2;
   }
   label$15 : {
    if (!($1 & 2)) {
     if (HEAP32[6271] == ($5 | 0)) {
      HEAP32[6271] = $3;
      $0 = HEAP32[6268] + $0 | 0;
      HEAP32[6268] = $0;
      HEAP32[$3 + 4 >> 2] = $0 | 1;
      if (HEAP32[6270] != ($3 | 0)) {
       break label$2;
      }
      HEAP32[6267] = 0;
      HEAP32[6270] = 0;
      return;
     }
     if (HEAP32[6270] == ($5 | 0)) {
      HEAP32[6270] = $3;
      $0 = HEAP32[6267] + $0 | 0;
      HEAP32[6267] = $0;
      break label$1;
     }
     $0 = ($1 & -8) + $0 | 0;
     label$19 : {
      if ($1 >>> 0 <= 255) {
       $4 = HEAP32[$5 + 12 >> 2];
       $2 = HEAP32[$5 + 8 >> 2];
       $5 = $1 >>> 3 | 0;
       if (($2 | 0) == ($4 | 0)) {
        HEAP32[6265] = HEAP32[6265] & __wasm_rotl_i32(-2, $5);
        break label$19;
       }
       HEAP32[$2 + 12 >> 2] = $4;
       HEAP32[$4 + 8 >> 2] = $2;
       break label$19;
      }
      $7 = HEAP32[$5 + 24 >> 2];
      $2 = HEAP32[$5 + 12 >> 2];
      label$24 : {
       if (($5 | 0) != ($2 | 0)) {
        $1 = HEAP32[$5 + 8 >> 2];
        HEAP32[$1 + 12 >> 2] = $2;
        HEAP32[$2 + 8 >> 2] = $1;
        break label$24;
       }
       label$27 : {
        $1 = $5 + 20 | 0;
        $4 = HEAP32[$1 >> 2];
        if ($4) {
         break label$27;
        }
        $1 = $5 + 16 | 0;
        $4 = HEAP32[$1 >> 2];
        if ($4) {
         break label$27;
        }
        $2 = 0;
        break label$24;
       }
       while (1) {
        $6 = $1;
        $2 = $4;
        $1 = $2 + 20 | 0;
        $4 = HEAP32[$1 >> 2];
        if ($4) {
         continue;
        }
        $1 = $2 + 16 | 0;
        $4 = HEAP32[$2 + 16 >> 2];
        if ($4) {
         continue;
        }
        break;
       }
       HEAP32[$6 >> 2] = 0;
      }
      if (!$7) {
       break label$19;
      }
      $4 = HEAP32[$5 + 28 >> 2];
      $1 = ($4 << 2) + 25364 | 0;
      label$29 : {
       if (HEAP32[$1 >> 2] == ($5 | 0)) {
        HEAP32[$1 >> 2] = $2;
        if ($2) {
         break label$29;
        }
        HEAP32[6266] = HEAP32[6266] & __wasm_rotl_i32(-2, $4);
        break label$19;
       }
       HEAP32[(HEAP32[$7 + 16 >> 2] == ($5 | 0) ? 16 : 20) + $7 >> 2] = $2;
       if (!$2) {
        break label$19;
       }
      }
      HEAP32[$2 + 24 >> 2] = $7;
      $1 = HEAP32[$5 + 16 >> 2];
      if ($1) {
       HEAP32[$2 + 16 >> 2] = $1;
       HEAP32[$1 + 24 >> 2] = $2;
      }
      $1 = HEAP32[$5 + 20 >> 2];
      if (!$1) {
       break label$19;
      }
      HEAP32[$2 + 20 >> 2] = $1;
      HEAP32[$1 + 24 >> 2] = $2;
     }
     HEAP32[$3 + 4 >> 2] = $0 | 1;
     HEAP32[$0 + $3 >> 2] = $0;
     if (HEAP32[6270] != ($3 | 0)) {
      break label$15;
     }
     HEAP32[6267] = $0;
     return;
    }
    HEAP32[$5 + 4 >> 2] = $1 & -2;
    HEAP32[$3 + 4 >> 2] = $0 | 1;
    HEAP32[$0 + $3 >> 2] = $0;
   }
   if ($0 >>> 0 <= 255) {
    $1 = $0 >>> 3 | 0;
    $0 = ($1 << 3) + 25100 | 0;
    $1 = 1 << $1;
    $4 = HEAP32[6265];
    label$33 : {
     if (!($1 & $4)) {
      HEAP32[6265] = $1 | $4;
      $1 = $0;
      break label$33;
     }
     $1 = HEAP32[$0 + 8 >> 2];
    }
    HEAP32[$0 + 8 >> 2] = $3;
    HEAP32[$1 + 12 >> 2] = $3;
    HEAP32[$3 + 12 >> 2] = $0;
    HEAP32[$3 + 8 >> 2] = $1;
    return;
   }
   HEAP32[$3 + 16 >> 2] = 0;
   HEAP32[$3 + 20 >> 2] = 0;
   $6 = $3;
   $4 = $0 >>> 8 | 0;
   $1 = 0;
   label$35 : {
    if (!$4) {
     break label$35;
    }
    $1 = 31;
    if ($0 >>> 0 > 16777215) {
     break label$35;
    }
    $1 = $4 + 1048320 >>> 16 & 8;
    $4 = $4 << $1;
    $2 = $4;
    $4 = $4 + 520192 >>> 16 & 4;
    $2 = $2 << $4;
    $5 = $2;
    $2 = $2 + 245760 >>> 16 & 2;
    $1 = ($5 << $2 >>> 15 | 0) - ($1 | $4 | $2) | 0;
    $1 = ($1 << 1 | $0 >>> $1 + 21 & 1) + 28 | 0;
   }
   HEAP32[$6 + 28 >> 2] = $1;
   $4 = ($1 << 2) + 25364 | 0;
   label$36 : {
    label$37 : {
     $2 = HEAP32[6266];
     $5 = 1 << $1;
     label$38 : {
      if (!($2 & $5)) {
       HEAP32[6266] = $2 | $5;
       HEAP32[$4 >> 2] = $3;
       break label$38;
      }
      $1 = $0 << (($1 | 0) == 31 ? 0 : 25 - ($1 >>> 1 | 0) | 0);
      $2 = HEAP32[$4 >> 2];
      while (1) {
       $4 = $2;
       if ((HEAP32[$2 + 4 >> 2] & -8) == ($0 | 0)) {
        break label$37;
       }
       $2 = $1 >>> 29 | 0;
       $1 = $1 << 1;
       $6 = ($2 & 4) + $4 | 0;
       $5 = $6 + 16 | 0;
       $2 = HEAP32[$5 >> 2];
       if ($2) {
        continue;
       }
       break;
      }
      HEAP32[$6 + 16 >> 2] = $3;
     }
     HEAP32[$3 + 24 >> 2] = $4;
     HEAP32[$3 + 12 >> 2] = $3;
     HEAP32[$3 + 8 >> 2] = $3;
     break label$36;
    }
    $0 = HEAP32[$4 + 8 >> 2];
    HEAP32[$0 + 12 >> 2] = $3;
    HEAP32[$4 + 8 >> 2] = $3;
    HEAP32[$3 + 24 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = $4;
    HEAP32[$3 + 8 >> 2] = $0;
   }
   $3 = HEAP32[6273] + -1 | 0;
   HEAP32[6273] = $3;
   if ($3) {
    break label$2;
   }
   $3 = 25516;
   while (1) {
    $0 = HEAP32[$3 >> 2];
    $3 = $0 + 8 | 0;
    if ($0) {
     continue;
    }
    break;
   }
   HEAP32[6273] = -1;
  }
  return;
 }
 HEAP32[$3 + 4 >> 2] = $0 | 1;
 HEAP32[$0 + $3 >> 2] = $0;
}
function btCompoundShape__addChildShape_28btTransform_20const__2c_20btCollisionShape__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0);
 $3 = global$0 - 144 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$0 + 72 >> 2] = HEAP32[$0 + 72 >> 2] + 1;
 HEAP32[$3 + 140 >> 2] = 0;
 $4 = HEAP32[$1 + 12 >> 2];
 $5 = HEAP32[$1 + 8 >> 2];
 HEAP32[$3 + 72 >> 2] = $5;
 HEAP32[$3 + 76 >> 2] = $4;
 $5 = HEAP32[$1 + 4 >> 2];
 $4 = HEAP32[$1 >> 2];
 HEAP32[$3 + 64 >> 2] = $4;
 HEAP32[$3 + 68 >> 2] = $5;
 $4 = HEAP32[$1 + 28 >> 2];
 $5 = HEAP32[$1 + 24 >> 2];
 HEAP32[$3 + 88 >> 2] = $5;
 HEAP32[$3 + 92 >> 2] = $4;
 $5 = HEAP32[$1 + 20 >> 2];
 $4 = HEAP32[$1 + 16 >> 2];
 HEAP32[$3 + 80 >> 2] = $4;
 HEAP32[$3 + 84 >> 2] = $5;
 $4 = HEAP32[$1 + 44 >> 2];
 $5 = HEAP32[$1 + 40 >> 2];
 HEAP32[$3 + 104 >> 2] = $5;
 HEAP32[$3 + 108 >> 2] = $4;
 $5 = HEAP32[$1 + 36 >> 2];
 $4 = HEAP32[$1 + 32 >> 2];
 HEAP32[$3 + 96 >> 2] = $4;
 HEAP32[$3 + 100 >> 2] = $5;
 $4 = HEAP32[$1 + 60 >> 2];
 $5 = HEAP32[$1 + 56 >> 2];
 HEAP32[$3 + 120 >> 2] = $5;
 HEAP32[$3 + 124 >> 2] = $4;
 $5 = HEAP32[$1 + 52 >> 2];
 $4 = HEAP32[$1 + 48 >> 2];
 HEAP32[$3 + 128 >> 2] = $2;
 HEAP32[$3 + 112 >> 2] = $4;
 HEAP32[$3 + 116 >> 2] = $5;
 HEAP32[$3 + 132 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAPF32[$3 + 136 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2);
 FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $1, $3 + 48 | 0, $3 + 32 | 0);
 $8 = HEAPF32[$3 + 48 >> 2];
 if (!!(HEAPF32[$0 + 36 >> 2] > $8)) {
  HEAPF32[$0 + 36 >> 2] = $8;
 }
 $8 = HEAPF32[$3 + 32 >> 2];
 if (!!(HEAPF32[$0 + 52 >> 2] < $8)) {
  HEAPF32[$0 + 52 >> 2] = $8;
 }
 $8 = HEAPF32[$3 + 52 >> 2];
 if (HEAPF32[$0 + 40 >> 2] > $8) {
  HEAPF32[$0 + 40 >> 2] = $8;
 }
 $8 = HEAPF32[$3 + 36 >> 2];
 if (!!(HEAPF32[$0 + 56 >> 2] < $8)) {
  HEAPF32[$0 + 56 >> 2] = $8;
 }
 $8 = HEAPF32[$3 + 56 >> 2];
 if (!!(HEAPF32[$0 + 44 >> 2] > $8)) {
  HEAPF32[$0 + 44 >> 2] = $8;
 }
 $8 = HEAPF32[$3 + 40 >> 2];
 if (!!(HEAPF32[$0 + 60 >> 2] < $8)) {
  HEAPF32[$0 + 60 >> 2] = $8;
 }
 $1 = HEAP32[$0 + 68 >> 2];
 if ($1) {
  $4 = HEAP32[$3 + 60 >> 2];
  $5 = HEAP32[$3 + 56 >> 2];
  HEAP32[$3 + 8 >> 2] = $5;
  HEAP32[$3 + 12 >> 2] = $4;
  $5 = HEAP32[$3 + 44 >> 2];
  $4 = HEAP32[$3 + 40 >> 2];
  HEAP32[$3 + 24 >> 2] = $4;
  HEAP32[$3 + 28 >> 2] = $5;
  $4 = HEAP32[$3 + 36 >> 2];
  $5 = HEAP32[$3 + 32 >> 2];
  HEAP32[$3 + 16 >> 2] = $5;
  HEAP32[$3 + 20 >> 2] = $4;
  $5 = HEAP32[$3 + 52 >> 2];
  $4 = HEAP32[$3 + 48 >> 2];
  HEAP32[$3 >> 2] = $4;
  HEAP32[$3 + 4 >> 2] = $5;
  HEAP32[$3 + 140 >> 2] = btDbvt__insert_28btDbvtAabbMm_20const__2c_20void__29($1, $3, HEAP32[$0 + 20 >> 2]);
 }
 btAlignedObjectArray_btCompoundShapeChild___push_back_28btCompoundShapeChild_20const__29($0 + 16 | 0, $3 - -64 | 0);
 $2 = HEAP32[$0 + 84 >> 2];
 label$9 : {
  if (($2 | 0) != HEAP32[$0 + 88 >> 2]) {
   break label$9;
  }
  $4 = $2 ? $2 << 1 : 1;
  if (($2 | 0) >= ($4 | 0)) {
   break label$9;
  }
  $1 = 0;
  if ($4) {
   $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2, 16);
   $2 = HEAP32[$0 + 84 >> 2];
  }
  $6 = HEAP32[$0 + 92 >> 2];
  label$11 : {
   label$12 : {
    if (($2 | 0) >= 1) {
     while (1) {
      $5 = $1 << 2;
      HEAP32[$5 + $7 >> 2] = HEAP32[$6 + $5 >> 2];
      $1 = $1 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue;
      }
      break label$12;
     }
    }
    if (!$6) {
     break label$11;
    }
   }
   if (HEAPU8[$0 + 96 | 0]) {
    btAlignedFreeInternal_28void__29($6);
    $2 = HEAP32[$0 + 84 >> 2];
   }
   HEAP32[$0 + 92 >> 2] = 0;
  }
  HEAP32[$0 + 92 >> 2] = $7;
  HEAP32[$0 + 88 >> 2] = $4;
  HEAP8[$0 + 96 | 0] = 1;
 }
 HEAP32[HEAP32[$0 + 92 >> 2] + ($2 << 2) >> 2] = 1056964608;
 HEAP32[$0 + 84 >> 2] = $2 + 1;
 $2 = HEAP32[$0 + 124 >> 2];
 label$16 : {
  if (($2 | 0) != HEAP32[$0 + 128 >> 2]) {
   break label$16;
  }
  $4 = $2 ? $2 << 1 : 1;
  if (($2 | 0) >= ($4 | 0)) {
   break label$16;
  }
  $1 = 0;
  $7 = 0;
  if ($4) {
   $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2, 16);
   $2 = HEAP32[$0 + 124 >> 2];
  }
  $6 = HEAP32[$0 + 132 >> 2];
  label$18 : {
   label$19 : {
    if (($2 | 0) >= 1) {
     while (1) {
      $5 = $1 << 2;
      HEAP32[$5 + $7 >> 2] = HEAP32[$6 + $5 >> 2];
      $1 = $1 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue;
      }
      break label$19;
     }
    }
    if (!$6) {
     break label$18;
    }
   }
   if (HEAPU8[$0 + 136 | 0]) {
    btAlignedFreeInternal_28void__29($6);
    $2 = HEAP32[$0 + 124 >> 2];
   }
   HEAP32[$0 + 132 >> 2] = 0;
  }
  HEAP32[$0 + 132 >> 2] = $7;
  HEAP32[$0 + 128 >> 2] = $4;
  HEAP8[$0 + 136 | 0] = 1;
 }
 HEAP32[HEAP32[$0 + 132 >> 2] + ($2 << 2) >> 2] = 0;
 HEAP32[$0 + 124 >> 2] = $2 + 1;
 $2 = HEAP32[$0 + 104 >> 2];
 label$23 : {
  if (($2 | 0) != HEAP32[$0 + 108 >> 2]) {
   break label$23;
  }
  $4 = $2 ? $2 << 1 : 1;
  if (($2 | 0) >= ($4 | 0)) {
   break label$23;
  }
  $1 = 0;
  $7 = 0;
  if ($4) {
   $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2, 16);
   $2 = HEAP32[$0 + 104 >> 2];
  }
  $6 = HEAP32[$0 + 112 >> 2];
  label$25 : {
   label$26 : {
    if (($2 | 0) >= 1) {
     while (1) {
      $5 = $1 << 2;
      HEAP32[$5 + $7 >> 2] = HEAP32[$6 + $5 >> 2];
      $1 = $1 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue;
      }
      break label$26;
     }
    }
    if (!$6) {
     break label$25;
    }
   }
   if (HEAPU8[$0 + 116 | 0]) {
    btAlignedFreeInternal_28void__29($6);
    $2 = HEAP32[$0 + 104 >> 2];
   }
   HEAP32[$0 + 112 >> 2] = 0;
  }
  HEAP32[$0 + 112 >> 2] = $7;
  HEAP32[$0 + 108 >> 2] = $4;
  HEAP8[$0 + 116 | 0] = 1;
 }
 HEAP32[HEAP32[$0 + 112 >> 2] + ($2 << 2) >> 2] = 0;
 HEAP32[$0 + 104 >> 2] = $2 + 1;
 $2 = HEAP32[$0 + 144 >> 2];
 label$30 : {
  if (($2 | 0) != HEAP32[$0 + 148 >> 2]) {
   break label$30;
  }
  $4 = $2 ? $2 << 1 : 1;
  if (($2 | 0) >= ($4 | 0)) {
   break label$30;
  }
  $1 = 0;
  $7 = 0;
  if ($4) {
   $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2, 16);
   $2 = HEAP32[$0 + 144 >> 2];
  }
  $6 = HEAP32[$0 + 152 >> 2];
  label$32 : {
   label$33 : {
    if (($2 | 0) >= 1) {
     while (1) {
      $5 = $1 << 2;
      HEAP32[$5 + $7 >> 2] = HEAP32[$6 + $5 >> 2];
      $1 = $1 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue;
      }
      break label$33;
     }
    }
    if (!$6) {
     break label$32;
    }
   }
   if (HEAPU8[$0 + 156 | 0]) {
    btAlignedFreeInternal_28void__29($6);
    $2 = HEAP32[$0 + 144 >> 2];
   }
   HEAP32[$0 + 152 >> 2] = 0;
  }
  HEAP32[$0 + 152 >> 2] = $7;
  HEAP32[$0 + 148 >> 2] = $4;
  HEAP8[$0 + 156 | 0] = 1;
 }
 HEAP32[HEAP32[$0 + 152 >> 2] + ($2 << 2) >> 2] = 0;
 HEAP32[$0 + 144 >> 2] = $2 + 1;
 $5 = HEAP32[$0 + 164 >> 2];
 label$37 : {
  if (($5 | 0) != HEAP32[$0 + 168 >> 2]) {
   break label$37;
  }
  $4 = $5 ? $5 << 1 : 1;
  if (($5 | 0) >= ($4 | 0)) {
   break label$37;
  }
  $1 = 0;
  $7 = 0;
  if ($4) {
   $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2, 16);
   $5 = HEAP32[$0 + 164 >> 2];
  }
  $6 = HEAP32[$0 + 172 >> 2];
  label$39 : {
   label$40 : {
    if (($5 | 0) >= 1) {
     while (1) {
      $2 = $1 << 2;
      HEAP32[$7 + $2 >> 2] = HEAP32[$2 + $6 >> 2];
      $1 = $1 + 1 | 0;
      if (($5 | 0) != ($1 | 0)) {
       continue;
      }
      break label$40;
     }
    }
    if (!$6) {
     break label$39;
    }
   }
   if (HEAPU8[$0 + 176 | 0]) {
    btAlignedFreeInternal_28void__29($6);
   }
   HEAP32[$0 + 172 >> 2] = 0;
   $5 = HEAP32[$0 + 164 >> 2];
  }
  HEAP32[$0 + 172 >> 2] = $7;
  HEAP32[$0 + 168 >> 2] = $4;
  HEAP8[$0 + 176 | 0] = 1;
 }
 HEAP32[HEAP32[$0 + 172 >> 2] + ($5 << 2) >> 2] = 2;
 HEAP32[$0 + 164 >> 2] = HEAP32[$0 + 164 >> 2] + 1;
 $0 = $3 + 144 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuantizedBvh__walkStacklessQuantizedTreeAgainstRay_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20int_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0, $21 = Math_fround(0), $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 $12 = global$0 - 32 | 0;
 $11 = $12;
 if ($12 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $11;
 $14 = HEAPF32[$2 + 4 >> 2];
 $15 = HEAPF32[$3 + 4 >> 2];
 $16 = HEAPF32[$2 >> 2];
 $17 = HEAPF32[$3 >> 2];
 $21 = HEAPF32[$0 + 28 >> 2];
 $8 = HEAPF32[$0 + 12 >> 2];
 $18 = HEAPF32[$3 + 8 >> 2];
 $19 = HEAPF32[$2 + 8 >> 2];
 $9 = Math_fround(($18 < $19 ? $18 : $19) + HEAPF32[$4 + 8 >> 2]);
 $9 = $9 < $8 ? $8 : $9;
 $28 = HEAPF32[$0 + 44 >> 2];
 $9 = Math_fround(Math_fround(($21 < $9 ? $21 : $9) - $8) * $28);
 label$2 : {
  if ($9 < Math_fround(4294967296) & $9 >= Math_fround(0)) {
   $3 = ~~$9 >>> 0;
   break label$2;
  }
  $3 = 0;
 }
 $26 = HEAPF32[$0 + 24 >> 2];
 $9 = HEAPF32[$0 + 8 >> 2];
 $10 = Math_fround(($15 < $14 ? $15 : $14) + HEAPF32[$4 + 4 >> 2]);
 $10 = $10 < $9 ? $9 : $10;
 $29 = HEAPF32[$0 + 40 >> 2];
 $10 = Math_fround(Math_fround(($26 < $10 ? $26 : $10) - $9) * $29);
 label$4 : {
  if ($10 < Math_fround(4294967296) & $10 >= Math_fround(0)) {
   $11 = ~~$10 >>> 0;
   break label$4;
  }
  $11 = 0;
 }
 $27 = HEAPF32[$0 + 20 >> 2];
 $10 = HEAPF32[$0 + 4 >> 2];
 $13 = Math_fround(($17 < $16 ? $17 : $16) + HEAPF32[$4 >> 2]);
 $13 = $13 < $10 ? $10 : $13;
 $30 = HEAPF32[$0 + 36 >> 2];
 $13 = Math_fround(Math_fround(($27 < $13 ? $27 : $13) - $10) * $30);
 label$6 : {
  if ($13 < Math_fround(4294967296) & $13 >= Math_fround(0)) {
   $22 = ~~$13 >>> 0;
   break label$6;
  }
  $22 = 0;
 }
 $13 = Math_fround(($19 < $18 ? $18 : $19) + HEAPF32[$5 + 8 >> 2]);
 $13 = $13 < $8 ? $8 : $13;
 $8 = Math_fround(Math_fround(Math_fround(($21 < $13 ? $21 : $13) - $8) * $28) + Math_fround(1));
 label$8 : {
  if ($8 < Math_fround(4294967296) & $8 >= Math_fround(0)) {
   $23 = ~~$8 >>> 0;
   break label$8;
  }
  $23 = 0;
 }
 $8 = Math_fround(($14 < $15 ? $15 : $14) + HEAPF32[$5 + 4 >> 2]);
 $8 = $8 < $9 ? $9 : $8;
 $8 = Math_fround(Math_fround(Math_fround(($26 < $8 ? $26 : $8) - $9) * $29) + Math_fround(1));
 label$10 : {
  if ($8 < Math_fround(4294967296) & $8 >= Math_fround(0)) {
   $24 = ~~$8 >>> 0;
   break label$10;
  }
  $24 = 0;
 }
 $8 = Math_fround(($16 < $17 ? $17 : $16) + HEAPF32[$5 >> 2]);
 $8 = $8 < $10 ? $10 : $8;
 $8 = Math_fround(Math_fround(Math_fround(($27 < $8 ? $27 : $8) - $10) * $30) + Math_fround(1));
 label$12 : {
  if ($8 < Math_fround(4294967296) & $8 >= Math_fround(0)) {
   $25 = ~~$8 >>> 0;
   break label$12;
  }
  $25 = 0;
 }
 if (($6 | 0) < ($7 | 0)) {
  $8 = Math_fround($18 - $19);
  $13 = $8;
  $9 = Math_fround($17 - $16);
  $10 = Math_fround($15 - $14);
  $14 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($9 * $9) + Math_fround($10 * $10)) + Math_fround($8 * $8)))));
  $8 = Math_fround($8 * $14);
  $15 = Math_fround($9 * $14);
  $16 = Math_fround($9 * $15);
  $9 = Math_fround($10 * $14);
  $21 = Math_fround(Math_fround($13 * $8) + Math_fround($16 + Math_fround($10 * $9)));
  $31 = $3 & 65534;
  $32 = $11 & 65534;
  $33 = $22 & 65534;
  $34 = $23 | 1;
  $35 = $24 | 1;
  $36 = $25 | 1;
  $3 = HEAP32[$0 + 136 >> 2] + ($6 << 4) | 0;
  $19 = $8 == Math_fround(0) ? Math_fround(0xde0b6b000000000) : Math_fround(Math_fround(1) / $8);
  $11 = $19 < Math_fround(0);
  $37 = ($11 << 4) + $12 | 8;
  $17 = $9 == Math_fround(0) ? Math_fround(0xde0b6b000000000) : Math_fround(Math_fround(1) / $9);
  $20 = $17 < Math_fround(0);
  $38 = ($20 << 4) + $12 | 4;
  $39 = (($11 ^ 1) << 4) + $12 | 8;
  $40 = (($20 ^ 1) << 4) + $12 | 4;
  $18 = $15 == Math_fround(0) ? Math_fround(0xde0b6b000000000) : Math_fround(Math_fround(1) / $15);
  $11 = $18 < Math_fround(0);
  $41 = ($11 << 4) + $12 | 0;
  $42 = (($11 ^ 1) << 4) + $12 | 0;
  $20 = 0;
  while (1) {
   $22 = HEAP32[$3 + 12 >> 2];
   $11 = 0;
   label$16 : {
    label$17 : {
     label$18 : {
      label$19 : {
       if ($33 >>> 0 > HEAPU16[$3 + 6 >> 1]) {
        break label$19;
       }
       $23 = HEAPU16[$3 >> 1];
       if ($36 >>> 0 < $23 >>> 0 | $31 >>> 0 > HEAPU16[$3 + 10 >> 1]) {
        break label$19;
       }
       $24 = HEAPU16[$3 + 4 >> 1];
       if ($34 >>> 0 < $24 >>> 0 | $32 >>> 0 > HEAPU16[$3 + 8 >> 1]) {
        break label$19;
       }
       $25 = HEAPU16[$3 + 2 >> 1];
       if ($35 >>> 0 < $25 >>> 0) {
        break label$19;
       }
       $8 = HEAPF32[$0 + 12 >> 2];
       $9 = HEAPF32[$0 + 44 >> 2];
       $10 = HEAPF32[$0 + 8 >> 2];
       $14 = HEAPF32[$0 + 40 >> 2];
       $15 = HEAPF32[$0 + 4 >> 2];
       $16 = HEAPF32[$0 + 36 >> 2];
       HEAP32[$12 + 12 >> 2] = 0;
       $11 = HEAPU16[$3 + 10 >> 1];
       $43 = HEAPU16[$3 + 8 >> 1];
       $44 = HEAPU16[$3 + 6 >> 1];
       HEAP32[$12 + 28 >> 2] = 0;
       HEAPF32[$12 >> 2] = Math_fround($15 + Math_fround(Math_fround($23 >>> 0) / $16)) - HEAPF32[$5 >> 2];
       HEAPF32[$12 + 4 >> 2] = Math_fround($10 + Math_fround(Math_fround($25 >>> 0) / $14)) - HEAPF32[$5 + 4 >> 2];
       HEAPF32[$12 + 8 >> 2] = Math_fround($8 + Math_fround(Math_fround($24 >>> 0) / $9)) - HEAPF32[$5 + 8 >> 2];
       HEAPF32[$12 + 16 >> 2] = Math_fround($15 + Math_fround(Math_fround($44 >>> 0) / $16)) - HEAPF32[$4 >> 2];
       HEAPF32[$12 + 20 >> 2] = Math_fround($10 + Math_fround(Math_fround($43 >>> 0) / $14)) - HEAPF32[$4 + 4 >> 2];
       HEAPF32[$12 + 24 >> 2] = Math_fround($8 + Math_fround(Math_fround($11 >>> 0) / $9)) - HEAPF32[$4 + 8 >> 2];
       label$20 : {
        $9 = HEAPF32[$2 + 4 >> 2];
        $14 = Math_fround($17 * Math_fround(HEAPF32[$38 >> 2] - $9));
        $10 = HEAPF32[$2 >> 2];
        $8 = Math_fround($18 * Math_fround(HEAPF32[$42 >> 2] - $10));
        if ($14 > $8) {
         break label$20;
        }
        $10 = Math_fround($18 * Math_fround(HEAPF32[$41 >> 2] - $10));
        $9 = Math_fround($17 * Math_fround(HEAPF32[$40 >> 2] - $9));
        if ($10 > $9) {
         break label$20;
        }
        $16 = HEAPF32[$2 + 8 >> 2];
        $15 = Math_fround($19 * Math_fround(HEAPF32[$37 >> 2] - $16));
        $8 = $9 < $8 ? $9 : $8;
        if ($15 > $8) {
         break label$20;
        }
        $9 = $14 > $10 ? $14 : $10;
        $10 = Math_fround($19 * Math_fround(HEAPF32[$39 >> 2] - $16));
        if ($9 > $10) {
         break label$20;
        }
        $11 = ($15 > $9 ? $15 : $9) < $21 & ($10 < $8 ? $10 : $8) > Math_fround(0);
        if (!$11 | ($22 | 0) < 0) {
         break label$19;
        }
        $11 = HEAP32[$3 + 12 >> 2];
        FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $11 >> 21, $11 & 2097151);
        break label$18;
       }
       $11 = 0;
      }
      if (($22 | 0) > -1) {
       break label$18;
      }
      if (!$11) {
       break label$17;
      }
     }
     $6 = $6 + 1 | 0;
     $3 = $3 + 16 | 0;
     break label$16;
    }
    $11 = HEAP32[$3 + 12 >> 2];
    $6 = $6 - $11 | 0;
    $3 = $3 - ($11 << 4) | 0;
   }
   $20 = $20 + 1 | 0;
   if (($6 | 0) < ($7 | 0)) {
    continue;
   }
   break;
  }
 }
 if (HEAP32[5681] < ($20 | 0)) {
  HEAP32[5681] = $20;
 }
 $0 = $12 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuantizedBvh__buildTree_28int_2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = Math_fround(0), $19 = 0;
 $8 = global$0 - 32 | 0;
 $3 = $8;
 if ($8 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $16 = HEAP32[$0 + 56 >> 2];
 label$2 : {
  if (($2 - $1 | 0) == 1) {
   label$4 : {
    if (HEAPU8[$0 + 60 | 0]) {
     $7 = HEAP32[$0 + 116 >> 2] + ($1 << 4) | 0;
     $6 = $7;
     $4 = HEAP32[$6 >> 2];
     $5 = HEAP32[$6 + 4 >> 2];
     $3 = HEAP32[$0 + 136 >> 2] + ($16 << 4) | 0;
     HEAP32[$3 >> 2] = $4;
     HEAP32[$3 + 4 >> 2] = $5;
     break label$4;
    }
    $7 = HEAP32[$0 + 76 >> 2] + ($1 << 6) | 0;
    $6 = $7;
    $5 = HEAP32[$6 >> 2];
    $4 = HEAP32[$6 + 4 >> 2];
    $3 = HEAP32[$0 + 96 >> 2] + ($16 << 6) | 0;
    HEAP32[$3 >> 2] = $5;
    HEAP32[$3 + 4 >> 2] = $4;
    $5 = HEAP32[$6 + 60 >> 2];
    $4 = HEAP32[$6 + 56 >> 2];
    HEAP32[$3 + 56 >> 2] = $4;
    HEAP32[$3 + 60 >> 2] = $5;
    $4 = HEAP32[$6 + 52 >> 2];
    $5 = HEAP32[$6 + 48 >> 2];
    HEAP32[$3 + 48 >> 2] = $5;
    HEAP32[$3 + 52 >> 2] = $4;
    $5 = HEAP32[$6 + 44 >> 2];
    $4 = HEAP32[$6 + 40 >> 2];
    HEAP32[$3 + 40 >> 2] = $4;
    HEAP32[$3 + 44 >> 2] = $5;
    $4 = HEAP32[$6 + 36 >> 2];
    $5 = HEAP32[$6 + 32 >> 2];
    HEAP32[$3 + 32 >> 2] = $5;
    HEAP32[$3 + 36 >> 2] = $4;
    $5 = HEAP32[$6 + 28 >> 2];
    $4 = HEAP32[$6 + 24 >> 2];
    HEAP32[$3 + 24 >> 2] = $4;
    HEAP32[$3 + 28 >> 2] = $5;
    $4 = HEAP32[$6 + 20 >> 2];
    $5 = HEAP32[$6 + 16 >> 2];
    HEAP32[$3 + 16 >> 2] = $5;
    HEAP32[$3 + 20 >> 2] = $4;
   }
   $6 = $7;
   $4 = HEAP32[$6 + 8 >> 2];
   $5 = HEAP32[$6 + 12 >> 2];
   HEAP32[$3 + 8 >> 2] = $4;
   HEAP32[$3 + 12 >> 2] = $5;
   HEAP32[$0 + 56 >> 2] = HEAP32[$0 + 56 >> 2] + 1;
   break label$2;
  }
  $17 = btQuantizedBvh__sortAndCalcSplittingIndex_28int_2c_20int_2c_20int_29($0, $1, $2, btQuantizedBvh__calcSplittingAxis_28int_2c_20int_29($0, $1, $2));
  $14 = HEAP32[$0 + 56 >> 2];
  label$6 : {
   if (HEAPU8[$0 + 60 | 0]) {
    $10 = HEAPF32[$0 + 40 >> 2];
    $11 = HEAPF32[$0 + 8 >> 2];
    $12 = HEAPF32[$0 + 24 >> 2];
    $13 = HEAPF32[$0 + 44 >> 2];
    $15 = HEAPF32[$0 + 12 >> 2];
    $18 = HEAPF32[$0 + 28 >> 2];
    $3 = HEAP32[$0 + 136 >> 2] + ($14 << 4) | 0;
    $4 = $3;
    $9 = Math_fround(Math_fround(HEAPF32[$0 + 20 >> 2] - HEAPF32[$0 + 4 >> 2]) * HEAPF32[$0 + 36 >> 2]);
    label$8 : {
     if ($9 < Math_fround(4294967296) & $9 >= Math_fround(0)) {
      $7 = ~~$9 >>> 0;
      break label$8;
     }
     $7 = 0;
    }
    HEAP16[$4 >> 1] = $7 & 65534;
    $4 = $3;
    $9 = Math_fround(Math_fround($18 - $15) * $13);
    label$10 : {
     if ($9 < Math_fround(4294967296) & $9 >= Math_fround(0)) {
      $7 = ~~$9 >>> 0;
      break label$10;
     }
     $7 = 0;
    }
    HEAP16[$4 + 4 >> 1] = $7 & 65534;
    $9 = Math_fround(Math_fround($12 - $11) * $10);
    label$12 : {
     if ($9 < Math_fround(4294967296) & $9 >= Math_fround(0)) {
      $7 = ~~$9 >>> 0;
      break label$12;
     }
     $7 = 0;
    }
    HEAP16[$3 + 2 >> 1] = $7 & 65534;
    break label$6;
   }
   $7 = $0 + 20 | 0;
   $6 = $7;
   $5 = HEAP32[$6 >> 2];
   $4 = HEAP32[$6 + 4 >> 2];
   $3 = HEAP32[$0 + 96 >> 2] + ($14 << 6) | 0;
   HEAP32[$3 >> 2] = $5;
   HEAP32[$3 + 4 >> 2] = $4;
   $5 = HEAP32[$0 + 32 >> 2];
   $4 = HEAP32[$0 + 28 >> 2];
   HEAP32[$3 + 8 >> 2] = $4;
   HEAP32[$3 + 12 >> 2] = $5;
  }
  $3 = HEAP32[$0 + 56 >> 2];
  label$14 : {
   if (HEAPU8[$0 + 60 | 0]) {
    $12 = HEAPF32[$0 + 40 >> 2];
    $9 = HEAPF32[$0 + 8 >> 2];
    $13 = HEAPF32[$0 + 44 >> 2];
    $10 = HEAPF32[$0 + 12 >> 2];
    $3 = HEAP32[$0 + 136 >> 2] + ($3 << 4) | 0;
    $4 = $3;
    $11 = HEAPF32[$0 + 4 >> 2];
    $11 = Math_fround(Math_fround(Math_fround($11 - $11) * HEAPF32[$0 + 36 >> 2]) + Math_fround(1));
    label$16 : {
     if ($11 < Math_fround(4294967296) & $11 >= Math_fround(0)) {
      $7 = ~~$11 >>> 0;
      break label$16;
     }
     $7 = 0;
    }
    HEAP16[$4 + 6 >> 1] = $7 | 1;
    $4 = $3;
    $10 = Math_fround(Math_fround(Math_fround($10 - $10) * $13) + Math_fround(1));
    label$18 : {
     if ($10 < Math_fround(4294967296) & $10 >= Math_fround(0)) {
      $6 = ~~$10 >>> 0;
      break label$18;
     }
     $6 = 0;
    }
    HEAP16[$4 + 10 >> 1] = $6 | 1;
    $4 = $3;
    $9 = Math_fround(Math_fround(Math_fround($9 - $9) * $12) + Math_fround(1));
    label$20 : {
     if ($9 < Math_fround(4294967296) & $9 >= Math_fround(0)) {
      $7 = ~~$9 >>> 0;
      break label$20;
     }
     $7 = 0;
    }
    HEAP16[$4 + 8 >> 1] = $7 | 1;
    break label$14;
   }
   $7 = $0 + 4 | 0;
   $6 = $7;
   $5 = HEAP32[$6 >> 2];
   $4 = HEAP32[$6 + 4 >> 2];
   $3 = HEAP32[$0 + 96 >> 2] + ($3 << 6) | 0;
   HEAP32[$3 + 16 >> 2] = $5;
   HEAP32[$3 + 20 >> 2] = $4;
   $5 = HEAP32[$0 + 16 >> 2];
   $4 = HEAP32[$0 + 12 >> 2];
   HEAP32[$3 + 24 >> 2] = $4;
   HEAP32[$3 + 28 >> 2] = $5;
  }
  $6 = HEAP32[$0 + 56 >> 2];
  if (($2 | 0) > ($1 | 0)) {
   $7 = $1;
   while (1) {
    label$24 : {
     if (HEAPU8[$0 + 60 | 0]) {
      $3 = HEAP32[$0 + 116 >> 2] + ($7 << 4) | 0;
      $4 = HEAPU16[$3 + 4 >> 1];
      $5 = HEAPU16[$3 + 2 >> 1];
      $19 = HEAPU16[$3 >> 1];
      $9 = HEAPF32[$0 + 44 >> 2];
      $10 = HEAPF32[$0 + 40 >> 2];
      $11 = HEAPF32[$0 + 36 >> 2];
      HEAP32[$8 + 28 >> 2] = 0;
      $12 = HEAPF32[$0 + 4 >> 2];
      HEAPF32[$8 + 16 >> 2] = Math_fround(Math_fround($19 >>> 0) / $11) + $12;
      $13 = HEAPF32[$0 + 8 >> 2];
      HEAPF32[$8 + 20 >> 2] = Math_fround(Math_fround($5 >>> 0) / $10) + $13;
      $15 = HEAPF32[$0 + 12 >> 2];
      HEAPF32[$8 + 24 >> 2] = Math_fround(Math_fround($4 >>> 0) / $9) + $15;
      $4 = HEAPU16[$3 + 6 >> 1];
      $5 = HEAPU16[$3 + 8 >> 1];
      $3 = HEAPU16[$3 + 10 >> 1];
      HEAP32[$8 + 12 >> 2] = 0;
      HEAPF32[$8 + 8 >> 2] = $15 + Math_fround(Math_fround($3 >>> 0) / $9);
      HEAPF32[$8 + 4 >> 2] = $13 + Math_fround(Math_fround($5 >>> 0) / $10);
      HEAPF32[$8 >> 2] = $12 + Math_fround(Math_fround($4 >>> 0) / $11);
      break label$24;
     }
     $3 = HEAP32[$0 + 76 >> 2] + ($7 << 6) | 0;
     $4 = HEAP32[$3 + 12 >> 2];
     $5 = HEAP32[$3 + 8 >> 2];
     HEAP32[$8 + 24 >> 2] = $5;
     HEAP32[$8 + 28 >> 2] = $4;
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = HEAP32[$3 >> 2];
     HEAP32[$8 + 16 >> 2] = $4;
     HEAP32[$8 + 20 >> 2] = $5;
     $4 = HEAP32[$3 + 28 >> 2];
     $5 = HEAP32[$3 + 24 >> 2];
     HEAP32[$8 + 8 >> 2] = $5;
     HEAP32[$8 + 12 >> 2] = $4;
     $5 = HEAP32[$3 + 20 >> 2];
     $4 = HEAP32[$3 + 16 >> 2];
     HEAP32[$8 >> 2] = $4;
     HEAP32[$8 + 4 >> 2] = $5;
    }
    btQuantizedBvh__mergeInternalNodeAabb_28int_2c_20btVector3_20const__2c_20btVector3_20const__29($0, $6, $8 + 16 | 0, $8);
    $6 = HEAP32[$0 + 56 >> 2];
    $7 = $7 + 1 | 0;
    if (($7 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
  }
  $6 = $6 + 1 | 0;
  HEAP32[$0 + 56 >> 2] = $6;
  btQuantizedBvh__buildTree_28int_2c_20int_29($0, $1, $17);
  $4 = HEAP32[$0 + 56 >> 2];
  btQuantizedBvh__buildTree_28int_2c_20int_29($0, $17, $2);
  $7 = HEAPU8[$0 + 60 | 0];
  $3 = HEAP32[$0 + 56 >> 2] - $16 | 0;
  if (!(!$7 | ($3 | 0) < 129)) {
   btQuantizedBvh__updateSubtreeHeaders_28int_2c_20int_29($0, $6, $4);
   $7 = HEAPU8[$0 + 60 | 0];
  }
  if ($7 & 255) {
   HEAP32[(HEAP32[$0 + 136 >> 2] + ($14 << 4) | 0) + 12 >> 2] = 0 - $3;
   break label$2;
  }
  HEAP32[(HEAP32[$0 + 96 >> 2] + ($14 << 6) | 0) + 32 >> 2] = $3;
 }
 $0 = $8 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld__createPredictiveContacts_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 $2 = global$0 - 768 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = $2 + 748 | 0;
 HEAP32[$2 + 764 >> 2] = $0;
 HEAPF32[$2 + 760 >> 2] = $1;
 $5 = HEAP32[$2 + 764 >> 2];
 CProfileSample__CProfileSample_28char_20const__29($2 + 752 | 0, 1220);
 $0 = ccDiscreteDynamicsWorld__getCcdTriggerRecorder_28_29($5);
 HEAP32[$2 + 748 >> 2] = 0;
 btAlignedObjectArray_int___resize_28int_2c_20int_20const__29($0, 0, $3);
 btDiscreteDynamicsWorld__releasePredictiveContacts_28_29($5);
 HEAP32[$2 + 744 >> 2] = btAlignedObjectArray_btRigidBody____size_28_29_20const($5 + 244 | 0);
 if (HEAP32[$2 + 744 >> 2] > 0) {
  btTransform__btTransform_28_29($2 + 680 | 0);
  HEAP32[$2 + 676 >> 2] = 0;
  while (1) {
   if (HEAP32[$2 + 676 >> 2] < HEAP32[$2 + 744 >> 2]) {
    HEAP32[$2 + 672 >> 2] = HEAP32[btAlignedObjectArray_btRigidBody____operator_5b_5d_28int_29($5 + 244 | 0, HEAP32[$2 + 676 >> 2]) >> 2];
    btCollisionObject__setHitFraction_28float_29(HEAP32[$2 + 672 >> 2], Math_fround(1));
    label$5 : {
     if (!(btCollisionObject__isActive_28_29_20const(HEAP32[$2 + 672 >> 2]) & 1)) {
      break label$5;
     }
     if (btCollisionObject__isStaticOrKinematicObject_28_29_20const(HEAP32[$2 + 672 >> 2]) & 1) {
      break label$5;
     }
     $0 = $2 + 648 | 0;
     $3 = $2 + 680 | 0;
     btRigidBody__predictIntegratedTransform_28float_2c_20btTransform__29(HEAP32[$2 + 672 >> 2], HEAPF32[$2 + 760 >> 2], $3);
     HEAP32[$2 + 668 >> 2] = btCollisionObject__getWorldTransform_28_29(HEAP32[$2 + 672 >> 2]);
     operator__28btVector3_20const__2c_20btVector3_20const__29($0, btTransform__getOrigin_28_29($3), btTransform__getOrigin_28_29_20const(HEAP32[$2 + 668 >> 2]));
     HEAPF32[$2 + 664 >> 2] = btVector3__length2_28_29_20const($0);
     label$6 : {
      if (!(HEAP8[btCollisionWorld__getDispatchInfo_28_29($5) + 16 | 0] & 1)) {
       break label$6;
      }
      if (btCollisionObject__getCcdSquareMotionThreshold_28_29_20const(HEAP32[$2 + 672 >> 2]) == Math_fround(0)) {
       break label$6;
      }
      if (!(btCollisionObject__getCcdSquareMotionThreshold_28_29_20const(HEAP32[$2 + 672 >> 2]) < HEAPF32[$2 + 664 >> 2])) {
       break label$6;
      }
      CProfileSample__CProfileSample_28char_20const__29($2 + 640 | 0, 1245);
      if (btCollisionShape__isConvex_28_29_20const(btRigidBody__getCollisionShape_28_29(HEAP32[$2 + 672 >> 2])) & 1) {
       $0 = $2 + 408 | 0;
       $6 = $2 + 472 | 0;
       $4 = $2 + 680 | 0;
       $3 = $2 + 536 | 0;
       ccNotMeClosestConvexResultCallback__ccNotMeClosestConvexResultCallback_28btCollisionObject__2c_20ccDiscreteDynamicsWorld__2c_20btVector3_20const__2c_20btVector3_20const__29($3, HEAP32[$2 + 672 >> 2], $5, btTransform__getOrigin_28_29_20const(HEAP32[$2 + 668 >> 2]), btTransform__getOrigin_28_29($4));
       btSphereShape__btSphereShape_28float_29($6, btCollisionObject__getCcdSweptSphereRadius_28_29_20const(HEAP32[$2 + 672 >> 2]));
       HEAP32[$2 + 544 >> 2] = HEAP32[btRigidBody__getBroadphaseProxy_28_29(HEAP32[$2 + 672 >> 2]) + 4 >> 2];
       HEAP32[$2 + 548 >> 2] = HEAP32[btRigidBody__getBroadphaseProxy_28_29(HEAP32[$2 + 672 >> 2]) + 8 >> 2];
       btTransform__btTransform_28btTransform_20const__29($0, $4);
       btTransform__setBasis_28btMatrix3x3_20const__29($0, btTransform__getBasis_28_29_20const(HEAP32[$2 + 668 >> 2]));
       btCollisionWorld__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29_20const($5, $6, HEAP32[$2 + 668 >> 2], $0, $3, Math_fround(0));
       if (btCollisionWorld__ConvexResultCallback__hasHit_28_29_20const($3) & 1) {
        $7 = $2 + 328 | 0;
        $6 = $2 + 40 | 0;
        $4 = $2 + 24 | 0;
        $9 = $2 + 312 | 0;
        $0 = $2 + 536 | 0;
        $12 = $2 + 20 | 0;
        $13 = $2 + 16 | 0;
        $14 = $2 + 12 | 0;
        $10 = $2 + 248 | 0;
        $3 = $2 + 392 | 0;
        $15 = $2 + 348 | 0;
        $8 = $2 + 352 | 0;
        $11 = $2 + 376 | 0;
        operator__28btVector3_20const__2c_20btVector3_20const__29($11, btTransform__getOrigin_28_29($2 + 680 | 0), btTransform__getOrigin_28_29_20const(HEAP32[$2 + 668 >> 2]));
        operator__28btVector3_20const__2c_20float_20const__29($3, $11, $0 + 4 | 0);
        operator__28btVector3_20const__29($8, $0 + 48 | 0);
        HEAPF32[$2 + 372 >> 2] = btVector3__dot_28btVector3_20const__29_20const($3, $8);
        $8 = HEAP32[$5 + 24 >> 2];
        HEAP32[$2 + 348 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 12 >> 2]]($8, HEAP32[$2 + 672 >> 2], HEAP32[$2 + 616 >> 2]);
        btMutexLock_28btSpinMutex__29($5 + 340 | 0);
        btAlignedObjectArray_btPersistentManifold____push_back_28btPersistentManifold__20const__29($5 + 320 | 0, $15);
        btMutexUnlock_28btSpinMutex__29($5 + 340 | 0);
        operator__28btVector3_20const__2c_20btVector3_20const__29_1($7, btTransform__getOrigin_28_29_20const(HEAP32[$2 + 668 >> 2]), $3);
        btTransform__inverse_28_29_20const($10, btCollisionObject__getWorldTransform_28_29_20const(HEAP32[$2 + 616 >> 2]));
        btTransform__operator__28btVector3_20const__29_20const($9, $10, $7);
        HEAPF32[$2 + 20 >> 2] = 0;
        HEAPF32[$2 + 16 >> 2] = 0;
        HEAPF32[$2 + 12 >> 2] = 0;
        btVector3__btVector3_28float_20const__2c_20float_20const__2c_20float_20const__29($4, $12, $13, $14);
        btManifoldPoint__btManifoldPoint_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_29($6, $4, $9, $0 + 48 | 0, HEAPF32[$2 + 372 >> 2]);
        HEAP32[$2 + 8 >> 2] = btPersistentManifold__addManifoldPoint_28btManifoldPoint_20const__2c_20bool_29(HEAP32[$2 + 348 >> 2], $6, 1);
        HEAP32[$2 + 4 >> 2] = btPersistentManifold__getContactPoint_28int_29(HEAP32[$2 + 348 >> 2], HEAP32[$2 + 8 >> 2]);
        HEAPF32[HEAP32[$2 + 4 >> 2] + 96 >> 2] = 0;
        $1 = btManifoldResult__calculateCombinedFriction_28btCollisionObject_20const__2c_20btCollisionObject_20const__29(HEAP32[$2 + 672 >> 2], HEAP32[$2 + 616 >> 2]);
        HEAPF32[HEAP32[$2 + 4 >> 2] + 84 >> 2] = $1;
        $4 = btTransform__getOrigin_28_29_20const(HEAP32[$2 + 668 >> 2]);
        $0 = HEAP32[$4 >> 2];
        $3 = HEAP32[$4 + 4 >> 2];
        $9 = $0;
        $6 = HEAP32[$2 + 4 >> 2];
        $0 = $6;
        HEAP32[$0 + 48 >> 2] = $9;
        HEAP32[$0 + 52 >> 2] = $3;
        $0 = HEAP32[$4 + 12 >> 2];
        $3 = HEAP32[$4 + 8 >> 2];
        $4 = $3;
        $3 = $6;
        HEAP32[$3 + 56 >> 2] = $4;
        HEAP32[$3 + 60 >> 2] = $0;
        $4 = $7;
        $0 = HEAP32[$4 >> 2];
        $3 = HEAP32[$4 + 4 >> 2];
        $7 = $0;
        $6 = HEAP32[$2 + 4 >> 2];
        $0 = $6;
        HEAP32[$0 + 32 >> 2] = $7;
        HEAP32[$0 + 36 >> 2] = $3;
        $0 = HEAP32[$4 + 12 >> 2];
        $3 = HEAP32[$4 + 8 >> 2];
        $4 = $3;
        $3 = $6;
        HEAP32[$3 + 40 >> 2] = $4;
        HEAP32[$3 + 44 >> 2] = $0;
       }
       $0 = $2 + 536 | 0;
       btSphereShape___btSphereShape_28_29($2 + 472 | 0);
       ccNotMeClosestConvexResultCallback___ccNotMeClosestConvexResultCallback_28_29($0);
      }
      CProfileSample___CProfileSample_28_29($2 + 640 | 0);
     }
    }
    HEAP32[$2 + 676 >> 2] = HEAP32[$2 + 676 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 CProfileSample___CProfileSample_28_29($2 + 752 | 0);
 $0 = $2 + 768 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btPerturbedContactResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = 0, $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0);
 $11 = global$0 - 16 | 0;
 $36 = $11;
 if ($11 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $36;
 $26 = HEAPF32[$1 + 8 >> 2];
 $19 = HEAPF32[$2 + 8 >> 2];
 $22 = Math_fround(Math_fround($26 * $3) + $19);
 $27 = HEAPF32[$1 + 4 >> 2];
 $25 = HEAPF32[$2 + 4 >> 2];
 $28 = Math_fround(Math_fround($27 * $3) + $25);
 $29 = HEAPF32[$1 >> 2];
 $12 = HEAPF32[$2 >> 2];
 $3 = Math_fround(Math_fround($29 * $3) + $12);
 label$2 : {
  if (HEAPU8[$0 + 232 | 0]) {
   $13 = HEAPF32[$0 + 56 >> 2];
   $7 = Math_fround(-HEAPF32[$0 + 92 >> 2]);
   $14 = HEAPF32[$0 + 40 >> 2];
   $9 = HEAPF32[$0 + 88 >> 2];
   $8 = HEAPF32[$0 + 72 >> 2];
   $4 = HEAPF32[$0 + 96 >> 2];
   $20 = Math_fround(Math_fround(Math_fround($13 * $7) - Math_fround($14 * $9)) - Math_fround($8 * $4));
   $5 = HEAPF32[$0 + 200 >> 2];
   $15 = HEAPF32[$0 + 60 >> 2];
   $16 = HEAPF32[$0 + 44 >> 2];
   $17 = HEAPF32[$0 + 76 >> 2];
   $21 = Math_fround(Math_fround(Math_fround($15 * $7) - Math_fround($16 * $9)) - Math_fround($17 * $4));
   $6 = HEAPF32[$0 + 204 >> 2];
   $18 = HEAPF32[$0 - -64 >> 2];
   $10 = Math_fround($18 * $7);
   $7 = HEAPF32[$0 + 48 >> 2];
   $10 = Math_fround($10 - Math_fround($7 * $9));
   $9 = HEAPF32[$0 + 80 >> 2];
   $10 = Math_fround($10 - Math_fround($9 * $4));
   $4 = HEAPF32[$0 + 208 >> 2];
   $23 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($20 * $5) + Math_fround($21 * $6)) + Math_fround($10 * $4)) + HEAPF32[$0 + 224 >> 2]) + Math_fround(Math_fround($22 * Math_fround(Math_fround(Math_fround($8 * $5) + Math_fround($17 * $6)) + Math_fround($9 * $4))) + Math_fround(Math_fround($3 * Math_fround(Math_fround(Math_fround($14 * $5) + Math_fround($16 * $6)) + Math_fround($7 * $4))) + Math_fround($28 * Math_fround(Math_fround(Math_fround($13 * $5) + Math_fround($15 * $6)) + Math_fround($18 * $4))))));
   $5 = HEAPF32[$0 + 168 >> 2];
   $6 = HEAPF32[$0 + 172 >> 2];
   $4 = HEAPF32[$0 + 176 >> 2];
   $6 = Math_fround(Math_fround(Math_fround($22 * Math_fround(Math_fround(Math_fround($8 * $5) + Math_fround($17 * $6)) + Math_fround($9 * $4))) + Math_fround(Math_fround($3 * Math_fround(Math_fround(Math_fround($14 * $5) + Math_fround($16 * $6)) + Math_fround($7 * $4))) + Math_fround($28 * Math_fround(Math_fround(Math_fround($13 * $5) + Math_fround($15 * $6)) + Math_fround($18 * $4))))) + Math_fround(Math_fround(Math_fround(Math_fround($5 * $20) + Math_fround($21 * $6)) + Math_fround($10 * $4)) + HEAPF32[$0 + 216 >> 2]));
   $4 = Math_fround($29 * Math_fround($6 - $12));
   $12 = HEAPF32[$0 + 184 >> 2];
   $24 = Math_fround($8 * $12);
   $8 = HEAPF32[$0 + 188 >> 2];
   $5 = HEAPF32[$0 + 192 >> 2];
   $22 = Math_fround(Math_fround(Math_fround($22 * Math_fround(Math_fround($24 + Math_fround($17 * $8)) + Math_fround($9 * $5))) + Math_fround(Math_fround($3 * Math_fround(Math_fround(Math_fround($14 * $12) + Math_fround($16 * $8)) + Math_fround($7 * $5))) + Math_fround($28 * Math_fround(Math_fround(Math_fround($13 * $12) + Math_fround($15 * $8)) + Math_fround($18 * $5))))) + Math_fround(Math_fround(Math_fround(Math_fround($20 * $12) + Math_fround($21 * $8)) + Math_fround($10 * $5)) + HEAPF32[$0 + 220 >> 2]));
   $3 = Math_fround(Math_fround($4 + Math_fround($27 * Math_fround($22 - $25))) + Math_fround($26 * Math_fround($23 - $19)));
   HEAPF32[$11 + 8 >> 2] = $23 + Math_fround($26 * $3);
   HEAPF32[$11 + 4 >> 2] = $22 + Math_fround($27 * $3);
   HEAPF32[$11 >> 2] = $6 + Math_fround($29 * $3);
   break label$2;
  }
  $37 = HEAPF32[$0 + 224 >> 2];
  $13 = HEAPF32[$0 + 208 >> 2];
  $14 = HEAPF32[$0 + 200 >> 2];
  $8 = HEAPF32[$0 + 204 >> 2];
  $38 = HEAPF32[$0 + 216 >> 2];
  $5 = HEAPF32[$0 + 172 >> 2];
  $15 = HEAPF32[$0 + 176 >> 2];
  $16 = HEAPF32[$0 + 168 >> 2];
  $17 = HEAPF32[$0 + 136 >> 2];
  $6 = HEAPF32[$0 + 184 >> 2];
  $18 = HEAPF32[$0 + 140 >> 2];
  $7 = HEAPF32[$0 + 188 >> 2];
  $9 = HEAPF32[$0 + 144 >> 2];
  $4 = HEAPF32[$0 + 192 >> 2];
  $20 = HEAPF32[$0 + 104 >> 2];
  $21 = HEAPF32[$0 + 108 >> 2];
  $10 = HEAPF32[$0 + 112 >> 2];
  $23 = HEAPF32[$0 + 120 >> 2];
  $24 = HEAPF32[$0 + 124 >> 2];
  $30 = HEAPF32[$0 + 128 >> 2];
  $39 = Math_fround(Math_fround($19 * Math_fround(Math_fround(Math_fround($17 * $6) + Math_fround($18 * $7)) + Math_fround($9 * $4))) + Math_fround(Math_fround($12 * Math_fround(Math_fround(Math_fround($20 * $6) + Math_fround($21 * $7)) + Math_fround($10 * $4))) + Math_fround($25 * Math_fround(Math_fround(Math_fround($23 * $6) + Math_fround($24 * $7)) + Math_fround($30 * $4)))));
  $31 = Math_fround(-HEAPF32[$0 + 156 >> 2]);
  $32 = HEAPF32[$0 + 152 >> 2];
  $33 = HEAPF32[$0 + 160 >> 2];
  $34 = Math_fround(Math_fround(Math_fround($23 * $31) - Math_fround($20 * $32)) - Math_fround($17 * $33));
  $35 = Math_fround($34 * $6);
  $6 = Math_fround(Math_fround(Math_fround($24 * $31) - Math_fround($21 * $32)) - Math_fround($18 * $33));
  $35 = Math_fround($35 + Math_fround($6 * $7));
  $7 = Math_fround(Math_fround(Math_fround($30 * $31) - Math_fround($10 * $32)) - Math_fround($9 * $33));
  $4 = Math_fround($39 + Math_fround(Math_fround($35 + Math_fround($7 * $4)) + HEAPF32[$0 + 220 >> 2]));
  HEAPF32[$11 + 4 >> 2] = $4;
  $5 = Math_fround(Math_fround(Math_fround($19 * Math_fround(Math_fround(Math_fround($17 * $16) + Math_fround($18 * $5)) + Math_fround($9 * $15))) + Math_fround(Math_fround($12 * Math_fround(Math_fround(Math_fround($20 * $16) + Math_fround($21 * $5)) + Math_fround($10 * $15))) + Math_fround($25 * Math_fround(Math_fround(Math_fround($23 * $16) + Math_fround($24 * $5)) + Math_fround($30 * $15))))) + Math_fround($38 + Math_fround(Math_fround(Math_fround($16 * $34) + Math_fround($6 * $5)) + Math_fround($7 * $15))));
  HEAPF32[$11 >> 2] = $5;
  $19 = Math_fround(Math_fround($37 + Math_fround(Math_fround(Math_fround($34 * $14) + Math_fround($6 * $8)) + Math_fround($7 * $13))) + Math_fround(Math_fround($19 * Math_fround(Math_fround(Math_fround($17 * $14) + Math_fround($18 * $8)) + Math_fround($9 * $13))) + Math_fround(Math_fround($12 * Math_fround(Math_fround(Math_fround($20 * $14) + Math_fround($21 * $8)) + Math_fround($10 * $13))) + Math_fround($25 * Math_fround(Math_fround(Math_fround($23 * $14) + Math_fround($24 * $8)) + Math_fround($30 * $13))))));
  HEAPF32[$11 + 8 >> 2] = $19;
  $3 = Math_fround(Math_fround(Math_fround($29 * Math_fround($3 - $5)) + Math_fround($27 * Math_fround($28 - $4))) + Math_fround($26 * Math_fround($22 - $19)));
 }
 HEAP32[$11 + 12 >> 2] = 0;
 $0 = HEAP32[$0 + 36 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $11, $3);
 $0 = $11 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundShape__removeChildShapeByIndex_28int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = 0;
 $7 = global$0 - 80 | 0;
 $3 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$0 + 72 >> 2] = HEAP32[$0 + 72 >> 2] + 1;
 $2 = HEAP32[$0 + 68 >> 2];
 if ($2) {
  btDbvt__remove_28btDbvtNode__29($2, HEAP32[(HEAP32[$0 + 28 >> 2] + Math_imul($1, 80) | 0) + 76 >> 2]);
 }
 $6 = HEAP32[$0 + 20 >> 2];
 $4 = $0 + 28 | 0;
 $10 = HEAP32[$4 >> 2];
 $11 = Math_imul($1, 80);
 $2 = $10 + $11 | 0;
 $5 = $2 + 8 | 0;
 $3 = HEAP32[$5 >> 2];
 $4 = HEAP32[$5 + 4 >> 2];
 $5 = $3;
 $3 = $7 + 8 | 0;
 HEAP32[$3 >> 2] = $5;
 HEAP32[$3 + 4 >> 2] = $4;
 $3 = HEAP32[$2 + 4 >> 2];
 $4 = HEAP32[$2 >> 2];
 $5 = $4;
 $4 = $7;
 HEAP32[$4 >> 2] = $5;
 HEAP32[$4 + 4 >> 2] = $3;
 $5 = $2 + 24 | 0;
 $3 = HEAP32[$5 >> 2];
 $4 = HEAP32[$5 + 4 >> 2];
 $5 = $3;
 $3 = $7;
 HEAP32[$3 + 24 >> 2] = $5;
 HEAP32[$3 + 28 >> 2] = $4;
 $3 = HEAP32[$2 + 20 >> 2];
 $4 = HEAP32[$2 + 16 >> 2];
 $5 = $4;
 $4 = $7;
 HEAP32[$4 + 16 >> 2] = $5;
 HEAP32[$4 + 20 >> 2] = $3;
 $5 = $2 + 40 | 0;
 $3 = HEAP32[$5 >> 2];
 $4 = HEAP32[$5 + 4 >> 2];
 $5 = $3;
 $3 = $7;
 HEAP32[$3 + 40 >> 2] = $5;
 HEAP32[$3 + 44 >> 2] = $4;
 $3 = HEAP32[$2 + 36 >> 2];
 $4 = HEAP32[$2 + 32 >> 2];
 $5 = $4;
 $4 = $7;
 HEAP32[$4 + 32 >> 2] = $5;
 HEAP32[$4 + 36 >> 2] = $3;
 $5 = $2 + 56 | 0;
 $3 = HEAP32[$5 >> 2];
 $4 = HEAP32[$5 + 4 >> 2];
 $5 = $3;
 $3 = $7;
 HEAP32[$3 + 56 >> 2] = $5;
 HEAP32[$3 + 60 >> 2] = $4;
 $3 = HEAP32[$2 + 52 >> 2];
 $4 = HEAP32[$2 + 48 >> 2];
 $5 = $4;
 $4 = $7;
 HEAP32[$4 + 48 >> 2] = $5;
 HEAP32[$4 + 52 >> 2] = $3;
 $5 = $2 + 72 | 0;
 $3 = HEAP32[$5 >> 2];
 $4 = HEAP32[$5 + 4 >> 2];
 $5 = $3;
 $3 = $7;
 HEAP32[$3 + 72 >> 2] = $5;
 HEAP32[$3 + 76 >> 2] = $4;
 $3 = HEAP32[$2 + 68 >> 2];
 $4 = HEAP32[$2 + 64 >> 2];
 $5 = $4;
 $4 = $7;
 HEAP32[$4 + 64 >> 2] = $5;
 HEAP32[$4 + 68 >> 2] = $3;
 $12 = Math_imul($6, 80) + -80 | 0;
 $6 = $12 + $10 | 0;
 $5 = $6;
 $3 = HEAP32[$5 >> 2];
 $4 = HEAP32[$5 + 4 >> 2];
 HEAP32[$2 >> 2] = $3;
 HEAP32[$2 + 4 >> 2] = $4;
 $3 = HEAP32[$5 + 12 >> 2];
 $4 = HEAP32[$5 + 8 >> 2];
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $3;
 $4 = HEAP32[$5 + 20 >> 2];
 $3 = HEAP32[$5 + 16 >> 2];
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 20 >> 2] = $4;
 $3 = HEAP32[$5 + 28 >> 2];
 $4 = HEAP32[$5 + 24 >> 2];
 HEAP32[$2 + 24 >> 2] = $4;
 HEAP32[$2 + 28 >> 2] = $3;
 $4 = HEAP32[$5 + 44 >> 2];
 $3 = HEAP32[$5 + 40 >> 2];
 HEAP32[$2 + 40 >> 2] = $3;
 HEAP32[$2 + 44 >> 2] = $4;
 $3 = HEAP32[$5 + 36 >> 2];
 $4 = HEAP32[$5 + 32 >> 2];
 HEAP32[$2 + 32 >> 2] = $4;
 HEAP32[$2 + 36 >> 2] = $3;
 $4 = HEAP32[$5 + 52 >> 2];
 $3 = HEAP32[$5 + 48 >> 2];
 HEAP32[$2 + 48 >> 2] = $3;
 HEAP32[$2 + 52 >> 2] = $4;
 $3 = HEAP32[$5 + 60 >> 2];
 $4 = HEAP32[$5 + 56 >> 2];
 HEAP32[$2 + 56 >> 2] = $4;
 HEAP32[$2 + 60 >> 2] = $3;
 $4 = HEAP32[$5 + 76 >> 2];
 $3 = HEAP32[$5 + 72 >> 2];
 HEAP32[$2 + 72 >> 2] = $3;
 HEAP32[$2 + 76 >> 2] = $4;
 $3 = HEAP32[$5 + 68 >> 2];
 $4 = HEAP32[$5 + 64 >> 2];
 HEAP32[$2 + 64 >> 2] = $4;
 HEAP32[$2 + 68 >> 2] = $3;
 $5 = $7;
 $3 = HEAP32[$5 >> 2];
 $4 = HEAP32[$5 + 4 >> 2];
 $2 = HEAP32[$0 + 28 >> 2] + $12 | 0;
 HEAP32[$2 >> 2] = $3;
 HEAP32[$2 + 4 >> 2] = $4;
 $3 = HEAP32[$5 + 12 >> 2];
 $4 = HEAP32[$5 + 8 >> 2];
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $3;
 $4 = HEAP32[$5 + 20 >> 2];
 $3 = HEAP32[$5 + 16 >> 2];
 HEAP32[$2 + 16 >> 2] = $3;
 HEAP32[$2 + 20 >> 2] = $4;
 $3 = HEAP32[$5 + 28 >> 2];
 $4 = HEAP32[$5 + 24 >> 2];
 HEAP32[$2 + 24 >> 2] = $4;
 HEAP32[$2 + 28 >> 2] = $3;
 $4 = HEAP32[$5 + 36 >> 2];
 $3 = HEAP32[$5 + 32 >> 2];
 HEAP32[$2 + 32 >> 2] = $3;
 HEAP32[$2 + 36 >> 2] = $4;
 $3 = HEAP32[$5 + 44 >> 2];
 $4 = HEAP32[$5 + 40 >> 2];
 HEAP32[$2 + 40 >> 2] = $4;
 HEAP32[$2 + 44 >> 2] = $3;
 $4 = HEAP32[$5 + 52 >> 2];
 $3 = HEAP32[$5 + 48 >> 2];
 HEAP32[$2 + 48 >> 2] = $3;
 HEAP32[$2 + 52 >> 2] = $4;
 $3 = HEAP32[$5 + 60 >> 2];
 $4 = HEAP32[$5 + 56 >> 2];
 HEAP32[$2 + 56 >> 2] = $4;
 HEAP32[$2 + 60 >> 2] = $3;
 $4 = HEAP32[$5 + 68 >> 2];
 $3 = HEAP32[$5 + 64 >> 2];
 HEAP32[$2 + 64 >> 2] = $3;
 HEAP32[$2 + 68 >> 2] = $4;
 $3 = HEAP32[$5 + 76 >> 2];
 $4 = HEAP32[$5 + 72 >> 2];
 HEAP32[$2 + 72 >> 2] = $4;
 HEAP32[$2 + 76 >> 2] = $3;
 if (HEAP32[$0 + 68 >> 2]) {
  HEAP32[HEAP32[(HEAP32[$0 + 28 >> 2] + $11 | 0) + 76 >> 2] + 36 >> 2] = $1;
 }
 HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 20 >> 2] + -1;
 $9 = Math_fround($1 | 0);
 $6 = HEAP32[$0 + 84 >> 2];
 label$4 : {
  if (($6 | 0) < 1) {
   break label$4;
  }
  $3 = HEAP32[$0 + 92 >> 2];
  $2 = 0;
  while (1) {
   $4 = ($2 << 2) + $3 | 0;
   $8 = HEAPF32[$4 >> 2];
   if ($8 != $9) {
    $2 = $2 + 1 | 0;
    if (($6 | 0) != ($2 | 0)) {
     continue;
    }
    break label$4;
   }
   break;
  }
  if (($6 | 0) <= ($2 | 0)) {
   break label$4;
  }
  $2 = $6 + -1 | 0;
  $6 = ($2 << 2) + $3 | 0;
  HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
  HEAPF32[$6 >> 2] = $8;
  HEAP32[$0 + 84 >> 2] = $2;
 }
 $6 = HEAP32[$0 + 124 >> 2];
 label$7 : {
  if (($6 | 0) < 1) {
   break label$7;
  }
  $3 = HEAP32[$0 + 132 >> 2];
  $2 = 0;
  while (1) {
   $4 = ($2 << 2) + $3 | 0;
   $8 = HEAPF32[$4 >> 2];
   if ($8 != $9) {
    $2 = $2 + 1 | 0;
    if (($6 | 0) != ($2 | 0)) {
     continue;
    }
    break label$7;
   }
   break;
  }
  if (($6 | 0) <= ($2 | 0)) {
   break label$7;
  }
  $2 = $6 + -1 | 0;
  $6 = ($2 << 2) + $3 | 0;
  HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
  HEAPF32[$6 >> 2] = $8;
  HEAP32[$0 + 124 >> 2] = $2;
 }
 $6 = HEAP32[$0 + 104 >> 2];
 label$10 : {
  if (($6 | 0) < 1) {
   break label$10;
  }
  $3 = HEAP32[$0 + 112 >> 2];
  $2 = 0;
  while (1) {
   $4 = ($2 << 2) + $3 | 0;
   $8 = HEAPF32[$4 >> 2];
   if ($8 != $9) {
    $2 = $2 + 1 | 0;
    if (($6 | 0) != ($2 | 0)) {
     continue;
    }
    break label$10;
   }
   break;
  }
  if (($6 | 0) <= ($2 | 0)) {
   break label$10;
  }
  $2 = $6 + -1 | 0;
  $6 = ($2 << 2) + $3 | 0;
  HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
  HEAPF32[$6 >> 2] = $8;
  HEAP32[$0 + 104 >> 2] = $2;
 }
 $6 = HEAP32[$0 + 144 >> 2];
 label$13 : {
  if (($6 | 0) < 1) {
   break label$13;
  }
  $3 = HEAP32[$0 + 152 >> 2];
  $2 = 0;
  while (1) {
   $4 = ($2 << 2) + $3 | 0;
   $8 = HEAPF32[$4 >> 2];
   if ($8 != $9) {
    $2 = $2 + 1 | 0;
    if (($6 | 0) != ($2 | 0)) {
     continue;
    }
    break label$13;
   }
   break;
  }
  if (($6 | 0) <= ($2 | 0)) {
   break label$13;
  }
  $2 = $6 + -1 | 0;
  $6 = ($2 << 2) + $3 | 0;
  HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
  HEAPF32[$6 >> 2] = $8;
  HEAP32[$0 + 144 >> 2] = $2;
 }
 $6 = HEAP32[$0 + 164 >> 2];
 label$16 : {
  if (($6 | 0) < 1) {
   break label$16;
  }
  $3 = HEAP32[$0 + 172 >> 2];
  $2 = 0;
  while (1) {
   $4 = ($2 << 2) + $3 | 0;
   if (HEAP32[$4 >> 2] != ($1 | 0)) {
    $2 = $2 + 1 | 0;
    if (($6 | 0) != ($2 | 0)) {
     continue;
    }
    break label$16;
   }
   break;
  }
  if (($6 | 0) <= ($2 | 0)) {
   break label$16;
  }
  $2 = (($6 << 2) + $3 | 0) + -4 | 0;
  HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$2 >> 2] = $1;
  HEAP32[$0 + 164 >> 2] = HEAP32[$0 + 164 >> 2] + -1;
 }
 $0 = $7 + 80 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btStridingMeshInterface__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $4 = global$0 - 32 | 0;
 $10 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $10;
 $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = $3;
 if ($3) {
  $15 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 32, $3) | 0;
  $7 = HEAP32[$15 + 8 >> 2];
  HEAP32[$1 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $7);
  $17 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
  if (($17 | 0) > 0) {
   while (1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $4 + 28 | 0, $4 + 4 | 0, $4 + 16 | 0, $4 + 8 | 0, $4 + 24 | 0, $4 + 20 | 0, $4, $4 + 12 | 0, $14);
    $3 = HEAP32[$4 >> 2];
    HEAP32[$7 + 24 >> 2] = $3;
    $5 = HEAP32[$4 + 4 >> 2];
    HEAP32[$7 >> 2] = 0;
    HEAP32[$7 + 4 >> 2] = 0;
    HEAP32[$7 + 28 >> 2] = $5;
    HEAP32[$7 + 8 >> 2] = 0;
    HEAP32[$7 + 12 >> 2] = 0;
    HEAP32[$7 + 16 >> 2] = 0;
    HEAP32[$7 + 20 >> 2] = 0;
    $5 = HEAP32[$4 + 12 >> 2] + -2 | 0;
    label$5 : {
     if ($5 >>> 0 > 3) {
      break label$5;
     }
     label$6 : {
      switch ($5 - 1 | 0) {
      default:
       if (!$3) {
        break label$5;
       }
       $11 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 4, Math_imul($3, 3)) | 0;
       $9 = HEAP32[$11 + 8 >> 2];
       HEAP32[$7 + 8 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $9);
       if (HEAP32[$4 >> 2] >= 1) {
        $3 = 0;
        $8 = HEAP32[$4 + 24 >> 2];
        while (1) {
         $5 = Math_imul($3, 12) + $9 | 0;
         $6 = Math_imul(HEAP32[$4 + 20 >> 2], $3) + $8 | 0;
         HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
         HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
         HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
         $3 = $3 + 1 | 0;
         if (($3 | 0) < HEAP32[$4 >> 2]) {
          continue;
         }
         break;
        }
       }
       FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $11, 14974, 1497453121, HEAP32[$11 + 8 >> 2]);
       break label$5;
      case 0:
       if (!$3) {
        break label$5;
       }
       $8 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 8, $3) | 0;
       $9 = HEAP32[$8 + 8 >> 2];
       HEAP32[$7 + 12 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $9);
       $3 = 0;
       if (HEAP32[$4 >> 2] >= 1) {
        while (1) {
         $5 = ($3 << 3) + $9 | 0;
         $6 = HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$4 + 20 >> 2], $3) | 0;
         HEAP16[$5 >> 1] = HEAPU16[$6 >> 1];
         HEAP16[$5 + 2 >> 1] = HEAPU16[$6 + 2 >> 1];
         $6 = HEAPU16[$6 + 4 >> 1];
         HEAP16[$5 + 6 >> 1] = 0;
         HEAP16[$5 + 4 >> 1] = $6;
         $3 = $3 + 1 | 0;
         if (($3 | 0) < HEAP32[$4 >> 2]) {
          continue;
         }
         break;
        }
       }
       FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $8, 14989, 1497453121, HEAP32[$8 + 8 >> 2]);
       break label$5;
      case 1:
       break label$5;
      case 2:
       break label$6;
      }
     }
     if (!$3) {
      break label$5;
     }
     $8 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 4, $3) | 0;
     $9 = HEAP32[$8 + 8 >> 2];
     HEAP32[$7 + 16 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $9);
     $3 = 0;
     if (HEAP32[$4 >> 2] >= 1) {
      while (1) {
       $5 = ($3 << 2) + $9 | 0;
       $6 = HEAP32[$4 + 24 >> 2] + Math_imul(HEAP32[$4 + 20 >> 2], $3) | 0;
       HEAP8[$5 | 0] = HEAPU8[$6 | 0];
       HEAP8[$5 + 1 | 0] = HEAPU8[$6 + 1 | 0];
       $6 = HEAPU8[$6 + 2 | 0];
       HEAP8[$5 + 3 | 0] = 0;
       HEAP8[$5 + 2 | 0] = $6;
       $3 = $3 + 1 | 0;
       if (($3 | 0) < HEAP32[$4 >> 2]) {
        continue;
       }
       break;
      }
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $8, 15016, 1497453121, HEAP32[$8 + 8 >> 2]);
    }
    $3 = HEAP32[$4 + 16 >> 2];
    label$15 : {
     if ($3 >>> 0 > 1) {
      break label$15;
     }
     if ($3 - 1) {
      $3 = HEAP32[$4 + 4 >> 2];
      if (!$3) {
       break label$15;
      }
      $12 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 16, $3) | 0;
      $9 = HEAP32[$12 + 8 >> 2];
      HEAP32[$7 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $9);
      $8 = HEAP32[$4 + 4 >> 2];
      if (($8 | 0) >= 1) {
       $3 = 0;
       $11 = HEAP32[$4 + 8 >> 2];
       $16 = HEAP32[$4 + 28 >> 2];
       while (1) {
        $5 = ($3 << 4) + $9 | 0;
        $6 = Math_imul($3, $11) + $16 | 0;
        HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
        HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
        HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
        $3 = $3 + 1 | 0;
        if (($3 | 0) < ($8 | 0)) {
         continue;
        }
        break;
       }
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $12, 15039, 1497453121, HEAP32[$12 + 8 >> 2]);
      break label$15;
     }
     $3 = HEAP32[$4 + 4 >> 2];
     if (!$3) {
      break label$15;
     }
     $12 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 32, $3) | 0;
     $9 = HEAP32[$12 + 8 >> 2];
     HEAP32[$7 + 4 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $9);
     $8 = HEAP32[$4 + 4 >> 2];
     if (($8 | 0) >= 1) {
      $3 = 0;
      $11 = HEAP32[$4 + 8 >> 2];
      $16 = HEAP32[$4 + 28 >> 2];
      while (1) {
       $6 = Math_imul($3, $11) + $16 | 0;
       $10 = HEAP32[$6 >> 2];
       $13 = HEAP32[$6 + 4 >> 2];
       $5 = ($3 << 5) + $9 | 0;
       HEAP32[$5 >> 2] = $10;
       HEAP32[$5 + 4 >> 2] = $13;
       $10 = HEAP32[$6 + 12 >> 2];
       $13 = HEAP32[$6 + 8 >> 2];
       HEAP32[$5 + 8 >> 2] = $13;
       HEAP32[$5 + 12 >> 2] = $10;
       $13 = HEAP32[$6 + 20 >> 2];
       $10 = HEAP32[$6 + 16 >> 2];
       HEAP32[$5 + 16 >> 2] = $10;
       HEAP32[$5 + 20 >> 2] = $13;
       $3 = $3 + 1 | 0;
       if (($3 | 0) < ($8 | 0)) {
        continue;
       }
       break;
      }
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $12, 15058, 1497453121, HEAP32[$12 + 8 >> 2]);
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $14);
    $7 = $7 + 32 | 0;
    $14 = $14 + 1 | 0;
    if (($17 | 0) != ($14 | 0)) {
     continue;
    }
    break;
   }
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $15, 15078, 1497453121, HEAP32[$15 + 8 >> 2]);
 }
 HEAP32[$1 + 24 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
 $0 = $4 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return 15093;
}
function btGeneric6DofSpring2Constraint__btGeneric6DofSpring2Constraint_28btRigidBody__2c_20btRigidBody__2c_20btTransform_20const__2c_20btTransform_20const__2c_20RotateOrder_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 btTypedConstraint__btTypedConstraint_28btTypedConstraintType_2c_20btRigidBody__2c_20btRigidBody__29($0, 12, $1, $2);
 HEAP32[$0 >> 2] = 3256;
 $6 = HEAP32[$3 + 8 >> 2];
 $1 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 + 56 >> 2] = $6;
 HEAP32[$0 + 60 >> 2] = $1;
 $6 = HEAP32[$3 + 4 >> 2];
 $1 = HEAP32[$3 >> 2];
 $2 = $1;
 $1 = $0;
 HEAP32[$1 + 48 >> 2] = $2;
 HEAP32[$1 + 52 >> 2] = $6;
 $1 = HEAP32[$3 + 28 >> 2];
 $6 = HEAP32[$3 + 24 >> 2];
 HEAP32[$0 + 72 >> 2] = $6;
 HEAP32[$0 + 76 >> 2] = $1;
 $6 = HEAP32[$3 + 20 >> 2];
 $1 = HEAP32[$3 + 16 >> 2];
 $2 = $1;
 $1 = $0 - -64 | 0;
 HEAP32[$1 >> 2] = $2;
 HEAP32[$1 + 4 >> 2] = $6;
 $1 = HEAP32[$3 + 44 >> 2];
 $6 = HEAP32[$3 + 40 >> 2];
 HEAP32[$0 + 88 >> 2] = $6;
 HEAP32[$0 + 92 >> 2] = $1;
 $6 = HEAP32[$3 + 36 >> 2];
 $1 = HEAP32[$3 + 32 >> 2];
 $2 = $1;
 $1 = $0;
 HEAP32[$1 + 80 >> 2] = $2;
 HEAP32[$1 + 84 >> 2] = $6;
 $1 = HEAP32[$3 + 60 >> 2];
 $6 = HEAP32[$3 + 56 >> 2];
 HEAP32[$0 + 104 >> 2] = $6;
 HEAP32[$0 + 108 >> 2] = $1;
 $6 = HEAP32[$3 + 52 >> 2];
 $1 = HEAP32[$3 + 48 >> 2];
 $2 = $1;
 $1 = $0;
 HEAP32[$1 + 96 >> 2] = $2;
 HEAP32[$1 + 100 >> 2] = $6;
 $3 = $4;
 $6 = HEAP32[$3 + 8 >> 2];
 $1 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 + 120 >> 2] = $6;
 HEAP32[$0 + 124 >> 2] = $1;
 $6 = HEAP32[$3 + 4 >> 2];
 $1 = HEAP32[$3 >> 2];
 $2 = $1;
 $1 = $0;
 HEAP32[$1 + 112 >> 2] = $2;
 HEAP32[$1 + 116 >> 2] = $6;
 $1 = HEAP32[$3 + 20 >> 2];
 $6 = HEAP32[$3 + 16 >> 2];
 HEAP32[$0 + 128 >> 2] = $6;
 HEAP32[$0 + 132 >> 2] = $1;
 $6 = HEAP32[$3 + 28 >> 2];
 $1 = HEAP32[$3 + 24 >> 2];
 $2 = $1;
 $1 = $0;
 HEAP32[$1 + 136 >> 2] = $2;
 HEAP32[$1 + 140 >> 2] = $6;
 $1 = HEAP32[$3 + 36 >> 2];
 $6 = HEAP32[$3 + 32 >> 2];
 HEAP32[$0 + 144 >> 2] = $6;
 HEAP32[$0 + 148 >> 2] = $1;
 $6 = HEAP32[$3 + 44 >> 2];
 $1 = HEAP32[$3 + 40 >> 2];
 $2 = $1;
 $1 = $0;
 HEAP32[$1 + 152 >> 2] = $2;
 HEAP32[$1 + 156 >> 2] = $6;
 $1 = HEAP32[$3 + 52 >> 2];
 $6 = HEAP32[$3 + 48 >> 2];
 HEAP32[$0 + 160 >> 2] = $6;
 HEAP32[$0 + 164 >> 2] = $1;
 $6 = HEAP32[$3 + 60 >> 2];
 $1 = HEAP32[$3 + 56 >> 2];
 $2 = $1;
 $1 = $0;
 HEAP32[$1 + 168 >> 2] = $2;
 HEAP32[$1 + 172 >> 2] = $6;
 HEAP32[$1 + 680 >> 2] = 0;
 HEAP32[$1 + 684 >> 2] = 0;
 HEAP32[$1 + 688 >> 2] = 0;
 HEAP32[$1 + 692 >> 2] = 0;
 HEAP32[$1 + 696 >> 2] = 0;
 HEAP32[$1 + 700 >> 2] = 0;
 HEAP32[$1 + 704 >> 2] = 0;
 HEAP32[$1 + 708 >> 2] = 0;
 HEAP32[$1 + 712 >> 2] = 0;
 HEAP32[$1 + 716 >> 2] = 0;
 HEAP32[$1 + 720 >> 2] = 0;
 HEAP32[$1 + 724 >> 2] = 0;
 HEAP32[$1 + 736 >> 2] = 1045220557;
 HEAP32[$1 + 728 >> 2] = 1045220557;
 HEAP32[$1 + 732 >> 2] = 1045220557;
 HEAP32[$1 + 756 >> 2] = 0;
 HEAP32[$1 + 748 >> 2] = 0;
 HEAP32[$1 + 752 >> 2] = 0;
 HEAP32[$1 + 740 >> 2] = 0;
 HEAP32[$1 + 744 >> 2] = 0;
 HEAP32[$1 + 768 >> 2] = 1063675494;
 HEAP32[$1 + 760 >> 2] = 1063675494;
 HEAP32[$1 + 764 >> 2] = 1063675494;
 HEAP32[$1 + 812 >> 2] = 0;
 HEAP32[$1 + 804 >> 2] = 0;
 HEAP32[$1 + 808 >> 2] = 0;
 HEAP32[$1 + 828 >> 2] = 0;
 HEAP32[$1 + 820 >> 2] = 0;
 HEAP32[$1 + 824 >> 2] = 0;
 HEAP8[$1 + 838 | 0] = 0;
 HEAP8[$1 + 836 | 0] = 0;
 HEAP8[$1 + 837 | 0] = 0;
 HEAP32[$1 + 848 >> 2] = 0;
 HEAP32[$1 + 840 >> 2] = 0;
 HEAP32[$1 + 844 >> 2] = 0;
 HEAP8[$1 + 858 | 0] = 0;
 HEAP8[$1 + 856 | 0] = 0;
 HEAP8[$1 + 857 | 0] = 0;
 HEAP32[$1 + 868 >> 2] = 0;
 HEAP32[$1 + 860 >> 2] = 0;
 HEAP32[$1 + 864 >> 2] = 0;
 HEAP32[$1 + 884 >> 2] = 0;
 HEAP32[$1 + 876 >> 2] = 0;
 HEAP32[$1 + 880 >> 2] = 0;
 HEAP32[$1 + 900 >> 2] = 0;
 HEAP32[$1 + 892 >> 2] = 0;
 HEAP32[$1 + 896 >> 2] = 0;
 HEAP8[$1 + 793 | 0] = 0;
 HEAP8[$1 + 794 | 0] = 0;
 HEAP8[$1 + 795 | 0] = 0;
 HEAP8[$1 + 796 | 0] = 0;
 HEAP8[$1 + 797 | 0] = 0;
 HEAP8[$1 + 798 | 0] = 0;
 HEAP8[$1 + 799 | 0] = 0;
 HEAP8[$1 + 800 | 0] = 0;
 HEAP32[$1 + 788 >> 2] = 0;
 HEAP32[$1 + 792 >> 2] = 0;
 HEAP32[$1 + 780 >> 2] = 0;
 HEAP32[$1 + 784 >> 2] = 0;
 HEAP32[$1 + 772 >> 2] = 0;
 HEAP32[$1 + 776 >> 2] = 0;
 HEAP32[$1 + 964 >> 2] = 0;
 HEAP32[$1 + 956 >> 2] = 0;
 HEAP32[$1 + 960 >> 2] = 0;
 HEAP32[$1 + 948 >> 2] = 0;
 HEAP32[$1 + 952 >> 2] = 0;
 HEAP32[$1 + 940 >> 2] = 0;
 HEAP32[$1 + 944 >> 2] = 0;
 HEAP32[$1 + 932 >> 2] = 0;
 HEAP32[$1 + 936 >> 2] = 0;
 HEAP32[$1 + 924 >> 2] = 0;
 HEAP32[$1 + 928 >> 2] = 0;
 HEAP32[$1 + 916 >> 2] = 0;
 HEAP32[$1 + 920 >> 2] = 0;
 HEAP32[$1 + 908 >> 2] = 0;
 HEAP32[$1 + 912 >> 2] = 0;
 HEAP8[$1 + 1032 | 0] = 0;
 HEAP32[$1 + 1028 >> 2] = 0;
 HEAP8[$1 + 1024 | 0] = 0;
 HEAP32[$1 + 1020 >> 2] = 0;
 HEAP8[$1 + 1016 | 0] = 0;
 HEAP32[$1 + 1012 >> 2] = 0;
 HEAP8[$1 + 1008 | 0] = 0;
 HEAP32[$1 + 1e3 >> 2] = 0;
 HEAP32[$1 + 1004 >> 2] = 1036831949;
 HEAP8[$1 + 996 | 0] = 0;
 HEAP32[$1 + 992 >> 2] = 0;
 HEAP32[$1 + 984 >> 2] = 0;
 HEAP32[$1 + 988 >> 2] = 1063675494;
 HEAP32[$1 + 976 >> 2] = 0;
 HEAP32[$1 + 980 >> 2] = 1045220557;
 HEAP32[$1 + 968 >> 2] = 1065353216;
 HEAP32[$1 + 972 >> 2] = -1082130432;
 HEAP32[$1 + 1052 >> 2] = 0;
 $1 = $1 + 1044 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 $1 = $0 + 1036 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP8[$0 + 1120 | 0] = 0;
 HEAP32[$0 + 1116 >> 2] = 0;
 HEAP8[$0 + 1112 | 0] = 0;
 HEAP32[$0 + 1108 >> 2] = 0;
 HEAP8[$0 + 1104 | 0] = 0;
 HEAP32[$0 + 1100 >> 2] = 0;
 HEAP8[$0 + 1096 | 0] = 0;
 $1 = $0 + 1088 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 1036831949;
 HEAP8[$0 + 1084 | 0] = 0;
 HEAP32[$0 + 1080 >> 2] = 0;
 $1 = $0 + 1072 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 1063675494;
 $1 = $0 + 1064 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 1045220557;
 $1 = $0 + 1056 | 0;
 HEAP32[$1 >> 2] = 1065353216;
 HEAP32[$1 + 4 >> 2] = -1082130432;
 HEAP32[$0 + 1140 >> 2] = 0;
 $1 = $0 + 1132 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 $1 = $0 + 1124 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP8[$0 + 1208 | 0] = 0;
 HEAP32[$0 + 1204 >> 2] = 0;
 HEAP8[$0 + 1200 | 0] = 0;
 HEAP32[$0 + 1196 >> 2] = 0;
 HEAP8[$0 + 1192 | 0] = 0;
 HEAP32[$0 + 1188 >> 2] = 0;
 HEAP8[$0 + 1184 | 0] = 0;
 $1 = $0 + 1176 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 1036831949;
 HEAP8[$0 + 1172 | 0] = 0;
 HEAP32[$0 + 1168 >> 2] = 0;
 $1 = $0 + 1160 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 1063675494;
 $1 = $0 + 1152 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 1045220557;
 $1 = $0 + 1144 | 0;
 HEAP32[$1 >> 2] = 1065353216;
 HEAP32[$1 + 4 >> 2] = -1082130432;
 HEAP32[$0 + 1228 >> 2] = 0;
 $1 = $0 + 1220 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 $1 = $0 + 1212 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$0 + 1456 >> 2] = 0;
 HEAP32[$0 + 1232 >> 2] = $5;
 btGeneric6DofSpring2Constraint__calculateTransforms_28btTransform_20const__2c_20btTransform_20const__29($0, HEAP32[$0 + 28 >> 2] + 4 | 0, HEAP32[$0 + 32 >> 2] + 4 | 0);
 return $0;
}
function gjkepa2_impl__GJK__projectorigin_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float__2c_20unsigned_20int__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = 0, $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = 0, $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = 0, $32 = 0, $33 = Math_fround(0);
 $6 = global$0 - 96 | 0;
 $20 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $20;
 HEAP32[$6 + 92 >> 2] = $3;
 HEAP32[$6 + 88 >> 2] = $2;
 HEAP32[$6 + 84 >> 2] = $1;
 HEAP32[$6 + 80 >> 2] = $0;
 $9 = HEAPF32[$3 >> 2];
 $11 = HEAPF32[$0 >> 2];
 $12 = HEAPF32[$3 + 4 >> 2];
 $15 = HEAPF32[$0 + 4 >> 2];
 $13 = HEAPF32[$3 + 8 >> 2];
 $21 = HEAPF32[$0 + 8 >> 2];
 HEAP32[$6 + 44 >> 2] = 0;
 $10 = Math_fround($21 - $13);
 HEAPF32[$6 + 40 >> 2] = $10;
 $8 = Math_fround($15 - $12);
 HEAPF32[$6 + 36 >> 2] = $8;
 $7 = Math_fround($11 - $9);
 HEAPF32[$6 + 32 >> 2] = $7;
 $22 = HEAPF32[$1 >> 2];
 $19 = HEAPF32[$1 + 4 >> 2];
 $27 = HEAPF32[$1 + 8 >> 2];
 HEAP32[$6 + 60 >> 2] = 0;
 $16 = Math_fround($27 - $13);
 HEAPF32[$6 + 56 >> 2] = $16;
 $23 = Math_fround($19 - $12);
 HEAPF32[$6 + 52 >> 2] = $23;
 $24 = Math_fround($22 - $9);
 HEAPF32[$6 + 48 >> 2] = $24;
 $25 = HEAPF32[$2 >> 2];
 $17 = HEAPF32[$2 + 4 >> 2];
 $33 = HEAPF32[$2 + 8 >> 2];
 HEAP32[$6 + 76 >> 2] = 0;
 $28 = Math_fround($33 - $13);
 HEAPF32[$6 + 72 >> 2] = $28;
 $29 = Math_fround($17 - $12);
 HEAPF32[$6 + 68 >> 2] = $29;
 $30 = Math_fround($25 - $9);
 HEAPF32[$6 + 64 >> 2] = $30;
 $14 = Math_fround(-1);
 $16 = Math_fround(Math_fround(Math_fround(Math_fround($7 * $23) * $28) + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($8 * $16) * $30) + Math_fround(Math_fround($10 * $24) * $29)) - Math_fround(Math_fround($7 * $16) * $29)) - Math_fround(Math_fround($8 * $24) * $28))) - Math_fround(Math_fround($10 * $23) * $30));
 label$2 : {
  if ($16 == Math_fround(0) | $16 != $16) {
   break label$2;
  }
  $23 = Math_fround($15 - $19);
  $24 = Math_fround($22 - $25);
  $22 = Math_fround($11 - $22);
  $19 = Math_fround($19 - $17);
  $25 = Math_fround($21 * Math_fround(Math_fround($23 * $24) - Math_fround($22 * $19)));
  $21 = Math_fround($21 - $27);
  $17 = Math_fround($21 * $19);
  $19 = Math_fround($27 - $33);
  if (!(Math_fround($16 * Math_fround($25 + Math_fround(Math_fround($11 * Math_fround($17 - Math_fround($23 * $19))) + Math_fround($15 * Math_fround(Math_fround($22 * $19) - Math_fround($21 * $24)))))) <= Math_fround(0))) {
   break label$2;
  }
  HEAP32[$6 + 24 >> 2] = 0;
  HEAP32[$6 + 16 >> 2] = 0;
  HEAP32[$6 + 20 >> 2] = 0;
  HEAP32[$6 + 12 >> 2] = 0;
  while (1) {
   $31 = $26 << 2;
   $32 = HEAP32[$31 + 4272 >> 2];
   $18 = ($6 + 32 | 0) + ($32 << 4) | 0;
   $11 = HEAPF32[$18 + 8 >> 2];
   $15 = HEAPF32[$18 + 4 >> 2];
   $17 = Math_fround(Math_fround(Math_fround($8 * $11) - Math_fround($10 * $15)) * $9);
   $9 = HEAPF32[$18 >> 2];
   label$4 : {
    if (!(Math_fround($16 * Math_fround(Math_fround($17 + Math_fround($12 * Math_fround(Math_fround($10 * $9) - Math_fround($11 * $7)))) + Math_fround(Math_fround(Math_fround($15 * $7) - Math_fround($8 * $9)) * $13))) > Math_fround(0))) {
     break label$4;
    }
    $20 = !($14 < Math_fround(0));
    $18 = $32 << 2;
    $10 = gjkepa2_impl__GJK__projectorigin_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float__2c_20unsigned_20int__29(HEAP32[($6 + 80 | 0) + $31 >> 2], HEAP32[$18 + ($6 + 80 | 0) >> 2], $3, $6 + 16 | 0, $6 + 12 | 0);
    if ($10 < $14 ^ 1 ? $20 : 0) {
     break label$4;
    }
    $20 = HEAP32[$6 + 12 >> 2];
    HEAP32[$5 >> 2] = ((1 << $32 & $20 << 30 >> 31) + ($20 << 1 & 8) | 0) + (0 - ($20 & 1) & 1 << $26);
    HEAP32[$4 + $31 >> 2] = HEAP32[$6 + 16 >> 2];
    HEAP32[$4 + $18 >> 2] = HEAP32[$6 + 20 >> 2];
    HEAP32[(HEAP32[$18 + 4272 >> 2] << 2) + $4 >> 2] = 0;
    HEAP32[$4 + 12 >> 2] = HEAP32[$6 + 24 >> 2];
    $14 = $10;
   }
   $26 = $26 + 1 | 0;
   if (($26 | 0) != 3) {
    $18 = ($6 + 32 | 0) + ($26 << 4) | 0;
    $7 = HEAPF32[$18 >> 2];
    $10 = HEAPF32[$18 + 8 >> 2];
    $8 = HEAPF32[$18 + 4 >> 2];
    $13 = HEAPF32[$3 + 8 >> 2];
    $12 = HEAPF32[$3 + 4 >> 2];
    $9 = HEAPF32[$3 >> 2];
    continue;
   }
   break;
  }
  if (!($14 < Math_fround(0))) {
   break label$2;
  }
  HEAP32[$5 >> 2] = 15;
  $10 = HEAPF32[$2 + 4 >> 2];
  $8 = HEAPF32[$1 + 8 >> 2];
  $7 = HEAPF32[$3 >> 2];
  $9 = HEAPF32[$2 + 8 >> 2];
  $12 = HEAPF32[$1 >> 2];
  $13 = HEAPF32[$3 + 4 >> 2];
  $11 = HEAPF32[$2 >> 2];
  $17 = Math_fround(Math_fround(Math_fround(Math_fround($10 * $8) * $7) + Math_fround(Math_fround($9 * $12) * $13)) - Math_fround($13 * Math_fround($8 * $11)));
  $14 = Math_fround($10 * $12);
  $10 = HEAPF32[$3 + 8 >> 2];
  $8 = HEAPF32[$1 + 4 >> 2];
  $10 = Math_fround(Math_fround(Math_fround(Math_fround($17 - Math_fround($14 * $10)) + Math_fround($10 * Math_fround($11 * $8))) - Math_fround($7 * Math_fround($9 * $8))) / $16);
  HEAPF32[$4 >> 2] = $10;
  $8 = HEAPF32[$0 + 4 >> 2];
  $7 = HEAPF32[$2 + 8 >> 2];
  $9 = HEAPF32[$3 >> 2];
  $12 = HEAPF32[$0 + 8 >> 2];
  $13 = HEAPF32[$2 >> 2];
  $11 = HEAPF32[$3 + 4 >> 2];
  $15 = HEAPF32[$0 >> 2];
  $17 = Math_fround(Math_fround(Math_fround(Math_fround($8 * $7) * $9) + Math_fround(Math_fround($12 * $13) * $11)) - Math_fround($11 * Math_fround($7 * $15)));
  $14 = Math_fround($8 * $13);
  $8 = HEAPF32[$3 + 8 >> 2];
  $7 = HEAPF32[$2 + 4 >> 2];
  $8 = Math_fround(Math_fround(Math_fround(Math_fround($17 - Math_fround($14 * $8)) + Math_fround($8 * Math_fround($15 * $7))) - Math_fround($9 * Math_fround($12 * $7))) / $16);
  HEAPF32[$4 + 4 >> 2] = $8;
  $7 = HEAPF32[$1 + 4 >> 2];
  $9 = HEAPF32[$0 + 8 >> 2];
  $12 = HEAPF32[$3 >> 2];
  $13 = HEAPF32[$1 + 8 >> 2];
  $11 = HEAPF32[$0 >> 2];
  $15 = HEAPF32[$3 + 4 >> 2];
  $14 = HEAPF32[$1 >> 2];
  $25 = Math_fround(Math_fround(Math_fround(Math_fround($7 * $9) * $12) + Math_fround(Math_fround($13 * $11) * $15)) - Math_fround($15 * Math_fround($9 * $14)));
  $17 = Math_fround($7 * $11);
  $7 = HEAPF32[$3 + 8 >> 2];
  $9 = HEAPF32[$0 + 4 >> 2];
  $7 = Math_fround(Math_fround(Math_fround(Math_fround($25 - Math_fround($17 * $7)) + Math_fround($7 * Math_fround($14 * $9))) - Math_fround($12 * Math_fround($13 * $9))) / $16);
  HEAPF32[$4 + 8 >> 2] = $7;
  HEAPF32[$4 + 12 >> 2] = Math_fround(1) - Math_fround(Math_fround($10 + $8) + $7);
  $14 = Math_fround(0);
 }
 $0 = $6 + 96 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $14;
}
function btDiscreteDynamicsWorld__integrateTransformsInternal_28btRigidBody___2c_20int_2c_20float_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = 0, $17 = 0;
 $4 = global$0 - 304 | 0;
 $6 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 if (($2 | 0) >= 1) {
  $13 = $4 + 16 | 0;
  while (1) {
   $7 = HEAP32[($14 << 2) + $1 >> 2];
   HEAP32[$7 + 268 >> 2] = 1065353216;
   label$4 : {
    label$5 : {
     $12 = HEAP32[$7 + 220 >> 2] + -2 | 0;
     if ($12 >>> 0 > 3) {
      break label$5;
     }
     switch ($12 - 1 | 0) {
     case 0:
     case 1:
      break label$5;
     default:
      break label$4;
     }
    }
    if (HEAPU8[$7 + 204 | 0] & 3) {
     break label$4;
    }
    btRigidBody__predictIntegratedTransform_28float_2c_20btTransform__29($7, $3, $4 + 240 | 0);
    label$6 : {
     if (!HEAPU8[$0 + 44 | 0]) {
      break label$6;
     }
     $10 = HEAPF32[$7 + 276 >> 2];
     $10 = Math_fround($10 * $10);
     if ($10 == Math_fround(0)) {
      break label$6;
     }
     $9 = $7 + 52 | 0;
     $11 = Math_fround(HEAPF32[$4 + 288 >> 2] - HEAPF32[$9 >> 2]);
     $15 = Math_fround($11 * $11);
     $11 = Math_fround(HEAPF32[$4 + 292 >> 2] - HEAPF32[$7 + 56 >> 2]);
     $15 = Math_fround($15 + Math_fround($11 * $11));
     $11 = Math_fround(HEAPF32[$4 + 296 >> 2] - HEAPF32[$7 + 60 >> 2]);
     if (!($10 < Math_fround($15 + Math_fround($11 * $11)))) {
      break label$6;
     }
     $8 = $7;
     $17 = CProfileSample__CProfileSample_28char_20const__29($4 + 232 | 0, 2737);
     label$7 : {
      if (HEAP32[HEAP32[$7 + 192 >> 2] + 4 >> 2] <= 19) {
       $12 = 0;
       HEAP32[5211] = HEAP32[5211] + 1;
       $9 = HEAP32[$0 + 68 >> 2];
       $9 = FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 36 >> 2]]($9) | 0;
       $16 = HEAP32[$0 + 24 >> 2];
       HEAP32[$4 + 140 >> 2] = -1;
       HEAP32[$4 + 132 >> 2] = 1065353216;
       HEAP32[$4 + 136 >> 2] = 1;
       $5 = HEAP32[$8 + 60 >> 2];
       $6 = HEAP32[$8 + 64 >> 2];
       HEAP32[$4 + 152 >> 2] = $5;
       HEAP32[$4 + 156 >> 2] = $6;
       $5 = HEAP32[$8 + 56 >> 2];
       $6 = HEAP32[$8 + 52 >> 2];
       HEAP32[$4 + 144 >> 2] = $6;
       HEAP32[$4 + 148 >> 2] = $5;
       $6 = HEAP32[$4 + 300 >> 2];
       $5 = HEAP32[$4 + 296 >> 2];
       HEAP32[$4 + 168 >> 2] = $5;
       HEAP32[$4 + 172 >> 2] = $6;
       $5 = HEAP32[$4 + 292 >> 2];
       $6 = HEAP32[$4 + 288 >> 2];
       HEAP32[$4 + 160 >> 2] = $6;
       HEAP32[$4 + 164 >> 2] = $5;
       HEAP32[$4 + 208 >> 2] = 0;
       HEAP32[$4 + 128 >> 2] = 3060;
       HEAP32[$4 + 220 >> 2] = $9;
       HEAP32[$4 + 224 >> 2] = $16;
       HEAP32[$4 + 216 >> 2] = 0;
       HEAP32[$4 + 212 >> 2] = $7;
       $9 = HEAP32[$7 + 272 >> 2];
       btConvexInternalShape__btConvexInternalShape_28_29($4 - -64 | 0);
       HEAP32[$4 + 92 >> 2] = 1065353216;
       HEAP32[$4 + 84 >> 2] = 1065353216;
       HEAP32[$4 + 88 >> 2] = 1065353216;
       HEAP32[$4 + 68 >> 2] = 8;
       HEAP32[$4 + 64 >> 2] = 11396;
       HEAP32[$4 + 104 >> 2] = 0;
       HEAP32[$4 + 108 >> 2] = 0;
       HEAP32[$4 + 112 >> 2] = 0;
       HEAP32[$4 + 96 >> 2] = 0;
       HEAP32[$4 + 100 >> 2] = 0;
       HEAP32[$4 + 120 >> 2] = 0;
       HEAP32[$4 + 116 >> 2] = $9;
       HEAP32[$4 + 100 >> 2] = $9;
       HEAP32[$4 + 216 >> 2] = HEAP32[$0 + 56 >> 2];
       $9 = HEAP32[$7 + 188 >> 2];
       HEAP32[$4 + 136 >> 2] = HEAP32[$9 + 4 >> 2];
       HEAP32[$4 + 140 >> 2] = HEAP32[$9 + 8 >> 2];
       $6 = HEAP32[$4 + 252 >> 2];
       $5 = HEAP32[$4 + 248 >> 2];
       $8 = $5;
       $9 = $4 + 8 | 0;
       $5 = $9;
       HEAP32[$5 >> 2] = $8;
       HEAP32[$5 + 4 >> 2] = $6;
       $5 = HEAP32[$4 + 244 >> 2];
       $6 = HEAP32[$4 + 240 >> 2];
       HEAP32[$4 >> 2] = $6;
       HEAP32[$4 + 4 >> 2] = $5;
       $6 = HEAP32[$4 + 268 >> 2];
       $5 = HEAP32[$4 + 264 >> 2];
       $8 = $5;
       $16 = $13 + 8 | 0;
       $5 = $16;
       HEAP32[$5 >> 2] = $8;
       HEAP32[$5 + 4 >> 2] = $6;
       $5 = HEAP32[$4 + 260 >> 2];
       $6 = HEAP32[$4 + 256 >> 2];
       $8 = $6;
       $6 = $13;
       HEAP32[$6 >> 2] = $8;
       HEAP32[$6 + 4 >> 2] = $5;
       $6 = HEAP32[$4 + 284 >> 2];
       $5 = HEAP32[$4 + 280 >> 2];
       HEAP32[$4 + 40 >> 2] = $5;
       HEAP32[$4 + 44 >> 2] = $6;
       $5 = HEAP32[$4 + 276 >> 2];
       $6 = HEAP32[$4 + 272 >> 2];
       HEAP32[$4 + 32 >> 2] = $6;
       HEAP32[$4 + 36 >> 2] = $5;
       $6 = HEAP32[$4 + 300 >> 2];
       $5 = HEAP32[$4 + 296 >> 2];
       HEAP32[$4 + 56 >> 2] = $5;
       HEAP32[$4 + 60 >> 2] = $6;
       $5 = HEAP32[$4 + 292 >> 2];
       $6 = HEAP32[$4 + 288 >> 2];
       HEAP32[$4 + 48 >> 2] = $6;
       HEAP32[$4 + 52 >> 2] = $5;
       $9 = $7 + 4 | 0;
       $8 = $9;
       $5 = HEAP32[$8 + 8 >> 2];
       $6 = HEAP32[$8 + 12 >> 2];
       HEAP32[$4 + 8 >> 2] = $5;
       HEAP32[$4 + 12 >> 2] = $6;
       $5 = HEAP32[$8 + 4 >> 2];
       $6 = HEAP32[$8 >> 2];
       HEAP32[$4 >> 2] = $6;
       HEAP32[$4 + 4 >> 2] = $5;
       $6 = HEAP32[$7 + 32 >> 2];
       $5 = HEAP32[$7 + 28 >> 2];
       $8 = $5;
       $5 = $13;
       HEAP32[$5 + 8 >> 2] = $8;
       HEAP32[$5 + 12 >> 2] = $6;
       $5 = HEAP32[$7 + 24 >> 2];
       $6 = HEAP32[$7 + 20 >> 2];
       $8 = $6;
       $6 = $13;
       HEAP32[$6 >> 2] = $8;
       HEAP32[$6 + 4 >> 2] = $5;
       $6 = HEAP32[$7 + 48 >> 2];
       $5 = HEAP32[$7 + 44 >> 2];
       HEAP32[$4 + 40 >> 2] = $5;
       HEAP32[$4 + 44 >> 2] = $6;
       $5 = HEAP32[$7 + 40 >> 2];
       $6 = HEAP32[$7 + 36 >> 2];
       HEAP32[$4 + 32 >> 2] = $6;
       HEAP32[$4 + 36 >> 2] = $5;
       btCollisionWorld__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29_20const($0, $4 - -64 | 0, $9, $4, $4 + 128 | 0, Math_fround(0));
       $10 = HEAPF32[$4 + 132 >> 2];
       if (!!($10 < Math_fround(1))) {
        HEAPF32[$7 + 268 >> 2] = $10;
        btRigidBody__predictIntegratedTransform_28float_2c_20btTransform__29($7, Math_fround($10 * $3), $4 + 240 | 0);
        HEAP32[$7 + 268 >> 2] = 0;
        btRigidBody__proceedToTransform_28btTransform_20const__29($7, $4 + 240 | 0);
        $12 = 4;
       }
       btConvexShape___btConvexShape_28_29($4 - -64 | 0);
       if ($12) {
        break label$7;
       }
      }
      $12 = 0;
     }
     CProfileSample___CProfileSample_28_29($17);
     if ($12) {
      break label$4;
     }
    }
    btRigidBody__proceedToTransform_28btTransform_20const__29($7, $4 + 240 | 0);
   }
   $14 = $14 + 1 | 0;
   if (($14 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = $4 + 304 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function SphereTriangleDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = 0, $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0);
 $3 = global$0 - 144 | 0;
 $26 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $26;
 HEAP32[$3 + 108 >> 2] = 0;
 $5 = HEAPF32[$1 + 80 >> 2];
 $8 = HEAPF32[$1 + 96 >> 2];
 $20 = HEAPF32[$1 + 120 >> 2];
 $27 = HEAPF32[$1 + 56 >> 2];
 $21 = HEAPF32[$1 + 112 >> 2];
 $22 = HEAPF32[$1 + 116 >> 2];
 $28 = HEAPF32[$1 + 52 >> 2];
 $9 = HEAPF32[$1 + 68 >> 2];
 $13 = HEAPF32[$1 + 84 >> 2];
 $14 = HEAPF32[$1 + 100 >> 2];
 $6 = HEAPF32[$1 + 20 >> 2];
 $7 = HEAPF32[$1 + 36 >> 2];
 $15 = HEAPF32[$1 + 72 >> 2];
 $16 = HEAPF32[$1 + 88 >> 2];
 $10 = HEAPF32[$1 + 24 >> 2];
 $11 = HEAPF32[$1 + 104 >> 2];
 $18 = HEAPF32[$1 + 40 >> 2];
 $12 = HEAPF32[$1 + 64 >> 2];
 $17 = HEAPF32[$1 + 32 >> 2];
 $19 = HEAPF32[$1 >> 2];
 $23 = HEAPF32[$1 + 16 >> 2];
 $29 = HEAPF32[$1 + 48 >> 2];
 $24 = HEAPF32[$1 + 4 >> 2];
 $25 = HEAPF32[$1 + 8 >> 2];
 HEAP32[$3 + 100 >> 2] = 0;
 HEAP32[$3 + 84 >> 2] = 0;
 HEAP32[$3 + 68 >> 2] = 0;
 HEAPF32[$3 + 80 >> 2] = Math_fround(Math_fround($25 * $15) + Math_fround($10 * $16)) + Math_fround($18 * $11);
 HEAPF32[$3 + 76 >> 2] = Math_fround(Math_fround($24 * $15) + Math_fround($6 * $16)) + Math_fround($7 * $11);
 HEAPF32[$3 - -64 >> 2] = Math_fround(Math_fround($25 * $9) + Math_fround($10 * $13)) + Math_fround($18 * $14);
 HEAPF32[$3 + 60 >> 2] = Math_fround(Math_fround($24 * $9) + Math_fround($6 * $13)) + Math_fround($7 * $14);
 $21 = Math_fround($29 - $21);
 $22 = Math_fround($28 - $22);
 $20 = Math_fround($27 - $20);
 HEAPF32[$3 + 96 >> 2] = Math_fround(Math_fround($15 * $21) + Math_fround($16 * $22)) + Math_fround($11 * $20);
 HEAPF32[$3 + 92 >> 2] = Math_fround(Math_fround($21 * $9) + Math_fround($22 * $13)) + Math_fround($20 * $14);
 HEAP32[$3 + 52 >> 2] = 0;
 HEAPF32[$3 + 72 >> 2] = Math_fround(Math_fround($19 * $15) + Math_fround($23 * $16)) + Math_fround($17 * $11);
 HEAPF32[$3 + 56 >> 2] = Math_fround(Math_fround($19 * $9) + Math_fround($23 * $13)) + Math_fround($17 * $14);
 HEAPF32[$3 + 48 >> 2] = Math_fround(Math_fround($12 * $25) + Math_fround($5 * $10)) + Math_fround($8 * $18);
 HEAPF32[$3 + 44 >> 2] = Math_fround(Math_fround($12 * $24) + Math_fround($5 * $6)) + Math_fround($8 * $7);
 HEAPF32[$3 + 40 >> 2] = Math_fround(Math_fround($12 * $19) + Math_fround($5 * $23)) + Math_fround($8 * $17);
 HEAPF32[$3 + 88 >> 2] = Math_fround(Math_fround($21 * $12) + Math_fround($22 * $5)) + Math_fround($20 * $8);
 label$2 : {
  if (!SphereTriangleDetector__collide_28btVector3_20const__2c_20btVector3__2c_20btVector3__2c_20float__2c_20float__2c_20float_29($0, $3 + 88 | 0, $3 + 128 | 0, $3 + 112 | 0, $3 + 108 | 0, $3, HEAPF32[$0 + 12 >> 2])) {
   break label$2;
  }
  if ($4) {
   $13 = HEAPF32[$1 + 72 >> 2];
   $14 = HEAPF32[$1 + 64 >> 2];
   $15 = HEAPF32[$1 + 68 >> 2];
   $16 = HEAPF32[$1 + 88 >> 2];
   $11 = HEAPF32[$1 + 80 >> 2];
   $12 = HEAPF32[$1 + 84 >> 2];
   $6 = HEAPF32[$1 + 104 >> 2];
   $7 = HEAPF32[$1 + 96 >> 2];
   $10 = HEAPF32[$1 + 100 >> 2];
   $5 = HEAPF32[$3 + 120 >> 2];
   $8 = HEAPF32[$3 + 112 >> 2];
   $9 = HEAPF32[$3 + 116 >> 2];
   HEAP32[$3 + 36 >> 2] = 0;
   $18 = Math_fround(Math_fround(Math_fround($8 * $7) + Math_fround($9 * $10)) + Math_fround($5 * $6));
   HEAPF32[$3 + 32 >> 2] = -$18;
   $17 = Math_fround(Math_fround(Math_fround($8 * $11) + Math_fround($9 * $12)) + Math_fround($5 * $16));
   HEAPF32[$3 + 28 >> 2] = -$17;
   $19 = Math_fround(Math_fround(Math_fround($14 * $8) + Math_fround($15 * $9)) + Math_fround($13 * $5));
   HEAPF32[$3 + 24 >> 2] = -$19;
   $23 = HEAPF32[$1 + 112 >> 2];
   $24 = HEAPF32[$1 + 116 >> 2];
   $5 = HEAPF32[$1 + 120 >> 2];
   HEAP32[$3 + 20 >> 2] = 0;
   $8 = HEAPF32[$3 + 128 >> 2];
   $9 = HEAPF32[$3 + 132 >> 2];
   $10 = Math_fround(Math_fround($7 * $8) + Math_fround($10 * $9));
   $7 = HEAPF32[$3 + 136 >> 2];
   $6 = Math_fround($5 + Math_fround($10 + Math_fround($6 * $7)));
   $5 = HEAPF32[$3 + 108 >> 2];
   HEAPF32[$3 + 16 >> 2] = $6 + Math_fround($18 * $5);
   HEAPF32[$3 + 12 >> 2] = Math_fround($24 + Math_fround(Math_fround(Math_fround($8 * $11) + Math_fround($9 * $12)) + Math_fround($7 * $16))) + Math_fround($17 * $5);
   HEAPF32[$3 + 8 >> 2] = Math_fround($23 + Math_fround(Math_fround(Math_fround($8 * $14) + Math_fround($9 * $15)) + Math_fround($7 * $13))) + Math_fround($19 * $5);
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $3 + 24 | 0, $3 + 8 | 0, $5);
   break label$2;
  }
  $5 = HEAPF32[$1 + 72 >> 2];
  $8 = HEAPF32[$1 + 64 >> 2];
  $9 = HEAPF32[$1 + 68 >> 2];
  $13 = HEAPF32[$1 + 88 >> 2];
  $14 = HEAPF32[$1 + 80 >> 2];
  $15 = HEAPF32[$1 + 84 >> 2];
  $16 = HEAPF32[$1 + 104 >> 2];
  $11 = HEAPF32[$1 + 96 >> 2];
  $12 = HEAPF32[$1 + 100 >> 2];
  HEAP32[$3 + 36 >> 2] = 0;
  $6 = HEAPF32[$3 + 112 >> 2];
  $7 = HEAPF32[$3 + 116 >> 2];
  $10 = HEAPF32[$3 + 120 >> 2];
  HEAPF32[$3 + 32 >> 2] = Math_fround(Math_fround($11 * $6) + Math_fround($12 * $7)) + Math_fround($16 * $10);
  HEAPF32[$3 + 28 >> 2] = Math_fround(Math_fround($6 * $14) + Math_fround($7 * $15)) + Math_fround($10 * $13);
  HEAPF32[$3 + 24 >> 2] = Math_fround(Math_fround($8 * $6) + Math_fround($9 * $7)) + Math_fround($5 * $10);
  $7 = HEAPF32[$1 + 112 >> 2];
  $10 = HEAPF32[$1 + 116 >> 2];
  $18 = HEAPF32[$1 + 120 >> 2];
  HEAP32[$3 + 20 >> 2] = 0;
  $6 = HEAPF32[$3 + 128 >> 2];
  $17 = Math_fround($11 * $6);
  $11 = HEAPF32[$3 + 132 >> 2];
  $17 = Math_fround($17 + Math_fround($12 * $11));
  $12 = HEAPF32[$3 + 136 >> 2];
  HEAPF32[$3 + 16 >> 2] = $18 + Math_fround($17 + Math_fround($16 * $12));
  HEAPF32[$3 + 12 >> 2] = $10 + Math_fround(Math_fround(Math_fround($6 * $14) + Math_fround($11 * $15)) + Math_fround($12 * $13));
  HEAPF32[$3 + 8 >> 2] = $7 + Math_fround(Math_fround(Math_fround($6 * $8) + Math_fround($11 * $9)) + Math_fround($12 * $5));
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $3 + 24 | 0, $3 + 8 | 0, HEAPF32[$3 + 108 >> 2]);
 }
 $0 = $3 + 144 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody__setupRigidBody_28btRigidBody__btRigidBodyConstructionInfo_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0);
 $4 = global$0 - 16 | 0;
 $2 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$0 + 372 >> 2] = 0;
 HEAP32[$0 + 376 >> 2] = 0;
 HEAP32[$0 + 252 >> 2] = 2;
 HEAP32[$0 + 604 >> 2] = 1065353216;
 HEAP32[$0 + 608 >> 2] = 1065353216;
 HEAP32[$0 + 408 >> 2] = 1065353216;
 HEAP32[$0 + 412 >> 2] = 1065353216;
 HEAP32[$0 + 472 >> 2] = 0;
 HEAP32[$0 + 476 >> 2] = 0;
 HEAP32[$0 + 380 >> 2] = 0;
 HEAP32[$0 + 384 >> 2] = 0;
 HEAP32[$0 + 388 >> 2] = 0;
 HEAP32[$0 + 392 >> 2] = 0;
 HEAP32[$0 + 396 >> 2] = 0;
 HEAP32[$0 + 400 >> 2] = 0;
 HEAP32[$0 + 612 >> 2] = 1065353216;
 HEAP32[$0 + 616 >> 2] = 0;
 HEAP32[$0 + 420 >> 2] = 0;
 HEAP32[$0 + 424 >> 2] = 0;
 HEAP32[$0 + 416 >> 2] = 1065353216;
 HEAP32[$0 + 428 >> 2] = 0;
 HEAP32[$0 + 432 >> 2] = 0;
 HEAP32[$0 + 436 >> 2] = 0;
 HEAP32[$0 + 440 >> 2] = 0;
 HEAP32[$0 + 444 >> 2] = 0;
 HEAP32[$0 + 448 >> 2] = 0;
 HEAP32[$0 + 452 >> 2] = 0;
 HEAP32[$0 + 480 >> 2] = 0;
 HEAP32[$0 + 484 >> 2] = 0;
 HEAP32[$0 + 488 >> 2] = 0;
 HEAP32[$0 + 492 >> 2] = 0;
 HEAP32[$0 + 496 >> 2] = 0;
 HEAP32[$0 + 500 >> 2] = 0;
 $5 = HEAPF32[$1 + 96 >> 2];
 $6 = HEAPF32[$1 + 92 >> 2];
 HEAPF32[$4 + 12 >> 2] = $6;
 HEAPF32[$4 + 8 >> 2] = $5;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 >> 2] = 1065353216;
 HEAP32[$0 + 504 >> 2] = HEAP32[($6 < Math_fround(0) ? $4 + 4 | 0 : $6 > Math_fround(1) ? $4 : $4 + 12 | 0) >> 2];
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 >> 2] = 1065353216;
 HEAP32[$0 + 508 >> 2] = HEAP32[($5 < Math_fround(0) ? $4 + 4 | 0 : $5 > Math_fround(1) ? $4 : $4 + 8 | 0) >> 2];
 HEAP32[$0 + 532 >> 2] = HEAP32[$1 + 116 >> 2];
 HEAP32[$0 + 536 >> 2] = HEAP32[$1 + 120 >> 2];
 $2 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 668 >> 2] = 0;
 HEAP32[$0 + 672 >> 2] = 0;
 HEAP32[$0 + 540 >> 2] = $2;
 HEAP8[$0 + 512 | 0] = HEAPU8[$1 + 124 | 0];
 HEAP32[$0 + 516 >> 2] = HEAP32[$1 + 128 >> 2];
 HEAP32[$0 + 520 >> 2] = HEAP32[$1 + 132 >> 2];
 HEAP32[$0 + 524 >> 2] = HEAP32[$1 + 136 >> 2];
 HEAP32[$0 + 528 >> 2] = HEAP32[$1 + 140 >> 2];
 label$2 : {
  if ($2) {
   $7 = $0 + 4 | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $7);
   break label$2;
  }
  $2 = HEAP32[$1 + 12 >> 2];
  $3 = HEAP32[$1 + 8 >> 2];
  HEAP32[$0 + 4 >> 2] = $3;
  HEAP32[$0 + 8 >> 2] = $2;
  $3 = HEAP32[$1 + 20 >> 2];
  $2 = HEAP32[$1 + 16 >> 2];
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 16 >> 2] = $3;
  $2 = HEAP32[$1 + 36 >> 2];
  $3 = HEAP32[$1 + 32 >> 2];
  HEAP32[$0 + 28 >> 2] = $3;
  HEAP32[$0 + 32 >> 2] = $2;
  $3 = HEAP32[$1 + 28 >> 2];
  $2 = HEAP32[$1 + 24 >> 2];
  HEAP32[$0 + 20 >> 2] = $2;
  HEAP32[$0 + 24 >> 2] = $3;
  $2 = HEAP32[$1 + 44 >> 2];
  $3 = HEAP32[$1 + 40 >> 2];
  HEAP32[$0 + 36 >> 2] = $3;
  HEAP32[$0 + 40 >> 2] = $2;
  $3 = HEAP32[$1 + 52 >> 2];
  $2 = HEAP32[$1 + 48 >> 2];
  HEAP32[$0 + 44 >> 2] = $2;
  HEAP32[$0 + 48 >> 2] = $3;
  $7 = $1 - -64 | 0;
  $3 = HEAP32[$7 >> 2];
  $2 = HEAP32[$7 + 4 >> 2];
  HEAP32[$0 + 60 >> 2] = $3;
  HEAP32[$0 + 64 >> 2] = $2;
  $3 = HEAP32[$1 + 60 >> 2];
  $2 = HEAP32[$1 + 56 >> 2];
  HEAP32[$0 + 52 >> 2] = $2;
  HEAP32[$0 + 56 >> 2] = $3;
  $7 = $0 + 4 | 0;
 }
 $3 = HEAP32[$7 >> 2];
 $2 = HEAP32[$7 + 4 >> 2];
 HEAP32[$0 + 68 >> 2] = $3;
 HEAP32[$0 + 72 >> 2] = $2;
 $3 = HEAP32[$7 + 12 >> 2];
 $2 = HEAP32[$7 + 8 >> 2];
 HEAP32[$0 + 76 >> 2] = $2;
 HEAP32[$0 + 80 >> 2] = $3;
 $2 = HEAP32[$0 + 32 >> 2];
 $3 = HEAP32[$0 + 28 >> 2];
 HEAP32[$0 + 92 >> 2] = $3;
 HEAP32[$0 + 96 >> 2] = $2;
 $3 = HEAP32[$0 + 24 >> 2];
 $2 = HEAP32[$0 + 20 >> 2];
 HEAP32[$0 + 84 >> 2] = $2;
 HEAP32[$0 + 88 >> 2] = $3;
 $2 = HEAP32[$0 + 40 >> 2];
 $3 = HEAP32[$0 + 36 >> 2];
 HEAP32[$0 + 100 >> 2] = $3;
 HEAP32[$0 + 104 >> 2] = $2;
 $3 = HEAP32[$0 + 48 >> 2];
 $2 = HEAP32[$0 + 44 >> 2];
 HEAP32[$0 + 108 >> 2] = $2;
 HEAP32[$0 + 112 >> 2] = $3;
 $2 = HEAP32[$0 + 56 >> 2];
 $3 = HEAP32[$0 + 52 >> 2];
 HEAP32[$0 + 116 >> 2] = $3;
 HEAP32[$0 + 120 >> 2] = $2;
 $3 = HEAP32[$0 + 64 >> 2];
 $2 = HEAP32[$0 + 60 >> 2];
 HEAP32[$0 + 124 >> 2] = $2;
 HEAP32[$0 + 128 >> 2] = $3;
 HEAP32[$0 + 132 >> 2] = 0;
 HEAP32[$0 + 136 >> 2] = 0;
 HEAP32[$0 + 140 >> 2] = 0;
 HEAP32[$0 + 144 >> 2] = 0;
 HEAP32[$0 + 148 >> 2] = 0;
 HEAP32[$0 + 152 >> 2] = 0;
 HEAP32[$0 + 156 >> 2] = 0;
 HEAP32[$0 + 160 >> 2] = 0;
 HEAP32[$0 + 228 >> 2] = HEAP32[$1 + 100 >> 2];
 HEAP32[$0 + 236 >> 2] = HEAP32[$1 + 104 >> 2];
 HEAP32[$0 + 240 >> 2] = HEAP32[$1 + 108 >> 2];
 HEAP32[$0 + 232 >> 2] = HEAP32[$1 + 112 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$1 + 72 >> 2]);
 $2 = HEAP32[5210];
 HEAP32[5210] = $2 + 1;
 HEAP32[$0 + 568 >> 2] = $2;
 $5 = Math_fround(0);
 $2 = HEAP32[$0 + 204 >> 2];
 $6 = HEAPF32[$1 >> 2];
 label$4 : {
  if ($6 == Math_fround(0)) {
   HEAP32[$0 + 204 >> 2] = $2 | 1;
   break label$4;
  }
  HEAP32[$0 + 204 >> 2] = $2 & -2;
  $5 = Math_fround(Math_fround(1) / $6);
 }
 HEAP32[$0 + 436 >> 2] = 0;
 HEAPF32[$0 + 404 >> 2] = $5;
 HEAPF32[$0 + 432 >> 2] = $6 * HEAPF32[$0 + 448 >> 2];
 HEAPF32[$0 + 428 >> 2] = $6 * HEAPF32[$0 + 444 >> 2];
 HEAPF32[$0 + 424 >> 2] = $6 * HEAPF32[$0 + 440 >> 2];
 $6 = HEAPF32[$1 + 84 >> 2];
 $8 = HEAPF32[$1 + 80 >> 2];
 $9 = HEAPF32[$1 + 76 >> 2];
 HEAPF32[$0 + 620 >> 2] = $5 * HEAPF32[$0 + 408 >> 2];
 $1 = $0 + 624 | 0;
 HEAPF32[$1 >> 2] = $5 * HEAPF32[$0 + 412 >> 2];
 $2 = $0 + 628 | 0;
 HEAPF32[$2 >> 2] = $5 * HEAPF32[$0 + 416 >> 2];
 $7 = $0 + 632 | 0;
 HEAP32[$7 >> 2] = 0;
 HEAP32[$0 + 468 >> 2] = 0;
 HEAPF32[$0 + 456 >> 2] = $9 != Math_fround(0) ? Math_fround(Math_fround(1) / $9) : Math_fround(0);
 HEAPF32[$0 + 460 >> 2] = $8 != Math_fround(0) ? Math_fround(Math_fround(1) / $8) : Math_fround(0);
 HEAPF32[$0 + 464 >> 2] = $6 != Math_fround(0) ? Math_fround(Math_fround(1) / $6) : Math_fround(0);
 btRigidBody__updateInertiaTensor_28_29($0);
 HEAP32[$0 + 572 >> 2] = 0;
 HEAP32[$0 + 576 >> 2] = 0;
 HEAP32[$0 + 564 >> 2] = 8;
 HEAP32[$0 + 580 >> 2] = 0;
 HEAP32[$0 + 584 >> 2] = 0;
 HEAP32[$0 + 588 >> 2] = 0;
 HEAP32[$0 + 592 >> 2] = 0;
 HEAP32[$0 + 596 >> 2] = 0;
 HEAP32[$0 + 600 >> 2] = 0;
 HEAP32[$0 + 632 >> 2] = 0;
 HEAP32[$0 + 636 >> 2] = 0;
 HEAP32[$0 + 640 >> 2] = 0;
 HEAP32[$0 + 644 >> 2] = 0;
 HEAP32[$0 + 648 >> 2] = 0;
 HEAP32[$0 + 652 >> 2] = 0;
 HEAP32[$0 + 656 >> 2] = 0;
 HEAP32[$0 + 660 >> 2] = 0;
 HEAP32[$0 + 664 >> 2] = 0;
 $5 = HEAPF32[$0 + 404 >> 2];
 HEAPF32[$0 + 628 >> 2] = $5 * HEAPF32[$0 + 416 >> 2];
 HEAPF32[$0 + 624 >> 2] = $5 * HEAPF32[$0 + 412 >> 2];
 HEAPF32[$0 + 620 >> 2] = $5 * HEAPF32[$0 + 408 >> 2];
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTriangleMesh__findOrAddVertex_28btVector3_20const__2c_20bool_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0);
 label$1 : {
  if (HEAPU8[$0 + 165 | 0]) {
   $4 = HEAP32[$0 + 88 >> 2];
   if (!(!$2 | ($4 | 0) < 1)) {
    $5 = HEAP32[$0 + 96 >> 2];
    $12 = HEAPF32[$0 + 168 >> 2];
    $13 = HEAPF32[$1 + 8 >> 2];
    $14 = HEAPF32[$1 + 4 >> 2];
    $15 = HEAPF32[$1 >> 2];
    $2 = 0;
    while (1) {
     $3 = ($2 << 4) + $5 | 0;
     $7 = Math_fround(HEAPF32[$3 >> 2] - $15);
     $9 = Math_fround($7 * $7);
     $7 = Math_fround(HEAPF32[$3 + 4 >> 2] - $14);
     $9 = Math_fround($9 + Math_fround($7 * $7));
     $7 = Math_fround(HEAPF32[$3 + 8 >> 2] - $13);
     if (Math_fround($9 + Math_fround($7 * $7)) <= $12) {
      break label$1;
     }
     $2 = $2 + 1 | 0;
     if (($2 | 0) < ($4 | 0)) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$0 + 32 >> 2];
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
   label$5 : {
    if (HEAP32[$0 + 92 >> 2] != ($4 | 0)) {
     break label$5;
    }
    $6 = $4 ? $4 << 1 : 1;
    if (($4 | 0) >= ($6 | 0)) {
     break label$5;
    }
    if ($6) {
     $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 4, 16);
     $4 = HEAP32[$0 + 88 >> 2];
    }
    if (($4 | 0) >= 1) {
     $2 = 0;
     while (1) {
      $3 = $2 << 4;
      $5 = $8 + $3 | 0;
      $3 = HEAP32[$0 + 96 >> 2] + $3 | 0;
      $10 = HEAP32[$3 >> 2];
      $11 = HEAP32[$3 + 4 >> 2];
      HEAP32[$5 >> 2] = $10;
      HEAP32[$5 + 4 >> 2] = $11;
      $10 = HEAP32[$3 + 12 >> 2];
      $11 = HEAP32[$3 + 8 >> 2];
      HEAP32[$5 + 8 >> 2] = $11;
      HEAP32[$5 + 12 >> 2] = $10;
      $2 = $2 + 1 | 0;
      if (($4 | 0) != ($2 | 0)) {
       continue;
      }
      break;
     }
    }
    $2 = HEAP32[$0 + 96 >> 2];
    if ($2) {
     if (HEAPU8[$0 + 100 | 0]) {
      btAlignedFreeInternal_28void__29($2);
     }
     HEAP32[$0 + 96 >> 2] = 0;
    }
    HEAP32[$0 + 96 >> 2] = $8;
    HEAP32[$0 + 92 >> 2] = $6;
    HEAP8[$0 + 100 | 0] = 1;
    $4 = HEAP32[$0 + 88 >> 2];
   }
   $11 = HEAP32[$1 + 4 >> 2];
   $10 = HEAP32[$1 >> 2];
   $2 = $0 + 96 | 0;
   $3 = HEAP32[$2 >> 2] + ($4 << 4) | 0;
   HEAP32[$3 >> 2] = $10;
   HEAP32[$3 + 4 >> 2] = $11;
   $10 = HEAP32[$1 + 12 >> 2];
   $11 = HEAP32[$1 + 8 >> 2];
   HEAP32[$3 + 8 >> 2] = $11;
   HEAP32[$3 + 12 >> 2] = $10;
   $3 = HEAP32[$0 + 88 >> 2];
   HEAP32[$0 + 88 >> 2] = $3 + 1;
   HEAP32[HEAP32[$0 + 32 >> 2] + 16 >> 2] = HEAP32[$0 + 96 >> 2];
   return $3;
  }
  label$12 : {
   $4 = HEAP32[$0 + 108 >> 2];
   if (!$2 | ($4 | 0) < 1) {
    break label$12;
   }
   $5 = HEAP32[$0 + 116 >> 2];
   $12 = HEAPF32[$0 + 168 >> 2];
   $13 = HEAPF32[$1 + 8 >> 2];
   $14 = HEAPF32[$1 + 4 >> 2];
   $15 = HEAPF32[$1 >> 2];
   $2 = 0;
   while (1) {
    $3 = ($2 << 2) + $5 | 0;
    $7 = Math_fround(HEAPF32[$3 >> 2] - $15);
    $9 = Math_fround($7 * $7);
    $7 = Math_fround(HEAPF32[$3 + 4 >> 2] - $14);
    $9 = Math_fround($9 + Math_fround($7 * $7));
    $7 = Math_fround(HEAPF32[$3 + 8 >> 2] - $13);
    if (!(Math_fround($9 + Math_fround($7 * $7)) <= $12)) {
     $2 = $2 + 3 | 0;
     if (($2 | 0) < ($4 | 0)) {
      continue;
     }
     break label$12;
    }
    break;
   }
   return ($2 >>> 0) / 3 | 0;
  }
  $3 = HEAP32[$0 + 112 >> 2];
  label$15 : {
   if (($3 | 0) != ($4 | 0)) {
    break label$15;
   }
   $3 = $4 ? $4 << 1 : 1;
   if (($4 | 0) >= ($3 | 0)) {
    $3 = $4;
    break label$15;
   }
   $2 = 0;
   if ($3) {
    $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($3 << 2, 16);
    $4 = HEAP32[$0 + 108 >> 2];
   }
   $6 = HEAP32[$0 + 116 >> 2];
   label$18 : {
    label$19 : {
     if (($4 | 0) >= 1) {
      while (1) {
       $5 = $2 << 2;
       HEAP32[$8 + $5 >> 2] = HEAP32[$5 + $6 >> 2];
       $2 = $2 + 1 | 0;
       if (($4 | 0) != ($2 | 0)) {
        continue;
       }
       break label$19;
      }
     }
     if (!$6) {
      break label$18;
     }
    }
    if (HEAPU8[$0 + 120 | 0]) {
     btAlignedFreeInternal_28void__29($6);
     $4 = HEAP32[$0 + 108 >> 2];
    }
    HEAP32[$0 + 116 >> 2] = 0;
   }
   HEAP32[$0 + 116 >> 2] = $8;
   HEAP32[$0 + 112 >> 2] = $3;
   HEAP8[$0 + 120 | 0] = 1;
  }
  $6 = HEAP32[$0 + 116 >> 2];
  HEAP32[$6 + ($4 << 2) >> 2] = HEAP32[$1 >> 2];
  $2 = $4 + 1 | 0;
  HEAP32[$0 + 108 >> 2] = $2;
  label$23 : {
   if (($2 | 0) != ($3 | 0)) {
    $4 = $6;
    $5 = $3;
    $3 = $2;
    break label$23;
   }
   $5 = $3 ? $3 << 1 : 1;
   if (($3 | 0) >= ($5 | 0)) {
    $4 = $6;
    $5 = $3;
    break label$23;
   }
   $2 = 0;
   $4 = 0;
   if ($5) {
    $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 2, 16);
    $6 = HEAP32[$0 + 116 >> 2];
    $3 = HEAP32[$0 + 108 >> 2];
   }
   label$26 : {
    label$27 : {
     if (($3 | 0) >= 1) {
      while (1) {
       $8 = $2 << 2;
       HEAP32[$8 + $4 >> 2] = HEAP32[$6 + $8 >> 2];
       $2 = $2 + 1 | 0;
       if (($3 | 0) != ($2 | 0)) {
        continue;
       }
       break label$27;
      }
     }
     if (!$6) {
      break label$26;
     }
    }
    if (HEAPU8[$0 + 120 | 0]) {
     btAlignedFreeInternal_28void__29($6);
     $3 = HEAP32[$0 + 108 >> 2];
    }
    HEAP32[$0 + 116 >> 2] = 0;
   }
   HEAP32[$0 + 116 >> 2] = $4;
   HEAP32[$0 + 112 >> 2] = $5;
   HEAP8[$0 + 120 | 0] = 1;
  }
  HEAP32[($3 << 2) + $4 >> 2] = HEAP32[$1 + 4 >> 2];
  $2 = $3 + 1 | 0;
  HEAP32[$0 + 108 >> 2] = $2;
  label$33 : {
   if (($2 | 0) != ($5 | 0)) {
    $8 = $4;
    $5 = $2;
    break label$33;
   }
   $6 = $5 ? $5 << 1 : 1;
   if (($5 | 0) >= ($6 | 0)) {
    $8 = $4;
    break label$33;
   }
   $2 = 0;
   $8 = 0;
   if ($6) {
    $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 2, 16);
    $5 = HEAP32[$0 + 108 >> 2];
    $4 = HEAP32[$0 + 116 >> 2];
   }
   label$37 : {
    label$38 : {
     if (($5 | 0) >= 1) {
      while (1) {
       $3 = $2 << 2;
       HEAP32[$8 + $3 >> 2] = HEAP32[$3 + $4 >> 2];
       $2 = $2 + 1 | 0;
       if (($5 | 0) != ($2 | 0)) {
        continue;
       }
       break label$38;
      }
     }
     if (!$4) {
      break label$37;
     }
    }
    if (HEAPU8[$0 + 120 | 0]) {
     btAlignedFreeInternal_28void__29($4);
     $5 = HEAP32[$0 + 108 >> 2];
    }
    HEAP32[$0 + 116 >> 2] = 0;
   }
   HEAP32[$0 + 116 >> 2] = $8;
   HEAP32[$0 + 112 >> 2] = $6;
   HEAP8[$0 + 120 | 0] = 1;
  }
  HEAP32[($5 << 2) + $8 >> 2] = HEAP32[$1 + 8 >> 2];
  $3 = $5 + 1 | 0;
  HEAP32[$0 + 108 >> 2] = $3;
  $2 = HEAP32[$0 + 32 >> 2];
  HEAP32[$2 + 16 >> 2] = $8;
  HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
  $2 = (($3 | 0) / 3 | 0) + -1 | 0;
 }
 return $2;
}
function btRigidBody__computeGyroscopicImpulseImplicit_Body_28float_29_20const($0, $1, $2) {
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = 0, $33 = Math_fround(0);
 $18 = global$0 - 16 | 0;
 $32 = $18;
 if ($18 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $32;
 $7 = HEAPF32[$1 + 464 >> 2];
 $4 = HEAPF32[$1 + 460 >> 2];
 $20 = HEAPF32[$1 + 396 >> 2];
 $21 = HEAPF32[$1 + 392 >> 2];
 $5 = HEAPF32[$1 + 456 >> 2];
 $22 = HEAPF32[$1 + 388 >> 2];
 btMatrix3x3__getRotation_28btQuaternion__29_20const($1 + 4 | 0, $18);
 $8 = HEAPF32[$18 + 4 >> 2];
 $9 = HEAPF32[$18 >> 2];
 $10 = HEAPF32[$18 + 12 >> 2];
 $11 = HEAPF32[$18 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = 0;
 $17 = Math_fround(Math_fround($20 * $9) + Math_fround(Math_fround($21 * $10) - Math_fround($22 * $11)));
 $12 = Math_fround(Math_fround(Math_fround($22 * $9) + Math_fround($21 * $8)) + Math_fround($20 * $11));
 $13 = Math_fround(Math_fround($21 * $11) + Math_fround(Math_fround($22 * $10) - Math_fround($20 * $8)));
 $15 = Math_fround(Math_fround($22 * $8) + Math_fround(Math_fround($20 * $10) - Math_fround($21 * $9)));
 $3 = Math_fround(Math_fround(Math_fround($11 * $17) + Math_fround(Math_fround($9 * $12) + Math_fround($10 * $13))) - Math_fround($8 * $15));
 $33 = $3;
 $14 = Math_fround(Math_fround(Math_fround($8 * $13) + Math_fround(Math_fround($11 * $12) + Math_fround($10 * $15))) - Math_fround($9 * $17));
 $16 = Math_fround($14 * Math_fround(0));
 $19 = Math_fround($3 * Math_fround(0));
 $6 = $4 != Math_fround(0) ? Math_fround(Math_fround(1) / $4) : Math_fround(0);
 $4 = Math_fround(Math_fround(Math_fround($9 * $15) + Math_fround(Math_fround($8 * $12) + Math_fround($10 * $17))) - Math_fround($11 * $13));
 $12 = Math_fround($16 + Math_fround($19 + Math_fround($6 * $4)));
 $5 = $5 != Math_fround(0) ? Math_fround(Math_fround(1) / $5) : Math_fround(0);
 $13 = Math_fround($4 * Math_fround(0));
 $15 = Math_fround($16 + Math_fround(Math_fround($3 * $5) + $13));
 $17 = Math_fround(Math_fround(Math_fround($3 * $12) - Math_fround($4 * $15)) * $2);
 $7 = $7 != Math_fround(0) ? Math_fround(Math_fround(1) / $7) : Math_fround(0);
 $24 = Math_fround(Math_fround($7 * $14) + Math_fround($19 + $13));
 $25 = Math_fround(Math_fround(Math_fround(Math_fround($13 + Math_fround(Math_fround(0) - Math_fround($6 * $14))) + $24) * $2) + Math_fround(0));
 $26 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($16 + Math_fround(0)) - Math_fround($7 * $3)) + $15) * $2) + Math_fround(0));
 $29 = Math_fround($3 * Math_fround(-0));
 $27 = Math_fround($6 + Math_fround(Math_fround($29 + Math_fround(Math_fround($6 * Math_fround(0)) + $16)) * $2));
 $30 = Math_fround($14 * Math_fround(-0));
 $28 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($7 * $4) + Math_fround($30 + Math_fround(0))) - $12) * $2) + Math_fround(0));
 $31 = Math_fround(Math_fround($25 * $26) - Math_fround($27 * $28));
 $16 = Math_fround(Math_fround(Math_fround($4 * $24) - Math_fround($14 * $12)) * $2);
 $23 = Math_fround($4 * Math_fround(-0));
 $7 = Math_fround($7 + Math_fround(Math_fround(Math_fround($7 * Math_fround(0)) + Math_fround($23 + $19)) * $2));
 $6 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($23 + Math_fround($6 * $3)) + Math_fround(0)) - $15) * $2) + Math_fround(0));
 $23 = Math_fround(Math_fround($27 * $7) - Math_fround($6 * $26));
 $3 = Math_fround(Math_fround(Math_fround($14 * $15) - Math_fround($3 * $24)) * $2);
 $19 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($19 - Math_fround($5 * $4)) + Math_fround(0)) + $12) * $2) + Math_fround(0));
 $12 = Math_fround($5 + Math_fround(Math_fround($13 + Math_fround(Math_fround($5 * Math_fround(0)) + $30)) * $2));
 $5 = Math_fround(Math_fround(Math_fround(Math_fround($29 + Math_fround(Math_fround($5 * $14) + Math_fround(0))) - $24) * $2) + Math_fround(0));
 $15 = Math_fround(Math_fround($6 * $28) - Math_fround($7 * $25));
 $2 = Math_fround(Math_fround($19 * $31) + Math_fround(Math_fround($12 * $23) + Math_fround($5 * $15)));
 $13 = Math_fround(Math_abs($2)) > Math_fround(1.1920928955078125e-7) ? Math_fround(Math_fround(1) / $2) : $2;
 $2 = Math_fround($33 - Math_fround(Math_fround(Math_fround($17 * $31) + Math_fround(Math_fround($16 * $23) + Math_fround($3 * $15))) * $13));
 $4 = Math_fround($4 - Math_fround(Math_fround(Math_fround($19 * Math_fround(Math_fround($26 * $16) - Math_fround($28 * $3))) + Math_fround(Math_fround($12 * Math_fround(Math_fround($7 * $3) - Math_fround($26 * $17))) + Math_fround($5 * Math_fround(Math_fround($28 * $17) - Math_fround($7 * $16))))) * $13));
 $3 = Math_fround($14 - Math_fround(Math_fround(Math_fround($19 * Math_fround(Math_fround($25 * $3) - Math_fround($27 * $16))) + Math_fround(Math_fround($12 * Math_fround(Math_fround($27 * $17) - Math_fround($6 * $3))) + Math_fround($5 * Math_fround(Math_fround($6 * $16) - Math_fround($25 * $17))))) * $13));
 $14 = Math_fround(Math_fround(Math_fround($11 * $2) + Math_fround($10 * $4)) - Math_fround($9 * $3));
 $6 = Math_fround(Math_fround(Math_fround($10 * $3) + Math_fround($9 * $4)) - Math_fround($8 * $2));
 $5 = Math_fround(Math_fround(Math_fround($2 * Math_fround(-$9)) - Math_fround($8 * $4)) - Math_fround($11 * $3));
 $2 = Math_fround(Math_fround(Math_fround($10 * $2) + Math_fround($8 * $3)) - Math_fround($11 * $4));
 HEAPF32[$0 + 8 >> 2] = Math_fround(Math_fround($9 * $14) + Math_fround(Math_fround(Math_fround($10 * $6) - Math_fround($11 * $5)) - Math_fround($8 * $2))) - $20;
 HEAPF32[$0 + 4 >> 2] = Math_fround(Math_fround($11 * $2) + Math_fround(Math_fround(Math_fround($10 * $14) - Math_fround($8 * $5)) - Math_fround($9 * $6))) - $21;
 HEAPF32[$0 >> 2] = Math_fround(Math_fround($8 * $6) + Math_fround(Math_fround(Math_fround($10 * $2) - Math_fround($9 * $5)) - Math_fround($11 * $14))) - $22;
 $0 = $18 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSequentialImpulseConstraintSolver__setupTorsionalFrictionConstraint_28btSolverConstraint__2c_20btVector3_20const__2c_20int_2c_20int_2c_20btManifoldPoint__2c_20float_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
 var $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0, $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = 0, $26 = 0, $27 = 0, $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0);
 HEAP32[$1 + 48 >> 2] = -2147483648;
 HEAP32[$1 + 52 >> 2] = -2147483648;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP32[$1 + 56 >> 2] = -2147483648;
 HEAP32[$1 + 60 >> 2] = 0;
 HEAP32[$1 + 24 >> 2] = 0;
 HEAP32[$1 + 28 >> 2] = 0;
 $7 = HEAP32[$0 + 16 >> 2];
 $0 = HEAP32[($7 + Math_imul($3, 244) | 0) + 240 >> 2];
 $5 = HEAP32[(Math_imul($4, 244) + $7 | 0) + 240 >> 2];
 HEAP32[$1 + 148 >> 2] = $4;
 HEAP32[$1 + 144 >> 2] = $3;
 HEAP32[$1 + 132 >> 2] = 0;
 HEAPF32[$1 + 104 >> 2] = $6;
 HEAP32[$1 + 96 >> 2] = 0;
 HEAP32[$1 + 100 >> 2] = 0;
 $14 = HEAPF32[$2 >> 2];
 $19 = HEAPF32[$2 + 4 >> 2];
 $15 = HEAPF32[$2 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = 0;
 HEAPF32[$1 + 8 >> 2] = -$15;
 $11 = Math_fround(-$19);
 HEAPF32[$1 + 4 >> 2] = $11;
 $24 = Math_fround(-$14);
 HEAPF32[$1 >> 2] = $24;
 if ($0) {
  $25 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 360 >> 2] * $11) - Math_fround($14 * HEAPF32[$0 + 356 >> 2])) - Math_fround($15 * HEAPF32[$0 + 364 >> 2])) * HEAPF32[$0 + 612 >> 2])), wasm2js_scratch_load_i32(0));
  $26 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 344 >> 2] * $11) - Math_fround($14 * HEAPF32[$0 + 340 >> 2])) - Math_fround($15 * HEAPF32[$0 + 348 >> 2])) * HEAPF32[$0 + 608 >> 2])), wasm2js_scratch_load_i32(0));
  $20 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 328 >> 2] * $11) - Math_fround($14 * HEAPF32[$0 + 324 >> 2])) - Math_fround($15 * HEAPF32[$0 + 332 >> 2])) * HEAPF32[$0 + 604 >> 2])), wasm2js_scratch_load_i32(0));
 }
 HEAP32[$1 + 64 >> 2] = $20;
 HEAP32[$1 + 76 >> 2] = 0;
 HEAP32[$1 + 72 >> 2] = $25;
 HEAP32[$1 + 68 >> 2] = $26;
 $16 = HEAPF32[$2 >> 2];
 $17 = HEAPF32[$2 + 4 >> 2];
 $18 = HEAPF32[$2 + 8 >> 2];
 HEAP32[$1 + 44 >> 2] = HEAP32[$2 + 12 >> 2];
 HEAPF32[$1 + 40 >> 2] = $18;
 HEAPF32[$1 + 36 >> 2] = $17;
 HEAPF32[$1 + 32 >> 2] = $16;
 $2 = 0;
 $20 = 0;
 if ($5) {
  $20 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround($16 * HEAPF32[$5 + 356 >> 2]) + Math_fround($17 * HEAPF32[$5 + 360 >> 2])) + Math_fround($18 * HEAPF32[$5 + 364 >> 2])) * HEAPF32[$5 + 612 >> 2])), wasm2js_scratch_load_i32(0));
  $27 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround($16 * HEAPF32[$5 + 324 >> 2]) + Math_fround($17 * HEAPF32[$5 + 328 >> 2])) + Math_fround($18 * HEAPF32[$5 + 332 >> 2])) * HEAPF32[$5 + 604 >> 2])), wasm2js_scratch_load_i32(0));
  $2 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround($16 * HEAPF32[$5 + 340 >> 2]) + Math_fround($17 * HEAPF32[$5 + 344 >> 2])) + Math_fround($18 * HEAPF32[$5 + 348 >> 2])) * HEAPF32[$5 + 608 >> 2])), wasm2js_scratch_load_i32(0));
 }
 HEAP32[$1 + 80 >> 2] = $27;
 HEAP32[$1 + 92 >> 2] = 0;
 HEAP32[$1 + 88 >> 2] = $20;
 HEAP32[$1 + 84 >> 2] = $2;
 if ($0) {
  $28 = Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 360 >> 2] * $11) - Math_fround($14 * HEAPF32[$0 + 356 >> 2])) - Math_fround($15 * HEAPF32[$0 + 364 >> 2]));
  $21 = Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 344 >> 2] * $11) - Math_fround($14 * HEAPF32[$0 + 340 >> 2])) - Math_fround($15 * HEAPF32[$0 + 348 >> 2]));
  $22 = Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 328 >> 2] * $11) - Math_fround($14 * HEAPF32[$0 + 324 >> 2])) - Math_fround($15 * HEAPF32[$0 + 332 >> 2]));
 }
 if ($5) {
  $29 = Math_fround(Math_fround(Math_fround($16 * HEAPF32[$5 + 356 >> 2]) + Math_fround($17 * HEAPF32[$5 + 360 >> 2])) + Math_fround($18 * HEAPF32[$5 + 364 >> 2]));
  $30 = Math_fround(Math_fround(Math_fround($16 * HEAPF32[$5 + 340 >> 2]) + Math_fround($17 * HEAPF32[$5 + 344 >> 2])) + Math_fround($18 * HEAPF32[$5 + 348 >> 2]));
  $23 = Math_fround(Math_fround(Math_fround(HEAPF32[$5 + 324 >> 2] * $16) + Math_fround(HEAPF32[$5 + 328 >> 2] * $17)) + Math_fround(HEAPF32[$5 + 332 >> 2] * $18));
 }
 $21 = Math_fround(Math_fround(1) / Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($21 * $11) - Math_fround($14 * $22)) - Math_fround($15 * $28)) + Math_fround(0)) + Math_fround(Math_fround(Math_fround($23 * $16) + Math_fround($30 * $17)) + Math_fround($29 * $18))));
 HEAPF32[$1 + 108 >> 2] = $21;
 $14 = Math_fround(0);
 $11 = Math_fround(0);
 $23 = Math_fround(0);
 $22 = Math_fround(0);
 if ($0) {
  $0 = Math_imul($3, 244) + $7 | 0;
  $14 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 176 >> 2] + HEAPF32[$0 + 208 >> 2]) * Math_fround(0)) + Math_fround(Math_fround(HEAPF32[$0 + 180 >> 2] + HEAPF32[$0 + 212 >> 2]) * Math_fround(0))) + Math_fround(Math_fround(HEAPF32[$0 + 184 >> 2] + HEAPF32[$0 + 216 >> 2]) * Math_fround(0)));
  $22 = HEAPF32[$0 + 192 >> 2];
  $23 = HEAPF32[$0 + 196 >> 2];
  $11 = HEAPF32[$0 + 200 >> 2];
 }
 $15 = Math_fround($14 + Math_fround(Math_fround(Math_fround($22 * $24) - Math_fround($19 * $23)) - Math_fround($15 * $11)));
 label$6 : {
  if (!$5) {
   $14 = Math_fround(-0);
   $19 = Math_fround(0);
   break label$6;
  }
  $0 = Math_imul($4, 244) + $7 | 0;
  $14 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 176 >> 2] + HEAPF32[$0 + 208 >> 2]) * Math_fround(-0)) + Math_fround(Math_fround(HEAPF32[$0 + 180 >> 2] + HEAPF32[$0 + 212 >> 2]) * Math_fround(-0))) + Math_fround(Math_fround(HEAPF32[$0 + 184 >> 2] + HEAPF32[$0 + 216 >> 2]) * Math_fround(-0)));
  $31 = HEAPF32[$0 + 200 >> 2];
  $32 = HEAPF32[$0 + 196 >> 2];
  $19 = HEAPF32[$0 + 192 >> 2];
 }
 HEAPF32[$1 + 124 >> 2] = $6;
 HEAPF32[$1 + 116 >> 2] = $13;
 HEAPF32[$1 + 120 >> 2] = -$6;
 $11 = $32;
 HEAPF32[$1 + 112 >> 2] = $21 * Math_fround($12 - Math_fround($15 + Math_fround($14 + Math_fround(Math_fround($18 * $31) + Math_fround(Math_fround($17 * $11) + Math_fround($16 * $19))))));
}
function btConvexHullInternal__findMaxAngle_28bool_2c_20btConvexHullInternal__Vertex_20const__2c_20btConvexHullInternal__Point32_20const__2c_20btConvexHullInternal__Point64_20const__2c_20btConvexHullInternal__Point64_20const__2c_20btConvexHullInternal__Rational64__29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 $11 = global$0 - 48 | 0;
 $7 = $11;
 if ($11 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 $14 = HEAP32[$2 + 8 >> 2];
 if ($14) {
  $16 = $14;
  while (1) {
   if (HEAP32[$16 + 20 >> 2] > HEAP32[$0 + 100 >> 2]) {
    $14 = HEAP32[$16 + 12 >> 2];
    $7 = HEAP32[$14 + 92 >> 2];
    $15 = HEAP32[$14 + 96 >> 2];
    $8 = HEAP32[$2 + 88 >> 2];
    $14 = HEAP32[$14 + 88 >> 2];
    $9 = HEAP32[$2 + 92 >> 2];
    $10 = HEAP32[$2 + 96 >> 2];
    HEAP32[$11 + 44 >> 2] = -1;
    $15 = $15 - $10 | 0;
    HEAP32[$11 + 40 >> 2] = $15;
    $7 = $7 - $9 | 0;
    HEAP32[$11 + 36 >> 2] = $7;
    $14 = $14 - $8 | 0;
    HEAP32[$11 + 32 >> 2] = $14;
    $8 = $7 >> 31;
    $17 = $7;
    $18 = $8;
    $10 = $4;
    $8 = HEAP32[$10 + 8 >> 2];
    $7 = HEAP32[$10 + 12 >> 2];
    $9 = $7;
    $7 = $18;
    $12 = $8;
    $8 = $9;
    $8 = __wasm_i64_mul($17, $7, $12, $8);
    $9 = $8;
    $7 = i64toi32_i32$HIGH_BITS;
    $12 = $7;
    $8 = $14;
    $7 = $8 >> 31;
    $21 = $8;
    $8 = HEAP32[$10 + 4 >> 2];
    $13 = $8;
    $22 = $7;
    $8 = $7;
    $7 = HEAP32[$10 >> 2];
    $10 = $7;
    $7 = $13;
    $7 = __wasm_i64_mul($14, $8, $10, $7);
    $13 = $7;
    $8 = i64toi32_i32$HIGH_BITS;
    $7 = $8;
    $8 = $12;
    $12 = $8 + $7 | 0;
    $10 = $9;
    $9 = $10 + $13 | 0;
    if ($9 >>> 0 < $13 >>> 0) {
     $12 = $12 + 1 | 0;
    }
    $7 = $9;
    $9 = $12;
    $10 = $15;
    $12 = $10 >> 31;
    $23 = $10;
    $14 = $12;
    $8 = $4;
    $12 = HEAP32[$8 + 16 >> 2];
    $10 = HEAP32[$8 + 20 >> 2];
    $8 = $10;
    $10 = $14;
    $13 = $12;
    $12 = $8;
    $12 = __wasm_i64_mul($15, $10, $13, $12);
    $13 = $12;
    $10 = i64toi32_i32$HIGH_BITS;
    $12 = $10;
    $10 = $9;
    $9 = $10 + $12 | 0;
    $8 = $7;
    $7 = $8 + $13 | 0;
    if ($7 >>> 0 < $13 >>> 0) {
     $9 = $9 + 1 | 0;
    }
    $15 = $7;
    $20 = $9;
    $10 = $5;
    $9 = HEAP32[$10 + 8 >> 2];
    $7 = $9;
    $8 = HEAP32[$10 + 12 >> 2];
    $9 = $18;
    $9 = __wasm_i64_mul($7, $8, $17, $9);
    $12 = $9;
    $8 = i64toi32_i32$HIGH_BITS;
    $7 = $8;
    $8 = HEAP32[$10 >> 2];
    $13 = $8;
    $9 = HEAP32[$10 + 4 >> 2];
    $8 = $22;
    $8 = __wasm_i64_mul($13, $9, $21, $8);
    $13 = $8;
    $9 = i64toi32_i32$HIGH_BITS;
    $8 = $9;
    $9 = $7;
    $7 = $8 + $9 | 0;
    $10 = $12;
    $12 = $10 + $13 | 0;
    if ($12 >>> 0 < $13 >>> 0) {
     $7 = $7 + 1 | 0;
    }
    $8 = $12;
    $12 = $7;
    $9 = $5;
    $7 = HEAP32[$9 + 16 >> 2];
    $13 = $7;
    $10 = HEAP32[$9 + 20 >> 2];
    $7 = $14;
    $7 = __wasm_i64_mul($13, $10, $23, $7);
    $13 = $7;
    $10 = i64toi32_i32$HIGH_BITS;
    $7 = $10;
    $10 = $12;
    $12 = $7 + $10 | 0;
    $9 = $8;
    $8 = $13 + $9 | 0;
    if ($8 >>> 0 < $13 >>> 0) {
     $12 = $12 + 1 | 0;
    }
    $17 = $8;
    $18 = $12;
    label$6 : {
     if (($12 | 0) > 0 ? 1 : ($12 | 0) >= 0 ? $8 >>> 0 < 1 ? 0 : 1 : 0) {
      HEAP32[$11 + 8 >> 2] = $17;
      $10 = $18;
      HEAP32[$11 + 12 >> 2] = $10;
      HEAP32[$11 + 24 >> 2] = 1;
      $14 = -1;
      $7 = -1;
      break label$6;
     }
     $13 = $17;
     $10 = $18;
     if (($10 | 0) < -1 ? 1 : ($10 | 0) <= -1 ? $13 >>> 0 > 4294967295 ? 0 : 1 : 0) {
      HEAP32[$11 + 24 >> 2] = -1;
      $12 = $17;
      $7 = 0 - $12 | 0;
      HEAP32[$11 + 8 >> 2] = $7;
      $8 = $18 + (0 < $12 >>> 0) | 0;
      $8 = 0 - $8 | 0;
      HEAP32[$11 + 12 >> 2] = $8;
      $14 = -1;
      $7 = 1;
      break label$6;
     }
     HEAP32[$11 + 8 >> 2] = 0;
     HEAP32[$11 + 12 >> 2] = 0;
     HEAP32[$11 + 24 >> 2] = 0;
     $14 = 0;
     $7 = 0;
    }
    label$9 : {
     label$10 : {
      label$11 : {
       $9 = 0;
       $13 = $15;
       $8 = $20;
       if (($8 | 0) < 0 ? 1 : ($8 | 0) <= 0 ? $13 >>> 0 > 0 ? 0 : 1 : 0) {
        $12 = $15;
        $13 = $20;
        if (($13 | 0) > -1 ? 1 : ($13 | 0) >= -1 ? $12 >>> 0 <= 4294967295 ? 0 : 1 : 0) {
         break label$11;
        }
        HEAP32[$11 + 24 >> 2] = $7;
        $8 = $15;
        $10 = 0 - $8 | 0;
        $15 = $10;
        $7 = $20 + (0 < $8 >>> 0) | 0;
        $7 = 0 - $7 | 0;
        $20 = $7;
        $9 = 0;
       }
       HEAP32[$11 + 16 >> 2] = $15;
       $7 = $20;
       HEAP32[$11 + 20 >> 2] = $7;
       break label$10;
      }
      HEAP32[$11 + 16 >> 2] = 0;
      HEAP32[$11 + 20 >> 2] = 0;
      if (!$14) {
       break label$9;
      }
     }
     if (!$19) {
      $9 = HEAP32[$11 + 12 >> 2];
      $7 = HEAP32[$11 + 8 >> 2];
      $8 = $7;
      $7 = $6;
      HEAP32[$7 >> 2] = $8;
      HEAP32[$7 + 4 >> 2] = $9;
      HEAP32[$7 + 16 >> 2] = HEAP32[$11 + 24 >> 2];
      $7 = HEAP32[$11 + 20 >> 2];
      $9 = HEAP32[$11 + 16 >> 2];
      $8 = $9;
      $9 = $6;
      HEAP32[$9 + 8 >> 2] = $8;
      HEAP32[$9 + 12 >> 2] = $7;
      $19 = $16;
      break label$9;
     }
     $14 = btConvexHullInternal__Rational64__compare_28btConvexHullInternal__Rational64_20const__29_20const($11 + 8 | 0, $6);
     if (($14 | 0) <= -1) {
      $9 = HEAP32[$11 + 12 >> 2];
      $7 = HEAP32[$11 + 8 >> 2];
      $8 = $7;
      $7 = $6;
      HEAP32[$7 >> 2] = $8;
      HEAP32[$7 + 4 >> 2] = $9;
      HEAP32[$7 + 16 >> 2] = HEAP32[$11 + 24 >> 2];
      $7 = HEAP32[$11 + 20 >> 2];
      $9 = HEAP32[$11 + 16 >> 2];
      $8 = $9;
      $9 = $6;
      HEAP32[$9 + 8 >> 2] = $8;
      HEAP32[$9 + 12 >> 2] = $7;
      $19 = $16;
      break label$9;
     }
     if ($14) {
      break label$9;
     }
     $19 = (btConvexHullInternal__getOrientation_28btConvexHullInternal__Edge_20const__2c_20btConvexHullInternal__Edge_20const__2c_20btConvexHullInternal__Point32_20const__2c_20btConvexHullInternal__Point32_20const__29($19, $16, $3, $11 + 32 | 0) | 0) != 2 ^ $1 ? $16 : $19;
    }
    $14 = HEAP32[$2 + 8 >> 2];
   }
   $16 = HEAP32[$16 >> 2];
   if (($16 | 0) != ($14 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = $11 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $19;
}
function btOptimizedBvh__build_28btStridingMeshInterface__2c_20bool_2c_20btVector3_20const__2c_20btVector3_20const__29__QuantizedNodeTriangleCallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0);
 $4 = HEAP32[$1 + 40 >> 2];
 $8 = HEAP32[$1 + 24 >> 2];
 $10 = HEAP32[$1 + 8 >> 2];
 $6 = HEAPF32[$1 + 8 >> 2];
 $7 = $6 < Math_fround(0xde0b6b000000000) ? $10 : 1566444395;
 $11 = HEAPF32[$1 + 24 >> 2];
 $7 = $11 < (wasm2js_scratch_store_i32(0, $7), wasm2js_scratch_load_f32()) ? $8 : $7;
 $5 = HEAPF32[$1 + 40 >> 2];
 $9 = (wasm2js_scratch_store_i32(0, $5 < (wasm2js_scratch_store_i32(0, $7), wasm2js_scratch_load_f32()) ? $4 : $7), wasm2js_scratch_load_f32());
 $10 = $6 > Math_fround(-0xde0b6b000000000) ? $10 : -581039253;
 $8 = $11 > (wasm2js_scratch_store_i32(0, $10), wasm2js_scratch_load_f32()) ? $8 : $10;
 $5 = (wasm2js_scratch_store_i32(0, $5 > (wasm2js_scratch_store_i32(0, $8), wasm2js_scratch_load_f32()) ? $4 : $8), wasm2js_scratch_load_f32());
 $8 = Math_fround($5 - $9) < Math_fround(.0020000000949949026);
 $4 = HEAP32[$0 + 8 >> 2];
 $22 = HEAPF32[$4 + 12 >> 2];
 $23 = HEAPF32[$4 + 44 >> 2];
 $11 = Math_fround(Math_fround(($8 ? Math_fround($9 + Math_fround(-.0010000000474974513)) : $9) - $22) * $23);
 label$1 : {
  if ($11 < Math_fround(4294967296) & $11 >= Math_fround(0)) {
   $16 = ~~$11 >>> 0;
   break label$1;
  }
  $16 = 0;
 }
 $10 = HEAP32[$1 + 36 >> 2];
 $7 = HEAP32[$1 + 20 >> 2];
 $13 = HEAP32[$1 + 4 >> 2];
 $9 = HEAPF32[$1 + 4 >> 2];
 $12 = $9 < Math_fround(0xde0b6b000000000) ? $13 : 1566444395;
 $6 = HEAPF32[$1 + 20 >> 2];
 $12 = $6 < (wasm2js_scratch_store_i32(0, $12), wasm2js_scratch_load_f32()) ? $7 : $12;
 $11 = HEAPF32[$1 + 36 >> 2];
 $14 = (wasm2js_scratch_store_i32(0, $11 < (wasm2js_scratch_store_i32(0, $12), wasm2js_scratch_load_f32()) ? $10 : $12), wasm2js_scratch_load_f32());
 $13 = $9 > Math_fround(-0xde0b6b000000000) ? $13 : -581039253;
 $7 = $6 > (wasm2js_scratch_store_i32(0, $13), wasm2js_scratch_load_f32()) ? $7 : $13;
 $11 = (wasm2js_scratch_store_i32(0, $11 > (wasm2js_scratch_store_i32(0, $7), wasm2js_scratch_load_f32()) ? $10 : $7), wasm2js_scratch_load_f32());
 $10 = Math_fround($11 - $14) < Math_fround(.0020000000949949026);
 $24 = HEAPF32[$4 + 8 >> 2];
 $25 = HEAPF32[$4 + 40 >> 2];
 $6 = Math_fround(Math_fround(($10 ? Math_fround($14 + Math_fround(-.0010000000474974513)) : $14) - $24) * $25);
 label$3 : {
  if ($6 < Math_fround(4294967296) & $6 >= Math_fround(0)) {
   $17 = ~~$6 >>> 0;
   break label$3;
  }
  $17 = 0;
 }
 $6 = HEAPF32[$1 + 32 >> 2];
 $9 = HEAPF32[$1 + 16 >> 2];
 $14 = HEAPF32[$1 >> 2];
 $7 = HEAP32[$1 + 32 >> 2];
 $13 = HEAP32[$1 + 16 >> 2];
 $1 = HEAP32[$1 >> 2];
 $12 = $14 < Math_fround(0xde0b6b000000000) ? $1 : 1566444395;
 $12 = $9 < (wasm2js_scratch_store_i32(0, $12), wasm2js_scratch_load_f32()) ? $13 : $12;
 $15 = (wasm2js_scratch_store_i32(0, $6 < (wasm2js_scratch_store_i32(0, $12), wasm2js_scratch_load_f32()) ? $7 : $12), wasm2js_scratch_load_f32());
 $1 = $14 > Math_fround(-0xde0b6b000000000) ? $1 : -581039253;
 $1 = $9 > (wasm2js_scratch_store_i32(0, $1), wasm2js_scratch_load_f32()) ? $13 : $1;
 $6 = (wasm2js_scratch_store_i32(0, $6 > (wasm2js_scratch_store_i32(0, $1), wasm2js_scratch_load_f32()) ? $7 : $1), wasm2js_scratch_load_f32());
 $1 = Math_fround($6 - $15) < Math_fround(.0020000000949949026);
 $14 = HEAPF32[$4 + 4 >> 2];
 $9 = Math_fround(($1 ? Math_fround($15 + Math_fround(-.0010000000474974513)) : $15) - $14);
 $15 = HEAPF32[$4 + 36 >> 2];
 $9 = Math_fround($9 * $15);
 label$5 : {
  if ($9 < Math_fround(4294967296) & $9 >= Math_fround(0)) {
   $4 = ~~$9 >>> 0;
   break label$5;
  }
  $4 = 0;
 }
 $5 = Math_fround(Math_fround(Math_fround(($8 ? Math_fround($5 + Math_fround(.0010000000474974513)) : $5) - $22) * $23) + Math_fround(1));
 label$7 : {
  if ($5 < Math_fround(4294967296) & $5 >= Math_fround(0)) {
   $8 = ~~$5 >>> 0;
   break label$7;
  }
  $8 = 0;
 }
 $5 = Math_fround(Math_fround(Math_fround(($10 ? Math_fround($11 + Math_fround(.0010000000474974513)) : $11) - $24) * $25) + Math_fround(1));
 label$9 : {
  if ($5 < Math_fround(4294967296) & $5 >= Math_fround(0)) {
   $18 = ~~$5 >>> 0;
   break label$9;
  }
  $18 = 0;
 }
 $10 = $16 & 65534;
 $7 = $17 & 65534;
 $13 = $4 & 65534;
 $12 = $8 | 1;
 $16 = $18 | 1;
 $5 = Math_fround(Math_fround(Math_fround(($1 ? Math_fround($6 + Math_fround(.0010000000474974513)) : $6) - $14) * $15) + Math_fround(1));
 label$11 : {
  if ($5 < Math_fround(4294967296) & $5 >= Math_fround(0)) {
   $1 = ~~$5 >>> 0;
   break label$11;
  }
  $1 = 0;
 }
 $17 = $1 | 1;
 $18 = $2 << 21 | $3;
 $4 = HEAP32[$0 + 4 >> 2];
 $2 = HEAP32[$4 + 4 >> 2];
 label$13 : {
  if (($2 | 0) != HEAP32[$4 + 8 >> 2]) {
   break label$13;
  }
  $19 = $2 ? $2 << 1 : 1;
  if (($2 | 0) >= ($19 | 0)) {
   break label$13;
  }
  label$14 : {
   if (!$19) {
    $8 = 0;
    break label$14;
   }
   $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($19 << 4, 16);
   $2 = HEAP32[$4 + 4 >> 2];
  }
  if (($2 | 0) >= 1) {
   $1 = 0;
   while (1) {
    $0 = $1 << 4;
    $3 = $8 + $0 | 0;
    $0 = HEAP32[$4 + 12 >> 2] + $0 | 0;
    $20 = HEAP32[$0 >> 2];
    $21 = HEAP32[$0 + 4 >> 2];
    HEAP32[$3 >> 2] = $20;
    HEAP32[$3 + 4 >> 2] = $21;
    $20 = HEAP32[$0 + 12 >> 2];
    $21 = HEAP32[$0 + 8 >> 2];
    HEAP32[$3 + 8 >> 2] = $21;
    HEAP32[$3 + 12 >> 2] = $20;
    $1 = $1 + 1 | 0;
    if (($2 | 0) != ($1 | 0)) {
     continue;
    }
    break;
   }
  }
  $1 = HEAP32[$4 + 12 >> 2];
  if ($1) {
   if (HEAPU8[$4 + 16 | 0]) {
    btAlignedFreeInternal_28void__29($1);
   }
   HEAP32[$4 + 12 >> 2] = 0;
  }
  HEAP32[$4 + 12 >> 2] = $8;
  HEAP8[$4 + 16 | 0] = 1;
  HEAP32[$4 + 8 >> 2] = $19;
  $2 = HEAP32[$4 + 4 >> 2];
 }
 $1 = HEAP32[$4 + 12 >> 2] + ($2 << 4) | 0;
 HEAP32[$1 + 12 >> 2] = $18;
 HEAP16[$1 + 6 >> 1] = $17;
 HEAP16[$1 + 4 >> 1] = $10;
 HEAP16[$1 + 2 >> 1] = $7;
 HEAP16[$1 >> 1] = $13;
 HEAP16[$1 + 10 >> 1] = $12;
 HEAP16[$1 + 8 >> 1] = $16;
 HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
}
function gjkepa2_impl__GJK__projectorigin_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float__2c_20unsigned_20int__29($0, $1, $2, $3, $4) {
 var $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0, $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = 0, $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = 0, $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 $10 = global$0 + -64 | 0;
 HEAP32[$10 + 60 >> 2] = $2;
 HEAP32[$10 + 56 >> 2] = $1;
 HEAP32[$10 + 52 >> 2] = $0;
 $9 = HEAPF32[$1 >> 2];
 $6 = HEAPF32[$0 >> 2];
 $12 = HEAPF32[$1 + 4 >> 2];
 $13 = HEAPF32[$0 + 4 >> 2];
 $15 = HEAPF32[$1 + 8 >> 2];
 $7 = HEAPF32[$0 + 8 >> 2];
 HEAP32[$10 + 12 >> 2] = 0;
 $8 = Math_fround($7 - $15);
 HEAPF32[$10 + 8 >> 2] = $8;
 $11 = Math_fround($13 - $12);
 HEAPF32[$10 + 4 >> 2] = $11;
 $5 = Math_fround($6 - $9);
 HEAPF32[$10 >> 2] = $5;
 $17 = HEAPF32[$2 >> 2];
 $18 = HEAPF32[$2 + 4 >> 2];
 $14 = HEAPF32[$2 + 8 >> 2];
 HEAP32[$10 + 44 >> 2] = 0;
 HEAP32[$10 + 28 >> 2] = 0;
 $24 = Math_fround($14 - $7);
 HEAPF32[$10 + 40 >> 2] = $24;
 $25 = Math_fround($18 - $13);
 HEAPF32[$10 + 36 >> 2] = $25;
 $20 = Math_fround($15 - $14);
 HEAPF32[$10 + 24 >> 2] = $20;
 $21 = Math_fround($12 - $18);
 HEAPF32[$10 + 20 >> 2] = $21;
 $26 = Math_fround($17 - $6);
 HEAPF32[$10 + 32 >> 2] = $26;
 $22 = Math_fround($9 - $17);
 HEAPF32[$10 + 16 >> 2] = $22;
 $12 = Math_fround(-1);
 $15 = Math_fround(Math_fround($5 * $21) - Math_fround($11 * $22));
 $17 = Math_fround(Math_fround($11 * $20) - Math_fround($8 * $21));
 $18 = Math_fround(Math_fround($8 * $22) - Math_fround($5 * $20));
 $27 = Math_fround(Math_fround($15 * $15) + Math_fround(Math_fround($17 * $17) + Math_fround($18 * $18)));
 if (!($27 > Math_fround(0))) {
  return Math_fround(-1);
 }
 while (1) {
  label$3 : {
   if (!(Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_fround($15 * $11) - Math_fround($18 * $8))) + Math_fround($13 * Math_fround(Math_fround($17 * $8) - Math_fround($15 * $5)))) + Math_fround(Math_fround(Math_fround($18 * $5) - Math_fround($17 * $11)) * $7)) > Math_fround(0))) {
    $9 = $12;
    break label$3;
   }
   $34 = $19 << 2;
   $35 = HEAP32[$34 + 4260 >> 2];
   $28 = $35 << 2;
   $16 = HEAP32[$28 + ($10 + 52 | 0) >> 2];
   $29 = HEAPF32[$16 >> 2];
   $8 = Math_fround($29 - $6);
   $30 = HEAPF32[$16 + 4 >> 2];
   $11 = Math_fround($30 - $13);
   $31 = HEAPF32[$16 + 8 >> 2];
   $5 = Math_fround($31 - $7);
   $14 = Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($11 * $11)) + Math_fround($5 * $5));
   $9 = Math_fround(-1);
   label$5 : {
    if (!($14 > Math_fround(0))) {
     break label$5;
    }
    $14 = Math_fround(Math_fround(-Math_fround(Math_fround(Math_fround($6 * $8) + Math_fround($13 * $11)) + Math_fround($7 * $5))) / $14);
    if (!!($14 >= Math_fround(1))) {
     $32 = 1065353216;
     $33 = 0;
     $23 = 2;
     $9 = Math_fround(Math_fround(Math_fround($29 * $29) + Math_fround($30 * $30)) + Math_fround($31 * $31));
     break label$5;
    }
    if (!!($14 <= Math_fround(0))) {
     $32 = 0;
     $33 = 1065353216;
     $23 = 1;
     $9 = Math_fround(Math_fround(Math_fround($6 * $6) + Math_fround($13 * $13)) + Math_fround($7 * $7));
     break label$5;
    }
    $33 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(1) - $14)), wasm2js_scratch_load_i32(0));
    $32 = (wasm2js_scratch_store_f32($14), wasm2js_scratch_load_i32(0));
    $23 = 3;
    $5 = Math_fround($7 + Math_fround($5 * $14));
    $8 = Math_fround($6 + Math_fround($8 * $14));
    $9 = Math_fround($8 * $8);
    $8 = Math_fround($13 + Math_fround($11 * $14));
    $9 = Math_fround(Math_fround($5 * $5) + Math_fround($9 + Math_fround($8 * $8)));
   }
   if (!(!!($9 < $12) | $12 < Math_fround(0))) {
    $9 = $12;
    break label$3;
   }
   HEAP32[$4 >> 2] = (0 - ($23 & 1) & 1 << $19) + (1 << $35 & $23 << 30 >> 31);
   HEAP32[$3 + $34 >> 2] = $33;
   HEAP32[$3 + $28 >> 2] = $32;
   HEAP32[(HEAP32[$28 + 4260 >> 2] << 2) + $3 >> 2] = 0;
  }
  $19 = $19 + 1 | 0;
  if (($19 | 0) != 3) {
   $16 = ($19 << 4) + $10 | 0;
   $5 = HEAPF32[$16 >> 2];
   $8 = HEAPF32[$16 + 8 >> 2];
   $11 = HEAPF32[$16 + 4 >> 2];
   $16 = HEAP32[($10 + 52 | 0) + ($19 << 2) >> 2];
   $7 = HEAPF32[$16 + 8 >> 2];
   $13 = HEAPF32[$16 + 4 >> 2];
   $6 = HEAPF32[$16 >> 2];
   $12 = $9;
   continue;
  }
  break;
 }
 if ($9 < Math_fround(0)) {
  $8 = HEAPF32[$0 + 8 >> 2];
  $11 = HEAPF32[$0 >> 2];
  $5 = HEAPF32[$0 + 4 >> 2];
  HEAP32[$4 >> 2] = 7;
  $5 = Math_fround(Math_fround(Math_fround(Math_fround($17 * $11) + Math_fround($18 * $5)) + Math_fround($15 * $8)) / $27);
  $8 = Math_fround($18 * $5);
  $6 = Math_fround(HEAPF32[$1 + 4 >> 2] - $8);
  $11 = Math_fround($17 * $5);
  $13 = Math_fround(HEAPF32[$1 >> 2] - $11);
  $7 = Math_fround(Math_fround($22 * $6) - Math_fround($21 * $13));
  $9 = Math_fround($7 * $7);
  $5 = Math_fround($15 * $5);
  $7 = Math_fround(HEAPF32[$1 + 8 >> 2] - $5);
  $6 = Math_fround(Math_fround($21 * $7) - Math_fround($20 * $6));
  $12 = Math_fround($6 * $6);
  $6 = Math_fround(Math_fround($20 * $13) - Math_fround($22 * $7));
  $9 = Math_fround(Math_sqrt(Math_fround($9 + Math_fround($12 + Math_fround($6 * $6)))));
  $6 = Math_fround(Math_sqrt($27));
  $13 = Math_fround($9 / $6);
  HEAPF32[$3 >> 2] = $13;
  $7 = Math_fround(HEAPF32[$2 + 4 >> 2] - $8);
  $9 = Math_fround(HEAPF32[$2 >> 2] - $11);
  $12 = Math_fround(Math_fround($26 * $7) - Math_fround($25 * $9));
  $14 = Math_fround($12 * $12);
  $12 = Math_fround(HEAPF32[$2 + 8 >> 2] - $5);
  $7 = Math_fround(Math_fround($25 * $12) - Math_fround($24 * $7));
  $15 = Math_fround($7 * $7);
  $7 = Math_fround(Math_fround($24 * $9) - Math_fround($26 * $12));
  $6 = Math_fround(Math_fround(Math_sqrt(Math_fround($14 + Math_fround($15 + Math_fround($7 * $7))))) / $6);
  HEAPF32[$3 + 4 >> 2] = $6;
  HEAPF32[$3 + 8 >> 2] = Math_fround(1) - Math_fround($13 + $6);
  $9 = Math_fround(Math_fround($5 * $5) + Math_fround(Math_fround($11 * $11) + Math_fround($8 * $8)));
 }
 return $9;
}
function btPolyhedralContactClipping__clipHullAgainstHull_28btVector3_20const__2c_20btConvexPolyhedron_20const__2c_20btConvexPolyhedron_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20float_2c_20float_2c_20btAlignedObjectArray_btVector3___2c_20btAlignedObjectArray_btVector3___2c_20btDiscreteCollisionDetectorInterface__Result__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = Math_fround(0), $27 = Math_fround(0), $28 = 0, $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = 0;
 $13 = global$0 - 32 | 0;
 $14 = $13;
 if ($13 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $14;
 $12 = HEAPF32[$0 + 8 >> 2];
 $11 = HEAPF32[$0 >> 2];
 $16 = HEAPF32[$0 + 4 >> 2];
 HEAP32[$13 + 28 >> 2] = HEAP32[$0 + 12 >> 2];
 $18 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($11 * $11) + Math_fround($16 * $16)) + Math_fround($12 * $12)))));
 $19 = Math_fround($12 * $18);
 HEAPF32[$13 + 24 >> 2] = $19;
 $26 = Math_fround($16 * $18);
 HEAPF32[$13 + 20 >> 2] = $26;
 $27 = Math_fround($11 * $18);
 HEAPF32[$13 + 16 >> 2] = $27;
 $20 = -1;
 $15 = HEAP32[$2 + 28 >> 2];
 if (($15 | 0) >= 1) {
  $29 = HEAPF32[$4 + 40 >> 2];
  $30 = HEAPF32[$4 + 36 >> 2];
  $31 = HEAPF32[$4 + 24 >> 2];
  $32 = HEAPF32[$4 + 20 >> 2];
  $21 = HEAP32[$2 + 36 >> 2];
  $33 = HEAPF32[$4 + 32 >> 2];
  $34 = HEAPF32[$4 + 16 >> 2];
  $35 = HEAPF32[$4 + 8 >> 2];
  $36 = HEAPF32[$4 + 4 >> 2];
  $37 = HEAPF32[$4 >> 2];
  $0 = 0;
  $12 = Math_fround(-3.4028234663852886e+38);
  while (1) {
   $10 = Math_imul($0, 36) + $21 | 0;
   $11 = HEAPF32[$10 + 20 >> 2];
   $16 = HEAPF32[$10 + 24 >> 2];
   $18 = HEAPF32[$10 + 28 >> 2];
   $11 = Math_fround(Math_fround(Math_fround($27 * Math_fround(Math_fround(Math_fround($11 * $37) + Math_fround($16 * $36)) + Math_fround($18 * $35))) + Math_fround($26 * Math_fround(Math_fround(Math_fround($11 * $34) + Math_fround($16 * $32)) + Math_fround($18 * $31)))) + Math_fround($19 * Math_fround(Math_fround(Math_fround($11 * $33) + Math_fround($16 * $30)) + Math_fround($18 * $29))));
   $10 = $11 > $12;
   $12 = $10 ? $11 : $12;
   $20 = $10 ? $0 : $20;
   $0 = $0 + 1 | 0;
   if (($0 | 0) < ($15 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = HEAP32[$7 + 4 >> 2];
 if (($0 | 0) <= -1) {
  if (HEAP32[$7 + 8 >> 2] <= -1) {
   $10 = HEAP32[$7 + 12 >> 2];
   if ($10) {
    if (HEAPU8[$7 + 16 | 0]) {
     btAlignedFreeInternal_28void__29($10);
    }
    HEAP32[$7 + 12 >> 2] = 0;
   }
   HEAP8[$7 + 16 | 0] = 1;
   HEAP32[$7 + 8 >> 2] = 0;
   HEAP32[$7 + 12 >> 2] = 0;
  }
  while (1) {
   $14 = HEAP32[$13 + 4 >> 2];
   $17 = HEAP32[$13 >> 2];
   $10 = HEAP32[$7 + 12 >> 2] + ($0 << 4) | 0;
   HEAP32[$10 >> 2] = $17;
   HEAP32[$10 + 4 >> 2] = $14;
   $17 = HEAP32[$13 + 12 >> 2];
   $14 = HEAP32[$13 + 8 >> 2];
   HEAP32[$10 + 8 >> 2] = $14;
   HEAP32[$10 + 12 >> 2] = $17;
   $10 = $0 + 1 | 0;
   $15 = $10 >>> 0 >= $0 >>> 0;
   $0 = $10;
   if ($15) {
    continue;
   }
   break;
  }
 }
 HEAP32[$7 + 4 >> 2] = 0;
 $0 = HEAP32[$2 + 36 >> 2] + Math_imul($20, 36) | 0;
 $28 = HEAP32[$0 + 4 >> 2];
 if (($28 | 0) >= 1) {
  $38 = $0;
  $10 = 0;
  while (1) {
   $0 = HEAP32[$2 + 16 >> 2] + (HEAP32[HEAP32[$38 + 12 >> 2] + ($23 << 2) >> 2] << 4) | 0;
   $12 = HEAPF32[$0 >> 2];
   $11 = HEAPF32[$0 + 4 >> 2];
   $16 = HEAPF32[$0 + 8 >> 2];
   $18 = Math_fround(Math_fround(Math_fround(Math_fround($12 * HEAPF32[$4 + 32 >> 2]) + Math_fround($11 * HEAPF32[$4 + 36 >> 2])) + Math_fround($16 * HEAPF32[$4 + 40 >> 2])) + HEAPF32[$4 + 56 >> 2]);
   $19 = Math_fround(Math_fround(Math_fround(Math_fround($12 * HEAPF32[$4 + 16 >> 2]) + Math_fround($11 * HEAPF32[$4 + 20 >> 2])) + Math_fround($16 * HEAPF32[$4 + 24 >> 2])) + HEAPF32[$4 + 52 >> 2]);
   $12 = Math_fround(Math_fround(Math_fround(Math_fround($12 * HEAPF32[$4 >> 2]) + Math_fround($11 * HEAPF32[$4 + 4 >> 2])) + Math_fround($16 * HEAPF32[$4 + 8 >> 2])) + HEAPF32[$4 + 48 >> 2]);
   label$11 : {
    if (HEAP32[$7 + 8 >> 2] != ($10 | 0)) {
     break label$11;
    }
    $22 = $10 ? $10 << 1 : 1;
    if (($10 | 0) >= ($22 | 0)) {
     break label$11;
    }
    $0 = 0;
    $24 = 0;
    if ($22) {
     $24 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($22 << 4, 16);
     $10 = HEAP32[$7 + 4 >> 2];
    }
    if (($10 | 0) >= 1) {
     while (1) {
      $15 = $0 << 4;
      $21 = $24 + $15 | 0;
      $15 = HEAP32[$7 + 12 >> 2] + $15 | 0;
      $17 = HEAP32[$15 >> 2];
      $14 = HEAP32[$15 + 4 >> 2];
      $25 = $17;
      $17 = $21;
      HEAP32[$17 >> 2] = $25;
      HEAP32[$17 + 4 >> 2] = $14;
      $17 = HEAP32[$15 + 12 >> 2];
      $14 = HEAP32[$15 + 8 >> 2];
      $25 = $14;
      $14 = $21;
      HEAP32[$14 + 8 >> 2] = $25;
      HEAP32[$14 + 12 >> 2] = $17;
      $0 = $0 + 1 | 0;
      if (($10 | 0) != ($0 | 0)) {
       continue;
      }
      break;
     }
    }
    $0 = HEAP32[$7 + 12 >> 2];
    if ($0) {
     if (HEAPU8[$7 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($0);
     }
     HEAP32[$7 + 12 >> 2] = 0;
    }
    HEAP32[$7 + 12 >> 2] = $24;
    HEAP8[$7 + 16 | 0] = 1;
    HEAP32[$7 + 8 >> 2] = $22;
    $10 = HEAP32[$7 + 4 >> 2];
   }
   $0 = HEAP32[$7 + 12 >> 2] + ($10 << 4) | 0;
   HEAP32[$0 + 12 >> 2] = 0;
   HEAPF32[$0 + 8 >> 2] = $18;
   HEAPF32[$0 + 4 >> 2] = $19;
   HEAPF32[$0 >> 2] = $12;
   $10 = HEAP32[$7 + 4 >> 2] + 1 | 0;
   HEAP32[$7 + 4 >> 2] = $10;
   $23 = $23 + 1 | 0;
   if (($28 | 0) != ($23 | 0)) {
    continue;
   }
   break;
  }
 }
 if (($20 | 0) > -1) {
  btPolyhedralContactClipping__clipFaceAgainstHull_28btVector3_20const__2c_20btConvexPolyhedron_20const__2c_20btTransform_20const__2c_20btAlignedObjectArray_btVector3___2c_20btAlignedObjectArray_btVector3___2c_20float_2c_20float_2c_20btDiscreteCollisionDetectorInterface__Result__29($13 + 16 | 0, $1, $3, $7, $8, $5, $6, $9);
 }
 $0 = $13 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexHullInternal__mergeProjection_28btConvexHullInternal__IntermediateHull__2c_20btConvexHullInternal__IntermediateHull__2c_20btConvexHullInternal__Vertex___2c_20btConvexHullInternal__Vertex___29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 $5 = HEAP32[$1 + 12 >> 2];
 $12 = HEAP32[$2 + 8 >> 2];
 label$1 : {
  label$2 : {
   if (HEAP32[$5 + 88 >> 2] != HEAP32[$12 + 88 >> 2] | HEAP32[$5 + 92 >> 2] != HEAP32[$12 + 92 >> 2]) {
    break label$2;
   }
   $0 = HEAP32[$12 + 4 >> 2];
   if (($12 | 0) == ($0 | 0)) {
    HEAP32[$3 >> 2] = $5;
    $0 = HEAP32[$12 + 8 >> 2];
    $5 = 0;
    if (!$0) {
     break label$1;
    }
    HEAP32[$4 >> 2] = HEAP32[$0 + 12 >> 2];
    return 0;
   }
   $5 = HEAP32[$12 >> 2];
   HEAP32[$0 >> 2] = $5;
   HEAP32[$5 + 4 >> 2] = $0;
   if (HEAP32[$2 >> 2] == ($12 | 0)) {
    $11 = $2;
    $6 = HEAP32[$5 + 88 >> 2];
    $7 = HEAP32[$0 + 88 >> 2];
    $8 = $5;
    label$5 : {
     if (($6 | 0) < ($7 | 0)) {
      break label$5;
     }
     if (($6 | 0) == ($7 | 0)) {
      $8 = $5;
      if (HEAP32[$5 + 92 >> 2] < HEAP32[$0 + 92 >> 2]) {
       break label$5;
      }
     }
     $8 = $0;
    }
    HEAP32[$11 >> 2] = $8;
   }
   if (HEAP32[$2 + 4 >> 2] != ($12 | 0)) {
    break label$2;
   }
   $8 = HEAP32[$5 + 88 >> 2];
   $6 = HEAP32[$0 + 88 >> 2];
   if (!(($6 | 0) != ($8 | 0) | HEAP32[$5 + 92 >> 2] <= HEAP32[$0 + 92 >> 2] ? ($8 | 0) <= ($6 | 0) : 0)) {
    HEAP32[$2 + 4 >> 2] = $5;
    break label$2;
   }
   HEAP32[$2 + 4 >> 2] = $0;
  }
  $17 = HEAP32[$2 >> 2];
  $20 = HEAP32[$1 >> 2];
  $21 = HEAP32[$1 + 4 >> 2];
  $7 = $21;
  $18 = HEAP32[$2 + 4 >> 2];
  $0 = $18;
  $5 = 0;
  $8 = 1;
  $6 = 0;
  while (1) {
   $15 = $6;
   $12 = $10;
   $19 = $5;
   $11 = HEAP32[$7 + 88 >> 2];
   $6 = Math_imul(HEAP32[$0 + 88 >> 2] - $11 | 0, $8);
   label$10 : {
    if (($6 | 0) >= 1) {
     $5 = $7;
     while (1) {
      $10 = $0;
      $16 = HEAP32[$0 + 92 >> 2];
      $11 = $6;
      while (1) {
       label$14 : {
        $6 = HEAP32[$5 + 92 >> 2];
        $9 = $16 - $6 | 0;
        $14 = !$15 << 2;
        $0 = HEAP32[$14 + $5 >> 2];
        if (($5 | 0) == ($0 | 0)) {
         break label$14;
        }
        $13 = HEAP32[$0 + 92 >> 2] - $6 | 0;
        if (($13 | 0) > 0) {
         break label$14;
        }
        $7 = HEAP32[$0 + 88 >> 2];
        $6 = Math_imul($7 - HEAP32[$5 + 88 >> 2] | 0, $8);
        if (($6 | 0) > -1 | (Math_imul($11, $13) | 0) > (Math_imul($6, $9) | 0) ? $6 : 0) {
         break label$14;
        }
        $11 = Math_imul(HEAP32[$10 + 88 >> 2] - $7 | 0, $8);
        $5 = $0;
        continue;
       }
       break;
      }
      $0 = HEAP32[$10 + $14 >> 2];
      if (($10 | 0) == ($0 | 0)) {
       break label$10;
      }
      $13 = HEAP32[$0 + 92 >> 2] - $16 | 0;
      if (($13 | 0) > -1) {
       break label$10;
      }
      $7 = HEAP32[$0 + 88 >> 2];
      $6 = Math_imul($7 - HEAP32[$5 + 88 >> 2] | 0, $8);
      if (($6 | 0) < 1) {
       break label$10;
      }
      $7 = Math_imul($7 - HEAP32[$10 + 88 >> 2] | 0, $8);
      if (!$7) {
       continue;
      }
      if (($7 | 0) > -1) {
       break label$10;
      }
      if ((Math_imul($11, $13) | 0) < (Math_imul($7, $9) | 0)) {
       continue;
      }
      break;
     }
     break label$10;
    }
    if (($6 | 0) <= -1) {
     label$17 : while (1) {
      $13 = HEAP32[$0 + 92 >> 2];
      $22 = (($15 | 0) != 0) << 2;
      $11 = HEAP32[$22 + $0 >> 2];
      while (1) {
       $10 = $6;
       $5 = $7;
       $6 = HEAP32[$5 + 92 >> 2];
       $16 = $13 - $6 | 0;
       label$19 : {
        if (($0 | 0) == ($11 | 0)) {
         break label$19;
        }
        $9 = HEAP32[$11 + 92 >> 2] - $13 | 0;
        if (($9 | 0) < 0) {
         break label$19;
        }
        $14 = HEAP32[$11 + 88 >> 2];
        $7 = Math_imul($14 - HEAP32[$0 + 88 >> 2] | 0, $8);
        if (($7 | 0) > -1 | (Math_imul($10, $9) | 0) > (Math_imul($7, $16) | 0) ? $7 : 0) {
         break label$19;
        }
        $6 = Math_imul($14 - HEAP32[$5 + 88 >> 2] | 0, $8);
        $0 = $11;
        $7 = $5;
        continue label$17;
       }
       $7 = HEAP32[$5 + $22 >> 2];
       if (($7 | 0) == ($5 | 0)) {
        $10 = $0;
        break label$10;
       }
       $14 = HEAP32[$7 + 92 >> 2] - $6 | 0;
       if (($14 | 0) < 1) {
        $10 = $0;
        break label$10;
       }
       $9 = HEAP32[$7 + 88 >> 2];
       $6 = Math_imul(HEAP32[$0 + 88 >> 2] - $9 | 0, $8);
       if (($6 | 0) > -1) {
        $10 = $0;
        break label$10;
       }
       $9 = Math_imul($9 - HEAP32[$5 + 88 >> 2] | 0, $8);
       if (!$9) {
        continue;
       }
       if (($9 | 0) > -1) {
        $10 = $0;
        break label$10;
       }
       if ((Math_imul($10, $14) | 0) < (Math_imul($9, $16) | 0)) {
        continue;
       }
       break;
      }
      break;
     }
     $10 = $0;
     break label$10;
    }
    $6 = HEAP32[$7 + 92 >> 2];
    $8 = $7;
    while (1) {
     $5 = $8;
     $8 = HEAP32[$5 + (!$15 << 2) >> 2];
     if (!(($7 | 0) == ($8 | 0) | HEAP32[$8 + 88 >> 2] != ($11 | 0))) {
      $9 = HEAP32[$8 + 92 >> 2];
      $13 = ($9 | 0) <= ($6 | 0);
      $6 = $9;
      if ($13) {
       continue;
      }
     }
     break;
    }
    $6 = HEAP32[$0 + 92 >> 2];
    $8 = $0;
    while (1) {
     $10 = $8;
     $8 = HEAP32[((($15 | 0) != 0) << 2) + $8 >> 2];
     if (($8 | 0) == ($0 | 0) | HEAP32[$8 + 88 >> 2] != ($11 | 0)) {
      break label$10;
     }
     $7 = HEAP32[$8 + 92 >> 2];
     $9 = ($7 | 0) >= ($6 | 0);
     $6 = $7;
     if ($9) {
      continue;
     }
     break;
    }
   }
   $6 = 1;
   $8 = -1;
   $7 = $20;
   $0 = $17;
   if (!$15) {
    continue;
   }
   break;
  }
  HEAP32[$5 + 4 >> 2] = $10;
  HEAP32[$10 >> 2] = $5;
  HEAP32[$19 >> 2] = $12;
  HEAP32[$12 + 4 >> 2] = $19;
  if (HEAP32[$17 + 88 >> 2] < HEAP32[$20 + 88 >> 2]) {
   HEAP32[$1 >> 2] = $17;
  }
  if (HEAP32[$18 + 88 >> 2] >= HEAP32[$21 + 88 >> 2]) {
   HEAP32[$1 + 4 >> 2] = $18;
  }
  HEAP32[$1 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
  HEAP32[$3 >> 2] = $19;
  $5 = 1;
 }
 HEAP32[$4 >> 2] = $12;
 return $5;
}
function btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, $1, $2) {
 var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0);
 $11 = global$0 - 16 | 0;
 $3 = $11;
 if ($11 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $8 = HEAP32[$0 + 844 >> 2];
 label$2 : {
  if (($8 | 0) < 1) {
   break label$2;
  }
  while (1) {
   $13 = HEAPF32[$1 + 48 >> 2];
   $16 = HEAPF32[$1 + 8 >> 2];
   $17 = HEAPF32[$1 >> 2];
   $18 = HEAPF32[$1 + 4 >> 2];
   $14 = HEAPF32[$1 + 52 >> 2];
   $19 = HEAPF32[$1 + 24 >> 2];
   $9 = HEAPF32[$1 + 16 >> 2];
   $20 = HEAPF32[$1 + 20 >> 2];
   $15 = HEAPF32[$1 + 56 >> 2];
   $21 = HEAPF32[$1 + 40 >> 2];
   $6 = HEAPF32[$1 + 32 >> 2];
   $5 = HEAPF32[$1 + 36 >> 2];
   $7 = $8 + -1 | 0;
   $3 = Math_imul($7, 208) + $0 | 0;
   HEAP32[$3 - -64 >> 2] = 0;
   $4 = HEAPF32[$3 + 4 >> 2];
   $10 = Math_fround($6 * $4);
   $6 = HEAPF32[$3 + 8 >> 2];
   $10 = Math_fround($10 + Math_fround($5 * $6));
   $5 = HEAPF32[$3 + 12 >> 2];
   $15 = Math_fround($15 + Math_fround($10 + Math_fround($21 * $5)));
   HEAPF32[$3 + 60 >> 2] = $15;
   $14 = Math_fround($14 + Math_fround(Math_fround(Math_fround($4 * $9) + Math_fround($6 * $20)) + Math_fround($5 * $19)));
   HEAPF32[$3 + 56 >> 2] = $14;
   $13 = Math_fround($13 + Math_fround(Math_fround(Math_fround($4 * $17) + Math_fround($6 * $18)) + Math_fround($5 * $16)));
   HEAPF32[$3 + 52 >> 2] = $13;
   $16 = HEAPF32[$2 + 56 >> 2];
   $17 = HEAPF32[$2 + 40 >> 2];
   $18 = HEAPF32[$2 + 32 >> 2];
   $19 = HEAPF32[$2 + 36 >> 2];
   $9 = HEAPF32[$2 + 52 >> 2];
   $20 = HEAPF32[$2 + 24 >> 2];
   $21 = HEAPF32[$2 + 16 >> 2];
   $23 = HEAPF32[$2 + 20 >> 2];
   $10 = HEAPF32[$2 + 48 >> 2];
   $24 = HEAPF32[$2 + 8 >> 2];
   $6 = HEAPF32[$2 >> 2];
   $5 = HEAPF32[$2 + 4 >> 2];
   HEAP32[$3 + 48 >> 2] = 0;
   $4 = HEAPF32[$3 + 20 >> 2];
   $22 = Math_fround($6 * $4);
   $6 = HEAPF32[$3 + 24 >> 2];
   $22 = Math_fround($22 + Math_fround($5 * $6));
   $5 = HEAPF32[$3 + 28 >> 2];
   $10 = Math_fround($10 + Math_fround($22 + Math_fround($24 * $5)));
   HEAPF32[$3 + 36 >> 2] = $10;
   $9 = Math_fround($9 + Math_fround(Math_fround(Math_fround($4 * $21) + Math_fround($6 * $23)) + Math_fround($5 * $20)));
   HEAPF32[$3 + 40 >> 2] = $9;
   $4 = Math_fround($16 + Math_fround(Math_fround(Math_fround($4 * $18) + Math_fround($6 * $19)) + Math_fround($5 * $17)));
   HEAPF32[$3 + 44 >> 2] = $4;
   HEAPF32[$3 + 84 >> 2] = Math_fround(Math_fround(Math_fround($13 - $10) * HEAPF32[$3 + 68 >> 2]) + Math_fround(Math_fround($14 - $9) * HEAPF32[$3 + 72 >> 2])) + Math_fround(Math_fround($15 - $4) * HEAPF32[$3 + 76 >> 2]);
   $12 = $3;
   $3 = $3 + 168 | 0;
   HEAP32[$3 >> 2] = HEAP32[$12 + 168 >> 2] + 1;
   $3 = ($8 | 0) > 1;
   $8 = $7;
   if ($3) {
    continue;
   }
   break;
  }
  $2 = HEAP32[$0 + 844 >> 2];
  if (($2 | 0) < 1) {
   break label$2;
  }
  while (1) {
   $1 = $2;
   $2 = $1 + -1 | 0;
   $3 = Math_imul($2, 208) + $0 | 0;
   $8 = $3 + 4 | 0;
   $4 = HEAPF32[$3 + 84 >> 2];
   $6 = HEAPF32[$0 + 848 >> 2];
   label$5 : {
    if (!($4 <= $6)) {
     $12 = $3;
     $3 = $3 + 120 | 0;
     $7 = HEAP32[$3 >> 2];
     label$7 : {
      if (!$7) {
       break label$7;
      }
      $3 = HEAP32[5383];
      if (!$3) {
       break label$7;
      }
      FUNCTION_TABLE[$3]($7) | 0;
      HEAP32[$12 + 120 >> 2] = 0;
     }
     $3 = $1;
     $7 = HEAP32[$0 + 844 >> 2];
     if (($3 | 0) != ($7 | 0)) {
      $3 = Math_imul($7 + -1 | 0, 208) + $0 | 0;
      memcpy($8, $3 + 4 | 0, 208);
      HEAP32[$3 + 168 >> 2] = 0;
      HEAP32[$3 + 120 >> 2] = 0;
      HEAP32[$3 + 132 >> 2] = 0;
      HEAP32[$3 + 136 >> 2] = 0;
      HEAP32[$3 + 140 >> 2] = 0;
      HEAP32[$3 + 144 >> 2] = 0;
      $3 = HEAP32[$0 + 844 >> 2];
     }
     $3 = $3 + -1 | 0;
     HEAP32[$0 + 844 >> 2] = $3;
     if ($3) {
      break label$5;
     }
     $3 = HEAP32[5386];
     if (!$3) {
      break label$5;
     }
     HEAP32[$11 + 12 >> 2] = $0;
     FUNCTION_TABLE[$3]($11 + 12 | 0);
     break label$5;
    }
    $5 = Math_fround(HEAPF32[$3 + 36 >> 2] - Math_fround(HEAPF32[$3 + 52 >> 2] - Math_fround(HEAPF32[$3 + 68 >> 2] * $4)));
    $9 = Math_fround($5 * $5);
    $5 = Math_fround(HEAPF32[$3 + 40 >> 2] - Math_fround(HEAPF32[$3 + 56 >> 2] - Math_fround($4 * HEAPF32[$3 + 72 >> 2])));
    $4 = Math_fround(HEAPF32[$3 + 44 >> 2] - Math_fround(HEAPF32[$3 + 60 >> 2] - Math_fround($4 * HEAPF32[$3 + 76 >> 2])));
    if (!!(Math_fround(Math_fround($9 + Math_fround($5 * $5)) + Math_fround($4 * $4)) > Math_fround($6 * $6))) {
     $12 = $3;
     $3 = $3 + 120 | 0;
     $7 = HEAP32[$3 >> 2];
     label$10 : {
      if (!$7) {
       break label$10;
      }
      $3 = HEAP32[5383];
      if (!$3) {
       break label$10;
      }
      FUNCTION_TABLE[$3]($7) | 0;
      HEAP32[$12 + 120 >> 2] = 0;
     }
     $3 = $1;
     $7 = HEAP32[$0 + 844 >> 2];
     if (($3 | 0) != ($7 | 0)) {
      $3 = Math_imul($7 + -1 | 0, 208) + $0 | 0;
      memcpy($8, $3 + 4 | 0, 208);
      HEAP32[$3 + 168 >> 2] = 0;
      HEAP32[$3 + 120 >> 2] = 0;
      HEAP32[$3 + 132 >> 2] = 0;
      HEAP32[$3 + 136 >> 2] = 0;
      HEAP32[$3 + 140 >> 2] = 0;
      HEAP32[$3 + 144 >> 2] = 0;
      $3 = HEAP32[$0 + 844 >> 2];
     }
     $3 = $3 + -1 | 0;
     HEAP32[$0 + 844 >> 2] = $3;
     if ($3) {
      break label$5;
     }
     $3 = HEAP32[5386];
     if (!$3) {
      break label$5;
     }
     HEAP32[$11 + 8 >> 2] = $0;
     FUNCTION_TABLE[$3]($11 + 8 | 0);
     break label$5;
    }
    $3 = HEAP32[5384];
    if (!$3) {
     break label$5;
    }
    FUNCTION_TABLE[$3]($8, HEAP32[$0 + 836 >> 2], HEAP32[$0 + 840 >> 2]) | 0;
   }
   if (($1 | 0) > 1) {
    continue;
   }
   break;
  }
 }
 $0 = $11 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSequentialImpulseConstraintSolver__setFrictionConstraintImpulse_28btSolverConstraint__2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btContactSolverInfo_20const__29($0, $1, $2, $3, $4, $5) {
 var $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0, $20 = 0, $21 = Math_fround(0), $22 = Math_fround(0);
 $14 = HEAP32[$0 + 16 >> 2];
 $11 = HEAP32[($14 + Math_imul($3, 244) | 0) + 240 >> 2];
 $8 = HEAP32[(Math_imul($2, 244) + $14 | 0) + 240 >> 2];
 $15 = HEAP32[$0 + 76 >> 2];
 $1 = HEAP32[$1 + 140 >> 2];
 $19 = HEAP32[$5 + 72 >> 2];
 $20 = $19 & 4;
 label$1 : {
  if ($20) {
   $9 = Math_imul($1, 152) + $15 | 0;
   $6 = Math_fround(HEAPF32[$4 + 136 >> 2] * HEAPF32[$5 + 68 >> 2]);
   HEAPF32[$9 + 100 >> 2] = $6;
   if ($8) {
    $12 = HEAPF32[$8 + 416 >> 2];
    $13 = HEAPF32[$9 + 24 >> 2];
    $16 = HEAPF32[$8 + 412 >> 2];
    $17 = HEAPF32[$9 + 20 >> 2];
    $0 = Math_imul($2, 244) + $14 | 0;
    $7 = HEAPF32[$8 + 404 >> 2];
    HEAPF32[$0 + 64 >> 2] = Math_fround(Math_fround($6 * Math_fround(Math_fround($7 * HEAPF32[$9 + 16 >> 2]) * HEAPF32[$8 + 408 >> 2])) * HEAPF32[$0 + 112 >> 2]) + HEAPF32[$0 + 64 >> 2];
    $10 = $0 + 68 | 0;
    HEAPF32[$10 >> 2] = Math_fround(Math_fround($6 * Math_fround($16 * Math_fround($7 * $17))) * HEAPF32[$0 + 116 >> 2]) + HEAPF32[$0 + 68 >> 2];
    $10 = $0 + 72 | 0;
    HEAPF32[$10 >> 2] = Math_fround(Math_fround($6 * Math_fround($12 * Math_fround($7 * $13))) * HEAPF32[$0 + 120 >> 2]) + HEAPF32[$0 + 72 >> 2];
    $7 = HEAPF32[$9 + 72 >> 2];
    $12 = HEAPF32[$9 + 68 >> 2];
    HEAPF32[$0 + 80 >> 2] = Math_fround(Math_fround($6 * HEAPF32[$0 + 96 >> 2]) * HEAPF32[$9 + 64 >> 2]) + HEAPF32[$0 + 80 >> 2];
    $13 = HEAPF32[$0 + 104 >> 2];
    $10 = $0 + 84 | 0;
    HEAPF32[$10 >> 2] = Math_fround($12 * Math_fround($6 * HEAPF32[$0 + 100 >> 2])) + HEAPF32[$0 + 84 >> 2];
    $10 = $0;
    $0 = $0 + 88 | 0;
    HEAPF32[$0 >> 2] = Math_fround($7 * Math_fround($6 * $13)) + HEAPF32[$10 + 88 >> 2];
   }
   if (!$11) {
    break label$1;
   }
   $10 = Math_imul($1, 152) + $15 | 0;
   $12 = HEAPF32[$10 + 88 >> 2];
   $13 = HEAPF32[$10 + 84 >> 2];
   $16 = HEAPF32[$10 + 80 >> 2];
   $17 = HEAPF32[$11 + 416 >> 2];
   $18 = HEAPF32[$10 + 56 >> 2];
   $21 = HEAPF32[$11 + 412 >> 2];
   $22 = HEAPF32[$10 + 52 >> 2];
   $0 = Math_imul($3, 244) + $14 | 0;
   $7 = HEAPF32[$11 + 404 >> 2];
   $6 = HEAPF32[$9 + 100 >> 2];
   HEAPF32[$0 + 64 >> 2] = HEAPF32[$0 + 64 >> 2] + Math_fround(Math_fround(Math_fround(Math_fround($7 * HEAPF32[$10 + 48 >> 2]) * HEAPF32[$11 + 408 >> 2]) * $6) * HEAPF32[$0 + 112 >> 2]);
   $9 = $0 + 68 | 0;
   HEAPF32[$9 >> 2] = HEAPF32[$0 + 68 >> 2] + Math_fround(Math_fround($6 * Math_fround($21 * Math_fround($7 * $22))) * HEAPF32[$0 + 116 >> 2]);
   $9 = $0 + 72 | 0;
   HEAPF32[$9 >> 2] = HEAPF32[$0 + 72 >> 2] + Math_fround(Math_fround($6 * Math_fround($17 * Math_fround($7 * $18))) * HEAPF32[$0 + 120 >> 2]);
   HEAPF32[$0 + 80 >> 2] = HEAPF32[$0 + 80 >> 2] + Math_fround($16 * Math_fround($6 * HEAPF32[$0 + 96 >> 2]));
   $7 = HEAPF32[$0 + 104 >> 2];
   $9 = $0 + 84 | 0;
   HEAPF32[$9 >> 2] = HEAPF32[$0 + 84 >> 2] + Math_fround($13 * Math_fround($6 * HEAPF32[$0 + 100 >> 2]));
   $10 = $0;
   $0 = $0 + 88 | 0;
   HEAPF32[$0 >> 2] = HEAPF32[$10 + 88 >> 2] + Math_fround($12 * Math_fround($7 * $6));
   break label$1;
  }
  HEAP32[(Math_imul($1, 152) + $15 | 0) + 100 >> 2] = 0;
 }
 label$4 : {
  if (!($19 & 16)) {
   break label$4;
  }
  $9 = $1 + 1 | 0;
  if ($20) {
   $1 = Math_imul($9, 152) + $15 | 0;
   $6 = Math_fround(HEAPF32[$4 + 140 >> 2] * HEAPF32[$5 + 68 >> 2]);
   HEAPF32[$1 + 100 >> 2] = $6;
   if ($8) {
    $12 = HEAPF32[$1 + 24 >> 2];
    $13 = HEAPF32[$1 + 20 >> 2];
    $0 = Math_imul($2, 244) + $14 | 0;
    $7 = HEAPF32[$8 + 404 >> 2];
    HEAPF32[$0 + 64 >> 2] = Math_fround(Math_fround($6 * Math_fround($7 * HEAPF32[$1 + 16 >> 2])) * HEAPF32[$0 + 112 >> 2]) + HEAPF32[$0 + 64 >> 2];
    $8 = $0 + 68 | 0;
    HEAPF32[$8 >> 2] = Math_fround(Math_fround($6 * Math_fround($7 * $13)) * HEAPF32[$0 + 116 >> 2]) + HEAPF32[$0 + 68 >> 2];
    $8 = $0 + 72 | 0;
    HEAPF32[$8 >> 2] = Math_fround(Math_fround($6 * Math_fround($7 * $12)) * HEAPF32[$0 + 120 >> 2]) + HEAPF32[$0 + 72 >> 2];
    $7 = HEAPF32[$1 + 72 >> 2];
    $12 = HEAPF32[$1 + 68 >> 2];
    HEAPF32[$0 + 80 >> 2] = Math_fround(Math_fround($6 * HEAPF32[$0 + 96 >> 2]) * HEAPF32[$1 + 64 >> 2]) + HEAPF32[$0 + 80 >> 2];
    $13 = HEAPF32[$0 + 104 >> 2];
    $8 = $0 + 84 | 0;
    HEAPF32[$8 >> 2] = Math_fround($12 * Math_fround($6 * HEAPF32[$0 + 100 >> 2])) + HEAPF32[$0 + 84 >> 2];
    $2 = $0;
    $0 = $0 + 88 | 0;
    HEAPF32[$0 >> 2] = Math_fround($7 * Math_fround($6 * $13)) + HEAPF32[$2 + 88 >> 2];
   }
   if (!$11) {
    break label$4;
   }
   $8 = Math_imul($9, 152) + $15 | 0;
   $12 = HEAPF32[$8 + 88 >> 2];
   $13 = HEAPF32[$8 + 84 >> 2];
   $16 = HEAPF32[$8 + 56 >> 2];
   $17 = HEAPF32[$8 + 52 >> 2];
   $18 = HEAPF32[$8 + 48 >> 2];
   $7 = HEAPF32[$11 + 404 >> 2];
   $0 = Math_imul($3, 244) + $14 | 0;
   $6 = HEAPF32[$1 + 100 >> 2];
   HEAPF32[$0 + 80 >> 2] = HEAPF32[$0 + 80 >> 2] + Math_fround(HEAPF32[$8 + 80 >> 2] * Math_fround(HEAPF32[$0 + 96 >> 2] * $6));
   HEAPF32[$0 + 64 >> 2] = HEAPF32[$0 + 64 >> 2] + Math_fround(Math_fround($6 * Math_fround($7 * $18)) * HEAPF32[$0 + 112 >> 2]);
   $11 = $0 + 68 | 0;
   HEAPF32[$11 >> 2] = HEAPF32[$0 + 68 >> 2] + Math_fround(Math_fround($6 * Math_fround($7 * $17)) * HEAPF32[$0 + 116 >> 2]);
   $11 = $0 + 72 | 0;
   HEAPF32[$11 >> 2] = HEAPF32[$0 + 72 >> 2] + Math_fround(Math_fround($6 * Math_fround($7 * $16)) * HEAPF32[$0 + 120 >> 2]);
   $7 = HEAPF32[$0 + 104 >> 2];
   $11 = $0 + 84 | 0;
   HEAPF32[$11 >> 2] = HEAPF32[$0 + 84 >> 2] + Math_fround($13 * Math_fround($6 * HEAPF32[$0 + 100 >> 2]));
   $1 = $0;
   $0 = $0 + 88 | 0;
   HEAPF32[$0 >> 2] = HEAPF32[$1 + 88 >> 2] + Math_fround($12 * Math_fround($7 * $6));
   return;
  }
  HEAP32[(Math_imul($9, 152) + $15 | 0) + 100 >> 2] = 0;
 }
}
function btVoronoiSimplexSolver__closestPtPointTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btSubSimplexClosestResult__29($0, $1, $2, $3, $4, $5) {
 var $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0);
 $12 = HEAPU8[$5 + 16 | 0] & -16;
 HEAP8[$5 + 16 | 0] = $12;
 $28 = HEAPF32[$4 >> 2];
 $8 = HEAPF32[$2 >> 2];
 $18 = Math_fround($28 - $8);
 $13 = HEAPF32[$1 >> 2];
 $7 = Math_fround($13 - $8);
 $29 = HEAPF32[$4 + 4 >> 2];
 $14 = HEAPF32[$2 + 4 >> 2];
 $19 = Math_fround($29 - $14);
 $10 = HEAPF32[$1 + 4 >> 2];
 $6 = Math_fround($10 - $14);
 $30 = HEAPF32[$4 + 8 >> 2];
 $15 = HEAPF32[$2 + 8 >> 2];
 $20 = Math_fround($30 - $15);
 $16 = HEAPF32[$1 + 8 >> 2];
 $9 = Math_fround($16 - $15);
 $11 = Math_fround(Math_fround(Math_fround($18 * $7) + Math_fround($19 * $6)) + Math_fround($20 * $9));
 $1 = $5;
 $24 = HEAPF32[$3 >> 2];
 $21 = Math_fround($24 - $8);
 $25 = HEAPF32[$3 + 4 >> 2];
 $22 = Math_fround($25 - $14);
 $26 = HEAPF32[$3 + 8 >> 2];
 $23 = Math_fround($26 - $15);
 $7 = Math_fround(Math_fround(Math_fround($21 * $7) + Math_fround($22 * $6)) + Math_fround($23 * $9));
 label$1 : {
  if (!($7 <= Math_fround(0) ^ 1 | $11 <= Math_fround(0) ^ 1)) {
   $3 = HEAP32[$2 >> 2];
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$5 >> 2] = $3;
   HEAP32[$5 + 4 >> 2] = $0;
   $3 = HEAP32[$2 + 12 >> 2];
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP32[$5 + 8 >> 2] = $0;
   HEAP32[$5 + 12 >> 2] = $3;
   HEAP8[$5 + 16 | 0] = $12 | 1;
   $7 = Math_fround(0);
   $6 = Math_fround(0);
   $8 = Math_fround(1);
   break label$1;
  }
  $6 = Math_fround($13 - $24);
  $9 = Math_fround($10 - $25);
  $17 = Math_fround($16 - $26);
  $27 = Math_fround(Math_fround(Math_fround($18 * $6) + Math_fround($19 * $9)) + Math_fround($20 * $17));
  $9 = Math_fround(Math_fround(Math_fround($21 * $6) + Math_fround($22 * $9)) + Math_fround($23 * $17));
  if (!($9 >= Math_fround(0) ^ 1 | $27 <= $9 ^ 1)) {
   $2 = $3;
   $3 = HEAP32[$2 >> 2];
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$5 >> 2] = $3;
   HEAP32[$5 + 4 >> 2] = $0;
   $3 = HEAP32[$2 + 12 >> 2];
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP32[$5 + 8 >> 2] = $0;
   HEAP32[$5 + 12 >> 2] = $3;
   HEAP8[$5 + 16 | 0] = $12 | 2;
   $7 = Math_fround(1);
   $6 = Math_fround(0);
   $8 = Math_fround(0);
   break label$1;
  }
  $17 = Math_fround(Math_fround($7 * $27) - Math_fround($9 * $11));
  label$4 : {
   if ($9 <= Math_fround(0) ^ 1 | $7 >= Math_fround(0) ^ 1) {
    break label$4;
   }
   $6 = Math_fround(0);
   if (!($17 <= Math_fround(0))) {
    break label$4;
   }
   HEAP32[$5 + 12 >> 2] = 0;
   HEAP8[$5 + 16 | 0] = $12 | 3;
   $7 = Math_fround($7 / Math_fround($7 - $9));
   HEAPF32[$5 + 8 >> 2] = $15 + Math_fround($23 * $7);
   HEAPF32[$5 + 4 >> 2] = $14 + Math_fround($22 * $7);
   HEAPF32[$5 >> 2] = $8 + Math_fround($21 * $7);
   $8 = Math_fround(Math_fround(1) - $7);
   break label$1;
  }
  $6 = Math_fround($13 - $28);
  $10 = Math_fround($10 - $29);
  $16 = Math_fround($16 - $30);
  $13 = Math_fround(Math_fround(Math_fround($21 * $6) + Math_fround($22 * $10)) + Math_fround($23 * $16));
  $6 = Math_fround(Math_fround(Math_fround($18 * $6) + Math_fround($19 * $10)) + Math_fround($20 * $16));
  if (!($6 >= Math_fround(0) ^ 1 | $13 <= $6 ^ 1)) {
   $2 = $4;
   $3 = HEAP32[$2 >> 2];
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$5 >> 2] = $3;
   HEAP32[$5 + 4 >> 2] = $0;
   $3 = HEAP32[$2 + 12 >> 2];
   $0 = HEAP32[$2 + 8 >> 2];
   HEAP32[$5 + 8 >> 2] = $0;
   HEAP32[$5 + 12 >> 2] = $3;
   HEAP8[$5 + 16 | 0] = $12 | 4;
   $6 = Math_fround(1);
   $7 = Math_fround(0);
   $8 = Math_fround(0);
   break label$1;
  }
  $10 = Math_fround(Math_fround($13 * $11) - Math_fround($7 * $6));
  label$6 : {
   if ($6 <= Math_fround(0) ^ 1 | $11 >= Math_fround(0) ^ 1) {
    break label$6;
   }
   $7 = Math_fround(0);
   if (!($10 <= Math_fround(0))) {
    break label$6;
   }
   HEAP32[$5 + 12 >> 2] = 0;
   HEAP8[$5 + 16 | 0] = $12 | 5;
   $6 = Math_fround($11 / Math_fround($11 - $6));
   HEAPF32[$5 + 8 >> 2] = $15 + Math_fround($20 * $6);
   HEAPF32[$5 + 4 >> 2] = $14 + Math_fround($19 * $6);
   HEAPF32[$5 >> 2] = $8 + Math_fround($18 * $6);
   $8 = Math_fround(Math_fround(1) - $6);
   break label$1;
  }
  label$7 : {
   $7 = Math_fround(Math_fround($9 * $6) - Math_fround($13 * $27));
   if (!($7 <= Math_fround(0))) {
    break label$7;
   }
   $11 = Math_fround($27 - $9);
   if (!($11 >= Math_fround(0))) {
    break label$7;
   }
   $6 = Math_fround($13 - $6);
   if (!($6 >= Math_fround(0))) {
    break label$7;
   }
   HEAP32[$5 + 12 >> 2] = 0;
   HEAP8[$5 + 16 | 0] = $12 | 6;
   $6 = Math_fround($11 / Math_fround($11 + $6));
   HEAPF32[$5 + 8 >> 2] = $26 + Math_fround(Math_fround($30 - $26) * $6);
   HEAPF32[$5 + 4 >> 2] = $25 + Math_fround(Math_fround($29 - $25) * $6);
   HEAPF32[$5 >> 2] = $24 + Math_fround(Math_fround($28 - $24) * $6);
   $7 = Math_fround(Math_fround(1) - $6);
   $8 = Math_fround(0);
   break label$1;
  }
  HEAP32[$5 + 12 >> 2] = 0;
  HEAP8[$5 + 16 | 0] = $12 | 7;
  $7 = Math_fround(Math_fround(1) / Math_fround($17 + Math_fround($7 + $10)));
  $6 = Math_fround($17 * $7);
  $7 = Math_fround($10 * $7);
  HEAPF32[$5 + 8 >> 2] = Math_fround($20 * $6) + Math_fround($15 + Math_fround($23 * $7));
  HEAPF32[$5 + 4 >> 2] = Math_fround($19 * $6) + Math_fround($14 + Math_fround($22 * $7));
  HEAPF32[$5 >> 2] = Math_fround($18 * $6) + Math_fround($8 + Math_fround($21 * $7));
  $8 = Math_fround(Math_fround(Math_fround(1) - $7) - $6);
 }
 HEAPF32[$1 + 20 >> 2] = $8;
 HEAP32[$5 + 32 >> 2] = 0;
 HEAPF32[$5 + 28 >> 2] = $6;
 HEAPF32[$5 + 24 >> 2] = $7;
 return 1;
}
function btRigidBody__computeGyroscopicImpulseImplicit_World_28float_29_20const($0, $1, $2) {
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0);
 $12 = HEAPF32[$1 + 396 >> 2];
 $3 = HEAPF32[$1 + 44 >> 2];
 $16 = HEAPF32[$1 + 40 >> 2];
 $17 = HEAPF32[$1 + 36 >> 2];
 $6 = HEAPF32[$1 + 12 >> 2];
 $7 = HEAPF32[$1 + 8 >> 2];
 $13 = HEAPF32[$1 + 392 >> 2];
 $10 = HEAPF32[$1 + 28 >> 2];
 $8 = HEAPF32[$1 + 464 >> 2];
 $4 = HEAPF32[$1 + 24 >> 2];
 $14 = HEAPF32[$1 + 460 >> 2];
 $5 = HEAPF32[$1 + 20 >> 2];
 $15 = HEAPF32[$1 + 388 >> 2];
 $9 = HEAPF32[$1 + 4 >> 2];
 $18 = HEAPF32[$1 + 456 >> 2];
 HEAP32[$0 + 12 >> 2] = 0;
 $19 = $18 != Math_fround(0) ? Math_fround(Math_fround(1) / $18) : Math_fround(0);
 $20 = Math_fround($17 * $19);
 $11 = $14 != Math_fround(0) ? Math_fround(Math_fround(1) / $14) : Math_fround(0);
 $21 = Math_fround($16 * $11);
 $8 = $8 != Math_fround(0) ? Math_fround(Math_fround(1) / $8) : Math_fround(0);
 $23 = Math_fround($3 * $8);
 $14 = Math_fround(Math_fround(Math_fround($9 * $20) + Math_fround($7 * $21)) + Math_fround($6 * $23));
 $22 = Math_fround($19 * $5);
 $24 = Math_fround($11 * $4);
 $25 = Math_fround($8 * $10);
 $18 = Math_fround(Math_fround(Math_fround($9 * $22) + Math_fround($7 * $24)) + Math_fround($6 * $25));
 $29 = Math_fround($15 * $18);
 $26 = Math_fround($19 * $9);
 $27 = Math_fround($11 * $7);
 $28 = Math_fround($8 * $6);
 $9 = Math_fround(Math_fround(Math_fround($9 * $26) + Math_fround($7 * $27)) + Math_fround($6 * $28));
 $8 = Math_fround(Math_fround(Math_fround($22 * $5) + Math_fround($24 * $4)) + Math_fround($25 * $10));
 $19 = Math_fround(Math_fround(Math_fround($22 * $17) + Math_fround($24 * $16)) + Math_fround($25 * $3));
 $24 = Math_fround($12 * $19);
 $6 = Math_fround(Math_fround($29 + Math_fround($13 * $8)) + $24);
 $22 = Math_fround($14 + Math_fround(Math_fround(Math_fround(Math_fround($14 * Math_fround(0)) + Math_fround($29 - Math_fround($13 * $9))) + $6) * $2));
 $11 = Math_fround(Math_fround(Math_fround($26 * $5) + Math_fround($27 * $4)) + Math_fround($28 * $10));
 $25 = Math_fround($15 * $14);
 $5 = Math_fround(Math_fround(Math_fround($20 * $5) + Math_fround($21 * $4)) + Math_fround($23 * $10));
 $4 = Math_fround($13 * $5);
 $10 = Math_fround(Math_fround(Math_fround($20 * $17) + Math_fround($21 * $16)) + Math_fround($23 * $3));
 $7 = Math_fround(Math_fround($25 + $4) + Math_fround($12 * $10));
 $20 = Math_fround($11 + Math_fround(Math_fround($7 + Math_fround($4 + Math_fround(Math_fround($11 * Math_fround(0)) - Math_fround($12 * $8)))) * $2));
 $23 = Math_fround($13 * $11);
 $21 = Math_fround(Math_fround(Math_fround($26 * $17) + Math_fround($27 * $16)) + Math_fround($28 * $3));
 $26 = Math_fround($12 * $21);
 $3 = Math_fround(Math_fround(Math_fround($15 * $9) + $23) + $26);
 $4 = Math_fround($2 * Math_fround(0));
 $16 = Math_fround(Math_fround($6 + Math_fround(Math_fround(Math_fround($12 * $3) - Math_fround($15 * $7)) * $2)) - Math_fround($4 + $6));
 $11 = Math_fround($8 + Math_fround(Math_fround(Math_fround(Math_fround($8 * Math_fround(0)) + Math_fround($12 * $11)) - Math_fround($15 * $5)) * $2));
 $17 = Math_fround(Math_fround($3 + Math_fround(Math_fround(Math_fround($13 * $7) - Math_fround($12 * $6)) * $2)) - Math_fround($4 + $3));
 $14 = Math_fround($9 + Math_fround(Math_fround(Math_fround($13 * $14) + Math_fround(Math_fround($9 * Math_fround(0)) - Math_fround($12 * $18))) * $2));
 $4 = Math_fround(Math_fround($7 + Math_fround(Math_fround(Math_fround($15 * $6) - Math_fround($13 * $3)) * $2)) - Math_fround($4 + $7));
 $5 = Math_fround($5 + Math_fround(Math_fround(Math_fround(Math_fround($5 * Math_fround(0)) + Math_fround(Math_fround($15 * $8) - $23)) - $3) * $2));
 $9 = Math_fround($18 + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($18 * Math_fround(0)) + Math_fround($12 * $9)) - $25) - $7) * $2));
 $18 = Math_fround(Math_fround($22 * Math_fround(Math_fround($20 * $16) - Math_fround($11 * $17))) + Math_fround(Math_fround($14 * Math_fround(Math_fround($11 * $4) - Math_fround($5 * $16))) + Math_fround($9 * Math_fround(Math_fround($5 * $17) - Math_fround($20 * $4)))));
 $7 = Math_fround($19 + Math_fround(Math_fround($3 + Math_fround(Math_fround(Math_fround($19 * Math_fround(0)) + $26) - Math_fround($15 * $10))) * $2));
 $6 = Math_fround($21 + Math_fround(Math_fround(Math_fround(Math_fround($13 * $10) + Math_fround(Math_fround($21 * Math_fround(0)) - $24)) - $6) * $2));
 $8 = Math_fround(Math_fround($20 * $7) - Math_fround($11 * $6));
 $2 = Math_fround($10 + Math_fround(Math_fround(Math_fround($10 * Math_fround(0)) + Math_fround(Math_fround($15 * $19) - Math_fround($13 * $21))) * $2));
 $10 = Math_fround(Math_fround($11 * $2) - Math_fround($5 * $7));
 $5 = Math_fround(Math_fround($5 * $6) - Math_fround($20 * $2));
 $3 = Math_fround(Math_fround($22 * $8) + Math_fround(Math_fround($14 * $10) + Math_fround($9 * $5)));
 $3 = Math_fround(Math_abs($3)) > Math_fround(1.1920928955078125e-7) ? Math_fround(Math_fround(1) / $3) : $3;
 HEAPF32[$0 + 8 >> 2] = Math_fround($12 - Math_fround($18 * $3)) - $12;
 HEAPF32[$0 + 4 >> 2] = Math_fround($13 - Math_fround(Math_fround(Math_fround($22 * Math_fround(Math_fround($7 * $17) - Math_fround($6 * $16))) + Math_fround(Math_fround($14 * Math_fround(Math_fround($2 * $16) - Math_fround($7 * $4))) + Math_fround($9 * Math_fround(Math_fround($6 * $4) - Math_fround($2 * $17))))) * $3)) - $13;
 HEAPF32[$0 >> 2] = Math_fround($15 - Math_fround(Math_fround(Math_fround($4 * $8) + Math_fround(Math_fround($17 * $10) + Math_fround($16 * $5))) * $3)) - $15;
}
function InplaceSolverIslandCallback__processIsland_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 label$1 : {
  label$2 : {
   if (($5 | 0) >= 0) {
    $10 = HEAP32[$0 + 16 >> 2];
    label$4 : {
     if (($10 | 0) >= 1) {
      $7 = HEAP32[$0 + 12 >> 2];
      while (1) {
       $13 = ($6 << 2) + $7 | 0;
       $11 = HEAP32[$13 >> 2];
       $8 = HEAP32[HEAP32[$11 + 28 >> 2] + 208 >> 2];
       if (($8 | 0) <= -1) {
        $8 = HEAP32[HEAP32[$11 + 32 >> 2] + 208 >> 2];
       }
       if (($5 | 0) == ($8 | 0)) {
        break label$4;
       }
       $6 = $6 + 1 | 0;
       if (($6 | 0) < ($10 | 0)) {
        continue;
       }
       break;
      }
     }
     $13 = 0;
    }
    $11 = 0;
    if (($6 | 0) < ($10 | 0)) {
     $12 = HEAP32[$0 + 12 >> 2];
     while (1) {
      $7 = HEAP32[($6 << 2) + $12 >> 2];
      $8 = HEAP32[HEAP32[$7 + 28 >> 2] + 208 >> 2];
      if (($8 | 0) <= -1) {
       $8 = HEAP32[HEAP32[$7 + 32 >> 2] + 208 >> 2];
      }
      $11 = (($5 | 0) == ($8 | 0)) + $11 | 0;
      $6 = $6 + 1 | 0;
      if (($10 | 0) != ($6 | 0)) {
       continue;
      }
      break;
     }
    }
    $6 = HEAP32[$0 + 4 >> 2];
    if (HEAP32[$6 + 80 >> 2] < 2) {
     break label$1;
    }
    if (($2 | 0) < 1) {
     break label$2;
    }
    $5 = HEAP32[$0 + 36 >> 2];
    $6 = HEAP32[$0 + 32 >> 2];
    $7 = 0;
    while (1) {
     $12 = ($7 << 2) + $1 | 0;
     label$12 : {
      if (($5 | 0) != ($6 | 0)) {
       break label$12;
      }
      $9 = $5 ? $5 << 1 : 1;
      if (($5 | 0) >= ($9 | 0)) {
       $6 = $5;
       break label$12;
      }
      $6 = 0;
      $10 = 0;
      if ($9) {
       $10 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($9 << 2, 16);
       $5 = HEAP32[$0 + 32 >> 2];
      }
      if (($5 | 0) >= 1) {
       while (1) {
        $8 = $6 << 2;
        HEAP32[$8 + $10 >> 2] = HEAP32[HEAP32[$0 + 40 >> 2] + $8 >> 2];
        $6 = $6 + 1 | 0;
        if (($6 | 0) != ($5 | 0)) {
         continue;
        }
        break;
       }
      }
      $6 = HEAP32[$0 + 40 >> 2];
      if ($6) {
       if (HEAPU8[$0 + 44 | 0]) {
        btAlignedFreeInternal_28void__29($6);
        $5 = HEAP32[$0 + 32 >> 2];
       }
       HEAP32[$0 + 40 >> 2] = 0;
      }
      $6 = $5;
      HEAP32[$0 + 40 >> 2] = $10;
      HEAP8[$0 + 44 | 0] = 1;
      HEAP32[$0 + 36 >> 2] = $9;
      $5 = $9;
     }
     HEAP32[HEAP32[$0 + 40 >> 2] + ($6 << 2) >> 2] = HEAP32[$12 >> 2];
     $6 = $6 + 1 | 0;
     HEAP32[$0 + 32 >> 2] = $6;
     $7 = $7 + 1 | 0;
     if (($7 | 0) != ($2 | 0)) {
      continue;
     }
     break;
    }
    break label$2;
   }
   $6 = HEAP32[$0 + 8 >> 2];
   Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 12 >> 2]]($6, $1, $2, $3, $4, HEAP32[$0 + 12 >> 2], HEAP32[$0 + 16 >> 2], HEAP32[$0 + 4 >> 2], HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2]));
   return;
  }
  if (($4 | 0) >= 1) {
   $5 = HEAP32[$0 + 56 >> 2];
   $6 = HEAP32[$0 + 52 >> 2];
   $7 = 0;
   while (1) {
    $12 = ($7 << 2) + $3 | 0;
    label$22 : {
     if (($5 | 0) != ($6 | 0)) {
      break label$22;
     }
     $9 = $5 ? $5 << 1 : 1;
     if (($5 | 0) >= ($9 | 0)) {
      $6 = $5;
      break label$22;
     }
     $6 = 0;
     $10 = 0;
     if ($9) {
      $10 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($9 << 2, 16);
      $5 = HEAP32[$0 + 52 >> 2];
     }
     if (($5 | 0) >= 1) {
      while (1) {
       $8 = $6 << 2;
       HEAP32[$8 + $10 >> 2] = HEAP32[HEAP32[$0 + 60 >> 2] + $8 >> 2];
       $6 = $6 + 1 | 0;
       if (($6 | 0) != ($5 | 0)) {
        continue;
       }
       break;
      }
     }
     $6 = HEAP32[$0 + 60 >> 2];
     if ($6) {
      if (HEAPU8[$0 + 64 | 0]) {
       btAlignedFreeInternal_28void__29($6);
       $5 = HEAP32[$0 + 52 >> 2];
      }
      HEAP32[$0 + 60 >> 2] = 0;
     }
     $6 = $5;
     HEAP32[$0 + 60 >> 2] = $10;
     HEAP8[$0 + 64 | 0] = 1;
     HEAP32[$0 + 56 >> 2] = $9;
     $5 = $9;
    }
    HEAP32[HEAP32[$0 + 60 >> 2] + ($6 << 2) >> 2] = HEAP32[$12 >> 2];
    $6 = $6 + 1 | 0;
    HEAP32[$0 + 52 >> 2] = $6;
    $7 = $7 + 1 | 0;
    if (($7 | 0) != ($4 | 0)) {
     continue;
    }
    break;
   }
  }
  label$30 : {
   if (!$11) {
    $6 = HEAP32[$0 + 72 >> 2];
    break label$30;
   }
   $5 = HEAP32[$0 + 76 >> 2];
   $6 = HEAP32[$0 + 72 >> 2];
   $7 = 0;
   while (1) {
    $12 = ($7 << 2) + $13 | 0;
    label$33 : {
     if (($5 | 0) != ($6 | 0)) {
      break label$33;
     }
     $9 = $5 ? $5 << 1 : 1;
     if (($5 | 0) >= ($9 | 0)) {
      $6 = $5;
      break label$33;
     }
     $6 = 0;
     $10 = 0;
     if ($9) {
      $10 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($9 << 2, 16);
      $5 = HEAP32[$0 + 72 >> 2];
     }
     if (($5 | 0) >= 1) {
      while (1) {
       $8 = $6 << 2;
       HEAP32[$8 + $10 >> 2] = HEAP32[HEAP32[$0 + 80 >> 2] + $8 >> 2];
       $6 = $6 + 1 | 0;
       if (($6 | 0) != ($5 | 0)) {
        continue;
       }
       break;
      }
     }
     $6 = HEAP32[$0 + 80 >> 2];
     if ($6) {
      if (HEAPU8[$0 + 84 | 0]) {
       btAlignedFreeInternal_28void__29($6);
       $5 = HEAP32[$0 + 72 >> 2];
      }
      HEAP32[$0 + 80 >> 2] = 0;
     }
     $6 = $5;
     HEAP32[$0 + 80 >> 2] = $10;
     HEAP8[$0 + 84 | 0] = 1;
     HEAP32[$0 + 76 >> 2] = $9;
     $5 = $9;
    }
    HEAP32[HEAP32[$0 + 80 >> 2] + ($6 << 2) >> 2] = HEAP32[$12 >> 2];
    $6 = $6 + 1 | 0;
    HEAP32[$0 + 72 >> 2] = $6;
    $7 = $7 + 1 | 0;
    if (($11 | 0) != ($7 | 0)) {
     continue;
    }
    break;
   }
  }
  if ((HEAP32[$0 + 52 >> 2] + $6 | 0) > HEAP32[HEAP32[$0 + 4 >> 2] + 80 >> 2]) {
   InplaceSolverIslandCallback__processConstraints_28_29($0);
  }
  return;
 }
 $8 = HEAP32[$0 + 8 >> 2];
 Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 12 >> 2]]($8, $1, $2, $3, $4, $13, $11, $6, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2]));
}
function btGeometryUtil__getVerticesFromPlaneEquations_28btAlignedObjectArray_btVector3__20const__2c_20btAlignedObjectArray_btVector3___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = 0, $25 = Math_fround(0), $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 $16 = HEAP32[$0 + 4 >> 2];
 if (($16 | 0) >= 1) {
  while (1) {
   label$3 : {
    $2 = $17;
    $17 = $2 + 1 | 0;
    if (($17 | 0) >= ($16 | 0)) {
     break label$3;
    }
    $3 = HEAP32[$0 + 12 >> 2];
    $18 = $3 + ($2 << 4) | 0;
    $29 = $18;
    $2 = $17;
    while (1) {
     label$5 : {
      $19 = $2 + 1 | 0;
      if (($19 | 0) >= ($16 | 0)) {
       break label$5;
      }
      $20 = ($2 << 4) + $3 | 0;
      $30 = $20;
      $21 = $19;
      while (1) {
       $2 = ($21 << 4) + $3 | 0;
       $5 = HEAPF32[$2 + 4 >> 2];
       $12 = HEAPF32[$20 >> 2];
       $13 = HEAPF32[$20 + 4 >> 2];
       $6 = HEAPF32[$2 >> 2];
       $14 = Math_fround(Math_fround($5 * $12) - Math_fround($13 * $6));
       $7 = HEAPF32[$2 + 8 >> 2];
       $8 = HEAPF32[$20 + 8 >> 2];
       $22 = Math_fround(Math_fround($13 * $7) - Math_fround($8 * $5));
       $23 = Math_fround(Math_fround($8 * $6) - Math_fround($7 * $12));
       label$7 : {
        if (!(Math_fround(Math_fround($14 * $14) + Math_fround(Math_fround($22 * $22) + Math_fround($23 * $23))) > Math_fround(9999999747378752e-20))) {
         break label$7;
        }
        $10 = HEAPF32[$18 + 4 >> 2];
        $11 = HEAPF32[$18 >> 2];
        $25 = Math_fround(Math_fround($6 * $10) - Math_fround($5 * $11));
        $15 = HEAPF32[$18 + 8 >> 2];
        $5 = Math_fround(Math_fround($5 * $15) - Math_fround($7 * $10));
        $6 = Math_fround(Math_fround($7 * $11) - Math_fround($6 * $15));
        if (!(Math_fround(Math_fround($25 * $25) + Math_fround(Math_fround($5 * $5) + Math_fround($6 * $6))) > Math_fround(9999999747378752e-20))) {
         break label$7;
        }
        $7 = Math_fround(Math_fround($13 * $11) - Math_fround($12 * $10));
        $13 = Math_fround(Math_fround($8 * $10) - Math_fround($13 * $15));
        $12 = Math_fround(Math_fround($12 * $15) - Math_fround($8 * $11));
        if (!(Math_fround(Math_fround($7 * $7) + Math_fround(Math_fround($13 * $13) + Math_fround($12 * $12))) > Math_fround(9999999747378752e-20))) {
         break label$7;
        }
        $8 = Math_fround(Math_fround($15 * $14) + Math_fround(Math_fround($10 * $23) + Math_fround($22 * $11)));
        if (!(Math_fround(Math_abs($8)) > Math_fround(9.999999974752427e-7))) {
         break label$7;
        }
        $8 = Math_fround(Math_fround(-1) / $8);
        $10 = HEAPF32[$2 + 12 >> 2];
        $11 = HEAPF32[$29 + 12 >> 2];
        $15 = Math_fround($14 * $11);
        $14 = HEAPF32[$30 + 12 >> 2];
        $7 = Math_fround($8 * Math_fround(Math_fround($7 * $10) + Math_fround($15 + Math_fround($25 * $14))));
        $6 = Math_fround($8 * Math_fround(Math_fround($12 * $10) + Math_fround(Math_fround($23 * $11) + Math_fround($6 * $14))));
        $5 = Math_fround($8 * Math_fround(Math_fround($13 * $10) + Math_fround(Math_fround($22 * $11) + Math_fround($5 * $14))));
        $9 = 0;
        $4 = HEAP32[$0 + 4 >> 2];
        if (($4 | 0) > 0) {
         while (1) {
          $2 = ($9 << 4) + $3 | 0;
          if (!!(Math_fround(Math_fround(HEAPF32[$2 + 12 >> 2] + Math_fround(Math_fround(Math_fround($5 * HEAPF32[$2 >> 2]) + Math_fround($6 * HEAPF32[$2 + 4 >> 2])) + Math_fround($7 * HEAPF32[$2 + 8 >> 2]))) + Math_fround(-.009999999776482582)) > Math_fround(0))) {
           break label$7;
          }
          $9 = $9 + 1 | 0;
          if (($9 | 0) != ($4 | 0)) {
           continue;
          }
          break;
         }
        }
        $4 = HEAP32[$1 + 4 >> 2];
        label$10 : {
         if (($4 | 0) != HEAP32[$1 + 8 >> 2]) {
          break label$10;
         }
         $24 = $4 ? $4 << 1 : 1;
         if (($4 | 0) >= ($24 | 0)) {
          break label$10;
         }
         $2 = 0;
         $26 = 0;
         if ($24) {
          $26 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($24 << 4, 16);
          $4 = HEAP32[$1 + 4 >> 2];
         }
         if (($4 | 0) >= 1) {
          while (1) {
           $3 = $2 << 4;
           $9 = $26 + $3 | 0;
           $3 = HEAP32[$1 + 12 >> 2] + $3 | 0;
           $27 = HEAP32[$3 >> 2];
           $28 = HEAP32[$3 + 4 >> 2];
           HEAP32[$9 >> 2] = $27;
           HEAP32[$9 + 4 >> 2] = $28;
           $27 = HEAP32[$3 + 12 >> 2];
           $28 = HEAP32[$3 + 8 >> 2];
           HEAP32[$9 + 8 >> 2] = $28;
           HEAP32[$9 + 12 >> 2] = $27;
           $2 = $2 + 1 | 0;
           if (($4 | 0) != ($2 | 0)) {
            continue;
           }
           break;
          }
         }
         $2 = HEAP32[$1 + 12 >> 2];
         if ($2) {
          if (HEAPU8[$1 + 16 | 0]) {
           btAlignedFreeInternal_28void__29($2);
          }
          HEAP32[$1 + 12 >> 2] = 0;
         }
         HEAP32[$1 + 12 >> 2] = $26;
         HEAP8[$1 + 16 | 0] = 1;
         HEAP32[$1 + 8 >> 2] = $24;
         $4 = HEAP32[$1 + 4 >> 2];
        }
        $2 = HEAP32[$1 + 12 >> 2] + ($4 << 4) | 0;
        HEAP32[$2 + 12 >> 2] = 0;
        HEAPF32[$2 + 8 >> 2] = $7;
        HEAPF32[$2 + 4 >> 2] = $6;
        HEAPF32[$2 >> 2] = $5;
        HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
       }
       $21 = $21 + 1 | 0;
       if (($21 | 0) == ($16 | 0)) {
        break label$5;
       }
       $3 = HEAP32[$0 + 12 >> 2];
       continue;
      }
     }
     if (($16 | 0) == ($19 | 0)) {
      break label$3;
     }
     $3 = HEAP32[$0 + 12 >> 2];
     $2 = $19;
     continue;
    }
   }
   if (($16 | 0) != ($17 | 0)) {
    continue;
   }
   break;
  }
 }
}
function SphereTriangleDetector__collide_28btVector3_20const__2c_20btVector3__2c_20btVector3__2c_20float__2c_20float__2c_20float_29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = 0, $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0);
 $5 = global$0 - 32 | 0;
 $16 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $16;
 $13 = HEAP32[$0 + 8 >> 2];
 $7 = HEAPF32[$13 + 60 >> 2];
 $12 = Math_fround(HEAPF32[$13 + 76 >> 2] - $7);
 $10 = HEAPF32[$13 - -64 >> 2];
 $9 = Math_fround(HEAPF32[$13 + 96 >> 2] - $10);
 $11 = Math_fround(HEAPF32[$13 + 80 >> 2] - $10);
 $15 = Math_fround(HEAPF32[$13 + 92 >> 2] - $7);
 $14 = Math_fround(Math_fround($12 * $9) - Math_fround($11 * $15));
 $8 = HEAPF32[$13 + 68 >> 2];
 $19 = Math_fround(HEAPF32[$13 + 100 >> 2] - $8);
 $17 = Math_fround($11 * $19);
 $11 = Math_fround(HEAPF32[$13 + 84 >> 2] - $8);
 $9 = Math_fround($17 - Math_fround($11 * $9));
 $12 = Math_fround(Math_fround($11 * $15) - Math_fround($12 * $19));
 $11 = Math_fround(Math_fround($14 * $14) + Math_fround(Math_fround($9 * $9) + Math_fround($12 * $12)));
 label$2 : {
  if (!($11 >= Math_fround(1.4210854715202004e-14))) {
   break label$2;
  }
  $16 = HEAP32[$0 + 4 >> 2];
  $22 = Math_fround(HEAPF32[$16 + 32 >> 2] * HEAPF32[$16 + 16 >> 2]);
  $15 = Math_fround($22 + $6);
  $11 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($11)));
  $17 = Math_fround($9 * $11);
  $9 = HEAPF32[$1 >> 2];
  $20 = Math_fround($12 * $11);
  $12 = HEAPF32[$1 + 4 >> 2];
  $6 = Math_fround(Math_fround($17 * Math_fround($9 - $7)) + Math_fround($20 * Math_fround($12 - $10)));
  $21 = Math_fround($14 * $11);
  $10 = HEAPF32[$1 + 8 >> 2];
  $7 = Math_fround($6 + Math_fround($21 * Math_fround($10 - $8)));
  if (!!($7 < Math_fround(0))) {
   $21 = Math_fround(-$21);
   $20 = Math_fround(-$20);
   $17 = Math_fround(-$17);
   $7 = Math_fround(-$7);
  }
  if (!($7 < $15)) {
   break label$2;
  }
  $16 = HEAP32[$1 + 12 >> 2];
  $23 = HEAP32[$1 + 8 >> 2];
  HEAP32[$5 + 24 >> 2] = $23;
  HEAP32[$5 + 28 >> 2] = $16;
  $23 = HEAP32[$1 + 4 >> 2];
  $16 = HEAP32[$1 >> 2];
  HEAP32[$5 + 16 >> 2] = $16;
  HEAP32[$5 + 20 >> 2] = $23;
  HEAP32[$5 + 12 >> 2] = 0;
  HEAPF32[$5 + 8 >> 2] = $21;
  HEAPF32[$5 + 4 >> 2] = $20;
  HEAPF32[$5 >> 2] = $17;
  label$4 : {
   if (SphereTriangleDetector__pointInTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3__29($5, $13 + 60 | 0, $5, $5 + 16 | 0)) {
    $24 = Math_fround($10 - Math_fround($7 * $21));
    $25 = Math_fround($12 - Math_fround($7 * $20));
    $26 = Math_fround($9 - Math_fround($7 * $17));
    $27 = Math_fround($15 * $15);
    break label$4;
   }
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$13 >> 2] + 100 >> 2]]($13) | 0) < 1) {
    break label$2;
   }
   $27 = Math_fround($15 * $15);
   $16 = 0;
   $13 = 0;
   while (1) {
    $18 = HEAP32[$0 + 8 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$18 >> 2] + 104 >> 2]]($18, $13, $5 + 16 | 0, $5);
    $8 = Math_fround(0);
    $15 = HEAPF32[$5 + 16 >> 2];
    $7 = Math_fround(HEAPF32[$1 >> 2] - $15);
    $9 = Math_fround(HEAPF32[$5 >> 2] - $15);
    $19 = HEAPF32[$5 + 20 >> 2];
    $10 = Math_fround(HEAPF32[$1 + 4 >> 2] - $19);
    $12 = Math_fround(HEAPF32[$5 + 4 >> 2] - $19);
    $6 = HEAPF32[$5 + 24 >> 2];
    $14 = Math_fround(HEAPF32[$1 + 8 >> 2] - $6);
    $11 = Math_fround(HEAPF32[$5 + 8 >> 2] - $6);
    $28 = Math_fround(Math_fround(Math_fround($7 * $9) + Math_fround($10 * $12)) + Math_fround($14 * $11));
    label$7 : {
     if (!($28 > Math_fround(0))) {
      break label$7;
     }
     $8 = Math_fround(Math_fround(Math_fround($9 * $9) + Math_fround($12 * $12)) + Math_fround($11 * $11));
     if (!!($28 < $8)) {
      $8 = Math_fround($28 / $8);
      $14 = Math_fround($14 - Math_fround($11 * $8));
      $10 = Math_fround($10 - Math_fround($12 * $8));
      $7 = Math_fround($7 - Math_fround($9 * $8));
      break label$7;
     }
     $14 = Math_fround($14 - $11);
     $10 = Math_fround($10 - $12);
     $7 = Math_fround($7 - $9);
     $8 = Math_fround(1);
    }
    if (!!(Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($10 * $10)) + Math_fround($14 * $14)) < $27)) {
     $26 = Math_fround($15 + Math_fround($9 * $8));
     $25 = Math_fround($19 + Math_fround($12 * $8));
     $24 = Math_fround($6 + Math_fround($11 * $8));
     $16 = 1;
    }
    $13 = $13 + 1 | 0;
    $18 = HEAP32[$0 + 8 >> 2];
    if (($13 | 0) < (FUNCTION_TABLE[HEAP32[HEAP32[$18 >> 2] + 100 >> 2]]($18) | 0)) {
     continue;
    }
    break;
   }
   $18 = 0;
   if (!($16 & 1)) {
    break label$2;
   }
   $10 = HEAPF32[$1 + 8 >> 2];
   $12 = HEAPF32[$1 + 4 >> 2];
   $9 = HEAPF32[$1 >> 2];
  }
  $7 = Math_fround($9 - $26);
  $14 = Math_fround($12 - $25);
  $10 = Math_fround($10 - $24);
  $8 = Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($14 * $14)) + Math_fround($10 * $10));
  if (!($8 < $27)) {
   break label$2;
  }
  label$10 : {
   if (!!($8 > Math_fround(1.1920928955078125e-7))) {
    HEAP32[$3 + 12 >> 2] = 0;
    $9 = Math_fround(Math_sqrt($8));
    $8 = Math_fround(Math_fround(1) / $9);
    HEAPF32[$3 + 8 >> 2] = $10 * $8;
    HEAPF32[$3 + 4 >> 2] = $14 * $8;
    HEAPF32[$3 >> 2] = $7 * $8;
    $22 = Math_fround($22 - $9);
    break label$10;
   }
   HEAP32[$3 + 12 >> 2] = 0;
   HEAPF32[$3 + 8 >> 2] = $21;
   HEAPF32[$3 + 4 >> 2] = $20;
   HEAPF32[$3 >> 2] = $17;
  }
  HEAP32[$2 + 12 >> 2] = 0;
  HEAPF32[$2 + 8 >> 2] = $24;
  HEAPF32[$2 + 4 >> 2] = $25;
  HEAPF32[$2 >> 2] = $26;
  HEAPF32[$4 >> 2] = -$22;
  $18 = 1;
 }
 $0 = $5 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $18;
}
function btQuantizedBvh__walkStacklessTreeAgainstRay_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20int_29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
 var $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 $6 = global$0 - 32 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 label$2 : {
  if (HEAP32[$0 + 56 >> 2] < 1) {
   break label$2;
  }
  $14 = HEAPF32[$3 >> 2];
  $18 = HEAPF32[$2 >> 2];
  $8 = Math_fround($14 - $18);
  $19 = HEAPF32[$3 + 4 >> 2];
  $15 = HEAPF32[$2 + 4 >> 2];
  $9 = Math_fround($19 - $15);
  $13 = HEAPF32[$3 + 8 >> 2];
  $11 = HEAPF32[$2 + 8 >> 2];
  $10 = Math_fround($13 - $11);
  $22 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($9 * $9)) + Math_fround($10 * $10)))));
  $20 = Math_fround($10 * $22);
  $23 = Math_fround($8 * $22);
  $24 = Math_fround($9 * $22);
  $26 = Math_fround(Math_fround($10 * $20) + Math_fround(Math_fround($8 * $23) + Math_fround($9 * $24)));
  $10 = HEAPF32[$5 + 8 >> 2];
  $27 = Math_fround(($11 < $13 ? $13 : $11) + $10);
  $8 = HEAPF32[$5 + 4 >> 2];
  $28 = Math_fround(($15 < $19 ? $19 : $15) + $8);
  $9 = HEAPF32[$5 >> 2];
  $29 = Math_fround(($18 < $14 ? $14 : $18) + $9);
  $11 = $13 < $11 ? $13 : $11;
  $13 = HEAPF32[$4 + 8 >> 2];
  $22 = Math_fround($11 + $13);
  $11 = HEAPF32[$4 + 4 >> 2];
  $19 = Math_fround(($19 < $15 ? $19 : $15) + $11);
  $15 = $14 < $18 ? $14 : $18;
  $14 = HEAPF32[$4 >> 2];
  $18 = Math_fround($15 + $14);
  $3 = HEAP32[$0 + 96 >> 2];
  $25 = $20 == Math_fround(0) ? Math_fround(0xde0b6b000000000) : Math_fround(Math_fround(1) / $20);
  $16 = $25 < Math_fround(0);
  $30 = ($16 << 4) + $6 | 8;
  $15 = $24 == Math_fround(0) ? Math_fround(0xde0b6b000000000) : Math_fround(Math_fround(1) / $24);
  $21 = $15 < Math_fround(0);
  $31 = ($21 << 4) + $6 | 4;
  $32 = (($16 ^ 1) << 4) + $6 | 8;
  $33 = (($21 ^ 1) << 4) + $6 | 4;
  $20 = $23 == Math_fround(0) ? Math_fround(0xde0b6b000000000) : Math_fround(Math_fround(1) / $23);
  $16 = $20 < Math_fround(0);
  $34 = ($16 << 4) + $6 | 0;
  $35 = (($16 ^ 1) << 4) + $6 | 0;
  $21 = 0;
  $16 = 0;
  while (1) {
   $7 = HEAP32[$3 + 4 >> 2];
   $12 = HEAP32[$3 >> 2];
   HEAP32[$6 >> 2] = $12;
   HEAP32[$6 + 4 >> 2] = $7;
   $12 = HEAP32[$3 + 12 >> 2];
   $7 = HEAP32[$3 + 8 >> 2];
   HEAP32[$6 + 8 >> 2] = $7;
   HEAP32[$6 + 12 >> 2] = $12;
   $36 = $3;
   $17 = $3 + 24 | 0;
   $12 = HEAP32[$17 >> 2];
   $7 = HEAP32[$17 + 4 >> 2];
   HEAP32[$6 + 24 >> 2] = $12;
   HEAP32[$6 + 28 >> 2] = $7;
   $12 = HEAP32[$3 + 20 >> 2];
   $7 = HEAP32[$3 + 16 >> 2];
   HEAP32[$6 + 16 >> 2] = $7;
   HEAP32[$6 + 20 >> 2] = $12;
   HEAPF32[$6 >> 2] = HEAPF32[$6 >> 2] - $9;
   HEAPF32[$6 + 4 >> 2] = HEAPF32[$6 + 4 >> 2] - $8;
   HEAPF32[$6 + 16 >> 2] = HEAPF32[$6 + 16 >> 2] - $14;
   HEAPF32[$6 + 20 >> 2] = HEAPF32[$6 + 20 >> 2] - $11;
   HEAPF32[$6 + 8 >> 2] = HEAPF32[$6 + 8 >> 2] - $10;
   HEAPF32[$6 + 24 >> 2] = HEAPF32[$6 + 24 >> 2] - $13;
   $7 = 0;
   label$4 : {
    if ($18 > HEAPF32[$3 + 16 >> 2]) {
     break label$4;
    }
    $7 = 0;
    if ($29 < HEAPF32[$3 >> 2]) {
     break label$4;
    }
    $7 = 1;
   }
   $12 = 0;
   $12 = $27 < HEAPF32[$3 + 8 >> 2] | $22 > HEAPF32[$36 + 24 >> 2] ? $12 : $7;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       label$10 : {
        if ($28 < HEAPF32[$3 + 4 >> 2] | $19 > HEAPF32[$3 + 20 >> 2] | $12 ^ 1) {
         break label$10;
        }
        $8 = HEAPF32[$2 + 4 >> 2];
        $13 = Math_fround($15 * Math_fround(HEAPF32[$31 >> 2] - $8));
        $9 = HEAPF32[$2 >> 2];
        $10 = Math_fround($20 * Math_fround(HEAPF32[$35 >> 2] - $9));
        if ($13 > $10) {
         break label$10;
        }
        $9 = Math_fround($20 * Math_fround(HEAPF32[$34 >> 2] - $9));
        $8 = Math_fround($15 * Math_fround(HEAPF32[$33 >> 2] - $8));
        if ($9 > $8) {
         break label$10;
        }
        $14 = HEAPF32[$2 + 8 >> 2];
        $11 = Math_fround($25 * Math_fround(HEAPF32[$30 >> 2] - $14));
        $10 = $8 < $10 ? $8 : $10;
        if ($11 > $10) {
         break label$10;
        }
        $8 = $13 > $9 ? $13 : $9;
        $9 = Math_fround($25 * Math_fround(HEAPF32[$32 >> 2] - $14));
        if ($8 > $9) {
         break label$10;
        }
        $12 = HEAP32[$3 + 32 >> 2];
        $17 = ($12 | 0) == -1;
        $7 = ($11 > $8 ? $11 : $8) < $26 & ($9 < $10 ? $9 : $10) > Math_fround(0);
        if (($7 | 0) != 1 | ($12 | 0) != -1) {
         break label$9;
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, HEAP32[$3 + 36 >> 2], HEAP32[$3 + 40 >> 2]);
        break label$8;
       }
       $17 = HEAP32[$3 + 32 >> 2] == -1;
       $7 = 0;
      }
      if ($17) {
       break label$8;
      }
      if (!$7) {
       break label$7;
      }
     }
     $16 = $16 + 1 | 0;
     $3 = $3 - -64 | 0;
     break label$6;
    }
    $17 = HEAP32[$3 + 32 >> 2];
    $16 = $17 + $16 | 0;
    $3 = ($17 << 6) + $3 | 0;
   }
   $21 = $21 + 1 | 0;
   if (($16 | 0) >= HEAP32[$0 + 56 >> 2]) {
    break label$2;
   }
   $13 = HEAPF32[$4 + 8 >> 2];
   $11 = HEAPF32[$4 + 4 >> 2];
   $14 = HEAPF32[$4 >> 2];
   $10 = HEAPF32[$5 + 8 >> 2];
   $8 = HEAPF32[$5 + 4 >> 2];
   $9 = HEAPF32[$5 >> 2];
   continue;
  }
 }
 if (HEAP32[5681] < ($21 | 0)) {
  HEAP32[5681] = $21;
 }
 $0 = $6 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundLeafCallback__ProcessChildShape_28btCollisionShape_20const__2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = 0, $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0);
 $3 = global$0 - 160 | 0;
 $5 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $5 = HEAP32[$0 + 4 >> 2];
 $4 = HEAP32[$5 + 12 >> 2];
 $28 = HEAPF32[$4 + 52 >> 2];
 $29 = HEAPF32[$4 + 56 >> 2];
 $6 = HEAPF32[$4 + 24 >> 2];
 $7 = HEAPF32[$4 + 20 >> 2];
 $8 = HEAPF32[$4 + 40 >> 2];
 $9 = HEAPF32[$4 + 36 >> 2];
 $30 = HEAPF32[$4 + 48 >> 2];
 $10 = HEAPF32[$4 + 8 >> 2];
 $11 = HEAPF32[$4 >> 2];
 $12 = HEAPF32[$4 + 4 >> 2];
 $13 = HEAPF32[$4 + 16 >> 2];
 $14 = HEAPF32[$4 + 32 >> 2];
 $4 = HEAP32[HEAP32[$5 + 4 >> 2] + 28 >> 2] + Math_imul($2, 80) | 0;
 $15 = HEAPF32[$4 + 32 >> 2];
 $16 = HEAPF32[$4 >> 2];
 $17 = HEAPF32[$4 + 16 >> 2];
 $18 = HEAPF32[$4 + 56 >> 2];
 $19 = HEAPF32[$4 + 52 >> 2];
 $20 = HEAPF32[$4 + 48 >> 2];
 $21 = HEAPF32[$4 + 36 >> 2];
 $22 = HEAPF32[$4 + 20 >> 2];
 $23 = HEAPF32[$4 + 4 >> 2];
 $24 = HEAPF32[$4 + 40 >> 2];
 $25 = HEAPF32[$4 + 24 >> 2];
 $26 = HEAPF32[$4 + 8 >> 2];
 HEAP32[$3 + 156 >> 2] = 0;
 HEAP32[$3 + 140 >> 2] = 0;
 HEAP32[$3 + 124 >> 2] = 0;
 HEAPF32[$3 + 136 >> 2] = Math_fround(Math_fround($14 * $26) + Math_fround($9 * $25)) + Math_fround($8 * $24);
 HEAPF32[$3 + 132 >> 2] = Math_fround(Math_fround($14 * $23) + Math_fround($9 * $22)) + Math_fround($8 * $21);
 HEAPF32[$3 + 120 >> 2] = Math_fround(Math_fround($13 * $26) + Math_fround($7 * $25)) + Math_fround($6 * $24);
 HEAPF32[$3 + 116 >> 2] = Math_fround(Math_fround($13 * $23) + Math_fround($7 * $22)) + Math_fround($6 * $21);
 HEAPF32[$3 + 152 >> 2] = $29 + Math_fround(Math_fround(Math_fround($14 * $20) + Math_fround($9 * $19)) + Math_fround($8 * $18));
 HEAPF32[$3 + 148 >> 2] = $28 + Math_fround(Math_fround(Math_fround($13 * $20) + Math_fround($7 * $19)) + Math_fround($6 * $18));
 HEAP32[$3 + 108 >> 2] = 0;
 HEAPF32[$3 + 128 >> 2] = Math_fround(Math_fround($14 * $16) + Math_fround($9 * $17)) + Math_fround($8 * $15);
 HEAPF32[$3 + 112 >> 2] = Math_fround(Math_fround($13 * $16) + Math_fround($7 * $17)) + Math_fround($6 * $15);
 HEAPF32[$3 + 96 >> 2] = Math_fround(Math_fround($11 * $16) + Math_fround($12 * $17)) + Math_fround($10 * $15);
 HEAPF32[$3 + 104 >> 2] = Math_fround(Math_fround($11 * $26) + Math_fround($12 * $25)) + Math_fround($10 * $24);
 HEAPF32[$3 + 100 >> 2] = Math_fround(Math_fround($11 * $23) + Math_fround($12 * $22)) + Math_fround($10 * $21);
 HEAPF32[$3 + 144 >> 2] = $30 + Math_fround(Math_fround(Math_fround($11 * $20) + Math_fround($12 * $19)) + Math_fround($10 * $18));
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $3 + 96 | 0, $3 + 80 | 0, $3 - -64 | 0);
 $6 = HEAPF32[HEAP32[$0 + 20 >> 2] + 32 >> 2];
 HEAPF32[$3 + 80 >> 2] = HEAPF32[$3 + 80 >> 2] - $6;
 HEAPF32[$3 + 84 >> 2] = HEAPF32[$3 + 84 >> 2] - $6;
 HEAPF32[$3 + 88 >> 2] = HEAPF32[$3 + 88 >> 2] - $6;
 HEAPF32[$3 + 64 >> 2] = $6 + HEAPF32[$3 + 64 >> 2];
 HEAPF32[$3 + 68 >> 2] = $6 + HEAPF32[$3 + 68 >> 2];
 HEAPF32[$3 + 72 >> 2] = $6 + HEAPF32[$3 + 72 >> 2];
 $4 = HEAP32[$0 + 8 >> 2];
 $5 = HEAP32[$4 + 4 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, HEAP32[$4 + 12 >> 2], $3 + 48 | 0, $3 + 32 | 0);
 $4 = HEAP32[5647];
 label$2 : {
  if ($4) {
   if (!FUNCTION_TABLE[$4](HEAP32[HEAP32[$0 + 8 >> 2] + 4 >> 2], $1)) {
    break label$2;
   }
  }
  $27 = HEAPF32[$3 + 64 >> 2] < HEAPF32[$3 + 48 >> 2] | HEAPF32[$3 + 80 >> 2] > HEAPF32[$3 + 32 >> 2] ? $27 : 1;
  $4 = 0;
  $4 = HEAPF32[$3 + 72 >> 2] < HEAPF32[$3 + 56 >> 2] | HEAPF32[$3 + 88 >> 2] > HEAPF32[$3 + 40 >> 2] ? $4 : $27;
  if (HEAPF32[$3 + 68 >> 2] < HEAPF32[$3 + 52 >> 2] | HEAPF32[$3 + 84 >> 2] > HEAPF32[$3 + 36 >> 2] | $4 ^ 1) {
   break label$2;
  }
  $4 = HEAP32[$0 + 4 >> 2];
  $5 = HEAP32[$4 + 8 >> 2];
  HEAP32[$3 + 28 >> 2] = $2;
  HEAP32[$3 + 24 >> 2] = -1;
  HEAP32[$3 + 16 >> 2] = $5;
  HEAP32[$3 + 12 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = $4;
  HEAP32[$3 + 20 >> 2] = $3 + 96;
  label$6 : {
   if (!!(HEAPF32[HEAP32[$0 + 20 >> 2] + 32 >> 2] > Math_fround(0))) {
    $4 = HEAP32[$0 + 12 >> 2];
    $1 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $3 + 8 | 0, HEAP32[$0 + 8 >> 2], 0, 2) | 0;
    break label$6;
   }
   $4 = $2 << 2;
   $1 = HEAP32[$4 + HEAP32[$0 + 24 >> 2] >> 2];
   if ($1) {
    break label$6;
   }
   $1 = HEAP32[$0 + 12 >> 2];
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $3 + 8 | 0, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 28 >> 2], 1) | 0;
   HEAP32[HEAP32[$0 + 24 >> 2] + $4 >> 2] = $1;
   $1 = HEAP32[HEAP32[$0 + 24 >> 2] + $4 >> 2];
  }
  $4 = HEAP32[$0 + 20 >> 2];
  $5 = HEAP32[$4 + 8 >> 2];
  label$8 : {
   if (HEAP32[$5 + 8 >> 2] == HEAP32[HEAP32[$0 + 4 >> 2] + 8 >> 2]) {
    HEAP32[$4 + 8 >> 2] = $3 + 8;
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, -1, $2);
    break label$8;
   }
   $5 = HEAP32[$4 + 12 >> 2];
   HEAP32[$4 + 12 >> 2] = $3 + 8;
   FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, -1, $2);
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $3 + 8 | 0, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2]);
  $4 = HEAP32[$0 + 20 >> 2];
  HEAP32[$4 + (HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2] == HEAP32[HEAP32[$0 + 4 >> 2] + 8 >> 2] ? 8 : 12) >> 2] = $5;
 }
 $0 = $3 + 160 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDbvt__collideTVNoStackAlloc_28btDbvtNode_20const__2c_20btDbvtAabbMm_20const__2c_20btAlignedObjectArray_btDbvtNode_20const____2c_20btDbvt__ICollide__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0);
 if ($1) {
  $9 = HEAPF32[$2 + 24 >> 2];
  $10 = HEAPF32[$2 + 20 >> 2];
  $5 = HEAP32[$3 + 8 >> 2];
  $11 = HEAPF32[$2 + 16 >> 2];
  $12 = HEAPF32[$2 + 8 >> 2];
  $13 = HEAPF32[$2 + 4 >> 2];
  $14 = HEAPF32[$2 >> 2];
  $2 = HEAP32[$3 + 4 >> 2];
  if (($2 | 0) <= -1) {
   if (($5 | 0) <= -1) {
    $0 = HEAP32[$3 + 12 >> 2];
    if ($0) {
     if (HEAPU8[$3 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($0);
     }
     HEAP32[$3 + 12 >> 2] = 0;
    }
    HEAP8[$3 + 16 | 0] = 1;
    HEAP32[$3 + 8 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = 0;
    $5 = 0;
   }
   while (1) {
    HEAP32[HEAP32[$3 + 12 >> 2] + ($2 << 2) >> 2] = 0;
    $0 = $2 + 1 | 0;
    $6 = $0 >>> 0 >= $2 >>> 0;
    $2 = $0;
    if ($6) {
     continue;
    }
    break;
   }
  }
  $0 = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  if (($5 | 0) <= 63) {
   $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(256, 16);
   $0 = HEAP32[$3 + 4 >> 2];
   if (($0 | 0) >= 1) {
    $2 = 0;
    while (1) {
     $6 = $2 << 2;
     HEAP32[$7 + $6 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + $6 >> 2];
     $2 = $2 + 1 | 0;
     if (($0 | 0) != ($2 | 0)) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$3 + 12 >> 2];
   if ($2) {
    if (HEAPU8[$3 + 16 | 0]) {
     btAlignedFreeInternal_28void__29($2);
     $0 = HEAP32[$3 + 4 >> 2];
    }
    HEAP32[$3 + 12 >> 2] = 0;
   }
   HEAP32[$3 + 12 >> 2] = $7;
   HEAP8[$3 + 16 | 0] = 1;
   HEAP32[$3 + 8 >> 2] = 64;
   $5 = 64;
  }
  label$12 : {
   if (($0 | 0) != ($5 | 0)) {
    break label$12;
   }
   $8 = $5 << 1;
   if (($5 | 0) >= ($8 | 0)) {
    $0 = $5;
    break label$12;
   }
   $2 = 0;
   label$14 : {
    label$15 : {
     if (!$5) {
      $7 = 0;
      $0 = $5;
      break label$15;
     }
     $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 3, 16);
     $0 = HEAP32[$3 + 4 >> 2];
     if (($0 | 0) < 1) {
      break label$14;
     }
    }
    while (1) {
     $6 = $2 << 2;
     HEAP32[$7 + $6 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + $6 >> 2];
     $2 = $2 + 1 | 0;
     if (($0 | 0) != ($2 | 0)) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$3 + 12 >> 2];
   if ($2) {
    if (HEAPU8[$3 + 16 | 0]) {
     btAlignedFreeInternal_28void__29($2);
     $0 = HEAP32[$3 + 4 >> 2];
    }
    HEAP32[$3 + 12 >> 2] = 0;
   }
   HEAP32[$3 + 12 >> 2] = $7;
   HEAP8[$3 + 16 | 0] = 1;
   HEAP32[$3 + 8 >> 2] = $8;
  }
  HEAP32[HEAP32[$3 + 12 >> 2] + ($0 << 2) >> 2] = $1;
  $0 = $0 + 1 | 0;
  HEAP32[$3 + 4 >> 2] = $0;
  while (1) {
   $7 = HEAP32[$3 + 12 >> 2];
   $2 = $0 + -1 | 0;
   $6 = HEAP32[$7 + ($2 << 2) >> 2];
   HEAP32[$3 + 4 >> 2] = $2;
   label$21 : {
    if (!(HEAPF32[$6 >> 2] <= $11)) {
     $0 = $2;
     break label$21;
    }
    if (!(HEAPF32[$6 + 16 >> 2] >= $14)) {
     $0 = $2;
     break label$21;
    }
    if (!(HEAPF32[$6 + 4 >> 2] <= $10)) {
     $0 = $2;
     break label$21;
    }
    if (!(HEAPF32[$6 + 20 >> 2] >= $13)) {
     $0 = $2;
     break label$21;
    }
    if (!(HEAPF32[$6 + 8 >> 2] <= $9)) {
     $0 = $2;
     break label$21;
    }
    if (!(HEAPF32[$6 + 24 >> 2] >= $12)) {
     $0 = $2;
     break label$21;
    }
    if (HEAP32[$6 + 40 >> 2]) {
     $5 = HEAP32[$3 + 8 >> 2];
     label$29 : {
      if (($5 | 0) != ($2 | 0)) {
       break label$29;
      }
      $5 = $2 ? $2 << 1 : 1;
      if (($0 | 0) > ($5 | 0)) {
       $5 = $2;
       break label$29;
      }
      $0 = 0;
      $7 = 0;
      if ($5) {
       $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 2, 16);
       $2 = HEAP32[$3 + 4 >> 2];
      }
      if (($2 | 0) >= 1) {
       while (1) {
        $1 = $0 << 2;
        HEAP32[$7 + $1 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + $1 >> 2];
        $0 = $0 + 1 | 0;
        if (($0 | 0) != ($2 | 0)) {
         continue;
        }
        break;
       }
      }
      $0 = HEAP32[$3 + 12 >> 2];
      if ($0) {
       if (HEAPU8[$3 + 16 | 0]) {
        btAlignedFreeInternal_28void__29($0);
        $2 = HEAP32[$3 + 4 >> 2];
       }
       HEAP32[$3 + 12 >> 2] = 0;
      }
      HEAP32[$3 + 12 >> 2] = $7;
      HEAP8[$3 + 16 | 0] = 1;
      HEAP32[$3 + 8 >> 2] = $5;
     }
     HEAP32[($2 << 2) + $7 >> 2] = HEAP32[$6 + 36 >> 2];
     $2 = $2 + 1 | 0;
     HEAP32[$3 + 4 >> 2] = $2;
     if (($2 | 0) == ($5 | 0)) {
      $1 = $5 ? $5 << 1 : 1;
      if (($5 | 0) < ($1 | 0)) {
       $2 = 0;
       $7 = 0;
       if ($1) {
        $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 2, 16);
        $5 = HEAP32[$3 + 4 >> 2];
       }
       if (($5 | 0) >= 1) {
        while (1) {
         $0 = $2 << 2;
         HEAP32[$7 + $0 >> 2] = HEAP32[HEAP32[$3 + 12 >> 2] + $0 >> 2];
         $2 = $2 + 1 | 0;
         if (($5 | 0) != ($2 | 0)) {
          continue;
         }
         break;
        }
       }
       $2 = HEAP32[$3 + 12 >> 2];
       if ($2) {
        if (HEAPU8[$3 + 16 | 0]) {
         btAlignedFreeInternal_28void__29($2);
         $5 = HEAP32[$3 + 4 >> 2];
        }
        HEAP32[$3 + 12 >> 2] = 0;
       }
       HEAP32[$3 + 12 >> 2] = $7;
       HEAP8[$3 + 16 | 0] = 1;
       HEAP32[$3 + 8 >> 2] = $1;
      }
      $2 = $5;
     }
     HEAP32[HEAP32[$3 + 12 >> 2] + ($2 << 2) >> 2] = HEAP32[$6 + 40 >> 2];
     $0 = $2 + 1 | 0;
     HEAP32[$3 + 4 >> 2] = $0;
     break label$21;
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, $6);
    $0 = HEAP32[$3 + 4 >> 2];
   }
   if (($0 | 0) > 0) {
    continue;
   }
   break;
  }
 }
}
function btSequentialImpulseConstraintSolver__initSolverBody_28btSolverBody__2c_20btCollisionObject__2c_20float_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0);
 $2 = $2 ? HEAP32[$2 + 252 >> 2] << 30 >> 31 & $2 : 0;
 $0 = $1;
 HEAP32[$0 + 64 >> 2] = 0;
 HEAP32[$0 + 68 >> 2] = 0;
 HEAP32[$0 + 144 >> 2] = 0;
 HEAP32[$0 + 148 >> 2] = 0;
 HEAP32[$0 + 88 >> 2] = 0;
 HEAP32[$0 + 92 >> 2] = 0;
 HEAP32[$0 + 80 >> 2] = 0;
 HEAP32[$0 + 84 >> 2] = 0;
 HEAP32[$0 + 72 >> 2] = 0;
 HEAP32[$0 + 76 >> 2] = 0;
 HEAP32[$0 + 152 >> 2] = 0;
 HEAP32[$0 + 156 >> 2] = 0;
 HEAP32[$0 + 160 >> 2] = 0;
 HEAP32[$0 + 164 >> 2] = 0;
 HEAP32[$0 + 168 >> 2] = 0;
 HEAP32[$0 + 172 >> 2] = 0;
 label$3 : {
  if ($2) {
   $0 = HEAP32[$2 + 8 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 >> 2] = $4;
   HEAP32[$1 + 4 >> 2] = $0;
   $4 = HEAP32[$2 + 16 >> 2];
   $0 = HEAP32[$2 + 12 >> 2];
   $5 = $0;
   $0 = $1;
   HEAP32[$0 + 8 >> 2] = $5;
   HEAP32[$0 + 12 >> 2] = $4;
   $0 = HEAP32[$2 + 32 >> 2];
   $4 = HEAP32[$2 + 28 >> 2];
   HEAP32[$1 + 24 >> 2] = $4;
   HEAP32[$1 + 28 >> 2] = $0;
   $4 = HEAP32[$2 + 24 >> 2];
   $0 = HEAP32[$2 + 20 >> 2];
   $5 = $0;
   $0 = $1;
   HEAP32[$0 + 16 >> 2] = $5;
   HEAP32[$0 + 20 >> 2] = $4;
   $0 = HEAP32[$2 + 48 >> 2];
   $4 = HEAP32[$2 + 44 >> 2];
   HEAP32[$1 + 40 >> 2] = $4;
   HEAP32[$1 + 44 >> 2] = $0;
   $4 = HEAP32[$2 + 40 >> 2];
   $0 = HEAP32[$2 + 36 >> 2];
   $5 = $0;
   $0 = $1;
   HEAP32[$0 + 32 >> 2] = $5;
   HEAP32[$0 + 36 >> 2] = $4;
   $0 = HEAP32[$2 + 64 >> 2];
   $4 = HEAP32[$2 + 60 >> 2];
   HEAP32[$1 + 56 >> 2] = $4;
   HEAP32[$1 + 60 >> 2] = $0;
   $4 = HEAP32[$2 + 56 >> 2];
   $0 = HEAP32[$2 + 52 >> 2];
   $5 = $0;
   $0 = $1;
   HEAP32[$0 + 48 >> 2] = $5;
   HEAP32[$0 + 52 >> 2] = $4;
   $7 = HEAPF32[$2 + 412 >> 2];
   $8 = HEAPF32[$2 + 416 >> 2];
   $9 = HEAPF32[$2 + 408 >> 2];
   $6 = HEAPF32[$2 + 404 >> 2];
   HEAP32[$0 + 240 >> 2] = $2;
   HEAP32[$0 + 140 >> 2] = 0;
   HEAPF32[$0 + 136 >> 2] = $6 * $8;
   HEAPF32[$0 + 132 >> 2] = $6 * $7;
   HEAPF32[$0 + 128 >> 2] = $6 * $9;
   $0 = HEAP32[$2 + 616 >> 2];
   $4 = HEAP32[$2 + 612 >> 2];
   HEAP32[$1 + 104 >> 2] = $4;
   HEAP32[$1 + 108 >> 2] = $0;
   $4 = HEAP32[$2 + 608 >> 2];
   $0 = HEAP32[$2 + 604 >> 2];
   $5 = $0;
   $0 = $1;
   HEAP32[$0 + 96 >> 2] = $5;
   HEAP32[$0 + 100 >> 2] = $4;
   $0 = HEAP32[$2 + 420 >> 2];
   $4 = HEAP32[$2 + 416 >> 2];
   HEAP32[$1 + 120 >> 2] = $4;
   HEAP32[$1 + 124 >> 2] = $0;
   $4 = HEAP32[$2 + 412 >> 2];
   $0 = HEAP32[$2 + 408 >> 2];
   $5 = $0;
   $0 = $1;
   HEAP32[$0 + 112 >> 2] = $5;
   HEAP32[$0 + 116 >> 2] = $4;
   $0 = HEAP32[$2 + 384 >> 2];
   $4 = HEAP32[$2 + 380 >> 2];
   HEAP32[$1 + 184 >> 2] = $4;
   HEAP32[$1 + 188 >> 2] = $0;
   $4 = HEAP32[$2 + 376 >> 2];
   $0 = HEAP32[$2 + 372 >> 2];
   $5 = $0;
   $0 = $1;
   HEAP32[$0 + 176 >> 2] = $5;
   HEAP32[$0 + 180 >> 2] = $4;
   $0 = HEAP32[$2 + 400 >> 2];
   $4 = HEAP32[$2 + 396 >> 2];
   HEAP32[$1 + 200 >> 2] = $4;
   HEAP32[$1 + 204 >> 2] = $0;
   $4 = HEAP32[$2 + 392 >> 2];
   $0 = HEAP32[$2 + 388 >> 2];
   $5 = $0;
   $0 = $1;
   HEAP32[$0 + 192 >> 2] = $5;
   HEAP32[$0 + 196 >> 2] = $4;
   $7 = HEAPF32[$2 + 476 >> 2];
   $8 = HEAPF32[$2 + 480 >> 2];
   $9 = HEAPF32[$2 + 472 >> 2];
   $6 = HEAPF32[$2 + 404 >> 2];
   HEAP32[$0 + 220 >> 2] = 0;
   HEAPF32[$0 + 216 >> 2] = Math_fround($6 * $8) * $3;
   HEAPF32[$0 + 212 >> 2] = Math_fround($6 * $7) * $3;
   HEAPF32[$0 + 208 >> 2] = Math_fround($6 * $9) * $3;
   $9 = HEAPF32[$2 + 340 >> 2];
   $10 = HEAPF32[$2 + 356 >> 2];
   $11 = HEAPF32[$2 + 328 >> 2];
   $12 = HEAPF32[$2 + 344 >> 2];
   $13 = HEAPF32[$2 + 360 >> 2];
   $14 = HEAPF32[$2 + 324 >> 2];
   $6 = HEAPF32[$2 + 488 >> 2];
   $7 = HEAPF32[$2 + 492 >> 2];
   $8 = HEAPF32[$2 + 496 >> 2];
   HEAPF32[$0 + 232 >> 2] = Math_fround(Math_fround(Math_fround($6 * HEAPF32[$2 + 332 >> 2]) + Math_fround($7 * HEAPF32[$2 + 348 >> 2])) + Math_fround($8 * HEAPF32[$2 + 364 >> 2])) * $3;
   HEAPF32[$0 + 228 >> 2] = Math_fround(Math_fround(Math_fround($6 * $11) + Math_fround($7 * $12)) + Math_fround($8 * $13)) * $3;
   HEAPF32[$0 + 224 >> 2] = Math_fround(Math_fround(Math_fround($14 * $6) + Math_fround($9 * $7)) + Math_fround($10 * $8)) * $3;
   break label$3;
  }
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 >> 2] = 1065353216;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 240 >> 2] = 0;
  HEAP32[$0 + 128 >> 2] = 0;
  HEAP32[$0 + 132 >> 2] = 0;
  HEAP32[$0 + 112 >> 2] = 1065353216;
  HEAP32[$0 + 116 >> 2] = 1065353216;
  HEAP32[$0 + 96 >> 2] = 1065353216;
  HEAP32[$0 + 100 >> 2] = 1065353216;
  HEAP32[$0 + 176 >> 2] = 0;
  HEAP32[$0 + 180 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 1065353216;
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 1065353216;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 0;
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 120 >> 2] = 1065353216;
  HEAP32[$0 + 124 >> 2] = 0;
  HEAP32[$0 + 104 >> 2] = 1065353216;
  HEAP32[$0 + 108 >> 2] = 0;
  HEAP32[$0 + 232 >> 2] = 0;
  HEAP32[$0 + 224 >> 2] = 0;
  HEAP32[$0 + 228 >> 2] = 0;
  HEAP32[$0 + 216 >> 2] = 0;
  HEAP32[$0 + 220 >> 2] = 0;
  HEAP32[$0 + 208 >> 2] = 0;
  HEAP32[$0 + 212 >> 2] = 0;
  HEAP32[$0 + 200 >> 2] = 0;
  HEAP32[$0 + 204 >> 2] = 0;
  HEAP32[$0 + 192 >> 2] = 0;
  HEAP32[$0 + 196 >> 2] = 0;
  HEAP32[$0 + 184 >> 2] = 0;
  HEAP32[$0 + 188 >> 2] = 0;
 }
 HEAP32[$1 + 236 >> 2] = 0;
}
function btGeometryUtil__getPlaneEquationsFromVertices_28btAlignedObjectArray_btVector3___2c_20btAlignedObjectArray_btVector3___29($0, $1) {
 var $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = Math_fround(0), $18 = 0, $19 = 0, $20 = Math_fround(0), $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = Math_fround(0), $26 = 0;
 $10 = HEAP32[$0 + 4 >> 2];
 if (($10 | 0) >= 1) {
  while (1) {
   label$3 : {
    $3 = $14;
    $14 = $3 + 1 | 0;
    if (($14 | 0) >= ($10 | 0)) {
     break label$3;
    }
    $2 = HEAP32[$0 + 12 >> 2];
    $12 = $2 + ($3 << 4) | 0;
    $23 = $12;
    $3 = $14;
    while (1) {
     label$5 : {
      $15 = $3 + 1 | 0;
      if (($15 | 0) >= ($10 | 0)) {
       break label$5;
      }
      $19 = ($3 << 4) + $2 | 0;
      $24 = $19;
      $16 = $15;
      while (1) {
       $4 = HEAPF32[$12 >> 2];
       $6 = Math_fround(HEAPF32[$19 >> 2] - $4);
       $2 = ($16 << 4) + $2 | 0;
       $5 = HEAPF32[$12 + 4 >> 2];
       $7 = Math_fround(HEAPF32[$2 + 4 >> 2] - $5);
       $5 = Math_fround(HEAPF32[$19 + 4 >> 2] - $5);
       $4 = Math_fround(HEAPF32[$2 >> 2] - $4);
       $25 = Math_fround(Math_fround($6 * $7) - Math_fround($5 * $4));
       $11 = HEAPF32[$23 + 8 >> 2];
       $17 = Math_fround(HEAPF32[$24 + 8 >> 2] - $11);
       $20 = Math_fround($17 * $4);
       $4 = Math_fround(HEAPF32[$2 + 8 >> 2] - $11);
       $20 = Math_fround($20 - Math_fround($6 * $4));
       $17 = Math_fround(Math_fround($5 * $4) - Math_fround($17 * $7));
       $4 = Math_fround(1);
       $2 = 0;
       while (1) {
        $26 = $2;
        $6 = Math_fround($25 * $4);
        $5 = Math_fround($17 * $4);
        $7 = Math_fround($20 * $4);
        $4 = Math_fround(Math_fround($6 * $6) + Math_fround(Math_fround($5 * $5) + Math_fround($7 * $7)));
        label$8 : {
         if (!($4 > Math_fround(9999999747378752e-20))) {
          break label$8;
         }
         $11 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($4)));
         $4 = Math_fround($6 * $11);
         $6 = Math_fround($7 * $11);
         $5 = Math_fround($5 * $11);
         $8 = HEAP32[$1 + 4 >> 2];
         if (($8 | 0) >= 1) {
          $9 = HEAP32[$1 + 12 >> 2];
          $3 = 0;
          while (1) {
           $2 = ($3 << 4) + $9 | 0;
           if (!!(Math_fround(Math_fround(Math_fround($5 * HEAPF32[$2 >> 2]) + Math_fround($6 * HEAPF32[$2 + 4 >> 2])) + Math_fround($4 * HEAPF32[$2 + 8 >> 2])) > Math_fround(.9990000128746033))) {
            break label$8;
           }
           $3 = $3 + 1 | 0;
           if (($8 | 0) != ($3 | 0)) {
            continue;
           }
           break;
          }
         }
         $7 = Math_fround(Math_fround(Math_fround($5 * HEAPF32[$12 >> 2]) + Math_fround($6 * HEAPF32[$12 + 4 >> 2])) + Math_fround($4 * HEAPF32[$23 + 8 >> 2]));
         $9 = HEAP32[$0 + 4 >> 2];
         if (($9 | 0) >= 1) {
          $13 = HEAP32[$0 + 12 >> 2];
          $3 = 0;
          while (1) {
           $2 = ($3 << 4) + $13 | 0;
           if (!!(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($5 * HEAPF32[$2 >> 2]) + Math_fround($6 * HEAPF32[$2 + 4 >> 2])) + Math_fround($4 * HEAPF32[$2 + 8 >> 2])) - $7) + Math_fround(-.009999999776482582)) > Math_fround(0))) {
            break label$8;
           }
           $3 = $3 + 1 | 0;
           if (($9 | 0) != ($3 | 0)) {
            continue;
           }
           break;
          }
         }
         $7 = Math_fround(-$7);
         label$13 : {
          if (HEAP32[$1 + 8 >> 2] != ($8 | 0)) {
           break label$13;
          }
          $18 = $8 ? $8 << 1 : 1;
          if (($8 | 0) >= ($18 | 0)) {
           break label$13;
          }
          $2 = 0;
          $13 = 0;
          if ($18) {
           $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($18 << 4, 16);
           $8 = HEAP32[$1 + 4 >> 2];
          }
          if (($8 | 0) >= 1) {
           while (1) {
            $3 = $2 << 4;
            $9 = $13 + $3 | 0;
            $3 = HEAP32[$1 + 12 >> 2] + $3 | 0;
            $21 = HEAP32[$3 >> 2];
            $22 = HEAP32[$3 + 4 >> 2];
            HEAP32[$9 >> 2] = $21;
            HEAP32[$9 + 4 >> 2] = $22;
            $21 = HEAP32[$3 + 12 >> 2];
            $22 = HEAP32[$3 + 8 >> 2];
            HEAP32[$9 + 8 >> 2] = $22;
            HEAP32[$9 + 12 >> 2] = $21;
            $2 = $2 + 1 | 0;
            if (($8 | 0) != ($2 | 0)) {
             continue;
            }
            break;
           }
          }
          $2 = HEAP32[$1 + 12 >> 2];
          if ($2) {
           if (HEAPU8[$1 + 16 | 0]) {
            btAlignedFreeInternal_28void__29($2);
           }
           HEAP32[$1 + 12 >> 2] = 0;
          }
          HEAP32[$1 + 12 >> 2] = $13;
          HEAP8[$1 + 16 | 0] = 1;
          HEAP32[$1 + 8 >> 2] = $18;
          $8 = HEAP32[$1 + 4 >> 2];
         }
         $2 = HEAP32[$1 + 12 >> 2] + ($8 << 4) | 0;
         HEAPF32[$2 + 12 >> 2] = $7;
         HEAPF32[$2 + 8 >> 2] = $4;
         HEAPF32[$2 + 4 >> 2] = $6;
         HEAPF32[$2 >> 2] = $5;
         HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
        }
        $4 = Math_fround(-1);
        $2 = 1;
        if (!$26) {
         continue;
        }
        break;
       }
       $16 = $16 + 1 | 0;
       if (($16 | 0) == ($10 | 0)) {
        break label$5;
       }
       $2 = HEAP32[$0 + 12 >> 2];
       continue;
      }
     }
     if (($10 | 0) == ($15 | 0)) {
      break label$3;
     }
     $2 = HEAP32[$0 + 12 >> 2];
     $3 = $15;
     continue;
    }
   }
   if (($10 | 0) != ($14 | 0)) {
    continue;
   }
   break;
  }
 }
}
function btDbvt__rayTest_28btDbvtNode_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btDbvt__ICollide__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = Math_fround(0), $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 $7 = global$0 - 544 | 0;
 $4 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 label$2 : {
  if (!$0) {
   break label$2;
  }
  $6 = HEAPF32[$1 + 8 >> 2];
  $8 = HEAPF32[$2 + 8 >> 2];
  $10 = HEAPF32[$1 >> 2];
  $11 = HEAPF32[$2 >> 2];
  $14 = HEAPF32[$1 + 4 >> 2];
  $9 = HEAPF32[$2 + 4 >> 2];
  HEAP32[$7 + 32 >> 2] = $0;
  $6 = Math_fround($8 - $6);
  $16 = $6;
  $8 = Math_fround($11 - $10);
  $11 = Math_fround($9 - $14);
  $9 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($11 * $11)) + Math_fround($6 * $6)))));
  $6 = Math_fround($6 * $9);
  $15 = Math_fround($8 * $9);
  $18 = Math_fround($8 * $15);
  $8 = Math_fround($11 * $9);
  $25 = Math_fround(Math_fround($16 * $6) + Math_fround($18 + Math_fround($11 * $8)));
  $16 = $6 == Math_fround(0) ? Math_fround(0xde0b6b000000000) : Math_fround(Math_fround(1) / $6);
  $2 = $16 < Math_fround(0);
  $26 = ($2 << 4) + $7 | 8;
  $8 = $8 == Math_fround(0) ? Math_fround(0xde0b6b000000000) : Math_fround(Math_fround(1) / $8);
  $0 = $8 < Math_fround(0);
  $27 = ($0 << 4) + $7 | 4;
  $28 = (($2 ^ 1) << 4) + $7 | 8;
  $29 = (($0 ^ 1) << 4) + $7 | 4;
  $11 = $15 == Math_fround(0) ? Math_fround(0xde0b6b000000000) : Math_fround(Math_fround(1) / $15);
  $2 = $11 < Math_fround(0);
  $30 = ($2 << 4) + $7 | 0;
  $31 = (($2 ^ 1) << 4) + $7 | 0;
  $23 = $7 + 16 | 0;
  $17 = 126;
  $21 = 128;
  $13 = $7 + 32 | 0;
  $12 = 128;
  $19 = 1;
  while (1) {
   $0 = $19 + -1 | 0;
   $24 = $0 << 2;
   $2 = HEAP32[$24 + $13 >> 2];
   $4 = HEAP32[$2 >> 2];
   $5 = HEAP32[$2 + 4 >> 2];
   HEAP32[$7 >> 2] = $4;
   HEAP32[$7 + 4 >> 2] = $5;
   $4 = HEAP32[$2 + 12 >> 2];
   $5 = HEAP32[$2 + 8 >> 2];
   HEAP32[$7 + 8 >> 2] = $5;
   HEAP32[$7 + 12 >> 2] = $4;
   $5 = HEAP32[$2 + 28 >> 2];
   $4 = HEAP32[$2 + 24 >> 2];
   $22 = $4;
   $4 = $23;
   HEAP32[$4 + 8 >> 2] = $22;
   HEAP32[$4 + 12 >> 2] = $5;
   $4 = HEAP32[$2 + 20 >> 2];
   $5 = HEAP32[$2 + 16 >> 2];
   $22 = $5;
   $5 = $23;
   HEAP32[$5 >> 2] = $22;
   HEAP32[$5 + 4 >> 2] = $4;
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$10 : {
         label$11 : {
          $9 = Math_fround($8 * Math_fround(HEAPF32[$27 >> 2] - $14));
          $6 = Math_fround($11 * Math_fround(HEAPF32[$31 >> 2] - $10));
          label$12 : {
           if ($9 > $6) {
            break label$12;
           }
           $15 = Math_fround($11 * Math_fround(HEAPF32[$30 >> 2] - $10));
           $10 = Math_fround($8 * Math_fround(HEAPF32[$29 >> 2] - $14));
           if ($15 > $10) {
            break label$12;
           }
           $18 = HEAPF32[$1 + 8 >> 2];
           $14 = Math_fround($16 * Math_fround(HEAPF32[$26 >> 2] - $18));
           $6 = $10 < $6 ? $10 : $6;
           if ($14 > $6) {
            break label$12;
           }
           $10 = $9 > $15 ? $9 : $15;
           $9 = Math_fround($16 * Math_fround(HEAPF32[$28 >> 2] - $18));
           if ($10 > $9 | ($14 > $10 ? $14 : $10) < $25 ^ 1 | ($9 < $6 ? $9 : $6) > Math_fround(0) ^ 1) {
            break label$12;
           }
           if (HEAP32[$2 + 40 >> 2]) {
            if (($0 | 0) <= ($17 | 0)) {
             $4 = $13;
             $5 = $12;
             break label$5;
            }
            $5 = $12 << 1;
            if (($12 | 0) >= ($5 | 0)) {
             $4 = $13;
             break label$6;
            }
            if (($21 | 0) >= ($5 | 0)) {
             $4 = $13;
             break label$7;
            }
            if (!$12) {
             $4 = 0;
             break label$11;
            }
            $0 = 0;
            $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($12 << 3, 16);
            if (($12 | 0) < 1) {
             break label$11;
            }
            while (1) {
             $17 = $0 << 2;
             HEAP32[$17 + $4 >> 2] = HEAP32[$13 + $17 >> 2];
             $0 = $0 + 1 | 0;
             if (($12 | 0) != ($0 | 0)) {
              continue;
             }
             break;
            }
            if (!$20) {
             break label$8;
            }
            break label$10;
           }
           FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($3, $2);
          }
          $4 = $13;
          $5 = $12;
          break label$4;
         }
         $0 = $20;
         $20 = 1;
         if (!$0) {
          break label$8;
         }
         $21 = $5;
         if (!$13) {
          break label$7;
         }
        }
        btAlignedFreeInternal_28void__29($13);
       }
       $20 = 1;
       $21 = $5;
      }
      $0 = $12 << 2;
      memset($4 + $0 | 0, 0, $0);
     }
     $17 = $5 + -2 | 0;
    }
    HEAP32[$4 + $24 >> 2] = HEAP32[$2 + 36 >> 2];
    HEAP32[($19 << 2) + $4 >> 2] = HEAP32[$2 + 40 >> 2];
    $0 = $19 + 1 | 0;
   }
   if ($0) {
    $14 = HEAPF32[$1 + 4 >> 2];
    $10 = HEAPF32[$1 >> 2];
    $13 = $4;
    $12 = $5;
    $19 = $0;
    continue;
   }
   break;
  }
  if (!$20 | !$4) {
   break label$2;
  }
  btAlignedFreeInternal_28void__29($4);
 }
 $0 = $7 + 544 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btOptimizedBvh__build_28btStridingMeshInterface__2c_20bool_2c_20btVector3_20const__2c_20btVector3_20const__29__NodeTriangleCallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = 0, $28 = 0;
 $19 = global$0 - 32 | 0;
 $4 = $19;
 if ($19 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $13 = HEAPF32[$1 + 44 >> 2];
 $10 = HEAPF32[$1 + 28 >> 2];
 $11 = HEAPF32[$1 + 12 >> 2];
 $12 = $11 > Math_fround(0) ? $11 : Math_fround(0);
 $12 = $12 < $10 ? $10 : $12;
 $25 = $12 < $13 ? $13 : $12;
 $11 = $11 < Math_fround(0) ? $11 : Math_fround(0);
 $10 = $10 < $11 ? $10 : $11;
 $26 = $13 < $10 ? $13 : $10;
 $8 = HEAP32[$1 + 40 >> 2];
 $5 = HEAP32[$1 + 24 >> 2];
 $7 = HEAP32[$1 + 8 >> 2];
 $11 = HEAPF32[$1 + 8 >> 2];
 $9 = $11 > Math_fround(-0xde0b6b000000000) ? $7 : -581039253;
 $10 = HEAPF32[$1 + 24 >> 2];
 $9 = $10 > (wasm2js_scratch_store_i32(0, $9), wasm2js_scratch_load_f32()) ? $5 : $9;
 $13 = HEAPF32[$1 + 40 >> 2];
 $27 = $13 > (wasm2js_scratch_store_i32(0, $9), wasm2js_scratch_load_f32()) ? $8 : $9;
 $9 = HEAP32[$1 + 36 >> 2];
 $17 = HEAP32[$1 + 20 >> 2];
 $18 = HEAP32[$1 + 4 >> 2];
 $20 = HEAPF32[$1 + 4 >> 2];
 $14 = $20 > Math_fround(-0xde0b6b000000000) ? $18 : -581039253;
 $21 = HEAPF32[$1 + 20 >> 2];
 $14 = $21 > (wasm2js_scratch_store_i32(0, $14), wasm2js_scratch_load_f32()) ? $17 : $14;
 $12 = HEAPF32[$1 + 36 >> 2];
 $14 = $12 > (wasm2js_scratch_store_i32(0, $14), wasm2js_scratch_load_f32()) ? $9 : $14;
 $22 = HEAPF32[$1 + 32 >> 2];
 $23 = HEAPF32[$1 + 16 >> 2];
 $24 = HEAPF32[$1 >> 2];
 $15 = HEAP32[$1 + 32 >> 2];
 $4 = HEAP32[$1 + 16 >> 2];
 $1 = HEAP32[$1 >> 2];
 $16 = $24 > Math_fround(-0xde0b6b000000000) ? $1 : -581039253;
 $16 = $23 > (wasm2js_scratch_store_i32(0, $16), wasm2js_scratch_load_f32()) ? $4 : $16;
 $16 = $22 > (wasm2js_scratch_store_i32(0, $16), wasm2js_scratch_load_f32()) ? $15 : $16;
 $7 = $11 < Math_fround(0xde0b6b000000000) ? $7 : 1566444395;
 $5 = $10 < (wasm2js_scratch_store_i32(0, $7), wasm2js_scratch_load_f32()) ? $5 : $7;
 $28 = $13 < (wasm2js_scratch_store_i32(0, $5), wasm2js_scratch_load_f32()) ? $8 : $5;
 $8 = $20 < Math_fround(0xde0b6b000000000) ? $18 : 1566444395;
 $8 = $21 < (wasm2js_scratch_store_i32(0, $8), wasm2js_scratch_load_f32()) ? $17 : $8;
 $17 = $12 < (wasm2js_scratch_store_i32(0, $8), wasm2js_scratch_load_f32()) ? $9 : $8;
 $1 = $24 < Math_fround(0xde0b6b000000000) ? $1 : 1566444395;
 $1 = $23 < (wasm2js_scratch_store_i32(0, $1), wasm2js_scratch_load_f32()) ? $4 : $1;
 $18 = $22 < (wasm2js_scratch_store_i32(0, $1), wasm2js_scratch_load_f32()) ? $15 : $1;
 $5 = HEAP32[$0 + 4 >> 2];
 $7 = HEAP32[$5 + 4 >> 2];
 label$2 : {
  if (($7 | 0) != HEAP32[$5 + 8 >> 2]) {
   break label$2;
  }
  $15 = $7 ? $7 << 1 : 1;
  if (($7 | 0) >= ($15 | 0)) {
   break label$2;
  }
  label$3 : {
   if (!$15) {
    $9 = 0;
    break label$3;
   }
   $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($15 << 6, 16);
   $7 = HEAP32[$5 + 4 >> 2];
  }
  if (($7 | 0) >= 1) {
   $8 = 0;
   while (1) {
    $0 = $8 << 6;
    $1 = $9 + $0 | 0;
    $0 = HEAP32[$5 + 12 >> 2] + $0 | 0;
    $4 = $0;
    $6 = HEAP32[$4 >> 2];
    $0 = HEAP32[$4 + 4 >> 2];
    HEAP32[$1 >> 2] = $6;
    HEAP32[$1 + 4 >> 2] = $0;
    $6 = HEAP32[$4 + 60 >> 2];
    $0 = HEAP32[$4 + 56 >> 2];
    HEAP32[$1 + 56 >> 2] = $0;
    HEAP32[$1 + 60 >> 2] = $6;
    $0 = HEAP32[$4 + 52 >> 2];
    $6 = HEAP32[$4 + 48 >> 2];
    HEAP32[$1 + 48 >> 2] = $6;
    HEAP32[$1 + 52 >> 2] = $0;
    $6 = HEAP32[$4 + 44 >> 2];
    $0 = HEAP32[$4 + 40 >> 2];
    HEAP32[$1 + 40 >> 2] = $0;
    HEAP32[$1 + 44 >> 2] = $6;
    $0 = HEAP32[$4 + 36 >> 2];
    $6 = HEAP32[$4 + 32 >> 2];
    HEAP32[$1 + 32 >> 2] = $6;
    HEAP32[$1 + 36 >> 2] = $0;
    $6 = HEAP32[$4 + 28 >> 2];
    $0 = HEAP32[$4 + 24 >> 2];
    HEAP32[$1 + 24 >> 2] = $0;
    HEAP32[$1 + 28 >> 2] = $6;
    $0 = HEAP32[$4 + 20 >> 2];
    $6 = HEAP32[$4 + 16 >> 2];
    HEAP32[$1 + 16 >> 2] = $6;
    HEAP32[$1 + 20 >> 2] = $0;
    $6 = HEAP32[$4 + 12 >> 2];
    $0 = HEAP32[$4 + 8 >> 2];
    HEAP32[$1 + 8 >> 2] = $0;
    HEAP32[$1 + 12 >> 2] = $6;
    $8 = $8 + 1 | 0;
    if (($8 | 0) != ($7 | 0)) {
     continue;
    }
    break;
   }
  }
  $1 = HEAP32[$5 + 12 >> 2];
  if ($1) {
   if (HEAPU8[$5 + 16 | 0]) {
    btAlignedFreeInternal_28void__29($1);
   }
   HEAP32[$5 + 12 >> 2] = 0;
  }
  HEAP32[$5 + 12 >> 2] = $9;
  HEAP8[$5 + 16 | 0] = 1;
  HEAP32[$5 + 8 >> 2] = $15;
  $7 = HEAP32[$5 + 4 >> 2];
 }
 $1 = HEAP32[$5 + 12 >> 2] + ($7 << 6) | 0;
 HEAP32[$1 + 40 >> 2] = $3;
 HEAP32[$1 + 36 >> 2] = $2;
 HEAP32[$1 + 32 >> 2] = -1;
 HEAP32[$1 + 16 >> 2] = $16;
 HEAPF32[$1 + 12 >> 2] = $26;
 HEAP32[$1 + 8 >> 2] = $28;
 HEAP32[$1 + 4 >> 2] = $17;
 HEAP32[$1 >> 2] = $18;
 HEAPF32[$1 + 28 >> 2] = $25;
 HEAP32[$1 + 24 >> 2] = $27;
 HEAP32[$1 + 20 >> 2] = $14;
 $4 = $19;
 $6 = HEAP32[$4 + 12 >> 2];
 $0 = HEAP32[$4 + 16 >> 2];
 HEAP32[$1 + 44 >> 2] = $6;
 HEAP32[$1 + 48 >> 2] = $0;
 $6 = HEAP32[$4 + 24 >> 2];
 $0 = HEAP32[$4 + 20 >> 2];
 HEAP32[$1 + 52 >> 2] = $0;
 HEAP32[$1 + 56 >> 2] = $6;
 HEAP32[$1 + 60 >> 2] = HEAP32[$4 + 28 >> 2];
 HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] + 1;
 $0 = $4 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btGeneric6DofSpring2Constraint__calculateTransforms_28btTransform_20const__2c_20btTransform_20const__29($0, $1, $2) {
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0);
 $24 = HEAPF32[$1 + 52 >> 2];
 $25 = HEAPF32[$1 + 56 >> 2];
 $12 = HEAPF32[$0 + 96 >> 2];
 $13 = HEAPF32[$0 + 100 >> 2];
 $14 = HEAPF32[$0 + 104 >> 2];
 $3 = HEAPF32[$1 + 20 >> 2];
 $4 = HEAPF32[$1 + 24 >> 2];
 $15 = HEAPF32[$0 - -64 >> 2];
 $16 = HEAPF32[$0 + 80 >> 2];
 $17 = HEAPF32[$0 + 52 >> 2];
 $18 = HEAPF32[$0 + 68 >> 2];
 $19 = HEAPF32[$0 + 84 >> 2];
 $20 = HEAPF32[$0 + 56 >> 2];
 $5 = HEAPF32[$1 + 36 >> 2];
 $21 = HEAPF32[$0 + 72 >> 2];
 $6 = HEAPF32[$1 + 40 >> 2];
 $22 = HEAPF32[$0 + 88 >> 2];
 $26 = HEAPF32[$1 + 48 >> 2];
 $7 = HEAPF32[$1 + 8 >> 2];
 $8 = HEAPF32[$1 >> 2];
 $9 = HEAPF32[$1 + 4 >> 2];
 $10 = HEAPF32[$1 + 16 >> 2];
 $23 = HEAPF32[$0 + 48 >> 2];
 $11 = HEAPF32[$1 + 32 >> 2];
 HEAP32[$0 + 1296 >> 2] = 0;
 HEAP32[$0 + 1280 >> 2] = 0;
 HEAP32[$0 + 1264 >> 2] = 0;
 HEAP32[$0 + 1248 >> 2] = 0;
 HEAPF32[$0 + 1276 >> 2] = Math_fround(Math_fround($20 * $11) + Math_fround($21 * $5)) + Math_fround($22 * $6);
 HEAPF32[$0 + 1272 >> 2] = Math_fround(Math_fround($17 * $11) + Math_fround($18 * $5)) + Math_fround($19 * $6);
 HEAPF32[$0 + 1268 >> 2] = Math_fround(Math_fround($23 * $11) + Math_fround($15 * $5)) + Math_fround($16 * $6);
 HEAPF32[$0 + 1260 >> 2] = Math_fround(Math_fround($20 * $10) + Math_fround($21 * $3)) + Math_fround($22 * $4);
 HEAPF32[$0 + 1256 >> 2] = Math_fround(Math_fround($17 * $10) + Math_fround($18 * $3)) + Math_fround($19 * $4);
 HEAPF32[$0 + 1252 >> 2] = Math_fround(Math_fround($23 * $10) + Math_fround($15 * $3)) + Math_fround($16 * $4);
 HEAPF32[$0 + 1244 >> 2] = Math_fround(Math_fround($8 * $20) + Math_fround($9 * $21)) + Math_fround($7 * $22);
 HEAPF32[$0 + 1240 >> 2] = Math_fround(Math_fround($8 * $17) + Math_fround($9 * $18)) + Math_fround($7 * $19);
 HEAPF32[$0 + 1236 >> 2] = Math_fround(Math_fround($23 * $8) + Math_fround($15 * $9)) + Math_fround($16 * $7);
 HEAPF32[$0 + 1292 >> 2] = $25 + Math_fround(Math_fround(Math_fround($11 * $12) + Math_fround($5 * $13)) + Math_fround($6 * $14));
 HEAPF32[$0 + 1288 >> 2] = $24 + Math_fround(Math_fround(Math_fround($10 * $12) + Math_fround($3 * $13)) + Math_fround($4 * $14));
 HEAPF32[$0 + 1284 >> 2] = $26 + Math_fround(Math_fround(Math_fround($8 * $12) + Math_fround($9 * $13)) + Math_fround($7 * $14));
 $24 = HEAPF32[$2 + 52 >> 2];
 $25 = HEAPF32[$2 + 56 >> 2];
 $12 = HEAPF32[$0 + 160 >> 2];
 $13 = HEAPF32[$0 + 164 >> 2];
 $14 = HEAPF32[$0 + 168 >> 2];
 $3 = HEAPF32[$2 + 20 >> 2];
 $4 = HEAPF32[$2 + 24 >> 2];
 $15 = HEAPF32[$0 + 128 >> 2];
 $16 = HEAPF32[$0 + 144 >> 2];
 $17 = HEAPF32[$0 + 116 >> 2];
 $18 = HEAPF32[$0 + 132 >> 2];
 $19 = HEAPF32[$0 + 148 >> 2];
 $20 = HEAPF32[$0 + 120 >> 2];
 $21 = HEAPF32[$0 + 136 >> 2];
 $5 = HEAPF32[$2 + 36 >> 2];
 $22 = HEAPF32[$0 + 152 >> 2];
 $6 = HEAPF32[$2 + 40 >> 2];
 $26 = HEAPF32[$2 + 48 >> 2];
 $7 = HEAPF32[$2 + 8 >> 2];
 $8 = HEAPF32[$2 >> 2];
 $9 = HEAPF32[$2 + 4 >> 2];
 $10 = HEAPF32[$2 + 16 >> 2];
 $23 = HEAPF32[$0 + 112 >> 2];
 $11 = HEAPF32[$2 + 32 >> 2];
 HEAP32[$0 + 1360 >> 2] = 0;
 HEAP32[$0 + 1344 >> 2] = 0;
 HEAP32[$0 + 1328 >> 2] = 0;
 HEAP32[$0 + 1312 >> 2] = 0;
 HEAPF32[$0 + 1340 >> 2] = Math_fround(Math_fround($20 * $11) + Math_fround($21 * $5)) + Math_fround($22 * $6);
 HEAPF32[$0 + 1336 >> 2] = Math_fround(Math_fround($17 * $11) + Math_fround($18 * $5)) + Math_fround($19 * $6);
 HEAPF32[$0 + 1332 >> 2] = Math_fround(Math_fround($23 * $11) + Math_fround($15 * $5)) + Math_fround($16 * $6);
 HEAPF32[$0 + 1324 >> 2] = Math_fround(Math_fround($20 * $10) + Math_fround($21 * $3)) + Math_fround($22 * $4);
 HEAPF32[$0 + 1320 >> 2] = Math_fround(Math_fround($17 * $10) + Math_fround($18 * $3)) + Math_fround($19 * $4);
 HEAPF32[$0 + 1316 >> 2] = Math_fround(Math_fround($23 * $10) + Math_fround($15 * $3)) + Math_fround($16 * $4);
 HEAPF32[$0 + 1308 >> 2] = Math_fround(Math_fround($8 * $20) + Math_fround($9 * $21)) + Math_fround($7 * $22);
 HEAPF32[$0 + 1304 >> 2] = Math_fround(Math_fround($8 * $17) + Math_fround($9 * $18)) + Math_fround($7 * $19);
 HEAPF32[$0 + 1300 >> 2] = Math_fround(Math_fround($23 * $8) + Math_fround($15 * $9)) + Math_fround($16 * $7);
 HEAPF32[$0 + 1356 >> 2] = $25 + Math_fround(Math_fround(Math_fround($11 * $12) + Math_fround($5 * $13)) + Math_fround($6 * $14));
 HEAPF32[$0 + 1352 >> 2] = $24 + Math_fround(Math_fround(Math_fround($10 * $12) + Math_fround($3 * $13)) + Math_fround($4 * $14));
 HEAPF32[$0 + 1348 >> 2] = $26 + Math_fround(Math_fround(Math_fround($8 * $12) + Math_fround($9 * $13)) + Math_fround($7 * $14));
 btGeneric6DofSpring2Constraint__calculateLinearInfo_28_29($0);
 btGeneric6DofSpring2Constraint__calculateAngleInfo_28_29($0);
 $4 = HEAPF32[HEAP32[$0 + 28 >> 2] + 404 >> 2];
 $3 = HEAPF32[HEAP32[$0 + 32 >> 2] + 404 >> 2];
 HEAP8[$0 + 1452 | 0] = $4 < Math_fround(1.1920928955078125e-7) | $3 < Math_fround(1.1920928955078125e-7);
 $4 = Math_fround($4 + $3);
 $3 = $4 > Math_fround(0) ? Math_fround($3 / $4) : Math_fround(.5);
 HEAPF32[$0 + 1444 >> 2] = $3;
 HEAPF32[$0 + 1448 >> 2] = Math_fround(1) - $3;
}
function btCompoundShape__setLocalScaling_28btVector3_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0);
 $6 = global$0 - 144 | 0;
 $2 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 if (HEAP32[$0 + 20 >> 2] >= 1) {
  $9 = $6 - -64 | 0;
  while (1) {
   $8 = Math_imul($10, 80);
   $5 = $8 + HEAP32[$0 + 28 >> 2] | 0;
   $4 = $5;
   $2 = HEAP32[$4 + 8 >> 2];
   $3 = HEAP32[$4 + 12 >> 2];
   $5 = $2;
   $2 = $6;
   HEAP32[$2 + 24 >> 2] = $5;
   HEAP32[$2 + 28 >> 2] = $3;
   $2 = HEAP32[$4 + 4 >> 2];
   $3 = HEAP32[$4 >> 2];
   $5 = $3;
   $3 = $6;
   HEAP32[$3 + 16 >> 2] = $5;
   HEAP32[$3 + 20 >> 2] = $2;
   $3 = HEAP32[$4 + 28 >> 2];
   $2 = HEAP32[$4 + 24 >> 2];
   $5 = $2;
   $2 = $6;
   HEAP32[$2 + 40 >> 2] = $5;
   HEAP32[$2 + 44 >> 2] = $3;
   $2 = HEAP32[$4 + 20 >> 2];
   $3 = HEAP32[$4 + 16 >> 2];
   $5 = $3;
   $3 = $6;
   HEAP32[$3 + 32 >> 2] = $5;
   HEAP32[$3 + 36 >> 2] = $2;
   $3 = HEAP32[$4 + 44 >> 2];
   $2 = HEAP32[$4 + 40 >> 2];
   $5 = $2;
   $2 = $6;
   HEAP32[$2 + 56 >> 2] = $5;
   HEAP32[$2 + 60 >> 2] = $3;
   $2 = HEAP32[$4 + 36 >> 2];
   $3 = HEAP32[$4 + 32 >> 2];
   $5 = $3;
   $3 = $6;
   HEAP32[$3 + 48 >> 2] = $5;
   HEAP32[$3 + 52 >> 2] = $2;
   $3 = HEAP32[$4 + 60 >> 2];
   $2 = HEAP32[$4 + 56 >> 2];
   $5 = $2;
   $2 = $9;
   HEAP32[$2 + 8 >> 2] = $5;
   HEAP32[$2 + 12 >> 2] = $3;
   $2 = HEAP32[$4 + 52 >> 2];
   $3 = HEAP32[$4 + 48 >> 2];
   $5 = $3;
   $3 = $9;
   HEAP32[$3 >> 2] = $5;
   HEAP32[$3 + 4 >> 2] = $2;
   $5 = HEAP32[$4 + 64 >> 2];
   $5 = FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 28 >> 2]]($5) | 0;
   HEAP32[$6 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
   $4 = $5;
   $2 = HEAP32[$4 >> 2];
   $3 = HEAP32[$4 + 4 >> 2];
   $5 = $2;
   $2 = $6;
   HEAP32[$2 >> 2] = $5;
   HEAP32[$2 + 4 >> 2] = $3;
   $11 = HEAPF32[$0 + 188 >> 2];
   $12 = HEAPF32[$1 + 4 >> 2];
   $13 = HEAPF32[$0 + 184 >> 2];
   $14 = HEAPF32[$1 >> 2];
   HEAPF32[$2 + 8 >> 2] = Math_fround(HEAPF32[$2 + 8 >> 2] * HEAPF32[$1 + 8 >> 2]) / HEAPF32[$0 + 192 >> 2];
   HEAP32[$2 + 12 >> 2] = 0;
   HEAPF32[$2 >> 2] = Math_fround($14 * HEAPF32[$2 >> 2]) / $13;
   HEAPF32[$2 + 4 >> 2] = Math_fround($12 * HEAPF32[$2 + 4 >> 2]) / $11;
   $5 = HEAP32[(HEAP32[$0 + 28 >> 2] + $8 | 0) + 64 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 24 >> 2]]($5, $2);
   $11 = HEAPF32[$0 + 184 >> 2];
   $12 = HEAPF32[$1 >> 2];
   $13 = HEAPF32[$0 + 188 >> 2];
   $14 = HEAPF32[$1 + 4 >> 2];
   $15 = HEAPF32[$0 + 192 >> 2];
   $16 = HEAPF32[$1 + 8 >> 2];
   HEAP32[$2 + 76 >> 2] = 0;
   HEAPF32[$2 + 72 >> 2] = Math_fround($16 * HEAPF32[$2 + 72 >> 2]) / $15;
   HEAPF32[$2 + 68 >> 2] = Math_fround($14 * HEAPF32[$2 + 68 >> 2]) / $13;
   HEAPF32[$2 + 64 >> 2] = Math_fround($12 * HEAPF32[$2 + 64 >> 2]) / $11;
   $4 = $2;
   $3 = HEAP32[$2 + 16 >> 2];
   $2 = HEAP32[$2 + 20 >> 2];
   $7 = $3;
   $5 = HEAP32[$0 + 28 >> 2] + $8 | 0;
   $3 = $5;
   HEAP32[$3 >> 2] = $7;
   HEAP32[$3 + 4 >> 2] = $2;
   $3 = HEAP32[$4 + 28 >> 2];
   $2 = HEAP32[$4 + 24 >> 2];
   $7 = $2;
   $2 = $5;
   HEAP32[$2 + 8 >> 2] = $7;
   HEAP32[$2 + 12 >> 2] = $3;
   $2 = HEAP32[$4 + 44 >> 2];
   $3 = HEAP32[$4 + 40 >> 2];
   $7 = $3;
   $3 = $5;
   HEAP32[$3 + 24 >> 2] = $7;
   HEAP32[$3 + 28 >> 2] = $2;
   $3 = HEAP32[$4 + 36 >> 2];
   $2 = HEAP32[$4 + 32 >> 2];
   $7 = $2;
   $2 = $5;
   HEAP32[$2 + 16 >> 2] = $7;
   HEAP32[$2 + 20 >> 2] = $3;
   $2 = HEAP32[$4 + 60 >> 2];
   $3 = HEAP32[$4 + 56 >> 2];
   $7 = $3;
   $3 = $5;
   HEAP32[$3 + 40 >> 2] = $7;
   HEAP32[$3 + 44 >> 2] = $2;
   $3 = HEAP32[$4 + 52 >> 2];
   $2 = HEAP32[$4 + 48 >> 2];
   $4 = $2;
   $2 = $5;
   HEAP32[$2 + 32 >> 2] = $4;
   HEAP32[$2 + 36 >> 2] = $3;
   $4 = $9;
   $3 = HEAP32[$4 + 8 >> 2];
   $2 = HEAP32[$4 + 12 >> 2];
   $7 = $3;
   $3 = $5;
   HEAP32[$3 + 56 >> 2] = $7;
   HEAP32[$3 + 60 >> 2] = $2;
   $3 = HEAP32[$4 + 4 >> 2];
   $2 = HEAP32[$4 >> 2];
   $4 = $2;
   $2 = $5;
   HEAP32[$2 + 48 >> 2] = $4;
   HEAP32[$2 + 52 >> 2] = $3;
   if (HEAP32[$0 + 68 >> 2]) {
    $5 = HEAP32[(HEAP32[$0 + 28 >> 2] + $8 | 0) + 64 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, $6 + 16 | 0, $6 + 128 | 0, $6 + 112 | 0);
    $4 = $6;
    $3 = HEAP32[$4 + 136 >> 2];
    $2 = HEAP32[$4 + 140 >> 2];
    HEAP32[$4 + 88 >> 2] = $3;
    HEAP32[$4 + 92 >> 2] = $2;
    $3 = HEAP32[$4 + 132 >> 2];
    $2 = HEAP32[$4 + 128 >> 2];
    $5 = $2;
    $2 = $4;
    HEAP32[$2 + 80 >> 2] = $5;
    HEAP32[$2 + 84 >> 2] = $3;
    $3 = HEAP32[$2 + 120 >> 2];
    $2 = HEAP32[$2 + 124 >> 2];
    HEAP32[$4 + 104 >> 2] = $3;
    HEAP32[$4 + 108 >> 2] = $2;
    $3 = HEAP32[$4 + 116 >> 2];
    $2 = HEAP32[$4 + 112 >> 2];
    $5 = $2;
    $2 = $4;
    HEAP32[$2 + 96 >> 2] = $5;
    HEAP32[$2 + 100 >> 2] = $3;
    btDbvt__update_28btDbvtNode__2c_20btDbvtAabbMm__29(HEAP32[$0 + 68 >> 2], HEAP32[(HEAP32[$0 + 28 >> 2] + $8 | 0) + 76 >> 2], $2 + 80 | 0);
   }
   $10 = $10 + 1 | 0;
   if (($10 | 0) < HEAP32[$0 + 20 >> 2]) {
    continue;
   }
   break;
  }
 }
 $4 = $1;
 $3 = HEAP32[$4 >> 2];
 $2 = HEAP32[$4 + 4 >> 2];
 $1 = $3;
 $3 = $0;
 HEAP32[$3 + 184 >> 2] = $1;
 HEAP32[$3 + 188 >> 2] = $2;
 $3 = HEAP32[$4 + 12 >> 2];
 $2 = HEAP32[$4 + 8 >> 2];
 $1 = $2;
 $2 = $0;
 HEAP32[$2 + 192 >> 2] = $1;
 HEAP32[$2 + 196 >> 2] = $3;
 FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 68 >> 2]]($2);
 $0 = $6 + 144 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuantizedBvh__updateSubtreeHeaders_28int_2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 $10 = global$0 - 32 | 0;
 $3 = $10;
 if ($10 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $12 = HEAP32[$0 + 136 >> 2];
 $3 = HEAP32[($12 + ($2 << 4) | 0) + 12 >> 2];
 $14 = ($3 | 0) > -1 ? 1 : 0 - $3 | 0;
 $3 = HEAP32[(($1 << 4) + $12 | 0) + 12 >> 2];
 $15 = ($3 | 0) > -1 ? 1 : 0 - $3 | 0;
 if (($15 | 0) <= 128) {
  $9 = HEAP32[$0 + 152 >> 2];
  $3 = $9;
  label$3 : {
   if (($3 | 0) != HEAP32[$0 + 156 >> 2]) {
    break label$3;
   }
   $3 = $9;
   $13 = $3 ? $3 << 1 : 1;
   if (($3 | 0) >= ($13 | 0)) {
    break label$3;
   }
   if ($13) {
    $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($13 << 5, 16);
    $8 = HEAP32[$0 + 152 >> 2];
   } else {
    $8 = $9;
   }
   if (($8 | 0) >= 1) {
    while (1) {
     $4 = $7 << 5;
     $3 = $11 + $4 | 0;
     $4 = HEAP32[$0 + 160 >> 2] + $4 | 0;
     $5 = $4;
     $4 = HEAP32[$5 >> 2];
     $6 = HEAP32[$5 + 4 >> 2];
     HEAP32[$3 >> 2] = $4;
     HEAP32[$3 + 4 >> 2] = $6;
     $4 = HEAP32[$5 + 28 >> 2];
     $6 = HEAP32[$5 + 24 >> 2];
     HEAP32[$3 + 24 >> 2] = $6;
     HEAP32[$3 + 28 >> 2] = $4;
     $6 = HEAP32[$5 + 20 >> 2];
     $4 = HEAP32[$5 + 16 >> 2];
     HEAP32[$3 + 16 >> 2] = $4;
     HEAP32[$3 + 20 >> 2] = $6;
     $4 = HEAP32[$5 + 12 >> 2];
     $6 = HEAP32[$5 + 8 >> 2];
     HEAP32[$3 + 8 >> 2] = $6;
     HEAP32[$3 + 12 >> 2] = $4;
     $7 = $7 + 1 | 0;
     if (($8 | 0) != ($7 | 0)) {
      continue;
     }
     break;
    }
   }
   $3 = HEAP32[$0 + 160 >> 2];
   if ($3) {
    if (HEAPU8[$0 + 164 | 0]) {
     btAlignedFreeInternal_28void__29($3);
    }
    HEAP32[$0 + 160 >> 2] = 0;
   }
   HEAP32[$0 + 160 >> 2] = $11;
   HEAP32[$0 + 156 >> 2] = $13;
   HEAP8[$0 + 164 | 0] = 1;
   $3 = HEAP32[$0 + 152 >> 2];
  }
  HEAP32[$0 + 152 >> 2] = $3 + 1;
  $5 = $10;
  $4 = HEAP32[$5 >> 2];
  $6 = HEAP32[$5 + 4 >> 2];
  $8 = $4;
  $7 = $9 << 5;
  $4 = $0 + 160 | 0;
  $3 = $7 + HEAP32[$4 >> 2] | 0;
  HEAP32[$3 >> 2] = $8;
  HEAP32[$3 + 4 >> 2] = $6;
  $4 = HEAP32[$5 + 28 >> 2];
  $6 = HEAP32[$5 + 24 >> 2];
  HEAP32[$3 + 24 >> 2] = $6;
  HEAP32[$3 + 28 >> 2] = $4;
  $6 = HEAP32[$5 + 20 >> 2];
  $4 = HEAP32[$5 + 16 >> 2];
  HEAP32[$3 + 16 >> 2] = $4;
  HEAP32[$3 + 20 >> 2] = $6;
  $4 = HEAP32[$5 + 12 >> 2];
  $6 = HEAP32[$5 + 8 >> 2];
  HEAP32[$3 + 8 >> 2] = $6;
  HEAP32[$3 + 12 >> 2] = $4;
  $3 = HEAP32[$0 + 160 >> 2] + $7 | 0;
  $4 = ($1 << 4) + $12 | 0;
  HEAP16[$3 >> 1] = HEAPU16[$4 >> 1];
  HEAP16[$3 + 2 >> 1] = HEAPU16[$4 + 2 >> 1];
  HEAP16[$3 + 4 >> 1] = HEAPU16[$4 + 4 >> 1];
  HEAP16[$3 + 6 >> 1] = HEAPU16[$4 + 6 >> 1];
  HEAP16[$3 + 8 >> 1] = HEAPU16[$4 + 8 >> 1];
  $4 = HEAPU16[$4 + 10 >> 1];
  HEAP32[$3 + 16 >> 2] = $15;
  HEAP32[$3 + 12 >> 2] = $1;
  HEAP16[$3 + 10 >> 1] = $4;
 }
 if (($14 | 0) <= 128) {
  $8 = HEAP32[$0 + 152 >> 2];
  $3 = $8;
  label$11 : {
   if (($3 | 0) != HEAP32[$0 + 156 >> 2]) {
    break label$11;
   }
   $3 = $8;
   $9 = $3 ? $3 << 1 : 1;
   if (($3 | 0) >= ($9 | 0)) {
    break label$11;
   }
   label$12 : {
    if (!$9) {
     $1 = 0;
     $3 = $8;
     break label$12;
    }
    $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($9 << 5, 16);
    $3 = HEAP32[$0 + 152 >> 2];
   }
   $11 = $3;
   if (($11 | 0) >= 1) {
    $7 = 0;
    while (1) {
     $4 = $7 << 5;
     $3 = $4 + $1 | 0;
     $4 = HEAP32[$0 + 160 >> 2] + $4 | 0;
     $5 = $4;
     $4 = HEAP32[$5 >> 2];
     $6 = HEAP32[$5 + 4 >> 2];
     HEAP32[$3 >> 2] = $4;
     HEAP32[$3 + 4 >> 2] = $6;
     $4 = HEAP32[$5 + 28 >> 2];
     $6 = HEAP32[$5 + 24 >> 2];
     HEAP32[$3 + 24 >> 2] = $6;
     HEAP32[$3 + 28 >> 2] = $4;
     $6 = HEAP32[$5 + 20 >> 2];
     $4 = HEAP32[$5 + 16 >> 2];
     HEAP32[$3 + 16 >> 2] = $4;
     HEAP32[$3 + 20 >> 2] = $6;
     $4 = HEAP32[$5 + 12 >> 2];
     $6 = HEAP32[$5 + 8 >> 2];
     HEAP32[$3 + 8 >> 2] = $6;
     HEAP32[$3 + 12 >> 2] = $4;
     $7 = $7 + 1 | 0;
     if (($11 | 0) != ($7 | 0)) {
      continue;
     }
     break;
    }
   }
   $3 = HEAP32[$0 + 160 >> 2];
   if ($3) {
    if (HEAPU8[$0 + 164 | 0]) {
     btAlignedFreeInternal_28void__29($3);
    }
    HEAP32[$0 + 160 >> 2] = 0;
   }
   HEAP32[$0 + 160 >> 2] = $1;
   HEAP32[$0 + 156 >> 2] = $9;
   HEAP8[$0 + 164 | 0] = 1;
   $3 = HEAP32[$0 + 152 >> 2];
  }
  HEAP32[$0 + 152 >> 2] = $3 + 1;
  $5 = $10;
  $4 = HEAP32[$5 >> 2];
  $6 = HEAP32[$5 + 4 >> 2];
  $1 = $4;
  $7 = $8 << 5;
  $4 = $0 + 160 | 0;
  $3 = $7 + HEAP32[$4 >> 2] | 0;
  HEAP32[$3 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $6;
  $4 = HEAP32[$5 + 28 >> 2];
  $6 = HEAP32[$5 + 24 >> 2];
  HEAP32[$3 + 24 >> 2] = $6;
  HEAP32[$3 + 28 >> 2] = $4;
  $6 = HEAP32[$5 + 20 >> 2];
  $4 = HEAP32[$5 + 16 >> 2];
  HEAP32[$3 + 16 >> 2] = $4;
  HEAP32[$3 + 20 >> 2] = $6;
  $4 = HEAP32[$5 + 12 >> 2];
  $6 = HEAP32[$5 + 8 >> 2];
  HEAP32[$3 + 8 >> 2] = $6;
  HEAP32[$3 + 12 >> 2] = $4;
  $3 = HEAP32[$0 + 160 >> 2] + $7 | 0;
  $4 = ($2 << 4) + $12 | 0;
  HEAP16[$3 >> 1] = HEAPU16[$4 >> 1];
  HEAP16[$3 + 2 >> 1] = HEAPU16[$4 + 2 >> 1];
  HEAP16[$3 + 4 >> 1] = HEAPU16[$4 + 4 >> 1];
  HEAP16[$3 + 6 >> 1] = HEAPU16[$4 + 6 >> 1];
  HEAP16[$3 + 8 >> 1] = HEAPU16[$4 + 8 >> 1];
  $4 = HEAPU16[$4 + 10 >> 1];
  HEAP32[$3 + 16 >> 2] = $14;
  HEAP32[$3 + 12 >> 2] = $2;
  HEAP16[$3 + 10 >> 1] = $4;
 }
 HEAP32[$0 + 168 >> 2] = HEAP32[$0 + 152 >> 2];
 $0 = $10 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDbvt__rayTestInternal_28btDbvtNode_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20unsigned_20int__2c_20float_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btAlignedObjectArray_btDbvtNode_20const____2c_20btDbvt__ICollide__29_20const($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = 0, $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = 0, $23 = Math_fround(0), $24 = 0;
 $3 = global$0 - 32 | 0;
 $0 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 if ($1) {
  $11 = HEAP32[$9 + 4 >> 2];
  if (($11 | 0) <= 127) {
   if (HEAP32[$9 + 8 >> 2] <= 127) {
    $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(512, 16);
    $12 = HEAP32[$9 + 4 >> 2];
    if (($12 | 0) >= 1) {
     while (1) {
      $15 = $14 << 2;
      HEAP32[$15 + $0 >> 2] = HEAP32[HEAP32[$9 + 12 >> 2] + $15 >> 2];
      $14 = $14 + 1 | 0;
      if (($14 | 0) != ($12 | 0)) {
       continue;
      }
      break;
     }
    }
    $14 = HEAP32[$9 + 12 >> 2];
    if ($14) {
     if (HEAPU8[$9 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($14);
     }
     HEAP32[$9 + 12 >> 2] = 0;
    }
    HEAP32[$9 + 12 >> 2] = $0;
    HEAP8[$9 + 16 | 0] = 1;
    HEAP32[$9 + 8 >> 2] = 128;
   }
   while (1) {
    HEAP32[HEAP32[$9 + 12 >> 2] + ($11 << 2) >> 2] = 0;
    $11 = $11 + 1 | 0;
    if (($11 | 0) != 128) {
     continue;
    }
    break;
   }
  }
  HEAP32[$9 + 4 >> 2] = 128;
  HEAP32[HEAP32[$9 + 12 >> 2] >> 2] = $1;
  $21 = 126;
  $14 = 1;
  while (1) {
   $15 = HEAP32[$9 + 12 >> 2];
   $0 = $14 + -1 | 0;
   $22 = $0 << 2;
   $11 = HEAP32[$15 + $22 >> 2];
   $16 = HEAPF32[$11 >> 2];
   $13 = HEAPF32[$11 + 4 >> 2];
   $18 = HEAPF32[$11 + 8 >> 2];
   $17 = HEAPF32[$8 >> 2];
   $19 = HEAPF32[$8 + 4 >> 2];
   $20 = HEAPF32[$8 + 8 >> 2];
   HEAP32[$3 + 12 >> 2] = 0;
   HEAPF32[$3 + 8 >> 2] = $18 - $20;
   HEAPF32[$3 + 4 >> 2] = $13 - $19;
   HEAPF32[$3 >> 2] = $16 - $17;
   $16 = HEAPF32[$11 + 16 >> 2];
   $13 = HEAPF32[$11 + 20 >> 2];
   $18 = HEAPF32[$11 + 24 >> 2];
   $17 = HEAPF32[$7 >> 2];
   $19 = HEAPF32[$7 + 4 >> 2];
   $20 = HEAPF32[$7 + 8 >> 2];
   HEAP32[$3 + 28 >> 2] = 0;
   HEAPF32[$3 + 24 >> 2] = $18 - $20;
   HEAPF32[$3 + 20 >> 2] = $13 - $19;
   HEAPF32[$3 + 16 >> 2] = $16 - $17;
   $12 = HEAP32[$5 + 4 >> 2];
   $13 = HEAPF32[$2 + 4 >> 2];
   $18 = HEAPF32[$4 + 4 >> 2];
   $17 = Math_fround(Math_fround(HEAPF32[(($12 << 4) + $3 | 0) + 4 >> 2] - $13) * $18);
   $19 = HEAPF32[$4 >> 2];
   $1 = HEAP32[$5 >> 2];
   $20 = HEAPF32[$2 >> 2];
   $16 = Math_fround($19 * Math_fround(HEAPF32[(1 - $1 << 4) + $3 >> 2] - $20));
   label$11 : {
    label$12 : {
     if ($17 > $16) {
      break label$12;
     }
     $19 = Math_fround(Math_fround(HEAPF32[($1 << 4) + $3 >> 2] - $20) * $19);
     $13 = Math_fround($18 * Math_fround(HEAPF32[((1 - $12 << 4) + $3 | 0) + 4 >> 2] - $13));
     if ($19 > $13) {
      break label$12;
     }
     $12 = HEAP32[$5 + 8 >> 2];
     $20 = HEAPF32[$2 + 8 >> 2];
     $23 = HEAPF32[$4 + 8 >> 2];
     $18 = Math_fround(Math_fround(HEAPF32[(($12 << 4) + $3 | 0) + 8 >> 2] - $20) * $23);
     $13 = $13 < $16 ? $13 : $16;
     if ($18 > $13) {
      break label$12;
     }
     $16 = $17 > $19 ? $17 : $19;
     $17 = Math_fround($23 * Math_fround(HEAPF32[((1 - $12 << 4) + $3 | 0) + 8 >> 2] - $20));
     if ($16 > $17 | ($18 > $16 ? $18 : $16) < $6 ^ 1 | ($17 < $13 ? $17 : $13) > Math_fround(0) ^ 1) {
      break label$12;
     }
     if (HEAP32[$11 + 40 >> 2]) {
      if (($0 | 0) > ($21 | 0)) {
       $0 = HEAP32[$9 + 4 >> 2];
       $12 = $0 << 1;
       if (($0 | 0) < ($12 | 0)) {
        if (HEAP32[$9 + 8 >> 2] < ($12 | 0)) {
         label$17 : {
          if (!$0) {
           $15 = 0;
           break label$17;
          }
          $15 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($0 << 3, 16);
          $1 = 0;
          $24 = HEAP32[$9 + 4 >> 2];
          if (($24 | 0) < 1) {
           break label$17;
          }
          while (1) {
           $21 = $1 << 2;
           HEAP32[$21 + $15 >> 2] = HEAP32[HEAP32[$9 + 12 >> 2] + $21 >> 2];
           $1 = $1 + 1 | 0;
           if (($24 | 0) != ($1 | 0)) {
            continue;
           }
           break;
          }
         }
         $1 = HEAP32[$9 + 12 >> 2];
         if ($1) {
          if (HEAPU8[$9 + 16 | 0]) {
           btAlignedFreeInternal_28void__29($1);
          }
          HEAP32[$9 + 12 >> 2] = 0;
         }
         HEAP32[$9 + 12 >> 2] = $15;
         HEAP8[$9 + 16 | 0] = 1;
         HEAP32[$9 + 8 >> 2] = $12;
        }
        while (1) {
         HEAP32[($0 << 2) + $15 >> 2] = 0;
         $15 = HEAP32[$9 + 12 >> 2];
         $0 = $0 + 1 | 0;
         if (($12 | 0) != ($0 | 0)) {
          continue;
         }
         break;
        }
       }
       HEAP32[$9 + 4 >> 2] = $12;
       $21 = $12 + -2 | 0;
      }
      HEAP32[$15 + $22 >> 2] = HEAP32[$11 + 36 >> 2];
      HEAP32[HEAP32[$9 + 12 >> 2] + ($14 << 2) >> 2] = HEAP32[$11 + 40 >> 2];
      $0 = $14 + 1 | 0;
      break label$11;
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 12 >> 2]]($10, $11);
    }
   }
   $14 = $0;
   if ($14) {
    continue;
   }
   break;
  }
 }
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexHullInternal__Rational128__compare_28long_20long_29_20const($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 if (HEAPU8[$0 + 36 | 0]) {
  $8 = $0;
  $5 = HEAP32[$8 >> 2];
  $6 = $5;
  $3 = HEAP32[$8 + 4 >> 2];
  $0 = $3;
  $3 = HEAP32[$8 + 32 >> 2];
  $5 = $3 >> 31;
  $4 = $5;
  $5 = $0;
  $0 = $3;
  $3 = $4;
  $3 = __wasm_i64_mul($6, $5, $0, $3);
  $8 = $3;
  $7 = $1;
  $5 = i64toi32_i32$HIGH_BITS;
  $3 = $2;
  $0 = (($5 | 0) < ($3 | 0) ? 1 : ($5 | 0) <= ($3 | 0) ? $8 >>> 0 >= $7 >>> 0 ? 0 : 1 : 0) ? -1 : 0;
  $7 = $8;
  $3 = $1;
  $8 = $5;
  $5 = $2;
  return (($8 | 0) > ($5 | 0) ? 1 : ($8 | 0) >= ($5 | 0) ? $7 >>> 0 <= $3 >>> 0 ? 0 : 1 : 0) ? 1 : $0;
 }
 $3 = $1;
 $7 = $2;
 label$2 : {
  label$3 : {
   if (($7 | 0) > 0 ? 1 : ($7 | 0) >= 0 ? $3 >>> 0 < 1 ? 0 : 1 : 0) {
    $16 = HEAP32[$0 + 32 >> 2];
    if (($16 | 0) >= 1) {
     break label$3;
    }
    return -1;
   }
   $16 = HEAP32[$0 + 32 >> 2];
   $5 = $1;
   $3 = $2;
   if (($3 | 0) > -1 ? 1 : ($3 | 0) >= -1 ? $5 >>> 0 <= 4294967295 ? 0 : 1 : 0) {
    return $16;
   }
   $10 = 1;
   if (($16 | 0) > -1) {
    break label$2;
   }
   $7 = $1;
   $6 = 0 - $7 | 0;
   $1 = $6;
   $4 = $2 + (0 < $7 >>> 0) | 0;
   $4 = 0 - $4 | 0;
   $2 = $4;
  }
  $5 = $0;
  $4 = HEAP32[$5 + 16 >> 2];
  $14 = $4;
  $8 = HEAP32[$5 + 20 >> 2];
  $15 = $8;
  $8 = HEAP32[$5 + 24 >> 2];
  $9 = $8;
  $4 = HEAP32[$5 + 28 >> 2];
  $11 = $4;
  $5 = $9;
  $10 = ($4 | 0) > -1 ? 1 : ($4 | 0) >= -1 ? $5 >>> 0 <= 4294967295 ? 0 : 1 : 0;
  $7 = $14;
  $5 = $15;
  $3 = $5;
  label$6 : {
   if ($10) {
    break label$6;
   }
   $5 = $15;
   $3 = !($5 | $14);
   $5 = $11;
   $4 = $5 ^ -1;
   $5 = $3;
   $7 = $9;
   $8 = $7 ^ -1;
   $3 = $5 + $8 | 0;
   $7 = $4;
   $6 = $7;
   $9 = $3;
   $6 = $3 >>> 0 < $8 >>> 0 ? $6 + 1 | 0 : $6;
   $11 = $6;
   $8 = $14;
   $7 = 0 - $8 | 0;
   $5 = $15;
   $3 = $5 + (0 < $8 >>> 0) | 0;
   $3 = 0 - $3 | 0;
  }
  $12 = $7;
  $13 = $3;
  $3 = $2;
  $4 = $11;
  $4 = __wasm_i64_mul($1, $3, $9, $4);
  $5 = $4;
  $3 = i64toi32_i32$HIGH_BITS;
  $7 = $3;
  $4 = 0;
  $11 = $4;
  $6 = 0;
  $15 = $6;
  $3 = $13;
  $9 = $3;
  $4 = $2;
  $14 = $4;
  $3 = $6;
  $3 = __wasm_i64_mul($9, $11, $4, $3);
  $8 = $3;
  $6 = i64toi32_i32$HIGH_BITS;
  $3 = $6;
  $6 = $7;
  $7 = $3 + $6 | 0;
  $4 = $5;
  $5 = $8 + $4 | 0;
  if ($5 >>> 0 < $8 >>> 0) {
   $7 = $7 + 1 | 0;
  }
  $3 = $5;
  $5 = $7;
  $6 = $12;
  $12 = $6;
  $4 = 0;
  $13 = $4;
  $6 = $15;
  $6 = __wasm_i64_mul($12, $4, $14, $6);
  $14 = $6;
  $4 = i64toi32_i32$HIGH_BITS;
  $6 = 0;
  $7 = $6;
  $6 = $5;
  $5 = $7 + $6 | 0;
  $8 = $4;
  $4 = $3;
  $3 = $8 + $4 | 0;
  if ($3 >>> 0 < $8 >>> 0) {
   $5 = $5 + 1 | 0;
  }
  $7 = $3;
  $3 = $5;
  $6 = $1;
  $1 = $6;
  $4 = 0;
  $2 = $4;
  $4 = $11;
  $6 = $2;
  $6 = __wasm_i64_mul($9, $4, $1, $6);
  $9 = $6;
  $4 = i64toi32_i32$HIGH_BITS;
  $6 = 0;
  $5 = $6;
  $6 = $3;
  $3 = $5 + $6 | 0;
  $8 = $4;
  $4 = $7;
  $7 = $8 + $4 | 0;
  if ($7 >>> 0 < $8 >>> 0) {
   $3 = $3 + 1 | 0;
  }
  $15 = $7;
  $17 = $3;
  $4 = 0;
  $7 = $4;
  $3 = $9;
  $8 = $3;
  $6 = $14;
  $4 = $6;
  $5 = $3 + $4 | 0;
  $6 = 0;
  $3 = $6;
  $6 = $7;
  $7 = $3 + $6 | 0;
  $9 = $5;
  $7 = $5 >>> 0 < $8 >>> 0 ? $7 + 1 | 0 : $7;
  $11 = $7;
  $4 = 0;
  $6 = $4;
  $4 = $17;
  $5 = $6 + $4 | 0;
  $8 = $7;
  $7 = $15;
  $3 = $8 + $7 | 0;
  if ($3 >>> 0 < $8 >>> 0) {
   $5 = $5 + 1 | 0;
  }
  $15 = $3;
  $14 = $5;
  $4 = $9;
  $9 = 0;
  $11 = $4;
  $7 = $2;
  $4 = $13;
  $4 = __wasm_i64_mul($1, $7, $12, $4);
  $8 = $4;
  $7 = i64toi32_i32$HIGH_BITS;
  $4 = $7;
  $7 = $11;
  $3 = $7 + $4 | 0;
  $5 = $9;
  $6 = $5 + $8 | 0;
  if ($6 >>> 0 < $8 >>> 0) {
   $3 = $3 + 1 | 0;
  }
  $12 = $6;
  $5 = $11;
  $13 = $3;
  $8 = $9;
  $5 = ($5 | 0) == ($3 | 0) & $6 >>> 0 < $8 >>> 0 | $3 >>> 0 < $5 >>> 0;
  $7 = $14;
  $6 = $7;
  $8 = $15;
  $4 = $5 + $8 | 0;
  if ($4 >>> 0 < $5 >>> 0) {
   $6 = $6 + 1 | 0;
  }
  $1 = $4;
  $2 = $6;
  if ($10) {
   $7 = $12;
   $6 = $13;
   $3 = $6;
  } else {
   $6 = $13;
   $3 = !($6 | $12);
   $6 = $2;
   $8 = $6 ^ -1;
   $7 = $1;
   $5 = $7 ^ -1;
   $6 = $3;
   $3 = $5 + $6 | 0;
   $7 = $8;
   $4 = $7;
   $1 = $3;
   $4 = $3 >>> 0 < $5 >>> 0 ? $4 + 1 | 0 : $4;
   $2 = $4;
   $5 = $12;
   $7 = 0 - $5 | 0;
   $6 = $13;
   $3 = $6 + (0 < $5 >>> 0) | 0;
   $3 = 0 - $3 | 0;
  }
  $9 = $7;
  $11 = $3;
  $4 = $0;
  $3 = HEAP32[$4 + 8 >> 2];
  $12 = $3;
  $3 = $2;
  $8 = HEAP32[$4 + 12 >> 2];
  $13 = $8;
  $4 = $12;
  $5 = $1;
  $10 = -1;
  label$9 : {
   if (($3 | 0) == ($8 | 0) & $4 >>> 0 < $5 >>> 0 | $8 >>> 0 < $3 >>> 0) {
    break label$9;
   }
   $8 = $2;
   $4 = $13;
   $5 = $12;
   $3 = $1;
   $10 = 1;
   if (($8 | 0) == ($4 | 0) & $5 >>> 0 > $3 >>> 0 | $4 >>> 0 > $8 >>> 0) {
    break label$9;
   }
   $3 = $0;
   $5 = HEAP32[$3 >> 2];
   $1 = $5;
   $5 = $11;
   $4 = HEAP32[$3 + 4 >> 2];
   $2 = $4;
   $3 = $1;
   $8 = $9;
   $10 = -1;
   if (($5 | 0) == ($4 | 0) & $3 >>> 0 < $8 >>> 0 | $4 >>> 0 < $5 >>> 0) {
    break label$9;
   }
   $3 = $2;
   $4 = $11;
   $8 = $1;
   $5 = $9;
   $10 = ($3 | 0) == ($4 | 0) & $8 >>> 0 > $5 >>> 0 | $3 >>> 0 > $4 >>> 0;
  }
  $10 = Math_imul($16, $10);
 }
 return $10;
}



function btGeneric6DofSpring2Constraint__setLinearLimits_28btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 $9 = global$0 - 112 | 0;
 $12 = $9;
 if ($9 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $12;
 HEAP32[$9 + 100 >> 2] = 0;
 HEAP32[$9 + 104 >> 2] = 0;
 HEAP32[$9 + 108 >> 2] = 0;
 HEAP32[$9 + 92 >> 2] = 0;
 HEAP32[$9 + 96 >> 2] = 0;
 HEAP8[$9 + 88 | 0] = 0;
 HEAP32[$9 + 84 >> 2] = 0;
 HEAP8[$9 + 80 | 0] = 0;
 HEAP32[$9 + 76 >> 2] = 0;
 HEAP8[$9 + 72 | 0] = 0;
 HEAP32[$9 + 68 >> 2] = 0;
 HEAP8[$9 + 64 | 0] = 0;
 HEAP32[$9 + 56 >> 2] = 0;
 HEAP32[$9 + 60 >> 2] = 1036831949;
 HEAP8[$9 + 52 | 0] = 0;
 HEAP32[$9 + 48 >> 2] = 0;
 HEAP32[$9 + 40 >> 2] = 0;
 HEAP32[$9 + 44 >> 2] = 1063675494;
 HEAP32[$9 + 32 >> 2] = 0;
 HEAP32[$9 + 36 >> 2] = 1045220557;
 HEAP32[$9 + 24 >> 2] = 1065353216;
 HEAP32[$9 + 28 >> 2] = -1082130432;
 $18 = $1 + 4 | 0;
 $19 = $0 + 680 | 0;
 while (1) {
  $11 = $14 + $19 | 0;
  $13 = HEAPU8[$11 + 112 | 0];
  $12 = $14 << 2;
  $10 = $19 + $12 | 0;
  $16 = HEAP32[$10 + 276 >> 2];
  label$3 : {
   label$4 : {
    if ($16) {
     break label$4;
    }
    $17 = $13 & 255;
    $13 = 1;
    if ($17) {
     break label$4;
    }
    $13 = 0;
    if (!HEAPU8[($0 + $14 | 0) + 798 | 0]) {
     break label$3;
    }
   }
   $17 = HEAP32[$10 + 32 >> 2];
   HEAP32[$9 + 108 >> 2] = $16;
   HEAP32[$9 + 32 >> 2] = $17;
   HEAP32[$9 + 104 >> 2] = HEAP32[$10 + 260 >> 2];
   HEAP32[$9 + 96 >> 2] = HEAP32[$10 + 228 >> 2];
   $16 = HEAP32[$10 + 244 >> 2];
   HEAP8[$9 + 52 | 0] = $13;
   HEAP32[$9 + 100 >> 2] = $16;
   HEAP8[$9 + 64 | 0] = HEAPU8[$11 + 115 | 0];
   HEAP32[$9 + 68 >> 2] = HEAP32[$10 + 124 >> 2];
   HEAP8[$9 + 72 | 0] = HEAPU8[$11 + 118 | 0];
   HEAP32[$9 + 76 >> 2] = HEAP32[$10 + 140 >> 2];
   HEAP8[$9 + 80 | 0] = HEAPU8[$11 + 156 | 0];
   HEAP32[$9 + 84 >> 2] = HEAP32[$10 + 160 >> 2];
   HEAP8[$9 + 88 | 0] = HEAPU8[$11 + 176 | 0];
   HEAP32[$9 + 92 >> 2] = HEAP32[$10 + 180 >> 2];
   HEAP32[$9 + 28 >> 2] = HEAP32[$10 + 16 >> 2];
   HEAP32[$9 + 24 >> 2] = HEAP32[$10 >> 2];
   HEAP32[$9 + 60 >> 2] = HEAP32[$10 + 212 >> 2];
   HEAP32[$9 + 56 >> 2] = HEAP32[$10 + 196 >> 2];
   $10 = $0 + $12 | 0;
   HEAP32[$9 + 8 >> 2] = HEAP32[$10 + 1236 >> 2];
   HEAP32[$9 + 12 >> 2] = HEAP32[$10 + 1252 >> 2];
   $11 = HEAP32[$10 + 1268 >> 2];
   HEAP32[$9 + 20 >> 2] = 0;
   HEAP32[$9 + 16 >> 2] = $11;
   $13 = $9;
   $11 = HEAP32[$0 + 1456 >> 2] >> $12;
   $12 = $10 + 744 | 0;
   label$5 : {
    if ($11 & 1) {
     break label$5;
    }
    $12 = HEAP32[$1 + 32 >> 2];
   }
   HEAP32[$13 + 40 >> 2] = HEAP32[$12 >> 2];
   HEAP32[$9 + 36 >> 2] = HEAP32[($11 & 2 ? $10 + 728 | 0 : $18) >> 2];
   $12 = $11 & 4 ? $10 + 776 | 0 : HEAP32[$1 + 32 >> 2];
   HEAP32[$9 + 48 >> 2] = HEAP32[$12 >> 2];
   HEAP32[$9 + 44 >> 2] = HEAP32[($11 & 8 ? $10 + 760 | 0 : $18) >> 2];
   $11 = 1;
   $12 = (($14 + 2 & 255) >>> 0) % 3 | 0;
   $13 = Math_imul((($14 + 1 & 255) >>> 0) % 3 | 0, 88) + $0 | 0;
   $10 = HEAP32[$13 + 1052 >> 2] + -1 | 0;
   label$8 : {
    if ($10 >>> 0 <= 3) {
     label$10 : {
      switch ($10 - 2 | 0) {
      case 0:
       $15 = +HEAPF32[$13 + 1040 >> 2];
       $11 = $15 < -.001 | $15 > .001;
       break label$8;
      case 1:
       break label$10;
      default:
       break label$8;
      }
     }
     if (+HEAPF32[$13 + 1040 >> 2] < -.001) {
      break label$8;
     }
     $11 = +HEAPF32[$13 + 1044 >> 2] > .001;
     break label$8;
    }
    $11 = 0;
   }
   $10 = 1;
   $13 = Math_imul($12, 88) + $0 | 0;
   $12 = HEAP32[$13 + 1052 >> 2] + -1 | 0;
   label$12 : {
    if ($12 >>> 0 > 3) {
     break label$12;
    }
    label$13 : {
     label$14 : {
      switch ($12 - 2 | 0) {
      case 0:
       $15 = +HEAPF32[$13 + 1040 >> 2];
       if ($15 < -.001 | $15 > .001) {
        break label$13;
       }
       break label$12;
      case 1:
       break label$14;
      default:
       break label$13;
      }
     }
     if (+HEAPF32[$13 + 1040 >> 2] < -.001) {
      break label$13;
     }
     if (!(+HEAPF32[$13 + 1044 >> 2] > .001)) {
      break label$12;
     }
    }
    $10 = 0;
   }
   $2 = btGeneric6DofSpring2Constraint__get_limit_motor_info2_28btRotationalLimitMotor2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btVector3__2c_20int_2c_20int_29($0, $9 + 24 | 0, $3, $4, $5, $6, $7, $8, $1, $2, $9 + 8 | 0, 0, $11 ? $10 : 1) + $2 | 0;
  }
  $14 = $14 + 1 | 0;
  if (($14 | 0) != 3) {
   continue;
  }
  break;
 }
 $0 = $9 + 112 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function btSimulationIslandManager__buildIslands_28btDispatcher__2c_20btCollisionWorld__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 $11 = global$0 - 16 | 0;
 $4 = $11;
 if ($11 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $14 = CProfileSample__CProfileSample_28char_20const__29($11 + 8 | 0, 6096);
 $3 = HEAP32[$0 + 28 >> 2];
 if (($3 | 0) <= -1) {
  if (HEAP32[$0 + 32 >> 2] <= -1) {
   $4 = HEAP32[$0 + 36 >> 2];
   if ($4) {
    if (HEAPU8[$0 + 40 | 0]) {
     btAlignedFreeInternal_28void__29($4);
    }
    HEAP32[$0 + 36 >> 2] = 0;
   }
   HEAP32[$0 + 32 >> 2] = 0;
   HEAP32[$0 + 36 >> 2] = 0;
   HEAP8[$0 + 40 | 0] = 1;
  }
  while (1) {
   HEAP32[HEAP32[$0 + 36 >> 2] + ($3 << 2) >> 2] = 0;
   $4 = $3 + 1 | 0;
   $6 = $4 >>> 0 >= $3 >>> 0;
   $3 = $4;
   if ($6) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 28 >> 2] = 0;
 btUnionFind__sortIslands_28_29($0 + 4 | 0);
 $9 = HEAP32[$0 + 8 >> 2];
 if (($9 | 0) >= 1) {
  $4 = 0;
  while (1) {
   $7 = $4;
   $6 = HEAP32[$0 + 16 >> 2];
   $5 = HEAP32[$6 + ($4 << 3) >> 2];
   while (1) {
    $10 = $4;
    $4 = $4 + 1 | 0;
    if (HEAP32[($4 << 3) + $6 >> 2] == ($5 | 0) ? ($4 | 0) < ($9 | 0) : 0) {
     continue;
    }
    break;
   }
   label$11 : {
    $12 = ($7 | 0) > ($10 | 0);
    if ($12) {
     break label$11;
    }
    $15 = HEAP32[$2 + 16 >> 2];
    $13 = 1;
    $3 = $7;
    while (1) {
     $8 = HEAP32[(HEAP32[(($3 << 3) + $6 | 0) + 4 >> 2] << 2) + $15 >> 2];
     if (HEAP32[$8 + 208 >> 2] == ($5 | 0)) {
      $8 = HEAP32[$8 + 220 >> 2];
      $13 = ($8 | 0) != 4 & (($8 | 0) != 1 & $13);
     }
     $8 = ($3 | 0) < ($10 | 0);
     $3 = $3 + 1 | 0;
     if ($8) {
      continue;
     }
     break;
    }
    if (!$13) {
     if ($12) {
      break label$11;
     }
     while (1) {
      $3 = HEAP32[HEAP32[$2 + 16 >> 2] + (HEAP32[(($7 << 3) + $6 | 0) + 4 >> 2] << 2) >> 2];
      if (!(HEAP32[$3 + 208 >> 2] != ($5 | 0) | HEAP32[$3 + 220 >> 2] != 2)) {
       btCollisionObject__setActivationState_28int_29_20const($3, 3);
       HEAP32[$3 + 224 >> 2] = 0;
      }
      if (($7 | 0) >= ($10 | 0)) {
       break label$11;
      }
      $7 = $7 + 1 | 0;
      $6 = HEAP32[$0 + 16 >> 2];
      continue;
     }
    }
    if ($12) {
     break label$11;
    }
    while (1) {
     $3 = HEAP32[HEAP32[$2 + 16 >> 2] + (HEAP32[(($7 << 3) + $6 | 0) + 4 >> 2] << 2) >> 2];
     if (HEAP32[$3 + 208 >> 2] == ($5 | 0)) {
      btCollisionObject__setActivationState_28int_29_20const($3, 2);
     }
     if (($7 | 0) >= ($10 | 0)) {
      break label$11;
     }
     $7 = $7 + 1 | 0;
     $6 = HEAP32[$0 + 16 >> 2];
     continue;
    }
   }
   if (($4 | 0) < ($9 | 0)) {
    continue;
   }
   break;
  }
 }
 $7 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1) | 0;
 if (($7 | 0) >= 1) {
  $4 = 0;
  while (1) {
   $10 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 40 >> 2]]($1, $4) | 0;
   $3 = HEAP32[$10 + 840 >> 2];
   $6 = HEAP32[$10 + 836 >> 2];
   label$21 : {
    if (!$3 | HEAP32[$3 + 220 >> 2] == 2 ? !(HEAP32[$6 + 220 >> 2] != 2 ? $6 : 0) : 0) {
     break label$21;
    }
    $5 = HEAP32[$6 + 204 >> 2];
    if (!(!($5 & 2) | $5 & 4 | HEAP32[$6 + 220 >> 2] == 2)) {
     btCollisionObject__activate_28bool_29_20const($3, 0);
    }
    $5 = HEAP32[$3 + 204 >> 2];
    if (!(!($5 & 2) | $5 & 4 | HEAP32[$3 + 220 >> 2] == 2)) {
     btCollisionObject__activate_28bool_29_20const($6, 0);
    }
    if (!HEAPU8[$0 + 64 | 0]) {
     break label$21;
    }
    if (!FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, $6, $3)) {
     break label$21;
    }
    $5 = HEAP32[$0 + 28 >> 2];
    label$26 : {
     if (($5 | 0) != HEAP32[$0 + 32 >> 2]) {
      break label$26;
     }
     $9 = $5 ? $5 << 1 : 1;
     if (($5 | 0) >= ($9 | 0)) {
      break label$26;
     }
     $3 = 0;
     $8 = 0;
     if ($9) {
      $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($9 << 2, 16);
      $5 = HEAP32[$0 + 28 >> 2];
     }
     if (($5 | 0) >= 1) {
      while (1) {
       $6 = $3 << 2;
       HEAP32[$8 + $6 >> 2] = HEAP32[HEAP32[$0 + 36 >> 2] + $6 >> 2];
       $3 = $3 + 1 | 0;
       if (($5 | 0) != ($3 | 0)) {
        continue;
       }
       break;
      }
     }
     $3 = HEAP32[$0 + 36 >> 2];
     if ($3) {
      if (HEAPU8[$0 + 40 | 0]) {
       btAlignedFreeInternal_28void__29($3);
       $5 = HEAP32[$0 + 28 >> 2];
      }
      HEAP32[$0 + 36 >> 2] = 0;
     }
     HEAP32[$0 + 36 >> 2] = $8;
     HEAP8[$0 + 40 | 0] = 1;
     HEAP32[$0 + 32 >> 2] = $9;
    }
    HEAP32[HEAP32[$0 + 36 >> 2] + ($5 << 2) >> 2] = $10;
    HEAP32[$0 + 28 >> 2] = $5 + 1;
   }
   $4 = $4 + 1 | 0;
   if (($7 | 0) != ($4 | 0)) {
    continue;
   }
   break;
  }
 }
 CProfileSample___CProfileSample_28_29($14);
 $0 = $11 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDbvtBroadphase__collide_28btDispatcher__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0);
 $6 = global$0 - 32 | 0;
 $10 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $10;
 $9 = $0 + 4 | 0;
 btDbvt__optimizeIncremental_28int_29($9, ((Math_imul(HEAP32[$0 + 112 >> 2], HEAP32[$0 + 16 >> 2]) | 0) / 100 | 0) + 1 | 0);
 if (HEAP32[$0 + 124 >> 2]) {
  $2 = ((Math_imul(HEAP32[$0 + 108 >> 2], HEAP32[$0 + 56 >> 2]) | 0) / 100 | 0) + 1 | 0;
  btDbvt__optimizeIncremental_28int_29($0 + 44 | 0, $2);
  $2 = HEAP32[$0 + 124 >> 2] - $2 | 0;
  HEAP32[$0 + 124 >> 2] = ($2 | 0) > 0 ? $2 : 0;
 }
 $2 = (HEAP32[$0 + 104 >> 2] + 1 | 0) % 2 | 0;
 HEAP32[$0 + 104 >> 2] = $2;
 $2 = HEAP32[(($2 << 2) + $0 | 0) + 84 >> 2];
 if ($2) {
  $8 = $0 + 44 | 0;
  $10 = $6;
  while (1) {
   $5 = HEAP32[$2 + 56 >> 2];
   $3 = HEAP32[$2 + 52 >> 2];
   label$5 : {
    if ($3) {
     $3 = $3 + 56 | 0;
     break label$5;
    }
    $3 = ((HEAP32[$2 + 60 >> 2] << 2) + $0 | 0) + 84 | 0;
   }
   HEAP32[$3 >> 2] = $5;
   $3 = HEAP32[$2 + 56 >> 2];
   if ($3) {
    HEAP32[$3 + 52 >> 2] = HEAP32[$2 + 52 >> 2];
   }
   HEAP32[$2 + 52 >> 2] = 0;
   HEAP32[$2 + 56 >> 2] = HEAP32[$0 + 92 >> 2];
   $3 = HEAP32[$0 + 92 >> 2];
   if ($3) {
    HEAP32[$3 + 52 >> 2] = $2;
   }
   HEAP32[$0 + 92 >> 2] = $2;
   btDbvt__remove_28btDbvtNode__29($9, HEAP32[$2 + 48 >> 2]);
   $3 = HEAP32[$2 + 28 >> 2];
   $4 = HEAP32[$2 + 24 >> 2];
   HEAP32[$6 + 8 >> 2] = $4;
   HEAP32[$6 + 12 >> 2] = $3;
   $4 = HEAP32[$2 + 20 >> 2];
   $3 = HEAP32[$2 + 16 >> 2];
   HEAP32[$6 >> 2] = $3;
   HEAP32[$6 + 4 >> 2] = $4;
   $3 = HEAP32[$2 + 44 >> 2];
   $4 = HEAP32[$2 + 40 >> 2];
   $7 = $4;
   $4 = $10;
   HEAP32[$4 + 24 >> 2] = $7;
   HEAP32[$4 + 28 >> 2] = $3;
   $4 = HEAP32[$2 + 36 >> 2];
   $3 = HEAP32[$2 + 32 >> 2];
   $7 = $3;
   $3 = $10;
   HEAP32[$3 + 16 >> 2] = $7;
   HEAP32[$3 + 20 >> 2] = $4;
   $3 = btDbvt__insert_28btDbvtAabbMm_20const__2c_20void__29($8, $6, $2);
   HEAP32[$2 + 60 >> 2] = 2;
   HEAP32[$2 + 48 >> 2] = $3;
   $2 = $5;
   if ($2) {
    continue;
   }
   break;
  }
  HEAP8[$0 + 154 | 0] = 1;
  HEAP32[$0 + 124 >> 2] = HEAP32[$0 + 56 >> 2];
 }
 HEAP32[$6 >> 2] = 16064;
 HEAP32[$6 + 4 >> 2] = $0;
 label$9 : {
  if (!HEAPU8[$0 + 153 | 0]) {
   break label$9;
  }
  btDbvt__collideTTpersistentStack_28btDbvtNode_20const__2c_20btDbvtNode_20const__2c_20btDbvt__ICollide__29($9, HEAP32[$0 + 4 >> 2], HEAP32[$0 + 44 >> 2], $6);
  if (!HEAPU8[$0 + 153 | 0]) {
   break label$9;
  }
  $2 = HEAP32[$9 >> 2];
  btDbvt__collideTTpersistentStack_28btDbvtNode_20const__2c_20btDbvtNode_20const__2c_20btDbvt__ICollide__29($9, $2, $2, $6);
 }
 label$10 : {
  if (!HEAPU8[$0 + 154 | 0]) {
   break label$10;
  }
  $2 = HEAP32[$0 + 96 >> 2];
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2) | 0;
  $4 = HEAP32[$3 + 4 >> 2];
  if (($4 | 0) < 1) {
   break label$10;
  }
  $10 = $0;
  $7 = $0 + 144 | 0;
  $2 = HEAP32[$0 + 120 >> 2];
  $5 = (Math_imul(HEAP32[$0 + 116 >> 2], $4) | 0) / 100 | 0;
  $2 = ($2 | 0) > ($5 | 0) ? $2 : $5;
  $5 = ($4 | 0) < ($2 | 0) ? $4 : $2;
  label$11 : {
   if (($5 | 0) >= 1) {
    $2 = 0;
    while (1) {
     $4 = HEAP32[$3 + 12 >> 2] + ((HEAP32[$10 + 144 >> 2] + $2 | 0) % ($4 | 0) << 4) | 0;
     $9 = HEAP32[$4 >> 2];
     $8 = HEAP32[$9 + 48 >> 2];
     $4 = HEAP32[$4 + 4 >> 2];
     $7 = HEAP32[$4 + 48 >> 2];
     label$14 : {
      label$15 : {
       if (HEAPF32[$8 >> 2] <= HEAPF32[$7 + 16 >> 2] ^ 1 | HEAPF32[$8 + 16 >> 2] >= HEAPF32[$7 >> 2] ^ 1 | (HEAPF32[$8 + 4 >> 2] <= HEAPF32[$7 + 20 >> 2] ^ 1 | HEAPF32[$8 + 20 >> 2] >= HEAPF32[$7 + 4 >> 2] ^ 1)) {
        break label$15;
       }
       if (!(HEAPF32[$8 + 8 >> 2] <= HEAPF32[$7 + 24 >> 2])) {
        break label$15;
       }
       if (HEAPF32[$8 + 24 >> 2] >= HEAPF32[$7 + 8 >> 2]) {
        break label$14;
       }
      }
      $8 = HEAP32[$0 + 96 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 12 >> 2]]($8, $9, $4, $1) | 0;
      $2 = $2 + -1 | 0;
      $5 = $5 + -1 | 0;
     }
     $4 = HEAP32[$3 + 4 >> 2];
     $2 = $2 + 1 | 0;
     if (($2 | 0) < ($5 | 0)) {
      continue;
     }
     break;
    }
    $7 = $0 + 144 | 0;
    $2 = 0;
    if (($4 | 0) <= 0) {
     break label$11;
    }
   }
   $2 = (HEAP32[$7 >> 2] + $5 | 0) % ($4 | 0) | 0;
  }
  HEAP32[$7 >> 2] = $2;
 }
 HEAP8[$0 + 154 | 0] = 0;
 HEAP32[$0 + 120 >> 2] = 1;
 HEAP32[$0 + 140 >> 2] = HEAP32[$0 + 140 >> 2] + 1;
 $2 = HEAP32[$0 + 132 >> 2];
 $1 = $0;
 $5 = HEAP32[$0 + 128 >> 2];
 $11 = Math_fround(0);
 label$16 : {
  if (!$5) {
   break label$16;
  }
  $11 = Math_fround(Math_fround($2 >>> 0) / Math_fround($5 >>> 0));
 }
 HEAPF32[$1 + 136 >> 2] = $11;
 HEAP32[$0 + 132 >> 2] = $2 >>> 1;
 HEAP32[$0 + 128 >> 2] = $5 >>> 1;
 $0 = $6 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuantizedBvh__reportAabbOverlappingNodex_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
 var $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 $6 = global$0 - 16 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 label$2 : {
  if (HEAPU8[$0 + 60 | 0]) {
   $9 = HEAPF32[$0 + 28 >> 2];
   $8 = HEAPF32[$0 + 12 >> 2];
   $4 = HEAPF32[$2 + 8 >> 2];
   $4 = $4 < $8 ? $8 : $4;
   $15 = HEAPF32[$0 + 44 >> 2];
   $4 = Math_fround(Math_fround(($9 < $4 ? $9 : $4) - $8) * $15);
   label$4 : {
    if ($4 < Math_fround(4294967296) & $4 >= Math_fround(0)) {
     $7 = ~~$4 >>> 0;
     break label$4;
    }
    $7 = 0;
   }
   $16 = HEAPF32[$0 + 40 >> 2];
   $12 = HEAPF32[$0 + 24 >> 2];
   $4 = HEAPF32[$0 + 8 >> 2];
   $17 = HEAPF32[$0 + 36 >> 2];
   $13 = HEAPF32[$0 + 20 >> 2];
   $11 = HEAPF32[$0 + 4 >> 2];
   $5 = HEAPF32[$2 >> 2];
   $10 = HEAPF32[$2 + 4 >> 2];
   $18 = $7 & 65534;
   HEAP16[$6 + 14 >> 1] = $18;
   $7 = $6;
   $10 = $10 < $4 ? $4 : $10;
   $10 = Math_fround($16 * Math_fround(($12 < $10 ? $12 : $10) - $4));
   label$6 : {
    if ($10 < Math_fround(4294967296) & $10 >= Math_fround(0)) {
     $2 = ~~$10 >>> 0;
     break label$6;
    }
    $2 = 0;
   }
   $19 = $2 & 65534;
   HEAP16[$7 + 12 >> 1] = $19;
   $7 = $6;
   $5 = $5 < $11 ? $11 : $5;
   $5 = Math_fround(Math_fround(($13 < $5 ? $13 : $5) - $11) * $17);
   label$8 : {
    if ($5 < Math_fround(4294967296) & $5 >= Math_fround(0)) {
     $2 = ~~$5 >>> 0;
     break label$8;
    }
    $2 = 0;
   }
   $20 = $2 & 65534;
   HEAP16[$7 + 10 >> 1] = $20;
   $5 = HEAPF32[$3 + 8 >> 2];
   $5 = $5 < $8 ? $8 : $5;
   $8 = Math_fround(Math_fround($15 * Math_fround(($9 < $5 ? $9 : $5) - $8)) + Math_fround(1));
   label$10 : {
    if ($8 < Math_fround(4294967296) & $8 >= Math_fround(0)) {
     $2 = ~~$8 >>> 0;
     break label$10;
    }
    $2 = 0;
   }
   $8 = HEAPF32[$3 >> 2];
   $9 = HEAPF32[$3 + 4 >> 2];
   $21 = $2 | 1;
   HEAP16[$6 + 8 >> 1] = $21;
   $3 = $6;
   $9 = $9 < $4 ? $4 : $9;
   $4 = Math_fround(Math_fround($16 * Math_fround(($12 < $9 ? $12 : $9) - $4)) + Math_fround(1));
   label$12 : {
    if ($4 < Math_fround(4294967296) & $4 >= Math_fround(0)) {
     $2 = ~~$4 >>> 0;
     break label$12;
    }
    $2 = 0;
   }
   $22 = $2 | 1;
   HEAP16[$3 + 6 >> 1] = $22;
   $3 = $6;
   $4 = $8 < $11 ? $11 : $8;
   $4 = Math_fround(Math_fround($17 * Math_fround(($13 < $4 ? $13 : $4) - $11)) + Math_fround(1));
   label$14 : {
    if ($4 < Math_fround(4294967296) & $4 >= Math_fround(0)) {
     $2 = ~~$4 >>> 0;
     break label$14;
    }
    $2 = 0;
   }
   $23 = $2 | 1;
   HEAP16[$3 + 4 >> 1] = $23;
   $2 = HEAP32[$0 + 144 >> 2];
   if ($2 >>> 0 > 2) {
    break label$2;
   }
   label$16 : {
    switch ($2 - 1 | 0) {
    default:
     $7 = 0;
     $24 = HEAP32[$0 + 56 >> 2];
     if (($24 | 0) >= 1) {
      $0 = HEAP32[$0 + 136 >> 2];
      $2 = 0;
      while (1) {
       $14 = HEAP32[$0 + 12 >> 2];
       $25 = ($14 | 0) < 0;
       $3 = $20 >>> 0 <= HEAPU16[$0 + 6 >> 1] & $23 >>> 0 >= HEAPU16[$0 >> 1] & $18 >>> 0 <= HEAPU16[$0 + 10 >> 1] & $21 >>> 0 >= HEAPU16[$0 + 4 >> 1] & $19 >>> 0 <= HEAPU16[$0 + 8 >> 1] & $22 >>> 0 >= HEAPU16[$0 + 2 >> 1];
       if (!($25 | !$3)) {
        FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $14 >>> 21 | 0, $14 & 2097151);
       }
       label$22 : {
        if (!(($3 ^ -1) & $25)) {
         $2 = $2 + 1 | 0;
         $0 = $0 + 16 | 0;
         break label$22;
        }
        $3 = HEAP32[$0 + 12 >> 2];
        $2 = $2 - $3 | 0;
        $0 = $0 - ($3 << 4) | 0;
       }
       $7 = $7 + 1 | 0;
       if (($2 | 0) < ($24 | 0)) {
        continue;
       }
       break;
      }
     }
     if (HEAP32[5681] >= ($7 | 0)) {
      break label$2;
     }
     HEAP32[5681] = $7;
     break label$2;
    case 0:
     btQuantizedBvh__walkStacklessQuantizedTreeCacheFriendly_28btNodeOverlapCallback__2c_20unsigned_20short__2c_20unsigned_20short__29_20const($0, $1, $6 + 10 | 0, $6 + 4 | 0);
     break label$2;
    case 1:
     break label$16;
    }
   }
   btQuantizedBvh__walkRecursiveQuantizedTreeAgainstQueryAabb_28btQuantizedBvhNode_20const__2c_20btNodeOverlapCallback__2c_20unsigned_20short__2c_20unsigned_20short__29_20const($0, HEAP32[$0 + 136 >> 2], $1, $6 + 10 | 0, $6 + 4 | 0);
   break label$2;
  }
  btQuantizedBvh__walkStacklessTree_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3);
 }
 $0 = $6 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDbvt__collideTTpersistentStack_28btDbvtNode_20const__2c_20btDbvtNode_20const__2c_20btDbvt__ICollide__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 if (!(!$1 | !$2)) {
  if (!(HEAP32[$0 + 24 >> 2] > 127 | HEAP32[$0 + 28 >> 2] > 127)) {
   $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(1024, 16);
   $7 = HEAP32[$0 + 24 >> 2];
   if (($7 | 0) >= 1) {
    while (1) {
     $5 = $4 << 3;
     $9 = $5 + HEAP32[$0 + 32 >> 2] | 0;
     $8 = HEAP32[$9 >> 2];
     $10 = HEAP32[$9 + 4 >> 2];
     $9 = $8;
     $8 = $5 + $6 | 0;
     HEAP32[$8 >> 2] = $9;
     HEAP32[$8 + 4 >> 2] = $10;
     $4 = $4 + 1 | 0;
     if (($7 | 0) != ($4 | 0)) {
      continue;
     }
     break;
    }
   }
   $4 = HEAP32[$0 + 32 >> 2];
   if ($4) {
    if (HEAPU8[$0 + 36 | 0]) {
     btAlignedFreeInternal_28void__29($4);
    }
    HEAP32[$0 + 32 >> 2] = 0;
   }
   HEAP32[$0 + 32 >> 2] = $6;
   HEAP32[$0 + 28 >> 2] = 128;
   HEAP8[$0 + 36 | 0] = 1;
  }
  HEAP32[$0 + 24 >> 2] = 128;
  $4 = HEAP32[$0 + 32 >> 2];
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $1;
  $1 = 124;
  $6 = 1;
  while (1) {
   $11 = $6;
   $2 = HEAP32[$0 + 32 >> 2];
   $6 = $6 + -1 | 0;
   $12 = $6 << 3;
   $4 = $2 + $12 | 0;
   $7 = HEAP32[$4 + 4 >> 2];
   $5 = HEAP32[$4 >> 2];
   if (($6 | 0) > ($1 | 0)) {
    $4 = HEAP32[$0 + 24 >> 2];
    $13 = $4 << 1;
    if (!(($4 | 0) >= ($13 | 0) | HEAP32[$0 + 28 >> 2] >= ($13 | 0))) {
     label$10 : {
      if (!$4) {
       $2 = 0;
       break label$10;
      }
      $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 4, 16);
      $4 = 0;
      $14 = HEAP32[$0 + 24 >> 2];
      if (($14 | 0) < 1) {
       break label$10;
      }
      while (1) {
       $1 = $4 << 3;
       $9 = $1 + HEAP32[$0 + 32 >> 2] | 0;
       $10 = HEAP32[$9 >> 2];
       $8 = HEAP32[$9 + 4 >> 2];
       $9 = $10;
       $10 = $1 + $2 | 0;
       HEAP32[$10 >> 2] = $9;
       HEAP32[$10 + 4 >> 2] = $8;
       $4 = $4 + 1 | 0;
       if (($14 | 0) != ($4 | 0)) {
        continue;
       }
       break;
      }
     }
     $4 = HEAP32[$0 + 32 >> 2];
     if ($4) {
      if (HEAPU8[$0 + 36 | 0]) {
       btAlignedFreeInternal_28void__29($4);
      }
      HEAP32[$0 + 32 >> 2] = 0;
     }
     HEAP32[$0 + 32 >> 2] = $2;
     HEAP8[$0 + 36 | 0] = 1;
     HEAP32[$0 + 28 >> 2] = $13;
    }
    HEAP32[$0 + 24 >> 2] = $13;
    $1 = $13 + -4 | 0;
   }
   label$15 : {
    if (($5 | 0) == ($7 | 0)) {
     if (!HEAP32[$5 + 40 >> 2]) {
      break label$15;
     }
     $4 = $2 + $12 | 0;
     $6 = HEAP32[$5 + 36 >> 2];
     HEAP32[$4 + 4 >> 2] = $6;
     HEAP32[$4 >> 2] = $6;
     $4 = $11 << 3;
     $6 = $4 + HEAP32[$0 + 32 >> 2] | 0;
     $7 = HEAP32[$5 + 40 >> 2];
     HEAP32[$6 + 4 >> 2] = $7;
     HEAP32[$6 >> 2] = $7;
     $10 = HEAP32[$5 + 40 >> 2];
     $8 = HEAP32[$5 + 36 >> 2];
     $2 = $8;
     $8 = HEAP32[$0 + 32 >> 2] + $4 | 0;
     HEAP32[$8 + 8 >> 2] = $2;
     HEAP32[$8 + 12 >> 2] = $10;
     $6 = $11 + 2 | 0;
     break label$15;
    }
    if (HEAPF32[$5 >> 2] <= HEAPF32[$7 + 16 >> 2] ^ 1 | HEAPF32[$5 + 16 >> 2] >= HEAPF32[$7 >> 2] ^ 1 | (HEAPF32[$5 + 4 >> 2] <= HEAPF32[$7 + 20 >> 2] ^ 1 | HEAPF32[$5 + 20 >> 2] >= HEAPF32[$7 + 4 >> 2] ^ 1)) {
     break label$15;
    }
    if (HEAPF32[$5 + 8 >> 2] <= HEAPF32[$7 + 24 >> 2] ^ 1 | HEAPF32[$5 + 24 >> 2] >= HEAPF32[$7 + 8 >> 2] ^ 1) {
     break label$15;
    }
    $4 = HEAP32[$7 + 40 >> 2];
    if (HEAP32[$5 + 40 >> 2]) {
     $6 = HEAP32[$5 + 36 >> 2];
     if ($4) {
      $4 = $2 + $12 | 0;
      HEAP32[$4 + 4 >> 2] = HEAP32[$7 + 36 >> 2];
      HEAP32[$4 >> 2] = $6;
      $6 = HEAP32[$5 + 40 >> 2];
      $4 = $11 << 3;
      $2 = $4 + HEAP32[$0 + 32 >> 2] | 0;
      HEAP32[$2 + 4 >> 2] = HEAP32[$7 + 36 >> 2];
      HEAP32[$2 >> 2] = $6;
      $6 = HEAP32[$5 + 36 >> 2];
      $2 = HEAP32[$0 + 32 >> 2] + $4 | 0;
      HEAP32[$2 + 12 >> 2] = HEAP32[$7 + 40 >> 2];
      HEAP32[$2 + 8 >> 2] = $6;
      $5 = HEAP32[$5 + 40 >> 2];
      $4 = HEAP32[$0 + 32 >> 2] + $4 | 0;
      HEAP32[$4 + 20 >> 2] = HEAP32[$7 + 40 >> 2];
      HEAP32[$4 + 16 >> 2] = $5;
      $6 = $11 + 3 | 0;
      break label$15;
     }
     $4 = $2 + $12 | 0;
     HEAP32[$4 + 4 >> 2] = $7;
     HEAP32[$4 >> 2] = $6;
     $4 = HEAP32[$5 + 40 >> 2];
     $5 = HEAP32[$0 + 32 >> 2] + ($11 << 3) | 0;
     HEAP32[$5 + 4 >> 2] = $7;
     HEAP32[$5 >> 2] = $4;
     $6 = $11 + 1 | 0;
     break label$15;
    }
    if ($4) {
     $4 = $2 + $12 | 0;
     HEAP32[$4 + 4 >> 2] = HEAP32[$7 + 36 >> 2];
     HEAP32[$4 >> 2] = $5;
     $4 = HEAP32[$0 + 32 >> 2] + ($11 << 3) | 0;
     HEAP32[$4 + 4 >> 2] = HEAP32[$7 + 40 >> 2];
     HEAP32[$4 >> 2] = $5;
     $6 = $11 + 1 | 0;
     break label$15;
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $5, $7);
   }
   if ($6) {
    continue;
   }
   break;
  }
 }
}
function btDbvtBroadphase__setAabb_28btBroadphaseProxy__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btDispatcher__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0);
 $5 = global$0 - 48 | 0;
 $4 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $4 = $2;
 $7 = HEAP32[$4 + 8 >> 2];
 $6 = HEAP32[$4 + 12 >> 2];
 HEAP32[$5 + 24 >> 2] = $7;
 HEAP32[$5 + 28 >> 2] = $6;
 $7 = HEAP32[$4 + 4 >> 2];
 $6 = HEAP32[$4 >> 2];
 HEAP32[$5 + 16 >> 2] = $6;
 HEAP32[$5 + 20 >> 2] = $7;
 $4 = $3;
 $7 = HEAP32[$4 + 8 >> 2];
 $6 = HEAP32[$4 + 12 >> 2];
 HEAP32[$5 + 40 >> 2] = $7;
 HEAP32[$5 + 44 >> 2] = $6;
 $7 = HEAP32[$4 + 4 >> 2];
 $6 = HEAP32[$4 >> 2];
 HEAP32[$5 + 32 >> 2] = $6;
 HEAP32[$5 + 36 >> 2] = $7;
 label$2 : {
  if (HEAP32[$1 + 60 >> 2] == 2) {
   btDbvt__remove_28btDbvtNode__29($0 + 44 | 0, HEAP32[$1 + 48 >> 2]);
   HEAP32[$1 + 48 >> 2] = btDbvt__insert_28btDbvtAabbMm_20const__2c_20void__29($0 + 4 | 0, $5 + 16 | 0, $1);
   $9 = 1;
   break label$2;
  }
  $9 = 1;
  HEAP32[$0 + 128 >> 2] = HEAP32[$0 + 128 >> 2] + 1;
  label$4 : {
   $6 = HEAP32[$1 + 48 >> 2];
   if (HEAPF32[$6 >> 2] <= HEAPF32[$5 + 32 >> 2] ^ 1 | HEAPF32[$6 + 16 >> 2] >= HEAPF32[$5 + 16 >> 2] ^ 1 | (HEAPF32[$6 + 4 >> 2] <= HEAPF32[$5 + 36 >> 2] ^ 1 | HEAPF32[$6 + 20 >> 2] >= HEAPF32[$5 + 20 >> 2] ^ 1)) {
    break label$4;
   }
   if (HEAPF32[$6 + 8 >> 2] <= HEAPF32[$5 + 40 >> 2] ^ 1 | HEAPF32[$6 + 24 >> 2] >= HEAPF32[$5 + 24 >> 2] ^ 1) {
    break label$4;
   }
   $10 = HEAPF32[$1 + 20 >> 2];
   $14 = HEAPF32[$1 + 24 >> 2];
   $16 = HEAPF32[$2 >> 2];
   $17 = HEAPF32[$2 + 4 >> 2];
   $18 = HEAPF32[$2 + 8 >> 2];
   $15 = HEAPF32[$1 + 16 >> 2];
   $11 = HEAPF32[$1 + 36 >> 2];
   $12 = HEAPF32[$1 + 40 >> 2];
   $13 = HEAPF32[$1 + 32 >> 2];
   $8 = HEAPF32[$0 + 100 >> 2];
   HEAP32[$5 + 12 >> 2] = 0;
   $12 = Math_fround($8 * Math_fround(Math_fround($12 - $14) * Math_fround(.5)));
   HEAPF32[$5 + 8 >> 2] = $12;
   $11 = Math_fround($8 * Math_fround(Math_fround($11 - $10) * Math_fround(.5)));
   HEAPF32[$5 + 4 >> 2] = $11;
   $13 = Math_fround($8 * Math_fround(Math_fround($13 - $15) * Math_fround(.5)));
   HEAPF32[$5 >> 2] = $13;
   $8 = Math_fround($17 - $10);
   if (!!(Math_fround($16 - $15) < Math_fround(0))) {
    HEAPF32[$5 >> 2] = -$13;
   }
   $10 = Math_fround($18 - $14);
   if (!!($8 < Math_fround(0))) {
    HEAPF32[$5 + 4 >> 2] = -$11;
   }
   if (!!($10 < Math_fround(0))) {
    HEAPF32[$5 + 8 >> 2] = -$12;
   }
   $9 = 0;
   if (!btDbvt__update_28btDbvtNode__2c_20btDbvtAabbMm__2c_20btVector3_20const__2c_20float_29($0 + 4 | 0, $6, $5 + 16 | 0, $5, Math_fround(.05000000074505806))) {
    break label$2;
   }
   $9 = 1;
   HEAP32[$0 + 132 >> 2] = HEAP32[$0 + 132 >> 2] + 1;
   break label$2;
  }
  btDbvt__update_28btDbvtNode__2c_20btDbvtAabbMm__29($0 + 4 | 0, $6, $5 + 16 | 0);
  HEAP32[$0 + 132 >> 2] = HEAP32[$0 + 132 >> 2] + 1;
 }
 $6 = HEAP32[$1 + 56 >> 2];
 $4 = HEAP32[$1 + 52 >> 2];
 label$8 : {
  if ($4) {
   $4 = $4 + 56 | 0;
   break label$8;
  }
  $4 = ((HEAP32[$1 + 60 >> 2] << 2) + $0 | 0) + 84 | 0;
 }
 HEAP32[$4 >> 2] = $6;
 $6 = HEAP32[$1 + 56 >> 2];
 if ($6) {
  HEAP32[$6 + 52 >> 2] = HEAP32[$1 + 52 >> 2];
 }
 $4 = $2;
 $7 = HEAP32[$4 >> 2];
 $6 = HEAP32[$4 + 4 >> 2];
 HEAP32[$1 + 16 >> 2] = $7;
 HEAP32[$1 + 20 >> 2] = $6;
 $7 = HEAP32[$4 + 12 >> 2];
 $6 = HEAP32[$4 + 8 >> 2];
 HEAP32[$1 + 24 >> 2] = $6;
 HEAP32[$1 + 28 >> 2] = $7;
 $4 = $3;
 $7 = HEAP32[$4 >> 2];
 $6 = HEAP32[$4 + 4 >> 2];
 HEAP32[$1 + 32 >> 2] = $7;
 HEAP32[$1 + 36 >> 2] = $6;
 $7 = HEAP32[$4 + 12 >> 2];
 $6 = HEAP32[$4 + 8 >> 2];
 HEAP32[$1 + 40 >> 2] = $6;
 HEAP32[$1 + 44 >> 2] = $7;
 $2 = HEAP32[$0 + 104 >> 2];
 HEAP32[$1 + 60 >> 2] = $2;
 HEAP32[$1 + 52 >> 2] = 0;
 $4 = ($2 << 2) + $0 | 0;
 $2 = $4 + 84 | 0;
 HEAP32[$1 + 56 >> 2] = HEAP32[$2 >> 2];
 $3 = HEAP32[$4 + 84 >> 2];
 if ($3) {
  HEAP32[$3 + 52 >> 2] = $1;
 }
 HEAP32[$4 + 84 >> 2] = $1;
 label$12 : {
  if (!$9) {
   break label$12;
  }
  HEAP8[$0 + 154 | 0] = 1;
  if (HEAPU8[$0 + 153 | 0]) {
   break label$12;
  }
  HEAP32[$5 >> 2] = 16064;
  HEAP32[$5 + 4 >> 2] = $0;
  $2 = $0 + 44 | 0;
  btDbvt__collideTTpersistentStack_28btDbvtNode_20const__2c_20btDbvtNode_20const__2c_20btDbvt__ICollide__29($2, HEAP32[$0 + 44 >> 2], HEAP32[$1 + 48 >> 2], $5);
  btDbvt__collideTTpersistentStack_28btDbvtNode_20const__2c_20btDbvtNode_20const__2c_20btDbvt__ICollide__29($0 + 4 | 0, HEAP32[$0 + 4 >> 2], HEAP32[$1 + 48 >> 2], $5);
 }
 $0 = $5 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexHullInternal__Rational128__compare_28btConvexHullInternal__Rational128_20const__29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $9 = global$0 - 160 | 0;
 $3 = $9;
 if ($9 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $5 = HEAP32[$0 + 32 >> 2];
 $3 = HEAP32[$1 + 32 >> 2];
 label$2 : {
  if (($5 | 0) != ($3 | 0)) {
   $3 = $5 - $3 | 0;
   break label$2;
  }
  $3 = 0;
  if (!$5) {
   break label$2;
  }
  if (HEAPU8[$0 + 36 | 0]) {
   $4 = $0;
   $2 = HEAP32[$4 >> 2];
   $6 = $2;
   $3 = HEAP32[$4 + 4 >> 2];
   $0 = $3;
   $2 = $5;
   $3 = $2 >> 31;
   $2 = $3;
   $3 = $0;
   $2 = __wasm_i64_mul($6, $3, $5, $2);
   $3 = i64toi32_i32$HIGH_BITS;
   $3 = 0 - btConvexHullInternal__Rational128__compare_28long_20long_29_20const($1, $2, $3) | 0;
   break label$2;
  }
  $4 = $0;
  $3 = HEAP32[$4 + 8 >> 2];
  $6 = $3;
  $2 = HEAP32[$4 + 12 >> 2];
  $8 = $2;
  $3 = $9;
  HEAP32[$3 + 88 >> 2] = $6;
  HEAP32[$3 + 92 >> 2] = $2;
  $2 = HEAP32[$4 >> 2];
  $7 = $2;
  $3 = HEAP32[$4 + 4 >> 2];
  $5 = $3;
  $2 = $9;
  HEAP32[$2 + 56 >> 2] = $6;
  $3 = $8;
  HEAP32[$2 + 60 >> 2] = $3;
  HEAP32[$2 + 80 >> 2] = $7;
  $3 = $5;
  HEAP32[$2 + 84 >> 2] = $3;
  HEAP32[$2 + 48 >> 2] = $7;
  HEAP32[$2 + 52 >> 2] = $3;
  $4 = $1;
  $3 = HEAP32[$4 + 24 >> 2];
  $2 = HEAP32[$4 + 28 >> 2];
  $5 = $3;
  $3 = $9;
  HEAP32[$3 + 40 >> 2] = $5;
  HEAP32[$3 + 44 >> 2] = $2;
  $3 = HEAP32[$4 + 20 >> 2];
  $2 = HEAP32[$4 + 16 >> 2];
  $4 = $2;
  $2 = $9;
  HEAP32[$2 + 32 >> 2] = $4;
  HEAP32[$2 + 36 >> 2] = $3;
  btConvexHullInternal__DMul_btConvexHullInternal__Int128_2c_20unsigned_20long_20long___mul_28btConvexHullInternal__Int128_2c_20btConvexHullInternal__Int128_2c_20btConvexHullInternal__Int128__2c_20btConvexHullInternal__Int128__29($2 + 48 | 0, $2 + 32 | 0, $2 + 144 | 0, $2 + 128 | 0);
  $4 = $0;
  $3 = HEAP32[$4 + 24 >> 2];
  $6 = $3;
  $2 = HEAP32[$4 + 28 >> 2];
  $8 = $2;
  $3 = $9;
  HEAP32[$3 + 72 >> 2] = $6;
  HEAP32[$3 + 76 >> 2] = $2;
  $2 = HEAP32[$4 + 16 >> 2];
  $7 = $2;
  $3 = HEAP32[$4 + 20 >> 2];
  $5 = $3;
  $2 = $9;
  HEAP32[$2 + 24 >> 2] = $6;
  $3 = $8;
  HEAP32[$2 + 28 >> 2] = $3;
  HEAP32[$2 + 16 >> 2] = $7;
  $3 = $5;
  HEAP32[$2 + 20 >> 2] = $3;
  HEAP32[$2 + 64 >> 2] = $7;
  HEAP32[$2 + 68 >> 2] = $3;
  $4 = $1;
  $3 = HEAP32[$4 + 8 >> 2];
  $2 = HEAP32[$4 + 12 >> 2];
  $1 = $3;
  $3 = $9;
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 12 >> 2] = $2;
  $3 = HEAP32[$4 + 4 >> 2];
  $2 = HEAP32[$4 >> 2];
  $1 = $2;
  $2 = $9;
  HEAP32[$2 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = $3;
  btConvexHullInternal__DMul_btConvexHullInternal__Int128_2c_20unsigned_20long_20long___mul_28btConvexHullInternal__Int128_2c_20btConvexHullInternal__Int128_2c_20btConvexHullInternal__Int128__2c_20btConvexHullInternal__Int128__29($2 + 16 | 0, $2, $2 + 112 | 0, $2 + 96 | 0);
  $4 = $2;
  $3 = HEAP32[$2 + 136 >> 2];
  $7 = $3;
  $2 = HEAP32[$2 + 140 >> 2];
  $5 = $2;
  $2 = HEAP32[$4 + 104 >> 2];
  $6 = $2;
  $3 = HEAP32[$4 + 108 >> 2];
  $8 = $3;
  $2 = $3;
  $3 = $5;
  $4 = $7;
  label$5 : {
   if (($2 | 0) == ($3 | 0) & $4 >>> 0 < $6 >>> 0 | $3 >>> 0 < $2 >>> 0) {
    $1 = -1;
    break label$5;
   }
   $1 = 1;
   $3 = $8;
   $4 = $5;
   $2 = $6;
   if (($3 | 0) == ($4 | 0) & $7 >>> 0 > $2 >>> 0 | $4 >>> 0 > $3 >>> 0) {
    break label$5;
   }
   $2 = $9;
   $7 = HEAP32[$2 + 128 >> 2];
   $4 = HEAP32[$2 + 132 >> 2];
   $5 = $4;
   $4 = HEAP32[$2 + 96 >> 2];
   $6 = $4;
   $8 = HEAP32[$2 + 100 >> 2];
   $4 = $8;
   $2 = $7;
   $3 = $6;
   if (($5 | 0) == ($4 | 0) & $2 >>> 0 < $3 >>> 0 | $5 >>> 0 < $4 >>> 0) {
    $1 = -1;
    break label$5;
   }
   $2 = $5;
   $3 = $7;
   $4 = $6;
   if (($8 | 0) == ($2 | 0) & $3 >>> 0 > $4 >>> 0 | $2 >>> 0 > $8 >>> 0) {
    break label$5;
   }
   $4 = $9;
   $3 = HEAP32[$4 + 152 >> 2];
   $7 = $3;
   $2 = HEAP32[$4 + 156 >> 2];
   $5 = $2;
   $2 = HEAP32[$4 + 120 >> 2];
   $6 = $2;
   $3 = HEAP32[$4 + 124 >> 2];
   $8 = $3;
   $2 = $3;
   $3 = $5;
   $4 = $7;
   if (($2 | 0) == ($3 | 0) & $4 >>> 0 < $6 >>> 0 | $3 >>> 0 < $2 >>> 0) {
    $1 = -1;
    break label$5;
   }
   $3 = $8;
   $4 = $5;
   $2 = $6;
   if (($3 | 0) == ($4 | 0) & $7 >>> 0 > $2 >>> 0 | $4 >>> 0 > $3 >>> 0) {
    break label$5;
   }
   $1 = -1;
   $2 = $9;
   $7 = HEAP32[$2 + 144 >> 2];
   $4 = HEAP32[$2 + 148 >> 2];
   $5 = $4;
   $4 = HEAP32[$2 + 112 >> 2];
   $6 = $4;
   $8 = HEAP32[$2 + 116 >> 2];
   $4 = $8;
   $2 = $7;
   $3 = $6;
   if (($5 | 0) == ($4 | 0) & $2 >>> 0 < $3 >>> 0 | $5 >>> 0 < $4 >>> 0) {
    break label$5;
   }
   $2 = $5;
   $3 = $7;
   $4 = $6;
   $1 = ($8 | 0) == ($2 | 0) & $3 >>> 0 > $4 >>> 0 | $2 >>> 0 > $8 >>> 0;
  }
  $3 = Math_imul(HEAP32[$0 + 32 >> 2], $1);
 }
 $0 = $3;
 $1 = $9 + 160 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function btTransformUtil__integrateTransform_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20btTransform__29($0, $1, $2, $3, $4) {
 var $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0;
 $13 = global$0 - 16 | 0;
 $16 = $13;
 if ($13 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $16;
 $5 = HEAPF32[$0 + 52 >> 2];
 $6 = HEAPF32[$0 + 56 >> 2];
 $8 = HEAPF32[$0 + 48 >> 2];
 $7 = HEAPF32[$1 >> 2];
 $9 = HEAPF32[$1 + 4 >> 2];
 $10 = HEAPF32[$1 + 8 >> 2];
 HEAP32[$4 + 60 >> 2] = 0;
 HEAPF32[$4 + 56 >> 2] = $6 + Math_fround($10 * $3);
 HEAPF32[$4 + 52 >> 2] = $5 + Math_fround($9 * $3);
 HEAPF32[$4 + 48 >> 2] = $8 + Math_fround($7 * $3);
 $8 = HEAPF32[$2 >> 2];
 $11 = HEAPF32[$2 + 4 >> 2];
 $12 = HEAPF32[$2 + 8 >> 2];
 $5 = Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($11 * $11)) + Math_fround($12 * $12));
 $5 = $5 > Math_fround(1.1920928955078125e-7) ? Math_fround(Math_sqrt($5)) : Math_fround(0);
 $5 = Math_fround($5 * $3) > Math_fround(.7853981852531433) ? Math_fround(Math_fround(.7853981852531433) / $3) : $5;
 label$2 : {
  if (!!($5 < Math_fround(.0010000000474974513))) {
   $6 = Math_fround(Math_fround($3 * Math_fround(.5)) + Math_fround($5 * Math_fround(Math_fround(Math_fround(Math_fround($3 * $3) * $3) * Math_fround(-.02083333395421505)) * $5)));
   break label$2;
  }
  $6 = Math_fround(sinf(Math_fround(Math_fround($5 * Math_fround(.5)) * $3)) / $5);
 }
 btMatrix3x3__getRotation_28btQuaternion__29_20const($0, $13);
 $7 = HEAPF32[$13 + 12 >> 2];
 $9 = cosf(Math_fround(Math_fround($5 * $3) * Math_fround(.5)));
 $10 = Math_fround($8 * $6);
 $14 = HEAPF32[$13 >> 2];
 $11 = Math_fround($11 * $6);
 $15 = HEAPF32[$13 + 4 >> 2];
 $6 = Math_fround($12 * $6);
 $12 = HEAPF32[$13 + 8 >> 2];
 $5 = Math_fround(Math_fround(Math_fround(Math_fround($7 * $9) - Math_fround($10 * $14)) - Math_fround($11 * $15)) - Math_fround($6 * $12));
 $8 = Math_fround(Math_fround(Math_fround(Math_fround($6 * $7) + Math_fround($9 * $12)) + Math_fround($10 * $15)) - Math_fround($11 * $14));
 $3 = Math_fround(Math_fround(Math_fround(Math_fround($9 * $14) + Math_fround($10 * $7)) + Math_fround($11 * $12)) - Math_fround($6 * $15));
 $6 = Math_fround(Math_fround(Math_fround($6 * $14) + Math_fround(Math_fround($11 * $7) + Math_fround($9 * $15))) - Math_fround($10 * $12));
 $7 = Math_fround(Math_fround($5 * $5) + Math_fround(Math_fround($8 * $8) + Math_fround(Math_fround($3 * $3) + Math_fround($6 * $6))));
 if (!!($7 > Math_fround(1.1920928955078125e-7))) {
  $7 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($7)));
  $5 = Math_fround($5 * $7);
  $8 = Math_fround($8 * $7);
  $6 = Math_fround($6 * $7);
  $3 = Math_fround($3 * $7);
  $7 = Math_fround(Math_fround($5 * $5) + Math_fround(Math_fround($8 * $8) + Math_fround(Math_fround($6 * $6) + Math_fround($3 * $3))));
 }
 label$4 : {
  if (!!($7 > Math_fround(1.1920928955078125e-7))) {
   HEAP32[$4 + 12 >> 2] = 0;
   HEAP32[$4 + 44 >> 2] = 0;
   HEAP32[$4 + 28 >> 2] = 0;
   $9 = Math_fround(Math_fround(2) / $7);
   $7 = Math_fround($8 * $9);
   $10 = Math_fround($6 * $7);
   $14 = Math_fround($3 * $9);
   $11 = Math_fround($5 * $14);
   HEAPF32[$4 + 36 >> 2] = $10 + $11;
   $15 = Math_fround($3 * $7);
   $9 = Math_fround($6 * $9);
   $12 = Math_fround($5 * $9);
   HEAPF32[$4 + 32 >> 2] = $15 - $12;
   HEAPF32[$4 + 24 >> 2] = $10 - $11;
   $10 = Math_fround($3 * $9);
   $5 = Math_fround($5 * $7);
   HEAPF32[$4 + 16 >> 2] = $10 + $5;
   HEAPF32[$4 + 8 >> 2] = $15 + $12;
   HEAPF32[$4 + 4 >> 2] = $10 - $5;
   $3 = Math_fround($3 * $14);
   $5 = Math_fround($6 * $9);
   HEAPF32[$4 + 40 >> 2] = Math_fround(1) - Math_fround($3 + $5);
   $6 = Math_fround($8 * $7);
   HEAPF32[$4 + 20 >> 2] = Math_fround(1) - Math_fround($3 + $6);
   HEAPF32[$4 >> 2] = Math_fround(1) - Math_fround($5 + $6);
   break label$4;
  }
  $1 = $0;
  $2 = HEAP32[$1 >> 2];
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$4 >> 2] = $2;
  HEAP32[$4 + 4 >> 2] = $0;
  $2 = HEAP32[$1 + 12 >> 2];
  $0 = HEAP32[$1 + 8 >> 2];
  HEAP32[$4 + 8 >> 2] = $0;
  HEAP32[$4 + 12 >> 2] = $2;
  $0 = HEAP32[$1 + 20 >> 2];
  $2 = HEAP32[$1 + 16 >> 2];
  HEAP32[$4 + 16 >> 2] = $2;
  HEAP32[$4 + 20 >> 2] = $0;
  $2 = HEAP32[$1 + 28 >> 2];
  $0 = HEAP32[$1 + 24 >> 2];
  HEAP32[$4 + 24 >> 2] = $0;
  HEAP32[$4 + 28 >> 2] = $2;
  $0 = HEAP32[$1 + 36 >> 2];
  $2 = HEAP32[$1 + 32 >> 2];
  HEAP32[$4 + 32 >> 2] = $2;
  HEAP32[$4 + 36 >> 2] = $0;
  $2 = HEAP32[$1 + 44 >> 2];
  $0 = HEAP32[$1 + 40 >> 2];
  HEAP32[$4 + 40 >> 2] = $0;
  HEAP32[$4 + 44 >> 2] = $2;
 }
 $0 = $13 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function DebugDrawcallback__processTriangle_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0);
 $2 = global$0 - 96 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $4 = HEAPF32[$0 + 76 >> 2];
 $12 = HEAPF32[$0 + 36 >> 2];
 $13 = HEAPF32[$0 + 32 >> 2];
 $5 = HEAPF32[$0 + 80 >> 2];
 $14 = HEAPF32[$0 + 52 >> 2];
 $6 = HEAPF32[$0 + 44 >> 2];
 $15 = HEAPF32[$0 + 48 >> 2];
 $10 = HEAPF32[$0 + 84 >> 2];
 $11 = HEAPF32[$0 + 68 >> 2];
 $18 = HEAPF32[$0 + 60 >> 2];
 $19 = HEAPF32[$0 - -64 >> 2];
 $20 = HEAPF32[$0 + 28 >> 2];
 $7 = HEAPF32[$1 + 8 >> 2];
 $8 = HEAPF32[$1 >> 2];
 $9 = HEAPF32[$1 + 4 >> 2];
 HEAP32[$2 + 92 >> 2] = 0;
 $16 = Math_fround($10 + Math_fround(Math_fround(Math_fround($8 * $18) + Math_fround($9 * $19)) + Math_fround($7 * $11)));
 HEAPF32[$2 + 88 >> 2] = $16;
 $17 = Math_fround($5 + Math_fround(Math_fround(Math_fround($8 * $6) + Math_fround($9 * $15)) + Math_fround($7 * $14)));
 HEAPF32[$2 + 84 >> 2] = $17;
 $24 = Math_fround($4 + Math_fround(Math_fround(Math_fround($8 * $20) + Math_fround($9 * $13)) + Math_fround($7 * $12)));
 HEAPF32[$2 + 80 >> 2] = $24;
 $7 = HEAPF32[$1 + 20 >> 2];
 $8 = HEAPF32[$1 + 24 >> 2];
 $9 = HEAPF32[$1 + 16 >> 2];
 HEAP32[$2 + 76 >> 2] = 0;
 $21 = Math_fround($10 + Math_fround(Math_fround(Math_fround($18 * $9) + Math_fround($19 * $7)) + Math_fround($11 * $8)));
 HEAPF32[$2 + 72 >> 2] = $21;
 $22 = Math_fround($5 + Math_fround(Math_fround(Math_fround($6 * $9) + Math_fround($15 * $7)) + Math_fround($14 * $8)));
 HEAPF32[$2 + 68 >> 2] = $22;
 $23 = Math_fround($4 + Math_fround(Math_fround(Math_fround($20 * $9) + Math_fround($13 * $7)) + Math_fround($12 * $8)));
 HEAPF32[$2 + 64 >> 2] = $23;
 $7 = HEAPF32[$1 + 36 >> 2];
 $8 = HEAPF32[$1 + 40 >> 2];
 $9 = HEAPF32[$1 + 32 >> 2];
 HEAP32[$2 + 60 >> 2] = 0;
 $10 = Math_fround($10 + Math_fround(Math_fround(Math_fround($18 * $9) + Math_fround($19 * $7)) + Math_fround($11 * $8)));
 HEAPF32[$2 + 56 >> 2] = $10;
 $5 = Math_fround($5 + Math_fround(Math_fround(Math_fround($6 * $9) + Math_fround($15 * $7)) + Math_fround($14 * $8)));
 HEAPF32[$2 + 52 >> 2] = $5;
 $4 = Math_fround($4 + Math_fround(Math_fround(Math_fround($20 * $9) + Math_fround($13 * $7)) + Math_fround($12 * $8)));
 HEAPF32[$2 + 48 >> 2] = $4;
 HEAP32[$2 + 44 >> 2] = 0;
 $12 = Math_fround(Math_fround(Math_fround($16 + $21) + $10) * Math_fround(.3333333432674408));
 HEAPF32[$2 + 40 >> 2] = $12;
 $13 = Math_fround(Math_fround(Math_fround($17 + $22) + $5) * Math_fround(.3333333432674408));
 HEAPF32[$2 + 36 >> 2] = $13;
 $14 = Math_fround(Math_fround(Math_fround($24 + $23) + $4) * Math_fround(.3333333432674408));
 HEAPF32[$2 + 32 >> 2] = $14;
 $1 = HEAP32[$0 + 8 >> 2];
 if (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 56 >> 2]]($1) & 16384) {
  $6 = HEAPF32[$2 + 80 >> 2];
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  HEAP32[$2 + 16 >> 2] = 1065353216;
  HEAP32[$2 + 20 >> 2] = 1065353216;
  $1 = HEAP32[$0 + 8 >> 2];
  HEAP32[$2 + 12 >> 2] = 0;
  $15 = Math_fround($23 - $6);
  $5 = Math_fround($5 - $17);
  $11 = Math_fround($22 - $17);
  $6 = Math_fround($4 - $6);
  $4 = Math_fround(Math_fround($15 * $5) - Math_fround($11 * $6));
  $7 = $4;
  $8 = Math_fround($4 * $4);
  $10 = Math_fround($10 - $16);
  $4 = Math_fround($11 * $10);
  $11 = Math_fround($21 - $16);
  $4 = Math_fround($4 - Math_fround($11 * $5));
  $5 = Math_fround(Math_fround($11 * $6) - Math_fround($15 * $10));
  $6 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround($8 + Math_fround(Math_fround($4 * $4) + Math_fround($5 * $5))))));
  HEAPF32[$2 + 8 >> 2] = Math_fround($7 * $6) + $12;
  HEAPF32[$2 + 4 >> 2] = $13 + Math_fround($5 * $6);
  HEAPF32[$2 >> 2] = $14 + Math_fround($4 * $6);
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, $2 + 32 | 0, $2, $2 + 16 | 0);
 }
 $3 = HEAP32[$0 + 8 >> 2];
 $1 = $0 + 12 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $2 + 80 | 0, $2 - -64 | 0, $1);
 $3 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $2 - -64 | 0, $2 + 48 | 0, $1);
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $2 + 48 | 0, $2 + 80 | 0, $1);
 $0 = $2 + 96 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTransformUtil__calculateDiffAxisAngle_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20float__29($0, $1, $2, $3) {
 var $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = 0;
 $5 = global$0 + -64 | 0;
 $28 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $28;
 $15 = HEAPF32[$1 + 24 >> 2];
 $16 = HEAPF32[$1 + 20 >> 2];
 $17 = HEAPF32[$1 + 40 >> 2];
 $18 = HEAPF32[$1 + 36 >> 2];
 $9 = HEAPF32[$0 + 40 >> 2];
 $10 = HEAPF32[$0 + 20 >> 2];
 $13 = HEAPF32[$0 + 36 >> 2];
 $11 = HEAPF32[$0 + 24 >> 2];
 $19 = HEAPF32[$1 + 8 >> 2];
 $20 = HEAPF32[$1 >> 2];
 $21 = HEAPF32[$1 + 4 >> 2];
 $22 = HEAPF32[$1 + 16 >> 2];
 $23 = HEAPF32[$1 + 32 >> 2];
 $7 = HEAPF32[$0 + 8 >> 2];
 $8 = HEAPF32[$0 + 4 >> 2];
 $14 = HEAPF32[$0 + 32 >> 2];
 $12 = HEAPF32[$0 + 16 >> 2];
 $4 = HEAPF32[$0 >> 2];
 HEAP32[$5 + 60 >> 2] = 0;
 HEAP32[$5 + 44 >> 2] = 0;
 $25 = Math_fround(Math_fround($10 * $9) - Math_fround($11 * $13));
 $26 = Math_fround(Math_fround($11 * $14) - Math_fround($9 * $12));
 $27 = Math_fround(Math_fround($13 * $12) - Math_fround($10 * $14));
 $6 = Math_fround(Math_fround(1) / Math_fround(Math_fround(Math_fround($4 * $25) + Math_fround($8 * $26)) + Math_fround($7 * $27)));
 $24 = Math_fround(Math_fround(Math_fround($11 * $8) - Math_fround($10 * $7)) * $6);
 $11 = Math_fround(Math_fround(Math_fround($12 * $7) - Math_fround($11 * $4)) * $6);
 $10 = Math_fround(Math_fround(Math_fround($10 * $4) - Math_fround($12 * $8)) * $6);
 HEAPF32[$5 + 56 >> 2] = Math_fround(Math_fround($23 * $24) + Math_fround($18 * $11)) + Math_fround($17 * $10);
 $12 = Math_fround(Math_fround(Math_fround($13 * $7) - Math_fround($9 * $8)) * $6);
 $7 = Math_fround(Math_fround(Math_fround($9 * $4) - Math_fround($14 * $7)) * $6);
 $8 = Math_fround(Math_fround(Math_fround($14 * $8) - Math_fround($13 * $4)) * $6);
 HEAPF32[$5 + 52 >> 2] = Math_fround(Math_fround($23 * $12) + Math_fround($18 * $7)) + Math_fround($17 * $8);
 HEAPF32[$5 + 40 >> 2] = Math_fround(Math_fround($24 * $22) + Math_fround($11 * $16)) + Math_fround($10 * $15);
 HEAPF32[$5 + 36 >> 2] = Math_fround(Math_fround($12 * $22) + Math_fround($7 * $16)) + Math_fround($8 * $15);
 HEAP32[$5 + 28 >> 2] = 0;
 $4 = Math_fround($25 * $6);
 $9 = Math_fround($26 * $6);
 $6 = Math_fround($27 * $6);
 HEAPF32[$5 + 48 >> 2] = Math_fround(Math_fround($23 * $4) + Math_fround($18 * $9)) + Math_fround($17 * $6);
 HEAPF32[$5 + 32 >> 2] = Math_fround(Math_fround($4 * $22) + Math_fround($9 * $16)) + Math_fround($6 * $15);
 HEAPF32[$5 + 24 >> 2] = Math_fround($19 * $10) + Math_fround(Math_fround($20 * $24) + Math_fround($21 * $11));
 HEAPF32[$5 + 20 >> 2] = Math_fround($19 * $8) + Math_fround(Math_fround($20 * $12) + Math_fround($21 * $7));
 HEAPF32[$5 + 16 >> 2] = Math_fround($19 * $6) + Math_fround(Math_fround($20 * $4) + Math_fround($21 * $9));
 btMatrix3x3__getRotation_28btQuaternion__29_20const($5 + 16 | 0, $5);
 $8 = HEAPF32[$5 >> 2];
 $7 = HEAPF32[$5 + 4 >> 2];
 $6 = HEAPF32[$5 + 8 >> 2];
 $9 = HEAPF32[$5 + 12 >> 2];
 $4 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($7 * $7)) + Math_fround($6 * $6)) + Math_fround($9 * $9)))));
 $6 = Math_fround($6 * $4);
 HEAPF32[$5 + 8 >> 2] = $6;
 $7 = Math_fround($7 * $4);
 HEAPF32[$5 + 4 >> 2] = $7;
 $8 = Math_fround($8 * $4);
 HEAPF32[$5 >> 2] = $8;
 $4 = Math_fround($9 * $4);
 HEAPF32[$5 + 12 >> 2] = $4;
 $4 = acosf(Math_fround(Math_min(Math_fround(Math_max($4, Math_fround(-1))), Math_fround(1))));
 HEAPF32[$3 >> 2] = $4 + $4;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAPF32[$2 + 8 >> 2] = $6;
 HEAPF32[$2 + 4 >> 2] = $7;
 HEAPF32[$2 >> 2] = $8;
 $4 = Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($7 * $7)) + Math_fround($6 * $6));
 label$2 : {
  if (!!($4 < Math_fround(1.4210854715202004e-14))) {
   HEAP32[$2 + 8 >> 2] = 0;
   HEAP32[$2 + 12 >> 2] = 0;
   HEAP32[$2 >> 2] = 1065353216;
   HEAP32[$2 + 4 >> 2] = 0;
   break label$2;
  }
  $4 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($4)));
  HEAPF32[$2 + 8 >> 2] = $6 * $4;
  HEAPF32[$2 + 4 >> 2] = $7 * $4;
  HEAPF32[$2 >> 2] = $8 * $4;
 }
 $0 = $5 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexShape__project_28btTransform_20const__2c_20btVector3_20const__2c_20float__2c_20float__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0, $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0);
 $7 = global$0 - 48 | 0;
 $20 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $20;
 $11 = HEAPF32[$1 + 36 >> 2];
 $12 = HEAPF32[$1 + 20 >> 2];
 $13 = HEAPF32[$1 + 40 >> 2];
 $14 = HEAPF32[$1 + 24 >> 2];
 $15 = HEAPF32[$1 + 4 >> 2];
 $16 = HEAPF32[$1 + 8 >> 2];
 $8 = HEAPF32[$2 + 8 >> 2];
 $17 = HEAPF32[$1 + 32 >> 2];
 $9 = HEAPF32[$2 >> 2];
 $18 = HEAPF32[$1 >> 2];
 $10 = HEAPF32[$2 + 4 >> 2];
 $19 = HEAPF32[$1 + 16 >> 2];
 HEAP32[$7 + 44 >> 2] = 0;
 HEAPF32[$7 + 32 >> 2] = Math_fround(Math_fround($18 * $9) + Math_fround($19 * $10)) + Math_fround($17 * $8);
 HEAPF32[$7 + 40 >> 2] = Math_fround(Math_fround($9 * $16) + Math_fround($10 * $14)) + Math_fround($8 * $13);
 HEAPF32[$7 + 36 >> 2] = Math_fround(Math_fround($9 * $15) + Math_fround($10 * $12)) + Math_fround($8 * $11);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($7 + 16 | 0, $0, $7 + 32 | 0);
 $16 = HEAPF32[$1 + 56 >> 2];
 $17 = HEAPF32[$1 + 40 >> 2];
 $18 = HEAPF32[$1 + 36 >> 2];
 $15 = HEAPF32[$1 + 52 >> 2];
 $19 = HEAPF32[$1 + 24 >> 2];
 $21 = HEAPF32[$1 + 20 >> 2];
 $22 = HEAPF32[$1 + 32 >> 2];
 $14 = HEAPF32[$1 + 48 >> 2];
 $23 = HEAPF32[$1 + 8 >> 2];
 $24 = HEAPF32[$1 >> 2];
 $25 = HEAPF32[$1 + 4 >> 2];
 $26 = HEAPF32[$1 + 16 >> 2];
 $8 = HEAPF32[$7 + 24 >> 2];
 $9 = HEAPF32[$7 + 16 >> 2];
 $10 = HEAPF32[$7 + 20 >> 2];
 HEAP32[$7 + 12 >> 2] = 0;
 HEAPF32[$7 + 8 >> 2] = -HEAPF32[$7 + 40 >> 2];
 HEAPF32[$7 + 4 >> 2] = -HEAPF32[$7 + 36 >> 2];
 HEAPF32[$7 >> 2] = -HEAPF32[$7 + 32 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($7 + 16 | 0, $0, $7);
 $27 = HEAPF32[$1 + 56 >> 2];
 $28 = HEAPF32[$1 + 40 >> 2];
 $29 = HEAPF32[$1 + 36 >> 2];
 $30 = HEAPF32[$1 + 52 >> 2];
 $31 = HEAPF32[$1 + 24 >> 2];
 $32 = HEAPF32[$1 + 20 >> 2];
 $33 = HEAPF32[$1 + 32 >> 2];
 $34 = HEAPF32[$1 + 48 >> 2];
 $35 = HEAPF32[$1 + 8 >> 2];
 $36 = HEAPF32[$1 >> 2];
 $37 = HEAPF32[$1 + 4 >> 2];
 $38 = HEAPF32[$1 + 16 >> 2];
 $11 = HEAPF32[$7 + 24 >> 2];
 $12 = HEAPF32[$7 + 16 >> 2];
 $13 = HEAPF32[$7 + 20 >> 2];
 $14 = Math_fround($14 + Math_fround(Math_fround(Math_fround($9 * $24) + Math_fround($10 * $25)) + Math_fround($8 * $23)));
 $15 = Math_fround($15 + Math_fround(Math_fround(Math_fround($9 * $26) + Math_fround($10 * $21)) + Math_fround($8 * $19)));
 $8 = Math_fround($16 + Math_fround(Math_fround(Math_fround($9 * $22) + Math_fround($10 * $18)) + Math_fround($8 * $17)));
 HEAPF32[$3 >> 2] = Math_fround(Math_fround($14 * HEAPF32[$2 >> 2]) + Math_fround($15 * HEAPF32[$2 + 4 >> 2])) + Math_fround($8 * HEAPF32[$2 + 8 >> 2]);
 $9 = Math_fround($34 + Math_fround(Math_fround(Math_fround($12 * $36) + Math_fround($13 * $37)) + Math_fround($11 * $35)));
 $10 = Math_fround($30 + Math_fround(Math_fround(Math_fround($12 * $38) + Math_fround($13 * $32)) + Math_fround($11 * $31)));
 $11 = Math_fround($27 + Math_fround(Math_fround(Math_fround($12 * $33) + Math_fround($13 * $29)) + Math_fround($11 * $28)));
 HEAPF32[$4 >> 2] = Math_fround(Math_fround($9 * HEAPF32[$2 >> 2]) + Math_fround($10 * HEAPF32[$2 + 4 >> 2])) + Math_fround($11 * HEAPF32[$2 + 8 >> 2]);
 HEAP32[$6 + 12 >> 2] = 0;
 HEAPF32[$6 + 8 >> 2] = $11;
 HEAPF32[$6 + 4 >> 2] = $10;
 HEAPF32[$6 >> 2] = $9;
 HEAP32[$5 + 12 >> 2] = 0;
 HEAPF32[$5 + 8 >> 2] = $8;
 HEAPF32[$5 + 4 >> 2] = $15;
 HEAPF32[$5 >> 2] = $14;
 $12 = HEAPF32[$3 >> 2];
 $13 = HEAPF32[$4 >> 2];
 if (!!($12 > $13)) {
  HEAPF32[$3 >> 2] = $13;
  HEAPF32[$4 >> 2] = $12;
  HEAP32[$6 + 12 >> 2] = 0;
  HEAPF32[$6 + 8 >> 2] = $8;
  HEAPF32[$6 + 4 >> 2] = $15;
  HEAPF32[$6 >> 2] = $14;
  HEAP32[$5 + 12 >> 2] = 0;
  HEAPF32[$5 + 8 >> 2] = $11;
  HEAPF32[$5 + 4 >> 2] = $10;
  HEAPF32[$5 >> 2] = $9;
 }
 $0 = $7 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btMinkowskiPenetrationDepthSolver__getPenetrationDirections_28_29() {
 label$1 : {
  if (HEAP8[22560] & 1) {
   break label$1;
  }
  if (!__cxa_guard_acquire(22560)) {
   break label$1;
  }
  HEAP32[5558] = 1062847606;
  HEAP32[5559] = 0;
  HEAP32[5556] = 1042701022;
  HEAP32[5557] = 1056964440;
  HEAP32[5554] = 1062847606;
  HEAP32[5555] = 0;
  HEAP32[5552] = -1093024784;
  HEAP32[5553] = 1050556081;
  HEAP32[5550] = 1062847606;
  HEAP32[5551] = 0;
  HEAP32[5548] = -1093024784;
  HEAP32[5549] = -1096927567;
  HEAP32[5546] = 1062847606;
  HEAP32[5547] = 0;
  HEAP32[5544] = 1042701022;
  HEAP32[5545] = -1090519208;
  HEAP32[5542] = 1062847572;
  HEAP32[5543] = 0;
  HEAP32[5540] = 1057396286;
  HEAP32[5541] = 0;
  HEAP32[5538] = 1057396386;
  HEAP32[5539] = 0;
  HEAP32[5536] = 1060121912;
  HEAP32[5537] = 1056964507;
  HEAP32[5534] = 1057396420;
  HEAP32[5535] = 0;
  HEAP32[5532] = -1098475836;
  HEAP32[5533] = 1062148969;
  HEAP32[5530] = 1057396386;
  HEAP32[5531] = 0;
  HEAP32[5528] = -1084636143;
  HEAP32[5529] = 0;
  HEAP32[5526] = 1057396420;
  HEAP32[5527] = 0;
  HEAP32[5524] = -1098475836;
  HEAP32[5525] = -1085334679;
  HEAP32[5522] = 1057396386;
  HEAP32[5523] = 0;
  HEAP32[5520] = 1060121912;
  HEAP32[5521] = -1090519141;
  HEAP32[5518] = -2147483648;
  HEAP32[5519] = 0;
  HEAP32[5516] = 1058437413;
  HEAP32[5517] = 1062149053;
  HEAP32[5514] = -2147483648;
  HEAP32[5515] = 0;
  HEAP32[5512] = -2147483648;
  HEAP32[5513] = 1065353216;
  HEAP32[5510] = -2147483648;
  HEAP32[5511] = 0;
  HEAP32[5508] = -1089046235;
  HEAP32[5509] = 1062149053;
  HEAP32[5506] = -2147483648;
  HEAP32[5507] = 0;
  HEAP32[5504] = -1082951543;
  HEAP32[5505] = 1050556148;
  HEAP32[5502] = -2147483648;
  HEAP32[5503] = 0;
  HEAP32[5500] = -1082951543;
  HEAP32[5501] = -1096927500;
  HEAP32[5498] = 0;
  HEAP32[5499] = 0;
  HEAP32[5496] = -1089046235;
  HEAP32[5497] = -1085334595;
  HEAP32[5494] = 0;
  HEAP32[5495] = 0;
  HEAP32[5492] = 0;
  HEAP32[5493] = -1082130432;
  HEAP32[5490] = 0;
  HEAP32[5491] = 0;
  HEAP32[5488] = 1058437413;
  HEAP32[5489] = -1085334595;
  HEAP32[5486] = 0;
  HEAP32[5487] = 0;
  HEAP32[5484] = 1064532105;
  HEAP32[5485] = -1096927500;
  HEAP32[5482] = 0;
  HEAP32[5483] = 0;
  HEAP32[5480] = 1064532105;
  HEAP32[5481] = 1050556148;
  HEAP32[5478] = -1090087228;
  HEAP32[5479] = 0;
  HEAP32[5476] = 1049007812;
  HEAP32[5477] = 1062148969;
  HEAP32[5474] = -1090087262;
  HEAP32[5475] = 0;
  HEAP32[5472] = -1087361736;
  HEAP32[5473] = 1056964507;
  HEAP32[5470] = -1084636042;
  HEAP32[5471] = 0;
  HEAP32[5468] = -1104782626;
  HEAP32[5469] = 1056964440;
  HEAP32[5466] = -1090087262;
  HEAP32[5467] = 0;
  HEAP32[5464] = -1087361736;
  HEAP32[5465] = -1090519141;
  HEAP32[5462] = -1084636076;
  HEAP32[5463] = 0;
  HEAP32[5460] = -1090087362;
  HEAP32[5461] = -2147483648;
  HEAP32[5458] = -1090087262;
  HEAP32[5459] = 0;
  HEAP32[5456] = 1062847505;
  HEAP32[5457] = -2147483648;
  HEAP32[5454] = -1084636042;
  HEAP32[5455] = 0;
  HEAP32[5452] = 1054458864;
  HEAP32[5453] = 1050556081;
  HEAP32[5450] = -1090087228;
  HEAP32[5451] = 0;
  HEAP32[5448] = 1049007812;
  HEAP32[5449] = -1085334679;
  HEAP32[5446] = -1084636042;
  HEAP32[5447] = 0;
  HEAP32[5444] = -1104782626;
  HEAP32[5445] = -1090519208;
  HEAP32[5442] = -1084636042;
  HEAP32[5443] = 0;
  HEAP32[5440] = 1054458864;
  HEAP32[5441] = -1096927567;
  HEAP32[5438] = 1065353216;
  HEAP32[5439] = 0;
  HEAP32[5436] = -2147483648;
  HEAP32[5437] = 0;
  HEAP32[5434] = 1055193471;
  HEAP32[5435] = 0;
  HEAP32[5432] = 1063581978;
  HEAP32[5433] = 0;
  HEAP32[5430] = 1055193572;
  HEAP32[5431] = 0;
  HEAP32[5428] = 1049461434;
  HEAP32[5429] = 1062847522;
  HEAP32[5426] = 1055193572;
  HEAP32[5427] = 0;
  HEAP32[5424] = -1086767520;
  HEAP32[5425] = 1057396202;
  HEAP32[5422] = 1055193572;
  HEAP32[5423] = 0;
  HEAP32[5420] = -1086767520;
  HEAP32[5421] = -1090087446;
  HEAP32[5418] = 1055193605;
  HEAP32[5419] = 0;
  HEAP32[5416] = 1049461434;
  HEAP32[5417] = -1084636126;
  HEAP32[5414] = -1092290076;
  HEAP32[5415] = 0;
  HEAP32[5412] = 1060716128;
  HEAP32[5413] = 1057396202;
  HEAP32[5410] = -1092290043;
  HEAP32[5411] = 0;
  HEAP32[5408] = -1098022214;
  HEAP32[5409] = 1062847522;
  HEAP32[5406] = -1092290177;
  HEAP32[5407] = 0;
  HEAP32[5404] = -1083901670;
  HEAP32[5405] = -2147483648;
  HEAP32[5402] = -1092290076;
  HEAP32[5403] = 0;
  HEAP32[5400] = -1098022214;
  HEAP32[5401] = -1084636126;
  HEAP32[5398] = -1092290076;
  HEAP32[5399] = 0;
  HEAP32[5396] = 1060716128;
  HEAP32[5397] = -1090087446;
  HEAP32[5394] = -1082130432;
  HEAP32[5395] = 0;
  HEAP32[5392] = 0;
  HEAP32[5393] = -2147483648;
  __cxa_guard_release(22560);
 }
 return 21568;
}
function btConvexInternalShape__getAabbSlow_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = 0;
 $4 = global$0 - 80 | 0;
 $16 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $16;
 $22 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 while (1) {
  HEAP32[$4 + 72 >> 2] = 0;
  HEAP32[$4 + 76 >> 2] = 0;
  HEAP32[$4 + 64 >> 2] = 0;
  HEAP32[$4 + 68 >> 2] = 0;
  $17 = $18 << 2;
  $23 = $17 + ($4 - -64 | 0) | 0;
  HEAP32[$23 >> 2] = 1065353216;
  $9 = HEAPF32[$1 + 32 >> 2];
  $10 = HEAPF32[$1 >> 2];
  $11 = HEAPF32[$1 + 16 >> 2];
  $12 = HEAPF32[$1 + 36 >> 2];
  $13 = HEAPF32[$1 + 4 >> 2];
  $14 = HEAPF32[$1 + 20 >> 2];
  $15 = HEAPF32[$1 + 40 >> 2];
  $5 = HEAPF32[$1 + 8 >> 2];
  $6 = HEAPF32[$1 + 24 >> 2];
  HEAP32[$4 + 44 >> 2] = 0;
  $7 = HEAPF32[$4 + 64 >> 2];
  $8 = Math_fround($5 * $7);
  $5 = HEAPF32[$4 + 68 >> 2];
  $8 = Math_fround($8 + Math_fround($6 * $5));
  $6 = HEAPF32[$4 + 72 >> 2];
  HEAPF32[$4 + 40 >> 2] = $8 + Math_fround($15 * $6);
  HEAPF32[$4 + 36 >> 2] = Math_fround(Math_fround($7 * $13) + Math_fround($5 * $14)) + Math_fround($6 * $12);
  HEAPF32[$4 + 32 >> 2] = Math_fround(Math_fround($10 * $7) + Math_fround($11 * $5)) + Math_fround($9 * $6);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($4 + 48 | 0, $0, $4 + 32 | 0);
  $9 = HEAPF32[$1 + 48 >> 2];
  $10 = HEAPF32[$1 + 8 >> 2];
  $11 = HEAPF32[$1 >> 2];
  $12 = HEAPF32[$1 + 4 >> 2];
  $13 = HEAPF32[$1 + 52 >> 2];
  $14 = HEAPF32[$1 + 24 >> 2];
  $15 = HEAPF32[$1 + 16 >> 2];
  $19 = HEAPF32[$1 + 20 >> 2];
  $20 = HEAPF32[$1 + 56 >> 2];
  $21 = HEAPF32[$1 + 40 >> 2];
  $5 = HEAPF32[$1 + 32 >> 2];
  $6 = HEAPF32[$1 + 36 >> 2];
  HEAP32[$4 + 44 >> 2] = 0;
  $7 = HEAPF32[$4 + 48 >> 2];
  $8 = Math_fround($5 * $7);
  $5 = HEAPF32[$4 + 52 >> 2];
  $8 = Math_fround($8 + Math_fround($6 * $5));
  $6 = HEAPF32[$4 + 56 >> 2];
  HEAPF32[$4 + 40 >> 2] = $20 + Math_fround($8 + Math_fround($21 * $6));
  HEAPF32[$4 + 36 >> 2] = $13 + Math_fround(Math_fround(Math_fround($7 * $15) + Math_fround($5 * $19)) + Math_fround($6 * $14));
  HEAPF32[$4 + 32 >> 2] = $9 + Math_fround(Math_fround(Math_fround($7 * $11) + Math_fround($5 * $12)) + Math_fround($6 * $10));
  $16 = ($4 + 32 | 0) + $17 | 0;
  HEAPF32[$3 + $17 >> 2] = $22 + HEAPF32[$16 >> 2];
  HEAP32[$23 >> 2] = -1082130432;
  $9 = HEAPF32[$1 + 32 >> 2];
  $10 = HEAPF32[$1 >> 2];
  $11 = HEAPF32[$1 + 16 >> 2];
  $12 = HEAPF32[$1 + 36 >> 2];
  $13 = HEAPF32[$1 + 4 >> 2];
  $14 = HEAPF32[$1 + 20 >> 2];
  $15 = HEAPF32[$1 + 40 >> 2];
  $5 = HEAPF32[$1 + 8 >> 2];
  $6 = HEAPF32[$1 + 24 >> 2];
  HEAP32[$4 + 12 >> 2] = 0;
  $7 = HEAPF32[$4 + 64 >> 2];
  $8 = Math_fround($5 * $7);
  $5 = HEAPF32[$4 + 68 >> 2];
  $8 = Math_fround($8 + Math_fround($6 * $5));
  $6 = HEAPF32[$4 + 72 >> 2];
  HEAPF32[$4 + 8 >> 2] = $8 + Math_fround($15 * $6);
  HEAPF32[$4 + 4 >> 2] = Math_fround(Math_fround($7 * $13) + Math_fround($5 * $14)) + Math_fround($6 * $12);
  HEAPF32[$4 >> 2] = Math_fround(Math_fround($10 * $7) + Math_fround($11 * $5)) + Math_fround($9 * $6);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($4 + 16 | 0, $0, $4);
  $9 = HEAPF32[$1 + 48 >> 2];
  $10 = HEAPF32[$1 + 8 >> 2];
  $11 = HEAPF32[$1 >> 2];
  $12 = HEAPF32[$1 + 4 >> 2];
  $13 = HEAPF32[$1 + 52 >> 2];
  $14 = HEAPF32[$1 + 24 >> 2];
  $15 = HEAPF32[$1 + 16 >> 2];
  $19 = HEAPF32[$1 + 20 >> 2];
  $20 = HEAPF32[$1 + 56 >> 2];
  $21 = HEAPF32[$1 + 40 >> 2];
  $5 = HEAPF32[$1 + 32 >> 2];
  $6 = HEAPF32[$1 + 36 >> 2];
  HEAP32[$4 + 44 >> 2] = 0;
  $7 = HEAPF32[$4 + 16 >> 2];
  $8 = Math_fround($5 * $7);
  $5 = HEAPF32[$4 + 20 >> 2];
  $8 = Math_fround($8 + Math_fround($6 * $5));
  $6 = HEAPF32[$4 + 24 >> 2];
  HEAPF32[$4 + 40 >> 2] = $20 + Math_fround($8 + Math_fround($21 * $6));
  HEAPF32[$4 + 36 >> 2] = $13 + Math_fround(Math_fround(Math_fround($7 * $15) + Math_fround($5 * $19)) + Math_fround($6 * $14));
  HEAPF32[$4 + 32 >> 2] = $9 + Math_fround(Math_fround(Math_fround($7 * $11) + Math_fround($5 * $12)) + Math_fround($6 * $10));
  HEAPF32[$2 + $17 >> 2] = HEAPF32[$16 >> 2] - $22;
  $18 = $18 + 1 | 0;
  if (($18 | 0) != 3) {
   continue;
  }
  break;
 }
 $0 = $4 + 80 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTriangleRaycastCallback__processTriangle_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = 0;
 $5 = global$0 - 32 | 0;
 $26 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $26;
 $19 = HEAPF32[$1 + 24 >> 2];
 $24 = HEAPF32[$1 + 40 >> 2];
 $16 = HEAPF32[$1 + 36 >> 2];
 $17 = HEAPF32[$1 + 20 >> 2];
 $8 = HEAPF32[$1 + 8 >> 2];
 $10 = HEAPF32[$1 + 16 >> 2];
 $11 = HEAPF32[$1 + 4 >> 2];
 $18 = HEAPF32[$1 + 32 >> 2];
 $12 = HEAPF32[$1 >> 2];
 HEAP32[$5 + 28 >> 2] = 0;
 $6 = Math_fround($10 - $12);
 $7 = Math_fround($16 - $11);
 $15 = Math_fround($17 - $11);
 $4 = Math_fround($18 - $12);
 $9 = Math_fround(Math_fround($6 * $7) - Math_fround($15 * $4));
 HEAPF32[$5 + 24 >> 2] = $9;
 $13 = Math_fround($19 - $8);
 $14 = Math_fround($13 * $4);
 $4 = Math_fround($24 - $8);
 $6 = Math_fround($14 - Math_fround($6 * $4));
 HEAPF32[$5 + 20 >> 2] = $6;
 $7 = Math_fround(Math_fround($15 * $4) - Math_fround($13 * $7));
 HEAPF32[$5 + 16 >> 2] = $7;
 $13 = HEAPF32[$0 + 4 >> 2];
 $20 = HEAPF32[$0 + 8 >> 2];
 $23 = HEAPF32[$0 + 12 >> 2];
 $4 = Math_fround(Math_fround($8 * $9) + Math_fround(Math_fround($12 * $7) + Math_fround($11 * $6)));
 $15 = Math_fround(Math_fround(Math_fround(Math_fround($7 * $13) + Math_fround($6 * $20)) + Math_fround($9 * $23)) - $4);
 $14 = HEAPF32[$0 + 20 >> 2];
 $21 = HEAPF32[$0 + 24 >> 2];
 $25 = HEAPF32[$0 + 28 >> 2];
 $4 = Math_fround(Math_fround(Math_fround(Math_fround($7 * $14) + Math_fround($6 * $21)) + Math_fround($9 * $25)) - $4);
 label$2 : {
  if (Math_fround($15 * $4) >= Math_fround(0)) {
   break label$2;
  }
  $1 = HEAP32[$0 + 36 >> 2];
  if ($1 & 1 ? !!($15 <= Math_fround(0)) : 0) {
   break label$2;
  }
  $4 = Math_fround($15 / Math_fround($15 - $4));
  if (!($4 < HEAPF32[$0 + 40 >> 2])) {
   break label$2;
  }
  $22 = Math_fround($21 * $4);
  $21 = Math_fround(Math_fround(1) - $4);
  $20 = Math_fround($22 + Math_fround($20 * $21));
  $17 = Math_fround($17 - $20);
  $13 = Math_fround(Math_fround($14 * $4) + Math_fround($13 * $21));
  $14 = Math_fround($12 - $13);
  $22 = Math_fround($11 - $20);
  $11 = Math_fround($10 - $13);
  $10 = Math_fround(Math_fround($25 * $4) + Math_fround($23 * $21));
  $12 = Math_fround($19 - $10);
  $8 = Math_fround($8 - $10);
  $23 = Math_fround(Math_fround($9 * $9) + Math_fround(Math_fround($7 * $7) + Math_fround($6 * $6)));
  $19 = Math_fround($23 * Math_fround(-9999999747378752e-20));
  if (!(Math_fround(Math_fround($9 * Math_fround(Math_fround($17 * $14) - Math_fround($22 * $11))) + Math_fround(Math_fround($7 * Math_fround(Math_fround($22 * $12) - Math_fround($8 * $17))) + Math_fround($6 * Math_fround(Math_fround($8 * $11) - Math_fround($12 * $14))))) >= $19)) {
   break label$2;
  }
  $16 = Math_fround($16 - $20);
  $18 = Math_fround($18 - $13);
  $10 = Math_fround($24 - $10);
  if (Math_fround(Math_fround($9 * Math_fround(Math_fround($16 * $11) - Math_fround($17 * $18))) + Math_fround(Math_fround($7 * Math_fround(Math_fround($17 * $10) - Math_fround($12 * $16))) + Math_fround($6 * Math_fround(Math_fround($12 * $18) - Math_fround($10 * $11))))) >= $19 ^ 1 | Math_fround(Math_fround($9 * Math_fround(Math_fround($22 * $18) - Math_fround($16 * $14))) + Math_fround(Math_fround($7 * Math_fround(Math_fround($16 * $8) - Math_fround($10 * $22))) + Math_fround($6 * Math_fround(Math_fround($10 * $14) - Math_fround($8 * $18))))) >= $19 ^ 1) {
   break label$2;
  }
  $8 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($23)));
  $9 = Math_fround($9 * $8);
  HEAPF32[$5 + 24 >> 2] = $9;
  $6 = Math_fround($6 * $8);
  HEAPF32[$5 + 20 >> 2] = $6;
  $7 = Math_fround($7 * $8);
  HEAPF32[$5 + 16 >> 2] = $7;
  if (!($1 & 2 | $15 <= Math_fround(0) ^ 1)) {
   HEAP32[$5 + 12 >> 2] = 0;
   HEAPF32[$5 + 8 >> 2] = -$9;
   HEAPF32[$5 + 4 >> 2] = -$6;
   HEAPF32[$5 >> 2] = -$7;
   HEAPF32[$0 + 40 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $5, $4, $2, $3);
   break label$2;
  }
  HEAPF32[$0 + 40 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $5 + 16 | 0, $4, $2, $3);
 }
 $0 = $5 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexHullInternal__Rational64__compare_28btConvexHullInternal__Rational64_20const__29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 $2 = HEAP32[$1 + 16 >> 2];
 $15 = HEAP32[$0 + 16 >> 2];
 if (($2 | 0) != ($15 | 0)) {
  return $15 - $2 | 0;
 }
 if (!$15) {
  return 0;
 }
 $2 = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $12 = $3;
 $4 = HEAP32[$2 + 12 >> 2];
 $13 = $4;
 $10 = $4;
 $3 = 0;
 $8 = $3;
 $4 = $0;
 $3 = HEAP32[$4 >> 2];
 $9 = $3;
 $2 = HEAP32[$4 + 4 >> 2];
 $3 = 0;
 $14 = $3;
 $3 = $8;
 $4 = $9;
 $16 = $4;
 $4 = $14;
 $4 = __wasm_i64_mul($10, $3, $9, $4);
 $17 = $4;
 $3 = i64toi32_i32$HIGH_BITS;
 $7 = $3;
 $4 = 0;
 $6 = $4;
 $4 = $2;
 $9 = $2;
 $2 = 0;
 $11 = $2;
 $2 = $8;
 $3 = $11;
 $3 = __wasm_i64_mul($10, $2, $4, $3);
 $5 = $3;
 $2 = i64toi32_i32$HIGH_BITS;
 $3 = $2;
 $2 = $6;
 $6 = $3 + $2 | 0;
 $4 = $7;
 $7 = $4 + $5 | 0;
 if ($7 >>> 0 < $5 >>> 0) {
  $6 = $6 + 1 | 0;
 }
 $5 = $7;
 $3 = $6;
 $2 = $12;
 $12 = $2;
 $4 = 0;
 $13 = $4;
 $2 = $11;
 $2 = __wasm_i64_mul($12, $4, $9, $2);
 $10 = $2;
 $4 = i64toi32_i32$HIGH_BITS;
 $8 = $4;
 $2 = 0;
 $6 = $2;
 $2 = $3;
 $7 = $2 + $6 | 0;
 $4 = $5;
 $5 = $8;
 $3 = $4 + $5 | 0;
 if ($3 >>> 0 < $5 >>> 0) {
  $7 = $7 + 1 | 0;
 }
 $9 = $3;
 $11 = $7;
 $4 = 0;
 $8 = $4;
 $2 = 0;
 $3 = $2;
 $4 = $17;
 $7 = $10;
 $5 = $7;
 $6 = $4 + $5 | 0;
 $2 = $8;
 $7 = $3;
 $3 = $2 + $7 | 0;
 $10 = $6;
 $3 = $6 >>> 0 < $5 >>> 0 ? $3 + 1 | 0 : $3;
 $8 = $3;
 $4 = 0;
 $2 = $4;
 $4 = $11;
 $6 = $4 + $2 | 0;
 $3 = $9;
 $5 = $8;
 $7 = $3 + $5 | 0;
 if ($7 >>> 0 < $5 >>> 0) {
  $6 = $6 + 1 | 0;
 }
 $9 = $7;
 $11 = $6;
 $4 = $10;
 $3 = $4;
 $10 = 0;
 $8 = $3;
 $3 = $13;
 $4 = $14;
 $4 = __wasm_i64_mul($12, $3, $16, $4);
 $5 = $4;
 $3 = i64toi32_i32$HIGH_BITS;
 $4 = $3;
 $3 = $8;
 $7 = $3 + $4 | 0;
 $6 = $10;
 $2 = $5 + $6 | 0;
 if ($2 >>> 0 < $5 >>> 0) {
  $7 = $7 + 1 | 0;
 }
 $18 = $2;
 $19 = $7;
 $6 = $8;
 $5 = $10;
 $6 = ($7 | 0) == ($6 | 0) & $2 >>> 0 < $5 >>> 0 | $7 >>> 0 < $6 >>> 0;
 $3 = $11;
 $2 = $3;
 $5 = $9;
 $4 = $5 + $6 | 0;
 if ($4 >>> 0 < $6 >>> 0) {
  $2 = $2 + 1 | 0;
 }
 $20 = $4;
 $21 = $2;
 $22 = $4;
 $23 = $2;
 $3 = $1;
 $2 = HEAP32[$3 >> 2];
 $12 = $2;
 $5 = HEAP32[$3 + 4 >> 2];
 $13 = $5;
 $10 = $5;
 $2 = 0;
 $8 = $2;
 $5 = $0;
 $2 = HEAP32[$5 + 8 >> 2];
 $9 = $2;
 $3 = HEAP32[$5 + 12 >> 2];
 $2 = 0;
 $14 = $2;
 $2 = $8;
 $5 = $9;
 $16 = $5;
 $5 = $14;
 $5 = __wasm_i64_mul($10, $2, $9, $5);
 $17 = $5;
 $2 = i64toi32_i32$HIGH_BITS;
 $1 = $2;
 $5 = 0;
 $0 = $5;
 $5 = $3;
 $9 = $3;
 $3 = 0;
 $11 = $3;
 $3 = $8;
 $2 = $11;
 $2 = __wasm_i64_mul($10, $3, $5, $2);
 $6 = $2;
 $3 = i64toi32_i32$HIGH_BITS;
 $2 = $3;
 $3 = $0;
 $4 = $3 + $2 | 0;
 $5 = $1;
 $7 = $5 + $6 | 0;
 if ($7 >>> 0 < $6 >>> 0) {
  $4 = $4 + 1 | 0;
 }
 $1 = $7;
 $0 = $4;
 $3 = $12;
 $12 = $3;
 $5 = 0;
 $13 = $5;
 $3 = $11;
 $3 = __wasm_i64_mul($12, $5, $9, $3);
 $10 = $3;
 $5 = i64toi32_i32$HIGH_BITS;
 $8 = $5;
 $3 = 0;
 $4 = $3;
 $3 = $0;
 $7 = $3 + $4 | 0;
 $5 = $1;
 $6 = $8;
 $2 = $5 + $6 | 0;
 if ($2 >>> 0 < $6 >>> 0) {
  $7 = $7 + 1 | 0;
 }
 $9 = $2;
 $11 = $7;
 $5 = 0;
 $1 = $5;
 $3 = 0;
 $0 = $3;
 $5 = $17;
 $7 = $10;
 $6 = $7;
 $4 = $5 + $6 | 0;
 $3 = $1;
 $7 = $0;
 $2 = $3 + $7 | 0;
 $10 = $4;
 $2 = $4 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2;
 $8 = $2;
 $5 = 0;
 $3 = $5;
 $5 = $11;
 $4 = $3 + $5 | 0;
 $2 = $9;
 $6 = $8;
 $7 = $2 + $6 | 0;
 if ($7 >>> 0 < $6 >>> 0) {
  $4 = $4 + 1 | 0;
 }
 $1 = $7;
 $0 = $4;
 $5 = $10;
 $2 = $5;
 $10 = 0;
 $8 = $2;
 $2 = $13;
 $5 = $14;
 $5 = __wasm_i64_mul($12, $2, $16, $5);
 $6 = $5;
 $2 = i64toi32_i32$HIGH_BITS;
 $5 = $2;
 $2 = $8;
 $7 = $2 + $5 | 0;
 $4 = $10;
 $3 = $4 + $6 | 0;
 if ($3 >>> 0 < $6 >>> 0) {
  $7 = $7 + 1 | 0;
 }
 $9 = $3;
 $4 = $8;
 $11 = $7;
 $2 = $3;
 $6 = $10;
 $4 = ($4 | 0) == ($7 | 0) & $2 >>> 0 < $6 >>> 0 | $7 >>> 0 < $4 >>> 0;
 $2 = $0;
 $3 = $2;
 $6 = $1;
 $5 = $4 + $6 | 0;
 if ($5 >>> 0 < $4 >>> 0) {
  $3 = $3 + 1 | 0;
 }
 $12 = $5;
 $13 = $3;
 $3 = $23;
 $6 = $13;
 $2 = $22;
 $4 = $5;
 $0 = -1;
 label$3 : {
  if (($3 | 0) == ($6 | 0) & $2 >>> 0 < $4 >>> 0 | $3 >>> 0 < $6 >>> 0) {
   break label$3;
  }
  $3 = $13;
  $2 = $21;
  $4 = $20;
  $6 = $12;
  $0 = 1;
  if (($3 | 0) == ($2 | 0) & $4 >>> 0 > $6 >>> 0 | $2 >>> 0 > $3 >>> 0) {
   break label$3;
  }
  $4 = $19;
  $2 = $11;
  $6 = $18;
  $3 = $9;
  $0 = -1;
  if (($4 | 0) == ($2 | 0) & $6 >>> 0 < $3 >>> 0 | $4 >>> 0 < $2 >>> 0) {
   break label$3;
  }
  $4 = $11;
  $6 = $19;
  $3 = $18;
  $2 = $9;
  $0 = ($4 | 0) == ($6 | 0) & $3 >>> 0 > $2 >>> 0 | $6 >>> 0 > $4 >>> 0;
 }
 return Math_imul($15, $0);
}
function btSimulationIslandManager__buildAndProcessIslands_28btDispatcher__2c_20btCollisionWorld__2c_20btSimulationIslandManager__IslandCallback__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $10 = global$0 - 16 | 0;
 $4 = $10;
 if ($10 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 btSimulationIslandManager__buildIslands_28btDispatcher__2c_20btCollisionWorld__29($0, $1, $2);
 $11 = HEAP32[$0 + 8 >> 2];
 $17 = CProfileSample__CProfileSample_28char_20const__29($10 + 8 | 0, 6124);
 label$2 : {
  if (!HEAPU8[$0 + 64 | 0]) {
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 44 >> 2]]($1) | 0;
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, HEAP32[$2 + 16 >> 2], HEAP32[$2 + 8 >> 2], $0, $1, -1);
   break label$2;
  }
  $13 = HEAP32[$0 + 28 >> 2];
  if (($13 | 0) >= 2) {
   void_20btAlignedObjectArray_btPersistentManifold____quickSortInternal_btPersistentManifoldSortPredicate__28btPersistentManifoldSortPredicate_20const__2c_20int_2c_20int_29($0 + 24 | 0, $10, 0, $13 + -1 | 0);
  }
  if (($11 | 0) < 1) {
   break label$2;
  }
  $16 = 1;
  while (1) {
   $1 = HEAP32[$0 + 16 >> 2];
   $14 = HEAP32[$1 + ($6 << 3) >> 2];
   $15 = 1;
   label$6 : {
    if (($6 | 0) >= ($11 | 0)) {
     break label$6;
    }
    while (1) {
     $8 = HEAP32[HEAP32[$2 + 16 >> 2] + (HEAP32[(($6 << 3) + $1 | 0) + 4 >> 2] << 2) >> 2];
     $4 = HEAP32[$0 + 48 >> 2];
     label$8 : {
      if (($4 | 0) != HEAP32[$0 + 52 >> 2]) {
       break label$8;
      }
      $7 = $4 ? $4 << 1 : 1;
      if (($4 | 0) >= ($7 | 0)) {
       break label$8;
      }
      $1 = 0;
      $9 = 0;
      if ($7) {
       $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($7 << 2, 16);
       $4 = HEAP32[$0 + 48 >> 2];
      }
      if (($4 | 0) >= 1) {
       while (1) {
        $5 = $1 << 2;
        HEAP32[$9 + $5 >> 2] = HEAP32[HEAP32[$0 + 56 >> 2] + $5 >> 2];
        $1 = $1 + 1 | 0;
        if (($4 | 0) != ($1 | 0)) {
         continue;
        }
        break;
       }
      }
      $1 = HEAP32[$0 + 56 >> 2];
      if ($1) {
       if (HEAPU8[$0 + 60 | 0]) {
        btAlignedFreeInternal_28void__29($1);
        $4 = HEAP32[$0 + 48 >> 2];
       }
       HEAP32[$0 + 56 >> 2] = 0;
      }
      HEAP32[$0 + 56 >> 2] = $9;
      HEAP8[$0 + 60 | 0] = 1;
      HEAP32[$0 + 52 >> 2] = $7;
     }
     HEAP32[HEAP32[$0 + 56 >> 2] + ($4 << 2) >> 2] = $8;
     HEAP32[$0 + 48 >> 2] = $4 + 1;
     $1 = HEAP32[$8 + 220 >> 2];
     $15 = (($1 | 0) == 2 | ($1 | 0) == 5) & $15;
     $6 = $6 + 1 | 0;
     if (($11 | 0) == ($6 | 0)) {
      $6 = $11;
      break label$6;
     }
     $1 = HEAP32[$0 + 16 >> 2];
     if (HEAP32[$1 + ($6 << 3) >> 2] == ($14 | 0)) {
      continue;
     }
     break;
    }
   }
   $8 = 0;
   $4 = 0;
   label$16 : {
    if (($12 | 0) >= ($13 | 0)) {
     break label$16;
    }
    $9 = HEAP32[$0 + 36 >> 2];
    $7 = $9 + ($12 << 2) | 0;
    $1 = HEAP32[$7 >> 2];
    $5 = HEAP32[HEAP32[$1 + 836 >> 2] + 208 >> 2];
    if (($5 | 0) <= -1) {
     $5 = HEAP32[HEAP32[$1 + 840 >> 2] + 208 >> 2];
    }
    $1 = $12;
    $4 = 0;
    if (($5 | 0) != ($14 | 0)) {
     break label$16;
    }
    while (1) {
     $1 = $1 + 1 | 0;
     if (($1 | 0) < ($13 | 0)) {
      $5 = HEAP32[($1 << 2) + $9 >> 2];
      $4 = HEAP32[HEAP32[$5 + 836 >> 2] + 208 >> 2];
      if (($4 | 0) <= -1) {
       $4 = HEAP32[HEAP32[$5 + 840 >> 2] + 208 >> 2];
      }
      if (($4 | 0) == ($14 | 0)) {
       continue;
      }
     }
     break;
    }
    $8 = $1 - $12 | 0;
    $16 = $1;
    $4 = $7;
   }
   if (!$15) {
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, HEAP32[$0 + 56 >> 2], HEAP32[$0 + 48 >> 2], $4, $8, $14);
   }
   $1 = HEAP32[$0 + 48 >> 2];
   if (($1 | 0) <= -1) {
    if (HEAP32[$0 + 52 >> 2] <= -1) {
     $4 = HEAP32[$0 + 56 >> 2];
     if ($4) {
      if (HEAPU8[$0 + 60 | 0]) {
       btAlignedFreeInternal_28void__29($4);
      }
      HEAP32[$0 + 56 >> 2] = 0;
     }
     HEAP8[$0 + 60 | 0] = 1;
     HEAP32[$0 + 52 >> 2] = 0;
     HEAP32[$0 + 56 >> 2] = 0;
    }
    while (1) {
     HEAP32[HEAP32[$0 + 56 >> 2] + ($1 << 2) >> 2] = 0;
     $4 = $1 + 1 | 0;
     $5 = $4 >>> 0 >= $1 >>> 0;
     $1 = $4;
     if ($5) {
      continue;
     }
     break;
    }
   }
   $12 = $8 ? $16 : $12;
   HEAP32[$0 + 48 >> 2] = 0;
   if (($6 | 0) < ($11 | 0)) {
    continue;
   }
   break;
  }
 }
 CProfileSample___CProfileSample_28_29($17);
 $0 = $10 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexConvexAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $0 = global$0 - 624 | 0;
 $3 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $6 = Math_fround(HEAPF32[$1 + 116 >> 2] - HEAPF32[$1 + 52 >> 2]);
 $5 = Math_fround($6 * $6);
 $6 = Math_fround(HEAPF32[$1 + 120 >> 2] - HEAPF32[$1 + 56 >> 2]);
 $5 = Math_fround($5 + Math_fround($6 * $6));
 $6 = Math_fround(HEAPF32[$1 + 124 >> 2] - HEAPF32[$1 + 60 >> 2]);
 $5 = Math_fround($5 + Math_fround($6 * $6));
 $6 = HEAPF32[$1 + 276 >> 2];
 label$2 : {
  if (!!($5 < Math_fround($6 * $6))) {
   $6 = Math_fround(1);
   $5 = Math_fround(HEAPF32[$2 + 116 >> 2] - HEAPF32[$2 + 52 >> 2]);
   $7 = Math_fround($5 * $5);
   $5 = Math_fround(HEAPF32[$2 + 120 >> 2] - HEAPF32[$2 + 56 >> 2]);
   $7 = Math_fround($7 + Math_fround($5 * $5));
   $5 = Math_fround(HEAPF32[$2 + 124 >> 2] - HEAPF32[$2 + 60 >> 2]);
   $7 = Math_fround($7 + Math_fround($5 * $5));
   $5 = HEAPF32[$2 + 276 >> 2];
   if ($7 < Math_fround($5 * $5)) {
    break label$2;
   }
  }
  $6 = Math_fround(1);
  if (HEAPU8[22584]) {
   break label$2;
  }
  $4 = HEAP32[$1 + 192 >> 2];
  $3 = HEAP32[$2 + 272 >> 2];
  btConvexInternalShape__btConvexInternalShape_28_29($0 + 560 | 0);
  HEAP32[$0 + 592 >> 2] = 0;
  HEAP32[$0 + 596 >> 2] = 0;
  HEAP32[$0 + 588 >> 2] = 1065353216;
  HEAP32[$0 + 600 >> 2] = 0;
  HEAP32[$0 + 604 >> 2] = 0;
  HEAP32[$0 + 608 >> 2] = 0;
  HEAP32[$0 + 580 >> 2] = 1065353216;
  HEAP32[$0 + 584 >> 2] = 1065353216;
  HEAP32[$0 + 564 >> 2] = 8;
  HEAP32[$0 + 560 >> 2] = 11396;
  HEAP32[$0 + 616 >> 2] = 0;
  HEAP32[$0 + 612 >> 2] = $3;
  HEAP32[$0 + 596 >> 2] = $3;
  HEAP32[$0 + 556 >> 2] = 0;
  HEAP32[$0 + 548 >> 2] = 1566444395;
  HEAP32[$0 + 552 >> 2] = 0;
  HEAP32[$0 + 384 >> 2] = 6988;
  HEAP8[$0 + 356 | 0] = 0;
  HEAP32[$0 + 332 >> 2] = 953267991;
  $3 = btGjkConvexCast__btGjkConvexCast_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__29($0 + 8 | 0, $4, $0 + 560 | 0, $0 + 24 | 0);
  $4 = $1 + 4 | 0;
  $8 = $1 + 68 | 0;
  $9 = $2 + 4 | 0;
  $10 = $2 + 68 | 0;
  label$4 : {
   if (!btGjkConvexCast__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29($3, $4, $8, $9, $10, $0 + 384 | 0)) {
    break label$4;
   }
   $5 = HEAPF32[$0 + 548 >> 2];
   if (!!(HEAPF32[$1 + 268 >> 2] > $5)) {
    HEAPF32[$1 + 268 >> 2] = $5;
   }
   if (!!(HEAPF32[$2 + 268 >> 2] > $5)) {
    HEAPF32[$2 + 268 >> 2] = $5;
   }
   if (!($5 < Math_fround(1))) {
    break label$4;
   }
   $6 = $5;
  }
  btConvexCast___btConvexCast_28_29($3);
  btConvexShape___btConvexShape_28_29($0 + 560 | 0);
  $11 = HEAP32[$2 + 192 >> 2];
  $3 = HEAP32[$1 + 272 >> 2];
  btConvexInternalShape__btConvexInternalShape_28_29($0 + 560 | 0);
  HEAP32[$0 + 592 >> 2] = 0;
  HEAP32[$0 + 596 >> 2] = 0;
  HEAP32[$0 + 588 >> 2] = 1065353216;
  HEAP32[$0 + 600 >> 2] = 0;
  HEAP32[$0 + 604 >> 2] = 0;
  HEAP32[$0 + 608 >> 2] = 0;
  HEAP32[$0 + 580 >> 2] = 1065353216;
  HEAP32[$0 + 584 >> 2] = 1065353216;
  HEAP32[$0 + 564 >> 2] = 8;
  HEAP32[$0 + 560 >> 2] = 11396;
  HEAP32[$0 + 616 >> 2] = 0;
  HEAP32[$0 + 612 >> 2] = $3;
  HEAP32[$0 + 596 >> 2] = $3;
  HEAP32[$0 + 556 >> 2] = 0;
  HEAP32[$0 + 548 >> 2] = 1566444395;
  HEAP32[$0 + 552 >> 2] = 0;
  HEAP32[$0 + 384 >> 2] = 6988;
  HEAP8[$0 + 356 | 0] = 0;
  HEAP32[$0 + 332 >> 2] = 953267991;
  $3 = btGjkConvexCast__btGjkConvexCast_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__29($0 + 8 | 0, $0 + 560 | 0, $11, $0 + 24 | 0);
  label$7 : {
   if (!btGjkConvexCast__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29($3, $4, $8, $9, $10, $0 + 384 | 0)) {
    break label$7;
   }
   $5 = HEAPF32[$0 + 548 >> 2];
   if (!!(HEAPF32[$1 + 268 >> 2] > $5)) {
    HEAPF32[$1 + 268 >> 2] = $5;
   }
   if (!!(HEAPF32[$2 + 268 >> 2] > $5)) {
    HEAPF32[$2 + 268 >> 2] = $5;
   }
   if (!($6 > $5)) {
    break label$7;
   }
   $6 = $5;
  }
  btConvexCast___btConvexCast_28_29($3);
  btConvexShape___btConvexShape_28_29($0 + 560 | 0);
 }
 $0 = $0 + 624 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($6);
}
function btBU_Simplex1to4__getEdge_28int_2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     $4 = HEAP32[$0 + 96 >> 2] + -2 | 0;
     label$5 : {
      if ($4 >>> 0 > 2) {
       break label$5;
      }
      label$6 : {
       switch ($4 - 1 | 0) {
       case 0:
        if ($1 >>> 0 > 2) {
         break label$5;
        }
        label$8 : {
         switch ($1 - 1 | 0) {
         case 0:
          break label$3;
         case 1:
          break label$8;
         default:
          break label$4;
         }
        }
        break label$2;
       case 1:
        break label$6;
       default:
        break label$4;
       }
      }
      if ($1 >>> 0 > 5) {
       break label$5;
      }
      label$9 : {
       switch ($1 - 1 | 0) {
       case 2:
        $5 = $0;
        $1 = HEAP32[$5 + 100 >> 2];
        $4 = HEAP32[$5 + 104 >> 2];
        $6 = $1;
        $1 = $2;
        HEAP32[$1 >> 2] = $6;
        HEAP32[$1 + 4 >> 2] = $4;
        $1 = HEAP32[$5 + 112 >> 2];
        $4 = HEAP32[$5 + 108 >> 2];
        $6 = $4;
        $4 = $2;
        HEAP32[$4 + 8 >> 2] = $6;
        HEAP32[$4 + 12 >> 2] = $1;
        break label$1;
       case 3:
        $5 = $0;
        $1 = HEAP32[$5 + 124 >> 2];
        $4 = HEAP32[$5 + 128 >> 2];
        $6 = $1;
        $1 = $2;
        HEAP32[$1 + 8 >> 2] = $6;
        HEAP32[$1 + 12 >> 2] = $4;
        $1 = HEAP32[$5 + 120 >> 2];
        $4 = HEAP32[$5 + 116 >> 2];
        $6 = $4;
        $4 = $2;
        HEAP32[$4 >> 2] = $6;
        HEAP32[$4 + 4 >> 2] = $1;
        break label$1;
       case 1:
        break label$2;
       case 0:
        break label$3;
       case 4:
        break label$9;
       default:
        break label$4;
       }
      }
      $5 = $0;
      $1 = HEAP32[$5 + 140 >> 2];
      $4 = HEAP32[$5 + 144 >> 2];
      $0 = $1;
      $1 = $2;
      HEAP32[$1 + 8 >> 2] = $0;
      HEAP32[$1 + 12 >> 2] = $4;
      $1 = HEAP32[$5 + 136 >> 2];
      $4 = HEAP32[$5 + 132 >> 2];
      $0 = $4;
      $4 = $2;
      HEAP32[$4 >> 2] = $0;
      HEAP32[$4 + 4 >> 2] = $1;
      $4 = HEAP32[$5 + 160 >> 2];
      $1 = HEAP32[$5 + 156 >> 2];
      $0 = $1;
      $1 = $3;
      HEAP32[$1 + 8 >> 2] = $0;
      HEAP32[$1 + 12 >> 2] = $4;
      $1 = HEAP32[$5 + 152 >> 2];
      $4 = HEAP32[$5 + 148 >> 2];
      $0 = $4;
      $4 = $3;
      HEAP32[$4 >> 2] = $0;
      HEAP32[$4 + 4 >> 2] = $1;
     }
     return;
    }
    $5 = $0;
    $1 = HEAP32[$5 + 100 >> 2];
    $4 = HEAP32[$5 + 104 >> 2];
    $0 = $1;
    $1 = $2;
    HEAP32[$1 >> 2] = $0;
    HEAP32[$1 + 4 >> 2] = $4;
    $1 = HEAP32[$5 + 112 >> 2];
    $4 = HEAP32[$5 + 108 >> 2];
    $0 = $4;
    $4 = $2;
    HEAP32[$4 + 8 >> 2] = $0;
    HEAP32[$4 + 12 >> 2] = $1;
    $4 = HEAP32[$5 + 128 >> 2];
    $1 = HEAP32[$5 + 124 >> 2];
    $0 = $1;
    $1 = $3;
    HEAP32[$1 + 8 >> 2] = $0;
    HEAP32[$1 + 12 >> 2] = $4;
    $1 = HEAP32[$5 + 120 >> 2];
    $4 = HEAP32[$5 + 116 >> 2];
    $0 = $4;
    $4 = $3;
    HEAP32[$4 >> 2] = $0;
    HEAP32[$4 + 4 >> 2] = $1;
    return;
   }
   $5 = $0;
   $1 = HEAP32[$5 + 124 >> 2];
   $4 = HEAP32[$5 + 128 >> 2];
   $0 = $1;
   $1 = $2;
   HEAP32[$1 + 8 >> 2] = $0;
   HEAP32[$1 + 12 >> 2] = $4;
   $1 = HEAP32[$5 + 120 >> 2];
   $4 = HEAP32[$5 + 116 >> 2];
   $0 = $4;
   $4 = $2;
   HEAP32[$4 >> 2] = $0;
   HEAP32[$4 + 4 >> 2] = $1;
   $4 = HEAP32[$5 + 144 >> 2];
   $1 = HEAP32[$5 + 140 >> 2];
   $0 = $1;
   $1 = $3;
   HEAP32[$1 + 8 >> 2] = $0;
   HEAP32[$1 + 12 >> 2] = $4;
   $1 = HEAP32[$5 + 136 >> 2];
   $4 = HEAP32[$5 + 132 >> 2];
   $0 = $4;
   $4 = $3;
   HEAP32[$4 >> 2] = $0;
   HEAP32[$4 + 4 >> 2] = $1;
   return;
  }
  $5 = $0;
  $1 = HEAP32[$5 + 140 >> 2];
  $4 = HEAP32[$5 + 144 >> 2];
  $0 = $1;
  $1 = $2;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 12 >> 2] = $4;
  $1 = HEAP32[$5 + 136 >> 2];
  $4 = HEAP32[$5 + 132 >> 2];
  $0 = $4;
  $4 = $2;
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  $4 = HEAP32[$5 + 112 >> 2];
  $1 = HEAP32[$5 + 108 >> 2];
  $0 = $1;
  $1 = $3;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 12 >> 2] = $4;
  $1 = HEAP32[$5 + 104 >> 2];
  $4 = HEAP32[$5 + 100 >> 2];
  $0 = $4;
  $4 = $3;
  HEAP32[$4 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $1;
  return;
 }
 $1 = HEAP32[$0 + 156 >> 2];
 $4 = HEAP32[$5 + 160 >> 2];
 $0 = $1;
 $1 = $3;
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 12 >> 2] = $4;
 $1 = HEAP32[$5 + 152 >> 2];
 $4 = HEAP32[$5 + 148 >> 2];
 $0 = $4;
 $4 = $3;
 HEAP32[$4 >> 2] = $0;
 HEAP32[$4 + 4 >> 2] = $1;
}
function btPoint2PointConstraint__getInfo2NonVirtual_28btTypedConstraint__btConstraintInfo2__2c_20btTransform_20const__2c_20btTransform_20const__29($0, $1, $2, $3) {
 var $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0, $23 = 0;
 $8 = HEAP32[$1 + 8 >> 2];
 HEAP32[$8 >> 2] = 1065353216;
 $13 = HEAP32[$1 + 24 >> 2];
 $12 = $13 << 2;
 $22 = $12 + 4 | 0;
 HEAP32[$22 + $8 >> 2] = 1065353216;
 $14 = $13 << 3;
 $23 = $14 + 8 | 0;
 HEAP32[$23 + $8 >> 2] = 1065353216;
 $9 = HEAPF32[$2 + 20 >> 2];
 $15 = HEAPF32[$2 + 24 >> 2];
 $10 = HEAPF32[$2 + 36 >> 2];
 $5 = HEAPF32[$0 + 304 >> 2];
 $16 = HEAPF32[$2 + 40 >> 2];
 $6 = HEAPF32[$0 + 308 >> 2];
 $17 = HEAPF32[$2 + 8 >> 2];
 $18 = HEAPF32[$2 >> 2];
 $19 = HEAPF32[$2 + 4 >> 2];
 $20 = HEAPF32[$2 + 16 >> 2];
 $21 = HEAPF32[$2 + 32 >> 2];
 $11 = HEAPF32[$0 + 300 >> 2];
 $4 = global$0;
 $8 = $4 - 16 | 0;
 HEAP32[$8 + 12 >> 2] = 0;
 $10 = Math_fround(Math_fround(Math_fround($11 * $21) + Math_fround($5 * $10)) + Math_fround($6 * $16));
 HEAPF32[$8 + 8 >> 2] = $10;
 $9 = Math_fround(Math_fround(Math_fround($11 * $20) + Math_fround($5 * $9)) + Math_fround($6 * $15));
 HEAPF32[$8 + 4 >> 2] = $9;
 $5 = Math_fround(Math_fround(Math_fround($18 * $11) + Math_fround($19 * $5)) + Math_fround($17 * $6));
 HEAPF32[$8 >> 2] = $5;
 $4 = HEAP32[$1 + 12 >> 2];
 HEAP32[$4 + 12 >> 2] = 0;
 HEAPF32[$4 + 8 >> 2] = -$9;
 HEAPF32[$4 + 4 >> 2] = $10;
 HEAP32[$4 >> 2] = 0;
 $7 = $4 + $12 | 0;
 HEAP32[$7 + 12 >> 2] = 0;
 HEAPF32[$7 + 8 >> 2] = $5;
 HEAP32[$7 + 4 >> 2] = 0;
 HEAPF32[$7 >> 2] = -$10;
 $4 = $4 + $14 | 0;
 HEAP32[$4 + 8 >> 2] = 0;
 HEAP32[$4 + 12 >> 2] = 0;
 HEAPF32[$4 + 4 >> 2] = -$5;
 HEAPF32[$4 >> 2] = $9;
 $4 = HEAP32[$1 + 16 >> 2];
 HEAP32[$4 >> 2] = -1082130432;
 HEAP32[$4 + $22 >> 2] = -1082130432;
 HEAP32[$4 + $23 >> 2] = -1082130432;
 $9 = HEAPF32[$3 + 36 >> 2];
 $15 = HEAPF32[$3 + 40 >> 2];
 $10 = HEAPF32[$3 + 20 >> 2];
 $5 = HEAPF32[$0 + 320 >> 2];
 $16 = HEAPF32[$3 + 24 >> 2];
 $6 = HEAPF32[$0 + 324 >> 2];
 $17 = HEAPF32[$3 + 8 >> 2];
 $18 = HEAPF32[$3 >> 2];
 $19 = HEAPF32[$3 + 4 >> 2];
 $20 = HEAPF32[$3 + 32 >> 2];
 $21 = HEAPF32[$3 + 16 >> 2];
 $11 = HEAPF32[$0 + 316 >> 2];
 $4 = HEAP32[$1 + 20 >> 2];
 HEAP32[$4 + 12 >> 2] = 0;
 HEAP32[$4 >> 2] = 0;
 $10 = Math_fround(Math_fround(Math_fround($11 * $21) + Math_fround($5 * $10)) + Math_fround($6 * $16));
 HEAPF32[$4 + 8 >> 2] = $10;
 $9 = Math_fround(Math_fround(Math_fround($11 * $20) + Math_fround($5 * $9)) + Math_fround($6 * $15));
 HEAPF32[$4 + 4 >> 2] = -$9;
 $7 = $4 + $12 | 0;
 HEAP32[$7 + 12 >> 2] = 0;
 $5 = Math_fround(Math_fround(Math_fround($18 * $11) + Math_fround($19 * $5)) + Math_fround($17 * $6));
 HEAPF32[$7 + 8 >> 2] = -$5;
 HEAP32[$7 + 4 >> 2] = 0;
 HEAPF32[$7 >> 2] = $9;
 $4 = $4 + $14 | 0;
 HEAP32[$4 + 8 >> 2] = 0;
 HEAP32[$4 + 12 >> 2] = 0;
 HEAPF32[$4 + 4 >> 2] = $5;
 HEAPF32[$4 >> 2] = -$10;
 $4 = HEAP32[$1 + 28 >> 2];
 $7 = HEAP32[$0 + 332 >> 2];
 $6 = Math_fround(HEAPF32[($7 & 1 ? $0 + 336 | 0 : $1 + 4 | 0) >> 2] * HEAPF32[$1 >> 2]);
 HEAPF32[$4 >> 2] = $6 * Math_fround(Math_fround(Math_fround($5 + HEAPF32[$3 + 48 >> 2]) - HEAPF32[$8 >> 2]) - HEAPF32[$2 + 48 >> 2]);
 HEAPF32[$4 + $12 >> 2] = $6 * Math_fround(Math_fround(Math_fround($10 + HEAPF32[$3 + 52 >> 2]) - HEAPF32[$8 + 4 >> 2]) - HEAPF32[$2 + 52 >> 2]);
 HEAPF32[$4 + $14 >> 2] = $6 * Math_fround(Math_fround(Math_fround($9 + HEAPF32[$3 + 56 >> 2]) - HEAPF32[$8 + 8 >> 2]) - HEAPF32[$2 + 56 >> 2]);
 $3 = $13 << 1;
 if ($7 & 2) {
  $2 = HEAP32[$1 + 32 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$0 + 340 >> 2];
  HEAP32[$2 + $12 >> 2] = HEAP32[$0 + 340 >> 2];
  HEAP32[($3 << 2) + $2 >> 2] = HEAP32[$0 + 340 >> 2];
 }
 $5 = HEAPF32[$0 + 356 >> 2];
 $11 = Math_fround(-$5);
 $6 = $5;
 if (!!($5 > Math_fround(0))) {
  HEAPF32[HEAP32[$1 + 36 >> 2] >> 2] = $11;
  HEAPF32[HEAP32[$1 + 40 >> 2] >> 2] = $5;
  $6 = HEAPF32[$0 + 356 >> 2];
 }
 if (!!($6 > Math_fround(0))) {
  $2 = $13 << 2;
  HEAPF32[$2 + HEAP32[$1 + 36 >> 2] >> 2] = $11;
  HEAPF32[HEAP32[$1 + 40 >> 2] + $2 >> 2] = $5;
  $6 = HEAPF32[$0 + 356 >> 2];
 }
 if (!!($6 > Math_fround(0))) {
  $3 = $3 << 2;
  HEAPF32[$3 + HEAP32[$1 + 36 >> 2] >> 2] = $11;
  HEAPF32[HEAP32[$1 + 40 >> 2] + $3 >> 2] = $5;
 }
 HEAP32[$1 + 48 >> 2] = HEAP32[$0 + 352 >> 2];
}
function btPoint2PointConstraint__buildJacobian_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0;
 $1 = global$0 - 144 | 0;
 $4 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$1 + 136 >> 2] = 0;
 HEAP32[$1 + 140 >> 2] = 0;
 HEAP32[$1 + 128 >> 2] = 0;
 HEAP32[$1 + 132 >> 2] = 0;
 while (1) {
  $21 = ($1 + 128 | 0) + ($11 << 2) | 0;
  HEAP32[$21 >> 2] = 1065353216;
  $3 = HEAP32[$0 + 28 >> 2];
  HEAP32[$1 + 80 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$1 + 84 >> 2] = HEAP32[$3 + 20 >> 2];
  $2 = HEAP32[$3 + 36 >> 2];
  HEAP32[$1 + 92 >> 2] = 0;
  HEAP32[$1 + 88 >> 2] = $2;
  HEAP32[$1 + 96 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$1 + 100 >> 2] = HEAP32[$3 + 24 >> 2];
  $2 = HEAP32[$3 + 40 >> 2];
  HEAP32[$1 + 108 >> 2] = 0;
  HEAP32[$1 + 104 >> 2] = $2;
  HEAP32[$1 + 112 >> 2] = HEAP32[$3 + 12 >> 2];
  HEAP32[$1 + 116 >> 2] = HEAP32[$3 + 28 >> 2];
  $2 = HEAP32[$3 + 44 >> 2];
  HEAP32[$1 + 124 >> 2] = 0;
  HEAP32[$1 + 120 >> 2] = $2;
  $2 = HEAP32[$0 + 32 >> 2];
  HEAP32[$1 + 32 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 + 36 >> 2] = HEAP32[$2 + 20 >> 2];
  $4 = HEAP32[$2 + 36 >> 2];
  HEAP32[$1 + 44 >> 2] = 0;
  HEAP32[$1 + 40 >> 2] = $4;
  $4 = $2 + 8 | 0;
  HEAP32[$1 + 48 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$1 + 52 >> 2] = HEAP32[$2 + 24 >> 2];
  $4 = HEAP32[$2 + 40 >> 2];
  HEAP32[$1 + 60 >> 2] = 0;
  HEAP32[$1 + 56 >> 2] = $4;
  $4 = $2 + 12 | 0;
  HEAP32[$1 + 64 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$1 + 68 >> 2] = HEAP32[$2 + 28 >> 2];
  $4 = HEAP32[$2 + 44 >> 2];
  HEAP32[$1 + 76 >> 2] = 0;
  HEAP32[$1 + 72 >> 2] = $4;
  $8 = HEAPF32[$3 + 52 >> 2];
  $12 = HEAPF32[$3 + 12 >> 2];
  $13 = HEAPF32[$3 + 8 >> 2];
  $9 = HEAPF32[$3 + 56 >> 2];
  $14 = HEAPF32[$3 + 28 >> 2];
  $15 = HEAPF32[$3 + 20 >> 2];
  $16 = HEAPF32[$3 + 24 >> 2];
  $10 = HEAPF32[$3 + 60 >> 2];
  $17 = HEAPF32[$3 + 44 >> 2];
  $18 = HEAPF32[$3 + 36 >> 2];
  $19 = HEAPF32[$3 + 40 >> 2];
  $20 = HEAPF32[$3 + 4 >> 2];
  $5 = HEAPF32[$0 + 308 >> 2];
  $6 = HEAPF32[$0 + 300 >> 2];
  $7 = HEAPF32[$0 + 304 >> 2];
  HEAP32[$1 + 28 >> 2] = 0;
  HEAPF32[$1 + 24 >> 2] = Math_fround($10 + Math_fround(Math_fround(Math_fround($6 * $18) + Math_fround($7 * $19)) + Math_fround($5 * $17))) - $10;
  HEAPF32[$1 + 20 >> 2] = Math_fround($9 + Math_fround(Math_fround(Math_fround($6 * $15) + Math_fround($7 * $16)) + Math_fround($5 * $14))) - $9;
  HEAPF32[$1 + 16 >> 2] = Math_fround($8 + Math_fround(Math_fround(Math_fround($6 * $20) + Math_fround($7 * $13)) + Math_fround($5 * $12))) - $8;
  $8 = HEAPF32[$2 + 52 >> 2];
  $12 = HEAPF32[$2 + 12 >> 2];
  $13 = HEAPF32[$2 + 8 >> 2];
  $9 = HEAPF32[$2 + 56 >> 2];
  $14 = HEAPF32[$2 + 28 >> 2];
  $15 = HEAPF32[$2 + 20 >> 2];
  $16 = HEAPF32[$2 + 24 >> 2];
  $10 = HEAPF32[$2 + 60 >> 2];
  $17 = HEAPF32[$2 + 44 >> 2];
  $18 = HEAPF32[$2 + 36 >> 2];
  $19 = HEAPF32[$2 + 40 >> 2];
  $20 = HEAPF32[$2 + 4 >> 2];
  $5 = HEAPF32[$0 + 324 >> 2];
  $6 = HEAPF32[$0 + 316 >> 2];
  $7 = HEAPF32[$0 + 320 >> 2];
  HEAP32[$1 + 12 >> 2] = 0;
  HEAPF32[$1 + 8 >> 2] = Math_fround($10 + Math_fround(Math_fround(Math_fround($6 * $18) + Math_fround($7 * $19)) + Math_fround($5 * $17))) - $10;
  HEAPF32[$1 + 4 >> 2] = Math_fround($9 + Math_fround(Math_fround(Math_fround($6 * $15) + Math_fround($7 * $16)) + Math_fround($5 * $14))) - $9;
  HEAPF32[$1 >> 2] = Math_fround($8 + Math_fround(Math_fround(Math_fround($6 * $20) + Math_fround($7 * $13)) + Math_fround($5 * $12))) - $8;
  btJacobianEntry__btJacobianEntry_28btMatrix3x3_20const__2c_20btMatrix3x3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20btVector3_20const__2c_20float_29((Math_imul($11, 84) + $0 | 0) + 48 | 0, $1 + 80 | 0, $1 + 32 | 0, $1 + 16 | 0, $1, $1 + 128 | 0, $3 + 456 | 0, HEAPF32[$3 + 404 >> 2], $2 + 456 | 0, HEAPF32[$2 + 404 >> 2]);
  HEAP32[$21 >> 2] = 0;
  $11 = $11 + 1 | 0;
  if (($11 | 0) != 3) {
   continue;
  }
  break;
 }
 $0 = $1 + 144 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = 0, $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 $29 = HEAP32[$0 + 52 >> 2];
 if (($29 | 0) < 1) {
  return Math_fround(Math_fround(1));
 }
 $5 = HEAPU8[$0 + 68 | 0];
 $33 = $5 ? $1 : $2;
 $1 = $5 ? $2 : $1;
 $34 = HEAP32[$1 - -64 >> 2];
 $30 = HEAPF32[$1 + 60 >> 2];
 $31 = HEAPF32[$1 + 56 >> 2];
 $32 = HEAPF32[$1 + 52 >> 2];
 $35 = HEAP32[$1 + 48 >> 2];
 $7 = HEAPF32[$1 + 44 >> 2];
 $8 = HEAPF32[$1 + 40 >> 2];
 $9 = HEAPF32[$1 + 36 >> 2];
 $36 = HEAP32[$1 + 32 >> 2];
 $10 = HEAPF32[$1 + 28 >> 2];
 $11 = HEAPF32[$1 + 24 >> 2];
 $12 = HEAPF32[$1 + 20 >> 2];
 $37 = HEAP32[$1 + 16 >> 2];
 $13 = HEAPF32[$1 + 12 >> 2];
 $14 = HEAPF32[$1 + 8 >> 2];
 $17 = HEAP32[$1 + 304 >> 2];
 $15 = HEAPF32[$1 + 4 >> 2];
 $38 = HEAP32[$1 + 192 >> 2];
 $16 = Math_fround(1);
 $5 = 0;
 while (1) {
  $2 = HEAP32[$38 + 28 >> 2] + Math_imul($5, 80) | 0;
  $6 = HEAPF32[$2 + 56 >> 2];
  $18 = HEAPF32[$2 + 52 >> 2];
  $19 = HEAPF32[$2 + 48 >> 2];
  $20 = HEAPF32[$2 + 36 >> 2];
  $21 = HEAPF32[$2 + 20 >> 2];
  $22 = HEAPF32[$2 + 4 >> 2];
  $23 = HEAPF32[$2 + 40 >> 2];
  $24 = HEAPF32[$2 + 24 >> 2];
  $25 = HEAPF32[$2 + 8 >> 2];
  $26 = HEAPF32[$2 + 32 >> 2];
  $27 = HEAPF32[$2 >> 2];
  $28 = HEAPF32[$2 + 16 >> 2];
  HEAP32[$1 + 64 >> 2] = 0;
  HEAP32[$1 + 48 >> 2] = 0;
  HEAP32[$1 + 32 >> 2] = 0;
  HEAP32[$1 + 16 >> 2] = 0;
  HEAP32[$1 + 304 >> 2] = $17 + 1;
  HEAPF32[$1 + 36 >> 2] = Math_fround(Math_fround($9 * $27) + Math_fround($8 * $28)) + Math_fround($7 * $26);
  HEAPF32[$1 + 20 >> 2] = Math_fround(Math_fround($12 * $27) + Math_fround($11 * $28)) + Math_fround($10 * $26);
  HEAPF32[$1 + 4 >> 2] = Math_fround(Math_fround($15 * $27) + Math_fround($14 * $28)) + Math_fround($13 * $26);
  HEAPF32[$1 + 44 >> 2] = Math_fround(Math_fround($9 * $25) + Math_fround($8 * $24)) + Math_fround($7 * $23);
  HEAPF32[$1 + 40 >> 2] = Math_fround(Math_fround($9 * $22) + Math_fround($8 * $21)) + Math_fround($7 * $20);
  HEAPF32[$1 + 28 >> 2] = Math_fround(Math_fround($12 * $25) + Math_fround($11 * $24)) + Math_fround($10 * $23);
  HEAPF32[$1 + 24 >> 2] = Math_fround(Math_fround($12 * $22) + Math_fround($11 * $21)) + Math_fround($10 * $20);
  HEAPF32[$1 + 12 >> 2] = Math_fround(Math_fround($15 * $25) + Math_fround($14 * $24)) + Math_fround($13 * $23);
  HEAPF32[$1 + 8 >> 2] = Math_fround(Math_fround($15 * $22) + Math_fround($14 * $21)) + Math_fround($13 * $20);
  HEAPF32[$1 + 60 >> 2] = $30 + Math_fround(Math_fround(Math_fround($9 * $19) + Math_fround($8 * $18)) + Math_fround($7 * $6));
  HEAPF32[$1 + 56 >> 2] = $31 + Math_fround(Math_fround(Math_fround($12 * $19) + Math_fround($11 * $18)) + Math_fround($10 * $6));
  HEAPF32[$1 + 52 >> 2] = $32 + Math_fround(Math_fround(Math_fround($15 * $19) + Math_fround($14 * $18)) + Math_fround($13 * $6));
  $2 = HEAP32[HEAP32[$0 + 60 >> 2] + ($5 << 2) >> 2];
  $6 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2, $1, $33, $3, $4));
  HEAP32[$1 + 64 >> 2] = $34;
  HEAPF32[$1 + 60 >> 2] = $30;
  HEAPF32[$1 + 56 >> 2] = $31;
  HEAPF32[$1 + 52 >> 2] = $32;
  HEAP32[$1 + 48 >> 2] = $35;
  HEAPF32[$1 + 44 >> 2] = $7;
  HEAPF32[$1 + 40 >> 2] = $8;
  HEAPF32[$1 + 36 >> 2] = $9;
  HEAP32[$1 + 32 >> 2] = $36;
  HEAPF32[$1 + 28 >> 2] = $10;
  HEAPF32[$1 + 24 >> 2] = $11;
  HEAPF32[$1 + 20 >> 2] = $12;
  HEAP32[$1 + 16 >> 2] = $37;
  HEAPF32[$1 + 12 >> 2] = $13;
  HEAPF32[$1 + 8 >> 2] = $14;
  HEAPF32[$1 + 4 >> 2] = $15;
  $17 = HEAP32[$1 + 304 >> 2] + 1 | 0;
  HEAP32[$1 + 304 >> 2] = $17;
  $16 = $6 < $16 ? $6 : $16;
  $5 = $5 + 1 | 0;
  if (($29 | 0) != ($5 | 0)) {
   continue;
  }
  break;
 }
 return Math_fround($16);
}
function void_20btAlignedObjectArray_GrahamVector3___quickSortInternal_btAngleCompareFunc__28btAngleCompareFunc_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
 var $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0, $20 = 0, $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0);
 $12 = global$0 - 32 | 0;
 $5 = $12;
 if ($12 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $5 = HEAP32[$0 + 12 >> 2];
 $9 = $5 + Math_imul(($2 + $3 | 0) / 2 | 0, 24) | 0;
 $19 = HEAP32[$9 + 20 >> 2];
 $15 = HEAPF32[$9 + 16 >> 2];
 $21 = HEAPF32[$9 + 8 >> 2];
 $22 = HEAPF32[$9 + 4 >> 2];
 $23 = HEAPF32[$9 >> 2];
 $9 = $2;
 $10 = $3;
 while (1) {
  $16 = HEAPF32[$1 >> 2];
  $4 = Math_fround($23 - $16);
  $11 = Math_fround($4 * $4);
  $17 = HEAPF32[$1 + 4 >> 2];
  $4 = Math_fround($22 - $17);
  $11 = Math_fround($11 + Math_fround($4 * $4));
  $18 = HEAPF32[$1 + 8 >> 2];
  $4 = Math_fround($21 - $18);
  $11 = Math_fround($11 + Math_fround($4 * $4));
  while (1) {
   label$4 : {
    $6 = Math_imul($9, 24) + $5 | 0;
    $4 = HEAPF32[$6 + 16 >> 2];
    label$5 : {
     if ($4 != $15) {
      if ($4 < $15) {
       break label$5;
      }
      break label$4;
     }
     $4 = Math_fround(HEAPF32[$6 >> 2] - $16);
     $13 = Math_fround($4 * $4);
     $4 = Math_fround(HEAPF32[$6 + 4 >> 2] - $17);
     $13 = Math_fround($13 + Math_fround($4 * $4));
     $4 = Math_fround(HEAPF32[$6 + 8 >> 2] - $18);
     $4 = Math_fround($13 + Math_fround($4 * $4));
     if ((($4 != $11 ? $4 < $11 : HEAP32[$6 + 20 >> 2] < ($19 | 0)) | 0) != 1) {
      break label$4;
     }
    }
    $9 = $9 + 1 | 0;
    continue;
   }
   break;
  }
  while (1) {
   label$8 : {
    $20 = Math_imul($10, 24);
    $14 = $20 + $5 | 0;
    $4 = HEAPF32[$14 + 16 >> 2];
    label$9 : {
     if ($15 != $4) {
      if ($15 < $4) {
       break label$9;
      }
      break label$8;
     }
     $4 = Math_fround(HEAPF32[$14 >> 2] - $16);
     $13 = Math_fround($4 * $4);
     $4 = Math_fround(HEAPF32[$14 + 4 >> 2] - $17);
     $13 = Math_fround($13 + Math_fround($4 * $4));
     $4 = Math_fround(HEAPF32[$14 + 8 >> 2] - $18);
     $4 = Math_fround($13 + Math_fround($4 * $4));
     if ((($11 != $4 ? $11 < $4 : ($19 | 0) < HEAP32[$14 + 20 >> 2]) | 0) != 1) {
      break label$8;
     }
    }
    $10 = $10 + -1 | 0;
    continue;
   }
   break;
  }
  if (($9 | 0) <= ($10 | 0)) {
   $7 = $6 + 16 | 0;
   $5 = HEAP32[$7 >> 2];
   $8 = HEAP32[$7 + 4 >> 2];
   $7 = $5;
   $5 = $12 + 24 | 0;
   HEAP32[$5 >> 2] = $7;
   HEAP32[$5 + 4 >> 2] = $8;
   $7 = $6 + 8 | 0;
   $8 = HEAP32[$7 >> 2];
   $5 = HEAP32[$7 + 4 >> 2];
   $7 = $8;
   $8 = $12;
   HEAP32[$8 + 16 >> 2] = $7;
   HEAP32[$8 + 20 >> 2] = $5;
   $8 = HEAP32[$6 + 4 >> 2];
   $5 = HEAP32[$6 >> 2];
   $7 = $5;
   $5 = $12;
   HEAP32[$5 + 8 >> 2] = $7;
   HEAP32[$5 + 12 >> 2] = $8;
   $7 = $14;
   $8 = HEAP32[$7 >> 2];
   $5 = HEAP32[$7 + 4 >> 2];
   HEAP32[$6 >> 2] = $8;
   HEAP32[$6 + 4 >> 2] = $5;
   $8 = HEAP32[$7 + 12 >> 2];
   $5 = HEAP32[$7 + 8 >> 2];
   HEAP32[$6 + 8 >> 2] = $5;
   HEAP32[$6 + 12 >> 2] = $8;
   $5 = HEAP32[$7 + 20 >> 2];
   $8 = HEAP32[$7 + 16 >> 2];
   HEAP32[$6 + 16 >> 2] = $8;
   HEAP32[$6 + 20 >> 2] = $5;
   $7 = $12;
   $5 = HEAP32[$7 + 8 >> 2];
   $8 = HEAP32[$7 + 12 >> 2];
   $6 = HEAP32[$0 + 12 >> 2] + $20 | 0;
   HEAP32[$6 >> 2] = $5;
   HEAP32[$6 + 4 >> 2] = $8;
   $5 = HEAP32[$7 + 28 >> 2];
   $8 = HEAP32[$7 + 24 >> 2];
   HEAP32[$6 + 16 >> 2] = $8;
   HEAP32[$6 + 20 >> 2] = $5;
   $8 = HEAP32[$7 + 20 >> 2];
   $5 = HEAP32[$7 + 16 >> 2];
   HEAP32[$6 + 8 >> 2] = $5;
   HEAP32[$6 + 12 >> 2] = $8;
   $10 = $10 + -1 | 0;
   $9 = $9 + 1 | 0;
  }
  if (($9 | 0) <= ($10 | 0)) {
   $5 = HEAP32[$0 + 12 >> 2];
   continue;
  }
  break;
 }
 if (($10 | 0) > ($2 | 0)) {
  void_20btAlignedObjectArray_GrahamVector3___quickSortInternal_btAngleCompareFunc__28btAngleCompareFunc_20const__2c_20int_2c_20int_29($0, $1, $2, $10);
 }
 if (($9 | 0) < ($3 | 0)) {
  void_20btAlignedObjectArray_GrahamVector3___quickSortInternal_btAngleCompareFunc__28btAngleCompareFunc_20const__2c_20int_2c_20int_29($0, $1, $9, $3);
 }
 $0 = $12 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btVoronoiSimplexSolver__reduceVertices_28btUsageBitfield_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      $2 = HEAP32[$0 >> 2];
      label$6 : {
       if (($2 | 0) >= 4) {
        if (HEAPU8[$1 | 0] & 8) {
         $5 = $2;
         break label$6;
        }
        $5 = $2 + -1 | 0;
        HEAP32[$0 >> 2] = $5;
        $2 = ($5 << 4) + $0 | 0;
        $3 = HEAP32[$2 + 12 >> 2];
        $4 = HEAP32[$2 + 16 >> 2];
        HEAP32[$0 + 60 >> 2] = $3;
        HEAP32[$0 + 64 >> 2] = $4;
        $3 = HEAP32[$2 + 8 >> 2];
        $4 = HEAP32[$2 + 4 >> 2];
        HEAP32[$0 + 52 >> 2] = $4;
        HEAP32[$0 + 56 >> 2] = $3;
        $4 = HEAP32[$2 + 88 >> 2];
        $3 = HEAP32[$2 + 84 >> 2];
        HEAP32[$0 + 132 >> 2] = $3;
        HEAP32[$0 + 136 >> 2] = $4;
        $3 = HEAP32[$2 + 96 >> 2];
        $4 = HEAP32[$2 + 92 >> 2];
        HEAP32[$0 + 140 >> 2] = $4;
        HEAP32[$0 + 144 >> 2] = $3;
        $4 = HEAP32[$2 + 176 >> 2];
        $3 = HEAP32[$2 + 172 >> 2];
        HEAP32[$0 + 220 >> 2] = $3;
        HEAP32[$0 + 224 >> 2] = $4;
        $3 = HEAP32[$2 + 168 >> 2];
        $4 = HEAP32[$2 + 164 >> 2];
        HEAP32[$0 + 212 >> 2] = $4;
        HEAP32[$0 + 216 >> 2] = $3;
        break label$6;
       }
       $5 = 3;
       if (($2 | 0) != 3) {
        break label$5;
       }
      }
      if (HEAPU8[$1 | 0] & 4) {
       break label$4;
      }
      $5 = $5 + -1 | 0;
      HEAP32[$0 >> 2] = $5;
      $2 = ($5 << 4) + $0 | 0;
      $3 = HEAP32[$2 + 12 >> 2];
      $4 = HEAP32[$2 + 16 >> 2];
      HEAP32[$0 + 44 >> 2] = $3;
      HEAP32[$0 + 48 >> 2] = $4;
      $3 = HEAP32[$2 + 8 >> 2];
      $4 = HEAP32[$2 + 4 >> 2];
      HEAP32[$0 + 36 >> 2] = $4;
      HEAP32[$0 + 40 >> 2] = $3;
      $4 = HEAP32[$2 + 88 >> 2];
      $3 = HEAP32[$2 + 84 >> 2];
      HEAP32[$0 + 116 >> 2] = $3;
      HEAP32[$0 + 120 >> 2] = $4;
      $3 = HEAP32[$2 + 96 >> 2];
      $4 = HEAP32[$2 + 92 >> 2];
      HEAP32[$0 + 124 >> 2] = $4;
      HEAP32[$0 + 128 >> 2] = $3;
      $4 = HEAP32[$2 + 176 >> 2];
      $3 = HEAP32[$2 + 172 >> 2];
      HEAP32[$0 + 204 >> 2] = $3;
      HEAP32[$0 + 208 >> 2] = $4;
      $3 = HEAP32[$2 + 168 >> 2];
      $4 = HEAP32[$2 + 164 >> 2];
      HEAP32[$0 + 196 >> 2] = $4;
      HEAP32[$0 + 200 >> 2] = $3;
      break label$4;
     }
     $5 = 2;
     if (($2 | 0) < 2) {
      break label$3;
     }
    }
    if (HEAPU8[$1 | 0] & 2) {
     break label$2;
    }
    $5 = $5 + -1 | 0;
    HEAP32[$0 >> 2] = $5;
    $2 = ($5 << 4) + $0 | 0;
    $3 = HEAP32[$2 + 12 >> 2];
    $4 = HEAP32[$2 + 16 >> 2];
    HEAP32[$0 + 28 >> 2] = $3;
    HEAP32[$0 + 32 >> 2] = $4;
    $3 = HEAP32[$2 + 8 >> 2];
    $4 = HEAP32[$2 + 4 >> 2];
    HEAP32[$0 + 20 >> 2] = $4;
    HEAP32[$0 + 24 >> 2] = $3;
    $4 = HEAP32[$2 + 88 >> 2];
    $3 = HEAP32[$2 + 84 >> 2];
    HEAP32[$0 + 100 >> 2] = $3;
    HEAP32[$0 + 104 >> 2] = $4;
    $3 = HEAP32[$2 + 96 >> 2];
    $4 = HEAP32[$2 + 92 >> 2];
    HEAP32[$0 + 108 >> 2] = $4;
    HEAP32[$0 + 112 >> 2] = $3;
    $4 = HEAP32[$2 + 176 >> 2];
    $3 = HEAP32[$2 + 172 >> 2];
    HEAP32[$0 + 188 >> 2] = $3;
    HEAP32[$0 + 192 >> 2] = $4;
    $3 = HEAP32[$2 + 168 >> 2];
    $4 = HEAP32[$2 + 164 >> 2];
    HEAP32[$0 + 180 >> 2] = $4;
    HEAP32[$0 + 184 >> 2] = $3;
    break label$2;
   }
   $5 = 1;
   if (($2 | 0) != 1) {
    break label$1;
   }
  }
  if (HEAP8[$1 | 0] & 1) {
   break label$1;
  }
  $5 = $5 + -1 | 0;
  HEAP32[$0 >> 2] = $5;
  $5 = $5 << 4;
  $1 = $5 + ($0 + 4 | 0) | 0;
  $2 = $1;
  $3 = HEAP32[$2 >> 2];
  $4 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = $3;
  HEAP32[$0 + 8 >> 2] = $4;
  $3 = HEAP32[$2 + 12 >> 2];
  $4 = HEAP32[$2 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $4;
  HEAP32[$0 + 16 >> 2] = $3;
  $1 = ($0 + 84 | 0) + $5 | 0;
  $2 = $1;
  $3 = HEAP32[$2 >> 2];
  $4 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 84 >> 2] = $3;
  HEAP32[$0 + 88 >> 2] = $4;
  $3 = HEAP32[$2 + 12 >> 2];
  $4 = HEAP32[$2 + 8 >> 2];
  HEAP32[$0 + 92 >> 2] = $4;
  HEAP32[$0 + 96 >> 2] = $3;
  $5 = ($0 + 164 | 0) + $5 | 0;
  $2 = $5;
  $3 = HEAP32[$2 + 8 >> 2];
  $4 = HEAP32[$2 + 12 >> 2];
  HEAP32[$0 + 172 >> 2] = $3;
  HEAP32[$0 + 176 >> 2] = $4;
  $3 = HEAP32[$2 + 4 >> 2];
  $4 = HEAP32[$2 >> 2];
  HEAP32[$0 + 164 >> 2] = $4;
  HEAP32[$0 + 168 >> 2] = $3;
 }
}
function btQuantizedBvh__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 20 >> 2];
 HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 24 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 28 >> 2];
 HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 32 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 12 >> 2];
 HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 16 >> 2];
 HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 36 >> 2];
 HEAP32[$1 + 36 >> 2] = HEAP32[$0 + 40 >> 2];
 HEAP32[$1 + 40 >> 2] = HEAP32[$0 + 44 >> 2];
 HEAP32[$1 + 44 >> 2] = HEAP32[$0 + 48 >> 2];
 HEAP32[$1 + 48 >> 2] = HEAP32[$0 + 56 >> 2];
 HEAP32[$1 + 52 >> 2] = HEAPU8[$0 + 60 | 0];
 $3 = HEAP32[$0 + 88 >> 2];
 HEAP32[$1 + 56 >> 2] = $3;
 label$1 : {
  if (!$3) {
   HEAP32[$1 + 64 >> 2] = 0;
   break label$1;
  }
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, HEAP32[$0 + 96 >> 2]) | 0;
  HEAP32[$1 + 64 >> 2] = $3;
  if (!$3) {
   break label$1;
  }
  $6 = HEAP32[$0 + 88 >> 2];
  $7 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 48, $6) | 0;
  $4 = HEAP32[$0 + 96 >> 2];
  if (($6 | 0) >= 1) {
   $3 = HEAP32[$7 + 8 >> 2];
   while (1) {
    $4 = ($5 << 6) + $4 | 0;
    HEAP32[$3 + 16 >> 2] = HEAP32[$4 + 16 >> 2];
    HEAP32[$3 + 20 >> 2] = HEAP32[$4 + 20 >> 2];
    HEAP32[$3 + 24 >> 2] = HEAP32[$4 + 24 >> 2];
    HEAP32[$3 + 28 >> 2] = HEAP32[$4 + 28 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    HEAP32[$3 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
    HEAP32[$3 + 32 >> 2] = HEAP32[$4 + 32 >> 2];
    HEAP32[$3 + 36 >> 2] = HEAP32[$4 + 36 >> 2];
    $4 = HEAP32[$4 + 40 >> 2];
    HEAP32[$3 + 44 >> 2] = 0;
    HEAP32[$3 + 40 >> 2] = $4;
    $3 = $3 + 48 | 0;
    $4 = HEAP32[$0 + 96 >> 2];
    $5 = $5 + 1 | 0;
    if (($6 | 0) != ($5 | 0)) {
     continue;
    }
    break;
   }
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $7, 16332, 1497453121, $4);
 }
 $3 = HEAP32[$0 + 128 >> 2];
 HEAP32[$1 + 60 >> 2] = $3;
 label$5 : {
  if (!$3) {
   HEAP32[$1 + 68 >> 2] = 0;
   break label$5;
  }
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, HEAP32[$0 + 136 >> 2]) | 0;
  HEAP32[$1 + 68 >> 2] = $3;
  if (!$3) {
   break label$5;
  }
  $6 = HEAP32[$0 + 128 >> 2];
  $8 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 16, $6) | 0;
  $7 = HEAP32[$0 + 136 >> 2];
  if (($6 | 0) >= 1) {
   $3 = HEAP32[$8 + 8 >> 2];
   $5 = 0;
   while (1) {
    $4 = ($5 << 4) + $7 | 0;
    HEAP32[$3 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
    HEAP16[$3 + 6 >> 1] = HEAPU16[$4 + 6 >> 1];
    HEAP16[$3 + 8 >> 1] = HEAPU16[$4 + 8 >> 1];
    HEAP16[$3 + 10 >> 1] = HEAPU16[$4 + 10 >> 1];
    HEAP16[$3 >> 1] = HEAPU16[$4 >> 1];
    HEAP16[$3 + 2 >> 1] = HEAPU16[$4 + 2 >> 1];
    HEAP16[$3 + 4 >> 1] = HEAPU16[$4 + 4 >> 1];
    $3 = $3 + 16 | 0;
    $5 = $5 + 1 | 0;
    if (($6 | 0) != ($5 | 0)) {
     continue;
    }
    break;
   }
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $8, 16355, 1497453121, $7);
 }
 HEAP32[$1 + 76 >> 2] = HEAP32[$0 + 144 >> 2];
 $3 = HEAP32[$0 + 152 >> 2];
 HEAP32[$1 + 80 >> 2] = $3;
 if (!$3) {
  HEAP32[$1 + 72 >> 2] = 0;
  return 16399;
 }
 $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, HEAP32[$0 + 160 >> 2]) | 0;
 HEAP32[$1 + 72 >> 2] = $3;
 if ($3) {
  $5 = HEAP32[$0 + 152 >> 2];
  $6 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 20, $5) | 0;
  $1 = HEAP32[$0 + 160 >> 2];
  if (($5 | 0) >= 1) {
   $3 = HEAP32[$6 + 8 >> 2];
   $0 = 0;
   while (1) {
    $4 = ($0 << 5) + $1 | 0;
    HEAP16[$3 + 14 >> 1] = HEAPU16[$4 + 6 >> 1];
    HEAP16[$3 + 16 >> 1] = HEAPU16[$4 + 8 >> 1];
    HEAP16[$3 + 18 >> 1] = HEAPU16[$4 + 10 >> 1];
    HEAP16[$3 + 8 >> 1] = HEAPU16[$4 >> 1];
    HEAP16[$3 + 10 >> 1] = HEAPU16[$4 + 2 >> 1];
    HEAP16[$3 + 12 >> 1] = HEAPU16[$4 + 4 >> 1];
    HEAP32[$3 >> 2] = HEAP32[$4 + 12 >> 2];
    HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 16 >> 2];
    $3 = $3 + 20 | 0;
    $0 = $0 + 1 | 0;
    if (($5 | 0) != ($0 | 0)) {
     continue;
    }
    break;
   }
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $6, 16378, 1497453121, $1);
 }
 return 16399;
}
function btQuantizedBvh__calcSplittingAxis_28int_2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = 0, $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0);
 $18 = $2 - $1 | 0;
 label$1 : {
  label$2 : {
   label$3 : {
    if (($2 | 0) <= ($1 | 0)) {
     $17 = Math_fround($18 | 0);
     break label$3;
    }
    $19 = HEAPU8[$0 + 60 | 0];
    $12 = $1;
    while (1) {
     label$6 : {
      if ($19) {
       $3 = HEAP32[$0 + 116 >> 2] + ($12 << 4) | 0;
       $5 = HEAPF32[$0 + 44 >> 2];
       $11 = HEAPF32[$0 + 12 >> 2];
       $6 = Math_fround(Math_fround(Math_fround(HEAPU16[$3 + 4 >> 1]) / $5) + $11);
       $7 = HEAPF32[$0 + 40 >> 2];
       $13 = HEAPF32[$0 + 8 >> 2];
       $14 = Math_fround(Math_fround(Math_fround(HEAPU16[$3 + 2 >> 1]) / $7) + $13);
       $8 = HEAPF32[$0 + 36 >> 2];
       $15 = HEAPF32[$0 + 4 >> 2];
       $16 = Math_fround(Math_fround(Math_fround(HEAPU16[$3 >> 1]) / $8) + $15);
       $8 = Math_fround(Math_fround(Math_fround(HEAPU16[$3 + 6 >> 1]) / $8) + $15);
       $7 = Math_fround(Math_fround(Math_fround(HEAPU16[$3 + 8 >> 1]) / $7) + $13);
       $5 = Math_fround(Math_fround(Math_fround(HEAPU16[$3 + 10 >> 1]) / $5) + $11);
       break label$6;
      }
      $3 = HEAP32[$0 + 76 >> 2] + ($12 << 6) | 0;
      $6 = HEAPF32[$3 + 8 >> 2];
      $14 = HEAPF32[$3 + 4 >> 2];
      $16 = HEAPF32[$3 >> 2];
      $8 = HEAPF32[$3 + 16 >> 2];
      $7 = HEAPF32[$3 + 20 >> 2];
      $5 = HEAPF32[$3 + 24 >> 2];
     }
     $9 = Math_fround($9 + Math_fround(Math_fround($5 + $6) * Math_fround(.5)));
     $11 = $7;
     $10 = Math_fround($10 + Math_fround(Math_fround($11 + $14) * Math_fround(.5)));
     $4 = Math_fround($4 + Math_fround(Math_fround($8 + $16) * Math_fround(.5)));
     $12 = $12 + 1 | 0;
     if (($12 | 0) != ($2 | 0)) {
      continue;
     }
     break;
    }
    $17 = Math_fround($18 | 0);
    $6 = Math_fround(0);
    if (($2 | 0) > ($1 | 0)) {
     break label$2;
    }
   }
   $9 = Math_fround(0);
   $10 = Math_fround(0);
   break label$1;
  }
  $6 = Math_fround(Math_fround(1) / $17);
  $20 = Math_fround($6 * $9);
  $21 = Math_fround($6 * $10);
  $22 = Math_fround($6 * $4);
  $10 = Math_fround(0);
  $12 = HEAPU8[$0 + 60 | 0];
  $9 = Math_fround(0);
  $6 = Math_fround(0);
  while (1) {
   label$9 : {
    if ($12) {
     $3 = HEAP32[$0 + 116 >> 2] + ($1 << 4) | 0;
     $5 = HEAPF32[$0 + 44 >> 2];
     $11 = HEAPF32[$0 + 12 >> 2];
     $4 = Math_fround(Math_fround(Math_fround(HEAPU16[$3 + 4 >> 1]) / $5) + $11);
     $7 = HEAPF32[$0 + 40 >> 2];
     $13 = HEAPF32[$0 + 8 >> 2];
     $14 = Math_fround(Math_fround(Math_fround(HEAPU16[$3 + 2 >> 1]) / $7) + $13);
     $8 = HEAPF32[$0 + 36 >> 2];
     $15 = HEAPF32[$0 + 4 >> 2];
     $16 = Math_fround(Math_fround(Math_fround(HEAPU16[$3 >> 1]) / $8) + $15);
     $8 = Math_fround(Math_fround(Math_fround(HEAPU16[$3 + 6 >> 1]) / $8) + $15);
     $7 = Math_fround(Math_fround(Math_fround(HEAPU16[$3 + 8 >> 1]) / $7) + $13);
     $5 = Math_fround(Math_fround(Math_fround(HEAPU16[$3 + 10 >> 1]) / $5) + $11);
     break label$9;
    }
    $3 = HEAP32[$0 + 76 >> 2] + ($1 << 6) | 0;
    $4 = HEAPF32[$3 + 8 >> 2];
    $14 = HEAPF32[$3 + 4 >> 2];
    $16 = HEAPF32[$3 >> 2];
    $8 = HEAPF32[$3 + 16 >> 2];
    $7 = HEAPF32[$3 + 20 >> 2];
    $5 = HEAPF32[$3 + 24 >> 2];
   }
   $4 = Math_fround(Math_fround(Math_fround($5 + $4) * Math_fround(.5)) - $20);
   $10 = Math_fround($10 + Math_fround($4 * $4));
   $11 = $7;
   $4 = Math_fround(Math_fround(Math_fround($11 + $14) * Math_fround(.5)) - $21);
   $9 = Math_fround($9 + Math_fround($4 * $4));
   $4 = Math_fround(Math_fround(Math_fround($8 + $16) * Math_fround(.5)) - $22);
   $6 = Math_fround($6 + Math_fround($4 * $4));
   $1 = $1 + 1 | 0;
   if (($2 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 $4 = Math_fround(Math_fround(1) / Math_fround($17 + Math_fround(-1)));
 $9 = Math_fround($4 * $9);
 $10 = Math_fround($4 * $10);
 $4 = Math_fround($4 * $6);
 return $4 < $9 ? $9 < $10 ? 2 : 1 : ($4 < $10) << 1;
}
function capsuleCapsuleDistance_28btVector3__2c_20btVector3__2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_2c_20int_2c_20btTransform_20const__2c_20btTransform_20const__2c_20float_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 var $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0);
 $7 = ($7 << 2) + $9 | 0;
 $18 = HEAPF32[$7 >> 2];
 $19 = Math_fround(HEAPF32[$9 + 48 >> 2] - HEAPF32[$8 + 48 >> 2]);
 $20 = HEAPF32[$7 + 16 >> 2];
 $21 = Math_fround(HEAPF32[$9 + 52 >> 2] - HEAPF32[$8 + 52 >> 2]);
 $22 = HEAPF32[$7 + 32 >> 2];
 $23 = Math_fround(HEAPF32[$9 + 56 >> 2] - HEAPF32[$8 + 56 >> 2]);
 $14 = Math_fround(Math_fround(Math_fround($18 * $19) + Math_fround($20 * $21)) + Math_fround($22 * $23));
 $8 = ($6 << 2) + $8 | 0;
 $17 = HEAPF32[$8 >> 2];
 $13 = HEAPF32[$8 + 16 >> 2];
 $16 = HEAPF32[$8 + 32 >> 2];
 $24 = Math_fround(Math_fround(Math_fround($17 * $19) + Math_fround($13 * $21)) + Math_fround($16 * $23));
 $12 = Math_fround(Math_fround(Math_fround($17 * $18) + Math_fround($13 * $20)) + Math_fround($16 * $22));
 $15 = Math_fround(Math_fround(1) - Math_fround($12 * $12));
 label$1 : {
  if ($15 == Math_fround(0)) {
   break label$1;
  }
  $15 = Math_fround(Math_fround($24 - Math_fround($12 * $14)) / $15);
  $11 = Math_fround(-$2);
  if ($15 < $11) {
   break label$1;
  }
  $11 = $15;
  if (!($11 > $2)) {
   break label$1;
  }
  $11 = $2;
 }
 $14 = Math_fround(Math_fround($12 * $11) - $14);
 $15 = Math_fround(-$4);
 label$2 : {
  label$3 : {
   if (!!($14 < $15)) {
    $12 = Math_fround($24 - Math_fround($12 * $4));
    $11 = Math_fround(-$2);
    if ($12 < $11) {
     $14 = $15;
     break label$2;
    }
    if (!($12 > $2)) {
     $14 = $15;
     $11 = $12;
     break label$2;
    }
    $4 = $15;
    break label$3;
   }
   if (!($14 > $4)) {
    break label$2;
   }
   $12 = Math_fround(Math_fround($12 * $4) + $24);
   $11 = Math_fround(-$2);
   if ($12 < $11) {
    $14 = $4;
    break label$2;
   }
   if (!($12 > $2)) {
    $14 = $4;
    $11 = $12;
    break label$2;
   }
  }
  $14 = $4;
  $11 = $2;
 }
 $22 = Math_fround($22 * $14);
 $12 = Math_fround($22 + Math_fround($23 - Math_fround($16 * $11)));
 $18 = Math_fround($18 * $14);
 $4 = Math_fround($18 + Math_fround($19 - Math_fround($17 * $11)));
 $19 = Math_fround($20 * $14);
 $11 = Math_fround($19 + Math_fround($21 - Math_fround($13 * $11)));
 $20 = Math_fround(Math_fround($12 * $12) + Math_fround(Math_fround($4 * $4) + Math_fround($11 * $11)));
 $21 = Math_fround(Math_sqrt($20));
 $14 = Math_fround(Math_fround($21 - $3) - $5);
 if (!($14 > $10)) {
  label$10 : {
   if (!!($20 <= Math_fround(1.4210854715202004e-14))) {
    if (!!(Math_fround(Math_abs($16)) > Math_fround(.7071067690849304))) {
     HEAP32[$0 >> 2] = 0;
     $11 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround($13 * $13) + Math_fround($16 * $16)))));
     $12 = Math_fround($13 * $11);
     HEAPF32[$0 + 8 >> 2] = $12;
     $11 = Math_fround($11 * Math_fround(-$16));
     HEAPF32[$0 + 4 >> 2] = $11;
     $13 = Math_fround(0);
     break label$10;
    }
    HEAP32[$0 + 8 >> 2] = 0;
    $12 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround($17 * $17) + Math_fround($13 * $13)))));
    $11 = Math_fround($17 * $12);
    HEAPF32[$0 + 4 >> 2] = $11;
    $13 = Math_fround($12 * Math_fround(-$13));
    HEAPF32[$0 >> 2] = $13;
    $12 = Math_fround(0);
    break label$10;
   }
   HEAP32[$0 + 12 >> 2] = 0;
   $13 = Math_fround(Math_fround(-1) / $21);
   $12 = Math_fround($12 * $13);
   HEAPF32[$0 + 8 >> 2] = $12;
   $11 = Math_fround($11 * $13);
   HEAPF32[$0 + 4 >> 2] = $11;
   $13 = Math_fround($4 * $13);
   HEAPF32[$0 >> 2] = $13;
  }
  $16 = HEAPF32[$9 + 48 >> 2];
  $4 = HEAPF32[$9 + 52 >> 2];
  $17 = HEAPF32[$9 + 56 >> 2];
  HEAP32[$1 + 12 >> 2] = 0;
  HEAPF32[$1 + 8 >> 2] = Math_fround($22 + $17) + Math_fround($12 * $5);
  HEAPF32[$1 + 4 >> 2] = Math_fround($19 + $4) + Math_fround($11 * $5);
  HEAPF32[$1 >> 2] = Math_fround($18 + $16) + Math_fround($13 * $5);
 }
 return $14;
}
function btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__btCompoundLeafCallback__Process_28btDbvtNode_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = 0, $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0);
 $2 = global$0 - 112 | 0;
 $12 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $12;
 $13 = HEAP32[$1 + 36 >> 2];
 $1 = HEAP32[HEAP32[$0 + 24 >> 2] + 28 >> 2] + Math_imul($13, 80) | 0;
 $26 = HEAP32[$1 + 64 >> 2];
 $14 = HEAPF32[$1 + 32 >> 2];
 $15 = HEAPF32[$1 >> 2];
 $16 = HEAPF32[$1 + 16 >> 2];
 $17 = HEAPF32[$1 + 56 >> 2];
 $18 = HEAPF32[$1 + 52 >> 2];
 $19 = HEAPF32[$1 + 48 >> 2];
 $20 = HEAPF32[$1 + 36 >> 2];
 $21 = HEAPF32[$1 + 20 >> 2];
 $22 = HEAPF32[$1 + 4 >> 2];
 $23 = HEAPF32[$1 + 40 >> 2];
 $24 = HEAPF32[$1 + 24 >> 2];
 $25 = HEAPF32[$1 + 8 >> 2];
 $1 = HEAP32[$0 + 28 >> 2];
 $27 = HEAPF32[$1 + 52 >> 2];
 $28 = HEAPF32[$1 + 56 >> 2];
 $3 = HEAPF32[$1 + 24 >> 2];
 $4 = HEAPF32[$1 + 20 >> 2];
 $5 = HEAPF32[$1 + 40 >> 2];
 $6 = HEAPF32[$1 + 36 >> 2];
 $29 = HEAPF32[$1 + 48 >> 2];
 $7 = HEAPF32[$1 + 8 >> 2];
 $8 = HEAPF32[$1 >> 2];
 $9 = HEAPF32[$1 + 4 >> 2];
 $10 = HEAPF32[$1 + 16 >> 2];
 $11 = HEAPF32[$1 + 32 >> 2];
 HEAP32[$2 + 108 >> 2] = 0;
 HEAP32[$2 + 92 >> 2] = 0;
 HEAP32[$2 + 76 >> 2] = 0;
 HEAPF32[$2 + 88 >> 2] = Math_fround(Math_fround($25 * $11) + Math_fround($24 * $6)) + Math_fround($23 * $5);
 HEAPF32[$2 + 84 >> 2] = Math_fround(Math_fround($22 * $11) + Math_fround($21 * $6)) + Math_fround($20 * $5);
 HEAPF32[$2 + 72 >> 2] = Math_fround(Math_fround($25 * $10) + Math_fround($24 * $4)) + Math_fround($23 * $3);
 HEAPF32[$2 + 68 >> 2] = Math_fround(Math_fround($22 * $10) + Math_fround($21 * $4)) + Math_fround($20 * $3);
 HEAPF32[$2 + 104 >> 2] = $28 + Math_fround(Math_fround(Math_fround($19 * $11) + Math_fround($18 * $6)) + Math_fround($17 * $5));
 HEAPF32[$2 + 100 >> 2] = $27 + Math_fround(Math_fround(Math_fround($19 * $10) + Math_fround($18 * $4)) + Math_fround($17 * $3));
 HEAP32[$2 + 60 >> 2] = 0;
 HEAPF32[$2 + 56 >> 2] = Math_fround(Math_fround($25 * $8) + Math_fround($24 * $9)) + Math_fround($23 * $7);
 HEAPF32[$2 + 52 >> 2] = Math_fround(Math_fround($22 * $8) + Math_fround($21 * $9)) + Math_fround($20 * $7);
 HEAPF32[$2 + 48 >> 2] = Math_fround(Math_fround($15 * $8) + Math_fround($16 * $9)) + Math_fround($14 * $7);
 HEAPF32[$2 + 96 >> 2] = $29 + Math_fround(Math_fround(Math_fround($19 * $8) + Math_fround($18 * $9)) + Math_fround($17 * $7));
 HEAPF32[$2 + 80 >> 2] = Math_fround(Math_fround($15 * $11) + Math_fround($16 * $6)) + Math_fround($14 * $5);
 HEAPF32[$2 + 64 >> 2] = Math_fround(Math_fround($15 * $10) + Math_fround($16 * $4)) + Math_fround($14 * $3);
 $1 = HEAP32[$0 + 32 >> 2];
 HEAP32[$2 + 36 >> 2] = -1;
 HEAP32[$2 + 28 >> 2] = 1065353216;
 HEAP32[$2 + 32 >> 2] = 1;
 HEAP32[$2 + 44 >> 2] = $13;
 HEAP32[$2 + 40 >> 2] = $1;
 HEAP32[$2 + 24 >> 2] = 9164;
 HEAP32[$2 + 28 >> 2] = HEAP32[$1 + 4 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 $12 = HEAP32[$1 + 8 >> 2];
 HEAP32[$2 + 20 >> 2] = $13;
 HEAP32[$2 + 16 >> 2] = -1;
 HEAP32[$2 + 8 >> 2] = $12;
 HEAP32[$2 + 4 >> 2] = $26;
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 12 >> 2] = $2 + 48;
 btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2], HEAP32[$0 + 16 >> 2], $2, $2 + 24 | 0, HEAPF32[$0 + 20 >> 2]);
 $0 = $2 + 112 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexTriangleCallback__setTimeStepAndCounters_28float_2c_20btDispatcherInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = 0;
 $6 = global$0 + -64 | 0;
 $31 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $31;
 HEAPF32[$0 + 56 >> 2] = $1;
 HEAP32[$0 + 52 >> 2] = $2;
 HEAP32[$0 + 40 >> 2] = $4;
 HEAP32[$0 + 36 >> 2] = $3;
 HEAP32[$0 + 44 >> 2] = $5;
 $4 = HEAP32[$4 + 12 >> 2];
 $8 = HEAPF32[$4 + 52 >> 2];
 $17 = HEAPF32[$4 + 56 >> 2];
 $2 = HEAP32[$3 + 12 >> 2];
 $18 = HEAPF32[$2 + 52 >> 2];
 $19 = HEAPF32[$2 + 56 >> 2];
 $7 = HEAPF32[$4 + 20 >> 2];
 $9 = HEAPF32[$4 + 36 >> 2];
 $20 = HEAPF32[$2 + 20 >> 2];
 $21 = HEAPF32[$2 + 36 >> 2];
 $22 = HEAPF32[$2 + 24 >> 2];
 $10 = HEAPF32[$4 + 24 >> 2];
 $23 = HEAPF32[$2 + 40 >> 2];
 $11 = HEAPF32[$4 + 40 >> 2];
 $24 = HEAPF32[$2 + 32 >> 2];
 $12 = HEAPF32[$4 + 32 >> 2];
 $25 = HEAPF32[$2 >> 2];
 $13 = HEAPF32[$4 >> 2];
 $26 = HEAPF32[$2 + 16 >> 2];
 $14 = HEAPF32[$4 + 16 >> 2];
 $27 = HEAPF32[$4 + 48 >> 2];
 $28 = HEAPF32[$2 + 48 >> 2];
 $15 = HEAPF32[$4 + 4 >> 2];
 $29 = HEAPF32[$2 + 4 >> 2];
 $30 = HEAPF32[$2 + 8 >> 2];
 $16 = HEAPF32[$4 + 8 >> 2];
 HEAP32[$6 + 60 >> 2] = 0;
 HEAP32[$6 + 44 >> 2] = 0;
 HEAP32[$6 + 28 >> 2] = 0;
 HEAPF32[$6 + 40 >> 2] = Math_fround(Math_fround($16 * $30) + Math_fround($10 * $22)) + Math_fround($11 * $23);
 HEAPF32[$6 + 36 >> 2] = Math_fround(Math_fround($16 * $29) + Math_fround($10 * $20)) + Math_fround($11 * $21);
 HEAPF32[$6 + 24 >> 2] = Math_fround(Math_fround($15 * $30) + Math_fround($7 * $22)) + Math_fround($9 * $23);
 HEAPF32[$6 + 20 >> 2] = Math_fround(Math_fround($15 * $29) + Math_fround($7 * $20)) + Math_fround($9 * $21);
 $8 = Math_fround(-$8);
 HEAPF32[$6 + 56 >> 2] = Math_fround(Math_fround(Math_fround($10 * $8) - Math_fround($16 * $27)) - Math_fround($11 * $17)) + Math_fround(Math_fround(Math_fround($16 * $28) + Math_fround($10 * $18)) + Math_fround($11 * $19));
 HEAPF32[$6 + 52 >> 2] = Math_fround(Math_fround(Math_fround($7 * $8) - Math_fround($15 * $27)) - Math_fround($9 * $17)) + Math_fround(Math_fround(Math_fround($15 * $28) + Math_fround($7 * $18)) + Math_fround($9 * $19));
 HEAP32[$6 + 12 >> 2] = 0;
 HEAPF32[$6 >> 2] = Math_fround(Math_fround($13 * $25) + Math_fround($14 * $26)) + Math_fround($12 * $24);
 HEAPF32[$6 + 32 >> 2] = Math_fround(Math_fround($16 * $25) + Math_fround($10 * $26)) + Math_fround($11 * $24);
 HEAPF32[$6 + 16 >> 2] = Math_fround(Math_fround($15 * $25) + Math_fround($7 * $26)) + Math_fround($9 * $24);
 HEAPF32[$6 + 8 >> 2] = Math_fround(Math_fround($13 * $30) + Math_fround($14 * $22)) + Math_fround($12 * $23);
 HEAPF32[$6 + 4 >> 2] = Math_fround(Math_fround($13 * $29) + Math_fround($14 * $20)) + Math_fround($12 * $21);
 HEAPF32[$6 + 48 >> 2] = Math_fround(Math_fround(Math_fround($14 * $8) - Math_fround($13 * $27)) - Math_fround($12 * $17)) + Math_fround(Math_fround(Math_fround($13 * $28) + Math_fround($14 * $18)) + Math_fround($12 * $19));
 $4 = HEAP32[$3 + 4 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $6, $0 + 4 | 0, $0 + 20 | 0);
 $7 = Math_fround(HEAPF32[$5 + 32 >> 2] + $1);
 HEAPF32[$0 + 20 >> 2] = $7 + HEAPF32[$0 + 20 >> 2];
 $4 = $0 + 24 | 0;
 HEAPF32[$4 >> 2] = $7 + HEAPF32[$0 + 24 >> 2];
 $4 = $0 + 28 | 0;
 HEAPF32[$4 >> 2] = $7 + HEAPF32[$0 + 28 >> 2];
 HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] - $7;
 $4 = $0 + 8 | 0;
 HEAPF32[$4 >> 2] = HEAPF32[$0 + 8 >> 2] - $7;
 $2 = $0;
 $0 = $0 + 12 | 0;
 HEAPF32[$0 >> 2] = HEAPF32[$2 + 12 >> 2] - $7;
 $0 = $6 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function insertleaf_28btDbvt__2c_20btDbvtNode__2c_20btDbvtNode__29($0, $1, $2) {
 var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0;
 if (!HEAP32[$0 >> 2]) {
  HEAP32[$0 >> 2] = $2;
  HEAP32[$2 + 32 >> 2] = 0;
  return;
 }
 $3 = HEAP32[$1 + 40 >> 2];
 if ($3) {
  $5 = Math_fround(HEAPF32[$2 >> 2] + HEAPF32[$2 + 16 >> 2]);
  $4 = Math_fround(HEAPF32[$2 + 8 >> 2] + HEAPF32[$2 + 24 >> 2]);
  $6 = Math_fround(HEAPF32[$2 + 4 >> 2] + HEAPF32[$2 + 20 >> 2]);
  while (1) {
   $7 = $1 + 36 | 0;
   $1 = HEAP32[$1 + 36 >> 2];
   $1 = HEAP32[$7 + ((Math_fround(Math_fround(Math_fround(Math_abs(Math_fround($5 - Math_fround(HEAPF32[$1 >> 2] + HEAPF32[$1 + 16 >> 2])))) + Math_fround(Math_abs(Math_fround($6 - Math_fround(HEAPF32[$1 + 4 >> 2] + HEAPF32[$1 + 20 >> 2]))))) + Math_fround(Math_abs(Math_fround($4 - Math_fround(HEAPF32[$1 + 8 >> 2] + HEAPF32[$1 + 24 >> 2]))))) < Math_fround(Math_fround(Math_fround(Math_abs(Math_fround($5 - Math_fround(HEAPF32[$3 >> 2] + HEAPF32[$3 + 16 >> 2])))) + Math_fround(Math_abs(Math_fround($6 - Math_fround(HEAPF32[$3 + 4 >> 2] + HEAPF32[$3 + 20 >> 2]))))) + Math_fround(Math_abs(Math_fround($4 - Math_fround(HEAPF32[$3 + 8 >> 2] + HEAPF32[$3 + 24 >> 2]))))) ^ 1) << 2) >> 2];
   $3 = HEAP32[$1 + 40 >> 2];
   if ($3) {
    continue;
   }
   break;
  }
 }
 $7 = HEAP32[$1 + 32 >> 2];
 $3 = HEAP32[$0 + 4 >> 2];
 label$4 : {
  if ($3) {
   HEAP32[$0 + 4 >> 2] = 0;
   break label$4;
  }
  $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(44, 16);
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$3 + 40 >> 2] = 0;
  HEAP32[$3 + 32 >> 2] = 0;
  HEAP32[$3 + 36 >> 2] = 0;
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
  HEAP32[$3 + 16 >> 2] = 0;
  HEAP32[$3 + 20 >> 2] = 0;
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$3 + 12 >> 2] = 0;
 }
 HEAP32[$3 + 36 >> 2] = 0;
 HEAP32[$3 + 40 >> 2] = 0;
 HEAP32[$3 + 32 >> 2] = $7;
 $5 = HEAPF32[$2 >> 2];
 $4 = HEAPF32[$1 >> 2];
 HEAPF32[$3 >> 2] = $5 < $4 ? $5 : $4;
 $5 = HEAPF32[$2 + 16 >> 2];
 $4 = HEAPF32[$1 + 16 >> 2];
 HEAPF32[$3 + 16 >> 2] = $5 > $4 ? $5 : $4;
 $5 = HEAPF32[$2 + 4 >> 2];
 $4 = HEAPF32[$1 + 4 >> 2];
 HEAPF32[$3 + 4 >> 2] = $5 < $4 ? $5 : $4;
 $5 = HEAPF32[$2 + 20 >> 2];
 $4 = HEAPF32[$1 + 20 >> 2];
 HEAPF32[$3 + 20 >> 2] = $5 > $4 ? $5 : $4;
 $5 = HEAPF32[$2 + 8 >> 2];
 $4 = HEAPF32[$1 + 8 >> 2];
 HEAPF32[$3 + 8 >> 2] = $5 < $4 ? $5 : $4;
 $5 = HEAPF32[$2 + 24 >> 2];
 $4 = HEAPF32[$1 + 24 >> 2];
 HEAPF32[$3 + 24 >> 2] = $5 > $4 ? $5 : $4;
 label$6 : {
  if ($7) {
   HEAP32[(((HEAP32[HEAP32[$1 + 32 >> 2] + 40 >> 2] == ($1 | 0)) << 2) + $7 | 0) + 36 >> 2] = $3;
   HEAP32[$3 + 36 >> 2] = $1;
   HEAP32[$1 + 32 >> 2] = $3;
   HEAP32[$3 + 40 >> 2] = $2;
   HEAP32[$2 + 32 >> 2] = $3;
   $5 = HEAPF32[$3 >> 2];
   while (1) {
    $1 = $3;
    $3 = $7;
    label$9 : {
     if (HEAPF32[$3 >> 2] <= $5 ^ 1 | HEAPF32[$3 + 4 >> 2] <= HEAPF32[$1 + 4 >> 2] ^ 1 | (HEAPF32[$3 + 8 >> 2] <= HEAPF32[$1 + 8 >> 2] ^ 1 | HEAPF32[$3 + 16 >> 2] >= HEAPF32[$1 + 16 >> 2] ^ 1)) {
      break label$9;
     }
     if (!(HEAPF32[$3 + 20 >> 2] >= HEAPF32[$1 + 20 >> 2])) {
      break label$9;
     }
     if (HEAPF32[$3 + 24 >> 2] >= HEAPF32[$1 + 24 >> 2]) {
      break label$6;
     }
    }
    $1 = HEAP32[$3 + 36 >> 2];
    $5 = HEAPF32[$1 >> 2];
    $7 = HEAP32[$3 + 40 >> 2];
    $4 = HEAPF32[$7 >> 2];
    $5 = $5 < $4 ? $5 : $4;
    HEAPF32[$3 >> 2] = $5;
    $4 = HEAPF32[$1 + 16 >> 2];
    $6 = HEAPF32[$7 + 16 >> 2];
    HEAPF32[$3 + 16 >> 2] = $4 > $6 ? $4 : $6;
    $4 = HEAPF32[$1 + 4 >> 2];
    $6 = HEAPF32[$7 + 4 >> 2];
    HEAPF32[$3 + 4 >> 2] = $4 < $6 ? $4 : $6;
    $4 = HEAPF32[$1 + 20 >> 2];
    $6 = HEAPF32[$7 + 20 >> 2];
    HEAPF32[$3 + 20 >> 2] = $4 > $6 ? $4 : $6;
    $4 = HEAPF32[$1 + 8 >> 2];
    $6 = HEAPF32[$7 + 8 >> 2];
    HEAPF32[$3 + 8 >> 2] = $4 < $6 ? $4 : $6;
    $4 = HEAPF32[$1 + 24 >> 2];
    $6 = HEAPF32[$7 + 24 >> 2];
    HEAPF32[$3 + 24 >> 2] = $4 > $6 ? $4 : $6;
    $7 = HEAP32[$3 + 32 >> 2];
    if ($7) {
     continue;
    }
    break;
   }
   break label$6;
  }
  HEAP32[$3 + 36 >> 2] = $1;
  HEAP32[$1 + 32 >> 2] = $3;
  HEAP32[$3 + 40 >> 2] = $2;
  HEAP32[$2 + 32 >> 2] = $3;
  HEAP32[$0 >> 2] = $3;
 }
}
function btDefaultCollisionConfiguration__btDefaultCollisionConfiguration_28btDefaultCollisionConstructionInfo_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 >> 2] = 5104;
 $2 = HEAP32[$1 + 20 >> 2];
 $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(4, 16);
 HEAP32[$3 >> 2] = $2 ? 4316 : 4524;
 HEAP32[$0 + 24 >> 2] = $3;
 $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(20, 16);
 btConvexConvexAlgorithm__CreateFunc__CreateFunc_28btConvexPenetrationDepthSolver__29($2, HEAP32[$0 + 24 >> 2]);
 HEAP32[$0 + 28 >> 2] = $2;
 $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8, 16);
 HEAP32[$2 >> 2] = 5220;
 HEAP8[$2 + 4 | 0] = 0;
 HEAP32[$0 + 32 >> 2] = $2;
 $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8, 16);
 HEAP32[$2 >> 2] = 5344;
 HEAP8[$2 + 4 | 0] = 0;
 HEAP32[$0 + 36 >> 2] = $2;
 $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8, 16);
 HEAP32[$2 >> 2] = 5436;
 HEAP8[$2 + 4 | 0] = 0;
 HEAP32[$0 + 40 >> 2] = $2;
 $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8, 16);
 HEAP32[$2 >> 2] = 5516;
 HEAP8[$2 + 4 | 0] = 0;
 HEAP32[$0 + 44 >> 2] = $2;
 $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8, 16);
 HEAP32[$2 >> 2] = 5604;
 HEAP8[$2 + 4 | 0] = 0;
 HEAP32[$0 + 48 >> 2] = $2;
 $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8, 16);
 HEAP32[$2 >> 2] = 5688;
 HEAP8[$2 + 4 | 0] = 0;
 HEAP32[$0 + 52 >> 2] = $2;
 $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8, 16);
 HEAP32[$2 >> 2] = 5756;
 HEAP8[$2 + 4 | 0] = 0;
 HEAP32[$0 + 56 >> 2] = $2;
 $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8, 16);
 HEAP32[$2 >> 2] = 5840;
 HEAP8[$2 + 4 | 0] = 0;
 HEAP32[$0 + 72 >> 2] = $2;
 $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8, 16);
 HEAP32[$2 >> 2] = 5840;
 HEAP32[$0 + 76 >> 2] = $2;
 HEAP8[$2 + 4 | 0] = 1;
 $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8, 16);
 HEAP32[$2 >> 2] = 5924;
 HEAP8[$2 + 4 | 0] = 0;
 HEAP32[$0 + 68 >> 2] = $2;
 $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(16, 16);
 HEAP32[$2 + 8 >> 2] = 1;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 >> 2] = 6e3;
 HEAP8[$2 + 4 | 0] = 0;
 HEAP32[$0 + 84 >> 2] = $2;
 $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(16, 16);
 HEAP32[$2 + 8 >> 2] = 1;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 >> 2] = 6e3;
 HEAP32[$0 + 80 >> 2] = $2;
 HEAP8[$2 + 4 | 0] = 1;
 $7 = HEAP32[$1 + 16 >> 2];
 $2 = HEAP32[$1 >> 2];
 label$1 : {
  if ($2) {
   HEAP32[$0 + 8 >> 2] = $2;
   HEAP8[$0 + 12 | 0] = 0;
   break label$1;
  }
  HEAP8[$0 + 12 | 0] = 1;
  $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(24, 16);
  $2 = HEAP32[$1 + 8 >> 2];
  HEAP32[$4 + 20 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = 868;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($2, 868), 16);
  HEAP32[$4 + 12 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $2;
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$4 + 8 >> 2] = $3;
  $5 = $3 + -1 | 0;
  label$3 : {
   if (!$5) {
    $3 = $2;
    break label$3;
   }
   $6 = HEAP32[$4 >> 2];
   while (1) {
    $3 = $2 + $6 | 0;
    HEAP32[$2 >> 2] = $3;
    $2 = $3;
    $5 = $5 + -1 | 0;
    if ($5) {
     continue;
    }
    break;
   }
  }
  HEAP32[$3 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = $4;
 }
 $2 = HEAP32[$1 + 4 >> 2];
 if ($2) {
  HEAP32[$0 + 16 >> 2] = $2;
  HEAP8[$0 + 20 | 0] = 0;
  return $0;
 }
 HEAP8[$0 + 20 | 0] = 1;
 $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(24, 16);
 $2 = HEAP32[$1 + 12 >> 2];
 HEAP32[$4 + 20 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = $2;
 $3 = ($7 | 0) > 80 ? $7 : 80;
 $3 = ($3 | 0) > 116 ? $3 + 16 & -16 : 128;
 HEAP32[$4 >> 2] = $3;
 $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($2, $3), 16);
 HEAP32[$4 + 12 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $2;
 $3 = HEAP32[$4 + 4 >> 2];
 HEAP32[$4 + 8 >> 2] = $3;
 $5 = $3 + -1 | 0;
 label$7 : {
  if (!$5) {
   $3 = $2;
   break label$7;
  }
  $6 = HEAP32[$4 >> 2];
  while (1) {
   $3 = $2 + $6 | 0;
   HEAP32[$2 >> 2] = $3;
   $2 = $3;
   $5 = $5 + -1 | 0;
   if ($5) {
    continue;
   }
   break;
  }
 }
 HEAP32[$3 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $4;
 return $0;
}
function btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__RayTester__Process_28btDbvtNode_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0);
 $2 = global$0 - 128 | 0;
 $12 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $12;
 $13 = HEAP32[$1 + 36 >> 2];
 $1 = HEAP32[HEAP32[$0 + 8 >> 2] + 28 >> 2] + Math_imul($13, 80) | 0;
 $12 = HEAP32[$1 + 64 >> 2];
 $14 = HEAPF32[$1 + 32 >> 2];
 $15 = HEAPF32[$1 >> 2];
 $16 = HEAPF32[$1 + 16 >> 2];
 $17 = HEAPF32[$1 + 56 >> 2];
 $18 = HEAPF32[$1 + 52 >> 2];
 $19 = HEAPF32[$1 + 48 >> 2];
 $20 = HEAPF32[$1 + 36 >> 2];
 $21 = HEAPF32[$1 + 20 >> 2];
 $22 = HEAPF32[$1 + 4 >> 2];
 $23 = HEAPF32[$1 + 40 >> 2];
 $24 = HEAPF32[$1 + 24 >> 2];
 $25 = HEAPF32[$1 + 8 >> 2];
 $1 = HEAP32[$0 + 12 >> 2];
 $26 = HEAPF32[$1 + 52 >> 2];
 $27 = HEAPF32[$1 + 56 >> 2];
 $3 = HEAPF32[$1 + 24 >> 2];
 $4 = HEAPF32[$1 + 20 >> 2];
 $5 = HEAPF32[$1 + 40 >> 2];
 $6 = HEAPF32[$1 + 36 >> 2];
 $28 = HEAPF32[$1 + 48 >> 2];
 $7 = HEAPF32[$1 + 8 >> 2];
 $8 = HEAPF32[$1 >> 2];
 $9 = HEAPF32[$1 + 4 >> 2];
 $10 = HEAPF32[$1 + 16 >> 2];
 $11 = HEAPF32[$1 + 32 >> 2];
 HEAP32[$2 + 124 >> 2] = 0;
 HEAP32[$2 + 108 >> 2] = 0;
 HEAP32[$2 + 92 >> 2] = 0;
 HEAPF32[$2 + 104 >> 2] = Math_fround(Math_fround($25 * $11) + Math_fround($24 * $6)) + Math_fround($23 * $5);
 HEAPF32[$2 + 100 >> 2] = Math_fround(Math_fround($22 * $11) + Math_fround($21 * $6)) + Math_fround($20 * $5);
 HEAPF32[$2 + 88 >> 2] = Math_fround(Math_fround($25 * $10) + Math_fround($24 * $4)) + Math_fround($23 * $3);
 HEAPF32[$2 + 84 >> 2] = Math_fround(Math_fround($22 * $10) + Math_fround($21 * $4)) + Math_fround($20 * $3);
 HEAPF32[$2 + 120 >> 2] = $27 + Math_fround(Math_fround(Math_fround($11 * $19) + Math_fround($6 * $18)) + Math_fround($5 * $17));
 HEAPF32[$2 + 116 >> 2] = $26 + Math_fround(Math_fround(Math_fround($10 * $19) + Math_fround($4 * $18)) + Math_fround($3 * $17));
 HEAP32[$2 + 76 >> 2] = 0;
 HEAPF32[$2 + 72 >> 2] = Math_fround(Math_fround($8 * $25) + Math_fround($9 * $24)) + Math_fround($7 * $23);
 HEAPF32[$2 + 68 >> 2] = Math_fround(Math_fround($8 * $22) + Math_fround($9 * $21)) + Math_fround($7 * $20);
 HEAPF32[$2 + 64 >> 2] = Math_fround(Math_fround($15 * $8) + Math_fround($16 * $9)) + Math_fround($14 * $7);
 HEAPF32[$2 + 112 >> 2] = $28 + Math_fround(Math_fround(Math_fround($8 * $19) + Math_fround($9 * $18)) + Math_fround($7 * $17));
 HEAPF32[$2 + 96 >> 2] = Math_fround(Math_fround($15 * $11) + Math_fround($16 * $6)) + Math_fround($14 * $5);
 HEAPF32[$2 + 80 >> 2] = Math_fround(Math_fround($15 * $10) + Math_fround($16 * $4)) + Math_fround($14 * $3);
 $1 = HEAP32[$0 + 4 >> 2];
 HEAP32[$2 + 60 >> 2] = $13;
 HEAP32[$2 + 56 >> 2] = -1;
 HEAP32[$2 + 48 >> 2] = $1;
 HEAP32[$2 + 44 >> 2] = $12;
 HEAP32[$2 + 40 >> 2] = 0;
 HEAP32[$2 + 52 >> 2] = $2 - -64;
 $1 = HEAP32[$0 + 24 >> 2];
 HEAP32[$2 + 20 >> 2] = -65535;
 HEAP32[$2 + 24 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 1065353216;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 32 >> 2] = $13;
 HEAP32[$2 + 28 >> 2] = $1;
 HEAP32[$2 + 8 >> 2] = 8348;
 HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 16 >> 2];
 btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2], $2 + 40 | 0, $2 + 8 | 0);
 $0 = $2 + 128 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody__setCenterOfMassTransform_28btTransform_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 label$1 : {
  if (HEAPU8[$0 + 204 | 0] & 2) {
   $4 = $0;
   $2 = HEAP32[$4 + 4 >> 2];
   $3 = HEAP32[$4 + 8 >> 2];
   $5 = $2;
   $2 = $4;
   HEAP32[$2 + 68 >> 2] = $5;
   HEAP32[$2 + 72 >> 2] = $3;
   $3 = HEAP32[$2 + 12 >> 2];
   $2 = HEAP32[$2 + 16 >> 2];
   $5 = $3;
   $3 = $4;
   HEAP32[$3 + 76 >> 2] = $5;
   HEAP32[$3 + 80 >> 2] = $2;
   $2 = HEAP32[$3 + 20 >> 2];
   $3 = HEAP32[$3 + 24 >> 2];
   $5 = $2;
   $2 = $4;
   HEAP32[$2 + 84 >> 2] = $5;
   HEAP32[$2 + 88 >> 2] = $3;
   $3 = HEAP32[$2 + 28 >> 2];
   $2 = HEAP32[$2 + 32 >> 2];
   $5 = $3;
   $3 = $4;
   HEAP32[$3 + 92 >> 2] = $5;
   HEAP32[$3 + 96 >> 2] = $2;
   $2 = HEAP32[$3 + 36 >> 2];
   $3 = HEAP32[$3 + 40 >> 2];
   $5 = $2;
   $2 = $4;
   HEAP32[$2 + 100 >> 2] = $5;
   HEAP32[$2 + 104 >> 2] = $3;
   $3 = HEAP32[$2 + 44 >> 2];
   $2 = HEAP32[$2 + 48 >> 2];
   $5 = $3;
   $3 = $4;
   HEAP32[$3 + 108 >> 2] = $5;
   HEAP32[$3 + 112 >> 2] = $2;
   $2 = HEAP32[$3 + 52 >> 2];
   $3 = HEAP32[$3 + 56 >> 2];
   $5 = $2;
   $2 = $4;
   HEAP32[$2 + 116 >> 2] = $5;
   HEAP32[$2 + 120 >> 2] = $3;
   $3 = HEAP32[$2 + 60 >> 2];
   $2 = HEAP32[$2 + 64 >> 2];
   $5 = $3;
   $3 = $4;
   HEAP32[$3 + 124 >> 2] = $5;
   HEAP32[$3 + 128 >> 2] = $2;
   break label$1;
  }
  $4 = $1;
  $2 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  $5 = $2;
  $2 = $0;
  HEAP32[$2 + 68 >> 2] = $5;
  HEAP32[$2 + 72 >> 2] = $3;
  $2 = HEAP32[$4 + 12 >> 2];
  $3 = HEAP32[$4 + 8 >> 2];
  $5 = $3;
  $3 = $0;
  HEAP32[$3 + 76 >> 2] = $5;
  HEAP32[$3 + 80 >> 2] = $2;
  $3 = HEAP32[$4 + 28 >> 2];
  $2 = HEAP32[$4 + 24 >> 2];
  $5 = $2;
  $2 = $0;
  HEAP32[$2 + 92 >> 2] = $5;
  HEAP32[$2 + 96 >> 2] = $3;
  $2 = HEAP32[$4 + 20 >> 2];
  $3 = HEAP32[$4 + 16 >> 2];
  $5 = $3;
  $3 = $0;
  HEAP32[$3 + 84 >> 2] = $5;
  HEAP32[$3 + 88 >> 2] = $2;
  $3 = HEAP32[$4 + 36 >> 2];
  $2 = HEAP32[$4 + 32 >> 2];
  $5 = $2;
  $2 = $0;
  HEAP32[$2 + 100 >> 2] = $5;
  HEAP32[$2 + 104 >> 2] = $3;
  $2 = HEAP32[$4 + 44 >> 2];
  $3 = HEAP32[$4 + 40 >> 2];
  $5 = $3;
  $3 = $0;
  HEAP32[$3 + 108 >> 2] = $5;
  HEAP32[$3 + 112 >> 2] = $2;
  $3 = HEAP32[$4 + 60 >> 2];
  $2 = HEAP32[$4 + 56 >> 2];
  $5 = $2;
  $2 = $0;
  HEAP32[$2 + 124 >> 2] = $5;
  HEAP32[$2 + 128 >> 2] = $3;
  $2 = HEAP32[$4 + 52 >> 2];
  $3 = HEAP32[$4 + 48 >> 2];
  $4 = $3;
  $3 = $0;
  HEAP32[$3 + 116 >> 2] = $4;
  HEAP32[$3 + 120 >> 2] = $2;
 }
 $4 = $0;
 $2 = HEAP32[$4 + 388 >> 2];
 $3 = HEAP32[$4 + 392 >> 2];
 $5 = $2;
 $2 = $4;
 HEAP32[$2 + 148 >> 2] = $5;
 HEAP32[$2 + 152 >> 2] = $3;
 $3 = HEAP32[$2 + 372 >> 2];
 $2 = HEAP32[$2 + 376 >> 2];
 $5 = $3;
 $3 = $4;
 HEAP32[$3 + 132 >> 2] = $5;
 HEAP32[$3 + 136 >> 2] = $2;
 $2 = HEAP32[$3 + 396 >> 2];
 $3 = HEAP32[$3 + 400 >> 2];
 $5 = $2;
 $2 = $4;
 HEAP32[$2 + 156 >> 2] = $5;
 HEAP32[$2 + 160 >> 2] = $3;
 $3 = HEAP32[$2 + 380 >> 2];
 $2 = HEAP32[$2 + 384 >> 2];
 $5 = $3;
 $3 = $4;
 HEAP32[$3 + 140 >> 2] = $5;
 HEAP32[$3 + 144 >> 2] = $2;
 $4 = $1;
 $2 = HEAP32[$4 + 8 >> 2];
 $3 = HEAP32[$4 + 12 >> 2];
 $1 = $2;
 $2 = $0;
 HEAP32[$2 + 12 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 $2 = HEAP32[$4 + 4 >> 2];
 $3 = HEAP32[$4 >> 2];
 $1 = $3;
 $3 = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 $3 = HEAP32[$4 + 28 >> 2];
 $2 = HEAP32[$4 + 24 >> 2];
 $1 = $2;
 $2 = $0;
 HEAP32[$2 + 28 >> 2] = $1;
 HEAP32[$2 + 32 >> 2] = $3;
 $2 = HEAP32[$4 + 20 >> 2];
 $3 = HEAP32[$4 + 16 >> 2];
 $1 = $3;
 $3 = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $2;
 $3 = HEAP32[$4 + 44 >> 2];
 $2 = HEAP32[$4 + 40 >> 2];
 $1 = $2;
 $2 = $0;
 HEAP32[$2 + 44 >> 2] = $1;
 HEAP32[$2 + 48 >> 2] = $3;
 $2 = HEAP32[$4 + 36 >> 2];
 $3 = HEAP32[$4 + 32 >> 2];
 $1 = $3;
 $3 = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 40 >> 2] = $2;
 $3 = HEAP32[$4 + 60 >> 2];
 $2 = HEAP32[$4 + 56 >> 2];
 $1 = $2;
 $2 = $0;
 HEAP32[$2 + 60 >> 2] = $1;
 HEAP32[$2 + 64 >> 2] = $3;
 $2 = HEAP32[$4 + 52 >> 2];
 $3 = HEAP32[$4 + 48 >> 2];
 $1 = $3;
 $3 = $0;
 HEAP32[$3 + 52 >> 2] = $1;
 HEAP32[$3 + 56 >> 2] = $2;
 btRigidBody__updateInertiaTensor_28_29($3);
}
function btRigidBody__proceedToTransform_28btTransform_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 label$1 : {
  if (HEAPU8[$0 + 204 | 0] & 2) {
   $4 = $0;
   $2 = HEAP32[$4 + 4 >> 2];
   $3 = HEAP32[$4 + 8 >> 2];
   $5 = $2;
   $2 = $4;
   HEAP32[$2 + 68 >> 2] = $5;
   HEAP32[$2 + 72 >> 2] = $3;
   $3 = HEAP32[$2 + 12 >> 2];
   $2 = HEAP32[$2 + 16 >> 2];
   $5 = $3;
   $3 = $4;
   HEAP32[$3 + 76 >> 2] = $5;
   HEAP32[$3 + 80 >> 2] = $2;
   $2 = HEAP32[$3 + 20 >> 2];
   $3 = HEAP32[$3 + 24 >> 2];
   $5 = $2;
   $2 = $4;
   HEAP32[$2 + 84 >> 2] = $5;
   HEAP32[$2 + 88 >> 2] = $3;
   $3 = HEAP32[$2 + 28 >> 2];
   $2 = HEAP32[$2 + 32 >> 2];
   $5 = $3;
   $3 = $4;
   HEAP32[$3 + 92 >> 2] = $5;
   HEAP32[$3 + 96 >> 2] = $2;
   $2 = HEAP32[$3 + 36 >> 2];
   $3 = HEAP32[$3 + 40 >> 2];
   $5 = $2;
   $2 = $4;
   HEAP32[$2 + 100 >> 2] = $5;
   HEAP32[$2 + 104 >> 2] = $3;
   $3 = HEAP32[$2 + 44 >> 2];
   $2 = HEAP32[$2 + 48 >> 2];
   $5 = $3;
   $3 = $4;
   HEAP32[$3 + 108 >> 2] = $5;
   HEAP32[$3 + 112 >> 2] = $2;
   $2 = HEAP32[$3 + 52 >> 2];
   $3 = HEAP32[$3 + 56 >> 2];
   $5 = $2;
   $2 = $4;
   HEAP32[$2 + 116 >> 2] = $5;
   HEAP32[$2 + 120 >> 2] = $3;
   $3 = HEAP32[$2 + 60 >> 2];
   $2 = HEAP32[$2 + 64 >> 2];
   $5 = $3;
   $3 = $4;
   HEAP32[$3 + 124 >> 2] = $5;
   HEAP32[$3 + 128 >> 2] = $2;
   break label$1;
  }
  $4 = $1;
  $2 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  $5 = $2;
  $2 = $0;
  HEAP32[$2 + 68 >> 2] = $5;
  HEAP32[$2 + 72 >> 2] = $3;
  $2 = HEAP32[$4 + 12 >> 2];
  $3 = HEAP32[$4 + 8 >> 2];
  $5 = $3;
  $3 = $0;
  HEAP32[$3 + 76 >> 2] = $5;
  HEAP32[$3 + 80 >> 2] = $2;
  $3 = HEAP32[$4 + 28 >> 2];
  $2 = HEAP32[$4 + 24 >> 2];
  $5 = $2;
  $2 = $0;
  HEAP32[$2 + 92 >> 2] = $5;
  HEAP32[$2 + 96 >> 2] = $3;
  $2 = HEAP32[$4 + 20 >> 2];
  $3 = HEAP32[$4 + 16 >> 2];
  $5 = $3;
  $3 = $0;
  HEAP32[$3 + 84 >> 2] = $5;
  HEAP32[$3 + 88 >> 2] = $2;
  $3 = HEAP32[$4 + 36 >> 2];
  $2 = HEAP32[$4 + 32 >> 2];
  $5 = $2;
  $2 = $0;
  HEAP32[$2 + 100 >> 2] = $5;
  HEAP32[$2 + 104 >> 2] = $3;
  $2 = HEAP32[$4 + 44 >> 2];
  $3 = HEAP32[$4 + 40 >> 2];
  $5 = $3;
  $3 = $0;
  HEAP32[$3 + 108 >> 2] = $5;
  HEAP32[$3 + 112 >> 2] = $2;
  $3 = HEAP32[$4 + 60 >> 2];
  $2 = HEAP32[$4 + 56 >> 2];
  $5 = $2;
  $2 = $0;
  HEAP32[$2 + 124 >> 2] = $5;
  HEAP32[$2 + 128 >> 2] = $3;
  $2 = HEAP32[$4 + 52 >> 2];
  $3 = HEAP32[$4 + 48 >> 2];
  $4 = $3;
  $3 = $0;
  HEAP32[$3 + 116 >> 2] = $4;
  HEAP32[$3 + 120 >> 2] = $2;
 }
 $4 = $0;
 $2 = HEAP32[$4 + 388 >> 2];
 $3 = HEAP32[$4 + 392 >> 2];
 $5 = $2;
 $2 = $4;
 HEAP32[$2 + 148 >> 2] = $5;
 HEAP32[$2 + 152 >> 2] = $3;
 $3 = HEAP32[$2 + 372 >> 2];
 $2 = HEAP32[$2 + 376 >> 2];
 $5 = $3;
 $3 = $4;
 HEAP32[$3 + 132 >> 2] = $5;
 HEAP32[$3 + 136 >> 2] = $2;
 $2 = HEAP32[$3 + 396 >> 2];
 $3 = HEAP32[$3 + 400 >> 2];
 $5 = $2;
 $2 = $4;
 HEAP32[$2 + 156 >> 2] = $5;
 HEAP32[$2 + 160 >> 2] = $3;
 $3 = HEAP32[$2 + 380 >> 2];
 $2 = HEAP32[$2 + 384 >> 2];
 $5 = $3;
 $3 = $4;
 HEAP32[$3 + 140 >> 2] = $5;
 HEAP32[$3 + 144 >> 2] = $2;
 $4 = $1;
 $2 = HEAP32[$4 + 8 >> 2];
 $3 = HEAP32[$4 + 12 >> 2];
 $1 = $2;
 $2 = $0;
 HEAP32[$2 + 12 >> 2] = $1;
 HEAP32[$2 + 16 >> 2] = $3;
 $2 = HEAP32[$4 + 4 >> 2];
 $3 = HEAP32[$4 >> 2];
 $1 = $3;
 $3 = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 $3 = HEAP32[$4 + 28 >> 2];
 $2 = HEAP32[$4 + 24 >> 2];
 $1 = $2;
 $2 = $0;
 HEAP32[$2 + 28 >> 2] = $1;
 HEAP32[$2 + 32 >> 2] = $3;
 $2 = HEAP32[$4 + 20 >> 2];
 $3 = HEAP32[$4 + 16 >> 2];
 $1 = $3;
 $3 = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $2;
 $3 = HEAP32[$4 + 44 >> 2];
 $2 = HEAP32[$4 + 40 >> 2];
 $1 = $2;
 $2 = $0;
 HEAP32[$2 + 44 >> 2] = $1;
 HEAP32[$2 + 48 >> 2] = $3;
 $2 = HEAP32[$4 + 36 >> 2];
 $3 = HEAP32[$4 + 32 >> 2];
 $1 = $3;
 $3 = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP32[$3 + 40 >> 2] = $2;
 $3 = HEAP32[$4 + 60 >> 2];
 $2 = HEAP32[$4 + 56 >> 2];
 $1 = $2;
 $2 = $0;
 HEAP32[$2 + 60 >> 2] = $1;
 HEAP32[$2 + 64 >> 2] = $3;
 $2 = HEAP32[$4 + 52 >> 2];
 $3 = HEAP32[$4 + 48 >> 2];
 $1 = $3;
 $3 = $0;
 HEAP32[$3 + 52 >> 2] = $1;
 HEAP32[$3 + 56 >> 2] = $2;
 btRigidBody__updateInertiaTensor_28_29($3);
}
function void_20btPlaneSpace1_btVector3__28btVector3_20const__2c_20btVector3__2c_20btVector3__29($0, $1, $2) {
 var $3 = 0, $4 = Math_fround(0), $5 = 0;
 $3 = global$0 - 32 | 0;
 $5 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 label$2 : {
  if (btFabs_28float_29(HEAPF32[btVector3__operator_20float_20const__28_29_20const(HEAP32[$3 + 28 >> 2]) + 8 >> 2]) > Math_fround(.7071067690849304)) {
   HEAPF32[$3 + 16 >> 2] = Math_fround(HEAPF32[btVector3__operator_20float_20const__28_29_20const(HEAP32[$3 + 28 >> 2]) + 4 >> 2] * HEAPF32[btVector3__operator_20float_20const__28_29_20const(HEAP32[$3 + 28 >> 2]) + 4 >> 2]) + Math_fround(HEAPF32[btVector3__operator_20float_20const__28_29_20const(HEAP32[$3 + 28 >> 2]) + 8 >> 2] * HEAPF32[btVector3__operator_20float_20const__28_29_20const(HEAP32[$3 + 28 >> 2]) + 8 >> 2]);
   HEAPF32[$3 + 12 >> 2] = Math_fround(1) / btSqrt_28float_29(HEAPF32[$3 + 16 >> 2]);
   HEAPF32[btVector3__operator_20float__28_29(HEAP32[$3 + 24 >> 2]) >> 2] = 0;
   $4 = Math_fround(Math_fround(-HEAPF32[btVector3__operator_20float_20const__28_29_20const(HEAP32[$3 + 28 >> 2]) + 8 >> 2]) * HEAPF32[$3 + 12 >> 2]);
   HEAPF32[btVector3__operator_20float__28_29(HEAP32[$3 + 24 >> 2]) + 4 >> 2] = $4;
   $4 = Math_fround(HEAPF32[btVector3__operator_20float_20const__28_29_20const(HEAP32[$3 + 28 >> 2]) + 4 >> 2] * HEAPF32[$3 + 12 >> 2]);
   HEAPF32[btVector3__operator_20float__28_29(HEAP32[$3 + 24 >> 2]) + 8 >> 2] = $4;
   $4 = Math_fround(HEAPF32[$3 + 16 >> 2] * HEAPF32[$3 + 12 >> 2]);
   HEAPF32[btVector3__operator_20float__28_29(HEAP32[$3 + 20 >> 2]) >> 2] = $4;
   $4 = Math_fround(Math_fround(-HEAPF32[btVector3__operator_20float_20const__28_29_20const(HEAP32[$3 + 28 >> 2]) >> 2]) * HEAPF32[btVector3__operator_20float__28_29(HEAP32[$3 + 24 >> 2]) + 8 >> 2]);
   HEAPF32[btVector3__operator_20float__28_29(HEAP32[$3 + 20 >> 2]) + 4 >> 2] = $4;
   $4 = Math_fround(HEAPF32[btVector3__operator_20float_20const__28_29_20const(HEAP32[$3 + 28 >> 2]) >> 2] * HEAPF32[btVector3__operator_20float__28_29(HEAP32[$3 + 24 >> 2]) + 4 >> 2]);
   HEAPF32[btVector3__operator_20float__28_29(HEAP32[$3 + 20 >> 2]) + 8 >> 2] = $4;
   break label$2;
  }
  HEAPF32[$3 + 8 >> 2] = Math_fround(HEAPF32[btVector3__operator_20float_20const__28_29_20const(HEAP32[$3 + 28 >> 2]) >> 2] * HEAPF32[btVector3__operator_20float_20const__28_29_20const(HEAP32[$3 + 28 >> 2]) >> 2]) + Math_fround(HEAPF32[btVector3__operator_20float_20const__28_29_20const(HEAP32[$3 + 28 >> 2]) + 4 >> 2] * HEAPF32[btVector3__operator_20float_20const__28_29_20const(HEAP32[$3 + 28 >> 2]) + 4 >> 2]);
  HEAPF32[$3 + 4 >> 2] = Math_fround(1) / btSqrt_28float_29(HEAPF32[$3 + 8 >> 2]);
  $4 = Math_fround(Math_fround(-HEAPF32[btVector3__operator_20float_20const__28_29_20const(HEAP32[$3 + 28 >> 2]) + 4 >> 2]) * HEAPF32[$3 + 4 >> 2]);
  HEAPF32[btVector3__operator_20float__28_29(HEAP32[$3 + 24 >> 2]) >> 2] = $4;
  $4 = Math_fround(HEAPF32[btVector3__operator_20float_20const__28_29_20const(HEAP32[$3 + 28 >> 2]) >> 2] * HEAPF32[$3 + 4 >> 2]);
  HEAPF32[btVector3__operator_20float__28_29(HEAP32[$3 + 24 >> 2]) + 4 >> 2] = $4;
  HEAPF32[btVector3__operator_20float__28_29(HEAP32[$3 + 24 >> 2]) + 8 >> 2] = 0;
  $4 = Math_fround(Math_fround(-HEAPF32[btVector3__operator_20float_20const__28_29_20const(HEAP32[$3 + 28 >> 2]) + 8 >> 2]) * HEAPF32[btVector3__operator_20float__28_29(HEAP32[$3 + 24 >> 2]) + 4 >> 2]);
  HEAPF32[btVector3__operator_20float__28_29(HEAP32[$3 + 20 >> 2]) >> 2] = $4;
  $4 = Math_fround(HEAPF32[btVector3__operator_20float_20const__28_29_20const(HEAP32[$3 + 28 >> 2]) + 8 >> 2] * HEAPF32[btVector3__operator_20float__28_29(HEAP32[$3 + 24 >> 2]) >> 2]);
  HEAPF32[btVector3__operator_20float__28_29(HEAP32[$3 + 20 >> 2]) + 4 >> 2] = $4;
  $4 = Math_fround(HEAPF32[$3 + 8 >> 2] * HEAPF32[$3 + 4 >> 2]);
  HEAPF32[btVector3__operator_20float__28_29(HEAP32[$3 + 20 >> 2]) + 8 >> 2] = $4;
 }
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexTriangleCallback__processTriangle_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0;
 $4 = global$0 - 144 | 0;
 $7 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 $12 = CProfileSample__CProfileSample_28char_20const__29($4 + 136 | 0, 6384);
 $8 = HEAPF32[$1 >> 2];
 $9 = HEAPF32[$1 + 16 >> 2];
 $11 = $8 < $9 ? $8 : $9;
 $10 = HEAPF32[$1 + 32 >> 2];
 label$2 : {
  if (($11 < $10 ? $11 : $10) > HEAPF32[$0 + 20 >> 2]) {
   break label$2;
  }
  $6 = ($8 > $9 ^ 1) << 4;
  if (HEAPF32[(HEAPF32[$1 + $6 >> 2] > $10 ? $6 : 32) + $1 >> 2] < HEAPF32[$0 + 4 >> 2]) {
   break label$2;
  }
  $8 = HEAPF32[$1 + 8 >> 2];
  $6 = $1 + 24 | 0;
  $9 = HEAPF32[$6 >> 2];
  $11 = $8 < $9 ? $8 : $9;
  $5 = $1 + 40 | 0;
  $10 = HEAPF32[$5 >> 2];
  if (($11 < $10 ? $11 : $10) > HEAPF32[$0 + 28 >> 2]) {
   break label$2;
  }
  $6 = $8 > $9 ? $1 + 8 | 0 : $6;
  if (HEAPF32[(HEAPF32[$6 >> 2] > $10 ? $6 : $5) >> 2] < HEAPF32[$0 + 12 >> 2]) {
   break label$2;
  }
  $8 = HEAPF32[$1 + 4 >> 2];
  $6 = $1 + 20 | 0;
  $9 = HEAPF32[$6 >> 2];
  $11 = $8 < $9 ? $8 : $9;
  $5 = $1 + 36 | 0;
  $10 = HEAPF32[$5 >> 2];
  if (($11 < $10 ? $11 : $10) > HEAPF32[$0 + 24 >> 2]) {
   break label$2;
  }
  $6 = $8 > $9 ? $1 + 4 | 0 : $6;
  if (HEAP32[HEAP32[HEAP32[$0 + 36 >> 2] + 4 >> 2] + 4 >> 2] > 19 | HEAPF32[(HEAPF32[$6 >> 2] > $10 ? $6 : $5) >> 2] < HEAPF32[$0 + 8 >> 2]) {
   break label$2;
  }
  $6 = HEAP32[$0 + 48 >> 2];
  $13 = btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($4 + 24 | 0);
  HEAP32[$4 + 24 >> 2] = 6576;
  HEAP32[$4 + 28 >> 2] = 1;
  $5 = HEAP32[$1 + 12 >> 2];
  $7 = HEAP32[$1 + 8 >> 2];
  HEAP32[$4 + 92 >> 2] = $7;
  HEAP32[$4 + 96 >> 2] = $5;
  $7 = HEAP32[$1 + 4 >> 2];
  $5 = HEAP32[$1 >> 2];
  HEAP32[$4 + 84 >> 2] = $5;
  HEAP32[$4 + 88 >> 2] = $7;
  $5 = HEAP32[$1 + 28 >> 2];
  $7 = HEAP32[$1 + 24 >> 2];
  HEAP32[$4 + 108 >> 2] = $7;
  HEAP32[$4 + 112 >> 2] = $5;
  $7 = HEAP32[$1 + 20 >> 2];
  $5 = HEAP32[$1 + 16 >> 2];
  HEAP32[$4 + 100 >> 2] = $5;
  HEAP32[$4 + 104 >> 2] = $7;
  $5 = HEAP32[$1 + 44 >> 2];
  $7 = HEAP32[$1 + 40 >> 2];
  HEAP32[$4 + 124 >> 2] = $7;
  HEAP32[$4 + 128 >> 2] = $5;
  $7 = HEAP32[$1 + 36 >> 2];
  $5 = HEAP32[$1 + 32 >> 2];
  HEAP32[$4 + 116 >> 2] = $5;
  HEAP32[$4 + 120 >> 2] = $7;
  HEAP32[$4 + 72 >> 2] = HEAP32[$0 + 56 >> 2];
  $1 = HEAP32[$0 + 40 >> 2];
  $7 = HEAP32[$1 + 8 >> 2];
  $5 = HEAP32[$1 + 12 >> 2];
  HEAP32[$4 + 20 >> 2] = $3;
  HEAP32[$4 + 16 >> 2] = $2;
  HEAP32[$4 + 8 >> 2] = $7;
  HEAP32[$4 + 12 >> 2] = $5;
  HEAP32[$4 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $4 + 24;
  $1 = HEAP32[$0 + 36 >> 2];
  label$3 : {
   if (!!(HEAPF32[HEAP32[$0 + 44 >> 2] + 32 >> 2] > Math_fround(0))) {
    $1 = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6, $1, $4, 0, 2) | 0;
    break label$3;
   }
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6, $1, $4, HEAP32[$0 + 64 >> 2], 1) | 0;
  }
  $5 = HEAP32[$0 + 44 >> 2];
  $7 = HEAP32[$5 + 8 >> 2];
  label$5 : {
   if (HEAP32[$7 + 8 >> 2] == HEAP32[HEAP32[$0 + 40 >> 2] + 8 >> 2]) {
    HEAP32[$5 + 8 >> 2] = $4;
    FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, $2, $3);
    break label$5;
   }
   $7 = HEAP32[$5 + 12 >> 2];
   HEAP32[$5 + 12 >> 2] = $4;
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 12 >> 2]]($5, $2, $3);
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, HEAP32[$0 + 36 >> 2], $4, HEAP32[$0 + 52 >> 2], HEAP32[$0 + 44 >> 2]);
  $2 = HEAP32[$0 + 44 >> 2];
  HEAP32[$2 + (HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2] == HEAP32[HEAP32[$0 + 40 >> 2] + 8 >> 2] ? 8 : 12) >> 2] = $7;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 60 >> 2]]($6, $1);
  btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($13);
 }
 CProfileSample___CProfileSample_28_29($12);
 $0 = $4 + 144 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btStaticPlaneShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0;
 $4 = global$0 - 48 | 0;
 $21 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $21;
 $9 = HEAPF32[$3 >> 2];
 $8 = HEAPF32[$2 >> 2];
 $7 = Math_fround(Math_fround($9 - $8) * Math_fround(.5));
 $5 = Math_fround($7 * $7);
 $6 = HEAPF32[$3 + 4 >> 2];
 $10 = HEAPF32[$2 + 4 >> 2];
 $7 = Math_fround(Math_fround($6 - $10) * Math_fround(.5));
 $5 = Math_fround($5 + Math_fround($7 * $7));
 $11 = HEAPF32[$3 + 8 >> 2];
 $13 = HEAPF32[$2 + 8 >> 2];
 $7 = Math_fround(Math_fround($11 - $13) * Math_fround(.5));
 $7 = Math_fround(Math_sqrt(Math_fround($5 + Math_fround($7 * $7))));
 $11 = Math_fround(Math_fround($11 + $13) * Math_fround(.5));
 $10 = Math_fround(Math_fround($6 + $10) * Math_fround(.5));
 $13 = Math_fround(Math_fround($9 + $8) * Math_fround(.5));
 $9 = HEAPF32[$0 + 60 >> 2];
 label$2 : {
  if (!!(Math_fround(Math_abs($9)) > Math_fround(.7071067690849304))) {
   $8 = HEAPF32[$0 + 56 >> 2];
   $6 = Math_fround(Math_fround($9 * $9) + Math_fround($8 * $8));
   $5 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($6)));
   $14 = Math_fround($6 * $5);
   $15 = Math_fround($8 * $5);
   $6 = HEAPF32[$0 + 52 >> 2];
   $16 = Math_fround($15 * Math_fround(-$6));
   $12 = Math_fround($5 * Math_fround(-$9));
   $17 = Math_fround($6 * $12);
   break label$2;
  }
  $6 = HEAPF32[$0 + 52 >> 2];
  $8 = HEAPF32[$0 + 56 >> 2];
  $5 = Math_fround(Math_fround($6 * $6) + Math_fround($8 * $8));
  $12 = $5;
  $5 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($5)));
  $17 = Math_fround($12 * $5);
  $18 = Math_fround($5 * Math_fround(-$8));
  $16 = Math_fround($9 * $18);
  $12 = Math_fround($6 * $5);
  $14 = Math_fround($12 * Math_fround(-$9));
 }
 $5 = HEAPF32[$0 + 68 >> 2];
 $0 = $4 + 44 | 0;
 HEAP32[$0 >> 2] = 0;
 $3 = $4 + 28 | 0;
 HEAP32[$3 >> 2] = 0;
 $2 = $4 + 40 | 0;
 $5 = Math_fround(Math_fround(Math_fround($9 * $11) + Math_fround(Math_fround($13 * $6) + Math_fround($10 * $8))) - $5);
 $11 = Math_fround($11 - Math_fround($9 * $5));
 $15 = Math_fround($7 * $15);
 $19 = Math_fround($11 - $15);
 $9 = Math_fround($7 * $17);
 $17 = Math_fround($19 - $9);
 HEAPF32[$2 >> 2] = $17;
 $10 = Math_fround($10 - Math_fround($8 * $5));
 $12 = Math_fround($7 * $12);
 $20 = Math_fround($10 - $12);
 $8 = Math_fround($7 * $16);
 $16 = Math_fround($20 - $8);
 HEAPF32[$4 + 36 >> 2] = $16;
 $11 = Math_fround($15 + $11);
 HEAPF32[$4 + 24 >> 2] = $11 - $9;
 $10 = Math_fround($12 + $10);
 HEAPF32[$4 + 20 >> 2] = $10 - $8;
 HEAP32[$4 + 12 >> 2] = 0;
 $6 = Math_fround($13 - Math_fround($6 * $5));
 $13 = Math_fround($7 * $18);
 $5 = Math_fround($6 - $13);
 $7 = Math_fround($7 * $14);
 $14 = Math_fround($5 - $7);
 HEAPF32[$4 + 32 >> 2] = $14;
 $6 = Math_fround($13 + $6);
 HEAPF32[$4 + 16 >> 2] = $6 - $7;
 $11 = Math_fround($9 + $11);
 HEAPF32[$4 + 8 >> 2] = $11;
 $10 = Math_fround($8 + $10);
 HEAPF32[$4 + 4 >> 2] = $10;
 $6 = Math_fround($7 + $6);
 HEAPF32[$4 >> 2] = $6;
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $4, 0, 0);
 HEAP32[$4 + 44 >> 2] = 0;
 HEAPF32[$4 + 40 >> 2] = $11;
 HEAPF32[$4 + 36 >> 2] = $10;
 HEAP32[$4 + 28 >> 2] = 0;
 HEAPF32[$4 + 24 >> 2] = $9 + $19;
 HEAPF32[$4 + 20 >> 2] = $8 + $20;
 HEAPF32[$4 + 32 >> 2] = $6;
 HEAPF32[$4 + 16 >> 2] = $7 + $5;
 HEAP32[$4 + 12 >> 2] = 0;
 HEAPF32[$4 + 8 >> 2] = $17;
 HEAPF32[$4 + 4 >> 2] = $16;
 HEAPF32[$4 >> 2] = $14;
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $4, 0, 1);
 $0 = $4 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionDispatcher__getNewManifold_28btCollisionObject_20const__2c_20btCollisionObject_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0;
 $5 = global$0 - 16 | 0;
 $3 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[5387] = HEAP32[5387] + 1;
 $4 = 19864;
 if (HEAP32[$0 + 4 >> 2] & 2) {
  $4 = HEAP32[$1 + 192 >> 2];
  $6 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 20 >> 2]]($4, HEAPF32[4966]));
  HEAPF32[$5 + 12 >> 2] = $6;
  $4 = HEAP32[$2 + 192 >> 2];
  $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 20 >> 2]]($4, HEAPF32[4966]));
  HEAPF32[$5 + 8 >> 2] = $7;
  $4 = $6 < $7 ? $5 + 12 | 0 : $5 + 8 | 0;
 }
 $8 = HEAP32[$4 >> 2];
 $6 = HEAPF32[$2 + 184 >> 2];
 $7 = HEAPF32[$1 + 184 >> 2];
 $3 = HEAP32[$0 + 72 >> 2];
 $4 = HEAP32[$3 + 12 >> 2];
 label$3 : {
  label$4 : {
   if ($4) {
    HEAP32[$3 + 12 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + -1;
    break label$4;
   }
   $4 = 0;
   if (HEAPU8[$0 + 4 | 0] & 4) {
    break label$3;
   }
   $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(868, 16);
  }
  HEAP32[$4 >> 2] = 1025;
  HEAP32[$4 + 168 >> 2] = 0;
  $3 = $4;
  HEAP32[$3 + 160 >> 2] = 0;
  HEAP32[$3 + 164 >> 2] = 0;
  HEAP32[$3 + 152 >> 2] = 0;
  HEAP32[$3 + 156 >> 2] = 0;
  HEAP32[$3 + 144 >> 2] = 0;
  HEAP32[$3 + 148 >> 2] = 0;
  HEAP32[$3 + 136 >> 2] = 0;
  HEAP32[$3 + 140 >> 2] = 0;
  HEAP32[$3 + 128 >> 2] = 0;
  HEAP32[$3 + 132 >> 2] = 0;
  HEAP32[$3 + 120 >> 2] = 0;
  HEAP32[$3 + 124 >> 2] = 0;
  HEAP32[$3 + 328 >> 2] = 0;
  HEAP32[$3 + 332 >> 2] = 0;
  HEAP32[$3 + 336 >> 2] = 0;
  HEAP32[$3 + 340 >> 2] = 0;
  HEAP32[$3 + 344 >> 2] = 0;
  HEAP32[$3 + 348 >> 2] = 0;
  HEAP32[$3 + 352 >> 2] = 0;
  HEAP32[$3 + 356 >> 2] = 0;
  HEAP32[$3 + 360 >> 2] = 0;
  HEAP32[$3 + 364 >> 2] = 0;
  HEAP32[$3 + 368 >> 2] = 0;
  HEAP32[$3 + 372 >> 2] = 0;
  HEAP32[$3 + 376 >> 2] = 0;
  HEAP32[$3 + 536 >> 2] = 0;
  HEAP32[$3 + 540 >> 2] = 0;
  HEAP32[$3 + 544 >> 2] = 0;
  HEAP32[$3 + 548 >> 2] = 0;
  HEAP32[$3 + 552 >> 2] = 0;
  HEAP32[$3 + 556 >> 2] = 0;
  HEAP32[$3 + 560 >> 2] = 0;
  HEAP32[$3 + 564 >> 2] = 0;
  HEAP32[$3 + 568 >> 2] = 0;
  HEAP32[$3 + 572 >> 2] = 0;
  HEAP32[$3 + 576 >> 2] = 0;
  HEAP32[$3 + 580 >> 2] = 0;
  HEAP32[$3 + 584 >> 2] = 0;
  HEAP32[$3 + 792 >> 2] = 0;
  HEAP32[$3 + 784 >> 2] = 0;
  HEAP32[$3 + 788 >> 2] = 0;
  HEAP32[$3 + 776 >> 2] = 0;
  HEAP32[$3 + 780 >> 2] = 0;
  HEAP32[$3 + 768 >> 2] = 0;
  HEAP32[$3 + 772 >> 2] = 0;
  HEAP32[$3 + 760 >> 2] = 0;
  HEAP32[$3 + 764 >> 2] = 0;
  HEAP32[$3 + 752 >> 2] = 0;
  HEAP32[$3 + 756 >> 2] = 0;
  HEAP32[$3 + 744 >> 2] = 0;
  HEAP32[$3 + 748 >> 2] = 0;
  HEAP32[$3 + 836 >> 2] = $1;
  HEAP32[$3 + 840 >> 2] = $2;
  HEAP32[$3 + 844 >> 2] = 0;
  HEAP32[$3 + 848 >> 2] = $8;
  HEAPF32[$3 + 852 >> 2] = $7 < $6 ? $7 : $6;
  $2 = HEAP32[$0 + 12 >> 2];
  HEAP32[$3 + 864 >> 2] = $2;
  label$6 : {
   if (HEAP32[$0 + 16 >> 2] != ($2 | 0)) {
    break label$6;
   }
   $9 = $2 ? $2 << 1 : 1;
   if (($2 | 0) >= ($9 | 0)) {
    break label$6;
   }
   label$7 : {
    if (!$9) {
     $8 = 0;
     break label$7;
    }
    $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($9 << 2, 16);
    $2 = HEAP32[$0 + 12 >> 2];
   }
   if (($2 | 0) >= 1) {
    $1 = 0;
    while (1) {
     $3 = $1 << 2;
     HEAP32[$3 + $8 >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] + $3 >> 2];
     $1 = $1 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue;
     }
     break;
    }
   }
   $1 = HEAP32[$0 + 20 >> 2];
   if ($1) {
    if (HEAPU8[$0 + 24 | 0]) {
     btAlignedFreeInternal_28void__29($1);
     $2 = HEAP32[$0 + 12 >> 2];
    }
    HEAP32[$0 + 20 >> 2] = 0;
   }
   HEAP32[$0 + 20 >> 2] = $8;
   HEAP32[$0 + 16 >> 2] = $9;
   HEAP8[$0 + 24 | 0] = 1;
  }
  HEAP32[HEAP32[$0 + 20 >> 2] + ($2 << 2) >> 2] = $4;
  HEAP32[$0 + 12 >> 2] = $2 + 1;
 }
 $0 = $5 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $4 | 0;
}
function btConvexHullInternal__computeInternal_28int_2c_20int_2c_20btConvexHullInternal__IntermediateHull__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $6 = global$0 - 16 | 0;
 $4 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $4 = $2 - $1 | 0;
 label$2 : {
  if ($4 >>> 0 <= 2) {
   label$4 : {
    switch ($4 - 1 | 0) {
    default:
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     HEAP32[$3 + 8 >> 2] = 0;
     HEAP32[$3 + 12 >> 2] = 0;
     break label$2;
    case 1:
     $4 = HEAP32[HEAP32[$0 + 92 >> 2] + ($1 << 2) >> 2];
     $5 = HEAP32[$4 + 204 >> 2];
     label$7 : {
      $7 = HEAP32[$4 + 88 >> 2];
      $8 = HEAP32[$4 + 200 >> 2];
      $1 = HEAP32[$4 + 92 >> 2];
      if (!(($7 | 0) != ($8 | 0) | ($5 | 0) != ($1 | 0))) {
       $5 = $1;
       if (HEAP32[$4 + 96 >> 2] == HEAP32[$4 + 208 >> 2]) {
        break label$7;
       }
      }
      $2 = $4 + 112 | 0;
      $1 = $1 - $5 | 0;
      $5 = $7 - $8 | 0;
      label$9 : {
       if (!($1 | $5)) {
        $1 = HEAP32[$4 + 96 >> 2] > HEAP32[$4 + 208 >> 2];
        $5 = $1 ? $2 : $4;
        HEAP32[$5 + 4 >> 2] = $5;
        HEAP32[$5 >> 2] = $5;
        HEAP32[$3 + 8 >> 2] = $5;
        HEAP32[$3 + 4 >> 2] = $5;
        HEAP32[$3 >> 2] = $5;
        $2 = $1 ? $4 : $2;
        $4 = $5;
        break label$9;
       }
       HEAP32[$4 + 4 >> 2] = $2;
       HEAP32[$4 >> 2] = $2;
       HEAP32[$4 + 116 >> 2] = $4;
       HEAP32[$4 + 112 >> 2] = $4;
       $8 = ($5 | 0) < 0;
       $9 = !$5;
       $5 = ($1 | 0) < 0;
       $7 = $8 | $9 & $5;
       HEAP32[$3 + 4 >> 2] = $7 ? $2 : $4;
       HEAP32[$3 >> 2] = $7 ? $4 : $2;
       if (!(!$1 & $8 ? 0 : !$5)) {
        HEAP32[$3 + 8 >> 2] = $4;
        $5 = $2;
        break label$9;
       }
       HEAP32[$3 + 8 >> 2] = $2;
       $5 = $4;
      }
      HEAP32[$3 + 12 >> 2] = $5;
      $3 = btConvexHullInternal__newEdgePair_28btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__29($0, $4, $2);
      HEAP32[$3 + 4 >> 2] = $3;
      HEAP32[$3 >> 2] = $3;
      HEAP32[$4 + 8 >> 2] = $3;
      $3 = HEAP32[$3 + 8 >> 2];
      HEAP32[$3 + 4 >> 2] = $3;
      HEAP32[$3 >> 2] = $3;
      HEAP32[$2 + 8 >> 2] = $3;
      break label$2;
     }
     HEAP32[$4 + 8 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = $4;
     HEAP32[$4 >> 2] = $4;
     HEAP32[$3 + 12 >> 2] = $4;
     HEAP32[$3 + 8 >> 2] = $4;
     HEAP32[$3 + 4 >> 2] = $4;
     HEAP32[$3 >> 2] = $4;
     break label$2;
    case 0:
     break label$4;
    }
   }
   $4 = HEAP32[HEAP32[$0 + 92 >> 2] + ($1 << 2) >> 2];
   HEAP32[$4 + 8 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = $4;
   HEAP32[$4 >> 2] = $4;
   HEAP32[$3 + 12 >> 2] = $4;
   HEAP32[$3 + 8 >> 2] = $4;
   HEAP32[$3 + 4 >> 2] = $4;
   HEAP32[$3 >> 2] = $4;
   break label$2;
  }
  $9 = (($4 | 0) / 2 | 0) + $1 | 0;
  $4 = $9;
  label$12 : {
   if (($4 | 0) >= ($2 | 0)) {
    break label$12;
   }
   $7 = HEAP32[$0 + 92 >> 2];
   $4 = HEAP32[($7 + ($9 << 2) | 0) + -4 >> 2];
   $8 = HEAP32[$4 + 88 >> 2];
   $10 = HEAP32[$4 + 96 >> 2];
   $11 = HEAP32[$4 + 92 >> 2];
   $4 = $9;
   while (1) {
    $5 = HEAP32[($4 << 2) + $7 >> 2];
    if (HEAP32[$5 + 88 >> 2] != ($8 | 0) | HEAP32[$5 + 92 >> 2] != ($11 | 0) | HEAP32[$5 + 96 >> 2] != ($10 | 0)) {
     break label$12;
    }
    $4 = $4 + 1 | 0;
    if (($4 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
   $4 = $2;
  }
  btConvexHullInternal__computeInternal_28int_2c_20int_2c_20btConvexHullInternal__IntermediateHull__29($0, $1, $9, $3);
  HEAP32[$6 + 8 >> 2] = 0;
  HEAP32[$6 + 12 >> 2] = 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  btConvexHullInternal__computeInternal_28int_2c_20int_2c_20btConvexHullInternal__IntermediateHull__29($0, $4, $2, $6);
  btConvexHullInternal__merge_28btConvexHullInternal__IntermediateHull__2c_20btConvexHullInternal__IntermediateHull__29($0, $3, $6);
 }
 $0 = $6 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function cullPoints2_28int_2c_20float__2c_20int_2c_20int_2c_20int__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0);
 $9 = global$0 + -64 | 0;
 $8 = $9;
 if ($9 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 label$2 : {
  label$3 : {
   label$4 : {
    label$5 : {
     $5 = $0 + -1 | 0;
     if ($5 >>> 0 <= 1) {
      if ($5 - 1) {
       break label$5;
      }
      break label$4;
     }
     if (($0 | 0) >= 2) {
      $11 = $0 + -1 | 0;
      $5 = 0;
      while (1) {
       $13 = $5 << 3;
       $8 = $13 + $1 | 0;
       $10 = HEAPF32[$8 >> 2];
       $12 = HEAPF32[$8 + 12 >> 2];
       $14 = HEAPF32[$8 + 8 >> 2];
       $15 = HEAPF32[($13 | 4) + $1 >> 2];
       $6 = Math_fround(Math_fround($10 * $12) - Math_fround($14 * $15));
       $7 = Math_fround($7 + $6);
       $16 = Math_fround($16 + Math_fround(Math_fround($12 + $15) * $6));
       $17 = Math_fround($17 + Math_fround(Math_fround($10 + $14) * $6));
       $5 = $5 + 1 | 0;
       if (($11 | 0) != ($5 | 0)) {
        continue;
       }
       break;
      }
     }
     $10 = Math_fround(0xde0b6b000000000);
     $5 = ($0 << 3) + $1 | 0;
     $14 = HEAPF32[$5 + -8 >> 2];
     $6 = HEAPF32[$1 + 4 >> 2];
     $15 = HEAPF32[$1 >> 2];
     $18 = HEAPF32[$5 + -4 >> 2];
     $12 = Math_fround(Math_fround($14 * $6) - Math_fround($15 * $18));
     $7 = Math_fround($7 + $12);
     if (!!(Math_fround(Math_abs($7)) > Math_fround(1.1920928955078125e-7))) {
      $10 = Math_fround(Math_fround(1) / Math_fround($7 * Math_fround(3)));
     }
     $13 = 0;
     if (($0 | 0) <= 0) {
      break label$2;
     }
     $6 = Math_fround(Math_fround($16 + Math_fround(Math_fround($6 + $18) * $12)) * $10);
     $7 = Math_fround(Math_fround($17 + Math_fround(Math_fround($14 + $15) * $12)) * $10);
     break label$3;
    }
    $6 = HEAPF32[$1 + 4 >> 2];
    $7 = HEAPF32[$1 >> 2];
    break label$3;
   }
   $6 = Math_fround(Math_fround(HEAPF32[$1 + 4 >> 2] + HEAPF32[$1 + 12 >> 2]) * Math_fround(.5));
   $7 = Math_fround(Math_fround(HEAPF32[$1 >> 2] + HEAPF32[$1 + 8 >> 2]) * Math_fround(.5));
  }
  $5 = 0;
  while (1) {
   $8 = $5 << 3;
   HEAPF32[($9 + 32 | 0) + ($5 << 2) >> 2] = atan2f(Math_fround(HEAPF32[($8 | 4) + $1 >> 2] - $6), Math_fround(HEAPF32[$1 + $8 >> 2] - $7));
   $5 = $5 + 1 | 0;
   if (($5 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
  $5 = 0;
  while (1) {
   $13 = 1;
   HEAP32[($5 << 2) + $9 >> 2] = 1;
   $5 = $5 + 1 | 0;
   if (($5 | 0) != ($0 | 0)) {
    continue;
   }
   break;
  }
 }
 $5 = $3 << 2;
 HEAP32[$9 + $5 >> 2] = 0;
 HEAP32[$4 >> 2] = $3;
 if (($2 | 0) >= 2) {
  $16 = Math_fround(Math_fround(6.2831854820251465) / Math_fround($2 | 0));
  $10 = HEAPF32[($9 + 32 | 0) + $5 >> 2];
  $11 = 1;
  while (1) {
   HEAP32[$4 + 4 >> 2] = $3;
   $4 = $4 + 4 | 0;
   $8 = $3;
   if ($13) {
    $6 = Math_fround(Math_fround($16 * Math_fround($11 | 0)) + $10);
    $17 = $6 > Math_fround(3.1415927410125732) ? Math_fround($6 + Math_fround(-6.2831854820251465)) : $6;
    $5 = 0;
    $7 = Math_fround(1e9);
    while (1) {
     $1 = $5 << 2;
     label$16 : {
      if (!HEAP32[$9 + $1 >> 2]) {
       break label$16;
      }
      $6 = Math_fround(Math_abs(Math_fround(HEAPF32[($9 + 32 | 0) + $1 >> 2] - $17)));
      $6 = $6 > Math_fround(3.1415927410125732) ? Math_fround(Math_fround(6.2831854820251465) - $6) : $6;
      if (!($6 < $7)) {
       break label$16;
      }
      HEAP32[$4 >> 2] = $5;
      $8 = $5;
      $7 = $6;
     }
     $5 = $5 + 1 | 0;
     if (($5 | 0) != ($0 | 0)) {
      continue;
     }
     break;
    }
   }
   HEAP32[($8 << 2) + $9 >> 2] = 0;
   $11 = $11 + 1 | 0;
   if (($11 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = $9 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function gjkepa2_impl__EPA__newface_28gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20bool_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0);
 $5 = HEAP32[$0 + 18504 >> 2];
 if ($5) {
  $6 = HEAP32[$5 + 48 >> 2];
  if ($6) {
   HEAP32[$6 + 44 >> 2] = HEAP32[$5 + 44 >> 2];
  }
  $6 = HEAP32[$5 + 44 >> 2];
  if ($6) {
   HEAP32[$6 + 48 >> 2] = HEAP32[$5 + 48 >> 2];
  }
  if (HEAP32[$0 + 18504 >> 2] == ($5 | 0)) {
   HEAP32[$0 + 18504 >> 2] = HEAP32[$5 + 48 >> 2];
  }
  $6 = $0 + 18508 | 0;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] + -1;
  HEAP32[$5 + 44 >> 2] = 0;
  HEAP32[$5 + 48 >> 2] = HEAP32[$0 + 18496 >> 2];
  $6 = HEAP32[$0 + 18496 >> 2];
  if ($6) {
   HEAP32[$6 + 44 >> 2] = $5;
  }
  HEAP32[$0 + 18496 >> 2] = $5;
  $6 = $0 + 18500 | 0;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] + 1;
  HEAP32[$5 + 28 >> 2] = $3;
  HEAP32[$5 + 24 >> 2] = $2;
  HEAP32[$5 + 20 >> 2] = $1;
  HEAP8[$5 + 55 | 0] = 0;
  $10 = HEAPF32[$2 + 24 >> 2];
  $16 = HEAPF32[$3 + 24 >> 2];
  $7 = HEAPF32[$1 + 24 >> 2];
  $11 = HEAPF32[$3 + 20 >> 2];
  $9 = HEAPF32[$1 + 20 >> 2];
  $12 = HEAPF32[$2 + 20 >> 2];
  $13 = HEAPF32[$2 + 16 >> 2];
  $15 = HEAPF32[$3 + 16 >> 2];
  $8 = HEAPF32[$1 + 16 >> 2];
  HEAP32[$5 + 12 >> 2] = 0;
  $13 = Math_fround($13 - $8);
  $11 = Math_fround($11 - $9);
  $12 = Math_fround($12 - $9);
  $8 = Math_fround($15 - $8);
  $9 = Math_fround(Math_fround($13 * $11) - Math_fround($12 * $8));
  HEAPF32[$5 + 8 >> 2] = $9;
  $10 = Math_fround($10 - $7);
  $15 = Math_fround($10 * $8);
  $8 = Math_fround($16 - $7);
  $7 = Math_fround($15 - Math_fround($13 * $8));
  HEAPF32[$5 + 4 >> 2] = $7;
  $8 = Math_fround(Math_fround($12 * $8) - Math_fround($10 * $11));
  HEAPF32[$5 >> 2] = $8;
  $6 = 2;
  label$6 : {
   $7 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($7 * $7)) + Math_fround($9 * $9))));
   if (!($7 > Math_fround(9999999747378752e-20))) {
    break label$6;
   }
   $14 = $5 + 16 | 0;
   label$7 : {
    if (gjkepa2_impl__EPA__getedgedist_28gjkepa2_impl__EPA__sFace__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20float__29($0, $5, $1, $2, $14)) {
     break label$7;
    }
    if (gjkepa2_impl__EPA__getedgedist_28gjkepa2_impl__EPA__sFace__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20float__29($0, $5, $2, $3, $14)) {
     break label$7;
    }
    if (gjkepa2_impl__EPA__getedgedist_28gjkepa2_impl__EPA__sFace__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20float__29($0, $5, $3, $1, $14)) {
     break label$7;
    }
    HEAPF32[$5 + 16 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$1 + 16 >> 2] * HEAPF32[$5 >> 2]) + Math_fround(HEAPF32[$1 + 20 >> 2] * HEAPF32[$5 + 4 >> 2])) + Math_fround(HEAPF32[$1 + 24 >> 2] * HEAPF32[$5 + 8 >> 2])) / $7;
   }
   $7 = Math_fround(Math_fround(1) / $7);
   HEAPF32[$5 >> 2] = $7 * HEAPF32[$5 >> 2];
   HEAPF32[$5 + 4 >> 2] = $7 * HEAPF32[$5 + 4 >> 2];
   HEAPF32[$5 + 8 >> 2] = $7 * HEAPF32[$5 + 8 >> 2];
   if ($4) {
    return $5;
   }
   $6 = 3;
   if (!(HEAPF32[$14 >> 2] >= Math_fround(-9999999747378752e-21))) {
    break label$6;
   }
   return $5;
  }
  HEAP32[$0 >> 2] = $6;
  $1 = HEAP32[$5 + 48 >> 2];
  if ($1) {
   HEAP32[$1 + 44 >> 2] = HEAP32[$5 + 44 >> 2];
  }
  $1 = HEAP32[$5 + 44 >> 2];
  if ($1) {
   HEAP32[$1 + 48 >> 2] = HEAP32[$5 + 48 >> 2];
  }
  if (HEAP32[$0 + 18496 >> 2] == ($5 | 0)) {
   HEAP32[$0 + 18496 >> 2] = HEAP32[$5 + 48 >> 2];
  }
  HEAP32[$0 + 18500 >> 2] = HEAP32[$0 + 18500 >> 2] + -1;
  HEAP32[$5 + 44 >> 2] = 0;
  HEAP32[$5 + 48 >> 2] = HEAP32[$0 + 18504 >> 2];
  $1 = HEAP32[$0 + 18504 >> 2];
  if ($1) {
   HEAP32[$1 + 44 >> 2] = $5;
  }
  HEAP32[$0 + 18504 >> 2] = $5;
  HEAP32[$0 + 18508 >> 2] = HEAP32[$0 + 18508 >> 2] + 1;
  return 0;
 }
 HEAP32[$0 >> 2] = 5;
 return 0;
}
function btDbvt__optimizeIncremental_28int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $8 = global$0 - 32 | 0;
 $3 = $8;
 if ($8 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 label$3 : {
  $1 = ($1 | 0) <= -1 ? HEAP32[$0 + 12 >> 2] : $1;
  if (($1 | 0) < 1) {
   break label$3;
  }
  $4 = HEAP32[$0 >> 2];
  if (!$4) {
   break label$3;
  }
  while (1) {
   $10 = 0;
   $7 = $4 + 40 | 0;
   if (HEAP32[$7 >> 2]) {
    while (1) {
     $5 = HEAP32[$4 + 32 >> 2];
     label$7 : {
      if ($5 >>> 0 <= $4 >>> 0) {
       $5 = $4;
       break label$7;
      }
      $2 = HEAP32[$5 + 40 >> 2];
      $3 = ($2 | 0) == ($4 | 0);
      $9 = (($4 | 0) != ($2 | 0)) << 2;
      $6 = HEAP32[($9 + $5 | 0) + 36 >> 2];
      $2 = HEAP32[$5 + 32 >> 2];
      $11 = $0;
      label$9 : {
       if (!$2) {
        break label$9;
       }
       $11 = (((HEAP32[$2 + 40 >> 2] == ($5 | 0)) << 2) + $2 | 0) + 36 | 0;
      }
      HEAP32[$11 >> 2] = $4;
      HEAP32[$6 + 32 >> 2] = $4;
      HEAP32[$5 + 32 >> 2] = $4;
      HEAP32[$4 + 32 >> 2] = $2;
      HEAP32[$5 + 36 >> 2] = HEAP32[$4 + 36 >> 2];
      HEAP32[$5 + 40 >> 2] = HEAP32[$7 >> 2];
      HEAP32[HEAP32[$4 + 36 >> 2] + 32 >> 2] = $5;
      HEAP32[HEAP32[$7 >> 2] + 32 >> 2] = $5;
      $7 = $4 + 36 | 0;
      HEAP32[$7 + ($3 << 2) >> 2] = $5;
      HEAP32[$7 + $9 >> 2] = $6;
      $2 = $5 + 24 | 0;
      $3 = HEAP32[$2 >> 2];
      $6 = HEAP32[$2 + 4 >> 2];
      $2 = $3;
      $7 = $8 + 24 | 0;
      $3 = $7;
      HEAP32[$3 >> 2] = $2;
      HEAP32[$3 + 4 >> 2] = $6;
      $3 = $5 + 16 | 0;
      $2 = $3;
      $6 = HEAP32[$2 >> 2];
      $3 = HEAP32[$2 + 4 >> 2];
      $2 = $6;
      $6 = $8 + 16 | 0;
      HEAP32[$6 >> 2] = $2;
      HEAP32[$6 + 4 >> 2] = $3;
      $2 = $5 + 8 | 0;
      $3 = HEAP32[$2 >> 2];
      $6 = HEAP32[$2 + 4 >> 2];
      $2 = $3;
      $9 = $8 + 8 | 0;
      $3 = $9;
      HEAP32[$3 >> 2] = $2;
      HEAP32[$3 + 4 >> 2] = $6;
      $3 = HEAP32[$5 + 4 >> 2];
      $6 = HEAP32[$5 >> 2];
      $2 = $6;
      $6 = $8;
      HEAP32[$6 >> 2] = $2;
      HEAP32[$6 + 4 >> 2] = $3;
      $2 = $4 + 24 | 0;
      $3 = HEAP32[$2 >> 2];
      $6 = HEAP32[$2 + 4 >> 2];
      HEAP32[$5 + 24 >> 2] = $3;
      HEAP32[$5 + 28 >> 2] = $6;
      $2 = $4 + 16 | 0;
      $6 = HEAP32[$2 >> 2];
      $3 = HEAP32[$2 + 4 >> 2];
      HEAP32[$5 + 16 >> 2] = $6;
      HEAP32[$5 + 20 >> 2] = $3;
      $3 = $4 + 8 | 0;
      $2 = $3;
      $3 = HEAP32[$2 >> 2];
      $6 = HEAP32[$2 + 4 >> 2];
      HEAP32[$5 + 8 >> 2] = $3;
      HEAP32[$5 + 12 >> 2] = $6;
      $3 = HEAP32[$4 + 4 >> 2];
      $6 = HEAP32[$4 >> 2];
      HEAP32[$5 >> 2] = $6;
      HEAP32[$5 + 4 >> 2] = $3;
      $2 = $8;
      $3 = HEAP32[$2 + 24 >> 2];
      $6 = HEAP32[$2 + 28 >> 2];
      HEAP32[$4 + 24 >> 2] = $3;
      HEAP32[$4 + 28 >> 2] = $6;
      $3 = HEAP32[$2 + 20 >> 2];
      $6 = HEAP32[$2 + 16 >> 2];
      HEAP32[$4 + 16 >> 2] = $6;
      HEAP32[$4 + 20 >> 2] = $3;
      $6 = HEAP32[$2 + 12 >> 2];
      $3 = HEAP32[$2 + 8 >> 2];
      HEAP32[$4 + 8 >> 2] = $3;
      HEAP32[$4 + 12 >> 2] = $6;
      $3 = HEAP32[$2 + 4 >> 2];
      $6 = HEAP32[$2 >> 2];
      HEAP32[$4 >> 2] = $6;
      HEAP32[$4 + 4 >> 2] = $3;
     }
     $4 = HEAP32[$0 + 16 >> 2] >>> $10 | 0;
     $10 = $10 + 1 & 31;
     $4 = HEAP32[((($4 & 1) << 2) + $5 | 0) + 36 >> 2];
     $7 = $4 + 40 | 0;
     if (HEAP32[$7 >> 2]) {
      continue;
     }
     break;
    }
   }
   $3 = $0;
   $6 = !removeleaf_28btDbvt__2c_20btDbvtNode__29($0, $4);
   $5 = 0;
   label$10 : {
    if ($6) {
     break label$10;
    }
    $5 = HEAP32[$0 >> 2];
   }
   insertleaf_28btDbvt__2c_20btDbvtNode__2c_20btDbvtNode__29($3, $5, $4);
   HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] + 1;
   $1 = $1 + -1 | 0;
   if (!$1) {
    break label$3;
   }
   $4 = HEAP32[$0 >> 2];
   continue;
  }
 }
 $0 = $8 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuantizedBvh__setQuantizationValues_28btVector3_20const__2c_20btVector3_20const__2c_20float_29($0, $1, $2, $3) {
 var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0);
 $7 = HEAPF32[$1 >> 2];
 $8 = HEAPF32[$1 + 4 >> 2];
 $9 = HEAPF32[$1 + 8 >> 2];
 HEAP32[$0 + 16 >> 2] = 0;
 $9 = Math_fround($9 - $3);
 HEAPF32[$0 + 12 >> 2] = $9;
 $8 = Math_fround($8 - $3);
 HEAPF32[$0 + 8 >> 2] = $8;
 $7 = Math_fround($7 - $3);
 HEAPF32[$0 + 4 >> 2] = $7;
 $10 = HEAPF32[$2 >> 2];
 $11 = HEAPF32[$2 + 4 >> 2];
 $12 = HEAPF32[$2 + 8 >> 2];
 HEAP8[$0 + 60 | 0] = 1;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 $12 = Math_fround($12 + $3);
 HEAPF32[$0 + 28 >> 2] = $12;
 $11 = Math_fround($11 + $3);
 HEAPF32[$0 + 24 >> 2] = $11;
 $10 = Math_fround($10 + $3);
 HEAPF32[$0 + 20 >> 2] = $10;
 $5 = Math_fround(Math_fround(65533) / Math_fround($12 - $9));
 HEAPF32[$0 + 44 >> 2] = $5;
 $6 = Math_fround(Math_fround(65533) / Math_fround($11 - $8));
 HEAPF32[$0 + 40 >> 2] = $6;
 $13 = Math_fround(Math_fround(65533) / Math_fround($10 - $7));
 HEAPF32[$0 + 36 >> 2] = $13;
 $4 = Math_fround(Math_fround($9 - $9) * $5);
 label$1 : {
  if ($4 < Math_fround(4294967296) & $4 >= Math_fround(0)) {
   $2 = ~~$4 >>> 0;
   break label$1;
  }
  $2 = 0;
 }
 $14 = Math_fround(($2 & 65534) >>> 0);
 $4 = Math_fround(Math_fround($8 - $8) * $6);
 label$3 : {
  if ($4 < Math_fround(4294967296) & $4 >= Math_fround(0)) {
   $2 = ~~$4 >>> 0;
   break label$3;
  }
  $2 = 0;
 }
 $4 = Math_fround($14 / $5);
 $6 = Math_fround($8 + Math_fround(Math_fround(($2 & 65534) >>> 0) / $6));
 $5 = Math_fround(Math_fround($7 - $7) * $13);
 label$5 : {
  if ($5 < Math_fround(4294967296) & $5 >= Math_fround(0)) {
   $2 = ~~$5 >>> 0;
   break label$5;
  }
  $2 = 0;
 }
 $4 = Math_fround($9 + $4);
 $5 = Math_fround($6 - $3);
 $6 = Math_fround(Math_fround($7 + Math_fround(Math_fround(($2 & 65534) >>> 0) / $13)) - $3);
 if (!!($6 < $7)) {
  HEAPF32[$0 + 4 >> 2] = $6;
  $7 = $6;
 }
 $6 = Math_fround($4 - $3);
 if (!!($5 < $8)) {
  HEAPF32[$0 + 8 >> 2] = $5;
  $8 = $5;
 }
 if (!!($6 < $9)) {
  HEAPF32[$0 + 12 >> 2] = $6;
  $9 = $6;
 }
 HEAP32[$0 + 48 >> 2] = 0;
 $4 = Math_fround($12 - $9);
 $5 = Math_fround(Math_fround(65533) / $4);
 HEAPF32[$0 + 44 >> 2] = $5;
 $14 = Math_fround($11 - $8);
 $6 = Math_fround(Math_fround(65533) / $14);
 HEAPF32[$0 + 40 >> 2] = $6;
 $15 = Math_fround($10 - $7);
 $13 = Math_fround(Math_fround(65533) / $15);
 HEAPF32[$0 + 36 >> 2] = $13;
 $4 = Math_fround(Math_fround($5 * $4) + Math_fround(1));
 label$10 : {
  if ($4 < Math_fround(4294967296) & $4 >= Math_fround(0)) {
   $2 = ~~$4 >>> 0;
   break label$10;
  }
  $2 = 0;
 }
 $16 = Math_fround(($2 | 1) >>> 0);
 $4 = Math_fround(Math_fround($6 * $14) + Math_fround(1));
 label$12 : {
  if ($4 < Math_fround(4294967296) & $4 >= Math_fround(0)) {
   $2 = ~~$4 >>> 0;
   break label$12;
  }
  $2 = 0;
 }
 $4 = Math_fround($16 / $5);
 $6 = Math_fround($8 + Math_fround(Math_fround(($2 | 1) >>> 0) / $6));
 $5 = Math_fround(Math_fround($13 * $15) + Math_fround(1));
 label$14 : {
  if ($5 < Math_fround(4294967296) & $5 >= Math_fround(0)) {
   $2 = ~~$5 >>> 0;
   break label$14;
  }
  $2 = 0;
 }
 $4 = Math_fround($9 + $4);
 $5 = Math_fround($6 + $3);
 $6 = Math_fround(Math_fround($7 + Math_fround(Math_fround(($2 | 1) >>> 0) / $13)) + $3);
 if (!!($10 < $6)) {
  HEAPF32[$0 + 20 >> 2] = $6;
  $10 = $6;
 }
 $3 = Math_fround($4 + $3);
 if (!!($11 < $5)) {
  HEAPF32[$0 + 24 >> 2] = $5;
  $11 = $5;
 }
 if (!!($12 < $3)) {
  HEAPF32[$0 + 28 >> 2] = $3;
  $12 = $3;
 }
 HEAP32[$0 + 48 >> 2] = 0;
 HEAPF32[$0 + 44 >> 2] = Math_fround(65533) / Math_fround($12 - $9);
 HEAPF32[$0 + 40 >> 2] = Math_fround(65533) / Math_fround($11 - $8);
 HEAPF32[$0 + 36 >> 2] = Math_fround(65533) / Math_fround($10 - $7);
}
function btMatrix3x3__getRotation_28btQuaternion__29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = Math_fround(0);
 $2 = global$0 + -64 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 60 >> 2] = $0;
 HEAP32[$2 + 56 >> 2] = $1;
 $3 = HEAP32[$2 + 60 >> 2];
 HEAPF32[$2 + 52 >> 2] = Math_fround(HEAPF32[btVector3__x_28_29_20const($3) >> 2] + HEAPF32[btVector3__y_28_29_20const($3 + 16 | 0) >> 2]) + HEAPF32[btVector3__z_28_29_20const($3 + 32 | 0) >> 2];
 label$2 : {
  if (HEAPF32[$2 + 52 >> 2] > Math_fround(0)) {
   HEAPF32[$2 + 28 >> 2] = btSqrt_28float_29(Math_fround(HEAPF32[$2 + 52 >> 2] + Math_fround(1)));
   HEAPF32[$2 + 44 >> 2] = HEAPF32[$2 + 28 >> 2] * Math_fround(.5);
   HEAPF32[$2 + 28 >> 2] = Math_fround(.5) / HEAPF32[$2 + 28 >> 2];
   HEAPF32[$2 + 32 >> 2] = Math_fround(HEAPF32[btVector3__y_28_29_20const($3 + 32 | 0) >> 2] - HEAPF32[btVector3__z_28_29_20const($3 + 16 | 0) >> 2]) * HEAPF32[$2 + 28 >> 2];
   HEAPF32[$2 + 36 >> 2] = Math_fround(HEAPF32[btVector3__z_28_29_20const($3) >> 2] - HEAPF32[btVector3__x_28_29_20const($3 + 32 | 0) >> 2]) * HEAPF32[$2 + 28 >> 2];
   HEAPF32[$2 + 40 >> 2] = Math_fround(HEAPF32[btVector3__x_28_29_20const($3 + 16 | 0) >> 2] - HEAPF32[btVector3__y_28_29_20const($3) >> 2]) * HEAPF32[$2 + 28 >> 2];
   break label$2;
  }
  label$4 : {
   if (HEAPF32[btVector3__x_28_29_20const($3) >> 2] < HEAPF32[btVector3__y_28_29_20const($3 + 16 | 0) >> 2]) {
    $0 = HEAPF32[btVector3__y_28_29_20const($3 + 16 | 0) >> 2] < HEAPF32[btVector3__z_28_29_20const($3 + 32 | 0) >> 2] ? 2 : 1;
    break label$4;
   }
   $0 = HEAPF32[btVector3__x_28_29_20const($3) >> 2] < HEAPF32[btVector3__z_28_29_20const($3 + 32 | 0) >> 2] ? 2 : 0;
  }
  $1 = $2 + 32 | 0;
  HEAP32[$2 + 24 >> 2] = $0;
  HEAP32[$2 + 20 >> 2] = (HEAP32[$2 + 24 >> 2] + 1 | 0) % 3;
  HEAP32[$2 + 16 >> 2] = (HEAP32[$2 + 24 >> 2] + 2 | 0) % 3;
  HEAPF32[$2 + 12 >> 2] = btSqrt_28float_29(Math_fround(Math_fround(Math_fround(HEAPF32[btVector3__operator_20float_20const__28_29_20const((HEAP32[$2 + 24 >> 2] << 4) + $3 | 0) + (HEAP32[$2 + 24 >> 2] << 2) >> 2] - HEAPF32[btVector3__operator_20float_20const__28_29_20const((HEAP32[$2 + 20 >> 2] << 4) + $3 | 0) + (HEAP32[$2 + 20 >> 2] << 2) >> 2]) - HEAPF32[btVector3__operator_20float_20const__28_29_20const((HEAP32[$2 + 16 >> 2] << 4) + $3 | 0) + (HEAP32[$2 + 16 >> 2] << 2) >> 2]) + Math_fround(1)));
  HEAPF32[(HEAP32[$2 + 24 >> 2] << 2) + $1 >> 2] = HEAPF32[$2 + 12 >> 2] * Math_fround(.5);
  HEAPF32[$2 + 12 >> 2] = Math_fround(.5) / HEAPF32[$2 + 12 >> 2];
  HEAPF32[$2 + 44 >> 2] = Math_fround(HEAPF32[btVector3__operator_20float_20const__28_29_20const((HEAP32[$2 + 16 >> 2] << 4) + $3 | 0) + (HEAP32[$2 + 20 >> 2] << 2) >> 2] - HEAPF32[btVector3__operator_20float_20const__28_29_20const((HEAP32[$2 + 20 >> 2] << 4) + $3 | 0) + (HEAP32[$2 + 16 >> 2] << 2) >> 2]) * HEAPF32[$2 + 12 >> 2];
  $4 = HEAPF32[btVector3__operator_20float_20const__28_29_20const((HEAP32[$2 + 20 >> 2] << 4) + $3 | 0) + (HEAP32[$2 + 24 >> 2] << 2) >> 2];
  $0 = btVector3__operator_20float_20const__28_29_20const((HEAP32[$2 + 24 >> 2] << 4) + $3 | 0);
  HEAPF32[(HEAP32[$2 + 20 >> 2] << 2) + $1 >> 2] = Math_fround($4 + HEAPF32[(HEAP32[$2 + 20 >> 2] << 2) + $0 >> 2]) * HEAPF32[$2 + 12 >> 2];
  $4 = HEAPF32[btVector3__operator_20float_20const__28_29_20const((HEAP32[$2 + 16 >> 2] << 4) + $3 | 0) + (HEAP32[$2 + 24 >> 2] << 2) >> 2];
  $0 = btVector3__operator_20float_20const__28_29_20const((HEAP32[$2 + 24 >> 2] << 4) + $3 | 0);
  HEAPF32[(HEAP32[$2 + 16 >> 2] << 2) + $1 >> 2] = Math_fround($4 + HEAPF32[(HEAP32[$2 + 16 >> 2] << 2) + $0 >> 2]) * HEAPF32[$2 + 12 >> 2];
 }
 $0 = $2 + 32 | 0;
 btQuadWord__setValue_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29(HEAP32[$2 + 56 >> 2], $0, $0 + 4 | 0, $0 + 8 | 0, $0 + 12 | 0);
 $0 = $2 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHashMap_btInternalVertexPair_2c_20btInternalEdge___insert_28btInternalVertexPair_20const__2c_20btInternalEdge_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 label$1 : {
  $4 = HEAP16[$1 >> 1];
  $6 = HEAPU16[$1 + 2 >> 1];
  $8 = HEAP32[$0 + 48 >> 2];
  $10 = $4 + ($6 << 16) & $8 + -1;
  label$2 : {
   if ($10 >>> 0 >= HEAPU32[$0 + 4 >> 2]) {
    break label$2;
   }
   $3 = HEAP32[HEAP32[$0 + 12 >> 2] + ($10 << 2) >> 2];
   if (($3 | 0) == -1) {
    break label$2;
   }
   $7 = HEAP32[$0 + 72 >> 2];
   $9 = $4 & 65535;
   while (1) {
    $4 = $3 << 2;
    $5 = $7 + $4 | 0;
    if (HEAPU16[$5 + 2 >> 1] == ($6 & 65535) ? HEAPU16[$5 >> 1] == ($9 | 0) : 0) {
     break label$1;
    }
    $3 = HEAP32[HEAP32[$0 + 32 >> 2] + $4 >> 2];
    if (($3 | 0) != -1) {
     continue;
    }
    break;
   }
  }
  $9 = HEAP32[$0 + 44 >> 2];
  $3 = $9;
  label$5 : {
   if (($8 | 0) != ($3 | 0)) {
    break label$5;
   }
   $3 = $8;
   $6 = $3 ? $3 << 1 : 1;
   if (($3 | 0) >= ($6 | 0)) {
    break label$5;
   }
   label$6 : {
    if (!$6) {
     $5 = 0;
     $3 = $8;
     break label$6;
    }
    $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 2, 16);
    $3 = HEAP32[$0 + 44 >> 2];
   }
   $7 = $3;
   if (($7 | 0) >= 1) {
    $3 = 0;
    while (1) {
     $4 = $3 << 2;
     $11 = $4 + $5 | 0;
     $4 = HEAP32[$0 + 52 >> 2] + $4 | 0;
     $4 = HEAPU16[$4 >> 1] | HEAPU16[$4 + 2 >> 1] << 16;
     HEAP16[$11 >> 1] = $4;
     HEAP16[$11 + 2 >> 1] = $4 >>> 16;
     $3 = $3 + 1 | 0;
     if (($7 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
   }
   $3 = HEAP32[$0 + 52 >> 2];
   if ($3) {
    if (HEAPU8[$0 + 56 | 0]) {
     btAlignedFreeInternal_28void__29($3);
    }
    HEAP32[$0 + 52 >> 2] = 0;
   }
   HEAP32[$0 + 52 >> 2] = $5;
   HEAP32[$0 + 48 >> 2] = $6;
   HEAP8[$0 + 56 | 0] = 1;
   $3 = HEAP32[$0 + 44 >> 2];
  }
  $3 = HEAP32[$0 + 52 >> 2] + ($3 << 2) | 0;
  $2 = HEAPU16[$2 >> 1] | HEAPU16[$2 + 2 >> 1] << 16;
  HEAP16[$3 >> 1] = $2;
  HEAP16[$3 + 2 >> 1] = $2 >>> 16;
  HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + 1;
  $5 = HEAP32[$0 - -64 >> 2];
  label$12 : {
   if (($5 | 0) != HEAP32[$0 + 68 >> 2]) {
    break label$12;
   }
   $6 = $5 ? $5 << 1 : 1;
   if (($5 | 0) >= ($6 | 0)) {
    break label$12;
   }
   label$13 : {
    if (!$6) {
     $7 = 0;
     break label$13;
    }
    $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 2, 16);
    $5 = HEAP32[$0 + 64 >> 2];
   }
   if (($5 | 0) >= 1) {
    $3 = 0;
    while (1) {
     $4 = $3 << 2;
     $2 = $7 + $4 | 0;
     $4 = HEAP32[$0 + 72 >> 2] + $4 | 0;
     $4 = HEAPU16[$4 >> 1] | HEAPU16[$4 + 2 >> 1] << 16;
     HEAP16[$2 >> 1] = $4;
     HEAP16[$2 + 2 >> 1] = $4 >>> 16;
     $3 = $3 + 1 | 0;
     if (($5 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
   }
   $3 = HEAP32[$0 + 72 >> 2];
   if ($3) {
    if (HEAPU8[$0 + 76 | 0]) {
     btAlignedFreeInternal_28void__29($3);
    }
    HEAP32[$0 + 72 >> 2] = 0;
   }
   HEAP32[$0 + 72 >> 2] = $7;
   HEAP32[$0 + 68 >> 2] = $6;
   HEAP8[$0 + 76 | 0] = 1;
   $5 = HEAP32[$0 + 64 >> 2];
  }
  $2 = HEAP32[$0 + 72 >> 2] + ($5 << 2) | 0;
  $3 = HEAPU16[$1 >> 1] | HEAPU16[$1 + 2 >> 1] << 16;
  HEAP16[$2 >> 1] = $3;
  HEAP16[$2 + 2 >> 1] = $3 >>> 16;
  HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 64 >> 2] + 1;
  if (($8 | 0) < HEAP32[$0 + 48 >> 2]) {
   btHashMap_btInternalVertexPair_2c_20btInternalEdge___growTables_28btInternalVertexPair_20const__29($0, $1);
   $10 = HEAP16[$1 >> 1] + (HEAPU16[$1 + 2 >> 1] << 16) & HEAP32[$0 + 48 >> 2] + -1;
  }
  $1 = HEAP32[$0 + 32 >> 2] + ($9 << 2) | 0;
  $0 = HEAP32[$0 + 12 >> 2] + ($10 << 2) | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = $9;
  return;
 }
 $0 = HEAP32[$0 + 52 >> 2] + ($3 << 2) | 0;
 $1 = HEAPU16[$2 >> 1] | HEAPU16[$2 + 2 >> 1] << 16;
 HEAP16[$0 >> 1] = $1;
 HEAP16[$0 + 2 >> 1] = $1 >>> 16;
}
function __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
  __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3);
  return;
 }
 label$2 : {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
   if (!(HEAP32[$1 + 20 >> 2] != ($2 | 0) ? HEAP32[$1 + 16 >> 2] != ($2 | 0) : 0)) {
    if (($3 | 0) != 1) {
     break label$2;
    }
    HEAP32[$1 + 32 >> 2] = 1;
    return;
   }
   HEAP32[$1 + 32 >> 2] = $3;
   if (HEAP32[$1 + 44 >> 2] != 4) {
    $5 = $0 + 16 | 0;
    $3 = $5 + (HEAP32[$0 + 12 >> 2] << 3) | 0;
    $9 = $1;
    label$7 : {
     label$8 : {
      while (1) {
       label$10 : {
        if ($5 >>> 0 >= $3 >>> 0) {
         break label$10;
        }
        HEAP16[$1 + 52 >> 1] = 0;
        __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $2, 1, $4);
        if (HEAPU8[$1 + 54 | 0]) {
         break label$10;
        }
        label$11 : {
         if (!HEAPU8[$1 + 53 | 0]) {
          break label$11;
         }
         if (HEAPU8[$1 + 52 | 0]) {
          $6 = 1;
          if (HEAP32[$1 + 24 >> 2] == 1) {
           break label$8;
          }
          $7 = 1;
          $8 = 1;
          if (HEAPU8[$0 + 8 | 0] & 2) {
           break label$11;
          }
          break label$8;
         }
         $7 = 1;
         $6 = $8;
         if (!(HEAP8[$0 + 8 | 0] & 1)) {
          break label$8;
         }
        }
        $5 = $5 + 8 | 0;
        continue;
       }
       break;
      }
      $6 = $8;
      $5 = 4;
      if (!$7) {
       break label$7;
      }
     }
     $5 = 3;
    }
    HEAP32[$9 + 44 >> 2] = $5;
    if ($6 & 1) {
     break label$2;
    }
   }
   HEAP32[$1 + 20 >> 2] = $2;
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
   if (HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2) {
    break label$2;
   }
   HEAP8[$1 + 54 | 0] = 1;
   return;
  }
  $5 = HEAP32[$0 + 12 >> 2];
  $6 = $0 + 16 | 0;
  __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($6, $1, $2, $3, $4);
  if (($5 | 0) < 2) {
   break label$2;
  }
  $6 = ($5 << 3) + $6 | 0;
  $5 = $0 + 24 | 0;
  $0 = HEAP32[$0 + 8 >> 2];
  if (!(HEAP32[$1 + 36 >> 2] != 1 ? !($0 & 2) : 0)) {
   while (1) {
    if (HEAPU8[$1 + 54 | 0]) {
     break label$2;
    }
    __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
    $5 = $5 + 8 | 0;
    if ($5 >>> 0 < $6 >>> 0) {
     continue;
    }
    break;
   }
   break label$2;
  }
  if (!($0 & 1)) {
   while (1) {
    if (HEAPU8[$1 + 54 | 0] | HEAP32[$1 + 36 >> 2] == 1) {
     break label$2;
    }
    __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
    $5 = $5 + 8 | 0;
    if ($5 >>> 0 < $6 >>> 0) {
     continue;
    }
    break label$2;
   }
  }
  while (1) {
   if (HEAPU8[$1 + 54 | 0] | (HEAP32[$1 + 24 >> 2] == 1 ? HEAP32[$1 + 36 >> 2] == 1 : 0)) {
    break label$2;
   }
   __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($5, $1, $2, $3, $4);
   $5 = $5 + 8 | 0;
   if ($5 >>> 0 < $6 >>> 0) {
    continue;
   }
   break;
  }
 }
}
function btHingeConstraint__setAxis_28btVector3__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $2 = global$0 - 320 | 0;
 $5 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $12 = $2 + 56 | 0;
 $13 = $2 + 8 | 0;
 $7 = $2 + 248 | 0;
 $11 = $2 + 200 | 0;
 $9 = $2 + 216 | 0;
 $14 = $2 + 184 | 0;
 $15 = $2 + 120 | 0;
 $16 = $2 + 104 | 0;
 $5 = $2 + 264 | 0;
 $17 = $2 + 232 | 0;
 $10 = $2 + 280 | 0;
 HEAP32[$2 + 316 >> 2] = $0;
 HEAP32[$2 + 312 >> 2] = $1;
 $3 = HEAP32[$2 + 316 >> 2];
 $8 = $2 + 296 | 0;
 btVector3__btVector3_28_29($8);
 btVector3__btVector3_28_29($10);
 void_20btPlaneSpace1_btVector3__28btVector3_20const__2c_20btVector3__2c_20btVector3__29(HEAP32[$2 + 312 >> 2], $8, $10);
 $4 = btTransform__getOrigin_28_29($3 + 552 | 0);
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 $6 = $0;
 $0 = $5;
 HEAP32[$0 >> 2] = $6;
 HEAP32[$0 + 4 >> 2] = $1;
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$4 + 8 >> 2];
 $6 = $1;
 $1 = $5;
 HEAP32[$1 + 8 >> 2] = $6;
 HEAP32[$1 + 12 >> 2] = $0;
 btMatrix3x3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29(btTransform__getBasis_28_29($3 + 552 | 0), btVector3__getX_28_29_20const($8), btVector3__getX_28_29_20const($10), btVector3__getX_28_29_20const(HEAP32[$2 + 312 >> 2]), btVector3__getY_28_29_20const($8), btVector3__getY_28_29_20const($10), btVector3__getY_28_29_20const(HEAP32[$2 + 312 >> 2]), btVector3__getZ_28_29_20const($8), btVector3__getZ_28_29_20const($10), btVector3__getZ_28_29_20const(HEAP32[$2 + 312 >> 2]));
 operator__28btMatrix3x3_20const__2c_20btVector3_20const__29($7, btTransform__getBasis_28_29_20const(btRigidBody__getCenterOfMassTransform_28_29_20const(HEAP32[$3 + 28 >> 2])), HEAP32[$2 + 312 >> 2]);
 shortestArcQuat_28btVector3_20const__2c_20btVector3_20const__29($17, HEAP32[$2 + 312 >> 2], $7);
 quatRotate_28btQuaternion_20const__2c_20btVector3_20const__29($9, $17, $8);
 btVector3__cross_28btVector3_20const__29_20const($11, $7, $9);
 btTransform__inverse_28_29_20const($15, btRigidBody__getCenterOfMassTransform_28_29_20const(HEAP32[$3 + 32 >> 2]));
 btTransform__operator_28_29_28btVector3_20const__29_20const($16, btRigidBody__getCenterOfMassTransform_28_29_20const(HEAP32[$3 + 28 >> 2]), $1);
 btTransform__operator_28_29_28btVector3_20const__29_20const($14, $15, $16);
 $5 = btTransform__getOrigin_28_29($3 + 616 | 0);
 $4 = $14;
 $0 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 $6 = $0;
 $0 = $5;
 HEAP32[$0 >> 2] = $6;
 HEAP32[$0 + 4 >> 2] = $1;
 $0 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$4 + 8 >> 2];
 $6 = $1;
 $1 = $5;
 HEAP32[$1 + 8 >> 2] = $6;
 HEAP32[$1 + 12 >> 2] = $0;
 btMatrix3x3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29(btTransform__getBasis_28_29($3 + 616 | 0), btVector3__getX_28_29_20const($9), btVector3__getX_28_29_20const($11), btVector3__getX_28_29_20const($7), btVector3__getY_28_29_20const($9), btVector3__getY_28_29_20const($11), btVector3__getY_28_29_20const($7), btVector3__getZ_28_29_20const($9), btVector3__getZ_28_29_20const($11), btVector3__getZ_28_29_20const($7));
 btMatrix3x3__inverse_28_29_20const($13, btTransform__getBasis_28_29_20const(btRigidBody__getCenterOfMassTransform_28_29_20const(HEAP32[$3 + 32 >> 2])));
 operator__28btMatrix3x3_20const__2c_20btMatrix3x3_20const__29($12, $13, btTransform__getBasis_28_29($3 + 616 | 0));
 btMatrix3x3__operator__28btMatrix3x3_20const__29(btTransform__getBasis_28_29($3 + 616 | 0), $12);
 $0 = $2 + 320 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btJacobianEntry__btJacobianEntry_28btMatrix3x3_20const__2c_20btMatrix3x3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20btVector3_20const__2c_20float_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0, $23 = 0, $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0);
 $22 = $5;
 $23 = HEAP32[$22 >> 2];
 $5 = HEAP32[$22 + 4 >> 2];
 HEAP32[$0 >> 2] = $23;
 HEAP32[$0 + 4 >> 2] = $5;
 $23 = HEAP32[$22 + 12 >> 2];
 $5 = HEAP32[$22 + 8 >> 2];
 HEAP32[$0 + 8 >> 2] = $5;
 HEAP32[$0 + 12 >> 2] = $23;
 $21 = HEAPF32[$1 + 24 >> 2];
 $17 = HEAPF32[$1 + 20 >> 2];
 $14 = HEAPF32[$1 + 40 >> 2];
 $18 = HEAPF32[$1 + 36 >> 2];
 $19 = HEAPF32[$1 + 8 >> 2];
 $24 = HEAPF32[$1 >> 2];
 $25 = HEAPF32[$1 + 4 >> 2];
 $26 = HEAPF32[$1 + 16 >> 2];
 $15 = HEAPF32[$1 + 32 >> 2];
 $16 = HEAPF32[$3 + 4 >> 2];
 $10 = HEAPF32[$3 + 8 >> 2];
 $20 = HEAPF32[$3 >> 2];
 HEAP32[$0 + 28 >> 2] = 0;
 $12 = HEAPF32[$0 + 8 >> 2];
 $11 = HEAPF32[$0 + 4 >> 2];
 $13 = Math_fround(Math_fround($16 * $12) - Math_fround($10 * $11));
 $27 = Math_fround($15 * $13);
 $15 = HEAPF32[$0 >> 2];
 $10 = Math_fround(Math_fround($10 * $15) - Math_fround($12 * $20));
 $16 = Math_fround(Math_fround($11 * $20) - Math_fround($16 * $15));
 $20 = Math_fround(Math_fround($27 + Math_fround($18 * $10)) + Math_fround($14 * $16));
 HEAPF32[$0 + 24 >> 2] = $20;
 $21 = Math_fround(Math_fround(Math_fround($13 * $26) + Math_fround($10 * $17)) + Math_fround($16 * $21));
 HEAPF32[$0 + 20 >> 2] = $21;
 $16 = Math_fround(Math_fround(Math_fround($13 * $24) + Math_fround($25 * $10)) + Math_fround($16 * $19));
 HEAPF32[$0 + 16 >> 2] = $16;
 $18 = HEAPF32[$2 + 24 >> 2];
 $19 = HEAPF32[$2 + 20 >> 2];
 $24 = HEAPF32[$2 + 40 >> 2];
 $25 = HEAPF32[$2 + 36 >> 2];
 $26 = HEAPF32[$2 + 8 >> 2];
 $27 = HEAPF32[$2 >> 2];
 $28 = HEAPF32[$2 + 4 >> 2];
 $29 = HEAPF32[$2 + 16 >> 2];
 $30 = HEAPF32[$2 + 32 >> 2];
 $10 = HEAPF32[$4 + 4 >> 2];
 $13 = HEAPF32[$4 >> 2];
 $17 = HEAPF32[$4 + 8 >> 2];
 HEAP32[$0 + 44 >> 2] = 0;
 $14 = Math_fround(Math_fround($11 * $17) - Math_fround($12 * $10));
 $12 = Math_fround(Math_fround($12 * $13) - Math_fround($15 * $17));
 $11 = Math_fround(Math_fround($15 * $10) - Math_fround($11 * $13));
 $15 = Math_fround(Math_fround(Math_fround($30 * $14) + Math_fround($25 * $12)) + Math_fround($24 * $11));
 HEAPF32[$0 + 40 >> 2] = $15;
 $10 = Math_fround(Math_fround(Math_fround($14 * $29) + Math_fround($12 * $19)) + Math_fround($11 * $18));
 HEAPF32[$0 + 36 >> 2] = $10;
 $12 = Math_fround(Math_fround(Math_fround($27 * $14) + Math_fround($28 * $12)) + Math_fround($11 * $26));
 HEAPF32[$0 + 32 >> 2] = $12;
 $11 = HEAPF32[$6 + 8 >> 2];
 $13 = HEAPF32[$6 + 4 >> 2];
 $17 = HEAPF32[$6 >> 2];
 HEAP32[$0 + 60 >> 2] = 0;
 $17 = Math_fround($17 * $16);
 HEAPF32[$0 + 48 >> 2] = $17;
 $13 = Math_fround($13 * $21);
 HEAPF32[$0 + 52 >> 2] = $13;
 $11 = Math_fround($11 * $20);
 HEAPF32[$0 + 56 >> 2] = $11;
 $14 = HEAPF32[$8 + 8 >> 2];
 $18 = HEAPF32[$8 + 4 >> 2];
 $19 = HEAPF32[$8 >> 2];
 HEAP32[$0 + 76 >> 2] = 0;
 $19 = Math_fround($19 * $12);
 HEAPF32[$0 + 64 >> 2] = $19;
 $18 = Math_fround($18 * $10);
 HEAPF32[$0 + 68 >> 2] = $18;
 $14 = Math_fround($14 * $15);
 HEAPF32[$0 + 72 >> 2] = $14;
 HEAPF32[$0 + 80 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($16 * $17) + Math_fround($21 * $13)) + Math_fround($20 * $11)) + $7) + $9) + Math_fround(Math_fround(Math_fround($12 * $19) + Math_fround($10 * $18)) + Math_fround($15 * $14));
 return $0;
}
function btCollisionWorld__rayTest_28btVector3_20const__2c_20btVector3_20const__2c_20btCollisionWorld__RayResultCallback__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0);
 $4 = global$0 - 256 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 32 >> 2] = 9424;
 $5 = $1;
 $6 = HEAP32[$5 + 8 >> 2];
 $7 = HEAP32[$5 + 12 >> 2];
 HEAP32[$4 + 76 >> 2] = $6;
 HEAP32[$4 + 80 >> 2] = $7;
 $6 = HEAP32[$5 + 4 >> 2];
 $7 = HEAP32[$5 >> 2];
 HEAP32[$4 + 68 >> 2] = $7;
 HEAP32[$4 + 72 >> 2] = $6;
 $5 = $2;
 $6 = HEAP32[$5 + 8 >> 2];
 $7 = HEAP32[$5 + 12 >> 2];
 HEAP32[$4 + 92 >> 2] = $6;
 HEAP32[$4 + 96 >> 2] = $7;
 $7 = HEAP32[$5 >> 2];
 $6 = HEAP32[$5 + 4 >> 2];
 HEAP32[$4 + 104 >> 2] = 0;
 HEAP32[$4 + 108 >> 2] = 0;
 HEAP32[$4 + 112 >> 2] = 0;
 HEAP32[$4 + 116 >> 2] = 0;
 HEAP32[$4 + 124 >> 2] = 0;
 HEAP32[$4 + 128 >> 2] = 0;
 HEAP32[$4 + 120 >> 2] = 1065353216;
 HEAP32[$4 + 132 >> 2] = 0;
 HEAP32[$4 + 136 >> 2] = 0;
 HEAP32[$4 + 140 >> 2] = 1065353216;
 HEAP32[$4 + 144 >> 2] = 0;
 HEAP32[$4 + 84 >> 2] = $7;
 HEAP32[$4 + 88 >> 2] = $6;
 HEAP32[$4 + 248 >> 2] = $3;
 HEAP32[$4 + 100 >> 2] = 1065353216;
 HEAP32[$4 + 244 >> 2] = $0;
 $7 = HEAP32[$4 + 72 >> 2];
 $6 = HEAP32[$4 + 68 >> 2];
 HEAP32[$4 + 148 >> 2] = $6;
 HEAP32[$4 + 152 >> 2] = $7;
 $6 = HEAP32[$4 + 80 >> 2];
 $7 = HEAP32[$4 + 76 >> 2];
 HEAP32[$4 + 156 >> 2] = $7;
 HEAP32[$4 + 160 >> 2] = $6;
 HEAP32[$4 + 164 >> 2] = 1065353216;
 HEAP32[$4 + 176 >> 2] = 0;
 HEAP32[$4 + 180 >> 2] = 0;
 HEAP32[$4 + 168 >> 2] = 0;
 HEAP32[$4 + 172 >> 2] = 0;
 HEAP32[$4 + 184 >> 2] = 1065353216;
 HEAP32[$4 + 196 >> 2] = 0;
 HEAP32[$4 + 200 >> 2] = 0;
 HEAP32[$4 + 188 >> 2] = 0;
 HEAP32[$4 + 192 >> 2] = 0;
 HEAP32[$4 + 204 >> 2] = 1065353216;
 HEAP32[$4 + 208 >> 2] = 0;
 $7 = HEAP32[$5 + 12 >> 2];
 $6 = HEAP32[$5 + 8 >> 2];
 HEAP32[$4 + 220 >> 2] = $6;
 HEAP32[$4 + 224 >> 2] = $7;
 $6 = HEAP32[$5 + 4 >> 2];
 $7 = HEAP32[$5 >> 2];
 HEAP32[$4 + 212 >> 2] = $7;
 HEAP32[$4 + 216 >> 2] = $6;
 $8 = Math_fround(HEAPF32[$5 + 8 >> 2] - HEAPF32[$1 + 8 >> 2]);
 $11 = $8;
 $10 = Math_fround(HEAPF32[$5 >> 2] - HEAPF32[$1 >> 2]);
 $9 = Math_fround(HEAPF32[$5 + 4 >> 2] - HEAPF32[$1 + 4 >> 2]);
 $8 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($9 * $9)) + Math_fround($8 * $8)))));
 $11 = Math_fround($11 * $8);
 $12 = $11 == Math_fround(0) ? Math_fround(0xde0b6b000000000) : Math_fround(Math_fround(1) / $11);
 HEAPF32[$4 + 44 >> 2] = $12;
 $9 = Math_fround($9 * $8);
 $13 = $9 == Math_fround(0) ? Math_fround(0xde0b6b000000000) : Math_fround(Math_fround(1) / $9);
 HEAPF32[$4 + 40 >> 2] = $13;
 HEAP32[$4 + 60 >> 2] = $12 < Math_fround(0);
 HEAP32[$4 + 56 >> 2] = $13 < Math_fround(0);
 $8 = Math_fround($10 * $8);
 $10 = $8 == Math_fround(0) ? Math_fround(0xde0b6b000000000) : Math_fround(Math_fround(1) / $8);
 HEAPF32[$4 + 36 >> 2] = $10;
 HEAP32[$4 + 52 >> 2] = $10 < Math_fround(0);
 HEAPF32[$4 + 64 >> 2] = Math_fround(Math_fround($8 * Math_fround(HEAPF32[$4 + 84 >> 2] - HEAPF32[$4 + 68 >> 2])) + Math_fround($9 * Math_fround(HEAPF32[$4 + 88 >> 2] - HEAPF32[$4 + 72 >> 2]))) + Math_fround($11 * Math_fround(HEAPF32[$4 + 92 >> 2] - HEAPF32[$4 + 76 >> 2]));
 $0 = HEAP32[$0 + 68 >> 2];
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP32[$4 + 28 >> 2] = 0;
 HEAP32[$4 + 16 >> 2] = 0;
 HEAP32[$4 + 20 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 HEAP32[$4 + 12 >> 2] = 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $5, $4 + 32 | 0, $4 + 16 | 0, $4);
 $0 = $4 + 256 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSphereTriangleCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $5 = global$0 - 160 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 $6 = HEAP32[$0 + 12 >> 2];
 label$2 : {
  if (!$6) {
   break label$2;
  }
  $7 = HEAPU8[$0 + 16 | 0];
  $9 = $7 ? $1 : $2;
  $8 = HEAP32[$9 + 4 >> 2];
  $1 = $7 ? $2 : $1;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $2 = SphereTriangleDetector__SphereTriangleDetector_28btSphereShape__2c_20btTriangleShape__2c_20float_29($5 + 144 | 0, $2, $8, Math_fround(btPersistentManifold__getContactBreakingThreshold_28_29_20const($6) + HEAPF32[$4 + 32 >> 2]));
  HEAP32[$5 + 136 >> 2] = 1566444395;
  $1 = HEAP32[$1 + 12 >> 2];
  $7 = $1;
  $6 = HEAP32[$7 + 8 >> 2];
  $1 = HEAP32[$7 + 12 >> 2];
  HEAP32[$5 + 16 >> 2] = $6;
  HEAP32[$5 + 20 >> 2] = $1;
  $6 = HEAP32[$7 + 4 >> 2];
  $1 = HEAP32[$7 >> 2];
  HEAP32[$5 + 8 >> 2] = $1;
  HEAP32[$5 + 12 >> 2] = $6;
  $1 = HEAP32[$7 + 28 >> 2];
  $6 = HEAP32[$7 + 24 >> 2];
  HEAP32[$5 + 32 >> 2] = $6;
  HEAP32[$5 + 36 >> 2] = $1;
  $6 = HEAP32[$7 + 20 >> 2];
  $1 = HEAP32[$7 + 16 >> 2];
  HEAP32[$5 + 24 >> 2] = $1;
  HEAP32[$5 + 28 >> 2] = $6;
  $1 = HEAP32[$7 + 44 >> 2];
  $6 = HEAP32[$7 + 40 >> 2];
  HEAP32[$5 + 48 >> 2] = $6;
  HEAP32[$5 + 52 >> 2] = $1;
  $6 = HEAP32[$7 + 36 >> 2];
  $1 = HEAP32[$7 + 32 >> 2];
  HEAP32[$5 + 40 >> 2] = $1;
  HEAP32[$5 + 44 >> 2] = $6;
  $1 = HEAP32[$7 + 60 >> 2];
  $6 = HEAP32[$7 + 56 >> 2];
  $8 = $6;
  $6 = $5 - -64 | 0;
  HEAP32[$6 >> 2] = $8;
  HEAP32[$6 + 4 >> 2] = $1;
  $6 = HEAP32[$7 + 52 >> 2];
  $1 = HEAP32[$7 + 48 >> 2];
  HEAP32[$5 + 56 >> 2] = $1;
  HEAP32[$5 + 60 >> 2] = $6;
  $1 = HEAP32[$9 + 12 >> 2];
  $7 = $1;
  $6 = HEAP32[$7 + 8 >> 2];
  $1 = HEAP32[$7 + 12 >> 2];
  HEAP32[$5 + 80 >> 2] = $6;
  HEAP32[$5 + 84 >> 2] = $1;
  $6 = HEAP32[$7 + 4 >> 2];
  $1 = HEAP32[$7 >> 2];
  HEAP32[$5 + 72 >> 2] = $1;
  HEAP32[$5 + 76 >> 2] = $6;
  $1 = HEAP32[$7 + 20 >> 2];
  $6 = HEAP32[$7 + 16 >> 2];
  HEAP32[$5 + 88 >> 2] = $6;
  HEAP32[$5 + 92 >> 2] = $1;
  $6 = HEAP32[$7 + 28 >> 2];
  $1 = HEAP32[$7 + 24 >> 2];
  HEAP32[$5 + 96 >> 2] = $1;
  HEAP32[$5 + 100 >> 2] = $6;
  $1 = HEAP32[$7 + 36 >> 2];
  $6 = HEAP32[$7 + 32 >> 2];
  HEAP32[$5 + 104 >> 2] = $6;
  HEAP32[$5 + 108 >> 2] = $1;
  $6 = HEAP32[$7 + 44 >> 2];
  $1 = HEAP32[$7 + 40 >> 2];
  HEAP32[$5 + 112 >> 2] = $1;
  HEAP32[$5 + 116 >> 2] = $6;
  $1 = HEAP32[$7 + 52 >> 2];
  $6 = HEAP32[$7 + 48 >> 2];
  HEAP32[$5 + 120 >> 2] = $6;
  HEAP32[$5 + 124 >> 2] = $1;
  $6 = HEAP32[$7 + 60 >> 2];
  $1 = HEAP32[$7 + 56 >> 2];
  HEAP32[$5 + 128 >> 2] = $1;
  HEAP32[$5 + 132 >> 2] = $6;
  SphereTriangleDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($2, $5 + 8 | 0, $4, HEAP32[$3 + 20 >> 2], HEAPU8[$0 + 16 | 0]);
  if (!HEAPU8[$0 + 8 | 0]) {
   break label$2;
  }
  $1 = HEAP32[$4 + 4 >> 2];
  if (!HEAP32[$1 + 844 >> 2]) {
   break label$2;
  }
  $0 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
  $2 = HEAP32[$1 + 836 >> 2];
  if (($0 | 0) != ($2 | 0)) {
   btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($1, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0, $0 + 4 | 0);
   break label$2;
  }
  btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($1, $2 + 4 | 0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0);
 }
 $0 = $5 + 160 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBvhTriangleMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const__MyNodeOverlapCallback__processNode_28int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 $5 = global$0 - 32 | 0;
 $7 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$0 + 60 >> 2] = HEAP32[$0 + 60 >> 2] + 1;
 $4 = HEAP32[$0 + 4 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $5 + 28 | 0, $5 + 24 | 0, $5 + 20 | 0, $5 + 16 | 0, $5 + 12 | 0, $5 + 8 | 0, $5 + 4 | 0, $5, $1);
 $8 = HEAP32[$5 + 12 >> 2] + Math_imul(HEAP32[$5 + 8 >> 2], $2) | 0;
 $16 = HEAP32[$5 + 20 >> 2];
 $4 = HEAP32[$0 + 4 >> 2];
 $14 = $4 + 12 | 0;
 $7 = HEAP32[$5 + 16 >> 2];
 $17 = HEAP32[$5 + 28 >> 2];
 $12 = $17;
 $6 = $7;
 $18 = HEAP32[$5 >> 2];
 $3 = $18 + -2 | 0;
 label$2 : {
  if ($3 >>> 0 <= 1) {
   $15 = HEAPU16[$8 + 4 >> 1];
   if (!($3 - 1)) {
    break label$2;
   }
   $15 = HEAP32[$8 + 8 >> 2];
   break label$2;
  }
  $15 = HEAPU8[$8 + 2 | 0];
 }
 $3 = $15;
 $3 = $12 + Math_imul($6, $3) | 0;
 label$5 : {
  if (!$16) {
   $6 = $3 + 8 | 0;
   $9 = HEAPF32[$4 + 12 >> 2];
   $10 = Math_fround(HEAPF32[$3 + 4 >> 2] * HEAPF32[$4 + 8 >> 2]);
   $11 = Math_fround(HEAPF32[$3 >> 2] * HEAPF32[$4 + 4 >> 2]);
   break label$5;
  }
  $9 = Math_fround(HEAPF64[$3 + 16 >> 3]);
  $6 = $14;
  $10 = Math_fround(HEAPF32[$4 + 8 >> 2] * Math_fround(HEAPF64[$3 + 8 >> 3]));
  $11 = Math_fround(HEAPF32[$4 + 4 >> 2] * Math_fround(HEAPF64[$3 >> 3]));
 }
 $13 = HEAPF32[$6 >> 2];
 HEAP32[$0 + 56 >> 2] = 0;
 HEAPF32[$0 + 48 >> 2] = $10;
 HEAPF32[$0 + 44 >> 2] = $11;
 HEAPF32[$0 + 52 >> 2] = $13 * $9;
 $6 = $7;
 $3 = $18 + -2 | 0;
 label$7 : {
  if ($3 >>> 0 <= 1) {
   $12 = HEAP32[$8 + 4 >> 2];
   if ($3 - 1) {
    break label$7;
   }
   $12 = HEAPU16[$8 + 2 >> 1];
   break label$7;
  }
  $12 = HEAPU8[$8 + 1 | 0];
 }
 $3 = $12;
 $3 = Math_imul($6, $3) + $17 | 0;
 label$10 : {
  if ($16) {
   $9 = Math_fround(HEAPF64[$3 + 16 >> 3]);
   $6 = $14;
   $10 = Math_fround(HEAPF32[$4 + 8 >> 2] * Math_fround(HEAPF64[$3 + 8 >> 3]));
   $11 = Math_fround(HEAPF32[$4 + 4 >> 2] * Math_fround(HEAPF64[$3 >> 3]));
   break label$10;
  }
  $6 = $3 + 8 | 0;
  $9 = HEAPF32[$4 + 12 >> 2];
  $10 = Math_fround(HEAPF32[$3 + 4 >> 2] * HEAPF32[$4 + 8 >> 2]);
  $11 = Math_fround(HEAPF32[$3 >> 2] * HEAPF32[$4 + 4 >> 2]);
 }
 $13 = HEAPF32[$6 >> 2];
 HEAP32[$0 + 40 >> 2] = 0;
 HEAPF32[$0 + 32 >> 2] = $10;
 HEAPF32[$0 + 28 >> 2] = $11;
 HEAPF32[$0 + 36 >> 2] = $13 * $9;
 $3 = $18 + -2 | 0;
 label$12 : {
  if ($3 >>> 0 <= 1) {
   $6 = HEAP32[$8 >> 2];
   if ($3 - 1) {
    break label$12;
   }
   $6 = HEAPU16[$8 >> 1];
   break label$12;
  }
  $6 = HEAPU8[$8 | 0];
 }
 $3 = $6;
 $7 = Math_imul($7, $3) + $17 | 0;
 label$15 : {
  if ($16) {
   $9 = Math_fround(HEAPF64[$7 + 16 >> 3]);
   $10 = Math_fround(HEAPF32[$4 + 8 >> 2] * Math_fround(HEAPF64[$7 + 8 >> 3]));
   $11 = Math_fround(HEAPF32[$4 + 4 >> 2] * Math_fround(HEAPF64[$7 >> 3]));
   break label$15;
  }
  $14 = $7 + 8 | 0;
  $9 = HEAPF32[$4 + 12 >> 2];
  $10 = Math_fround(HEAPF32[$7 + 4 >> 2] * HEAPF32[$4 + 8 >> 2]);
  $11 = Math_fround(HEAPF32[$7 >> 2] * HEAPF32[$4 + 4 >> 2]);
 }
 $13 = HEAPF32[$14 >> 2];
 HEAP32[$0 + 24 >> 2] = 0;
 HEAPF32[$0 + 16 >> 2] = $10;
 HEAPF32[$0 + 12 >> 2] = $11;
 HEAPF32[$0 + 20 >> 2] = $13 * $9;
 $4 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $0 + 12 | 0, $1, $2);
 $0 = HEAP32[$0 + 4 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1);
 $0 = $5 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuantizedBvh__mergeInternalNodeAabb_28int_2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3) {
 var $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 label$1 : {
  if (HEAPU8[$0 + 60 | 0]) {
   $7 = HEAPF32[$0 + 12 >> 2];
   $8 = HEAPF32[$0 + 44 >> 2];
   $4 = Math_fround(Math_fround(HEAPF32[$2 + 8 >> 2] - $7) * $8);
   label$3 : {
    if ($4 < Math_fround(4294967296) & $4 >= Math_fround(0)) {
     $6 = ~~$4 >>> 0;
     break label$3;
    }
    $6 = 0;
   }
   $9 = $6;
   $10 = HEAPF32[$0 + 8 >> 2];
   $11 = HEAPF32[$0 + 40 >> 2];
   $4 = Math_fround(Math_fround(HEAPF32[$2 + 4 >> 2] - $10) * $11);
   label$5 : {
    if ($4 < Math_fround(4294967296) & $4 >= Math_fround(0)) {
     $12 = ~~$4 >>> 0;
     break label$5;
    }
    $12 = 0;
   }
   $4 = Math_fround(Math_fround($8 * Math_fround(HEAPF32[$3 + 8 >> 2] - $7)) + Math_fround(1));
   label$7 : {
    if ($4 < Math_fround(4294967296) & $4 >= Math_fround(0)) {
     $13 = ~~$4 >>> 0;
     break label$7;
    }
    $13 = 0;
   }
   $4 = Math_fround(Math_fround($11 * Math_fround(HEAPF32[$3 + 4 >> 2] - $10)) + Math_fround(1));
   label$9 : {
    if ($4 < Math_fround(4294967296) & $4 >= Math_fround(0)) {
     $6 = ~~$4 >>> 0;
     break label$9;
    }
    $6 = 0;
   }
   $5 = HEAP32[$0 + 136 >> 2];
   $14 = $5 + ($1 << 4) | 0;
   $16 = HEAPU16[$14 >> 1];
   $7 = HEAPF32[$0 + 4 >> 2];
   $8 = HEAPF32[$0 + 36 >> 2];
   $4 = Math_fround(Math_fround(HEAPF32[$2 >> 2] - $7) * $8);
   label$11 : {
    if ($4 < Math_fround(4294967296) & $4 >= Math_fround(0)) {
     $0 = ~~$4 >>> 0;
     break label$11;
    }
    $0 = 0;
   }
   $15 = $0 & 65534;
   $0 = $16 >>> 0 <= $15 >>> 0;
   $4 = Math_fround(Math_fround($8 * Math_fround(HEAPF32[$3 >> 2] - $7)) + Math_fround(1));
   label$13 : {
    if ($4 < Math_fround(4294967296) & $4 >= Math_fround(0)) {
     $2 = ~~$4 >>> 0;
     break label$13;
    }
    $2 = 0;
   }
   $2 = $2 | 1;
   if (!$0) {
    HEAP16[$14 >> 1] = $15;
   }
   $3 = $12 & 65534;
   $0 = ($1 << 4) + $5 | 0;
   if (HEAPU16[$0 + 6 >> 1] < $2 >>> 0) {
    HEAP16[$0 + 6 >> 1] = $2;
   }
   $2 = $6 | 1;
   if (HEAPU16[$0 + 2 >> 1] > $3 >>> 0) {
    HEAP16[$0 + 2 >> 1] = $3;
   }
   $0 = $9 & 65534;
   $3 = ($1 << 4) + $5 | 0;
   $6 = $3;
   $9 = $3 + 8 | 0;
   if (HEAPU16[$9 >> 1] < $2 >>> 0) {
    HEAP16[$6 + 8 >> 1] = $2;
   }
   $2 = $13 | 1;
   if (HEAPU16[$3 + 4 >> 1] > $0 >>> 0) {
    HEAP16[$3 + 4 >> 1] = $0;
   }
   $1 = ($1 << 4) + $5 | 0;
   $0 = $1 + 10 | 0;
   if (HEAPU16[$0 >> 1] >= $2 >>> 0) {
    break label$1;
   }
   HEAP16[$1 + 10 >> 1] = $2;
   return;
  }
  $4 = HEAPF32[$2 >> 2];
  $0 = HEAP32[$0 + 96 >> 2];
  $5 = $0 + ($1 << 6) | 0;
  if (!!($4 < HEAPF32[$5 >> 2])) {
   HEAPF32[$5 >> 2] = $4;
  }
  $4 = HEAPF32[$2 + 4 >> 2];
  if (!!($4 < HEAPF32[$5 + 4 >> 2])) {
   HEAPF32[$5 + 4 >> 2] = $4;
  }
  $4 = HEAPF32[$2 + 8 >> 2];
  $5 = ($1 << 6) + $0 | 0;
  if (!!($4 < HEAPF32[$5 + 8 >> 2])) {
   HEAPF32[$5 + 8 >> 2] = $4;
  }
  $4 = HEAPF32[$2 + 12 >> 2];
  if (!!($4 < HEAPF32[$5 + 12 >> 2])) {
   HEAPF32[$5 + 12 >> 2] = $4;
  }
  $2 = ($1 << 6) + $0 | 0;
  $4 = HEAPF32[$3 >> 2];
  if (!!(HEAPF32[$2 + 16 >> 2] < $4)) {
   HEAPF32[$2 + 16 >> 2] = $4;
  }
  $6 = $2;
  $2 = $2 + 20 | 0;
  $4 = HEAPF32[$3 + 4 >> 2];
  if (!!(HEAPF32[$2 >> 2] < $4)) {
   HEAPF32[$6 + 20 >> 2] = $4;
  }
  $0 = ($1 << 6) + $0 | 0;
  $2 = $0;
  $1 = $0 + 24 | 0;
  $4 = HEAPF32[$3 + 8 >> 2];
  if (!!(HEAPF32[$1 >> 2] < $4)) {
   HEAPF32[$2 + 24 >> 2] = $4;
  }
  $1 = $0;
  $0 = $0 + 28 | 0;
  $4 = HEAPF32[$3 + 12 >> 2];
  if (!(HEAPF32[$0 >> 2] < $4)) {
   break label$1;
  }
  HEAPF32[$1 + 28 >> 2] = $4;
 }
}
function btGeneric6DofSpring2Constraint__getInfo1_28btTypedConstraint__btConstraintInfo1__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 btGeneric6DofSpring2Constraint__calculateTransforms_28btTransform_20const__2c_20btTransform_20const__29($0, HEAP32[$0 + 28 >> 2] + 4 | 0, HEAP32[$0 + 32 >> 2] + 4 | 0);
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 label$1 : {
  label$2 : {
   label$3 : {
    $2 = HEAP32[$0 + 956 >> 2];
    if ($2 >>> 0 > 4) {
     break label$3;
    }
    $3 = 2;
    switch ($2 - 1 | 0) {
    case 3:
     break label$2;
    case 0:
    case 1:
    case 2:
     break label$3;
    default:
     break label$1;
    }
   }
   $3 = 1;
  }
  HEAP32[$1 >> 2] = $3;
  $2 = $3;
 }
 if (HEAPU8[$0 + 792 | 0]) {
  $2 = $2 + 1 | 0;
  HEAP32[$1 >> 2] = $2;
 }
 if (HEAPU8[$0 + 798 | 0]) {
  $2 = $2 + 1 | 0;
  HEAP32[$1 >> 2] = $2;
 }
 $4 = $1;
 label$6 : {
  label$7 : {
   label$8 : {
    $3 = HEAP32[$0 + 960 >> 2];
    if ($3 >>> 0 > 4) {
     break label$8;
    }
    label$9 : {
     switch ($3 - 1 | 0) {
     case 0:
     case 1:
     case 2:
      break label$8;
     case 3:
      break label$9;
     default:
      break label$6;
     }
    }
    $2 = $2 + 2 | 0;
    break label$7;
   }
   $2 = $2 + 1 | 0;
  }
  HEAP32[$4 >> 2] = $2;
 }
 if (HEAPU8[$0 + 793 | 0]) {
  $2 = $2 + 1 | 0;
  HEAP32[$1 >> 2] = $2;
 }
 if (HEAPU8[$0 + 799 | 0]) {
  $2 = $2 + 1 | 0;
  HEAP32[$1 >> 2] = $2;
 }
 $4 = $1;
 label$12 : {
  label$13 : {
   label$14 : {
    $3 = HEAP32[$0 + 964 >> 2];
    if ($3 >>> 0 > 4) {
     break label$14;
    }
    label$15 : {
     switch ($3 - 1 | 0) {
     case 0:
     case 1:
     case 2:
      break label$14;
     case 3:
      break label$15;
     default:
      break label$12;
     }
    }
    $2 = $2 + 2 | 0;
    break label$13;
   }
   $2 = $2 + 1 | 0;
  }
  HEAP32[$4 >> 2] = $2;
 }
 if (HEAPU8[$0 + 794 | 0]) {
  $2 = $2 + 1 | 0;
  HEAP32[$1 >> 2] = $2;
 }
 if (HEAPU8[$0 + 800 | 0]) {
  HEAP32[$1 >> 2] = $2 + 1;
 }
 btGeneric6DofSpring2Constraint__testAngularLimitMotor_28int_29($0, 0);
 label$18 : {
  label$19 : {
   label$20 : {
    $3 = HEAP32[$0 + 1052 >> 2];
    if ($3 >>> 0 > 4) {
     break label$20;
    }
    $2 = 2;
    switch ($3 - 1 | 0) {
    case 3:
     break label$19;
    case 0:
    case 1:
    case 2:
     break label$20;
    default:
     break label$18;
    }
   }
   $2 = 1;
  }
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + $2;
 }
 if (HEAPU8[$0 + 996 | 0]) {
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1;
 }
 if (HEAPU8[$0 + 1016 | 0]) {
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1;
 }
 btGeneric6DofSpring2Constraint__testAngularLimitMotor_28int_29($0, 1);
 label$23 : {
  label$24 : {
   label$25 : {
    $3 = HEAP32[$0 + 1140 >> 2];
    if ($3 >>> 0 > 4) {
     break label$25;
    }
    $2 = 2;
    switch ($3 - 1 | 0) {
    case 3:
     break label$24;
    case 0:
    case 1:
    case 2:
     break label$25;
    default:
     break label$23;
    }
   }
   $2 = 1;
  }
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + $2;
 }
 if (HEAPU8[$0 + 1084 | 0]) {
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1;
 }
 if (HEAPU8[$0 + 1104 | 0]) {
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1;
 }
 $2 = 2;
 btGeneric6DofSpring2Constraint__testAngularLimitMotor_28int_29($0, 2);
 label$28 : {
  label$29 : {
   label$30 : {
    $3 = HEAP32[$0 + 1228 >> 2];
    if ($3 >>> 0 > 4) {
     break label$30;
    }
    switch ($3 - 1 | 0) {
    case 3:
     break label$29;
    case 0:
    case 1:
    case 2:
     break label$30;
    default:
     break label$28;
    }
   }
   $2 = 1;
  }
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + $2;
 }
 if (HEAPU8[$0 + 1172 | 0]) {
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1;
 }
 if (HEAPU8[$0 + 1192 | 0]) {
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1;
 }
}
function btDiscreteDynamicsWorld__integrateTransforms_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0;
 $2 = global$0 - 80 | 0;
 $12 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $12;
 $18 = CProfileSample__CProfileSample_28char_20const__29($2 + 72 | 0, 2757);
 $3 = HEAP32[$0 + 248 >> 2];
 if (($3 | 0) >= 1) {
  btDiscreteDynamicsWorld__integrateTransformsInternal_28btRigidBody___2c_20int_2c_20float_29($0, HEAP32[$0 + 256 >> 2], $3, $1);
 }
 if (HEAPU8[$0 + 291 | 0]) {
  $12 = CProfileSample__CProfileSample_28char_20const__29($2 - -64 | 0, 2777);
  $3 = HEAP32[$0 + 324 >> 2];
  if (($3 | 0) >= 1) {
   while (1) {
    $6 = HEAP32[HEAP32[$0 + 332 >> 2] + ($13 << 2) >> 2];
    if (HEAP32[$6 + 844 >> 2] >= 1) {
     $3 = HEAP32[$6 + 840 >> 2];
     $7 = $3 & HEAP32[$3 + 252 >> 2] << 30 >> 31;
     $3 = HEAP32[$6 + 836 >> 2];
     $5 = $3 & HEAP32[$3 + 252 >> 2] << 30 >> 31;
     $11 = 0;
     while (1) {
      $1 = btManifoldResult__calculateCombinedRestitution_28btCollisionObject_20const__2c_20btCollisionObject_20const__29($5, $7);
      label$8 : {
       if (!($1 > Math_fround(0))) {
        break label$8;
       }
       $3 = Math_imul($11, 208) + $6 | 0;
       $4 = HEAPF32[$3 + 136 >> 2];
       if ($4 == Math_fround(0)) {
        break label$8;
       }
       $8 = HEAPF32[$3 + 68 >> 2];
       $9 = HEAPF32[$3 + 72 >> 2];
       $10 = HEAPF32[$3 + 76 >> 2];
       HEAP32[$2 + 60 >> 2] = 0;
       $10 = Math_fround($1 * Math_fround($4 * Math_fround(-$10)));
       HEAPF32[$2 + 56 >> 2] = $10;
       $9 = Math_fround($1 * Math_fround($4 * Math_fround(-$9)));
       HEAPF32[$2 + 52 >> 2] = $9;
       $1 = Math_fround($1 * Math_fround($4 * Math_fround(-$8)));
       HEAPF32[$2 + 48 >> 2] = $1;
       $4 = HEAPF32[$3 + 52 >> 2];
       $8 = HEAPF32[$3 + 56 >> 2];
       $14 = HEAPF32[$3 + 60 >> 2];
       $15 = HEAPF32[$5 + 52 >> 2];
       $16 = HEAPF32[$5 + 56 >> 2];
       $17 = HEAPF32[$5 + 60 >> 2];
       HEAP32[$2 + 44 >> 2] = 0;
       HEAPF32[$2 + 40 >> 2] = $14 - $17;
       HEAPF32[$2 + 36 >> 2] = $8 - $16;
       HEAPF32[$2 + 32 >> 2] = $4 - $15;
       $4 = HEAPF32[$3 + 36 >> 2];
       $8 = HEAPF32[$3 + 40 >> 2];
       $14 = HEAPF32[$3 + 44 >> 2];
       $15 = HEAPF32[$7 + 52 >> 2];
       $16 = HEAPF32[$7 + 56 >> 2];
       $17 = HEAPF32[$7 + 60 >> 2];
       HEAP32[$2 + 28 >> 2] = 0;
       HEAPF32[$2 + 24 >> 2] = $14 - $17;
       HEAPF32[$2 + 20 >> 2] = $8 - $16;
       HEAPF32[$2 + 16 >> 2] = $4 - $15;
       if ($5) {
        btRigidBody__applyImpulse_28btVector3_20const__2c_20btVector3_20const__29($5, $2 + 48 | 0, $2 + 32 | 0);
        $10 = HEAPF32[$2 + 56 >> 2];
        $9 = HEAPF32[$2 + 52 >> 2];
        $1 = HEAPF32[$2 + 48 >> 2];
       }
       HEAP32[$2 + 12 >> 2] = 0;
       HEAPF32[$2 + 8 >> 2] = -$10;
       HEAPF32[$2 + 4 >> 2] = -$9;
       HEAPF32[$2 >> 2] = -$1;
       btRigidBody__applyImpulse_28btVector3_20const__2c_20btVector3_20const__29($7, $2, $2 + 16 | 0);
      }
      $11 = $11 + 1 | 0;
      if (($11 | 0) < HEAP32[$6 + 844 >> 2]) {
       continue;
      }
      break;
     }
     $3 = HEAP32[$0 + 324 >> 2];
    }
    $13 = $13 + 1 | 0;
    if (($13 | 0) < ($3 | 0)) {
     continue;
    }
    break;
   }
  }
  CProfileSample___CProfileSample_28_29($12);
 }
 CProfileSample___CProfileSample_28_29($18);
 $0 = $2 + 80 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function gResolveSplitPenetrationImpulse_scalar_reference_28btSolverBody__2c_20btSolverBody__2c_20btSolverConstraint_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0;
 $4 = HEAPF32[$2 + 128 >> 2];
 label$1 : {
  if ($4 == Math_fround(0)) {
   break label$1;
  }
  HEAP32[5382] = HEAP32[5382] + 1;
  $5 = HEAPF32[$2 + 96 >> 2];
  $3 = Math_fround($4 - Math_fround($5 * HEAPF32[$2 + 116 >> 2]));
  $7 = HEAPF32[$2 + 16 >> 2];
  $8 = HEAPF32[$2 + 20 >> 2];
  $9 = HEAPF32[$2 + 24 >> 2];
  $4 = HEAPF32[$2 + 108 >> 2];
  $4 = Math_fround(Math_fround($3 - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($7 * HEAPF32[$0 + 144 >> 2]) + Math_fround($8 * HEAPF32[$0 + 148 >> 2])) + Math_fround($9 * HEAPF32[$0 + 152 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 >> 2] * HEAPF32[$0 + 160 >> 2]) + Math_fround(HEAPF32[$2 + 4 >> 2] * HEAPF32[$0 + 164 >> 2])) + Math_fround(HEAPF32[$2 + 8 >> 2] * HEAPF32[$0 + 168 >> 2]))) * $4)) - Math_fround($4 * Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 48 >> 2] * HEAPF32[$1 + 144 >> 2]) + Math_fround(HEAPF32[$2 + 52 >> 2] * HEAPF32[$1 + 148 >> 2])) + Math_fround(HEAPF32[$2 + 56 >> 2] * HEAPF32[$1 + 152 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 32 >> 2] * HEAPF32[$1 + 160 >> 2]) + Math_fround(HEAPF32[$2 + 36 >> 2] * HEAPF32[$1 + 164 >> 2])) + Math_fround(HEAPF32[$2 + 40 >> 2] * HEAPF32[$1 + 168 >> 2])))));
  $6 = Math_fround($5 + $4);
  $3 = HEAPF32[$2 + 120 >> 2];
  $10 = $6 < $3;
  HEAPF32[$2 + 96 >> 2] = $10 ? $3 : $6;
  $3 = $10 ? Math_fround($3 - $5) : $4;
  if (HEAP32[$0 + 240 >> 2]) {
   HEAPF32[$0 + 144 >> 2] = Math_fround(HEAPF32[$0 + 112 >> 2] * Math_fround($3 * Math_fround($7 * HEAPF32[$0 + 128 >> 2]))) + HEAPF32[$0 + 144 >> 2];
   HEAPF32[$0 + 148 >> 2] = Math_fround(Math_fround($3 * Math_fround($8 * HEAPF32[$0 + 132 >> 2])) * HEAPF32[$0 + 116 >> 2]) + HEAPF32[$0 + 148 >> 2];
   HEAPF32[$0 + 152 >> 2] = Math_fround(Math_fround($3 * Math_fround($9 * HEAPF32[$0 + 136 >> 2])) * HEAPF32[$0 + 120 >> 2]) + HEAPF32[$0 + 152 >> 2];
   $5 = HEAPF32[$2 + 72 >> 2];
   $4 = HEAPF32[$2 + 68 >> 2];
   HEAPF32[$0 + 160 >> 2] = Math_fround(Math_fround($3 * HEAPF32[$0 + 96 >> 2]) * HEAPF32[$2 + 64 >> 2]) + HEAPF32[$0 + 160 >> 2];
   $6 = HEAPF32[$0 + 104 >> 2];
   HEAPF32[$0 + 164 >> 2] = Math_fround($4 * Math_fround($3 * HEAPF32[$0 + 100 >> 2])) + HEAPF32[$0 + 164 >> 2];
   HEAPF32[$0 + 168 >> 2] = Math_fround($5 * Math_fround($3 * $6)) + HEAPF32[$0 + 168 >> 2];
  }
  if (!HEAP32[$1 + 240 >> 2]) {
   break label$1;
  }
  $5 = HEAPF32[$2 + 56 >> 2];
  $4 = HEAPF32[$2 + 52 >> 2];
  HEAPF32[$1 + 144 >> 2] = Math_fround(HEAPF32[$1 + 112 >> 2] * Math_fround($3 * Math_fround(HEAPF32[$2 + 48 >> 2] * HEAPF32[$1 + 128 >> 2]))) + HEAPF32[$1 + 144 >> 2];
  HEAPF32[$1 + 148 >> 2] = Math_fround(Math_fround($3 * Math_fround($4 * HEAPF32[$1 + 132 >> 2])) * HEAPF32[$1 + 116 >> 2]) + HEAPF32[$1 + 148 >> 2];
  HEAPF32[$1 + 152 >> 2] = Math_fround(Math_fround($3 * Math_fround($5 * HEAPF32[$1 + 136 >> 2])) * HEAPF32[$1 + 120 >> 2]) + HEAPF32[$1 + 152 >> 2];
  $5 = HEAPF32[$2 + 88 >> 2];
  $4 = HEAPF32[$2 + 84 >> 2];
  HEAPF32[$1 + 160 >> 2] = Math_fround(Math_fround($3 * HEAPF32[$1 + 96 >> 2]) * HEAPF32[$2 + 80 >> 2]) + HEAPF32[$1 + 160 >> 2];
  $6 = HEAPF32[$1 + 104 >> 2];
  HEAPF32[$1 + 164 >> 2] = Math_fround($4 * Math_fround($3 * HEAPF32[$1 + 100 >> 2])) + HEAPF32[$1 + 164 >> 2];
  HEAPF32[$1 + 168 >> 2] = Math_fround($5 * Math_fround($3 * $6)) + HEAPF32[$1 + 168 >> 2];
 }
 return Math_fround($3);
}
function btDiscreteDynamicsWorld__calculateSimulationIslands_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $8 = global$0 - 16 | 0;
 $1 = $8;
 if ($8 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 $10 = CProfileSample__CProfileSample_28char_20const__29($8 + 8 | 0, 2621);
 $1 = HEAP32[$0 + 220 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $0, HEAP32[$0 + 24 >> 2]);
 $7 = HEAP32[$0 + 324 >> 2];
 if (($7 | 0) >= 1) {
  $9 = HEAP32[$0 + 332 >> 2];
  while (1) {
   $1 = HEAP32[($6 << 2) + $9 >> 2];
   $2 = HEAP32[$1 + 836 >> 2];
   label$4 : {
    if (!$2) {
     break label$4;
    }
    $1 = HEAP32[$1 + 840 >> 2];
    if (!$1 | HEAP32[$2 + 204 >> 2] & 3 | HEAPU8[$1 + 204 | 0] & 3) {
     break label$4;
    }
    $3 = HEAP32[$1 + 208 >> 2];
    $1 = HEAP32[HEAP32[$0 + 220 >> 2] + 16 >> 2];
    $2 = HEAP32[$2 + 208 >> 2];
    $5 = $1 + ($2 << 3) | 0;
    $4 = HEAP32[$5 >> 2];
    if (($2 | 0) != ($4 | 0)) {
     while (1) {
      $2 = ($4 << 3) + $1 | 0;
      HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
      $2 = HEAP32[$2 >> 2];
      $5 = ($2 << 3) + $1 | 0;
      $4 = HEAP32[$5 >> 2];
      if (($2 | 0) != ($4 | 0)) {
       continue;
      }
      break;
     }
    }
    $5 = ($3 << 3) + $1 | 0;
    $4 = HEAP32[$5 >> 2];
    if (($4 | 0) != ($3 | 0)) {
     while (1) {
      $3 = ($4 << 3) + $1 | 0;
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      $3 = HEAP32[$3 >> 2];
      $5 = ($3 << 3) + $1 | 0;
      $4 = HEAP32[$5 >> 2];
      if (($3 | 0) != ($4 | 0)) {
       continue;
      }
      break;
     }
    }
    if (($2 | 0) == ($3 | 0)) {
     break label$4;
    }
    $2 = ($2 << 3) + $1 | 0;
    HEAP32[$2 >> 2] = $3;
    $1 = ($3 << 3) + $1 | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + HEAP32[$2 + 4 >> 2];
   }
   $6 = $6 + 1 | 0;
   if (($7 | 0) != ($6 | 0)) {
    continue;
   }
   break;
  }
 }
 $7 = HEAP32[$0 + 228 >> 2];
 if (($7 | 0) >= 1) {
  $9 = HEAP32[$0 + 236 >> 2];
  $5 = 0;
  while (1) {
   $1 = HEAP32[($5 << 2) + $9 >> 2];
   label$11 : {
    if (!HEAPU8[$1 + 20 | 0]) {
     break label$11;
    }
    $2 = HEAP32[$1 + 28 >> 2];
    if (HEAPU8[$2 + 204 | 0] & 3) {
     break label$11;
    }
    $1 = HEAP32[$1 + 32 >> 2];
    if (HEAPU8[$1 + 204 | 0] & 3) {
     break label$11;
    }
    $3 = HEAP32[$1 + 208 >> 2];
    $1 = HEAP32[HEAP32[$0 + 220 >> 2] + 16 >> 2];
    $2 = HEAP32[$2 + 208 >> 2];
    $4 = $1 + ($2 << 3) | 0;
    $6 = HEAP32[$4 >> 2];
    if (($2 | 0) != ($6 | 0)) {
     while (1) {
      $2 = ($6 << 3) + $1 | 0;
      HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
      $2 = HEAP32[$2 >> 2];
      $4 = ($2 << 3) + $1 | 0;
      $6 = HEAP32[$4 >> 2];
      if (($2 | 0) != ($6 | 0)) {
       continue;
      }
      break;
     }
    }
    $4 = ($3 << 3) + $1 | 0;
    $6 = HEAP32[$4 >> 2];
    if (($6 | 0) != ($3 | 0)) {
     while (1) {
      $3 = ($6 << 3) + $1 | 0;
      HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
      $3 = HEAP32[$3 >> 2];
      $4 = ($3 << 3) + $1 | 0;
      $6 = HEAP32[$4 >> 2];
      if (($3 | 0) != ($6 | 0)) {
       continue;
      }
      break;
     }
    }
    if (($2 | 0) == ($3 | 0)) {
     break label$11;
    }
    $2 = ($2 << 3) + $1 | 0;
    HEAP32[$2 >> 2] = $3;
    $1 = ($3 << 3) + $1 | 0;
    HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + HEAP32[$2 + 4 >> 2];
   }
   $5 = $5 + 1 | 0;
   if (($7 | 0) != ($5 | 0)) {
    continue;
   }
   break;
  }
 }
 $1 = HEAP32[$0 + 220 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $0);
 CProfileSample___CProfileSample_28_29($10);
 $0 = $8 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHashMap_btHashPtr_2c_20btCollisionShape____insert_28btHashPtr_20const__2c_20btCollisionShape__20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 label$1 : {
  $9 = HEAP32[$0 + 48 >> 2];
  $6 = HEAP32[$1 >> 2];
  $3 = $6 + ($6 << 15 ^ -1) | 0;
  $3 = Math_imul($3 ^ $3 >>> 10, 9);
  $3 = $3 ^ $3 >>> 6;
  $3 = $3 + ($3 << 11 ^ -1) | 0;
  $10 = $9 + -1 & ($3 ^ $3 >>> 16);
  label$2 : {
   if ($10 >>> 0 >= HEAPU32[$0 + 4 >> 2]) {
    break label$2;
   }
   $3 = HEAP32[HEAP32[$0 + 12 >> 2] + ($10 << 2) >> 2];
   if (($3 | 0) == -1) {
    break label$2;
   }
   $4 = HEAP32[$0 + 72 >> 2];
   while (1) {
    if (HEAP32[($3 << 3) + $4 >> 2] == ($6 | 0)) {
     break label$1;
    }
    $3 = HEAP32[HEAP32[$0 + 32 >> 2] + ($3 << 2) >> 2];
    if (($3 | 0) != -1) {
     continue;
    }
    break;
   }
  }
  $11 = HEAP32[$0 + 44 >> 2];
  $4 = $11;
  label$4 : {
   if (($9 | 0) != ($4 | 0)) {
    break label$4;
   }
   $4 = $9;
   $5 = $4 ? $4 << 1 : 1;
   if (($4 | 0) >= ($5 | 0)) {
    break label$4;
   }
   if ($5) {
    $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 2, 16);
    $4 = HEAP32[$0 + 44 >> 2];
   } else {
    $4 = $9;
   }
   if (($4 | 0) >= 1) {
    $3 = 0;
    while (1) {
     $6 = $3 << 2;
     HEAP32[$6 + $8 >> 2] = HEAP32[HEAP32[$0 + 52 >> 2] + $6 >> 2];
     $3 = $3 + 1 | 0;
     if (($4 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
   }
   $3 = HEAP32[$0 + 52 >> 2];
   if ($3) {
    if (HEAPU8[$0 + 56 | 0]) {
     btAlignedFreeInternal_28void__29($3);
     $4 = HEAP32[$0 + 44 >> 2];
    }
    HEAP32[$0 + 52 >> 2] = 0;
   }
   HEAP32[$0 + 52 >> 2] = $8;
   HEAP32[$0 + 48 >> 2] = $5;
   HEAP8[$0 + 56 | 0] = 1;
  }
  HEAP32[HEAP32[$0 + 52 >> 2] + ($4 << 2) >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 44 >> 2] = $4 + 1;
  $4 = HEAP32[$0 - -64 >> 2];
  label$11 : {
   if (($4 | 0) != HEAP32[$0 + 68 >> 2]) {
    break label$11;
   }
   $2 = $4 ? $4 << 1 : 1;
   if (($4 | 0) >= ($2 | 0)) {
    break label$11;
   }
   label$12 : {
    if (!$2) {
     $8 = 0;
     break label$12;
    }
    $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($2 << 3, 16);
    $4 = HEAP32[$0 + 64 >> 2];
   }
   if (($4 | 0) >= 1) {
    $3 = 0;
    while (1) {
     $6 = $3 << 3;
     $7 = $6 + HEAP32[$0 + 72 >> 2] | 0;
     $5 = HEAP32[$7 >> 2];
     $7 = HEAP32[$7 + 4 >> 2];
     $12 = $5;
     $5 = $6 + $8 | 0;
     HEAP32[$5 >> 2] = $12;
     HEAP32[$5 + 4 >> 2] = $7;
     $3 = $3 + 1 | 0;
     if (($4 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
   }
   $3 = HEAP32[$0 + 72 >> 2];
   if ($3) {
    if (HEAPU8[$0 + 76 | 0]) {
     btAlignedFreeInternal_28void__29($3);
    }
    HEAP32[$0 + 72 >> 2] = 0;
   }
   HEAP32[$0 + 72 >> 2] = $8;
   HEAP32[$0 + 68 >> 2] = $2;
   HEAP8[$0 + 76 | 0] = 1;
   $4 = HEAP32[$0 + 64 >> 2];
  }
  $5 = HEAP32[$1 + 4 >> 2];
  $7 = HEAP32[$1 >> 2];
  $2 = $7;
  $7 = HEAP32[$0 + 72 >> 2] + ($4 << 3) | 0;
  HEAP32[$7 >> 2] = $2;
  HEAP32[$7 + 4 >> 2] = $5;
  HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 64 >> 2] + 1;
  if (($9 | 0) < HEAP32[$0 + 48 >> 2]) {
   btHashMap_btHashPtr_2c_20btCollisionShape____growTables_28btHashPtr_20const__29($0, $1);
   $3 = HEAP32[$1 >> 2];
   $3 = $3 + ($3 << 15 ^ -1) | 0;
   $3 = Math_imul($3 ^ $3 >>> 10, 9);
   $3 = $3 ^ $3 >>> 6;
   $3 = $3 + ($3 << 11 ^ -1) | 0;
   $10 = HEAP32[$0 + 48 >> 2] + -1 & ($3 ^ $3 >>> 16);
  }
  $1 = HEAP32[$0 + 32 >> 2] + ($11 << 2) | 0;
  $0 = HEAP32[$0 + 12 >> 2] + ($10 << 2) | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = $11;
  return;
 }
 HEAP32[HEAP32[$0 + 52 >> 2] + ($3 << 2) >> 2] = HEAP32[$2 >> 2];
}
function btCollisionWorld__updateSingleAabb_28btCollisionObject__29($0, $1) {
 var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0);
 $2 = global$0 + -64 | 0;
 $5 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $5 = HEAP32[$1 + 192 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, $1 + 4 | 0, $2 + 48 | 0, $2 + 32 | 0);
 $3 = HEAPF32[4966];
 $10 = Math_fround(HEAPF32[$2 + 48 >> 2] - $3);
 HEAPF32[$2 + 48 >> 2] = $10;
 $6 = Math_fround(HEAPF32[$2 + 52 >> 2] - $3);
 HEAPF32[$2 + 52 >> 2] = $6;
 $7 = Math_fround(HEAPF32[$2 + 56 >> 2] - $3);
 HEAPF32[$2 + 56 >> 2] = $7;
 $4 = Math_fround($3 + HEAPF32[$2 + 32 >> 2]);
 HEAPF32[$2 + 32 >> 2] = $4;
 $8 = Math_fround($3 + HEAPF32[$2 + 36 >> 2]);
 HEAPF32[$2 + 36 >> 2] = $8;
 $9 = Math_fround($3 + HEAPF32[$2 + 40 >> 2]);
 HEAPF32[$2 + 40 >> 2] = $9;
 label$2 : {
  if (HEAPU8[$1 + 204 | 0] & 3 | (!HEAPU8[$0 + 44 | 0] | HEAP32[$1 + 252 >> 2] != 2)) {
   break label$2;
  }
  $5 = HEAP32[$1 + 192 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, $1 + 68 | 0, $2 + 16 | 0, $2);
  $6 = Math_fround(HEAPF32[$2 + 16 >> 2] - $3);
  HEAPF32[$2 + 16 >> 2] = $6;
  $7 = Math_fround(HEAPF32[$2 + 20 >> 2] - $3);
  HEAPF32[$2 + 20 >> 2] = $7;
  $4 = Math_fround(HEAPF32[$2 + 24 >> 2] - $3);
  HEAPF32[$2 + 24 >> 2] = $4;
  $8 = Math_fround($3 + HEAPF32[$2 >> 2]);
  HEAPF32[$2 >> 2] = $8;
  $9 = Math_fround($3 + HEAPF32[$2 + 4 >> 2]);
  HEAPF32[$2 + 4 >> 2] = $9;
  $3 = Math_fround($3 + HEAPF32[$2 + 8 >> 2]);
  HEAPF32[$2 + 8 >> 2] = $3;
  $10 = HEAPF32[$2 + 48 >> 2];
  if (!!($6 < $10)) {
   HEAPF32[$2 + 48 >> 2] = $6;
   $10 = $6;
  }
  $6 = HEAPF32[$2 + 52 >> 2];
  if (!!($7 < $6)) {
   HEAPF32[$2 + 52 >> 2] = $7;
   $6 = $7;
  }
  $7 = HEAPF32[$2 + 56 >> 2];
  if (!!($4 < $7)) {
   HEAPF32[$2 + 56 >> 2] = $4;
   $7 = $4;
  }
  $4 = HEAPF32[$2 + 28 >> 2];
  if (!!($4 < HEAPF32[$2 + 60 >> 2])) {
   HEAPF32[$2 + 60 >> 2] = $4;
  }
  $4 = HEAPF32[$2 + 32 >> 2];
  if (!!($4 < $8)) {
   HEAPF32[$2 + 32 >> 2] = $8;
   $4 = $8;
  }
  $8 = HEAPF32[$2 + 36 >> 2];
  if (!!($8 < $9)) {
   HEAPF32[$2 + 36 >> 2] = $9;
   $8 = $9;
  }
  $9 = HEAPF32[$2 + 40 >> 2];
  if (!!($9 < $3)) {
   HEAPF32[$2 + 40 >> 2] = $3;
   $9 = $3;
  }
  $3 = HEAPF32[$2 + 12 >> 2];
  if (!(HEAPF32[$2 + 44 >> 2] < $3)) {
   break label$2;
  }
  HEAPF32[$2 + 44 >> 2] = $3;
 }
 $5 = HEAP32[$0 + 68 >> 2];
 label$10 : {
  label$11 : {
   if (!(HEAP8[$1 + 204 | 0] & 1)) {
    $3 = Math_fround($4 - $10);
    $4 = Math_fround($3 * $3);
    $3 = Math_fround($8 - $6);
    $4 = Math_fround($4 + Math_fround($3 * $3));
    $3 = Math_fround($9 - $7);
    if (!(Math_fround($4 + Math_fround($3 * $3)) < Math_fround(999999995904))) {
     break label$11;
    }
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 16 >> 2]]($5, HEAP32[$1 + 188 >> 2], $2 + 48 | 0, $2 + 32 | 0, HEAP32[$0 + 24 >> 2]);
   break label$10;
  }
  btCollisionObject__setActivationState_28int_29_20const($1, 5);
  if (HEAPU8[22568]) {
   break label$10;
  }
  $1 = HEAP32[$0 + 72 >> 2];
  if (!$1) {
   break label$10;
  }
  HEAP8[22568] = 1;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 44 >> 2]]($1, 7600);
  $1 = HEAP32[$0 + 72 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 44 >> 2]]($1, 7649);
  $1 = HEAP32[$0 + 72 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 44 >> 2]]($1, 7717);
  $1 = HEAP32[$0 + 72 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 44 >> 2]]($1, 7782);
 }
 $0 = $2 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBoxBoxCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $5 = global$0 - 160 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 $6 = HEAP32[$0 + 12 >> 2];
 label$2 : {
  if (!$6) {
   break label$2;
  }
  $8 = HEAP32[$2 + 4 >> 2];
  $9 = HEAP32[$1 + 4 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  HEAP32[$5 + 152 >> 2] = 1566444395;
  $1 = HEAP32[$1 + 12 >> 2];
  $7 = $1;
  $6 = HEAP32[$7 + 8 >> 2];
  $1 = HEAP32[$7 + 12 >> 2];
  HEAP32[$5 + 32 >> 2] = $6;
  HEAP32[$5 + 36 >> 2] = $1;
  $6 = HEAP32[$7 + 4 >> 2];
  $1 = HEAP32[$7 >> 2];
  HEAP32[$5 + 24 >> 2] = $1;
  HEAP32[$5 + 28 >> 2] = $6;
  $1 = HEAP32[$7 + 28 >> 2];
  $6 = HEAP32[$7 + 24 >> 2];
  HEAP32[$5 + 48 >> 2] = $6;
  HEAP32[$5 + 52 >> 2] = $1;
  $6 = HEAP32[$7 + 20 >> 2];
  $1 = HEAP32[$7 + 16 >> 2];
  HEAP32[$5 + 40 >> 2] = $1;
  HEAP32[$5 + 44 >> 2] = $6;
  $1 = HEAP32[$7 + 44 >> 2];
  $6 = HEAP32[$7 + 40 >> 2];
  $10 = $6;
  $6 = $5 - -64 | 0;
  HEAP32[$6 >> 2] = $10;
  HEAP32[$6 + 4 >> 2] = $1;
  $6 = HEAP32[$7 + 36 >> 2];
  $1 = HEAP32[$7 + 32 >> 2];
  HEAP32[$5 + 56 >> 2] = $1;
  HEAP32[$5 + 60 >> 2] = $6;
  $1 = HEAP32[$7 + 60 >> 2];
  $6 = HEAP32[$7 + 56 >> 2];
  HEAP32[$5 + 80 >> 2] = $6;
  HEAP32[$5 + 84 >> 2] = $1;
  $6 = HEAP32[$7 + 52 >> 2];
  $1 = HEAP32[$7 + 48 >> 2];
  HEAP32[$5 + 72 >> 2] = $1;
  HEAP32[$5 + 76 >> 2] = $6;
  $1 = HEAP32[$2 + 12 >> 2];
  $7 = $1;
  $6 = HEAP32[$7 + 8 >> 2];
  $1 = HEAP32[$7 + 12 >> 2];
  HEAP32[$5 + 96 >> 2] = $6;
  HEAP32[$5 + 100 >> 2] = $1;
  $6 = HEAP32[$7 + 4 >> 2];
  $1 = HEAP32[$7 >> 2];
  HEAP32[$5 + 88 >> 2] = $1;
  HEAP32[$5 + 92 >> 2] = $6;
  $1 = HEAP32[$7 + 20 >> 2];
  $6 = HEAP32[$7 + 16 >> 2];
  HEAP32[$5 + 104 >> 2] = $6;
  HEAP32[$5 + 108 >> 2] = $1;
  $6 = HEAP32[$7 + 28 >> 2];
  $1 = HEAP32[$7 + 24 >> 2];
  HEAP32[$5 + 112 >> 2] = $1;
  HEAP32[$5 + 116 >> 2] = $6;
  $1 = HEAP32[$7 + 36 >> 2];
  $6 = HEAP32[$7 + 32 >> 2];
  HEAP32[$5 + 120 >> 2] = $6;
  HEAP32[$5 + 124 >> 2] = $1;
  $6 = HEAP32[$7 + 44 >> 2];
  $1 = HEAP32[$7 + 40 >> 2];
  HEAP32[$5 + 128 >> 2] = $1;
  HEAP32[$5 + 132 >> 2] = $6;
  $1 = HEAP32[$7 + 52 >> 2];
  $6 = HEAP32[$7 + 48 >> 2];
  HEAP32[$5 + 136 >> 2] = $6;
  HEAP32[$5 + 140 >> 2] = $1;
  $6 = HEAP32[$7 + 60 >> 2];
  $1 = HEAP32[$7 + 56 >> 2];
  HEAP32[$5 + 144 >> 2] = $1;
  HEAP32[$5 + 148 >> 2] = $6;
  btBoxBoxDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29(btBoxBoxDetector__btBoxBoxDetector_28btBoxShape_20const__2c_20btBoxShape_20const__29($5 + 8 | 0, $9, $8), $5 + 24 | 0, $4, HEAP32[$3 + 20 >> 2], 0);
  if (!HEAPU8[$0 + 8 | 0]) {
   break label$2;
  }
  $1 = HEAP32[$4 + 4 >> 2];
  if (!HEAP32[$1 + 844 >> 2]) {
   break label$2;
  }
  $0 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
  $2 = HEAP32[$1 + 836 >> 2];
  if (($0 | 0) != ($2 | 0)) {
   btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($1, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0, $0 + 4 | 0);
   break label$2;
  }
  btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($1, $2 + 4 | 0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0);
 }
 $0 = $5 + 160 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function gResolveSingleConstraintRowGeneric_scalar_reference_28btSolverBody__2c_20btSolverBody__2c_20btSolverConstraint_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
 $6 = HEAPF32[$2 + 100 >> 2];
 $7 = HEAPF32[$2 + 16 >> 2];
 $8 = HEAPF32[$2 + 20 >> 2];
 $9 = HEAPF32[$2 + 24 >> 2];
 $3 = HEAPF32[$2 + 108 >> 2];
 $3 = Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 112 >> 2] - Math_fround($6 * HEAPF32[$2 + 116 >> 2])) - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($7 * HEAPF32[$0 + 64 >> 2]) + Math_fround($8 * HEAPF32[$0 + 68 >> 2])) + Math_fround($9 * HEAPF32[$0 + 72 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 >> 2] * HEAPF32[$0 + 80 >> 2]) + Math_fround(HEAPF32[$2 + 4 >> 2] * HEAPF32[$0 + 84 >> 2])) + Math_fround(HEAPF32[$2 + 8 >> 2] * HEAPF32[$0 + 88 >> 2]))) * $3)) - Math_fround($3 * Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 48 >> 2] * HEAPF32[$1 + 64 >> 2]) + Math_fround(HEAPF32[$2 + 52 >> 2] * HEAPF32[$1 + 68 >> 2])) + Math_fround(HEAPF32[$2 + 56 >> 2] * HEAPF32[$1 + 72 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 32 >> 2] * HEAPF32[$1 + 80 >> 2]) + Math_fround(HEAPF32[$2 + 36 >> 2] * HEAPF32[$1 + 84 >> 2])) + Math_fround(HEAPF32[$2 + 40 >> 2] * HEAPF32[$1 + 88 >> 2])))));
 $4 = Math_fround($6 + $3);
 $5 = HEAPF32[$2 + 120 >> 2];
 label$1 : {
  if (!!($4 < $5)) {
   $3 = Math_fround($5 - $6);
   $4 = $5;
   break label$1;
  }
  $5 = HEAPF32[$2 + 124 >> 2];
  if (!($4 > $5)) {
   break label$1;
  }
  $3 = Math_fround($5 - $6);
  $4 = $5;
 }
 HEAPF32[$2 + 100 >> 2] = $4;
 if (HEAP32[$0 + 240 >> 2]) {
  HEAPF32[$0 + 64 >> 2] = Math_fround(HEAPF32[$0 + 112 >> 2] * Math_fround($3 * Math_fround($7 * HEAPF32[$0 + 128 >> 2]))) + HEAPF32[$0 + 64 >> 2];
  HEAPF32[$0 + 68 >> 2] = Math_fround(Math_fround($3 * Math_fround($8 * HEAPF32[$0 + 132 >> 2])) * HEAPF32[$0 + 116 >> 2]) + HEAPF32[$0 + 68 >> 2];
  HEAPF32[$0 + 72 >> 2] = Math_fround(Math_fround($3 * Math_fround($9 * HEAPF32[$0 + 136 >> 2])) * HEAPF32[$0 + 120 >> 2]) + HEAPF32[$0 + 72 >> 2];
  $4 = HEAPF32[$2 + 72 >> 2];
  $6 = HEAPF32[$2 + 68 >> 2];
  HEAPF32[$0 + 80 >> 2] = Math_fround(Math_fround($3 * HEAPF32[$0 + 96 >> 2]) * HEAPF32[$2 + 64 >> 2]) + HEAPF32[$0 + 80 >> 2];
  $5 = HEAPF32[$0 + 104 >> 2];
  HEAPF32[$0 + 84 >> 2] = Math_fround($6 * Math_fround($3 * HEAPF32[$0 + 100 >> 2])) + HEAPF32[$0 + 84 >> 2];
  HEAPF32[$0 + 88 >> 2] = Math_fround($4 * Math_fround($3 * $5)) + HEAPF32[$0 + 88 >> 2];
 }
 if (HEAP32[$1 + 240 >> 2]) {
  $4 = HEAPF32[$2 + 56 >> 2];
  $6 = HEAPF32[$2 + 52 >> 2];
  HEAPF32[$1 + 64 >> 2] = Math_fround(HEAPF32[$1 + 112 >> 2] * Math_fround($3 * Math_fround(HEAPF32[$2 + 48 >> 2] * HEAPF32[$1 + 128 >> 2]))) + HEAPF32[$1 + 64 >> 2];
  HEAPF32[$1 + 68 >> 2] = Math_fround(Math_fround($3 * Math_fround($6 * HEAPF32[$1 + 132 >> 2])) * HEAPF32[$1 + 116 >> 2]) + HEAPF32[$1 + 68 >> 2];
  HEAPF32[$1 + 72 >> 2] = Math_fround(Math_fround($3 * Math_fround($4 * HEAPF32[$1 + 136 >> 2])) * HEAPF32[$1 + 120 >> 2]) + HEAPF32[$1 + 72 >> 2];
  $4 = HEAPF32[$2 + 88 >> 2];
  $6 = HEAPF32[$2 + 84 >> 2];
  HEAPF32[$1 + 80 >> 2] = Math_fround(Math_fround($3 * HEAPF32[$1 + 96 >> 2]) * HEAPF32[$2 + 80 >> 2]) + HEAPF32[$1 + 80 >> 2];
  $5 = HEAPF32[$1 + 104 >> 2];
  HEAPF32[$1 + 84 >> 2] = Math_fround($6 * Math_fround($3 * HEAPF32[$1 + 100 >> 2])) + HEAPF32[$1 + 84 >> 2];
  HEAPF32[$1 + 88 >> 2] = Math_fround($4 * Math_fround($3 * $5)) + HEAPF32[$1 + 88 >> 2];
 }
 return Math_fround($3);
}
function btTriangleConvexcastCallback__btTriangleConvexcastCallback_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20float_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 >> 2] = 7440;
 $6 = $2;
 $2 = HEAP32[$6 + 8 >> 2];
 $1 = HEAP32[$6 + 12 >> 2];
 $7 = $2;
 $2 = $0;
 HEAP32[$2 + 16 >> 2] = $7;
 HEAP32[$2 + 20 >> 2] = $1;
 $2 = HEAP32[$6 + 4 >> 2];
 $1 = HEAP32[$6 >> 2];
 $7 = $1;
 $1 = $0;
 HEAP32[$1 + 8 >> 2] = $7;
 HEAP32[$1 + 12 >> 2] = $2;
 $1 = HEAP32[$6 + 28 >> 2];
 $2 = HEAP32[$6 + 24 >> 2];
 $7 = $2;
 $2 = $0;
 HEAP32[$2 + 32 >> 2] = $7;
 HEAP32[$2 + 36 >> 2] = $1;
 $2 = HEAP32[$6 + 20 >> 2];
 $1 = HEAP32[$6 + 16 >> 2];
 $7 = $1;
 $1 = $0;
 HEAP32[$1 + 24 >> 2] = $7;
 HEAP32[$1 + 28 >> 2] = $2;
 $1 = HEAP32[$6 + 44 >> 2];
 $2 = HEAP32[$6 + 40 >> 2];
 $7 = $2;
 $2 = $0;
 HEAP32[$2 + 48 >> 2] = $7;
 HEAP32[$2 + 52 >> 2] = $1;
 $2 = HEAP32[$6 + 36 >> 2];
 $1 = HEAP32[$6 + 32 >> 2];
 $7 = $1;
 $1 = $0;
 HEAP32[$1 + 40 >> 2] = $7;
 HEAP32[$1 + 44 >> 2] = $2;
 $1 = HEAP32[$6 + 60 >> 2];
 $2 = HEAP32[$6 + 56 >> 2];
 $7 = $2;
 $2 = $0 - -64 | 0;
 HEAP32[$2 >> 2] = $7;
 HEAP32[$2 + 4 >> 2] = $1;
 $2 = HEAP32[$6 + 52 >> 2];
 $1 = HEAP32[$6 + 48 >> 2];
 $6 = $1;
 $1 = $0;
 HEAP32[$1 + 56 >> 2] = $6;
 HEAP32[$1 + 60 >> 2] = $2;
 $6 = $3;
 $2 = HEAP32[$6 + 8 >> 2];
 $1 = HEAP32[$6 + 12 >> 2];
 $3 = $2;
 $2 = $0;
 HEAP32[$2 + 80 >> 2] = $3;
 HEAP32[$2 + 84 >> 2] = $1;
 $2 = HEAP32[$6 + 4 >> 2];
 $1 = HEAP32[$6 >> 2];
 $3 = $1;
 $1 = $0;
 HEAP32[$1 + 72 >> 2] = $3;
 HEAP32[$1 + 76 >> 2] = $2;
 $1 = HEAP32[$6 + 28 >> 2];
 $2 = HEAP32[$6 + 24 >> 2];
 $3 = $2;
 $2 = $0;
 HEAP32[$2 + 96 >> 2] = $3;
 HEAP32[$2 + 100 >> 2] = $1;
 $2 = HEAP32[$6 + 20 >> 2];
 $1 = HEAP32[$6 + 16 >> 2];
 $3 = $1;
 $1 = $0;
 HEAP32[$1 + 88 >> 2] = $3;
 HEAP32[$1 + 92 >> 2] = $2;
 $1 = HEAP32[$6 + 44 >> 2];
 $2 = HEAP32[$6 + 40 >> 2];
 $3 = $2;
 $2 = $0;
 HEAP32[$2 + 112 >> 2] = $3;
 HEAP32[$2 + 116 >> 2] = $1;
 $2 = HEAP32[$6 + 36 >> 2];
 $1 = HEAP32[$6 + 32 >> 2];
 $3 = $1;
 $1 = $0;
 HEAP32[$1 + 104 >> 2] = $3;
 HEAP32[$1 + 108 >> 2] = $2;
 $1 = HEAP32[$6 + 60 >> 2];
 $2 = HEAP32[$6 + 56 >> 2];
 $3 = $2;
 $2 = $0;
 HEAP32[$2 + 128 >> 2] = $3;
 HEAP32[$2 + 132 >> 2] = $1;
 $2 = HEAP32[$6 + 52 >> 2];
 $1 = HEAP32[$6 + 48 >> 2];
 $3 = $1;
 $1 = $0;
 HEAP32[$1 + 120 >> 2] = $3;
 HEAP32[$1 + 124 >> 2] = $2;
 $6 = $4;
 $2 = HEAP32[$6 + 8 >> 2];
 $1 = HEAP32[$6 + 12 >> 2];
 $3 = $2;
 $2 = $0;
 HEAP32[$2 + 144 >> 2] = $3;
 HEAP32[$2 + 148 >> 2] = $1;
 $2 = HEAP32[$6 + 4 >> 2];
 $1 = HEAP32[$6 >> 2];
 $3 = $1;
 $1 = $0;
 HEAP32[$1 + 136 >> 2] = $3;
 HEAP32[$1 + 140 >> 2] = $2;
 $1 = HEAP32[$6 + 28 >> 2];
 $2 = HEAP32[$6 + 24 >> 2];
 $3 = $2;
 $2 = $0;
 HEAP32[$2 + 160 >> 2] = $3;
 HEAP32[$2 + 164 >> 2] = $1;
 $2 = HEAP32[$6 + 20 >> 2];
 $1 = HEAP32[$6 + 16 >> 2];
 $3 = $1;
 $1 = $0;
 HEAP32[$1 + 152 >> 2] = $3;
 HEAP32[$1 + 156 >> 2] = $2;
 $1 = HEAP32[$6 + 44 >> 2];
 $2 = HEAP32[$6 + 40 >> 2];
 $3 = $2;
 $2 = $0;
 HEAP32[$2 + 176 >> 2] = $3;
 HEAP32[$2 + 180 >> 2] = $1;
 $2 = HEAP32[$6 + 36 >> 2];
 $1 = HEAP32[$6 + 32 >> 2];
 $3 = $1;
 $1 = $0;
 HEAP32[$1 + 168 >> 2] = $3;
 HEAP32[$1 + 172 >> 2] = $2;
 $1 = HEAP32[$6 + 60 >> 2];
 $2 = HEAP32[$6 + 56 >> 2];
 $3 = $2;
 $2 = $0;
 HEAP32[$2 + 192 >> 2] = $3;
 HEAP32[$2 + 196 >> 2] = $1;
 $2 = HEAP32[$6 + 52 >> 2];
 $1 = HEAP32[$6 + 48 >> 2];
 $3 = $1;
 $1 = $0;
 HEAP32[$1 + 184 >> 2] = $3;
 HEAP32[$1 + 188 >> 2] = $2;
 HEAP32[$1 + 208 >> 2] = 0;
 HEAPF32[$1 + 204 >> 2] = $5;
 HEAP32[$1 + 200 >> 2] = 1065353216;
 return $1;
}
function btCompoundShape__btCompoundShape_28bool_2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $3 = $0;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = -1;
 HEAP32[$3 >> 2] = 11028;
 HEAP32[$3 + 76 >> 2] = 0;
 HEAP32[$3 + 68 >> 2] = 0;
 HEAP32[$3 + 72 >> 2] = 1;
 HEAP32[$3 + 52 >> 2] = -581039253;
 HEAP32[$3 + 56 >> 2] = -581039253;
 HEAP32[$3 + 36 >> 2] = 1566444395;
 HEAP32[$3 + 40 >> 2] = 1566444395;
 HEAP8[$3 + 32 | 0] = 1;
 HEAP32[$3 + 28 >> 2] = 0;
 HEAP8[$3 + 96 | 0] = 1;
 HEAP32[$3 + 60 >> 2] = -581039253;
 HEAP32[$3 + 64 >> 2] = 0;
 HEAP32[$3 + 44 >> 2] = 1566444395;
 HEAP32[$3 + 48 >> 2] = 0;
 HEAP32[$3 + 20 >> 2] = 0;
 HEAP32[$3 + 24 >> 2] = 0;
 HEAP32[$3 + 92 >> 2] = 0;
 HEAP32[$3 + 84 >> 2] = 0;
 HEAP32[$3 + 88 >> 2] = 0;
 HEAP8[$3 + 116 | 0] = 1;
 HEAP32[$3 + 112 >> 2] = 0;
 HEAP8[$3 + 136 | 0] = 1;
 HEAP32[$3 + 104 >> 2] = 0;
 HEAP32[$3 + 108 >> 2] = 0;
 HEAP32[$3 + 124 >> 2] = 0;
 HEAP32[$3 + 128 >> 2] = 0;
 HEAP32[$3 + 132 >> 2] = 0;
 HEAP8[$3 + 156 | 0] = 1;
 HEAP32[$3 + 152 >> 2] = 0;
 HEAP32[$3 + 144 >> 2] = 0;
 HEAP32[$3 + 148 >> 2] = 0;
 HEAP8[$3 + 176 | 0] = 1;
 HEAP32[$3 + 172 >> 2] = 0;
 HEAP32[$3 + 164 >> 2] = 0;
 HEAP32[$3 + 168 >> 2] = 0;
 HEAP32[$3 + 184 >> 2] = 1065353216;
 HEAP32[$3 + 188 >> 2] = 1065353216;
 HEAP32[$3 + 192 >> 2] = 1065353216;
 HEAP32[$3 + 196 >> 2] = 0;
 HEAP8[$3 + 180 | 0] = 0;
 HEAP32[$3 + 4 >> 2] = 31;
 if ($1) {
  $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(40, 16);
  btDbvt__btDbvt_28_29($4);
  HEAP32[$0 + 68 >> 2] = $4;
  $4 = HEAP32[$0 + 24 >> 2];
 }
 if (($4 | 0) < ($2 | 0)) {
  if ($2) {
   $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($2, 80), 16);
  }
  $9 = HEAP32[$0 + 20 >> 2];
  if (($9 | 0) >= 1) {
   while (1) {
    $1 = Math_imul($7, 80);
    $4 = $8 + $1 | 0;
    $1 = HEAP32[$0 + 28 >> 2] + $1 | 0;
    $5 = $1;
    $1 = HEAP32[$5 >> 2];
    $3 = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 >> 2] = $1;
    HEAP32[$4 + 4 >> 2] = $3;
    $1 = HEAP32[$5 + 12 >> 2];
    $3 = HEAP32[$5 + 8 >> 2];
    $6 = $3;
    $3 = $4;
    HEAP32[$3 + 8 >> 2] = $6;
    HEAP32[$3 + 12 >> 2] = $1;
    $3 = HEAP32[$5 + 28 >> 2];
    $1 = HEAP32[$5 + 24 >> 2];
    HEAP32[$4 + 24 >> 2] = $1;
    HEAP32[$4 + 28 >> 2] = $3;
    $1 = HEAP32[$5 + 20 >> 2];
    $3 = HEAP32[$5 + 16 >> 2];
    $6 = $3;
    $3 = $4;
    HEAP32[$3 + 16 >> 2] = $6;
    HEAP32[$3 + 20 >> 2] = $1;
    $3 = HEAP32[$5 + 44 >> 2];
    $1 = HEAP32[$5 + 40 >> 2];
    HEAP32[$4 + 40 >> 2] = $1;
    HEAP32[$4 + 44 >> 2] = $3;
    $1 = HEAP32[$5 + 36 >> 2];
    $3 = HEAP32[$5 + 32 >> 2];
    $6 = $3;
    $3 = $4;
    HEAP32[$3 + 32 >> 2] = $6;
    HEAP32[$3 + 36 >> 2] = $1;
    $3 = HEAP32[$5 + 60 >> 2];
    $1 = HEAP32[$5 + 56 >> 2];
    HEAP32[$4 + 56 >> 2] = $1;
    HEAP32[$4 + 60 >> 2] = $3;
    $1 = HEAP32[$5 + 52 >> 2];
    $3 = HEAP32[$5 + 48 >> 2];
    $6 = $3;
    $3 = $4;
    HEAP32[$3 + 48 >> 2] = $6;
    HEAP32[$3 + 52 >> 2] = $1;
    $3 = HEAP32[$5 + 68 >> 2];
    $1 = HEAP32[$5 + 64 >> 2];
    HEAP32[$4 + 64 >> 2] = $1;
    HEAP32[$4 + 68 >> 2] = $3;
    $1 = HEAP32[$5 + 76 >> 2];
    $3 = HEAP32[$5 + 72 >> 2];
    $5 = $3;
    $3 = $4;
    HEAP32[$3 + 72 >> 2] = $5;
    HEAP32[$3 + 76 >> 2] = $1;
    $7 = $7 + 1 | 0;
    if (($9 | 0) != ($7 | 0)) {
     continue;
    }
    break;
   }
  }
  $4 = HEAP32[$0 + 28 >> 2];
  if ($4) {
   if (HEAPU8[$0 + 32 | 0]) {
    btAlignedFreeInternal_28void__29($4);
   }
   HEAP32[$0 + 28 >> 2] = 0;
  }
  HEAP32[$0 + 28 >> 2] = $8;
  HEAP8[$0 + 32 | 0] = 1;
  HEAP32[$0 + 24 >> 2] = $2;
 }
 return $0;
}
function btDbvtBroadphase__performDeferredRemoval_28btDispatcher__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $11 = global$0 - 16 | 0;
 $3 = $11;
 if ($11 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $2 = HEAP32[$0 + 96 >> 2];
 if (FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 56 >> 2]]($2)) {
  $2 = HEAP32[$0 + 96 >> 2];
  $4 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2) | 0;
  $3 = HEAP32[$4 + 4 >> 2];
  if (($3 | 0) >= 2) {
   void_20btAlignedObjectArray_btBroadphasePair___quickSortInternal_btBroadphasePairSortPredicate__28btBroadphasePairSortPredicate_20const__2c_20int_2c_20int_29($4, $11 + 8 | 0, 0, $3 + -1 | 0);
   $3 = HEAP32[$4 + 4 >> 2];
  }
  if (($3 | 0) >= 1) {
   while (1) {
    $2 = HEAP32[$4 + 12 >> 2] + ($7 << 4) | 0;
    $6 = HEAP32[$2 + 4 >> 2];
    $8 = HEAP32[$2 >> 2];
    label$7 : {
     label$8 : {
      if (($6 | 0) == ($9 | 0) ? ($8 | 0) == ($5 | 0) : 0) {
       break label$8;
      }
      $5 = HEAP32[$8 + 48 >> 2];
      $9 = HEAP32[$6 + 48 >> 2];
      if (HEAPF32[$5 >> 2] <= HEAPF32[$9 + 16 >> 2] ^ 1 | HEAPF32[$5 + 16 >> 2] >= HEAPF32[$9 >> 2] ^ 1 | (HEAPF32[$5 + 4 >> 2] <= HEAPF32[$9 + 20 >> 2] ^ 1 | HEAPF32[$5 + 20 >> 2] >= HEAPF32[$9 + 4 >> 2] ^ 1)) {
       break label$8;
      }
      if (!(HEAPF32[$5 + 8 >> 2] <= HEAPF32[$9 + 24 >> 2])) {
       break label$8;
      }
      if (HEAPF32[$5 + 24 >> 2] >= HEAPF32[$9 + 8 >> 2]) {
       break label$7;
      }
     }
     $3 = HEAP32[$0 + 96 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 32 >> 2]]($3, $2, $1);
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     $10 = $10 + 1 | 0;
     $3 = HEAP32[$4 + 4 >> 2];
    }
    $5 = $8;
    $9 = $6;
    $7 = $7 + 1 | 0;
    if (($7 | 0) < ($3 | 0)) {
     continue;
    }
    break;
   }
   if (($3 | 0) >= 2) {
    void_20btAlignedObjectArray_btBroadphasePair___quickSortInternal_btBroadphasePairSortPredicate__28btBroadphasePairSortPredicate_20const__2c_20int_2c_20int_29($4, $11, 0, $3 + -1 | 0);
    $3 = HEAP32[$4 + 4 >> 2];
   }
   $7 = $3 - $10 | 0;
   if (($10 | 0) <= -1) {
    if (HEAP32[$4 + 8 >> 2] < ($7 | 0)) {
     label$12 : {
      if (!$7) {
       $10 = 0;
       $5 = $3;
       break label$12;
      }
      $10 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($7 << 4, 16);
      $5 = HEAP32[$4 + 4 >> 2];
     }
     if (($5 | 0) >= 1) {
      $8 = 0;
      while (1) {
       $6 = $8 << 4;
       $2 = $10 + $6 | 0;
       $6 = HEAP32[$4 + 12 >> 2] + $6 | 0;
       HEAP32[$2 >> 2] = HEAP32[$6 >> 2];
       HEAP32[$2 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
       HEAP32[$2 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
       HEAP32[$2 + 12 >> 2] = HEAP32[$6 + 12 >> 2];
       $8 = $8 + 1 | 0;
       if (($8 | 0) != ($5 | 0)) {
        continue;
       }
       break;
      }
     }
     $2 = HEAP32[$4 + 12 >> 2];
     if ($2) {
      if (HEAPU8[$4 + 16 | 0]) {
       btAlignedFreeInternal_28void__29($2);
      }
      HEAP32[$4 + 12 >> 2] = 0;
     }
     HEAP32[$4 + 12 >> 2] = $10;
     HEAP8[$4 + 16 | 0] = 1;
     HEAP32[$4 + 8 >> 2] = $7;
    }
    while (1) {
     $2 = HEAP32[$4 + 12 >> 2] + ($3 << 4) | 0;
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     HEAP32[$2 + 8 >> 2] = 0;
     HEAP32[$2 + 12 >> 2] = 0;
     $3 = $3 + 1 | 0;
     if (($7 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
   }
   $3 = $7;
  }
  HEAP32[$4 + 4 >> 2] = $3;
 }
 $0 = $11 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDbvt__collideTV_28btDbvtNode_20const__2c_20btDbvtAabbMm_20const__2c_20btDbvt__ICollide__29_20const($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0);
 $9 = global$0 - 256 | 0;
 $0 = $9;
 if ($9 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 label$2 : {
  if (!$1) {
   break label$2;
  }
  $11 = HEAPF32[$2 + 24 >> 2];
  $12 = HEAPF32[$2 + 20 >> 2];
  $13 = HEAPF32[$2 + 16 >> 2];
  $14 = HEAPF32[$2 + 8 >> 2];
  $15 = HEAPF32[$2 + 4 >> 2];
  $16 = HEAPF32[$2 >> 2];
  HEAP32[$9 >> 2] = $1;
  $5 = 64;
  $4 = $9;
  $2 = 1;
  while (1) {
   label$4 : {
    label$5 : {
     label$6 : {
      $1 = $2 + -1 | 0;
      $6 = HEAP32[($1 << 2) + $4 >> 2];
      label$7 : {
       if (HEAPF32[$6 >> 2] <= $13 ^ 1 | HEAPF32[$6 + 16 >> 2] >= $16 ^ 1 | (HEAPF32[$6 + 4 >> 2] <= $12 ^ 1 | HEAPF32[$6 + 20 >> 2] >= $15 ^ 1)) {
        break label$7;
       }
       if (HEAPF32[$6 + 8 >> 2] <= $11 ^ 1 | HEAPF32[$6 + 24 >> 2] >= $14 ^ 1) {
        break label$7;
       }
       if (HEAP32[$6 + 40 >> 2]) {
        if (($1 | 0) != ($5 | 0)) {
         $0 = $5;
         $7 = $4;
         break label$5;
        }
        $0 = $5 ? $5 << 1 : 1;
        if (($2 | 0) > ($0 | 0)) {
         $7 = $4;
         $0 = $5;
         $1 = $0;
         break label$5;
        }
        $1 = 0;
        $7 = 0;
        if ($0) {
         $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($0 << 2, 16);
        }
        if (($2 | 0) >= 2) {
         while (1) {
          $2 = $1 << 2;
          HEAP32[$7 + $2 >> 2] = HEAP32[$2 + $4 >> 2];
          $1 = $1 + 1 | 0;
          if (($5 | 0) != ($1 | 0)) {
           continue;
          }
          break label$6;
         }
        }
        if ($4) {
         break label$6;
        }
        $8 = 1;
        break label$5;
       }
       FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($3, $6);
      }
      break label$4;
     }
     $2 = $8;
     $8 = 1;
     if ($2) {
      btAlignedFreeInternal_28void__29($4);
     }
     $1 = $5;
    }
    HEAP32[($1 << 2) + $7 >> 2] = HEAP32[$6 + 36 >> 2];
    label$15 : {
     label$16 : {
      $10 = $1 + 1 | 0;
      if (($10 | 0) != ($0 | 0)) {
       break label$16;
      }
      $5 = $0 ? $0 << 1 : 1;
      if (($0 | 0) >= ($5 | 0)) {
       break label$16;
      }
      $2 = 0;
      $4 = 0;
      if ($5) {
       $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 2, 16);
      }
      label$18 : {
       label$19 : {
        if (($1 | 0) >= 0) {
         while (1) {
          $0 = $2 << 2;
          HEAP32[$0 + $4 >> 2] = HEAP32[$0 + $7 >> 2];
          $0 = ($1 | 0) == ($2 | 0);
          $2 = $2 + 1 | 0;
          if (!$0) {
           continue;
          }
          break;
         }
         if ($8) {
          break label$19;
         }
         break label$18;
        }
        if (!$7 | !$8) {
         break label$18;
        }
       }
       btAlignedFreeInternal_28void__29($7);
      }
      $8 = 1;
      break label$15;
     }
     $5 = $0;
     $4 = $7;
    }
    HEAP32[($10 << 2) + $4 >> 2] = HEAP32[$6 + 40 >> 2];
    $1 = $1 + 2 | 0;
   }
   $2 = $1;
   if (($2 | 0) > 0) {
    continue;
   }
   break;
  }
  if (!$4 | !$8) {
   break label$2;
  }
  btAlignedFreeInternal_28void__29($4);
 }
 $0 = $9 + 256 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionObject__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 12 >> 2];
 HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 16 >> 2];
 HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 20 >> 2];
 HEAP32[$1 + 36 >> 2] = HEAP32[$0 + 24 >> 2];
 HEAP32[$1 + 40 >> 2] = HEAP32[$0 + 28 >> 2];
 HEAP32[$1 + 44 >> 2] = HEAP32[$0 + 32 >> 2];
 HEAP32[$1 + 48 >> 2] = HEAP32[$0 + 36 >> 2];
 HEAP32[$1 + 52 >> 2] = HEAP32[$0 + 40 >> 2];
 HEAP32[$1 + 56 >> 2] = HEAP32[$0 + 44 >> 2];
 HEAP32[$1 + 60 >> 2] = HEAP32[$0 + 48 >> 2];
 HEAP32[$1 + 64 >> 2] = HEAP32[$0 + 52 >> 2];
 HEAP32[$1 + 68 >> 2] = HEAP32[$0 + 56 >> 2];
 HEAP32[$1 + 72 >> 2] = HEAP32[$0 + 60 >> 2];
 HEAP32[$1 + 76 >> 2] = HEAP32[$0 - -64 >> 2];
 HEAP32[$1 + 80 >> 2] = HEAP32[$0 + 68 >> 2];
 HEAP32[$1 + 84 >> 2] = HEAP32[$0 + 72 >> 2];
 HEAP32[$1 + 88 >> 2] = HEAP32[$0 + 76 >> 2];
 HEAP32[$1 + 92 >> 2] = HEAP32[$0 + 80 >> 2];
 HEAP32[$1 + 96 >> 2] = HEAP32[$0 + 84 >> 2];
 HEAP32[$1 + 100 >> 2] = HEAP32[$0 + 88 >> 2];
 HEAP32[$1 + 104 >> 2] = HEAP32[$0 + 92 >> 2];
 HEAP32[$1 + 108 >> 2] = HEAP32[$0 + 96 >> 2];
 HEAP32[$1 + 112 >> 2] = HEAP32[$0 + 100 >> 2];
 HEAP32[$1 + 116 >> 2] = HEAP32[$0 + 104 >> 2];
 HEAP32[$1 + 120 >> 2] = HEAP32[$0 + 108 >> 2];
 HEAP32[$1 + 124 >> 2] = HEAP32[$0 + 112 >> 2];
 HEAP32[$1 + 128 >> 2] = HEAP32[$0 + 116 >> 2];
 HEAP32[$1 + 132 >> 2] = HEAP32[$0 + 120 >> 2];
 HEAP32[$1 + 136 >> 2] = HEAP32[$0 + 124 >> 2];
 HEAP32[$1 + 140 >> 2] = HEAP32[$0 + 128 >> 2];
 HEAP32[$1 + 144 >> 2] = HEAP32[$0 + 132 >> 2];
 HEAP32[$1 + 148 >> 2] = HEAP32[$0 + 136 >> 2];
 HEAP32[$1 + 152 >> 2] = HEAP32[$0 + 140 >> 2];
 HEAP32[$1 + 156 >> 2] = HEAP32[$0 + 144 >> 2];
 HEAP32[$1 + 160 >> 2] = HEAP32[$0 + 148 >> 2];
 HEAP32[$1 + 164 >> 2] = HEAP32[$0 + 152 >> 2];
 HEAP32[$1 + 168 >> 2] = HEAP32[$0 + 156 >> 2];
 HEAP32[$1 + 172 >> 2] = HEAP32[$0 + 160 >> 2];
 HEAP32[$1 + 176 >> 2] = HEAP32[$0 + 164 >> 2];
 HEAP32[$1 + 180 >> 2] = HEAP32[$0 + 168 >> 2];
 HEAP32[$1 + 184 >> 2] = HEAP32[$0 + 172 >> 2];
 HEAP32[$1 + 188 >> 2] = HEAP32[$0 + 176 >> 2];
 HEAP32[$1 + 232 >> 2] = HEAP32[$0 + 180 >> 2];
 $3 = HEAP32[$0 + 184 >> 2];
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 192 >> 2] = $3;
 $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, HEAP32[$0 + 192 >> 2]) | 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = $3;
 HEAP32[$1 + 236 >> 2] = HEAP32[$0 + 204 >> 2];
 HEAP32[$1 + 240 >> 2] = HEAP32[$0 + 208 >> 2];
 HEAP32[$1 + 244 >> 2] = HEAP32[$0 + 212 >> 2];
 HEAP32[$1 + 248 >> 2] = HEAP32[$0 + 220 >> 2];
 HEAP32[$1 + 196 >> 2] = HEAP32[$0 + 224 >> 2];
 HEAP32[$1 + 200 >> 2] = HEAP32[$0 + 228 >> 2];
 HEAP32[$1 + 204 >> 2] = HEAP32[$0 + 236 >> 2];
 HEAP32[$1 + 208 >> 2] = HEAP32[$0 + 244 >> 2];
 HEAP32[$1 + 212 >> 2] = HEAP32[$0 + 248 >> 2];
 HEAP32[$1 + 216 >> 2] = HEAP32[$0 + 232 >> 2];
 HEAP32[$1 + 252 >> 2] = HEAP32[$0 + 252 >> 2];
 $4 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 40 >> 2]]($2, $0) | 0;
 $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $4) | 0;
 HEAP32[$1 + 12 >> 2] = $3;
 if ($3) {
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2, $4);
 }
 HEAP32[$1 + 220 >> 2] = HEAP32[$0 + 268 >> 2];
 HEAP32[$1 + 224 >> 2] = HEAP32[$0 + 272 >> 2];
 HEAP32[$1 + 228 >> 2] = HEAP32[$0 + 276 >> 2];
 $0 = HEAP32[$0 + 280 >> 2];
 HEAP32[$1 + 260 >> 2] = 0;
 HEAP32[$1 + 256 >> 2] = $0;
 return 4008;
}
function gResolveSingleConstraintRowLowerLimit_scalar_reference_28btSolverBody__2c_20btSolverBody__2c_20btSolverConstraint_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0;
 $5 = HEAPF32[$2 + 100 >> 2];
 $7 = HEAPF32[$2 + 16 >> 2];
 $8 = HEAPF32[$2 + 20 >> 2];
 $9 = HEAPF32[$2 + 24 >> 2];
 $4 = HEAPF32[$2 + 108 >> 2];
 $4 = Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 112 >> 2] - Math_fround($5 * HEAPF32[$2 + 116 >> 2])) - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($7 * HEAPF32[$0 + 64 >> 2]) + Math_fround($8 * HEAPF32[$0 + 68 >> 2])) + Math_fround($9 * HEAPF32[$0 + 72 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 >> 2] * HEAPF32[$0 + 80 >> 2]) + Math_fround(HEAPF32[$2 + 4 >> 2] * HEAPF32[$0 + 84 >> 2])) + Math_fround(HEAPF32[$2 + 8 >> 2] * HEAPF32[$0 + 88 >> 2]))) * $4)) - Math_fround($4 * Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 48 >> 2] * HEAPF32[$1 + 64 >> 2]) + Math_fround(HEAPF32[$2 + 52 >> 2] * HEAPF32[$1 + 68 >> 2])) + Math_fround(HEAPF32[$2 + 56 >> 2] * HEAPF32[$1 + 72 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 32 >> 2] * HEAPF32[$1 + 80 >> 2]) + Math_fround(HEAPF32[$2 + 36 >> 2] * HEAPF32[$1 + 84 >> 2])) + Math_fround(HEAPF32[$2 + 40 >> 2] * HEAPF32[$1 + 88 >> 2])))));
 $6 = Math_fround($5 + $4);
 $3 = HEAPF32[$2 + 120 >> 2];
 $10 = $6 < $3;
 HEAPF32[$2 + 100 >> 2] = $10 ? $3 : $6;
 $3 = $10 ? Math_fround($3 - $5) : $4;
 if (HEAP32[$0 + 240 >> 2]) {
  HEAPF32[$0 + 64 >> 2] = Math_fround(HEAPF32[$0 + 112 >> 2] * Math_fround($3 * Math_fround($7 * HEAPF32[$0 + 128 >> 2]))) + HEAPF32[$0 + 64 >> 2];
  HEAPF32[$0 + 68 >> 2] = Math_fround(Math_fround($3 * Math_fround($8 * HEAPF32[$0 + 132 >> 2])) * HEAPF32[$0 + 116 >> 2]) + HEAPF32[$0 + 68 >> 2];
  HEAPF32[$0 + 72 >> 2] = Math_fround(Math_fround($3 * Math_fround($9 * HEAPF32[$0 + 136 >> 2])) * HEAPF32[$0 + 120 >> 2]) + HEAPF32[$0 + 72 >> 2];
  $5 = HEAPF32[$2 + 72 >> 2];
  $4 = HEAPF32[$2 + 68 >> 2];
  HEAPF32[$0 + 80 >> 2] = Math_fround(Math_fround($3 * HEAPF32[$0 + 96 >> 2]) * HEAPF32[$2 + 64 >> 2]) + HEAPF32[$0 + 80 >> 2];
  $6 = HEAPF32[$0 + 104 >> 2];
  HEAPF32[$0 + 84 >> 2] = Math_fround($4 * Math_fround($3 * HEAPF32[$0 + 100 >> 2])) + HEAPF32[$0 + 84 >> 2];
  HEAPF32[$0 + 88 >> 2] = Math_fround($5 * Math_fround($3 * $6)) + HEAPF32[$0 + 88 >> 2];
 }
 if (HEAP32[$1 + 240 >> 2]) {
  $5 = HEAPF32[$2 + 56 >> 2];
  $4 = HEAPF32[$2 + 52 >> 2];
  HEAPF32[$1 + 64 >> 2] = Math_fround(HEAPF32[$1 + 112 >> 2] * Math_fround($3 * Math_fround(HEAPF32[$2 + 48 >> 2] * HEAPF32[$1 + 128 >> 2]))) + HEAPF32[$1 + 64 >> 2];
  HEAPF32[$1 + 68 >> 2] = Math_fround(Math_fround($3 * Math_fround($4 * HEAPF32[$1 + 132 >> 2])) * HEAPF32[$1 + 116 >> 2]) + HEAPF32[$1 + 68 >> 2];
  HEAPF32[$1 + 72 >> 2] = Math_fround(Math_fround($3 * Math_fround($5 * HEAPF32[$1 + 136 >> 2])) * HEAPF32[$1 + 120 >> 2]) + HEAPF32[$1 + 72 >> 2];
  $5 = HEAPF32[$2 + 88 >> 2];
  $4 = HEAPF32[$2 + 84 >> 2];
  HEAPF32[$1 + 80 >> 2] = Math_fround(Math_fround($3 * HEAPF32[$1 + 96 >> 2]) * HEAPF32[$2 + 80 >> 2]) + HEAPF32[$1 + 80 >> 2];
  $6 = HEAPF32[$1 + 104 >> 2];
  HEAPF32[$1 + 84 >> 2] = Math_fround($4 * Math_fround($3 * HEAPF32[$1 + 100 >> 2])) + HEAPF32[$1 + 84 >> 2];
  HEAPF32[$1 + 88 >> 2] = Math_fround($5 * Math_fround($3 * $6)) + HEAPF32[$1 + 88 >> 2];
 }
 return Math_fround($3);
}
function btConvexConcaveCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__LocalTriangleSphereCastCallback__processTriangle_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0;
 $2 = global$0 - 800 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $7 = CProfileSample__CProfileSample_28char_20const__29($2 + 792 | 0, 6964);
 HEAP32[$2 + 740 >> 2] = 0;
 HEAP32[$2 + 744 >> 2] = 0;
 HEAP32[$2 + 752 >> 2] = 0;
 HEAP32[$2 + 756 >> 2] = 0;
 HEAP32[$2 + 748 >> 2] = 1065353216;
 HEAP32[$2 + 772 >> 2] = 0;
 HEAP32[$2 + 776 >> 2] = 0;
 HEAP32[$2 + 768 >> 2] = 1065353216;
 HEAP32[$2 + 780 >> 2] = 0;
 HEAP32[$2 + 784 >> 2] = 0;
 HEAP32[$2 + 788 >> 2] = 0;
 HEAP32[$2 + 732 >> 2] = 0;
 HEAP32[$2 + 736 >> 2] = 0;
 HEAP32[$2 + 728 >> 2] = 1065353216;
 HEAP32[$2 + 760 >> 2] = 0;
 HEAP32[$2 + 764 >> 2] = 0;
 HEAP32[$2 + 720 >> 2] = 0;
 HEAP32[$2 + 724 >> 2] = 0;
 HEAP32[$2 + 552 >> 2] = 6988;
 HEAP32[$2 + 716 >> 2] = HEAP32[$0 + 200 >> 2];
 $5 = HEAP32[$0 + 196 >> 2];
 btConvexInternalShape__btConvexInternalShape_28_29($2 + 496 | 0);
 HEAP32[$2 + 524 >> 2] = 0;
 HEAP32[$2 + 528 >> 2] = 0;
 HEAP32[$2 + 520 >> 2] = 1065353216;
 HEAP32[$2 + 532 >> 2] = 0;
 HEAP32[$2 + 536 >> 2] = 0;
 HEAP32[$2 + 540 >> 2] = 0;
 HEAP32[$2 + 512 >> 2] = 1065353216;
 HEAP32[$2 + 516 >> 2] = 1065353216;
 HEAP32[$2 + 496 >> 2] = 11396;
 HEAP32[$2 + 548 >> 2] = 0;
 HEAP32[$2 + 544 >> 2] = $5;
 HEAP32[$2 + 528 >> 2] = $5;
 HEAP32[$2 + 500 >> 2] = 8;
 $5 = btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($2 + 384 | 0);
 HEAP32[$2 + 388 >> 2] = 1;
 HEAP32[$2 + 384 >> 2] = 6576;
 $3 = $1;
 $4 = HEAP32[$3 + 8 >> 2];
 $1 = HEAP32[$3 + 12 >> 2];
 HEAP32[$2 + 452 >> 2] = $4;
 HEAP32[$2 + 456 >> 2] = $1;
 $4 = HEAP32[$3 + 4 >> 2];
 $1 = HEAP32[$3 >> 2];
 HEAP32[$2 + 444 >> 2] = $1;
 HEAP32[$2 + 448 >> 2] = $4;
 $1 = HEAP32[$3 + 20 >> 2];
 $4 = HEAP32[$3 + 16 >> 2];
 HEAP32[$2 + 460 >> 2] = $4;
 HEAP32[$2 + 464 >> 2] = $1;
 $4 = HEAP32[$3 + 28 >> 2];
 $1 = HEAP32[$3 + 24 >> 2];
 HEAP32[$2 + 468 >> 2] = $1;
 HEAP32[$2 + 472 >> 2] = $4;
 $1 = HEAP32[$3 + 36 >> 2];
 $4 = HEAP32[$3 + 32 >> 2];
 HEAP32[$2 + 476 >> 2] = $4;
 HEAP32[$2 + 480 >> 2] = $1;
 $4 = HEAP32[$3 + 44 >> 2];
 $1 = HEAP32[$3 + 40 >> 2];
 HEAP32[$2 + 484 >> 2] = $1;
 HEAP32[$2 + 488 >> 2] = $4;
 HEAP8[$2 + 356 | 0] = 0;
 HEAP32[$2 + 332 >> 2] = 953267991;
 $1 = btSubsimplexConvexCast__btSubsimplexConvexCast_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__29($2 + 8 | 0, $2 + 496 | 0, $2 + 384 | 0, $2 + 24 | 0);
 label$2 : {
  if (!btSubsimplexConvexCast__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29($1, $0 + 4 | 0, $0 + 68 | 0, $2 + 728 | 0, $2 + 728 | 0, $2 + 552 | 0)) {
   break label$2;
  }
  $6 = HEAPF32[$2 + 716 >> 2];
  if (!(HEAPF32[$0 + 200 >> 2] > $6)) {
   break label$2;
  }
  HEAPF32[$0 + 200 >> 2] = $6;
 }
 btConvexCast___btConvexCast_28_29($1);
 btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($5);
 btConvexShape___btConvexShape_28_29($2 + 496 | 0);
 CProfileSample___CProfileSample_28_29($7);
 $0 = $2 + 800 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBvhTriangleMeshShape__performConvexcast_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29__MyNodeOverlapCallback__processNode_28int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $3 = global$0 - 80 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $5 = HEAP32[$0 + 4 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 16 >> 2]]($5, $3 + 28 | 0, $3 + 24 | 0, $3 + 20 | 0, $3 + 16 | 0, $3 + 12 | 0, $3 + 8 | 0, $3 + 4 | 0, $3, $1);
 $11 = HEAP32[$3 + 12 >> 2] + Math_imul(HEAP32[$3 + 8 >> 2], $2) | 0;
 $14 = HEAP32[$3 + 20 >> 2];
 $5 = HEAP32[$0 + 4 >> 2];
 $13 = $5 + 12 | 0;
 $6 = HEAP32[$3 + 16 >> 2];
 $15 = HEAP32[$3 + 28 >> 2];
 $7 = $15;
 $17 = $6;
 $16 = HEAP32[$3 >> 2];
 $4 = HEAPU16[$11 + 4 >> 1];
 label$2 : {
  if (($16 | 0) == 3) {
   break label$2;
  }
  $4 = HEAP32[$11 + 8 >> 2];
 }
 $4 = $7 + Math_imul($17, $4) | 0;
 label$4 : {
  if (!$14) {
   $7 = $4 + 8 | 0;
   $8 = HEAPF32[$5 + 12 >> 2];
   $9 = Math_fround(HEAPF32[$4 + 4 >> 2] * HEAPF32[$5 + 8 >> 2]);
   $10 = Math_fround(HEAPF32[$4 >> 2] * HEAPF32[$5 + 4 >> 2]);
   break label$4;
  }
  $8 = Math_fround(HEAPF64[$4 + 16 >> 3]);
  $7 = $13;
  $9 = Math_fround(HEAPF32[$5 + 8 >> 2] * Math_fround(HEAPF64[$4 + 8 >> 3]));
  $10 = Math_fround(HEAPF32[$5 + 4 >> 2] * Math_fround(HEAPF64[$4 >> 3]));
 }
 $12 = HEAPF32[$7 >> 2];
 HEAP32[$3 + 76 >> 2] = 0;
 HEAPF32[$3 + 68 >> 2] = $9;
 HEAPF32[$3 + 72 >> 2] = $12 * $8;
 HEAPF32[$3 + 64 >> 2] = $10;
 $7 = $6;
 if (($16 | 0) != 3) {
  $4 = HEAP32[$11 + 4 >> 2];
 } else {
  $4 = HEAPU16[$11 + 2 >> 1];
 }
 $4 = Math_imul($7, $4) + $15 | 0;
 label$8 : {
  if ($14) {
   $8 = Math_fround(HEAPF64[$4 + 16 >> 3]);
   $7 = $13;
   $9 = Math_fround(HEAPF32[$5 + 8 >> 2] * Math_fround(HEAPF64[$4 + 8 >> 3]));
   $10 = Math_fround(HEAPF32[$5 + 4 >> 2] * Math_fround(HEAPF64[$4 >> 3]));
   break label$8;
  }
  $7 = $4 + 8 | 0;
  $8 = HEAPF32[$5 + 12 >> 2];
  $9 = Math_fround(HEAPF32[$4 + 4 >> 2] * HEAPF32[$5 + 8 >> 2]);
  $10 = Math_fround(HEAPF32[$4 >> 2] * HEAPF32[$5 + 4 >> 2]);
 }
 $12 = HEAPF32[$7 >> 2];
 HEAP32[$3 + 60 >> 2] = 0;
 HEAPF32[$3 + 52 >> 2] = $9;
 HEAPF32[$3 + 56 >> 2] = $12 * $8;
 HEAPF32[$3 + 48 >> 2] = $10;
 if (($16 | 0) != 3) {
  $4 = HEAP32[$11 >> 2];
 } else {
  $4 = HEAPU16[$11 >> 1];
 }
 $6 = Math_imul($6, $4) + $15 | 0;
 label$12 : {
  if ($14) {
   $8 = Math_fround(HEAPF64[$6 + 16 >> 3]);
   $9 = Math_fround(HEAPF32[$5 + 8 >> 2] * Math_fround(HEAPF64[$6 + 8 >> 3]));
   $10 = Math_fround(HEAPF32[$5 + 4 >> 2] * Math_fround(HEAPF64[$6 >> 3]));
   break label$12;
  }
  $13 = $6 + 8 | 0;
  $8 = HEAPF32[$5 + 12 >> 2];
  $9 = Math_fround(HEAPF32[$6 + 4 >> 2] * HEAPF32[$5 + 8 >> 2]);
  $10 = Math_fround(HEAPF32[$6 >> 2] * HEAPF32[$5 + 4 >> 2]);
 }
 $12 = HEAPF32[$13 >> 2];
 HEAP32[$3 + 44 >> 2] = 0;
 HEAPF32[$3 + 36 >> 2] = $9;
 HEAPF32[$3 + 32 >> 2] = $10;
 HEAPF32[$3 + 40 >> 2] = $12 * $8;
 $5 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, $3 + 32 | 0, $1, $2);
 $5 = HEAP32[$0 + 4 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 24 >> 2]]($5, $1);
 $0 = $3 + 80 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionWorld__serializeCollisionObjects_28btSerializer__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $2 = global$0 - 96 | 0;
 $6 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP8[$2 + 92 | 0] = 1;
 HEAP32[$2 + 60 >> 2] = 0;
 HEAP32[$2 + 64 >> 2] = 0;
 HEAP8[$2 + 52 | 0] = 1;
 HEAP32[$2 + 48 >> 2] = 0;
 HEAP8[$2 + 72 | 0] = 1;
 HEAP32[$2 + 40 >> 2] = 0;
 HEAP32[$2 + 44 >> 2] = 0;
 HEAP32[$2 + 68 >> 2] = 0;
 HEAP32[$2 + 88 >> 2] = 0;
 HEAP32[$2 + 80 >> 2] = 0;
 HEAP32[$2 + 84 >> 2] = 0;
 HEAP32[$2 + 28 >> 2] = 0;
 HEAP8[$2 + 32 | 0] = 1;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP32[$2 + 24 >> 2] = 0;
 $6 = HEAP32[$0 + 8 >> 2];
 label$2 : {
  if (($6 | 0) < 1) {
   break label$2;
  }
  while (1) {
   $5 = HEAP32[HEAP32[HEAP32[$0 + 16 >> 2] + ($7 << 2) >> 2] + 192 >> 2];
   HEAP32[$2 + 12 >> 2] = $5;
   $4 = ($5 << 15 ^ -1) + $5 | 0;
   $4 = Math_imul($4 ^ $4 >>> 10, 9);
   $4 = $4 ^ $4 >>> 6;
   $4 = $4 + ($4 << 11 ^ -1) | 0;
   $4 = $8 + -1 & ($4 ^ $4 >>> 16);
   label$4 : {
    label$5 : {
     if ($4 >>> 0 >= $3 >>> 0) {
      break label$5;
     }
     $3 = HEAP32[HEAP32[$2 + 28 >> 2] + ($4 << 2) >> 2];
     if (($3 | 0) == -1) {
      break label$5;
     }
     $8 = HEAP32[$2 + 48 >> 2];
     $4 = HEAP32[$2 + 88 >> 2];
     while (1) {
      if (HEAP32[($3 << 3) + $4 >> 2] != ($5 | 0)) {
       $3 = HEAP32[($3 << 2) + $8 >> 2];
       if (($3 | 0) != -1) {
        continue;
       }
       break label$5;
      }
      break;
     }
     if (HEAP32[$2 + 68 >> 2]) {
      break label$4;
     }
    }
    HEAP32[$2 >> 2] = $5;
    btHashMap_btHashPtr_2c_20btCollisionShape____insert_28btHashPtr_20const__2c_20btCollisionShape__20const__29($2 + 16 | 0, $2, $2 + 12 | 0);
    $3 = HEAP32[$2 + 12 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 60 >> 2]]($3, $1);
    $6 = HEAP32[$0 + 8 >> 2];
   }
   $7 = $7 + 1 | 0;
   if (($7 | 0) < ($6 | 0)) {
    $3 = HEAP32[$2 + 20 >> 2];
    $8 = HEAP32[$2 + 64 >> 2];
    continue;
   }
   break;
  }
  $3 = 0;
  if (($6 | 0) <= 0) {
   break label$2;
  }
  while (1) {
   $5 = HEAP32[HEAP32[$0 + 16 >> 2] + ($3 << 2) >> 2];
   $4 = HEAP32[$5 + 252 >> 2];
   if (!(($4 | 0) != 1 ? ($4 | 0) != 64 : 0)) {
    FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 24 >> 2]]($5, $1);
    $6 = HEAP32[$0 + 8 >> 2];
   }
   $3 = $3 + 1 | 0;
   if (($3 | 0) < ($6 | 0)) {
    continue;
   }
   break;
  }
 }
 $3 = HEAP32[$2 + 88 >> 2];
 if ($3) {
  if (HEAPU8[$2 + 92 | 0]) {
   btAlignedFreeInternal_28void__29($3);
  }
  HEAP32[$2 + 88 >> 2] = 0;
 }
 HEAP32[$2 + 88 >> 2] = 0;
 HEAP8[$2 + 92 | 0] = 1;
 HEAP32[$2 + 80 >> 2] = 0;
 HEAP32[$2 + 84 >> 2] = 0;
 $3 = HEAP32[$2 + 68 >> 2];
 if ($3) {
  if (HEAPU8[$2 + 72 | 0]) {
   btAlignedFreeInternal_28void__29($3);
  }
  HEAP32[$2 + 68 >> 2] = 0;
 }
 HEAP32[$2 + 68 >> 2] = 0;
 HEAP8[$2 + 72 | 0] = 1;
 HEAP32[$2 + 60 >> 2] = 0;
 HEAP32[$2 + 64 >> 2] = 0;
 $3 = HEAP32[$2 + 48 >> 2];
 if ($3) {
  if (HEAPU8[$2 + 52 | 0]) {
   btAlignedFreeInternal_28void__29($3);
  }
  HEAP32[$2 + 48 >> 2] = 0;
 }
 HEAP32[$2 + 48 >> 2] = 0;
 HEAP8[$2 + 52 | 0] = 1;
 HEAP32[$2 + 40 >> 2] = 0;
 HEAP32[$2 + 44 >> 2] = 0;
 $3 = HEAP32[$2 + 28 >> 2];
 if ($3) {
  if (HEAPU8[$2 + 32 | 0]) {
   btAlignedFreeInternal_28void__29($3);
  }
  HEAP32[$2 + 28 >> 2] = 0;
 }
 $0 = $2 + 96 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBvhTriangleMeshShape__performRaycast_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29__MyNodeOverlapCallback__processNode_28int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $3 = global$0 - 80 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $5 = HEAP32[$0 + 4 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 16 >> 2]]($5, $3 + 28 | 0, $3 + 24 | 0, $3 + 20 | 0, $3 + 16 | 0, $3 + 12 | 0, $3 + 8 | 0, $3 + 4 | 0, $3, $1);
 $11 = HEAP32[$3 + 12 >> 2] + Math_imul(HEAP32[$3 + 8 >> 2], $2) | 0;
 $14 = HEAP32[$3 + 20 >> 2];
 $5 = HEAP32[$0 + 4 >> 2];
 $13 = $5 + 12 | 0;
 $6 = HEAP32[$3 + 16 >> 2];
 $15 = HEAP32[$3 + 28 >> 2];
 $7 = $15;
 $17 = $6;
 $16 = HEAP32[$3 >> 2];
 $4 = HEAPU16[$11 + 4 >> 1];
 label$2 : {
  if (($16 | 0) == 3) {
   break label$2;
  }
  $4 = HEAP32[$11 + 8 >> 2];
 }
 $4 = $7 + Math_imul($17, $4) | 0;
 label$4 : {
  if (!$14) {
   $7 = $4 + 8 | 0;
   $8 = HEAPF32[$5 + 12 >> 2];
   $9 = Math_fround(HEAPF32[$4 + 4 >> 2] * HEAPF32[$5 + 8 >> 2]);
   $10 = Math_fround(HEAPF32[$4 >> 2] * HEAPF32[$5 + 4 >> 2]);
   break label$4;
  }
  $8 = Math_fround(HEAPF64[$4 + 16 >> 3]);
  $7 = $13;
  $9 = Math_fround(HEAPF32[$5 + 8 >> 2] * Math_fround(HEAPF64[$4 + 8 >> 3]));
  $10 = Math_fround(HEAPF32[$5 + 4 >> 2] * Math_fround(HEAPF64[$4 >> 3]));
 }
 $12 = HEAPF32[$7 >> 2];
 HEAP32[$3 + 76 >> 2] = 0;
 HEAPF32[$3 + 68 >> 2] = $9;
 HEAPF32[$3 + 72 >> 2] = $12 * $8;
 HEAPF32[$3 + 64 >> 2] = $10;
 $7 = $6;
 if (($16 | 0) != 3) {
  $4 = HEAP32[$11 + 4 >> 2];
 } else {
  $4 = HEAPU16[$11 + 2 >> 1];
 }
 $4 = Math_imul($7, $4) + $15 | 0;
 label$8 : {
  if ($14) {
   $8 = Math_fround(HEAPF64[$4 + 16 >> 3]);
   $7 = $13;
   $9 = Math_fround(HEAPF32[$5 + 8 >> 2] * Math_fround(HEAPF64[$4 + 8 >> 3]));
   $10 = Math_fround(HEAPF32[$5 + 4 >> 2] * Math_fround(HEAPF64[$4 >> 3]));
   break label$8;
  }
  $7 = $4 + 8 | 0;
  $8 = HEAPF32[$5 + 12 >> 2];
  $9 = Math_fround(HEAPF32[$4 + 4 >> 2] * HEAPF32[$5 + 8 >> 2]);
  $10 = Math_fround(HEAPF32[$4 >> 2] * HEAPF32[$5 + 4 >> 2]);
 }
 $12 = HEAPF32[$7 >> 2];
 HEAP32[$3 + 60 >> 2] = 0;
 HEAPF32[$3 + 52 >> 2] = $9;
 HEAPF32[$3 + 56 >> 2] = $12 * $8;
 HEAPF32[$3 + 48 >> 2] = $10;
 if (($16 | 0) != 3) {
  $4 = HEAP32[$11 >> 2];
 } else {
  $4 = HEAPU16[$11 >> 1];
 }
 $6 = Math_imul($6, $4) + $15 | 0;
 label$12 : {
  if ($14) {
   $8 = Math_fround(HEAPF64[$6 + 16 >> 3]);
   $9 = Math_fround(HEAPF32[$5 + 8 >> 2] * Math_fround(HEAPF64[$6 + 8 >> 3]));
   $10 = Math_fround(HEAPF32[$5 + 4 >> 2] * Math_fround(HEAPF64[$6 >> 3]));
   break label$12;
  }
  $13 = $6 + 8 | 0;
  $8 = HEAPF32[$5 + 12 >> 2];
  $9 = Math_fround(HEAPF32[$6 + 4 >> 2] * HEAPF32[$5 + 8 >> 2]);
  $10 = Math_fround(HEAPF32[$6 >> 2] * HEAPF32[$5 + 4 >> 2]);
 }
 $12 = HEAPF32[$13 >> 2];
 HEAP32[$3 + 44 >> 2] = 0;
 HEAPF32[$3 + 36 >> 2] = $9;
 HEAPF32[$3 + 32 >> 2] = $10;
 HEAPF32[$3 + 40 >> 2] = $12 * $8;
 $5 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, $3 + 32 | 0, $1, $2);
 $5 = HEAP32[$0 + 4 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 24 >> 2]]($5, $1);
 $0 = $3 + 80 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_btCompoundShapeChild___push_back_28btCompoundShapeChild_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $6 = HEAP32[$0 + 4 >> 2];
 label$1 : {
  if (($6 | 0) != HEAP32[$0 + 8 >> 2]) {
   break label$1;
  }
  $7 = $6 ? $6 << 1 : 1;
  if (($6 | 0) >= ($7 | 0)) {
   break label$1;
  }
  if ($7) {
   $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($7, 80), 16);
   $6 = HEAP32[$0 + 4 >> 2];
  }
  if (($6 | 0) >= 1) {
   while (1) {
    $3 = Math_imul($8, 80);
    $2 = $9 + $3 | 0;
    $3 = HEAP32[$0 + 12 >> 2] + $3 | 0;
    $4 = HEAP32[$3 >> 2];
    $5 = HEAP32[$3 + 4 >> 2];
    HEAP32[$2 >> 2] = $4;
    HEAP32[$2 + 4 >> 2] = $5;
    $4 = HEAP32[$3 + 12 >> 2];
    $5 = HEAP32[$3 + 8 >> 2];
    HEAP32[$2 + 8 >> 2] = $5;
    HEAP32[$2 + 12 >> 2] = $4;
    $5 = HEAP32[$3 + 28 >> 2];
    $4 = HEAP32[$3 + 24 >> 2];
    HEAP32[$2 + 24 >> 2] = $4;
    HEAP32[$2 + 28 >> 2] = $5;
    $4 = HEAP32[$3 + 20 >> 2];
    $5 = HEAP32[$3 + 16 >> 2];
    HEAP32[$2 + 16 >> 2] = $5;
    HEAP32[$2 + 20 >> 2] = $4;
    $5 = HEAP32[$3 + 44 >> 2];
    $4 = HEAP32[$3 + 40 >> 2];
    HEAP32[$2 + 40 >> 2] = $4;
    HEAP32[$2 + 44 >> 2] = $5;
    $4 = HEAP32[$3 + 36 >> 2];
    $5 = HEAP32[$3 + 32 >> 2];
    HEAP32[$2 + 32 >> 2] = $5;
    HEAP32[$2 + 36 >> 2] = $4;
    $5 = HEAP32[$3 + 60 >> 2];
    $4 = HEAP32[$3 + 56 >> 2];
    HEAP32[$2 + 56 >> 2] = $4;
    HEAP32[$2 + 60 >> 2] = $5;
    $4 = HEAP32[$3 + 52 >> 2];
    $5 = HEAP32[$3 + 48 >> 2];
    HEAP32[$2 + 48 >> 2] = $5;
    HEAP32[$2 + 52 >> 2] = $4;
    $5 = HEAP32[$3 + 68 >> 2];
    $4 = HEAP32[$3 + 64 >> 2];
    HEAP32[$2 + 64 >> 2] = $4;
    HEAP32[$2 + 68 >> 2] = $5;
    $4 = HEAP32[$3 + 76 >> 2];
    $5 = HEAP32[$3 + 72 >> 2];
    HEAP32[$2 + 72 >> 2] = $5;
    HEAP32[$2 + 76 >> 2] = $4;
    $8 = $8 + 1 | 0;
    if (($8 | 0) != ($6 | 0)) {
     continue;
    }
    break;
   }
  }
  $2 = HEAP32[$0 + 12 >> 2];
  if ($2) {
   if (HEAPU8[$0 + 16 | 0]) {
    btAlignedFreeInternal_28void__29($2);
   }
   HEAP32[$0 + 12 >> 2] = 0;
  }
  HEAP32[$0 + 12 >> 2] = $9;
  HEAP8[$0 + 16 | 0] = 1;
  HEAP32[$0 + 8 >> 2] = $7;
  $6 = HEAP32[$0 + 4 >> 2];
 }
 $3 = $1;
 $4 = HEAP32[$3 >> 2];
 $5 = HEAP32[$3 + 4 >> 2];
 $2 = HEAP32[$0 + 12 >> 2] + Math_imul($6, 80) | 0;
 HEAP32[$2 >> 2] = $4;
 HEAP32[$2 + 4 >> 2] = $5;
 $4 = HEAP32[$3 + 12 >> 2];
 $5 = HEAP32[$3 + 8 >> 2];
 HEAP32[$2 + 8 >> 2] = $5;
 HEAP32[$2 + 12 >> 2] = $4;
 $5 = HEAP32[$3 + 28 >> 2];
 $4 = HEAP32[$3 + 24 >> 2];
 HEAP32[$2 + 24 >> 2] = $4;
 HEAP32[$2 + 28 >> 2] = $5;
 $4 = HEAP32[$3 + 20 >> 2];
 $5 = HEAP32[$3 + 16 >> 2];
 HEAP32[$2 + 16 >> 2] = $5;
 HEAP32[$2 + 20 >> 2] = $4;
 $5 = HEAP32[$3 + 44 >> 2];
 $4 = HEAP32[$3 + 40 >> 2];
 HEAP32[$2 + 40 >> 2] = $4;
 HEAP32[$2 + 44 >> 2] = $5;
 $4 = HEAP32[$3 + 36 >> 2];
 $5 = HEAP32[$3 + 32 >> 2];
 HEAP32[$2 + 32 >> 2] = $5;
 HEAP32[$2 + 36 >> 2] = $4;
 $5 = HEAP32[$3 + 60 >> 2];
 $4 = HEAP32[$3 + 56 >> 2];
 HEAP32[$2 + 56 >> 2] = $4;
 HEAP32[$2 + 60 >> 2] = $5;
 $4 = HEAP32[$3 + 52 >> 2];
 $5 = HEAP32[$3 + 48 >> 2];
 HEAP32[$2 + 48 >> 2] = $5;
 HEAP32[$2 + 52 >> 2] = $4;
 $5 = HEAP32[$3 + 76 >> 2];
 $4 = HEAP32[$3 + 72 >> 2];
 HEAP32[$2 + 72 >> 2] = $4;
 HEAP32[$2 + 76 >> 2] = $5;
 $4 = HEAP32[$3 + 68 >> 2];
 $5 = HEAP32[$3 + 64 >> 2];
 HEAP32[$2 + 64 >> 2] = $5;
 HEAP32[$2 + 68 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
}
function btHashedOverlappingPairCache__sortOverlappingPairs_28btDispatcher__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $3 = global$0 - 32 | 0;
 $7 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$3 + 20 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 + 16 >> 2] = 0;
 HEAP8[$3 + 24 | 0] = 1;
 label$2 : {
  if (HEAP32[$0 + 8 >> 2] < 1) {
   break label$2;
  }
  while (1) {
   $8 = HEAP32[$0 + 16 >> 2] + ($10 << 4) | 0;
   label$4 : {
    if (($2 | 0) != ($5 | 0)) {
     break label$4;
    }
    $9 = $5 ? $5 << 1 : 1;
    if (($5 | 0) >= ($9 | 0)) {
     $2 = $5;
     break label$4;
    }
    $6 = 0;
    $7 = 0;
    if ($9) {
     $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($9 << 4, 16);
     $5 = HEAP32[$3 + 12 >> 2];
    }
    if (($5 | 0) >= 1) {
     while (1) {
      $4 = $6 << 4;
      $2 = $7 + $4 | 0;
      $4 = HEAP32[$3 + 20 >> 2] + $4 | 0;
      HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$2 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
      HEAP32[$2 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
      HEAP32[$2 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
      $6 = $6 + 1 | 0;
      if (($6 | 0) != ($5 | 0)) {
       continue;
      }
      break;
     }
    }
    $2 = HEAP32[$3 + 20 >> 2];
    if ($2) {
     if (HEAPU8[$3 + 24 | 0]) {
      btAlignedFreeInternal_28void__29($2);
     }
     HEAP32[$3 + 20 >> 2] = 0;
    }
    HEAP32[$3 + 20 >> 2] = $7;
    HEAP8[$3 + 24 | 0] = 1;
    HEAP32[$3 + 16 >> 2] = $9;
    $2 = HEAP32[$3 + 12 >> 2];
   }
   $2 = HEAP32[$3 + 20 >> 2] + ($2 << 4) | 0;
   HEAP32[$2 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$2 + 4 >> 2] = HEAP32[$8 + 4 >> 2];
   HEAP32[$2 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
   HEAP32[$2 + 12 >> 2] = HEAP32[$8 + 12 >> 2];
   $6 = HEAP32[$3 + 12 >> 2];
   $2 = $6 + 1 | 0;
   HEAP32[$3 + 12 >> 2] = $2;
   $10 = $10 + 1 | 0;
   if (($10 | 0) < HEAP32[$0 + 8 >> 2]) {
    $5 = HEAP32[$3 + 16 >> 2];
    continue;
   }
   break;
  }
  $4 = 0;
  if (($6 | 0) < 0) {
   break label$2;
  }
  while (1) {
   $2 = HEAP32[$3 + 20 >> 2] + ($4 << 4) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, HEAP32[$2 >> 2], HEAP32[$2 + 4 >> 2], $1) | 0;
   $4 = $4 + 1 | 0;
   $2 = HEAP32[$3 + 12 >> 2];
   if (($4 | 0) < ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 if (HEAP32[$0 + 52 >> 2] >= 1) {
  $4 = HEAP32[$0 + 60 >> 2];
  $2 = 0;
  while (1) {
   HEAP32[($2 << 2) + $4 >> 2] = -1;
   $2 = $2 + 1 | 0;
   if (($2 | 0) < HEAP32[$0 + 52 >> 2]) {
    continue;
   }
   break;
  }
  $2 = HEAP32[$3 + 12 >> 2];
 }
 if (($2 | 0) >= 2) {
  void_20btAlignedObjectArray_btBroadphasePair___quickSortInternal_btBroadphasePairSortPredicate__28btBroadphasePairSortPredicate_20const__2c_20int_2c_20int_29($3 + 8 | 0, $3, 0, $2 + -1 | 0);
  $2 = HEAP32[$3 + 12 >> 2];
 }
 $4 = HEAP32[$3 + 20 >> 2];
 if (($2 | 0) >= 1) {
  $2 = 0;
  while (1) {
   $4 = ($2 << 4) + $4 | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 >> 2], HEAP32[$4 + 4 >> 2]) | 0;
   $4 = HEAP32[$3 + 20 >> 2];
   $2 = $2 + 1 | 0;
   if (($2 | 0) < HEAP32[$3 + 12 >> 2]) {
    continue;
   }
   break;
  }
 }
 if ($4) {
  if (HEAPU8[$3 + 24 | 0]) {
   btAlignedFreeInternal_28void__29($4);
  }
  HEAP32[$3 + 20 >> 2] = 0;
 }
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHashedOverlappingPairCache__removeOverlappingPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__2c_20btDispatcher__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 HEAP32[5678] = HEAP32[5678] + 1;
 $4 = HEAP32[$1 + 12 >> 2] > HEAP32[$2 + 12 >> 2];
 $7 = $4 ? $1 : $2;
 $6 = HEAP32[$7 + 12 >> 2];
 $8 = $4 ? $2 : $1;
 $4 = HEAP32[$8 + 12 >> 2];
 $1 = $4 | $6 << 16;
 $1 = $1 + ($1 << 15 ^ -1) | 0;
 $1 = Math_imul($1 ^ $1 >>> 10, 9);
 $1 = $1 ^ $1 >>> 6;
 $1 = $1 + ($1 << 11 ^ -1) | 0;
 $9 = HEAP32[$0 + 12 >> 2] + -1 & ($1 ^ $1 >>> 16);
 $1 = HEAP32[HEAP32[$0 + 40 >> 2] + ($9 << 2) >> 2];
 label$1 : {
  if (($1 | 0) == -1) {
   break label$1;
  }
  $5 = HEAP32[$0 + 16 >> 2];
  while (1) {
   $2 = ($1 << 4) + $5 | 0;
   if (!(HEAP32[HEAP32[$2 + 4 >> 2] + 12 >> 2] == ($6 | 0) ? HEAP32[HEAP32[$2 >> 2] + 12 >> 2] == ($4 | 0) : 0)) {
    $1 = HEAP32[HEAP32[$0 + 60 >> 2] + ($1 << 2) >> 2];
    if (($1 | 0) != -1) {
     continue;
    }
    break label$1;
   }
   break;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $2, $3);
  $10 = HEAP32[(($1 << 4) + $5 | 0) + 12 >> 2];
  $4 = HEAP32[$0 + 60 >> 2];
  label$5 : {
   label$6 : {
    $6 = HEAP32[$0 + 40 >> 2] + ($9 << 2) | 0;
    $1 = HEAP32[$6 >> 2];
    $2 = $2 - HEAP32[$0 + 16 >> 2] >> 4;
    if (($1 | 0) == ($2 | 0)) {
     $1 = HEAP32[($2 << 2) + $4 >> 2];
     break label$6;
    }
    while (1) {
     $5 = $1;
     $1 = HEAP32[($1 << 2) + $4 >> 2];
     if (($2 | 0) != ($1 | 0)) {
      continue;
     }
     break;
    }
    $1 = HEAP32[($2 << 2) + $4 >> 2];
    if (($5 | 0) == -1) {
     break label$6;
    }
    HEAP32[($5 << 2) + $4 >> 2] = $1;
    break label$5;
   }
   HEAP32[$6 >> 2] = $1;
  }
  $4 = HEAP32[$0 + 8 >> 2] + -1 | 0;
  $1 = HEAP32[$0 + 68 >> 2];
  if ($1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $8, $7, $3) | 0;
  }
  if (($2 | 0) == ($4 | 0)) {
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -1;
   return $10 | 0;
  }
  $5 = HEAP32[$0 + 60 >> 2];
  label$11 : {
   label$12 : {
    $9 = HEAP32[$0 + 16 >> 2];
    $3 = $9 + ($4 << 4) | 0;
    $1 = HEAP32[HEAP32[$3 + 4 >> 2] + 12 >> 2] << 16 | HEAP32[HEAP32[$3 >> 2] + 12 >> 2];
    $1 = $1 + ($1 << 15 ^ -1) | 0;
    $1 = Math_imul($1 ^ $1 >>> 10, 9);
    $1 = $1 ^ $1 >>> 6;
    $1 = $1 + ($1 << 11 ^ -1) | 0;
    $7 = HEAP32[$0 + 12 >> 2] + -1 & ($1 ^ $1 >>> 16);
    $8 = HEAP32[$0 + 40 >> 2] + ($7 << 2) | 0;
    $1 = HEAP32[$8 >> 2];
    if (($4 | 0) == ($1 | 0)) {
     $1 = HEAP32[($4 << 2) + $5 >> 2];
     break label$12;
    }
    while (1) {
     $6 = $1;
     $1 = HEAP32[($1 << 2) + $5 >> 2];
     if (($4 | 0) != ($1 | 0)) {
      continue;
     }
     break;
    }
    $1 = HEAP32[($4 << 2) + $5 >> 2];
    if (($6 | 0) == -1) {
     break label$12;
    }
    HEAP32[($6 << 2) + $5 >> 2] = $1;
    break label$11;
   }
   HEAP32[$8 >> 2] = $1;
  }
  $5 = HEAP32[$3 + 4 >> 2];
  $6 = HEAP32[$3 >> 2];
  $1 = ($2 << 4) + $9 | 0;
  HEAP32[$1 >> 2] = $6;
  HEAP32[$1 + 4 >> 2] = $5;
  $6 = HEAP32[$3 + 12 >> 2];
  $5 = HEAP32[$3 + 8 >> 2];
  HEAP32[$1 + 8 >> 2] = $5;
  HEAP32[$1 + 12 >> 2] = $6;
  $1 = HEAP32[$0 + 40 >> 2] + ($7 << 2) | 0;
  HEAP32[HEAP32[$0 + 60 >> 2] + ($2 << 2) >> 2] = HEAP32[$1 >> 2];
  HEAP32[$1 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -1;
 }
 return $10 | 0;
}
function btTriangleMeshShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0);
 $13 = HEAPF32[$0 + 28 >> 2];
 $21 = HEAPF32[$0 + 44 >> 2];
 $15 = HEAPF32[$0 + 24 >> 2];
 $22 = HEAPF32[$0 + 40 >> 2];
 $6 = HEAPF32[$0 + 20 >> 2];
 $16 = HEAPF32[$0 + 36 >> 2];
 $23 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $24 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $25 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $26 = HEAPF32[$1 + 52 >> 2];
 $7 = HEAPF32[$1 + 24 >> 2];
 $8 = HEAPF32[$1 + 20 >> 2];
 $14 = HEAPF32[$1 + 56 >> 2];
 $9 = HEAPF32[$0 + 24 >> 2];
 $10 = HEAPF32[$0 + 40 >> 2];
 $27 = HEAPF32[$0 + 28 >> 2];
 $28 = HEAPF32[$0 + 44 >> 2];
 $11 = HEAPF32[$1 + 40 >> 2];
 $4 = HEAPF32[$1 + 36 >> 2];
 $29 = HEAPF32[$1 + 48 >> 2];
 $17 = HEAPF32[$1 + 8 >> 2];
 $18 = HEAPF32[$1 >> 2];
 $19 = HEAPF32[$1 + 4 >> 2];
 $20 = HEAPF32[$1 + 16 >> 2];
 $12 = HEAPF32[$0 + 20 >> 2];
 $30 = HEAPF32[$0 + 36 >> 2];
 $5 = HEAPF32[$1 + 32 >> 2];
 HEAP32[$2 + 12 >> 2] = 0;
 $12 = Math_fround(Math_fround($30 + $12) * Math_fround(.5));
 $9 = Math_fround(Math_fround($10 + $9) * Math_fround(.5));
 $10 = Math_fround(Math_fround($28 + $27) * Math_fround(.5));
 $14 = Math_fround($14 + Math_fround(Math_fround(Math_fround($5 * $12) + Math_fround($4 * $9)) + Math_fround($11 * $10)));
 $6 = Math_fround($23 + Math_fround(Math_fround($16 - $6) * Math_fround(.5)));
 $16 = Math_fround($6 * Math_fround(Math_abs($5)));
 $5 = Math_fround($24 + Math_fround(Math_fround($22 - $15) * Math_fround(.5)));
 $15 = Math_fround($16 + Math_fround($5 * Math_fround(Math_abs($4))));
 $4 = Math_fround($25 + Math_fround(Math_fround($21 - $13) * Math_fround(.5)));
 $11 = Math_fround($15 + Math_fround($4 * Math_fround(Math_abs($11))));
 HEAPF32[$2 + 8 >> 2] = $14 - $11;
 $13 = Math_fround($26 + Math_fround(Math_fround(Math_fround($12 * $20) + Math_fround($9 * $8)) + Math_fround($10 * $7)));
 $7 = Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_abs($20))) + Math_fround($5 * Math_fround(Math_abs($8)))) + Math_fround($4 * Math_fround(Math_abs($7))));
 HEAPF32[$2 + 4 >> 2] = $13 - $7;
 $8 = Math_fround($29 + Math_fround(Math_fround(Math_fround($12 * $18) + Math_fround($9 * $19)) + Math_fround($10 * $17)));
 $4 = Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_abs($18))) + Math_fround($5 * Math_fround(Math_abs($19)))) + Math_fround($4 * Math_fround(Math_abs($17))));
 HEAPF32[$2 >> 2] = $8 - $4;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAPF32[$3 + 8 >> 2] = $11 + $14;
 HEAPF32[$3 + 4 >> 2] = $7 + $13;
 HEAPF32[$3 >> 2] = $4 + $8;
}
function btGeneric6DofSpring2Constraint__calculateLinearInfo_28_29($0) {
 var $1 = Math_fround(0), $2 = Math_fround(0), $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0;
 HEAP32[$0 + 1440 >> 2] = 0;
 $8 = HEAPF32[$0 + 1256 >> 2];
 $9 = HEAPF32[$0 + 1276 >> 2];
 $10 = HEAPF32[$0 + 1260 >> 2];
 $11 = HEAPF32[$0 + 1272 >> 2];
 $16 = Math_fround(Math_fround($8 * $9) - Math_fround($10 * $11));
 $2 = HEAPF32[$0 + 1236 >> 2];
 $3 = HEAPF32[$0 + 1240 >> 2];
 $12 = HEAPF32[$0 + 1268 >> 2];
 $13 = HEAPF32[$0 + 1252 >> 2];
 $17 = Math_fround(Math_fround($10 * $12) - Math_fround($9 * $13));
 $6 = Math_fround(Math_fround($11 * $13) - Math_fround($8 * $12));
 $5 = HEAPF32[$0 + 1244 >> 2];
 $1 = Math_fround(Math_fround(1) / Math_fround(Math_fround(Math_fround($16 * $2) + Math_fround($3 * $17)) + Math_fround($6 * $5)));
 $14 = Math_fround(HEAPF32[$0 + 1356 >> 2] - HEAPF32[$0 + 1292 >> 2]);
 $15 = Math_fround(HEAPF32[$0 + 1348 >> 2] - HEAPF32[$0 + 1284 >> 2]);
 $7 = Math_fround($15 * Math_fround($6 * $1));
 $6 = Math_fround(HEAPF32[$0 + 1352 >> 2] - HEAPF32[$0 + 1288 >> 2]);
 $7 = Math_fround(Math_fround($14 * Math_fround(Math_fround(Math_fround($8 * $2) - Math_fround($13 * $3)) * $1)) + Math_fround($7 + Math_fround($6 * Math_fround(Math_fround(Math_fround($12 * $3) - Math_fround($11 * $2)) * $1))));
 HEAPF32[$0 + 1436 >> 2] = $7;
 $2 = Math_fround(Math_fround($14 * Math_fround(Math_fround(Math_fround($13 * $5) - Math_fround($10 * $2)) * $1)) + Math_fround(Math_fround($15 * Math_fround($17 * $1)) + Math_fround($6 * Math_fround(Math_fround(Math_fround($9 * $2) - Math_fround($12 * $5)) * $1))));
 HEAPF32[$0 + 1432 >> 2] = $2;
 $1 = Math_fround(Math_fround($14 * Math_fround(Math_fround(Math_fround($10 * $3) - Math_fround($8 * $5)) * $1)) + Math_fround(Math_fround($15 * Math_fround($16 * $1)) + Math_fround($6 * Math_fround(Math_fround(Math_fround($11 * $5) - Math_fround($9 * $3)) * $1))));
 HEAPF32[$0 + 1428 >> 2] = $1;
 HEAPF32[$0 + 940 >> 2] = $1;
 $3 = HEAPF32[$0 + 680 >> 2];
 $5 = HEAPF32[$0 + 696 >> 2];
 label$1 : {
  if (!!($3 > $5)) {
   HEAP32[$0 + 908 >> 2] = 0;
   break label$1;
  }
  HEAPF32[$0 + 908 >> 2] = $1 - $3;
  $4 = 3;
  if ($3 == $5) {
   break label$1;
  }
  HEAPF32[$0 + 924 >> 2] = $1 - $5;
  $4 = 4;
 }
 HEAPF32[$0 + 944 >> 2] = $2;
 HEAP32[$0 + 956 >> 2] = $4;
 $1 = HEAPF32[$0 + 684 >> 2];
 $3 = HEAPF32[$0 + 700 >> 2];
 label$3 : {
  if (!($1 > $3)) {
   HEAPF32[$0 + 912 >> 2] = $2 - $1;
   $4 = 3;
   if ($1 == $3) {
    break label$3;
   }
   HEAPF32[$0 + 928 >> 2] = $2 - $3;
   $4 = 4;
   break label$3;
  }
  HEAP32[$0 + 912 >> 2] = 0;
  $4 = 0;
 }
 HEAPF32[$0 + 948 >> 2] = $7;
 HEAP32[$0 + 960 >> 2] = $4;
 $18 = $0;
 $1 = HEAPF32[$0 + 688 >> 2];
 $2 = HEAPF32[$0 + 704 >> 2];
 label$5 : {
  if (!($1 > $2)) {
   HEAPF32[$0 + 916 >> 2] = $7 - $1;
   $4 = 3;
   if ($1 == $2) {
    break label$5;
   }
   HEAPF32[$0 + 932 >> 2] = $7 - $2;
   $4 = 4;
   break label$5;
  }
  HEAP32[$0 + 916 >> 2] = 0;
  $4 = 0;
 }
 HEAP32[$18 + 964 >> 2] = $4;
}
function btRigidBody__computeGyroscopicForceExplicit_28float_29_20const($0, $1, $2) {
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0);
 $6 = HEAPF32[$1 + 396 >> 2];
 $12 = HEAPF32[$1 + 44 >> 2];
 $14 = HEAPF32[$1 + 40 >> 2];
 $15 = HEAPF32[$1 + 36 >> 2];
 $4 = HEAPF32[$1 + 392 >> 2];
 $16 = HEAPF32[$1 + 28 >> 2];
 $17 = HEAPF32[$1 + 12 >> 2];
 $3 = HEAPF32[$1 + 464 >> 2];
 $18 = HEAPF32[$1 + 24 >> 2];
 $10 = HEAPF32[$1 + 8 >> 2];
 $13 = HEAPF32[$1 + 460 >> 2];
 $19 = HEAPF32[$1 + 20 >> 2];
 $7 = HEAPF32[$1 + 388 >> 2];
 $11 = HEAPF32[$1 + 4 >> 2];
 $8 = HEAPF32[$1 + 456 >> 2];
 HEAP32[$0 + 12 >> 2] = 0;
 $8 = $8 != Math_fround(0) ? Math_fround(Math_fround(1) / $8) : Math_fround(0);
 $9 = Math_fround($19 * $8);
 $13 = $13 != Math_fround(0) ? Math_fround(Math_fround(1) / $13) : Math_fround(0);
 $5 = Math_fround($18 * $13);
 $20 = $3 != Math_fround(0) ? Math_fround(Math_fround(1) / $3) : Math_fround(0);
 $3 = Math_fround($16 * $20);
 $21 = Math_fround(Math_fround(Math_fround($7 * Math_fround(Math_fround(Math_fround($11 * $9) + Math_fround($10 * $5)) + Math_fround($17 * $3))) + Math_fround($4 * Math_fround(Math_fround(Math_fround($9 * $19) + Math_fround($5 * $18)) + Math_fround($3 * $16)))) + Math_fround($6 * Math_fround(Math_fround(Math_fround($9 * $15) + Math_fround($5 * $14)) + Math_fround($3 * $12))));
 $3 = Math_fround($8 * $11);
 $9 = Math_fround($13 * $10);
 $5 = Math_fround($20 * $17);
 $9 = Math_fround(Math_fround(Math_fround($7 * Math_fround(Math_fround(Math_fround($11 * $3) + Math_fround($10 * $9)) + Math_fround($17 * $5))) + Math_fround($4 * Math_fround(Math_fround(Math_fround($3 * $19) + Math_fround($9 * $18)) + Math_fround($5 * $16)))) + Math_fround($6 * Math_fround(Math_fround(Math_fround($3 * $15) + Math_fround($9 * $14)) + Math_fround($5 * $12))));
 $3 = Math_fround(Math_fround($7 * $21) - Math_fround($4 * $9));
 HEAPF32[$0 + 8 >> 2] = $3;
 $8 = Math_fround($8 * $15);
 $5 = Math_fround($11 * $8);
 $11 = Math_fround($13 * $14);
 $5 = Math_fround($5 + Math_fround($10 * $11));
 $10 = Math_fround($20 * $12);
 $12 = Math_fround(Math_fround(Math_fround($7 * Math_fround($5 + Math_fround($17 * $10))) + Math_fround($4 * Math_fround(Math_fround(Math_fround($8 * $19) + Math_fround($11 * $18)) + Math_fround($10 * $16)))) + Math_fround($6 * Math_fround(Math_fround(Math_fround($8 * $15) + Math_fround($11 * $14)) + Math_fround($10 * $12))));
 $7 = Math_fround(Math_fround($6 * $9) - Math_fround($7 * $12));
 HEAPF32[$0 + 4 >> 2] = $7;
 $6 = Math_fround(Math_fround($4 * $12) - Math_fround($6 * $21));
 HEAPF32[$0 >> 2] = $6;
 $4 = Math_fround(Math_fround($3 * $3) + Math_fround(Math_fround($6 * $6) + Math_fround($7 * $7)));
 if (!!($4 > Math_fround($2 * $2))) {
  $4 = Math_fround(Math_fround(Math_fround(1) / Math_fround(Math_sqrt($4))) * $2);
  HEAPF32[$0 + 8 >> 2] = $3 * $4;
  HEAPF32[$0 + 4 >> 2] = $7 * $4;
  HEAPF32[$0 >> 2] = $6 * $4;
 }
}
function btDiscreteDynamicsWorld__btDiscreteDynamicsWorld_28btDispatcher__2c_20btBroadphaseInterface__2c_20btConstraintSolver__2c_20btCollisionConfiguration__29($0, $1, $2, $3, $4) {
 btCollisionWorld__btCollisionWorld_28btDispatcher__2c_20btBroadphaseInterface__2c_20btCollisionConfiguration__29($0, $1, $2, $4);
 $4 = $0;
 HEAP32[$4 + 100 >> 2] = 1050253722;
 HEAP32[$4 + 104 >> 2] = 1015580809;
 HEAP32[$4 + 92 >> 2] = 1058642330;
 HEAP32[$4 + 96 >> 2] = 1065353216;
 HEAP32[$4 + 88 >> 2] = 0;
 HEAP32[$4 + 80 >> 2] = 0;
 HEAP32[$4 + 84 >> 2] = 0;
 HEAP32[$4 + 132 >> 2] = 0;
 HEAP32[$4 + 136 >> 2] = 1045220557;
 HEAP32[$4 + 124 >> 2] = 1045220557;
 HEAP32[$4 + 128 >> 2] = 1045220557;
 HEAP32[$4 + 108 >> 2] = 0;
 HEAP32[$4 + 112 >> 2] = 10;
 HEAP32[$4 + 184 >> 2] = 0;
 HEAP32[$4 + 188 >> 2] = 1045220557;
 HEAP32[$4 + 176 >> 2] = 1120403456;
 HEAP32[$4 + 180 >> 2] = 1900671690;
 HEAP32[$4 + 172 >> 2] = 128;
 HEAP32[$4 + 164 >> 2] = 260;
 HEAP32[$4 + 168 >> 2] = 2;
 HEAP32[$4 + 156 >> 2] = 0;
 HEAP32[$4 + 160 >> 2] = 1062836634;
 HEAP32[$4 + 148 >> 2] = -1121724662;
 HEAP32[$4 + 152 >> 2] = 1036831949;
 HEAP32[$4 + 140 >> 2] = 0;
 HEAP32[$4 + 144 >> 2] = 1;
 HEAP32[$4 + 116 >> 2] = 1101004800;
 HEAP32[$4 + 120 >> 2] = 1065353216;
 HEAP32[$4 >> 2] = 2336;
 HEAP8[$4 + 208 | 0] = 1;
 HEAP32[$4 + 204 >> 2] = 0;
 HEAP8[$4 + 240 | 0] = 1;
 HEAP32[$4 + 216 >> 2] = $3;
 HEAP32[$4 + 212 >> 2] = 0;
 HEAP32[$4 + 196 >> 2] = 0;
 HEAP32[$4 + 200 >> 2] = 0;
 HEAP32[$4 + 236 >> 2] = 0;
 HEAP32[$4 + 228 >> 2] = 0;
 HEAP32[$4 + 232 >> 2] = 0;
 HEAP8[$4 + 260 | 0] = 1;
 HEAP16[$4 + 290 >> 1] = 0;
 HEAP32[$4 + 256 >> 2] = 0;
 HEAP32[$4 + 248 >> 2] = 0;
 HEAP32[$4 + 252 >> 2] = 0;
 HEAP32[$4 + 264 >> 2] = 0;
 HEAP32[$4 + 268 >> 2] = -1054867456;
 HEAP32[$4 + 272 >> 2] = 0;
 HEAP32[$4 + 276 >> 2] = 0;
 HEAP32[$4 + 280 >> 2] = 0;
 HEAP32[$4 + 284 >> 2] = 0;
 HEAP8[$4 + 308 | 0] = 1;
 HEAP32[$4 + 312 >> 2] = 0;
 HEAP32[$4 + 304 >> 2] = 0;
 HEAP32[$4 + 296 >> 2] = 0;
 HEAP32[$4 + 300 >> 2] = 0;
 HEAP8[$4 + 336 | 0] = 1;
 HEAP8[$4 + 316 | 0] = 1;
 HEAP32[$4 + 324 >> 2] = 0;
 HEAP32[$4 + 328 >> 2] = 0;
 HEAP32[$4 + 332 >> 2] = 0;
 HEAP32[$4 + 340 >> 2] = 0;
 $2 = 0;
 if (!$3) {
  $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(236, 16);
  btSequentialImpulseConstraintSolver__btSequentialImpulseConstraintSolver_28_29($3);
  HEAP32[$0 + 216 >> 2] = $3;
  $2 = 1;
 }
 HEAP8[$4 + 289 | 0] = $2;
 $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(68, 16);
 btSimulationIslandManager__btSimulationIslandManager_28_29($3);
 HEAP8[$0 + 288 | 0] = 1;
 HEAP32[$0 + 220 >> 2] = $3;
 $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(88, 16);
 $2 = HEAP32[$0 + 216 >> 2];
 HEAP8[$3 + 44 | 0] = 1;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = 0;
 $4 = $3;
 HEAP32[$4 + 12 >> 2] = 0;
 HEAP32[$4 + 16 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = $2;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$4 >> 2] = 2944;
 HEAP32[$4 + 40 >> 2] = 0;
 HEAP8[$4 + 64 | 0] = 1;
 HEAP32[$4 + 32 >> 2] = 0;
 HEAP32[$4 + 36 >> 2] = 0;
 HEAP32[$4 + 60 >> 2] = 0;
 HEAP8[$4 + 84 | 0] = 1;
 HEAP32[$4 + 52 >> 2] = 0;
 HEAP32[$4 + 56 >> 2] = 0;
 HEAP32[$4 + 80 >> 2] = 0;
 HEAP32[$4 + 72 >> 2] = 0;
 HEAP32[$4 + 76 >> 2] = 0;
 HEAP32[$0 + 212 >> 2] = $4;
 return $0;
}
function btDiscreteDynamicsWorld__solveConstraints_28btContactSolverInfo__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0;
 $5 = global$0 - 16 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 $9 = CProfileSample__CProfileSample_28char_20const__29($5 + 8 | 0, 2604);
 $2 = HEAP32[$0 + 196 >> 2];
 $3 = HEAP32[$0 + 228 >> 2];
 if (($2 | 0) < ($3 | 0)) {
  if (HEAP32[$0 + 200 >> 2] < ($3 | 0)) {
   if ($3) {
    $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($3 << 2, 16);
    $6 = HEAP32[$0 + 196 >> 2];
   } else {
    $6 = $2;
   }
   if (($6 | 0) >= 1) {
    while (1) {
     $8 = $4 << 2;
     HEAP32[$8 + $7 >> 2] = HEAP32[HEAP32[$0 + 204 >> 2] + $8 >> 2];
     $4 = $4 + 1 | 0;
     if (($6 | 0) != ($4 | 0)) {
      continue;
     }
     break;
    }
   }
   $4 = HEAP32[$0 + 204 >> 2];
   if ($4) {
    if (HEAPU8[$0 + 208 | 0]) {
     btAlignedFreeInternal_28void__29($4);
    }
    HEAP32[$0 + 204 >> 2] = 0;
   }
   HEAP32[$0 + 204 >> 2] = $7;
   HEAP32[$0 + 200 >> 2] = $3;
   HEAP8[$0 + 208 | 0] = 1;
  }
  while (1) {
   HEAP32[HEAP32[$0 + 204 >> 2] + ($2 << 2) >> 2] = 0;
   $2 = $2 + 1 | 0;
   if (($3 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 196 >> 2] = $3;
 if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0) | 0) >= 1) {
  $2 = 0;
  while (1) {
   $3 = $2 << 2;
   HEAP32[$3 + HEAP32[$0 + 204 >> 2] >> 2] = HEAP32[HEAP32[$0 + 236 >> 2] + $3 >> 2];
   $2 = $2 + 1 | 0;
   if (($2 | 0) < (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0) | 0)) {
    continue;
   }
   break;
  }
 }
 $2 = HEAP32[$0 + 196 >> 2];
 if (($2 | 0) >= 2) {
  void_20btAlignedObjectArray_btTypedConstraint____quickSortInternal_btSortConstraintOnIslandPredicate__28btSortConstraintOnIslandPredicate_20const__2c_20int_2c_20int_29($0 + 192 | 0, $5, 0, $2 + -1 | 0);
 }
 $2 = 0;
 label$14 : {
  if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0)) {
   break label$14;
  }
  $2 = HEAP32[$0 + 204 >> 2];
 }
 InplaceSolverIslandCallback__setup_28btContactSolverInfo__2c_20btTypedConstraint___2c_20int_2c_20btIDebugDraw__29(HEAP32[$0 + 212 >> 2], $1, $2, HEAP32[$0 + 196 >> 2], FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0);
 $2 = HEAP32[$0 + 216 >> 2];
 $3 = HEAP32[$0 + 24 >> 2];
 wasm2js_i32$1 = $2, wasm2js_i32$2 = HEAP32[$0 + 8 >> 2], wasm2js_i32$3 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 36 >> 2]]($3) | 0, wasm2js_i32$0 = HEAP32[HEAP32[$2 >> 2] + 8 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0);
 btSimulationIslandManager__buildAndProcessIslands_28btDispatcher__2c_20btCollisionWorld__2c_20btSimulationIslandManager__IslandCallback__29(HEAP32[$0 + 220 >> 2], HEAP32[$0 + 24 >> 2], $0, HEAP32[$0 + 212 >> 2]);
 InplaceSolverIslandCallback__processConstraints_28_29(HEAP32[$0 + 212 >> 2]);
 $2 = HEAP32[$0 + 216 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1, HEAP32[$0 + 72 >> 2]);
 CProfileSample___CProfileSample_28_29($9);
 $0 = $5 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0);
 $4 = HEAPF32[$0 + 44 >> 2];
 $8 = HEAPF32[$0 + 60 >> 2];
 $5 = HEAP32[$0 + 20 >> 2];
 $6 = HEAPF32[$0 + 40 >> 2];
 $9 = HEAPF32[$0 + 56 >> 2];
 $7 = HEAPF32[$0 + 36 >> 2];
 $10 = HEAPF32[$0 + 52 >> 2];
 $24 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $25 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $26 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $27 = HEAPF32[$1 + 52 >> 2];
 $11 = HEAPF32[$1 + 24 >> 2];
 $16 = HEAPF32[$1 + 20 >> 2];
 $12 = HEAPF32[$1 + 56 >> 2];
 $17 = HEAPF32[$1 + 40 >> 2];
 $18 = HEAPF32[$1 + 36 >> 2];
 $28 = HEAPF32[$1 + 48 >> 2];
 $19 = HEAPF32[$1 + 8 >> 2];
 $20 = HEAPF32[$1 >> 2];
 $21 = HEAPF32[$1 + 4 >> 2];
 $22 = HEAPF32[$1 + 16 >> 2];
 $23 = HEAPF32[$1 + 32 >> 2];
 HEAP32[$2 + 12 >> 2] = 0;
 $13 = $5 ? Math_fround(Math_fround($10 + $7) * Math_fround(.5)) : Math_fround(0);
 $14 = $5 ? Math_fround(Math_fround($9 + $6) * Math_fround(.5)) : Math_fround(0);
 $15 = $5 ? Math_fround(Math_fround($8 + $4) * Math_fround(.5)) : Math_fround(0);
 $12 = Math_fround($12 + Math_fround(Math_fround(Math_fround($23 * $13) + Math_fround($18 * $14)) + Math_fround($17 * $15)));
 $7 = Math_fround($24 + ($5 ? Math_fround(Math_fround($10 - $7) * Math_fround(.5)) : Math_fround(0)));
 $6 = Math_fround($25 + ($5 ? Math_fround(Math_fround($9 - $6) * Math_fround(.5)) : Math_fround(0)));
 $4 = Math_fround($26 + ($5 ? Math_fround(Math_fround($8 - $4) * Math_fround(.5)) : Math_fround(0)));
 $8 = Math_fround(Math_fround(Math_fround($7 * Math_fround(Math_abs($23))) + Math_fround($6 * Math_fround(Math_abs($18)))) + Math_fround($4 * Math_fround(Math_abs($17))));
 HEAPF32[$2 + 8 >> 2] = $12 - $8;
 $9 = Math_fround($27 + Math_fround(Math_fround(Math_fround($13 * $22) + Math_fround($14 * $16)) + Math_fround($15 * $11)));
 $10 = Math_fround(Math_fround(Math_fround($7 * Math_fround(Math_abs($22))) + Math_fround($6 * Math_fround(Math_abs($16)))) + Math_fround($4 * Math_fround(Math_abs($11))));
 HEAPF32[$2 + 4 >> 2] = $9 - $10;
 $11 = Math_fround($28 + Math_fround(Math_fround(Math_fround($13 * $20) + Math_fround($14 * $21)) + Math_fround($15 * $19)));
 $4 = Math_fround(Math_fround(Math_fround($7 * Math_fround(Math_abs($20))) + Math_fround($6 * Math_fround(Math_abs($21)))) + Math_fround($4 * Math_fround(Math_abs($19))));
 HEAPF32[$2 >> 2] = $11 - $4;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAPF32[$3 + 8 >> 2] = $8 + $12;
 HEAPF32[$3 + 4 >> 2] = $10 + $9;
 HEAPF32[$3 >> 2] = $4 + $11;
}
function btMatrix3x3__setRotation_28btQuaternion_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $2 = global$0 - 112 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $4 = $2 + 44 | 0;
 $5 = $2 + 40 | 0;
 $6 = $2 + 36 | 0;
 $7 = $2 + 32 | 0;
 $8 = $2 + 28 | 0;
 $9 = $2 + 24 | 0;
 $10 = $2 + 20 | 0;
 $11 = $2 + 16 | 0;
 $3 = $2 + 12 | 0;
 HEAP32[$2 + 108 >> 2] = $0;
 HEAP32[$2 + 104 >> 2] = $1;
 $0 = HEAP32[$2 + 108 >> 2];
 HEAPF32[$2 + 100 >> 2] = btQuaternion__length2_28_29_20const(HEAP32[$2 + 104 >> 2]);
 HEAPF32[$2 + 96 >> 2] = Math_fround(2) / HEAPF32[$2 + 100 >> 2];
 HEAPF32[$2 + 92 >> 2] = HEAPF32[btQuadWord__x_28_29_20const(HEAP32[$2 + 104 >> 2]) >> 2] * HEAPF32[$2 + 96 >> 2];
 HEAPF32[$2 + 88 >> 2] = HEAPF32[btQuadWord__y_28_29_20const(HEAP32[$2 + 104 >> 2]) >> 2] * HEAPF32[$2 + 96 >> 2];
 HEAPF32[$2 + 84 >> 2] = HEAPF32[btQuadWord__z_28_29_20const(HEAP32[$2 + 104 >> 2]) >> 2] * HEAPF32[$2 + 96 >> 2];
 HEAPF32[$2 + 80 >> 2] = HEAPF32[btQuadWord__w_28_29_20const(HEAP32[$2 + 104 >> 2]) >> 2] * HEAPF32[$2 + 92 >> 2];
 HEAPF32[$2 + 76 >> 2] = HEAPF32[btQuadWord__w_28_29_20const(HEAP32[$2 + 104 >> 2]) >> 2] * HEAPF32[$2 + 88 >> 2];
 HEAPF32[$2 + 72 >> 2] = HEAPF32[btQuadWord__w_28_29_20const(HEAP32[$2 + 104 >> 2]) >> 2] * HEAPF32[$2 + 84 >> 2];
 HEAPF32[$2 + 68 >> 2] = HEAPF32[btQuadWord__x_28_29_20const(HEAP32[$2 + 104 >> 2]) >> 2] * HEAPF32[$2 + 92 >> 2];
 HEAPF32[$2 + 64 >> 2] = HEAPF32[btQuadWord__x_28_29_20const(HEAP32[$2 + 104 >> 2]) >> 2] * HEAPF32[$2 + 88 >> 2];
 HEAPF32[$2 + 60 >> 2] = HEAPF32[btQuadWord__x_28_29_20const(HEAP32[$2 + 104 >> 2]) >> 2] * HEAPF32[$2 + 84 >> 2];
 HEAPF32[$2 + 56 >> 2] = HEAPF32[btQuadWord__y_28_29_20const(HEAP32[$2 + 104 >> 2]) >> 2] * HEAPF32[$2 + 88 >> 2];
 HEAPF32[$2 + 52 >> 2] = HEAPF32[btQuadWord__y_28_29_20const(HEAP32[$2 + 104 >> 2]) >> 2] * HEAPF32[$2 + 84 >> 2];
 HEAPF32[$2 + 48 >> 2] = HEAPF32[btQuadWord__z_28_29_20const(HEAP32[$2 + 104 >> 2]) >> 2] * HEAPF32[$2 + 84 >> 2];
 HEAPF32[$2 + 44 >> 2] = Math_fround(1) - Math_fround(HEAPF32[$2 + 56 >> 2] + HEAPF32[$2 + 48 >> 2]);
 HEAPF32[$2 + 40 >> 2] = HEAPF32[$2 + 64 >> 2] - HEAPF32[$2 + 72 >> 2];
 HEAPF32[$2 + 36 >> 2] = HEAPF32[$2 + 60 >> 2] + HEAPF32[$2 + 76 >> 2];
 HEAPF32[$2 + 32 >> 2] = HEAPF32[$2 + 64 >> 2] + HEAPF32[$2 + 72 >> 2];
 HEAPF32[$2 + 28 >> 2] = Math_fround(1) - Math_fround(HEAPF32[$2 + 68 >> 2] + HEAPF32[$2 + 48 >> 2]);
 HEAPF32[$2 + 24 >> 2] = HEAPF32[$2 + 52 >> 2] - HEAPF32[$2 + 80 >> 2];
 HEAPF32[$2 + 20 >> 2] = HEAPF32[$2 + 60 >> 2] - HEAPF32[$2 + 76 >> 2];
 HEAPF32[$2 + 16 >> 2] = HEAPF32[$2 + 52 >> 2] + HEAPF32[$2 + 80 >> 2];
 HEAPF32[$2 + 12 >> 2] = Math_fround(1) - Math_fround(HEAPF32[$2 + 68 >> 2] + HEAPF32[$2 + 56 >> 2]);
 btMatrix3x3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($0, $4, $5, $6, $7, $8, $9, $10, $11, $3);
 $0 = $2 + 112 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTriangleShape__isInside_28btVector3_20const__2c_20float_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = 0, $17 = 0;
 $7 = global$0 - 32 | 0;
 $17 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $17;
 $3 = HEAPF32[$0 + 60 >> 2];
 $10 = Math_fround(HEAPF32[$0 + 76 >> 2] - $3);
 $6 = HEAPF32[$0 - -64 >> 2];
 $8 = Math_fround(HEAPF32[$0 + 96 >> 2] - $6);
 $5 = Math_fround(HEAPF32[$0 + 80 >> 2] - $6);
 $9 = Math_fround(HEAPF32[$0 + 92 >> 2] - $3);
 $4 = Math_fround(Math_fround($10 * $8) - Math_fround($5 * $9));
 $11 = $4;
 $13 = Math_fround($4 * $4);
 $4 = HEAPF32[$0 + 68 >> 2];
 $12 = Math_fround(HEAPF32[$0 + 100 >> 2] - $4);
 $14 = Math_fround($5 * $12);
 $5 = Math_fround(HEAPF32[$0 + 84 >> 2] - $4);
 $8 = Math_fround($14 - Math_fround($5 * $8));
 $5 = Math_fround(Math_fround($5 * $9) - Math_fround($10 * $12));
 $9 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround($13 + Math_fround(Math_fround($8 * $8) + Math_fround($5 * $5))))));
 $10 = Math_fround($11 * $9);
 $8 = Math_fround($8 * $9);
 $5 = Math_fround($5 * $9);
 $3 = Math_fround(Math_fround(Math_fround(HEAPF32[$1 + 8 >> 2] * $10) + Math_fround(Math_fround(HEAPF32[$1 >> 2] * $8) + Math_fround(HEAPF32[$1 + 4 >> 2] * $5))) - Math_fround(Math_fround($4 * $10) + Math_fround(Math_fround($3 * $8) + Math_fround($6 * $5))));
 $13 = Math_fround(-$2);
 label$2 : {
  if ($3 >= $13 ^ 1 | $3 <= $2 ^ 1) {
   break label$2;
  }
  while (1) {
   label$4 : {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0, $15, $7 + 16 | 0, $7);
    $9 = HEAPF32[$7 + 16 >> 2];
    $6 = Math_fround(HEAPF32[$7 >> 2] - $9);
    $2 = HEAPF32[$7 + 20 >> 2];
    $4 = Math_fround(HEAPF32[$7 + 4 >> 2] - $2);
    $3 = Math_fround(Math_fround($5 * $6) - Math_fround($8 * $4));
    $11 = $3;
    $14 = Math_fround($3 * $3);
    $3 = Math_fround($10 * $4);
    $12 = HEAPF32[$7 + 24 >> 2];
    $4 = Math_fround(HEAPF32[$7 + 8 >> 2] - $12);
    $3 = Math_fround($3 - Math_fround($5 * $4));
    $6 = Math_fround(Math_fround($8 * $4) - Math_fround($10 * $6));
    $4 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround($14 + Math_fround(Math_fround($3 * $3) + Math_fround($6 * $6))))));
    $11 = Math_fround($11 * $4);
    $3 = Math_fround($3 * $4);
    $6 = Math_fround($6 * $4);
    if (!!(Math_fround(Math_fround(Math_fround(HEAPF32[$1 + 8 >> 2] * $11) + Math_fround(Math_fround(HEAPF32[$1 >> 2] * $3) + Math_fround(HEAPF32[$1 + 4 >> 2] * $6))) - Math_fround(Math_fround($12 * $11) + Math_fround(Math_fround($9 * $3) + Math_fround($2 * $6)))) < $13)) {
     break label$4;
    }
    $16 = 1;
    $15 = $15 + 1 | 0;
    if (($15 | 0) != 3) {
     continue;
    }
    break label$2;
   }
   break;
  }
  $16 = 0;
 }
 $0 = $7 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $16 | 0;
}
function btAlignedObjectArray_btSolverBody___expand_28btSolverBody_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $7 = HEAP32[$0 + 4 >> 2];
 $2 = $7;
 label$1 : {
  if (($2 | 0) != HEAP32[$0 + 8 >> 2]) {
   break label$1;
  }
  $2 = $7;
  $8 = $2 ? $2 << 1 : 1;
  if (($2 | 0) >= ($8 | 0)) {
   break label$1;
  }
  if ($8) {
   $10 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($8, 244), 16);
   $2 = HEAP32[$0 + 4 >> 2];
  } else {
   $2 = $7;
  }
  $11 = $2;
  if (($11 | 0) >= 1) {
   while (1) {
    $6 = Math_imul($9, 244);
    $2 = $10 + $6 | 0;
    $6 = HEAP32[$0 + 12 >> 2] + $6 | 0;
    $3 = $6;
    $4 = HEAP32[$3 >> 2];
    $5 = HEAP32[$3 + 4 >> 2];
    HEAP32[$2 >> 2] = $4;
    HEAP32[$2 + 4 >> 2] = $5;
    $4 = HEAP32[$3 + 12 >> 2];
    $5 = HEAP32[$3 + 8 >> 2];
    HEAP32[$2 + 8 >> 2] = $5;
    HEAP32[$2 + 12 >> 2] = $4;
    $5 = HEAP32[$3 + 28 >> 2];
    $4 = HEAP32[$3 + 24 >> 2];
    HEAP32[$2 + 24 >> 2] = $4;
    HEAP32[$2 + 28 >> 2] = $5;
    $4 = HEAP32[$3 + 20 >> 2];
    $5 = HEAP32[$3 + 16 >> 2];
    HEAP32[$2 + 16 >> 2] = $5;
    HEAP32[$2 + 20 >> 2] = $4;
    $5 = HEAP32[$3 + 44 >> 2];
    $4 = HEAP32[$3 + 40 >> 2];
    HEAP32[$2 + 40 >> 2] = $4;
    HEAP32[$2 + 44 >> 2] = $5;
    $4 = HEAP32[$3 + 36 >> 2];
    $5 = HEAP32[$3 + 32 >> 2];
    HEAP32[$2 + 32 >> 2] = $5;
    HEAP32[$2 + 36 >> 2] = $4;
    $5 = HEAP32[$3 + 52 >> 2];
    $4 = HEAP32[$3 + 48 >> 2];
    HEAP32[$2 + 48 >> 2] = $4;
    HEAP32[$2 + 52 >> 2] = $5;
    $4 = HEAP32[$3 + 60 >> 2];
    $5 = HEAP32[$3 + 56 >> 2];
    HEAP32[$2 + 56 >> 2] = $5;
    HEAP32[$2 + 60 >> 2] = $4;
    memcpy($2 - -64 | 0, $3 - -64 | 0, 180);
    $9 = $9 + 1 | 0;
    if (($11 | 0) != ($9 | 0)) {
     continue;
    }
    break;
   }
  }
  $2 = HEAP32[$0 + 12 >> 2];
  if ($2) {
   if (HEAPU8[$0 + 16 | 0]) {
    btAlignedFreeInternal_28void__29($2);
   }
   HEAP32[$0 + 12 >> 2] = 0;
  }
  HEAP32[$0 + 12 >> 2] = $10;
  HEAP8[$0 + 16 | 0] = 1;
  HEAP32[$0 + 8 >> 2] = $8;
  $2 = HEAP32[$0 + 4 >> 2];
 }
 HEAP32[$0 + 4 >> 2] = $2 + 1;
 $3 = $1;
 $4 = HEAP32[$3 + 8 >> 2];
 $5 = HEAP32[$3 + 12 >> 2];
 $6 = Math_imul($7, 244);
 $2 = $6 + HEAP32[$0 + 12 >> 2] | 0;
 HEAP32[$2 + 8 >> 2] = $4;
 HEAP32[$2 + 12 >> 2] = $5;
 $4 = HEAP32[$3 + 4 >> 2];
 $5 = HEAP32[$3 >> 2];
 HEAP32[$2 >> 2] = $5;
 HEAP32[$2 + 4 >> 2] = $4;
 $5 = HEAP32[$3 + 28 >> 2];
 $4 = HEAP32[$3 + 24 >> 2];
 HEAP32[$2 + 24 >> 2] = $4;
 HEAP32[$2 + 28 >> 2] = $5;
 $4 = HEAP32[$3 + 20 >> 2];
 $5 = HEAP32[$3 + 16 >> 2];
 HEAP32[$2 + 16 >> 2] = $5;
 HEAP32[$2 + 20 >> 2] = $4;
 $5 = HEAP32[$3 + 36 >> 2];
 $4 = HEAP32[$3 + 32 >> 2];
 HEAP32[$2 + 32 >> 2] = $4;
 HEAP32[$2 + 36 >> 2] = $5;
 $4 = HEAP32[$3 + 44 >> 2];
 $5 = HEAP32[$3 + 40 >> 2];
 HEAP32[$2 + 40 >> 2] = $5;
 HEAP32[$2 + 44 >> 2] = $4;
 $5 = HEAP32[$3 + 52 >> 2];
 $4 = HEAP32[$3 + 48 >> 2];
 HEAP32[$2 + 48 >> 2] = $4;
 HEAP32[$2 + 52 >> 2] = $5;
 $4 = HEAP32[$3 + 60 >> 2];
 $5 = HEAP32[$3 + 56 >> 2];
 HEAP32[$2 + 56 >> 2] = $5;
 HEAP32[$2 + 60 >> 2] = $4;
 memcpy($2 - -64 | 0, $3 - -64 | 0, 180);
 return HEAP32[$0 + 12 >> 2] + $6 | 0;
}



function void_20btAlignedObjectArray_btBroadphasePair___quickSortInternal_btBroadphasePairSortPredicate__28btBroadphasePairSortPredicate_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 while (1) {
  $18 = $2;
  $11 = HEAP32[$0 + 12 >> 2];
  $7 = $11 + (($2 + $3 | 0) / 2 << 4) | 0;
  $19 = HEAP32[$7 + 8 >> 2];
  $12 = HEAP32[$7 + 4 >> 2];
  $7 = HEAP32[$7 >> 2];
  $9 = $3;
  while (1) {
   $4 = -1;
   $10 = -1;
   $8 = ($2 << 4) + $11 | 0;
   $13 = HEAP32[$8 >> 2];
   if ($13) {
    $10 = HEAP32[$13 + 12 >> 2];
   }
   $4 = $7 ? HEAP32[$7 + 12 >> 2] : $4;
   $5 = -1;
   $6 = -1;
   $14 = HEAP32[$8 + 4 >> 2];
   if ($14) {
    $6 = HEAP32[$14 + 12 >> 2];
   }
   $5 = $12 ? HEAP32[$12 + 12 >> 2] : $5;
   label$7 : {
    label$8 : {
     if (($10 | 0) > ($4 | 0)) {
      break label$8;
     }
     if (!(($7 | 0) != ($13 | 0) | ($6 | 0) > ($5 | 0))) {
      if (($12 | 0) != ($14 | 0)) {
       break label$7;
      }
      if (HEAPU32[$8 + 8 >> 2] > $19 >>> 0) {
       break label$8;
      }
      break label$7;
     }
     if (($7 | 0) != ($13 | 0) | ($6 | 0) <= ($5 | 0)) {
      break label$7;
     }
    }
    $2 = $2 + 1 | 0;
    continue;
   }
   while (1) {
    $20 = $9 << 4;
    $4 = $20 + $11 | 0;
    $10 = -1;
    $5 = -1;
    $5 = $7 ? HEAP32[$7 + 12 >> 2] : $5;
    $15 = HEAP32[$4 >> 2];
    if ($15) {
     $10 = HEAP32[$15 + 12 >> 2];
    }
    $6 = -1;
    $16 = -1;
    $16 = $12 ? HEAP32[$12 + 12 >> 2] : $16;
    $17 = HEAP32[$4 + 4 >> 2];
    if ($17) {
     $6 = HEAP32[$17 + 12 >> 2];
    }
    label$15 : {
     label$16 : {
      if (($5 | 0) > ($10 | 0)) {
       break label$16;
      }
      if (!(($7 | 0) != ($15 | 0) | ($16 | 0) > ($6 | 0))) {
       if (($12 | 0) != ($17 | 0)) {
        break label$15;
       }
       if (HEAPU32[$4 + 8 >> 2] < $19 >>> 0) {
        break label$16;
       }
       break label$15;
      }
      if (($7 | 0) != ($15 | 0) | ($16 | 0) <= ($6 | 0)) {
       break label$15;
      }
     }
     $9 = $9 + -1 | 0;
     continue;
    }
    break;
   }
   if (($2 | 0) <= ($9 | 0)) {
    $6 = HEAP32[$8 + 8 >> 2];
    $11 = $6;
    $5 = HEAP32[$8 + 12 >> 2];
    $10 = $5;
    $6 = HEAP32[$4 + 4 >> 2];
    $5 = HEAP32[$4 >> 2];
    HEAP32[$8 >> 2] = $5;
    HEAP32[$8 + 4 >> 2] = $6;
    $5 = HEAP32[$4 + 12 >> 2];
    $6 = HEAP32[$4 + 8 >> 2];
    HEAP32[$8 + 8 >> 2] = $6;
    HEAP32[$8 + 12 >> 2] = $5;
    $4 = HEAP32[$0 + 12 >> 2] + $20 | 0;
    HEAP32[$4 + 4 >> 2] = $14;
    HEAP32[$4 + 8 >> 2] = $11;
    $5 = $10;
    HEAP32[$4 + 12 >> 2] = $5;
    HEAP32[$4 >> 2] = $13;
    $9 = $9 + -1 | 0;
    $2 = $2 + 1 | 0;
   }
   if (($2 | 0) <= ($9 | 0)) {
    $11 = HEAP32[$0 + 12 >> 2];
    continue;
   }
   break;
  }
  if (($9 | 0) > ($18 | 0)) {
   void_20btAlignedObjectArray_btBroadphasePair___quickSortInternal_btBroadphasePairSortPredicate__28btBroadphasePairSortPredicate_20const__2c_20int_2c_20int_29($0, $1, $18, $9);
  }
  if (($2 | 0) < ($3 | 0)) {
   continue;
  }
  break;
 }
}
function btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20float_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $4 = global$0 - 256 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = HEAP32[$1 + 212 >> 2];
 label$2 : {
  if (($3 | 0) > -1) {
   break label$2;
  }
  label$3 : {
   $3 = HEAP32[$1 + 252 >> 2];
   if (!($3 & 2)) {
    break label$3;
   }
   $3 = $3 << 30 >> 31 & $1;
   if (HEAPU8[$3 + 204 | 0] & 2 ? 0 : HEAPF32[$3 + 404 >> 2] == Math_fround(0)) {
    break label$3;
   }
   $3 = HEAP32[$0 + 8 >> 2];
   memset($4 + 8 | 0, 0, 244);
   btSequentialImpulseConstraintSolver__initSolverBody_28btSolverBody__2c_20btCollisionObject__2c_20float_29($1, btAlignedObjectArray_btSolverBody___expand_28btSolverBody_20const__29($0 + 4 | 0, $4 + 8 | 0), $1, $2);
   HEAP32[$1 + 212 >> 2] = $3;
   break label$2;
  }
  $3 = HEAP32[$0 + 188 >> 2];
  if (($3 | 0) > -1) {
   break label$2;
  }
  HEAP32[$0 + 188 >> 2] = HEAP32[$0 + 8 >> 2];
  memset($4 + 8 | 0, 0, 244);
  $1 = btAlignedObjectArray_btSolverBody___expand_28btSolverBody_20const__29($0 + 4 | 0, $4 + 8 | 0);
  HEAP32[$1 + 88 >> 2] = 0;
  HEAP32[$1 + 92 >> 2] = 0;
  HEAP32[$1 + 80 >> 2] = 0;
  HEAP32[$1 + 84 >> 2] = 0;
  HEAP32[$1 + 72 >> 2] = 0;
  HEAP32[$1 + 76 >> 2] = 0;
  HEAP32[$1 + 64 >> 2] = 0;
  HEAP32[$1 + 68 >> 2] = 0;
  HEAP32[$1 + 144 >> 2] = 0;
  HEAP32[$1 + 148 >> 2] = 0;
  HEAP32[$1 + 152 >> 2] = 0;
  HEAP32[$1 + 156 >> 2] = 0;
  HEAP32[$1 + 160 >> 2] = 0;
  HEAP32[$1 + 164 >> 2] = 0;
  HEAP32[$1 + 168 >> 2] = 0;
  HEAP32[$1 + 172 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 >> 2] = 1065353216;
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$1 + 16 >> 2] = 0;
  HEAP32[$1 + 24 >> 2] = 0;
  HEAP32[$1 + 28 >> 2] = 0;
  HEAP32[$1 + 20 >> 2] = 1065353216;
  HEAP32[$1 + 32 >> 2] = 0;
  HEAP32[$1 + 36 >> 2] = 0;
  HEAP32[$1 + 44 >> 2] = 0;
  HEAP32[$1 + 48 >> 2] = 0;
  HEAP32[$1 + 40 >> 2] = 1065353216;
  HEAP32[$1 + 52 >> 2] = 0;
  HEAP32[$1 + 56 >> 2] = 0;
  HEAP32[$1 + 60 >> 2] = 0;
  HEAP32[$1 + 136 >> 2] = 0;
  HEAP32[$1 + 140 >> 2] = 0;
  HEAP32[$1 + 240 >> 2] = 0;
  HEAP32[$1 + 128 >> 2] = 0;
  HEAP32[$1 + 132 >> 2] = 0;
  HEAP32[$1 + 120 >> 2] = 1065353216;
  HEAP32[$1 + 124 >> 2] = 0;
  HEAP32[$1 + 112 >> 2] = 1065353216;
  HEAP32[$1 + 116 >> 2] = 1065353216;
  HEAP32[$1 + 104 >> 2] = 1065353216;
  HEAP32[$1 + 108 >> 2] = 0;
  HEAP32[$1 + 96 >> 2] = 1065353216;
  HEAP32[$1 + 100 >> 2] = 1065353216;
  HEAP32[$1 + 232 >> 2] = 0;
  HEAP32[$1 + 236 >> 2] = 0;
  HEAP32[$1 + 224 >> 2] = 0;
  HEAP32[$1 + 228 >> 2] = 0;
  HEAP32[$1 + 216 >> 2] = 0;
  HEAP32[$1 + 220 >> 2] = 0;
  HEAP32[$1 + 208 >> 2] = 0;
  HEAP32[$1 + 212 >> 2] = 0;
  HEAP32[$1 + 200 >> 2] = 0;
  HEAP32[$1 + 204 >> 2] = 0;
  HEAP32[$1 + 192 >> 2] = 0;
  HEAP32[$1 + 196 >> 2] = 0;
  HEAP32[$1 + 184 >> 2] = 0;
  HEAP32[$1 + 188 >> 2] = 0;
  HEAP32[$1 + 176 >> 2] = 0;
  HEAP32[$1 + 180 >> 2] = 0;
  $3 = HEAP32[$0 + 188 >> 2];
 }
 $0 = $4 + 256 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $3;
}
function btRigidBody__applyDamping_28float_29($0, $1) {
 var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0);
 $8 = HEAPF32[$0 + 504 >> 2];
 $3 = powf(Math_fround(Math_fround(1) - $8), $1);
 $2 = Math_fround($3 * HEAPF32[$0 + 372 >> 2]);
 HEAPF32[$0 + 372 >> 2] = $2;
 $5 = Math_fround($3 * HEAPF32[$0 + 376 >> 2]);
 HEAPF32[$0 + 376 >> 2] = $5;
 $6 = Math_fround($3 * HEAPF32[$0 + 380 >> 2]);
 HEAPF32[$0 + 380 >> 2] = $6;
 $10 = HEAPF32[$0 + 508 >> 2];
 $4 = powf(Math_fround(Math_fround(1) - $10), $1);
 $1 = Math_fround($4 * HEAPF32[$0 + 388 >> 2]);
 HEAPF32[$0 + 388 >> 2] = $1;
 $3 = Math_fround($4 * HEAPF32[$0 + 392 >> 2]);
 HEAPF32[$0 + 392 >> 2] = $3;
 $4 = Math_fround($4 * HEAPF32[$0 + 396 >> 2]);
 HEAPF32[$0 + 396 >> 2] = $4;
 label$1 : {
  if (!HEAPU8[$0 + 512 | 0]) {
   break label$1;
  }
  if (!(Math_fround(Math_fround(Math_fround($1 * $1) + Math_fround($3 * $3)) + Math_fround($4 * $4)) < HEAPF32[$0 + 524 >> 2] ^ 1 | Math_fround(Math_fround(Math_fround($2 * $2) + Math_fround($5 * $5)) + Math_fround($6 * $6)) < HEAPF32[$0 + 520 >> 2] ^ 1)) {
   $7 = HEAPF32[$0 + 516 >> 2];
   $4 = Math_fround($4 * $7);
   HEAPF32[$0 + 396 >> 2] = $4;
   $3 = Math_fround($3 * $7);
   HEAPF32[$0 + 392 >> 2] = $3;
   $1 = Math_fround($1 * $7);
   HEAPF32[$0 + 388 >> 2] = $1;
   $6 = Math_fround($6 * $7);
   HEAPF32[$0 + 380 >> 2] = $6;
   $5 = Math_fround($5 * $7);
   HEAPF32[$0 + 376 >> 2] = $5;
   $2 = Math_fround($2 * $7);
   HEAPF32[$0 + 372 >> 2] = $2;
  }
  $7 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($2 * $2) + Math_fround($5 * $5)) + Math_fround($6 * $6))));
  label$3 : {
   if (!($7 < $8)) {
    break label$3;
   }
   if (!!($7 > Math_fround(.004999999888241291))) {
    $8 = Math_fround(Math_fround(1) / $7);
    HEAPF32[$0 + 380 >> 2] = $6 - Math_fround(Math_fround($6 * $8) * Math_fround(.004999999888241291));
    HEAPF32[$0 + 376 >> 2] = $5 - Math_fround(Math_fround($5 * $8) * Math_fround(.004999999888241291));
    HEAPF32[$0 + 372 >> 2] = $2 - Math_fround(Math_fround($2 * $8) * Math_fround(.004999999888241291));
    break label$3;
   }
   $9 = $0 + 372 | 0;
   HEAP32[$9 >> 2] = 0;
   HEAP32[$9 + 4 >> 2] = 0;
   HEAP32[$0 + 380 >> 2] = 0;
   HEAP32[$0 + 384 >> 2] = 0;
  }
  $2 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($1 * $1) + Math_fround($3 * $3)) + Math_fround($4 * $4))));
  if (!($2 < $10)) {
   break label$1;
  }
  if (!!($2 > Math_fround(.004999999888241291))) {
   $2 = Math_fround(Math_fround(1) / $2);
   HEAPF32[$0 + 396 >> 2] = $4 - Math_fround(Math_fround($4 * $2) * Math_fround(.004999999888241291));
   HEAPF32[$0 + 392 >> 2] = $3 - Math_fround(Math_fround($3 * $2) * Math_fround(.004999999888241291));
   HEAPF32[$0 + 388 >> 2] = $1 - Math_fround(Math_fround($1 * $2) * Math_fround(.004999999888241291));
   return;
  }
  $9 = $0;
  $0 = $0 + 388 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$9 + 396 >> 2] = 0;
  HEAP32[$9 + 400 >> 2] = 0;
 }
}
function btSphereSphereCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0);
 $3 = global$0 - 32 | 0;
 $5 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $0 = HEAP32[$0 + 12 >> 2];
 label$2 : {
  if (!$0) {
   break label$2;
  }
  HEAP32[$4 + 4 >> 2] = $0;
  $5 = HEAP32[$1 + 12 >> 2];
  $12 = HEAP32[$2 + 12 >> 2];
  $11 = Math_fround(HEAPF32[$5 + 48 >> 2] - HEAPF32[$12 + 48 >> 2]);
  $8 = Math_fround(HEAPF32[$5 + 52 >> 2] - HEAPF32[$12 + 52 >> 2]);
  $9 = Math_fround(HEAPF32[$5 + 56 >> 2] - HEAPF32[$12 + 56 >> 2]);
  $10 = Math_fround(Math_fround(Math_fround($11 * $11) + Math_fround($8 * $8)) + Math_fround($9 * $9));
  $5 = HEAP32[$2 + 4 >> 2];
  $7 = HEAPF32[$5 + 16 >> 2];
  $13 = HEAPF32[$5 + 32 >> 2];
  $1 = HEAP32[$1 + 4 >> 2];
  $14 = HEAPF32[$1 + 16 >> 2];
  $15 = HEAPF32[$1 + 32 >> 2];
  $5 = HEAP32[$0 + 844 >> 2];
  if (($5 | 0) >= 1) {
   $1 = 0;
   while (1) {
    btPersistentManifold__clearUserCache_28btManifoldPoint__29($0, (Math_imul($1, 208) + $0 | 0) + 4 | 0);
    $1 = $1 + 1 | 0;
    $5 = HEAP32[$0 + 844 >> 2];
    if (($1 | 0) < ($5 | 0)) {
     continue;
    }
    break;
   }
  }
  $6 = Math_fround(Math_sqrt($10));
  $10 = Math_fround($13 * $7);
  $7 = Math_fround($15 * $14);
  label$5 : {
   if (!$5) {
    break label$5;
   }
   $1 = HEAP32[5386];
   if (!$1) {
    break label$5;
   }
   HEAP32[$3 + 16 >> 2] = $0;
   FUNCTION_TABLE[$1]($3 + 16 | 0);
  }
  HEAP32[$0 + 844 >> 2] = 0;
  $7 = Math_fround($7 + $10);
  if ($6 > Math_fround($7 + HEAPF32[$4 + 32 >> 2])) {
   break label$2;
  }
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
  HEAP32[$3 + 16 >> 2] = 1065353216;
  HEAP32[$3 + 20 >> 2] = 0;
  $7 = Math_fround($6 - $7);
  label$6 : {
   if (!($6 > Math_fround(1.1920928955078125e-7))) {
    $6 = Math_fround(1);
    $9 = Math_fround(0);
    $8 = Math_fround(0);
    break label$6;
   }
   HEAP32[$3 + 28 >> 2] = 0;
   $6 = Math_fround(Math_fround(1) / $6);
   $9 = Math_fround($9 * $6);
   HEAPF32[$3 + 24 >> 2] = $9;
   $8 = Math_fround($8 * $6);
   HEAPF32[$3 + 20 >> 2] = $8;
   $6 = Math_fround($11 * $6);
   HEAPF32[$3 + 16 >> 2] = $6;
  }
  $0 = HEAP32[$2 + 12 >> 2];
  $11 = HEAPF32[$0 + 52 >> 2];
  $13 = HEAPF32[$0 + 56 >> 2];
  $14 = HEAPF32[$0 + 48 >> 2];
  HEAP32[$3 + 12 >> 2] = 0;
  HEAPF32[$3 >> 2] = $14 + Math_fround($10 * $6);
  HEAPF32[$3 + 8 >> 2] = $13 + Math_fround($10 * $9);
  HEAPF32[$3 + 4 >> 2] = $11 + Math_fround($10 * $8);
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $3 + 16 | 0, $3, $7);
 }
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBvhTriangleMeshShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
 btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
 $3 = HEAP32[$0 + 52 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 56 >> 2]]($3, $1 + 12 | 0, $2) | 0;
 HEAP32[$1 + 52 >> 2] = HEAP32[$0 + 16 >> 2];
 label$1 : {
  label$2 : {
   if (!HEAP32[$0 + 56 >> 2]) {
    break label$2;
   }
   if (FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 52 >> 2]]($2) & 1) {
    break label$2;
   }
   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 24 >> 2]]($2, HEAP32[$0 + 56 >> 2]) | 0;
   if ($3) {
    HEAP32[$1 + 44 >> 2] = 0;
    HEAP32[$1 + 40 >> 2] = $3;
    break label$1;
   }
   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, HEAP32[$0 + 56 >> 2]) | 0;
   HEAP32[$1 + 44 >> 2] = 0;
   HEAP32[$1 + 40 >> 2] = $3;
   $3 = HEAP32[$0 + 56 >> 2];
   $3 = (wasm2js_i32$1 = $2, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($3) | 0, wasm2js_i32$3 = 1, wasm2js_i32$0 = HEAP32[HEAP32[$2 >> 2] + 16 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
   $4 = HEAP32[$0 + 56 >> 2];
   wasm2js_i32$3 = $2, wasm2js_i32$2 = $3, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, HEAP32[$3 + 8 >> 2], $2) | 0, wasm2js_i32$4 = 1213612625, wasm2js_i32$5 = HEAP32[$0 + 56 >> 2], wasm2js_i32$0 = HEAP32[HEAP32[$2 >> 2] + 20 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
   break label$1;
  }
  HEAP32[$1 + 40 >> 2] = 0;
  HEAP32[$1 + 44 >> 2] = 0;
 }
 label$4 : {
  label$5 : {
   if (!HEAP32[$0 + 60 >> 2]) {
    break label$5;
   }
   if (FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 52 >> 2]]($2) & 2) {
    break label$5;
   }
   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 24 >> 2]]($2, HEAP32[$0 + 60 >> 2]) | 0;
   if ($3) {
    HEAP32[$1 + 48 >> 2] = $3;
    break label$4;
   }
   HEAP32[$1 + 48 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, HEAP32[$0 + 60 >> 2]);
   $3 = HEAP32[$0 + 60 >> 2];
   $3 = (wasm2js_i32$5 = $2, wasm2js_i32$4 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3) | 0, wasm2js_i32$1 = 1, wasm2js_i32$0 = HEAP32[HEAP32[$2 >> 2] + 16 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$5 | 0, wasm2js_i32$4 | 0, wasm2js_i32$1 | 0) | 0);
   $4 = HEAP32[$0 + 60 >> 2];
   wasm2js_i32$1 = $2, wasm2js_i32$4 = $3, wasm2js_i32$5 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, HEAP32[$3 + 8 >> 2], $2) | 0, wasm2js_i32$2 = 1346456916, wasm2js_i32$3 = HEAP32[$0 + 60 >> 2], wasm2js_i32$0 = HEAP32[HEAP32[$2 >> 2] + 20 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0);
   break label$4;
  }
  HEAP32[$1 + 48 >> 2] = 0;
 }
 HEAP32[$1 + 56 >> 2] = 0;
 return 11616;
}
function btAlignedObjectArray_btFace___reserve_28int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 if (HEAP32[$0 + 8 >> 2] < ($1 | 0)) {
  if ($1) {
   $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($1, 36), 16);
  } else {
   $11 = 0;
  }
  $13 = HEAP32[$0 + 4 >> 2];
  label$4 : {
   if (($13 | 0) < 1) {
    break label$4;
   }
   while (1) {
    $2 = HEAP32[$0 + 12 >> 2];
    $4 = Math_imul($12, 36);
    $3 = $11 + $4 | 0;
    HEAP32[$3 + 12 >> 2] = 0;
    HEAP8[$3 + 16 | 0] = 1;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    $7 = $2 + $4 | 0;
    $8 = HEAP32[$7 + 4 >> 2];
    label$6 : {
     if (($8 | 0) >= 1) {
      $5 = $8 << 2;
      $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5, 16);
      $6 = HEAP32[$3 + 12 >> 2];
      $2 = 0;
      $10 = HEAP32[$3 + 4 >> 2];
      label$8 : {
       label$9 : {
        if (($10 | 0) >= 1) {
         while (1) {
          $4 = $2 << 2;
          HEAP32[$9 + $4 >> 2] = HEAP32[$4 + $6 >> 2];
          $2 = $2 + 1 | 0;
          if (($10 | 0) != ($2 | 0)) {
           continue;
          }
          break label$9;
         }
        }
        if (!$6) {
         break label$8;
        }
       }
       if (!HEAPU8[$3 + 16 | 0]) {
        break label$8;
       }
       btAlignedFreeInternal_28void__29($6);
      }
      HEAP8[$3 + 16 | 0] = 1;
      HEAP32[$3 + 12 >> 2] = $9;
      HEAP32[$3 + 8 >> 2] = $8;
      $2 = 0;
      memset($9, 0, $5);
      HEAP32[$3 + 4 >> 2] = $8;
      $9 = HEAP32[$7 + 12 >> 2];
      $6 = HEAP32[$3 + 12 >> 2];
      while (1) {
       $4 = $2 << 2;
       HEAP32[$6 + $4 >> 2] = HEAP32[$4 + $9 >> 2];
       $2 = $2 + 1 | 0;
       if (($8 | 0) != ($2 | 0)) {
        continue;
       }
       break;
      }
      break label$6;
     }
     HEAP32[$3 + 4 >> 2] = $8;
    }
    $2 = HEAP32[$7 + 24 >> 2];
    $5 = HEAP32[$7 + 20 >> 2];
    HEAP32[$3 + 20 >> 2] = $5;
    HEAP32[$3 + 24 >> 2] = $2;
    $5 = HEAP32[$7 + 32 >> 2];
    $2 = HEAP32[$7 + 28 >> 2];
    HEAP32[$3 + 28 >> 2] = $2;
    HEAP32[$3 + 32 >> 2] = $5;
    $12 = $12 + 1 | 0;
    if (($13 | 0) != ($12 | 0)) {
     continue;
    }
    break;
   }
   $10 = HEAP32[$0 + 4 >> 2];
   if (($10 | 0) < 1) {
    break label$4;
   }
   $4 = 0;
   while (1) {
    $2 = HEAP32[$0 + 12 >> 2] + Math_imul($4, 36) | 0;
    $5 = $2;
    $3 = $2;
    $6 = HEAP32[$2 + 12 >> 2];
    if ($6) {
     if (HEAPU8[$2 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($6);
     }
     HEAP32[$5 + 12 >> 2] = 0;
    }
    HEAP8[$2 + 16 | 0] = 1;
    HEAP32[$5 + 12 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$2 + 8 >> 2] = 0;
    $4 = $4 + 1 | 0;
    if (($10 | 0) != ($4 | 0)) {
     continue;
    }
    break;
   }
  }
  $2 = HEAP32[$0 + 12 >> 2];
  if ($2) {
   if (HEAPU8[$0 + 16 | 0]) {
    btAlignedFreeInternal_28void__29($2);
   }
   HEAP32[$0 + 12 >> 2] = 0;
  }
  HEAP32[$0 + 12 >> 2] = $11;
  HEAP8[$0 + 16 | 0] = 1;
  HEAP32[$0 + 8 >> 2] = $1;
 }
}
function btHashedOverlappingPairCache__growTables_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 label$1 : {
  $7 = HEAP32[$0 + 32 >> 2];
  $3 = HEAP32[$0 + 12 >> 2];
  if (($7 | 0) >= ($3 | 0)) {
   break label$1;
  }
  label$2 : {
   if (HEAP32[$0 + 36 >> 2] >= ($3 | 0)) {
    $4 = HEAP32[$0 + 40 >> 2];
    break label$2;
   }
   $5 = $7;
   if ($3) {
    $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($3 << 2, 16);
    $5 = HEAP32[$0 + 32 >> 2];
   }
   $6 = HEAP32[$0 + 40 >> 2];
   label$5 : {
    if (($5 | 0) >= 1) {
     while (1) {
      $1 = $2 << 2;
      HEAP32[$4 + $1 >> 2] = HEAP32[$1 + $6 >> 2];
      $2 = $2 + 1 | 0;
      if (($5 | 0) != ($2 | 0)) {
       continue;
      }
      break label$5;
     }
    }
    if ($6) {
     break label$5;
    }
    HEAP32[$0 + 40 >> 2] = $4;
    HEAP32[$0 + 36 >> 2] = $3;
    HEAP8[$0 + 44 | 0] = 1;
    break label$2;
   }
   if (HEAPU8[$0 + 44 | 0]) {
    btAlignedFreeInternal_28void__29($6);
   }
   HEAP32[$0 + 40 >> 2] = $4;
   HEAP8[$0 + 44 | 0] = 1;
   HEAP32[$0 + 36 >> 2] = $3;
  }
  $2 = $7 << 2;
  $8 = $3 << 2;
  memset($4 + $2 | 0, 0, $8 - $2 | 0);
  HEAP32[$0 + 32 >> 2] = $3;
  $9 = HEAP32[$0 + 52 >> 2];
  if (($9 | 0) < ($3 | 0)) {
   label$10 : {
    if (HEAP32[$0 + 56 >> 2] >= ($3 | 0)) {
     $4 = HEAP32[$0 + 60 >> 2];
     break label$10;
    }
    $2 = 0;
    $5 = $9;
    $4 = 0;
    if ($3) {
     $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8, 16);
     $5 = HEAP32[$0 + 52 >> 2];
    }
    $6 = HEAP32[$0 + 60 >> 2];
    label$13 : {
     if (($5 | 0) >= 1) {
      while (1) {
       $1 = $2 << 2;
       HEAP32[$4 + $1 >> 2] = HEAP32[$1 + $6 >> 2];
       $2 = $2 + 1 | 0;
       if (($5 | 0) != ($2 | 0)) {
        continue;
       }
       break label$13;
      }
     }
     if ($6) {
      break label$13;
     }
     HEAP32[$0 + 60 >> 2] = $4;
     HEAP32[$0 + 56 >> 2] = $3;
     HEAP8[$0 - -64 | 0] = 1;
     break label$10;
    }
    if (HEAPU8[$0 - -64 | 0]) {
     btAlignedFreeInternal_28void__29($6);
    }
    HEAP32[$0 + 60 >> 2] = $4;
    HEAP8[$0 + 64 | 0] = 1;
    HEAP32[$0 + 56 >> 2] = $3;
   }
   $2 = $9 << 2;
   memset($4 + $2 | 0, 0, $8 - $2 | 0);
  }
  HEAP32[$0 + 52 >> 2] = $3;
  if (($3 | 0) >= 1) {
   memset(HEAP32[$0 + 40 >> 2], 255, $8);
   memset(HEAP32[$0 + 60 >> 2], 255, $8);
  }
  if (($7 | 0) < 1) {
   break label$1;
  }
  $4 = HEAP32[$0 + 60 >> 2];
  $5 = HEAP32[$0 + 16 >> 2];
  $6 = HEAP32[$0 + 40 >> 2];
  $2 = 0;
  while (1) {
   $1 = ($2 << 4) + $5 | 0;
   $1 = HEAP32[HEAP32[$1 + 4 >> 2] + 12 >> 2] << 16 | HEAP32[HEAP32[$1 >> 2] + 12 >> 2];
   $1 = $1 + ($1 << 15 ^ -1) | 0;
   $1 = Math_imul($1 ^ $1 >>> 10, 9);
   $1 = $1 ^ $1 >>> 6;
   $1 = $1 + ($1 << 11 ^ -1) | 0;
   $1 = ((HEAP32[$0 + 12 >> 2] + -1 & ($1 ^ $1 >>> 16)) << 2) + $6 | 0;
   HEAP32[($2 << 2) + $4 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$1 >> 2] = $2;
   $2 = $2 + 1 | 0;
   if (($7 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
}
function btCompoundShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
 btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
 HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 76 >> 2];
 $3 = HEAP32[$0 + 20 >> 2];
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = $3;
 if ($3) {
  $6 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 76, $3) | 0;
  $3 = HEAP32[$6 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $3);
  if (HEAP32[$1 + 16 >> 2] > 0) {
   while (1) {
    $4 = Math_imul($7, 80);
    $5 = $4 + HEAP32[$0 + 28 >> 2] | 0;
    HEAP32[$3 + 72 >> 2] = HEAP32[$5 + 72 >> 2];
    HEAP32[$3 + 64 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, HEAP32[$5 + 64 >> 2]);
    if (!FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 24 >> 2]]($2, HEAP32[(HEAP32[$0 + 28 >> 2] + $4 | 0) + 64 >> 2])) {
     $5 = HEAP32[(HEAP32[$0 + 28 >> 2] + $4 | 0) + 64 >> 2];
     $5 = (wasm2js_i32$1 = $2, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 52 >> 2]]($5) | 0, wasm2js_i32$3 = 1, wasm2js_i32$0 = HEAP32[HEAP32[$2 >> 2] + 16 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
     $8 = HEAP32[(HEAP32[$0 + 28 >> 2] + $4 | 0) + 64 >> 2];
     wasm2js_i32$3 = $2, wasm2js_i32$2 = $5, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 56 >> 2]]($8, HEAP32[$5 + 8 >> 2], $2) | 0, wasm2js_i32$4 = 1346455635, wasm2js_i32$5 = HEAP32[(HEAP32[$0 + 28 >> 2] + $4 | 0) + 64 >> 2], wasm2js_i32$0 = HEAP32[HEAP32[$2 >> 2] + 20 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
    }
    $4 = HEAP32[$0 + 28 >> 2] + $4 | 0;
    HEAP32[$3 + 68 >> 2] = HEAP32[$4 + 68 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$3 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[$3 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
    HEAP32[$3 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
    HEAP32[$3 + 16 >> 2] = HEAP32[$4 + 16 >> 2];
    HEAP32[$3 + 20 >> 2] = HEAP32[$4 + 20 >> 2];
    HEAP32[$3 + 24 >> 2] = HEAP32[$4 + 24 >> 2];
    HEAP32[$3 + 28 >> 2] = HEAP32[$4 + 28 >> 2];
    HEAP32[$3 + 32 >> 2] = HEAP32[$4 + 32 >> 2];
    HEAP32[$3 + 36 >> 2] = HEAP32[$4 + 36 >> 2];
    HEAP32[$3 + 40 >> 2] = HEAP32[$4 + 40 >> 2];
    HEAP32[$3 + 44 >> 2] = HEAP32[$4 + 44 >> 2];
    HEAP32[$3 + 48 >> 2] = HEAP32[$4 + 48 >> 2];
    HEAP32[$3 + 52 >> 2] = HEAP32[$4 + 52 >> 2];
    HEAP32[$3 + 56 >> 2] = HEAP32[$4 + 56 >> 2];
    HEAP32[$3 + 60 >> 2] = HEAP32[$4 + 60 >> 2];
    $3 = $3 + 76 | 0;
    $7 = $7 + 1 | 0;
    if (($7 | 0) < HEAP32[$1 + 16 >> 2]) {
     continue;
    }
    break;
   }
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $6, 11100, 1497453121, HEAP32[$6 + 8 >> 2]);
 }
 return 11125;
}
function btRigidBody__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 btCollisionObject__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
 HEAP32[$1 + 264 >> 2] = HEAP32[$0 + 324 >> 2];
 HEAP32[$1 + 268 >> 2] = HEAP32[$0 + 328 >> 2];
 HEAP32[$1 + 272 >> 2] = HEAP32[$0 + 332 >> 2];
 HEAP32[$1 + 276 >> 2] = HEAP32[$0 + 336 >> 2];
 HEAP32[$1 + 280 >> 2] = HEAP32[$0 + 340 >> 2];
 HEAP32[$1 + 284 >> 2] = HEAP32[$0 + 344 >> 2];
 HEAP32[$1 + 288 >> 2] = HEAP32[$0 + 348 >> 2];
 HEAP32[$1 + 292 >> 2] = HEAP32[$0 + 352 >> 2];
 HEAP32[$1 + 296 >> 2] = HEAP32[$0 + 356 >> 2];
 HEAP32[$1 + 300 >> 2] = HEAP32[$0 + 360 >> 2];
 HEAP32[$1 + 304 >> 2] = HEAP32[$0 + 364 >> 2];
 HEAP32[$1 + 308 >> 2] = HEAP32[$0 + 368 >> 2];
 HEAP32[$1 + 312 >> 2] = HEAP32[$0 + 372 >> 2];
 HEAP32[$1 + 316 >> 2] = HEAP32[$0 + 376 >> 2];
 HEAP32[$1 + 320 >> 2] = HEAP32[$0 + 380 >> 2];
 HEAP32[$1 + 324 >> 2] = HEAP32[$0 + 384 >> 2];
 HEAP32[$1 + 328 >> 2] = HEAP32[$0 + 388 >> 2];
 HEAP32[$1 + 332 >> 2] = HEAP32[$0 + 392 >> 2];
 HEAP32[$1 + 336 >> 2] = HEAP32[$0 + 396 >> 2];
 HEAP32[$1 + 340 >> 2] = HEAP32[$0 + 400 >> 2];
 HEAP32[$1 + 456 >> 2] = HEAP32[$0 + 404 >> 2];
 HEAP32[$1 + 344 >> 2] = HEAP32[$0 + 604 >> 2];
 HEAP32[$1 + 348 >> 2] = HEAP32[$0 + 608 >> 2];
 HEAP32[$1 + 352 >> 2] = HEAP32[$0 + 612 >> 2];
 HEAP32[$1 + 356 >> 2] = HEAP32[$0 + 616 >> 2];
 HEAP32[$1 + 360 >> 2] = HEAP32[$0 + 408 >> 2];
 HEAP32[$1 + 364 >> 2] = HEAP32[$0 + 412 >> 2];
 HEAP32[$1 + 368 >> 2] = HEAP32[$0 + 416 >> 2];
 HEAP32[$1 + 372 >> 2] = HEAP32[$0 + 420 >> 2];
 HEAP32[$1 + 376 >> 2] = HEAP32[$0 + 424 >> 2];
 HEAP32[$1 + 380 >> 2] = HEAP32[$0 + 428 >> 2];
 HEAP32[$1 + 384 >> 2] = HEAP32[$0 + 432 >> 2];
 HEAP32[$1 + 388 >> 2] = HEAP32[$0 + 436 >> 2];
 HEAP32[$1 + 392 >> 2] = HEAP32[$0 + 440 >> 2];
 HEAP32[$1 + 396 >> 2] = HEAP32[$0 + 444 >> 2];
 HEAP32[$1 + 400 >> 2] = HEAP32[$0 + 448 >> 2];
 HEAP32[$1 + 404 >> 2] = HEAP32[$0 + 452 >> 2];
 HEAP32[$1 + 408 >> 2] = HEAP32[$0 + 456 >> 2];
 HEAP32[$1 + 412 >> 2] = HEAP32[$0 + 460 >> 2];
 HEAP32[$1 + 416 >> 2] = HEAP32[$0 + 464 >> 2];
 HEAP32[$1 + 420 >> 2] = HEAP32[$0 + 468 >> 2];
 HEAP32[$1 + 424 >> 2] = HEAP32[$0 + 472 >> 2];
 HEAP32[$1 + 428 >> 2] = HEAP32[$0 + 476 >> 2];
 HEAP32[$1 + 432 >> 2] = HEAP32[$0 + 480 >> 2];
 HEAP32[$1 + 436 >> 2] = HEAP32[$0 + 484 >> 2];
 HEAP32[$1 + 440 >> 2] = HEAP32[$0 + 488 >> 2];
 HEAP32[$1 + 444 >> 2] = HEAP32[$0 + 492 >> 2];
 HEAP32[$1 + 448 >> 2] = HEAP32[$0 + 496 >> 2];
 HEAP32[$1 + 452 >> 2] = HEAP32[$0 + 500 >> 2];
 HEAP32[$1 + 460 >> 2] = HEAP32[$0 + 504 >> 2];
 HEAP32[$1 + 464 >> 2] = HEAP32[$0 + 508 >> 2];
 HEAP32[$1 + 492 >> 2] = HEAPU8[$0 + 512 | 0];
 HEAP32[$1 + 468 >> 2] = HEAP32[$0 + 516 >> 2];
 HEAP32[$1 + 472 >> 2] = HEAP32[$0 + 520 >> 2];
 HEAP32[$1 + 476 >> 2] = HEAP32[$0 + 524 >> 2];
 HEAP32[$1 + 480 >> 2] = HEAP32[$0 + 528 >> 2];
 HEAP32[$1 + 484 >> 2] = HEAP32[$0 + 532 >> 2];
 HEAP32[$1 + 488 >> 2] = HEAP32[$0 + 536 >> 2];
 return 2280;
}
function btGeneric6DofSpring2Constraint__calculateJacobi_28btRotationalLimitMotor2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btVector3__2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $21 = HEAP32[($7 ? 20 : 16) + $4 >> 2];
 $22 = HEAP32[($7 ? 12 : 8) + $4 >> 2];
 $23 = $5 << 2;
 HEAP32[$22 + $23 >> 2] = HEAP32[$6 >> 2];
 $24 = $5 + 1 | 0;
 $25 = $24 << 2;
 HEAP32[$25 + $22 >> 2] = HEAP32[$6 + 4 >> 2];
 $26 = $5 + 2 | 0;
 $27 = $26 << 2;
 HEAP32[$27 + $22 >> 2] = HEAP32[$6 + 8 >> 2];
 HEAPF32[$21 + $23 >> 2] = -HEAPF32[$6 >> 2];
 HEAPF32[$21 + $25 >> 2] = -HEAPF32[$6 + 4 >> 2];
 HEAPF32[$21 + $27 >> 2] = -HEAPF32[$6 + 8 >> 2];
 if (!$7) {
  $14 = HEAPF32[$0 + 1348 >> 2];
  $13 = HEAPF32[$3 + 52 >> 2];
  $15 = HEAPF32[$0 + 1352 >> 2];
  $16 = HEAPF32[$3 + 56 >> 2];
  $28 = HEAPF32[$0 + 1356 >> 2];
  $12 = HEAPF32[$2 + 56 >> 2];
  $17 = HEAPF32[$0 + 1292 >> 2];
  $18 = HEAPF32[$0 + 1284 >> 2];
  $19 = HEAPF32[$2 + 52 >> 2];
  $20 = HEAPF32[$0 + 1288 >> 2];
  $29 = HEAPF32[$3 + 48 >> 2];
  $10 = HEAPF32[$6 + 8 >> 2];
  $11 = HEAPF32[$6 + 4 >> 2];
  $30 = HEAPF32[$2 + 48 >> 2];
  $9 = HEAPF32[$6 >> 2];
  HEAP32[$1 + 12 >> 2] = 0;
  $18 = Math_fround($18 - $30);
  $19 = Math_fround($20 - $19);
  $20 = Math_fround(Math_fround($11 * $18) - Math_fround($9 * $19));
  HEAPF32[$1 + 8 >> 2] = $20;
  $12 = Math_fround($17 - $12);
  $17 = Math_fround(Math_fround($9 * $12) - Math_fround($18 * $10));
  HEAPF32[$1 + 4 >> 2] = $17;
  $12 = Math_fround(Math_fround($19 * $10) - Math_fround($12 * $11));
  HEAPF32[$1 >> 2] = $12;
  $15 = Math_fround($15 - $13);
  $16 = Math_fround($28 - $16);
  $13 = Math_fround(Math_fround($10 * $15) - Math_fround($11 * $16));
  $14 = Math_fround($14 - $29);
  $11 = Math_fround(Math_fround($11 * $14) - Math_fround($15 * $9));
  $10 = Math_fround(Math_fround($16 * $9) - Math_fround($14 * $10));
  if (!(!HEAPU8[$0 + 1452 | 0] | $8)) {
   $9 = HEAPF32[$0 + 1444 >> 2];
   HEAPF32[$1 + 8 >> 2] = $20 * $9;
   HEAPF32[$1 + 4 >> 2] = $17 * $9;
   HEAPF32[$1 >> 2] = $12 * $9;
   $9 = HEAPF32[$0 + 1448 >> 2];
   $11 = Math_fround($11 * $9);
   $13 = Math_fround($13 * $9);
   $10 = Math_fround($10 * $9);
  }
  $0 = HEAP32[$1 + 4 >> 2];
  $5 = $5 << 2;
  $6 = $5 + HEAP32[$4 + 12 >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$6 + 4 >> 2] = $0;
  HEAP32[$6 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  $6 = HEAP32[$4 + 20 >> 2];
  HEAPF32[$6 + $5 >> 2] = -$13;
  HEAPF32[($24 << 2) + $6 >> 2] = -$10;
  HEAPF32[($26 << 2) + $6 >> 2] = -$11;
 }
}
function btBoxBoxDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0);
 $3 = global$0 - 160 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 112 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$3 + 64 >> 2] = HEAP32[$1 + 64 >> 2];
 HEAP32[$3 + 116 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$3 + 68 >> 2] = HEAP32[$1 + 68 >> 2];
 HEAP32[$3 + 120 >> 2] = HEAP32[$1 + 8 >> 2];
 HEAP32[$3 + 72 >> 2] = HEAP32[$1 + 72 >> 2];
 HEAP32[$3 + 128 >> 2] = HEAP32[$1 + 16 >> 2];
 HEAP32[$3 + 80 >> 2] = HEAP32[$1 + 80 >> 2];
 HEAP32[$3 + 132 >> 2] = HEAP32[$1 + 20 >> 2];
 HEAP32[$3 + 84 >> 2] = HEAP32[$1 + 84 >> 2];
 HEAP32[$3 + 136 >> 2] = HEAP32[$1 + 24 >> 2];
 HEAP32[$3 + 88 >> 2] = HEAP32[$1 + 88 >> 2];
 HEAP32[$3 + 144 >> 2] = HEAP32[$1 + 32 >> 2];
 HEAP32[$3 + 96 >> 2] = HEAP32[$1 + 96 >> 2];
 HEAP32[$3 + 148 >> 2] = HEAP32[$1 + 36 >> 2];
 HEAP32[$3 + 100 >> 2] = HEAP32[$1 + 100 >> 2];
 HEAP32[$3 + 152 >> 2] = HEAP32[$1 + 40 >> 2];
 HEAP32[$3 + 104 >> 2] = HEAP32[$1 + 104 >> 2];
 $4 = HEAP32[$0 + 4 >> 2];
 $6 = HEAPF32[$4 + 40 >> 2];
 $5 = HEAPF32[$4 + 36 >> 2];
 $7 = HEAPF32[$4 + 32 >> 2];
 $8 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4));
 $9 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4));
 $10 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4));
 HEAP32[$3 + 36 >> 2] = 0;
 $5 = Math_fround($5 + $9);
 HEAPF32[$3 + 28 >> 2] = $5 + $5;
 $5 = Math_fround($7 + $8);
 HEAPF32[$3 + 24 >> 2] = $5 + $5;
 $6 = Math_fround($6 + $10);
 HEAPF32[$3 + 32 >> 2] = $6 + $6;
 $4 = HEAP32[$0 + 8 >> 2];
 $6 = HEAPF32[$4 + 40 >> 2];
 $5 = HEAPF32[$4 + 36 >> 2];
 $7 = HEAPF32[$4 + 32 >> 2];
 $8 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4));
 $9 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4));
 $10 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4));
 HEAP32[$3 + 20 >> 2] = 0;
 $5 = Math_fround($5 + $9);
 HEAPF32[$3 + 12 >> 2] = $5 + $5;
 $5 = Math_fround($7 + $8);
 HEAPF32[$3 + 8 >> 2] = $5 + $5;
 $6 = Math_fround($6 + $10);
 HEAPF32[$3 + 16 >> 2] = $6 + $6;
 dBoxBox2_28btVector3_20const__2c_20float_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_20const__2c_20btVector3_20const__2c_20btVector3__2c_20float__2c_20int__2c_20int_2c_20dContactGeom__2c_20int_2c_20btDiscreteCollisionDetectorInterface__Result__29($1 + 48 | 0, $3 + 112 | 0, $3 + 24 | 0, $1 + 112 | 0, $3 - -64 | 0, $3 + 8 | 0, $3 + 48 | 0, $3 + 44 | 0, $3 + 40 | 0, 4, $3, $3, $2);
 $0 = $3 + 160 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHashedSimplePairCache__growTables_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 label$1 : {
  $7 = HEAP32[$0 + 28 >> 2];
  $3 = HEAP32[$0 + 12 >> 2];
  if (($7 | 0) >= ($3 | 0)) {
   break label$1;
  }
  label$2 : {
   if (HEAP32[$0 + 32 >> 2] >= ($3 | 0)) {
    $4 = HEAP32[$0 + 36 >> 2];
    break label$2;
   }
   $5 = $7;
   if ($3) {
    $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($3 << 2, 16);
    $5 = HEAP32[$0 + 28 >> 2];
   }
   $6 = HEAP32[$0 + 36 >> 2];
   label$5 : {
    if (($5 | 0) >= 1) {
     while (1) {
      $1 = $2 << 2;
      HEAP32[$4 + $1 >> 2] = HEAP32[$1 + $6 >> 2];
      $2 = $2 + 1 | 0;
      if (($5 | 0) != ($2 | 0)) {
       continue;
      }
      break label$5;
     }
    }
    if ($6) {
     break label$5;
    }
    HEAP32[$0 + 36 >> 2] = $4;
    HEAP32[$0 + 32 >> 2] = $3;
    HEAP8[$0 + 40 | 0] = 1;
    break label$2;
   }
   if (HEAPU8[$0 + 40 | 0]) {
    btAlignedFreeInternal_28void__29($6);
   }
   HEAP32[$0 + 36 >> 2] = $4;
   HEAP8[$0 + 40 | 0] = 1;
   HEAP32[$0 + 32 >> 2] = $3;
  }
  $2 = $7 << 2;
  $8 = $3 << 2;
  memset($4 + $2 | 0, 0, $8 - $2 | 0);
  HEAP32[$0 + 28 >> 2] = $3;
  $9 = HEAP32[$0 + 48 >> 2];
  if (($9 | 0) < ($3 | 0)) {
   label$10 : {
    if (HEAP32[$0 + 52 >> 2] >= ($3 | 0)) {
     $4 = HEAP32[$0 + 56 >> 2];
     break label$10;
    }
    $2 = 0;
    $5 = $9;
    $4 = 0;
    if ($3) {
     $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8, 16);
     $5 = HEAP32[$0 + 48 >> 2];
    }
    $6 = HEAP32[$0 + 56 >> 2];
    label$13 : {
     if (($5 | 0) >= 1) {
      while (1) {
       $1 = $2 << 2;
       HEAP32[$4 + $1 >> 2] = HEAP32[$1 + $6 >> 2];
       $2 = $2 + 1 | 0;
       if (($5 | 0) != ($2 | 0)) {
        continue;
       }
       break label$13;
      }
     }
     if ($6) {
      break label$13;
     }
     HEAP32[$0 + 56 >> 2] = $4;
     HEAP32[$0 + 52 >> 2] = $3;
     HEAP8[$0 + 60 | 0] = 1;
     break label$10;
    }
    if (HEAPU8[$0 + 60 | 0]) {
     btAlignedFreeInternal_28void__29($6);
    }
    HEAP32[$0 + 56 >> 2] = $4;
    HEAP8[$0 + 60 | 0] = 1;
    HEAP32[$0 + 52 >> 2] = $3;
   }
   $2 = $9 << 2;
   memset($4 + $2 | 0, 0, $8 - $2 | 0);
  }
  HEAP32[$0 + 48 >> 2] = $3;
  if (($3 | 0) >= 1) {
   memset(HEAP32[$0 + 36 >> 2], 255, $8);
   memset(HEAP32[$0 + 56 >> 2], 255, $8);
  }
  if (($7 | 0) < 1) {
   break label$1;
  }
  $4 = HEAP32[$0 + 56 >> 2];
  $5 = HEAP32[$0 + 16 >> 2];
  $6 = HEAP32[$0 + 36 >> 2];
  $2 = 0;
  while (1) {
   $1 = Math_imul($2, 12) + $5 | 0;
   $1 = HEAP32[$1 + 4 >> 2] << 16 | HEAP32[$1 >> 2];
   $1 = $1 + ($1 << 15 ^ -1) | 0;
   $1 = Math_imul($1 ^ $1 >>> 10, 9);
   $1 = $1 ^ $1 >>> 6;
   $1 = $1 + ($1 << 11 ^ -1) | 0;
   $1 = ((HEAP32[$0 + 12 >> 2] + -1 & ($1 ^ $1 >>> 16)) << 2) + $6 | 0;
   HEAP32[($2 << 2) + $4 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$1 >> 2] = $2;
   $2 = $2 + 1 | 0;
   if (($7 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
}
function btGeneric6DofSpring2Constraint__setAngularLimits_28btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 $9 = global$0 - 32 | 0;
 $13 = $9;
 if ($9 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $13;
 HEAP32[$9 + 24 >> 2] = HEAP32[827];
 $14 = HEAP32[826];
 $13 = HEAP32[825];
 HEAP32[$9 + 16 >> 2] = $13;
 HEAP32[$9 + 20 >> 2] = $14;
 $10 = HEAP32[$0 + 1232 >> 2];
 if ($10 >>> 0 <= 5) {
  label$3 : {
   label$4 : {
    label$5 : {
     switch ($10 - 1 | 0) {
     default:
      HEAP32[$9 + 16 >> 2] = 0;
      $10 = 2;
      break label$4;
     case 0:
      HEAP32[$9 + 16 >> 2] = 0;
      $10 = 1;
      $12 = 2;
      break label$3;
     case 1:
      $11 = 1;
      HEAP32[$9 + 16 >> 2] = 1;
      $10 = 2;
      $12 = 0;
      break label$3;
     case 2:
      $11 = 1;
      HEAP32[$9 + 16 >> 2] = 1;
      $10 = 0;
      $12 = 2;
      break label$3;
     case 3:
      $11 = 2;
      HEAP32[$9 + 16 >> 2] = 2;
      $10 = 1;
      $12 = 0;
      break label$3;
     case 4:
      break label$5;
     }
    }
    $11 = 2;
    HEAP32[$9 + 16 >> 2] = 2;
    $10 = 0;
   }
   $12 = 1;
  }
  HEAP32[$9 + 24 >> 2] = $10;
  HEAP32[$9 + 20 >> 2] = $12;
 }
 $12 = 0;
 while (1) {
  $10 = Math_imul($11, 88) + $0 | 0;
  if (!(HEAPU8[$10 + 1016 | 0] ? 0 : !(HEAP32[$10 + 1052 >> 2] | HEAPU8[$10 + 996 | 0]))) {
   $16 = ($11 << 4) + $0 | 0;
   $15 = $16 + 1388 | 0;
   $14 = HEAP32[$15 >> 2];
   $13 = HEAP32[$15 + 4 >> 2];
   HEAP32[$9 + 8 >> 2] = $14;
   HEAP32[$9 + 12 >> 2] = $13;
   $15 = $16 + 1380 | 0;
   $13 = HEAP32[$15 >> 2];
   $14 = HEAP32[$15 + 4 >> 2];
   HEAP32[$9 >> 2] = $13;
   HEAP32[$9 + 4 >> 2] = $14;
   $11 = HEAP32[$0 + 1456 >> 2] >> ($11 << 2) + 12;
   if (!($11 & 1)) {
    HEAP32[$10 + 984 >> 2] = HEAP32[HEAP32[$1 + 32 >> 2] >> 2];
   }
   if (!($11 & 2)) {
    HEAP32[$10 + 980 >> 2] = HEAP32[$1 + 4 >> 2];
   }
   if (!($11 & 4)) {
    HEAP32[$10 + 992 >> 2] = HEAP32[HEAP32[$1 + 32 >> 2] >> 2];
   }
   $16 = $10 + 968 | 0;
   if (!($11 & 8)) {
    HEAP32[$10 + 988 >> 2] = HEAP32[$1 + 4 >> 2];
   }
   $2 = btGeneric6DofSpring2Constraint__get_limit_motor_info2_28btRotationalLimitMotor2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btVector3__2c_20int_2c_20int_29($0, $16, $3, $4, $5, $6, $7, $8, $1, $2, $9, 1, 0) + $2 | 0;
  }
  $12 = $12 + 1 | 0;
  if (($12 | 0) != 3) {
   $11 = HEAP32[($9 + 16 | 0) + ($12 << 2) >> 2];
   continue;
  }
  break;
 }
 $0 = $9 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function btTriangleConvexcastCallback__processTriangle_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0;
 $4 = global$0 - 688 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $12 = btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($4 + 576 | 0);
 HEAP32[$4 + 580 >> 2] = 1;
 HEAP32[$4 + 576 >> 2] = 6576;
 $5 = $1;
 $6 = HEAP32[$5 + 8 >> 2];
 $1 = HEAP32[$5 + 12 >> 2];
 HEAP32[$4 + 644 >> 2] = $6;
 HEAP32[$4 + 648 >> 2] = $1;
 $6 = HEAP32[$5 + 4 >> 2];
 $1 = HEAP32[$5 >> 2];
 HEAP32[$4 + 636 >> 2] = $1;
 HEAP32[$4 + 640 >> 2] = $6;
 $1 = HEAP32[$5 + 28 >> 2];
 $6 = HEAP32[$5 + 24 >> 2];
 HEAP32[$4 + 660 >> 2] = $6;
 HEAP32[$4 + 664 >> 2] = $1;
 $6 = HEAP32[$5 + 20 >> 2];
 $1 = HEAP32[$5 + 16 >> 2];
 HEAP32[$4 + 652 >> 2] = $1;
 HEAP32[$4 + 656 >> 2] = $6;
 $1 = HEAP32[$5 + 44 >> 2];
 $6 = HEAP32[$5 + 40 >> 2];
 HEAP32[$4 + 676 >> 2] = $6;
 HEAP32[$4 + 680 >> 2] = $1;
 $6 = HEAP32[$5 + 36 >> 2];
 $1 = HEAP32[$5 + 32 >> 2];
 HEAP32[$4 + 668 >> 2] = $1;
 HEAP32[$4 + 672 >> 2] = $6;
 HEAP32[$4 + 624 >> 2] = HEAP32[$0 + 204 >> 2];
 HEAP8[$4 + 548 | 0] = 0;
 HEAP32[$4 + 524 >> 2] = 953267991;
 HEAP32[$4 + 208 >> 2] = 4316;
 $1 = btContinuousConvexCollision__btContinuousConvexCollision_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($4 + 184 | 0, HEAP32[$0 + 4 >> 2], $4 + 576 | 0, $4 + 216 | 0, $4 + 208 | 0);
 HEAP32[$4 + 8 >> 2] = 6988;
 HEAP32[$4 + 172 >> 2] = 1065353216;
 HEAP32[$4 + 176 >> 2] = 0;
 HEAP32[$4 + 180 >> 2] = HEAP32[$0 + 208 >> 2];
 $5 = $0 + 136 | 0;
 label$2 : {
  if (!btContinuousConvexCollision__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29($1, $0 + 8 | 0, $0 + 72 | 0, $5, $5, $4 + 8 | 0)) {
   break label$2;
  }
  $8 = HEAPF32[$4 + 140 >> 2];
  $9 = HEAPF32[$4 + 144 >> 2];
  $10 = HEAPF32[$4 + 148 >> 2];
  $7 = Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($9 * $9)) + Math_fround($10 * $10));
  if (!($7 > Math_fround(9999999747378752e-20))) {
   break label$2;
  }
  $11 = HEAPF32[$4 + 172 >> 2];
  if (!($11 < HEAPF32[$0 + 200 >> 2])) {
   break label$2;
  }
  $7 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($7)));
  HEAPF32[$4 + 148 >> 2] = $10 * $7;
  HEAPF32[$4 + 144 >> 2] = $9 * $7;
  HEAPF32[$4 + 140 >> 2] = $8 * $7;
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $4 + 140 | 0, $4 + 156 | 0, $11, $2, $3));
 }
 btConvexCast___btConvexCast_28_29($1);
 btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($12);
 $0 = $4 + 688 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btPolyhedralConvexShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0);
 $8 = global$0 - 2048 | 0;
 $6 = $8;
 if ($8 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 label$2 : {
  if (($3 | 0) <= 0) {
   break label$2;
  }
  while (1) {
   HEAP32[(($4 << 4) + $2 | 0) + 12 >> 2] = -581039253;
   $4 = $4 + 1 | 0;
   if (($4 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
  if (($3 | 0) < 1) {
   break label$2;
  }
  while (1) {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0) >= 1) {
    $4 = $12 << 4;
    $6 = $4 + $2 | 0;
    $14 = $6;
    $13 = $1 + $4 | 0;
    $16 = $13;
    $10 = 0;
    while (1) {
     $7 = 128;
     label$7 : {
      label$8 : {
       if (((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0) - $10 | 0) > 127) {
        break label$8;
       }
       $7 = (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0) - $10 | 0;
       if (($7 | 0) >= 1) {
        break label$8;
       }
       $9 = Math_fround(-3.4028234663852886e+38);
       $11 = -1;
       break label$7;
      }
      $4 = 0;
      while (1) {
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, $4, ($4 << 4) + $8 | 0);
       $4 = $4 + 1 | 0;
       if (($7 | 0) != ($4 | 0)) {
        continue;
       }
       break;
      }
      $17 = HEAPF32[$16 + 8 >> 2];
      $18 = HEAPF32[$13 + 4 >> 2];
      $19 = HEAPF32[$13 >> 2];
      $4 = 0;
      $11 = -1;
      $9 = Math_fround(-3.4028234663852886e+38);
      while (1) {
       $5 = ($4 << 4) + $8 | 0;
       $15 = Math_fround(Math_fround(Math_fround($19 * HEAPF32[$5 >> 2]) + Math_fround($18 * HEAPF32[$5 + 4 >> 2])) + Math_fround($17 * HEAPF32[$5 + 8 >> 2]));
       $5 = $15 > $9;
       $9 = $5 ? $15 : $9;
       $11 = $5 ? $4 : $11;
       $4 = $4 + 1 | 0;
       if (($7 | 0) != ($4 | 0)) {
        continue;
       }
       break;
      }
     }
     if (!!($9 > HEAPF32[$14 + 12 >> 2])) {
      $4 = ($11 << 4) + $8 | 0;
      $5 = HEAP32[$4 + 8 >> 2];
      $7 = HEAP32[$4 + 12 >> 2];
      HEAP32[$6 + 8 >> 2] = $5;
      HEAP32[$6 + 12 >> 2] = $7;
      $5 = HEAP32[$4 + 4 >> 2];
      $7 = HEAP32[$4 >> 2];
      HEAP32[$6 >> 2] = $7;
      HEAP32[$6 + 4 >> 2] = $5;
      HEAPF32[$14 + 12 >> 2] = $9;
     }
     $10 = $10 + 128 | 0;
     if (($10 | 0) < (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0)) {
      continue;
     }
     break;
    }
   }
   $12 = $12 + 1 | 0;
   if (($12 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = $8 + 2048 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function void_20btAlignedObjectArray_btConvexHullInternal__Point32___quickSortInternal_pointCmp__28pointCmp_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 $11 = global$0 - 16 | 0;
 $5 = $11;
 if ($11 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $5 = HEAP32[$0 + 12 >> 2];
 $8 = $5 + (($2 + $3 | 0) / 2 << 4) | 0;
 $14 = HEAP32[$8 + 8 >> 2];
 $12 = HEAP32[$8 + 4 >> 2];
 $13 = HEAP32[$8 >> 2];
 $8 = $2;
 $10 = $3;
 while (1) {
  label$3 : {
   $6 = ($8 << 4) + $5 | 0;
   $9 = HEAP32[$6 + 4 >> 2];
   label$4 : {
    if (($9 | 0) < ($12 | 0)) {
     break label$4;
    }
    if (($9 | 0) != ($12 | 0)) {
     break label$3;
    }
    $9 = HEAP32[$6 >> 2];
    if (($9 | 0) < ($13 | 0)) {
     break label$4;
    }
    if (($9 | 0) != ($13 | 0) | HEAP32[$6 + 8 >> 2] >= ($14 | 0)) {
     break label$3;
    }
   }
   $8 = $8 + 1 | 0;
   continue;
  }
  while (1) {
   label$6 : {
    $15 = $10 << 4;
    $9 = $15 + $5 | 0;
    $4 = HEAP32[$9 + 4 >> 2];
    label$7 : {
     if (($12 | 0) < ($4 | 0)) {
      break label$7;
     }
     if (($12 | 0) != ($4 | 0)) {
      break label$6;
     }
     $4 = HEAP32[$9 >> 2];
     if (($13 | 0) < ($4 | 0)) {
      break label$7;
     }
     if (($13 | 0) != ($4 | 0) | ($14 | 0) >= HEAP32[$9 + 8 >> 2]) {
      break label$6;
     }
    }
    $10 = $10 + -1 | 0;
    continue;
   }
   break;
  }
  if (($8 | 0) <= ($10 | 0)) {
   $4 = $6 + 8 | 0;
   $5 = HEAP32[$4 >> 2];
   $7 = HEAP32[$4 + 4 >> 2];
   $4 = $5;
   $5 = $11 + 8 | 0;
   HEAP32[$5 >> 2] = $4;
   HEAP32[$5 + 4 >> 2] = $7;
   $5 = HEAP32[$6 + 4 >> 2];
   $7 = HEAP32[$6 >> 2];
   $4 = $7;
   $7 = $11;
   HEAP32[$7 >> 2] = $4;
   HEAP32[$7 + 4 >> 2] = $5;
   $4 = $9;
   $5 = HEAP32[$4 >> 2];
   $7 = HEAP32[$4 + 4 >> 2];
   HEAP32[$6 >> 2] = $5;
   HEAP32[$6 + 4 >> 2] = $7;
   $5 = HEAP32[$4 + 12 >> 2];
   $7 = HEAP32[$4 + 8 >> 2];
   HEAP32[$6 + 8 >> 2] = $7;
   HEAP32[$6 + 12 >> 2] = $5;
   $4 = $11;
   $5 = HEAP32[$4 >> 2];
   $7 = HEAP32[$4 + 4 >> 2];
   $6 = HEAP32[$0 + 12 >> 2] + $15 | 0;
   HEAP32[$6 >> 2] = $5;
   HEAP32[$6 + 4 >> 2] = $7;
   $5 = HEAP32[$4 + 12 >> 2];
   $7 = HEAP32[$4 + 8 >> 2];
   HEAP32[$6 + 8 >> 2] = $7;
   HEAP32[$6 + 12 >> 2] = $5;
   $10 = $10 + -1 | 0;
   $8 = $8 + 1 | 0;
  }
  if (($8 | 0) <= ($10 | 0)) {
   $5 = HEAP32[$0 + 12 >> 2];
   continue;
  }
  break;
 }
 if (($10 | 0) > ($2 | 0)) {
  void_20btAlignedObjectArray_btConvexHullInternal__Point32___quickSortInternal_pointCmp__28pointCmp_20const__2c_20int_2c_20int_29($0, $1, $2, $10);
 }
 if (($8 | 0) < ($3 | 0)) {
  void_20btAlignedObjectArray_btConvexHullInternal__Point32___quickSortInternal_pointCmp__28pointCmp_20const__2c_20int_2c_20int_29($0, $1, $8, $3);
 }
 $0 = $11 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHashMap_btHashPtr_2c_20btCollisionShape____growTables_28btHashPtr_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 label$1 : {
  $7 = HEAP32[$0 + 4 >> 2];
  $4 = HEAP32[$0 + 48 >> 2];
  if (($7 | 0) >= ($4 | 0)) {
   break label$1;
  }
  label$2 : {
   if (HEAP32[$0 + 8 >> 2] >= ($4 | 0)) {
    $5 = HEAP32[$0 + 12 >> 2];
    break label$2;
   }
   $1 = $7;
   if ($4) {
    $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2, 16);
    $1 = HEAP32[$0 + 4 >> 2];
   }
   $6 = HEAP32[$0 + 12 >> 2];
   label$5 : {
    label$6 : {
     if (($1 | 0) >= 1) {
      while (1) {
       $2 = $3 << 2;
       HEAP32[$2 + $5 >> 2] = HEAP32[$2 + $6 >> 2];
       $3 = $3 + 1 | 0;
       if (($1 | 0) != ($3 | 0)) {
        continue;
       }
       break label$6;
      }
     }
     if ($6) {
      break label$6;
     }
     break label$5;
    }
    if (HEAPU8[$0 + 16 | 0]) {
     btAlignedFreeInternal_28void__29($6);
    }
   }
   HEAP32[$0 + 12 >> 2] = $5;
   HEAP8[$0 + 16 | 0] = 1;
   HEAP32[$0 + 8 >> 2] = $4;
  }
  $3 = $7 << 2;
  $8 = $4 << 2;
  memset($5 + $3 | 0, 0, $8 - $3 | 0);
  HEAP32[$0 + 4 >> 2] = $4;
  $9 = HEAP32[$0 + 24 >> 2];
  if (($9 | 0) < ($4 | 0)) {
   label$11 : {
    if (HEAP32[$0 + 28 >> 2] >= ($4 | 0)) {
     $5 = HEAP32[$0 + 32 >> 2];
     break label$11;
    }
    $3 = 0;
    $1 = $9;
    $5 = 0;
    if ($4) {
     $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8, 16);
     $1 = HEAP32[$0 + 24 >> 2];
    }
    $6 = HEAP32[$0 + 32 >> 2];
    label$14 : {
     if (($1 | 0) >= 1) {
      while (1) {
       $2 = $3 << 2;
       HEAP32[$2 + $5 >> 2] = HEAP32[$2 + $6 >> 2];
       $3 = $3 + 1 | 0;
       if (($1 | 0) != ($3 | 0)) {
        continue;
       }
       break label$14;
      }
     }
     if ($6) {
      break label$14;
     }
     HEAP32[$0 + 32 >> 2] = $5;
     HEAP32[$0 + 28 >> 2] = $4;
     HEAP8[$0 + 36 | 0] = 1;
     break label$11;
    }
    if (HEAPU8[$0 + 36 | 0]) {
     btAlignedFreeInternal_28void__29($6);
    }
    HEAP32[$0 + 32 >> 2] = $5;
    HEAP8[$0 + 36 | 0] = 1;
    HEAP32[$0 + 28 >> 2] = $4;
   }
   $3 = $9 << 2;
   memset($5 + $3 | 0, 0, $8 - $3 | 0);
  }
  HEAP32[$0 + 24 >> 2] = $4;
  if (($4 | 0) >= 1) {
   memset(HEAP32[$0 + 12 >> 2], 255, $8);
   memset(HEAP32[$0 + 32 >> 2], 255, $8);
  }
  if (($7 | 0) < 1) {
   break label$1;
  }
  $5 = HEAP32[$0 + 32 >> 2];
  $1 = HEAP32[$0 + 72 >> 2];
  $6 = HEAP32[$0 + 12 >> 2];
  $3 = 0;
  while (1) {
   $2 = HEAP32[($3 << 3) + $1 >> 2];
   $2 = $2 + ($2 << 15 ^ -1) | 0;
   $2 = Math_imul($2 ^ $2 >>> 10, 9);
   $2 = $2 ^ $2 >>> 6;
   $2 = $2 + ($2 << 11 ^ -1) | 0;
   $2 = ((HEAP32[$0 + 48 >> 2] + -1 & ($2 ^ $2 >>> 16)) << 2) + $6 | 0;
   HEAP32[($3 << 2) + $5 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$2 >> 2] = $3;
   $3 = $3 + 1 | 0;
   if (($7 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
}
function btDiscreteDynamicsWorld__updateActivationState_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $6 = global$0 - 16 | 0;
 $2 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $9 = CProfileSample__CProfileSample_28char_20const__29($6 + 8 | 0, 2582);
 if (HEAP32[$0 + 248 >> 2] >= 1) {
  while (1) {
   $2 = HEAP32[HEAP32[$0 + 256 >> 2] + ($7 << 2) >> 2];
   label$4 : {
    if (!$2) {
     break label$4;
    }
    $5 = HEAP32[$2 + 220 >> 2];
    $8 = $5 + -2 | 0;
    label$5 : {
     if (!($8 - 1 | 0 ? $8 >>> 0 <= 2 : 0)) {
      label$7 : {
       $3 = HEAPF32[$2 + 372 >> 2];
       $4 = Math_fround($3 * $3);
       $3 = HEAPF32[$2 + 376 >> 2];
       $4 = Math_fround($4 + Math_fround($3 * $3));
       $3 = HEAPF32[$2 + 380 >> 2];
       $4 = Math_fround($4 + Math_fround($3 * $3));
       $3 = HEAPF32[$2 + 532 >> 2];
       if (!($4 < Math_fround($3 * $3))) {
        break label$7;
       }
       $3 = HEAPF32[$2 + 388 >> 2];
       $4 = Math_fround($3 * $3);
       $3 = HEAPF32[$2 + 392 >> 2];
       $4 = Math_fround($4 + Math_fround($3 * $3));
       $3 = HEAPF32[$2 + 396 >> 2];
       $4 = Math_fround($4 + Math_fround($3 * $3));
       $3 = HEAPF32[$2 + 536 >> 2];
       if (!($4 < Math_fround($3 * $3))) {
        break label$7;
       }
       HEAPF32[$2 + 224 >> 2] = HEAPF32[$2 + 224 >> 2] + $1;
       break label$5;
      }
      HEAP32[$2 + 224 >> 2] = 0;
      btCollisionObject__setActivationState_28int_29_20const($2, 0);
      $5 = HEAP32[$2 + 220 >> 2];
     }
     if (($5 | 0) == 4) {
      break label$4;
     }
    }
    label$8 : {
     if (HEAPU8[20836]) {
      break label$8;
     }
     $3 = HEAPF32[4965];
     if ($3 == Math_fround(0) | (HEAPF32[$2 + 224 >> 2] > $3 ^ 1 ? ($5 & -2) != 2 : 0)) {
      break label$8;
     }
     if (HEAPU8[$2 + 204 | 0] & 3) {
      btCollisionObject__setActivationState_28int_29_20const($2, 2);
      break label$4;
     }
     if (($5 | 0) == 1) {
      btCollisionObject__setActivationState_28int_29_20const($2, 3);
      $5 = HEAP32[$2 + 220 >> 2];
     }
     if (($5 | 0) != 2) {
      break label$4;
     }
     HEAP32[$2 + 388 >> 2] = 0;
     HEAP32[$2 + 392 >> 2] = 0;
     HEAP32[$2 + 372 >> 2] = 0;
     HEAP32[$2 + 376 >> 2] = 0;
     HEAP32[$2 + 396 >> 2] = 0;
     HEAP32[$2 + 400 >> 2] = 0;
     HEAP32[$2 + 380 >> 2] = 0;
     HEAP32[$2 + 384 >> 2] = 0;
     HEAP32[$2 + 304 >> 2] = HEAP32[$2 + 304 >> 2] + 2;
     break label$4;
    }
    btCollisionObject__setActivationState_28int_29_20const($2, 1);
   }
   $7 = $7 + 1 | 0;
   if (($7 | 0) < HEAP32[$0 + 248 >> 2]) {
    continue;
   }
   break;
  }
 }
 CProfileSample___CProfileSample_28_29($9);
 $0 = $6 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexPolyhedron__testContainment_28_29_20const($0) {
 var $1 = Math_fround(0), $2 = Math_fround(0), $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $7 = HEAP32[$0 + 28 >> 2];
 $9 = ($7 | 0) < 1;
 while (1) {
  label$2 : {
   if ($4 >>> 0 > 7) {
    break label$2;
   }
   label$3 : {
    switch ($4 - 1 | 0) {
    default:
     $1 = Math_fround(HEAPF32[$0 + 88 >> 2] + HEAPF32[$0 + 72 >> 2]);
     $2 = Math_fround(HEAPF32[$0 + 84 >> 2] + HEAPF32[$0 + 68 >> 2]);
     $3 = Math_fround(HEAPF32[$0 + 80 >> 2] + HEAPF32[$0 + 64 >> 2]);
     break label$2;
    case 0:
     $1 = Math_fround(HEAPF32[$0 + 72 >> 2] - HEAPF32[$0 + 88 >> 2]);
     $2 = Math_fround(HEAPF32[$0 + 84 >> 2] + HEAPF32[$0 + 68 >> 2]);
     $3 = Math_fround(HEAPF32[$0 + 80 >> 2] + HEAPF32[$0 + 64 >> 2]);
     break label$2;
    case 1:
     $1 = Math_fround(HEAPF32[$0 + 88 >> 2] + HEAPF32[$0 + 72 >> 2]);
     $2 = Math_fround(HEAPF32[$0 + 68 >> 2] - HEAPF32[$0 + 84 >> 2]);
     $3 = Math_fround(HEAPF32[$0 + 80 >> 2] + HEAPF32[$0 + 64 >> 2]);
     break label$2;
    case 2:
     $1 = Math_fround(HEAPF32[$0 + 72 >> 2] - HEAPF32[$0 + 88 >> 2]);
     $2 = Math_fround(HEAPF32[$0 + 68 >> 2] - HEAPF32[$0 + 84 >> 2]);
     $3 = Math_fround(HEAPF32[$0 + 80 >> 2] + HEAPF32[$0 + 64 >> 2]);
     break label$2;
    case 3:
     $1 = Math_fround(HEAPF32[$0 + 88 >> 2] + HEAPF32[$0 + 72 >> 2]);
     $2 = Math_fround(HEAPF32[$0 + 84 >> 2] + HEAPF32[$0 + 68 >> 2]);
     $3 = Math_fround(HEAPF32[$0 + 64 >> 2] - HEAPF32[$0 + 80 >> 2]);
     break label$2;
    case 4:
     $1 = Math_fround(HEAPF32[$0 + 72 >> 2] - HEAPF32[$0 + 88 >> 2]);
     $2 = Math_fround(HEAPF32[$0 + 84 >> 2] + HEAPF32[$0 + 68 >> 2]);
     $3 = Math_fround(HEAPF32[$0 + 64 >> 2] - HEAPF32[$0 + 80 >> 2]);
     break label$2;
    case 5:
     $1 = Math_fround(HEAPF32[$0 + 88 >> 2] + HEAPF32[$0 + 72 >> 2]);
     $2 = Math_fround(HEAPF32[$0 + 68 >> 2] - HEAPF32[$0 + 84 >> 2]);
     $3 = Math_fround(HEAPF32[$0 + 64 >> 2] - HEAPF32[$0 + 80 >> 2]);
     break label$2;
    case 6:
     break label$3;
    }
   }
   $1 = Math_fround(HEAPF32[$0 + 72 >> 2] - HEAPF32[$0 + 88 >> 2]);
   $2 = Math_fround(HEAPF32[$0 + 68 >> 2] - HEAPF32[$0 + 84 >> 2]);
   $3 = Math_fround(HEAPF32[$0 + 64 >> 2] - HEAPF32[$0 + 80 >> 2]);
  }
  label$11 : {
   if (!$9) {
    $10 = HEAP32[$0 + 36 >> 2];
    $8 = 0;
    $5 = 0;
    while (1) {
     $6 = Math_imul($5, 36) + $10 | 0;
     if (!!(Math_fround(HEAPF32[$6 + 32 >> 2] + Math_fround(Math_fround(Math_fround($3 * HEAPF32[$6 + 20 >> 2]) + Math_fround($2 * HEAPF32[$6 + 24 >> 2])) + Math_fround($1 * HEAPF32[$6 + 28 >> 2]))) > Math_fround(0))) {
      break label$11;
     }
     $5 = $5 + 1 | 0;
     if (($5 | 0) < ($7 | 0)) {
      continue;
     }
     break;
    }
   }
   $8 = 1;
   $4 = $4 + 1 | 0;
   if (($4 | 0) != 8) {
    continue;
   }
  }
  break;
 }
 return $8;
}
function btHashedOverlappingPairCache__internalAddPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $3 = HEAP32[$1 + 12 >> 2] > HEAP32[$2 + 12 >> 2];
 $6 = $3 ? $1 : $2;
 $7 = HEAP32[$6 + 12 >> 2];
 $8 = $3 ? $2 : $1;
 $5 = HEAP32[$8 + 12 >> 2];
 $1 = $5 | $7 << 16;
 $1 = $1 + ($1 << 15 ^ -1) | 0;
 $1 = Math_imul($1 ^ $1 >>> 10, 9);
 $1 = $1 ^ $1 >>> 6;
 $1 = $1 + ($1 << 11 ^ -1) | 0;
 $12 = $1 ^ $1 >>> 16;
 $9 = HEAP32[$0 + 12 >> 2];
 $11 = $12 & $9 + -1;
 $1 = HEAP32[HEAP32[$0 + 40 >> 2] + ($11 << 2) >> 2];
 label$1 : {
  if (($1 | 0) != -1) {
   $2 = HEAP32[$0 + 16 >> 2];
   while (1) {
    $3 = $1 << 4;
    $4 = $3 + $2 | 0;
    if (HEAP32[HEAP32[($2 + $3 | 0) + 4 >> 2] + 12 >> 2] == ($7 | 0) ? HEAP32[HEAP32[$4 >> 2] + 12 >> 2] == ($5 | 0) : 0) {
     break label$1;
    }
    $1 = HEAP32[HEAP32[$0 + 60 >> 2] + ($1 << 2) >> 2];
    if (($1 | 0) != -1) {
     continue;
    }
    break;
   }
  }
  $1 = $9;
  $5 = HEAP32[$0 + 8 >> 2];
  $2 = $5;
  label$5 : {
   if (($1 | 0) != ($2 | 0)) {
    break label$5;
   }
   $2 = $9;
   $10 = $1 ? $1 << 1 : 1;
   if (($1 | 0) >= ($10 | 0)) {
    break label$5;
   }
   label$6 : {
    if (!$10) {
     $4 = 0;
     $1 = $9;
     break label$6;
    }
    $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($10 << 4, 16);
    $1 = HEAP32[$0 + 8 >> 2];
   }
   $7 = $1;
   if (($7 | 0) >= 1) {
    $3 = 0;
    while (1) {
     $2 = $3 << 4;
     $1 = $4 + $2 | 0;
     $2 = HEAP32[$0 + 16 >> 2] + $2 | 0;
     HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$1 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
     HEAP32[$1 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
     $3 = $3 + 1 | 0;
     if (($7 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
   }
   $1 = HEAP32[$0 + 16 >> 2];
   if ($1) {
    if (HEAPU8[$0 + 20 | 0]) {
     btAlignedFreeInternal_28void__29($1);
    }
    HEAP32[$0 + 16 >> 2] = 0;
   }
   HEAP32[$0 + 16 >> 2] = $4;
   HEAP32[$0 + 12 >> 2] = $10;
   HEAP8[$0 + 20 | 0] = 1;
   $2 = HEAP32[$0 + 8 >> 2];
   $1 = $10;
  }
  HEAP32[$0 + 8 >> 2] = $2 + 1;
  $2 = HEAP32[$0 + 16 >> 2];
  $4 = $5 << 4;
  $4 = $2 + $4 | 0;
  $3 = HEAP32[$0 + 68 >> 2];
  if ($3) {
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $8, $6) | 0;
   $1 = HEAP32[$0 + 12 >> 2];
  }
  if (($9 | 0) < ($1 | 0)) {
   btHashedOverlappingPairCache__growTables_28_29($0);
   $11 = HEAP32[$0 + 12 >> 2] + -1 & $12;
  }
  $1 = HEAP32[$8 + 12 >> 2] < HEAP32[$6 + 12 >> 2];
  HEAP32[$4 >> 2] = $1 ? $8 : $6;
  $2 = ($5 << 4) + $2 | 0;
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = $1 ? $6 : $8;
  $1 = HEAP32[$0 + 40 >> 2] + ($11 << 2) | 0;
  HEAP32[HEAP32[$0 + 60 >> 2] + ($5 << 2) >> 2] = HEAP32[$1 >> 2];
  HEAP32[$1 >> 2] = $5;
 }
 return $4;
}
function btHingeConstraint__btHingeConstraint_28btRigidBody__2c_20btRigidBody__2c_20btTransform_20const__2c_20btTransform_20const__2c_20bool_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0;
 btTypedConstraint__btTypedConstraint_28btTypedConstraintType_2c_20btRigidBody__2c_20btRigidBody__29($0, 4, $1, $2);
 HEAP32[$0 >> 2] = 3648;
 $2 = HEAP32[$3 + 8 >> 2];
 $1 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 + 560 >> 2] = $2;
 HEAP32[$0 + 564 >> 2] = $1;
 $2 = HEAP32[$3 + 4 >> 2];
 $1 = HEAP32[$3 >> 2];
 $6 = $1;
 $1 = $0;
 HEAP32[$1 + 552 >> 2] = $6;
 HEAP32[$1 + 556 >> 2] = $2;
 $1 = HEAP32[$3 + 28 >> 2];
 $2 = HEAP32[$3 + 24 >> 2];
 HEAP32[$0 + 576 >> 2] = $2;
 HEAP32[$0 + 580 >> 2] = $1;
 $2 = HEAP32[$3 + 20 >> 2];
 $1 = HEAP32[$3 + 16 >> 2];
 $6 = $1;
 $1 = $0;
 HEAP32[$1 + 568 >> 2] = $6;
 HEAP32[$1 + 572 >> 2] = $2;
 $1 = HEAP32[$3 + 44 >> 2];
 $2 = HEAP32[$3 + 40 >> 2];
 HEAP32[$0 + 592 >> 2] = $2;
 HEAP32[$0 + 596 >> 2] = $1;
 $2 = HEAP32[$3 + 36 >> 2];
 $1 = HEAP32[$3 + 32 >> 2];
 $6 = $1;
 $1 = $0;
 HEAP32[$1 + 584 >> 2] = $6;
 HEAP32[$1 + 588 >> 2] = $2;
 $1 = HEAP32[$3 + 60 >> 2];
 $2 = HEAP32[$3 + 56 >> 2];
 HEAP32[$0 + 608 >> 2] = $2;
 HEAP32[$0 + 612 >> 2] = $1;
 $2 = HEAP32[$3 + 52 >> 2];
 $1 = HEAP32[$3 + 48 >> 2];
 $3 = $1;
 $1 = $0;
 HEAP32[$1 + 600 >> 2] = $3;
 HEAP32[$1 + 604 >> 2] = $2;
 $3 = $4;
 $2 = HEAP32[$3 + 8 >> 2];
 $1 = HEAP32[$3 + 12 >> 2];
 HEAP32[$0 + 624 >> 2] = $2;
 HEAP32[$0 + 628 >> 2] = $1;
 $2 = HEAP32[$3 + 4 >> 2];
 $1 = HEAP32[$3 >> 2];
 $4 = $1;
 $1 = $0;
 HEAP32[$1 + 616 >> 2] = $4;
 HEAP32[$1 + 620 >> 2] = $2;
 $1 = HEAP32[$3 + 20 >> 2];
 $2 = HEAP32[$3 + 16 >> 2];
 HEAP32[$0 + 632 >> 2] = $2;
 HEAP32[$0 + 636 >> 2] = $1;
 $2 = HEAP32[$3 + 28 >> 2];
 $1 = HEAP32[$3 + 24 >> 2];
 $4 = $1;
 $1 = $0;
 HEAP32[$1 + 640 >> 2] = $4;
 HEAP32[$1 + 644 >> 2] = $2;
 $1 = HEAP32[$3 + 36 >> 2];
 $2 = HEAP32[$3 + 32 >> 2];
 HEAP32[$0 + 648 >> 2] = $2;
 HEAP32[$0 + 652 >> 2] = $1;
 $2 = HEAP32[$3 + 44 >> 2];
 $1 = HEAP32[$3 + 40 >> 2];
 $4 = $1;
 $1 = $0;
 HEAP32[$1 + 656 >> 2] = $4;
 HEAP32[$1 + 660 >> 2] = $2;
 $1 = HEAP32[$3 + 52 >> 2];
 $2 = HEAP32[$3 + 48 >> 2];
 HEAP32[$0 + 664 >> 2] = $2;
 HEAP32[$0 + 668 >> 2] = $1;
 $2 = HEAP32[$3 + 60 >> 2];
 $1 = HEAP32[$3 + 56 >> 2];
 $3 = $1;
 $1 = $0;
 HEAP32[$1 + 672 >> 2] = $3;
 HEAP32[$1 + 676 >> 2] = $2;
 HEAP32[$1 + 688 >> 2] = 0;
 HEAP32[$1 + 692 >> 2] = -1082130432;
 HEAP32[$1 + 696 >> 2] = 1063675494;
 HEAP32[$1 + 700 >> 2] = 1050253722;
 HEAP32[$1 + 704 >> 2] = 1065353216;
 HEAP32[$1 + 708 >> 2] = 0;
 HEAP32[$1 + 712 >> 2] = 0;
 HEAP8[$1 + 716 | 0] = 0;
 HEAP8[$1 + 740 | 0] = $5;
 HEAP32[$1 + 736 >> 2] = 16777216;
 HEAP32[$1 + 764 >> 2] = 0;
 HEAP32[$1 + 756 >> 2] = 0;
 HEAP32[$1 + 760 >> 2] = 0;
 HEAP32[$1 + 748 >> 2] = 0;
 HEAP32[$1 + 752 >> 2] = 0;
 HEAPF32[$1 + 732 >> 2] = $5 ? Math_fround(-1) : Math_fround(1);
 return $1;
}
function btPolyhedralConvexAabbCachingShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0);
 $4 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $24 = HEAPF32[$1 + 52 >> 2];
 $7 = HEAPF32[$1 + 24 >> 2];
 $8 = HEAPF32[$1 + 20 >> 2];
 $11 = HEAPF32[$1 + 56 >> 2];
 $9 = HEAPF32[$1 + 40 >> 2];
 $10 = HEAPF32[$0 + 68 >> 2];
 $15 = HEAPF32[$0 + 84 >> 2];
 $16 = HEAPF32[$1 + 36 >> 2];
 $5 = HEAPF32[$0 - -64 >> 2];
 $17 = HEAPF32[$0 + 80 >> 2];
 $25 = HEAPF32[$1 + 48 >> 2];
 $18 = HEAPF32[$1 + 8 >> 2];
 $19 = HEAPF32[$1 >> 2];
 $20 = HEAPF32[$1 + 4 >> 2];
 $21 = HEAPF32[$1 + 16 >> 2];
 $22 = HEAPF32[$1 + 32 >> 2];
 $6 = HEAPF32[$0 + 60 >> 2];
 $23 = HEAPF32[$0 + 76 >> 2];
 HEAP32[$2 + 12 >> 2] = 0;
 $12 = Math_fround(Math_fround($23 + $6) * Math_fround(.5));
 $13 = Math_fround(Math_fround($17 + $5) * Math_fround(.5));
 $14 = Math_fround(Math_fround($15 + $10) * Math_fround(.5));
 $11 = Math_fround($11 + Math_fround(Math_fround(Math_fround($22 * $12) + Math_fround($16 * $13)) + Math_fround($9 * $14)));
 $6 = Math_fround($4 + Math_fround(Math_fround($23 - $6) * Math_fround(.5)));
 $5 = Math_fround($4 + Math_fround(Math_fround($17 - $5) * Math_fround(.5)));
 $4 = Math_fround($4 + Math_fround(Math_fround($15 - $10) * Math_fround(.5)));
 $9 = Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_abs($22))) + Math_fround($5 * Math_fround(Math_abs($16)))) + Math_fround($4 * Math_fround(Math_abs($9))));
 HEAPF32[$2 + 8 >> 2] = $11 - $9;
 $10 = Math_fround($24 + Math_fround(Math_fround(Math_fround($12 * $21) + Math_fround($13 * $8)) + Math_fround($14 * $7)));
 $7 = Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_abs($21))) + Math_fround($5 * Math_fround(Math_abs($8)))) + Math_fround($4 * Math_fround(Math_abs($7))));
 HEAPF32[$2 + 4 >> 2] = $10 - $7;
 $8 = Math_fround($25 + Math_fround(Math_fround(Math_fround($12 * $19) + Math_fround($13 * $20)) + Math_fround($14 * $18)));
 $4 = Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_abs($19))) + Math_fround($5 * Math_fround(Math_abs($20)))) + Math_fround($4 * Math_fround(Math_abs($18))));
 HEAPF32[$2 >> 2] = $8 - $4;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAPF32[$3 + 8 >> 2] = $9 + $11;
 HEAPF32[$3 + 4 >> 2] = $7 + $10;
 HEAPF32[$3 >> 2] = $4 + $8;
}
function btHashMap_btInternalVertexPair_2c_20btInternalEdge___growTables_28btInternalVertexPair_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 label$1 : {
  $7 = HEAP32[$0 + 4 >> 2];
  $3 = HEAP32[$0 + 48 >> 2];
  if (($7 | 0) >= ($3 | 0)) {
   break label$1;
  }
  label$2 : {
   if (HEAP32[$0 + 8 >> 2] >= ($3 | 0)) {
    $5 = HEAP32[$0 + 12 >> 2];
    break label$2;
   }
   $1 = $7;
   if ($3) {
    $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($3 << 2, 16);
    $1 = HEAP32[$0 + 4 >> 2];
   }
   $6 = HEAP32[$0 + 12 >> 2];
   label$5 : {
    label$6 : {
     if (($1 | 0) >= 1) {
      while (1) {
       $4 = $2 << 2;
       HEAP32[$4 + $5 >> 2] = HEAP32[$6 + $4 >> 2];
       $2 = $2 + 1 | 0;
       if (($1 | 0) != ($2 | 0)) {
        continue;
       }
       break label$6;
      }
     }
     if ($6) {
      break label$6;
     }
     break label$5;
    }
    if (HEAPU8[$0 + 16 | 0]) {
     btAlignedFreeInternal_28void__29($6);
    }
   }
   HEAP32[$0 + 12 >> 2] = $5;
   HEAP8[$0 + 16 | 0] = 1;
   HEAP32[$0 + 8 >> 2] = $3;
  }
  $2 = $7 << 2;
  $8 = $3 << 2;
  memset($5 + $2 | 0, 0, $8 - $2 | 0);
  HEAP32[$0 + 4 >> 2] = $3;
  $9 = HEAP32[$0 + 24 >> 2];
  if (($9 | 0) < ($3 | 0)) {
   label$11 : {
    if (HEAP32[$0 + 28 >> 2] >= ($3 | 0)) {
     $5 = HEAP32[$0 + 32 >> 2];
     break label$11;
    }
    $2 = 0;
    $1 = $9;
    $5 = 0;
    if ($3) {
     $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8, 16);
     $1 = HEAP32[$0 + 24 >> 2];
    }
    $6 = HEAP32[$0 + 32 >> 2];
    label$14 : {
     if (($1 | 0) >= 1) {
      while (1) {
       $4 = $2 << 2;
       HEAP32[$4 + $5 >> 2] = HEAP32[$6 + $4 >> 2];
       $2 = $2 + 1 | 0;
       if (($1 | 0) != ($2 | 0)) {
        continue;
       }
       break label$14;
      }
     }
     if ($6) {
      break label$14;
     }
     HEAP32[$0 + 32 >> 2] = $5;
     HEAP32[$0 + 28 >> 2] = $3;
     HEAP8[$0 + 36 | 0] = 1;
     break label$11;
    }
    if (HEAPU8[$0 + 36 | 0]) {
     btAlignedFreeInternal_28void__29($6);
    }
    HEAP32[$0 + 32 >> 2] = $5;
    HEAP8[$0 + 36 | 0] = 1;
    HEAP32[$0 + 28 >> 2] = $3;
   }
   $2 = $9 << 2;
   memset($5 + $2 | 0, 0, $8 - $2 | 0);
  }
  HEAP32[$0 + 24 >> 2] = $3;
  if (($3 | 0) >= 1) {
   memset(HEAP32[$0 + 12 >> 2], 255, $8);
   memset(HEAP32[$0 + 32 >> 2], 255, $8);
  }
  if (($7 | 0) < 1) {
   break label$1;
  }
  $5 = HEAP32[$0 + 32 >> 2];
  $1 = HEAP32[$0 + 72 >> 2];
  $6 = HEAP32[$0 + 12 >> 2];
  $2 = 0;
  while (1) {
   $4 = $2 << 2;
   $9 = $4 + $5 | 0;
   $4 = $1 + $4 | 0;
   $4 = (((HEAPU16[$4 + 2 >> 1] << 16) + HEAP16[$4 >> 1] & HEAP32[$0 + 48 >> 2] + -1) << 2) + $6 | 0;
   HEAP32[$9 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$4 >> 2] = $2;
   $2 = $2 + 1 | 0;
   if (($7 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
}
function btConvexPolyhedron__project_28btTransform_20const__2c_20btVector3_20const__2c_20float__2c_20float__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3, $4, $5, $6) {
 var $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0;
 $10 = global$0 - 16 | 0;
 HEAP32[$3 >> 2] = 2139095039;
 $9 = -8388609;
 HEAP32[$4 >> 2] = -8388609;
 $15 = HEAP32[$0 + 8 >> 2];
 $7 = Math_fround(-3.4028234663852886e+38);
 label$1 : {
  if (($15 | 0) < 1) {
   break label$1;
  }
  $9 = 0;
  while (1) {
   $11 = HEAP32[$0 + 16 >> 2] + ($9 << 4) | 0;
   $7 = HEAPF32[$11 >> 2];
   $8 = HEAPF32[$11 + 4 >> 2];
   $12 = HEAPF32[$11 + 8 >> 2];
   $13 = Math_fround(Math_fround(Math_fround(Math_fround($7 * HEAPF32[$1 >> 2]) + Math_fround($8 * HEAPF32[$1 + 4 >> 2])) + Math_fround($12 * HEAPF32[$1 + 8 >> 2])) + HEAPF32[$1 + 48 >> 2]);
   $14 = Math_fround(Math_fround(Math_fround(Math_fround($7 * HEAPF32[$1 + 16 >> 2]) + Math_fround($8 * HEAPF32[$1 + 20 >> 2])) + Math_fround($12 * HEAPF32[$1 + 24 >> 2])) + HEAPF32[$1 + 52 >> 2]);
   $8 = Math_fround(Math_fround(Math_fround(Math_fround($7 * HEAPF32[$1 + 32 >> 2]) + Math_fround($8 * HEAPF32[$1 + 36 >> 2])) + Math_fround($12 * HEAPF32[$1 + 40 >> 2])) + HEAPF32[$1 + 56 >> 2]);
   $7 = Math_fround(Math_fround(Math_fround($13 * HEAPF32[$2 >> 2]) + Math_fround($14 * HEAPF32[$2 + 4 >> 2])) + Math_fround($8 * HEAPF32[$2 + 8 >> 2]));
   if (!!($7 < HEAPF32[$3 >> 2])) {
    HEAPF32[$3 >> 2] = $7;
    HEAP32[$5 + 12 >> 2] = 0;
    HEAPF32[$5 + 8 >> 2] = $8;
    HEAPF32[$5 + 4 >> 2] = $14;
    HEAPF32[$5 >> 2] = $13;
   }
   if (!!($7 > HEAPF32[$4 >> 2])) {
    HEAPF32[$4 >> 2] = $7;
    HEAP32[$6 + 12 >> 2] = 0;
    HEAPF32[$6 + 8 >> 2] = $8;
    HEAPF32[$6 + 4 >> 2] = $14;
    HEAPF32[$6 >> 2] = $13;
   }
   $9 = $9 + 1 | 0;
   if (($15 | 0) != ($9 | 0)) {
    continue;
   }
   break;
  }
  $9 = HEAP32[$4 >> 2];
  $7 = HEAPF32[$4 >> 2];
 }
 $8 = HEAPF32[$3 >> 2];
 if ($8 > $7) {
  HEAP32[$3 >> 2] = $9;
  HEAPF32[$4 >> 2] = $8;
  $2 = $5 + 8 | 0;
  $1 = HEAP32[$2 >> 2];
  $0 = HEAP32[$2 + 4 >> 2];
  $2 = $1;
  $1 = $10 + 8 | 0;
  HEAP32[$1 >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $0;
  $1 = HEAP32[$5 + 4 >> 2];
  $0 = HEAP32[$5 >> 2];
  $2 = $0;
  $0 = $10;
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $1;
  $9 = $6 + 8 | 0;
  $2 = $9;
  $1 = HEAP32[$2 >> 2];
  $0 = HEAP32[$2 + 4 >> 2];
  HEAP32[$5 + 8 >> 2] = $1;
  HEAP32[$5 + 12 >> 2] = $0;
  $1 = HEAP32[$6 + 4 >> 2];
  $0 = HEAP32[$6 >> 2];
  HEAP32[$5 >> 2] = $0;
  HEAP32[$5 + 4 >> 2] = $1;
  $2 = $10;
  $1 = HEAP32[$2 + 8 >> 2];
  $0 = HEAP32[$2 + 12 >> 2];
  HEAP32[$6 + 8 >> 2] = $1;
  HEAP32[$6 + 12 >> 2] = $0;
  $1 = HEAP32[$2 + 4 >> 2];
  $0 = HEAP32[$2 >> 2];
  HEAP32[$6 >> 2] = $0;
  HEAP32[$6 + 4 >> 2] = $1;
 }
}
function btDiscreteDynamicsWorld__synchronizeMotionStates_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = 0;
 $5 = global$0 + -64 | 0;
 $3 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 label$2 : {
  if (HEAPU8[$0 + 290 | 0]) {
   $3 = HEAP32[$0 + 8 >> 2];
   if (($3 | 0) < 1) {
    break label$2;
   }
   while (1) {
    $1 = HEAP32[HEAP32[$0 + 16 >> 2] + ($2 << 2) >> 2];
    if (!(!$1 | !(HEAP32[$1 + 252 >> 2] & 2) | (!HEAP32[$1 + 540 >> 2] | HEAPU8[$1 + 204 | 0] & 3))) {
     $7 = $1 + 68 | 0;
     $6 = $1 + 132 | 0;
     $3 = $1 + 148 | 0;
     label$6 : {
      label$7 : {
       if (!HEAPU8[$0 + 316 | 0]) {
        break label$7;
       }
       $4 = HEAPF32[$0 + 284 >> 2];
       if ($4 == Math_fround(0)) {
        break label$7;
       }
       $4 = Math_fround(HEAPF32[$0 + 280 >> 2] - $4);
       break label$6;
      }
      $4 = Math_fround(HEAPF32[$0 + 280 >> 2] * HEAPF32[$1 + 268 >> 2]);
     }
     btTransformUtil__integrateTransform_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20btTransform__29($7, $6, $3, $4, $5);
     $1 = HEAP32[$1 + 540 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $5);
     $3 = HEAP32[$0 + 8 >> 2];
    }
    $2 = $2 + 1 | 0;
    if (($2 | 0) < ($3 | 0)) {
     continue;
    }
    break;
   }
   break label$2;
  }
  $6 = HEAP32[$0 + 248 >> 2];
  if (($6 | 0) < 1) {
   break label$2;
  }
  while (1) {
   label$9 : {
    label$10 : {
     $2 = HEAP32[HEAP32[$0 + 256 >> 2] + ($1 << 2) >> 2];
     $3 = HEAP32[$2 + 220 >> 2] + -2 | 0;
     if ($3 >>> 0 > 3) {
      break label$10;
     }
     switch ($3 - 1 | 0) {
     case 0:
     case 1:
      break label$10;
     default:
      break label$9;
     }
    }
    if (!HEAP32[$2 + 540 >> 2] | HEAPU8[$2 + 204 | 0] & 3) {
     break label$9;
    }
    $7 = $2 + 68 | 0;
    $6 = $2 + 132 | 0;
    $3 = $2 + 148 | 0;
    label$11 : {
     label$12 : {
      if (!HEAPU8[$0 + 316 | 0]) {
       break label$12;
      }
      $4 = HEAPF32[$0 + 284 >> 2];
      if ($4 == Math_fround(0)) {
       break label$12;
      }
      $4 = Math_fround(HEAPF32[$0 + 280 >> 2] - $4);
      break label$11;
     }
     $4 = Math_fround(HEAPF32[$0 + 280 >> 2] * HEAPF32[$2 + 268 >> 2]);
    }
    btTransformUtil__integrateTransform_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20btTransform__29($7, $6, $3, $4, $5);
    $2 = HEAP32[$2 + 540 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2, $5);
    $6 = HEAP32[$0 + 248 >> 2];
   }
   $1 = $1 + 1 | 0;
   if (($1 | 0) < ($6 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = $5 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody__saveKinematicState_28float_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0);
 $4 = global$0 - 32 | 0;
 $2 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 if ($1 != Math_fround(0)) {
  $2 = HEAP32[$0 + 540 >> 2];
  if ($2) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $0 + 4 | 0);
  }
  HEAP32[$0 + 384 >> 2] = 0;
  $2 = $0 + 380 | 0;
  $1 = Math_fround(Math_fround(1) / $1);
  HEAPF32[$2 >> 2] = $1 * Math_fround(HEAPF32[$0 + 60 >> 2] - HEAPF32[$0 + 124 >> 2]);
  HEAPF32[$0 + 376 >> 2] = $1 * Math_fround(HEAPF32[$0 + 56 >> 2] - HEAPF32[$0 + 120 >> 2]);
  HEAPF32[$0 + 372 >> 2] = $1 * Math_fround(HEAPF32[$0 + 52 >> 2] - HEAPF32[$0 + 116 >> 2]);
  btTransformUtil__calculateDiffAxisAngle_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20float__29($0 + 68 | 0, $0 + 4 | 0, $4 + 16 | 0, $4 + 12 | 0);
  $6 = HEAPF32[$4 + 16 >> 2];
  $7 = HEAPF32[$4 + 20 >> 2];
  $8 = HEAPF32[$4 + 24 >> 2];
  $5 = HEAPF32[$4 + 12 >> 2];
  HEAP32[$0 + 400 >> 2] = 0;
  HEAPF32[$0 + 396 >> 2] = $1 * Math_fround($5 * $8);
  HEAPF32[$0 + 392 >> 2] = $1 * Math_fround($5 * $7);
  HEAPF32[$0 + 388 >> 2] = $1 * Math_fround($6 * $5);
  $2 = HEAP32[$0 + 384 >> 2];
  $3 = HEAP32[$0 + 380 >> 2];
  HEAP32[$0 + 140 >> 2] = $3;
  HEAP32[$0 + 144 >> 2] = $2;
  $3 = HEAP32[$0 + 376 >> 2];
  $2 = HEAP32[$0 + 372 >> 2];
  HEAP32[$0 + 132 >> 2] = $2;
  HEAP32[$0 + 136 >> 2] = $3;
  $2 = HEAP32[$0 + 392 >> 2];
  $3 = HEAP32[$0 + 388 >> 2];
  HEAP32[$0 + 148 >> 2] = $3;
  HEAP32[$0 + 152 >> 2] = $2;
  $3 = HEAP32[$0 + 400 >> 2];
  $2 = HEAP32[$0 + 396 >> 2];
  HEAP32[$0 + 156 >> 2] = $2;
  HEAP32[$0 + 160 >> 2] = $3;
  $2 = HEAP32[$0 + 8 >> 2];
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$0 + 68 >> 2] = $3;
  HEAP32[$0 + 72 >> 2] = $2;
  $3 = HEAP32[$0 + 16 >> 2];
  $2 = HEAP32[$0 + 12 >> 2];
  HEAP32[$0 + 76 >> 2] = $2;
  HEAP32[$0 + 80 >> 2] = $3;
  $2 = HEAP32[$0 + 24 >> 2];
  $3 = HEAP32[$0 + 20 >> 2];
  HEAP32[$0 + 84 >> 2] = $3;
  HEAP32[$0 + 88 >> 2] = $2;
  $3 = HEAP32[$0 + 32 >> 2];
  $2 = HEAP32[$0 + 28 >> 2];
  HEAP32[$0 + 92 >> 2] = $2;
  HEAP32[$0 + 96 >> 2] = $3;
  $2 = HEAP32[$0 + 48 >> 2];
  $3 = HEAP32[$0 + 44 >> 2];
  HEAP32[$0 + 108 >> 2] = $3;
  HEAP32[$0 + 112 >> 2] = $2;
  $3 = HEAP32[$0 + 40 >> 2];
  $2 = HEAP32[$0 + 36 >> 2];
  HEAP32[$0 + 100 >> 2] = $2;
  HEAP32[$0 + 104 >> 2] = $3;
  $2 = HEAP32[$0 + 64 >> 2];
  $3 = HEAP32[$0 + 60 >> 2];
  HEAP32[$0 + 124 >> 2] = $3;
  HEAP32[$0 + 128 >> 2] = $2;
  $3 = HEAP32[$0 + 56 >> 2];
  $2 = HEAP32[$0 + 52 >> 2];
  HEAP32[$0 + 116 >> 2] = $2;
  HEAP32[$0 + 120 >> 2] = $3;
 }
 $0 = $4 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btPolyhedralConvexShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0);
 $8 = global$0 - 2048 | 0;
 $3 = $8;
 if ($8 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = $0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 $4 = HEAPF32[$2 >> 2];
 $9 = HEAPF32[$2 + 4 >> 2];
 $10 = HEAPF32[$2 + 8 >> 2];
 $6 = Math_fround(Math_fround(Math_fround($4 * $4) + Math_fround($9 * $9)) + Math_fround($10 * $10));
 label$2 : {
  if ($6 < Math_fround(9999999747378752e-20)) {
   $4 = Math_fround(1);
   $11 = Math_fround(0);
   break label$2;
  }
  $6 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($6)));
  $13 = Math_fround($10 * $6);
  $4 = Math_fround($4 * $6);
  $11 = Math_fround($9 * $6);
 }
 $10 = $11;
 $6 = $4;
 if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 96 >> 2]]($1) | 0) >= 1) {
  $11 = Math_fround(-0xde0b6b000000000);
  while (1) {
   $7 = 128;
   label$6 : {
    label$7 : {
     if (((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 96 >> 2]]($1) | 0) - $12 | 0) > 127) {
      break label$7;
     }
     $7 = (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 96 >> 2]]($1) | 0) - $12 | 0;
     if (($7 | 0) >= 1) {
      break label$7;
     }
     $4 = Math_fround(-3.4028234663852886e+38);
     $3 = -1;
     break label$6;
    }
    $2 = 0;
    $5 = 0;
    while (1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 108 >> 2]]($1, $5, ($5 << 4) + $8 | 0);
     $5 = $5 + 1 | 0;
     if (($7 | 0) != ($5 | 0)) {
      continue;
     }
     break;
    }
    $3 = -1;
    $4 = Math_fround(-3.4028234663852886e+38);
    while (1) {
     $5 = ($2 << 4) + $8 | 0;
     $9 = Math_fround(Math_fround(Math_fround($6 * HEAPF32[$5 >> 2]) + Math_fround($10 * HEAPF32[$5 + 4 >> 2])) + Math_fround($13 * HEAPF32[$5 + 8 >> 2]));
     $5 = $9 > $4;
     $4 = $5 ? $9 : $4;
     $3 = $5 ? $2 : $3;
     $2 = $2 + 1 | 0;
     if (($7 | 0) != ($2 | 0)) {
      continue;
     }
     break;
    }
   }
   if (!!($4 > $11)) {
    $2 = ($3 << 4) + $8 | 0;
    $7 = HEAP32[$2 + 8 >> 2];
    $3 = HEAP32[$2 + 12 >> 2];
    HEAP32[$0 + 8 >> 2] = $7;
    HEAP32[$0 + 12 >> 2] = $3;
    $7 = HEAP32[$2 + 4 >> 2];
    $3 = HEAP32[$2 >> 2];
    $2 = $3;
    $3 = $0;
    HEAP32[$3 >> 2] = $2;
    HEAP32[$3 + 4 >> 2] = $7;
    $11 = $4;
   }
   $12 = $12 + 128 | 0;
   if (($12 | 0) < (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 96 >> 2]]($1) | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = $8 + 2048 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccNotMeClosestConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = Math_fround(0);
 $3 = global$0 - 48 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 40 >> 2] = $0;
 HEAP32[$3 + 36 >> 2] = $1;
 HEAP8[$3 + 35 | 0] = $2;
 $4 = HEAP32[$3 + 40 >> 2];
 label$2 : {
  if (!(btCollisionObject__hasContactResponse_28_29_20const(HEAP32[HEAP32[$3 + 36 >> 2] >> 2]) & 1)) {
   HEAP32[$3 + 28 >> 2] = ccDiscreteDynamicsWorld__getCcdTriggerRecorder_28_29(HEAP32[$4 + 88 >> 2]);
   label$4 : {
    if (!HEAP32[$4 + 92 >> 2]) {
     $2 = $3 + 20 | 0;
     $1 = $3 + 24 | 0;
     HEAP32[$4 + 96 >> 2] = btAlignedObjectArray_int___size_28_29_20const(HEAP32[$3 + 28 >> 2]);
     $0 = HEAP32[$3 + 28 >> 2];
     HEAP32[$3 + 24 >> 2] = 1;
     btAlignedObjectArray_int___push_back_28int_20const__29($0, $1);
     $0 = HEAP32[$3 + 28 >> 2];
     HEAP32[$3 + 20 >> 2] = btCollisionShape__getUserIndex2_28_29_20const(btCollisionObject__getCollisionShape_28_29(HEAP32[$4 + 84 >> 2]));
     btAlignedObjectArray_int___push_back_28int_20const__29($0, $2);
     break label$4;
    }
    $0 = HEAP32[$4 + 92 >> 2] + 1 | 0;
    HEAP32[btAlignedObjectArray_int___operator_5b_5d_28int_29(HEAP32[$3 + 28 >> 2], HEAP32[$4 + 96 >> 2]) >> 2] = $0;
   }
   HEAP32[$3 + 16 >> 2] = btCollisionObject__getCollisionShape_28_29_20const(HEAP32[HEAP32[$3 + 36 >> 2] >> 2]);
   label$6 : {
    if (btCollisionShape__isCompound_28_29_20const(HEAP32[$3 + 16 >> 2]) & 1) {
     $1 = $3 + 4 | 0;
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 16 >> 2];
     HEAP32[$3 + 8 >> 2] = HEAP32[HEAP32[HEAP32[$3 + 36 >> 2] + 4 >> 2] + 4 >> 2];
     $0 = HEAP32[$3 + 28 >> 2];
     HEAP32[$3 + 4 >> 2] = btCollisionShape__getUserIndex2_28_29_20const(btCompoundShape__getChildShape_28int_29_20const(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]));
     btAlignedObjectArray_int___push_back_28int_20const__29($0, $1);
     break label$6;
    }
    $0 = HEAP32[$3 + 28 >> 2];
    HEAP32[$3 >> 2] = btCollisionShape__getUserIndex2_28_29_20const(HEAP32[$3 + 16 >> 2]);
    btAlignedObjectArray_int___push_back_28int_20const__29($0, $3);
   }
   HEAP32[$4 + 92 >> 2] = HEAP32[$4 + 92 >> 2] + 1;
   HEAPF32[$3 + 44 >> 2] = 1;
   break label$2;
  }
  HEAPF32[$3 + 44 >> 2] = btCollisionWorld__ClosestConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29($4, HEAP32[$3 + 36 >> 2], HEAP8[$3 + 35 | 0] & 1);
 }
 $5 = HEAPF32[$3 + 44 >> 2];
 $0 = $3 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($5);
}
function btTriangleMesh__btTriangleMesh_28bool_2c_20bool_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 + 4 >> 2] = 1065353216;
 HEAP32[$0 + 8 >> 2] = 1065353216;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 >> 2] = 15276;
 HEAP8[$0 + 36 | 0] = 1;
 HEAP32[$0 + 12 >> 2] = 1065353216;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP8[$0 + 100 | 0] = 1;
 HEAP32[$0 + 96 >> 2] = 0;
 HEAP8[$0 + 120 | 0] = 1;
 HEAP32[$0 + 88 >> 2] = 0;
 HEAP32[$0 + 92 >> 2] = 0;
 HEAP32[$0 + 116 >> 2] = 0;
 HEAP8[$0 + 140 | 0] = 1;
 HEAP32[$0 + 108 >> 2] = 0;
 HEAP32[$0 + 112 >> 2] = 0;
 HEAP32[$0 + 136 >> 2] = 0;
 HEAP8[$0 + 160 | 0] = 1;
 HEAP32[$0 + 128 >> 2] = 0;
 HEAP32[$0 + 132 >> 2] = 0;
 HEAP32[$0 + 168 >> 2] = 0;
 HEAP8[$0 + 164 | 0] = $1;
 HEAP32[$0 + 148 >> 2] = 0;
 HEAP32[$0 + 152 >> 2] = 0;
 HEAP32[$0 + 156 >> 2] = 0;
 HEAP8[$0 + 165 | 0] = $2;
 $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(32, 16);
 $7 = HEAP32[$0 + 24 >> 2];
 if (($7 | 0) >= 1) {
  while (1) {
   $1 = $5 << 5;
   $2 = $6 + $1 | 0;
   $1 = HEAP32[$0 + 32 >> 2] + $1 | 0;
   $3 = HEAP32[$1 >> 2];
   $4 = HEAP32[$1 + 4 >> 2];
   HEAP32[$2 >> 2] = $3;
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = HEAP32[$1 + 28 >> 2];
   $4 = HEAP32[$1 + 24 >> 2];
   HEAP32[$2 + 24 >> 2] = $4;
   HEAP32[$2 + 28 >> 2] = $3;
   $4 = HEAP32[$1 + 20 >> 2];
   $3 = HEAP32[$1 + 16 >> 2];
   HEAP32[$2 + 16 >> 2] = $3;
   HEAP32[$2 + 20 >> 2] = $4;
   $3 = HEAP32[$1 + 12 >> 2];
   $4 = HEAP32[$1 + 8 >> 2];
   HEAP32[$2 + 8 >> 2] = $4;
   HEAP32[$2 + 12 >> 2] = $3;
   $5 = $5 + 1 | 0;
   if (($7 | 0) != ($5 | 0)) {
    continue;
   }
   break;
  }
 }
 $2 = HEAP32[$0 + 32 >> 2];
 if ($2) {
  if (HEAPU8[$0 + 36 | 0]) {
   btAlignedFreeInternal_28void__29($2);
  }
  HEAP32[$0 + 32 >> 2] = 0;
 }
 HEAP32[$0 + 32 >> 2] = $6;
 HEAP8[$0 + 36 | 0] = 1;
 HEAP32[$0 + 28 >> 2] = 1;
 $2 = (HEAP32[$0 + 24 >> 2] << 5) + $6 | 0;
 HEAP32[$2 + 24 >> 2] = 2;
 HEAP32[$2 + 28 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 16;
 HEAP32[$2 + 8 >> 2] = 12;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
 $1 = HEAPU8[$0 + 164 | 0];
 $6 = HEAP32[($1 ? 128 : 148) + $0 >> 2];
 $2 = HEAP32[$0 + 32 >> 2];
 HEAP32[$2 + 24 >> 2] = $1 ? 2 : 3;
 HEAP32[$2 + 4 >> 2] = 0;
 $5 = 12;
 HEAP32[$2 + 8 >> 2] = $1 ? 12 : 6;
 HEAP32[$2 >> 2] = ($6 | 0) / 3;
 label$5 : {
  if (HEAPU8[$0 + 165 | 0]) {
   $5 = 16;
   $1 = HEAP32[$0 + 88 >> 2];
   break label$5;
  }
  $1 = HEAP32[$0 + 108 >> 2] / 3 | 0;
 }
 HEAP32[$2 + 20 >> 2] = $5;
 HEAP32[$2 + 16 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = $1;
 return $0;
}
function btSequentialImpulseConstraintSolver___btSequentialImpulseConstraintSolver_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 3764;
 $1 = HEAP32[$0 + 204 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 208 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 204 >> 2] = 0;
 }
 HEAP32[$0 + 204 >> 2] = 0;
 HEAP32[$0 + 196 >> 2] = 0;
 HEAP32[$0 + 200 >> 2] = 0;
 HEAP8[$0 + 208 | 0] = 1;
 $1 = HEAP32[$0 + 176 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 180 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 176 >> 2] = 0;
 }
 HEAP32[$0 + 176 >> 2] = 0;
 HEAP32[$0 + 168 >> 2] = 0;
 HEAP32[$0 + 172 >> 2] = 0;
 HEAP8[$0 + 180 | 0] = 1;
 $1 = HEAP32[$0 + 156 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 160 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 156 >> 2] = 0;
 }
 HEAP32[$0 + 156 >> 2] = 0;
 HEAP32[$0 + 148 >> 2] = 0;
 HEAP32[$0 + 152 >> 2] = 0;
 HEAP8[$0 + 160 | 0] = 1;
 $1 = HEAP32[$0 + 136 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 140 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 136 >> 2] = 0;
 }
 HEAP32[$0 + 136 >> 2] = 0;
 HEAP32[$0 + 128 >> 2] = 0;
 HEAP32[$0 + 132 >> 2] = 0;
 HEAP8[$0 + 140 | 0] = 1;
 $1 = HEAP32[$0 + 116 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 120 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 116 >> 2] = 0;
 }
 HEAP32[$0 + 116 >> 2] = 0;
 HEAP32[$0 + 108 >> 2] = 0;
 HEAP32[$0 + 112 >> 2] = 0;
 HEAP8[$0 + 120 | 0] = 1;
 $1 = HEAP32[$0 + 96 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 100 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 96 >> 2] = 0;
 }
 HEAP32[$0 + 96 >> 2] = 0;
 HEAP32[$0 + 88 >> 2] = 0;
 HEAP32[$0 + 92 >> 2] = 0;
 HEAP8[$0 + 100 | 0] = 1;
 $1 = HEAP32[$0 + 76 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 80 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 76 >> 2] = 0;
 }
 HEAP32[$0 + 76 >> 2] = 0;
 HEAP32[$0 + 68 >> 2] = 0;
 HEAP32[$0 + 72 >> 2] = 0;
 HEAP8[$0 + 80 | 0] = 1;
 $1 = HEAP32[$0 + 56 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 60 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 56 >> 2] = 0;
 }
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP8[$0 + 60 | 0] = 1;
 $1 = HEAP32[$0 + 36 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 40 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 36 >> 2] = 0;
 }
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP8[$0 + 40 | 0] = 1;
 $1 = HEAP32[$0 + 16 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 20 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 16 >> 2] = 0;
 }
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP8[$0 + 20 | 0] = 1;
 return $0 | 0;
}
function btHashedSimplePairCache__removeOverlappingPair_28int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 HEAP32[5648] = HEAP32[5648] + 1;
 $9 = HEAP32[$0 + 36 >> 2];
 $4 = $2 << 16 | $1;
 $4 = $4 + ($4 << 15 ^ -1) | 0;
 $4 = Math_imul($4 ^ $4 >>> 10, 9);
 $4 = $4 ^ $4 >>> 6;
 $4 = $4 + ($4 << 11 ^ -1) | 0;
 $5 = $9 + ((HEAP32[$0 + 12 >> 2] + -1 & ($4 ^ $4 >>> 16)) << 2) | 0;
 $3 = HEAP32[$5 >> 2];
 label$1 : {
  if (($3 | 0) == -1) {
   break label$1;
  }
  $7 = HEAP32[$0 + 16 >> 2];
  $4 = $3;
  while (1) {
   $6 = Math_imul($4, 12) + $7 | 0;
   if (!(HEAP32[$6 + 4 >> 2] == ($2 | 0) ? HEAP32[$6 >> 2] == ($1 | 0) : 0)) {
    $4 = HEAP32[HEAP32[$0 + 56 >> 2] + ($4 << 2) >> 2];
    if (($4 | 0) != -1) {
     continue;
    }
    break label$1;
   }
   break;
  }
  $10 = HEAP32[(Math_imul($4, 12) + $7 | 0) + 8 >> 2];
  $1 = HEAP32[$0 + 56 >> 2];
  label$5 : {
   label$6 : {
    if (($3 | 0) != ($4 | 0)) {
     while (1) {
      $2 = $3;
      $3 = HEAP32[($3 << 2) + $1 >> 2];
      if (($4 | 0) != ($3 | 0)) {
       continue;
      }
      break;
     }
     $3 = HEAP32[($4 << 2) + $1 >> 2];
     $8 = $3;
     if (($2 | 0) == -1) {
      break label$6;
     }
     HEAP32[($2 << 2) + $1 >> 2] = $3;
     break label$5;
    }
    $8 = HEAP32[($4 << 2) + $1 >> 2];
   }
   $3 = $8;
   HEAP32[$5 >> 2] = $3;
  }
  $2 = HEAP32[$0 + 8 >> 2] + -1 | 0;
  if (($4 | 0) == ($2 | 0)) {
   HEAP32[$0 + 8 >> 2] = $4;
   return $10 | 0;
  }
  label$10 : {
   label$11 : {
    $5 = Math_imul($2, 12) + $7 | 0;
    $3 = HEAP32[$5 + 4 >> 2] << 16 | HEAP32[$5 >> 2];
    $3 = $3 + ($3 << 15 ^ -1) | 0;
    $3 = Math_imul($3 ^ $3 >>> 10, 9);
    $3 = $3 ^ $3 >>> 6;
    $3 = $3 + ($3 << 11 ^ -1) | 0;
    $8 = HEAP32[$0 + 12 >> 2] + -1 & ($3 ^ $3 >>> 16);
    $9 = ($8 << 2) + $9 | 0;
    $3 = HEAP32[$9 >> 2];
    if (($3 | 0) == ($2 | 0)) {
     $3 = HEAP32[($2 << 2) + $1 >> 2];
     break label$11;
    }
    while (1) {
     $7 = $3;
     $3 = HEAP32[($3 << 2) + $1 >> 2];
     if (($3 | 0) != ($2 | 0)) {
      continue;
     }
     break;
    }
    $3 = HEAP32[($2 << 2) + $1 >> 2];
    if (($7 | 0) == -1) {
     break label$11;
    }
    HEAP32[($7 << 2) + $1 >> 2] = $3;
    break label$10;
   }
   HEAP32[$9 >> 2] = $3;
  }
  $1 = HEAP32[$5 + 4 >> 2];
  HEAP32[$6 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$6 + 4 >> 2] = $1;
  HEAP32[$6 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
  $6 = HEAP32[$0 + 36 >> 2] + ($8 << 2) | 0;
  HEAP32[HEAP32[$0 + 56 >> 2] + ($4 << 2) >> 2] = HEAP32[$6 >> 2];
  HEAP32[$6 >> 2] = $4;
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -1;
 }
 return $10 | 0;
}
function btCollisionWorld__addCollisionObject_28btCollisionObject__2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $7 = global$0 - 96 | 0;
 $4 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $4 = HEAP32[$0 + 8 >> 2];
 HEAP32[$1 + 216 >> 2] = $4;
 label$2 : {
  if (HEAP32[$0 + 12 >> 2] != ($4 | 0)) {
   break label$2;
  }
  $5 = $4 ? $4 << 1 : 1;
  if (($4 | 0) >= ($5 | 0)) {
   break label$2;
  }
  if ($5) {
   $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 2, 16);
   $4 = HEAP32[$0 + 8 >> 2];
  }
  if (($4 | 0) >= 1) {
   while (1) {
    $9 = $6 << 2;
    HEAP32[$9 + $8 >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] + $9 >> 2];
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($4 | 0)) {
     continue;
    }
    break;
   }
  }
  $6 = HEAP32[$0 + 16 >> 2];
  if ($6) {
   if (HEAPU8[$0 + 20 | 0]) {
    btAlignedFreeInternal_28void__29($6);
    $4 = HEAP32[$0 + 8 >> 2];
   }
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = $8;
  HEAP32[$0 + 12 >> 2] = $5;
  HEAP8[$0 + 20 | 0] = 1;
 }
 HEAP32[HEAP32[$0 + 16 >> 2] + ($4 << 2) >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = $4 + 1;
 $5 = $1;
 $4 = HEAP32[$5 + 12 >> 2];
 $1 = HEAP32[$5 + 16 >> 2];
 HEAP32[$7 + 40 >> 2] = $4;
 HEAP32[$7 + 44 >> 2] = $1;
 $4 = HEAP32[$5 + 8 >> 2];
 $1 = HEAP32[$5 + 4 >> 2];
 $6 = $1;
 $1 = $7;
 HEAP32[$1 + 32 >> 2] = $6;
 HEAP32[$1 + 36 >> 2] = $4;
 $1 = HEAP32[$5 + 32 >> 2];
 $4 = HEAP32[$5 + 28 >> 2];
 HEAP32[$7 + 56 >> 2] = $4;
 HEAP32[$7 + 60 >> 2] = $1;
 $4 = HEAP32[$5 + 24 >> 2];
 $1 = HEAP32[$5 + 20 >> 2];
 $6 = $1;
 $1 = $7;
 HEAP32[$1 + 48 >> 2] = $6;
 HEAP32[$1 + 52 >> 2] = $4;
 $1 = HEAP32[$5 + 48 >> 2];
 $4 = HEAP32[$5 + 44 >> 2];
 HEAP32[$7 + 72 >> 2] = $4;
 HEAP32[$7 + 76 >> 2] = $1;
 $4 = HEAP32[$5 + 40 >> 2];
 $1 = HEAP32[$5 + 36 >> 2];
 $6 = $1;
 $1 = $7;
 HEAP32[$1 + 64 >> 2] = $6;
 HEAP32[$1 + 68 >> 2] = $4;
 $1 = HEAP32[$5 + 64 >> 2];
 $4 = HEAP32[$5 + 60 >> 2];
 HEAP32[$7 + 88 >> 2] = $4;
 HEAP32[$7 + 92 >> 2] = $1;
 $4 = HEAP32[$5 + 56 >> 2];
 $1 = HEAP32[$5 + 52 >> 2];
 $6 = $1;
 $1 = $7;
 HEAP32[$1 + 80 >> 2] = $6;
 HEAP32[$1 + 84 >> 2] = $4;
 $6 = HEAP32[$5 + 192 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6, $1 + 32 | 0, $1 + 16 | 0, $1);
 $6 = HEAP32[$0 + 68 >> 2];
 HEAP32[$5 + 188 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6, $1 + 16 | 0, $1, HEAP32[HEAP32[$5 + 192 >> 2] + 4 >> 2], $5, $2, $3, HEAP32[$0 + 24 >> 2]);
 $0 = $1 + 96 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHeightfieldTerrainShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0);
 $9 = HEAPF32[$1 + 56 >> 2];
 $12 = HEAPF32[$1 + 36 >> 2];
 $13 = HEAPF32[$1 + 40 >> 2];
 $10 = HEAPF32[$1 + 52 >> 2];
 $6 = HEAPF32[$1 + 20 >> 2];
 $7 = HEAPF32[$0 + 116 >> 2];
 $5 = HEAPF32[$0 + 24 >> 2];
 $8 = HEAPF32[$0 + 40 >> 2];
 $14 = HEAPF32[$1 + 24 >> 2];
 $15 = HEAPF32[$0 + 120 >> 2];
 $16 = HEAPF32[$0 + 28 >> 2];
 $17 = HEAPF32[$0 + 44 >> 2];
 $18 = HEAPF32[$1 + 32 >> 2];
 $11 = HEAPF32[$1 + 48 >> 2];
 $19 = HEAPF32[$1 >> 2];
 $20 = HEAPF32[$1 + 4 >> 2];
 $21 = HEAPF32[$1 + 8 >> 2];
 $22 = HEAPF32[$1 + 16 >> 2];
 $4 = HEAPF32[$0 + 112 >> 2];
 $23 = HEAPF32[$0 + 20 >> 2];
 $24 = HEAPF32[$0 + 36 >> 2];
 $25 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $26 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $27 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 HEAP32[$2 + 12 >> 2] = 0;
 $4 = Math_fround(Math_fround($4 * Math_fround($24 - $23)) * Math_fround(.5));
 $7 = Math_fround(Math_fround($7 * Math_fround($8 - $5)) * Math_fround(.5));
 $5 = Math_fround(Math_fround($4 * Math_fround(Math_abs($22))) + Math_fround($7 * Math_fround(Math_abs($6))));
 $6 = Math_fround(Math_fround($15 * Math_fround($17 - $16)) * Math_fround(.5));
 $5 = Math_fround($26 + Math_fround($5 + Math_fround($6 * Math_fround(Math_abs($14)))));
 HEAPF32[$2 + 4 >> 2] = $10 - $5;
 $8 = Math_fround($25 + Math_fround(Math_fround(Math_fround($4 * Math_fround(Math_abs($19))) + Math_fround($7 * Math_fround(Math_abs($20)))) + Math_fround($6 * Math_fround(Math_abs($21)))));
 HEAPF32[$2 >> 2] = $11 - $8;
 $4 = Math_fround($27 + Math_fround(Math_fround(Math_fround($4 * Math_fround(Math_abs($18))) + Math_fround($7 * Math_fround(Math_abs($12)))) + Math_fround($6 * Math_fround(Math_abs($13)))));
 HEAPF32[$2 + 8 >> 2] = $9 - $4;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAPF32[$3 + 8 >> 2] = $9 + $4;
 HEAPF32[$3 + 4 >> 2] = $10 + $5;
 HEAPF32[$3 >> 2] = $11 + $8;
}
function btDbvtBroadphase__createProxy_28btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20void__2c_20int_2c_20int_2c_20btDispatcher__29($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $8 = 0;
 $7 = global$0 - 48 | 0;
 $3 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(64, 16);
 HEAP32[$8 + 8 >> 2] = $6;
 HEAP32[$8 + 4 >> 2] = $5;
 HEAP32[$8 >> 2] = $4;
 $5 = $1;
 $3 = HEAP32[$5 >> 2];
 $4 = HEAP32[$5 + 4 >> 2];
 HEAP32[$8 + 16 >> 2] = $3;
 HEAP32[$8 + 20 >> 2] = $4;
 $4 = $5 + 8 | 0;
 $5 = $4;
 $4 = HEAP32[$5 >> 2];
 $3 = HEAP32[$5 + 4 >> 2];
 HEAP32[$8 + 24 >> 2] = $4;
 HEAP32[$8 + 28 >> 2] = $3;
 $5 = $2;
 $3 = HEAP32[$5 >> 2];
 $4 = HEAP32[$5 + 4 >> 2];
 HEAP32[$8 + 32 >> 2] = $3;
 HEAP32[$8 + 36 >> 2] = $4;
 $5 = $5 + 8 | 0;
 $4 = HEAP32[$5 >> 2];
 $3 = HEAP32[$5 + 4 >> 2];
 HEAP32[$8 + 40 >> 2] = $4;
 HEAP32[$8 + 44 >> 2] = $3;
 HEAP32[$8 + 52 >> 2] = 0;
 HEAP32[$8 + 56 >> 2] = 0;
 $5 = $1;
 $3 = HEAP32[$5 + 8 >> 2];
 $4 = HEAP32[$5 + 12 >> 2];
 HEAP32[$7 + 24 >> 2] = $3;
 HEAP32[$7 + 28 >> 2] = $4;
 $3 = HEAP32[$5 + 4 >> 2];
 $4 = HEAP32[$5 >> 2];
 HEAP32[$7 + 16 >> 2] = $4;
 HEAP32[$7 + 20 >> 2] = $3;
 $5 = $2;
 $3 = HEAP32[$5 + 8 >> 2];
 $4 = HEAP32[$5 + 12 >> 2];
 HEAP32[$7 + 40 >> 2] = $3;
 HEAP32[$7 + 44 >> 2] = $4;
 $3 = HEAP32[$5 + 4 >> 2];
 $4 = HEAP32[$5 >> 2];
 HEAP32[$7 + 32 >> 2] = $4;
 HEAP32[$7 + 36 >> 2] = $3;
 HEAP32[$8 + 60 >> 2] = HEAP32[$0 + 104 >> 2];
 $2 = HEAP32[$0 + 148 >> 2] + 1 | 0;
 HEAP32[$0 + 148 >> 2] = $2;
 HEAP32[$8 + 12 >> 2] = $2;
 $4 = $0 + 4 | 0;
 HEAP32[$8 + 48 >> 2] = btDbvt__insert_28btDbvtAabbMm_20const__2c_20void__29($4, $7 + 16 | 0, $8);
 $2 = HEAP32[$0 + 104 >> 2];
 HEAP32[$8 + 52 >> 2] = 0;
 $3 = ($2 << 2) + $0 | 0;
 $2 = $3 + 84 | 0;
 HEAP32[$8 + 56 >> 2] = HEAP32[$2 >> 2];
 $1 = HEAP32[$3 + 84 >> 2];
 if ($1) {
  HEAP32[$1 + 52 >> 2] = $8;
 }
 HEAP32[$3 + 84 >> 2] = $8;
 if (!HEAPU8[$0 + 153 | 0]) {
  HEAP32[$7 + 8 >> 2] = $8;
  HEAP32[$7 >> 2] = 16064;
  HEAP32[$7 + 4 >> 2] = $0;
  btDbvt__collideTV_28btDbvtNode_20const__2c_20btDbvtAabbMm_20const__2c_20btDbvt__ICollide__29_20const($4, HEAP32[$0 + 4 >> 2], $7 + 16 | 0, $7);
  $1 = $0;
  $0 = $0 + 44 | 0;
  btDbvt__collideTV_28btDbvtNode_20const__2c_20btDbvtAabbMm_20const__2c_20btDbvt__ICollide__29_20const($0, HEAP32[$1 + 44 >> 2], $7 + 16 | 0, $7);
 }
 $0 = $7 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $8 | 0;
}
function btSolverBody__writebackVelocityAndTransform_28float_2c_20float_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0);
 $3 = global$0 - 80 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 label$2 : {
  if (!HEAP32[$0 + 240 >> 2]) {
   break label$2;
  }
  HEAPF32[$0 + 176 >> 2] = HEAPF32[$0 + 64 >> 2] + HEAPF32[$0 + 176 >> 2];
  HEAPF32[$0 + 192 >> 2] = HEAPF32[$0 + 80 >> 2] + HEAPF32[$0 + 192 >> 2];
  HEAPF32[$0 + 180 >> 2] = HEAPF32[$0 + 68 >> 2] + HEAPF32[$0 + 180 >> 2];
  HEAPF32[$0 + 184 >> 2] = HEAPF32[$0 + 72 >> 2] + HEAPF32[$0 + 184 >> 2];
  HEAPF32[$0 + 196 >> 2] = HEAPF32[$0 + 84 >> 2] + HEAPF32[$0 + 196 >> 2];
  HEAPF32[$0 + 200 >> 2] = HEAPF32[$0 + 88 >> 2] + HEAPF32[$0 + 200 >> 2];
  label$3 : {
   if (HEAPF32[$0 + 144 >> 2] != Math_fround(0) | HEAPF32[$0 + 148 >> 2] != Math_fround(0) | (HEAPF32[$0 + 152 >> 2] != Math_fround(0) | HEAPF32[$0 + 160 >> 2] != Math_fround(0))) {
    break label$3;
   }
   if (HEAPF32[$0 + 164 >> 2] != Math_fround(0)) {
    break label$3;
   }
   if (HEAPF32[$0 + 168 >> 2] == Math_fround(0)) {
    break label$2;
   }
  }
  $6 = HEAPF32[$0 + 164 >> 2];
  $7 = HEAPF32[$0 + 168 >> 2];
  $8 = HEAPF32[$0 + 160 >> 2];
  HEAP32[$3 + 12 >> 2] = 0;
  HEAPF32[$3 >> 2] = $8 * $2;
  HEAPF32[$3 + 8 >> 2] = $7 * $2;
  HEAPF32[$3 + 4 >> 2] = $6 * $2;
  btTransformUtil__integrateTransform_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20btTransform__29($0, $0 + 144 | 0, $3, $1, $3 + 16 | 0);
  $4 = HEAP32[$3 + 28 >> 2];
  $5 = HEAP32[$3 + 24 >> 2];
  HEAP32[$0 + 8 >> 2] = $5;
  HEAP32[$0 + 12 >> 2] = $4;
  $5 = HEAP32[$3 + 20 >> 2];
  $4 = HEAP32[$3 + 16 >> 2];
  HEAP32[$0 >> 2] = $4;
  HEAP32[$0 + 4 >> 2] = $5;
  $4 = HEAP32[$3 + 44 >> 2];
  $5 = HEAP32[$3 + 40 >> 2];
  HEAP32[$0 + 24 >> 2] = $5;
  HEAP32[$0 + 28 >> 2] = $4;
  $5 = HEAP32[$3 + 36 >> 2];
  $4 = HEAP32[$3 + 32 >> 2];
  HEAP32[$0 + 16 >> 2] = $4;
  HEAP32[$0 + 20 >> 2] = $5;
  $4 = HEAP32[$3 + 52 >> 2];
  $5 = HEAP32[$3 + 48 >> 2];
  HEAP32[$0 + 32 >> 2] = $5;
  HEAP32[$0 + 36 >> 2] = $4;
  $5 = HEAP32[$3 + 60 >> 2];
  $4 = HEAP32[$3 + 56 >> 2];
  HEAP32[$0 + 40 >> 2] = $4;
  HEAP32[$0 + 44 >> 2] = $5;
  $4 = HEAP32[$3 + 68 >> 2];
  $5 = HEAP32[$3 + 64 >> 2];
  HEAP32[$0 + 48 >> 2] = $5;
  HEAP32[$0 + 52 >> 2] = $4;
  $5 = HEAP32[$3 + 76 >> 2];
  $4 = HEAP32[$3 + 72 >> 2];
  HEAP32[$0 + 56 >> 2] = $4;
  HEAP32[$0 + 60 >> 2] = $5;
 }
 $0 = $3 + 80 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btMatrix3x3__inverse_28_29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $2 = global$0 - 80 | 0;
 $4 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $5 = $2 + 32 | 0;
 $6 = $2 + 28 | 0;
 $7 = $2 + 24 | 0;
 $8 = $2 + 20 | 0;
 $9 = $2 + 16 | 0;
 $10 = $2 + 12 | 0;
 $11 = $2 + 8 | 0;
 $12 = $2 + 4 | 0;
 $3 = $2 + 56 | 0;
 $13 = $2 + 52 | 0;
 $14 = $2 + 48 | 0;
 $4 = $2 + 44 | 0;
 HEAP32[$2 + 76 >> 2] = $0;
 HEAP32[$2 + 72 >> 2] = $1;
 $1 = HEAP32[$2 + 72 >> 2];
 HEAPF32[$2 + 52 >> 2] = btMatrix3x3__cofac_28int_2c_20int_2c_20int_2c_20int_29_20const($1, 1, 1, 2, 2);
 HEAPF32[$2 + 48 >> 2] = btMatrix3x3__cofac_28int_2c_20int_2c_20int_2c_20int_29_20const($1, 1, 2, 2, 0);
 HEAPF32[$2 + 44 >> 2] = btMatrix3x3__cofac_28int_2c_20int_2c_20int_2c_20int_29_20const($1, 1, 0, 2, 1);
 btVector3__btVector3_28float_20const__2c_20float_20const__2c_20float_20const__29($3, $13, $14, $4);
 HEAPF32[$2 + 40 >> 2] = btVector3__dot_28btVector3_20const__29_20const(btMatrix3x3__operator_5b_5d_28int_29_20const($1, 0), $3);
 HEAPF32[$2 + 36 >> 2] = Math_fround(1) / HEAPF32[$2 + 40 >> 2];
 HEAPF32[$2 + 32 >> 2] = HEAPF32[btVector3__x_28_29_20const($3) >> 2] * HEAPF32[$2 + 36 >> 2];
 HEAPF32[$2 + 28 >> 2] = btMatrix3x3__cofac_28int_2c_20int_2c_20int_2c_20int_29_20const($1, 0, 2, 2, 1) * HEAPF32[$2 + 36 >> 2];
 HEAPF32[$2 + 24 >> 2] = btMatrix3x3__cofac_28int_2c_20int_2c_20int_2c_20int_29_20const($1, 0, 1, 1, 2) * HEAPF32[$2 + 36 >> 2];
 HEAPF32[$2 + 20 >> 2] = HEAPF32[btVector3__y_28_29_20const($3) >> 2] * HEAPF32[$2 + 36 >> 2];
 HEAPF32[$2 + 16 >> 2] = btMatrix3x3__cofac_28int_2c_20int_2c_20int_2c_20int_29_20const($1, 0, 0, 2, 2) * HEAPF32[$2 + 36 >> 2];
 HEAPF32[$2 + 12 >> 2] = btMatrix3x3__cofac_28int_2c_20int_2c_20int_2c_20int_29_20const($1, 0, 2, 1, 0) * HEAPF32[$2 + 36 >> 2];
 HEAPF32[$2 + 8 >> 2] = HEAPF32[btVector3__z_28_29_20const($3) >> 2] * HEAPF32[$2 + 36 >> 2];
 HEAPF32[$2 + 4 >> 2] = btMatrix3x3__cofac_28int_2c_20int_2c_20int_2c_20int_29_20const($1, 0, 1, 2, 0) * HEAPF32[$2 + 36 >> 2];
 HEAPF32[$2 >> 2] = btMatrix3x3__cofac_28int_2c_20int_2c_20int_2c_20int_29_20const($1, 0, 0, 1, 1) * HEAPF32[$2 + 36 >> 2];
 btMatrix3x3__btMatrix3x3_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($0, $5, $6, $7, $8, $9, $10, $11, $12, $2);
 $0 = $2 + 80 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function gjkepa2_impl__EPA__expand_28unsigned_20int_2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__EPA__sFace__2c_20unsigned_20int_2c_20gjkepa2_impl__EPA__sHorizon__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0, $8 = 0;
 label$1 : {
  if (HEAPU8[$3 + 55 | 0] == ($1 | 0)) {
   break label$1;
  }
  $6 = $4 << 2;
  $7 = HEAP32[$6 + 4284 >> 2];
  if (!!(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$3 >> 2] * HEAPF32[$2 + 16 >> 2]) + Math_fround(HEAPF32[$3 + 4 >> 2] * HEAPF32[$2 + 20 >> 2])) + Math_fround(HEAPF32[$3 + 8 >> 2] * HEAPF32[$2 + 24 >> 2])) - HEAPF32[$3 + 16 >> 2]) < Math_fround(-9999999747378752e-21))) {
   $1 = $3 + 20 | 0;
   $2 = gjkepa2_impl__EPA__newface_28gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20bool_29($0, HEAP32[$1 + ($7 << 2) >> 2], HEAP32[$1 + $6 >> 2], $2, 0);
   if (!$2) {
    break label$1;
   }
   HEAP32[$2 + 32 >> 2] = $3;
   HEAP8[$2 + 52 | 0] = $4;
   HEAP8[($3 + $4 | 0) + 52 | 0] = 0;
   HEAP32[(($4 << 2) + $3 | 0) + 32 >> 2] = $2;
   $3 = HEAP32[$5 >> 2];
   label$3 : {
    if ($3) {
     HEAP32[$3 + 36 >> 2] = $2;
     HEAP8[$3 + 53 | 0] = 2;
     HEAP32[$2 + 40 >> 2] = $3;
     HEAP8[$2 + 54 | 0] = 1;
     break label$3;
    }
    HEAP32[$5 + 4 >> 2] = $2;
   }
   HEAP32[$5 >> 2] = $2;
   HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 1;
   return 1;
  }
  HEAP8[$3 + 55 | 0] = $1;
  if (!gjkepa2_impl__EPA__expand_28unsigned_20int_2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__EPA__sFace__2c_20unsigned_20int_2c_20gjkepa2_impl__EPA__sHorizon__29($0, $1, $2, HEAP32[(($7 << 2) + $3 | 0) + 32 >> 2], HEAPU8[($3 + $7 | 0) + 52 | 0], $5)) {
   break label$1;
  }
  $4 = HEAP32[$6 + 4296 >> 2];
  if (!gjkepa2_impl__EPA__expand_28unsigned_20int_2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__EPA__sFace__2c_20unsigned_20int_2c_20gjkepa2_impl__EPA__sHorizon__29($0, $1, $2, HEAP32[(($4 << 2) + $3 | 0) + 32 >> 2], HEAPU8[($3 + $4 | 0) + 52 | 0], $5)) {
   break label$1;
  }
  $2 = HEAP32[$3 + 48 >> 2];
  if ($2) {
   HEAP32[$2 + 44 >> 2] = HEAP32[$3 + 44 >> 2];
  }
  $2 = HEAP32[$3 + 44 >> 2];
  if ($2) {
   HEAP32[$2 + 48 >> 2] = HEAP32[$3 + 48 >> 2];
  }
  if (HEAP32[$0 + 18496 >> 2] == ($3 | 0)) {
   HEAP32[$0 + 18496 >> 2] = HEAP32[$3 + 48 >> 2];
  }
  $2 = $0 + 18500 | 0;
  HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + -1;
  HEAP32[$3 + 44 >> 2] = 0;
  HEAP32[$3 + 48 >> 2] = HEAP32[$0 + 18504 >> 2];
  $2 = HEAP32[$0 + 18504 >> 2];
  if ($2) {
   HEAP32[$2 + 44 >> 2] = $3;
  }
  HEAP32[$0 + 18504 >> 2] = $3;
  $8 = 1;
  $3 = $0 + 18508 | 0;
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
 }
 return $8;
}
function btDbvt__update_28btDbvtNode__2c_20btDbvtAabbMm__2c_20btVector3_20const__2c_20float_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0);
 $6 = HEAPF32[$2 >> 2];
 label$1 : {
  label$2 : {
   if (!(HEAPF32[$1 >> 2] <= $6)) {
    $8 = HEAPF32[$2 + 4 >> 2];
    break label$2;
   }
   $8 = HEAPF32[$2 + 4 >> 2];
   if (HEAPF32[$1 + 4 >> 2] <= $8 ^ 1 | HEAPF32[$1 + 8 >> 2] <= HEAPF32[$2 + 8 >> 2] ^ 1 | (HEAPF32[$1 + 16 >> 2] >= HEAPF32[$2 + 16 >> 2] ^ 1 | HEAPF32[$1 + 20 >> 2] >= HEAPF32[$2 + 20 >> 2] ^ 1)) {
    break label$2;
   }
   $5 = 0;
   if (HEAPF32[$1 + 24 >> 2] >= HEAPF32[$2 + 24 >> 2]) {
    break label$1;
   }
  }
  $8 = Math_fround($8 - $4);
  HEAPF32[$2 + 4 >> 2] = $8;
  $6 = Math_fround($6 - $4);
  HEAPF32[$2 >> 2] = $6;
  $10 = Math_fround(HEAPF32[$2 + 8 >> 2] - $4);
  HEAPF32[$2 + 8 >> 2] = $10;
  $11 = Math_fround(HEAPF32[$2 + 16 >> 2] + $4);
  HEAPF32[$2 + 16 >> 2] = $11;
  $5 = $2 + 20 | 0;
  $12 = Math_fround(HEAPF32[$2 + 20 >> 2] + $4);
  HEAPF32[$5 >> 2] = $12;
  $4 = Math_fround(HEAPF32[$2 + 24 >> 2] + $4);
  HEAPF32[$2 + 24 >> 2] = $4;
  $13 = HEAPF32[$3 >> 2];
  $5 = $13 > Math_fround(0);
  HEAPF32[($5 << 4) + $2 >> 2] = ($5 ? $11 : $6) + $13;
  $6 = HEAPF32[$3 + 4 >> 2];
  $5 = $6 > Math_fround(0);
  HEAPF32[($5 ? 20 : 4) + $2 >> 2] = ($5 ? $12 : $8) + $6;
  $6 = HEAPF32[$3 + 8 >> 2];
  $3 = $6 > Math_fround(0);
  HEAPF32[($3 ? 24 : 8) + $2 >> 2] = ($3 ? $4 : $10) + $6;
  $3 = removeleaf_28btDbvt__2c_20btDbvtNode__29($0, $1);
  label$4 : {
   if (!$3) {
    $3 = 0;
    break label$4;
   }
   $5 = 0;
   $9 = HEAP32[$0 + 8 >> 2];
   if (($9 | 0) >= 0) {
    if (!$9) {
     break label$4;
    }
    while (1) {
     $7 = HEAP32[$3 + 32 >> 2];
     if (!$7) {
      break label$4;
     }
     $3 = $7;
     $5 = $5 + 1 | 0;
     if (($9 | 0) != ($5 | 0)) {
      continue;
     }
     break;
    }
    break label$4;
   }
   $3 = HEAP32[$0 >> 2];
  }
  $5 = HEAP32[$2 + 4 >> 2];
  $7 = HEAP32[$2 >> 2];
  HEAP32[$1 >> 2] = $7;
  HEAP32[$1 + 4 >> 2] = $5;
  $7 = HEAP32[$2 + 28 >> 2];
  $5 = HEAP32[$2 + 24 >> 2];
  HEAP32[$1 + 24 >> 2] = $5;
  HEAP32[$1 + 28 >> 2] = $7;
  $5 = HEAP32[$2 + 20 >> 2];
  $7 = HEAP32[$2 + 16 >> 2];
  HEAP32[$1 + 16 >> 2] = $7;
  HEAP32[$1 + 20 >> 2] = $5;
  $7 = HEAP32[$2 + 12 >> 2];
  $5 = HEAP32[$2 + 8 >> 2];
  HEAP32[$1 + 8 >> 2] = $5;
  HEAP32[$1 + 12 >> 2] = $7;
  insertleaf_28btDbvt__2c_20btDbvtNode__2c_20btDbvtNode__29($0, $3, $1);
  $5 = 1;
 }
 return $5;
}
function btHeightfieldTerrainShape__initialize_28int_2c_20int_2c_20void_20const__2c_20float_2c_20float_2c_20float_2c_20int_2c_20PHY_ScalarType_2c_20bool_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0);
 HEAP32[$0 + 112 >> 2] = 1065353216;
 HEAP32[$0 + 116 >> 2] = 1065353216;
 HEAP32[$0 + 108 >> 2] = $7;
 HEAP8[$0 + 105 | 0] = 0;
 HEAP8[$0 + 106 | 0] = 0;
 HEAP8[$0 + 104 | 0] = $9;
 HEAP32[$0 + 100 >> 2] = $8;
 HEAP32[$0 + 96 >> 2] = $3;
 HEAPF32[$0 + 92 >> 2] = $4;
 HEAPF32[$0 + 80 >> 2] = $6;
 HEAPF32[$0 + 76 >> 2] = $5;
 HEAP32[$0 + 72 >> 2] = $2;
 HEAP32[$0 + 68 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = 24;
 HEAP32[$0 + 120 >> 2] = 1065353216;
 HEAP32[$0 + 124 >> 2] = 0;
 $4 = Math_fround($2 + -1 | 0);
 HEAPF32[$0 + 88 >> 2] = $4;
 $10 = Math_fround($1 + -1 | 0);
 HEAPF32[$0 + 84 >> 2] = $10;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if ($7 >>> 0 <= 2) {
       switch ($7 - 1 | 0) {
       case 1:
        break label$3;
       case 0:
        break label$4;
       default:
        break label$5;
       }
      }
      $11 = HEAPF32[$0 + 44 >> 2];
      $12 = HEAPF32[$0 + 28 >> 2];
      $4 = HEAPF32[$0 + 40 >> 2];
      $13 = HEAPF32[$0 + 24 >> 2];
      $6 = HEAPF32[$0 + 36 >> 2];
      $5 = HEAPF32[$0 + 20 >> 2];
      break label$1;
     }
     HEAPF32[$0 + 36 >> 2] = $6;
     HEAPF32[$0 + 20 >> 2] = $5;
     HEAP32[$0 + 48 >> 2] = 0;
     HEAPF32[$0 + 44 >> 2] = $4;
     HEAPF32[$0 + 40 >> 2] = $10;
     HEAP32[$0 + 32 >> 2] = 0;
     HEAP32[$0 + 24 >> 2] = 0;
     HEAP32[$0 + 28 >> 2] = 0;
     $11 = $4;
     $4 = $10;
     break label$1;
    }
    HEAPF32[$0 + 36 >> 2] = $10;
    HEAP32[$0 + 20 >> 2] = 0;
    HEAP32[$0 + 48 >> 2] = 0;
    HEAPF32[$0 + 44 >> 2] = $4;
    HEAPF32[$0 + 40 >> 2] = $6;
    HEAP32[$0 + 28 >> 2] = 0;
    HEAP32[$0 + 32 >> 2] = 0;
    HEAPF32[$0 + 24 >> 2] = $5;
    $11 = $4;
    $4 = $6;
    $13 = $5;
    $5 = Math_fround(0);
    break label$2;
   }
   HEAPF32[$0 + 36 >> 2] = $10;
   HEAP32[$0 + 20 >> 2] = 0;
   HEAP32[$0 + 24 >> 2] = 0;
   HEAP32[$0 + 48 >> 2] = 0;
   HEAPF32[$0 + 44 >> 2] = $6;
   HEAPF32[$0 + 40 >> 2] = $4;
   HEAP32[$0 + 32 >> 2] = 0;
   HEAPF32[$0 + 28 >> 2] = $5;
   $11 = $6;
  }
  $12 = $5;
  $6 = $10;
  $5 = Math_fround(0);
 }
 HEAP32[$0 - -64 >> 2] = 0;
 HEAPF32[$0 + 60 >> 2] = Math_fround($12 + $11) * Math_fround(.5);
 HEAPF32[$0 + 56 >> 2] = Math_fround($13 + $4) * Math_fround(.5);
 HEAPF32[$0 + 52 >> 2] = Math_fround($5 + $6) * Math_fround(.5);
}
function btConvexHullInternal__newEdgePair_28btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = HEAP32[$0 + 56 >> 2];
 label$1 : {
  if ($4) {
   break label$1;
  }
  $3 = HEAP32[$0 + 52 >> 2];
  label$2 : {
   if ($3) {
    HEAP32[$0 + 52 >> 2] = HEAP32[$3 + 8 >> 2];
    break label$2;
   }
   $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(12, 16);
   $5 = HEAP32[$0 + 60 >> 2];
   HEAP32[$3 + 8 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = $5;
   HEAP32[$3 >> 2] = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($5, 24), 16);
   HEAP32[$3 + 8 >> 2] = HEAP32[$0 + 48 >> 2];
   HEAP32[$0 + 48 >> 2] = $3;
  }
  $4 = HEAP32[$3 >> 2];
  $7 = HEAP32[$3 + 4 >> 2];
  if (($7 | 0) < 1) {
   break label$1;
  }
  $3 = 0;
  $5 = $4;
  while (1) {
   $8 = $5 + 24 | 0;
   $3 = $3 + 1 | 0;
   HEAP32[$5 >> 2] = ($3 | 0) < ($7 | 0) ? $8 : 0;
   $5 = $8;
   if (($3 | 0) != ($7 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 56 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$4 + 16 >> 2] = 0;
 HEAP32[$4 + 20 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 HEAP32[$4 + 12 >> 2] = 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 $6 = HEAP32[$0 + 56 >> 2];
 label$5 : {
  if ($6) {
   break label$5;
  }
  $3 = HEAP32[$0 + 52 >> 2];
  label$6 : {
   if ($3) {
    HEAP32[$0 + 52 >> 2] = HEAP32[$3 + 8 >> 2];
    break label$6;
   }
   $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(12, 16);
   $5 = HEAP32[$0 + 60 >> 2];
   HEAP32[$3 + 8 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = $5;
   HEAP32[$3 >> 2] = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($5, 24), 16);
   HEAP32[$3 + 8 >> 2] = HEAP32[$0 + 48 >> 2];
   HEAP32[$0 + 48 >> 2] = $3;
  }
  $6 = HEAP32[$3 >> 2];
  $7 = HEAP32[$3 + 4 >> 2];
  if (($7 | 0) < 1) {
   break label$5;
  }
  $3 = 0;
  $5 = $6;
  while (1) {
   $8 = $5 + 24 | 0;
   $3 = $3 + 1 | 0;
   HEAP32[$5 >> 2] = ($3 | 0) < ($7 | 0) ? $8 : 0;
   $5 = $8;
   if (($3 | 0) != ($7 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 56 >> 2] = HEAP32[$6 >> 2];
 HEAP32[$6 >> 2] = 0;
 HEAP32[$6 + 4 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = $6;
 HEAP32[$6 + 8 >> 2] = $4;
 $3 = HEAP32[$0 + 100 >> 2];
 HEAP32[$4 + 20 >> 2] = $3;
 HEAP32[$6 + 20 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = $2;
 HEAP32[$6 + 12 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = 0;
 HEAP32[$6 + 16 >> 2] = 0;
 $3 = HEAP32[$0 + 116 >> 2];
 $5 = $3 + 1 | 0;
 HEAP32[$0 + 116 >> 2] = $5;
 if (($3 | 0) >= HEAP32[$0 + 120 >> 2]) {
  HEAP32[$0 + 120 >> 2] = $5;
 }
 return $4;
}
function btCollisionShape__calculateTemporalAabb_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3, $4, $5, $6) {
 var $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1, $5, $6);
 $7 = HEAPF32[$2 + 8 >> 2];
 $8 = Math_fround(HEAPF32[$2 + 4 >> 2] * $4);
 $10 = HEAPF32[$5 + 8 >> 2];
 $1 = HEAP32[$5 + 8 >> 2];
 $16 = HEAPF32[$5 + 4 >> 2];
 $11 = HEAP32[$5 + 4 >> 2];
 $17 = HEAPF32[$5 >> 2];
 $12 = HEAP32[$5 >> 2];
 $18 = HEAPF32[$6 + 8 >> 2];
 $13 = HEAP32[$6 + 8 >> 2];
 $19 = HEAPF32[$6 + 4 >> 2];
 $14 = HEAP32[$6 + 4 >> 2];
 $20 = HEAPF32[$6 >> 2];
 $15 = HEAP32[$6 >> 2];
 $9 = Math_fround(HEAPF32[$2 >> 2] * $4);
 label$1 : {
  if (!!($9 > Math_fround(0))) {
   $15 = (wasm2js_scratch_store_f32(Math_fround($9 + $20)), wasm2js_scratch_load_i32(0));
   break label$1;
  }
  $12 = (wasm2js_scratch_store_f32(Math_fround($9 + $17)), wasm2js_scratch_load_i32(0));
 }
 $7 = Math_fround($7 * $4);
 label$3 : {
  if (!!($8 > Math_fround(0))) {
   $14 = (wasm2js_scratch_store_f32(Math_fround($8 + $19)), wasm2js_scratch_load_i32(0));
   break label$3;
  }
  $11 = (wasm2js_scratch_store_f32(Math_fround($8 + $16)), wasm2js_scratch_load_i32(0));
 }
 label$5 : {
  if (!!($7 > Math_fround(0))) {
   $13 = (wasm2js_scratch_store_f32(Math_fround($7 + $18)), wasm2js_scratch_load_i32(0));
   break label$5;
  }
  $1 = (wasm2js_scratch_store_f32(Math_fround($7 + $10)), wasm2js_scratch_load_i32(0));
 }
 $8 = HEAPF32[$3 + 8 >> 2];
 $7 = HEAPF32[$3 >> 2];
 $9 = HEAPF32[$3 + 4 >> 2];
 $10 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0));
 HEAP32[$5 + 12 >> 2] = 0;
 HEAP32[$5 + 8 >> 2] = $1;
 HEAP32[$5 + 4 >> 2] = $11;
 HEAP32[$5 >> 2] = $12;
 HEAP32[$6 + 12 >> 2] = 0;
 HEAP32[$6 + 8 >> 2] = $13;
 HEAP32[$6 + 4 >> 2] = $14;
 HEAP32[$6 >> 2] = $15;
 $4 = Math_fround(Math_fround($10 * Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($9 * $9)) + Math_fround($8 * $8))))) * $4);
 HEAPF32[$5 >> 2] = HEAPF32[$5 >> 2] - $4;
 HEAPF32[$5 + 4 >> 2] = HEAPF32[$5 + 4 >> 2] - $4;
 HEAPF32[$5 + 8 >> 2] = HEAPF32[$5 + 8 >> 2] - $4;
 HEAPF32[$6 >> 2] = $4 + HEAPF32[$6 >> 2];
 HEAPF32[$6 + 4 >> 2] = $4 + HEAPF32[$6 + 4 >> 2];
 HEAPF32[$6 + 8 >> 2] = $4 + HEAPF32[$6 + 8 >> 2];
}
function btGeneric6DofSpring2Constraint__testAngularLimitMotor_28int_29($0, $1) {
 var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0);
 $3 = HEAPF32[(($1 << 2) + $0 | 0) + 1364 >> 2];
 $6 = Math_imul($1, 88) + $0 | 0;
 $4 = HEAPF32[$6 + 968 >> 2];
 $5 = HEAPF32[$6 + 972 >> 2];
 label$1 : {
  if ($4 >= $5) {
   break label$1;
  }
  if (!!($3 < $4)) {
   $2 = fmodf(Math_fround($4 - $3), Math_fround(6.2831854820251465));
   label$3 : {
    if (!!($2 < Math_fround(-3.1415927410125732))) {
     $2 = Math_fround($2 + Math_fround(6.2831854820251465));
     break label$3;
    }
    if (!($2 > Math_fround(3.1415927410125732))) {
     break label$3;
    }
    $2 = Math_fround($2 + Math_fround(-6.2831854820251465));
   }
   $7 = Math_fround(Math_abs($2));
   $2 = fmodf(Math_fround($5 - $3), Math_fround(6.2831854820251465));
   label$5 : {
    if (!!($2 < Math_fround(-3.1415927410125732))) {
     $2 = Math_fround($2 + Math_fround(6.2831854820251465));
     break label$5;
    }
    if (!($2 > Math_fround(3.1415927410125732))) {
     break label$5;
    }
    $2 = Math_fround($2 + Math_fround(-6.2831854820251465));
   }
   $3 = $7 < Math_fround(Math_abs($2)) ? $3 : Math_fround($3 + Math_fround(6.2831854820251465));
   break label$1;
  }
  if (!($3 > $5)) {
   break label$1;
  }
  $2 = fmodf(Math_fround($3 - $5), Math_fround(6.2831854820251465));
  label$7 : {
   if (!!($2 < Math_fround(-3.1415927410125732))) {
    $2 = Math_fround($2 + Math_fround(6.2831854820251465));
    break label$7;
   }
   if (!($2 > Math_fround(3.1415927410125732))) {
    break label$7;
   }
   $2 = Math_fround($2 + Math_fround(-6.2831854820251465));
  }
  $7 = Math_fround(Math_abs($2));
  $2 = fmodf(Math_fround($3 - $4), Math_fround(6.2831854820251465));
  label$9 : {
   if (!!($2 < Math_fround(-3.1415927410125732))) {
    $2 = Math_fround($2 + Math_fround(6.2831854820251465));
    break label$9;
   }
   if (!($2 > Math_fround(3.1415927410125732))) {
    break label$9;
   }
   $2 = Math_fround($2 + Math_fround(-6.2831854820251465));
  }
  $3 = Math_fround(Math_abs($2)) < $7 ? Math_fround($3 + Math_fround(-6.2831854820251465)) : $3;
 }
 HEAPF32[$6 + 1048 >> 2] = $3;
 if (!!($4 > $5)) {
  $0 = Math_imul($1, 88) + $0 | 0;
  HEAP32[$0 + 1040 >> 2] = 0;
  HEAP32[$0 + 1052 >> 2] = 0;
  return;
 }
 $0 = Math_imul($1, 88) + $0 | 0;
 HEAPF32[$0 + 1040 >> 2] = $3 - $4;
 if ($4 == $5) {
  HEAP32[$0 + 1052 >> 2] = 3;
  return;
 }
 HEAP32[$0 + 1052 >> 2] = 4;
 HEAPF32[$0 + 1044 >> 2] = $3 - $5;
}
function memcpy($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 if ($2 >>> 0 >= 512) {
  emscripten_memcpy_big($0 | 0, $1 | 0, $2 | 0) | 0;
  return $0;
 }
 $4 = $0 + $2 | 0;
 label$2 : {
  if (!(($0 ^ $1) & 3)) {
   label$4 : {
    if (($2 | 0) < 1) {
     $2 = $0;
     break label$4;
    }
    if (!($0 & 3)) {
     $2 = $0;
     break label$4;
    }
    $2 = $0;
    while (1) {
     HEAP8[$2 | 0] = HEAPU8[$1 | 0];
     $1 = $1 + 1 | 0;
     $2 = $2 + 1 | 0;
     if ($2 >>> 0 >= $4 >>> 0) {
      break label$4;
     }
     if ($2 & 3) {
      continue;
     }
     break;
    }
   }
   $3 = $4 & -4;
   label$8 : {
    if ($3 >>> 0 < 64) {
     break label$8;
    }
    $5 = $3 + -64 | 0;
    if ($2 >>> 0 > $5 >>> 0) {
     break label$8;
    }
    while (1) {
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
     HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
     HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2];
     HEAP32[$2 + 20 >> 2] = HEAP32[$1 + 20 >> 2];
     HEAP32[$2 + 24 >> 2] = HEAP32[$1 + 24 >> 2];
     HEAP32[$2 + 28 >> 2] = HEAP32[$1 + 28 >> 2];
     HEAP32[$2 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
     HEAP32[$2 + 36 >> 2] = HEAP32[$1 + 36 >> 2];
     HEAP32[$2 + 40 >> 2] = HEAP32[$1 + 40 >> 2];
     HEAP32[$2 + 44 >> 2] = HEAP32[$1 + 44 >> 2];
     HEAP32[$2 + 48 >> 2] = HEAP32[$1 + 48 >> 2];
     HEAP32[$2 + 52 >> 2] = HEAP32[$1 + 52 >> 2];
     HEAP32[$2 + 56 >> 2] = HEAP32[$1 + 56 >> 2];
     HEAP32[$2 + 60 >> 2] = HEAP32[$1 + 60 >> 2];
     $1 = $1 - -64 | 0;
     $2 = $2 - -64 | 0;
     if ($2 >>> 0 <= $5 >>> 0) {
      continue;
     }
     break;
    }
   }
   if ($2 >>> 0 >= $3 >>> 0) {
    break label$2;
   }
   while (1) {
    HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
    $1 = $1 + 4 | 0;
    $2 = $2 + 4 | 0;
    if ($2 >>> 0 < $3 >>> 0) {
     continue;
    }
    break;
   }
   break label$2;
  }
  if ($4 >>> 0 < 4) {
   $2 = $0;
   break label$2;
  }
  $3 = $4 + -4 | 0;
  if ($3 >>> 0 < $0 >>> 0) {
   $2 = $0;
   break label$2;
  }
  $2 = $0;
  while (1) {
   HEAP8[$2 | 0] = HEAPU8[$1 | 0];
   HEAP8[$2 + 1 | 0] = HEAPU8[$1 + 1 | 0];
   HEAP8[$2 + 2 | 0] = HEAPU8[$1 + 2 | 0];
   HEAP8[$2 + 3 | 0] = HEAPU8[$1 + 3 | 0];
   $1 = $1 + 4 | 0;
   $2 = $2 + 4 | 0;
   if ($2 >>> 0 <= $3 >>> 0) {
    continue;
   }
   break;
  }
 }
 if ($2 >>> 0 < $4 >>> 0) {
  while (1) {
   HEAP8[$2 | 0] = HEAPU8[$1 | 0];
   $1 = $1 + 1 | 0;
   $2 = $2 + 1 | 0;
   if (($4 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 return $0;
}
function btDbvtBroadphase__btDbvtBroadphase_28btOverlappingPairCache__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = global$0 - 32 | 0;
 $4 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$0 >> 2] = 15936;
 btDbvt__btDbvt_28_29($0 + 4 | 0);
 btDbvt__btDbvt_28_29($0 + 44 | 0);
 HEAP32[$0 + 168 >> 2] = 0;
 $5 = 1;
 HEAP8[$0 + 172 | 0] = 1;
 HEAP32[$0 + 160 >> 2] = 0;
 HEAP32[$0 + 164 >> 2] = 0;
 HEAP8[$0 + 153 | 0] = 256;
 HEAP8[$0 + 154 | 0] = 1;
 HEAP8[$0 + 152 | 0] = !$1;
 HEAP32[$0 + 124 >> 2] = 0;
 HEAP32[$0 + 100 >> 2] = 0;
 HEAP32[$0 + 104 >> 2] = 0;
 HEAP32[$0 + 136 >> 2] = 0;
 HEAP32[$0 + 128 >> 2] = 0;
 HEAP32[$0 + 132 >> 2] = 0;
 HEAP32[$0 + 116 >> 2] = 10;
 HEAP32[$0 + 120 >> 2] = 1;
 HEAP32[$0 + 108 >> 2] = 1;
 HEAP32[$0 + 112 >> 2] = 0;
 if (!$1) {
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(72, 16);
  btHashedOverlappingPairCache__btHashedOverlappingPairCache_28_29($1);
  $3 = HEAP32[$0 + 160 >> 2];
 }
 HEAP32[$0 + 148 >> 2] = 0;
 HEAP32[$0 + 96 >> 2] = $1;
 HEAP32[$0 + 140 >> 2] = 0;
 HEAP32[$0 + 144 >> 2] = 0;
 HEAP32[$0 + 84 >> 2] = 0;
 HEAP32[$0 + 88 >> 2] = 0;
 HEAP32[$0 + 92 >> 2] = 0;
 HEAP32[$2 + 20 >> 2] = 0;
 HEAP8[$2 + 24 | 0] = 1;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 + 16 >> 2] = 0;
 label$3 : {
  if (($3 | 0) >= 2) {
   while (1) {
    $1 = HEAP32[$0 + 168 >> 2] + Math_imul($5, 20) | 0;
    $4 = $1;
    $7 = $1;
    $6 = HEAP32[$1 + 12 >> 2];
    if ($6) {
     if (HEAPU8[$1 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($6);
     }
     HEAP32[$4 + 12 >> 2] = 0;
    }
    HEAP8[$1 + 16 | 0] = 1;
    HEAP32[$4 + 12 >> 2] = 0;
    HEAP32[$7 + 4 >> 2] = 0;
    HEAP32[$1 + 8 >> 2] = 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) != ($3 | 0)) {
     continue;
    }
    break label$3;
   }
  }
  if (($3 | 0) == 1) {
   break label$3;
  }
  btAlignedObjectArray_btAlignedObjectArray_btDbvtNode_20const___20___reserve_28int_29($0 + 156 | 0, 1);
  while (1) {
   $1 = $3;
   btAlignedObjectArray_btDbvtNode_20const____btAlignedObjectArray_28btAlignedObjectArray_btDbvtNode_20const___20const__29(HEAP32[$0 + 168 >> 2] + Math_imul($1, 20) | 0, $2 + 8 | 0);
   $3 = $1 + 1 | 0;
   if ($1) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 160 >> 2] = 1;
 $1 = HEAP32[$2 + 20 >> 2];
 if ($1) {
  if (HEAPU8[$2 + 24 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$2 + 20 >> 2] = 0;
 }
 $1 = $2 + 32 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function btGjkEpaPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0;
 $9 = global$0 - 80 | 0;
 $0 = $9;
 if ($9 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 $11 = HEAPF32[$4 + 52 >> 2];
 $12 = HEAPF32[$5 + 52 >> 2];
 $13 = HEAPF32[$4 + 56 >> 2];
 $14 = HEAPF32[$5 + 56 >> 2];
 $15 = HEAPF32[$4 + 48 >> 2];
 $16 = HEAPF32[$5 + 48 >> 2];
 HEAP32[$9 + 76 >> 2] = 0;
 HEAPF32[$9 + 64 >> 2] = $16 - $15;
 HEAPF32[$9 + 72 >> 2] = $14 - $13;
 HEAPF32[$9 + 68 >> 2] = $12 - $11;
 $10 = 1;
 label$2 : {
  if (!btGjkEpaSolver2__Penetration_28btConvexShape_20const__2c_20btTransform_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btGjkEpaSolver2__sResults__2c_20bool_29($2, $4, $3, $5, $9 - -64 | 0, $9 + 8 | 0, 1)) {
   $10 = 0;
   if (!btGjkEpaSolver2__Distance_28btConvexShape_20const__2c_20btTransform_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btGjkEpaSolver2__sResults__29($2, $4, $3, $5, $9 - -64 | 0, $9 + 8 | 0)) {
    break label$2;
   }
  }
  $0 = HEAP32[$9 + 16 >> 2];
  $1 = HEAP32[$9 + 12 >> 2];
  $2 = $1;
  $1 = $7;
  HEAP32[$1 >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $0;
  $1 = HEAP32[$9 + 24 >> 2];
  $0 = HEAP32[$9 + 20 >> 2];
  $2 = $0;
  $0 = $7;
  HEAP32[$0 + 8 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $1;
  $0 = HEAP32[$9 + 40 >> 2];
  $1 = HEAP32[$9 + 36 >> 2];
  $2 = $1;
  $1 = $8;
  HEAP32[$1 + 8 >> 2] = $2;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$9 + 32 >> 2];
  $0 = HEAP32[$9 + 28 >> 2];
  $2 = $0;
  $0 = $8;
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $1;
  $0 = HEAP32[$9 + 56 >> 2];
  $1 = HEAP32[$9 + 52 >> 2];
  $2 = $1;
  $1 = $6;
  HEAP32[$1 + 8 >> 2] = $2;
  HEAP32[$1 + 12 >> 2] = $0;
  $1 = HEAP32[$9 + 48 >> 2];
  $0 = HEAP32[$9 + 44 >> 2];
  $2 = $0;
  $0 = $6;
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $1;
  $17 = $10;
 }
 $0 = $9 + 80 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $17 | 0;
}
function operator__28btQuaternion_20const__2c_20btVector3_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = global$0 - 32 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $5 = $3 + 20 | 0;
 $6 = $3 + 16 | 0;
 $7 = $3 + 12 | 0;
 $4 = $3 + 8 | 0;
 HEAP32[$3 + 28 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $2;
 HEAPF32[$3 + 20 >> 2] = Math_fround(Math_fround(HEAPF32[btQuadWord__w_28_29_20const(HEAP32[$3 + 28 >> 2]) >> 2] * HEAPF32[btVector3__x_28_29_20const(HEAP32[$3 + 24 >> 2]) >> 2]) + Math_fround(HEAPF32[btQuadWord__y_28_29_20const(HEAP32[$3 + 28 >> 2]) >> 2] * HEAPF32[btVector3__z_28_29_20const(HEAP32[$3 + 24 >> 2]) >> 2])) - Math_fround(HEAPF32[btQuadWord__z_28_29_20const(HEAP32[$3 + 28 >> 2]) >> 2] * HEAPF32[btVector3__y_28_29_20const(HEAP32[$3 + 24 >> 2]) >> 2]);
 HEAPF32[$3 + 16 >> 2] = Math_fround(Math_fround(HEAPF32[btQuadWord__w_28_29_20const(HEAP32[$3 + 28 >> 2]) >> 2] * HEAPF32[btVector3__y_28_29_20const(HEAP32[$3 + 24 >> 2]) >> 2]) + Math_fround(HEAPF32[btQuadWord__z_28_29_20const(HEAP32[$3 + 28 >> 2]) >> 2] * HEAPF32[btVector3__x_28_29_20const(HEAP32[$3 + 24 >> 2]) >> 2])) - Math_fround(HEAPF32[btQuadWord__x_28_29_20const(HEAP32[$3 + 28 >> 2]) >> 2] * HEAPF32[btVector3__z_28_29_20const(HEAP32[$3 + 24 >> 2]) >> 2]);
 HEAPF32[$3 + 12 >> 2] = Math_fround(Math_fround(HEAPF32[btQuadWord__w_28_29_20const(HEAP32[$3 + 28 >> 2]) >> 2] * HEAPF32[btVector3__z_28_29_20const(HEAP32[$3 + 24 >> 2]) >> 2]) + Math_fround(HEAPF32[btQuadWord__x_28_29_20const(HEAP32[$3 + 28 >> 2]) >> 2] * HEAPF32[btVector3__y_28_29_20const(HEAP32[$3 + 24 >> 2]) >> 2])) - Math_fround(HEAPF32[btQuadWord__y_28_29_20const(HEAP32[$3 + 28 >> 2]) >> 2] * HEAPF32[btVector3__x_28_29_20const(HEAP32[$3 + 24 >> 2]) >> 2]);
 HEAPF32[$3 + 8 >> 2] = Math_fround(Math_fround(Math_fround(-HEAPF32[btQuadWord__x_28_29_20const(HEAP32[$3 + 28 >> 2]) >> 2]) * HEAPF32[btVector3__x_28_29_20const(HEAP32[$3 + 24 >> 2]) >> 2]) - Math_fround(HEAPF32[btQuadWord__y_28_29_20const(HEAP32[$3 + 28 >> 2]) >> 2] * HEAPF32[btVector3__y_28_29_20const(HEAP32[$3 + 24 >> 2]) >> 2])) - Math_fround(HEAPF32[btQuadWord__z_28_29_20const(HEAP32[$3 + 28 >> 2]) >> 2] * HEAPF32[btVector3__z_28_29_20const(HEAP32[$3 + 24 >> 2]) >> 2]);
 btQuaternion__btQuaternion_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($0, $5, $6, $7, $4);
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function TestInternalObjects_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btConvexPolyhedron_20const__2c_20btConvexPolyhedron_20const__2c_20float_29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0);
 $7 = HEAPF32[$3 >> 2];
 $10 = HEAPF32[$3 + 4 >> 2];
 $11 = HEAPF32[$3 + 8 >> 2];
 $13 = Math_fround(Math_fround(Math_fround(HEAPF32[$2 >> 2] * $7) + Math_fround(HEAPF32[$2 + 4 >> 2] * $10)) + Math_fround(HEAPF32[$2 + 8 >> 2] * $11));
 $8 = Math_fround(Math_fround(Math_fround($7 * HEAPF32[$0 >> 2]) + Math_fround($10 * HEAPF32[$0 + 16 >> 2])) + Math_fround($11 * HEAPF32[$0 + 32 >> 2]));
 $9 = HEAPF32[$4 + 80 >> 2];
 $12 = Math_fround($8 * ($8 < Math_fround(0) ? Math_fround(-$9) : $9));
 $8 = Math_fround(Math_fround(Math_fround($7 * HEAPF32[$0 + 4 >> 2]) + Math_fround($10 * HEAPF32[$0 + 20 >> 2])) + Math_fround($11 * HEAPF32[$0 + 36 >> 2]));
 $9 = HEAPF32[$4 + 84 >> 2];
 $12 = Math_fround($12 + Math_fround($8 * ($8 < Math_fround(0) ? Math_fround(-$9) : $9)));
 $8 = Math_fround(Math_fround(Math_fround($7 * HEAPF32[$0 + 8 >> 2]) + Math_fround($10 * HEAPF32[$0 + 24 >> 2])) + Math_fround($11 * HEAPF32[$0 + 40 >> 2]));
 $9 = HEAPF32[$4 + 88 >> 2];
 $8 = Math_fround($12 + Math_fround($8 * ($8 < Math_fround(0) ? Math_fround(-$9) : $9)));
 $9 = HEAPF32[$4 + 96 >> 2];
 $12 = $8 > $9 ? $8 : $9;
 $8 = Math_fround(Math_fround(Math_fround($7 * HEAPF32[$1 >> 2]) + Math_fround($10 * HEAPF32[$1 + 16 >> 2])) + Math_fround($11 * HEAPF32[$1 + 32 >> 2]));
 $9 = HEAPF32[$5 + 80 >> 2];
 $14 = Math_fround($8 * ($8 < Math_fround(0) ? Math_fround(-$9) : $9));
 $8 = Math_fround(Math_fround(Math_fround($7 * HEAPF32[$1 + 4 >> 2]) + Math_fround($10 * HEAPF32[$1 + 20 >> 2])) + Math_fround($11 * HEAPF32[$1 + 36 >> 2]));
 $9 = HEAPF32[$5 + 84 >> 2];
 $7 = Math_fround(Math_fround(Math_fround($7 * HEAPF32[$1 + 8 >> 2]) + Math_fround($10 * HEAPF32[$1 + 24 >> 2])) + Math_fround($11 * HEAPF32[$1 + 40 >> 2]));
 $10 = HEAPF32[$5 + 88 >> 2];
 $7 = Math_fround(Math_fround($14 + Math_fround($8 * ($8 < Math_fround(0) ? Math_fround(-$9) : $9))) + Math_fround($7 * ($7 < Math_fround(0) ? Math_fround(-$10) : $10)));
 $10 = HEAPF32[$5 + 96 >> 2];
 $7 = Math_fround($12 + ($7 > $10 ? $7 : $10));
 $10 = Math_fround($13 + $7);
 $7 = Math_fround($7 - $13);
 return ($10 < $7 ? $10 : $7) > $6 ^ 1;
}
function btTriangleMeshShape__localGetSupportingVertex_28btVector3_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
 $3 = global$0 - 160 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 152 >> 2] = 0;
 HEAP32[$3 + 144 >> 2] = 0;
 HEAP32[$3 + 148 >> 2] = 0;
 HEAP32[$3 + 136 >> 2] = 0;
 HEAP32[$3 + 140 >> 2] = 0;
 HEAP32[$3 + 44 >> 2] = 0;
 HEAP32[$3 + 48 >> 2] = 0;
 HEAP32[$3 + 56 >> 2] = 0;
 HEAP32[$3 + 60 >> 2] = 0;
 $4 = $3 - -64 | 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 HEAP32[$3 + 76 >> 2] = 0;
 HEAP32[$3 + 80 >> 2] = 0;
 HEAP32[$3 + 72 >> 2] = 1065353216;
 HEAP32[$3 + 84 >> 2] = 0;
 HEAP32[$3 + 88 >> 2] = 0;
 HEAP32[$3 + 92 >> 2] = 1065353216;
 HEAP32[$3 + 96 >> 2] = 0;
 $4 = HEAP32[$3 + 144 >> 2];
 $5 = HEAP32[$3 + 140 >> 2];
 HEAP32[$3 + 100 >> 2] = $5;
 HEAP32[$3 + 104 >> 2] = $4;
 $5 = HEAP32[$3 + 152 >> 2];
 $4 = HEAP32[$3 + 148 >> 2];
 HEAP32[$3 + 108 >> 2] = $4;
 HEAP32[$3 + 112 >> 2] = $5;
 HEAP32[$3 + 36 >> 2] = 0;
 HEAP32[$3 + 40 >> 2] = 0;
 HEAP32[$3 + 32 >> 2] = 12420;
 HEAP32[$3 + 52 >> 2] = 1065353216;
 HEAP32[$3 + 116 >> 2] = -581039253;
 $6 = HEAPF32[$2 + 4 >> 2];
 $7 = HEAPF32[$2 >> 2];
 $8 = HEAPF32[$2 + 8 >> 2];
 HEAP32[$3 + 132 >> 2] = 0;
 $9 = Math_fround($8 * Math_fround(0));
 HEAPF32[$3 + 124 >> 2] = Math_fround($6 + Math_fround($7 * HEAPF32[$3 + 56 >> 2])) + $9;
 $6 = Math_fround($6 * Math_fround(0));
 HEAPF32[$3 + 128 >> 2] = $8 + Math_fround(Math_fround($7 * HEAPF32[$3 + 60 >> 2]) + $6);
 HEAPF32[$3 + 120 >> 2] = Math_fround($7 + $6) + $9;
 HEAP32[$3 + 24 >> 2] = 1566444395;
 HEAP32[$3 + 28 >> 2] = 0;
 HEAP32[$3 + 16 >> 2] = 1566444395;
 HEAP32[$3 + 20 >> 2] = 1566444395;
 HEAP32[$3 + 8 >> 2] = -581039253;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 >> 2] = -581039253;
 HEAP32[$3 + 4 >> 2] = -581039253;
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 64 >> 2]]($1, $3 + 32 | 0, $3, $3 + 16 | 0);
 $4 = HEAP32[$3 + 48 >> 2];
 $5 = HEAP32[$3 + 44 >> 2];
 $1 = $5;
 $5 = $0;
 HEAP32[$5 + 8 >> 2] = $1;
 HEAP32[$5 + 12 >> 2] = $4;
 $5 = HEAP32[$3 + 40 >> 2];
 $4 = HEAP32[$3 + 36 >> 2];
 $1 = $4;
 $4 = $0;
 HEAP32[$4 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $5;
 btTriangleCallback___btTriangleCallback_28_29($3 + 32 | 0);
 $0 = $3 + 160 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexHullInternal__getOrientation_28btConvexHullInternal__Edge_20const__2c_20btConvexHullInternal__Edge_20const__2c_20btConvexHullInternal__Point32_20const__2c_20btConvexHullInternal__Point32_20const__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $7 = HEAP32[$0 + 4 >> 2];
 label$1 : {
  if (HEAP32[$0 >> 2] == ($1 | 0)) {
   $8 = 2;
   if (($1 | 0) != ($7 | 0)) {
    break label$1;
   }
   $7 = HEAP32[$1 + 12 >> 2];
   $1 = HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2];
   $8 = HEAP32[$1 + 96 >> 2];
   $12 = HEAP32[$7 + 96 >> 2] - $8 | 0;
   $0 = HEAP32[$0 + 12 >> 2];
   $9 = HEAP32[$1 + 92 >> 2];
   $13 = HEAP32[$0 + 92 >> 2] - $9 | 0;
   $8 = HEAP32[$0 + 96 >> 2] - $8 | 0;
   $9 = HEAP32[$7 + 92 >> 2] - $9 | 0;
   $4 = Math_imul($12, $13) - Math_imul($8, $9) | 0;
   $5 = $4 >> 31;
   $10 = $4;
   $6 = $5;
   $14 = HEAP32[$2 + 8 >> 2];
   $15 = HEAP32[$3 + 4 >> 2];
   $16 = HEAP32[$2 + 4 >> 2];
   $17 = HEAP32[$3 + 8 >> 2];
   $4 = Math_imul($14, $15) - Math_imul($16, $17) | 0;
   $5 = $4 >> 31;
   $11 = $5;
   $5 = $6;
   $6 = $4;
   $4 = $11;
   $4 = __wasm_i64_mul($10, $5, $6, $4);
   $6 = $4;
   $5 = i64toi32_i32$HIGH_BITS;
   $11 = $5;
   $1 = HEAP32[$1 + 88 >> 2];
   $0 = HEAP32[$0 + 88 >> 2] - $1 | 0;
   $1 = HEAP32[$7 + 88 >> 2] - $1 | 0;
   $4 = Math_imul($9, $0) - Math_imul($13, $1) | 0;
   $5 = $4 >> 31;
   $9 = $4;
   $10 = $5;
   $7 = HEAP32[$3 >> 2];
   $2 = HEAP32[$2 >> 2];
   $4 = Math_imul($16, $7) - Math_imul($15, $2) | 0;
   $5 = $4 >> 31;
   $3 = $5;
   $5 = $10;
   $10 = $4;
   $4 = $3;
   $4 = __wasm_i64_mul($9, $5, $10, $4);
   $10 = $4;
   $5 = i64toi32_i32$HIGH_BITS;
   $4 = $5;
   $5 = $11;
   $4 = $5 + $4 | 0;
   $3 = $6;
   $6 = $10;
   $3 = $3 + $6 | 0;
   if ($3 >>> 0 < $6 >>> 0) {
    $4 = $4 + 1 | 0;
   }
   $5 = $3;
   $6 = $4;
   $3 = Math_imul($1, $8) - Math_imul($0, $12) | 0;
   $4 = $3 >> 31;
   $11 = $3;
   $0 = $4;
   $3 = Math_imul($2, $17) - Math_imul($7, $14) | 0;
   $4 = $3 >> 31;
   $1 = $4;
   $4 = $0;
   $0 = $3;
   $3 = $1;
   $3 = __wasm_i64_mul($11, $4, $0, $3);
   $0 = $3;
   $4 = i64toi32_i32$HIGH_BITS;
   $3 = $4;
   $4 = $6;
   $3 = $3 + $4 | 0;
   $6 = $0;
   $4 = $5 + $6 | 0;
   if ($4 >>> 0 < $6 >>> 0) {
    $3 = $3 + 1 | 0;
   }
   return (($3 | 0) > 0 ? 1 : ($3 | 0) >= 0 ? $4 >>> 0 <= 0 ? 0 : 1 : 0) ? 2 : 1;
  }
  $8 = ($1 | 0) == ($7 | 0);
 }
 return $8;
}
function btDefaultCollisionConfiguration___btDefaultCollisionConfiguration_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 5104;
 if (HEAPU8[$0 + 20 | 0]) {
  btAlignedFreeInternal_28void__29(HEAP32[HEAP32[$0 + 16 >> 2] + 16 >> 2]);
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 16 >> 2]);
 }
 if (HEAPU8[$0 + 12 | 0]) {
  btAlignedFreeInternal_28void__29(HEAP32[HEAP32[$0 + 8 >> 2] + 16 >> 2]);
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 8 >> 2]);
 }
 $1 = HEAP32[$0 + 28 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
 btAlignedFreeInternal_28void__29(HEAP32[$0 + 28 >> 2]);
 $1 = HEAP32[$0 + 32 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
 btAlignedFreeInternal_28void__29(HEAP32[$0 + 32 >> 2]);
 $1 = HEAP32[$0 + 36 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
 btAlignedFreeInternal_28void__29(HEAP32[$0 + 36 >> 2]);
 $1 = HEAP32[$0 + 40 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
 btAlignedFreeInternal_28void__29(HEAP32[$0 + 40 >> 2]);
 $1 = HEAP32[$0 + 44 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
 btAlignedFreeInternal_28void__29(HEAP32[$0 + 44 >> 2]);
 $1 = HEAP32[$0 + 48 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
 btAlignedFreeInternal_28void__29(HEAP32[$0 + 48 >> 2]);
 $1 = HEAP32[$0 + 52 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
 btAlignedFreeInternal_28void__29(HEAP32[$0 + 52 >> 2]);
 $1 = HEAP32[$0 + 56 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
 btAlignedFreeInternal_28void__29(HEAP32[$0 + 56 >> 2]);
 $1 = HEAP32[$0 + 72 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
 btAlignedFreeInternal_28void__29(HEAP32[$0 + 72 >> 2]);
 $1 = HEAP32[$0 + 76 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
 btAlignedFreeInternal_28void__29(HEAP32[$0 + 76 >> 2]);
 $1 = HEAP32[$0 + 68 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
 btAlignedFreeInternal_28void__29(HEAP32[$0 + 68 >> 2]);
 $1 = HEAP32[$0 + 84 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
 btAlignedFreeInternal_28void__29(HEAP32[$0 + 84 >> 2]);
 $1 = HEAP32[$0 + 80 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
 btAlignedFreeInternal_28void__29(HEAP32[$0 + 80 >> 2]);
 $1 = HEAP32[$0 + 24 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
 btAlignedFreeInternal_28void__29(HEAP32[$0 + 24 >> 2]);
 return $0 | 0;
}
function btConvexShape__localGetSupportVertexNonVirtual_28btVector3_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0);
 $3 = global$0 - 32 | 0;
 $7 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 $7 = HEAP32[$2 + 12 >> 2];
 $9 = HEAP32[$2 + 8 >> 2];
 HEAP32[$3 + 24 >> 2] = $9;
 HEAP32[$3 + 28 >> 2] = $7;
 $9 = HEAP32[$2 + 4 >> 2];
 $7 = HEAP32[$2 >> 2];
 HEAP32[$3 + 16 >> 2] = $7;
 HEAP32[$3 + 20 >> 2] = $9;
 $4 = HEAPF32[$3 + 16 >> 2];
 $5 = HEAPF32[$3 + 20 >> 2];
 $6 = HEAPF32[$3 + 24 >> 2];
 if (!!(Math_fround(Math_fround(Math_fround($4 * $4) + Math_fround($5 * $5)) + Math_fround($6 * $6)) < Math_fround(1.4210854715202004e-14))) {
  HEAP32[$3 + 24 >> 2] = -1082130432;
  HEAP32[$3 + 28 >> 2] = 0;
  HEAP32[$3 + 16 >> 2] = -1082130432;
  HEAP32[$3 + 20 >> 2] = -1082130432;
  $6 = Math_fround(-1);
  $5 = Math_fround(-1);
  $4 = Math_fround(-1);
 }
 $8 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($4 * $4) + Math_fround($5 * $5)) + Math_fround($6 * $6)))));
 HEAPF32[$3 + 24 >> 2] = $6 * $8;
 HEAPF32[$3 + 20 >> 2] = $5 * $8;
 HEAPF32[$3 + 16 >> 2] = $4 * $8;
 btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($3, $1, $3 + 16 | 0);
 label$3 : {
  label$4 : {
   $2 = HEAP32[$1 + 4 >> 2];
   if ($2 >>> 0 > 13) {
    break label$4;
   }
   label$5 : {
    switch ($2 - 2 | 0) {
    case 6:
     $4 = Math_fround(HEAPF32[$1 + 32 >> 2] * HEAPF32[$1 + 16 >> 2]);
     break label$3;
    case 0:
    case 1:
    case 4:
    case 5:
    case 7:
    case 10:
     break label$4;
    default:
     break label$5;
    }
   }
   $4 = HEAPF32[$1 + 48 >> 2];
   break label$3;
  }
  $4 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1));
 }
 $5 = HEAPF32[$3 >> 2];
 $6 = HEAPF32[$3 + 16 >> 2];
 $8 = HEAPF32[$3 + 4 >> 2];
 $10 = HEAPF32[$3 + 20 >> 2];
 $11 = HEAPF32[$3 + 8 >> 2];
 $12 = HEAPF32[$3 + 24 >> 2];
 HEAP32[$0 + 12 >> 2] = 0;
 HEAPF32[$0 + 8 >> 2] = $11 + Math_fround($4 * $12);
 HEAPF32[$0 + 4 >> 2] = $8 + Math_fround($4 * $10);
 HEAPF32[$0 >> 2] = $5 + Math_fround($4 * $6);
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function gjkepa2_impl__MinkowskiDiff__Support1_28btVector3_20const__29_20const($0, $1, $2) {
 var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0);
 $3 = global$0 - 32 | 0;
 $7 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 $18 = HEAP32[$1 + 124 >> 2];
 $7 = HEAP32[$1 + 4 >> 2] + ($18 >> 1) | 0;
 $8 = HEAP32[$1 + 120 >> 2];
 $8 = $18 & 1 ? HEAP32[HEAP32[$7 >> 2] + $8 >> 2] : $8;
 $9 = HEAPF32[$1 + 16 >> 2];
 $10 = HEAPF32[$1 + 12 >> 2];
 $11 = HEAPF32[$1 + 32 >> 2];
 $12 = HEAPF32[$1 + 24 >> 2];
 $13 = HEAPF32[$1 + 28 >> 2];
 $14 = HEAPF32[$1 + 48 >> 2];
 $15 = HEAPF32[$1 + 40 >> 2];
 $16 = HEAPF32[$1 + 44 >> 2];
 $17 = HEAPF32[$1 + 8 >> 2];
 $4 = HEAPF32[$2 + 8 >> 2];
 $5 = HEAPF32[$2 >> 2];
 $6 = HEAPF32[$2 + 4 >> 2];
 HEAP32[$3 + 12 >> 2] = 0;
 HEAPF32[$3 + 8 >> 2] = Math_fround(Math_fround($5 * $15) + Math_fround($6 * $16)) + Math_fround($4 * $14);
 HEAPF32[$3 + 4 >> 2] = Math_fround(Math_fround($5 * $12) + Math_fround($6 * $13)) + Math_fround($4 * $11);
 HEAPF32[$3 >> 2] = Math_fround(Math_fround($17 * $5) + Math_fround($10 * $6)) + Math_fround($9 * $4);
 FUNCTION_TABLE[$8]($3 + 16 | 0, $7, $3);
 $9 = HEAPF32[$1 + 104 >> 2];
 $10 = HEAPF32[$1 - -64 >> 2];
 $11 = HEAPF32[$1 + 60 >> 2];
 $12 = HEAPF32[$1 + 108 >> 2];
 $13 = HEAPF32[$1 + 80 >> 2];
 $14 = HEAPF32[$1 + 72 >> 2];
 $15 = HEAPF32[$1 + 76 >> 2];
 $16 = HEAPF32[$1 + 112 >> 2];
 $17 = HEAPF32[$1 + 96 >> 2];
 $19 = HEAPF32[$1 + 88 >> 2];
 $20 = HEAPF32[$1 + 92 >> 2];
 $21 = HEAPF32[$1 + 56 >> 2];
 $4 = HEAPF32[$3 + 24 >> 2];
 $5 = HEAPF32[$3 + 16 >> 2];
 $6 = HEAPF32[$3 + 20 >> 2];
 HEAP32[$0 + 12 >> 2] = 0;
 HEAPF32[$0 + 8 >> 2] = $16 + Math_fround(Math_fround(Math_fround($5 * $19) + Math_fround($6 * $20)) + Math_fround($4 * $17));
 HEAPF32[$0 + 4 >> 2] = $12 + Math_fround(Math_fround(Math_fround($5 * $14) + Math_fround($6 * $15)) + Math_fround($4 * $13));
 HEAPF32[$0 >> 2] = $9 + Math_fround(Math_fround(Math_fround($5 * $21) + Math_fround($6 * $11)) + Math_fround($4 * $10));
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHashedSimplePairCache__internalAddPair_28int_2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $3 = $2 << 16 | $1;
 $3 = $3 + ($3 << 15 ^ -1) | 0;
 $3 = Math_imul($3 ^ $3 >>> 10, 9);
 $3 = $3 ^ $3 >>> 6;
 $3 = $3 + ($3 << 11 ^ -1) | 0;
 $11 = $3 ^ $3 >>> 16;
 $5 = HEAP32[$0 + 12 >> 2];
 $10 = $11 & $5 + -1;
 $3 = HEAP32[HEAP32[$0 + 36 >> 2] + ($10 << 2) >> 2];
 label$1 : {
  if (($3 | 0) != -1) {
   $8 = HEAP32[$0 + 16 >> 2];
   while (1) {
    $4 = Math_imul($3, 12) + $8 | 0;
    if (HEAP32[$4 + 4 >> 2] == ($2 | 0) ? HEAP32[$4 >> 2] == ($1 | 0) : 0) {
     break label$1;
    }
    $3 = HEAP32[HEAP32[$0 + 56 >> 2] + ($3 << 2) >> 2];
    if (($3 | 0) != -1) {
     continue;
    }
    break;
   }
  }
  label$5 : {
   label$6 : {
    $6 = HEAP32[$0 + 8 >> 2];
    $3 = $6;
    if (($5 | 0) == ($3 | 0)) {
     $9 = $5 ? $5 << 1 : 1;
     $12 = ($5 | 0) >= ($9 | 0);
     if (!$12) {
      break label$6;
     }
     $3 = $5;
    }
    HEAP32[$0 + 8 >> 2] = $3 + 1;
    $7 = HEAP32[$0 + 16 >> 2];
    $4 = $7 + Math_imul($6, 12) | 0;
    break label$5;
   }
   if ($9) {
    $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($9, 12), 16);
    $5 = HEAP32[$0 + 8 >> 2];
   }
   if (($5 | 0) >= 1) {
    $3 = 0;
    while (1) {
     $4 = Math_imul($3, 12);
     $8 = $7 + $4 | 0;
     $4 = HEAP32[$0 + 16 >> 2] + $4 | 0;
     $13 = HEAP32[$4 + 4 >> 2];
     HEAP32[$8 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$8 + 4 >> 2] = $13;
     HEAP32[$8 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
     $3 = $3 + 1 | 0;
     if (($5 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
   }
   $3 = HEAP32[$0 + 16 >> 2];
   if ($3) {
    if (HEAPU8[$0 + 20 | 0]) {
     btAlignedFreeInternal_28void__29($3);
    }
    HEAP32[$0 + 16 >> 2] = 0;
   }
   HEAP32[$0 + 16 >> 2] = $7;
   HEAP32[$0 + 12 >> 2] = $9;
   HEAP8[$0 + 20 | 0] = 1;
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   $4 = Math_imul($6, 12) + $7 | 0;
   if ($12) {
    break label$5;
   }
   btHashedSimplePairCache__growTables_28_29($0);
   $10 = HEAP32[$0 + 12 >> 2] + -1 & $11;
  }
  HEAP32[$4 >> 2] = $1;
  $3 = Math_imul($6, 12) + $7 | 0;
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = $2;
  $3 = HEAP32[$0 + 36 >> 2] + ($10 << 2) | 0;
  HEAP32[HEAP32[$0 + 56 >> 2] + ($6 << 2) >> 2] = HEAP32[$3 >> 2];
  HEAP32[$3 >> 2] = $6;
 }
 return $4;
}
function operator__28btMatrix3x3_20const__2c_20btMatrix3x3_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $3 = global$0 - 48 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $5 = $3 + 32 | 0;
 $6 = $3 + 28 | 0;
 $7 = $3 + 24 | 0;
 $8 = $3 + 20 | 0;
 $9 = $3 + 16 | 0;
 $10 = $3 + 12 | 0;
 $11 = $3 + 8 | 0;
 $4 = $3 + 4 | 0;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 HEAPF32[$3 + 32 >> 2] = btMatrix3x3__tdotx_28btVector3_20const__29_20const(HEAP32[$3 + 36 >> 2], btMatrix3x3__operator_5b_5d_28int_29_20const(HEAP32[$3 + 40 >> 2], 0));
 HEAPF32[$3 + 28 >> 2] = btMatrix3x3__tdoty_28btVector3_20const__29_20const(HEAP32[$3 + 36 >> 2], btMatrix3x3__operator_5b_5d_28int_29_20const(HEAP32[$3 + 40 >> 2], 0));
 HEAPF32[$3 + 24 >> 2] = btMatrix3x3__tdotz_28btVector3_20const__29_20const(HEAP32[$3 + 36 >> 2], btMatrix3x3__operator_5b_5d_28int_29_20const(HEAP32[$3 + 40 >> 2], 0));
 HEAPF32[$3 + 20 >> 2] = btMatrix3x3__tdotx_28btVector3_20const__29_20const(HEAP32[$3 + 36 >> 2], btMatrix3x3__operator_5b_5d_28int_29_20const(HEAP32[$3 + 40 >> 2], 1));
 HEAPF32[$3 + 16 >> 2] = btMatrix3x3__tdoty_28btVector3_20const__29_20const(HEAP32[$3 + 36 >> 2], btMatrix3x3__operator_5b_5d_28int_29_20const(HEAP32[$3 + 40 >> 2], 1));
 HEAPF32[$3 + 12 >> 2] = btMatrix3x3__tdotz_28btVector3_20const__29_20const(HEAP32[$3 + 36 >> 2], btMatrix3x3__operator_5b_5d_28int_29_20const(HEAP32[$3 + 40 >> 2], 1));
 HEAPF32[$3 + 8 >> 2] = btMatrix3x3__tdotx_28btVector3_20const__29_20const(HEAP32[$3 + 36 >> 2], btMatrix3x3__operator_5b_5d_28int_29_20const(HEAP32[$3 + 40 >> 2], 2));
 HEAPF32[$3 + 4 >> 2] = btMatrix3x3__tdoty_28btVector3_20const__29_20const(HEAP32[$3 + 36 >> 2], btMatrix3x3__operator_5b_5d_28int_29_20const(HEAP32[$3 + 40 >> 2], 2));
 HEAPF32[$3 >> 2] = btMatrix3x3__tdotz_28btVector3_20const__29_20const(HEAP32[$3 + 36 >> 2], btMatrix3x3__operator_5b_5d_28int_29_20const(HEAP32[$3 + 40 >> 2], 2));
 btMatrix3x3__btMatrix3x3_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($0, $5, $6, $7, $8, $9, $10, $11, $4, $3);
 $0 = $3 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function SphereTriangleDetector__pointInTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3__29($0, $1, $2, $3) {
 var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0);
 $9 = HEAPF32[$3 + 8 >> 2];
 $5 = HEAPF32[$1 + 24 >> 2];
 $10 = HEAPF32[$1 + 32 >> 2];
 $4 = HEAPF32[$1 + 16 >> 2];
 $11 = Math_fround($10 - $4);
 $6 = HEAPF32[$2 + 4 >> 2];
 $17 = HEAPF32[$1 + 36 >> 2];
 $7 = HEAPF32[$1 + 20 >> 2];
 $12 = Math_fround($17 - $7);
 $13 = HEAPF32[$2 >> 2];
 $15 = Math_fround(Math_fround($9 - $5) * Math_fround(Math_fround($11 * $6) - Math_fround($12 * $13)));
 $18 = HEAPF32[$3 >> 2];
 $14 = HEAPF32[$2 + 8 >> 2];
 $16 = Math_fround($12 * $14);
 $12 = HEAPF32[$1 + 40 >> 2];
 $8 = Math_fround($12 - $5);
 $19 = HEAPF32[$3 + 4 >> 2];
 $15 = Math_fround($15 + Math_fround(Math_fround(Math_fround($18 - $4) * Math_fround($16 - Math_fround($8 * $6))) + Math_fround(Math_fround($19 - $7) * Math_fround(Math_fround($8 * $13) - Math_fround($11 * $14)))));
 $11 = HEAPF32[$1 + 8 >> 2];
 $5 = Math_fround($5 - $11);
 $8 = HEAPF32[$1 >> 2];
 $16 = Math_fround($4 - $8);
 $4 = HEAPF32[$1 + 4 >> 2];
 $7 = Math_fround($7 - $4);
 $5 = Math_fround(Math_fround(Math_fround($9 - $11) * Math_fround(Math_fround($16 * $6) - Math_fround($7 * $13))) + Math_fround(Math_fround(Math_fround($18 - $8) * Math_fround(Math_fround($7 * $14) - Math_fround($5 * $6))) + Math_fround(Math_fround($19 - $4) * Math_fround(Math_fround($5 * $13) - Math_fround($16 * $14)))));
 $1 = 1;
 $7 = Math_fround($9 - $12);
 $9 = Math_fround($8 - $10);
 $4 = Math_fround($4 - $17);
 $8 = Math_fround($18 - $10);
 $10 = Math_fround($11 - $12);
 $6 = Math_fround(Math_fround($7 * Math_fround(Math_fround($9 * $6) - Math_fround($4 * $13))) + Math_fround(Math_fround($8 * Math_fround(Math_fround($4 * $14) - Math_fround($10 * $6))) + Math_fround(Math_fround($19 - $17) * Math_fround(Math_fround($10 * $13) - Math_fround($9 * $14)))));
 if (!($15 > Math_fround(0) ? !($6 > Math_fround(0) ^ 1 | $5 > Math_fround(0) ^ 1) : 0)) {
  $1 = $5 <= Math_fround(0) & $15 <= Math_fround(0) & $6 <= Math_fround(0);
 }
 return $1;
}
function btQuantizedBvh__walkStacklessQuantizedTreeCacheFriendly_28btNodeOverlapCallback__2c_20unsigned_20short__2c_20unsigned_20short__29_20const($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 if (HEAP32[$0 + 152 >> 2] >= 1) {
  while (1) {
   $5 = HEAPU16[$2 >> 1];
   $4 = HEAP32[$0 + 160 >> 2] + ($10 << 5) | 0;
   label$3 : {
    if ($5 >>> 0 > HEAPU16[$4 + 6 >> 1]) {
     break label$3;
    }
    $9 = HEAPU16[$3 >> 1];
    if ($9 >>> 0 < HEAPU16[$4 >> 1]) {
     break label$3;
    }
    $7 = HEAPU16[$2 + 4 >> 1];
    if ($7 >>> 0 > HEAPU16[$4 + 10 >> 1]) {
     break label$3;
    }
    $11 = HEAPU16[$3 + 4 >> 1];
    if ($11 >>> 0 < HEAPU16[$4 + 4 >> 1]) {
     break label$3;
    }
    $12 = HEAPU16[$2 + 2 >> 1];
    if ($12 >>> 0 > HEAPU16[$4 + 8 >> 1]) {
     break label$3;
    }
    $13 = HEAPU16[$3 + 2 >> 1];
    if ($13 >>> 0 < HEAPU16[$4 + 2 >> 1]) {
     break label$3;
    }
    label$4 : {
     $6 = HEAP32[$4 + 16 >> 2];
     if (($6 | 0) < 1) {
      $6 = 0;
      break label$4;
     }
     $8 = HEAP32[$4 + 12 >> 2];
     $14 = $8 + $6 | 0;
     $4 = HEAP32[$0 + 136 >> 2] + ($8 << 4) | 0;
     $6 = 0;
     while (1) {
      $5 = ($5 & 65535) >>> 0 <= HEAPU16[$4 + 6 >> 1] & $9 >>> 0 >= HEAPU16[$4 >> 1] & ($7 & 65535) >>> 0 <= HEAPU16[$4 + 10 >> 1] & $11 >>> 0 >= HEAPU16[$4 + 4 >> 1] & $12 >>> 0 <= HEAPU16[$4 + 8 >> 1] & $13 >>> 0 >= HEAPU16[$4 + 2 >> 1];
      $7 = HEAP32[$4 + 12 >> 2];
      $9 = ($7 | 0) < 0;
      if (!($9 | !$5)) {
       FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $7 >>> 21 | 0, $7 & 2097151);
      }
      label$8 : {
       if (!(($5 ^ -1) & $9)) {
        $8 = $8 + 1 | 0;
        $4 = $4 + 16 | 0;
        break label$8;
       }
       $5 = HEAP32[$4 + 12 >> 2];
       $8 = $8 - $5 | 0;
       $4 = $4 - ($5 << 4) | 0;
      }
      $6 = $6 + 1 | 0;
      if (($8 | 0) >= ($14 | 0)) {
       break label$4;
      }
      $13 = HEAPU16[$3 + 2 >> 1];
      $12 = HEAPU16[$2 + 2 >> 1];
      $11 = HEAPU16[$3 + 4 >> 1];
      $7 = HEAPU16[$2 + 4 >> 1];
      $9 = HEAPU16[$3 >> 1];
      $5 = HEAPU16[$2 >> 1];
      continue;
     }
    }
    if (HEAP32[5681] >= ($6 | 0)) {
     break label$3;
    }
    HEAP32[5681] = $6;
   }
   $10 = $10 + 1 | 0;
   if (($10 | 0) < HEAP32[$0 + 152 >> 2]) {
    continue;
   }
   break;
  }
 }
}
function removeleaf_28btDbvt__2c_20btDbvtNode__29($0, $1) {
 var $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0);
 if (HEAP32[$0 >> 2] == ($1 | 0)) {
  HEAP32[$0 >> 2] = 0;
  return 0;
 }
 $3 = HEAP32[$1 + 32 >> 2];
 $4 = HEAP32[($3 + ((HEAP32[$3 + 40 >> 2] != ($1 | 0)) << 2) | 0) + 36 >> 2];
 $1 = HEAP32[$3 + 32 >> 2];
 label$2 : {
  label$3 : {
   if ($1) {
    HEAP32[(((HEAP32[$1 + 40 >> 2] == ($3 | 0)) << 2) + $1 | 0) + 36 >> 2] = $4;
    HEAP32[$4 + 32 >> 2] = $1;
    btAlignedFreeInternal_28void__29(HEAP32[$0 + 4 >> 2]);
    HEAP32[$0 + 4 >> 2] = $3;
    while (1) {
     $12 = HEAPF32[$1 >> 2];
     $3 = HEAP32[$1 + 36 >> 2];
     $6 = HEAPF32[$3 >> 2];
     $4 = HEAP32[$1 + 40 >> 2];
     $2 = HEAPF32[$4 >> 2];
     $8 = $6 < $2 ? $6 : $2;
     HEAPF32[$1 >> 2] = $8;
     $13 = HEAPF32[$1 + 16 >> 2];
     $6 = HEAPF32[$3 + 16 >> 2];
     $2 = HEAPF32[$4 + 16 >> 2];
     $9 = $6 > $2 ? $6 : $2;
     HEAPF32[$1 + 16 >> 2] = $9;
     $14 = HEAPF32[$1 + 4 >> 2];
     $6 = HEAPF32[$3 + 4 >> 2];
     $2 = HEAPF32[$4 + 4 >> 2];
     $10 = $6 < $2 ? $6 : $2;
     HEAPF32[$1 + 4 >> 2] = $10;
     $6 = HEAPF32[$1 + 20 >> 2];
     $2 = HEAPF32[$3 + 20 >> 2];
     $5 = HEAPF32[$4 + 20 >> 2];
     $2 = $2 > $5 ? $2 : $5;
     HEAPF32[$1 + 20 >> 2] = $2;
     $15 = HEAPF32[$1 + 8 >> 2];
     $5 = HEAPF32[$3 + 8 >> 2];
     $7 = HEAPF32[$4 + 8 >> 2];
     $11 = $5 < $7 ? $5 : $7;
     HEAPF32[$1 + 8 >> 2] = $11;
     $16 = HEAPF32[$1 + 24 >> 2];
     $5 = HEAPF32[$3 + 24 >> 2];
     $7 = HEAPF32[$4 + 24 >> 2];
     $5 = $5 > $7 ? $5 : $7;
     HEAPF32[$1 + 24 >> 2] = $5;
     label$6 : {
      if ($6 != $2 | $13 != $9 | ($12 != $8 | $14 != $10)) {
       break label$6;
      }
      if ($15 != $11) {
       break label$6;
      }
      if ($16 == $5) {
       break label$2;
      }
     }
     $1 = HEAP32[$1 + 32 >> 2];
     if ($1) {
      continue;
     }
     break;
    }
    break label$3;
   }
   HEAP32[$0 >> 2] = $4;
   HEAP32[$4 + 32 >> 2] = 0;
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 4 >> 2]);
   HEAP32[$0 + 4 >> 2] = $3;
  }
  $1 = HEAP32[$0 >> 2];
 }
 return $1;
}
function btClosestNotMeConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0);
 $5 = Math_fround(1);
 $3 = HEAP32[$1 >> 2];
 if (!(($3 | 0) == HEAP32[$0 + 84 >> 2] | HEAPU8[$3 + 204 | 0] & 4 | Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 32 >> 2] - HEAPF32[$0 + 16 >> 2]) * HEAPF32[$1 + 8 >> 2]) + Math_fround(Math_fround(HEAPF32[$0 + 36 >> 2] - HEAPF32[$0 + 20 >> 2]) * HEAPF32[$1 + 12 >> 2])) + Math_fround(Math_fround(HEAPF32[$0 + 40 >> 2] - HEAPF32[$0 + 24 >> 2]) * HEAPF32[$1 + 16 >> 2])) >= Math_fround(-HEAPF32[$0 + 88 >> 2]))) {
  $4 = HEAP32[$1 + 40 >> 2];
  HEAP32[$0 + 80 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = $4;
  label$2 : {
   if ($2) {
    $3 = $1 + 8 | 0;
    $4 = HEAP32[$3 >> 2];
    $2 = HEAP32[$3 + 4 >> 2];
    HEAP32[$0 + 48 >> 2] = $4;
    HEAP32[$0 + 52 >> 2] = $2;
    $4 = HEAP32[$3 + 12 >> 2];
    $2 = HEAP32[$3 + 8 >> 2];
    HEAP32[$0 + 56 >> 2] = $2;
    HEAP32[$0 + 60 >> 2] = $4;
    break label$2;
   }
   $8 = HEAPF32[$3 + 12 >> 2];
   $9 = HEAPF32[$3 + 8 >> 2];
   $10 = HEAPF32[$3 + 28 >> 2];
   $11 = HEAPF32[$3 + 20 >> 2];
   $12 = HEAPF32[$3 + 24 >> 2];
   $13 = HEAPF32[$3 + 44 >> 2];
   $14 = HEAPF32[$3 + 36 >> 2];
   $15 = HEAPF32[$3 + 40 >> 2];
   $16 = HEAPF32[$3 + 4 >> 2];
   $5 = HEAPF32[$1 + 16 >> 2];
   $6 = HEAPF32[$1 + 8 >> 2];
   $7 = HEAPF32[$1 + 12 >> 2];
   HEAP32[$0 + 60 >> 2] = 0;
   HEAPF32[$0 + 56 >> 2] = Math_fround(Math_fround($6 * $14) + Math_fround($7 * $15)) + Math_fround($5 * $13);
   HEAPF32[$0 + 52 >> 2] = Math_fround(Math_fround($6 * $11) + Math_fround($7 * $12)) + Math_fround($5 * $10);
   HEAPF32[$0 + 48 >> 2] = Math_fround(Math_fround($16 * $6) + Math_fround($9 * $7)) + Math_fround($8 * $5);
  }
  $2 = HEAP32[$1 + 28 >> 2];
  $4 = HEAP32[$1 + 24 >> 2];
  HEAP32[$0 + 64 >> 2] = $4;
  HEAP32[$0 + 68 >> 2] = $2;
  $4 = HEAP32[$1 + 36 >> 2];
  $2 = HEAP32[$1 + 32 >> 2];
  HEAP32[$0 + 72 >> 2] = $2;
  HEAP32[$0 + 76 >> 2] = $4;
  $5 = HEAPF32[$1 + 40 >> 2];
 }
 return Math_fround($5);
}
function btQuaternion__operator___28btQuaternion_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = global$0 - 32 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $4 = $2 + 20 | 0;
 $5 = $2 + 16 | 0;
 $6 = $2 + 12 | 0;
 $3 = $2 + 8 | 0;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $1 = HEAP32[$2 + 28 >> 2];
 HEAPF32[$2 + 20 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$1 + 12 >> 2] * HEAPF32[btQuadWord__x_28_29_20const(HEAP32[$2 + 24 >> 2]) >> 2]) + Math_fround(HEAPF32[$1 >> 2] * HEAPF32[HEAP32[$2 + 24 >> 2] + 12 >> 2])) + Math_fround(HEAPF32[$1 + 4 >> 2] * HEAPF32[btQuadWord__z_28_29_20const(HEAP32[$2 + 24 >> 2]) >> 2])) - Math_fround(HEAPF32[$1 + 8 >> 2] * HEAPF32[btQuadWord__y_28_29_20const(HEAP32[$2 + 24 >> 2]) >> 2]);
 HEAPF32[$2 + 16 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$1 + 12 >> 2] * HEAPF32[btQuadWord__y_28_29_20const(HEAP32[$2 + 24 >> 2]) >> 2]) + Math_fround(HEAPF32[$1 + 4 >> 2] * HEAPF32[HEAP32[$2 + 24 >> 2] + 12 >> 2])) + Math_fround(HEAPF32[$1 + 8 >> 2] * HEAPF32[btQuadWord__x_28_29_20const(HEAP32[$2 + 24 >> 2]) >> 2])) - Math_fround(HEAPF32[$1 >> 2] * HEAPF32[btQuadWord__z_28_29_20const(HEAP32[$2 + 24 >> 2]) >> 2]);
 HEAPF32[$2 + 12 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$1 + 12 >> 2] * HEAPF32[btQuadWord__z_28_29_20const(HEAP32[$2 + 24 >> 2]) >> 2]) + Math_fround(HEAPF32[$1 + 8 >> 2] * HEAPF32[HEAP32[$2 + 24 >> 2] + 12 >> 2])) + Math_fround(HEAPF32[$1 >> 2] * HEAPF32[btQuadWord__y_28_29_20const(HEAP32[$2 + 24 >> 2]) >> 2])) - Math_fround(HEAPF32[$1 + 4 >> 2] * HEAPF32[btQuadWord__x_28_29_20const(HEAP32[$2 + 24 >> 2]) >> 2]);
 HEAPF32[$2 + 8 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$1 + 12 >> 2] * HEAPF32[HEAP32[$2 + 24 >> 2] + 12 >> 2]) - Math_fround(HEAPF32[$1 >> 2] * HEAPF32[btQuadWord__x_28_29_20const(HEAP32[$2 + 24 >> 2]) >> 2])) - Math_fround(HEAPF32[$1 + 4 >> 2] * HEAPF32[btQuadWord__y_28_29_20const(HEAP32[$2 + 24 >> 2]) >> 2])) - Math_fround(HEAPF32[$1 + 8 >> 2] * HEAPF32[btQuadWord__z_28_29_20const(HEAP32[$2 + 24 >> 2]) >> 2]);
 btQuadWord__setValue_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($1, $4, $5, $6, $3);
 $0 = $2 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function btCollisionObject__btCollisionObject_28_29($0) {
 var $1 = 0;
 $1 = $0;
 HEAP32[$1 + 132 >> 2] = 0;
 HEAP32[$1 + 136 >> 2] = 0;
 HEAP32[$1 >> 2] = 3980;
 HEAP32[$1 + 188 >> 2] = 0;
 HEAP32[$1 + 192 >> 2] = 0;
 HEAP32[$1 + 180 >> 2] = 0;
 HEAP32[$1 + 184 >> 2] = 1566444395;
 HEAP32[$1 + 164 >> 2] = 1065353216;
 HEAP32[$1 + 168 >> 2] = 1065353216;
 HEAP32[$1 + 276 >> 2] = 0;
 HEAP32[$1 + 280 >> 2] = 0;
 HEAP32[$1 + 268 >> 2] = 1065353216;
 HEAP32[$1 + 272 >> 2] = 0;
 HEAP32[$1 + 260 >> 2] = -1;
 HEAP32[$1 + 264 >> 2] = -1;
 HEAP32[$1 + 252 >> 2] = 1;
 HEAP32[$1 + 256 >> 2] = 0;
 HEAP32[$1 + 244 >> 2] = 1036831949;
 HEAP32[$1 + 248 >> 2] = 1176256512;
 HEAP32[$1 + 236 >> 2] = 0;
 HEAP32[$1 + 240 >> 2] = 0;
 HEAP32[$1 + 228 >> 2] = 1056964608;
 HEAP32[$1 + 232 >> 2] = 0;
 HEAP32[$1 + 220 >> 2] = 1;
 HEAP32[$1 + 224 >> 2] = 0;
 HEAP32[$1 + 212 >> 2] = -1;
 HEAP32[$1 + 216 >> 2] = -1;
 HEAP32[$1 + 204 >> 2] = 1;
 HEAP32[$1 + 208 >> 2] = -1;
 HEAP32[$1 + 140 >> 2] = 0;
 HEAP32[$1 + 144 >> 2] = 0;
 HEAP32[$1 + 148 >> 2] = 0;
 HEAP32[$1 + 152 >> 2] = 0;
 HEAP32[$1 + 156 >> 2] = 0;
 HEAP32[$1 + 160 >> 2] = 0;
 HEAP32[$1 + 172 >> 2] = 1065353216;
 HEAP32[$1 + 176 >> 2] = 0;
 HEAP32[$1 + 196 >> 2] = 0;
 HEAP32[$1 + 200 >> 2] = 0;
 HEAP8[$1 + 300 | 0] = 1;
 HEAP32[$1 + 304 >> 2] = 0;
 HEAP32[$1 + 296 >> 2] = 0;
 HEAP32[$1 + 288 >> 2] = 0;
 HEAP32[$1 + 292 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 1065353216;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 0;
 HEAP32[$1 + 28 >> 2] = 0;
 HEAP32[$1 + 32 >> 2] = 0;
 HEAP32[$1 + 24 >> 2] = 1065353216;
 HEAP32[$1 + 36 >> 2] = 0;
 HEAP32[$1 + 40 >> 2] = 0;
 HEAP32[$1 + 48 >> 2] = 0;
 HEAP32[$1 + 52 >> 2] = 0;
 HEAP32[$1 + 44 >> 2] = 1065353216;
 HEAP32[$1 + 56 >> 2] = 0;
 HEAP32[$1 + 60 >> 2] = 0;
 HEAP32[$1 + 72 >> 2] = 0;
 HEAP32[$1 + 76 >> 2] = 0;
 $1 = $1 - -64 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 1065353216;
 $1 = $0;
 HEAP32[$1 + 80 >> 2] = 0;
 HEAP32[$1 + 84 >> 2] = 0;
 HEAP32[$1 + 88 >> 2] = 1065353216;
 HEAP32[$1 + 100 >> 2] = 0;
 HEAP32[$1 + 104 >> 2] = 0;
 HEAP32[$1 + 92 >> 2] = 0;
 HEAP32[$1 + 96 >> 2] = 0;
 HEAP32[$1 + 128 >> 2] = 0;
 HEAP32[$1 + 108 >> 2] = 1065353216;
 HEAP32[$1 + 120 >> 2] = 0;
 HEAP32[$1 + 124 >> 2] = 0;
 HEAP32[$1 + 112 >> 2] = 0;
 HEAP32[$1 + 116 >> 2] = 0;
 return $1;
}
function btCompoundShape__updateChildTransform_28int_2c_20btTransform_20const__2c_20bool_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $8 = global$0 + -64 | 0;
 $4 = $8;
 if ($8 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $5 = $2;
 $6 = HEAP32[$5 >> 2];
 $4 = HEAP32[$5 + 4 >> 2];
 $7 = $6;
 $9 = Math_imul($1, 80);
 $1 = $9 + HEAP32[$0 + 28 >> 2] | 0;
 $6 = $1;
 HEAP32[$6 >> 2] = $7;
 HEAP32[$6 + 4 >> 2] = $4;
 $6 = HEAP32[$5 + 12 >> 2];
 $4 = HEAP32[$5 + 8 >> 2];
 $7 = $4;
 $4 = $1;
 HEAP32[$4 + 8 >> 2] = $7;
 HEAP32[$4 + 12 >> 2] = $6;
 $4 = HEAP32[$5 + 28 >> 2];
 $6 = HEAP32[$5 + 24 >> 2];
 $7 = $6;
 $6 = $1;
 HEAP32[$6 + 24 >> 2] = $7;
 HEAP32[$6 + 28 >> 2] = $4;
 $6 = HEAP32[$5 + 20 >> 2];
 $4 = HEAP32[$5 + 16 >> 2];
 $7 = $4;
 $4 = $1;
 HEAP32[$4 + 16 >> 2] = $7;
 HEAP32[$4 + 20 >> 2] = $6;
 $4 = HEAP32[$5 + 44 >> 2];
 $6 = HEAP32[$5 + 40 >> 2];
 $7 = $6;
 $6 = $1;
 HEAP32[$6 + 40 >> 2] = $7;
 HEAP32[$6 + 44 >> 2] = $4;
 $6 = HEAP32[$5 + 36 >> 2];
 $4 = HEAP32[$5 + 32 >> 2];
 $7 = $4;
 $4 = $1;
 HEAP32[$4 + 32 >> 2] = $7;
 HEAP32[$4 + 36 >> 2] = $6;
 $4 = HEAP32[$5 + 60 >> 2];
 $6 = HEAP32[$5 + 56 >> 2];
 $7 = $6;
 $6 = $1;
 HEAP32[$6 + 56 >> 2] = $7;
 HEAP32[$6 + 60 >> 2] = $4;
 $6 = HEAP32[$5 + 52 >> 2];
 $4 = HEAP32[$5 + 48 >> 2];
 $5 = $4;
 $4 = $1;
 HEAP32[$4 + 48 >> 2] = $5;
 HEAP32[$4 + 52 >> 2] = $6;
 if (HEAP32[$0 + 68 >> 2]) {
  $1 = HEAP32[(HEAP32[$0 + 28 >> 2] + $9 | 0) + 64 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $2, $8 + 48 | 0, $8 + 32 | 0);
  $5 = $8;
  $6 = HEAP32[$5 + 56 >> 2];
  $4 = HEAP32[$5 + 60 >> 2];
  HEAP32[$5 + 8 >> 2] = $6;
  HEAP32[$5 + 12 >> 2] = $4;
  $6 = HEAP32[$5 + 44 >> 2];
  $4 = HEAP32[$5 + 40 >> 2];
  HEAP32[$5 + 24 >> 2] = $4;
  HEAP32[$5 + 28 >> 2] = $6;
  $4 = HEAP32[$5 + 36 >> 2];
  $6 = HEAP32[$5 + 32 >> 2];
  HEAP32[$5 + 16 >> 2] = $6;
  HEAP32[$5 + 20 >> 2] = $4;
  $6 = HEAP32[$5 + 52 >> 2];
  $4 = HEAP32[$5 + 48 >> 2];
  HEAP32[$5 >> 2] = $4;
  HEAP32[$5 + 4 >> 2] = $6;
  btDbvt__update_28btDbvtNode__2c_20btDbvtAabbMm__29(HEAP32[$0 + 68 >> 2], HEAP32[(HEAP32[$0 + 28 >> 2] + $9 | 0) + 76 >> 2], $5);
 }
 if ($3) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0);
 }
 $0 = $8 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHingeConstraint__setFrames_28btTransform_20const__2c_20btTransform_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $4 = $1;
 $3 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 $5 = $3;
 $3 = $0;
 HEAP32[$3 + 552 >> 2] = $5;
 HEAP32[$3 + 556 >> 2] = $1;
 $3 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$4 + 8 >> 2];
 $5 = $1;
 $1 = $0;
 HEAP32[$1 + 560 >> 2] = $5;
 HEAP32[$1 + 564 >> 2] = $3;
 $1 = HEAP32[$4 + 28 >> 2];
 $3 = HEAP32[$4 + 24 >> 2];
 $5 = $3;
 $3 = $0;
 HEAP32[$3 + 576 >> 2] = $5;
 HEAP32[$3 + 580 >> 2] = $1;
 $3 = HEAP32[$4 + 20 >> 2];
 $1 = HEAP32[$4 + 16 >> 2];
 $5 = $1;
 $1 = $0;
 HEAP32[$1 + 568 >> 2] = $5;
 HEAP32[$1 + 572 >> 2] = $3;
 $1 = HEAP32[$4 + 44 >> 2];
 $3 = HEAP32[$4 + 40 >> 2];
 $5 = $3;
 $3 = $0;
 HEAP32[$3 + 592 >> 2] = $5;
 HEAP32[$3 + 596 >> 2] = $1;
 $3 = HEAP32[$4 + 36 >> 2];
 $1 = HEAP32[$4 + 32 >> 2];
 $5 = $1;
 $1 = $0;
 HEAP32[$1 + 584 >> 2] = $5;
 HEAP32[$1 + 588 >> 2] = $3;
 $1 = HEAP32[$4 + 60 >> 2];
 $3 = HEAP32[$4 + 56 >> 2];
 $5 = $3;
 $3 = $0;
 HEAP32[$3 + 608 >> 2] = $5;
 HEAP32[$3 + 612 >> 2] = $1;
 $3 = HEAP32[$4 + 52 >> 2];
 $1 = HEAP32[$4 + 48 >> 2];
 $4 = $1;
 $1 = $0;
 HEAP32[$1 + 600 >> 2] = $4;
 HEAP32[$1 + 604 >> 2] = $3;
 $4 = $2;
 $3 = HEAP32[$4 + 8 >> 2];
 $1 = HEAP32[$4 + 12 >> 2];
 $2 = $3;
 $3 = $0;
 HEAP32[$3 + 624 >> 2] = $2;
 HEAP32[$3 + 628 >> 2] = $1;
 $3 = HEAP32[$4 + 4 >> 2];
 $1 = HEAP32[$4 >> 2];
 $2 = $1;
 $1 = $0;
 HEAP32[$1 + 616 >> 2] = $2;
 HEAP32[$1 + 620 >> 2] = $3;
 $1 = HEAP32[$4 + 20 >> 2];
 $3 = HEAP32[$4 + 16 >> 2];
 $2 = $3;
 $3 = $0;
 HEAP32[$3 + 632 >> 2] = $2;
 HEAP32[$3 + 636 >> 2] = $1;
 $3 = HEAP32[$4 + 28 >> 2];
 $1 = HEAP32[$4 + 24 >> 2];
 $2 = $1;
 $1 = $0;
 HEAP32[$1 + 640 >> 2] = $2;
 HEAP32[$1 + 644 >> 2] = $3;
 $1 = HEAP32[$4 + 36 >> 2];
 $3 = HEAP32[$4 + 32 >> 2];
 $2 = $3;
 $3 = $0;
 HEAP32[$3 + 648 >> 2] = $2;
 HEAP32[$3 + 652 >> 2] = $1;
 $3 = HEAP32[$4 + 44 >> 2];
 $1 = HEAP32[$4 + 40 >> 2];
 $2 = $1;
 $1 = $0;
 HEAP32[$1 + 656 >> 2] = $2;
 HEAP32[$1 + 660 >> 2] = $3;
 $1 = HEAP32[$4 + 60 >> 2];
 $3 = HEAP32[$4 + 56 >> 2];
 $2 = $3;
 $3 = $0;
 HEAP32[$3 + 672 >> 2] = $2;
 HEAP32[$3 + 676 >> 2] = $1;
 $3 = HEAP32[$4 + 52 >> 2];
 $1 = HEAP32[$4 + 48 >> 2];
 $2 = $1;
 $1 = $0;
 HEAP32[$1 + 664 >> 2] = $2;
 HEAP32[$1 + 668 >> 2] = $3;
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
}
function btTriangleMeshShape__recalcLocalAabb_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 48 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 44 >> 2] = 0;
 HEAP32[$1 + 36 >> 2] = 0;
 HEAP32[$1 + 40 >> 2] = 0;
 HEAP32[$1 + 32 >> 2] = 1065353216;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($1 + 16 | 0, $0, $1 + 32 | 0);
 HEAPF32[$0 + 36 >> 2] = HEAPF32[$1 + 16 >> 2] + HEAPF32[$0 + 16 >> 2];
 HEAP32[$1 + 32 >> 2] = -1082130432;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($1, $0, $1 + 32 | 0);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 24 >> 2] = $3;
 HEAP32[$1 + 28 >> 2] = $2;
 $3 = HEAP32[$1 + 4 >> 2];
 $2 = HEAP32[$1 >> 2];
 HEAP32[$1 + 16 >> 2] = $2;
 HEAP32[$1 + 20 >> 2] = $3;
 HEAPF32[$0 + 20 >> 2] = HEAPF32[$1 + 16 >> 2] - HEAPF32[$0 + 16 >> 2];
 HEAP32[$1 + 40 >> 2] = 0;
 HEAP32[$1 + 44 >> 2] = 0;
 HEAP32[$1 + 32 >> 2] = 0;
 HEAP32[$1 + 36 >> 2] = 1065353216;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($1 + 16 | 0, $0, $1 + 32 | 0);
 HEAPF32[$0 + 40 >> 2] = HEAPF32[$1 + 20 >> 2] + HEAPF32[$0 + 16 >> 2];
 HEAP32[$1 + 36 >> 2] = -1082130432;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($1, $0, $1 + 32 | 0);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 24 >> 2] = $3;
 HEAP32[$1 + 28 >> 2] = $2;
 $3 = HEAP32[$1 + 4 >> 2];
 $2 = HEAP32[$1 >> 2];
 HEAP32[$1 + 16 >> 2] = $2;
 HEAP32[$1 + 20 >> 2] = $3;
 HEAPF32[$0 + 24 >> 2] = HEAPF32[$1 + 20 >> 2] - HEAPF32[$0 + 16 >> 2];
 HEAP32[$1 + 32 >> 2] = 0;
 HEAP32[$1 + 36 >> 2] = 0;
 HEAP32[$1 + 40 >> 2] = 1065353216;
 HEAP32[$1 + 44 >> 2] = 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($1 + 16 | 0, $0, $1 + 32 | 0);
 HEAPF32[$0 + 44 >> 2] = HEAPF32[$1 + 24 >> 2] + HEAPF32[$0 + 16 >> 2];
 HEAP32[$1 + 40 >> 2] = -1082130432;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($1, $0, $1 + 32 | 0);
 $2 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 24 >> 2] = $3;
 HEAP32[$1 + 28 >> 2] = $2;
 $3 = HEAP32[$1 + 4 >> 2];
 $2 = HEAP32[$1 >> 2];
 HEAP32[$1 + 16 >> 2] = $2;
 HEAP32[$1 + 20 >> 2] = $3;
 HEAPF32[$0 + 28 >> 2] = HEAPF32[$1 + 24 >> 2] - HEAPF32[$0 + 16 >> 2];
 $0 = $1 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCylinderShape__calculateLocalInertia_28float_2c_20btVector3__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0;
 $3 = global$0 - 16 | 0;
 $8 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 $8 = HEAP32[$0 + 44 >> 2];
 $9 = HEAP32[$0 + 40 >> 2];
 HEAP32[$3 + 8 >> 2] = $9;
 HEAP32[$3 + 12 >> 2] = $8;
 $9 = HEAP32[$0 + 36 >> 2];
 $8 = HEAP32[$0 + 32 >> 2];
 HEAP32[$3 >> 2] = $8;
 HEAP32[$3 + 4 >> 2] = $9;
 $5 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $6 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 HEAPF32[$3 + 8 >> 2] = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0)) + HEAPF32[$3 + 8 >> 2];
 HEAPF32[$3 >> 2] = $5 + HEAPF32[$3 >> 2];
 HEAPF32[$3 + 4 >> 2] = $6 + HEAPF32[$3 + 4 >> 2];
 $5 = Math_fround($1 * Math_fround(.5));
 $6 = Math_fround($1 * Math_fround(.25));
 $1 = Math_fround($1 / Math_fround(12));
 label$2 : {
  label$3 : {
   $0 = HEAP32[$0 + 56 >> 2];
   if ($0 >>> 0 > 2) {
    break label$3;
   }
   label$4 : {
    switch ($0 - 1 | 0) {
    default:
     $4 = HEAPF32[$3 + 4 >> 2];
     $4 = Math_fround($4 * $4);
     $5 = Math_fround($5 * $4);
     $7 = Math_fround($6 * $4);
     $6 = HEAPF32[$3 >> 2];
     $4 = Math_fround($7 + Math_fround($1 * Math_fround($6 * Math_fround($6 * Math_fround(4)))));
     $7 = $4;
     break label$2;
    case 0:
     break label$3;
    case 1:
     break label$4;
    }
   }
   $4 = HEAPF32[$3 >> 2];
   $4 = Math_fround($4 * $4);
   $7 = Math_fround($5 * $4);
   $5 = HEAPF32[$3 + 8 >> 2];
   $5 = Math_fround(Math_fround($6 * $4) + Math_fround($1 * Math_fround($5 * Math_fround($5 * Math_fround(4)))));
   $4 = $5;
   break label$2;
  }
  $4 = HEAPF32[$3 >> 2];
  $7 = Math_fround($4 * $4);
  $4 = Math_fround($5 * $7);
  $5 = HEAPF32[$3 + 4 >> 2];
  $5 = Math_fround(Math_fround($6 * $7) + Math_fround($1 * Math_fround($5 * Math_fround($5 * Math_fround(4)))));
  $7 = $5;
 }
 HEAP32[$2 + 12 >> 2] = 0;
 HEAPF32[$2 + 8 >> 2] = $7;
 HEAPF32[$2 + 4 >> 2] = $4;
 HEAPF32[$2 >> 2] = $5;
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexTriangleMeshShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = Math_fround(0);
 $4 = global$0 - 80 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = $0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 $6 = HEAPF32[$2 >> 2];
 $7 = HEAPF32[$2 + 4 >> 2];
 $8 = HEAPF32[$2 + 8 >> 2];
 $5 = Math_fround(Math_fround(Math_fround($6 * $6) + Math_fround($7 * $7)) + Math_fround($8 * $8));
 label$2 : {
  if ($5 < Math_fround(9999999747378752e-20)) {
   $2 = 1065353216;
   break label$2;
  }
  $5 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($5)));
  $9 = (wasm2js_scratch_store_f32(Math_fround($8 * $5)), wasm2js_scratch_load_i32(0));
  $10 = (wasm2js_scratch_store_f32(Math_fround($7 * $5)), wasm2js_scratch_load_i32(0));
  $11 = HEAPF32[$2 + 12 >> 2];
  $2 = (wasm2js_scratch_store_f32(Math_fround($6 * $5)), wasm2js_scratch_load_i32(0));
 }
 $3 = $4;
 HEAP32[$3 + 52 >> 2] = 0;
 HEAP32[$3 + 56 >> 2] = 0;
 $6 = $11;
 HEAPF32[$3 + 76 >> 2] = $6;
 HEAP32[$3 + 72 >> 2] = $9;
 HEAP32[$3 + 68 >> 2] = $10;
 HEAP32[$3 + 44 >> 2] = 0;
 HEAP32[$3 + 48 >> 2] = 0;
 HEAP32[$3 + 40 >> 2] = 13832;
 HEAP32[$3 + 64 >> 2] = $2;
 HEAP32[$3 + 60 >> 2] = -581039253;
 HEAP32[$3 + 32 >> 2] = 1566444395;
 HEAP32[$3 + 36 >> 2] = 0;
 HEAP32[$3 + 24 >> 2] = 1566444395;
 HEAP32[$3 + 28 >> 2] = 1566444395;
 $2 = HEAP32[$1 + 96 >> 2];
 HEAP32[$3 + 16 >> 2] = -581039253;
 HEAP32[$3 + 20 >> 2] = 0;
 HEAP32[$3 + 8 >> 2] = -581039253;
 HEAP32[$3 + 12 >> 2] = -581039253;
 FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $3 + 40 | 0, $3 + 8 | 0, $3 + 24 | 0);
 $1 = HEAP32[$3 + 52 >> 2];
 $3 = HEAP32[$3 + 56 >> 2];
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = $3;
 $1 = HEAP32[$4 + 48 >> 2];
 $3 = HEAP32[$4 + 44 >> 2];
 $2 = $3;
 $3 = $0;
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $1;
 btInternalTriangleIndexCallback___btInternalTriangleIndexCallback_28_29($4 + 40 | 0);
 $0 = $4 + 80 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHingeConstraint__getHingeAngle_28btTransform_20const__2c_20btTransform_20const__29($0, $1, $2) {
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0);
 $3 = HEAPF32[$0 + 552 >> 2];
 $9 = HEAPF32[$1 >> 2];
 $4 = HEAPF32[$0 + 568 >> 2];
 $10 = HEAPF32[$1 + 4 >> 2];
 $5 = HEAPF32[$0 + 584 >> 2];
 $11 = HEAPF32[$1 + 8 >> 2];
 $6 = HEAPF32[$0 + 620 >> 2];
 $7 = HEAPF32[$0 + 636 >> 2];
 $8 = HEAPF32[$0 + 652 >> 2];
 $12 = Math_fround(Math_fround(Math_fround($6 * HEAPF32[$2 >> 2]) + Math_fround($7 * HEAPF32[$2 + 4 >> 2])) + Math_fround($8 * HEAPF32[$2 + 8 >> 2]));
 $13 = HEAPF32[$1 + 16 >> 2];
 $14 = HEAPF32[$1 + 20 >> 2];
 $15 = HEAPF32[$1 + 24 >> 2];
 $16 = Math_fround(Math_fround(Math_fround($6 * HEAPF32[$2 + 16 >> 2]) + Math_fround($7 * HEAPF32[$2 + 20 >> 2])) + Math_fround($8 * HEAPF32[$2 + 24 >> 2]));
 $17 = HEAPF32[$1 + 32 >> 2];
 $18 = HEAPF32[$1 + 36 >> 2];
 $19 = HEAPF32[$1 + 40 >> 2];
 $6 = Math_fround(Math_fround(Math_fround($6 * HEAPF32[$2 + 32 >> 2]) + Math_fround($7 * HEAPF32[$2 + 36 >> 2])) + Math_fround($8 * HEAPF32[$2 + 40 >> 2]));
 $7 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($3 * $9) + Math_fround($4 * $10)) + Math_fround($5 * $11)) * $12) + Math_fround(Math_fround(Math_fround(Math_fround($3 * $13) + Math_fround($4 * $14)) + Math_fround($5 * $15)) * $16)) + Math_fround(Math_fround(Math_fround(Math_fround($3 * $17) + Math_fround($4 * $18)) + Math_fround($5 * $19)) * $6));
 $3 = HEAPF32[$0 + 556 >> 2];
 $4 = HEAPF32[$0 + 572 >> 2];
 $5 = HEAPF32[$0 + 588 >> 2];
 return Math_fround(atan2f($7, Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($9 * $3) + Math_fround($10 * $4)) + Math_fround($11 * $5)) * $12) + Math_fround(Math_fround(Math_fround(Math_fround($13 * $3) + Math_fround($14 * $4)) + Math_fround($15 * $5)) * $16)) + Math_fround(Math_fround(Math_fround(Math_fround($17 * $3) + Math_fround($18 * $4)) + Math_fround($19 * $5)) * $6))) * HEAPF32[$0 + 732 >> 2]);
}
function btHingeConstraint__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 btTypedConstraint__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
 HEAP32[$1 + 52 >> 2] = HEAP32[$0 + 552 >> 2];
 HEAP32[$1 + 56 >> 2] = HEAP32[$0 + 556 >> 2];
 HEAP32[$1 + 60 >> 2] = HEAP32[$0 + 560 >> 2];
 HEAP32[$1 + 64 >> 2] = HEAP32[$0 + 564 >> 2];
 HEAP32[$1 + 68 >> 2] = HEAP32[$0 + 568 >> 2];
 HEAP32[$1 + 72 >> 2] = HEAP32[$0 + 572 >> 2];
 HEAP32[$1 + 76 >> 2] = HEAP32[$0 + 576 >> 2];
 HEAP32[$1 + 80 >> 2] = HEAP32[$0 + 580 >> 2];
 HEAP32[$1 + 84 >> 2] = HEAP32[$0 + 584 >> 2];
 HEAP32[$1 + 88 >> 2] = HEAP32[$0 + 588 >> 2];
 HEAP32[$1 + 92 >> 2] = HEAP32[$0 + 592 >> 2];
 HEAP32[$1 + 96 >> 2] = HEAP32[$0 + 596 >> 2];
 HEAP32[$1 + 100 >> 2] = HEAP32[$0 + 600 >> 2];
 HEAP32[$1 + 104 >> 2] = HEAP32[$0 + 604 >> 2];
 HEAP32[$1 + 108 >> 2] = HEAP32[$0 + 608 >> 2];
 HEAP32[$1 + 112 >> 2] = HEAP32[$0 + 612 >> 2];
 HEAP32[$1 + 116 >> 2] = HEAP32[$0 + 616 >> 2];
 HEAP32[$1 + 120 >> 2] = HEAP32[$0 + 620 >> 2];
 HEAP32[$1 + 124 >> 2] = HEAP32[$0 + 624 >> 2];
 HEAP32[$1 + 128 >> 2] = HEAP32[$0 + 628 >> 2];
 HEAP32[$1 + 132 >> 2] = HEAP32[$0 + 632 >> 2];
 HEAP32[$1 + 136 >> 2] = HEAP32[$0 + 636 >> 2];
 HEAP32[$1 + 140 >> 2] = HEAP32[$0 + 640 >> 2];
 HEAP32[$1 + 144 >> 2] = HEAP32[$0 + 644 >> 2];
 HEAP32[$1 + 148 >> 2] = HEAP32[$0 + 648 >> 2];
 HEAP32[$1 + 152 >> 2] = HEAP32[$0 + 652 >> 2];
 HEAP32[$1 + 156 >> 2] = HEAP32[$0 + 656 >> 2];
 HEAP32[$1 + 160 >> 2] = HEAP32[$0 + 660 >> 2];
 HEAP32[$1 + 164 >> 2] = HEAP32[$0 + 664 >> 2];
 HEAP32[$1 + 168 >> 2] = HEAP32[$0 + 668 >> 2];
 HEAP32[$1 + 172 >> 2] = HEAP32[$0 + 672 >> 2];
 HEAP32[$1 + 176 >> 2] = HEAP32[$0 + 676 >> 2];
 HEAP32[$1 + 184 >> 2] = HEAPU8[$0 + 736 | 0];
 HEAP32[$1 + 188 >> 2] = HEAPU8[$0 + 737 | 0];
 HEAP32[$1 + 196 >> 2] = HEAP32[$0 + 684 >> 2];
 HEAP32[$1 + 192 >> 2] = HEAP32[$0 + 680 >> 2];
 HEAP32[$1 + 180 >> 2] = HEAPU8[$0 + 740 | 0];
 $2 = $0 + 688 | 0;
 HEAPF32[$1 + 200 >> 2] = btAngularLimit__getLow_28_29_20const($2);
 HEAPF32[$1 + 204 >> 2] = btAngularLimit__getHigh_28_29_20const($2);
 HEAP32[$1 + 208 >> 2] = HEAP32[$0 + 696 >> 2];
 HEAP32[$1 + 212 >> 2] = HEAP32[$0 + 700 >> 2];
 HEAP32[$1 + 216 >> 2] = HEAP32[$0 + 704 >> 2];
 return 3728;
}
function btConvexTriangleMeshShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 $8 = global$0 - 80 | 0;
 $4 = $8;
 if ($8 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 label$2 : {
  if (($3 | 0) <= 0) {
   break label$2;
  }
  while (1) {
   HEAP32[(($9 << 4) + $2 | 0) + 12 >> 2] = -581039253;
   $9 = $9 + 1 | 0;
   if (($9 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
  if (($3 | 0) < 1) {
   break label$2;
  }
  $11 = $8 - -64 | 0;
  $9 = $8 + 40 | 4;
  while (1) {
   HEAP32[$8 + 40 >> 2] = 13832;
   $4 = $9 + 8 | 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   $4 = $9;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$8 + 60 >> 2] = -581039253;
   $12 = $10 << 4;
   $6 = $12 + $1 | 0;
   $7 = $6;
   $5 = HEAP32[$7 + 8 >> 2];
   $4 = HEAP32[$7 + 12 >> 2];
   $6 = $5;
   $5 = $11;
   HEAP32[$5 + 8 >> 2] = $6;
   HEAP32[$5 + 12 >> 2] = $4;
   $5 = HEAP32[$7 + 4 >> 2];
   $4 = HEAP32[$7 >> 2];
   $6 = $4;
   $4 = $11;
   HEAP32[$4 >> 2] = $6;
   HEAP32[$4 + 4 >> 2] = $5;
   $4 = $8;
   HEAP32[$4 + 32 >> 2] = 1566444395;
   HEAP32[$4 + 36 >> 2] = 0;
   HEAP32[$4 + 24 >> 2] = 1566444395;
   HEAP32[$4 + 28 >> 2] = 1566444395;
   $6 = HEAP32[$0 + 96 >> 2];
   HEAP32[$4 + 16 >> 2] = -581039253;
   HEAP32[$4 + 20 >> 2] = 0;
   HEAP32[$4 + 8 >> 2] = -581039253;
   HEAP32[$4 + 12 >> 2] = -581039253;
   FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6, $4 + 40 | 0, $4 + 8 | 0, $4 + 24 | 0);
   $7 = $9;
   $5 = HEAP32[$7 + 8 >> 2];
   $4 = HEAP32[$7 + 12 >> 2];
   $13 = $5;
   $6 = $2 + $12 | 0;
   $5 = $6;
   HEAP32[$5 + 8 >> 2] = $13;
   HEAP32[$5 + 12 >> 2] = $4;
   $5 = HEAP32[$7 + 4 >> 2];
   $4 = HEAP32[$7 >> 2];
   $7 = $4;
   $4 = $6;
   HEAP32[$4 >> 2] = $7;
   HEAP32[$4 + 4 >> 2] = $5;
   btInternalTriangleIndexCallback___btInternalTriangleIndexCallback_28_29($8 + 40 | 0);
   $10 = $10 + 1 | 0;
   if (($10 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = $8 + 80 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundCollisionAlgorithm__preallocateChildAlgorithms_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
 $5 = global$0 - 32 | 0;
 $7 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 $3 = HEAP32[$0 + 52 >> 2];
 $11 = HEAPU8[$0 + 68 | 0];
 $8 = $11 ? $2 : $1;
 $10 = HEAP32[$8 + 4 >> 2];
 $6 = HEAP32[$10 + 20 >> 2];
 if (($3 | 0) < ($6 | 0)) {
  if (HEAP32[$0 + 56 >> 2] < ($6 | 0)) {
   if ($6) {
    $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 2, 16);
    $7 = HEAP32[$0 + 52 >> 2];
   } else {
    $7 = $3;
   }
   if (($7 | 0) >= 1) {
    while (1) {
     $9 = $4 << 2;
     HEAP32[$9 + $12 >> 2] = HEAP32[HEAP32[$0 + 60 >> 2] + $9 >> 2];
     $4 = $4 + 1 | 0;
     if (($7 | 0) != ($4 | 0)) {
      continue;
     }
     break;
    }
   }
   $4 = HEAP32[$0 + 60 >> 2];
   if ($4) {
    if (HEAPU8[$0 - -64 | 0]) {
     btAlignedFreeInternal_28void__29($4);
    }
    HEAP32[$0 + 60 >> 2] = 0;
   }
   HEAP32[$0 + 60 >> 2] = $12;
   HEAP32[$0 + 56 >> 2] = $6;
   HEAP8[$0 - -64 | 0] = 1;
  }
  while (1) {
   HEAP32[HEAP32[$0 + 60 >> 2] + ($3 << 2) >> 2] = 0;
   $3 = $3 + 1 | 0;
   if (($6 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 52 >> 2] = $6;
 if (($6 | 0) >= 1) {
  $9 = $11 ? $1 : $2;
  $3 = 0;
  while (1) {
   label$13 : {
    if (HEAP32[$10 + 68 >> 2]) {
     HEAP32[HEAP32[$0 + 60 >> 2] + ($3 << 2) >> 2] = 0;
     break label$13;
    }
    $1 = HEAP32[$8 + 12 >> 2];
    $2 = HEAP32[$8 + 8 >> 2];
    HEAP32[$5 + 12 >> 2] = HEAP32[(HEAP32[$10 + 28 >> 2] + Math_imul($3, 80) | 0) + 64 >> 2];
    HEAP32[$5 + 16 >> 2] = $2;
    HEAP32[$5 + 20 >> 2] = $1;
    HEAP32[$5 + 28 >> 2] = $3;
    HEAP32[$5 + 24 >> 2] = -1;
    HEAP32[$5 + 8 >> 2] = $8;
    $4 = HEAP32[$0 + 4 >> 2];
    $4 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $5 + 8 | 0, $9, HEAP32[$0 + 72 >> 2], 1) | 0;
    HEAP32[HEAP32[$0 + 60 >> 2] + ($3 << 2) >> 2] = $4;
   }
   $3 = $3 + 1 | 0;
   if (($6 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = $5 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function acosf($0) {
 var $1 = Math_fround(0), $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0);
 $3 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
 $2 = $3 & 2147483647;
 if ($2 >>> 0 >= 1065353216) {
  if (($2 | 0) == 1065353216) {
   return ($3 | 0) < 0 ? Math_fround(3.141592502593994) : Math_fround(0);
  }
  return Math_fround(Math_fround(0) / Math_fround($0 - $0));
 }
 label$3 : {
  if ($2 >>> 0 <= 1056964607) {
   $1 = Math_fround(1.570796251296997);
   if ($2 >>> 0 < 847249409) {
    break label$3;
   }
   $1 = Math_fround($0 * $0);
   return Math_fround(Math_fround(Math_fround(Math_fround(7.549789415861596e-8) - Math_fround(Math_fround(Math_fround($1 * Math_fround(Math_fround($1 * Math_fround(Math_fround($1 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593))) / Math_fround(Math_fround($1 * Math_fround(-.7066296339035034)) + Math_fround(1))) * $0)) - $0) + Math_fround(1.570796251296997));
  }
  if (($3 | 0) <= -1) {
   $0 = Math_fround(Math_fround($0 + Math_fround(1)) * Math_fround(.5));
   $1 = sqrtf($0);
   $0 = Math_fround(Math_fround(1.570796251296997) - Math_fround($1 + Math_fround(Math_fround($1 * Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593))) / Math_fround(Math_fround($0 * Math_fround(-.7066296339035034)) + Math_fround(1)))) + Math_fround(-7.549789415861596e-8))));
   return Math_fround($0 + $0);
  }
  $0 = Math_fround(Math_fround(Math_fround(1) - $0) * Math_fround(.5));
  $5 = Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593))) / Math_fround(Math_fround($0 * Math_fround(-.7066296339035034)) + Math_fround(1)));
  $4 = sqrtf($0);
  $1 = (wasm2js_scratch_store_i32(0, (wasm2js_scratch_store_f32($4), wasm2js_scratch_load_i32(0)) & -4096), wasm2js_scratch_load_f32());
  $0 = Math_fround(Math_fround(Math_fround($5 * $4) + Math_fround(Math_fround($0 - Math_fround($1 * $1)) / Math_fround($4 + $1))) + $1);
  $1 = Math_fround($0 + $0);
 }
 return $1;
}
function btCollisionWorld__AllHitsRayResultCallback__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0);
 $3 = global$0 + -64 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $4 = $3 + 32 | 0;
 HEAP32[$3 + 60 >> 2] = $0;
 HEAP32[$3 + 56 >> 2] = $1;
 HEAP8[$3 + 55 | 0] = $2;
 $5 = HEAP32[$3 + 60 >> 2];
 HEAP32[$5 + 8 >> 2] = HEAP32[HEAP32[$3 + 56 >> 2] >> 2];
 btAlignedObjectArray_btCollisionObject_20const____push_back_28btCollisionObject_20const__20const__29($5 + 20 | 0, HEAP32[$3 + 56 >> 2]);
 btVector3__btVector3_28_29($4);
 label$2 : {
  if (HEAP8[$3 + 55 | 0] & 1) {
   $4 = HEAP32[$3 + 56 >> 2];
   $0 = HEAP32[$4 + 8 >> 2];
   $1 = HEAP32[$4 + 12 >> 2];
   $6 = $0;
   $2 = $3 + 32 | 0;
   $0 = $2;
   HEAP32[$0 >> 2] = $6;
   HEAP32[$0 + 4 >> 2] = $1;
   $0 = HEAP32[$4 + 20 >> 2];
   $1 = HEAP32[$4 + 16 >> 2];
   $4 = $1;
   $1 = $2;
   HEAP32[$1 + 8 >> 2] = $4;
   HEAP32[$1 + 12 >> 2] = $0;
   break label$2;
  }
  $2 = $3 + 32 | 0;
  $4 = $3 + 16 | 0;
  operator__28btMatrix3x3_20const__2c_20btVector3_20const__29($4, btTransform__getBasis_28_29_20const(btCollisionObject__getWorldTransform_28_29_20const(HEAP32[$5 + 8 >> 2])), HEAP32[$3 + 56 >> 2] + 8 | 0);
  $0 = HEAP32[$4 >> 2];
  $1 = HEAP32[$4 + 4 >> 2];
  $6 = $0;
  $0 = $2;
  HEAP32[$0 >> 2] = $6;
  HEAP32[$0 + 4 >> 2] = $1;
  $0 = HEAP32[$4 + 12 >> 2];
  $1 = HEAP32[$4 + 8 >> 2];
  $4 = $1;
  $1 = $2;
  HEAP32[$1 + 8 >> 2] = $4;
  HEAP32[$1 + 12 >> 2] = $0;
 }
 btAlignedObjectArray_btVector3___push_back_28btVector3_20const__29($5 + 72 | 0, $3 + 32 | 0);
 btVector3__btVector3_28_29($3);
 btVector3__setInterpolate3_28btVector3_20const__2c_20btVector3_20const__2c_20float_29($3, $5 + 40 | 0, $5 + 56 | 0, HEAPF32[HEAP32[$3 + 56 >> 2] + 24 >> 2]);
 btAlignedObjectArray_btVector3___push_back_28btVector3_20const__29($5 + 92 | 0, $3);
 btAlignedObjectArray_float___push_back_28float_20const__29($5 + 112 | 0, HEAP32[$3 + 56 >> 2] + 24 | 0);
 $7 = HEAPF32[$5 + 4 >> 2];
 $0 = $3 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($7);
}
function btTriangleMesh__addIndex_28int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 if (HEAPU8[$0 + 164 | 0]) {
  $4 = HEAP32[$0 + 128 >> 2];
  label$2 : {
   if (($4 | 0) != HEAP32[$0 + 132 >> 2]) {
    break label$2;
   }
   $5 = $4 ? $4 << 1 : 1;
   if (($4 | 0) >= ($5 | 0)) {
    break label$2;
   }
   if ($5) {
    $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 2, 16);
    $4 = HEAP32[$0 + 128 >> 2];
   }
   $6 = HEAP32[$0 + 136 >> 2];
   label$4 : {
    label$5 : {
     if (($4 | 0) >= 1) {
      while (1) {
       $3 = $2 << 2;
       HEAP32[$7 + $3 >> 2] = HEAP32[$3 + $6 >> 2];
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($4 | 0)) {
        continue;
       }
       break label$5;
      }
     }
     if (!$6) {
      break label$4;
     }
    }
    if (HEAPU8[$0 + 140 | 0]) {
     btAlignedFreeInternal_28void__29($6);
    }
    HEAP32[$0 + 136 >> 2] = 0;
    $4 = HEAP32[$0 + 128 >> 2];
   }
   HEAP32[$0 + 136 >> 2] = $7;
   HEAP32[$0 + 132 >> 2] = $5;
   HEAP8[$0 + 140 | 0] = 1;
  }
  $2 = HEAP32[$0 + 136 >> 2];
  HEAP32[$2 + ($4 << 2) >> 2] = $1;
  HEAP32[$0 + 128 >> 2] = HEAP32[$0 + 128 >> 2] + 1;
  HEAP32[HEAP32[$0 + 32 >> 2] + 4 >> 2] = $2;
  return;
 }
 $3 = HEAP32[$0 + 148 >> 2];
 label$9 : {
  if (($3 | 0) != HEAP32[$0 + 152 >> 2]) {
   break label$9;
  }
  $5 = $3 ? $3 << 1 : 1;
  if (($3 | 0) >= ($5 | 0)) {
   break label$9;
  }
  if ($5) {
   $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 1, 16);
   $3 = HEAP32[$0 + 148 >> 2];
  }
  $6 = HEAP32[$0 + 156 >> 2];
  label$11 : {
   label$12 : {
    if (($3 | 0) >= 1) {
     while (1) {
      $4 = $2 << 1;
      HEAP16[$7 + $4 >> 1] = HEAPU16[$4 + $6 >> 1];
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($3 | 0)) {
       continue;
      }
      break label$12;
     }
    }
    if (!$6) {
     break label$11;
    }
   }
   if (HEAPU8[$0 + 160 | 0]) {
    btAlignedFreeInternal_28void__29($6);
    $3 = HEAP32[$0 + 148 >> 2];
   }
   HEAP32[$0 + 156 >> 2] = 0;
  }
  HEAP32[$0 + 156 >> 2] = $7;
  HEAP32[$0 + 152 >> 2] = $5;
  HEAP8[$0 + 160 | 0] = 1;
 }
 $2 = HEAP32[$0 + 156 >> 2];
 HEAP16[$2 + ($3 << 1) >> 1] = $1;
 HEAP32[$0 + 148 >> 2] = $3 + 1;
 HEAP32[HEAP32[$0 + 32 >> 2] + 4 >> 2] = $2;
}
function btDiscreteDynamicsWorld__debugDrawWorld_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
 $3 = global$0 - 16 | 0;
 $1 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 $4 = CProfileSample__CProfileSample_28char_20const__29($3 + 8 | 0, 2524);
 btCollisionWorld__debugDrawWorld_28_29($0);
 label$2 : {
  if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
   break label$2;
  }
  $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
  if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 56 >> 2]]($1) & 6144)) {
   break label$2;
  }
  $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0) | 0;
  if (($1 | 0) < 1) {
   break label$2;
  }
  while (1) {
   $2 = $1 + -1 | 0;
   wasm2js_i32$1 = $0, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, $2) | 0, wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 172 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
   $5 = ($1 | 0) > 1;
   $1 = $2;
   if ($5) {
    continue;
   }
   break;
  }
 }
 label$4 : {
  if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
   break label$4;
  }
  $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
  if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 56 >> 2]]($1) & 16387)) {
   break label$4;
  }
  if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
   break label$4;
  }
  $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
  if (!FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 56 >> 2]]($1) | HEAP32[$0 + 296 >> 2] < 1) {
   break label$4;
  }
  $1 = 0;
  while (1) {
   $2 = HEAP32[HEAP32[$0 + 304 >> 2] + ($1 << 2) >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2, HEAP32[$0 + 72 >> 2]);
   $1 = $1 + 1 | 0;
   if (($1 | 0) < HEAP32[$0 + 296 >> 2]) {
    continue;
   }
   break;
  }
 }
 if (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0);
 }
 CProfileSample___CProfileSample_28_29($4);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function InplaceSolverIslandCallback__processConstraints_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $6 = HEAP32[$0 + 8 >> 2];
 $7 = $6;
 $3 = HEAP32[$0 + 32 >> 2];
 if ($3) {
  $1 = HEAP32[$0 + 40 >> 2];
 }
 $8 = $1;
 $4 = HEAP32[$0 + 52 >> 2];
 if ($4) {
  $2 = HEAP32[$0 + 60 >> 2];
 }
 $1 = $2;
 $2 = $4;
 $4 = HEAP32[$0 + 72 >> 2];
 $5 = 0;
 label$5 : {
  if (!$4) {
   break label$5;
  }
  $5 = HEAP32[$0 + 80 >> 2];
 }
 Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 12 >> 2]]($7, $8, $3, $1, $2, $5, $4, HEAP32[$0 + 4 >> 2], HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2]));
 $2 = HEAP32[$0 + 32 >> 2];
 if (($2 | 0) <= -1) {
  if (HEAP32[$0 + 36 >> 2] <= -1) {
   $1 = HEAP32[$0 + 40 >> 2];
   if ($1) {
    if (HEAPU8[$0 + 44 | 0]) {
     btAlignedFreeInternal_28void__29($1);
    }
    HEAP32[$0 + 40 >> 2] = 0;
   }
   HEAP32[$0 + 36 >> 2] = 0;
   HEAP32[$0 + 40 >> 2] = 0;
   HEAP8[$0 + 44 | 0] = 1;
  }
  while (1) {
   HEAP32[HEAP32[$0 + 40 >> 2] + ($2 << 2) >> 2] = 0;
   $1 = $2 + 1 | 0;
   $3 = $1 >>> 0 >= $2 >>> 0;
   $2 = $1;
   if ($3) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 32 >> 2] = 0;
 $2 = HEAP32[$0 + 52 >> 2];
 if (($2 | 0) <= -1) {
  if (HEAP32[$0 + 56 >> 2] <= -1) {
   $1 = HEAP32[$0 + 60 >> 2];
   if ($1) {
    if (HEAPU8[$0 - -64 | 0]) {
     btAlignedFreeInternal_28void__29($1);
    }
    HEAP32[$0 + 60 >> 2] = 0;
   }
   HEAP32[$0 + 56 >> 2] = 0;
   HEAP32[$0 + 60 >> 2] = 0;
   HEAP8[$0 - -64 | 0] = 1;
  }
  while (1) {
   HEAP32[HEAP32[$0 + 60 >> 2] + ($2 << 2) >> 2] = 0;
   $1 = $2 + 1 | 0;
   $3 = $1 >>> 0 >= $2 >>> 0;
   $2 = $1;
   if ($3) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 52 >> 2] = 0;
 $2 = HEAP32[$0 + 72 >> 2];
 if (($2 | 0) <= -1) {
  if (HEAP32[$0 + 76 >> 2] <= -1) {
   $1 = HEAP32[$0 + 80 >> 2];
   if ($1) {
    if (HEAPU8[$0 + 84 | 0]) {
     btAlignedFreeInternal_28void__29($1);
    }
    HEAP32[$0 + 80 >> 2] = 0;
   }
   HEAP32[$0 + 76 >> 2] = 0;
   HEAP32[$0 + 80 >> 2] = 0;
   HEAP8[$0 + 84 | 0] = 1;
  }
  while (1) {
   HEAP32[HEAP32[$0 + 80 >> 2] + ($2 << 2) >> 2] = 0;
   $1 = $2 + 1 | 0;
   $3 = $1 >>> 0 >= $2 >>> 0;
   $2 = $1;
   if ($3) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 72 >> 2] = 0;
}
function btRigidBody__removeConstraintRef_28btTypedConstraint__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 label$1 : {
  $3 = HEAP32[$0 + 548 >> 2];
  if (($3 | 0) < 1) {
   break label$1;
  }
  $5 = HEAP32[$0 + 556 >> 2];
  while (1) {
   if (HEAP32[($2 << 2) + $5 >> 2] != ($1 | 0)) {
    $2 = $2 + 1 | 0;
    if (($3 | 0) != ($2 | 0)) {
     continue;
    }
    break label$1;
   }
   break;
  }
  if (($2 | 0) >= ($3 | 0)) {
   break label$1;
  }
  $2 = 0;
  label$4 : {
   while (1) {
    $4 = ($2 << 2) + $5 | 0;
    if (HEAP32[$4 >> 2] != ($1 | 0)) {
     $2 = $2 + 1 | 0;
     if (($3 | 0) != ($2 | 0)) {
      continue;
     }
     break label$4;
    }
    break;
   }
   if (($3 | 0) <= ($2 | 0)) {
    break label$4;
   }
   $2 = $3 + -1 | 0;
   $3 = $2 << 2;
   HEAP32[$4 >> 2] = HEAP32[$5 + $3 >> 2];
   HEAP32[HEAP32[$0 + 556 >> 2] + $3 >> 2] = $1;
   HEAP32[$0 + 548 >> 2] = $2;
  }
  $4 = HEAP32[$1 + 32 >> 2];
  $3 = HEAP32[$1 + 28 >> 2];
  if (($3 | 0) == ($0 | 0)) {
   $1 = HEAP32[$0 + 288 >> 2];
   label$8 : {
    if (($1 | 0) < 1) {
     break label$8;
    }
    $3 = HEAP32[$0 + 296 >> 2];
    $2 = 0;
    while (1) {
     $5 = ($2 << 2) + $3 | 0;
     if (HEAP32[$5 >> 2] != ($4 | 0)) {
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue;
      }
      break label$8;
     }
     break;
    }
    if (($1 | 0) <= ($2 | 0)) {
     break label$8;
    }
    $1 = $1 + -1 | 0;
    $2 = $1 << 2;
    HEAP32[$5 >> 2] = HEAP32[$3 + $2 >> 2];
    HEAP32[HEAP32[$0 + 296 >> 2] + $2 >> 2] = $4;
    HEAP32[$0 + 288 >> 2] = $1;
   }
   HEAP32[$0 + 280 >> 2] = ($1 | 0) > 0;
   return;
  }
  $1 = HEAP32[$4 + 288 >> 2];
  label$11 : {
   if (($1 | 0) < 1) {
    break label$11;
   }
   $5 = HEAP32[$4 + 296 >> 2];
   $2 = 0;
   while (1) {
    $0 = ($2 << 2) + $5 | 0;
    if (HEAP32[$0 >> 2] != ($3 | 0)) {
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue;
     }
     break label$11;
    }
    break;
   }
   if (($1 | 0) <= ($2 | 0)) {
    break label$11;
   }
   $1 = $1 + -1 | 0;
   $2 = $1 << 2;
   HEAP32[$0 >> 2] = HEAP32[$5 + $2 >> 2];
   HEAP32[HEAP32[$4 + 296 >> 2] + $2 >> 2] = $3;
   HEAP32[$4 + 288 >> 2] = $1;
  }
  HEAP32[$4 + 280 >> 2] = ($1 | 0) > 0;
 }
}
function btCapsuleShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0);
 $4 = global$0 - 16 | 0;
 if (($3 | 0) >= 1) {
  while (1) {
   HEAP32[$4 + 8 >> 2] = 0;
   HEAP32[$4 + 12 >> 2] = 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   $6 = HEAP32[$0 + 56 >> 2];
   $5 = $6 << 2;
   $8 = $0 + $5 | 0;
   $9 = HEAPF32[$8 + 32 >> 2];
   HEAP32[$5 + $4 >> 2] = HEAP32[$8 + 32 >> 2];
   $7 = HEAPF32[$4 >> 2];
   $8 = $12 << 4;
   $5 = $8 + $1 | 0;
   $10 = HEAPF32[$5 >> 2];
   $15 = HEAPF32[$4 + 4 >> 2];
   $11 = HEAPF32[$5 + 4 >> 2];
   $16 = HEAPF32[$4 + 8 >> 2];
   $13 = HEAPF32[$5 + 8 >> 2];
   $17 = Math_fround(Math_fround(Math_fround($7 * $10) + Math_fround($15 * $11)) + Math_fround($16 * $13));
   $14 = Math_fround(-0xde0b6b000000000);
   label$3 : {
    if (!($17 > Math_fround(-0xde0b6b000000000))) {
     break label$3;
    }
    $6 = $2 + $8 | 0;
    HEAP32[$6 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
    HEAPF32[$6 + 8 >> 2] = $16;
    HEAPF32[$6 + 4 >> 2] = $15;
    HEAPF32[$6 >> 2] = $7;
    $13 = HEAPF32[$5 + 8 >> 2];
    $11 = HEAPF32[$5 + 4 >> 2];
    $10 = HEAPF32[$5 >> 2];
    $6 = HEAP32[$0 + 56 >> 2];
    $9 = HEAPF32[(($6 << 2) + $0 | 0) + 32 >> 2];
    $14 = $17;
   }
   HEAP32[$4 + 8 >> 2] = 0;
   HEAP32[$4 + 12 >> 2] = 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   $7 = $9;
   HEAPF32[($6 << 2) + $4 >> 2] = -$7;
   $7 = HEAPF32[$4 >> 2];
   $9 = Math_fround($7 * $10);
   $10 = HEAPF32[$4 + 4 >> 2];
   $9 = Math_fround($9 + Math_fround($10 * $11));
   $11 = HEAPF32[$4 + 8 >> 2];
   if (!!(Math_fround($9 + Math_fround($11 * $13)) > $14)) {
    $5 = $2 + $8 | 0;
    HEAP32[$5 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
    HEAPF32[$5 + 8 >> 2] = $11;
    HEAPF32[$5 + 4 >> 2] = $10;
    HEAPF32[$5 >> 2] = $7;
   }
   $12 = $12 + 1 | 0;
   if (($12 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
}
function gjkepa2_impl__EPA__getedgedist_28gjkepa2_impl__EPA__sFace__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20float__29($0, $1, $2, $3, $4) {
 var $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0;
 $9 = HEAPF32[$3 + 24 >> 2];
 $5 = HEAPF32[$2 + 24 >> 2];
 $12 = Math_fround($9 - $5);
 $10 = HEAPF32[$3 + 16 >> 2];
 $7 = HEAPF32[$2 + 16 >> 2];
 $13 = Math_fround($10 - $7);
 $15 = HEAPF32[$1 + 4 >> 2];
 $11 = HEAPF32[$3 + 20 >> 2];
 $8 = HEAPF32[$2 + 20 >> 2];
 $14 = Math_fround($11 - $8);
 $16 = HEAPF32[$1 >> 2];
 $6 = HEAPF32[$1 + 8 >> 2];
 if (!!(Math_fround(Math_fround($5 * Math_fround(Math_fround($13 * $15) - Math_fround($14 * $16))) + Math_fround(Math_fround($7 * Math_fround(Math_fround($14 * $6) - Math_fround($12 * $15))) + Math_fround($8 * Math_fround(Math_fround($12 * $16) - Math_fround($13 * $6))))) < Math_fround(0))) {
  $6 = Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($8 * $8)) + Math_fround($5 * $5));
  label$2 : {
   if (!!(Math_fround(Math_fround(Math_fround($7 * $13) + Math_fround($8 * $14)) + Math_fround($5 * $12)) > Math_fround(0))) {
    break label$2;
   }
   $6 = Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($11 * $11)) + Math_fround($9 * $9));
   if (!!(Math_fround(Math_fround(Math_fround($10 * $13) + Math_fround($11 * $14)) + Math_fround($9 * $12)) < Math_fround(0))) {
    break label$2;
   }
   $6 = Math_fround(Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($11 * $11)) + Math_fround($9 * $9)) * Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($8 * $8)) + Math_fround($5 * $5)));
   $5 = Math_fround(Math_fround(Math_fround($10 * $7) + Math_fround($11 * $8)) + Math_fround($9 * $5));
   $5 = Math_fround(Math_fround($6 - Math_fround($5 * $5)) / Math_fround(Math_fround(Math_fround($13 * $13) + Math_fround($14 * $14)) + Math_fround($12 * $12)));
   $6 = $5 > Math_fround(0) ? $5 : Math_fround(0);
  }
  $5 = $6;
  HEAPF32[$4 >> 2] = Math_sqrt($5);
  $17 = 1;
 }
 return $17;
}
function fmodf($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 label$1 : {
  $6 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(0));
  $2 = $6 << 1;
  if (!(!$2 | ($6 & 2147483647) >>> 0 > 2139095040)) {
   $7 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
   $3 = $7 >>> 23 & 255;
   if (($3 | 0) != 255) {
    break label$1;
   }
  }
  $1 = Math_fround($0 * $1);
  return Math_fround($1 / $1);
 }
 $4 = $7 << 1;
 if ($4 >>> 0 > $2 >>> 0) {
  $4 = $6 >>> 23 & 255;
  label$4 : {
   if (!$3) {
    $3 = 0;
    $2 = $7 << 9;
    if (($2 | 0) >= 0) {
     while (1) {
      $3 = $3 + -1 | 0;
      $2 = $2 << 1;
      if (($2 | 0) > -1) {
       continue;
      }
      break;
     }
    }
    $2 = $7 << 1 - $3;
    break label$4;
   }
   $2 = $7 & 8388607 | 8388608;
  }
  $9 = $2;
  label$8 : {
   if (!$4) {
    $4 = 0;
    $5 = $6 << 9;
    if (($5 | 0) >= 0) {
     while (1) {
      $4 = $4 + -1 | 0;
      $5 = $5 << 1;
      if (($5 | 0) > -1) {
       continue;
      }
      break;
     }
    }
    $8 = $6 << 1 - $4;
    break label$8;
   }
   $8 = $6 & 8388607 | 8388608;
  }
  $6 = $9 - $8 | 0;
  $5 = ($6 | 0) > -1;
  if (($3 | 0) > ($4 | 0)) {
   while (1) {
    label$14 : {
     if (!($5 & 1)) {
      break label$14;
     }
     $2 = $6;
     if ($2) {
      break label$14;
     }
     return Math_fround($0 * Math_fround(0));
    }
    $2 = $2 << 1;
    $6 = $2 - $8 | 0;
    $5 = ($6 | 0) > -1;
    $3 = $3 + -1 | 0;
    if (($3 | 0) > ($4 | 0)) {
     continue;
    }
    break;
   }
   $3 = $4;
  }
  label$15 : {
   if (!$5) {
    break label$15;
   }
   $2 = $6;
   if ($2) {
    break label$15;
   }
   return Math_fround($0 * Math_fround(0));
  }
  label$16 : {
   if ($2 >>> 0 > 8388607) {
    $5 = $2;
    break label$16;
   }
   while (1) {
    $3 = $3 + -1 | 0;
    $4 = $2 >>> 0 < 4194304;
    $5 = $2 << 1;
    $2 = $5;
    if ($4) {
     continue;
    }
    break;
   }
  }
  $2 = $7 & -2147483648;
  $3 = ($3 | 0) >= 1 ? $5 + -8388608 | $3 << 23 : $5 >>> 1 - $3 | 0;
  return wasm2js_scratch_store_i32(0, $2 | $3), wasm2js_scratch_load_f32();
 }
 return ($2 | 0) == ($4 | 0) ? Math_fround($0 * Math_fround(0)) : $0;
}
function btConvexHullInternal__getCoordinates_28btConvexHullInternal__Vertex_20const__29($0, $1, $2) {
 var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0);
 $3 = global$0 - 16 | 0;
 $6 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 label$2 : {
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      if (HEAP32[$2 + 100 >> 2] >= 0) {
       HEAPF32[(HEAP32[$1 + 108 >> 2] << 2) + $3 >> 2] = HEAP32[$2 + 88 >> 2];
       break label$6;
      }
      $4 = btConvexHullInternal__Int128__toScalar_28_29_20const($2 + 24 | 0);
      $6 = $2 + 72 | 0;
      $5 = btConvexHullInternal__Int128__toScalar_28_29_20const($6);
      $7 = HEAP32[$2 + 100 >> 2];
      HEAPF32[(HEAP32[$1 + 108 >> 2] << 2) + $3 >> 2] = $4 / $5;
      if (($7 | 0) < 0) {
       break label$5;
      }
     }
     HEAPF32[(HEAP32[$1 + 112 >> 2] << 2) + $3 >> 2] = HEAP32[$2 + 92 >> 2];
     break label$4;
    }
    $4 = btConvexHullInternal__Int128__toScalar_28_29_20const($2 + 40 | 0);
    $5 = btConvexHullInternal__Int128__toScalar_28_29_20const($6);
    $7 = HEAP32[$2 + 100 >> 2];
    HEAPF32[(HEAP32[$1 + 112 >> 2] << 2) + $3 >> 2] = $4 / $5;
    if (($7 | 0) < 0) {
     break label$3;
    }
   }
   $4 = Math_fround(HEAP32[$2 + 96 >> 2]);
   break label$2;
  }
  $4 = Math_fround(btConvexHullInternal__Int128__toScalar_28_29_20const($2 + 56 | 0) / btConvexHullInternal__Int128__toScalar_28_29_20const($2 + 72 | 0));
 }
 HEAPF32[(HEAP32[$1 + 104 >> 2] << 2) + $3 >> 2] = $4;
 $4 = HEAPF32[$1 + 20 >> 2];
 $5 = HEAPF32[$1 + 24 >> 2];
 $8 = HEAPF32[$1 + 16 >> 2];
 $9 = HEAPF32[$1 >> 2];
 $10 = HEAPF32[$1 + 4 >> 2];
 $11 = HEAPF32[$1 + 8 >> 2];
 $12 = HEAPF32[$3 >> 2];
 $13 = HEAPF32[$3 + 4 >> 2];
 $14 = HEAPF32[$3 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = 0;
 HEAPF32[$0 + 8 >> 2] = $5 + Math_fround($14 * $11);
 HEAPF32[$0 + 4 >> 2] = $4 + Math_fround($13 * $10);
 HEAPF32[$0 >> 2] = $8 + Math_fround($12 * $9);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexConcaveCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0);
 $7 = global$0 - 16 | 0;
 $5 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $9 = CProfileSample__CProfileSample_28char_20const__29($7 + 8 | 0, 6426);
 $6 = HEAPU8[$0 + 76 | 0];
 $8 = $6 ? $1 : $2;
 $5 = HEAP32[$8 + 4 >> 2];
 label$2 : {
  if (HEAP32[$5 + 4 >> 2] + -21 >>> 0 > 8) {
   break label$2;
  }
  $2 = $6 ? $2 : $1;
  if (HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2] > 19) {
   break label$2;
  }
  $10 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 48 >> 2]]($5));
  HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 72 >> 2];
  $1 = $0 + 8 | 0;
  btConvexTriangleCallback__setTimeStepAndCounters_28float_2c_20btDispatcherInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btManifoldResult__29($1, $10, $3, $2, $8, $4);
  $2 = HEAP32[$2 + 8 >> 2];
  $6 = HEAP32[$0 + 72 >> 2];
  HEAP32[$6 + 840 >> 2] = HEAP32[$8 + 8 >> 2];
  HEAP32[$6 + 836 >> 2] = $2;
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 64 >> 2]]($5, $1, $0 + 12 | 0, $0 + 28 | 0);
  $2 = HEAP32[$4 + 4 >> 2];
  label$3 : {
   if (!HEAP32[$2 + 844 >> 2]) {
    break label$3;
   }
   $1 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
   $5 = HEAP32[$2 + 836 >> 2];
   if (($1 | 0) != ($5 | 0)) {
    btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($2, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0, $1 + 4 | 0);
    break label$3;
   }
   btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($2, $5 + 4 | 0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0);
  }
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = 0;
 }
 CProfileSample___CProfileSample_28_29($9);
 $0 = $7 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody__updateInertiaTensor_28_29($0) {
 var $1 = Math_fround(0), $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0);
 HEAP32[$0 + 368 >> 2] = 0;
 HEAP32[$0 + 352 >> 2] = 0;
 HEAP32[$0 + 336 >> 2] = 0;
 $6 = HEAPF32[$0 + 456 >> 2];
 $2 = HEAPF32[$0 + 36 >> 2];
 $3 = Math_fround($6 * $2);
 $13 = HEAPF32[$0 + 460 >> 2];
 $4 = HEAPF32[$0 + 40 >> 2];
 $5 = Math_fround($13 * $4);
 $14 = HEAPF32[$0 + 464 >> 2];
 $8 = HEAPF32[$0 + 44 >> 2];
 $1 = Math_fround($14 * $8);
 HEAPF32[$0 + 364 >> 2] = Math_fround(Math_fround($3 * $2) + Math_fround($5 * $4)) + Math_fround($1 * $8);
 $9 = HEAPF32[$0 + 20 >> 2];
 $10 = HEAPF32[$0 + 24 >> 2];
 $11 = HEAPF32[$0 + 28 >> 2];
 HEAPF32[$0 + 360 >> 2] = Math_fround(Math_fround($3 * $9) + Math_fround($5 * $10)) + Math_fround($1 * $11);
 $12 = HEAPF32[$0 + 4 >> 2];
 $7 = Math_fround($3 * $12);
 $3 = HEAPF32[$0 + 8 >> 2];
 $7 = Math_fround($7 + Math_fround($5 * $3));
 $5 = HEAPF32[$0 + 12 >> 2];
 HEAPF32[$0 + 356 >> 2] = $7 + Math_fround($1 * $5);
 $1 = Math_fround($6 * $9);
 $7 = Math_fround($13 * $10);
 $15 = Math_fround($14 * $11);
 HEAPF32[$0 + 348 >> 2] = Math_fround(Math_fround($2 * $1) + Math_fround($4 * $7)) + Math_fround($8 * $15);
 HEAPF32[$0 + 344 >> 2] = Math_fround(Math_fround($1 * $9) + Math_fround($7 * $10)) + Math_fround($15 * $11);
 HEAPF32[$0 + 340 >> 2] = Math_fround(Math_fround($1 * $12) + Math_fround($7 * $3)) + Math_fround($15 * $5);
 $6 = Math_fround($12 * $6);
 $1 = Math_fround($2 * $6);
 $2 = Math_fround($3 * $13);
 $1 = Math_fround($1 + Math_fround($4 * $2));
 $4 = Math_fround($5 * $14);
 HEAPF32[$0 + 332 >> 2] = $1 + Math_fround($8 * $4);
 HEAPF32[$0 + 328 >> 2] = Math_fround(Math_fround($6 * $9) + Math_fround($2 * $10)) + Math_fround($4 * $11);
 HEAPF32[$0 + 324 >> 2] = Math_fround(Math_fround($6 * $12) + Math_fround($2 * $3)) + Math_fround($4 * $5);
}
function btCapsuleShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0);
 $3 = global$0 - 16 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 $4 = HEAPF32[$2 >> 2];
 $5 = HEAPF32[$2 + 4 >> 2];
 $7 = HEAPF32[$2 + 8 >> 2];
 $6 = Math_fround(Math_fround(Math_fround($4 * $4) + Math_fround($5 * $5)) + Math_fround($7 * $7));
 label$1 : {
  if ($6 < Math_fround(9999999747378752e-20)) {
   $7 = Math_fround(0);
   $4 = Math_fround(1);
   $5 = Math_fround(0);
   break label$1;
  }
  $6 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt($6)));
  $7 = Math_fround($7 * $6);
  $4 = Math_fround($4 * $6);
  $5 = Math_fround($5 * $6);
 }
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 $2 = HEAP32[$1 + 56 >> 2] << 2;
 $10 = $3 + $2 | 0;
 $9 = HEAPF32[($1 + $2 | 0) + 32 >> 2];
 HEAPF32[$10 >> 2] = $9;
 $6 = Math_fround(-0xde0b6b000000000);
 $11 = HEAPF32[$3 >> 2];
 $12 = HEAPF32[$3 + 4 >> 2];
 $13 = HEAPF32[$3 + 8 >> 2];
 $8 = Math_fround(Math_fround(Math_fround($4 * $11) + Math_fround($5 * $12)) + Math_fround($7 * $13));
 if (!!($8 > Math_fround(-0xde0b6b000000000))) {
  HEAP32[$0 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
  HEAPF32[$0 + 8 >> 2] = $13;
  HEAPF32[$0 + 4 >> 2] = $12;
  HEAPF32[$0 >> 2] = $11;
  $6 = $8;
 }
 HEAP32[$3 + 8 >> 2] = 0;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAP32[$3 >> 2] = 0;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAPF32[$10 >> 2] = -$9;
 $9 = HEAPF32[$3 >> 2];
 $8 = Math_fround($4 * $9);
 $4 = HEAPF32[$3 + 4 >> 2];
 $8 = Math_fround($8 + Math_fround($5 * $4));
 $5 = HEAPF32[$3 + 8 >> 2];
 if (!!(Math_fround($8 + Math_fround($7 * $5)) > $6)) {
  HEAP32[$0 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
  HEAPF32[$0 + 8 >> 2] = $5;
  HEAPF32[$0 + 4 >> 2] = $4;
  HEAPF32[$0 >> 2] = $9;
 }
}
function atan2f($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0;
 label$1 : {
  $2 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(0));
  $4 = $2 & 2147483647;
  if ($4 >>> 0 <= 2139095040) {
   $6 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
   $3 = $6 & 2147483647;
   if ($3 >>> 0 < 2139095041) {
    break label$1;
   }
  }
  return Math_fround($0 + $1);
 }
 if (($2 | 0) == 1065353216) {
  return atanf($0);
 }
 $7 = $2 >>> 30 & 2;
 $2 = $7 | $6 >>> 31;
 folding_inner0 : {
  label$4 : {
   label$5 : {
    label$6 : {
     if (!$3) {
      label$8 : {
       switch ($2 - 2 | 0) {
       case 0:
        break label$6;
       case 1:
        break label$8;
       default:
        break label$5;
       }
      }
      return Math_fround(-3.1415927410125732);
     }
     if (($4 | 0) != 2139095040) {
      if (!$4 | !($4 + 218103808 >>> 0 >= $3 >>> 0 ? ($3 | 0) != 2139095040 : 0)) {
       break folding_inner0;
      }
      label$12 : {
       if ($3 + 218103808 >>> 0 < $4 >>> 0) {
        $5 = Math_fround(0);
        if ($7) {
         break label$12;
        }
       }
       $5 = atanf(fabsf(Math_fround($0 / $1)));
      }
      $1 = $5;
      if ($2 >>> 0 <= 2) {
       $0 = $1;
       label$15 : {
        switch ($2 - 1 | 0) {
        case 0:
         return Math_fround(-$1);
        case 1:
         break label$15;
        default:
         break label$5;
        }
       }
       return Math_fround(Math_fround(3.1415927410125732) - Math_fround($1 + Math_fround(8.742277657347586e-8)));
      }
      return Math_fround(Math_fround($1 + Math_fround(8.742277657347586e-8)) + Math_fround(-3.1415927410125732));
     }
     if (($3 | 0) == 2139095040) {
      break label$4;
     }
     return HEAPF32[($2 << 2) + 19392 >> 2];
    }
    $0 = Math_fround(3.1415927410125732);
   }
   return $0;
  }
  return HEAPF32[($2 << 2) + 19376 >> 2];
 }
 return wasm2js_scratch_store_i32(0, (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0)) & -2147483648 | 1070141403), wasm2js_scratch_load_f32();
}
function btCapsuleShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0);
 $10 = $0 + 32 | 0;
 $11 = HEAP32[$0 + 56 >> 2];
 $4 = HEAPF32[$10 + (($11 + 2 | 0) % 3 << 2) >> 2];
 $5 = global$0;
 $0 = $5 - 16 | 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAPF32[$0 + 8 >> 2] = $4;
 HEAPF32[$0 + 4 >> 2] = $4;
 HEAPF32[$0 >> 2] = $4;
 $5 = $11 << 2;
 HEAPF32[$5 + $0 >> 2] = $4 + HEAPF32[$5 + $10 >> 2];
 $12 = HEAPF32[$1 + 52 >> 2];
 $6 = HEAPF32[$1 + 24 >> 2];
 $15 = HEAPF32[$1 + 20 >> 2];
 $13 = HEAPF32[$1 + 56 >> 2];
 $7 = HEAPF32[$1 + 40 >> 2];
 $16 = HEAPF32[$1 + 36 >> 2];
 $14 = HEAPF32[$1 + 48 >> 2];
 $17 = HEAPF32[$1 + 8 >> 2];
 $18 = HEAPF32[$1 >> 2];
 $19 = HEAPF32[$1 + 4 >> 2];
 $20 = HEAPF32[$1 + 16 >> 2];
 $21 = HEAPF32[$1 + 32 >> 2];
 $4 = HEAPF32[$0 + 8 >> 2];
 $8 = HEAPF32[$0 >> 2];
 $9 = HEAPF32[$0 + 4 >> 2];
 HEAP32[$2 + 12 >> 2] = 0;
 $7 = Math_fround(Math_fround(Math_fround($8 * Math_fround(Math_abs($21))) + Math_fround($9 * Math_fround(Math_abs($16)))) + Math_fround($4 * Math_fround(Math_abs($7))));
 HEAPF32[$2 + 8 >> 2] = $13 - $7;
 $6 = Math_fround(Math_fround(Math_fround($8 * Math_fround(Math_abs($20))) + Math_fround($9 * Math_fround(Math_abs($15)))) + Math_fround($4 * Math_fround(Math_abs($6))));
 HEAPF32[$2 + 4 >> 2] = $12 - $6;
 $4 = Math_fround(Math_fround(Math_fround($8 * Math_fround(Math_abs($18))) + Math_fround($9 * Math_fround(Math_abs($19)))) + Math_fround($4 * Math_fround(Math_abs($17))));
 HEAPF32[$2 >> 2] = $14 - $4;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAPF32[$3 + 8 >> 2] = $13 + $7;
 HEAPF32[$3 + 4 >> 2] = $12 + $6;
 HEAPF32[$3 >> 2] = $14 + $4;
}
function shortestArcQuat_28btVector3_20const__2c_20btVector3_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 96 | 0;
 $5 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$3 + 92 >> 2] = $1;
 HEAP32[$3 + 88 >> 2] = $2;
 btVector3__cross_28btVector3_20const__29_20const($3 + 72 | 0, HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2]);
 HEAPF32[$3 + 68 >> 2] = btVector3__dot_28btVector3_20const__29_20const(HEAP32[$3 + 92 >> 2], HEAP32[$3 + 88 >> 2]);
 label$2 : {
  if (+HEAPF32[$3 + 68 >> 2] < -.9999998807907104) {
   $6 = $3 + 28 | 0;
   $1 = $3 + 32 | 0;
   $4 = $3 + 48 | 0;
   btVector3__btVector3_28_29($4);
   btVector3__btVector3_28_29($1);
   void_20btPlaneSpace1_btVector3__28btVector3_20const__2c_20btVector3__2c_20btVector3__29(HEAP32[$3 + 92 >> 2], $4, $1);
   $5 = btVector3__x_28_29_20const($4);
   $2 = btVector3__y_28_29_20const($4);
   $1 = btVector3__z_28_29_20const($4);
   HEAPF32[$3 + 28 >> 2] = 0;
   btQuaternion__btQuaternion_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($0, $5, $2, $1, $6);
   break label$2;
  }
  $6 = $3 + 16 | 0;
  $5 = $3 + 12 | 0;
  $2 = $3 + 8 | 0;
  $1 = $3 + 4 | 0;
  $4 = $3 + 72 | 0;
  HEAPF32[$3 + 24 >> 2] = btSqrt_28float_29(Math_fround(Math_fround(Math_fround(1) + HEAPF32[$3 + 68 >> 2]) * Math_fround(2)));
  HEAPF32[$3 + 20 >> 2] = Math_fround(1) / HEAPF32[$3 + 24 >> 2];
  HEAPF32[$3 + 16 >> 2] = HEAPF32[btVector3__getX_28_29_20const($4) >> 2] * HEAPF32[$3 + 20 >> 2];
  HEAPF32[$3 + 12 >> 2] = HEAPF32[btVector3__getY_28_29_20const($4) >> 2] * HEAPF32[$3 + 20 >> 2];
  HEAPF32[$3 + 8 >> 2] = HEAPF32[btVector3__getZ_28_29_20const($4) >> 2] * HEAPF32[$3 + 20 >> 2];
  HEAPF32[$3 + 4 >> 2] = HEAPF32[$3 + 24 >> 2] * Math_fround(.5);
  btQuaternion__btQuaternion_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($0, $6, $5, $2, $1);
 }
 $0 = $3 + 96 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btManifoldPoint__btManifoldPoint_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = global$0 - 32 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAPF32[$5 + 12 >> 2] = $4;
 $3 = HEAP32[$5 + 24 >> 2];
 $2 = HEAP32[$3 >> 2];
 $0 = HEAP32[$3 + 4 >> 2];
 $1 = HEAP32[$5 + 28 >> 2];
 HEAP32[$1 >> 2] = $2;
 HEAP32[$1 + 4 >> 2] = $0;
 $2 = HEAP32[$3 + 12 >> 2];
 $0 = HEAP32[$3 + 8 >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 12 >> 2] = $2;
 $3 = HEAP32[$5 + 20 >> 2];
 $2 = HEAP32[$3 >> 2];
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$1 + 16 >> 2] = $2;
 HEAP32[$1 + 20 >> 2] = $0;
 $2 = HEAP32[$3 + 12 >> 2];
 $0 = HEAP32[$3 + 8 >> 2];
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 28 >> 2] = $2;
 btVector3__btVector3_28_29($1 + 32 | 0);
 btVector3__btVector3_28_29($1 + 48 | 0);
 $3 = HEAP32[$5 + 16 >> 2];
 $2 = HEAP32[$3 >> 2];
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$1 + 64 >> 2] = $2;
 HEAP32[$1 + 68 >> 2] = $0;
 $2 = HEAP32[$3 + 12 >> 2];
 $0 = HEAP32[$3 + 8 >> 2];
 HEAP32[$1 + 72 >> 2] = $0;
 HEAP32[$1 + 76 >> 2] = $2;
 HEAPF32[$1 + 80 >> 2] = HEAPF32[$5 + 12 >> 2];
 HEAPF32[$1 + 84 >> 2] = 0;
 HEAPF32[$1 + 88 >> 2] = 0;
 HEAPF32[$1 + 92 >> 2] = 0;
 HEAPF32[$1 + 96 >> 2] = 0;
 HEAP32[$1 + 116 >> 2] = 0;
 HEAP32[$1 + 120 >> 2] = 0;
 HEAP32[$1 + 124 >> 2] = 0;
 HEAP32[$1 + 128 >> 2] = 0;
 HEAPF32[$1 + 132 >> 2] = 0;
 HEAPF32[$1 + 136 >> 2] = 0;
 HEAPF32[$1 + 140 >> 2] = 0;
 HEAPF32[$1 + 144 >> 2] = 0;
 HEAPF32[$1 + 148 >> 2] = 0;
 HEAPF32[$1 + 152 >> 2] = 0;
 HEAPF32[$1 + 156 >> 2] = 0;
 HEAPF32[$1 + 160 >> 2] = 0;
 HEAP32[$1 + 164 >> 2] = 0;
 btVector3__btVector3_28_29($1 + 168 | 0);
 btVector3__btVector3_28_29($1 + 184 | 0);
 $0 = $5 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
  __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3, $4);
  return;
 }
 $7 = HEAPU8[$1 + 53 | 0];
 $6 = HEAP32[$0 + 12 >> 2];
 HEAP8[$1 + 53 | 0] = 0;
 $8 = HEAPU8[$1 + 52 | 0];
 HEAP8[$1 + 52 | 0] = 0;
 $9 = $0 + 16 | 0;
 __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($9, $1, $2, $3, $4, $5);
 $10 = HEAPU8[$1 + 53 | 0];
 $7 = $10 | $7;
 $11 = HEAPU8[$1 + 52 | 0];
 $8 = $11 | $8;
 label$2 : {
  if (($6 | 0) < 2) {
   break label$2;
  }
  $9 = ($6 << 3) + $9 | 0;
  $6 = $0 + 24 | 0;
  while (1) {
   if (HEAPU8[$1 + 54 | 0]) {
    break label$2;
   }
   label$4 : {
    if ($11) {
     if (HEAP32[$1 + 24 >> 2] == 1) {
      break label$2;
     }
     if (HEAPU8[$0 + 8 | 0] & 2) {
      break label$4;
     }
     break label$2;
    }
    if (!$10) {
     break label$4;
    }
    if (!(HEAP8[$0 + 8 | 0] & 1)) {
     break label$2;
    }
   }
   HEAP16[$1 + 52 >> 1] = 0;
   __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($6, $1, $2, $3, $4, $5);
   $10 = HEAPU8[$1 + 53 | 0];
   $7 = $10 | $7;
   $11 = HEAPU8[$1 + 52 | 0];
   $8 = $11 | $8;
   $6 = $6 + 8 | 0;
   if ($6 >>> 0 < $9 >>> 0) {
    continue;
   }
   break;
  }
 }
 HEAP8[$1 + 53 | 0] = ($7 & 255) != 0;
 HEAP8[$1 + 52 | 0] = ($8 & 255) != 0;
}
function btDiscreteDynamicsWorld__serializeRigidBodies_28btSerializer__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
 $3 = HEAP32[$0 + 8 >> 2];
 if (($3 | 0) >= 1) {
  while (1) {
   $2 = HEAP32[HEAP32[$0 + 16 >> 2] + ($4 << 2) >> 2];
   if (HEAPU8[$2 + 252 | 0] & 2) {
    $3 = (wasm2js_i32$1 = $1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2) | 0, wasm2js_i32$3 = 1, wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 16 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
    wasm2js_i32$3 = $1, wasm2js_i32$2 = $3, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, HEAP32[$3 + 8 >> 2], $1) | 0, wasm2js_i32$4 = 1497645650, wasm2js_i32$5 = $2, wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
    $3 = HEAP32[$0 + 8 >> 2];
   }
   $4 = $4 + 1 | 0;
   if (($4 | 0) < ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 if (HEAP32[$0 + 228 >> 2] >= 1) {
  $4 = 0;
  while (1) {
   $2 = HEAP32[HEAP32[$0 + 236 >> 2] + ($4 << 2) >> 2];
   $3 = (wasm2js_i32$5 = $1, wasm2js_i32$4 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2) | 0, wasm2js_i32$1 = 1, wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 16 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$5 | 0, wasm2js_i32$4 | 0, wasm2js_i32$1 | 0) | 0);
   wasm2js_i32$1 = $1, wasm2js_i32$4 = $3, wasm2js_i32$5 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 40 >> 2]]($2, HEAP32[$3 + 8 >> 2], $1) | 0, wasm2js_i32$2 = 1397641027, wasm2js_i32$3 = $2, wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0);
   $4 = $4 + 1 | 0;
   if (($4 | 0) < HEAP32[$0 + 228 >> 2]) {
    continue;
   }
   break;
  }
 }
}
function btConeTwistConstraint__GetPointForAngle_28float_2c_20float_29_20const($0, $1, $2, $3) {
 var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
 $5 = cosf($2);
 $4 = HEAPF32[$1 + 444 >> 2];
 $2 = sinf($2);
 label$1 : {
  if (!(Math_fround(Math_abs($5)) > Math_fround(1.1920928955078125e-7))) {
   $6 = Math_fround($2 * $2);
   $8 = Math_fround($5 * $5);
   break label$1;
  }
  $6 = Math_fround($2 * $2);
  $8 = Math_fround($5 * $5);
  $9 = Math_fround($6 / $8);
  $7 = HEAPF32[$1 + 448 >> 2];
  $4 = Math_fround(Math_sqrt(Math_fround(Math_fround($9 + Math_fround(1)) / Math_fround(Math_fround(Math_fround(1) / Math_fround($7 * $7)) + Math_fround($9 / Math_fround($4 * $4))))));
 }
 HEAP32[$0 + 12 >> 2] = 0;
 $4 = Math_fround($4 * Math_fround(.5));
 $6 = Math_fround(sinf($4) / Math_fround(Math_sqrt(Math_fround($6 + Math_fround($8 + Math_fround(0))))));
 $8 = Math_fround($6 * Math_fround(0));
 $4 = cosf($4);
 $7 = Math_fround($4 * Math_fround(0));
 $2 = Math_fround($6 * Math_fround(-$2));
 $10 = Math_fround($8 * Math_fround(0));
 $9 = Math_fround(Math_fround($7 + Math_fround($2 * $3)) - $10);
 $5 = Math_fround($5 * $6);
 $7 = Math_fround(Math_fround($7 + $10) - Math_fround($5 * $3));
 $10 = Math_fround($5 * Math_fround(0));
 $11 = Math_fround($2 * Math_fround(0));
 $6 = Math_fround(Math_fround(Math_fround(Math_fround($6 * Math_fround(-0)) * $3) - $10) - $11);
 $3 = Math_fround(Math_fround(Math_fround($4 * $3) + $10) - $11);
 HEAPF32[$0 + 8 >> 2] = Math_fround($8 * $9) + Math_fround(Math_fround(Math_fround($4 * $7) - Math_fround($2 * $6)) - Math_fround($5 * $3));
 HEAPF32[$0 + 4 >> 2] = Math_fround($2 * $3) + Math_fround(Math_fround(Math_fround($4 * $9) - Math_fround($5 * $6)) - Math_fround($8 * $7));
 HEAPF32[$0 >> 2] = Math_fround($5 * $7) + Math_fround(Math_fround(Math_fround($4 * $3) - Math_fround($8 * $6)) - Math_fround($2 * $9));
}
function btDiscreteDynamicsWorld___btDiscreteDynamicsWorld_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 2336;
 if (HEAPU8[$0 + 288 | 0]) {
  $1 = HEAP32[$0 + 220 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 220 >> 2]);
 }
 $1 = HEAP32[$0 + 212 >> 2];
 if ($1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 212 >> 2]);
 }
 if (HEAPU8[$0 + 289 | 0]) {
  $1 = HEAP32[$0 + 216 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 216 >> 2]);
 }
 $1 = HEAP32[$0 + 332 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 336 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 332 >> 2] = 0;
 }
 HEAP32[$0 + 332 >> 2] = 0;
 HEAP32[$0 + 324 >> 2] = 0;
 HEAP32[$0 + 328 >> 2] = 0;
 HEAP8[$0 + 336 | 0] = 1;
 $1 = HEAP32[$0 + 304 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 308 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 304 >> 2] = 0;
 }
 HEAP32[$0 + 304 >> 2] = 0;
 HEAP32[$0 + 296 >> 2] = 0;
 HEAP32[$0 + 300 >> 2] = 0;
 HEAP8[$0 + 308 | 0] = 1;
 $1 = HEAP32[$0 + 256 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 260 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 256 >> 2] = 0;
 }
 HEAP32[$0 + 256 >> 2] = 0;
 HEAP32[$0 + 248 >> 2] = 0;
 HEAP32[$0 + 252 >> 2] = 0;
 HEAP8[$0 + 260 | 0] = 1;
 $1 = HEAP32[$0 + 236 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 240 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 236 >> 2] = 0;
 }
 HEAP32[$0 + 236 >> 2] = 0;
 HEAP32[$0 + 228 >> 2] = 0;
 HEAP32[$0 + 232 >> 2] = 0;
 HEAP8[$0 + 240 | 0] = 1;
 $1 = HEAP32[$0 + 204 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 208 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 204 >> 2] = 0;
 }
 HEAP32[$0 + 204 >> 2] = 0;
 HEAP32[$0 + 196 >> 2] = 0;
 HEAP32[$0 + 200 >> 2] = 0;
 HEAP8[$0 + 208 | 0] = 1;
 btCollisionWorld___btCollisionWorld_28_29($0);
 return $0 | 0;
}
function btAlignedObjectArray_btFace___push_back_28btFace_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 $4 = HEAP32[$0 + 4 >> 2];
 if (($4 | 0) == HEAP32[$0 + 8 >> 2]) {
  btAlignedObjectArray_btFace___reserve_28int_29($0, $4 ? $4 << 1 : 1);
  $4 = HEAP32[$0 + 4 >> 2];
 }
 $10 = HEAP32[$0 + 12 >> 2];
 $2 = $10 + Math_imul($4, 36) | 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP8[$2 + 16 | 0] = 1;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 $9 = $2;
 $5 = HEAP32[$1 + 4 >> 2];
 label$2 : {
  if (($5 | 0) >= 1) {
   $6 = $2;
   $11 = $2;
   $12 = $5 << 2;
   $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($12, 16);
   $13 = $2;
   $8 = HEAP32[$2 + 12 >> 2];
   $14 = HEAP32[$9 + 4 >> 2];
   label$4 : {
    label$5 : {
     if (($14 | 0) >= 1) {
      while (1) {
       $2 = $3 << 2;
       HEAP32[$7 + $2 >> 2] = HEAP32[$2 + $8 >> 2];
       $3 = $3 + 1 | 0;
       if (($14 | 0) != ($3 | 0)) {
        continue;
       }
       break label$5;
      }
     }
     if (!$8) {
      break label$4;
     }
    }
    if (!HEAPU8[$11 + 16 | 0]) {
     break label$4;
    }
    btAlignedFreeInternal_28void__29($8);
   }
   HEAP8[$11 + 16 | 0] = 1;
   HEAP32[$13 + 12 >> 2] = $7;
   HEAP32[$6 + 8 >> 2] = $5;
   $3 = 0;
   memset($7, 0, $12);
   HEAP32[$9 + 4 >> 2] = $5;
   $7 = HEAP32[$1 + 12 >> 2];
   $8 = HEAP32[$13 + 12 >> 2];
   while (1) {
    $2 = $3 << 2;
    HEAP32[$8 + $2 >> 2] = HEAP32[$2 + $7 >> 2];
    $3 = $3 + 1 | 0;
    if (($5 | 0) != ($3 | 0)) {
     continue;
    }
    break;
   }
   break label$2;
  }
  HEAP32[$9 + 4 >> 2] = $5;
 }
 $2 = HEAP32[$1 + 24 >> 2];
 $6 = HEAP32[$1 + 20 >> 2];
 $3 = Math_imul($4, 36) + $10 | 0;
 HEAP32[$3 + 20 >> 2] = $6;
 HEAP32[$3 + 24 >> 2] = $2;
 $6 = HEAP32[$1 + 32 >> 2];
 $2 = HEAP32[$1 + 28 >> 2];
 HEAP32[$3 + 28 >> 2] = $2;
 HEAP32[$3 + 32 >> 2] = $6;
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
}
function btPolyhedralConvexShape__calculateLocalInertia_28float_2c_20btVector3__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
 $3 = global$0 - 96 | 0;
 $7 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 $4 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 HEAP32[$3 + 44 >> 2] = 0;
 HEAP32[$3 + 48 >> 2] = 0;
 HEAP32[$3 + 56 >> 2] = 0;
 HEAP32[$3 + 60 >> 2] = 0;
 HEAP32[$3 + 52 >> 2] = 1065353216;
 HEAP32[$3 + 76 >> 2] = 0;
 HEAP32[$3 + 80 >> 2] = 0;
 HEAP32[$3 + 72 >> 2] = 1065353216;
 HEAP32[$3 + 84 >> 2] = 0;
 HEAP32[$3 + 88 >> 2] = 0;
 HEAP32[$3 + 92 >> 2] = 0;
 HEAP32[$3 + 36 >> 2] = 0;
 HEAP32[$3 + 40 >> 2] = 0;
 HEAP32[$3 + 32 >> 2] = 1065353216;
 HEAP32[$3 + 64 >> 2] = 0;
 HEAP32[$3 + 68 >> 2] = 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $3 + 32 | 0, $3 + 16 | 0, $3);
 $8 = HEAPF32[$3 + 24 >> 2];
 $9 = HEAPF32[$3 + 8 >> 2];
 $5 = HEAPF32[$3 + 16 >> 2];
 $6 = HEAPF32[$3 >> 2];
 $10 = HEAPF32[$3 + 20 >> 2];
 $11 = HEAPF32[$3 + 4 >> 2];
 HEAP32[$2 + 12 >> 2] = 0;
 $1 = Math_fround($1 * Math_fround(.0833333283662796));
 $5 = Math_fround($4 + Math_fround(Math_fround($6 - $5) * Math_fround(.5)));
 $5 = Math_fround($5 + $5);
 $5 = Math_fround($5 * $5);
 $6 = Math_fround($4 + Math_fround(Math_fround($11 - $10) * Math_fround(.5)));
 $6 = Math_fround($6 + $6);
 $6 = Math_fround($6 * $6);
 HEAPF32[$2 + 8 >> 2] = $1 * Math_fround($5 + $6);
 $4 = Math_fround($4 + Math_fround(Math_fround($9 - $8) * Math_fround(.5)));
 $4 = Math_fround($4 + $4);
 $4 = Math_fround($4 * $4);
 HEAPF32[$2 + 4 >> 2] = $1 * Math_fround($5 + $4);
 HEAPF32[$2 >> 2] = $1 * Math_fround($6 + $4);
 $0 = $3 + 96 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConeShape__calculateLocalInertia_28float_2c_20btVector3__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
 $3 = global$0 - 96 | 0;
 $7 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$3 + 44 >> 2] = 0;
 HEAP32[$3 + 48 >> 2] = 0;
 HEAP32[$3 + 56 >> 2] = 0;
 HEAP32[$3 + 60 >> 2] = 0;
 HEAP32[$3 + 52 >> 2] = 1065353216;
 HEAP32[$3 + 76 >> 2] = 0;
 HEAP32[$3 + 80 >> 2] = 0;
 HEAP32[$3 + 72 >> 2] = 1065353216;
 HEAP32[$3 + 84 >> 2] = 0;
 HEAP32[$3 + 88 >> 2] = 0;
 HEAP32[$3 + 92 >> 2] = 0;
 HEAP32[$3 + 36 >> 2] = 0;
 HEAP32[$3 + 40 >> 2] = 0;
 HEAP32[$3 + 32 >> 2] = 1065353216;
 HEAP32[$3 + 64 >> 2] = 0;
 HEAP32[$3 + 68 >> 2] = 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $3 + 32 | 0, $3 + 16 | 0, $3);
 $8 = HEAPF32[$3 + 24 >> 2];
 $9 = HEAPF32[$3 + 8 >> 2];
 $5 = HEAPF32[$3 + 16 >> 2];
 $6 = HEAPF32[$3 >> 2];
 $10 = HEAPF32[$3 + 20 >> 2];
 $11 = HEAPF32[$3 + 4 >> 2];
 $4 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 HEAP32[$2 + 12 >> 2] = 0;
 $1 = Math_fround($1 * Math_fround(.0833333283662796));
 $5 = Math_fround($4 + Math_fround(Math_fround($6 - $5) * Math_fround(.5)));
 $5 = Math_fround($5 + $5);
 $5 = Math_fround($5 * $5);
 $6 = Math_fround($4 + Math_fround(Math_fround($11 - $10) * Math_fround(.5)));
 $6 = Math_fround($6 + $6);
 $6 = Math_fround($6 * $6);
 HEAPF32[$2 + 8 >> 2] = $1 * Math_fround($5 + $6);
 $4 = Math_fround($4 + Math_fround(Math_fround($9 - $8) * Math_fround(.5)));
 $4 = Math_fround($4 + $4);
 $4 = Math_fround($4 * $4);
 HEAPF32[$2 + 4 >> 2] = $1 * Math_fround($5 + $4);
 HEAPF32[$2 >> 2] = $1 * Math_fround($6 + $4);
 $0 = $3 + 96 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function atanf($0) {
 var $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0);
 $5 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
 $1 = $5 & 2147483647;
 if ($1 >>> 0 < 1283457024) {
  label$2 : {
   label$3 : {
    if ($1 >>> 0 <= 1054867455) {
     $2 = -1;
     if ($1 >>> 0 >= 964689920) {
      break label$3;
     }
     break label$2;
    }
    $0 = fabsf($0);
    if ($1 >>> 0 <= 1066926079) {
     if ($1 >>> 0 <= 1060110335) {
      $0 = Math_fround(Math_fround(Math_fround($0 + $0) + Math_fround(-1)) / Math_fround($0 + Math_fround(2)));
      $2 = 0;
      break label$3;
     }
     $0 = Math_fround(Math_fround($0 + Math_fround(-1)) / Math_fround($0 + Math_fround(1)));
     $2 = 1;
     break label$3;
    }
    if ($1 >>> 0 <= 1075576831) {
     $0 = Math_fround(Math_fround($0 + Math_fround(-1.5)) / Math_fround(Math_fround($0 * Math_fround(1.5)) + Math_fround(1)));
     $2 = 2;
     break label$3;
    }
    $0 = Math_fround(Math_fround(-1) / $0);
    $2 = 3;
   }
   $4 = Math_fround($0 * $0);
   $3 = Math_fround($4 * $4);
   $6 = Math_fround($3 * Math_fround(Math_fround($3 * Math_fround(-.106480173766613)) + Math_fround(-.19999158382415771)));
   $3 = Math_fround($4 * Math_fround(Math_fround($3 * Math_fround(Math_fround($3 * Math_fround(.06168760731816292)) + Math_fround(.14253635704517365))) + Math_fround(.333333283662796)));
   $1 = $2;
   if (($2 | 0) <= -1) {
    return Math_fround($0 - Math_fround($0 * Math_fround($6 + $3)));
   }
   $1 = $1 << 2;
   $0 = Math_fround(HEAPF32[$1 + 19344 >> 2] - Math_fround(Math_fround(Math_fround($0 * Math_fround($6 + $3)) - HEAPF32[$1 + 19360 >> 2]) - $0));
   $0 = ($5 | 0) < 0 ? Math_fround(-$0) : $0;
  }
  return $0;
 }
 return $1 >>> 0 > 2139095040 ? $0 : (wasm2js_scratch_store_i32(0, (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0)) & -2147483648 | 1070141402), wasm2js_scratch_load_f32());
}
function btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__BridgeTriangleRaycastCallback__reportHit_28btVector3_20const__2c_20float_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0);
 $5 = global$0 - 48 | 0;
 $9 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $9;
 HEAP32[$5 + 44 >> 2] = $4;
 HEAP32[$5 + 40 >> 2] = $3;
 $10 = HEAPF32[$0 - -64 >> 2];
 $11 = HEAPF32[$0 + 60 >> 2];
 $12 = HEAPF32[$0 + 80 >> 2];
 $13 = HEAPF32[$0 + 72 >> 2];
 $14 = HEAPF32[$0 + 76 >> 2];
 $15 = HEAPF32[$0 + 96 >> 2];
 $16 = HEAPF32[$0 + 88 >> 2];
 $17 = HEAPF32[$0 + 92 >> 2];
 $18 = HEAPF32[$0 + 56 >> 2];
 $6 = HEAPF32[$1 + 8 >> 2];
 $7 = HEAPF32[$1 >> 2];
 $8 = HEAPF32[$1 + 4 >> 2];
 $1 = HEAP32[$0 + 48 >> 2];
 HEAP32[$5 + 28 >> 2] = 0;
 HEAPF32[$5 + 24 >> 2] = Math_fround(Math_fround($7 * $16) + Math_fround($8 * $17)) + Math_fround($6 * $15);
 HEAPF32[$5 + 20 >> 2] = Math_fround(Math_fround($7 * $13) + Math_fround($8 * $14)) + Math_fround($6 * $12);
 HEAPF32[$5 + 32 >> 2] = $2;
 HEAP32[$5 + 8 >> 2] = $1;
 HEAPF32[$5 + 16 >> 2] = Math_fround(Math_fround($18 * $7) + Math_fround($11 * $8)) + Math_fround($10 * $6);
 HEAP32[$5 + 12 >> 2] = $5 + 40;
 $0 = HEAP32[$0 + 44 >> 2];
 $6 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $5 + 8 | 0, 1));
 $0 = $5 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($6);
}
function btCylinderShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0);
 $4 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $9 = HEAPF32[$1 + 52 >> 2];
 $7 = HEAPF32[$1 + 20 >> 2];
 $12 = HEAPF32[$1 + 24 >> 2];
 $10 = HEAPF32[$1 + 56 >> 2];
 $8 = HEAPF32[$1 + 36 >> 2];
 $5 = HEAPF32[$0 + 36 >> 2];
 $13 = HEAPF32[$1 + 40 >> 2];
 $14 = HEAPF32[$0 + 40 >> 2];
 $11 = HEAPF32[$1 + 48 >> 2];
 $15 = HEAPF32[$1 >> 2];
 $16 = HEAPF32[$1 + 4 >> 2];
 $17 = HEAPF32[$1 + 8 >> 2];
 $18 = HEAPF32[$1 + 16 >> 2];
 $19 = HEAPF32[$1 + 32 >> 2];
 $6 = HEAPF32[$0 + 32 >> 2];
 HEAP32[$2 + 12 >> 2] = 0;
 $6 = Math_fround($4 + $6);
 $5 = Math_fround($4 + $5);
 $4 = Math_fround($4 + $14);
 $8 = Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_abs($19))) + Math_fround($5 * Math_fround(Math_abs($8)))) + Math_fround($4 * Math_fround(Math_abs($13))));
 HEAPF32[$2 + 8 >> 2] = $10 - $8;
 $7 = Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_abs($18))) + Math_fround($5 * Math_fround(Math_abs($7)))) + Math_fround($4 * Math_fround(Math_abs($12))));
 HEAPF32[$2 + 4 >> 2] = $9 - $7;
 $4 = Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_abs($15))) + Math_fround($5 * Math_fround(Math_abs($16)))) + Math_fround($4 * Math_fround(Math_abs($17))));
 HEAPF32[$2 >> 2] = $11 - $4;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAPF32[$3 + 8 >> 2] = $10 + $8;
 HEAPF32[$3 + 4 >> 2] = $7 + $9;
 HEAPF32[$3 >> 2] = $4 + $11;
}
function btBoxShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0);
 $4 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $9 = HEAPF32[$1 + 52 >> 2];
 $7 = HEAPF32[$1 + 20 >> 2];
 $12 = HEAPF32[$1 + 24 >> 2];
 $10 = HEAPF32[$1 + 56 >> 2];
 $8 = HEAPF32[$1 + 36 >> 2];
 $5 = HEAPF32[$0 + 36 >> 2];
 $13 = HEAPF32[$1 + 40 >> 2];
 $14 = HEAPF32[$0 + 40 >> 2];
 $11 = HEAPF32[$1 + 48 >> 2];
 $15 = HEAPF32[$1 >> 2];
 $16 = HEAPF32[$1 + 4 >> 2];
 $17 = HEAPF32[$1 + 8 >> 2];
 $18 = HEAPF32[$1 + 16 >> 2];
 $19 = HEAPF32[$1 + 32 >> 2];
 $6 = HEAPF32[$0 + 32 >> 2];
 HEAP32[$2 + 12 >> 2] = 0;
 $6 = Math_fround($4 + $6);
 $5 = Math_fround($4 + $5);
 $4 = Math_fround($4 + $14);
 $8 = Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_abs($19))) + Math_fround($5 * Math_fround(Math_abs($8)))) + Math_fround($4 * Math_fround(Math_abs($13))));
 HEAPF32[$2 + 8 >> 2] = $10 - $8;
 $7 = Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_abs($18))) + Math_fround($5 * Math_fround(Math_abs($7)))) + Math_fround($4 * Math_fround(Math_abs($12))));
 HEAPF32[$2 + 4 >> 2] = $9 - $7;
 $4 = Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_abs($15))) + Math_fround($5 * Math_fround(Math_abs($16)))) + Math_fround($4 * Math_fround(Math_abs($17))));
 HEAPF32[$2 >> 2] = $11 - $4;
 HEAP32[$3 + 12 >> 2] = 0;
 HEAPF32[$3 + 8 >> 2] = $10 + $8;
 HEAPF32[$3 + 4 >> 2] = $7 + $9;
 HEAPF32[$3 >> 2] = $4 + $11;
}
function InplaceSolverIslandCallback__setup_28btContactSolverInfo__2c_20btTypedConstraint___2c_20int_2c_20btIDebugDraw__29($0, $1, $2, $3, $4) {
 HEAP32[$0 + 20 >> 2] = $4;
 HEAP32[$0 + 16 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $1;
 $1 = HEAP32[$0 + 32 >> 2];
 if (($1 | 0) <= -1) {
  if (HEAP32[$0 + 36 >> 2] <= -1) {
   $2 = HEAP32[$0 + 40 >> 2];
   if ($2) {
    if (HEAPU8[$0 + 44 | 0]) {
     btAlignedFreeInternal_28void__29($2);
    }
    HEAP32[$0 + 40 >> 2] = 0;
   }
   HEAP32[$0 + 36 >> 2] = 0;
   HEAP32[$0 + 40 >> 2] = 0;
   HEAP8[$0 + 44 | 0] = 1;
  }
  while (1) {
   HEAP32[HEAP32[$0 + 40 >> 2] + ($1 << 2) >> 2] = 0;
   $2 = $1 + 1 | 0;
   $3 = $2 >>> 0 >= $1 >>> 0;
   $1 = $2;
   if ($3) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 32 >> 2] = 0;
 $1 = HEAP32[$0 + 52 >> 2];
 if (($1 | 0) <= -1) {
  if (HEAP32[$0 + 56 >> 2] <= -1) {
   $2 = HEAP32[$0 + 60 >> 2];
   if ($2) {
    if (HEAPU8[$0 - -64 | 0]) {
     btAlignedFreeInternal_28void__29($2);
    }
    HEAP32[$0 + 60 >> 2] = 0;
   }
   HEAP32[$0 + 56 >> 2] = 0;
   HEAP32[$0 + 60 >> 2] = 0;
   HEAP8[$0 - -64 | 0] = 1;
  }
  while (1) {
   HEAP32[HEAP32[$0 + 60 >> 2] + ($1 << 2) >> 2] = 0;
   $2 = $1 + 1 | 0;
   $3 = $2 >>> 0 >= $1 >>> 0;
   $1 = $2;
   if ($3) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 52 >> 2] = 0;
 $1 = HEAP32[$0 + 72 >> 2];
 if (($1 | 0) <= -1) {
  if (HEAP32[$0 + 76 >> 2] <= -1) {
   $2 = HEAP32[$0 + 80 >> 2];
   if ($2) {
    if (HEAPU8[$0 + 84 | 0]) {
     btAlignedFreeInternal_28void__29($2);
    }
    HEAP32[$0 + 80 >> 2] = 0;
   }
   HEAP32[$0 + 76 >> 2] = 0;
   HEAP32[$0 + 80 >> 2] = 0;
   HEAP8[$0 + 84 | 0] = 1;
  }
  while (1) {
   HEAP32[HEAP32[$0 + 80 >> 2] + ($1 << 2) >> 2] = 0;
   $2 = $1 + 1 | 0;
   $3 = $2 >>> 0 >= $1 >>> 0;
   $1 = $2;
   if ($3) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 72 >> 2] = 0;
}
function void_20btAlignedObjectArray_btPersistentManifold____quickSortInternal_btPersistentManifoldSortPredicate__28btPersistentManifoldSortPredicate_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 while (1) {
  $13 = $2;
  $7 = HEAP32[$0 + 12 >> 2];
  $10 = HEAP32[$7 + (($2 + $3 | 0) / 2 << 2) >> 2];
  $8 = $3;
  $9 = $2;
  while (1) {
   $14 = HEAP32[HEAP32[$10 + 836 >> 2] + 208 >> 2];
   while (1) {
    $2 = $9;
    $15 = ($2 << 2) + $7 | 0;
    $11 = HEAP32[$15 >> 2];
    $5 = HEAP32[HEAP32[$11 + 836 >> 2] + 208 >> 2];
    if (($5 | 0) <= -1) {
     $5 = HEAP32[HEAP32[$11 + 840 >> 2] + 208 >> 2];
    }
    $6 = $14;
    $9 = $2 + 1 | 0;
    $16 = ($6 | 0) > -1;
    if (!$16) {
     $6 = HEAP32[HEAP32[$10 + 840 >> 2] + 208 >> 2];
    }
    if (($5 | 0) < ($6 | 0)) {
     continue;
    }
    break;
   }
   while (1) {
    $4 = $8;
    $17 = $4 << 2;
    $5 = HEAP32[$17 + $7 >> 2];
    $6 = $14;
    $8 = $4 + -1 | 0;
    $12 = HEAP32[HEAP32[$5 + 836 >> 2] + 208 >> 2];
    if (($12 | 0) <= -1) {
     $12 = HEAP32[HEAP32[$5 + 840 >> 2] + 208 >> 2];
    }
    $6 = $16 ? $6 : HEAP32[HEAP32[$10 + 840 >> 2] + 208 >> 2];
    if (($6 | 0) < ($12 | 0)) {
     continue;
    }
    break;
   }
   if (($2 | 0) <= ($4 | 0)) {
    HEAP32[$15 >> 2] = $5;
    HEAP32[HEAP32[$0 + 12 >> 2] + $17 >> 2] = $11;
    $4 = $8;
    $2 = $9;
   }
   if (($2 | 0) <= ($4 | 0)) {
    $7 = HEAP32[$0 + 12 >> 2];
    $8 = $4;
    $9 = $2;
    continue;
   }
   break;
  }
  if (($4 | 0) > ($13 | 0)) {
   void_20btAlignedObjectArray_btPersistentManifold____quickSortInternal_btPersistentManifoldSortPredicate__28btPersistentManifoldSortPredicate_20const__2c_20int_2c_20int_29($0, $1, $13, $4);
  }
  if (($2 | 0) < ($3 | 0)) {
   continue;
  }
  break;
 }
}
function btRigidBody__btRigidBody_28float_2c_20btMotionState__2c_20btCollisionShape__2c_20btVector3_20const__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $6 = global$0 - 144 | 0;
 $5 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 btCollisionObject__btCollisionObject_28_29($0);
 HEAP8[$0 + 560 | 0] = 1;
 HEAP32[$0 >> 2] = 2252;
 HEAP32[$0 + 556 >> 2] = 0;
 $5 = $0;
 HEAP32[$5 + 548 >> 2] = 0;
 HEAP32[$5 + 552 >> 2] = 0;
 HEAP32[$6 + 72 >> 2] = $3;
 HEAP32[$6 + 4 >> 2] = $2;
 HEAPF32[$6 >> 2] = $1;
 $3 = HEAP32[$4 + 8 >> 2];
 $5 = HEAP32[$4 + 12 >> 2];
 HEAP32[$6 + 84 >> 2] = $3;
 HEAP32[$6 + 88 >> 2] = $5;
 $5 = HEAP32[$4 >> 2];
 $2 = $5;
 $3 = HEAP32[$4 + 4 >> 2];
 $5 = $6;
 HEAP32[$5 + 20 >> 2] = 0;
 HEAP32[$5 + 24 >> 2] = 0;
 HEAP32[$5 + 12 >> 2] = 0;
 HEAP32[$5 + 16 >> 2] = 0;
 HEAP32[$5 + 28 >> 2] = 1065353216;
 HEAP32[$5 + 32 >> 2] = 0;
 HEAP32[$5 + 36 >> 2] = 0;
 HEAP32[$5 + 40 >> 2] = 0;
 HEAP32[$5 + 44 >> 2] = 0;
 HEAP32[$5 + 48 >> 2] = 1065353216;
 HEAP32[$5 + 68 >> 2] = 0;
 HEAP32[$5 + 60 >> 2] = 0;
 HEAP32[$5 + 64 >> 2] = 0;
 HEAP32[$5 + 52 >> 2] = 0;
 HEAP32[$5 + 56 >> 2] = 0;
 HEAP32[$5 + 76 >> 2] = $2;
 HEAP32[$5 + 80 >> 2] = $3;
 HEAP32[$5 + 136 >> 2] = 1008981770;
 HEAP32[$5 + 140 >> 2] = 1008981770;
 HEAP32[$5 + 128 >> 2] = 1000593162;
 HEAP32[$5 + 132 >> 2] = 1008981770;
 HEAP8[$5 + 124 | 0] = 0;
 HEAP32[$5 + 116 >> 2] = 1061997773;
 HEAP32[$5 + 120 >> 2] = 1065353216;
 HEAP32[$5 + 108 >> 2] = 0;
 HEAP32[$5 + 112 >> 2] = 0;
 HEAP32[$5 + 100 >> 2] = 1056964608;
 HEAP32[$5 + 104 >> 2] = 0;
 HEAP32[$5 + 92 >> 2] = 0;
 HEAP32[$5 + 96 >> 2] = 0;
 HEAP32[$5 + 8 >> 2] = 1065353216;
 btRigidBody__setupRigidBody_28btRigidBody__btRigidBodyConstructionInfo_20const__29($0, $5);
 $2 = $5 + 144 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btMatrix3x3__operator___28btMatrix3x3_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
 $2 = global$0 - 48 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $4 = $2 + 36 | 0;
 $5 = $2 + 32 | 0;
 $6 = $2 + 28 | 0;
 $7 = $2 + 24 | 0;
 $8 = $2 + 20 | 0;
 $9 = $2 + 16 | 0;
 $10 = $2 + 12 | 0;
 $11 = $2 + 8 | 0;
 $3 = $2 + 4 | 0;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 $1 = HEAP32[$2 + 44 >> 2];
 HEAPF32[$2 + 36 >> 2] = btMatrix3x3__tdotx_28btVector3_20const__29_20const(HEAP32[$2 + 40 >> 2], $1);
 HEAPF32[$2 + 32 >> 2] = btMatrix3x3__tdoty_28btVector3_20const__29_20const(HEAP32[$2 + 40 >> 2], $1);
 HEAPF32[$2 + 28 >> 2] = btMatrix3x3__tdotz_28btVector3_20const__29_20const(HEAP32[$2 + 40 >> 2], $1);
 HEAPF32[$2 + 24 >> 2] = btMatrix3x3__tdotx_28btVector3_20const__29_20const(HEAP32[$2 + 40 >> 2], $1 + 16 | 0);
 HEAPF32[$2 + 20 >> 2] = btMatrix3x3__tdoty_28btVector3_20const__29_20const(HEAP32[$2 + 40 >> 2], $1 + 16 | 0);
 HEAPF32[$2 + 16 >> 2] = btMatrix3x3__tdotz_28btVector3_20const__29_20const(HEAP32[$2 + 40 >> 2], $1 + 16 | 0);
 HEAPF32[$2 + 12 >> 2] = btMatrix3x3__tdotx_28btVector3_20const__29_20const(HEAP32[$2 + 40 >> 2], $1 + 32 | 0);
 HEAPF32[$2 + 8 >> 2] = btMatrix3x3__tdoty_28btVector3_20const__29_20const(HEAP32[$2 + 40 >> 2], $1 + 32 | 0);
 HEAPF32[$2 + 4 >> 2] = btMatrix3x3__tdotz_28btVector3_20const__29_20const(HEAP32[$2 + 40 >> 2], $1 + 32 | 0);
 btMatrix3x3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($1, $4, $5, $6, $7, $8, $9, $10, $11, $3);
 $0 = $2 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function btTriangleMesh__preallocateVertices_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 label$1 : {
  if (HEAPU8[$0 + 165 | 0]) {
   if (HEAP32[$0 + 92 >> 2] >= ($1 | 0)) {
    break label$1;
   }
   if ($1) {
    $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 4, 16);
   } else {
    $5 = 0;
   }
   $6 = HEAP32[$0 + 88 >> 2];
   if (($6 | 0) >= 1) {
    while (1) {
     $3 = $2 << 4;
     $4 = $3 + $5 | 0;
     $3 = HEAP32[$0 + 96 >> 2] + $3 | 0;
     $7 = HEAP32[$3 >> 2];
     $8 = HEAP32[$3 + 4 >> 2];
     HEAP32[$4 >> 2] = $7;
     HEAP32[$4 + 4 >> 2] = $8;
     $7 = HEAP32[$3 + 12 >> 2];
     $8 = HEAP32[$3 + 8 >> 2];
     HEAP32[$4 + 8 >> 2] = $8;
     HEAP32[$4 + 12 >> 2] = $7;
     $2 = $2 + 1 | 0;
     if (($6 | 0) != ($2 | 0)) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$0 + 96 >> 2];
   if ($2) {
    if (HEAPU8[$0 + 100 | 0]) {
     btAlignedFreeInternal_28void__29($2);
    }
    HEAP32[$0 + 96 >> 2] = 0;
   }
   HEAP32[$0 + 96 >> 2] = $5;
   HEAP32[$0 + 92 >> 2] = $1;
   HEAP8[$0 + 100 | 0] = 1;
   return;
  }
  if (HEAP32[$0 + 112 >> 2] >= ($1 | 0)) {
   break label$1;
  }
  if ($1) {
   $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 2, 16);
  }
  $5 = HEAP32[$0 + 116 >> 2];
  $6 = HEAP32[$0 + 108 >> 2];
  label$10 : {
   label$11 : {
    if (($6 | 0) >= 1) {
     while (1) {
      $3 = $2 << 2;
      HEAP32[$3 + $4 >> 2] = HEAP32[$3 + $5 >> 2];
      $2 = $2 + 1 | 0;
      if (($6 | 0) != ($2 | 0)) {
       continue;
      }
      break label$11;
     }
    }
    if (!$5) {
     break label$10;
    }
   }
   if (HEAPU8[$0 + 120 | 0]) {
    btAlignedFreeInternal_28void__29($5);
   }
   HEAP32[$0 + 116 >> 2] = 0;
  }
  HEAP32[$0 + 116 >> 2] = $4;
  HEAP32[$0 + 112 >> 2] = $1;
  HEAP8[$0 + 120 | 0] = 1;
 }
}
function void_20btAlignedObjectArray_btTypedConstraint____quickSortInternal_btSortConstraintOnIslandPredicate__28btSortConstraintOnIslandPredicate_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 while (1) {
  $13 = $2;
  $7 = HEAP32[$0 + 12 >> 2];
  $10 = HEAP32[$7 + (($2 + $3 | 0) / 2 << 2) >> 2];
  $8 = $3;
  $9 = $2;
  while (1) {
   $14 = HEAP32[HEAP32[$10 + 28 >> 2] + 208 >> 2];
   while (1) {
    $2 = $9;
    $15 = ($2 << 2) + $7 | 0;
    $11 = HEAP32[$15 >> 2];
    $5 = $14;
    $16 = ($5 | 0) > -1;
    if (!$16) {
     $5 = HEAP32[HEAP32[$10 + 32 >> 2] + 208 >> 2];
    }
    $9 = $2 + 1 | 0;
    $6 = HEAP32[HEAP32[$11 + 28 >> 2] + 208 >> 2];
    if (($6 | 0) <= -1) {
     $6 = HEAP32[HEAP32[$11 + 32 >> 2] + 208 >> 2];
    }
    if (($6 | 0) < ($5 | 0)) {
     continue;
    }
    break;
   }
   while (1) {
    $4 = $8;
    $17 = $4 << 2;
    $12 = HEAP32[$17 + $7 >> 2];
    $5 = HEAP32[HEAP32[$12 + 28 >> 2] + 208 >> 2];
    if (($5 | 0) <= -1) {
     $5 = HEAP32[HEAP32[$12 + 32 >> 2] + 208 >> 2];
    }
    $6 = $14;
    $8 = $4 + -1 | 0;
    $6 = $16 ? $6 : HEAP32[HEAP32[$10 + 32 >> 2] + 208 >> 2];
    if (($6 | 0) < ($5 | 0)) {
     continue;
    }
    break;
   }
   if (($2 | 0) <= ($4 | 0)) {
    HEAP32[$15 >> 2] = $12;
    HEAP32[HEAP32[$0 + 12 >> 2] + $17 >> 2] = $11;
    $4 = $8;
    $2 = $9;
   }
   if (($2 | 0) <= ($4 | 0)) {
    $7 = HEAP32[$0 + 12 >> 2];
    $8 = $4;
    $9 = $2;
    continue;
   }
   break;
  }
  if (($4 | 0) > ($13 | 0)) {
   void_20btAlignedObjectArray_btTypedConstraint____quickSortInternal_btSortConstraintOnIslandPredicate__28btSortConstraintOnIslandPredicate_20const__2c_20int_2c_20int_29($0, $1, $13, $4);
  }
  if (($2 | 0) < ($3 | 0)) {
   continue;
  }
  break;
 }
}
function btDiscreteDynamicsWorld__stepSimulation_28float_2c_20int_2c_20float_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 $3 = Math_fround($3);
 var $4 = 0, $5 = 0, $6 = Math_fround(0);
 CProfileManager__Reset_28_29();
 label$1 : {
  if ($2) {
   HEAPF32[$0 + 284 >> 2] = $3;
   $1 = Math_fround(HEAPF32[$0 + 280 >> 2] + $1);
   HEAPF32[$0 + 280 >> 2] = $1;
   if (!($1 >= $3)) {
    break label$1;
   }
   $4 = $0;
   $6 = $1;
   $1 = Math_fround($1 / $3);
   label$3 : {
    if (Math_fround(Math_abs($1)) < Math_fround(2147483648)) {
     $5 = ~~$1;
     break label$3;
    }
    $5 = -2147483648;
   }
   HEAPF32[$4 + 280 >> 2] = $6 - Math_fround(Math_fround($5 | 0) * $3);
   break label$1;
  }
  HEAP32[$0 + 284 >> 2] = 0;
  HEAPF32[$0 + 280 >> 2] = HEAPU8[$0 + 316 | 0] ? Math_fround(0) : $1;
  $3 = $1;
  $5 = Math_fround(Math_abs($1)) < Math_fround(1.1920928955078125e-7) ^ 1;
  $2 = $5;
 }
 if (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
  $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
  HEAP8[20836] = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 56 >> 2]]($4) >>> 4 & 1;
 }
 label$6 : {
  if ($5) {
   $4 = ($5 | 0) > ($2 | 0) ? $2 : $5;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 168 >> 2]]($0, Math_fround($3 * Math_fround($4 | 0)));
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 176 >> 2]]($0);
   if (($4 | 0) < 1) {
    break label$6;
   }
   $2 = 0;
   while (1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 160 >> 2]]($0, $3);
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0);
    $2 = $2 + 1 | 0;
    if (($4 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
   break label$6;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0);
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 120 >> 2]]($0);
 CProfileManager__Increment_Frame_Counter_28_29();
 return $5 | 0;
}
function btSimulationIslandManager__findUnions_28btDispatcher__2c_20btCollisionWorld__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 label$1 : {
  $2 = HEAP32[$2 + 68 >> 2];
  $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2) | 0;
  $6 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2) | 0;
  if (!$6) {
   break label$1;
  }
  $8 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2) | 0;
  if (($6 | 0) < 1) {
   break label$1;
  }
  while (1) {
   $2 = ($7 << 4) + $8 | 0;
   $1 = HEAP32[HEAP32[$2 >> 2] >> 2];
   label$3 : {
    if (!$1) {
     break label$3;
    }
    $2 = HEAP32[HEAP32[$2 + 4 >> 2] >> 2];
    if (!$2 | HEAP32[$1 + 204 >> 2] & 7 | HEAPU8[$2 + 204 | 0] & 7) {
     break label$3;
    }
    $3 = HEAP32[$2 + 208 >> 2];
    $2 = HEAP32[$0 + 16 >> 2];
    $1 = HEAP32[$1 + 208 >> 2];
    $4 = $2 + ($1 << 3) | 0;
    $5 = HEAP32[$4 >> 2];
    if (($1 | 0) != ($5 | 0)) {
     while (1) {
      $1 = ($5 << 3) + $2 | 0;
      HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
      $1 = HEAP32[$1 >> 2];
      $4 = ($1 << 3) + $2 | 0;
      $5 = HEAP32[$4 >> 2];
      if (($1 | 0) != ($5 | 0)) {
       continue;
      }
      break;
     }
    }
    $4 = ($3 << 3) + $2 | 0;
    $5 = HEAP32[$4 >> 2];
    if (($5 | 0) != ($3 | 0)) {
     while (1) {
      $3 = ($5 << 3) + $2 | 0;
      HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
      $3 = HEAP32[$3 >> 2];
      $4 = ($3 << 3) + $2 | 0;
      $5 = HEAP32[$4 >> 2];
      if (($3 | 0) != ($5 | 0)) {
       continue;
      }
      break;
     }
    }
    if (($1 | 0) == ($3 | 0)) {
     break label$3;
    }
    $1 = ($1 << 3) + $2 | 0;
    HEAP32[$1 >> 2] = $3;
    $2 = ($3 << 3) + $2 | 0;
    HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + HEAP32[$1 + 4 >> 2];
   }
   $7 = $7 + 1 | 0;
   if (($6 | 0) != ($7 | 0)) {
    continue;
   }
   break;
  }
 }
}
function btPoint2PointConstraint__btPoint2PointConstraint_28btRigidBody__2c_20btVector3_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0);
 btTypedConstraint__btTypedConstraint_28btTypedConstraintType_2c_20btRigidBody__29($0, 3, $1);
 HEAP32[$0 >> 2] = 3368;
 $3 = HEAP32[$2 + 4 >> 2];
 $4 = HEAP32[$2 >> 2];
 HEAP32[$0 + 300 >> 2] = $4;
 HEAP32[$0 + 304 >> 2] = $3;
 $4 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$2 + 8 >> 2];
 HEAP32[$0 + 308 >> 2] = $3;
 HEAP32[$0 + 312 >> 2] = $4;
 $8 = HEAPF32[$1 + 52 >> 2];
 $9 = HEAPF32[$1 + 8 >> 2];
 $10 = HEAPF32[$1 + 12 >> 2];
 $11 = HEAPF32[$1 + 56 >> 2];
 $12 = HEAPF32[$1 + 20 >> 2];
 $13 = HEAPF32[$1 + 24 >> 2];
 $14 = HEAPF32[$1 + 28 >> 2];
 $15 = HEAPF32[$1 + 60 >> 2];
 $16 = HEAPF32[$1 + 36 >> 2];
 $17 = HEAPF32[$1 + 40 >> 2];
 $5 = HEAPF32[$2 + 8 >> 2];
 $18 = HEAPF32[$1 + 44 >> 2];
 $19 = HEAPF32[$1 + 4 >> 2];
 $6 = HEAPF32[$2 >> 2];
 $7 = HEAPF32[$2 + 4 >> 2];
 HEAP32[$0 + 356 >> 2] = 0;
 HEAP32[$0 + 348 >> 2] = 1050253722;
 HEAP32[$0 + 352 >> 2] = 1065353216;
 HEAP8[$0 + 344 | 0] = 0;
 HEAP32[$0 + 328 >> 2] = 0;
 HEAP32[$0 + 332 >> 2] = 0;
 HEAPF32[$0 + 324 >> 2] = $15 + Math_fround(Math_fround(Math_fround($6 * $16) + Math_fround($7 * $17)) + Math_fround($5 * $18));
 HEAPF32[$0 + 320 >> 2] = $11 + Math_fround(Math_fround(Math_fround($6 * $12) + Math_fround($7 * $13)) + Math_fround($5 * $14));
 HEAPF32[$0 + 316 >> 2] = $8 + Math_fround(Math_fround(Math_fround($6 * $19) + Math_fround($7 * $9)) + Math_fround($5 * $10));
 return $0;
}
function btDiscreteDynamicsWorld__serialize_28btSerializer__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 32 >> 2]]($1);
 $3 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, 104, 1) | 0;
 $2 = memset(HEAP32[$3 + 8 >> 2], 0, 104);
 HEAP32[$2 + 88 >> 2] = HEAP32[$0 + 264 >> 2];
 HEAP32[$2 + 92 >> 2] = HEAP32[$0 + 268 >> 2];
 HEAP32[$2 + 96 >> 2] = HEAP32[$0 + 272 >> 2];
 HEAP32[$2 + 100 >> 2] = HEAP32[$0 + 276 >> 2];
 HEAP32[$2 >> 2] = HEAP32[$0 + 92 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 96 >> 2];
 HEAP32[$2 + 8 >> 2] = HEAP32[$0 + 100 >> 2];
 HEAP32[$2 + 12 >> 2] = HEAP32[$0 + 104 >> 2];
 HEAP32[$2 + 16 >> 2] = HEAP32[$0 + 108 >> 2];
 HEAP32[$2 + 20 >> 2] = HEAP32[$0 + 116 >> 2];
 HEAP32[$2 + 24 >> 2] = HEAP32[$0 + 120 >> 2];
 HEAP32[$2 + 28 >> 2] = HEAP32[$0 + 124 >> 2];
 HEAP32[$2 + 32 >> 2] = HEAP32[$0 + 128 >> 2];
 HEAP32[$2 + 36 >> 2] = HEAP32[$0 + 132 >> 2];
 HEAP32[$2 + 40 >> 2] = HEAP32[$0 + 148 >> 2];
 HEAP32[$2 + 44 >> 2] = HEAP32[$0 + 152 >> 2];
 HEAP32[$2 + 48 >> 2] = HEAP32[$0 + 156 >> 2];
 HEAP32[$2 + 52 >> 2] = HEAP32[$0 + 160 >> 2];
 HEAP32[$2 + 56 >> 2] = HEAP32[$0 + 176 >> 2];
 HEAP32[$2 + 60 >> 2] = HEAP32[$0 + 180 >> 2];
 HEAP32[$2 + 64 >> 2] = HEAP32[$0 + 112 >> 2];
 HEAP32[$2 + 68 >> 2] = HEAP32[$0 + 164 >> 2];
 HEAP32[$2 + 72 >> 2] = HEAP32[$0 + 168 >> 2];
 HEAP32[$2 + 76 >> 2] = HEAP32[$0 + 172 >> 2];
 $4 = HEAP32[$0 + 144 >> 2];
 HEAP32[$2 + 84 >> 2] = 0;
 HEAP32[$2 + 80 >> 2] = $4;
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($1, $3, 2841, 1145853764, $2);
 btCollisionWorld__serializeCollisionObjects_28btSerializer__29($0, $1);
 btDiscreteDynamicsWorld__serializeRigidBodies_28btSerializer__29($0, $1);
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1);
}
function btSequentialImpulseConstraintSolver__addFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20btContactSolverInfo_20const__2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 $8 = HEAP32[$0 + 68 >> 2];
 $9 = $8;
 label$1 : {
  if (($9 | 0) != HEAP32[$0 + 72 >> 2]) {
   break label$1;
  }
  $9 = $8;
  $14 = $9 ? $9 << 1 : 1;
  if (($9 | 0) >= ($14 | 0)) {
   break label$1;
  }
  if ($14) {
   $15 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($14, 152), 16);
   $9 = HEAP32[$0 + 68 >> 2];
  } else {
   $9 = $8;
  }
  $16 = $9;
  if (($16 | 0) >= 1) {
   $9 = 0;
   while (1) {
    $17 = Math_imul($9, 152);
    memcpy($17 + $15 | 0, HEAP32[$0 + 76 >> 2] + $17 | 0, 152);
    $9 = $9 + 1 | 0;
    if (($16 | 0) != ($9 | 0)) {
     continue;
    }
    break;
   }
  }
  $9 = HEAP32[$0 + 76 >> 2];
  if ($9) {
   if (HEAPU8[$0 + 80 | 0]) {
    btAlignedFreeInternal_28void__29($9);
   }
   HEAP32[$0 + 76 >> 2] = 0;
  }
  HEAP32[$0 + 76 >> 2] = $15;
  HEAP32[$0 + 72 >> 2] = $14;
  HEAP8[$0 + 80 | 0] = 1;
  $9 = HEAP32[$0 + 68 >> 2];
 }
 HEAP32[$0 + 68 >> 2] = $9 + 1;
 $9 = HEAP32[$0 + 76 >> 2] + Math_imul($8, 152) | 0;
 HEAP32[$9 + 140 >> 2] = $4;
 btSequentialImpulseConstraintSolver__setupFrictionConstraint_28btSolverConstraint__2c_20btVector3_20const__2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20btContactSolverInfo_20const__2c_20float_2c_20float_29($0, $9, $1, $2, $3, $5, $6, $7, $9, $9, $10, $11, $12, $13);
 return $9;
}
function LocalSupportVertexCallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0);
 $5 = HEAPF32[$0 + 24 >> 2];
 $8 = HEAPF32[$0 + 28 >> 2];
 $9 = HEAPF32[$0 + 32 >> 2];
 $4 = Math_fround(Math_fround(Math_fround($5 * HEAPF32[$1 >> 2]) + Math_fround($8 * HEAPF32[$1 + 4 >> 2])) + Math_fround($9 * HEAPF32[$1 + 8 >> 2]));
 $6 = HEAPF32[$0 + 20 >> 2];
 if (!!($4 > $6)) {
  HEAPF32[$0 + 20 >> 2] = $4;
  $2 = HEAP32[$1 + 12 >> 2];
  $3 = HEAP32[$1 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $3;
  HEAP32[$0 + 16 >> 2] = $2;
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $3;
  $6 = $4;
 }
 $4 = Math_fround(Math_fround(Math_fround($5 * HEAPF32[$1 + 16 >> 2]) + Math_fround($8 * HEAPF32[$1 + 20 >> 2])) + Math_fround($9 * HEAPF32[$1 + 24 >> 2]));
 if (!!($4 > $6)) {
  HEAPF32[$0 + 20 >> 2] = $4;
  $7 = $1 + 16 | 0;
  $3 = HEAP32[$7 + 8 >> 2];
  $2 = HEAP32[$7 + 12 >> 2];
  HEAP32[$0 + 12 >> 2] = $3;
  HEAP32[$0 + 16 >> 2] = $2;
  $3 = HEAP32[$1 + 20 >> 2];
  $2 = HEAP32[$1 + 16 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $3;
  $6 = $4;
 }
 $5 = Math_fround(Math_fround(Math_fround($5 * HEAPF32[$1 + 32 >> 2]) + Math_fround($8 * HEAPF32[$1 + 36 >> 2])) + Math_fround($9 * HEAPF32[$1 + 40 >> 2]));
 if (!!($5 > $6)) {
  HEAPF32[$0 + 20 >> 2] = $5;
  $7 = $1;
  $1 = $1 + 32 | 0;
  $2 = HEAP32[$1 + 12 >> 2];
  $3 = HEAP32[$1 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $3;
  HEAP32[$0 + 16 >> 2] = $2;
  $2 = HEAP32[$7 + 32 >> 2];
  $3 = HEAP32[$7 + 36 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $3;
 }
}
function btCompoundShape___btCompoundShape_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 11028;
 $1 = HEAP32[$0 + 68 >> 2];
 if ($1) {
  btDbvt___btDbvt_28_29($1);
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 68 >> 2]);
 }
 $1 = HEAP32[$0 + 172 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 176 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 172 >> 2] = 0;
 }
 HEAP32[$0 + 172 >> 2] = 0;
 HEAP32[$0 + 164 >> 2] = 0;
 HEAP32[$0 + 168 >> 2] = 0;
 HEAP8[$0 + 176 | 0] = 1;
 $1 = HEAP32[$0 + 152 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 156 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 152 >> 2] = 0;
 }
 HEAP32[$0 + 152 >> 2] = 0;
 HEAP32[$0 + 144 >> 2] = 0;
 HEAP32[$0 + 148 >> 2] = 0;
 HEAP8[$0 + 156 | 0] = 1;
 $1 = HEAP32[$0 + 132 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 136 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 132 >> 2] = 0;
 }
 HEAP32[$0 + 132 >> 2] = 0;
 HEAP32[$0 + 124 >> 2] = 0;
 HEAP32[$0 + 128 >> 2] = 0;
 HEAP8[$0 + 136 | 0] = 1;
 $1 = HEAP32[$0 + 112 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 116 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 112 >> 2] = 0;
 }
 HEAP32[$0 + 112 >> 2] = 0;
 HEAP32[$0 + 104 >> 2] = 0;
 HEAP32[$0 + 108 >> 2] = 0;
 HEAP8[$0 + 116 | 0] = 1;
 $1 = HEAP32[$0 + 92 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 96 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 92 >> 2] = 0;
 }
 HEAP32[$0 + 92 >> 2] = 0;
 HEAP32[$0 + 84 >> 2] = 0;
 HEAP32[$0 + 88 >> 2] = 0;
 HEAP8[$0 + 96 | 0] = 1;
 $1 = HEAP32[$0 + 28 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 32 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 28 >> 2] = 0;
 }
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP8[$0 + 32 | 0] = 1;
 return $0 | 0;
}
function btCollisionDispatcher__defaultNearCallback_28btBroadphasePair__2c_20btCollisionDispatcher__2c_20btDispatcherInfo_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0);
 $3 = global$0 - 96 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $5 = HEAP32[HEAP32[$0 >> 2] >> 2];
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2];
 label$2 : {
  if (!FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($1, $5, $6)) {
   break label$2;
  }
  $4 = HEAP32[$5 + 192 >> 2];
  HEAP32[$3 + 88 >> 2] = -1;
  HEAP32[$3 + 92 >> 2] = -1;
  HEAP32[$3 + 84 >> 2] = $5 + 4;
  HEAP32[$3 + 80 >> 2] = $5;
  HEAP32[$3 + 76 >> 2] = $4;
  HEAP32[$3 + 72 >> 2] = 0;
  $4 = HEAP32[$6 + 192 >> 2];
  HEAP32[$3 + 64 >> 2] = -1;
  HEAP32[$3 + 68 >> 2] = -1;
  HEAP32[$3 + 60 >> 2] = $6 + 4;
  HEAP32[$3 + 56 >> 2] = $6;
  HEAP32[$3 + 52 >> 2] = $4;
  HEAP32[$3 + 48 >> 2] = 0;
  if (!HEAP32[$0 + 8 >> 2]) {
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $3 + 72 | 0, $3 + 48 | 0, 0, 1) | 0;
   HEAP32[$0 + 8 >> 2] = $1;
   if (!$1) {
    break label$2;
   }
  }
  $1 = btManifoldResult__btManifoldResult_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($3 + 8 | 0, $3 + 72 | 0, $3 + 48 | 0);
  $0 = HEAP32[$0 + 8 >> 2];
  if (HEAP32[$2 + 8 >> 2] == 1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $3 + 72 | 0, $3 + 48 | 0, $2, $1);
   break label$2;
  }
  $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $5, $6, $2, $1));
  if (!(HEAPF32[$2 + 12 >> 2] > $7)) {
   break label$2;
  }
  HEAPF32[$2 + 12 >> 2] = $7;
 }
 $0 = $3 + 96 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionWorld__ClosestConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = Math_fround(0);
 $3 = global$0 - 32 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP8[$3 + 23 | 0] = $2;
 $0 = HEAP32[$3 + 28 >> 2];
 HEAPF32[$0 + 4 >> 2] = HEAPF32[HEAP32[$3 + 24 >> 2] + 40 >> 2];
 HEAP32[$0 + 80 >> 2] = HEAP32[HEAP32[$3 + 24 >> 2] >> 2];
 label$2 : {
  if (HEAP8[$3 + 23 | 0] & 1) {
   $4 = HEAP32[$3 + 24 >> 2];
   $1 = HEAP32[$4 + 8 >> 2];
   $2 = HEAP32[$4 + 12 >> 2];
   HEAP32[$0 + 48 >> 2] = $1;
   HEAP32[$0 + 52 >> 2] = $2;
   $1 = HEAP32[$4 + 20 >> 2];
   $2 = HEAP32[$4 + 16 >> 2];
   HEAP32[$0 + 56 >> 2] = $2;
   HEAP32[$0 + 60 >> 2] = $1;
   break label$2;
  }
  operator__28btMatrix3x3_20const__2c_20btVector3_20const__29($3, btTransform__getBasis_28_29_20const(btCollisionObject__getWorldTransform_28_29_20const(HEAP32[$0 + 80 >> 2])), HEAP32[$3 + 24 >> 2] + 8 | 0);
  $2 = HEAP32[$3 + 4 >> 2];
  $1 = HEAP32[$3 >> 2];
  HEAP32[$0 + 48 >> 2] = $1;
  HEAP32[$0 + 52 >> 2] = $2;
  $1 = HEAP32[$3 + 12 >> 2];
  $2 = HEAP32[$3 + 8 >> 2];
  HEAP32[$0 + 56 >> 2] = $2;
  HEAP32[$0 + 60 >> 2] = $1;
 }
 $4 = HEAP32[$3 + 24 >> 2];
 $1 = HEAP32[$4 + 24 >> 2];
 $2 = HEAP32[$4 + 28 >> 2];
 HEAP32[$0 + 64 >> 2] = $1;
 HEAP32[$0 + 68 >> 2] = $2;
 $1 = HEAP32[$4 + 36 >> 2];
 $2 = HEAP32[$4 + 32 >> 2];
 HEAP32[$0 + 72 >> 2] = $2;
 HEAP32[$0 + 76 >> 2] = $1;
 $5 = HEAPF32[HEAP32[$3 + 24 >> 2] + 40 >> 2];
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($5);
}
function SupportVertexCallback__processTriangle_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0);
 $5 = HEAPF32[$0 + 88 >> 2];
 $8 = HEAPF32[$0 + 92 >> 2];
 $9 = HEAPF32[$0 + 96 >> 2];
 $4 = Math_fround(Math_fround(Math_fround($5 * HEAPF32[$1 >> 2]) + Math_fround($8 * HEAPF32[$1 + 4 >> 2])) + Math_fround($9 * HEAPF32[$1 + 8 >> 2]));
 $6 = HEAPF32[$0 + 84 >> 2];
 if (!!($4 > $6)) {
  HEAPF32[$0 + 84 >> 2] = $4;
  $2 = HEAP32[$1 + 12 >> 2];
  $3 = HEAP32[$1 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $3;
  HEAP32[$0 + 16 >> 2] = $2;
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $3;
  $6 = $4;
 }
 $4 = Math_fround(Math_fround(Math_fround($5 * HEAPF32[$1 + 16 >> 2]) + Math_fround($8 * HEAPF32[$1 + 20 >> 2])) + Math_fround($9 * HEAPF32[$1 + 24 >> 2]));
 if (!!($4 > $6)) {
  HEAPF32[$0 + 84 >> 2] = $4;
  $7 = $1 + 16 | 0;
  $3 = HEAP32[$7 + 8 >> 2];
  $2 = HEAP32[$7 + 12 >> 2];
  HEAP32[$0 + 12 >> 2] = $3;
  HEAP32[$0 + 16 >> 2] = $2;
  $3 = HEAP32[$1 + 20 >> 2];
  $2 = HEAP32[$1 + 16 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $3;
  $6 = $4;
 }
 $5 = Math_fround(Math_fround(Math_fround($5 * HEAPF32[$1 + 32 >> 2]) + Math_fround($8 * HEAPF32[$1 + 36 >> 2])) + Math_fround($9 * HEAPF32[$1 + 40 >> 2]));
 if (!!($5 > $6)) {
  HEAPF32[$0 + 84 >> 2] = $5;
  $7 = $1;
  $1 = $1 + 32 | 0;
  $2 = HEAP32[$1 + 12 >> 2];
  $3 = HEAP32[$1 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $3;
  HEAP32[$0 + 16 >> 2] = $2;
  $2 = HEAP32[$7 + 32 >> 2];
  $3 = HEAP32[$7 + 36 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $3;
 }
}
function btGeneric6DofSpring2Constraint__setParam_28int_2c_20float_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = $3 | 0;
 var $4 = 0;
 label$1 : {
  if ($3 >>> 0 <= 2) {
   $1 = $1 + -1 | 0;
   if ($1 >>> 0 > 3) {
    break label$1;
   }
   label$3 : {
    switch ($1 - 1 | 0) {
    case 0:
     $3 = $3 << 2;
     HEAPF32[($3 + $0 | 0) + 728 >> 2] = $2;
     HEAP32[$0 + 1456 >> 2] = HEAP32[$0 + 1456 >> 2] | 2 << $3;
     return;
    case 2:
     $3 = $3 << 2;
     HEAPF32[($3 + $0 | 0) + 744 >> 2] = $2;
     HEAP32[$0 + 1456 >> 2] = HEAP32[$0 + 1456 >> 2] | 1 << $3;
     return;
    default:
     $3 = $3 << 2;
     HEAPF32[($3 + $0 | 0) + 760 >> 2] = $2;
     HEAP32[$0 + 1456 >> 2] = HEAP32[$0 + 1456 >> 2] | 8 << $3;
     return;
    case 1:
     break label$3;
    }
   }
   $3 = $3 << 2;
   HEAPF32[($3 + $0 | 0) + 776 >> 2] = $2;
   HEAP32[$0 + 1456 >> 2] = HEAP32[$0 + 1456 >> 2] | 4 << $3;
   return;
  }
  $4 = $3 + -3 | 0;
  if ($4 >>> 0 > 2) {
   break label$1;
  }
  $1 = $1 + -1 | 0;
  if ($1 >>> 0 > 3) {
   break label$1;
  }
  label$7 : {
   switch ($1 - 1 | 0) {
   case 0:
    HEAPF32[(Math_imul($4, 88) + $0 | 0) + 980 >> 2] = $2;
    HEAP32[$0 + 1456 >> 2] = HEAP32[$0 + 1456 >> 2] | 2 << ($3 << 2);
    return;
   case 2:
    HEAPF32[(Math_imul($4, 88) + $0 | 0) + 984 >> 2] = $2;
    HEAP32[$0 + 1456 >> 2] = HEAP32[$0 + 1456 >> 2] | 1 << ($3 << 2);
    return;
   default:
    HEAPF32[(Math_imul($4, 88) + $0 | 0) + 988 >> 2] = $2;
    HEAP32[$0 + 1456 >> 2] = HEAP32[$0 + 1456 >> 2] | 8 << ($3 << 2);
    return;
   case 1:
    break label$7;
   }
  }
  HEAPF32[(Math_imul($4, 88) + $0 | 0) + 992 >> 2] = $2;
  HEAP32[$0 + 1456 >> 2] = HEAP32[$0 + 1456 >> 2] | 4 << ($3 << 2);
 }
}
function btDbvtBroadphase__getBroadphaseAabb_28btVector3__2c_20btVector3__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
 $4 = HEAP32[$0 + 44 >> 2];
 $0 = HEAP32[$0 + 4 >> 2];
 label$1 : {
  if ($0) {
   $9 = HEAPF32[$0 >> 2];
   if ($4) {
    $3 = HEAPF32[$0 + 20 >> 2];
    $5 = HEAPF32[$4 + 20 >> 2];
    $5 = $3 > $5 ? $3 : $5;
    $3 = HEAPF32[$0 + 8 >> 2];
    $6 = HEAPF32[$4 + 8 >> 2];
    $6 = $3 < $6 ? $3 : $6;
    $3 = HEAPF32[$0 + 4 >> 2];
    $7 = HEAPF32[$4 + 4 >> 2];
    $7 = $3 < $7 ? $3 : $7;
    $3 = HEAPF32[$0 + 16 >> 2];
    $8 = HEAPF32[$4 + 16 >> 2];
    $8 = $3 > $8 ? $3 : $8;
    $3 = HEAPF32[$4 >> 2];
    $9 = $9 < $3 ? $9 : $3;
    $3 = HEAPF32[$0 + 24 >> 2];
    $10 = HEAPF32[$4 + 24 >> 2];
    if (!($3 > $10)) {
     $3 = $10;
     break label$1;
    }
    break label$1;
   }
   $10 = HEAPF32[$0 + 28 >> 2];
   $3 = HEAPF32[$0 + 24 >> 2];
   $5 = HEAPF32[$0 + 20 >> 2];
   $8 = HEAPF32[$0 + 16 >> 2];
   $11 = HEAPF32[$0 + 12 >> 2];
   $6 = HEAPF32[$0 + 8 >> 2];
   $7 = HEAPF32[$0 + 4 >> 2];
   break label$1;
  }
  if (!$4) {
   break label$1;
  }
  $10 = HEAPF32[$4 + 28 >> 2];
  $3 = HEAPF32[$4 + 24 >> 2];
  $5 = HEAPF32[$4 + 20 >> 2];
  $8 = HEAPF32[$4 + 16 >> 2];
  $11 = HEAPF32[$4 + 12 >> 2];
  $6 = HEAPF32[$4 + 8 >> 2];
  $7 = HEAPF32[$4 + 4 >> 2];
  $9 = HEAPF32[$4 >> 2];
 }
 HEAPF32[$1 + 12 >> 2] = $11;
 HEAPF32[$1 + 8 >> 2] = $6;
 HEAPF32[$1 + 4 >> 2] = $7;
 HEAPF32[$1 >> 2] = $9;
 HEAPF32[$2 + 12 >> 2] = $10;
 HEAPF32[$2 + 8 >> 2] = $3;
 HEAPF32[$2 + 4 >> 2] = $5;
 HEAPF32[$2 >> 2] = $8;
}
function btCylinderShape__updateProp_28float_2c_20float_2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 + -64 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 60 >> 2] = $0;
 HEAPF32[$4 + 56 >> 2] = $1;
 HEAPF32[$4 + 52 >> 2] = $2;
 HEAP32[$4 + 48 >> 2] = $3;
 $3 = HEAP32[$4 + 60 >> 2];
 HEAP32[$3 + 60 >> 2] = HEAP32[$4 + 48 >> 2];
 HEAPF32[$4 + 44 >> 2] = 1;
 HEAPF32[$4 + 40 >> 2] = 1;
 HEAPF32[$4 + 36 >> 2] = 1;
 btVector3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__29($3 + 20 | 0, $4 + 44 | 0, $4 + 40 | 0, $4 + 36 | 0);
 label$2 : {
  if (HEAP32[$3 + 60 >> 2] == 1) {
   $0 = $4 + 56 | 0;
   btVector3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__29($3 + 36 | 0, $0, $4 + 52 | 0, $0);
   break label$2;
  }
  label$4 : {
   if (!HEAP32[$3 + 60 >> 2]) {
    $0 = $4 + 56 | 0;
    btVector3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__29($3 + 36 | 0, $4 + 52 | 0, $0, $0);
    break label$4;
   }
   $0 = $4 + 56 | 0;
   btVector3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__29($3 + 36 | 0, $0, $0, $4 + 52 | 0);
  }
 }
 HEAPF32[$4 + 12 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 48 >> 2]]($3);
 HEAPF32[$4 + 8 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 48 >> 2]]($3);
 HEAPF32[$4 + 4 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 48 >> 2]]($3);
 $0 = $4 + 16 | 0;
 btVector3__btVector3_28float_20const__2c_20float_20const__2c_20float_20const__29($0, $4 + 12 | 0, $4 + 8 | 0, $4 + 4 | 0);
 btVector3__operator___28btVector3_20const__29_1($3 + 36 | 0, $0);
 $0 = $4 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function cosf($0) {
 var $1 = Math_fround(0), $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 16 | 0;
 $2 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
 $2 = $4 & 2147483647;
 label$2 : {
  if ($2 >>> 0 <= 1061752794) {
   $1 = Math_fround(1);
   if ($2 >>> 0 < 964689920) {
    break label$2;
   }
   $1 = __cosdf(+$0);
   break label$2;
  }
  if ($2 >>> 0 <= 1081824209) {
   $5 = +$0;
   if ($2 >>> 0 >= 1075235812) {
    $1 = Math_fround(-__cosdf((($4 | 0) < 0 ? 3.141592653589793 : -3.141592653589793) + $5));
    break label$2;
   }
   if (($4 | 0) <= -1) {
    $1 = __sindf($5 + 1.5707963267948966);
    break label$2;
   }
   $1 = __sindf(1.5707963267948966 - $5);
   break label$2;
  }
  if ($2 >>> 0 <= 1088565717) {
   if ($2 >>> 0 >= 1085271520) {
    $1 = __cosdf((($4 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + +$0);
    break label$2;
   }
   if (($4 | 0) <= -1) {
    $1 = __sindf(-4.71238898038469 - +$0);
    break label$2;
   }
   $1 = __sindf(+$0 + -4.71238898038469);
   break label$2;
  }
  $1 = Math_fround($0 - $0);
  if ($2 >>> 0 >= 2139095040) {
   break label$2;
  }
  $2 = __rem_pio2f($0, $3 + 8 | 0) & 3;
  if ($2 >>> 0 <= 2) {
   label$11 : {
    switch ($2 - 1 | 0) {
    default:
     $1 = __cosdf(HEAPF64[$3 + 8 >> 3]);
     break label$2;
    case 0:
     $1 = __sindf(-HEAPF64[$3 + 8 >> 3]);
     break label$2;
    case 1:
     break label$11;
    }
   }
   $1 = Math_fround(-__cosdf(HEAPF64[$3 + 8 >> 3]));
   break label$2;
  }
  $1 = __sindf(HEAPF64[$3 + 8 >> 3]);
 }
 $3 = $3 + 16 | 0;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 return $1;
}
function btCollisionShape__getBoundingSphere_28btVector3__2c_20float__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0;
 $3 = global$0 - 96 | 0;
 $12 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $12;
 HEAP32[$3 + 44 >> 2] = 0;
 HEAP32[$3 + 48 >> 2] = 0;
 HEAP32[$3 + 56 >> 2] = 0;
 HEAP32[$3 + 60 >> 2] = 0;
 HEAP32[$3 + 52 >> 2] = 1065353216;
 HEAP32[$3 + 76 >> 2] = 0;
 HEAP32[$3 + 80 >> 2] = 0;
 HEAP32[$3 + 72 >> 2] = 1065353216;
 HEAP32[$3 + 84 >> 2] = 0;
 HEAP32[$3 + 88 >> 2] = 0;
 HEAP32[$3 + 92 >> 2] = 0;
 HEAP32[$3 + 36 >> 2] = 0;
 HEAP32[$3 + 40 >> 2] = 0;
 HEAP32[$3 + 32 >> 2] = 1065353216;
 HEAP32[$3 + 64 >> 2] = 0;
 HEAP32[$3 + 68 >> 2] = 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $3 + 32 | 0, $3 + 16 | 0, $3);
 $7 = HEAPF32[$3 >> 2];
 $8 = HEAPF32[$3 + 16 >> 2];
 $4 = Math_fround($7 - $8);
 $6 = Math_fround($4 * $4);
 $4 = HEAPF32[$3 + 4 >> 2];
 $9 = HEAPF32[$3 + 20 >> 2];
 $5 = Math_fround($4 - $9);
 $6 = Math_fround($6 + Math_fround($5 * $5));
 $5 = HEAPF32[$3 + 8 >> 2];
 $10 = HEAPF32[$3 + 24 >> 2];
 $11 = Math_fround($5 - $10);
 HEAPF32[$2 >> 2] = Math_fround(Math_sqrt(Math_fround($6 + Math_fround($11 * $11)))) * Math_fround(.5);
 HEAP32[$1 + 12 >> 2] = 0;
 HEAPF32[$1 + 8 >> 2] = Math_fround($5 + $10) * Math_fround(.5);
 HEAPF32[$1 + 4 >> 2] = Math_fround($4 + $9) * Math_fround(.5);
 HEAPF32[$1 >> 2] = Math_fround($7 + $8) * Math_fround(.5);
 $0 = $3 + 96 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function sinf($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 $1 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
 $1 = $4 & 2147483647;
 label$2 : {
  if ($1 >>> 0 <= 1061752794) {
   if ($1 >>> 0 < 964689920) {
    break label$2;
   }
   $0 = __sindf(+$0);
   break label$2;
  }
  if ($1 >>> 0 <= 1081824209) {
   $3 = +$0;
   if ($1 >>> 0 <= 1075235811) {
    if (($4 | 0) <= -1) {
     $0 = Math_fround(-__cosdf($3 + 1.5707963267948966));
     break label$2;
    }
    $0 = __cosdf($3 + -1.5707963267948966);
    break label$2;
   }
   $0 = __sindf(-((($4 | 0) < 0 ? 3.141592653589793 : -3.141592653589793) + $3));
   break label$2;
  }
  if ($1 >>> 0 <= 1088565717) {
   $3 = +$0;
   if ($1 >>> 0 <= 1085271519) {
    if (($4 | 0) <= -1) {
     $0 = __cosdf($3 + 4.71238898038469);
     break label$2;
    }
    $0 = Math_fround(-__cosdf($3 + -4.71238898038469));
    break label$2;
   }
   $0 = __sindf((($4 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + $3);
   break label$2;
  }
  if ($1 >>> 0 >= 2139095040) {
   $0 = Math_fround($0 - $0);
   break label$2;
  }
  $1 = __rem_pio2f($0, $2 + 8 | 0) & 3;
  if ($1 >>> 0 <= 2) {
   label$12 : {
    switch ($1 - 1 | 0) {
    default:
     $0 = __sindf(HEAPF64[$2 + 8 >> 3]);
     break label$2;
    case 0:
     $0 = __cosdf(HEAPF64[$2 + 8 >> 3]);
     break label$2;
    case 1:
     break label$12;
    }
   }
   $0 = __sindf(-HEAPF64[$2 + 8 >> 3]);
   break label$2;
  }
  $0 = Math_fround(-__cosdf(HEAPF64[$2 + 8 >> 3]));
 }
 $2 = $2 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btSequentialImpulseConstraintSolver__addTorsionalFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20float_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
 var $14 = 0;
 $5 = HEAP32[$0 + 88 >> 2];
 $7 = $5;
 label$1 : {
  if (($7 | 0) != HEAP32[$0 + 92 >> 2]) {
   break label$1;
  }
  $7 = $5;
  $9 = $7 ? $7 << 1 : 1;
  if (($7 | 0) >= ($9 | 0)) {
   break label$1;
  }
  if ($9) {
   $14 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($9, 152), 16);
   $7 = HEAP32[$0 + 88 >> 2];
  } else {
   $7 = $5;
  }
  $8 = $7;
  if (($8 | 0) >= 1) {
   $7 = 0;
   while (1) {
    $10 = Math_imul($7, 152);
    memcpy($10 + $14 | 0, HEAP32[$0 + 96 >> 2] + $10 | 0, 152);
    $7 = $7 + 1 | 0;
    if (($8 | 0) != ($7 | 0)) {
     continue;
    }
    break;
   }
  }
  $7 = HEAP32[$0 + 96 >> 2];
  if ($7) {
   if (HEAPU8[$0 + 100 | 0]) {
    btAlignedFreeInternal_28void__29($7);
   }
   HEAP32[$0 + 96 >> 2] = 0;
  }
  HEAP32[$0 + 96 >> 2] = $14;
  HEAP32[$0 + 92 >> 2] = $9;
  HEAP8[$0 + 100 | 0] = 1;
  $7 = HEAP32[$0 + 88 >> 2];
 }
 HEAP32[$0 + 88 >> 2] = $7 + 1;
 $7 = HEAP32[$0 + 96 >> 2] + Math_imul($5, 152) | 0;
 HEAP32[$7 + 140 >> 2] = $4;
 btSequentialImpulseConstraintSolver__setupTorsionalFrictionConstraint_28btSolverConstraint__2c_20btVector3_20const__2c_20int_2c_20int_2c_20btManifoldPoint__2c_20float_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20float_2c_20float_29($0, $7, $1, $2, $3, $7, $6, $7, $7, $7, $7, $6, $12, $13);
 return $7;
}
function btSequentialImpulseConstraintSolver__applyAnisotropicFriction_28btCollisionObject__2c_20btVector3__2c_20int_29($0, $1, $2) {
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0);
 if (!(!$0 | !(HEAP32[$0 + 180 >> 2] & $2))) {
  $17 = HEAPF32[$0 + 172 >> 2];
  $10 = HEAPF32[$0 + 44 >> 2];
  $11 = HEAPF32[$0 + 12 >> 2];
  $12 = HEAPF32[$0 + 28 >> 2];
  $3 = HEAPF32[$0 + 36 >> 2];
  $13 = HEAPF32[$0 + 20 >> 2];
  $6 = HEAPF32[$0 + 168 >> 2];
  $4 = HEAPF32[$0 + 40 >> 2];
  $14 = HEAPF32[$0 + 8 >> 2];
  $15 = HEAPF32[$0 + 24 >> 2];
  $5 = HEAPF32[$0 + 164 >> 2];
  $16 = HEAPF32[$0 + 4 >> 2];
  HEAP32[$1 + 12 >> 2] = 0;
  $7 = HEAPF32[$1 >> 2];
  $8 = HEAPF32[$1 + 4 >> 2];
  $9 = HEAPF32[$1 + 8 >> 2];
  $5 = Math_fround($5 * Math_fround(Math_fround(Math_fround($16 * $7) + Math_fround($13 * $8)) + Math_fround($3 * $9)));
  $18 = Math_fround($3 * $5);
  $3 = Math_fround($6 * Math_fround(Math_fround(Math_fround($7 * $14) + Math_fround($8 * $15)) + Math_fround($9 * $4)));
  $6 = Math_fround($18 + Math_fround($4 * $3));
  $4 = Math_fround($17 * Math_fround(Math_fround(Math_fround($7 * $11) + Math_fround($8 * $12)) + Math_fround($9 * $10)));
  HEAPF32[$1 + 8 >> 2] = $6 + Math_fround($10 * $4);
  HEAPF32[$1 + 4 >> 2] = Math_fround(Math_fround($13 * $5) + Math_fround($15 * $3)) + Math_fround($12 * $4);
  HEAPF32[$1 >> 2] = Math_fround(Math_fround($16 * $5) + Math_fround($14 * $3)) + Math_fround($11 * $4);
 }
}
function btHashedSimplePairCache__removeAllPairs_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $1 = HEAP32[$0 + 16 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 20 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 16 >> 2] = 0;
 }
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP8[$0 + 20 | 0] = 1;
 $1 = HEAP32[$0 + 36 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 40 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 36 >> 2] = 0;
 }
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP8[$0 + 40 | 0] = 1;
 $1 = HEAP32[$0 + 56 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 60 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 56 >> 2] = 0;
 }
 $1 = 0;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP8[$0 + 60 | 0] = 1;
 if (HEAP32[$0 + 12 >> 2] <= 1) {
  $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(24, 16);
  $5 = HEAP32[$0 + 8 >> 2];
  if (($5 | 0) >= 1) {
   while (1) {
    $2 = Math_imul($1, 12);
    $6 = $4 + $2 | 0;
    $2 = HEAP32[$0 + 16 >> 2] + $2 | 0;
    $3 = HEAP32[$2 >> 2];
    $7 = HEAP32[$2 + 4 >> 2];
    $8 = $3;
    $3 = $6;
    HEAP32[$3 >> 2] = $8;
    HEAP32[$3 + 4 >> 2] = $7;
    HEAP32[$3 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
    $1 = $1 + 1 | 0;
    if (($5 | 0) != ($1 | 0)) {
     continue;
    }
    break;
   }
  }
  $1 = HEAP32[$0 + 16 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 20 | 0]) {
    btAlignedFreeInternal_28void__29($1);
   }
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = $4;
  HEAP8[$0 + 20 | 0] = 1;
  HEAP32[$0 + 12 >> 2] = 2;
 }
 btHashedSimplePairCache__growTables_28_29($0);
}
function btRigidBody__addConstraintRef_28btTypedConstraint__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 label$1 : {
  $2 = HEAP32[$0 + 548 >> 2];
  label$2 : {
   if (($2 | 0) < 1) {
    break label$2;
   }
   $4 = HEAP32[$0 + 556 >> 2];
   while (1) {
    if (HEAP32[($3 << 2) + $4 >> 2] != ($1 | 0)) {
     $3 = $3 + 1 | 0;
     if (($3 | 0) != ($2 | 0)) {
      continue;
     }
     break label$2;
    }
    break;
   }
   if (($2 | 0) != ($3 | 0)) {
    break label$1;
   }
  }
  label$5 : {
   if (HEAP32[$0 + 552 >> 2] != ($2 | 0)) {
    break label$5;
   }
   $5 = $2 ? $2 << 1 : 1;
   if (($2 | 0) >= ($5 | 0)) {
    break label$5;
   }
   if ($5) {
    $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 2, 16);
    $2 = HEAP32[$0 + 548 >> 2];
   }
   if (($2 | 0) >= 1) {
    $3 = 0;
    while (1) {
     $4 = $3 << 2;
     HEAP32[$6 + $4 >> 2] = HEAP32[HEAP32[$0 + 556 >> 2] + $4 >> 2];
     $3 = $3 + 1 | 0;
     if (($3 | 0) != ($2 | 0)) {
      continue;
     }
     break;
    }
   }
   $3 = HEAP32[$0 + 556 >> 2];
   if ($3) {
    if (HEAPU8[$0 + 560 | 0]) {
     btAlignedFreeInternal_28void__29($3);
     $2 = HEAP32[$0 + 548 >> 2];
    }
    HEAP32[$0 + 556 >> 2] = 0;
   }
   HEAP32[$0 + 556 >> 2] = $6;
   HEAP32[$0 + 552 >> 2] = $5;
   HEAP8[$0 + 560 | 0] = 1;
  }
  HEAP32[HEAP32[$0 + 556 >> 2] + ($2 << 2) >> 2] = $1;
  HEAP32[$0 + 548 >> 2] = $2 + 1;
  $3 = HEAP32[$1 + 32 >> 2];
  $2 = HEAP32[$1 + 28 >> 2];
  if (($2 | 0) == ($0 | 0)) {
   btCollisionObject__setIgnoreCollisionCheck_28btCollisionObject_20const__2c_20bool_29($2, $3, 1);
   return;
  }
  btCollisionObject__setIgnoreCollisionCheck_28btCollisionObject_20const__2c_20bool_29($3, $2, 1);
 }
}
function btCollisionWorld__ClosestRayResultCallback__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = Math_fround(0);
 $3 = global$0 - 32 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP8[$3 + 23 | 0] = $2;
 $1 = HEAP32[$3 + 28 >> 2];
 HEAPF32[$1 + 4 >> 2] = HEAPF32[HEAP32[$3 + 24 >> 2] + 24 >> 2];
 HEAP32[$1 + 8 >> 2] = HEAP32[HEAP32[$3 + 24 >> 2] >> 2];
 label$2 : {
  if (HEAP8[$3 + 23 | 0] & 1) {
   $2 = HEAP32[$3 + 24 >> 2];
   $4 = HEAP32[$2 + 8 >> 2];
   $0 = HEAP32[$2 + 12 >> 2];
   HEAP32[$1 + 52 >> 2] = $4;
   HEAP32[$1 + 56 >> 2] = $0;
   $4 = HEAP32[$2 + 20 >> 2];
   $0 = HEAP32[$2 + 16 >> 2];
   HEAP32[$1 + 60 >> 2] = $0;
   HEAP32[$1 + 64 >> 2] = $4;
   $0 = $1;
   break label$2;
  }
  operator__28btMatrix3x3_20const__2c_20btVector3_20const__29($3, btTransform__getBasis_28_29_20const(btCollisionObject__getWorldTransform_28_29_20const(HEAP32[$1 + 8 >> 2])), HEAP32[$3 + 24 >> 2] + 8 | 0);
  $0 = HEAP32[$3 + 4 >> 2];
  $4 = HEAP32[$3 >> 2];
  HEAP32[$1 + 52 >> 2] = $4;
  HEAP32[$1 + 56 >> 2] = $0;
  $4 = HEAP32[$3 + 12 >> 2];
  $0 = HEAP32[$3 + 8 >> 2];
  HEAP32[$1 + 60 >> 2] = $0;
  HEAP32[$1 + 64 >> 2] = $4;
  $0 = $1;
 }
 btVector3__setInterpolate3_28btVector3_20const__2c_20btVector3_20const__2c_20float_29($1 + 68 | 0, $1 + 20 | 0, $1 + 36 | 0, HEAPF32[HEAP32[$3 + 24 >> 2] + 24 >> 2]);
 $5 = HEAPF32[HEAP32[$3 + 24 >> 2] + 24 >> 2];
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($5);
}
function btCylinderShape__localGetSupportingVertex_28btVector3_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0);
 $4 = global$0 - 16 | 0;
 $7 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($4, $1, $2);
 $7 = HEAP32[$4 + 12 >> 2];
 $8 = HEAP32[$4 + 8 >> 2];
 HEAP32[$0 + 8 >> 2] = $8;
 HEAP32[$0 + 12 >> 2] = $7;
 $8 = HEAP32[$4 + 4 >> 2];
 $7 = HEAP32[$4 >> 2];
 HEAP32[$0 >> 2] = $7;
 HEAP32[$0 + 4 >> 2] = $8;
 if (Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1)) != Math_fround(0)) {
  $5 = HEAPF32[$2 + 4 >> 2];
  $3 = HEAPF32[$2 >> 2];
  $6 = HEAPF32[$2 + 8 >> 2];
  $9 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1));
  $1 = Math_fround(Math_fround(Math_fround($3 * $3) + Math_fround($5 * $5)) + Math_fround($6 * $6)) < Math_fround(1.4210854715202004e-14);
  $3 = $1 ? Math_fround(-1) : $3;
  $10 = $3;
  $6 = $1 ? Math_fround(-1) : $6;
  $5 = $1 ? Math_fround(-1) : $5;
  $3 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround($6 * $6) + Math_fround(Math_fround($3 * $3) + Math_fround($5 * $5))))));
  HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] + Math_fround($9 * Math_fround($10 * $3));
  HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] + Math_fround($9 * Math_fround($5 * $3));
  HEAPF32[$0 + 8 >> 2] = HEAPF32[$0 + 8 >> 2] + Math_fround($9 * Math_fround($6 * $3));
 }
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundShape__calculateLocalInertia_28float_2c_20btVector3__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0);
 $3 = global$0 - 96 | 0;
 $7 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$3 + 44 >> 2] = 0;
 HEAP32[$3 + 48 >> 2] = 0;
 HEAP32[$3 + 56 >> 2] = 0;
 HEAP32[$3 + 60 >> 2] = 0;
 HEAP32[$3 + 52 >> 2] = 1065353216;
 HEAP32[$3 + 76 >> 2] = 0;
 HEAP32[$3 + 80 >> 2] = 0;
 HEAP32[$3 + 72 >> 2] = 1065353216;
 HEAP32[$3 + 84 >> 2] = 0;
 HEAP32[$3 + 88 >> 2] = 0;
 HEAP32[$3 + 92 >> 2] = 0;
 HEAP32[$3 + 36 >> 2] = 0;
 HEAP32[$3 + 40 >> 2] = 0;
 HEAP32[$3 + 32 >> 2] = 1065353216;
 HEAP32[$3 + 64 >> 2] = 0;
 HEAP32[$3 + 68 >> 2] = 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $3 + 32 | 0, $3 + 16 | 0, $3);
 $4 = HEAPF32[$3 + 24 >> 2];
 $8 = HEAPF32[$3 + 8 >> 2];
 $1 = Math_fround($1 / Math_fround(12));
 $5 = Math_fround(Math_fround(HEAPF32[$3 >> 2] - HEAPF32[$3 + 16 >> 2]) * Math_fround(.5));
 $5 = Math_fround($5 + $5);
 $5 = Math_fround($5 * $5);
 $6 = Math_fround(Math_fround(HEAPF32[$3 + 4 >> 2] - HEAPF32[$3 + 20 >> 2]) * Math_fround(.5));
 $6 = Math_fround($6 + $6);
 $6 = Math_fround($6 * $6);
 HEAPF32[$2 + 8 >> 2] = $1 * Math_fround($5 + $6);
 $4 = Math_fround(Math_fround($8 - $4) * Math_fround(.5));
 $4 = Math_fround($4 + $4);
 $4 = Math_fround($4 * $4);
 HEAPF32[$2 + 4 >> 2] = $1 * Math_fround($5 + $4);
 HEAPF32[$2 >> 2] = $1 * Math_fround($6 + $4);
 $0 = $3 + 96 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTriangleMesh__preallocateIndices_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 label$1 : {
  if (HEAPU8[$0 + 164 | 0]) {
   if (HEAP32[$0 + 132 >> 2] >= ($1 | 0)) {
    break label$1;
   }
   if ($1) {
    $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 2, 16);
   }
   $2 = HEAP32[$0 + 136 >> 2];
   $5 = HEAP32[$0 + 128 >> 2];
   label$4 : {
    label$5 : {
     if (($5 | 0) >= 1) {
      while (1) {
       $6 = $3 << 2;
       HEAP32[$6 + $4 >> 2] = HEAP32[$2 + $6 >> 2];
       $3 = $3 + 1 | 0;
       if (($5 | 0) != ($3 | 0)) {
        continue;
       }
       break label$5;
      }
     }
     if (!$2) {
      break label$4;
     }
    }
    if (HEAPU8[$0 + 140 | 0]) {
     btAlignedFreeInternal_28void__29($2);
    }
    HEAP32[$0 + 136 >> 2] = 0;
   }
   HEAP32[$0 + 136 >> 2] = $4;
   HEAP32[$0 + 132 >> 2] = $1;
   HEAP8[$0 + 140 | 0] = 1;
   return;
  }
  if (HEAP32[$0 + 152 >> 2] >= ($1 | 0)) {
   break label$1;
  }
  if ($1) {
   $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 1, 16);
  }
  $2 = HEAP32[$0 + 156 >> 2];
  $5 = HEAP32[$0 + 148 >> 2];
  label$10 : {
   label$11 : {
    if (($5 | 0) >= 1) {
     while (1) {
      $6 = $3 << 1;
      HEAP16[$6 + $4 >> 1] = HEAPU16[$2 + $6 >> 1];
      $3 = $3 + 1 | 0;
      if (($5 | 0) != ($3 | 0)) {
       continue;
      }
      break label$11;
     }
    }
    if (!$2) {
     break label$10;
    }
   }
   if (HEAPU8[$0 + 160 | 0]) {
    btAlignedFreeInternal_28void__29($2);
   }
   HEAP32[$0 + 156 >> 2] = 0;
  }
  HEAP32[$0 + 156 >> 2] = $4;
  HEAP32[$0 + 152 >> 2] = $1;
  HEAP8[$0 + 160 | 0] = 1;
 }
}
function btPersistentManifold__btPersistentManifold_28_29($0) {
 HEAP32[$0 >> 2] = 1025;
 HEAP32[$0 + 120 >> 2] = 0;
 HEAP32[$0 + 124 >> 2] = 0;
 HEAP32[$0 + 128 >> 2] = 0;
 HEAP32[$0 + 132 >> 2] = 0;
 HEAP32[$0 + 136 >> 2] = 0;
 HEAP32[$0 + 140 >> 2] = 0;
 HEAP32[$0 + 144 >> 2] = 0;
 HEAP32[$0 + 148 >> 2] = 0;
 HEAP32[$0 + 152 >> 2] = 0;
 HEAP32[$0 + 156 >> 2] = 0;
 HEAP32[$0 + 160 >> 2] = 0;
 HEAP32[$0 + 164 >> 2] = 0;
 HEAP32[$0 + 168 >> 2] = 0;
 HEAP32[$0 + 328 >> 2] = 0;
 HEAP32[$0 + 332 >> 2] = 0;
 HEAP32[$0 + 336 >> 2] = 0;
 HEAP32[$0 + 340 >> 2] = 0;
 HEAP32[$0 + 344 >> 2] = 0;
 HEAP32[$0 + 348 >> 2] = 0;
 HEAP32[$0 + 352 >> 2] = 0;
 HEAP32[$0 + 356 >> 2] = 0;
 HEAP32[$0 + 360 >> 2] = 0;
 HEAP32[$0 + 364 >> 2] = 0;
 HEAP32[$0 + 368 >> 2] = 0;
 HEAP32[$0 + 372 >> 2] = 0;
 HEAP32[$0 + 376 >> 2] = 0;
 HEAP32[$0 + 536 >> 2] = 0;
 HEAP32[$0 + 540 >> 2] = 0;
 HEAP32[$0 + 544 >> 2] = 0;
 HEAP32[$0 + 548 >> 2] = 0;
 HEAP32[$0 + 552 >> 2] = 0;
 HEAP32[$0 + 556 >> 2] = 0;
 HEAP32[$0 + 560 >> 2] = 0;
 HEAP32[$0 + 564 >> 2] = 0;
 HEAP32[$0 + 568 >> 2] = 0;
 HEAP32[$0 + 572 >> 2] = 0;
 HEAP32[$0 + 576 >> 2] = 0;
 HEAP32[$0 + 580 >> 2] = 0;
 HEAP32[$0 + 584 >> 2] = 0;
 HEAP32[$0 + 792 >> 2] = 0;
 HEAP32[$0 + 784 >> 2] = 0;
 HEAP32[$0 + 788 >> 2] = 0;
 HEAP32[$0 + 776 >> 2] = 0;
 HEAP32[$0 + 780 >> 2] = 0;
 HEAP32[$0 + 768 >> 2] = 0;
 HEAP32[$0 + 772 >> 2] = 0;
 HEAP32[$0 + 760 >> 2] = 0;
 HEAP32[$0 + 764 >> 2] = 0;
 HEAP32[$0 + 752 >> 2] = 0;
 HEAP32[$0 + 756 >> 2] = 0;
 HEAP32[$0 + 744 >> 2] = 0;
 HEAP32[$0 + 748 >> 2] = 0;
 HEAP32[$0 + 836 >> 2] = 0;
 HEAP32[$0 + 840 >> 2] = 0;
 HEAP32[$0 + 864 >> 2] = 0;
 HEAP32[$0 + 844 >> 2] = 0;
 return $0;
}
function btTypedConstraint__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 HEAP32[$1 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, HEAP32[$0 + 28 >> 2]);
 HEAP32[$1 + 4 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, HEAP32[$0 + 32 >> 2]);
 $4 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 40 >> 2]]($2, $0) | 0;
 $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $4) | 0;
 HEAP32[$1 + 8 >> 2] = $3;
 if ($3) {
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2, $4);
 }
 HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAPU8[$0 + 21 | 0];
 HEAP32[$1 + 40 >> 2] = HEAP32[$0 + 24 >> 2];
 HEAP32[$1 + 44 >> 2] = HEAP32[$0 + 16 >> 2];
 HEAP32[$1 + 48 >> 2] = HEAPU8[$0 + 20 | 0];
 HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 12 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 36 >> 2];
 $3 = HEAP32[$0 + 40 >> 2];
 $2 = 0;
 HEAP32[$1 + 36 >> 2] = 0;
 HEAP32[$1 + 32 >> 2] = $3;
 $4 = HEAP32[$0 + 28 >> 2];
 $3 = HEAP32[$4 + 548 >> 2];
 if (($3 | 0) >= 1) {
  $4 = HEAP32[$4 + 556 >> 2];
  while (1) {
   if (HEAP32[($2 << 2) + $4 >> 2] == ($0 | 0)) {
    HEAP32[$1 + 36 >> 2] = 1;
   }
   $2 = $2 + 1 | 0;
   if (($2 | 0) < ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 $2 = HEAP32[$0 + 32 >> 2];
 $3 = HEAP32[$2 + 548 >> 2];
 if (($3 | 0) >= 1) {
  $4 = HEAP32[$2 + 556 >> 2];
  $2 = 0;
  while (1) {
   if (HEAP32[($2 << 2) + $4 >> 2] == ($0 | 0)) {
    HEAP32[$1 + 36 >> 2] = 1;
   }
   $2 = $2 + 1 | 0;
   if (($2 | 0) < ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 return 3544;
}
function btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btWithoutMarginResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 var $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0);
 $4 = global$0 - 16 | 0;
 $6 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAPF32[$0 + 32 >> 2] = $3;
 $6 = HEAP32[$1 + 4 >> 2];
 $7 = HEAP32[$1 >> 2];
 HEAP32[$0 + 8 >> 2] = $7;
 HEAP32[$0 + 12 >> 2] = $6;
 $7 = HEAP32[$1 + 12 >> 2];
 $6 = HEAP32[$1 + 8 >> 2];
 HEAP32[$0 + 16 >> 2] = $6;
 HEAP32[$0 + 20 >> 2] = $7;
 $8 = HEAPF32[$1 + 8 >> 2];
 $9 = HEAPF32[$2 >> 2];
 $10 = HEAPF32[$1 >> 2];
 $11 = HEAPF32[$2 + 4 >> 2];
 $12 = HEAPF32[$1 + 4 >> 2];
 $13 = HEAPF32[$2 + 8 >> 2];
 $5 = HEAPF32[$0 + 28 >> 2];
 HEAP32[$4 + 12 >> 2] = 0;
 HEAPF32[$4 + 8 >> 2] = $13 - Math_fround($5 * $8);
 HEAPF32[$4 + 4 >> 2] = $11 - Math_fround($5 * $12);
 HEAPF32[$4 >> 2] = $9 - Math_fround($10 * $5);
 $5 = Math_fround(Math_fround($5 + HEAPF32[$0 + 24 >> 2]) + $3);
 HEAPF32[$0 + 32 >> 2] = $5;
 if (!!($5 < Math_fround(0))) {
  HEAP8[$0 + 36 | 0] = 1;
 }
 $0 = HEAP32[$0 + 4 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $4, $5);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $1, $2) {
 var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0);
 $3 = global$0 - 48 | 0;
 $8 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 $4 = HEAPF32[$1 + 8 >> 2];
 $5 = HEAPF32[$1 >> 2];
 $6 = HEAPF32[$1 + 4 >> 2];
 HEAP32[$2 + 12 >> 2] = 0;
 $7 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($5 * $5) + Math_fround($6 * $6)) + Math_fround($4 * $4)))));
 HEAPF32[$2 + 8 >> 2] = $4 * $7;
 HEAPF32[$2 + 4 >> 2] = $6 * $7;
 HEAPF32[$2 >> 2] = $5 * $7;
 $1 = HEAP32[$0 + 120 >> 2];
 $9 = HEAP32[$0 + 124 >> 2];
 $8 = HEAP32[$0 >> 2] + ($9 >> 1) | 0;
 $1 = $9 & 1 ? HEAP32[HEAP32[$8 >> 2] + $1 >> 2] : $1;
 FUNCTION_TABLE[$1]($3 + 32 | 0, $8, $2);
 $4 = HEAPF32[$2 >> 2];
 $5 = HEAPF32[$2 + 4 >> 2];
 $6 = HEAPF32[$2 + 8 >> 2];
 HEAP32[$3 + 12 >> 2] = 0;
 HEAPF32[$3 + 8 >> 2] = -$6;
 HEAPF32[$3 + 4 >> 2] = -$5;
 HEAPF32[$3 >> 2] = -$4;
 gjkepa2_impl__MinkowskiDiff__Support1_28btVector3_20const__29_20const($3 + 16 | 0, $0, $3);
 $4 = HEAPF32[$3 + 16 >> 2];
 $5 = HEAPF32[$3 + 32 >> 2];
 $6 = HEAPF32[$3 + 20 >> 2];
 $7 = HEAPF32[$3 + 36 >> 2];
 $10 = HEAPF32[$3 + 24 >> 2];
 $11 = HEAPF32[$3 + 40 >> 2];
 HEAP32[$2 + 28 >> 2] = 0;
 HEAPF32[$2 + 24 >> 2] = $11 - $10;
 HEAPF32[$2 + 20 >> 2] = $7 - $6;
 HEAPF32[$2 + 16 >> 2] = $5 - $4;
 $0 = $3 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDiscreteDynamicsWorld__internalSingleStepSimulation_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 16 | 0;
 $2 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $5 = CProfileSample__CProfileSample_28char_20const__29($3, 2539);
 $2 = HEAP32[$0 + 84 >> 2];
 if ($2) {
  FUNCTION_TABLE[$2]($0, $1);
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 140 >> 2]]($0, $1);
 $2 = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAPF32[$0 + 28 >> 2] = $1;
 HEAP32[$0 + 48 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 164 >> 2]]($0, $1);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 148 >> 2]]($0);
 HEAPF32[$0 + 104 >> 2] = $1;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 152 >> 2]]($0, $0 + 92 | 0);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 144 >> 2]]($0, $1);
 $6 = CProfileSample__CProfileSample_28char_20const__29($3 + 8 | 0, 2568);
 if (HEAP32[$0 + 296 >> 2] >= 1) {
  while (1) {
   $4 = HEAP32[HEAP32[$0 + 304 >> 2] + ($2 << 2) >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $0, $1);
   $2 = $2 + 1 | 0;
   if (($2 | 0) < HEAP32[$0 + 296 >> 2]) {
    continue;
   }
   break;
  }
 }
 CProfileSample___CProfileSample_28_29($6);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 156 >> 2]]($0, $1);
 $2 = HEAP32[$0 + 80 >> 2];
 if ($2) {
  FUNCTION_TABLE[$2]($0, $1);
 }
 CProfileSample___CProfileSample_28_29($5);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccOverlapFilterCallback__needBroadphaseCollision_28btBroadphaseProxy__2c_20btBroadphaseProxy__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 32 | 0;
 $5 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$3 + 24 >> 2] = $0;
 HEAP32[$3 + 20 >> 2] = $1;
 HEAP32[$3 + 16 >> 2] = $2;
 HEAP8[$3 + 15 | 0] = (HEAP32[HEAP32[$3 + 20 >> 2] + 4 >> 2] & HEAP32[HEAP32[$3 + 16 >> 2] + 8 >> 2]) != 0;
 $4 = HEAP8[$3 + 15 | 0] & 1 ? (HEAP32[HEAP32[$3 + 16 >> 2] + 4 >> 2] & HEAP32[HEAP32[$3 + 20 >> 2] + 8 >> 2]) != 0 : $4;
 HEAP8[$3 + 15 | 0] = $4;
 label$3 : {
  if (HEAP8[$3 + 15 | 0] & 1) {
   HEAP32[$3 + 8 >> 2] = HEAP32[HEAP32[$3 + 20 >> 2] >> 2];
   HEAP32[$3 + 4 >> 2] = HEAP32[HEAP32[$3 + 16 >> 2] >> 2];
   label$5 : {
    if (!(btCollisionObject__isStaticObject_28_29_20const(HEAP32[$3 + 8 >> 2]) & 1)) {
     break label$5;
    }
    if (!(btCollisionObject__isStaticObject_28_29_20const(HEAP32[$3 + 4 >> 2]) & 1)) {
     break label$5;
    }
    HEAP8[$3 + 31 | 0] = 0;
    break label$3;
   }
   label$6 : {
    if ((btCollisionObject__getActivationState_28_29_20const(HEAP32[$3 + 8 >> 2]) | 0) != 2) {
     break label$6;
    }
    if ((btCollisionObject__getActivationState_28_29_20const(HEAP32[$3 + 4 >> 2]) | 0) != 2) {
     break label$6;
    }
    HEAP8[$3 + 31 | 0] = 0;
    break label$3;
   }
  }
  HEAP8[$3 + 31 | 0] = HEAP8[$3 + 15 | 0] & 1;
 }
 $0 = HEAP8[$3 + 31 | 0] & 1;
 $1 = $3 + 32 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function btAlignedObjectArray_btVector3___resize_28int_2c_20btVector3_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 32 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 $5 = HEAP32[$3 + 28 >> 2];
 HEAP32[$3 + 16 >> 2] = btAlignedObjectArray_btVector3___size_28_29_20const($5);
 label$2 : {
  if (HEAP32[$3 + 24 >> 2] < HEAP32[$3 + 16 >> 2]) {
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 24 >> 2];
   while (1) {
    if (HEAP32[$3 + 12 >> 2] < HEAP32[$3 + 16 >> 2]) {
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   break label$2;
  }
  if (HEAP32[$3 + 24 >> 2] > HEAP32[$3 + 16 >> 2]) {
   btAlignedObjectArray_btVector3___reserve_28int_29($5, HEAP32[$3 + 24 >> 2]);
  }
  HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 16 >> 2];
  while (1) {
   if (HEAP32[$3 + 8 >> 2] < HEAP32[$3 + 24 >> 2]) {
    $2 = btVector3__operator_20new_28unsigned_20long_2c_20void__29(16, HEAP32[$5 + 12 >> 2] + (HEAP32[$3 + 8 >> 2] << 4) | 0);
    $4 = HEAP32[$3 + 20 >> 2];
    $1 = HEAP32[$4 >> 2];
    $0 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 >> 2] = $1;
    HEAP32[$2 + 4 >> 2] = $0;
    $1 = HEAP32[$4 + 12 >> 2];
    $0 = HEAP32[$4 + 8 >> 2];
    HEAP32[$2 + 8 >> 2] = $0;
    HEAP32[$2 + 12 >> 2] = $1;
    HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 HEAP32[$5 + 4 >> 2] = HEAP32[$3 + 24 >> 2];
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function memset($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  $3 = $0 + $2 | 0;
  HEAP8[$3 + -1 | 0] = $1;
  HEAP8[$0 | 0] = $1;
  if ($2 >>> 0 < 3) {
   break label$1;
  }
  HEAP8[$3 + -2 | 0] = $1;
  HEAP8[$0 + 1 | 0] = $1;
  HEAP8[$3 + -3 | 0] = $1;
  HEAP8[$0 + 2 | 0] = $1;
  if ($2 >>> 0 < 7) {
   break label$1;
  }
  HEAP8[$3 + -4 | 0] = $1;
  HEAP8[$0 + 3 | 0] = $1;
  if ($2 >>> 0 < 9) {
   break label$1;
  }
  $4 = 0 - $0 & 3;
  $3 = $4 + $0 | 0;
  $1 = Math_imul($1 & 255, 16843009);
  HEAP32[$3 >> 2] = $1;
  $4 = $2 - $4 & -4;
  $2 = $4 + $3 | 0;
  HEAP32[$2 + -4 >> 2] = $1;
  if ($4 >>> 0 < 9) {
   break label$1;
  }
  HEAP32[$3 + 8 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$2 + -8 >> 2] = $1;
  HEAP32[$2 + -12 >> 2] = $1;
  if ($4 >>> 0 < 25) {
   break label$1;
  }
  HEAP32[$3 + 24 >> 2] = $1;
  HEAP32[$3 + 20 >> 2] = $1;
  HEAP32[$3 + 16 >> 2] = $1;
  HEAP32[$3 + 12 >> 2] = $1;
  HEAP32[$2 + -16 >> 2] = $1;
  HEAP32[$2 + -20 >> 2] = $1;
  HEAP32[$2 + -24 >> 2] = $1;
  HEAP32[$2 + -28 >> 2] = $1;
  $6 = $3 & 4 | 24;
  $2 = $4 - $6 | 0;
  if ($2 >>> 0 < 32) {
   break label$1;
  }
  $5 = $1;
  $4 = $1;
  $1 = $3 + $6 | 0;
  while (1) {
   HEAP32[$1 + 24 >> 2] = $5;
   $3 = $4;
   HEAP32[$1 + 28 >> 2] = $3;
   HEAP32[$1 + 16 >> 2] = $5;
   HEAP32[$1 + 20 >> 2] = $3;
   HEAP32[$1 + 8 >> 2] = $5;
   HEAP32[$1 + 12 >> 2] = $3;
   HEAP32[$1 >> 2] = $5;
   HEAP32[$1 + 4 >> 2] = $3;
   $1 = $1 + 32 | 0;
   $2 = $2 + -32 | 0;
   if ($2 >>> 0 > 31) {
    continue;
   }
   break;
  }
 }
 return $0;
}
function btDiscreteDynamicsWorld__addRigidBody_28btRigidBody__2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 if (!(HEAPU8[$1 + 204 | 0] & 3 | HEAP8[$1 + 564 | 0] & 1)) {
  btRigidBody__setGravity_28btVector3_20const__29($1, $0 + 264 | 0);
 }
 if (HEAP32[$1 + 192 >> 2]) {
  label$3 : {
   if (!(HEAP8[$1 + 204 | 0] & 1)) {
    $4 = HEAP32[$0 + 248 >> 2];
    label$5 : {
     if (($4 | 0) != HEAP32[$0 + 252 >> 2]) {
      break label$5;
     }
     $6 = $4 ? $4 << 1 : 1;
     if (($4 | 0) >= ($6 | 0)) {
      break label$5;
     }
     if ($6) {
      $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 2, 16);
      $4 = HEAP32[$0 + 248 >> 2];
     }
     if (($4 | 0) >= 1) {
      while (1) {
       $8 = $5 << 2;
       HEAP32[$8 + $7 >> 2] = HEAP32[HEAP32[$0 + 256 >> 2] + $8 >> 2];
       $5 = $5 + 1 | 0;
       if (($5 | 0) != ($4 | 0)) {
        continue;
       }
       break;
      }
     }
     $5 = HEAP32[$0 + 256 >> 2];
     if ($5) {
      if (HEAPU8[$0 + 260 | 0]) {
       btAlignedFreeInternal_28void__29($5);
       $4 = HEAP32[$0 + 248 >> 2];
      }
      HEAP32[$0 + 256 >> 2] = 0;
     }
     HEAP32[$0 + 256 >> 2] = $7;
     HEAP32[$0 + 252 >> 2] = $6;
     HEAP8[$0 + 260 | 0] = 1;
    }
    HEAP32[HEAP32[$0 + 256 >> 2] + ($4 << 2) >> 2] = $1;
    HEAP32[$0 + 248 >> 2] = $4 + 1;
    break label$3;
   }
   btCollisionObject__setActivationState_28int_29_20const($1, 2);
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1, $2, $3);
 }
}
function btDiscreteDynamicsWorld__addRigidBody_28btRigidBody__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 if (!(HEAPU8[$1 + 204 | 0] & 3 | HEAP8[$1 + 564 | 0] & 1)) {
  btRigidBody__setGravity_28btVector3_20const__29($1, $0 + 264 | 0);
 }
 if (HEAP32[$1 + 192 >> 2]) {
  label$3 : {
   if (!(HEAP8[$1 + 204 | 0] & 1)) {
    $2 = HEAP32[$0 + 248 >> 2];
    label$5 : {
     if (($2 | 0) != HEAP32[$0 + 252 >> 2]) {
      break label$5;
     }
     $4 = $2 ? $2 << 1 : 1;
     if (($2 | 0) >= ($4 | 0)) {
      break label$5;
     }
     if ($4) {
      $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2, 16);
      $2 = HEAP32[$0 + 248 >> 2];
     }
     if (($2 | 0) >= 1) {
      while (1) {
       $6 = $3 << 2;
       HEAP32[$6 + $5 >> 2] = HEAP32[HEAP32[$0 + 256 >> 2] + $6 >> 2];
       $3 = $3 + 1 | 0;
       if (($3 | 0) != ($2 | 0)) {
        continue;
       }
       break;
      }
     }
     $3 = HEAP32[$0 + 256 >> 2];
     if ($3) {
      if (HEAPU8[$0 + 260 | 0]) {
       btAlignedFreeInternal_28void__29($3);
       $2 = HEAP32[$0 + 248 >> 2];
      }
      HEAP32[$0 + 256 >> 2] = 0;
     }
     HEAP32[$0 + 256 >> 2] = $5;
     HEAP32[$0 + 252 >> 2] = $4;
     HEAP8[$0 + 260 | 0] = 1;
    }
    HEAP32[HEAP32[$0 + 256 >> 2] + ($2 << 2) >> 2] = $1;
    HEAP32[$0 + 248 >> 2] = $2 + 1;
    break label$3;
   }
   btCollisionObject__setActivationState_28int_29_20const($1, 2);
  }
  $3 = HEAP32[$1 + 204 >> 2] & 3;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1, $3 ? 2 : 1, $3 ? -3 : -1);
 }
}
function btSphereShape__localGetSupportingVertex_28btVector3_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0);
 $4 = global$0 - 16 | 0;
 $7 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($4, $1, $2);
 $7 = HEAP32[$4 + 12 >> 2];
 $8 = HEAP32[$4 + 8 >> 2];
 HEAP32[$0 + 8 >> 2] = $8;
 HEAP32[$0 + 12 >> 2] = $7;
 $8 = HEAP32[$4 + 4 >> 2];
 $7 = HEAP32[$4 >> 2];
 HEAP32[$0 >> 2] = $7;
 HEAP32[$0 + 4 >> 2] = $8;
 $5 = HEAPF32[$2 + 4 >> 2];
 $3 = HEAPF32[$2 >> 2];
 $6 = HEAPF32[$2 + 8 >> 2];
 $9 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1));
 $2 = Math_fround(Math_fround(Math_fround($3 * $3) + Math_fround($5 * $5)) + Math_fround($6 * $6)) < Math_fround(1.4210854715202004e-14);
 $3 = $2 ? Math_fround(-1) : $3;
 $10 = $3;
 $6 = $2 ? Math_fround(-1) : $6;
 $5 = $2 ? Math_fround(-1) : $5;
 $3 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround($6 * $6) + Math_fround(Math_fround($3 * $3) + Math_fround($5 * $5))))));
 HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] + Math_fround($9 * Math_fround($10 * $3));
 HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] + Math_fround($9 * Math_fround($5 * $3));
 HEAPF32[$0 + 8 >> 2] = HEAPF32[$0 + 8 >> 2] + Math_fround($9 * Math_fround($6 * $3));
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundShape__recalculateLocalAabb_28_29($0) {
 $0 = $0 | 0;
 var $1 = Math_fround(0), $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 32 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$0 + 52 >> 2] = -581039253;
 HEAP32[$0 + 56 >> 2] = -581039253;
 HEAP32[$0 + 36 >> 2] = 1566444395;
 HEAP32[$0 + 40 >> 2] = 1566444395;
 HEAP32[$0 + 60 >> 2] = -581039253;
 HEAP32[$0 + 64 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = 1566444395;
 HEAP32[$0 + 48 >> 2] = 0;
 if (HEAP32[$0 + 20 >> 2] >= 1) {
  while (1) {
   $3 = HEAP32[$0 + 28 >> 2] + Math_imul($4, 80) | 0;
   $5 = HEAP32[$3 + 64 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, $3, $2 + 16 | 0, $2);
   $1 = HEAPF32[$2 + 16 >> 2];
   if (!!(HEAPF32[$0 + 36 >> 2] > $1)) {
    HEAPF32[$0 + 36 >> 2] = $1;
   }
   $1 = HEAPF32[$2 >> 2];
   if (!!(HEAPF32[$0 + 52 >> 2] < $1)) {
    HEAPF32[$0 + 52 >> 2] = $1;
   }
   $1 = HEAPF32[$2 + 20 >> 2];
   if (!!(HEAPF32[$0 + 40 >> 2] > $1)) {
    HEAPF32[$0 + 40 >> 2] = $1;
   }
   $1 = HEAPF32[$2 + 4 >> 2];
   if (!!(HEAPF32[$0 + 56 >> 2] < $1)) {
    HEAPF32[$0 + 56 >> 2] = $1;
   }
   $1 = HEAPF32[$2 + 24 >> 2];
   if (!!(HEAPF32[$0 + 44 >> 2] > $1)) {
    HEAPF32[$0 + 44 >> 2] = $1;
   }
   $1 = HEAPF32[$2 + 8 >> 2];
   if (!!(HEAPF32[$0 + 60 >> 2] < $1)) {
    HEAPF32[$0 + 60 >> 2] = $1;
   }
   $4 = $4 + 1 | 0;
   if (($4 | 0) < HEAP32[$0 + 20 >> 2]) {
    continue;
   }
   break;
  }
 }
 $0 = $2 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionWorld__removeCollisionObject_28btCollisionObject__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = HEAP32[$1 + 188 >> 2];
 if ($3) {
  $2 = HEAP32[$0 + 68 >> 2];
  $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2) | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 40 >> 2]]($2, $3, HEAP32[$0 + 24 >> 2]);
  $2 = HEAP32[$0 + 68 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2, $3, HEAP32[$0 + 24 >> 2]);
  HEAP32[$1 + 188 >> 2] = 0;
 }
 $3 = HEAP32[$1 + 216 >> 2];
 $2 = HEAP32[$0 + 8 >> 2];
 label$2 : {
  if (!(($3 | 0) < 0 | ($3 | 0) >= ($2 | 0))) {
   $4 = $0 + 16 | 0;
   $5 = HEAP32[$4 >> 2];
   $4 = $3 << 2;
   $6 = $5 + $4 | 0;
   $8 = HEAP32[$6 >> 2];
   $2 = $2 + -1 | 0;
   $7 = $2 << 2;
   HEAP32[$6 >> 2] = HEAP32[$7 + $5 >> 2];
   HEAP32[HEAP32[$0 + 16 >> 2] + $7 >> 2] = $8;
   HEAP32[$0 + 8 >> 2] = $2;
   if (($3 | 0) >= ($2 | 0)) {
    break label$2;
   }
   HEAP32[HEAP32[HEAP32[$0 + 16 >> 2] + $4 >> 2] + 216 >> 2] = $3;
   break label$2;
  }
  if (($2 | 0) < 1) {
   break label$2;
  }
  $4 = HEAP32[$0 + 16 >> 2];
  $3 = 0;
  while (1) {
   $5 = ($3 << 2) + $4 | 0;
   if (HEAP32[$5 >> 2] != ($1 | 0)) {
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($2 | 0)) {
     continue;
    }
    break label$2;
   }
   break;
  }
  if (($2 | 0) <= ($3 | 0)) {
   break label$2;
  }
  $3 = $2 + -1 | 0;
  $2 = $3 << 2;
  HEAP32[$5 >> 2] = HEAP32[$4 + $2 >> 2];
  HEAP32[HEAP32[$0 + 16 >> 2] + $2 >> 2] = $1;
  HEAP32[$0 + 8 >> 2] = $3;
 }
 HEAP32[$1 + 216 >> 2] = -1;
}
function __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
  __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3);
  return;
 }
 label$2 : {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
   if (!(HEAP32[$1 + 20 >> 2] != ($2 | 0) ? HEAP32[$1 + 16 >> 2] != ($2 | 0) : 0)) {
    if (($3 | 0) != 1) {
     break label$2;
    }
    HEAP32[$1 + 32 >> 2] = 1;
    return;
   }
   HEAP32[$1 + 32 >> 2] = $3;
   label$6 : {
    if (HEAP32[$1 + 44 >> 2] == 4) {
     break label$6;
    }
    HEAP16[$1 + 52 >> 1] = 0;
    $0 = HEAP32[$0 + 8 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $2, 1, $4);
    if (HEAPU8[$1 + 53 | 0]) {
     HEAP32[$1 + 44 >> 2] = 3;
     if (!HEAPU8[$1 + 52 | 0]) {
      break label$6;
     }
     break label$2;
    }
    HEAP32[$1 + 44 >> 2] = 4;
   }
   HEAP32[$1 + 20 >> 2] = $2;
   HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
   if (HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2) {
    break label$2;
   }
   HEAP8[$1 + 54 | 0] = 1;
   return;
  }
  $0 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2, $3, $4);
 }
}
function btTriangleShape__getPlaneEquation_28int_2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0);
 $7 = HEAPF32[$0 + 92 >> 2];
 $8 = HEAPF32[$0 + 76 >> 2];
 $9 = HEAPF32[$0 + 80 >> 2];
 $11 = HEAPF32[$0 + 100 >> 2];
 $6 = HEAPF32[$0 + 68 >> 2];
 $12 = HEAPF32[$0 + 84 >> 2];
 $10 = HEAPF32[$0 + 96 >> 2];
 $4 = HEAPF32[$0 - -64 >> 2];
 $5 = HEAPF32[$0 + 60 >> 2];
 HEAP32[$2 + 12 >> 2] = 0;
 $8 = Math_fround($8 - $5);
 $10 = Math_fround($10 - $4);
 $9 = Math_fround($9 - $4);
 $5 = Math_fround($7 - $5);
 $4 = Math_fround(Math_fround($8 * $10) - Math_fround($9 * $5));
 $13 = $4;
 $14 = Math_fround($4 * $4);
 $4 = Math_fround($11 - $6);
 $7 = Math_fround($12 - $6);
 $6 = Math_fround(Math_fround($9 * $4) - Math_fround($7 * $10));
 $4 = Math_fround(Math_fround($7 * $5) - Math_fround($8 * $4));
 $5 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround($14 + Math_fround(Math_fround($6 * $6) + Math_fround($4 * $4))))));
 HEAPF32[$2 + 8 >> 2] = $13 * $5;
 HEAPF32[$2 + 4 >> 2] = $4 * $5;
 HEAPF32[$2 >> 2] = $6 * $5;
 $2 = HEAP32[$0 + 72 >> 2];
 $1 = HEAP32[$0 + 68 >> 2];
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $2;
 $1 = HEAP32[$0 + 64 >> 2];
 $2 = HEAP32[$0 + 60 >> 2];
 HEAP32[$3 >> 2] = $2;
 HEAP32[$3 + 4 >> 2] = $1;
}
function btTriangleMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const__FilteredCallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0;
 label$1 : {
  $5 = HEAPF32[$1 >> 2];
  $6 = HEAPF32[$1 + 16 >> 2];
  $8 = $5 < $6 ? $5 : $6;
  $7 = HEAPF32[$1 + 32 >> 2];
  if (($8 < $7 ? $8 : $7) > HEAPF32[$0 + 24 >> 2]) {
   break label$1;
  }
  $4 = ($5 > $6 ^ 1) << 4;
  if (HEAPF32[(HEAPF32[$1 + $4 >> 2] > $7 ? $4 : 32) + $1 >> 2] < HEAPF32[$0 + 8 >> 2]) {
   break label$1;
  }
  $5 = HEAPF32[$1 + 8 >> 2];
  $4 = $1 + 24 | 0;
  $6 = HEAPF32[$4 >> 2];
  $8 = $5 < $6 ? $5 : $6;
  $9 = $1 + 40 | 0;
  $7 = HEAPF32[$9 >> 2];
  if (($8 < $7 ? $8 : $7) > HEAPF32[$0 + 32 >> 2]) {
   break label$1;
  }
  $4 = $5 > $6 ? $1 + 8 | 0 : $4;
  if (HEAPF32[(HEAPF32[$4 >> 2] > $7 ? $4 : $9) >> 2] < HEAPF32[$0 + 16 >> 2]) {
   break label$1;
  }
  $5 = HEAPF32[$1 + 4 >> 2];
  $4 = $1 + 20 | 0;
  $6 = HEAPF32[$4 >> 2];
  $8 = $5 < $6 ? $5 : $6;
  $9 = $1 + 36 | 0;
  $7 = HEAPF32[$9 >> 2];
  if (($8 < $7 ? $8 : $7) > HEAPF32[$0 + 28 >> 2]) {
   break label$1;
  }
  $4 = $5 > $6 ? $1 + 4 | 0 : $4;
  if (HEAPF32[(HEAPF32[$4 >> 2] > $7 ? $4 : $9) >> 2] < HEAPF32[$0 + 12 >> 2]) {
   break label$1;
  }
  $0 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1, $2, $3);
 }
}
function btRigidBody__btRigidBodyConstructionInfo__btRigidBodyConstructionInfo_28float_2c_20btMotionState__2c_20btCollisionShape__2c_20btVector3_20const__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = global$0 - 32 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAPF32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $2 = HEAP32[$5 + 28 >> 2];
 HEAPF32[$2 >> 2] = HEAPF32[$5 + 24 >> 2];
 HEAP32[$2 + 4 >> 2] = HEAP32[$5 + 20 >> 2];
 btTransform__btTransform_28_29($2 + 8 | 0);
 HEAP32[$2 + 72 >> 2] = HEAP32[$5 + 16 >> 2];
 $3 = HEAP32[$5 + 12 >> 2];
 $4 = HEAP32[$3 >> 2];
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$2 + 76 >> 2] = $4;
 HEAP32[$2 + 80 >> 2] = $0;
 $4 = HEAP32[$3 + 12 >> 2];
 $0 = HEAP32[$3 + 8 >> 2];
 HEAP32[$2 + 84 >> 2] = $0;
 HEAP32[$2 + 88 >> 2] = $4;
 HEAPF32[$2 + 92 >> 2] = 0;
 HEAPF32[$2 + 96 >> 2] = 0;
 HEAPF32[$2 + 100 >> 2] = .5;
 HEAPF32[$2 + 104 >> 2] = 0;
 HEAPF32[$2 + 108 >> 2] = 0;
 HEAPF32[$2 + 112 >> 2] = 0;
 HEAPF32[$2 + 116 >> 2] = .800000011920929;
 HEAPF32[$2 + 120 >> 2] = 1;
 HEAP8[$2 + 124 | 0] = 0;
 HEAPF32[$2 + 128 >> 2] = .004999999888241291;
 HEAPF32[$2 + 132 >> 2] = .009999999776482582;
 HEAPF32[$2 + 136 >> 2] = .009999999776482582;
 HEAPF32[$2 + 140 >> 2] = .009999999776482582;
 btTransform__setIdentity_28_29($2 + 8 | 0);
 $0 = $5 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__BridgeTriangleConvexcastCallback__reportHit_28btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20int_2c_20int_29_1($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $6 = global$0 + -64 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 60 >> 2] = $5;
 HEAP32[$6 + 56 >> 2] = $4;
 $4 = HEAP32[$0 + 212 >> 2];
 if (!!(HEAPF32[$4 + 4 >> 2] >= $3)) {
  HEAP32[$6 + 8 >> 2] = HEAP32[$0 + 216 >> 2];
  HEAP32[$6 + 12 >> 2] = $6 + 56;
  $5 = HEAP32[$1 + 8 >> 2];
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$6 + 24 >> 2] = $5;
  HEAP32[$6 + 28 >> 2] = $0;
  $5 = HEAP32[$1 + 4 >> 2];
  $0 = HEAP32[$1 >> 2];
  HEAP32[$6 + 16 >> 2] = $0;
  HEAP32[$6 + 20 >> 2] = $5;
  $1 = $2;
  $5 = HEAP32[$1 + 8 >> 2];
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$6 + 40 >> 2] = $5;
  HEAP32[$6 + 44 >> 2] = $0;
  $5 = HEAP32[$1 + 4 >> 2];
  $0 = HEAP32[$1 >> 2];
  HEAP32[$6 + 32 >> 2] = $0;
  HEAP32[$6 + 36 >> 2] = $5;
  HEAPF32[$6 + 48 >> 2] = $3;
  $3 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, $6 + 8 | 0, 1));
 }
 $0 = $6 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__BridgeTriangleConvexcastCallback__reportHit_28btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0;
 $6 = global$0 + -64 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 60 >> 2] = $5;
 HEAP32[$6 + 56 >> 2] = $4;
 $4 = HEAP32[$0 + 212 >> 2];
 if (!!(HEAPF32[$4 + 4 >> 2] >= $3)) {
  HEAP32[$6 + 8 >> 2] = HEAP32[$0 + 216 >> 2];
  HEAP32[$6 + 12 >> 2] = $6 + 56;
  $5 = HEAP32[$1 + 8 >> 2];
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$6 + 24 >> 2] = $5;
  HEAP32[$6 + 28 >> 2] = $0;
  $5 = HEAP32[$1 + 4 >> 2];
  $0 = HEAP32[$1 >> 2];
  HEAP32[$6 + 16 >> 2] = $0;
  HEAP32[$6 + 20 >> 2] = $5;
  $1 = $2;
  $5 = HEAP32[$1 + 8 >> 2];
  $0 = HEAP32[$1 + 12 >> 2];
  HEAP32[$6 + 40 >> 2] = $5;
  HEAP32[$6 + 44 >> 2] = $0;
  $5 = HEAP32[$1 + 4 >> 2];
  $0 = HEAP32[$1 >> 2];
  HEAP32[$6 + 32 >> 2] = $0;
  HEAP32[$6 + 36 >> 2] = $5;
  HEAPF32[$6 + 48 >> 2] = $3;
  $3 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, $6 + 8 | 0, 1));
 }
 $0 = $6 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btAlignedObjectArray_btAlignedObjectArray_btDbvtNode_20const___20___reserve_28int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 if (HEAP32[$0 + 8 >> 2] < ($1 | 0)) {
  if ($1) {
   $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($1, 20), 16);
  } else {
   $5 = 0;
  }
  $4 = HEAP32[$0 + 4 >> 2];
  label$4 : {
   if (($4 | 0) < 1) {
    break label$4;
   }
   while (1) {
    $3 = Math_imul($2, 20);
    btAlignedObjectArray_btDbvtNode_20const____btAlignedObjectArray_28btAlignedObjectArray_btDbvtNode_20const___20const__29($5 + $3 | 0, HEAP32[$0 + 12 >> 2] + $3 | 0);
    $2 = $2 + 1 | 0;
    if (($4 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
   $6 = HEAP32[$0 + 4 >> 2];
   if (($6 | 0) < 1) {
    break label$4;
   }
   $3 = 0;
   while (1) {
    $2 = HEAP32[$0 + 12 >> 2] + Math_imul($3, 20) | 0;
    $7 = $2;
    $4 = $2;
    $8 = HEAP32[$2 + 12 >> 2];
    if ($8) {
     if (HEAPU8[$2 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($8);
     }
     HEAP32[$7 + 12 >> 2] = 0;
    }
    HEAP8[$2 + 16 | 0] = 1;
    HEAP32[$7 + 12 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    HEAP32[$2 + 8 >> 2] = 0;
    $3 = $3 + 1 | 0;
    if (($6 | 0) != ($3 | 0)) {
     continue;
    }
    break;
   }
  }
  $2 = HEAP32[$0 + 12 >> 2];
  if ($2) {
   if (HEAPU8[$0 + 16 | 0]) {
    btAlignedFreeInternal_28void__29($2);
   }
   HEAP32[$0 + 12 >> 2] = 0;
  }
  HEAP32[$0 + 12 >> 2] = $5;
  HEAP8[$0 + 16 | 0] = 1;
  HEAP32[$0 + 8 >> 2] = $1;
 }
}
function btPolyhedralConvexAabbCachingShape__recalcLocalAabb_28_29($0) {
 var $1 = 0, $2 = Math_fround(0), $3 = 0;
 $1 = global$0 - 96 | 0;
 $3 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP8[$0 + 92 | 0] = 1;
 label$2 : {
  if (HEAP8[22704] & 1) {
   break label$2;
  }
  if (!__cxa_guard_acquire(22704)) {
   break label$2;
  }
  HEAP32[5653] = 0;
  HEAP32[5654] = 0;
  HEAP32[5652] = 1065353216;
  HEAP32[5655] = 0;
  HEAP32[5656] = 0;
  HEAP32[5658] = 0;
  HEAP32[5659] = 0;
  HEAP32[5657] = 1065353216;
  HEAP32[5660] = 0;
  HEAP32[5661] = 0;
  HEAP32[5665] = 0;
  HEAP32[5666] = 0;
  HEAP32[5664] = -1082130432;
  HEAP32[5662] = 1065353216;
  HEAP32[5663] = 0;
  HEAP32[5667] = 0;
  HEAP32[5668] = 0;
  HEAP32[5670] = 0;
  HEAP32[5671] = 0;
  HEAP32[5669] = -1082130432;
  HEAP32[5672] = 0;
  HEAP32[5673] = 0;
  HEAP32[5674] = -1082130432;
  HEAP32[5675] = 0;
  __cxa_guard_release(22704);
 }
 $1 = memset($1, 0, 96);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 76 >> 2]]($0, 22608, $1, 6);
 $2 = HEAPF32[$0 + 48 >> 2];
 HEAPF32[$0 + 76 >> 2] = HEAPF32[$1 >> 2] + $2;
 HEAPF32[$0 + 60 >> 2] = HEAPF32[$1 + 48 >> 2] - $2;
 HEAPF32[$0 + 80 >> 2] = $2 + HEAPF32[$1 + 20 >> 2];
 HEAPF32[$0 - -64 >> 2] = HEAPF32[$1 + 68 >> 2] - $2;
 HEAPF32[$0 + 84 >> 2] = $2 + HEAPF32[$1 + 40 >> 2];
 HEAPF32[$0 + 68 >> 2] = HEAPF32[$1 + 88 >> 2] - $2;
 $0 = $1 + 96 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTriangleShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0);
 $6 = HEAPF32[$0 + 92 >> 2];
 $7 = HEAPF32[$0 + 76 >> 2];
 $8 = HEAPF32[$0 + 80 >> 2];
 $10 = HEAPF32[$0 + 100 >> 2];
 $4 = HEAPF32[$0 + 68 >> 2];
 $11 = HEAPF32[$0 + 84 >> 2];
 $9 = HEAPF32[$0 + 96 >> 2];
 $3 = HEAPF32[$0 - -64 >> 2];
 $5 = HEAPF32[$0 + 60 >> 2];
 HEAP32[$2 + 12 >> 2] = 0;
 $7 = Math_fround($7 - $5);
 $9 = Math_fround($9 - $3);
 $8 = Math_fround($8 - $3);
 $5 = Math_fround($6 - $5);
 $3 = Math_fround(Math_fround($7 * $9) - Math_fround($8 * $5));
 $12 = $3;
 $13 = Math_fround($3 * $3);
 $3 = Math_fround($10 - $4);
 $6 = Math_fround($11 - $4);
 $4 = Math_fround(Math_fround($8 * $3) - Math_fround($6 * $9));
 $3 = Math_fround(Math_fround($6 * $5) - Math_fround($7 * $3));
 $5 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround($13 + Math_fround(Math_fround($4 * $4) + Math_fround($3 * $3))))));
 $6 = Math_fround($12 * $5);
 HEAPF32[$2 + 8 >> 2] = $6;
 $3 = Math_fround($3 * $5);
 HEAPF32[$2 + 4 >> 2] = $3;
 $4 = Math_fround($4 * $5);
 HEAPF32[$2 >> 2] = $4;
 if ($1) {
  HEAPF32[$2 + 8 >> 2] = -$6;
  HEAPF32[$2 + 4 >> 2] = -$3;
  HEAPF32[$2 >> 2] = -$4;
 }
}
function btSequentialImpulseConstraintSolver__solveGroupCacheFriendlyIterations_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = 0;
 $11 = global$0 - 16 | 0;
 $9 = $11;
 if ($11 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $9;
 $13 = CProfileSample__CProfileSample_28char_20const__29($11 + 8 | 0, 3845);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1, $2, $3, $4, $5, $6, $7, $8);
 $9 = HEAP32[$0 + 184 >> 2];
 $10 = HEAP32[$7 + 20 >> 2];
 $10 = ($9 | 0) > ($10 | 0) ? $9 : $10;
 label$2 : {
  if (($10 | 0) < 1) {
   break label$2;
  }
  $14 = $10 + -1 | 0;
  $9 = 0;
  while (1) {
   $12 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, $9, $1, $2, $3, $4, $5, $6, $7, $8));
   HEAPF32[$0 + 228 >> 2] = $12;
   if (($9 | 0) >= ($14 | 0) | $12 <= HEAPF32[$7 + 92 >> 2]) {
    break label$2;
   }
   $9 = $9 + 1 | 0;
   if (($9 | 0) < ($10 | 0)) {
    continue;
   }
   break;
  }
 }
 CProfileSample___CProfileSample_28_29($13);
 $0 = $11 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround(Math_fround(0));
}
function btAngularLimit__fit_28float__29_20const($0, $1) {
 var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0);
 label$1 : {
  $3 = HEAPF32[$0 + 4 >> 2];
  if (!($3 > Math_fround(0))) {
   break label$1;
  }
  $4 = HEAPF32[$0 >> 2];
  $2 = fmodf(Math_fround(HEAPF32[$1 >> 2] - $4), Math_fround(6.2831854820251465));
  label$2 : {
   if (!!($2 < Math_fround(-3.1415927410125732))) {
    $2 = Math_fround($2 + Math_fround(6.2831854820251465));
    break label$2;
   }
   if (!($2 > Math_fround(3.1415927410125732))) {
    break label$2;
   }
   $2 = Math_fround($2 + Math_fround(-6.2831854820251465));
  }
  if ($2 < Math_fround(-$3) ^ 1 ? !!($2 <= $3) : 0) {
   break label$1;
  }
  if (!!($2 > Math_fround(0))) {
   $2 = fmodf(Math_fround($3 + $4), Math_fround(6.2831854820251465));
   if (!!($2 < Math_fround(-3.1415927410125732))) {
    HEAPF32[$1 >> 2] = $2 + Math_fround(6.2831854820251465);
    return;
   }
   $2 = $2 > Math_fround(3.1415927410125732) ^ 1 ? $2 : Math_fround($2 + Math_fround(-6.2831854820251465));
   HEAPF32[$1 >> 2] = $2;
   return;
  }
  $2 = fmodf(Math_fround($4 - $3), Math_fround(6.2831854820251465));
  label$6 : {
   if (!!($2 < Math_fround(-3.1415927410125732))) {
    $2 = Math_fround($2 + Math_fround(6.2831854820251465));
    break label$6;
   }
   if (!($2 > Math_fround(3.1415927410125732))) {
    break label$6;
   }
   $2 = Math_fround($2 + Math_fround(-6.2831854820251465));
  }
  HEAPF32[$1 >> 2] = $2;
 }
}
function btCapsuleShape__updateProp_28float_2c_20float_2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 32 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAPF32[$4 + 24 >> 2] = $1;
 HEAPF32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 $3 = HEAP32[$4 + 28 >> 2];
 HEAP32[$3 + 60 >> 2] = HEAP32[$4 + 16 >> 2];
 HEAPF32[$4 + 12 >> 2] = 1;
 HEAPF32[$4 + 8 >> 2] = 1;
 HEAPF32[$4 + 4 >> 2] = 1;
 btVector3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__29($3 + 20 | 0, $4 + 12 | 0, $4 + 8 | 0, $4 + 4 | 0);
 label$2 : {
  if (HEAP32[$3 + 60 >> 2] == 1) {
   $0 = $4 + 24 | 0;
   btVector3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__29($3 + 36 | 0, $0, $4 + 20 | 0, $0);
   break label$2;
  }
  label$4 : {
   if (!HEAP32[$3 + 60 >> 2]) {
    $0 = $4 + 24 | 0;
    btVector3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__29($3 + 36 | 0, $4 + 20 | 0, $0, $0);
    break label$4;
   }
   $0 = $4 + 24 | 0;
   btVector3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__29($3 + 36 | 0, $0, $0, $4 + 20 | 0);
  }
 }
 HEAP32[$4 >> 2] = (HEAP32[$4 + 16 >> 2] + 2 | 0) % 3;
 HEAPF32[$3 + 52 >> 2] = HEAPF32[btVector3__operator_20float__28_29($3 + 36 | 0) + (HEAP32[$4 >> 2] << 2) >> 2];
 $0 = $4 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btMatrix3x3__btMatrix3x3_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0, $11 = 0;
 $10 = global$0 - 48 | 0;
 $11 = $10;
 if ($10 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $11;
 HEAP32[$10 + 40 >> 2] = $0;
 HEAP32[$10 + 36 >> 2] = $1;
 HEAP32[$10 + 32 >> 2] = $2;
 HEAP32[$10 + 28 >> 2] = $3;
 HEAP32[$10 + 24 >> 2] = $4;
 HEAP32[$10 + 20 >> 2] = $5;
 HEAP32[$10 + 16 >> 2] = $6;
 HEAP32[$10 + 12 >> 2] = $7;
 HEAP32[$10 + 8 >> 2] = $8;
 HEAP32[$10 + 4 >> 2] = $9;
 $1 = HEAP32[$10 + 40 >> 2];
 HEAP32[$10 + 44 >> 2] = $1;
 $2 = $1 + 48 | 0;
 $0 = $1;
 while (1) {
  btVector3__btVector3_28_29($0);
  $0 = $0 + 16 | 0;
  if (($2 | 0) != ($0 | 0)) {
   continue;
  }
  break;
 }
 btMatrix3x3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($1, HEAP32[$10 + 36 >> 2], HEAP32[$10 + 32 >> 2], HEAP32[$10 + 28 >> 2], HEAP32[$10 + 24 >> 2], HEAP32[$10 + 20 >> 2], HEAP32[$10 + 16 >> 2], HEAP32[$10 + 12 >> 2], HEAP32[$10 + 8 >> 2], HEAP32[$10 + 4 >> 2]);
 $0 = HEAP32[$10 + 44 >> 2];
 $1 = $10 + 48 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function void_20btAlignedObjectArray_btElement___quickSortInternal_btUnionFindElementSortPredicate__28btUnionFindElementSortPredicate_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 while (1) {
  $10 = $2;
  $5 = HEAP32[$0 + 12 >> 2];
  $11 = HEAP32[$5 + (($2 + $3 | 0) / 2 << 3) >> 2];
  $7 = $2;
  $4 = $3;
  while (1) {
   $2 = $7;
   $7 = $2 + 1 | 0;
   $6 = ($2 << 3) + $5 | 0;
   if (HEAP32[$6 >> 2] < ($11 | 0)) {
    continue;
   }
   $8 = $4;
   while (1) {
    $4 = $8;
    $8 = $4 + -1 | 0;
    $12 = $4 << 3;
    $9 = $12 + $5 | 0;
    if (HEAP32[$9 >> 2] > ($11 | 0)) {
     continue;
    }
    break;
   }
   if (($2 | 0) <= ($4 | 0)) {
    $4 = HEAP32[$6 >> 2];
    $13 = $4;
    $2 = HEAP32[$6 + 4 >> 2];
    $5 = $2;
    $4 = HEAP32[$9 + 4 >> 2];
    $2 = HEAP32[$9 >> 2];
    HEAP32[$6 >> 2] = $2;
    HEAP32[$6 + 4 >> 2] = $4;
    $2 = HEAP32[$0 + 12 >> 2] + $12 | 0;
    HEAP32[$2 >> 2] = $13;
    $4 = $5;
    HEAP32[$2 + 4 >> 2] = $4;
    $4 = $8;
    $2 = $7;
   }
   if (($2 | 0) <= ($4 | 0)) {
    $5 = HEAP32[$0 + 12 >> 2];
    $7 = $2;
    continue;
   }
   break;
  }
  if (($4 | 0) > ($10 | 0)) {
   void_20btAlignedObjectArray_btElement___quickSortInternal_btUnionFindElementSortPredicate__28btUnionFindElementSortPredicate_20const__2c_20int_2c_20int_29($0, $1, $10, $4);
  }
  if (($2 | 0) < ($3 | 0)) {
   continue;
  }
  break;
 }
}
function btTriangleShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0;
 if (($3 | 0) >= 1) {
  $14 = $0 + 60 | 0;
  while (1) {
   $4 = $7 << 4;
   $5 = $4 + $2 | 0;
   $4 = $1 + $4 | 0;
   $6 = HEAPF32[$4 >> 2];
   $8 = HEAPF32[$4 + 4 >> 2];
   $9 = HEAPF32[$4 + 8 >> 2];
   $12 = Math_fround(Math_fround(Math_fround($6 * HEAPF32[$0 + 76 >> 2]) + Math_fround($8 * HEAPF32[$0 + 80 >> 2])) + Math_fround($9 * HEAPF32[$0 + 84 >> 2]));
   $13 = Math_fround(Math_fround(Math_fround($6 * HEAPF32[$0 + 92 >> 2]) + Math_fround($8 * HEAPF32[$0 + 96 >> 2])) + Math_fround($9 * HEAPF32[$0 + 100 >> 2]));
   $6 = Math_fround(Math_fround(Math_fround($6 * HEAPF32[$0 + 60 >> 2]) + Math_fround($8 * HEAPF32[$0 + 64 >> 2])) + Math_fround($9 * HEAPF32[$0 + 68 >> 2]));
   $4 = (($6 < $12 ? $12 < $13 ? 2 : 1 : ($6 < $13) << 1) << 4) + $14 | 0;
   $10 = HEAP32[$4 >> 2];
   $11 = HEAP32[$4 + 4 >> 2];
   HEAP32[$5 >> 2] = $10;
   HEAP32[$5 + 4 >> 2] = $11;
   $10 = HEAP32[$4 + 12 >> 2];
   $11 = HEAP32[$4 + 8 >> 2];
   HEAP32[$5 + 8 >> 2] = $11;
   HEAP32[$5 + 12 >> 2] = $10;
   $7 = $7 + 1 | 0;
   if (($7 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
}
function btUnionFind__reset_28int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = HEAP32[$0 + 4 >> 2];
 if (($2 | 0) < ($1 | 0)) {
  if (HEAP32[$0 + 8 >> 2] < ($1 | 0)) {
   if ($1) {
    $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 3, 16);
    $3 = HEAP32[$0 + 4 >> 2];
   } else {
    $3 = $2;
   }
   $7 = $3;
   if (($7 | 0) >= 1) {
    while (1) {
     $8 = $4 << 3;
     $5 = $8 + HEAP32[$0 + 12 >> 2] | 0;
     $3 = HEAP32[$5 >> 2];
     $9 = HEAP32[$5 + 4 >> 2];
     $5 = $3;
     $3 = $6 + $8 | 0;
     HEAP32[$3 >> 2] = $5;
     HEAP32[$3 + 4 >> 2] = $9;
     $4 = $4 + 1 | 0;
     if (($7 | 0) != ($4 | 0)) {
      continue;
     }
     break;
    }
   }
   $4 = HEAP32[$0 + 12 >> 2];
   if ($4) {
    if (HEAPU8[$0 + 16 | 0]) {
     btAlignedFreeInternal_28void__29($4);
    }
    HEAP32[$0 + 12 >> 2] = 0;
   }
   HEAP32[$0 + 12 >> 2] = $6;
   HEAP8[$0 + 16 | 0] = 1;
   HEAP32[$0 + 8 >> 2] = $1;
  }
  while (1) {
   $3 = HEAP32[$0 + 12 >> 2] + ($2 << 3) | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $2 = $2 + 1 | 0;
   if (($2 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 4 >> 2] = $1;
 if (($1 | 0) >= 1) {
  $4 = HEAP32[$0 + 12 >> 2];
  $2 = 0;
  while (1) {
   $0 = ($2 << 3) + $4 | 0;
   HEAP32[$0 + 4 >> 2] = 1;
   HEAP32[$0 >> 2] = $2;
   $2 = $2 + 1 | 0;
   if (($2 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
}
function btVoronoiSimplexSolver__addVertex_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $6 = $1;
 $5 = HEAP32[$6 >> 2];
 $4 = HEAP32[$6 + 4 >> 2];
 $7 = $5;
 $5 = $0;
 HEAP32[$5 + 292 >> 2] = $7;
 HEAP32[$5 + 296 >> 2] = $4;
 $6 = $6 + 8 | 0;
 $4 = HEAP32[$6 >> 2];
 $5 = HEAP32[$6 + 4 >> 2];
 $6 = $4;
 $4 = $0;
 HEAP32[$4 + 300 >> 2] = $6;
 HEAP32[$4 + 304 >> 2] = $5;
 HEAP8[$4 + 356 | 0] = 1;
 $7 = $4 + (HEAP32[$4 >> 2] << 4) | 0;
 $6 = $1;
 $5 = HEAP32[$6 >> 2];
 $4 = HEAP32[$6 + 4 >> 2];
 $1 = $5;
 $5 = $7;
 HEAP32[$5 + 4 >> 2] = $1;
 HEAP32[$5 + 8 >> 2] = $4;
 $5 = HEAP32[$6 + 12 >> 2];
 $4 = HEAP32[$6 + 8 >> 2];
 $1 = $4;
 $4 = $7;
 HEAP32[$4 + 12 >> 2] = $1;
 HEAP32[$4 + 16 >> 2] = $5;
 $6 = $2;
 $5 = HEAP32[$6 + 8 >> 2];
 $4 = HEAP32[$6 + 12 >> 2];
 $2 = $5;
 $1 = (HEAP32[$0 >> 2] << 4) + $0 | 0;
 $5 = $1;
 HEAP32[$5 + 92 >> 2] = $2;
 HEAP32[$5 + 96 >> 2] = $4;
 $5 = HEAP32[$6 + 4 >> 2];
 $4 = HEAP32[$6 >> 2];
 $2 = $4;
 $4 = $1;
 HEAP32[$4 + 84 >> 2] = $2;
 HEAP32[$4 + 88 >> 2] = $5;
 $6 = $3;
 $5 = HEAP32[$6 + 8 >> 2];
 $4 = HEAP32[$6 + 12 >> 2];
 $2 = $5;
 $1 = (HEAP32[$0 >> 2] << 4) + $0 | 0;
 $5 = $1;
 HEAP32[$5 + 172 >> 2] = $2;
 HEAP32[$5 + 176 >> 2] = $4;
 $5 = HEAP32[$6 + 4 >> 2];
 $4 = HEAP32[$6 >> 2];
 $2 = $4;
 $4 = $1;
 HEAP32[$4 + 164 >> 2] = $2;
 HEAP32[$4 + 168 >> 2] = $5;
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
}
function btDbvtBroadphase__rayTest_28btVector3_20const__2c_20btVector3_20const__2c_20btBroadphaseRayCallback__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $6 = global$0 - 16 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 8 >> 2] = 16136;
 HEAP32[$6 + 12 >> 2] = $3;
 $8 = $3 + 4 | 0;
 $9 = $3 + 20 | 0;
 $10 = HEAP32[$0 + 168 >> 2];
 btDbvt__rayTestInternal_28btDbvtNode_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20unsigned_20int__2c_20float_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btAlignedObjectArray_btDbvtNode_20const____2c_20btDbvt__ICollide__29_20const($0 + 4 | 0, HEAP32[$0 + 4 >> 2], $1, $2, $8, $9, HEAPF32[$3 + 32 >> 2], $4, $5, $10, $6 + 8 | 0);
 $7 = $0;
 $0 = $0 + 44 | 0;
 btDbvt__rayTestInternal_28btDbvtNode_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20unsigned_20int__2c_20float_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btAlignedObjectArray_btDbvtNode_20const____2c_20btDbvt__ICollide__29_20const($0, HEAP32[$7 + 44 >> 2], $1, $2, $8, $9, HEAPF32[$3 + 32 >> 2], $4, $5, $10, $6 + 8 | 0);
 $0 = $6 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld__applyGravity_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$1 + 8 >> 2] = 0;
 while (1) {
  if (HEAP32[$1 + 8 >> 2] < (btAlignedObjectArray_btRigidBody____size_28_29_20const($0 + 244 | 0) | 0)) {
   HEAP32[$1 + 4 >> 2] = HEAP32[btAlignedObjectArray_btRigidBody____operator_5b_5d_28int_29($0 + 244 | 0, HEAP32[$1 + 8 >> 2]) >> 2];
   label$4 : {
    if (!(btCollisionObject__isActive_28_29_20const(HEAP32[$1 + 4 >> 2]) & 1)) {
     break label$4;
    }
    if (btCollisionObject__isKinematicObject_28_29_20const(HEAP32[$1 + 4 >> 2]) & 1) {
     break label$4;
    }
    label$5 : {
     if (+btRigidBody__getLinearDamping_28_29_20const(HEAP32[$1 + 4 >> 2]) == 1) {
      btVector3__setZero_28_29(btRigidBody__getTotalForce_28_29_20const(HEAP32[$1 + 4 >> 2]));
      break label$5;
     }
     btRigidBody__applyGravity_28_29(HEAP32[$1 + 4 >> 2]);
    }
    if (+btRigidBody__getAngularDamping_28_29_20const(HEAP32[$1 + 4 >> 2]) == 1) {
     btVector3__setZero_28_29(btRigidBody__getTotalTorque_28_29_20const(HEAP32[$1 + 4 >> 2]));
    }
   }
   HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 8 >> 2] + 1;
   continue;
  }
  break;
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuantizedBvh__walkStacklessTree_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 if (HEAP32[$0 + 56 >> 2] >= 1) {
  $4 = HEAP32[$0 + 96 >> 2];
  while (1) {
   $5 = 0;
   label$3 : {
    if (HEAPF32[$2 >> 2] > HEAPF32[$4 + 16 >> 2]) {
     break label$3;
    }
    $5 = 0;
    if (HEAPF32[$3 >> 2] < HEAPF32[$4 >> 2]) {
     break label$3;
    }
    $5 = 1;
   }
   $6 = 0;
   $6 = HEAPF32[$3 + 8 >> 2] < HEAPF32[$4 + 8 >> 2] | HEAPF32[$2 + 8 >> 2] > HEAPF32[$4 + 24 >> 2] ? $6 : $5;
   label$5 : {
    label$6 : {
     label$7 : {
      if (!(HEAPF32[$3 + 4 >> 2] < HEAPF32[$4 + 4 >> 2] ^ 1 ? !(HEAPF32[$2 + 4 >> 2] > HEAPF32[$4 + 20 >> 2]) : 0)) {
       $5 = HEAP32[$4 + 32 >> 2] == -1;
       $6 = 0;
       break label$7;
      }
      $5 = HEAP32[$4 + 32 >> 2] == -1;
      if (($6 & $5) != 1) {
       break label$7;
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, HEAP32[$4 + 36 >> 2], HEAP32[$4 + 40 >> 2]);
      break label$6;
     }
     if ($6 | $5) {
      break label$6;
     }
     $6 = HEAP32[$4 + 32 >> 2];
     $7 = $7 + $6 | 0;
     $4 = ($6 << 6) + $4 | 0;
     break label$5;
    }
    $7 = $7 + 1 | 0;
    $4 = $4 - -64 | 0;
   }
   $8 = $8 + 1 | 0;
   if (($7 | 0) < HEAP32[$0 + 56 >> 2]) {
    continue;
   }
   break;
  }
 }
 if (HEAP32[5681] < ($8 | 0)) {
  HEAP32[5681] = $8;
 }
}
function btCompoundCollisionAlgorithm___btCompoundCollisionAlgorithm_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 HEAP32[$0 >> 2] = 10412;
 $3 = HEAP32[$0 + 52 >> 2];
 if (($3 | 0) >= 1) {
  while (1) {
   $4 = $1 << 2;
   $2 = HEAP32[$4 + HEAP32[$0 + 60 >> 2] >> 2];
   if ($2) {
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] >> 2]]($2) | 0;
    $2 = HEAP32[$0 + 4 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 60 >> 2]]($2, HEAP32[HEAP32[$0 + 60 >> 2] + $4 >> 2]);
   }
   $1 = $1 + 1 | 0;
   if (($3 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 $1 = HEAP32[$0 + 60 >> 2];
 if ($1) {
  if (HEAPU8[$0 - -64 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 60 >> 2] = 0;
 }
 HEAP32[$0 + 60 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP8[$0 - -64 | 0] = 1;
 $1 = HEAP32[$0 + 40 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 44 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 40 >> 2] = 0;
 }
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP8[$0 + 44 | 0] = 1;
 $1 = HEAP32[$0 + 20 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 24 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 20 >> 2] = 0;
 }
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP8[$0 + 24 | 0] = 1;
 btActivatingCollisionAlgorithm___btActivatingCollisionAlgorithm_28_29($0);
 return $0 | 0;
}
function btConvexPolyhedron___btConvexPolyhedron_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 HEAP32[$0 >> 2] = 11348;
 $1 = HEAP32[$0 + 56 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 60 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 56 >> 2] = 0;
 }
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP8[$0 + 60 | 0] = 1;
 $3 = HEAP32[$0 + 28 >> 2];
 if (($3 | 0) >= 1) {
  while (1) {
   $1 = HEAP32[$0 + 36 >> 2] + Math_imul($2, 36) | 0;
   $4 = $1;
   $6 = $1;
   $5 = HEAP32[$1 + 12 >> 2];
   if ($5) {
    if (HEAPU8[$1 + 16 | 0]) {
     btAlignedFreeInternal_28void__29($5);
    }
    HEAP32[$4 + 12 >> 2] = 0;
   }
   HEAP8[$1 + 16 | 0] = 1;
   HEAP32[$4 + 12 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   $2 = $2 + 1 | 0;
   if (($3 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 $1 = HEAP32[$0 + 36 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 40 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 36 >> 2] = 0;
 }
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP8[$0 + 40 | 0] = 1;
 $1 = HEAP32[$0 + 16 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 20 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 16 >> 2] = 0;
 }
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP8[$0 + 20 | 0] = 1;
 return $0 | 0;
}
function asinf($0) {
 var $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = 0;
 label$1 : {
  label$2 : {
   $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
   $2 = $4 & 2147483647;
   if ($2 >>> 0 >= 1065353216) {
    if (($2 | 0) != 1065353216) {
     break label$2;
    }
    return Math_fround(+$0 * 1.5707963267948966 + 7.52316384526264e-37);
   }
   if ($2 >>> 0 <= 1056964607) {
    if ($2 + -8388608 >>> 0 < 956301312) {
     break label$1;
    }
    $3 = Math_fround($0 * $0);
    return Math_fround(Math_fround(Math_fround(Math_fround($3 * Math_fround(Math_fround($3 * Math_fround(Math_fround($3 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593))) / Math_fround(Math_fround($3 * Math_fround(-.7066296339035034)) + Math_fround(1))) * $0) + $0);
   }
   $0 = Math_fround(Math_fround(Math_fround(1) - fabsf($0)) * Math_fround(.5));
   $1 = sqrt(+$0);
   $1 = $1 + $1 * +Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593))) / Math_fround(Math_fround($0 * Math_fround(-.7066296339035034)) + Math_fround(1)));
   $0 = Math_fround(1.5707963267948966 - ($1 + $1));
   return ($4 | 0) < 0 ? Math_fround(-$0) : $0;
  }
  $0 = Math_fround(Math_fround(0) / Math_fround($0 - $0));
 }
 return $0;
}
function btQuantizedBvh___btQuantizedBvh_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 16304;
 $1 = HEAP32[$0 + 160 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 164 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 160 >> 2] = 0;
 }
 HEAP32[$0 + 160 >> 2] = 0;
 HEAP32[$0 + 152 >> 2] = 0;
 HEAP32[$0 + 156 >> 2] = 0;
 HEAP8[$0 + 164 | 0] = 1;
 $1 = HEAP32[$0 + 136 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 140 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 136 >> 2] = 0;
 }
 HEAP32[$0 + 136 >> 2] = 0;
 HEAP32[$0 + 128 >> 2] = 0;
 HEAP32[$0 + 132 >> 2] = 0;
 HEAP8[$0 + 140 | 0] = 1;
 $1 = HEAP32[$0 + 116 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 120 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 116 >> 2] = 0;
 }
 HEAP32[$0 + 116 >> 2] = 0;
 HEAP32[$0 + 108 >> 2] = 0;
 HEAP32[$0 + 112 >> 2] = 0;
 HEAP8[$0 + 120 | 0] = 1;
 $1 = HEAP32[$0 + 96 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 100 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 96 >> 2] = 0;
 }
 HEAP32[$0 + 96 >> 2] = 0;
 HEAP32[$0 + 88 >> 2] = 0;
 HEAP32[$0 + 92 >> 2] = 0;
 HEAP8[$0 + 100 | 0] = 1;
 $1 = HEAP32[$0 + 76 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 80 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 76 >> 2] = 0;
 }
 HEAP32[$0 + 76 >> 2] = 0;
 HEAP32[$0 + 68 >> 2] = 0;
 HEAP32[$0 + 72 >> 2] = 0;
 HEAP8[$0 + 80 | 0] = 1;
 return $0 | 0;
}
function btCollisionWorld__AllHitsRayResultCallback__AllHitsRayResultCallback_28btVector3_20const__2c_20btVector3_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 btCollisionWorld__RayResultCallback__RayResultCallback_28_29($1);
 HEAP32[$1 >> 2] = 1768;
 btAlignedObjectArray_btCollisionObject_20const____btAlignedObjectArray_28_29($1 + 20 | 0);
 $2 = HEAP32[$3 + 8 >> 2];
 $4 = HEAP32[$2 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 40 >> 2] = $4;
 HEAP32[$1 + 44 >> 2] = $0;
 $4 = HEAP32[$2 + 12 >> 2];
 $0 = HEAP32[$2 + 8 >> 2];
 HEAP32[$1 + 48 >> 2] = $0;
 HEAP32[$1 + 52 >> 2] = $4;
 $2 = HEAP32[$3 + 4 >> 2];
 $4 = HEAP32[$2 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 56 >> 2] = $4;
 HEAP32[$1 + 60 >> 2] = $0;
 $4 = HEAP32[$2 + 12 >> 2];
 $0 = HEAP32[$2 + 8 >> 2];
 HEAP32[$1 + 64 >> 2] = $0;
 HEAP32[$1 + 68 >> 2] = $4;
 btAlignedObjectArray_btVector3___btAlignedObjectArray_28_29($1 + 72 | 0);
 btAlignedObjectArray_btVector3___btAlignedObjectArray_28_29($1 + 92 | 0);
 btAlignedObjectArray_float___btAlignedObjectArray_28_29($1 + 112 | 0);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function btAlignedObjectArray_btCollisionObject_20const____resize_28int_2c_20btCollisionObject_20const__20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 $0 = HEAP32[$3 + 28 >> 2];
 HEAP32[$3 + 16 >> 2] = btAlignedObjectArray_btCollisionObject_20const____size_28_29_20const($0);
 label$2 : {
  if (HEAP32[$3 + 24 >> 2] < HEAP32[$3 + 16 >> 2]) {
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 24 >> 2];
   while (1) {
    if (HEAP32[$3 + 12 >> 2] < HEAP32[$3 + 16 >> 2]) {
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   break label$2;
  }
  if (HEAP32[$3 + 24 >> 2] > HEAP32[$3 + 16 >> 2]) {
   btAlignedObjectArray_btCollisionObject_20const____reserve_28int_29($0, HEAP32[$3 + 24 >> 2]);
  }
  HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 16 >> 2];
  while (1) {
   if (HEAP32[$3 + 8 >> 2] < HEAP32[$3 + 24 >> 2]) {
    HEAP32[HEAP32[$0 + 12 >> 2] + (HEAP32[$3 + 8 >> 2] << 2) >> 2] = HEAP32[HEAP32[$3 + 20 >> 2] >> 2];
    HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 24 >> 2];
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody__clearState_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $1 = global$0 + -64 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $3 = $1 + 20 | 0;
 $4 = $1 + 16 | 0;
 $5 = $1 + 12 | 0;
 $6 = $1 + 32 | 0;
 $7 = $1 + 28 | 0;
 $8 = $1 + 24 | 0;
 $9 = $1 + 44 | 0;
 $10 = $1 + 40 | 0;
 $2 = $1 + 36 | 0;
 HEAP32[$1 + 60 >> 2] = $0;
 $0 = HEAP32[$1 + 60 >> 2];
 HEAPF32[$1 + 56 >> 2] = 0;
 HEAPF32[$1 + 52 >> 2] = 0;
 HEAPF32[$1 + 48 >> 2] = 0;
 btVector3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__29($0 + 372 | 0, $1 + 56 | 0, $1 + 52 | 0, $1 + 48 | 0);
 HEAPF32[$1 + 44 >> 2] = 0;
 HEAPF32[$1 + 40 >> 2] = 0;
 HEAPF32[$1 + 36 >> 2] = 0;
 btVector3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__29($0 + 388 | 0, $9, $10, $2);
 HEAPF32[$1 + 32 >> 2] = 0;
 HEAPF32[$1 + 28 >> 2] = 0;
 HEAPF32[$1 + 24 >> 2] = 0;
 btVector3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__29($0 + 472 | 0, $6, $7, $8);
 HEAPF32[$1 + 20 >> 2] = 0;
 HEAPF32[$1 + 16 >> 2] = 0;
 HEAPF32[$1 + 12 >> 2] = 0;
 btVector3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__29($0 + 488 | 0, $3, $4, $5);
 $0 = $1 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSequentialImpulseConstraintSolver__solveGroupCacheFriendlySplitImpulseIterations_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0);
 label$1 : {
  if (!HEAP32[$7 + 52 >> 2] | HEAP32[$7 + 20 >> 2] < 1) {
   break label$1;
  }
  while (1) {
   $9 = Math_fround(0);
   $1 = 0;
   $3 = HEAP32[$0 + 28 >> 2];
   if (($3 | 0) >= 1) {
    while (1) {
     $4 = HEAP32[$0 + 16 >> 2];
     $2 = HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[HEAP32[$0 + 116 >> 2] + ($1 << 2) >> 2], 152) | 0;
     $11 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 220 >> 2]]($4 + Math_imul(HEAP32[$2 + 144 >> 2], 244) | 0, Math_imul(HEAP32[$2 + 148 >> 2], 244) + $4 | 0, $2));
     $9 = Math_fround($9 + Math_fround($11 * $11));
     $1 = $1 + 1 | 0;
     if (($3 | 0) != ($1 | 0)) {
      continue;
     }
     break;
    }
   }
   if ($9 <= HEAPF32[$7 + 92 >> 2]) {
    break label$1;
   }
   $1 = HEAP32[$7 + 20 >> 2];
   if (($10 | 0) >= ($1 + -1 | 0)) {
    break label$1;
   }
   $10 = $10 + 1 | 0;
   if (($10 | 0) < ($1 | 0)) {
    continue;
   }
   break;
  }
 }
}
function btMatrix3x3__btMatrix3x3_28btMatrix3x3_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $4 = global$0 - 16 | 0;
 $2 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$4 + 8 >> 2] = $0;
 HEAP32[$4 + 4 >> 2] = $1;
 $0 = HEAP32[$4 + 8 >> 2];
 HEAP32[$4 + 12 >> 2] = $0;
 $2 = $0 + 48 | 0;
 $1 = $0;
 while (1) {
  btVector3__btVector3_28_29($1);
  $1 = $1 + 16 | 0;
  if (($2 | 0) != ($1 | 0)) {
   continue;
  }
  break;
 }
 $3 = HEAP32[$4 + 4 >> 2];
 $1 = HEAP32[$3 >> 2];
 $2 = HEAP32[$3 + 4 >> 2];
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 $2 = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $1;
 $3 = HEAP32[$4 + 4 >> 2];
 $1 = HEAP32[$3 + 16 >> 2];
 $2 = HEAP32[$3 + 20 >> 2];
 HEAP32[$0 + 16 >> 2] = $1;
 HEAP32[$0 + 20 >> 2] = $2;
 $1 = HEAP32[$3 + 28 >> 2];
 $2 = HEAP32[$3 + 24 >> 2];
 HEAP32[$0 + 24 >> 2] = $2;
 HEAP32[$0 + 28 >> 2] = $1;
 $3 = HEAP32[$4 + 4 >> 2];
 $1 = HEAP32[$3 + 32 >> 2];
 $2 = HEAP32[$3 + 36 >> 2];
 HEAP32[$0 + 32 >> 2] = $1;
 HEAP32[$0 + 36 >> 2] = $2;
 $1 = HEAP32[$3 + 44 >> 2];
 $2 = HEAP32[$3 + 40 >> 2];
 HEAP32[$0 + 40 >> 2] = $2;
 HEAP32[$0 + 44 >> 2] = $1;
 $1 = HEAP32[$4 + 12 >> 2];
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function btDiscreteDynamicsWorld__createPredictiveContacts_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = global$0 - 16 | 0;
 $2 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $6 = CProfileSample__CProfileSample_28char_20const__29($4, 2712);
 $7 = CProfileSample__CProfileSample_28char_20const__29($4 + 8 | 0, 2675);
 $2 = HEAP32[$0 + 332 >> 2];
 if (HEAP32[$0 + 324 >> 2] >= 1) {
  while (1) {
   $5 = HEAP32[$0 + 24 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 16 >> 2]]($5, HEAP32[($3 << 2) + $2 >> 2]);
   $2 = HEAP32[$0 + 332 >> 2];
   $3 = $3 + 1 | 0;
   if (($3 | 0) < HEAP32[$0 + 324 >> 2]) {
    continue;
   }
   break;
  }
 }
 if ($2) {
  if (HEAPU8[$0 + 336 | 0]) {
   btAlignedFreeInternal_28void__29($2);
  }
  HEAP32[$0 + 332 >> 2] = 0;
 }
 HEAP32[$0 + 332 >> 2] = 0;
 HEAP32[$0 + 324 >> 2] = 0;
 HEAP32[$0 + 328 >> 2] = 0;
 HEAP8[$0 + 336 | 0] = 1;
 CProfileSample___CProfileSample_28_29($7);
 $3 = HEAP32[$0 + 248 >> 2];
 if (($3 | 0) >= 1) {
  btDiscreteDynamicsWorld__createPredictiveContactsInternal_28btRigidBody___2c_20int_2c_20float_29($0, HEAP32[$0 + 256 >> 2], $3, $1);
 }
 CProfileSample___CProfileSample_28_29($6);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSequentialImpulseConstraintSolver__btSequentialImpulseConstraintSolver_28_29($0) {
 HEAP32[$0 >> 2] = 3764;
 HEAP8[$0 + 20 | 0] = 1;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP8[$0 + 40 | 0] = 1;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP8[$0 + 60 | 0] = 1;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP8[$0 + 80 | 0] = 1;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP32[$0 + 76 >> 2] = 0;
 HEAP8[$0 + 100 | 0] = 1;
 HEAP32[$0 + 68 >> 2] = 0;
 HEAP32[$0 + 72 >> 2] = 0;
 HEAP32[$0 + 96 >> 2] = 0;
 HEAP8[$0 + 120 | 0] = 1;
 HEAP32[$0 + 88 >> 2] = 0;
 HEAP32[$0 + 92 >> 2] = 0;
 HEAP32[$0 + 116 >> 2] = 0;
 HEAP8[$0 + 140 | 0] = 1;
 HEAP32[$0 + 108 >> 2] = 0;
 HEAP32[$0 + 112 >> 2] = 0;
 HEAP32[$0 + 136 >> 2] = 0;
 HEAP32[$0 + 128 >> 2] = 0;
 HEAP32[$0 + 132 >> 2] = 0;
 HEAP8[$0 + 160 | 0] = 1;
 HEAP32[$0 + 156 >> 2] = 0;
 HEAP32[$0 + 148 >> 2] = 0;
 HEAP32[$0 + 152 >> 2] = 0;
 HEAP8[$0 + 180 | 0] = 1;
 HEAP32[$0 + 176 >> 2] = 0;
 HEAP32[$0 + 168 >> 2] = 0;
 HEAP32[$0 + 172 >> 2] = 0;
 HEAP8[$0 + 208 | 0] = 1;
 HEAP32[$0 + 232 >> 2] = 0;
 HEAP32[$0 + 204 >> 2] = 0;
 HEAP32[$0 + 196 >> 2] = 0;
 HEAP32[$0 + 200 >> 2] = 0;
 HEAP32[$0 + 224 >> 2] = 0;
 HEAP32[$0 + 212 >> 2] = 142;
 HEAP32[$0 + 216 >> 2] = 143;
 HEAP32[$0 + 220 >> 2] = 144;
 return $0;
}
function btBoxShape__setUnscaledHalfExtents_28btVector3_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 80 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = $2 + 24 | 0;
 $4 = $2 + 8 | 0;
 HEAP32[$2 + 76 >> 2] = $0;
 HEAP32[$2 + 72 >> 2] = $1;
 $1 = HEAP32[$2 + 76 >> 2];
 HEAPF32[$2 + 52 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1);
 HEAPF32[$2 + 48 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1);
 HEAPF32[$2 + 44 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1);
 $0 = $2 + 56 | 0;
 btVector3__btVector3_28float_20const__2c_20float_20const__2c_20float_20const__29($0, $2 + 52 | 0, $2 + 48 | 0, $2 + 44 | 0);
 operator__28btVector3_20const__2c_20btVector3_20const__29_2($4, HEAP32[$2 + 72 >> 2], $1 + 20 | 0);
 operator__28btVector3_20const__2c_20btVector3_20const__29($3, $4, $0);
 $4 = HEAP32[$3 >> 2];
 $0 = HEAP32[$3 + 4 >> 2];
 HEAP32[$1 + 36 >> 2] = $4;
 HEAP32[$1 + 40 >> 2] = $0;
 $4 = HEAP32[$3 + 12 >> 2];
 $0 = HEAP32[$3 + 8 >> 2];
 HEAP32[$1 + 44 >> 2] = $0;
 HEAP32[$1 + 48 >> 2] = $4;
 btConvexInternalShape__setSafeMargin_28btVector3_20const__2c_20float_29($1, HEAP32[$2 + 72 >> 2], Math_fround(.10000000149011612));
 $0 = $2 + 80 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConeShape__coneLocalSupport_28btVector3_20const__29_20const($0, $1, $2) {
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0);
 $5 = Math_fround(HEAPF32[$1 + 64 >> 2] * Math_fround(.5));
 $7 = HEAP32[$1 + 68 >> 2];
 $8 = HEAP32[$1 + 72 >> 2];
 $6 = $8 << 2;
 $3 = HEAPF32[$2 >> 2];
 $4 = Math_fround($3 * $3);
 $3 = HEAPF32[$2 + 4 >> 2];
 $4 = Math_fround($4 + Math_fround($3 * $3));
 $3 = HEAPF32[$2 + 8 >> 2];
 label$1 : {
  label$2 : {
   if (!!(HEAPF32[$6 + $2 >> 2] > Math_fround(HEAPF32[$1 + 56 >> 2] * Math_fround(Math_sqrt(Math_fround($4 + Math_fround($3 * $3))))))) {
    HEAP32[($7 << 2) + $0 >> 2] = 0;
    HEAPF32[$0 + $6 >> 2] = $5;
    $6 = HEAP32[$1 + 76 >> 2];
    break label$2;
   }
   $3 = HEAPF32[($7 << 2) + $2 >> 2];
   $6 = HEAP32[$1 + 76 >> 2];
   $9 = HEAPF32[($6 << 2) + $2 >> 2];
   $4 = Math_fround(Math_sqrt(Math_fround(Math_fround($3 * $3) + Math_fround($9 * $9))));
   if (!!($4 > Math_fround(1.1920928955078125e-7))) {
    $4 = Math_fround(HEAPF32[$1 + 60 >> 2] / $4);
    HEAPF32[($7 << 2) + $0 >> 2] = $3 * $4;
    HEAPF32[($8 << 2) + $0 >> 2] = -$5;
    $5 = Math_fround($9 * $4);
    break label$1;
   }
   HEAP32[($7 << 2) + $0 >> 2] = 0;
   HEAPF32[($8 << 2) + $0 >> 2] = -$5;
  }
  $5 = Math_fround(0);
 }
 HEAPF32[($6 << 2) + $0 >> 2] = $5;
}
function __dynamic_cast($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 + -64 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $5 = HEAP32[$0 >> 2];
 $6 = HEAP32[$5 + -4 >> 2];
 $5 = HEAP32[$5 + -8 >> 2];
 HEAP32[$4 + 20 >> 2] = $3;
 HEAP32[$4 + 16 >> 2] = $1;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $2;
 $1 = 0;
 memset($4 + 24 | 0, 0, 39);
 $0 = $0 + $5 | 0;
 label$2 : {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($6, $2, 0)) {
   HEAP32[$4 + 56 >> 2] = 1;
   FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 20 >> 2]]($6, $4 + 8 | 0, $0, $0, 1, 0);
   $1 = HEAP32[$4 + 32 >> 2] == 1 ? $0 : 0;
   break label$2;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($6, $4 + 8 | 0, $0, 1, 0);
  $0 = HEAP32[$4 + 44 >> 2];
  if ($0 >>> 0 > 1) {
   break label$2;
  }
  if ($0 - 1) {
   $1 = HEAP32[$4 + 48 >> 2] == 1 ? HEAP32[$4 + 36 >> 2] == 1 ? HEAP32[$4 + 40 >> 2] == 1 ? HEAP32[$4 + 28 >> 2] : 0 : 0 : 0;
   break label$2;
  }
  if (HEAP32[$4 + 32 >> 2] != 1) {
   if (HEAP32[$4 + 48 >> 2] | HEAP32[$4 + 36 >> 2] != 1 | HEAP32[$4 + 40 >> 2] != 1) {
    break label$2;
   }
  }
  $1 = HEAP32[$4 + 24 >> 2];
 }
 $0 = $4 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function btAlignedObjectArray_btDbvtNode_20const____btAlignedObjectArray_28btAlignedObjectArray_btDbvtNode_20const___20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP8[$0 + 16 | 0] = 1;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 $3 = HEAP32[$1 + 4 >> 2];
 if (($3 | 0) <= 0) {
  HEAP32[$0 + 4 >> 2] = $3;
  return $0;
 }
 $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($3 << 2, 16);
 $6 = HEAP32[$0 + 4 >> 2];
 if (($6 | 0) >= 1) {
  while (1) {
   $5 = $2 << 2;
   HEAP32[$5 + $4 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] + $5 >> 2];
   $2 = $2 + 1 | 0;
   if (($6 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 $2 = HEAP32[$0 + 12 >> 2];
 if ($2) {
  if (HEAPU8[$0 + 16 | 0]) {
   btAlignedFreeInternal_28void__29($2);
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 HEAP32[$0 + 12 >> 2] = $4;
 HEAP8[$0 + 16 | 0] = 1;
 HEAP32[$0 + 8 >> 2] = $3;
 $2 = 0;
 while (1) {
  HEAP32[($2 << 2) + $4 >> 2] = 0;
  $4 = HEAP32[$0 + 12 >> 2];
  $2 = $2 + 1 | 0;
  if (($3 | 0) != ($2 | 0)) {
   continue;
  }
  break;
 }
 HEAP32[$0 + 4 >> 2] = $3;
 if (($3 | 0) >= 1) {
  $2 = 0;
  while (1) {
   $5 = $2 << 2;
   HEAP32[$5 + $4 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + $5 >> 2];
   $2 = $2 + 1 | 0;
   if (($3 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 return $0;
}
function btCompoundShape__setMaterial_28int_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
 var $7 = 0, $8 = 0;
 $7 = global$0 - 32 | 0;
 $8 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 HEAP32[$7 + 28 >> 2] = $0;
 HEAP32[$7 + 24 >> 2] = $1;
 HEAPF32[$7 + 20 >> 2] = $2;
 HEAPF32[$7 + 16 >> 2] = $3;
 HEAPF32[$7 + 12 >> 2] = $4;
 HEAPF32[$7 + 8 >> 2] = $5;
 HEAP32[$7 + 4 >> 2] = $6;
 $2 = HEAPF32[$7 + 20 >> 2];
 $1 = HEAP32[$7 + 28 >> 2];
 HEAPF32[btAlignedObjectArray_float___operator_5b_5d_28int_29($1 + 84 | 0, HEAP32[$7 + 24 >> 2]) >> 2] = $2;
 $2 = HEAPF32[$7 + 16 >> 2];
 HEAPF32[btAlignedObjectArray_float___operator_5b_5d_28int_29($1 + 124 | 0, HEAP32[$7 + 24 >> 2]) >> 2] = $2;
 $2 = HEAPF32[$7 + 12 >> 2];
 HEAPF32[btAlignedObjectArray_float___operator_5b_5d_28int_29($1 + 104 | 0, HEAP32[$7 + 24 >> 2]) >> 2] = $2;
 $2 = HEAPF32[$7 + 8 >> 2];
 HEAPF32[btAlignedObjectArray_float___operator_5b_5d_28int_29($1 + 144 | 0, HEAP32[$7 + 24 >> 2]) >> 2] = $2;
 $0 = HEAP32[$7 + 4 >> 2];
 HEAP32[btAlignedObjectArray_int___operator_5b_5d_28int_29($1 + 164 | 0, HEAP32[$7 + 24 >> 2]) >> 2] = $0;
 HEAP8[$1 + 184 | 0] = 1;
 $0 = $7 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDbvt__insert_28btDbvtAabbMm_20const__2c_20void__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $4 = HEAP32[$0 + 4 >> 2];
 label$1 : {
  if ($4) {
   HEAP32[$0 + 4 >> 2] = 0;
   break label$1;
  }
  $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(44, 16);
  $3 = $4;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$3 + 40 >> 2] = 0;
  HEAP32[$3 + 32 >> 2] = 0;
  HEAP32[$3 + 36 >> 2] = 0;
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
  HEAP32[$3 + 16 >> 2] = 0;
  HEAP32[$3 + 20 >> 2] = 0;
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$3 + 12 >> 2] = 0;
 }
 HEAP32[$4 + 36 >> 2] = $2;
 HEAP32[$4 + 32 >> 2] = 0;
 HEAP32[$4 + 40 >> 2] = 0;
 $5 = $1;
 $1 = HEAP32[$5 >> 2];
 $3 = HEAP32[$5 + 4 >> 2];
 HEAP32[$4 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $3;
 $1 = HEAP32[$5 + 12 >> 2];
 $3 = HEAP32[$5 + 8 >> 2];
 $2 = $3;
 $3 = $4;
 HEAP32[$3 + 8 >> 2] = $2;
 HEAP32[$3 + 12 >> 2] = $1;
 $3 = HEAP32[$5 + 20 >> 2];
 $1 = HEAP32[$5 + 16 >> 2];
 HEAP32[$4 + 16 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $3;
 $1 = HEAP32[$5 + 28 >> 2];
 $3 = HEAP32[$5 + 24 >> 2];
 $2 = $3;
 $3 = $4;
 HEAP32[$3 + 24 >> 2] = $2;
 HEAP32[$3 + 28 >> 2] = $1;
 insertleaf_28btDbvt__2c_20btDbvtNode__2c_20btDbvtNode__29($0, HEAP32[$0 >> 2], $3);
 HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
 return $3;
}
function btMatrix3x3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 var $10 = 0, $11 = 0;
 $10 = global$0 - 48 | 0;
 $11 = $10;
 if ($10 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $11;
 HEAP32[$10 + 44 >> 2] = $0;
 HEAP32[$10 + 40 >> 2] = $1;
 HEAP32[$10 + 36 >> 2] = $2;
 HEAP32[$10 + 32 >> 2] = $3;
 HEAP32[$10 + 28 >> 2] = $4;
 HEAP32[$10 + 24 >> 2] = $5;
 HEAP32[$10 + 20 >> 2] = $6;
 HEAP32[$10 + 16 >> 2] = $7;
 HEAP32[$10 + 12 >> 2] = $8;
 HEAP32[$10 + 8 >> 2] = $9;
 $0 = HEAP32[$10 + 44 >> 2];
 btVector3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__29($0, HEAP32[$10 + 40 >> 2], HEAP32[$10 + 36 >> 2], HEAP32[$10 + 32 >> 2]);
 btVector3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__29($0 + 16 | 0, HEAP32[$10 + 28 >> 2], HEAP32[$10 + 24 >> 2], HEAP32[$10 + 20 >> 2]);
 btVector3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__29($0 + 32 | 0, HEAP32[$10 + 16 >> 2], HEAP32[$10 + 12 >> 2], HEAP32[$10 + 8 >> 2]);
 $0 = $10 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_float___resize_28int_2c_20float_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 $0 = HEAP32[$3 + 28 >> 2];
 HEAP32[$3 + 16 >> 2] = btAlignedObjectArray_float___size_28_29_20const($0);
 label$2 : {
  if (HEAP32[$3 + 24 >> 2] < HEAP32[$3 + 16 >> 2]) {
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 24 >> 2];
   while (1) {
    if (HEAP32[$3 + 12 >> 2] < HEAP32[$3 + 16 >> 2]) {
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   break label$2;
  }
  if (HEAP32[$3 + 24 >> 2] > HEAP32[$3 + 16 >> 2]) {
   btAlignedObjectArray_float___reserve_28int_29($0, HEAP32[$3 + 24 >> 2]);
  }
  HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 16 >> 2];
  while (1) {
   if (HEAP32[$3 + 8 >> 2] < HEAP32[$3 + 24 >> 2]) {
    HEAPF32[HEAP32[$0 + 12 >> 2] + (HEAP32[$3 + 8 >> 2] << 2) >> 2] = HEAPF32[HEAP32[$3 + 20 >> 2] >> 2];
    HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 24 >> 2];
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_int___resize_28int_2c_20int_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 HEAP32[$3 + 20 >> 2] = $2;
 $0 = HEAP32[$3 + 28 >> 2];
 HEAP32[$3 + 16 >> 2] = btAlignedObjectArray_int___size_28_29_20const($0);
 label$2 : {
  if (HEAP32[$3 + 24 >> 2] < HEAP32[$3 + 16 >> 2]) {
   HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 24 >> 2];
   while (1) {
    if (HEAP32[$3 + 12 >> 2] < HEAP32[$3 + 16 >> 2]) {
     HEAP32[$3 + 12 >> 2] = HEAP32[$3 + 12 >> 2] + 1;
     continue;
    }
    break;
   }
   break label$2;
  }
  if (HEAP32[$3 + 24 >> 2] > HEAP32[$3 + 16 >> 2]) {
   btAlignedObjectArray_int___reserve_28int_29($0, HEAP32[$3 + 24 >> 2]);
  }
  HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 16 >> 2];
  while (1) {
   if (HEAP32[$3 + 8 >> 2] < HEAP32[$3 + 24 >> 2]) {
    HEAP32[HEAP32[$0 + 12 >> 2] + (HEAP32[$3 + 8 >> 2] << 2) >> 2] = HEAP32[HEAP32[$3 + 20 >> 2] >> 2];
    HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + 1;
    continue;
   }
   break;
  }
 }
 HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 24 >> 2];
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHashedOverlappingPairCache__btHashedOverlappingPairCache_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 HEAP32[$0 >> 2] = 15376;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 68 >> 2] = 0;
 HEAP8[$0 + 20 | 0] = 1;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP8[$0 + 44 | 0] = 1;
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP8[$0 - -64 | 0] = 1;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 60 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = 0;
 $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(32, 16);
 $5 = HEAP32[$0 + 8 >> 2];
 if (($5 | 0) >= 1) {
  while (1) {
   $1 = $3 << 4;
   $2 = $4 + $1 | 0;
   $1 = HEAP32[$0 + 16 >> 2] + $1 | 0;
   HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
   $3 = $3 + 1 | 0;
   if (($5 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 $2 = HEAP32[$0 + 16 >> 2];
 if ($2) {
  if (HEAPU8[$0 + 20 | 0]) {
   btAlignedFreeInternal_28void__29($2);
  }
  HEAP32[$0 + 16 >> 2] = 0;
 }
 HEAP32[$0 + 16 >> 2] = $4;
 HEAP8[$0 + 20 | 0] = 1;
 HEAP32[$0 + 12 >> 2] = 2;
 btHashedOverlappingPairCache__growTables_28_29($0);
 return $0;
}
function btDbvtBroadphase__aabbTest_28btVector3_20const__2c_20btVector3_20const__2c_20btBroadphaseAabbCallback__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 48 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 44 >> 2] = $3;
 HEAP32[$4 + 40 >> 2] = 16208;
 $5 = HEAP32[$1 + 8 >> 2];
 $3 = HEAP32[$1 + 12 >> 2];
 HEAP32[$4 + 16 >> 2] = $5;
 HEAP32[$4 + 20 >> 2] = $3;
 $5 = HEAP32[$1 + 4 >> 2];
 $3 = HEAP32[$1 >> 2];
 HEAP32[$4 + 8 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = $5;
 $1 = $2;
 $5 = HEAP32[$1 + 8 >> 2];
 $3 = HEAP32[$1 + 12 >> 2];
 HEAP32[$4 + 32 >> 2] = $5;
 HEAP32[$4 + 36 >> 2] = $3;
 $5 = HEAP32[$1 + 4 >> 2];
 $3 = HEAP32[$1 >> 2];
 HEAP32[$4 + 24 >> 2] = $3;
 HEAP32[$4 + 28 >> 2] = $5;
 btDbvt__collideTV_28btDbvtNode_20const__2c_20btDbvtAabbMm_20const__2c_20btDbvt__ICollide__29_20const($0 + 4 | 0, HEAP32[$0 + 4 >> 2], $4 + 8 | 0, $4 + 40 | 0);
 $1 = $0;
 $0 = $0 + 44 | 0;
 btDbvt__collideTV_28btDbvtNode_20const__2c_20btDbvtAabbMm_20const__2c_20btDbvt__ICollide__29_20const($0, HEAP32[$1 + 44 >> 2], $4 + 8 | 0, $4 + 40 | 0);
 $0 = $4 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDiscreteDynamicsWorld__addConstraint_28btTypedConstraint__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = HEAP32[$0 + 228 >> 2];
 label$1 : {
  if (($3 | 0) != HEAP32[$0 + 232 >> 2]) {
   break label$1;
  }
  $5 = $3 ? $3 << 1 : 1;
  if (($3 | 0) >= ($5 | 0)) {
   break label$1;
  }
  if ($5) {
   $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 2, 16);
   $3 = HEAP32[$0 + 228 >> 2];
  }
  if (($3 | 0) >= 1) {
   while (1) {
    $7 = $4 << 2;
    HEAP32[$7 + $6 >> 2] = HEAP32[HEAP32[$0 + 236 >> 2] + $7 >> 2];
    $4 = $4 + 1 | 0;
    if (($4 | 0) != ($3 | 0)) {
     continue;
    }
    break;
   }
  }
  $4 = HEAP32[$0 + 236 >> 2];
  if ($4) {
   if (HEAPU8[$0 + 240 | 0]) {
    btAlignedFreeInternal_28void__29($4);
    $3 = HEAP32[$0 + 228 >> 2];
   }
   HEAP32[$0 + 236 >> 2] = 0;
  }
  HEAP32[$0 + 236 >> 2] = $6;
  HEAP32[$0 + 232 >> 2] = $5;
  HEAP8[$0 + 240 | 0] = 1;
 }
 HEAP32[HEAP32[$0 + 236 >> 2] + ($3 << 2) >> 2] = $1;
 HEAP32[$0 + 228 >> 2] = $3 + 1;
 if ($2) {
  btRigidBody__addConstraintRef_28btTypedConstraint__29(HEAP32[$1 + 28 >> 2], $1);
  btRigidBody__addConstraintRef_28btTypedConstraint__29(HEAP32[$1 + 32 >> 2], $1);
 }
}
function btHashedSimplePairCache__btHashedSimplePairCache_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 HEAP32[$0 >> 2] = 10560;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP8[$0 + 20 | 0] = 1;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP8[$0 + 40 | 0] = 1;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP8[$0 + 60 | 0] = 1;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(24, 16);
 $5 = HEAP32[$0 + 8 >> 2];
 if (($5 | 0) >= 1) {
  while (1) {
   $2 = Math_imul($1, 12);
   $6 = $4 + $2 | 0;
   $2 = HEAP32[$0 + 16 >> 2] + $2 | 0;
   $3 = HEAP32[$2 >> 2];
   $7 = HEAP32[$2 + 4 >> 2];
   $8 = $3;
   $3 = $6;
   HEAP32[$3 >> 2] = $8;
   HEAP32[$3 + 4 >> 2] = $7;
   HEAP32[$3 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
   $1 = $1 + 1 | 0;
   if (($5 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 $1 = HEAP32[$0 + 16 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 20 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 16 >> 2] = 0;
 }
 HEAP32[$0 + 16 >> 2] = $4;
 HEAP8[$0 + 20 | 0] = 1;
 HEAP32[$0 + 12 >> 2] = 2;
 btHashedSimplePairCache__growTables_28_29($0);
 return $0;
}
function btConvexTriangleMeshShape__localGetSupportingVertex_28btVector3_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0);
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($0, $1, $2);
 if (Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1)) != Math_fround(0)) {
  $4 = HEAPF32[$2 + 4 >> 2];
  $3 = HEAPF32[$2 >> 2];
  $5 = HEAPF32[$2 + 8 >> 2];
  $6 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1));
  $1 = Math_fround(Math_fround(Math_fround($3 * $3) + Math_fround($4 * $4)) + Math_fround($5 * $5)) < Math_fround(1.4210854715202004e-14);
  $3 = $1 ? Math_fround(-1) : $3;
  $7 = $3;
  $5 = $1 ? Math_fround(-1) : $5;
  $4 = $1 ? Math_fround(-1) : $4;
  $3 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround($5 * $5) + Math_fround(Math_fround($3 * $3) + Math_fround($4 * $4))))));
  HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] + Math_fround($6 * Math_fround($7 * $3));
  HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] + Math_fround($6 * Math_fround($4 * $3));
  HEAPF32[$0 + 8 >> 2] = HEAPF32[$0 + 8 >> 2] + Math_fround($6 * Math_fround($5 * $3));
 }
}
function btConeShape__localGetSupportingVertex_28btVector3_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0);
 btConeShape__coneLocalSupport_28btVector3_20const__29_20const($0, $1, $2);
 if (Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1)) != Math_fround(0)) {
  $4 = HEAPF32[$2 + 4 >> 2];
  $3 = HEAPF32[$2 >> 2];
  $5 = HEAPF32[$2 + 8 >> 2];
  $6 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1));
  $1 = Math_fround(Math_fround(Math_fround($3 * $3) + Math_fround($4 * $4)) + Math_fround($5 * $5)) < Math_fround(1.4210854715202004e-14);
  $3 = $1 ? Math_fround(-1) : $3;
  $7 = $3;
  $5 = $1 ? Math_fround(-1) : $5;
  $4 = $1 ? Math_fround(-1) : $4;
  $3 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround($5 * $5) + Math_fround(Math_fround($3 * $3) + Math_fround($4 * $4))))));
  HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] + Math_fround($6 * Math_fround($7 * $3));
  HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] + Math_fround($6 * Math_fround($4 * $3));
  HEAPF32[$0 + 8 >> 2] = HEAPF32[$0 + 8 >> 2] + Math_fround($6 * Math_fround($5 * $3));
 }
}
function btSingleSweepCallback__process_28btBroadphaseProxy_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0;
 $2 = global$0 - 32 | 0;
 $4 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $3 = HEAP32[$0 + 184 >> 2];
 label$2 : {
  if (HEAPF32[$3 + 4 >> 2] == Math_fround(0)) {
   break label$2;
  }
  $5 = 1;
  $1 = HEAP32[$1 >> 2];
  if (!FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, HEAP32[$1 + 188 >> 2])) {
   break label$2;
  }
  $6 = HEAPF32[$0 + 188 >> 2];
  $3 = HEAP32[$0 + 184 >> 2];
  $7 = HEAP32[$0 + 192 >> 2];
  $4 = HEAP32[$1 + 192 >> 2];
  HEAP32[$2 + 24 >> 2] = -1;
  HEAP32[$2 + 28 >> 2] = -1;
  HEAP32[$2 + 20 >> 2] = $1 + 4;
  HEAP32[$2 + 16 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = $4;
  HEAP32[$2 + 8 >> 2] = 0;
  btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29($7, $0 + 36 | 0, $0 + 100 | 0, $2 + 8 | 0, $3, $6);
 }
 $0 = $2 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $5 | 0;
}
function btConvexInternalShape__localGetSupportingVertex_28btVector3_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0);
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($0, $1, $2);
 if (Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1)) != Math_fround(0)) {
  $4 = HEAPF32[$2 + 4 >> 2];
  $3 = HEAPF32[$2 >> 2];
  $5 = HEAPF32[$2 + 8 >> 2];
  $6 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1));
  $1 = Math_fround(Math_fround(Math_fround($3 * $3) + Math_fround($4 * $4)) + Math_fround($5 * $5)) < Math_fround(1.4210854715202004e-14);
  $3 = $1 ? Math_fround(-1) : $3;
  $7 = $3;
  $5 = $1 ? Math_fround(-1) : $5;
  $4 = $1 ? Math_fround(-1) : $4;
  $3 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround($5 * $5) + Math_fround(Math_fround($3 * $3) + Math_fround($4 * $4))))));
  HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] + Math_fround($6 * Math_fround($7 * $3));
  HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] + Math_fround($6 * Math_fround($4 * $3));
  HEAPF32[$0 + 8 >> 2] = HEAPF32[$0 + 8 >> 2] + Math_fround($6 * Math_fround($5 * $3));
 }
}
function btConvexHullInternal__Int128__toScalar_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = 0;
 $2 = global$0 - 16 | 0;
 $1 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 $3 = HEAP32[$0 + 8 >> 2];
 $6 = $3;
 $1 = HEAP32[$0 + 12 >> 2];
 $7 = $1;
 label$2 : {
  if (($1 | 0) > 0 ? 1 : ($1 | 0) >= 0 ? $6 >>> 0 < 0 ? 0 : 1 : 0) {
   $1 = $6;
   $5 = Math_fround(Math_fround(+($1 >>> 0) + 4294967296 * +($7 >>> 0)) * Math_fround(0x10000000000000000));
   $1 = HEAP32[$0 + 4 >> 2];
   $5 = Math_fround($5 + Math_fround(+HEAPU32[$0 >> 2] + 4294967296 * +($1 >>> 0)));
   break label$2;
  }
  $8 = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$0 >> 2];
  $0 = $1;
  $3 = $1;
  $4 = 0 - $1 | 0;
  HEAP32[$2 >> 2] = $4;
  $1 = $8;
  HEAP32[$2 + 4 >> 2] = 0 - ($1 + (0 < $3 >>> 0) | 0);
  $4 = $7 ^ -1;
  $3 = $6 ^ -1;
  $1 = $3 + !($1 | $0) | 0;
  if ($1 >>> 0 < $3 >>> 0) {
   $4 = $4 + 1 | 0;
  }
  HEAP32[$2 + 8 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = $4;
  $5 = Math_fround(-btConvexHullInternal__Int128__toScalar_28_29_20const($2));
 }
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $5;
}
function btSphereTriangleCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = HEAP32[$0 + 12 >> 2];
 if (!(!$2 | !HEAPU8[$0 + 8 | 0])) {
  $3 = HEAP32[$1 + 4 >> 2];
  label$2 : {
   if (($3 | 0) != HEAP32[$1 + 8 >> 2]) {
    break label$2;
   }
   $4 = $3 ? $3 << 1 : 1;
   if (($3 | 0) >= ($4 | 0)) {
    break label$2;
   }
   if ($4) {
    $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2, 16);
    $3 = HEAP32[$1 + 4 >> 2];
   }
   if (($3 | 0) >= 1) {
    $2 = 0;
    while (1) {
     $6 = $2 << 2;
     HEAP32[$6 + $5 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + $6 >> 2];
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$1 + 12 >> 2];
   if ($2) {
    if (HEAPU8[$1 + 16 | 0]) {
     btAlignedFreeInternal_28void__29($2);
     $3 = HEAP32[$1 + 4 >> 2];
    }
    HEAP32[$1 + 12 >> 2] = 0;
   }
   HEAP32[$1 + 12 >> 2] = $5;
   HEAP8[$1 + 16 | 0] = 1;
   HEAP32[$1 + 8 >> 2] = $4;
   $2 = HEAP32[$0 + 12 >> 2];
  }
  HEAP32[HEAP32[$1 + 12 >> 2] + ($3 << 2) >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $3 + 1;
 }
}
function btSphereSphereCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = HEAP32[$0 + 12 >> 2];
 if (!(!$2 | !HEAPU8[$0 + 8 | 0])) {
  $3 = HEAP32[$1 + 4 >> 2];
  label$2 : {
   if (($3 | 0) != HEAP32[$1 + 8 >> 2]) {
    break label$2;
   }
   $4 = $3 ? $3 << 1 : 1;
   if (($3 | 0) >= ($4 | 0)) {
    break label$2;
   }
   if ($4) {
    $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2, 16);
    $3 = HEAP32[$1 + 4 >> 2];
   }
   if (($3 | 0) >= 1) {
    $2 = 0;
    while (1) {
     $6 = $2 << 2;
     HEAP32[$6 + $5 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + $6 >> 2];
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$1 + 12 >> 2];
   if ($2) {
    if (HEAPU8[$1 + 16 | 0]) {
     btAlignedFreeInternal_28void__29($2);
     $3 = HEAP32[$1 + 4 >> 2];
    }
    HEAP32[$1 + 12 >> 2] = 0;
   }
   HEAP32[$1 + 12 >> 2] = $5;
   HEAP8[$1 + 16 | 0] = 1;
   HEAP32[$1 + 8 >> 2] = $4;
   $2 = HEAP32[$0 + 12 >> 2];
  }
  HEAP32[HEAP32[$1 + 12 >> 2] + ($3 << 2) >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $3 + 1;
 }
}
function btConvexPlaneCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = HEAP32[$0 + 12 >> 2];
 if (!(!$2 | !HEAPU8[$0 + 8 | 0])) {
  $3 = HEAP32[$1 + 4 >> 2];
  label$2 : {
   if (($3 | 0) != HEAP32[$1 + 8 >> 2]) {
    break label$2;
   }
   $4 = $3 ? $3 << 1 : 1;
   if (($3 | 0) >= ($4 | 0)) {
    break label$2;
   }
   if ($4) {
    $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2, 16);
    $3 = HEAP32[$1 + 4 >> 2];
   }
   if (($3 | 0) >= 1) {
    $2 = 0;
    while (1) {
     $6 = $2 << 2;
     HEAP32[$6 + $5 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + $6 >> 2];
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$1 + 12 >> 2];
   if ($2) {
    if (HEAPU8[$1 + 16 | 0]) {
     btAlignedFreeInternal_28void__29($2);
     $3 = HEAP32[$1 + 4 >> 2];
    }
    HEAP32[$1 + 12 >> 2] = 0;
   }
   HEAP32[$1 + 12 >> 2] = $5;
   HEAP8[$1 + 16 | 0] = 1;
   HEAP32[$1 + 8 >> 2] = $4;
   $2 = HEAP32[$0 + 12 >> 2];
  }
  HEAP32[HEAP32[$1 + 12 >> 2] + ($3 << 2) >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $3 + 1;
 }
}
function btTriangleMesh___btTriangleMesh_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 15276;
 $1 = HEAP32[$0 + 156 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 160 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 156 >> 2] = 0;
 }
 HEAP32[$0 + 156 >> 2] = 0;
 HEAP32[$0 + 148 >> 2] = 0;
 HEAP32[$0 + 152 >> 2] = 0;
 HEAP8[$0 + 160 | 0] = 1;
 $1 = HEAP32[$0 + 136 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 140 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 136 >> 2] = 0;
 }
 HEAP32[$0 + 136 >> 2] = 0;
 HEAP32[$0 + 128 >> 2] = 0;
 HEAP32[$0 + 132 >> 2] = 0;
 HEAP8[$0 + 140 | 0] = 1;
 $1 = HEAP32[$0 + 116 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 120 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 116 >> 2] = 0;
 }
 HEAP32[$0 + 116 >> 2] = 0;
 HEAP32[$0 + 108 >> 2] = 0;
 HEAP32[$0 + 112 >> 2] = 0;
 HEAP8[$0 + 120 | 0] = 1;
 $1 = HEAP32[$0 + 96 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 100 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 96 >> 2] = 0;
 }
 HEAP32[$0 + 96 >> 2] = 0;
 HEAP32[$0 + 88 >> 2] = 0;
 HEAP32[$0 + 92 >> 2] = 0;
 HEAP8[$0 + 100 | 0] = 1;
 btTriangleIndexVertexArray___btTriangleIndexVertexArray_28_29($0);
 return $0 | 0;
}
function btAlignedObjectArray_btCollisionObject_20const____reserve_28int_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if ((btAlignedObjectArray_btCollisionObject_20const____capacity_28_29_20const($0) | 0) < HEAP32[$2 + 8 >> 2]) {
  HEAP32[$2 + 4 >> 2] = btAlignedObjectArray_btCollisionObject_20const____allocate_28int_29($0, HEAP32[$2 + 8 >> 2]);
  btAlignedObjectArray_btCollisionObject_20const____copy_28int_2c_20int_2c_20btCollisionObject_20const___29_20const($0, 0, btAlignedObjectArray_btCollisionObject_20const____size_28_29_20const($0), HEAP32[$2 + 4 >> 2]);
  btAlignedObjectArray_btCollisionObject_20const____destroy_28int_2c_20int_29($0, 0, btAlignedObjectArray_btCollisionObject_20const____size_28_29_20const($0));
  btAlignedObjectArray_btCollisionObject_20const____deallocate_28_29($0);
  HEAP8[$0 + 16 | 0] = 1;
  HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 }
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHeightfieldTerrainShape_btHeightfieldTerrainShape_9($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 $4 = Math_fround($4);
 $5 = Math_fround($5);
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $9 = 0, $10 = 0;
 $9 = global$0 - 48 | 0;
 $10 = $9;
 if ($9 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $10;
 HEAP32[$9 + 44 >> 2] = $0;
 HEAP32[$9 + 40 >> 2] = $1;
 HEAP32[$9 + 36 >> 2] = $2;
 HEAPF32[$9 + 32 >> 2] = $3;
 HEAPF32[$9 + 28 >> 2] = $4;
 HEAPF32[$9 + 24 >> 2] = $5;
 HEAP32[$9 + 20 >> 2] = $6;
 HEAP32[$9 + 16 >> 2] = $7;
 HEAP8[$9 + 15 | 0] = $8;
 $1 = btHeightfieldTerrainShape__operator_20new_28unsigned_20long_29(132);
 btHeightfieldTerrainShape__btHeightfieldTerrainShape_28int_2c_20int_2c_20void_20const__2c_20float_2c_20float_2c_20float_2c_20int_2c_20PHY_ScalarType_2c_20bool_29($1, HEAP32[$9 + 44 >> 2], HEAP32[$9 + 40 >> 2], HEAP32[$9 + 36 >> 2], HEAPF32[$9 + 32 >> 2], HEAPF32[$9 + 28 >> 2], HEAPF32[$9 + 24 >> 2], HEAP32[$9 + 20 >> 2], HEAP32[$9 + 16 >> 2], HEAP8[$9 + 15 | 0] & 1);
 $0 = $9 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function btBoxBoxCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = HEAP32[$0 + 12 >> 2];
 if (!(!$2 | !HEAPU8[$0 + 8 | 0])) {
  $3 = HEAP32[$1 + 4 >> 2];
  label$2 : {
   if (($3 | 0) != HEAP32[$1 + 8 >> 2]) {
    break label$2;
   }
   $4 = $3 ? $3 << 1 : 1;
   if (($3 | 0) >= ($4 | 0)) {
    break label$2;
   }
   if ($4) {
    $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2, 16);
    $3 = HEAP32[$1 + 4 >> 2];
   }
   if (($3 | 0) >= 1) {
    $2 = 0;
    while (1) {
     $6 = $2 << 2;
     HEAP32[$6 + $5 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + $6 >> 2];
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$1 + 12 >> 2];
   if ($2) {
    if (HEAPU8[$1 + 16 | 0]) {
     btAlignedFreeInternal_28void__29($2);
     $3 = HEAP32[$1 + 4 >> 2];
    }
    HEAP32[$1 + 12 >> 2] = 0;
   }
   HEAP32[$1 + 12 >> 2] = $5;
   HEAP8[$1 + 16 | 0] = 1;
   HEAP32[$1 + 8 >> 2] = $4;
   $2 = HEAP32[$0 + 12 >> 2];
  }
  HEAP32[HEAP32[$1 + 12 >> 2] + ($3 << 2) >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $3 + 1;
 }
}
function btConvexConvexAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = HEAP32[$0 + 56 >> 2];
 if (!(!$2 | !HEAPU8[$0 + 52 | 0])) {
  $3 = HEAP32[$1 + 4 >> 2];
  label$2 : {
   if (($3 | 0) != HEAP32[$1 + 8 >> 2]) {
    break label$2;
   }
   $4 = $3 ? $3 << 1 : 1;
   if (($3 | 0) >= ($4 | 0)) {
    break label$2;
   }
   if ($4) {
    $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2, 16);
    $3 = HEAP32[$1 + 4 >> 2];
   }
   if (($3 | 0) >= 1) {
    $2 = 0;
    while (1) {
     $6 = $2 << 2;
     HEAP32[$6 + $5 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + $6 >> 2];
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$1 + 12 >> 2];
   if ($2) {
    if (HEAPU8[$1 + 16 | 0]) {
     btAlignedFreeInternal_28void__29($2);
     $3 = HEAP32[$1 + 4 >> 2];
    }
    HEAP32[$1 + 12 >> 2] = 0;
   }
   HEAP32[$1 + 12 >> 2] = $5;
   HEAP8[$1 + 16 | 0] = 1;
   HEAP32[$1 + 8 >> 2] = $4;
   $2 = HEAP32[$0 + 56 >> 2];
  }
  HEAP32[HEAP32[$1 + 12 >> 2] + ($3 << 2) >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $3 + 1;
 }
}
function btCollisionWorld__ClosestConvexResultCallback__ClosestConvexResultCallback_28btVector3_20const__2c_20btVector3_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 btCollisionWorld__ConvexResultCallback__ConvexResultCallback_28_29($1);
 HEAP32[$1 >> 2] = 1532;
 $2 = HEAP32[$3 + 8 >> 2];
 $4 = HEAP32[$2 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 16 >> 2] = $4;
 HEAP32[$1 + 20 >> 2] = $0;
 $4 = HEAP32[$2 + 12 >> 2];
 $0 = HEAP32[$2 + 8 >> 2];
 HEAP32[$1 + 24 >> 2] = $0;
 HEAP32[$1 + 28 >> 2] = $4;
 $2 = HEAP32[$3 + 4 >> 2];
 $4 = HEAP32[$2 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 32 >> 2] = $4;
 HEAP32[$1 + 36 >> 2] = $0;
 $4 = HEAP32[$2 + 12 >> 2];
 $0 = HEAP32[$2 + 8 >> 2];
 HEAP32[$1 + 40 >> 2] = $0;
 HEAP32[$1 + 44 >> 2] = $4;
 btVector3__btVector3_28_29($1 + 48 | 0);
 btVector3__btVector3_28_29($1 - -64 | 0);
 HEAP32[$1 + 80 >> 2] = 0;
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function btGeneric6DofSpring2Constraint__getParam_28int_2c_20int_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = Math_fround(0);
 if ($2 >>> 0 <= 2) {
  $1 = $1 + -1 | 0;
  if ($1 >>> 0 > 3) {
   return Math_fround(Math_fround(0));
  }
  label$3 : {
   switch ($1 - 1 | 0) {
   case 0:
    return Math_fround(HEAPF32[(($2 << 2) + $0 | 0) + 728 >> 2]);
   case 2:
    return Math_fround(HEAPF32[(($2 << 2) + $0 | 0) + 744 >> 2]);
   default:
    return Math_fround(HEAPF32[(($2 << 2) + $0 | 0) + 760 >> 2]);
   case 1:
    break label$3;
   }
  }
  return Math_fround(HEAPF32[(($2 << 2) + $0 | 0) + 776 >> 2]);
 }
 $2 = $2 + -3 | 0;
 label$7 : {
  if ($2 >>> 0 > 2) {
   break label$7;
  }
  $1 = $1 + -1 | 0;
  if ($1 >>> 0 > 3) {
   break label$7;
  }
  label$8 : {
   switch ($1 - 1 | 0) {
   case 0:
    return Math_fround(HEAPF32[(Math_imul($2, 88) + $0 | 0) + 980 >> 2]);
   case 2:
    return Math_fround(HEAPF32[(Math_imul($2, 88) + $0 | 0) + 984 >> 2]);
   default:
    return Math_fround(HEAPF32[(Math_imul($2, 88) + $0 | 0) + 988 >> 2]);
   case 1:
    break label$8;
   }
  }
  $3 = HEAPF32[(Math_imul($2, 88) + $0 | 0) + 992 >> 2];
 }
 return Math_fround($3);
}
function __rem_pio2f($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = global$0 - 16 | 0;
 $2 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $5 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
 $2 = $5 & 2147483647;
 label$2 : {
  if ($2 >>> 0 <= 1305022426) {
   $3 = +$0;
   $7 = $3;
   $3 = $3 * .6366197723675814 + 6755399441055744 + -6755399441055744;
   HEAPF64[$1 >> 3] = $7 + $3 * -1.5707963109016418 + $3 * -1.5893254773528196e-8;
   if (Math_abs($3) < 2147483648) {
    $2 = ~~$3;
    break label$2;
   }
   $2 = -2147483648;
   break label$2;
  }
  if ($2 >>> 0 >= 2139095040) {
   HEAPF64[$1 >> 3] = Math_fround($0 - $0);
   $2 = 0;
   break label$2;
  }
  $6 = ($2 >>> 23 | 0) + -150 | 0;
  HEAPF64[$4 + 8 >> 3] = (wasm2js_scratch_store_i32(0, $2 - ($6 << 23) | 0), wasm2js_scratch_load_f32());
  $2 = __rem_pio2_large($4 + 8 | 0, $4, $6, 1, 0);
  $3 = HEAPF64[$4 >> 3];
  if (($5 | 0) <= -1) {
   HEAPF64[$1 >> 3] = -$3;
   $2 = 0 - $2 | 0;
   break label$2;
  }
  HEAPF64[$1 >> 3] = $3;
 }
 $1 = $4 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $2;
}
function btRigidBody__setMassProps_28float_2c_20btVector3_20const__29($0, $1, $2) {
 var $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0);
 $4 = HEAP32[$0 + 204 >> 2];
 label$1 : {
  if ($1 == Math_fround(0)) {
   HEAP32[$0 + 204 >> 2] = $4 | 1;
   break label$1;
  }
  HEAP32[$0 + 204 >> 2] = $4 & -2;
  $3 = Math_fround(Math_fround(1) / $1);
 }
 HEAPF32[$0 + 404 >> 2] = $3;
 HEAP32[$0 + 436 >> 2] = 0;
 HEAPF32[$0 + 424 >> 2] = HEAPF32[$0 + 440 >> 2] * $1;
 HEAPF32[$0 + 432 >> 2] = HEAPF32[$0 + 448 >> 2] * $1;
 HEAPF32[$0 + 428 >> 2] = HEAPF32[$0 + 444 >> 2] * $1;
 $1 = HEAPF32[$2 + 8 >> 2];
 $5 = HEAPF32[$2 + 4 >> 2];
 $6 = HEAPF32[$2 >> 2];
 HEAPF32[$0 + 620 >> 2] = HEAPF32[$0 + 408 >> 2] * $3;
 HEAPF32[$0 + 624 >> 2] = $3 * HEAPF32[$0 + 412 >> 2];
 HEAPF32[$0 + 628 >> 2] = $3 * HEAPF32[$0 + 416 >> 2];
 HEAP32[$0 + 632 >> 2] = 0;
 HEAP32[$0 + 468 >> 2] = 0;
 HEAPF32[$0 + 456 >> 2] = $6 != Math_fround(0) ? Math_fround(Math_fround(1) / $6) : Math_fround(0);
 HEAPF32[$0 + 460 >> 2] = $5 != Math_fround(0) ? Math_fround(Math_fround(1) / $5) : Math_fround(0);
 HEAPF32[$0 + 464 >> 2] = $1 != Math_fround(0) ? Math_fround(Math_fround(1) / $1) : Math_fround(0);
}
function btBvhTriangleMeshShape__setLocalScaling_28btVector3_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = Math_fround(0), $3 = 0, $4 = Math_fround(0);
 $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 $2 = Math_fround(HEAPF32[$3 >> 2] - HEAPF32[$1 >> 2]);
 $4 = Math_fround($2 * $2);
 $2 = Math_fround(HEAPF32[$3 + 4 >> 2] - HEAPF32[$1 + 4 >> 2]);
 $4 = Math_fround($4 + Math_fround($2 * $2));
 $2 = Math_fround(HEAPF32[$3 + 8 >> 2] - HEAPF32[$1 + 8 >> 2]);
 if (!!(Math_fround($4 + Math_fround($2 * $2)) > Math_fround(1.1920928955078125e-7))) {
  btTriangleMeshShape__setLocalScaling_28btVector3_20const__29($0, $1);
  if (HEAPU8[$0 + 65 | 0]) {
   $1 = HEAP32[$0 + 56 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 56 >> 2]);
  }
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(172, 16);
  $3 = btOptimizedBvh__btOptimizedBvh_28_29($1);
  HEAP32[$0 + 56 >> 2] = $1;
  btOptimizedBvh__build_28btStridingMeshInterface__2c_20bool_2c_20btVector3_20const__2c_20btVector3_20const__29($3, HEAP32[$0 + 52 >> 2], HEAPU8[$0 + 64 | 0], $0 + 20 | 0, $0 + 36 | 0);
  HEAP8[$0 + 65 | 0] = 1;
 }
}
function btConvexConcaveCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = HEAP32[$0 + 72 >> 2];
 if ($2) {
  $3 = HEAP32[$1 + 4 >> 2];
  label$2 : {
   if (($3 | 0) != HEAP32[$1 + 8 >> 2]) {
    break label$2;
   }
   $4 = $3 ? $3 << 1 : 1;
   if (($3 | 0) >= ($4 | 0)) {
    break label$2;
   }
   if ($4) {
    $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2, 16);
    $3 = HEAP32[$1 + 4 >> 2];
   }
   if (($3 | 0) >= 1) {
    $2 = 0;
    while (1) {
     $6 = $2 << 2;
     HEAP32[$6 + $5 >> 2] = HEAP32[HEAP32[$1 + 12 >> 2] + $6 >> 2];
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($3 | 0)) {
      continue;
     }
     break;
    }
   }
   $2 = HEAP32[$1 + 12 >> 2];
   if ($2) {
    if (HEAPU8[$1 + 16 | 0]) {
     btAlignedFreeInternal_28void__29($2);
     $3 = HEAP32[$1 + 4 >> 2];
    }
    HEAP32[$1 + 12 >> 2] = 0;
   }
   HEAP32[$1 + 12 >> 2] = $5;
   HEAP8[$1 + 16 | 0] = 1;
   HEAP32[$1 + 8 >> 2] = $4;
   $2 = HEAP32[$0 + 72 >> 2];
  }
  HEAP32[HEAP32[$1 + 12 >> 2] + ($3 << 2) >> 2] = $2;
  HEAP32[$1 + 4 >> 2] = $3 + 1;
 }
}
function btAlignedObjectArray_btVector3___push_back_28btVector3_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 16 | 0;
 $4 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = btAlignedObjectArray_btVector3___size_28_29_20const($3);
 if (HEAP32[$2 + 4 >> 2] == (btAlignedObjectArray_btVector3___capacity_28_29_20const($3) | 0)) {
  btAlignedObjectArray_btVector3___reserve_28int_29($3, btAlignedObjectArray_btVector3___allocSize_28int_29($3, btAlignedObjectArray_btVector3___size_28_29_20const($3)));
 }
 $0 = btVector3__operator_20new_28unsigned_20long_2c_20void__29(16, HEAP32[$3 + 12 >> 2] + (HEAP32[$3 + 4 >> 2] << 4) | 0);
 $5 = HEAP32[$2 + 8 >> 2];
 $1 = HEAP32[$5 >> 2];
 $4 = HEAP32[$5 + 4 >> 2];
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $4;
 $1 = HEAP32[$5 + 12 >> 2];
 $4 = HEAP32[$5 + 8 >> 2];
 HEAP32[$0 + 8 >> 2] = $4;
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionWorld__performDiscreteCollisionDetection_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $5 = CProfileSample__CProfileSample_28char_20const__29($1 + 8 | 0, 7829);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0);
 $3 = HEAP32[$0 + 24 >> 2];
 $2 = CProfileSample__CProfileSample_28char_20const__29($1, 7863);
 if ($3) {
  $4 = HEAP32[$0 + 68 >> 2];
  wasm2js_i32$1 = $3, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 36 >> 2]]($4) | 0, wasm2js_i32$3 = $0 + 28 | 0, wasm2js_i32$4 = HEAP32[$0 + 24 >> 2], wasm2js_i32$0 = HEAP32[HEAP32[$3 >> 2] + 32 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0);
 }
 CProfileSample___CProfileSample_28_29($2);
 CProfileSample___CProfileSample_28_29($5);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDbvtBroadphase___btDbvtBroadphase_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 HEAP32[$0 >> 2] = 15936;
 if (HEAPU8[$0 + 152 | 0]) {
  $1 = HEAP32[$0 + 96 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 96 >> 2]);
 }
 $3 = HEAP32[$0 + 160 >> 2];
 if (($3 | 0) >= 1) {
  while (1) {
   $1 = HEAP32[$0 + 168 >> 2] + Math_imul($2, 20) | 0;
   $4 = $1;
   $6 = $1;
   $5 = HEAP32[$1 + 12 >> 2];
   if ($5) {
    if (HEAPU8[$1 + 16 | 0]) {
     btAlignedFreeInternal_28void__29($5);
    }
    HEAP32[$4 + 12 >> 2] = 0;
   }
   HEAP8[$1 + 16 | 0] = 1;
   HEAP32[$4 + 12 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   $2 = $2 + 1 | 0;
   if (($3 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 $1 = HEAP32[$0 + 168 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 172 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 168 >> 2] = 0;
 }
 HEAP32[$0 + 168 >> 2] = 0;
 HEAP32[$0 + 160 >> 2] = 0;
 HEAP32[$0 + 164 >> 2] = 0;
 HEAP8[$0 + 172 | 0] = 1;
 btDbvt___btDbvt_28_29($0 + 44 | 0);
 btDbvt___btDbvt_28_29($0 + 4 | 0);
 return $0 | 0;
}
function btQuantizedBvh__reportRayOverlappingNodex_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 32 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP32[$4 + 28 >> 2] = 0;
 HEAP32[$4 + 16 >> 2] = 0;
 HEAP32[$4 + 20 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = 0;
 HEAP32[$4 + 12 >> 2] = 0;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 label$2 : {
  if (HEAPU8[$0 + 60 | 0]) {
   btQuantizedBvh__walkStacklessQuantizedTreeAgainstRay_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20int_29_20const($0, $1, $2, $3, $4 + 16 | 0, $4, 0, HEAP32[$0 + 56 >> 2]);
   break label$2;
  }
  btQuantizedBvh__walkStacklessTreeAgainstRay_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20int_29_20const($0, $1, $2, $3, $4 + 16 | 0, $4, $4, $4);
 }
 $0 = $4 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCylinderShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0);
 if (($3 | 0) >= 1) {
  while (1) {
   $5 = HEAPF32[$0 + 36 >> 2];
   $6 = HEAPF32[$0 + 32 >> 2];
   $10 = $8 << 4;
   $4 = $10 + $1 | 0;
   $9 = HEAPF32[$4 >> 2];
   $7 = HEAPF32[$4 + 8 >> 2];
   $11 = Math_fround(Math_sqrt(Math_fround(Math_fround($9 * $9) + Math_fround($7 * $7))));
   label$3 : {
    if ($11 != Math_fround(0)) {
     $6 = Math_fround($6 / $11);
     $7 = Math_fround($7 * $6);
     $6 = Math_fround($9 * $6);
     $5 = HEAPF32[$4 + 4 >> 2] < Math_fround(0) ? Math_fround(-$5) : $5;
     break label$3;
    }
    $7 = Math_fround(0);
    $5 = HEAPF32[$4 + 4 >> 2] < Math_fround(0) ? Math_fround(-$5) : $5;
   }
   $4 = $2 + $10 | 0;
   HEAPF32[$4 + 8 >> 2] = $7;
   HEAPF32[$4 + 4 >> 2] = $5;
   HEAPF32[$4 >> 2] = $6;
   $8 = $8 + 1 | 0;
   if (($8 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
}
function btAlignedObjectArray_btPersistentManifold____reserve_28int_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if ((btAlignedObjectArray_btPersistentManifold____capacity_28_29_20const($0) | 0) < HEAP32[$2 + 8 >> 2]) {
  HEAP32[$2 + 4 >> 2] = btAlignedObjectArray_btPersistentManifold____allocate_28int_29($0, HEAP32[$2 + 8 >> 2]);
  btAlignedObjectArray_btPersistentManifold____copy_28int_2c_20int_2c_20btPersistentManifold___29_20const($0, 0, btAlignedObjectArray_btPersistentManifold____size_28_29_20const($0), HEAP32[$2 + 4 >> 2]);
  btAlignedObjectArray_btPersistentManifold____destroy_28int_2c_20int_29($0, 0, btAlignedObjectArray_btPersistentManifold____size_28_29_20const($0));
  btAlignedObjectArray_btPersistentManifold____deallocate_28_29($0);
  HEAP8[$0 + 16 | 0] = 1;
  HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 }
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundCompoundCollisionAlgorithm___btCompoundCompoundCollisionAlgorithm_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 HEAP32[$0 >> 2] = 10624;
 $2 = HEAP32[$0 + 84 >> 2];
 $4 = HEAP32[$2 + 8 >> 2];
 if (($4 | 0) >= 1) {
  while (1) {
   $3 = HEAP32[(HEAP32[$2 + 16 >> 2] + Math_imul($1, 12) | 0) + 8 >> 2];
   if ($3) {
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] >> 2]]($3) | 0;
    $5 = HEAP32[$0 + 4 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 60 >> 2]]($5, $3);
   }
   $1 = $1 + 1 | 0;
   if (($4 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
  $2 = HEAP32[$0 + 84 >> 2];
 }
 btHashedSimplePairCache__removeAllPairs_28_29($2);
 $1 = HEAP32[$0 + 84 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
 btAlignedFreeInternal_28void__29(HEAP32[$0 + 84 >> 2]);
 $1 = HEAP32[$0 + 100 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 104 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 100 >> 2] = 0;
 }
 HEAP32[$0 + 100 >> 2] = 0;
 HEAP32[$0 + 92 >> 2] = 0;
 HEAP32[$0 + 96 >> 2] = 0;
 HEAP8[$0 + 104 | 0] = 1;
 btCompoundCollisionAlgorithm___btCompoundCollisionAlgorithm_28_29($0);
 return $0 | 0;
}
function btCollisionWorld__ClosestRayResultCallback__ClosestRayResultCallback_28btVector3_20const__2c_20btVector3_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $4 = global$0 - 16 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 $0 = HEAP32[$4 + 12 >> 2];
 btCollisionWorld__RayResultCallback__RayResultCallback_28_29($0);
 HEAP32[$0 >> 2] = 1924;
 $3 = HEAP32[$4 + 8 >> 2];
 $1 = HEAP32[$3 >> 2];
 $2 = HEAP32[$3 + 4 >> 2];
 HEAP32[$0 + 20 >> 2] = $1;
 HEAP32[$0 + 24 >> 2] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 $2 = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 28 >> 2] = $2;
 HEAP32[$0 + 32 >> 2] = $1;
 $3 = HEAP32[$4 + 4 >> 2];
 $1 = HEAP32[$3 >> 2];
 $2 = HEAP32[$3 + 4 >> 2];
 HEAP32[$0 + 36 >> 2] = $1;
 HEAP32[$0 + 40 >> 2] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 $2 = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 44 >> 2] = $2;
 HEAP32[$0 + 48 >> 2] = $1;
 btVector3__btVector3_28_29($0 + 52 | 0);
 btVector3__btVector3_28_29($0 + 68 | 0);
 $1 = $4 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function btUnionFind__sortIslands_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $2 = global$0 - 16 | 0;
 $1 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 $3 = HEAP32[$0 + 4 >> 2];
 label$2 : {
  if (($3 | 0) <= 0) {
   break label$2;
  }
  $6 = HEAP32[$0 + 12 >> 2];
  while (1) {
   $7 = ($4 << 3) + $6 | 0;
   $8 = $7;
   $1 = $4;
   $5 = HEAP32[$7 >> 2];
   if (($1 | 0) != ($5 | 0)) {
    while (1) {
     $1 = ($5 << 3) + $6 | 0;
     HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
     $1 = HEAP32[$1 >> 2];
     $8 = ($1 << 3) + $6 | 0;
     $5 = HEAP32[$8 >> 2];
     if (($1 | 0) != ($5 | 0)) {
      continue;
     }
     break;
    }
   }
   HEAP32[$7 >> 2] = $1;
   $4 = $4 + 1 | 0;
   if (($3 | 0) != ($4 | 0)) {
    continue;
   }
   break;
  }
  if (($3 | 0) < 2) {
   break label$2;
  }
  void_20btAlignedObjectArray_btElement___quickSortInternal_btUnionFindElementSortPredicate__28btUnionFindElementSortPredicate_20const__2c_20int_2c_20int_29($0, $2 + 8 | 0, 0, $3 + -1 | 0);
 }
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTriangleMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 48 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $1;
 HEAP32[$4 + 8 >> 2] = 12284;
 $1 = $2;
 $6 = HEAP32[$1 + 8 >> 2];
 $5 = HEAP32[$1 + 12 >> 2];
 HEAP32[$4 + 24 >> 2] = $6;
 HEAP32[$4 + 28 >> 2] = $5;
 $6 = HEAP32[$1 + 4 >> 2];
 $5 = HEAP32[$1 >> 2];
 HEAP32[$4 + 16 >> 2] = $5;
 HEAP32[$4 + 20 >> 2] = $6;
 $1 = $3;
 $6 = HEAP32[$1 + 8 >> 2];
 $5 = HEAP32[$1 + 12 >> 2];
 HEAP32[$4 + 40 >> 2] = $6;
 HEAP32[$4 + 44 >> 2] = $5;
 $6 = HEAP32[$1 + 4 >> 2];
 $5 = HEAP32[$1 >> 2];
 HEAP32[$4 + 32 >> 2] = $5;
 HEAP32[$4 + 36 >> 2] = $6;
 $0 = HEAP32[$0 + 52 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $4 + 8 | 0, $2, $1);
 btInternalTriangleIndexCallback___btInternalTriangleIndexCallback_28_29($4 + 8 | 0);
 $0 = $4 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDynamicsWorld__getFixedBody_28_29() {
 var $0 = 0, $1 = 0;
 $0 = global$0 + -64 | 0;
 $1 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 label$2 : {
  if (HEAP8[20712] & 1) {
   break label$2;
  }
  if (!__cxa_guard_acquire(20712)) {
   break label$2;
  }
  HEAPF32[$0 + 44 >> 2] = 0;
  HEAPF32[$0 + 40 >> 2] = 0;
  HEAPF32[$0 + 36 >> 2] = 0;
  $1 = $0 + 48 | 0;
  btVector3__btVector3_28float_20const__2c_20float_20const__2c_20float_20const__29($1, $0 + 44 | 0, $0 + 40 | 0, $0 + 36 | 0);
  btRigidBody__btRigidBody_28float_2c_20btMotionState__2c_20btCollisionShape__2c_20btVector3_20const__29(20036, Math_fround(0), 0, 0, $1);
  __cxa_guard_release(20712);
 }
 HEAPF32[$0 + 12 >> 2] = 0;
 HEAPF32[$0 + 8 >> 2] = 0;
 HEAPF32[$0 + 4 >> 2] = 0;
 $1 = $0 + 16 | 0;
 btVector3__btVector3_28float_20const__2c_20float_20const__2c_20float_20const__29($1, $0 + 12 | 0, $0 + 8 | 0, $0 + 4 | 0);
 btRigidBody__setMassProps_28float_2c_20btVector3_20const__29(20036, Math_fround(0), $1);
 $1 = $0 - -64 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return 20036;
}
function ccDiscreteDynamicsWorld__ccDiscreteDynamicsWorld_28btDispatcher__2c_20btBroadphaseInterface__2c_20btConstraintSolver__2c_20btCollisionConfiguration__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0;
 $5 = global$0 - 32 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $1 = HEAP32[$5 + 28 >> 2];
 btDiscreteDynamicsWorld__btDiscreteDynamicsWorld_28btDispatcher__2c_20btBroadphaseInterface__2c_20btConstraintSolver__2c_20btCollisionConfiguration__29($1, HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2]);
 HEAP32[$1 >> 2] = 1032;
 ccOverlapFilterCallback__ccOverlapFilterCallback_28_29($1 + 344 | 0);
 btAlignedObjectArray_int___btAlignedObjectArray_28_29($1 + 348 | 0);
 HEAPF32[$1 + 56 >> 2] = .009999999776482582;
 $0 = $5 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function btHashedOverlappingPairCache__findPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 HEAP32[5680] = HEAP32[5680] + 1;
 $3 = HEAP32[$1 + 12 >> 2] > HEAP32[$2 + 12 >> 2];
 $5 = HEAP32[($3 ? $1 : $2) + 12 >> 2];
 $6 = HEAP32[($3 ? $2 : $1) + 12 >> 2];
 $1 = $6 | $5 << 16;
 $1 = $1 + ($1 << 15 ^ -1) | 0;
 $1 = Math_imul($1 ^ $1 >>> 10, 9);
 $1 = $1 ^ $1 >>> 6;
 $1 = $1 + ($1 << 11 ^ -1) | 0;
 $1 = HEAP32[$0 + 12 >> 2] + -1 & ($1 ^ $1 >>> 16);
 label$1 : {
  label$2 : {
   if (($1 | 0) >= HEAP32[$0 + 32 >> 2]) {
    break label$2;
   }
   $1 = HEAP32[HEAP32[$0 + 40 >> 2] + ($1 << 2) >> 2];
   if (($1 | 0) == -1) {
    break label$2;
   }
   $2 = HEAP32[$0 + 16 >> 2];
   while (1) {
    $3 = $1 << 4;
    $4 = $3 + $2 | 0;
    if (HEAP32[HEAP32[($2 + $3 | 0) + 4 >> 2] + 12 >> 2] == ($5 | 0) ? HEAP32[HEAP32[$4 >> 2] + 12 >> 2] == ($6 | 0) : 0) {
     break label$1;
    }
    $1 = HEAP32[HEAP32[$0 + 60 >> 2] + ($1 << 2) >> 2];
    if (($1 | 0) != -1) {
     continue;
    }
    break;
   }
  }
  $4 = 0;
 }
 return $4 | 0;
}
function btConvexConvexAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = HEAP32[$1 >> 2];
 $4 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 56 >> 2]]($4, 72) | 0;
 $5 = HEAP32[$1 + 4 >> 2];
 $6 = HEAP32[$0 + 12 >> 2];
 $7 = HEAP32[$0 + 16 >> 2];
 $0 = HEAP32[$0 + 8 >> 2];
 btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($4, $1, $2, $3);
 HEAP8[$4 + 28 | 0] = 1;
 HEAP32[$4 + 8 >> 2] = $0;
 HEAP32[$4 >> 2] = 9864;
 HEAP32[$4 + 24 >> 2] = 0;
 HEAP8[$4 + 48 | 0] = 1;
 HEAP32[$4 + 16 >> 2] = 0;
 HEAP32[$4 + 20 >> 2] = 0;
 HEAP32[$4 + 44 >> 2] = 0;
 HEAP32[$4 + 64 >> 2] = $6;
 HEAP32[$4 + 68 >> 2] = $7;
 HEAP8[$4 + 60 | 0] = 0;
 HEAP32[$4 + 56 >> 2] = $5;
 HEAP8[$4 + 52 | 0] = 0;
 HEAP32[$4 + 36 >> 2] = 0;
 HEAP32[$4 + 40 >> 2] = 0;
 return $4 | 0;
}
function btCompoundCollisionAlgorithm__btCompoundCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, $4) {
 btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3);
 HEAP8[$0 + 24 | 0] = 1;
 HEAP32[$0 >> 2] = 10412;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP8[$0 + 44 | 0] = 1;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP8[$0 - -64 | 0] = 1;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 60 >> 2] = 0;
 HEAP8[$0 + 68 | 0] = $4;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = 0;
 $1 = HEAP32[$1 + 4 >> 2];
 HEAP8[$0 + 76 | 0] = 0;
 HEAP32[$0 + 72 >> 2] = $1;
 HEAP32[$0 + 80 >> 2] = HEAP32[HEAP32[($4 ? $3 : $2) + 4 >> 2] + 72 >> 2];
 btCompoundCollisionAlgorithm__preallocateChildAlgorithms_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $2, $3);
 return $0;
}
function btVoronoiSimplexSolver__inSimplex_28btVector3_20const__29($0, $1) {
 var $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0);
 $6 = HEAP32[$0 >> 2];
 $2 = 0;
 label$1 : {
  if (($6 | 0) < 1) {
   break label$1;
  }
  $7 = HEAPF32[$0 + 308 >> 2];
  $8 = HEAPF32[$1 + 8 >> 2];
  $9 = HEAPF32[$1 + 4 >> 2];
  $10 = HEAPF32[$1 >> 2];
  while (1) {
   $2 = ($4 << 4) + $0 | 0;
   $3 = Math_fround($10 - HEAPF32[$2 + 4 >> 2]);
   $5 = Math_fround($3 * $3);
   $3 = Math_fround($9 - HEAPF32[$2 + 8 >> 2]);
   $5 = Math_fround($5 + Math_fround($3 * $3));
   $3 = Math_fround($8 - HEAPF32[$2 + 12 >> 2]);
   $2 = 1;
   if (!!(Math_fround($5 + Math_fround($3 * $3)) <= $7)) {
    break label$1;
   }
   $4 = $4 + 1 | 0;
   if (($6 | 0) != ($4 | 0)) {
    continue;
   }
   break;
  }
  $2 = 0;
 }
 if (!(HEAPF32[$1 + 12 >> 2] != HEAPF32[$0 + 304 >> 2] | HEAPF32[$1 + 8 >> 2] != HEAPF32[$0 + 300 >> 2] | (HEAPF32[$1 + 4 >> 2] != HEAPF32[$0 + 296 >> 2] | HEAPF32[$1 >> 2] != HEAPF32[$0 + 292 >> 2]))) {
  $2 = 1;
 }
 return $2;
}
function btQuantizedBvh__walkRecursiveQuantizedTreeAgainstQueryAabb_28btQuantizedBvhNode_20const__2c_20btNodeOverlapCallback__2c_20unsigned_20short__2c_20unsigned_20short__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 while (1) {
  label$2 : {
   label$3 : {
    if (HEAPU16[$4 >> 1] < HEAPU16[$1 >> 1] | HEAPU16[$3 >> 1] > HEAPU16[$1 + 6 >> 1] | (HEAPU16[$4 + 4 >> 1] < HEAPU16[$1 + 4 >> 1] | HEAPU16[$3 + 4 >> 1] > HEAPU16[$1 + 10 >> 1])) {
     break label$3;
    }
    if (HEAPU16[$4 + 2 >> 1] < HEAPU16[$1 + 2 >> 1] | HEAPU16[$3 + 2 >> 1] > HEAPU16[$1 + 8 >> 1]) {
     break label$3;
    }
    $5 = HEAP32[$1 + 12 >> 2];
    if (($5 | 0) < 0) {
     break label$2;
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $5 >>> 21 | 0, $5 & 2097151);
   }
   return;
  }
  $5 = $1 + 16 | 0;
  btQuantizedBvh__walkRecursiveQuantizedTreeAgainstQueryAabb_28btQuantizedBvhNode_20const__2c_20btNodeOverlapCallback__2c_20unsigned_20short__2c_20unsigned_20short__29_20const($0, $5, $2, $3, $4);
  $6 = $1 + 32 | 0;
  $1 = HEAP32[$1 + 28 >> 2];
  $1 = ($1 | 0) > -1 ? $6 : $5 - ($1 << 4) | 0;
  continue;
 }
}
function btSimulationIslandManager__storeIslandActivationState_28btCollisionWorld__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
 $7 = HEAP32[$1 + 8 >> 2];
 if (($7 | 0) >= 1) {
  $10 = HEAP32[$1 + 16 >> 2];
  while (1) {
   $3 = HEAP32[($4 << 2) + $10 >> 2];
   label$3 : {
    if (!(HEAPU8[$3 + 204 | 0] & 3)) {
     $1 = HEAP32[$0 + 16 >> 2];
     $2 = $8;
     $9 = $2 << 3;
     $5 = $1 + $9 | 0;
     $6 = HEAP32[$5 >> 2];
     if (($2 | 0) != ($6 | 0)) {
      while (1) {
       $2 = ($6 << 3) + $1 | 0;
       HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
       $2 = HEAP32[$2 >> 2];
       $5 = ($2 << 3) + $1 | 0;
       $6 = HEAP32[$5 >> 2];
       if (($2 | 0) != ($6 | 0)) {
        continue;
       }
       break;
      }
     }
     HEAP32[$3 + 208 >> 2] = $2;
     HEAP32[($1 + $9 | 0) + 4 >> 2] = $4;
     HEAP32[$3 + 212 >> 2] = -1;
     $8 = $8 + 1 | 0;
     break label$3;
    }
    HEAP32[$3 + 208 >> 2] = -1;
    HEAP32[$3 + 212 >> 2] = -2;
   }
   $4 = $4 + 1 | 0;
   if (($4 | 0) < ($7 | 0)) {
    continue;
   }
   break;
  }
 }
}
function btMatrix3x3__cofac_28int_2c_20int_2c_20int_2c_20int_29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = Math_fround(0);
 $5 = global$0 - 32 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $0 = HEAP32[$5 + 28 >> 2];
 $7 = Math_fround(Math_fround(HEAPF32[btVector3__operator_20float_20const__28_29_20const($0 + (HEAP32[$5 + 24 >> 2] << 4) | 0) + (HEAP32[$5 + 20 >> 2] << 2) >> 2] * HEAPF32[btVector3__operator_20float_20const__28_29_20const((HEAP32[$5 + 16 >> 2] << 4) + $0 | 0) + (HEAP32[$5 + 12 >> 2] << 2) >> 2]) - Math_fround(HEAPF32[btVector3__operator_20float_20const__28_29_20const((HEAP32[$5 + 24 >> 2] << 4) + $0 | 0) + (HEAP32[$5 + 12 >> 2] << 2) >> 2] * HEAPF32[btVector3__operator_20float_20const__28_29_20const((HEAP32[$5 + 16 >> 2] << 4) + $0 | 0) + (HEAP32[$5 + 20 >> 2] << 2) >> 2]));
 $0 = $5 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $7;
}
function btCylinderShape__setLocalScaling_28btVector3_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0);
 $2 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $3 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $4 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $5 = HEAPF32[$0 + 20 >> 2];
 $6 = HEAPF32[$0 + 36 >> 2];
 $7 = HEAPF32[$0 + 24 >> 2];
 $8 = HEAPF32[$0 + 40 >> 2];
 $9 = HEAPF32[$0 + 16 >> 2];
 $10 = HEAPF32[$0 + 32 >> 2];
 btConvexInternalShape__setLocalScaling_28btVector3_20const__29($0, $1);
 HEAP32[$0 + 44 >> 2] = 0;
 HEAPF32[$0 + 40 >> 2] = Math_fround(Math_fround(Math_fround($4 + $8) / $7) * HEAPF32[$0 + 24 >> 2]) - $4;
 HEAPF32[$0 + 36 >> 2] = Math_fround(Math_fround(Math_fround($3 + $6) / $5) * HEAPF32[$0 + 20 >> 2]) - $3;
 HEAPF32[$0 + 32 >> 2] = Math_fround(Math_fround(Math_fround($2 + $10) / $9) * HEAPF32[$0 + 16 >> 2]) - $2;
}
function btBoxShape__setLocalScaling_28btVector3_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0);
 $2 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $3 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $4 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $5 = HEAPF32[$0 + 20 >> 2];
 $6 = HEAPF32[$0 + 36 >> 2];
 $7 = HEAPF32[$0 + 24 >> 2];
 $8 = HEAPF32[$0 + 40 >> 2];
 $9 = HEAPF32[$0 + 16 >> 2];
 $10 = HEAPF32[$0 + 32 >> 2];
 btConvexInternalShape__setLocalScaling_28btVector3_20const__29($0, $1);
 HEAP32[$0 + 44 >> 2] = 0;
 HEAPF32[$0 + 40 >> 2] = Math_fround(Math_fround(Math_fround($4 + $8) / $7) * HEAPF32[$0 + 24 >> 2]) - $4;
 HEAPF32[$0 + 36 >> 2] = Math_fround(Math_fround(Math_fround($3 + $6) / $5) * HEAPF32[$0 + 20 >> 2]) - $3;
 HEAPF32[$0 + 32 >> 2] = Math_fround(Math_fround(Math_fround($2 + $10) / $9) * HEAPF32[$0 + 16 >> 2]) - $2;
}
function btTriangleShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0);
 $3 = HEAPF32[$2 >> 2];
 $4 = HEAPF32[$2 + 4 >> 2];
 $5 = HEAPF32[$2 + 8 >> 2];
 $7 = Math_fround(Math_fround(Math_fround($3 * HEAPF32[$1 + 76 >> 2]) + Math_fround($4 * HEAPF32[$1 + 80 >> 2])) + Math_fround($5 * HEAPF32[$1 + 84 >> 2]));
 $8 = Math_fround(Math_fround(Math_fround($3 * HEAPF32[$1 + 92 >> 2]) + Math_fround($4 * HEAPF32[$1 + 96 >> 2])) + Math_fround($5 * HEAPF32[$1 + 100 >> 2]));
 $3 = Math_fround(Math_fround(Math_fround($3 * HEAPF32[$1 + 60 >> 2]) + Math_fround($4 * HEAPF32[$1 - -64 >> 2])) + Math_fround($5 * HEAPF32[$1 + 68 >> 2]));
 $1 = ($1 + 60 | 0) + (($3 < $7 ? $7 < $8 ? 2 : 1 : ($3 < $8) << 1) << 4) | 0;
 $2 = HEAP32[$1 >> 2];
 $6 = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $6;
 $2 = HEAP32[$1 + 12 >> 2];
 $6 = HEAP32[$1 + 8 >> 2];
 HEAP32[$0 + 8 >> 2] = $6;
 HEAP32[$0 + 12 >> 2] = $2;
}
function btHashMap_btInternalVertexPair_2c_20btInternalEdge____btHashMap_28_29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 + 72 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 76 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 72 >> 2] = 0;
 }
 HEAP32[$0 + 72 >> 2] = 0;
 HEAP32[$0 + 64 >> 2] = 0;
 HEAP32[$0 + 68 >> 2] = 0;
 HEAP8[$0 + 76 | 0] = 1;
 $1 = HEAP32[$0 + 52 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 56 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 52 >> 2] = 0;
 }
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP8[$0 + 56 | 0] = 1;
 $1 = HEAP32[$0 + 32 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 36 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 32 >> 2] = 0;
 }
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP8[$0 + 36 | 0] = 1;
 $1 = HEAP32[$0 + 12 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 16 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP8[$0 + 16 | 0] = 1;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 return $0;
}
function __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
  __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3);
  return;
 }
 $4 = HEAP32[$0 + 12 >> 2];
 $5 = $0 + 16 | 0;
 __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($5, $1, $2, $3);
 label$2 : {
  if (($4 | 0) < 2) {
   break label$2;
  }
  $4 = ($4 << 3) + $5 | 0;
  $0 = $0 + 24 | 0;
  while (1) {
   __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3);
   if (HEAPU8[$1 + 54 | 0]) {
    break label$2;
   }
   $0 = $0 + 8 | 0;
   if ($0 >>> 0 < $4 >>> 0) {
    continue;
   }
   break;
  }
 }
}
function btBoxShape__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0;
 $4 = global$0 - 48 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 124 >> 2]]($0, $4 + 32 | 0, $3);
 $3 = HEAP32[$4 + 32 >> 2];
 $6 = HEAP32[$4 + 36 >> 2];
 $5 = HEAP32[$4 + 40 >> 2];
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = $5;
 HEAP32[$1 + 4 >> 2] = $6;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$4 + 12 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = $5 ^ -2147483648;
 HEAP32[$4 + 4 >> 2] = $6 ^ -2147483648;
 HEAP32[$4 >> 2] = $3 ^ -2147483648;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($4 + 16 | 0, $0, $4);
 $1 = HEAP32[$4 + 28 >> 2];
 $0 = HEAP32[$4 + 24 >> 2];
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $1;
 $0 = HEAP32[$4 + 20 >> 2];
 $1 = HEAP32[$4 + 16 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $0;
 $0 = $4 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_btVector3___copy_28int_2c_20int_2c_20btVector3__29_20const($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 32 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 $3 = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 24 >> 2];
 while (1) {
  if (HEAP32[$4 + 12 >> 2] < HEAP32[$4 + 20 >> 2]) {
   $2 = btVector3__operator_20new_28unsigned_20long_2c_20void__29(16, HEAP32[$4 + 16 >> 2] + (HEAP32[$4 + 12 >> 2] << 4) | 0);
   $5 = HEAP32[$3 + 12 >> 2] + (HEAP32[$4 + 12 >> 2] << 4) | 0;
   $1 = HEAP32[$5 >> 2];
   $0 = HEAP32[$5 + 4 >> 2];
   HEAP32[$2 >> 2] = $1;
   HEAP32[$2 + 4 >> 2] = $0;
   $1 = HEAP32[$5 + 12 >> 2];
   $0 = HEAP32[$5 + 8 >> 2];
   HEAP32[$2 + 8 >> 2] = $0;
   HEAP32[$2 + 12 >> 2] = $1;
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
 $0 = $4 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSingleRayCallback__process_28btBroadphaseProxy_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 32 | 0;
 $4 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $3 = HEAP32[$0 + 216 >> 2];
 label$2 : {
  if (HEAPF32[$3 + 4 >> 2] == Math_fround(0)) {
   break label$2;
  }
  $5 = 1;
  $1 = HEAP32[$1 >> 2];
  if (!FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, HEAP32[$1 + 188 >> 2])) {
   break label$2;
  }
  $3 = HEAP32[$0 + 216 >> 2];
  $4 = HEAP32[$1 + 192 >> 2];
  HEAP32[$2 + 24 >> 2] = -1;
  HEAP32[$2 + 28 >> 2] = -1;
  HEAP32[$2 + 20 >> 2] = $1 + 4;
  HEAP32[$2 + 16 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = $4;
  HEAP32[$2 + 8 >> 2] = 0;
  btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29($0 + 68 | 0, $0 + 132 | 0, $2 + 8 | 0, $3);
 }
 $0 = $2 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $5 | 0;
}
function btSequentialImpulseConstraintSolver__solveGroup_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__2c_20btDispatcher__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $10 = 0;
 $9 = global$0 - 16 | 0;
 $10 = $9;
 if ($9 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $10;
 $10 = CProfileSample__CProfileSample_28char_20const__29($9 + 8 | 0, 3879);
 Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $1, $2, $3, $4, $5, $6, $7, $8));
 Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $1, $2, $3, $4, $5, $6, $7, $8));
 Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1, $2, $7));
 CProfileSample___CProfileSample_28_29($10);
 $0 = $9 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround(Math_fround(0));
}
function btDefaultCollisionConfiguration__getCollisionAlgorithmCreateFunc_28int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = ($1 | 0) != 8;
 if (!($3 | ($2 | 0) != 8)) {
  return HEAP32[$0 + 56 >> 2];
 }
 if (!(($2 | 0) != 1 | $3)) {
  return HEAP32[$0 + 72 >> 2];
 }
 if (!(($1 | 0) != 1 | ($2 | 0) != 8)) {
  return HEAP32[$0 + 76 >> 2];
 }
 if (!($1 | $2)) {
  return HEAP32[$0 + 68 >> 2];
 }
 if (!(($2 | 0) != 28 | ($1 | 0) > 19)) {
  return HEAP32[$0 + 84 >> 2];
 }
 if (!(($1 | 0) != 28 | ($2 | 0) > 19)) {
  return HEAP32[$0 + 80 >> 2];
 }
 label$7 : {
  if (($1 | 0) <= 19) {
   if (($2 | 0) <= 19) {
    return HEAP32[$0 + 28 >> 2];
   }
   if ($2 + -21 >>> 0 > 8) {
    break label$7;
   }
   return HEAP32[$0 + 32 >> 2];
  }
  if (!(($2 | 0) > 19 | $1 + -21 >>> 0 > 8)) {
   return HEAP32[$0 + 36 >> 2];
  }
  if (($1 | 0) != 31) {
   break label$7;
  }
  if (($2 | 0) == 31) {
   return HEAP32[$0 + 44 >> 2];
  }
  return HEAP32[$0 + 40 >> 2];
 }
 if (($2 | 0) == 31) {
  return HEAP32[$0 + 48 >> 2];
 }
 return HEAP32[$0 + 52 >> 2];
}
function btMatrix3x3__operator__28btMatrix3x3_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 $2 = HEAP32[$4 + 8 >> 2];
 $1 = HEAP32[$2 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $3 = $1;
 $5 = HEAP32[$4 + 12 >> 2];
 $1 = $5;
 HEAP32[$1 >> 2] = $3;
 HEAP32[$1 + 4 >> 2] = $0;
 $1 = HEAP32[$2 + 12 >> 2];
 $0 = HEAP32[$2 + 8 >> 2];
 $3 = $0;
 $0 = $5;
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $1;
 $2 = HEAP32[$4 + 8 >> 2];
 $1 = HEAP32[$2 + 16 >> 2];
 $0 = HEAP32[$2 + 20 >> 2];
 $3 = $1;
 $1 = $5;
 HEAP32[$1 + 16 >> 2] = $3;
 HEAP32[$1 + 20 >> 2] = $0;
 $1 = HEAP32[$2 + 28 >> 2];
 $0 = HEAP32[$2 + 24 >> 2];
 $3 = $0;
 $0 = $5;
 HEAP32[$0 + 24 >> 2] = $3;
 HEAP32[$0 + 28 >> 2] = $1;
 $2 = HEAP32[$4 + 8 >> 2];
 $1 = HEAP32[$2 + 32 >> 2];
 $0 = HEAP32[$2 + 36 >> 2];
 $3 = $1;
 $1 = $5;
 HEAP32[$1 + 32 >> 2] = $3;
 HEAP32[$1 + 36 >> 2] = $0;
 $1 = HEAP32[$2 + 44 >> 2];
 $0 = HEAP32[$2 + 40 >> 2];
 $3 = $0;
 $0 = $5;
 HEAP32[$0 + 40 >> 2] = $3;
 HEAP32[$0 + 44 >> 2] = $1;
 return $0;
}
function btCollisionWorld__updateAabbs_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $2 = CProfileSample__CProfileSample_28char_20const__29($1 + 8 | 0, 7791);
 $3 = HEAP32[$0 + 8 >> 2];
 if (($3 | 0) >= 1) {
  while (1) {
   $5 = HEAP32[HEAP32[$0 + 16 >> 2] + ($4 << 2) >> 2];
   label$4 : {
    label$5 : {
     if (HEAPU8[$0 + 76 | 0]) {
      break label$5;
     }
     $6 = HEAP32[$5 + 220 >> 2] + -2 | 0;
     if ($6 >>> 0 > 3) {
      break label$5;
     }
     switch ($6 - 1 | 0) {
     case 0:
     case 1:
      break label$5;
     default:
      break label$4;
     }
    }
    btCollisionWorld__updateSingleAabb_28btCollisionObject__29($0, $5);
    $3 = HEAP32[$0 + 8 >> 2];
   }
   $4 = $4 + 1 | 0;
   if (($4 | 0) < ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 CProfileSample___CProfileSample_28_29($2);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $4)) {
  __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3);
  return;
 }
 label$2 : {
  if (!is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 >> 2], $4)) {
   break label$2;
  }
  if (!(HEAP32[$1 + 20 >> 2] != ($2 | 0) ? HEAP32[$1 + 16 >> 2] != ($2 | 0) : 0)) {
   if (($3 | 0) != 1) {
    break label$2;
   }
   HEAP32[$1 + 32 >> 2] = 1;
   return;
  }
  HEAP32[$1 + 20 >> 2] = $2;
  HEAP32[$1 + 32 >> 2] = $3;
  HEAP32[$1 + 40 >> 2] = HEAP32[$1 + 40 >> 2] + 1;
  if (!(HEAP32[$1 + 36 >> 2] != 1 | HEAP32[$1 + 24 >> 2] != 2)) {
   HEAP8[$1 + 54 | 0] = 1;
  }
  HEAP32[$1 + 44 >> 2] = 4;
 }
}
function btCollisionDispatcher__btCollisionDispatcher_28btCollisionConfiguration__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 HEAP32[$0 + 4 >> 2] = 2;
 HEAP32[$0 >> 2] = 4072;
 HEAP32[$0 + 10444 >> 2] = $1;
 HEAP32[$0 + 28 >> 2] = 7180;
 HEAP32[$0 + 64 >> 2] = 163;
 HEAP8[$0 + 24 | 0] = 1;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 60 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 68 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1);
 HEAP32[$0 + 72 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
 while (1) {
  $1 = 0;
  while (1) {
   $3 = (Math_imul($2, 144) + $0 | 0) + ($1 << 2) | 0;
   $4 = HEAP32[$0 + 10444 >> 2];
   HEAP32[$3 + 76 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $2, $1);
   $4 = $3 + 5260 | 0;
   $3 = HEAP32[$0 + 10444 >> 2];
   HEAP32[$4 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $2, $1);
   $1 = $1 + 1 | 0;
   if (($1 | 0) != 36) {
    continue;
   }
   break;
  }
  $2 = $2 + 1 | 0;
  if (($2 | 0) != 36) {
   continue;
  }
  break;
 }
 return $0;
}
function btDbvt__update_28btDbvtNode__2c_20btDbvtAabbMm__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $5 = removeleaf_28btDbvt__2c_20btDbvtNode__29($0, $1);
 label$1 : {
  if (!$5) {
   $5 = 0;
   break label$1;
  }
  $3 = HEAP32[$0 + 8 >> 2];
  if (($3 | 0) >= 0) {
   if (!$3) {
    break label$1;
   }
   while (1) {
    $4 = HEAP32[$5 + 32 >> 2];
    if (!$4) {
     break label$1;
    }
    $5 = $4;
    $6 = $6 + 1 | 0;
    if (($3 | 0) != ($6 | 0)) {
     continue;
    }
    break;
   }
   break label$1;
  }
  $5 = HEAP32[$0 >> 2];
 }
 $3 = $2;
 $2 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 HEAP32[$1 >> 2] = $2;
 HEAP32[$1 + 4 >> 2] = $4;
 $2 = HEAP32[$3 + 28 >> 2];
 $4 = HEAP32[$3 + 24 >> 2];
 HEAP32[$1 + 24 >> 2] = $4;
 HEAP32[$1 + 28 >> 2] = $2;
 $4 = HEAP32[$3 + 20 >> 2];
 $2 = HEAP32[$3 + 16 >> 2];
 HEAP32[$1 + 16 >> 2] = $2;
 HEAP32[$1 + 20 >> 2] = $4;
 $2 = HEAP32[$3 + 12 >> 2];
 $4 = HEAP32[$3 + 8 >> 2];
 HEAP32[$1 + 8 >> 2] = $4;
 HEAP32[$1 + 12 >> 2] = $2;
 insertleaf_28btDbvt__2c_20btDbvtNode__2c_20btDbvtNode__29($0, $5, $1);
}
function btRigidBody__setLinearFactor_28btVector3_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $3 = global$0 - 32 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 28 >> 2] = $0;
 HEAP32[$3 + 24 >> 2] = $1;
 $2 = HEAP32[$3 + 24 >> 2];
 $1 = HEAP32[$2 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $5 = $1;
 $4 = HEAP32[$3 + 28 >> 2];
 $1 = $4;
 HEAP32[$1 + 408 >> 2] = $5;
 HEAP32[$1 + 412 >> 2] = $0;
 $1 = HEAP32[$2 + 12 >> 2];
 $0 = HEAP32[$2 + 8 >> 2];
 $2 = $0;
 $0 = $4;
 HEAP32[$0 + 416 >> 2] = $2;
 HEAP32[$0 + 420 >> 2] = $1;
 $2 = $3 + 8 | 0;
 operator__28btVector3_20const__2c_20float_20const__29($2, $0 + 408 | 0, $0 + 404 | 0);
 $1 = HEAP32[$2 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 $5 = $1;
 $1 = $4;
 HEAP32[$1 + 620 >> 2] = $5;
 HEAP32[$1 + 624 >> 2] = $0;
 $1 = HEAP32[$2 + 12 >> 2];
 $0 = HEAP32[$2 + 8 >> 2];
 $2 = $0;
 $0 = $4;
 HEAP32[$0 + 628 >> 2] = $2;
 HEAP32[$0 + 632 >> 2] = $1;
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__btCompoundLeafCallback__ProcessChild_28int_2c_20btTransform_20const__2c_20btCollisionShape_20const__29__LocalInfoAdder__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = Math_fround(0);
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 8 >> 2] = -1;
 HEAP32[$3 + 12 >> 2] = HEAP32[$0 + 20 >> 2];
 if (!HEAP32[$1 + 4 >> 2]) {
  HEAP32[$1 + 4 >> 2] = $3 + 8;
 }
 $4 = HEAP32[$0 + 16 >> 2];
 $5 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, $1, $2));
 HEAP32[$0 + 4 >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] + 4 >> 2];
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($5);
}
function __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 + -64 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $4 = 1;
 label$2 : {
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, 0)) {
   break label$2;
  }
  $4 = 0;
  if (!$1) {
   break label$2;
  }
  $1 = __dynamic_cast($1, 19576, 19624, 0);
  if (!$1) {
   break label$2;
  }
  HEAP32[$3 + 20 >> 2] = -1;
  HEAP32[$3 + 16 >> 2] = $0;
  HEAP32[$3 + 12 >> 2] = 0;
  HEAP32[$3 + 8 >> 2] = $1;
  memset($3 + 24 | 0, 0, 39);
  HEAP32[$3 + 56 >> 2] = 1;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, $3 + 8 | 0, HEAP32[$2 >> 2], 1);
  if (HEAP32[$3 + 32 >> 2] != 1) {
   break label$2;
  }
  HEAP32[$2 >> 2] = HEAP32[$3 + 24 >> 2];
  $4 = 1;
 }
 $0 = $3 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $4 | 0;
}
function btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3($0, $1, $2) {
 $0 = Math_fround($0);
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $3 = global$0 - 48 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $5 = $3 + 16 | 0;
 $7 = $3 + 12 | 0;
 $8 = $3 + 8 | 0;
 $4 = $3 + 4 | 0;
 HEAPF32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 $6 = operator_20new_28unsigned_20long_29(144);
 $0 = HEAPF32[$3 + 44 >> 2];
 $2 = HEAP32[$3 + 40 >> 2];
 $1 = HEAP32[$3 + 36 >> 2];
 HEAPF32[$3 + 12 >> 2] = 0;
 HEAPF32[$3 + 8 >> 2] = 0;
 HEAPF32[$3 + 4 >> 2] = 0;
 btVector3__btVector3_28float_20const__2c_20float_20const__2c_20float_20const__29($5, $7, $8, $4);
 btRigidBody__btRigidBodyConstructionInfo__btRigidBodyConstructionInfo_28float_2c_20btMotionState__2c_20btCollisionShape__2c_20btVector3_20const__29($6, $0, $2, $1, $5);
 $1 = $3 + 48 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $6 | 0;
}
function btAlignedObjectArray_btVector3___reserve_28int_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if ((btAlignedObjectArray_btVector3___capacity_28_29_20const($0) | 0) < HEAP32[$2 + 8 >> 2]) {
  HEAP32[$2 + 4 >> 2] = btAlignedObjectArray_btVector3___allocate_28int_29($0, HEAP32[$2 + 8 >> 2]);
  btAlignedObjectArray_btVector3___copy_28int_2c_20int_2c_20btVector3__29_20const($0, 0, btAlignedObjectArray_btVector3___size_28_29_20const($0), HEAP32[$2 + 4 >> 2]);
  btAlignedObjectArray_btVector3___destroy_28int_2c_20int_29($0, 0, btAlignedObjectArray_btVector3___size_28_29_20const($0));
  btAlignedObjectArray_btVector3___deallocate_28_29($0);
  HEAP8[$0 + 16 | 0] = 1;
  HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 }
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btMinkowskiPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29__btIntermediateResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 var $4 = 0, $5 = 0, $6 = 0;
 $5 = $1;
 $4 = HEAP32[$5 >> 2];
 $1 = HEAP32[$5 + 4 >> 2];
 $6 = $4;
 $4 = $0;
 HEAP32[$4 + 4 >> 2] = $6;
 HEAP32[$4 + 8 >> 2] = $1;
 $4 = HEAP32[$5 + 12 >> 2];
 $1 = HEAP32[$5 + 8 >> 2];
 $5 = $1;
 $1 = $0;
 HEAP32[$1 + 12 >> 2] = $5;
 HEAP32[$1 + 16 >> 2] = $4;
 $5 = $2;
 $4 = HEAP32[$5 >> 2];
 $1 = HEAP32[$5 + 4 >> 2];
 $2 = $4;
 $4 = $0;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 24 >> 2] = $1;
 $4 = HEAP32[$5 + 12 >> 2];
 $1 = HEAP32[$5 + 8 >> 2];
 $2 = $1;
 $1 = $0;
 HEAP32[$1 + 28 >> 2] = $2;
 HEAP32[$1 + 32 >> 2] = $4;
 HEAP8[$1 + 40 | 0] = 1;
 HEAPF32[$1 + 36 >> 2] = $3;
}
function btCollisionDispatcher__findAlgorithm_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btPersistentManifold__2c_20ebtDispatcherQueryType_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0;
 $5 = global$0 - 16 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$5 + 12 >> 2] = $3;
 HEAP32[$5 + 8 >> 2] = $0;
 $3 = HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2];
 $6 = HEAP32[HEAP32[$1 + 4 >> 2] + 4 >> 2];
 label$2 : {
  if (($4 | 0) == 1) {
   $0 = HEAP32[((Math_imul($6, 144) + $0 | 0) + ($3 << 2) | 0) + 76 >> 2];
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $5 + 8 | 0, $1, $2) | 0;
   break label$2;
  }
  $0 = HEAP32[((Math_imul($6, 144) + $0 | 0) + ($3 << 2) | 0) + 5260 >> 2];
  $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $5 + 8 | 0, $1, $2) | 0;
 }
 $0 = $5 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function btBoxShape__calculateLocalInertia_28float_2c_20btVector3__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0);
 $3 = HEAPF32[$0 + 40 >> 2];
 $4 = HEAPF32[$0 + 36 >> 2];
 $5 = HEAPF32[$0 + 32 >> 2];
 $6 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $8 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 HEAP32[$2 + 12 >> 2] = 0;
 $1 = Math_fround($1 / Math_fround(12));
 $5 = Math_fround($5 + $6);
 $5 = Math_fround($5 + $5);
 $5 = Math_fround($5 * $5);
 $4 = Math_fround($4 + $7);
 $4 = Math_fround($4 + $4);
 $4 = Math_fround($4 * $4);
 HEAPF32[$2 + 8 >> 2] = $1 * Math_fround($5 + $4);
 $3 = Math_fround($3 + $8);
 $3 = Math_fround($3 + $3);
 $3 = Math_fround($3 * $3);
 HEAPF32[$2 + 4 >> 2] = $1 * Math_fround($5 + $3);
 HEAPF32[$2 >> 2] = $1 * Math_fround($4 + $3);
}
function operator__28btMatrix3x3_20const__2c_20btVector3_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 32 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $5 = $3 + 20 | 0;
 $6 = $3 + 16 | 0;
 $4 = $3 + 12 | 0;
 HEAP32[$3 + 28 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $2;
 HEAPF32[$3 + 20 >> 2] = btVector3__dot_28btVector3_20const__29_20const(btMatrix3x3__operator_5b_5d_28int_29_20const(HEAP32[$3 + 28 >> 2], 0), HEAP32[$3 + 24 >> 2]);
 HEAPF32[$3 + 16 >> 2] = btVector3__dot_28btVector3_20const__29_20const(btMatrix3x3__operator_5b_5d_28int_29_20const(HEAP32[$3 + 28 >> 2], 1), HEAP32[$3 + 24 >> 2]);
 HEAPF32[$3 + 12 >> 2] = btVector3__dot_28btVector3_20const__29_20const(btMatrix3x3__operator_5b_5d_28int_29_20const(HEAP32[$3 + 28 >> 2], 2), HEAP32[$3 + 24 >> 2]);
 btVector3__btVector3_28float_20const__2c_20float_20const__2c_20float_20const__29($0, $5, $6, $4);
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btMatrix3x3__getIdentity_28_29() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 48 | 0;
 $1 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 label$2 : {
  if (HEAP8[20832] & 1) {
   break label$2;
  }
  if (!__cxa_guard_acquire(20832)) {
   break label$2;
  }
  HEAPF32[$0 + 44 >> 2] = 1;
  HEAPF32[$0 + 40 >> 2] = 0;
  HEAPF32[$0 + 36 >> 2] = 0;
  HEAPF32[$0 + 32 >> 2] = 0;
  HEAPF32[$0 + 28 >> 2] = 1;
  HEAPF32[$0 + 24 >> 2] = 0;
  HEAPF32[$0 + 20 >> 2] = 0;
  HEAPF32[$0 + 16 >> 2] = 0;
  HEAPF32[$0 + 12 >> 2] = 1;
  btMatrix3x3__btMatrix3x3_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29(20784, $0 + 44 | 0, $0 + 40 | 0, $0 + 36 | 0, $0 + 32 | 0, $0 + 28 | 0, $0 + 24 | 0, $0 + 20 | 0, $0 + 16 | 0, $0 + 12 | 0);
  __cxa_guard_release(20832);
 }
 $1 = $0 + 48 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return 20784;
}
function btDefaultCollisionConfiguration__getClosestPointsAlgorithmCreateFunc_28int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = ($1 | 0) != 8;
 if (!($3 | ($2 | 0) != 8)) {
  return HEAP32[$0 + 56 >> 2];
 }
 if (!(($2 | 0) != 1 | $3)) {
  return HEAP32[$0 + 72 >> 2];
 }
 if (!(($1 | 0) != 1 | ($2 | 0) != 8)) {
  return HEAP32[$0 + 76 >> 2];
 }
 if (!(($2 | 0) != 28 | ($1 | 0) > 19)) {
  return HEAP32[$0 + 84 >> 2];
 }
 if (!(($1 | 0) != 28 | ($2 | 0) > 19)) {
  return HEAP32[$0 + 80 >> 2];
 }
 label$6 : {
  if (($1 | 0) <= 19) {
   if (($2 | 0) <= 19) {
    return HEAP32[$0 + 28 >> 2];
   }
   if ($2 + -21 >>> 0 > 8) {
    break label$6;
   }
   return HEAP32[$0 + 32 >> 2];
  }
  if (!(($2 | 0) > 19 | $1 + -21 >>> 0 > 8)) {
   return HEAP32[$0 + 36 >> 2];
  }
  if (($1 | 0) != 31) {
   break label$6;
  }
  if (($2 | 0) == 31) {
   return HEAP32[$0 + 44 >> 2];
  }
  return HEAP32[$0 + 40 >> 2];
 }
 if (($2 | 0) == 31) {
  return HEAP32[$0 + 48 >> 2];
 }
 return HEAP32[$0 + 52 >> 2];
}
function btBoxShape__localGetSupportingVertex_28btVector3_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
 $3 = HEAPF32[$1 + 36 >> 2];
 $4 = HEAPF32[$1 + 40 >> 2];
 $5 = HEAPF32[$1 + 32 >> 2];
 $6 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1));
 $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1));
 $8 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1));
 $9 = HEAPF32[$2 >> 2];
 $10 = HEAPF32[$2 + 4 >> 2];
 $11 = HEAPF32[$2 + 8 >> 2];
 HEAP32[$0 + 12 >> 2] = 0;
 $4 = Math_fround($4 + $8);
 HEAPF32[$0 + 8 >> 2] = $11 >= Math_fround(0) ? $4 : Math_fround(-$4);
 $3 = Math_fround($3 + $7);
 HEAPF32[$0 + 4 >> 2] = $10 >= Math_fround(0) ? $3 : Math_fround(-$3);
 $3 = Math_fround($5 + $6);
 HEAPF32[$0 >> 2] = $9 >= Math_fround(0) ? $3 : Math_fround(-$3);
}
function btVector3__cross_28btVector3_20const__29_20const($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 28 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $2;
 $1 = HEAP32[$3 + 28 >> 2];
 HEAPF32[$3 + 20 >> 2] = Math_fround(HEAPF32[$1 + 4 >> 2] * HEAPF32[HEAP32[$3 + 24 >> 2] + 8 >> 2]) - Math_fround(HEAPF32[$1 + 8 >> 2] * HEAPF32[HEAP32[$3 + 24 >> 2] + 4 >> 2]);
 HEAPF32[$3 + 16 >> 2] = Math_fround(HEAPF32[$1 + 8 >> 2] * HEAPF32[HEAP32[$3 + 24 >> 2] >> 2]) - Math_fround(HEAPF32[$1 >> 2] * HEAPF32[HEAP32[$3 + 24 >> 2] + 8 >> 2]);
 HEAPF32[$3 + 12 >> 2] = Math_fround(HEAPF32[$1 >> 2] * HEAPF32[HEAP32[$3 + 24 >> 2] + 4 >> 2]) - Math_fround(HEAPF32[$1 + 4 >> 2] * HEAPF32[HEAP32[$3 + 24 >> 2] >> 2]);
 btVector3__btVector3_28float_20const__2c_20float_20const__2c_20float_20const__29($0, $3 + 20 | 0, $3 + 16 | 0, $3 + 12 | 0);
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDiscreteDynamicsWorld__addAction_28btActionInterface__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = HEAP32[$0 + 296 >> 2];
 label$1 : {
  if (($2 | 0) != HEAP32[$0 + 300 >> 2]) {
   break label$1;
  }
  $4 = $2 ? $2 << 1 : 1;
  if (($2 | 0) >= ($4 | 0)) {
   break label$1;
  }
  if ($4) {
   $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2, 16);
   $2 = HEAP32[$0 + 296 >> 2];
  }
  if (($2 | 0) >= 1) {
   while (1) {
    $6 = $3 << 2;
    HEAP32[$6 + $5 >> 2] = HEAP32[HEAP32[$0 + 304 >> 2] + $6 >> 2];
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($2 | 0)) {
     continue;
    }
    break;
   }
  }
  $3 = HEAP32[$0 + 304 >> 2];
  if ($3) {
   if (HEAPU8[$0 + 308 | 0]) {
    btAlignedFreeInternal_28void__29($3);
    $2 = HEAP32[$0 + 296 >> 2];
   }
   HEAP32[$0 + 304 >> 2] = 0;
  }
  HEAP32[$0 + 304 >> 2] = $5;
  HEAP32[$0 + 300 >> 2] = $4;
  HEAP8[$0 + 308 | 0] = 1;
 }
 HEAP32[HEAP32[$0 + 304 >> 2] + ($2 << 2) >> 2] = $1;
 HEAP32[$0 + 296 >> 2] = $2 + 1;
}
function btBoxShape__getPlaneEquation_28btVector4__2c_20int_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0);
 if ($2 >>> 0 <= 5) {
  $5 = HEAPF32[$0 + 40 >> 2];
  $6 = HEAPF32[$0 + 36 >> 2];
  $4 = HEAPF32[$0 + 32 >> 2];
  $0 = 1065353216;
  $3 = $2;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      switch ($2 - 1 | 0) {
      case 0:
       $2 = 0;
       $0 = -1082130432;
       $3 = 0;
       break label$2;
      case 1:
       $2 = 1065353216;
       break label$3;
      case 2:
       $2 = -1082130432;
       break label$3;
      case 3:
       $3 = 1065353216;
       break label$4;
      case 4:
       break label$5;
      default:
       break label$2;
      }
     }
     $3 = -1082130432;
    }
    $0 = 0;
    $4 = $5;
    $2 = 0;
    break label$2;
   }
   $0 = 0;
   $4 = $6;
   $3 = 0;
  }
  HEAP32[$1 + 8 >> 2] = $3;
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[$1 >> 2] = $0;
  HEAPF32[$1 + 12 >> 2] = -$4;
 }
}
function btCollisionWorld___btCollisionWorld_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 HEAP32[$0 >> 2] = 7548;
 $1 = HEAP32[$0 + 16 >> 2];
 $2 = HEAP32[$0 + 8 >> 2];
 if (($2 | 0) >= 1) {
  while (1) {
   $5 = HEAP32[($3 << 2) + $1 >> 2];
   $4 = HEAP32[$5 + 188 >> 2];
   if ($4) {
    $1 = HEAP32[$0 + 68 >> 2];
    $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 40 >> 2]]($1, $4, HEAP32[$0 + 24 >> 2]);
    $1 = HEAP32[$0 + 68 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $4, HEAP32[$0 + 24 >> 2]);
    HEAP32[$5 + 188 >> 2] = 0;
    $2 = HEAP32[$0 + 8 >> 2];
    $1 = HEAP32[$0 + 16 >> 2];
   }
   $3 = $3 + 1 | 0;
   if (($3 | 0) < ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 if ($1) {
  if (HEAPU8[$0 + 20 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 16 >> 2] = 0;
 }
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP8[$0 + 20 | 0] = 1;
 return $0 | 0;
}
function btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__LocalInfoAdder2__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0);
 $4 = global$0 - 16 | 0;
 $3 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = HEAP32[$0 + 24 >> 2];
 HEAP32[$4 + 12 >> 2] = $3;
 HEAP32[$4 + 8 >> 2] = $3;
 $5 = HEAP32[$1 + 4 >> 2];
 label$2 : {
  if (!$5) {
   HEAP32[$1 + 4 >> 2] = $4 + 8;
   break label$2;
  }
  HEAP32[$5 + 4 >> 2] = $3;
  HEAP32[$5 >> 2] = $3;
 }
 $3 = HEAP32[$0 + 20 >> 2];
 $6 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($3, $1, $2));
 HEAP32[$0 + 4 >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] + 4 >> 2];
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($6);
}
function btCollisionDispatcher__releaseManifold_28btPersistentManifold__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 HEAP32[5387] = HEAP32[5387] + -1;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
 $2 = $0 + 20 | 0;
 $2 = HEAP32[$2 >> 2];
 $3 = HEAP32[$1 + 864 >> 2];
 $4 = $3 << 2;
 $5 = $2 + $4 | 0;
 $8 = HEAP32[$5 >> 2];
 $6 = HEAP32[$0 + 12 >> 2] + -1 | 0;
 $7 = $6 << 2;
 HEAP32[$5 >> 2] = HEAP32[$7 + $2 >> 2];
 HEAP32[HEAP32[$0 + 20 >> 2] + $7 >> 2] = $8;
 HEAP32[HEAP32[HEAP32[$0 + 20 >> 2] + $4 >> 2] + 864 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $6;
 label$1 : {
  if (!$1) {
   break label$1;
  }
  $0 = HEAP32[$0 + 72 >> 2];
  $2 = HEAP32[$0 + 16 >> 2];
  if ($2 >>> 0 > $1 >>> 0 | Math_imul(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]) + $2 >>> 0 <= $1 >>> 0) {
   break label$1;
  }
  HEAP32[$1 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$0 + 12 >> 2] = $1;
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
  return;
 }
 btAlignedFreeInternal_28void__29($1);
}
function btCapsuleShape__calculateLocalInertia_28float_2c_20btVector3__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $8 = $0 + 32 | 0;
 $9 = HEAP32[$0 + 56 >> 2];
 $6 = HEAP32[$8 + (($9 + 2 | 0) % 3 << 2) >> 2];
 $7 = global$0;
 $0 = $7 - 16 | 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = $6;
 HEAP32[$0 + 4 >> 2] = $6;
 HEAP32[$0 >> 2] = $6;
 $6 = $9 << 2;
 $7 = $6 + $0 | 0;
 HEAPF32[$7 >> 2] = HEAPF32[$6 + $8 >> 2] + HEAPF32[$7 >> 2];
 $3 = HEAPF32[$0 + 8 >> 2];
 $1 = Math_fround($1 * Math_fround(.0833333283662796));
 $4 = HEAPF32[$0 >> 2];
 $4 = Math_fround($4 + $4);
 $4 = Math_fround($4 * $4);
 $5 = HEAPF32[$0 + 4 >> 2];
 $5 = Math_fround($5 + $5);
 $5 = Math_fround($5 * $5);
 HEAPF32[$2 + 8 >> 2] = $1 * Math_fround($4 + $5);
 $3 = Math_fround($3 + $3);
 $3 = Math_fround($3 * $3);
 HEAPF32[$2 + 4 >> 2] = $1 * Math_fround($4 + $3);
 HEAPF32[$2 >> 2] = $1 * Math_fround($5 + $3);
}
function btBoxShape__getVertex_28int_2c_20btVector3__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0);
 $4 = HEAPF32[$0 + 40 >> 2];
 $3 = HEAPF32[$0 + 36 >> 2];
 $5 = HEAPF32[$0 + 32 >> 2];
 $6 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $8 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 HEAP32[$2 + 12 >> 2] = 0;
 $3 = Math_fround($3 + $7);
 $0 = $1 >>> 1 & 1;
 HEAPF32[$2 + 4 >> 2] = Math_fround($3 * Math_fround($0 ^ 1)) - Math_fround($3 * Math_fround($0 | 0));
 $3 = Math_fround($5 + $6);
 $0 = $1 & 1;
 HEAPF32[$2 >> 2] = Math_fround($3 * Math_fround($0 ^ 1)) - Math_fround($3 * Math_fround($0 | 0));
 $4 = Math_fround($4 + $8);
 $0 = $1 >>> 2 & 1;
 HEAPF32[$2 + 8 >> 2] = Math_fround($4 * Math_fround($0 ^ 1)) - Math_fround($4 * Math_fround($0 | 0));
}
function btAlignedObjectArray_btCollisionObject_20const____push_back_28btCollisionObject_20const__20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = btAlignedObjectArray_btCollisionObject_20const____size_28_29_20const($0);
 if (HEAP32[$2 + 4 >> 2] == (btAlignedObjectArray_btCollisionObject_20const____capacity_28_29_20const($0) | 0)) {
  btAlignedObjectArray_btCollisionObject_20const____reserve_28int_29($0, btAlignedObjectArray_btCollisionObject_20const____allocSize_28int_29($0, btAlignedObjectArray_btCollisionObject_20const____size_28_29_20const($0)));
 }
 HEAP32[HEAP32[$0 + 12 >> 2] + (HEAP32[$0 + 4 >> 2] << 2) >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_float___reserve_28int_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if ((btAlignedObjectArray_float___capacity_28_29_20const($0) | 0) < HEAP32[$2 + 8 >> 2]) {
  HEAP32[$2 + 4 >> 2] = btAlignedObjectArray_float___allocate_28int_29($0, HEAP32[$2 + 8 >> 2]);
  btAlignedObjectArray_float___copy_28int_2c_20int_2c_20float__29_20const($0, 0, btAlignedObjectArray_float___size_28_29_20const($0), HEAP32[$2 + 4 >> 2]);
  btAlignedObjectArray_float___destroy_28int_2c_20int_29($0, 0, btAlignedObjectArray_float___size_28_29_20const($0));
  btAlignedObjectArray_float___deallocate_28_29($0);
  HEAP8[$0 + 16 | 0] = 1;
  HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 }
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody__wantsSleeping_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 label$2 : {
  if ((btCollisionObject__getActivationState_28_29_20const($0) | 0) == 4) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$2;
  }
  if (!(HEAPF32[4965] != Math_fround(0) ? !(HEAP8[20836] & 1) : 0)) {
   HEAP8[$1 + 15 | 0] = 0;
   break label$2;
  }
  label$6 : {
   if ((btCollisionObject__getActivationState_28_29_20const($0) | 0) != 2) {
    if ((btCollisionObject__getActivationState_28_29_20const($0) | 0) != 3) {
     break label$6;
    }
   }
   HEAP8[$1 + 15 | 0] = 1;
   break label$2;
  }
  if (HEAPF32[$0 + 224 >> 2] > HEAPF32[4965]) {
   HEAP8[$1 + 15 | 0] = 1;
   break label$2;
  }
  HEAP8[$1 + 15 | 0] = 0;
 }
 $0 = HEAP8[$1 + 15 | 0] & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btConvexHullInternal___btConvexHullInternal_28_29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 + 92 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 96 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 92 >> 2] = 0;
 }
 HEAP32[$0 + 92 >> 2] = 0;
 HEAP32[$0 + 84 >> 2] = 0;
 HEAP32[$0 + 88 >> 2] = 0;
 HEAP8[$0 + 96 | 0] = 1;
 while (1) {
  $1 = HEAP32[$0 + 64 >> 2];
  if ($1) {
   HEAP32[$0 + 64 >> 2] = HEAP32[$1 + 8 >> 2];
   btAlignedFreeInternal_28void__29(HEAP32[$1 >> 2]);
   btAlignedFreeInternal_28void__29($1);
   continue;
  }
  break;
 }
 while (1) {
  $1 = HEAP32[$0 + 48 >> 2];
  if ($1) {
   HEAP32[$0 + 48 >> 2] = HEAP32[$1 + 8 >> 2];
   btAlignedFreeInternal_28void__29(HEAP32[$1 >> 2]);
   btAlignedFreeInternal_28void__29($1);
   continue;
  }
  break;
 }
 while (1) {
  $1 = HEAP32[$0 + 32 >> 2];
  if ($1) {
   HEAP32[$0 + 32 >> 2] = HEAP32[$1 + 8 >> 2];
   btAlignedFreeInternal_28void__29(HEAP32[$1 >> 2]);
   btAlignedFreeInternal_28void__29($1);
   continue;
  }
  break;
 }
 return $0;
}
function btCylinderShape__setMargin_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
 $2 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $3 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $4 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 HEAPF32[$0 + 48 >> 2] = $1;
 $1 = HEAPF32[$0 + 40 >> 2];
 $5 = HEAPF32[$0 + 36 >> 2];
 $6 = HEAPF32[$0 + 32 >> 2];
 $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $8 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $9 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 HEAP32[$0 + 44 >> 2] = 0;
 HEAPF32[$0 + 36 >> 2] = Math_fround($3 + $5) - $8;
 HEAPF32[$0 + 32 >> 2] = Math_fround($2 + $6) - $7;
 HEAPF32[$0 + 40 >> 2] = Math_fround($4 + $1) - $9;
}
function btDiscreteDynamicsWorld__releasePredictiveContacts_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $1 = global$0 - 16 | 0;
 $3 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = CProfileSample__CProfileSample_28char_20const__29($1 + 8 | 0, 2675);
 $2 = HEAP32[$0 + 332 >> 2];
 if (HEAP32[$0 + 324 >> 2] >= 1) {
  while (1) {
   $5 = HEAP32[$0 + 24 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 16 >> 2]]($5, HEAP32[($4 << 2) + $2 >> 2]);
   $2 = HEAP32[$0 + 332 >> 2];
   $4 = $4 + 1 | 0;
   if (($4 | 0) < HEAP32[$0 + 324 >> 2]) {
    continue;
   }
   break;
  }
 }
 if ($2) {
  if (HEAPU8[$0 + 336 | 0]) {
   btAlignedFreeInternal_28void__29($2);
  }
  HEAP32[$0 + 332 >> 2] = 0;
 }
 HEAP32[$0 + 332 >> 2] = 0;
 HEAP32[$0 + 324 >> 2] = 0;
 HEAP32[$0 + 328 >> 2] = 0;
 HEAP8[$0 + 336 | 0] = 1;
 CProfileSample___CProfileSample_28_29($3);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuantizedBvh__btQuantizedBvh_28_29($0) {
 HEAP8[$0 + 60 | 0] = 0;
 HEAP32[$0 + 52 >> 2] = 287;
 HEAP32[$0 >> 2] = 16304;
 HEAP32[$0 + 144 >> 2] = 0;
 HEAP8[$0 + 80 | 0] = 1;
 HEAP32[$0 + 76 >> 2] = 0;
 HEAP8[$0 + 100 | 0] = 1;
 HEAP32[$0 + 68 >> 2] = 0;
 HEAP32[$0 + 72 >> 2] = 0;
 HEAP32[$0 + 96 >> 2] = 0;
 HEAP8[$0 + 120 | 0] = 1;
 HEAP32[$0 + 88 >> 2] = 0;
 HEAP32[$0 + 92 >> 2] = 0;
 HEAP32[$0 + 116 >> 2] = 0;
 HEAP8[$0 + 140 | 0] = 1;
 HEAP32[$0 + 108 >> 2] = 0;
 HEAP32[$0 + 112 >> 2] = 0;
 HEAP32[$0 + 136 >> 2] = 0;
 HEAP8[$0 + 164 | 0] = 1;
 HEAP32[$0 + 128 >> 2] = 0;
 HEAP32[$0 + 132 >> 2] = 0;
 HEAP32[$0 + 160 >> 2] = 0;
 HEAP32[$0 + 168 >> 2] = 0;
 HEAP32[$0 + 152 >> 2] = 0;
 HEAP32[$0 + 156 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = -8388609;
 HEAP32[$0 + 8 >> 2] = -8388609;
 HEAP32[$0 + 12 >> 2] = -8388609;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 2139095039;
 HEAP32[$0 + 24 >> 2] = 2139095039;
 HEAP32[$0 + 28 >> 2] = 2139095039;
 HEAP32[$0 + 32 >> 2] = 0;
 return $0;
}
function btConvexPlaneCollisionAlgorithm__btConvexPlaneCollisionAlgorithm_28btPersistentManifold__2c_20btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
 btCollisionAlgorithm__btCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__29($0, $2);
 HEAP32[$0 + 24 >> 2] = $7;
 HEAP32[$0 + 20 >> 2] = $6;
 HEAP8[$0 + 16 | 0] = $5;
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP8[$0 + 8 | 0] = 0;
 HEAP32[$0 >> 2] = 6184;
 label$1 : {
  if ($1) {
   break label$1;
  }
  $1 = HEAP32[$0 + 4 >> 2];
  $6 = $5 ? $4 : $3;
  $5 = $5 ? $3 : $4;
  if (!FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($1, HEAP32[$6 + 8 >> 2], HEAP32[$5 + 8 >> 2])) {
   break label$1;
  }
  $1 = HEAP32[$0 + 4 >> 2];
  $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, HEAP32[$6 + 8 >> 2], HEAP32[$5 + 8 >> 2]) | 0;
  HEAP8[$0 + 8 | 0] = 1;
  HEAP32[$0 + 12 >> 2] = $1;
 }
 return $0;
}
function btBoxShape__setMargin_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
 $2 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $3 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $4 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 HEAPF32[$0 + 48 >> 2] = $1;
 $1 = HEAPF32[$0 + 40 >> 2];
 $5 = HEAPF32[$0 + 36 >> 2];
 $6 = HEAPF32[$0 + 32 >> 2];
 $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $8 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $9 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 HEAP32[$0 + 44 >> 2] = 0;
 HEAPF32[$0 + 36 >> 2] = Math_fround($3 + $5) - $8;
 HEAPF32[$0 + 32 >> 2] = Math_fround($2 + $6) - $7;
 HEAPF32[$0 + 40 >> 2] = Math_fround($4 + $1) - $9;
}
function btAlignedObjectArray_int___reserve_28int_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if ((btAlignedObjectArray_int___capacity_28_29_20const($0) | 0) < HEAP32[$2 + 8 >> 2]) {
  HEAP32[$2 + 4 >> 2] = btAlignedObjectArray_int___allocate_28int_29($0, HEAP32[$2 + 8 >> 2]);
  btAlignedObjectArray_int___copy_28int_2c_20int_2c_20int__29_20const($0, 0, btAlignedObjectArray_int___size_28_29_20const($0), HEAP32[$2 + 4 >> 2]);
  btAlignedObjectArray_int___destroy_28int_2c_20int_29($0, 0, btAlignedObjectArray_int___size_28_29_20const($0));
  btAlignedObjectArray_int___deallocate_28_29($0);
  HEAP8[$0 + 16 | 0] = 1;
  HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
 }
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConeShape__setConeUpIndex_28int_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 label$1 : {
  label$2 : {
   label$3 : {
    label$4 : {
     if ($1 >>> 0 <= 2) {
      switch ($1 - 1 | 0) {
      case 1:
       break label$2;
      case 0:
       break label$3;
      default:
       break label$4;
      }
     }
     $3 = HEAP32[$0 + 72 >> 2];
     $4 = HEAP32[$0 + 68 >> 2];
     $2 = HEAP32[$0 + 76 >> 2];
     break label$1;
    }
    HEAP32[$0 + 68 >> 2] = 1;
    HEAP32[$0 + 72 >> 2] = 0;
    HEAP32[$0 + 76 >> 2] = 2;
    $4 = 1;
    $2 = 2;
    break label$1;
   }
   HEAP32[$0 + 68 >> 2] = 0;
   HEAP32[$0 + 72 >> 2] = 1;
   HEAP32[$0 + 76 >> 2] = 2;
   $3 = 1;
   $2 = 2;
   break label$1;
  }
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 2;
  HEAP32[$0 + 76 >> 2] = 1;
  $3 = 2;
  $2 = 1;
 }
 $1 = $0 + 32 | 0;
 HEAP32[$1 + ($4 << 2) >> 2] = HEAP32[$0 + 60 >> 2];
 HEAP32[($3 << 2) + $1 >> 2] = HEAP32[$0 + 64 >> 2];
 HEAP32[($2 << 2) + $1 >> 2] = HEAP32[$0 + 60 >> 2];
}
function btPersistentManifold__getCacheEntry_28btManifoldPoint_20const__29_20const($0, $1) {
 var $2 = Math_fround(0), $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0);
 $7 = HEAP32[$0 + 844 >> 2];
 label$1 : {
  if (($7 | 0) < 1) {
   $5 = -1;
   break label$1;
  }
  $8 = HEAPF32[$1 + 8 >> 2];
  $9 = HEAPF32[$1 + 4 >> 2];
  $10 = HEAPF32[$1 >> 2];
  $3 = HEAPF32[$0 + 848 >> 2];
  $3 = Math_fround($3 * $3);
  $1 = 0;
  $5 = -1;
  while (1) {
   $4 = Math_imul($1, 208) + $0 | 0;
   $2 = Math_fround(HEAPF32[$4 + 4 >> 2] - $10);
   $6 = Math_fround($2 * $2);
   $2 = Math_fround(HEAPF32[$4 + 8 >> 2] - $9);
   $6 = Math_fround($6 + Math_fround($2 * $2));
   $2 = Math_fround(HEAPF32[$4 + 12 >> 2] - $8);
   $2 = Math_fround($6 + Math_fround($2 * $2));
   $4 = $2 < $3;
   $3 = $4 ? $2 : $3;
   $5 = $4 ? $1 : $5;
   $1 = $1 + 1 | 0;
   if (($7 | 0) != ($1 | 0)) {
    continue;
   }
   break;
  }
 }
 return $5;
}
function btDiscreteDynamicsWorld__setGravity_28btVector3_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = $1;
 $4 = HEAP32[$2 >> 2];
 $3 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 264 >> 2] = $4;
 HEAP32[$0 + 268 >> 2] = $3;
 $4 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$2 + 8 >> 2];
 HEAP32[$0 + 272 >> 2] = $3;
 HEAP32[$0 + 276 >> 2] = $4;
 $3 = HEAP32[$0 + 248 >> 2];
 if (($3 | 0) >= 1) {
  while (1) {
   label$3 : {
    label$4 : {
     $2 = HEAP32[HEAP32[$0 + 256 >> 2] + ($5 << 2) >> 2];
     $4 = HEAP32[$2 + 220 >> 2] + -2 | 0;
     if ($4 >>> 0 > 3) {
      break label$4;
     }
     switch ($4 - 1 | 0) {
     case 0:
     case 1:
      break label$4;
     default:
      break label$3;
     }
    }
    if (HEAP8[$2 + 564 | 0] & 1) {
     break label$3;
    }
    btRigidBody__setGravity_28btVector3_20const__29($2, $1);
    $3 = HEAP32[$0 + 248 >> 2];
   }
   $5 = $5 + 1 | 0;
   if (($5 | 0) < ($3 | 0)) {
    continue;
   }
   break;
  }
 }
}
function btAlignedObjectArray_btPersistentManifold____push_back_28btPersistentManifold__20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = btAlignedObjectArray_btPersistentManifold____size_28_29_20const($0);
 if (HEAP32[$2 + 4 >> 2] == (btAlignedObjectArray_btPersistentManifold____capacity_28_29_20const($0) | 0)) {
  btAlignedObjectArray_btPersistentManifold____reserve_28int_29($0, btAlignedObjectArray_btPersistentManifold____allocSize_28int_29($0, btAlignedObjectArray_btPersistentManifold____size_28_29_20const($0)));
 }
 HEAP32[HEAP32[$0 + 12 >> 2] + (HEAP32[$0 + 4 >> 2] << 2) >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHashedOverlappingPairCache__processAllOverlappingPairs_28btOverlapCallback__2c_20btDispatcher__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $4 = CProfileSample__CProfileSample_28char_20const__29($3 + 8 | 0, 15444);
 if (HEAP32[$0 + 8 >> 2] >= 1) {
  while (1) {
   $6 = HEAP32[$0 + 16 >> 2] + ($5 << 4) | 0;
   label$4 : {
    if (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $6)) {
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, HEAP32[$6 >> 2], HEAP32[$6 + 4 >> 2], $2) | 0;
     HEAP32[5677] = HEAP32[5677] + -1;
     break label$4;
    }
    $5 = $5 + 1 | 0;
   }
   if (($5 | 0) < HEAP32[$0 + 8 >> 2]) {
    continue;
   }
   break;
  }
 }
 CProfileSample___CProfileSample_28_29($4);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBvhTriangleMeshShape__serializeSingleTriangleInfoMap_28btSerializer__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
 $2 = HEAP32[$0 + 60 >> 2];
 if ($2) {
  $2 = (wasm2js_i32$1 = $1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2) | 0, wasm2js_i32$3 = 1, wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 16 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
  $3 = HEAP32[$0 + 60 >> 2];
  wasm2js_i32$3 = $1, wasm2js_i32$2 = $2, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($3, HEAP32[$2 + 8 >> 2], $1) | 0, wasm2js_i32$4 = 1346456916, wasm2js_i32$5 = HEAP32[$0 + 60 >> 2], wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
 }
}
function btBvhTriangleMeshShape__serializeSingleBvh_28btSerializer__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
 $2 = HEAP32[$0 + 56 >> 2];
 if ($2) {
  $2 = (wasm2js_i32$1 = $1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2) | 0, wasm2js_i32$3 = 1, wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 16 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
  $3 = HEAP32[$0 + 56 >> 2];
  wasm2js_i32$3 = $1, wasm2js_i32$2 = $2, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, HEAP32[$2 + 8 >> 2], $1) | 0, wasm2js_i32$4 = 1213612625, wasm2js_i32$5 = HEAP32[$0 + 56 >> 2], wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
 }
}
function btAlignedObjectArray_btCollisionObject_20const____findLinearSearch_28btCollisionObject_20const__20const__29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = btAlignedObjectArray_btCollisionObject_20const____size_28_29_20const($0);
 HEAP32[$2 >> 2] = 0;
 while (1) {
  if (HEAP32[$2 >> 2] < (btAlignedObjectArray_btCollisionObject_20const____size_28_29_20const($0) | 0)) {
   if (HEAP32[HEAP32[$0 + 12 >> 2] + (HEAP32[$2 >> 2] << 2) >> 2] == HEAP32[HEAP32[$2 + 8 >> 2] >> 2]) {
    HEAP32[$2 + 4 >> 2] = HEAP32[$2 >> 2];
   } else {
    HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + 1;
    continue;
   }
  }
  break;
 }
 $0 = HEAP32[$2 + 4 >> 2];
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function btVector3__dot3_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $5 = global$0 - 32 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 $7 = $5 + 12 | 0;
 $8 = $5 + 8 | 0;
 $6 = $5 + 4 | 0;
 HEAP32[$5 + 28 >> 2] = $1;
 HEAP32[$5 + 24 >> 2] = $2;
 HEAP32[$5 + 20 >> 2] = $3;
 HEAP32[$5 + 16 >> 2] = $4;
 $1 = HEAP32[$5 + 28 >> 2];
 HEAPF32[$5 + 12 >> 2] = btVector3__dot_28btVector3_20const__29_20const($1, HEAP32[$5 + 24 >> 2]);
 HEAPF32[$5 + 8 >> 2] = btVector3__dot_28btVector3_20const__29_20const($1, HEAP32[$5 + 20 >> 2]);
 HEAPF32[$5 + 4 >> 2] = btVector3__dot_28btVector3_20const__29_20const($1, HEAP32[$5 + 16 >> 2]);
 btVector3__btVector3_28float_20const__2c_20float_20const__2c_20float_20const__29($0, $7, $8, $6);
 $0 = $5 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBoxShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0);
 if (($3 | 0) >= 1) {
  while (1) {
   $6 = $5 << 4;
   $4 = $6 + $1 | 0;
   $10 = HEAPF32[$4 >> 2];
   $11 = HEAPF32[$4 + 4 >> 2];
   $12 = HEAPF32[$4 + 8 >> 2];
   $7 = HEAPF32[$0 + 32 >> 2];
   $8 = HEAPF32[$0 + 36 >> 2];
   $9 = HEAPF32[$0 + 40 >> 2];
   $4 = $2 + $6 | 0;
   HEAP32[$4 + 12 >> 2] = 0;
   HEAPF32[$4 + 8 >> 2] = $12 >= Math_fround(0) ? $9 : Math_fround(-$9);
   HEAPF32[$4 + 4 >> 2] = $11 >= Math_fround(0) ? $8 : Math_fround(-$8);
   HEAPF32[$4 >> 2] = $10 >= Math_fround(0) ? $7 : Math_fround(-$7);
   $5 = $5 + 1 | 0;
   if (($5 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
}
function ccNotMeClosestConvexResultCallback__ccNotMeClosestConvexResultCallback_28btCollisionObject__2c_20ccDiscreteDynamicsWorld__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = global$0 - 32 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $1 = HEAP32[$5 + 28 >> 2];
 btCollisionWorld__ClosestConvexResultCallback__ClosestConvexResultCallback_28btVector3_20const__2c_20btVector3_20const__29($1, HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2]);
 HEAP32[$1 >> 2] = 1692;
 HEAP32[$1 + 84 >> 2] = HEAP32[$5 + 24 >> 2];
 HEAP32[$1 + 88 >> 2] = HEAP32[$5 + 20 >> 2];
 HEAP32[$1 + 92 >> 2] = 0;
 HEAP32[$1 + 96 >> 2] = 0;
 $0 = $5 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function btCollisionDispatcher__needsCollision_28btCollisionObject_20const__2c_20btCollisionObject_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 label$1 : {
  label$2 : {
   $0 = HEAP32[$1 + 220 >> 2] + -2 | 0;
   if ($0 >>> 0 > 3) {
    break label$2;
   }
   label$3 : {
    switch ($0 - 1 | 0) {
    case 0:
    case 1:
     break label$2;
    default:
     break label$3;
    }
   }
   $3 = HEAP32[$2 + 220 >> 2] + -2 | 0;
   if ($3 >>> 0 > 3) {
    break label$2;
   }
   $0 = 0;
   switch ($3 - 1 | 0) {
   case 0:
   case 1:
    break label$2;
   default:
    break label$1;
   }
  }
  label$4 : {
   if (HEAP32[$1 + 280 >> 2]) {
    if (!FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $2)) {
     break label$4;
    }
   }
   $0 = 1;
   if (!HEAP32[$2 + 280 >> 2]) {
    break label$1;
   }
   if (FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2, $1)) {
    break label$1;
   }
  }
  $0 = 0;
 }
 return $0 | 0;
}
function ccAllHitsRayResultCallback__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = Math_fround(0);
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 $4 = $1 + 132 | 0;
 $0 = $3;
 if (HEAP32[HEAP32[$3 + 8 >> 2] + 4 >> 2]) {
  $2 = HEAP32[HEAP32[HEAP32[$3 + 8 >> 2] + 4 >> 2] >> 2];
 } else {
  $2 = 0;
 }
 HEAP32[$0 >> 2] = $2;
 btAlignedObjectArray_int___push_back_28int_20const__29($4, $3);
 $5 = btCollisionWorld__AllHitsRayResultCallback__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29($1, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($5);
}
function btSphereShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
 $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $8 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $9 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $0 = $1 + 52 | 0;
 $4 = HEAPF32[$0 >> 2];
 $5 = HEAPF32[$1 + 56 >> 2];
 $6 = HEAPF32[$1 + 48 >> 2];
 HEAP32[$2 + 12 >> 2] = 0;
 HEAPF32[$2 + 8 >> 2] = $5 - $9;
 HEAPF32[$2 + 4 >> 2] = $4 - $8;
 HEAPF32[$2 >> 2] = $6 - $7;
 $4 = HEAPF32[$1 + 52 >> 2];
 $5 = HEAPF32[$1 + 56 >> 2];
 $6 = HEAPF32[$1 + 48 >> 2];
 HEAP32[$3 + 12 >> 2] = 0;
 HEAPF32[$3 + 8 >> 2] = $9 + $5;
 HEAPF32[$3 + 4 >> 2] = $8 + $4;
 HEAPF32[$3 >> 2] = $7 + $6;
}
function btSphereShape__btSphereShape_28float_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = global$0 - 32 | 0;
 $4 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $5 = $2 + 20 | 0;
 $6 = $2 + 16 | 0;
 $4 = $2 + 12 | 0;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAPF32[$2 + 24 >> 2] = $1;
 $3 = HEAP32[$2 + 28 >> 2];
 btConvexInternalShape__btConvexInternalShape_28_29($3);
 HEAP32[$3 >> 2] = 11396;
 HEAP32[$3 + 4 >> 2] = 8;
 HEAPF32[$2 + 20 >> 2] = 1;
 HEAPF32[$2 + 16 >> 2] = 1;
 HEAPF32[$2 + 12 >> 2] = 1;
 btVector3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__29($3 + 20 | 0, $5, $6, $4);
 btVector3__setZero_28_29($3 + 36 | 0);
 btVector3__setX_28float_29($3 + 36 | 0, HEAPF32[$2 + 24 >> 2]);
 HEAPF32[$3 + 52 >> 2] = HEAPF32[$2 + 24 >> 2];
 HEAPF32[$3 + 56 >> 2] = 0;
 $0 = $2 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $3;
}
function btGeneric6DofSpring2Constraint__matrixToEulerXZY_28btMatrix3x3_20const__2c_20btVector3__29($0, $1) {
 var $2 = Math_fround(0), $3 = Math_fround(0);
 $2 = HEAPF32[$0 + 16 >> 2];
 if (!!($2 < Math_fround(1))) {
  if (!!($2 > Math_fround(-1))) {
   HEAPF32[$1 >> 2] = atan2f(HEAPF32[$0 + 24 >> 2], HEAPF32[$0 + 20 >> 2]);
   HEAPF32[$1 + 4 >> 2] = atan2f(HEAPF32[$0 + 32 >> 2], HEAPF32[$0 >> 2]);
   HEAPF32[$1 + 8 >> 2] = asinf(Math_fround(Math_min(Math_fround(Math_max(Math_fround(-HEAPF32[$0 + 16 >> 2]), Math_fround(-1))), Math_fround(1))));
   return 1;
  }
  $2 = HEAPF32[$0 + 40 >> 2];
  $3 = HEAPF32[$0 + 8 >> 2];
  HEAP32[$1 + 4 >> 2] = 0;
  HEAPF32[$1 >> 2] = -atan2f(Math_fround(-$3), $2);
  HEAPF32[$1 + 8 >> 2] = 1.5707963705062866;
  return 0;
 }
 $2 = HEAPF32[$0 + 40 >> 2];
 $3 = HEAPF32[$0 + 8 >> 2];
 HEAP32[$1 + 4 >> 2] = 0;
 HEAPF32[$1 >> 2] = atan2f(Math_fround(-$3), $2);
 HEAPF32[$1 + 8 >> 2] = -1.5707963705062866;
 return 0;
}
function btEmptyShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
 $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $8 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $9 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $0 = $1 + 52 | 0;
 $4 = HEAPF32[$0 >> 2];
 $5 = HEAPF32[$1 + 56 >> 2];
 $6 = HEAPF32[$1 + 48 >> 2];
 HEAP32[$2 + 12 >> 2] = 0;
 HEAPF32[$2 + 8 >> 2] = $5 - $9;
 HEAPF32[$2 + 4 >> 2] = $4 - $8;
 HEAPF32[$2 >> 2] = $6 - $7;
 $4 = HEAPF32[$1 + 52 >> 2];
 $5 = HEAPF32[$1 + 56 >> 2];
 $6 = HEAPF32[$1 + 48 >> 2];
 HEAP32[$3 + 12 >> 2] = 0;
 HEAPF32[$3 + 8 >> 2] = $9 + $5;
 HEAPF32[$3 + 4 >> 2] = $8 + $4;
 HEAPF32[$3 >> 2] = $7 + $6;
}
function btCylinderShape__btCylinderShape_28btVector3_20const__29($0, $1) {
 var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0);
 btConvexInternalShape__btConvexInternalShape_28_29($0);
 HEAP32[$0 + 56 >> 2] = 1;
 HEAP32[$0 >> 2] = 14816;
 $2 = HEAPF32[$1 >> 2];
 $4 = HEAPF32[$1 + 4 >> 2];
 $3 = HEAPF32[$1 + 8 >> 2];
 HEAP32[$0 + 44 >> 2] = 0;
 $5 = Math_fround($3 * HEAPF32[$0 + 24 >> 2]);
 $3 = HEAPF32[$0 + 48 >> 2];
 HEAPF32[$0 + 40 >> 2] = $5 - $3;
 HEAPF32[$0 + 36 >> 2] = Math_fround($4 * HEAPF32[$0 + 20 >> 2]) - $3;
 HEAPF32[$0 + 32 >> 2] = Math_fround($2 * HEAPF32[$0 + 16 >> 2]) - $3;
 $2 = HEAPF32[$1 >> 2];
 $4 = HEAPF32[$1 + 8 >> 2];
 $5 = HEAPF32[$1 + 4 >> 2];
 $2 = Math_fround(HEAPF32[(($2 < $5 ? ($2 < $4 ^ 1) << 1 : $5 < $4 ? 1 : 2) << 2) + $1 >> 2] * Math_fround(.10000000149011612));
 if (!!($2 < $3)) {
  btCylinderShape__setMargin_28float_29($0, $2);
 }
 HEAP32[$0 + 4 >> 2] = 13;
 return $0;
}
function btConvexConcaveCollisionAlgorithm__btConvexConcaveCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, $4) {
 var $5 = 0;
 btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3);
 HEAP32[$0 >> 2] = 6344;
 $1 = HEAP32[$1 >> 2];
 HEAP32[$0 + 60 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = 6372;
 $5 = $4 ? $2 : $3;
 HEAP32[$0 + 48 >> 2] = $5;
 $2 = $4 ? $3 : $2;
 HEAP32[$0 + 44 >> 2] = $2;
 $2 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, HEAP32[$2 + 8 >> 2], HEAP32[$5 + 8 >> 2]) | 0;
 HEAP32[$0 + 72 >> 2] = $2;
 $3 = HEAP32[$0 + 56 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $2);
 HEAP8[$0 + 76 | 0] = $4;
 return $0;
}
function ccDiscreteDynamicsWorld_rayTestSingle_6($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0, $8 = 0;
 $7 = global$0 - 32 | 0;
 $8 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 HEAP32[$7 + 28 >> 2] = $0;
 HEAP32[$7 + 24 >> 2] = $1;
 HEAP32[$7 + 20 >> 2] = $2;
 HEAP32[$7 + 16 >> 2] = $3;
 HEAP32[$7 + 12 >> 2] = $4;
 HEAP32[$7 + 8 >> 2] = $5;
 HEAP32[$7 + 4 >> 2] = $6;
 btCollisionWorld__rayTestSingle_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObject__2c_20btCollisionShape_20const__2c_20btTransform_20const__2c_20btCollisionWorld__RayResultCallback__29(HEAP32[$7 + 24 >> 2], HEAP32[$7 + 20 >> 2], HEAP32[$7 + 16 >> 2], HEAP32[$7 + 12 >> 2], HEAP32[$7 + 8 >> 2], HEAP32[$7 + 4 >> 2]);
 $0 = $7 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDiscreteDynamicsWorld_rayTestSingle_6($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0, $8 = 0;
 $7 = global$0 - 32 | 0;
 $8 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 HEAP32[$7 + 28 >> 2] = $0;
 HEAP32[$7 + 24 >> 2] = $1;
 HEAP32[$7 + 20 >> 2] = $2;
 HEAP32[$7 + 16 >> 2] = $3;
 HEAP32[$7 + 12 >> 2] = $4;
 HEAP32[$7 + 8 >> 2] = $5;
 HEAP32[$7 + 4 >> 2] = $6;
 btCollisionWorld__rayTestSingle_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObject__2c_20btCollisionShape_20const__2c_20btTransform_20const__2c_20btCollisionWorld__RayResultCallback__29(HEAP32[$7 + 24 >> 2], HEAP32[$7 + 20 >> 2], HEAP32[$7 + 16 >> 2], HEAP32[$7 + 12 >> 2], HEAP32[$7 + 8 >> 2], HEAP32[$7 + 4 >> 2]);
 $0 = $7 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexConvexAlgorithm___btConvexConvexAlgorithm_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 HEAP32[$0 >> 2] = 9864;
 label$1 : {
  if (!HEAPU8[$0 + 52 | 0]) {
   break label$1;
  }
  $1 = HEAP32[$0 + 56 >> 2];
  if (!$1) {
   break label$1;
  }
  $2 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 }
 $1 = HEAP32[$0 + 44 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 48 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 44 >> 2] = 0;
 }
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP8[$0 + 48 | 0] = 1;
 $1 = HEAP32[$0 + 24 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 28 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 24 >> 2] = 0;
 }
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP8[$0 + 28 | 0] = 1;
 btActivatingCollisionAlgorithm___btActivatingCollisionAlgorithm_28_29($0);
 return $0 | 0;
}
function btCollisionWorld_rayTestSingle_6($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0, $8 = 0;
 $7 = global$0 - 32 | 0;
 $8 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 HEAP32[$7 + 28 >> 2] = $0;
 HEAP32[$7 + 24 >> 2] = $1;
 HEAP32[$7 + 20 >> 2] = $2;
 HEAP32[$7 + 16 >> 2] = $3;
 HEAP32[$7 + 12 >> 2] = $4;
 HEAP32[$7 + 8 >> 2] = $5;
 HEAP32[$7 + 4 >> 2] = $6;
 btCollisionWorld__rayTestSingle_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObject__2c_20btCollisionShape_20const__2c_20btTransform_20const__2c_20btCollisionWorld__RayResultCallback__29(HEAP32[$7 + 24 >> 2], HEAP32[$7 + 20 >> 2], HEAP32[$7 + 16 >> 2], HEAP32[$7 + 12 >> 2], HEAP32[$7 + 8 >> 2], HEAP32[$7 + 4 >> 2]);
 $0 = $7 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHingeConstraint__setParam_28int_2c_20float_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = $3 | 0;
 label$1 : {
  $3 = $3 + 1 | 0;
  if ($3 >>> 0 > 6) {
   break label$1;
  }
  label$2 : {
   switch ($3 - 1 | 0) {
   case 0:
   case 1:
   case 2:
   case 3:
   case 4:
    break label$1;
   default:
    break label$2;
   }
  }
  $3 = $1 + -1 | 0;
  if ($3 >>> 0 > 3) {
   break label$1;
  }
  label$3 : {
   switch ($3 - 1 | 0) {
   case 0:
    HEAPF32[$0 + 764 >> 2] = $2;
    HEAP32[$0 + 748 >> 2] = HEAP32[$0 + 748 >> 2] | 2;
    return;
   case 2:
    HEAPF32[$0 + 760 >> 2] = $2;
    HEAP32[$0 + 748 >> 2] = HEAP32[$0 + 748 >> 2] | 1;
    return;
   case 1:
    HEAPF32[$0 + 752 >> 2] = $2;
    HEAP32[$0 + 748 >> 2] = HEAP32[$0 + 748 >> 2] | 4;
    return;
   default:
    break label$3;
   }
  }
  HEAPF32[$0 + 756 >> 2] = $2;
  HEAP32[$0 + 748 >> 2] = HEAP32[$0 + 748 >> 2] | 8;
 }
}
function btDynamicsWorld_rayTestSingle_6($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $7 = 0, $8 = 0;
 $7 = global$0 - 32 | 0;
 $8 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 HEAP32[$7 + 28 >> 2] = $0;
 HEAP32[$7 + 24 >> 2] = $1;
 HEAP32[$7 + 20 >> 2] = $2;
 HEAP32[$7 + 16 >> 2] = $3;
 HEAP32[$7 + 12 >> 2] = $4;
 HEAP32[$7 + 8 >> 2] = $5;
 HEAP32[$7 + 4 >> 2] = $6;
 btCollisionWorld__rayTestSingle_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObject__2c_20btCollisionShape_20const__2c_20btTransform_20const__2c_20btCollisionWorld__RayResultCallback__29(HEAP32[$7 + 24 >> 2], HEAP32[$7 + 20 >> 2], HEAP32[$7 + 16 >> 2], HEAP32[$7 + 12 >> 2], HEAP32[$7 + 8 >> 2], HEAP32[$7 + 4 >> 2]);
 $0 = $7 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConeShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $5 = global$0 - 16 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 if (($3 | 0) >= 1) {
  while (1) {
   $4 = $7 << 4;
   btConeShape__coneLocalSupport_28btVector3_20const__29_20const($5, $0, $4 + $1 | 0);
   $8 = HEAP32[$5 + 12 >> 2];
   $6 = HEAP32[$5 + 8 >> 2];
   $4 = $2 + $4 | 0;
   HEAP32[$4 + 8 >> 2] = $6;
   HEAP32[$4 + 12 >> 2] = $8;
   $6 = HEAP32[$5 + 4 >> 2];
   $8 = HEAP32[$5 >> 2];
   HEAP32[$4 >> 2] = $8;
   HEAP32[$4 + 4 >> 2] = $6;
   $7 = $7 + 1 | 0;
   if (($7 | 0) != ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 $0 = $5 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBoxBoxCollisionAlgorithm__btBoxBoxCollisionAlgorithm_28btPersistentManifold__2c_20btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3, $4) {
 btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $2, $3, $4);
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP8[$0 + 8 | 0] = 0;
 HEAP32[$0 >> 2] = 7108;
 label$1 : {
  if ($1) {
   break label$1;
  }
  $1 = HEAP32[$0 + 4 >> 2];
  if (!FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($1, HEAP32[$3 + 8 >> 2], HEAP32[$4 + 8 >> 2])) {
   break label$1;
  }
  $1 = HEAP32[$0 + 4 >> 2];
  $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, HEAP32[$3 + 8 >> 2], HEAP32[$4 + 8 >> 2]) | 0;
  HEAP8[$0 + 8 | 0] = 1;
  HEAP32[$0 + 12 >> 2] = $1;
 }
 return $0;
}
function btRigidBody__applyImpulse_28btVector3_20const__2c_20btVector3_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 48 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 $2 = HEAP32[$3 + 44 >> 2];
 if (HEAPF32[$2 + 404 >> 2] != Math_fround(0)) {
  btRigidBody__applyCentralImpulse_28btVector3_20const__29($2, HEAP32[$3 + 40 >> 2]);
  if (btVector3__operator_20float__28_29($2 + 604 | 0)) {
   $1 = $3 + 16 | 0;
   $0 = HEAP32[$3 + 36 >> 2];
   operator__28btVector3_20const__2c_20btVector3_20const__29_2($3, HEAP32[$3 + 40 >> 2], $2 + 408 | 0);
   btVector3__cross_28btVector3_20const__29_20const($1, $0, $3);
   btRigidBody__applyTorqueImpulse_28btVector3_20const__29($2, $1);
  }
 }
 $0 = $3 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btGeneric6DofSpring2Constraint__matrixToEulerXYZ_28btMatrix3x3_20const__2c_20btVector3__29($0, $1) {
 var $2 = Math_fround(0), $3 = Math_fround(0);
 $2 = HEAPF32[$0 + 32 >> 2];
 label$1 : {
  if (!!($2 < Math_fround(1))) {
   if (!!($2 > Math_fround(-1))) {
    HEAPF32[$1 >> 2] = atan2f(Math_fround(-HEAPF32[$0 + 36 >> 2]), HEAPF32[$0 + 40 >> 2]);
    HEAPF32[$1 + 4 >> 2] = asinf(Math_fround(Math_min(Math_fround(Math_max(HEAPF32[$0 + 32 >> 2], Math_fround(-1))), Math_fround(1))));
    HEAPF32[$1 + 8 >> 2] = atan2f(Math_fround(-HEAPF32[$0 + 16 >> 2]), HEAPF32[$0 >> 2]);
    return 1;
   }
   $2 = HEAPF32[$0 + 20 >> 2];
   $3 = HEAPF32[$0 + 4 >> 2];
   HEAP32[$1 + 4 >> 2] = -1077342245;
   HEAPF32[$1 >> 2] = -atan2f($3, $2);
   break label$1;
  }
  $2 = HEAPF32[$0 + 20 >> 2];
  $3 = HEAPF32[$0 + 4 >> 2];
  HEAP32[$1 + 4 >> 2] = 1070141403;
  HEAPF32[$1 >> 2] = atan2f($3, $2);
 }
 HEAPF32[$1 + 8 >> 2] = 0;
 return 0;
}
function btAlignedObjectArray_btCollisionObject_20const____copyFromArray_28btAlignedObjectArray_btCollisionObject_20const___20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = btAlignedObjectArray_btCollisionObject_20const____size_28_29_20const(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$2 >> 2] = 0;
 btAlignedObjectArray_btCollisionObject_20const____resize_28int_2c_20btCollisionObject_20const__20const__29($1, $0, $2);
 btAlignedObjectArray_btCollisionObject_20const____copy_28int_2c_20int_2c_20btCollisionObject_20const___29_20const(HEAP32[$2 + 8 >> 2], 0, HEAP32[$2 + 4 >> 2], HEAP32[$1 + 12 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btGeneric6DofSpring2Constraint__matrixToEulerZYX_28btMatrix3x3_20const__2c_20btVector3__29($0, $1) {
 var $2 = Math_fround(0), $3 = 0;
 $3 = $1;
 $2 = HEAPF32[$0 + 8 >> 2];
 label$1 : {
  if (!!($2 < Math_fround(1))) {
   if (!!($2 > Math_fround(-1))) {
    HEAPF32[$1 >> 2] = atan2f(HEAPF32[$0 + 24 >> 2], HEAPF32[$0 + 40 >> 2]);
    HEAPF32[$1 + 4 >> 2] = asinf(Math_fround(Math_min(Math_fround(Math_max(Math_fround(-HEAPF32[$0 + 8 >> 2]), Math_fround(-1))), Math_fround(1))));
    HEAPF32[$1 + 8 >> 2] = atan2f(HEAPF32[$0 + 4 >> 2], HEAPF32[$0 >> 2]);
    return 1;
   }
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 1070141403;
   $2 = Math_fround(-atan2f(HEAPF32[$0 + 16 >> 2], HEAPF32[$0 + 32 >> 2]));
   break label$1;
  }
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = -1077342245;
  $2 = atan2f(Math_fround(-HEAPF32[$0 + 16 >> 2]), Math_fround(-HEAPF32[$0 + 32 >> 2]));
 }
 HEAPF32[$3 + 8 >> 2] = $2;
 return 0;
}
function btAngularLimit__test_28float_29($0, $1) {
 var $2 = Math_fround(0);
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP8[$0 + 28 | 0] = 0;
 $2 = HEAPF32[$0 + 4 >> 2];
 label$1 : {
  if (!($2 >= Math_fround(0))) {
   break label$1;
  }
  $1 = fmodf(Math_fround($1 - HEAPF32[$0 >> 2]), Math_fround(6.2831854820251465));
  label$2 : {
   if (!!($1 < Math_fround(-3.1415927410125732))) {
    $1 = Math_fround($1 + Math_fround(6.2831854820251465));
    break label$2;
   }
   if (!($1 > Math_fround(3.1415927410125732))) {
    break label$2;
   }
   $1 = Math_fround($1 + Math_fround(-6.2831854820251465));
  }
  if (!!($1 < Math_fround(-$2))) {
   HEAP32[$0 + 24 >> 2] = 1065353216;
   HEAP8[$0 + 28 | 0] = 1;
   HEAPF32[$0 + 20 >> 2] = -Math_fround($2 + $1);
   return;
  }
  if (!($1 > $2)) {
   break label$1;
  }
  HEAP32[$0 + 24 >> 2] = -1082130432;
  HEAP8[$0 + 28 | 0] = 1;
  HEAPF32[$0 + 20 >> 2] = $2 - $1;
 }
}
function btMatrix3x3__transpose_28_29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 8 >> 2];
 btMatrix3x3__btMatrix3x3_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($0, btVector3__x_28_29_20const($1), btVector3__x_28_29_20const($1 + 16 | 0), btVector3__x_28_29_20const($1 + 32 | 0), btVector3__y_28_29_20const($1), btVector3__y_28_29_20const($1 + 16 | 0), btVector3__y_28_29_20const($1 + 32 | 0), btVector3__z_28_29_20const($1), btVector3__z_28_29_20const($1 + 16 | 0), btVector3__z_28_29_20const($1 + 32 | 0));
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDiscreteDynamicsWorld__predictUnconstraintMotion_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = global$0 - 16 | 0;
 $4 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $4 = CProfileSample__CProfileSample_28char_20const__29($2 + 8 | 0, 2815);
 $5 = HEAP32[$0 + 248 >> 2];
 if (($5 | 0) >= 1) {
  while (1) {
   $3 = HEAP32[HEAP32[$0 + 256 >> 2] + ($6 << 2) >> 2];
   if (!(HEAPU8[$3 + 204 | 0] & 3)) {
    btRigidBody__applyDamping_28float_29($3, $1);
    btRigidBody__predictIntegratedTransform_28float_2c_20btTransform__29($3, $1, $3 + 68 | 0);
    $5 = HEAP32[$0 + 248 >> 2];
   }
   $6 = $6 + 1 | 0;
   if (($6 | 0) < ($5 | 0)) {
    continue;
   }
   break;
  }
 }
 CProfileSample___CProfileSample_28_29($4);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btPoint2PointConstraint__btPoint2PointConstraint_28btRigidBody__2c_20btRigidBody__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3, $4) {
 btTypedConstraint__btTypedConstraint_28btTypedConstraintType_2c_20btRigidBody__2c_20btRigidBody__29($0, 3, $1, $2);
 HEAP32[$0 >> 2] = 3368;
 $2 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 HEAP32[$0 + 300 >> 2] = $2;
 HEAP32[$0 + 304 >> 2] = $1;
 $2 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 308 >> 2] = $1;
 HEAP32[$0 + 312 >> 2] = $2;
 $3 = $4;
 $2 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 HEAP32[$0 + 316 >> 2] = $2;
 HEAP32[$0 + 320 >> 2] = $1;
 $2 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 HEAP32[$0 + 324 >> 2] = $1;
 HEAP32[$0 + 328 >> 2] = $2;
 HEAP32[$0 + 356 >> 2] = 0;
 HEAP32[$0 + 348 >> 2] = 1050253722;
 HEAP32[$0 + 352 >> 2] = 1065353216;
 HEAP8[$0 + 344 | 0] = 0;
 HEAP32[$0 + 332 >> 2] = 0;
 return $0;
}
function btGeneric6DofSpring2Constraint__getInfo2_28btTypedConstraint__btConstraintInfo2__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = HEAP32[$0 + 28 >> 2];
 $4 = $2 + 4 | 0;
 $3 = HEAP32[$0 + 32 >> 2];
 $5 = $3 + 4 | 0;
 $6 = $2 + 372 | 0;
 $7 = $3 + 372 | 0;
 $2 = $2 + 388 | 0;
 $3 = $3 + 388 | 0;
 btGeneric6DofSpring2Constraint__setLinearLimits_28btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, btGeneric6DofSpring2Constraint__setAngularLimits_28btTypedConstraint__btConstraintInfo2__2c_20int_2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, 0, $4, $5, $6, $7, $2, $3), $4, $5, $6, $7, $2, $3);
}
function btMatrix3x3__setIdentity_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 48 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 44 >> 2] = $0;
 $0 = HEAP32[$1 + 44 >> 2];
 HEAPF32[$1 + 40 >> 2] = 1;
 HEAPF32[$1 + 36 >> 2] = 0;
 HEAPF32[$1 + 32 >> 2] = 0;
 HEAPF32[$1 + 28 >> 2] = 0;
 HEAPF32[$1 + 24 >> 2] = 1;
 HEAPF32[$1 + 20 >> 2] = 0;
 HEAPF32[$1 + 16 >> 2] = 0;
 HEAPF32[$1 + 12 >> 2] = 0;
 HEAPF32[$1 + 8 >> 2] = 1;
 btMatrix3x3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($0, $1 + 40 | 0, $1 + 36 | 0, $1 + 32 | 0, $1 + 28 | 0, $1 + 24 | 0, $1 + 20 | 0, $1 + 16 | 0, $1 + 12 | 0, $1 + 8 | 0);
 $0 = $1 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBoxShape__btBoxShape_28btVector3_20const__29($0, $1) {
 var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0);
 btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($0);
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 >> 2] = 14020;
 $2 = HEAPF32[$1 >> 2];
 $4 = HEAPF32[$1 + 4 >> 2];
 $3 = HEAPF32[$1 + 8 >> 2];
 HEAP32[$0 + 44 >> 2] = 0;
 $5 = Math_fround($3 * HEAPF32[$0 + 24 >> 2]);
 $3 = HEAPF32[$0 + 48 >> 2];
 HEAPF32[$0 + 40 >> 2] = $5 - $3;
 HEAPF32[$0 + 36 >> 2] = Math_fround($4 * HEAPF32[$0 + 20 >> 2]) - $3;
 HEAPF32[$0 + 32 >> 2] = Math_fround($2 * HEAPF32[$0 + 16 >> 2]) - $3;
 $2 = HEAPF32[$1 >> 2];
 $4 = HEAPF32[$1 + 8 >> 2];
 $5 = HEAPF32[$1 + 4 >> 2];
 $2 = Math_fround(HEAPF32[(($2 < $5 ? ($2 < $4 ^ 1) << 1 : $5 < $4 ? 1 : 2) << 2) + $1 >> 2] * Math_fround(.10000000149011612));
 if (!!($2 < $3)) {
  btBoxShape__setMargin_28float_29($0, $2);
 }
 return $0;
}
function btCapsuleShape__setLocalScaling_28btVector3_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0);
 $2 = HEAPF32[$0 + 20 >> 2];
 $3 = HEAPF32[$0 + 36 >> 2];
 $4 = HEAPF32[$0 + 24 >> 2];
 $5 = HEAPF32[$0 + 40 >> 2];
 $6 = HEAPF32[$0 + 16 >> 2];
 $7 = HEAPF32[$0 + 32 >> 2];
 btConvexInternalShape__setLocalScaling_28btVector3_20const__29($0, $1);
 $8 = HEAPF32[$1 >> 2];
 $9 = HEAPF32[$1 + 4 >> 2];
 $10 = HEAPF32[$1 + 8 >> 2];
 HEAP32[$0 + 44 >> 2] = 0;
 HEAPF32[$0 + 40 >> 2] = $10 * Math_fround($5 / $4);
 HEAPF32[$0 + 36 >> 2] = $9 * Math_fround($3 / $2);
 HEAPF32[$0 + 32 >> 2] = $8 * Math_fround($7 / $6);
 HEAP32[$0 + 48 >> 2] = HEAP32[($0 + 32 | 0) + ((HEAP32[$0 + 56 >> 2] + 2 | 0) % 3 << 2) >> 2];
}
function btHashedOverlappingPairCache___btHashedOverlappingPairCache_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 15376;
 $1 = HEAP32[$0 + 60 >> 2];
 if ($1) {
  if (HEAPU8[$0 - -64 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 60 >> 2] = 0;
 }
 HEAP32[$0 + 60 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP8[$0 - -64 | 0] = 1;
 $1 = HEAP32[$0 + 40 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 44 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 40 >> 2] = 0;
 }
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP8[$0 + 44 | 0] = 1;
 $1 = HEAP32[$0 + 16 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 20 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 16 >> 2] = 0;
 }
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP8[$0 + 20 | 0] = 1;
 return $0 | 0;
}
function btCollisionObject__setIgnoreCollisionCheck_28btCollisionObject_20const__2c_20bool_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 label$2 : {
  if (HEAP8[$3 + 7 | 0] & 1) {
   btAlignedObjectArray_btCollisionObject_20const____push_back_28btCollisionObject_20const__20const__29($0 + 284 | 0, $3 + 8 | 0);
   break label$2;
  }
  btAlignedObjectArray_btCollisionObject_20const____remove_28btCollisionObject_20const__20const__29($0 + 284 | 0, $3 + 8 | 0);
 }
 HEAP32[$0 + 280 >> 2] = (btAlignedObjectArray_btCollisionObject_20const____size_28_29_20const($0 + 284 | 0) | 0) > 0;
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccAllHitsRayResultCallback__needsCollision_28btBroadphaseProxy__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 8 >> 2];
 label$2 : {
  if (HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2] & HEAP16[$0 + 14 >> 1]) {
   if (!(!HEAP32[HEAP32[$2 + 4 >> 2] >> 2] | HEAP8[$0 + 152 | 0] & 1)) {
    HEAP32[$2 >> 2] = HEAP32[HEAP32[$2 + 4 >> 2] >> 2];
    HEAP8[$2 + 15 | 0] = btCollisionObject__hasContactResponse_28_29_20const(HEAP32[$2 >> 2]) & 1;
    break label$2;
   }
   HEAP8[$2 + 15 | 0] = 1;
   break label$2;
  }
  HEAP8[$2 + 15 | 0] = 0;
 }
 $0 = HEAP8[$2 + 15 | 0] & 1;
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___cxa_guard_acquire_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 if (!$28anonymous_20namespace_29__AtomicInt_unsigned_20char___load_28std____2___28anonymous_20namespace_29____libcpp_atomic_order_29($28anonymous_20namespace_29__AtomicInt_unsigned_20char___AtomicInt_28unsigned_20char__29($1 + 8 | 0, HEAP32[$0 + 4 >> 2]))) {
  $3 = __cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__acquire_init_byte_28_29(__cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___derived_28_29($0));
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $3;
}
function ccClosestRayResultCallback__needsCollision_28btBroadphaseProxy__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 8 >> 2];
 label$2 : {
  if (HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2] & HEAP16[$0 + 14 >> 1]) {
   if (!(!HEAP32[HEAP32[$2 + 4 >> 2] >> 2] | HEAP8[$0 + 88 | 0] & 1)) {
    HEAP32[$2 >> 2] = HEAP32[HEAP32[$2 + 4 >> 2] >> 2];
    HEAP8[$2 + 15 | 0] = btCollisionObject__hasContactResponse_28_29_20const(HEAP32[$2 >> 2]) & 1;
    break label$2;
   }
   HEAP8[$2 + 15 | 0] = 1;
   break label$2;
  }
  HEAP8[$2 + 15 | 0] = 0;
 }
 $0 = HEAP8[$2 + 15 | 0] & 1;
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function InplaceSolverIslandCallback___InplaceSolverIslandCallback_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 2944;
 $1 = HEAP32[$0 + 80 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 84 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 80 >> 2] = 0;
 }
 HEAP32[$0 + 80 >> 2] = 0;
 HEAP32[$0 + 72 >> 2] = 0;
 HEAP32[$0 + 76 >> 2] = 0;
 HEAP8[$0 + 84 | 0] = 1;
 $1 = HEAP32[$0 + 60 >> 2];
 if ($1) {
  if (HEAPU8[$0 - -64 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 60 >> 2] = 0;
 }
 HEAP32[$0 + 60 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP8[$0 - -64 | 0] = 1;
 $1 = HEAP32[$0 + 40 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 44 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 40 >> 2] = 0;
 }
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP8[$0 + 44 | 0] = 1;
 return $0 | 0;
}
function btGeneric6DofSpring2Constraint__matrixToEulerZXY_28btMatrix3x3_20const__2c_20btVector3__29($0, $1) {
 var $2 = Math_fround(0), $3 = 0;
 $3 = $1;
 $2 = HEAPF32[$0 + 24 >> 2];
 label$1 : {
  if (!!($2 < Math_fround(1))) {
   if (!!($2 > Math_fround(-1))) {
    HEAPF32[$1 >> 2] = asinf(Math_fround(Math_min(Math_fround(Math_max($2, Math_fround(-1))), Math_fround(1))));
    HEAPF32[$1 + 4 >> 2] = atan2f(Math_fround(-HEAPF32[$0 + 8 >> 2]), HEAPF32[$0 + 40 >> 2]);
    HEAPF32[$1 + 8 >> 2] = atan2f(Math_fround(-HEAPF32[$0 + 16 >> 2]), HEAPF32[$0 + 20 >> 2]);
    return 1;
   }
   HEAP32[$1 >> 2] = -1077342245;
   HEAP32[$1 + 4 >> 2] = 0;
   $2 = Math_fround(-atan2f(HEAPF32[$0 + 32 >> 2], HEAPF32[$0 >> 2]));
   break label$1;
  }
  HEAP32[$1 >> 2] = 1070141403;
  HEAP32[$1 + 4 >> 2] = 0;
  $2 = atan2f(HEAPF32[$0 + 32 >> 2], HEAPF32[$0 >> 2]);
 }
 HEAPF32[$3 + 8 >> 2] = $2;
 return 0;
}
function btCompoundCompoundCollisionAlgorithm__btCompoundCompoundCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, $4) {
 btCompoundCollisionAlgorithm__btCompoundCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, $4);
 HEAP8[$0 + 104 | 0] = 1;
 HEAP32[$0 >> 2] = 10624;
 HEAP32[$0 + 100 >> 2] = 0;
 HEAP32[$0 + 92 >> 2] = 0;
 HEAP32[$0 + 96 >> 2] = 0;
 $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(64, 16);
 btHashedSimplePairCache__btHashedSimplePairCache_28_29($1);
 HEAP32[$0 + 84 >> 2] = $1;
 HEAP32[$0 + 108 >> 2] = HEAP32[HEAP32[$2 + 4 >> 2] + 72 >> 2];
 HEAP32[$0 + 112 >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] + 72 >> 2];
 return $0;
}
function btTypedConstraint__getFixedBody_28_29() {
 var $0 = 0, $1 = 0;
 $0 = global$0 - 16 | 0;
 $1 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 label$2 : {
  if (HEAP8[21524] & 1) {
   break label$2;
  }
  if (!__cxa_guard_acquire(21524)) {
   break label$2;
  }
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  btRigidBody__btRigidBody_28float_2c_20btMotionState__2c_20btCollisionShape__2c_20btVector3_20const__29(20848, Math_fround(0), 0, 0, $0);
  __cxa_guard_release(21524);
 }
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 btRigidBody__setMassProps_28float_2c_20btVector3_20const__29(20848, Math_fround(0), $0);
 $1 = $0 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return 20848;
}
function __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3, $4) {
 HEAP8[$1 + 53 | 0] = 1;
 label$1 : {
  if (HEAP32[$1 + 4 >> 2] != ($3 | 0)) {
   break label$1;
  }
  HEAP8[$1 + 52 | 0] = 1;
  $3 = HEAP32[$1 + 16 >> 2];
  if (!$3) {
   HEAP32[$1 + 36 >> 2] = 1;
   HEAP32[$1 + 24 >> 2] = $4;
   HEAP32[$1 + 16 >> 2] = $2;
   if (($4 | 0) != 1 | HEAP32[$1 + 48 >> 2] != 1) {
    break label$1;
   }
   HEAP8[$1 + 54 | 0] = 1;
   return;
  }
  if (($2 | 0) == ($3 | 0)) {
   $3 = HEAP32[$1 + 24 >> 2];
   if (($3 | 0) == 2) {
    HEAP32[$1 + 24 >> 2] = $4;
    $3 = $4;
   }
   if (HEAP32[$1 + 48 >> 2] != 1 | ($3 | 0) != 1) {
    break label$1;
   }
   HEAP8[$1 + 54 | 0] = 1;
   return;
  }
  HEAP8[$1 + 54 | 0] = 1;
  HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 36 >> 2] + 1;
 }
}
function btHashedSimplePairCache___btHashedSimplePairCache_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 10560;
 $1 = HEAP32[$0 + 56 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 60 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 56 >> 2] = 0;
 }
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP8[$0 + 60 | 0] = 1;
 $1 = HEAP32[$0 + 36 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 40 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 36 >> 2] = 0;
 }
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP8[$0 + 40 | 0] = 1;
 $1 = HEAP32[$0 + 16 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 20 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 16 >> 2] = 0;
 }
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP8[$0 + 20 | 0] = 1;
 return $0 | 0;
}
function btCompoundShape_setMaterial_6($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = Math_fround($3);
 $4 = Math_fround($4);
 $5 = Math_fround($5);
 $6 = $6 | 0;
 var $7 = 0, $8 = 0;
 $7 = global$0 - 32 | 0;
 $8 = $7;
 if ($7 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $8;
 HEAP32[$7 + 28 >> 2] = $0;
 HEAP32[$7 + 24 >> 2] = $1;
 HEAPF32[$7 + 20 >> 2] = $2;
 HEAPF32[$7 + 16 >> 2] = $3;
 HEAPF32[$7 + 12 >> 2] = $4;
 HEAPF32[$7 + 8 >> 2] = $5;
 HEAP32[$7 + 4 >> 2] = $6;
 btCompoundShape__setMaterial_28int_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29(HEAP32[$7 + 28 >> 2], HEAP32[$7 + 24 >> 2], HEAPF32[$7 + 20 >> 2], HEAPF32[$7 + 16 >> 2], HEAPF32[$7 + 12 >> 2], HEAPF32[$7 + 8 >> 2], HEAP32[$7 + 4 >> 2]);
 $0 = $7 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___cxa_guard_release_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $28anonymous_20namespace_29__AtomicInt_unsigned_20char___store_28unsigned_20char_2c_20std____2___28anonymous_20namespace_29____libcpp_atomic_order_29($28anonymous_20namespace_29__AtomicInt_unsigned_20char___AtomicInt_28unsigned_20char__29($1 + 8 | 0, HEAP32[$0 + 4 >> 2]));
 __cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__release_init_byte_28_29(__cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___derived_28_29($0));
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btVector3__setInterpolate3_28btVector3_20const__2c_20btVector3_20const__2c_20float_29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAPF32[$4 + 16 >> 2] = $3;
 $0 = HEAP32[$4 + 28 >> 2];
 HEAPF32[$4 + 12 >> 2] = Math_fround(1) - HEAPF32[$4 + 16 >> 2];
 HEAPF32[$0 >> 2] = Math_fround(HEAPF32[$4 + 12 >> 2] * HEAPF32[HEAP32[$4 + 24 >> 2] >> 2]) + Math_fround(HEAPF32[$4 + 16 >> 2] * HEAPF32[HEAP32[$4 + 20 >> 2] >> 2]);
 HEAPF32[$0 + 4 >> 2] = Math_fround(HEAPF32[$4 + 12 >> 2] * HEAPF32[HEAP32[$4 + 24 >> 2] + 4 >> 2]) + Math_fround(HEAPF32[$4 + 16 >> 2] * HEAPF32[HEAP32[$4 + 20 >> 2] + 4 >> 2]);
 HEAPF32[$0 + 8 >> 2] = Math_fround(HEAPF32[$4 + 12 >> 2] * HEAPF32[HEAP32[$4 + 24 >> 2] + 8 >> 2]) + Math_fround(HEAPF32[$4 + 16 >> 2] * HEAPF32[HEAP32[$4 + 20 >> 2] + 8 >> 2]);
}
function btAlignedObjectArray_float___push_back_28float_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = btAlignedObjectArray_float___size_28_29_20const($0);
 if (HEAP32[$2 + 4 >> 2] == (btAlignedObjectArray_float___capacity_28_29_20const($0) | 0)) {
  btAlignedObjectArray_float___reserve_28int_29($0, btAlignedObjectArray_float___allocSize_28int_29($0, btAlignedObjectArray_float___size_28_29_20const($0)));
 }
 HEAPF32[HEAP32[$0 + 12 >> 2] + (HEAP32[$0 + 4 >> 2] << 2) >> 2] = HEAPF32[HEAP32[$2 + 8 >> 2] >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTransform__getIdentity_28_29() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $0 = global$0 - 32 | 0;
 $1 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 label$2 : {
  if (HEAP8[20780] & 1) {
   break label$2;
  }
  if (!__cxa_guard_acquire(20780)) {
   break label$2;
  }
  $2 = $0 + 16 | 0;
  $3 = $0 + 12 | 0;
  $4 = $0 + 8 | 0;
  $5 = $0 + 4 | 0;
  $1 = btMatrix3x3__getIdentity_28_29();
  HEAPF32[$0 + 12 >> 2] = 0;
  HEAPF32[$0 + 8 >> 2] = 0;
  HEAPF32[$0 + 4 >> 2] = 0;
  btVector3__btVector3_28float_20const__2c_20float_20const__2c_20float_20const__29($2, $3, $4, $5);
  btTransform__btTransform_28btMatrix3x3_20const__2c_20btVector3_20const__29(20716, $1, $2);
  __cxa_guard_release(20780);
 }
 $1 = $0 + 32 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return 20716;
}
function ccClosestRayResultCallback__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = Math_fround(0);
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 $0 = $1;
 if (HEAP32[HEAP32[$3 + 8 >> 2] + 4 >> 2]) {
  $2 = HEAP32[HEAP32[HEAP32[$3 + 8 >> 2] + 4 >> 2] >> 2];
 } else {
  $2 = 0;
 }
 HEAP32[$0 + 84 >> 2] = $2;
 $5 = btCollisionWorld__ClosestRayResultCallback__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29($1, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($5);
}
function btGeneric6DofSpring2Constraint__matrixToEulerYZX_28btMatrix3x3_20const__2c_20btVector3__29($0, $1) {
 var $2 = Math_fround(0);
 $2 = HEAPF32[$0 + 4 >> 2];
 if (!!($2 < Math_fround(1))) {
  if (!!($2 > Math_fround(-1))) {
   HEAPF32[$1 >> 2] = atan2f(Math_fround(-HEAPF32[$0 + 36 >> 2]), HEAPF32[$0 + 20 >> 2]);
   HEAPF32[$1 + 4 >> 2] = atan2f(Math_fround(-HEAPF32[$0 + 8 >> 2]), HEAPF32[$0 >> 2]);
   HEAPF32[$1 + 8 >> 2] = asinf(Math_fround(Math_min(Math_fround(Math_max(HEAPF32[$0 + 4 >> 2], Math_fround(-1))), Math_fround(1))));
   return 1;
  }
  HEAP32[$1 >> 2] = 0;
  HEAPF32[$1 + 4 >> 2] = -atan2f(HEAPF32[$0 + 24 >> 2], HEAPF32[$0 + 40 >> 2]);
  HEAPF32[$1 + 8 >> 2] = -1.5707963705062866;
  return 0;
 }
 HEAP32[$1 >> 2] = 0;
 HEAPF32[$1 + 4 >> 2] = atan2f(HEAPF32[$0 + 24 >> 2], HEAPF32[$0 + 40 >> 2]);
 HEAPF32[$1 + 8 >> 2] = 1.5707963705062866;
 return 0;
}
function btCollisionObject__serializeSingleObject_28btSerializer__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
 $2 = (wasm2js_i32$1 = $1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0) | 0, wasm2js_i32$3 = 1, wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 16 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
 wasm2js_i32$3 = $1, wasm2js_i32$2 = $2, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, HEAP32[$2 + 8 >> 2], $1) | 0, wasm2js_i32$4 = 1245859651, wasm2js_i32$5 = $0, wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
}
function btCollisionShape__serializeSingleShape_28btSerializer__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
 $2 = (wasm2js_i32$1 = $1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0) | 0, wasm2js_i32$3 = 1, wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 16 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
 wasm2js_i32$3 = $1, wasm2js_i32$2 = $2, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, HEAP32[$2 + 8 >> 2], $1) | 0, wasm2js_i32$4 = 1346455635, wasm2js_i32$5 = $0, wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
}
function btRigidBody__serializeSingleObject_28btSerializer__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
 $2 = (wasm2js_i32$1 = $1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0) | 0, wasm2js_i32$3 = 1, wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 16 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
 wasm2js_i32$3 = $1, wasm2js_i32$2 = $2, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, HEAP32[$2 + 8 >> 2], $1) | 0, wasm2js_i32$4 = 1497645650, wasm2js_i32$5 = $0, wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2], FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
}
function btAlignedObjectArray_int___push_back_28int_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = btAlignedObjectArray_int___size_28_29_20const($0);
 if (HEAP32[$2 + 4 >> 2] == (btAlignedObjectArray_int___capacity_28_29_20const($0) | 0)) {
  btAlignedObjectArray_int___reserve_28int_29($0, btAlignedObjectArray_int___allocSize_28int_29($0, btAlignedObjectArray_int___size_28_29_20const($0)));
 }
 HEAP32[HEAP32[$0 + 12 >> 2] + (HEAP32[$0 + 4 >> 2] << 2) >> 2] = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHashedSimplePairCache__findPair_28int_2c_20int_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 HEAP32[5650] = HEAP32[5650] + 1;
 $3 = $2 << 16 | $1;
 $3 = $3 + ($3 << 15 ^ -1) | 0;
 $3 = Math_imul($3 ^ $3 >>> 10, 9);
 $3 = $3 ^ $3 >>> 6;
 $3 = $3 + ($3 << 11 ^ -1) | 0;
 $3 = HEAP32[$0 + 12 >> 2] + -1 & ($3 ^ $3 >>> 16);
 label$1 : {
  label$2 : {
   if (($3 | 0) >= HEAP32[$0 + 28 >> 2]) {
    break label$2;
   }
   $3 = HEAP32[HEAP32[$0 + 36 >> 2] + ($3 << 2) >> 2];
   if (($3 | 0) == -1) {
    break label$2;
   }
   $5 = HEAP32[$0 + 16 >> 2];
   while (1) {
    $4 = Math_imul($3, 12) + $5 | 0;
    if (HEAP32[$4 + 4 >> 2] == ($2 | 0) ? HEAP32[$4 >> 2] == ($1 | 0) : 0) {
     break label$1;
    }
    $3 = HEAP32[HEAP32[$0 + 56 >> 2] + ($3 << 2) >> 2];
    if (($3 | 0) != -1) {
     continue;
    }
    break;
   }
  }
  $4 = 0;
 }
 return $4;
}
function btGjkPairDetector__btGjkPairDetector_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($0, $1, $2, $3, $4) {
 var $5 = Math_fround(0);
 HEAP32[$0 + 32 >> 2] = $2;
 HEAP32[$0 + 28 >> 2] = $1;
 HEAP32[$0 + 24 >> 2] = $3;
 HEAP32[$0 + 20 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 1065353216;
 HEAP32[$0 >> 2] = 4424;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = HEAP32[$1 + 4 >> 2];
 HEAP32[$0 + 40 >> 2] = HEAP32[$2 + 4 >> 2];
 HEAPF32[$0 + 44 >> 2] = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1);
 $5 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2));
 HEAP32[$0 + 72 >> 2] = 1;
 HEAP32[$0 + 76 >> 2] = 1;
 HEAP32[$0 + 60 >> 2] = -1;
 HEAP8[$0 + 52 | 0] = 0;
 HEAPF32[$0 + 48 >> 2] = $5;
 return $0;
}
function btGeneric6DofSpring2Constraint__matrixToEulerYXZ_28btMatrix3x3_20const__2c_20btVector3__29($0, $1) {
 var $2 = Math_fround(0);
 $2 = HEAPF32[$0 + 36 >> 2];
 label$1 : {
  if (!!($2 < Math_fround(1))) {
   if (!!($2 > Math_fround(-1))) {
    HEAPF32[$1 >> 2] = asinf(Math_fround(Math_min(Math_fround(Math_max(Math_fround(-$2), Math_fround(-1))), Math_fround(1))));
    HEAPF32[$1 + 4 >> 2] = atan2f(HEAPF32[$0 + 32 >> 2], HEAPF32[$0 + 40 >> 2]);
    HEAPF32[$1 + 8 >> 2] = atan2f(HEAPF32[$0 + 4 >> 2], HEAPF32[$0 + 20 >> 2]);
    return 1;
   }
   HEAP32[$1 >> 2] = 1070141403;
   HEAPF32[$1 + 4 >> 2] = -atan2f(Math_fround(-HEAPF32[$0 + 16 >> 2]), HEAPF32[$0 >> 2]);
   break label$1;
  }
  HEAP32[$1 >> 2] = -1077342245;
  HEAPF32[$1 + 4 >> 2] = atan2f(Math_fround(-HEAPF32[$0 + 16 >> 2]), HEAPF32[$0 >> 2]);
 }
 HEAPF32[$1 + 8 >> 2] = 0;
 return 0;
}
function btCylinderShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0);
 $3 = HEAPF32[$1 + 36 >> 2];
 $4 = HEAPF32[$1 + 32 >> 2];
 $5 = HEAPF32[$2 >> 2];
 $6 = HEAPF32[$2 + 8 >> 2];
 $7 = Math_fround(Math_sqrt(Math_fround(Math_fround($5 * $5) + Math_fround($6 * $6))));
 label$1 : {
  if ($7 != Math_fround(0)) {
   $4 = Math_fround($4 / $7);
   $8 = Math_fround($6 * $4);
   $4 = Math_fround($5 * $4);
   $3 = HEAPF32[$2 + 4 >> 2] < Math_fround(0) ? Math_fround(-$3) : $3;
   break label$1;
  }
  $3 = HEAPF32[$2 + 4 >> 2] < Math_fround(0) ? Math_fround(-$3) : $3;
 }
 HEAPF32[$0 + 8 >> 2] = $8;
 HEAPF32[$0 + 4 >> 2] = $3;
 HEAPF32[$0 >> 2] = $4;
}
function btHingeConstraint_btHingeConstraint_5($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0;
 $5 = global$0 - 32 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP8[$5 + 15 | 0] = $4;
 $1 = btHingeConstraint__operator_20new_28unsigned_20long_29(768);
 btHingeConstraint__btHingeConstraint_28btRigidBody__2c_20btRigidBody__2c_20btTransform_20const__2c_20btTransform_20const__2c_20bool_29($1, HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP8[$5 + 15 | 0] & 1);
 $0 = $5 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function btHeightfieldTerrainShape__getRawHeightFieldValue_28int_2c_20int_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = Math_fround(0);
 $3 = HEAP32[$0 + 100 >> 2];
 label$1 : {
  if ($3 >>> 0 > 5) {
   break label$1;
  }
  label$2 : {
   switch ($3 - 1 | 0) {
   default:
    return Math_fround(HEAPF32[HEAP32[$0 + 96 >> 2] + (Math_imul(HEAP32[$0 + 68 >> 2], $2) + $1 << 2) >> 2]);
   case 4:
    return Math_fround(Math_fround(HEAPF32[$0 + 92 >> 2] * Math_fround(HEAPU8[HEAP32[$0 + 96 >> 2] + (Math_imul(HEAP32[$0 + 68 >> 2], $2) + $1 | 0) | 0])));
   case 0:
   case 1:
   case 3:
    break label$1;
   case 2:
    break label$2;
   }
  }
  $4 = Math_fround(HEAPF32[$0 + 92 >> 2] * Math_fround(HEAP16[HEAP32[$0 + 96 >> 2] + (Math_imul(HEAP32[$0 + 68 >> 2], $2) + $1 << 1) >> 1]));
 }
 return Math_fround($4);
}
function quatRotate_28btQuaternion_20const__2c_20btVector3_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 48 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $4 = $3 + 8 | 0;
 HEAP32[$3 + 44 >> 2] = $1;
 HEAP32[$3 + 40 >> 2] = $2;
 $1 = $3 + 24 | 0;
 operator__28btQuaternion_20const__2c_20btVector3_20const__29($1, HEAP32[$3 + 44 >> 2], HEAP32[$3 + 40 >> 2]);
 btQuaternion__inverse_28_29_20const($4, HEAP32[$3 + 44 >> 2]);
 btQuaternion__operator___28btQuaternion_20const__29($1, $4);
 btVector3__btVector3_28float_20const__2c_20float_20const__2c_20float_20const__29($0, btQuadWord__getX_28_29_20const($1), btQuadWord__getY_28_29_20const($1), btQuadWord__getZ_28_29_20const($1));
 $0 = $3 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuaternion__dot_28btQuaternion_20const__29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = Math_fround(0);
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $4 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 >> 2] * HEAPF32[btQuadWord__x_28_29_20const(HEAP32[$2 + 8 >> 2]) >> 2]) + Math_fround(HEAPF32[$0 + 4 >> 2] * HEAPF32[btQuadWord__y_28_29_20const(HEAP32[$2 + 8 >> 2]) >> 2])) + Math_fround(HEAPF32[$0 + 8 >> 2] * HEAPF32[btQuadWord__z_28_29_20const(HEAP32[$2 + 8 >> 2]) >> 2])) + Math_fround(HEAPF32[$0 + 12 >> 2] * HEAPF32[HEAP32[$2 + 8 >> 2] + 12 >> 2]));
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $4;
}
function btMatrix3x3__tdotz_28btVector3_20const__29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = Math_fround(0);
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $4 = Math_fround(Math_fround(Math_fround(HEAPF32[btVector3__z_28_29_20const($0) >> 2] * HEAPF32[btVector3__x_28_29_20const(HEAP32[$2 + 8 >> 2]) >> 2]) + Math_fround(HEAPF32[btVector3__z_28_29_20const($0 + 16 | 0) >> 2] * HEAPF32[btVector3__y_28_29_20const(HEAP32[$2 + 8 >> 2]) >> 2])) + Math_fround(HEAPF32[btVector3__z_28_29_20const($0 + 32 | 0) >> 2] * HEAPF32[btVector3__z_28_29_20const(HEAP32[$2 + 8 >> 2]) >> 2]));
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $4;
}
function btMatrix3x3__tdoty_28btVector3_20const__29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = Math_fround(0);
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $4 = Math_fround(Math_fround(Math_fround(HEAPF32[btVector3__y_28_29_20const($0) >> 2] * HEAPF32[btVector3__x_28_29_20const(HEAP32[$2 + 8 >> 2]) >> 2]) + Math_fround(HEAPF32[btVector3__y_28_29_20const($0 + 16 | 0) >> 2] * HEAPF32[btVector3__y_28_29_20const(HEAP32[$2 + 8 >> 2]) >> 2])) + Math_fround(HEAPF32[btVector3__y_28_29_20const($0 + 32 | 0) >> 2] * HEAPF32[btVector3__z_28_29_20const(HEAP32[$2 + 8 >> 2]) >> 2]));
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $4;
}
function btMatrix3x3__tdotx_28btVector3_20const__29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = Math_fround(0);
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $4 = Math_fround(Math_fround(Math_fround(HEAPF32[btVector3__x_28_29_20const($0) >> 2] * HEAPF32[btVector3__x_28_29_20const(HEAP32[$2 + 8 >> 2]) >> 2]) + Math_fround(HEAPF32[btVector3__x_28_29_20const($0 + 16 | 0) >> 2] * HEAPF32[btVector3__y_28_29_20const(HEAP32[$2 + 8 >> 2]) >> 2])) + Math_fround(HEAPF32[btVector3__x_28_29_20const($0 + 32 | 0) >> 2] * HEAPF32[btVector3__z_28_29_20const(HEAP32[$2 + 8 >> 2]) >> 2]));
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $4;
}
function btCollisionWorld__rayTestSingle_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObject__2c_20btCollisionShape_20const__2c_20btTransform_20const__2c_20btCollisionWorld__RayResultCallback__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = global$0 - 32 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 24 >> 2] = -1;
 HEAP32[$6 + 28 >> 2] = -1;
 HEAP32[$6 + 20 >> 2] = $4;
 HEAP32[$6 + 16 >> 2] = $2;
 HEAP32[$6 + 12 >> 2] = $3;
 HEAP32[$6 + 8 >> 2] = 0;
 btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29($0, $1, $6 + 8 | 0, $5);
 $0 = $6 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionShape__getLocalBoundingSphere_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0);
 $1 = global$0 - 128 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $2 = $1 + 8 | 0;
 $3 = $1 + 24 | 0;
 $4 = $1 + 40 | 0;
 HEAP32[$1 + 124 >> 2] = $0;
 $0 = HEAP32[$1 + 124 >> 2];
 $5 = $1 + 56 | 0;
 btTransform__btTransform_28_29($5);
 btTransform__setIdentity_28_29($5);
 btVector3__btVector3_28_29($4);
 btVector3__btVector3_28_29($3);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $5, $4, $3);
 operator__28btVector3_20const__2c_20btVector3_20const__29($2, $3, $4);
 $6 = Math_fround(btVector3__length_28_29_20const($2) * Math_fround(.5));
 $0 = $1 + 128 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $6;
}
function btConeShape__setLocalScaling_28btVector3_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0);
 $2 = HEAP32[$0 + 72 >> 2] << 2;
 $4 = $0 + 16 | 0;
 $5 = Math_fround(HEAPF32[$0 + 64 >> 2] * Math_fround(HEAPF32[$2 + $1 >> 2] / HEAPF32[$4 + $2 >> 2]));
 HEAPF32[$0 + 64 >> 2] = $5;
 $2 = HEAP32[$0 + 68 >> 2] << 2;
 $3 = Math_fround(HEAPF32[$2 + $1 >> 2] / HEAPF32[$2 + $4 >> 2]);
 $2 = HEAP32[$0 + 76 >> 2] << 2;
 $3 = Math_fround(HEAPF32[$0 + 60 >> 2] * Math_fround(Math_fround($3 + Math_fround(HEAPF32[$2 + $1 >> 2] / HEAPF32[$2 + $4 >> 2])) * Math_fround(.5)));
 HEAPF32[$0 + 60 >> 2] = $3;
 HEAPF32[$0 + 56 >> 2] = $3 / Math_fround(Math_sqrt(Math_fround(Math_fround($5 * $5) + Math_fround($3 * $3))));
 btConvexInternalShape__setLocalScaling_28btVector3_20const__29($0, $1);
}
function btDiscreteDynamicsWorld__removeConstraint_28btTypedConstraint__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = HEAP32[$0 + 228 >> 2];
 label$1 : {
  if (($2 | 0) < 1) {
   break label$1;
  }
  $4 = HEAP32[$0 + 236 >> 2];
  while (1) {
   $5 = ($3 << 2) + $4 | 0;
   if (HEAP32[$5 >> 2] != ($1 | 0)) {
    $3 = $3 + 1 | 0;
    if (($2 | 0) != ($3 | 0)) {
     continue;
    }
    break label$1;
   }
   break;
  }
  if (($2 | 0) <= ($3 | 0)) {
   break label$1;
  }
  $3 = $2 + -1 | 0;
  $2 = $3 << 2;
  HEAP32[$5 >> 2] = HEAP32[$4 + $2 >> 2];
  HEAP32[HEAP32[$0 + 236 >> 2] + $2 >> 2] = $1;
  HEAP32[$0 + 228 >> 2] = $3;
 }
 btRigidBody__removeConstraintRef_28btTypedConstraint__29(HEAP32[$1 + 28 >> 2], $1);
 btRigidBody__removeConstraintRef_28btTypedConstraint__29(HEAP32[$1 + 32 >> 2], $1);
}
function btConvexHullComputer___btConvexHullComputer_28_29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 + 52 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 56 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 52 >> 2] = 0;
 }
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP8[$0 + 56 | 0] = 1;
 $1 = HEAP32[$0 + 32 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 36 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 32 >> 2] = 0;
 }
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP8[$0 + 36 | 0] = 1;
 $1 = HEAP32[$0 + 12 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 16 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP8[$0 + 16 | 0] = 1;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 return $0;
}
function ccDiscreteDynamicsWorld_getGravity_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 $1 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 HEAP32[$2 + 28 >> 2] = $0;
 label$2 : {
  if (HEAP8[19944] & 1) {
   break label$2;
  }
  if (!__cxa_guard_acquire(19944)) {
   break label$2;
  }
  btVector3__btVector3_28_29(19928);
  __cxa_guard_release(19944);
 }
 $0 = $2 + 8 | 0;
 $1 = HEAP32[$2 + 28 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 76 >> 2]]($0, $1);
 $3 = HEAP32[$0 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 HEAP32[4982] = $3;
 HEAP32[4983] = $1;
 $3 = HEAP32[$0 + 12 >> 2];
 $1 = HEAP32[$0 + 8 >> 2];
 HEAP32[4984] = $1;
 HEAP32[4985] = $3;
 $0 = $2 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return 19928;
}
function btDiscreteDynamicsWorld_getGravity_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 $1 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 HEAP32[$2 + 28 >> 2] = $0;
 label$2 : {
  if (HEAP8[19924] & 1) {
   break label$2;
  }
  if (!__cxa_guard_acquire(19924)) {
   break label$2;
  }
  btVector3__btVector3_28_29(19908);
  __cxa_guard_release(19924);
 }
 $0 = $2 + 8 | 0;
 $1 = HEAP32[$2 + 28 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 76 >> 2]]($0, $1);
 $3 = HEAP32[$0 >> 2];
 $1 = HEAP32[$0 + 4 >> 2];
 HEAP32[4977] = $3;
 HEAP32[4978] = $1;
 $3 = HEAP32[$0 + 12 >> 2];
 $1 = HEAP32[$0 + 8 >> 2];
 HEAP32[4979] = $1;
 HEAP32[4980] = $3;
 $0 = $2 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return 19908;
}
function btCollisionDispatcher__clearManifold_28btPersistentManifold__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $0 = global$0 - 16 | 0;
 $2 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $2 = HEAP32[$1 + 844 >> 2];
 if (($2 | 0) >= 1) {
  while (1) {
   btPersistentManifold__clearUserCache_28btManifoldPoint__29($1, (Math_imul($3, 208) + $1 | 0) + 4 | 0);
   $3 = $3 + 1 | 0;
   $2 = HEAP32[$1 + 844 >> 2];
   if (($3 | 0) < ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 label$4 : {
  if (!$2) {
   break label$4;
  }
  $3 = HEAP32[5386];
  if (!$3) {
   break label$4;
  }
  HEAP32[$0 + 12 >> 2] = $1;
  FUNCTION_TABLE[$3]($0 + 12 | 0);
 }
 HEAP32[$1 + 844 >> 2] = 0;
 $0 = $0 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDefaultMotionState__btDefaultMotionState_28btTransform_20const__2c_20btTransform_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 btMotionState__btMotionState_28_29($1);
 HEAP32[$1 >> 2] = 2144;
 btTransform__btTransform_28btTransform_20const__29($1 + 4 | 0, HEAP32[$3 + 8 >> 2]);
 btTransform__btTransform_28btTransform_20const__29($1 + 68 | 0, HEAP32[$3 + 4 >> 2]);
 btTransform__btTransform_28btTransform_20const__29($1 + 132 | 0, HEAP32[$3 + 8 >> 2]);
 HEAP32[$1 + 196 >> 2] = 0;
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function btAlignedObjectArray_btVector3___copyFromArray_28btAlignedObjectArray_btVector3__20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $1 = HEAP32[$2 + 28 >> 2];
 HEAP32[$2 + 20 >> 2] = btAlignedObjectArray_btVector3___size_28_29_20const(HEAP32[$2 + 24 >> 2]);
 $0 = HEAP32[$2 + 20 >> 2];
 btVector3__btVector3_28_29($2);
 btAlignedObjectArray_btVector3___resize_28int_2c_20btVector3_20const__29($1, $0, $2);
 btAlignedObjectArray_btVector3___copy_28int_2c_20int_2c_20btVector3__29_20const(HEAP32[$2 + 24 >> 2], 0, HEAP32[$2 + 20 >> 2], HEAP32[$1 + 12 >> 2]);
 $0 = $2 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccNotMeClosestConvexResultCallback__needsCollision_28btBroadphaseProxy__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 8 >> 2];
 label$2 : {
  if (HEAP32[HEAP32[$2 + 4 >> 2] >> 2] == HEAP32[$0 + 84 >> 2]) {
   HEAP8[$2 + 15 | 0] = 0;
   break label$2;
  }
  if (!(btCollisionWorld__ConvexResultCallback__needsCollision_28btBroadphaseProxy__29_20const($0, HEAP32[$2 + 4 >> 2]) & 1)) {
   HEAP8[$2 + 15 | 0] = 0;
   break label$2;
  }
  HEAP8[$2 + 15 | 0] = 1;
 }
 $0 = HEAP8[$2 + 15 | 0] & 1;
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function btStaticPlaneShape__btStaticPlaneShape_28btVector3_20const__2c_20float_29($0, $1, $2) {
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0);
 btConcaveShape__btConcaveShape_28_29($0);
 HEAP32[$0 >> 2] = 12492;
 $3 = HEAPF32[$1 + 8 >> 2];
 $4 = HEAPF32[$1 >> 2];
 $5 = HEAPF32[$1 + 4 >> 2];
 $1 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 80 >> 2] = 1065353216;
 HEAP32[$0 + 84 >> 2] = 0;
 HEAP32[$0 + 72 >> 2] = 1065353216;
 HEAP32[$0 + 76 >> 2] = 1065353216;
 HEAPF32[$0 + 68 >> 2] = $2;
 HEAP32[$0 - -64 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = 28;
 $2 = Math_fround(Math_fround(1) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($4 * $4) + Math_fround($5 * $5)) + Math_fround($3 * $3)))));
 HEAPF32[$0 + 60 >> 2] = $3 * $2;
 HEAPF32[$0 + 56 >> 2] = $5 * $2;
 HEAPF32[$0 + 52 >> 2] = $4 * $2;
 return $0;
}
function btCollisionWorld__AllHitsRayResultCallback___AllHitsRayResultCallback_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 1768;
 btAlignedObjectArray_float____btAlignedObjectArray_28_29($0 + 112 | 0);
 btAlignedObjectArray_btVector3____btAlignedObjectArray_28_29($0 + 92 | 0);
 btAlignedObjectArray_btVector3____btAlignedObjectArray_28_29($0 + 72 | 0);
 btAlignedObjectArray_btCollisionObject_20const_____btAlignedObjectArray_28_29($0 + 20 | 0);
 btCollisionWorld__RayResultCallback___RayResultCallback_28_29($0);
 $1 = $1 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function btCompoundShape_setMaterial_5($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = Math_fround($3);
 $4 = Math_fround($4);
 $5 = Math_fround($5);
 var $6 = 0, $7 = 0;
 $6 = global$0 - 32 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAP32[$6 + 24 >> 2] = $1;
 HEAPF32[$6 + 20 >> 2] = $2;
 HEAPF32[$6 + 16 >> 2] = $3;
 HEAPF32[$6 + 12 >> 2] = $4;
 HEAPF32[$6 + 8 >> 2] = $5;
 btCompoundShape__setMaterial_28int_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29(HEAP32[$6 + 28 >> 2], HEAP32[$6 + 24 >> 2], HEAPF32[$6 + 20 >> 2], HEAPF32[$6 + 16 >> 2], HEAPF32[$6 + 12 >> 2], HEAPF32[$6 + 8 >> 2], 2);
 $0 = $6 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHingeConstraint_setLimit_5($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = Math_fround($2);
 $3 = Math_fround($3);
 $4 = Math_fround($4);
 $5 = Math_fround($5);
 var $6 = 0, $7 = 0;
 $6 = global$0 - 32 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAPF32[$6 + 24 >> 2] = $1;
 HEAPF32[$6 + 20 >> 2] = $2;
 HEAPF32[$6 + 16 >> 2] = $3;
 HEAPF32[$6 + 12 >> 2] = $4;
 HEAPF32[$6 + 8 >> 2] = $5;
 btHingeConstraint__setLimit_28float_2c_20float_2c_20float_2c_20float_2c_20float_29(HEAP32[$6 + 28 >> 2], HEAPF32[$6 + 24 >> 2], HEAPF32[$6 + 20 >> 2], HEAPF32[$6 + 16 >> 2], HEAPF32[$6 + 12 >> 2], HEAPF32[$6 + 8 >> 2]);
 $0 = $6 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody__clearForces_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = global$0 - 32 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $3 = $1 + 12 | 0;
 $4 = $1 + 8 | 0;
 $2 = $1 + 4 | 0;
 HEAP32[$1 + 28 >> 2] = $0;
 $0 = HEAP32[$1 + 28 >> 2];
 HEAPF32[$1 + 24 >> 2] = 0;
 HEAPF32[$1 + 20 >> 2] = 0;
 HEAPF32[$1 + 16 >> 2] = 0;
 btVector3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__29($0 + 472 | 0, $1 + 24 | 0, $1 + 20 | 0, $1 + 16 | 0);
 HEAPF32[$1 + 12 >> 2] = 0;
 HEAPF32[$1 + 8 >> 2] = 0;
 HEAPF32[$1 + 4 >> 2] = 0;
 btVector3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__29($0 + 488 | 0, $3, $4, $2);
 $0 = $1 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function operator__28btVector3_20const__2c_20btVector3_20const__29_2($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 28 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $2;
 HEAPF32[$3 + 20 >> 2] = HEAPF32[HEAP32[$3 + 28 >> 2] >> 2] * HEAPF32[HEAP32[$3 + 24 >> 2] >> 2];
 HEAPF32[$3 + 16 >> 2] = HEAPF32[HEAP32[$3 + 28 >> 2] + 4 >> 2] * HEAPF32[HEAP32[$3 + 24 >> 2] + 4 >> 2];
 HEAPF32[$3 + 12 >> 2] = HEAPF32[HEAP32[$3 + 28 >> 2] + 8 >> 2] * HEAPF32[HEAP32[$3 + 24 >> 2] + 8 >> 2];
 btVector3__btVector3_28float_20const__2c_20float_20const__2c_20float_20const__29($0, $3 + 20 | 0, $3 + 16 | 0, $3 + 12 | 0);
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function operator__28btVector3_20const__2c_20btVector3_20const__29_1($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 28 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $2;
 HEAPF32[$3 + 20 >> 2] = HEAPF32[HEAP32[$3 + 28 >> 2] >> 2] + HEAPF32[HEAP32[$3 + 24 >> 2] >> 2];
 HEAPF32[$3 + 16 >> 2] = HEAPF32[HEAP32[$3 + 28 >> 2] + 4 >> 2] + HEAPF32[HEAP32[$3 + 24 >> 2] + 4 >> 2];
 HEAPF32[$3 + 12 >> 2] = HEAPF32[HEAP32[$3 + 28 >> 2] + 8 >> 2] + HEAPF32[HEAP32[$3 + 24 >> 2] + 8 >> 2];
 btVector3__btVector3_28float_20const__2c_20float_20const__2c_20float_20const__29($0, $3 + 20 | 0, $3 + 16 | 0, $3 + 12 | 0);
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btFixedConstraint__btFixedConstraint_28btRigidBody__2c_20btRigidBody__2c_20btTransform_20const__2c_20btTransform_20const__29($0, $1, $2, $3, $4) {
 btGeneric6DofSpring2Constraint__btGeneric6DofSpring2Constraint_28btRigidBody__2c_20btRigidBody__2c_20btTransform_20const__2c_20btTransform_20const__2c_20RotateOrder_29($0, $1, $2, $3, $4, 0);
 HEAP32[$0 >> 2] = 3136;
 $1 = $0 + 1144 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 $1 = $0 + 1056 | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 $1 = $0;
 HEAP32[$1 + 968 >> 2] = 0;
 HEAP32[$1 + 972 >> 2] = 0;
 HEAP32[$1 + 680 >> 2] = 0;
 HEAP32[$1 + 684 >> 2] = 0;
 HEAP32[$1 + 688 >> 2] = 0;
 HEAP32[$1 + 692 >> 2] = 0;
 HEAP32[$1 + 696 >> 2] = 0;
 HEAP32[$1 + 700 >> 2] = 0;
 HEAP32[$1 + 704 >> 2] = 0;
 HEAP32[$1 + 708 >> 2] = 0;
 return $1;
}
function operator__28btVector3_20const__2c_20btVector3_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 28 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $2;
 HEAPF32[$3 + 20 >> 2] = HEAPF32[HEAP32[$3 + 28 >> 2] >> 2] - HEAPF32[HEAP32[$3 + 24 >> 2] >> 2];
 HEAPF32[$3 + 16 >> 2] = HEAPF32[HEAP32[$3 + 28 >> 2] + 4 >> 2] - HEAPF32[HEAP32[$3 + 24 >> 2] + 4 >> 2];
 HEAPF32[$3 + 12 >> 2] = HEAPF32[HEAP32[$3 + 28 >> 2] + 8 >> 2] - HEAPF32[HEAP32[$3 + 24 >> 2] + 8 >> 2];
 btVector3__btVector3_28float_20const__2c_20float_20const__2c_20float_20const__29($0, $3 + 20 | 0, $3 + 16 | 0, $3 + 12 | 0);
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTransform_getRotation_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 32 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 28 >> 2] = $0;
 label$2 : {
  if (HEAP8[19964] & 1) {
   break label$2;
  }
  if (!__cxa_guard_acquire(19964)) {
   break label$2;
  }
  btQuaternion__btQuaternion_28_29(19948);
  __cxa_guard_release(19964);
 }
 $0 = $1 + 8 | 0;
 btTransform__getRotation_28_29_20const($0, HEAP32[$1 + 28 >> 2]);
 $3 = HEAP32[$0 >> 2];
 $2 = HEAP32[$0 + 4 >> 2];
 HEAP32[4987] = $3;
 HEAP32[4988] = $2;
 $3 = HEAP32[$0 + 12 >> 2];
 $2 = HEAP32[$0 + 8 >> 2];
 HEAP32[4989] = $2;
 HEAP32[4990] = $3;
 $0 = $1 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return 19948;
}
function btTriangleRaycastCallback__btTriangleRaycastCallback_28btVector3_20const__2c_20btVector3_20const__2c_20unsigned_20int_29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0;
 HEAP32[$0 >> 2] = 7416;
 $5 = $1;
 $4 = HEAP32[$5 >> 2];
 $1 = HEAP32[$5 + 4 >> 2];
 $6 = $4;
 $4 = $0;
 HEAP32[$4 + 4 >> 2] = $6;
 HEAP32[$4 + 8 >> 2] = $1;
 $4 = HEAP32[$5 + 12 >> 2];
 $1 = HEAP32[$5 + 8 >> 2];
 $5 = $1;
 $1 = $0;
 HEAP32[$1 + 12 >> 2] = $5;
 HEAP32[$1 + 16 >> 2] = $4;
 $5 = $2;
 $4 = HEAP32[$5 >> 2];
 $1 = HEAP32[$5 + 4 >> 2];
 $2 = $4;
 $4 = $0;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 24 >> 2] = $1;
 $4 = HEAP32[$5 + 12 >> 2];
 $1 = HEAP32[$5 + 8 >> 2];
 $2 = $1;
 $1 = $0;
 HEAP32[$1 + 28 >> 2] = $2;
 HEAP32[$1 + 32 >> 2] = $4;
 HEAP32[$1 + 40 >> 2] = 1065353216;
 HEAP32[$1 + 36 >> 2] = $3;
 return $1;
}
function btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $1 = btDiscreteDynamicsWorld__operator_20new_28unsigned_20long_29(344);
 btDiscreteDynamicsWorld__btDiscreteDynamicsWorld_28btDispatcher__2c_20btBroadphaseInterface__2c_20btConstraintSolver__2c_20btCollisionConfiguration__29($1, HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function btSphereTriangleCollisionAlgorithm__btSphereTriangleCollisionAlgorithm_28btPersistentManifold__2c_20btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, $4, $5) {
 btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $2, $3, $4);
 HEAP8[$0 + 16 | 0] = $5;
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP8[$0 + 8 | 0] = 0;
 HEAP32[$0 >> 2] = 9764;
 if (!$1) {
  $1 = HEAP32[$0 + 4 >> 2];
  $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, HEAP32[$3 + 8 >> 2], HEAP32[$4 + 8 >> 2]) | 0;
  HEAP8[$0 + 8 | 0] = 1;
  HEAP32[$0 + 12 >> 2] = $1;
 }
 return $0;
}
function operator__28btVector3_20const__2c_20float_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 28 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $2;
 HEAPF32[$3 + 20 >> 2] = HEAPF32[HEAP32[$3 + 28 >> 2] >> 2] * HEAPF32[HEAP32[$3 + 24 >> 2] >> 2];
 HEAPF32[$3 + 16 >> 2] = HEAPF32[HEAP32[$3 + 28 >> 2] + 4 >> 2] * HEAPF32[HEAP32[$3 + 24 >> 2] >> 2];
 HEAPF32[$3 + 12 >> 2] = HEAPF32[HEAP32[$3 + 28 >> 2] + 8 >> 2] * HEAPF32[HEAP32[$3 + 24 >> 2] >> 2];
 btVector3__btVector3_28float_20const__2c_20float_20const__2c_20float_20const__29($0, $3 + 20 | 0, $3 + 16 | 0, $3 + 12 | 0);
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody__applyForce_28btVector3_20const__2c_20btVector3_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 48 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $4 = $3 + 16 | 0;
 HEAP32[$3 + 44 >> 2] = $0;
 HEAP32[$3 + 40 >> 2] = $1;
 HEAP32[$3 + 36 >> 2] = $2;
 $1 = HEAP32[$3 + 44 >> 2];
 btRigidBody__applyCentralForce_28btVector3_20const__29($1, HEAP32[$3 + 40 >> 2]);
 $0 = HEAP32[$3 + 36 >> 2];
 operator__28btVector3_20const__2c_20btVector3_20const__29_2($3, HEAP32[$3 + 40 >> 2], $1 + 408 | 0);
 btVector3__cross_28btVector3_20const__29_20const($4, $0, $3);
 btRigidBody__applyTorque_28btVector3_20const__29($1, $4);
 $0 = $3 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4($0, $1, $2, $3) {
 $0 = Math_fround($0);
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAPF32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $2 = operator_20new_28unsigned_20long_29(144);
 btRigidBody__btRigidBodyConstructionInfo__btRigidBodyConstructionInfo_28float_2c_20btMotionState__2c_20btCollisionShape__2c_20btVector3_20const__29($2, HEAPF32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $1 = $4 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $2 | 0;
}
function btTransform__operator_28_29_28btVector3_20const__29_20const($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 32 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 28 >> 2] = $1;
 HEAP32[$3 + 24 >> 2] = $2;
 $1 = $3 + 8 | 0;
 $2 = HEAP32[$3 + 28 >> 2];
 btVector3__dot3_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($1, HEAP32[$3 + 24 >> 2], btMatrix3x3__operator_5b_5d_28int_29_20const($2, 0), btMatrix3x3__operator_5b_5d_28int_29_20const($2, 1), btMatrix3x3__operator_5b_5d_28int_29_20const($2, 2));
 operator__28btVector3_20const__2c_20btVector3_20const__29_1($0, $1, $2 + 48 | 0);
 $0 = $3 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_float___copyFromArray_28btAlignedObjectArray_float__20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = btAlignedObjectArray_float___size_28_29_20const(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 4 >> 2];
 HEAPF32[$2 >> 2] = 0;
 btAlignedObjectArray_float___resize_28int_2c_20float_20const__29($1, $0, $2);
 btAlignedObjectArray_float___copy_28int_2c_20int_2c_20float__29_20const(HEAP32[$2 + 8 >> 2], 0, HEAP32[$2 + 4 >> 2], HEAP32[$1 + 12 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btPoint2PointConstraint_btPoint2PointConstraint_4($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $1 = btPoint2PointConstraint__operator_20new_28unsigned_20long_29(360);
 btPoint2PointConstraint__btPoint2PointConstraint_28btRigidBody__2c_20btRigidBody__2c_20btVector3_20const__2c_20btVector3_20const__29($1, HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function btTransform__btTransform_28btQuaternion_20const__2c_20btVector3_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 btMatrix3x3__btMatrix3x3_28btQuaternion_20const__29($1, HEAP32[$3 + 8 >> 2]);
 $4 = HEAP32[$3 + 4 >> 2];
 $2 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$1 + 48 >> 2] = $2;
 HEAP32[$1 + 52 >> 2] = $0;
 $2 = HEAP32[$4 + 12 >> 2];
 $0 = HEAP32[$4 + 8 >> 2];
 HEAP32[$1 + 56 >> 2] = $0;
 HEAP32[$1 + 60 >> 2] = $2;
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function btTransform__btTransform_28btMatrix3x3_20const__2c_20btVector3_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 btMatrix3x3__btMatrix3x3_28btMatrix3x3_20const__29($1, HEAP32[$3 + 8 >> 2]);
 $4 = HEAP32[$3 + 4 >> 2];
 $2 = HEAP32[$4 >> 2];
 $0 = HEAP32[$4 + 4 >> 2];
 HEAP32[$1 + 48 >> 2] = $2;
 HEAP32[$1 + 52 >> 2] = $0;
 $2 = HEAP32[$4 + 12 >> 2];
 $0 = HEAP32[$4 + 8 >> 2];
 HEAP32[$1 + 56 >> 2] = $0;
 HEAP32[$1 + 60 >> 2] = $2;
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function btAlignedObjectArray_btCollisionObject_20const____removeAtIndex_28int_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 if (HEAP32[$2 + 8 >> 2] < (btAlignedObjectArray_btCollisionObject_20const____size_28_29_20const($0) | 0)) {
  btAlignedObjectArray_btCollisionObject_20const____swap_28int_2c_20int_29($0, HEAP32[$2 + 8 >> 2], btAlignedObjectArray_btCollisionObject_20const____size_28_29_20const($0) - 1 | 0);
  btAlignedObjectArray_btCollisionObject_20const____pop_back_28_29($0);
 }
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function InplaceSolverIslandCallback___InplaceSolverIslandCallback_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 2944;
 $1 = HEAP32[$0 + 80 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 84 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 80 >> 2] = 0;
 }
 HEAP32[$0 + 80 >> 2] = 0;
 HEAP32[$0 + 72 >> 2] = 0;
 HEAP32[$0 + 76 >> 2] = 0;
 HEAP8[$0 + 84 | 0] = 1;
 $1 = HEAP32[$0 + 60 >> 2];
 if ($1) {
  if (HEAPU8[$0 - -64 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 60 >> 2] = 0;
 }
 HEAP32[$0 + 60 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP8[$0 - -64 | 0] = 1;
 $1 = HEAP32[$0 + 40 >> 2];
 if (!(!$1 | !HEAPU8[$0 + 44 | 0])) {
  btAlignedFreeInternal_28void__29($1);
 }
 operator_20delete_28void__29($0);
}
function btTriangleIndexVertexArray__getLockedReadOnlyVertexIndexBase_28unsigned_20char_20const___2c_20int__2c_20PHY_ScalarType__2c_20int__2c_20unsigned_20char_20const___2c_20int__2c_20int__2c_20PHY_ScalarType__2c_20int_29_20const($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $0 = HEAP32[$0 + 32 >> 2] + ($9 << 5) | 0;
 HEAP32[$2 >> 2] = HEAP32[$0 + 12 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$0 + 16 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$0 + 28 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$0 + 20 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$8 >> 2] = HEAP32[$0 + 24 >> 2];
}
function btPointCollector__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 var $4 = 0, $5 = 0;
 if (!!(HEAPF32[$0 + 36 >> 2] > $3)) {
  HEAP8[$0 + 40 | 0] = 1;
  $4 = $1;
  $1 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = $1;
  HEAP32[$0 + 8 >> 2] = $5;
  $1 = HEAP32[$4 + 12 >> 2];
  $5 = HEAP32[$4 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $5;
  HEAP32[$0 + 16 >> 2] = $1;
  $4 = $2;
  $1 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$0 + 20 >> 2] = $1;
  HEAP32[$0 + 24 >> 2] = $5;
  $1 = HEAP32[$4 + 12 >> 2];
  $5 = HEAP32[$4 + 8 >> 2];
  HEAP32[$0 + 28 >> 2] = $5;
  HEAP32[$0 + 32 >> 2] = $1;
  HEAPF32[$0 + 36 >> 2] = $3;
 }
}
function btFixedConstraint_btFixedConstraint_4($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $1 = btGeneric6DofSpring2Constraint__operator_20new_28unsigned_20long_29(1460);
 btFixedConstraint__btFixedConstraint_28btRigidBody__2c_20btRigidBody__2c_20btTransform_20const__2c_20btTransform_20const__29($1, HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function btAlignedObjectArray_int___copyFromArray_28btAlignedObjectArray_int__20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = btAlignedObjectArray_int___size_28_29_20const(HEAP32[$2 + 8 >> 2]);
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$2 >> 2] = 0;
 btAlignedObjectArray_int___resize_28int_2c_20int_20const__29($1, $0, $2);
 btAlignedObjectArray_int___copy_28int_2c_20int_2c_20int__29_20const(HEAP32[$2 + 8 >> 2], 0, HEAP32[$2 + 4 >> 2], HEAP32[$1 + 12 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccAllHitsRayResultCallback__ccAllHitsRayResultCallback_28btVector3_20const__2c_20btVector3_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 btCollisionWorld__AllHitsRayResultCallback__AllHitsRayResultCallback_28btVector3_20const__2c_20btVector3_20const__29($1, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 HEAP32[$1 >> 2] = 2008;
 btAlignedObjectArray_int___btAlignedObjectArray_28_29($1 + 132 | 0);
 HEAP8[$1 + 152 | 0] = 1;
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function btHingeConstraint_btHingeConstraint_4($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $1 = btHingeConstraint__operator_20new_28unsigned_20long_29(768);
 btHingeConstraint__btHingeConstraint_28btRigidBody__2c_20btRigidBody__2c_20btTransform_20const__2c_20btTransform_20const__2c_20bool_29($1, HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2], 0);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function btBvhTriangleMeshShape__performConvexcast_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = global$0 - 16 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 $7 = HEAP32[$0 + 52 >> 2];
 HEAP32[$6 + 8 >> 2] = $1;
 HEAP32[$6 + 4 >> 2] = $7;
 HEAP32[$6 >> 2] = 11856;
 btQuantizedBvh__reportBoxCastOverlappingNodex_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29_20const(HEAP32[$0 + 56 >> 2], $6, $2, $3, $4, $5);
 $0 = $6 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuaternion_btQuaternion_4($0, $1, $2, $3) {
 $0 = Math_fround($0);
 $1 = Math_fround($1);
 $2 = Math_fround($2);
 $3 = Math_fround($3);
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $7 = $4 + 12 | 0;
 $8 = $4 + 8 | 0;
 $5 = $4 + 4 | 0;
 HEAPF32[$4 + 12 >> 2] = $0;
 HEAPF32[$4 + 8 >> 2] = $1;
 HEAPF32[$4 + 4 >> 2] = $2;
 HEAPF32[$4 >> 2] = $3;
 $6 = operator_20new_28unsigned_20long_29(16);
 btQuaternion__btQuaternion_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($6, $7, $8, $5, $4);
 $5 = $4 + 16 | 0;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 return $6 | 0;
}
function btCompoundShape_setMaterial_4($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = Math_fround($3);
 $4 = Math_fround($4);
 var $5 = 0, $6 = 0;
 $5 = global$0 - 32 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAPF32[$5 + 20 >> 2] = $2;
 HEAPF32[$5 + 16 >> 2] = $3;
 HEAPF32[$5 + 12 >> 2] = $4;
 btCompoundShape__setMaterial_28int_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAPF32[$5 + 20 >> 2], HEAPF32[$5 + 16 >> 2], HEAPF32[$5 + 12 >> 2], Math_fround(0), 2);
 $0 = $5 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHingeConstraint_setLimit_4($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = Math_fround($2);
 $3 = Math_fround($3);
 $4 = Math_fround($4);
 var $5 = 0, $6 = 0;
 $5 = global$0 - 32 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAPF32[$5 + 24 >> 2] = $1;
 HEAPF32[$5 + 20 >> 2] = $2;
 HEAPF32[$5 + 16 >> 2] = $3;
 HEAPF32[$5 + 12 >> 2] = $4;
 btHingeConstraint__setLimit_28float_2c_20float_2c_20float_2c_20float_2c_20float_29(HEAP32[$5 + 28 >> 2], HEAPF32[$5 + 24 >> 2], HEAPF32[$5 + 20 >> 2], HEAPF32[$5 + 16 >> 2], HEAPF32[$5 + 12 >> 2], Math_fround(1));
 $0 = $5 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionShape__getAngularMotionDisc_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0);
 $1 = global$0 - 32 | 0;
 $5 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1 + 16 | 0, $1 + 12 | 0);
 $2 = HEAPF32[$1 + 20 >> 2];
 $3 = HEAPF32[$1 + 16 >> 2];
 $4 = HEAPF32[$1 + 24 >> 2];
 $6 = HEAPF32[$1 + 12 >> 2];
 $0 = $1 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround(Math_fround($6 + Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($3 * $3) + Math_fround($2 * $2)) + Math_fround($4 * $4))))));
}
function btCylinderShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
 HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 32 >> 2];
 HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 36 >> 2];
 HEAP32[$1 + 36 >> 2] = HEAP32[$0 + 40 >> 2];
 HEAP32[$1 + 40 >> 2] = HEAP32[$0 + 44 >> 2];
 HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 16 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 20 >> 2];
 HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 24 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 28 >> 2];
 $2 = HEAP32[$0 + 48 >> 2];
 HEAP32[$1 + 48 >> 2] = 0;
 HEAP32[$1 + 44 >> 2] = $2;
 $0 = HEAP32[$0 + 56 >> 2];
 HEAP32[$1 + 56 >> 2] = 0;
 HEAP32[$1 + 52 >> 2] = $0;
 return 14954;
}
function btSphereSphereCollisionAlgorithm__btSphereSphereCollisionAlgorithm_28btPersistentManifold__2c_20btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3, $4) {
 btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $2, $3, $4);
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP8[$0 + 8 | 0] = 0;
 HEAP32[$0 >> 2] = 5028;
 if (!$1) {
  $1 = HEAP32[$0 + 4 >> 2];
  $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, HEAP32[$3 + 8 >> 2], HEAP32[$4 + 8 >> 2]) | 0;
  HEAP8[$0 + 8 | 0] = 1;
  HEAP32[$0 + 12 >> 2] = $1;
 }
 return $0;
}
function btCapsuleShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
 HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 32 >> 2];
 HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 36 >> 2];
 HEAP32[$1 + 36 >> 2] = HEAP32[$0 + 40 >> 2];
 HEAP32[$1 + 40 >> 2] = HEAP32[$0 + 44 >> 2];
 HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 16 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 20 >> 2];
 HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 24 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 28 >> 2];
 $2 = HEAP32[$0 + 48 >> 2];
 HEAP32[$1 + 48 >> 2] = 0;
 HEAP32[$1 + 44 >> 2] = $2;
 $0 = HEAP32[$0 + 56 >> 2];
 HEAP32[$1 + 56 >> 2] = 0;
 HEAP32[$1 + 52 >> 2] = $0;
 return 13633;
}
function btHingeConstraint__getInfo2_28btTypedConstraint__btConstraintInfo2__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = HEAP32[$0 + 32 >> 2];
 $4 = $2 + 388 | 0;
 $3 = HEAP32[$0 + 28 >> 2];
 $5 = $3 + 388 | 0;
 $2 = $2 + 4 | 0;
 $3 = $3 + 4 | 0;
 if (HEAPU8[$0 + 739 | 0]) {
  btHingeConstraint__getInfo2InternalUsingFrameOffset_28btTypedConstraint__btConstraintInfo2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $3, $2, $5, $4);
  return;
 }
 btHingeConstraint__getInfo2Internal_28btTypedConstraint__btConstraintInfo2__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $3, $2, $5, $4);
}
function btConeShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
 HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 32 >> 2];
 HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 36 >> 2];
 HEAP32[$1 + 36 >> 2] = HEAP32[$0 + 40 >> 2];
 HEAP32[$1 + 40 >> 2] = HEAP32[$0 + 44 >> 2];
 HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 16 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 20 >> 2];
 HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 24 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 28 >> 2];
 $2 = HEAP32[$0 + 48 >> 2];
 HEAP32[$1 + 48 >> 2] = 0;
 HEAP32[$1 + 44 >> 2] = $2;
 $0 = HEAP32[$0 + 72 >> 2];
 HEAP32[$1 + 56 >> 2] = 0;
 HEAP32[$1 + 52 >> 2] = $0;
 return 11321;
}
function btTriangleIndexVertexArray__setPremadeAabb_28btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0;
 $4 = $1;
 $3 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 $5 = $3;
 $3 = $0;
 HEAP32[$3 + 52 >> 2] = $5;
 HEAP32[$3 + 56 >> 2] = $1;
 $3 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$4 + 8 >> 2];
 $4 = $1;
 $1 = $0;
 HEAP32[$1 + 60 >> 2] = $4;
 HEAP32[$1 + 64 >> 2] = $3;
 $4 = $2;
 $3 = HEAP32[$4 >> 2];
 $1 = HEAP32[$4 + 4 >> 2];
 $2 = $3;
 $3 = $0;
 HEAP32[$3 + 68 >> 2] = $2;
 HEAP32[$3 + 72 >> 2] = $1;
 $3 = HEAP32[$4 + 12 >> 2];
 $1 = HEAP32[$4 + 8 >> 2];
 $2 = $1;
 $1 = $0;
 HEAP32[$1 + 76 >> 2] = $2;
 HEAP32[$1 + 80 >> 2] = $3;
 HEAP32[$1 + 48 >> 2] = 1;
}
function btQuaternion__btQuaternion_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $5 = global$0 - 32 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $1 = HEAP32[$5 + 28 >> 2];
 btQuadWord__btQuadWord_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($1, HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP32[$5 + 12 >> 2]);
 $0 = $5 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function btHingeConstraint__setLimit_28float_2c_20float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $6 = global$0 - 32 | 0;
 $7 = $6;
 if ($6 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $7;
 HEAP32[$6 + 28 >> 2] = $0;
 HEAPF32[$6 + 24 >> 2] = $1;
 HEAPF32[$6 + 20 >> 2] = $2;
 HEAPF32[$6 + 16 >> 2] = $3;
 HEAPF32[$6 + 12 >> 2] = $4;
 HEAPF32[$6 + 8 >> 2] = $5;
 btAngularLimit__set_28float_2c_20float_2c_20float_2c_20float_2c_20float_29(HEAP32[$6 + 28 >> 2] + 688 | 0, HEAPF32[$6 + 24 >> 2], HEAPF32[$6 + 20 >> 2], HEAPF32[$6 + 16 >> 2], HEAPF32[$6 + 12 >> 2], HEAPF32[$6 + 8 >> 2]);
 $0 = $6 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHingeConstraint__getParam_28int_2c_20int_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = Math_fround(0);
 $2 = $2 + 1 | 0;
 label$1 : {
  if ($2 >>> 0 > 6) {
   break label$1;
  }
  label$2 : {
   switch ($2 - 1 | 0) {
   case 0:
   case 1:
   case 2:
   case 3:
   case 4:
    break label$1;
   default:
    break label$2;
   }
  }
  $2 = $1 + -1 | 0;
  if ($2 >>> 0 > 3) {
   break label$1;
  }
  label$3 : {
   switch ($2 - 1 | 0) {
   case 0:
    return Math_fround(HEAPF32[$0 + 764 >> 2]);
   case 2:
    return Math_fround(HEAPF32[$0 + 760 >> 2]);
   case 1:
    return Math_fround(HEAPF32[$0 + 752 >> 2]);
   default:
    break label$3;
   }
  }
  $3 = HEAPF32[$0 + 756 >> 2];
 }
 return Math_fround($3);
}
function btTypedConstraint__getMotorFactor_28float_2c_20float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5) {
 var $6 = Math_fround(0);
 $6 = Math_fround(1);
 label$1 : {
  if ($2 > $3) {
   break label$1;
  }
  $6 = Math_fround(0);
  if ($2 == $3) {
   break label$1;
  }
  $4 = Math_fround($4 / $5);
  if (!!($4 < Math_fround(0))) {
   if (!($1 >= $2 ^ 1 | Math_fround($2 - $4) > $1 ^ 1)) {
    return Math_fround(Math_fround($2 - $1) / $4);
   }
   return $1 < $2 ? Math_fround(0) : Math_fround(1);
  }
  if (!($4 > Math_fround(0))) {
   break label$1;
  }
  if (!($1 <= $3 ^ 1 | Math_fround($3 - $4) < $1 ^ 1)) {
   return Math_fround(Math_fround($3 - $1) / $4);
  }
  $6 = $1 > $3 ? Math_fround(0) : Math_fround(1);
 }
 return $6;
}
function btBvhTriangleMeshShape__btBvhTriangleMeshShape_28btStridingMeshInterface__2c_20bool_2c_20bool_29($0, $1, $2, $3) {
 btTriangleMeshShape__btTriangleMeshShape_28btStridingMeshInterface__29($0, $1);
 HEAP8[$0 + 65 | 0] = 0;
 HEAP8[$0 + 64 | 0] = $2;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP32[$0 + 60 >> 2] = 0;
 HEAP32[$0 >> 2] = 11532;
 HEAP32[$0 + 4 >> 2] = 21;
 if ($3) {
  $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(172, 16);
  $2 = btOptimizedBvh__btOptimizedBvh_28_29($3);
  HEAP32[$0 + 56 >> 2] = $3;
  btOptimizedBvh__build_28btStridingMeshInterface__2c_20bool_2c_20btVector3_20const__2c_20btVector3_20const__29($2, HEAP32[$0 + 52 >> 2], HEAPU8[$0 + 64 | 0], $0 + 20 | 0, $0 + 36 | 0);
  HEAP8[$0 + 65 | 0] = 1;
 }
 return $0;
}
function btBvhTriangleMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 + -64 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $5 = HEAP32[$0 + 52 >> 2];
 HEAP32[$4 + 60 >> 2] = 0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $5;
 HEAP32[$4 >> 2] = 12004;
 btQuantizedBvh__reportAabbOverlappingNodex_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const(HEAP32[$0 + 56 >> 2], $4, $2, $3);
 $0 = $4 - -64 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTriangleIndexVertexArray__getLockedVertexIndexBase_28unsigned_20char___2c_20int__2c_20PHY_ScalarType__2c_20int__2c_20unsigned_20char___2c_20int__2c_20int__2c_20PHY_ScalarType__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $0 = HEAP32[$0 + 32 >> 2] + ($9 << 5) | 0;
 HEAP32[$2 >> 2] = HEAP32[$0 + 12 >> 2];
 HEAP32[$1 >> 2] = HEAP32[$0 + 16 >> 2];
 HEAP32[$3 >> 2] = HEAP32[$0 + 28 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$0 + 20 >> 2];
 HEAP32[$7 >> 2] = HEAP32[$0 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$0 + 4 >> 2];
 HEAP32[$6 >> 2] = HEAP32[$0 + 8 >> 2];
 HEAP32[$8 >> 2] = HEAP32[$0 + 24 >> 2];
}
function btTransform__btTransform_28btTransform_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 btMatrix3x3__btMatrix3x3_28btMatrix3x3_20const__29($1, HEAP32[$2 + 8 >> 2]);
 $4 = HEAP32[$2 + 8 >> 2];
 $3 = HEAP32[$4 + 48 >> 2];
 $0 = HEAP32[$4 + 52 >> 2];
 HEAP32[$1 + 48 >> 2] = $3;
 HEAP32[$1 + 52 >> 2] = $0;
 $3 = HEAP32[$4 + 60 >> 2];
 $0 = HEAP32[$4 + 56 >> 2];
 HEAP32[$1 + 56 >> 2] = $0;
 HEAP32[$1 + 60 >> 2] = $3;
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function scalbnf($0, $1) {
 label$1 : {
  if (($1 | 0) >= 128) {
   $0 = Math_fround($0 * Math_fround(1.7014118346046923e+38));
   if (($1 | 0) < 255) {
    $1 = $1 + -127 | 0;
    break label$1;
   }
   $0 = Math_fround($0 * Math_fround(1.7014118346046923e+38));
   $1 = (($1 | 0) < 381 ? $1 : 381) + -254 | 0;
   break label$1;
  }
  if (($1 | 0) > -127) {
   break label$1;
  }
  $0 = Math_fround($0 * Math_fround(1.1754943508222875e-38));
  if (($1 | 0) > -253) {
   $1 = $1 + 126 | 0;
   break label$1;
  }
  $0 = Math_fround($0 * Math_fround(1.1754943508222875e-38));
  $1 = (($1 | 0) > -378 ? $1 : -378) + 252 | 0;
 }
 return Math_fround($0 * (wasm2js_scratch_store_i32(0, ($1 << 23) + 1065353216 | 0), wasm2js_scratch_load_f32()));
}
function btTransform__operator__28btTransform_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 btMatrix3x3__operator__28btMatrix3x3_20const__29($1, HEAP32[$2 + 8 >> 2]);
 $4 = HEAP32[$2 + 8 >> 2];
 $3 = HEAP32[$4 + 48 >> 2];
 $0 = HEAP32[$4 + 52 >> 2];
 HEAP32[$1 + 48 >> 2] = $3;
 HEAP32[$1 + 52 >> 2] = $0;
 $3 = HEAP32[$4 + 60 >> 2];
 $0 = HEAP32[$4 + 56 >> 2];
 HEAP32[$1 + 56 >> 2] = $0;
 HEAP32[$1 + 60 >> 2] = $3;
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function btQuantizedBvh__reportBoxCastOverlappingNodex_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3, $4, $5) {
 if (HEAPU8[$0 + 60 | 0]) {
  btQuantizedBvh__walkStacklessQuantizedTreeAgainstRay_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20int_29_20const($0, $1, $2, $3, $4, $5, 0, HEAP32[$0 + 56 >> 2]);
  return;
 }
 btQuantizedBvh__walkStacklessTreeAgainstRay_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20int_29_20const($0, $1, $2, $3, $4, $5, $0, $0);
}
function btDiscreteDynamicsWorld__removeRigidBody_28btRigidBody__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = HEAP32[$0 + 248 >> 2];
 label$1 : {
  if (($2 | 0) < 1) {
   break label$1;
  }
  $4 = HEAP32[$0 + 256 >> 2];
  while (1) {
   $5 = ($3 << 2) + $4 | 0;
   if (HEAP32[$5 >> 2] != ($1 | 0)) {
    $3 = $3 + 1 | 0;
    if (($2 | 0) != ($3 | 0)) {
     continue;
    }
    break label$1;
   }
   break;
  }
  if (($2 | 0) <= ($3 | 0)) {
   break label$1;
  }
  $3 = $2 + -1 | 0;
  $2 = $3 << 2;
  HEAP32[$5 >> 2] = HEAP32[$4 + $2 >> 2];
  HEAP32[HEAP32[$0 + 256 >> 2] + $2 >> 2] = $1;
  HEAP32[$0 + 248 >> 2] = $3;
 }
 btCollisionWorld__removeCollisionObject_28btCollisionObject__29($0, $1);
}
function btTransform__operator__28btTransform_20const__29_20const($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 80 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 76 >> 2] = $0;
 HEAP32[$3 + 72 >> 2] = $1;
 HEAP32[$3 + 68 >> 2] = $2;
 $2 = $3 + 16 | 0;
 $1 = HEAP32[$3 + 72 >> 2];
 operator__28btMatrix3x3_20const__2c_20btMatrix3x3_20const__29($2, $1, HEAP32[$3 + 68 >> 2]);
 btTransform__operator_28_29_28btVector3_20const__29_20const($3, $1, HEAP32[$3 + 68 >> 2] + 48 | 0);
 btTransform__btTransform_28btMatrix3x3_20const__2c_20btVector3_20const__29($0, $2, $3);
 $0 = $3 + 80 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTriangleMesh_addTriangle_4($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0;
 $5 = global$0 - 32 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP8[$5 + 15 | 0] = $4;
 btTriangleMesh__addTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20bool_29(HEAP32[$5 + 28 >> 2], HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP8[$5 + 15 | 0] & 1);
 $0 = $5 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btGjkPairDetector__btGjkPairDetector_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20int_2c_20int_2c_20float_2c_20float_2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 HEAP32[$0 + 72 >> 2] = 1;
 HEAP32[$0 + 76 >> 2] = 1;
 HEAP32[$0 + 60 >> 2] = -1;
 HEAP8[$0 + 52 | 0] = 0;
 HEAPF32[$0 + 48 >> 2] = $6;
 HEAPF32[$0 + 44 >> 2] = $5;
 HEAP32[$0 + 40 >> 2] = $4;
 HEAP32[$0 + 36 >> 2] = $3;
 HEAP32[$0 + 32 >> 2] = $2;
 HEAP32[$0 + 28 >> 2] = $1;
 HEAP32[$0 + 24 >> 2] = $7;
 HEAP32[$0 + 20 >> 2] = $8;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 1065353216;
 HEAP32[$0 >> 2] = 4424;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 return $0;
}
function ccClosestRayResultCallback__ccClosestRayResultCallback_28btVector3_20const__2c_20btVector3_20const__29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $1 = HEAP32[$3 + 12 >> 2];
 btCollisionWorld__ClosestRayResultCallback__ClosestRayResultCallback_28btVector3_20const__2c_20btVector3_20const__29($1, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 HEAP32[$1 >> 2] = 2076;
 HEAP32[$1 + 84 >> 2] = 0;
 HEAP8[$1 + 88 | 0] = 1;
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function btConvexPlaneCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = HEAP32[$1 >> 2];
 $4 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 56 >> 2]]($4, 28) | 0;
 btConvexPlaneCollisionAlgorithm__btConvexPlaneCollisionAlgorithm_28btPersistentManifold__2c_20btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_2c_20int_2c_20int_29($4, 0, $1, $2, $3, HEAPU8[$0 + 4 | 0], HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2]);
 return $4 | 0;
}
function btBoxShape__isInside_28btVector3_20const__2c_20float_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0;
 $3 = HEAPF32[$1 >> 2];
 $4 = HEAPF32[$0 + 32 >> 2];
 label$1 : {
  if ($3 <= Math_fround($4 + $2) ^ 1 | $3 >= Math_fround(Math_fround(-$4) - $2) ^ 1) {
   break label$1;
  }
  $3 = HEAPF32[$1 + 4 >> 2];
  $4 = HEAPF32[$0 + 36 >> 2];
  if ($3 <= Math_fround($4 + $2) ^ 1 | $3 >= Math_fround(Math_fround(-$4) - $2) ^ 1) {
   break label$1;
  }
  $3 = HEAPF32[$1 + 8 >> 2];
  $4 = HEAPF32[$0 + 40 >> 2];
  if (!($3 <= Math_fround($4 + $2))) {
   break label$1;
  }
  $5 = $3 >= Math_fround(Math_fround(-$4) - $2);
 }
 return $5 | 0;
}
function btDbvtBroadphase__destroyProxy_28btBroadphaseProxy__2c_20btDispatcher__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 btDbvt__remove_28btDbvtNode__29(HEAP32[$1 + 60 >> 2] == 2 ? $0 + 44 | 0 : $0 + 4 | 0, HEAP32[$1 + 48 >> 2]);
 $3 = HEAP32[$1 + 56 >> 2];
 $4 = HEAP32[$1 + 52 >> 2];
 label$1 : {
  if ($4) {
   $4 = $4 + 56 | 0;
   break label$1;
  }
  $4 = ((HEAP32[$1 + 60 >> 2] << 2) + $0 | 0) + 84 | 0;
 }
 HEAP32[$4 >> 2] = $3;
 $3 = HEAP32[$1 + 56 >> 2];
 if ($3) {
  HEAP32[$3 + 52 >> 2] = HEAP32[$1 + 52 >> 2];
 }
 $3 = HEAP32[$0 + 96 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1, $2);
 btAlignedFreeInternal_28void__29($1);
 HEAP8[$0 + 154 | 0] = 1;
}
function btQuaternion_setValue_4($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = Math_fround($2);
 $3 = Math_fround($3);
 $4 = Math_fround($4);
 var $5 = 0, $6 = 0;
 $5 = global$0 - 32 | 0;
 $6 = $5;
 if ($5 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $6;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAPF32[$5 + 24 >> 2] = $1;
 HEAPF32[$5 + 20 >> 2] = $2;
 HEAPF32[$5 + 16 >> 2] = $3;
 HEAPF32[$5 + 12 >> 2] = $4;
 btQuadWord__setValue_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29(HEAP32[$5 + 28 >> 2], $5 + 24 | 0, $5 + 20 | 0, $5 + 16 | 0, $5 + 12 | 0);
 $0 = $5 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btVoronoiSimplexSolver__compute_points_28btVector3__2c_20btVector3__29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 btVoronoiSimplexSolver__updateClosestVectorAndPoints_28_29($0);
 $4 = $0;
 $3 = HEAP32[$4 + 244 >> 2];
 $0 = HEAP32[$4 + 248 >> 2];
 $5 = $3;
 $3 = $1;
 HEAP32[$3 >> 2] = $5;
 HEAP32[$3 + 4 >> 2] = $0;
 $3 = HEAP32[$4 + 256 >> 2];
 $0 = HEAP32[$4 + 252 >> 2];
 $5 = $0;
 $0 = $1;
 HEAP32[$0 + 8 >> 2] = $5;
 HEAP32[$0 + 12 >> 2] = $3;
 $0 = HEAP32[$4 + 272 >> 2];
 $3 = HEAP32[$4 + 268 >> 2];
 $1 = $3;
 $3 = $2;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $0;
 $3 = HEAP32[$4 + 264 >> 2];
 $0 = HEAP32[$4 + 260 >> 2];
 $1 = $0;
 $0 = $2;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $3;
}
function btDbvtBroadphase__resetPool_28btDispatcher__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if (HEAP32[$0 + 16 >> 2] == (0 - HEAP32[$0 + 56 >> 2] | 0)) {
  btDbvt__clear_28_29($0 + 4 | 0);
  btDbvt__clear_28_29($0 + 44 | 0);
  HEAP8[$0 + 153 | 0] = 256;
  HEAP8[$0 + 154 | 0] = 1;
  HEAP32[$0 + 124 >> 2] = 0;
  HEAP32[$0 + 104 >> 2] = 0;
  HEAP32[$0 + 116 >> 2] = 10;
  HEAP32[$0 + 120 >> 2] = 1;
  HEAP32[$0 + 108 >> 2] = 1;
  HEAP32[$0 + 112 >> 2] = 0;
  HEAP32[$0 + 84 >> 2] = 0;
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP32[$0 + 92 >> 2] = 0;
  HEAP32[$0 + 128 >> 2] = 0;
  HEAP32[$0 + 132 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 0;
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 144 >> 2] = 0;
  HEAP32[$0 + 148 >> 2] = 0;
 }
}
function btConvexInternalShape__setSafeMargin_28btVector3_20const__2c_20float_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAPF32[$3 >> 2] = HEAPF32[btVector3__operator_20float_20const__28_29_20const(HEAP32[$3 + 8 >> 2]) + (btVector3__minAxis_28_29_20const(HEAP32[$3 + 8 >> 2]) << 2) >> 2];
 btConvexInternalShape__setSafeMargin_28float_2c_20float_29($0, HEAPF32[$3 >> 2], HEAPF32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDbvtBroadphase__getAabb_28btBroadphaseProxy__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = $1;
 $0 = HEAP32[$4 + 16 >> 2];
 $1 = HEAP32[$4 + 20 >> 2];
 $5 = $0;
 $0 = $2;
 HEAP32[$0 >> 2] = $5;
 HEAP32[$0 + 4 >> 2] = $1;
 $0 = HEAP32[$4 + 28 >> 2];
 $1 = HEAP32[$4 + 24 >> 2];
 $5 = $1;
 $1 = $2;
 HEAP32[$1 + 8 >> 2] = $5;
 HEAP32[$1 + 12 >> 2] = $0;
 $1 = HEAP32[$4 + 44 >> 2];
 $0 = HEAP32[$4 + 40 >> 2];
 $2 = $0;
 $0 = $3;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $1;
 $0 = HEAP32[$4 + 36 >> 2];
 $1 = HEAP32[$4 + 32 >> 2];
 $2 = $1;
 $1 = $3;
 HEAP32[$1 >> 2] = $2;
 HEAP32[$1 + 4 >> 2] = $0;
}
function btRigidBody__setGravity_28btVector3_20const__29($0, $1) {
 var $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0);
 $2 = HEAPF32[$0 + 404 >> 2];
 if ($2 != Math_fround(0)) {
  $5 = HEAPF32[$1 >> 2];
  $6 = HEAPF32[$1 + 4 >> 2];
  $7 = HEAPF32[$1 + 8 >> 2];
  HEAP32[$0 + 436 >> 2] = 0;
  $2 = Math_fround(Math_fround(1) / $2);
  HEAPF32[$0 + 432 >> 2] = $7 * $2;
  HEAPF32[$0 + 428 >> 2] = $2 * $6;
  HEAPF32[$0 + 424 >> 2] = $2 * $5;
 }
 $3 = HEAP32[$1 + 4 >> 2];
 $4 = HEAP32[$1 >> 2];
 HEAP32[$0 + 440 >> 2] = $4;
 HEAP32[$0 + 444 >> 2] = $3;
 $4 = HEAP32[$1 + 12 >> 2];
 $3 = HEAP32[$1 + 8 >> 2];
 HEAP32[$0 + 448 >> 2] = $3;
 HEAP32[$0 + 452 >> 2] = $4;
}
function btSimulationIslandManager__updateActivationState_28btCollisionWorld__2c_20btDispatcher__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $2 = HEAP32[$1 + 8 >> 2];
 if (($2 | 0) >= 1) {
  $6 = HEAP32[$1 + 16 >> 2];
  while (1) {
   $3 = HEAP32[($4 << 2) + $6 >> 2];
   if (!(HEAPU8[$3 + 204 | 0] & 3)) {
    HEAP32[$3 + 208 >> 2] = $5;
    $5 = $5 + 1 | 0;
   }
   HEAP32[$3 + 268 >> 2] = 1065353216;
   HEAP32[$3 + 212 >> 2] = -1;
   $4 = $4 + 1 | 0;
   if (($4 | 0) < ($2 | 0)) {
    continue;
   }
   break;
  }
 }
 btUnionFind__reset_28int_29($0 + 4 | 0, $5);
 btSimulationIslandManager__findUnions_28btDispatcher__2c_20btCollisionWorld__29($0, $3, $1);
}
function btAlignedObjectArray_btCollisionObject_20const____allocate_28int_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 8 >> 2];
 label$2 : {
  if (HEAP32[$2 + 4 >> 2]) {
   HEAP32[$2 + 12 >> 2] = btAlignedAllocator_btCollisionObject_20const__2c_2016u___allocate_28int_2c_20btCollisionObject_20const__20const___29($0, HEAP32[$2 + 4 >> 2], 0);
   break label$2;
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function btTransform__inverse_28_29_20const($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 96 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $5 = $2 + 24 | 0;
 $3 = $2 + 8 | 0;
 HEAP32[$2 + 92 >> 2] = $0;
 HEAP32[$2 + 88 >> 2] = $1;
 $4 = $2 + 40 | 0;
 $1 = HEAP32[$2 + 88 >> 2];
 btMatrix3x3__transpose_28_29_20const($4, $1);
 operator__28btVector3_20const__29($3, $1 + 48 | 0);
 operator__28btMatrix3x3_20const__2c_20btVector3_20const__29($5, $4, $3);
 btTransform__btTransform_28btMatrix3x3_20const__2c_20btVector3_20const__29($0, $4, $5);
 $0 = $2 + 96 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDiscreteDynamicsWorld__updateActions_28float_29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = CProfileSample__CProfileSample_28char_20const__29($2 + 8 | 0, 2568);
 if (HEAP32[$0 + 296 >> 2] >= 1) {
  while (1) {
   $5 = HEAP32[HEAP32[$0 + 304 >> 2] + ($4 << 2) >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, $0, $1);
   $4 = $4 + 1 | 0;
   if (($4 | 0) < HEAP32[$0 + 296 >> 2]) {
    continue;
   }
   break;
  }
 }
 CProfileSample___CProfileSample_28_29($3);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDefaultMotionState__getWorldTransform_28btTransform__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 144 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $4 = $2 + 72 | 0;
 HEAP32[$2 + 140 >> 2] = $0;
 HEAP32[$2 + 136 >> 2] = $1;
 $3 = HEAP32[$2 + 140 >> 2];
 $0 = $3 + 4 | 0;
 $1 = $2 + 8 | 0;
 btTransform__inverse_28_29_20const($1, $3 + 68 | 0);
 btTransform__operator__28btTransform_20const__29_20const($4, $0, $1);
 btTransform__operator__28btTransform_20const__29(HEAP32[$2 + 136 >> 2], $4);
 $0 = $2 + 144 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_btCollisionObject_20const____remove_28btCollisionObject_20const__20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$2 + 4 >> 2] = btAlignedObjectArray_btCollisionObject_20const____findLinearSearch_28btCollisionObject_20const__20const__29_20const($0, HEAP32[$2 + 8 >> 2]);
 btAlignedObjectArray_btCollisionObject_20const____removeAtIndex_28int_29($0, HEAP32[$2 + 4 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionWorld__btCollisionWorld_28btDispatcher__2c_20btBroadphaseInterface__2c_20btCollisionConfiguration__29($0, $1, $2, $3) {
 HEAP32[$0 >> 2] = 7548;
 HEAP8[$0 + 76 | 0] = 1;
 HEAP32[$0 + 72 >> 2] = 0;
 HEAP32[$0 + 68 >> 2] = $2;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = $1;
 HEAP8[$0 + 20 | 0] = 1;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 - -64 >> 2] = 0;
 HEAP8[$0 + 60 | 0] = 0;
 HEAP32[$0 + 56 >> 2] = 1025758986;
 HEAP8[$0 + 54 | 0] = 1;
 HEAP16[$0 + 52 >> 1] = 256;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP8[$0 + 44 | 0] = 1;
 HEAP32[$0 + 36 >> 2] = 1;
 HEAP32[$0 + 40 >> 2] = 1065353216;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 return $0;
}
function btTriangleIndexVertexArray__getPremadeAabb_28btVector3__2c_20btVector3__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = 0;
 $4 = $0;
 $3 = HEAP32[$4 + 52 >> 2];
 $0 = HEAP32[$4 + 56 >> 2];
 $5 = $3;
 $3 = $1;
 HEAP32[$3 >> 2] = $5;
 HEAP32[$3 + 4 >> 2] = $0;
 $3 = HEAP32[$4 + 64 >> 2];
 $0 = HEAP32[$4 + 60 >> 2];
 $5 = $0;
 $0 = $1;
 HEAP32[$0 + 8 >> 2] = $5;
 HEAP32[$0 + 12 >> 2] = $3;
 $0 = HEAP32[$4 + 80 >> 2];
 $3 = HEAP32[$4 + 76 >> 2];
 $1 = $3;
 $3 = $2;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 12 >> 2] = $0;
 $3 = HEAP32[$4 + 72 >> 2];
 $0 = HEAP32[$4 + 68 >> 2];
 $1 = $0;
 $0 = $2;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $3;
}
function btAlignedObjectArray_btPersistentManifold____allocate_28int_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 8 >> 2];
 label$2 : {
  if (HEAP32[$2 + 4 >> 2]) {
   HEAP32[$2 + 12 >> 2] = btAlignedAllocator_btPersistentManifold__2c_2016u___allocate_28int_2c_20btPersistentManifold__20const___29($0, HEAP32[$2 + 4 >> 2], 0);
   break label$2;
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function btSphereTriangleCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = HEAP32[$1 >> 2];
 $4 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 56 >> 2]]($4, 20) | 0;
 btSphereTriangleCollisionAlgorithm__btSphereTriangleCollisionAlgorithm_28btPersistentManifold__2c_20btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($4, HEAP32[$1 + 4 >> 2], $1, $2, $3, HEAPU8[$0 + 4 | 0]);
 return $4 | 0;
}
function btMatrix3x3__btMatrix3x3_28btQuaternion_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $1 = HEAP32[$2 + 8 >> 2];
 HEAP32[$2 + 12 >> 2] = $1;
 $3 = $1 + 48 | 0;
 $0 = $1;
 while (1) {
  btVector3__btVector3_28_29($0);
  $0 = $0 + 16 | 0;
  if (($3 | 0) != ($0 | 0)) {
   continue;
  }
  break;
 }
 btMatrix3x3__setRotation_28btQuaternion_20const__29($1, HEAP32[$2 + 4 >> 2]);
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function btBvhTriangleMeshShape_btBvhTriangleMeshShape_3($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP8[$3 + 11 | 0] = $1;
 HEAP8[$3 + 10 | 0] = $2;
 $1 = btBvhTriangleMeshShape__operator_20new_28unsigned_20long_29(84);
 btBvhTriangleMeshShape__btBvhTriangleMeshShape_28btStridingMeshInterface__2c_20bool_2c_20bool_29($1, HEAP32[$3 + 12 >> 2], HEAP8[$3 + 11 | 0] & 1, HEAP8[$3 + 10 | 0] & 1);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function btVector3_btVector3_3($0, $1, $2) {
 $0 = Math_fround($0);
 $1 = Math_fround($1);
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 $6 = $3 + 12 | 0;
 $7 = $3 + 8 | 0;
 $4 = $3 + 4 | 0;
 HEAPF32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $5 = btVector3__operator_20new_28unsigned_20long_29(16);
 btVector3__btVector3_28float_20const__2c_20float_20const__2c_20float_20const__29($5, $6, $7, $4);
 $4 = $3 + 16 | 0;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 return $5 | 0;
}
function btSimulationIslandManager___btSimulationIslandManager_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 6080;
 $1 = HEAP32[$0 + 56 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 60 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 56 >> 2] = 0;
 }
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP8[$0 + 60 | 0] = 1;
 $1 = HEAP32[$0 + 36 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 40 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 36 >> 2] = 0;
 }
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP8[$0 + 40 | 0] = 1;
 btUnionFind___btUnionFind_28_29($0 + 4 | 0);
 return $0 | 0;
}
function btCompoundShape_setMaterial_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = Math_fround($3);
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAPF32[$4 + 4 >> 2] = $2;
 HEAPF32[$4 >> 2] = $3;
 btCompoundShape__setMaterial_28int_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAPF32[$4 + 4 >> 2], HEAPF32[$4 >> 2], Math_fround(0), Math_fround(0), 2);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody__applyTorqueImpulse_28btVector3_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 48 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = $2 + 24 | 0;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 $0 = $2 + 8 | 0;
 $1 = HEAP32[$2 + 44 >> 2];
 operator__28btMatrix3x3_20const__2c_20btVector3_20const__29($0, $1 + 324 | 0, HEAP32[$2 + 40 >> 2]);
 operator__28btVector3_20const__2c_20btVector3_20const__29_2($3, $0, $1 + 604 | 0);
 btVector3__operator___28btVector3_20const__29($1 + 388 | 0, $3);
 $0 = $2 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody__applyCentralImpulse_28btVector3_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 48 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 $3 = $2 + 24 | 0;
 HEAP32[$2 + 44 >> 2] = $0;
 HEAP32[$2 + 40 >> 2] = $1;
 $0 = $2 + 8 | 0;
 $1 = HEAP32[$2 + 44 >> 2];
 operator__28btVector3_20const__2c_20btVector3_20const__29_2($0, HEAP32[$2 + 40 >> 2], $1 + 408 | 0);
 operator__28btVector3_20const__2c_20float_20const__29($3, $0, $1 + 404 | 0);
 btVector3__operator___28btVector3_20const__29($1 + 372 | 0, $3);
 $0 = $2 + 48 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexInternalShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
 HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 32 >> 2];
 HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 36 >> 2];
 HEAP32[$1 + 36 >> 2] = HEAP32[$0 + 40 >> 2];
 HEAP32[$1 + 40 >> 2] = HEAP32[$0 + 44 >> 2];
 HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 16 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 20 >> 2];
 HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 24 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 28 >> 2];
 $0 = HEAP32[$0 + 48 >> 2];
 HEAP32[$1 + 48 >> 2] = 0;
 HEAP32[$1 + 44 >> 2] = $0;
 return 6745;
}
function btStaticPlaneShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
 HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 72 >> 2];
 HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 76 >> 2];
 HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 80 >> 2];
 HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 84 >> 2];
 HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 52 >> 2];
 HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 56 >> 2];
 HEAP32[$1 + 36 >> 2] = HEAP32[$0 + 60 >> 2];
 HEAP32[$1 + 40 >> 2] = HEAP32[$0 - -64 >> 2];
 $0 = HEAP32[$0 + 68 >> 2];
 HEAP32[$1 + 48 >> 2] = 0;
 HEAP32[$1 + 44 >> 2] = $0;
 return 12608;
}
function __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
  __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3, $4);
  return;
 }
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $3, $4, $5);
}
function btBoxShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0);
 $3 = HEAPF32[$1 + 36 >> 2];
 $4 = HEAPF32[$1 + 40 >> 2];
 $6 = HEAPF32[$2 + 4 >> 2];
 $7 = HEAPF32[$2 + 8 >> 2];
 $5 = HEAPF32[$1 + 32 >> 2];
 $8 = HEAPF32[$2 >> 2];
 HEAP32[$0 + 12 >> 2] = 0;
 HEAPF32[$0 >> 2] = $8 >= Math_fround(0) ? $5 : Math_fround(-$5);
 HEAPF32[$0 + 8 >> 2] = $7 >= Math_fround(0) ? $4 : Math_fround(-$4);
 HEAPF32[$0 + 4 >> 2] = $6 >= Math_fround(0) ? $3 : Math_fround(-$3);
}
function btHingeConstraint__getInfo1_28btTypedConstraint__btConstraintInfo1__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = Math_fround(0);
 if (HEAPU8[$0 + 738 | 0]) {
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return;
 }
 HEAP32[$1 >> 2] = 5;
 HEAP32[$1 + 4 >> 2] = 1;
 $2 = btHingeConstraint__getHingeAngle_28btTransform_20const__2c_20btTransform_20const__29($0, HEAP32[$0 + 28 >> 2] + 4 | 0, HEAP32[$0 + 32 >> 2] + 4 | 0);
 HEAPF32[$0 + 728 >> 2] = $2;
 btAngularLimit__test_28float_29($0 + 688 | 0, $2);
 if (!(HEAPU8[$0 + 737 | 0] ? 0 : !HEAPU8[$0 + 716 | 0])) {
  HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + 1;
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + -1;
 }
}
function ccDiscreteDynamicsWorld_ccDiscreteDynamicsWorld_4($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $1 = ccDiscreteDynamicsWorld__operator_20new_28unsigned_20long_29(368);
 FUNCTION_TABLE[2]($1, HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]) | 0;
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function btAlignedObjectArray_btCollisionObject_20const____clear_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 btAlignedObjectArray_btCollisionObject_20const____destroy_28int_2c_20int_29($0, 0, btAlignedObjectArray_btCollisionObject_20const____size_28_29_20const($0));
 btAlignedObjectArray_btCollisionObject_20const____deallocate_28_29($0);
 btAlignedObjectArray_btCollisionObject_20const____init_28_29($0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function scalbn($0, $1) {
 label$1 : {
  if (($1 | 0) >= 1024) {
   $0 = $0 * 8.98846567431158e+307;
   if (($1 | 0) < 2047) {
    $1 = $1 + -1023 | 0;
    break label$1;
   }
   $0 = $0 * 8.98846567431158e+307;
   $1 = (($1 | 0) < 3069 ? $1 : 3069) + -2046 | 0;
   break label$1;
  }
  if (($1 | 0) > -1023) {
   break label$1;
  }
  $0 = $0 * 2.2250738585072014e-308;
  if (($1 | 0) > -2045) {
   $1 = $1 + 1022 | 0;
   break label$1;
  }
  $0 = $0 * 2.2250738585072014e-308;
  $1 = (($1 | 0) > -3066 ? $1 : -3066) + 2044 | 0;
 }
 $1 = $1 + 1023 << 20;
 wasm2js_scratch_store_i32(0, 0);
 wasm2js_scratch_store_i32(1, $1 | 0);
 return $0 * +wasm2js_scratch_load_f64();
}
function btTransform_inverse_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 80 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 76 >> 2] = $0;
 label$2 : {
  if (HEAP8[20032] & 1) {
   break label$2;
  }
  if (!__cxa_guard_acquire(20032)) {
   break label$2;
  }
  btTransform__btTransform_28_29(19968);
  __cxa_guard_release(20032);
 }
 $0 = $1 + 8 | 0;
 btTransform__inverse_28_29_20const($0, HEAP32[$1 + 76 >> 2]);
 btTransform__operator__28btTransform_20const__29(19968, $0);
 $0 = $1 + 80 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return 19968;
}
function btHashedOverlappingPairCache__addOverlappingPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 HEAP32[5679] = HEAP32[5679] + 1;
 $3 = HEAP32[$0 + 24 >> 2];
 label$1 : {
  label$2 : {
   if ($3) {
    if (FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $1, $2)) {
     break label$2;
    }
    break label$1;
   }
   if (!(HEAP32[$2 + 8 >> 2] & HEAP32[$1 + 4 >> 2]) | !(HEAP32[$1 + 8 >> 2] & HEAP32[$2 + 4 >> 2])) {
    break label$1;
   }
  }
  $4 = btHashedOverlappingPairCache__internalAddPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__29($0, $1, $2);
 }
 return $4 | 0;
}
function btConvexInternalShape__setSafeMargin_28float_2c_20float_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAPF32[$3 >> 2] = HEAPF32[$3 + 4 >> 2] * HEAPF32[$3 + 8 >> 2];
 if (HEAPF32[$3 >> 2] < Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0))) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, HEAPF32[$3 >> 2]);
 }
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTransform__operator___28btTransform_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $0 = $2 + 8 | 0;
 $1 = HEAP32[$2 + 28 >> 2];
 operator__28btMatrix3x3_20const__2c_20btVector3_20const__29($0, $1, HEAP32[$2 + 24 >> 2] + 48 | 0);
 btVector3__operator___28btVector3_20const__29($1 + 48 | 0, $0);
 btMatrix3x3__operator___28btMatrix3x3_20const__29($1, HEAP32[$2 + 24 >> 2]);
 $0 = $2 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function btPersistentManifold__addManifoldPoint_28btManifoldPoint_20const__2c_20bool_29($0, $1, $2) {
 var $3 = 0, $4 = 0, $5 = 0;
 $2 = HEAP32[$0 + 844 >> 2];
 label$1 : {
  if (($2 | 0) == 4) {
   $2 = btPersistentManifold__sortCachedPoints_28btManifoldPoint_20const__29($0, $1);
   $3 = Math_imul($2, 208) + $0 | 0;
   $4 = HEAP32[$3 + 120 >> 2];
   if (!$4) {
    break label$1;
   }
   $5 = HEAP32[5383];
   if (!$5) {
    break label$1;
   }
   FUNCTION_TABLE[$5]($4) | 0;
   HEAP32[$3 + 120 >> 2] = 0;
   break label$1;
  }
  HEAP32[$0 + 844 >> 2] = $2 + 1;
 }
 $2 = ($2 | 0) > 0 ? $2 : 0;
 memcpy((Math_imul($2, 208) + $0 | 0) + 4 | 0, $1, 208);
 return $2;
}
function btDiscreteDynamicsWorld__removeAction_28btActionInterface__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 label$1 : {
  $2 = HEAP32[$0 + 296 >> 2];
  if (($2 | 0) < 1) {
   break label$1;
  }
  $4 = HEAP32[$0 + 304 >> 2];
  while (1) {
   $5 = ($3 << 2) + $4 | 0;
   if (HEAP32[$5 >> 2] != ($1 | 0)) {
    $3 = $3 + 1 | 0;
    if (($2 | 0) != ($3 | 0)) {
     continue;
    }
    break label$1;
   }
   break;
  }
  if (($2 | 0) <= ($3 | 0)) {
   break label$1;
  }
  $3 = $2 + -1 | 0;
  $2 = $3 << 2;
  HEAP32[$5 >> 2] = HEAP32[$4 + $2 >> 2];
  HEAP32[HEAP32[$0 + 304 >> 2] + $2 >> 2] = $1;
  HEAP32[$0 + 296 >> 2] = $3;
 }
}
function btAlignedObjectArray_btVector3___allocate_28int_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 8 >> 2];
 label$2 : {
  if (HEAP32[$2 + 4 >> 2]) {
   HEAP32[$2 + 12 >> 2] = btAlignedAllocator_btVector3_2c_2016u___allocate_28int_2c_20btVector3_20const___29($0, HEAP32[$2 + 4 >> 2], 0);
   break label$2;
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function ccDiscreteDynamicsWorld_stepSimulation_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 $3 = Math_fround($3);
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAPF32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAPF32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, HEAPF32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAPF32[$4 >> 2]) | 0;
 $2 = $4 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btDiscreteDynamicsWorld_stepSimulation_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 $3 = Math_fround($3);
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAPF32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAPF32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, HEAPF32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAPF32[$4 >> 2]) | 0;
 $2 = $4 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btAngularLimit__set_28float_2c_20float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5) {
 $2 = Math_fround(Math_fround($2 - $1) * Math_fround(.5));
 HEAPF32[$0 + 4 >> 2] = $2;
 $1 = fmodf(Math_fround($2 + $1), Math_fround(6.2831854820251465));
 label$1 : {
  if (!!($1 < Math_fround(-3.1415927410125732))) {
   $1 = Math_fround($1 + Math_fround(6.2831854820251465));
   break label$1;
  }
  if (!($1 > Math_fround(3.1415927410125732))) {
   break label$1;
  }
  $1 = Math_fround($1 + Math_fround(-6.2831854820251465));
 }
 HEAPF32[$0 + 16 >> 2] = $5;
 HEAPF32[$0 + 12 >> 2] = $4;
 HEAPF32[$0 + 8 >> 2] = $3;
 HEAPF32[$0 >> 2] = $1;
}
function btTriangleMesh_addTriangle_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 btTriangleMesh__addTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20bool_29(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2], 0);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_float___allocate_28int_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 8 >> 2];
 label$2 : {
  if (HEAP32[$2 + 4 >> 2]) {
   HEAP32[$2 + 12 >> 2] = btAlignedAllocator_float_2c_2016u___allocate_28int_2c_20float_20const___29($0, HEAP32[$2 + 4 >> 2], 0);
   break label$2;
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function btBvhTriangleMeshShape__performRaycast_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 $5 = HEAP32[$0 + 52 >> 2];
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $5;
 HEAP32[$4 >> 2] = 11688;
 btQuantizedBvh__reportRayOverlappingNodex_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const(HEAP32[$0 + 56 >> 2], $4, $2, $3);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_btCollisionObject_20const____copy_28int_2c_20int_2c_20btCollisionObject_20const___29_20const($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 $0 = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 24 >> 2];
 while (1) {
  if (HEAP32[$4 + 12 >> 2] < HEAP32[$4 + 20 >> 2]) {
   HEAP32[HEAP32[$4 + 16 >> 2] + (HEAP32[$4 + 12 >> 2] << 2) >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] + (HEAP32[$4 + 12 >> 2] << 2) >> 2];
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
}
function btDiscreteDynamicsWorld__applyGravity_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
 $1 = HEAP32[$0 + 248 >> 2];
 if (($1 | 0) >= 1) {
  while (1) {
   label$3 : {
    label$4 : {
     $3 = HEAP32[HEAP32[$0 + 256 >> 2] + ($2 << 2) >> 2];
     $4 = HEAP32[$3 + 220 >> 2] + -2 | 0;
     if ($4 >>> 0 > 3) {
      break label$4;
     }
     switch ($4 - 1 | 0) {
     case 0:
     case 1:
      break label$4;
     default:
      break label$3;
     }
    }
    btRigidBody__applyGravity_28_29($3);
    $1 = HEAP32[$0 + 248 >> 2];
   }
   $2 = $2 + 1 | 0;
   if (($2 | 0) < ($1 | 0)) {
    continue;
   }
   break;
  }
 }
}
function btAlignedObjectArray_int___allocate_28int_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $1;
 $0 = HEAP32[$2 + 8 >> 2];
 label$2 : {
  if (HEAP32[$2 + 4 >> 2]) {
   HEAP32[$2 + 12 >> 2] = btAlignedAllocator_int_2c_2016u___allocate_28int_2c_20int_20const___29($0, HEAP32[$2 + 4 >> 2], 0);
   break label$2;
  }
  HEAP32[$2 + 12 >> 2] = 0;
 }
 $0 = HEAP32[$2 + 12 >> 2];
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function btHingeConstraint_enableAngularMotor_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = Math_fround($3);
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP8[$4 + 11 | 0] = $1;
 HEAPF32[$4 + 4 >> 2] = $2;
 HEAPF32[$4 >> 2] = $3;
 btHingeConstraint__enableAngularMotor_28bool_2c_20float_2c_20float_29(HEAP32[$4 + 12 >> 2], HEAP8[$4 + 11 | 0] & 1, HEAPF32[$4 + 4 >> 2], HEAPF32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundShape_updateChildTransform_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP8[$4 + 3 | 0] = $3;
 btCompoundShape__updateChildTransform_28int_2c_20btTransform_20const__2c_20bool_29(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP8[$4 + 3 | 0] & 1);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuaternion__inverse_28_29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 HEAPF32[$2 + 8 >> 2] = -HEAPF32[$1 >> 2];
 HEAPF32[$2 + 4 >> 2] = -HEAPF32[$1 + 4 >> 2];
 HEAPF32[$2 >> 2] = -HEAPF32[$1 + 8 >> 2];
 btQuaternion__btQuaternion_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($0, $2 + 8 | 0, $2 + 4 | 0, $2, $1 + 12 | 0);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_btPersistentManifold____copy_28int_2c_20int_2c_20btPersistentManifold___29_20const($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 $0 = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 24 >> 2];
 while (1) {
  if (HEAP32[$4 + 12 >> 2] < HEAP32[$4 + 20 >> 2]) {
   HEAP32[HEAP32[$4 + 16 >> 2] + (HEAP32[$4 + 12 >> 2] << 2) >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] + (HEAP32[$4 + 12 >> 2] << 2) >> 2];
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
}
function btHingeConstraint__setMotorTarget_28float_2c_20float_29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAPF32[$3 + 12 >> 2] = $1;
 btAngularLimit__fit_28float__29_20const($0 + 688 | 0, $3 + 12 | 0);
 HEAPF32[$0 + 680 >> 2] = Math_fround(HEAPF32[$3 + 12 >> 2] - btHingeConstraint__getHingeAngle_28btTransform_20const__2c_20btTransform_20const__29($0, HEAP32[$0 + 28 >> 2] + 4 | 0, HEAP32[$0 + 32 >> 2] + 4 | 0)) / $2;
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_btTypedConstraint____clear_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 btAlignedObjectArray_btTypedConstraint____destroy_28int_2c_20int_29($0, 0, btAlignedObjectArray_btTypedConstraint____size_28_29_20const($0));
 btAlignedObjectArray_btTypedConstraint____deallocate_28_29($0);
 btAlignedObjectArray_btTypedConstraint____init_28_29($0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexTriangleMeshShape_btConvexTriangleMeshShape_2($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 $1 = btConvexTriangleMeshShape__operator_20new_28unsigned_20long_29(104);
 btConvexTriangleMeshShape__btConvexTriangleMeshShape_28btStridingMeshInterface__2c_20bool_29($1, HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function btAlignedObjectArray_btCollisionObject_20const____operator__28btAlignedObjectArray_btCollisionObject_20const___20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 btAlignedObjectArray_btCollisionObject_20const____copyFromArray_28btAlignedObjectArray_btCollisionObject_20const___20const__29($1, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function btSphereSphereCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $0 = HEAP32[$1 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 16) | 0;
 btSphereSphereCollisionAlgorithm__btSphereSphereCollisionAlgorithm_28btPersistentManifold__2c_20btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, 0, $1, $2, $3);
 return $0 | 0;
}
function btBvhTriangleMeshShape_btBvhTriangleMeshShape_2($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 $1 = btBvhTriangleMeshShape__operator_20new_28unsigned_20long_29(84);
 btBvhTriangleMeshShape__btBvhTriangleMeshShape_28btStridingMeshInterface__2c_20bool_2c_20bool_29($1, HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1, 1);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function ccDiscreteDynamicsWorld___ccDiscreteDynamicsWorld_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $2 = global$0 - 16 | 0;
 $1 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 HEAP32[$2 + 12 >> 2] = $0;
 $1 = HEAP32[$2 + 12 >> 2];
 HEAP32[$1 >> 2] = 1032;
 btAlignedObjectArray_int____btAlignedObjectArray_28_29($1 + 348 | 0);
 ccOverlapFilterCallback___ccOverlapFilterCallback_28_29($1 + 344 | 0);
 btDiscreteDynamicsWorld___btDiscreteDynamicsWorld_28_29($1);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function btCompoundCompoundCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $0 = HEAP32[$1 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 116) | 0;
 btCompoundCompoundCollisionAlgorithm__btCompoundCompoundCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, 0);
 return $0 | 0;
}
function AllHitsRayResultCallback_AllHitsRayResultCallback_2($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = operator_20new_28unsigned_20long_29(132);
 btCollisionWorld__AllHitsRayResultCallback__AllHitsRayResultCallback_28btVector3_20const__2c_20btVector3_20const__29($1, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function operator__28btVector3_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $1;
 HEAPF32[$2 + 8 >> 2] = -HEAPF32[HEAP32[$2 + 12 >> 2] >> 2];
 HEAPF32[$2 + 4 >> 2] = -HEAPF32[HEAP32[$2 + 12 >> 2] + 4 >> 2];
 HEAPF32[$2 >> 2] = -HEAPF32[HEAP32[$2 + 12 >> 2] + 8 >> 2];
 btVector3__btVector3_28float_20const__2c_20float_20const__2c_20float_20const__29($0, $2 + 8 | 0, $2 + 4 | 0, $2);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld_stepSimulation_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], Math_fround(.01666666753590107)) | 0;
 $2 = $3 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btDiscreteDynamicsWorld_stepSimulation_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], Math_fround(.01666666753590107)) | 0;
 $2 = $3 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function ClosestRayResultCallback_ClosestRayResultCallback_2($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = operator_20new_28unsigned_20long_29(84);
 btCollisionWorld__ClosestRayResultCallback__ClosestRayResultCallback_28btVector3_20const__2c_20btVector3_20const__29($1, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function btPoint2PointConstraint_btPoint2PointConstraint_2($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = btPoint2PointConstraint__operator_20new_28unsigned_20long_29(360);
 btPoint2PointConstraint__btPoint2PointConstraint_28btRigidBody__2c_20btVector3_20const__29($1, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function btCylinderShape_updateProp_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = Math_fround($2);
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAPF32[$4 + 8 >> 2] = $1;
 HEAPF32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 btCylinderShape__updateProp_28float_2c_20float_2c_20int_29(HEAP32[$4 + 12 >> 2], HEAPF32[$4 + 8 >> 2], HEAPF32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexConcaveCollisionAlgorithm__SwappedCreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $0 = HEAP32[$1 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 80) | 0;
 btConvexConcaveCollisionAlgorithm__btConvexConcaveCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, 1);
 return $0 | 0;
}
function btDefaultMotionState__setWorldTransform_28btTransform_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 80 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 76 >> 2] = $0;
 HEAP32[$2 + 72 >> 2] = $1;
 $1 = $2 + 8 | 0;
 $0 = HEAP32[$2 + 76 >> 2];
 btTransform__operator__28btTransform_20const__29_20const($1, HEAP32[$2 + 72 >> 2], $0 + 68 | 0);
 btTransform__operator__28btTransform_20const__29($0 + 4 | 0, $1);
 $0 = $2 + 80 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCapsuleShape_updateProp_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = Math_fround($2);
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAPF32[$4 + 8 >> 2] = $1;
 HEAPF32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 btCapsuleShape__updateProp_28float_2c_20float_2c_20int_29(HEAP32[$4 + 12 >> 2], HEAPF32[$4 + 8 >> 2], HEAPF32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btPoint2PointConstraint_setParam_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAPF32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAPF32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld_addCollisionObject_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDiscreteDynamicsWorld_addCollisionObject_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDefaultMotionState_btDefaultMotionState_2($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = btDefaultMotionState__operator_20new_28unsigned_20long_29(200);
 btDefaultMotionState__btDefaultMotionState_28btTransform_20const__2c_20btTransform_20const__29($1, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0() {
 var $0 = 0, $1 = 0, $2 = 0;
 $1 = global$0 - 32 | 0;
 $0 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 $0 = $1 + 8 | 0;
 $2 = operator_20new_28unsigned_20long_29(88);
 btDefaultCollisionConstructionInfo__btDefaultCollisionConstructionInfo_28_29($0);
 btDefaultCollisionConfiguration__btDefaultCollisionConfiguration_28btDefaultCollisionConstructionInfo_20const__29($2, $0);
 $0 = $1 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function ccAllHitsRayResultCallback_ccAllHitsRayResultCallback_2($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = operator_20new_28unsigned_20long_29(156);
 ccAllHitsRayResultCallback__ccAllHitsRayResultCallback_28btVector3_20const__2c_20btVector3_20const__29($1, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function btConvexConcaveCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $0 = HEAP32[$1 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 80) | 0;
 btConvexConcaveCollisionAlgorithm__btConvexConcaveCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, 0);
 return $0 | 0;
}
function ccClosestRayResultCallback_ccClosestRayResultCallback_2($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = operator_20new_28unsigned_20long_29(92);
 ccClosestRayResultCallback__ccClosestRayResultCallback_28btVector3_20const__2c_20btVector3_20const__29($1, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function btPoint2PointConstraint_getParam_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = Math_fround(0);
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 $5 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]));
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($5);
}
function btVector3_setValue_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = Math_fround($2);
 $3 = Math_fround($3);
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAPF32[$4 + 8 >> 2] = $1;
 HEAPF32[$4 + 4 >> 2] = $2;
 HEAPF32[$4 >> 2] = $3;
 btVector3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__29(HEAP32[$4 + 12 >> 2], $4 + 8 | 0, $4 + 4 | 0, $4);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTypedConstraint_setParam_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAPF32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAPF32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHingeConstraint_setParam_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAPF32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAPF32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btFixedConstraint_setParam_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAPF32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAPF32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld_addRigidBody_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 88 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btPoint2PointConstraint__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 btTypedConstraint__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
 HEAP32[$1 + 52 >> 2] = HEAP32[$0 + 300 >> 2];
 HEAP32[$1 + 56 >> 2] = HEAP32[$0 + 304 >> 2];
 HEAP32[$1 + 60 >> 2] = HEAP32[$0 + 308 >> 2];
 HEAP32[$1 + 64 >> 2] = HEAP32[$0 + 312 >> 2];
 HEAP32[$1 + 68 >> 2] = HEAP32[$0 + 316 >> 2];
 HEAP32[$1 + 72 >> 2] = HEAP32[$0 + 320 >> 2];
 HEAP32[$1 + 76 >> 2] = HEAP32[$0 + 324 >> 2];
 HEAP32[$1 + 80 >> 2] = HEAP32[$0 + 328 >> 2];
 return 3456;
}
function btDiscreteDynamicsWorld_addRigidBody_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 88 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBoxBoxCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $0 = HEAP32[$1 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 16) | 0;
 btBoxBoxCollisionAlgorithm__btBoxBoxCollisionAlgorithm_28btPersistentManifold__2c_20btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, 0, $1, $2, $3);
 return $0 | 0;
}
function btTriangleMesh_addTriangleIndices_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 btTriangleMesh__addTriangleIndices_28int_2c_20int_2c_20int_29(HEAP32[$4 + 12 >> 2], HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionWorld_addCollisionObject_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDynamicsWorld_addCollisionObject_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTransform__setIdentity_28_29($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $3 = $1 + 8 | 0;
 $2 = $1 + 4 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 btMatrix3x3__setIdentity_28_29($0);
 HEAPF32[$1 + 8 >> 2] = 0;
 HEAPF32[$1 + 4 >> 2] = 0;
 HEAPF32[$1 >> 2] = 0;
 btVector3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__29($0 + 48 | 0, $3, $2, $1);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_float___copy_28int_2c_20int_2c_20float__29_20const($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 $0 = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 24 >> 2];
 while (1) {
  if (HEAP32[$4 + 12 >> 2] < HEAP32[$4 + 20 >> 2]) {
   HEAPF32[HEAP32[$4 + 16 >> 2] + (HEAP32[$4 + 12 >> 2] << 2) >> 2] = HEAPF32[HEAP32[$0 + 12 >> 2] + (HEAP32[$4 + 12 >> 2] << 2) >> 2];
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
}
function btAlignedObjectArray_btIndexedMesh___clear_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 btAlignedObjectArray_btIndexedMesh___destroy_28int_2c_20int_29($0, 0, btAlignedObjectArray_btIndexedMesh___size_28_29_20const($0));
 btAlignedObjectArray_btIndexedMesh___deallocate_28_29($0);
 btAlignedObjectArray_btIndexedMesh___init_28_29($0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTypedConstraint_getParam_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = Math_fround(0);
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 $5 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]));
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($5);
}
function btHingeConstraint_getParam_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = Math_fround(0);
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 $5 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]));
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($5);
}
function btHeightfieldTerrainShape_getAabb_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btFixedConstraint_getParam_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0, $5 = Math_fround(0);
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 $5 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]));
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($5);
}
function btConvexTriangleMeshShape_getAabb_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundCollisionAlgorithm__SwappedCreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $0 = HEAP32[$1 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 84) | 0;
 btCompoundCollisionAlgorithm__btCompoundCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, 1);
 return $0 | 0;
}
function ccDiscreteDynamicsWorld_rayTest_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDiscreteDynamicsWorld_rayTest_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_btCollisionObject_20const____deallocate_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if (HEAP32[$0 + 12 >> 2]) {
  if (HEAP8[$0 + 16 | 0] & 1) {
   btAlignedAllocator_btCollisionObject_20const__2c_2016u___deallocate_28btCollisionObject_20const___29($0, HEAP32[$0 + 12 >> 2]);
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBvhTriangleMeshShape_getAabb_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexInternalShape_getAabb_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_int___copy_28int_2c_20int_2c_20int__29_20const($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 32 | 0;
 HEAP32[$4 + 28 >> 2] = $0;
 HEAP32[$4 + 24 >> 2] = $1;
 HEAP32[$4 + 20 >> 2] = $2;
 HEAP32[$4 + 16 >> 2] = $3;
 $0 = HEAP32[$4 + 28 >> 2];
 HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 24 >> 2];
 while (1) {
  if (HEAP32[$4 + 12 >> 2] < HEAP32[$4 + 20 >> 2]) {
   HEAP32[HEAP32[$4 + 16 >> 2] + (HEAP32[$4 + 12 >> 2] << 2) >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] + (HEAP32[$4 + 12 >> 2] << 2) >> 2];
   HEAP32[$4 + 12 >> 2] = HEAP32[$4 + 12 >> 2] + 1;
   continue;
  }
  break;
 }
}
function btTriangleMeshShape_getAabb_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btStaticPlaneShape_getAabb_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btStaticPlaneShape_btStaticPlaneShape_2($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $3 = btStaticPlaneShape__operator_20new_28unsigned_20long_29(92);
 btStaticPlaneShape__btStaticPlaneShape_28btVector3_20const__2c_20float_29($3, HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $3 | 0;
}
function btCompoundCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $0 = HEAP32[$1 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 84) | 0;
 btCompoundCollisionAlgorithm__btCompoundCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, 0);
 return $0 | 0;
}
function btCollisionWorld_rayTest_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDynamicsWorld_rayTest_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionShape_getAabb_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBU_Simplex1to4_getAabb_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCylinderShape_getAabb_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundShape_getAabb_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConcaveShape_getAabb_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCapsuleShape_getAabb_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSphereShape_getAabb_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexShape_getAabb_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionDispatcher__dispatchAllCollisionPairs_28btOverlappingPairCache__2c_20btDispatcherInfo_20const__2c_20btDispatcher__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 8 >> 2] = $0;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = 4180;
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1, $4, $3);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btEmptyShape_getAabb_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConeShape_getAabb_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBoxShape_getAabb_3($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = global$0 - 16 | 0;
 $5 = $4;
 if ($4 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $5;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
 $0 = $4 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuadWord__btQuadWord_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 32 | 0;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $0 = HEAP32[$5 + 28 >> 2];
 HEAPF32[$0 >> 2] = HEAPF32[HEAP32[$5 + 24 >> 2] >> 2];
 HEAPF32[$0 + 4 >> 2] = HEAPF32[HEAP32[$5 + 20 >> 2] >> 2];
 HEAPF32[$0 + 8 >> 2] = HEAPF32[HEAP32[$5 + 16 >> 2] >> 2];
 HEAPF32[$0 + 12 >> 2] = HEAPF32[HEAP32[$5 + 12 >> 2] >> 2];
 return $0;
}
function btAlignedObjectArray_btPersistentManifold____deallocate_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if (HEAP32[$0 + 12 >> 2]) {
  if (HEAP8[$0 + 16 | 0] & 1) {
   btAlignedAllocator_btPersistentManifold__2c_2016u___deallocate_28btPersistentManifold___29($0, HEAP32[$0 + 12 >> 2]);
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_btVector3___clear_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 btAlignedObjectArray_btVector3___destroy_28int_2c_20int_29($0, 0, btAlignedObjectArray_btVector3___size_28_29_20const($0));
 btAlignedObjectArray_btVector3___deallocate_28_29($0);
 btAlignedObjectArray_btVector3___init_28_29($0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCapsuleShape_btCapsuleShape_2($0, $1) {
 $0 = Math_fround($0);
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAPF32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $4 = btCapsuleShape__operator_20new_28unsigned_20long_29(64);
 btCapsuleShape__btCapsuleShape_28float_2c_20float_29($4, HEAPF32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $3 = $2 + 16 | 0;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 return $4 | 0;
}
function btRigidBody__applyCentralForce_28btVector3_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $1 = $2 + 8 | 0;
 $0 = HEAP32[$2 + 28 >> 2];
 operator__28btVector3_20const__2c_20btVector3_20const__29_2($1, HEAP32[$2 + 24 >> 2], $0 + 408 | 0);
 btVector3__operator___28btVector3_20const__29($0 + 472 | 0, $1);
 $0 = $2 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDefaultMotionState_btDefaultMotionState_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = btDefaultMotionState__operator_20new_28unsigned_20long_29(200);
 btDefaultMotionState__btDefaultMotionState_28btTransform_20const__2c_20btTransform_20const__29($2, HEAP32[$1 + 12 >> 2], btTransform__getIdentity_28_29());
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function btCollisionObject_setIgnoreCollisionCheck_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 btCollisionObject__setIgnoreCollisionCheck_28btCollisionObject_20const__2c_20bool_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccAllHitsRayResultCallback___ccAllHitsRayResultCallback_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $2 = global$0 - 16 | 0;
 $1 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 HEAP32[$2 + 12 >> 2] = $0;
 $1 = HEAP32[$2 + 12 >> 2];
 HEAP32[$1 >> 2] = 2008;
 btAlignedObjectArray_int____btAlignedObjectArray_28_29($1 + 132 | 0);
 btCollisionWorld__AllHitsRayResultCallback___AllHitsRayResultCallback_28_29($1);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function btAlignedObjectArray_btTypedConstraint____deallocate_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if (HEAP32[$0 + 12 >> 2]) {
  if (HEAP8[$0 + 16 | 0] & 1) {
   btAlignedAllocator_btTypedConstraint__2c_2016u___deallocate_28btTypedConstraint___29($0, HEAP32[$0 + 12 >> 2]);
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTriangleMesh__addTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20bool_29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = HEAP32[$0 + 32 >> 2];
 HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
 btTriangleMesh__addIndex_28int_29($0, btTriangleMesh__findOrAddVertex_28btVector3_20const__2c_20bool_29($0, $1, $4));
 btTriangleMesh__addIndex_28int_29($0, btTriangleMesh__findOrAddVertex_28btVector3_20const__2c_20bool_29($0, $2, $4));
 btTriangleMesh__addIndex_28int_29($0, btTriangleMesh__findOrAddVertex_28btVector3_20const__2c_20bool_29($0, $3, $4));
}
function btRigidBody__applyTorque_28btVector3_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 32 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 28 >> 2] = $0;
 HEAP32[$2 + 24 >> 2] = $1;
 $1 = $2 + 8 | 0;
 $0 = HEAP32[$2 + 28 >> 2];
 operator__28btVector3_20const__2c_20btVector3_20const__29_2($1, HEAP32[$2 + 24 >> 2], $0 + 604 | 0);
 btVector3__operator___28btVector3_20const__29($0 + 488 | 0, $1);
 $0 = $2 + 32 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundShape_updateChildTransform_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 btCompoundShape__updateChildTransform_28int_2c_20btTransform_20const__2c_20bool_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], 1);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_setIgnoreCollisionCheck_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 btCollisionObject__setIgnoreCollisionCheck_28btCollisionObject_20const__2c_20bool_29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuadWord__setValue_28float_20const__2c_20float_20const__2c_20float_20const__2c_20float_20const__29($0, $1, $2, $3, $4) {
 var $5 = 0;
 $5 = global$0 - 32 | 0;
 HEAP32[$5 + 28 >> 2] = $0;
 HEAP32[$5 + 24 >> 2] = $1;
 HEAP32[$5 + 20 >> 2] = $2;
 HEAP32[$5 + 16 >> 2] = $3;
 HEAP32[$5 + 12 >> 2] = $4;
 $0 = HEAP32[$5 + 28 >> 2];
 HEAPF32[$0 >> 2] = HEAPF32[HEAP32[$5 + 24 >> 2] >> 2];
 HEAPF32[$0 + 4 >> 2] = HEAPF32[HEAP32[$5 + 20 >> 2] >> 2];
 HEAPF32[$0 + 8 >> 2] = HEAPF32[HEAP32[$5 + 16 >> 2] >> 2];
 HEAPF32[$0 + 12 >> 2] = HEAPF32[HEAP32[$5 + 12 >> 2] >> 2];
}
function btHeightfieldTerrainShape_calculateLocalInertia_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexTriangleMeshShape_calculateLocalInertia_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
  __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $1, $2, $3);
  return;
 }
 $0 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1, $2, $3);
}
function ccAllHitsRayResultCallback_set_m_collisionObjects_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btAlignedObjectArray_btCollisionObject_20const____operator__28btAlignedObjectArray_btCollisionObject_20const___20const__29(HEAP32[$2 + 12 >> 2] + 20 | 0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBvhTriangleMeshShape_calculateLocalInertia_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHashedOverlappingPairCache__cleanProxyFromPairs_28btBroadphaseProxy__2c_20btDispatcher__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $2;
 HEAP32[$3 + 8 >> 2] = $0;
 HEAP32[$3 + 4 >> 2] = $1;
 HEAP32[$3 >> 2] = 15628;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $3, $2);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexInternalShape_calculateLocalInertia_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConeShape_btConeShape_2($0, $1) {
 $0 = Math_fround($0);
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAPF32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $4 = btConeShape__operator_20new_28unsigned_20long_29(84);
 btConeShape__btConeShape_28float_2c_20float_29($4, HEAPF32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $3 = $2 + 16 | 0;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 return $4 | 0;
}
function AllHitsRayResultCallback_set_m_collisionObjects_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btAlignedObjectArray_btCollisionObject_20const____operator__28btAlignedObjectArray_btCollisionObject_20const___20const__29(HEAP32[$2 + 12 >> 2] + 20 | 0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTriangleMesh_btTriangleMesh_2($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP8[$2 + 15 | 0] = $0;
 HEAP8[$2 + 14 | 0] = $1;
 $1 = btTriangleIndexVertexArray__operator_20new_28unsigned_20long_29(172);
 btTriangleMesh__btTriangleMesh_28bool_2c_20bool_29($1, HEAP8[$2 + 15 | 0] & 1, HEAP8[$2 + 14 | 0] & 1);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function btTriangleMeshShape_calculateLocalInertia_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_setSleepingThresholds_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 btRigidBody__setSleepingThresholds_28float_2c_20float_29(HEAP32[$3 + 12 >> 2], HEAPF32[$3 + 8 >> 2], HEAPF32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = operator_20new_28unsigned_20long_29(88);
 btDefaultCollisionConfiguration__btDefaultCollisionConfiguration_28btDefaultCollisionConstructionInfo_20const__29($2, HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function btStaticPlaneShape_calculateLocalInertia_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btPoint2PointConstraint__setParam_28int_2c_20float_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = $3 | 0;
 label$1 : {
  if (($3 | 0) != -1) {
   break label$1;
  }
  $3 = $1 + -1 | 0;
  if ($3 >>> 0 > 3) {
   break label$1;
  }
  label$2 : {
   switch ($3 - 2 | 0) {
   default:
    HEAPF32[$0 + 336 >> 2] = $2;
    HEAP32[$0 + 332 >> 2] = HEAP32[$0 + 332 >> 2] | 1;
    return;
   case 0:
   case 1:
    break label$2;
   }
  }
  HEAPF32[$0 + 340 >> 2] = $2;
  HEAP32[$0 + 332 >> 2] = HEAP32[$0 + 332 >> 2] | 2;
 }
}
function btAlignedObjectArray_float___clear_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 btAlignedObjectArray_float___destroy_28int_2c_20int_29($0, 0, btAlignedObjectArray_float___size_28_29_20const($0));
 btAlignedObjectArray_float___deallocate_28_29($0);
 btAlignedObjectArray_float___init_28_29($0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHingeConstraint_setMotorTarget_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 btHingeConstraint__setMotorTarget_28float_2c_20float_29(HEAP32[$3 + 12 >> 2], HEAPF32[$3 + 8 >> 2], HEAPF32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexTriangleMeshShape_btConvexTriangleMeshShape_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = btConvexTriangleMeshShape__operator_20new_28unsigned_20long_29(104);
 btConvexTriangleMeshShape__btConvexTriangleMeshShape_28btStridingMeshInterface__2c_20bool_29($2, HEAP32[$1 + 12 >> 2], 1);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function btAlignedObjectArray_btIndexedMesh___deallocate_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if (HEAP32[$0 + 12 >> 2]) {
  if (HEAP8[$0 + 16 | 0] & 1) {
   btAlignedAllocator_btIndexedMesh_2c_2016u___deallocate_28btIndexedMesh__29($0, HEAP32[$0 + 12 >> 2]);
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundShape_addChildShape_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 btCompoundShape__addChildShape_28btTransform_20const__2c_20btCollisionShape__29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionShape_calculateLocalInertia_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBU_Simplex1to4_calculateLocalInertia_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], $5)) {
  __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $1, $2, $3, $4);
 }
}
function btHingeConstraint_setFrames_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 btHingeConstraint__setFrames_28btTransform_20const__2c_20btTransform_20const__29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCylinderShape_calculateLocalInertia_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundShape_calculateLocalInertia_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedAllocator_btCollisionObject_20const__2c_2016u___allocate_28int_2c_20btCollisionObject_20const__20const___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$3 + 8 >> 2] << 2, 16);
 $1 = $3 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function btConcaveShape_calculateLocalInertia_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundShape__removeChildShape_28btCollisionShape__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 HEAP32[$0 + 72 >> 2] = HEAP32[$0 + 72 >> 2] + 1;
 $2 = HEAP32[$0 + 20 >> 2];
 if (($2 | 0) >= 1) {
  while (1) {
   $3 = $2 + -1 | 0;
   if (HEAP32[(HEAP32[$0 + 28 >> 2] + Math_imul($3, 80) | 0) + 64 >> 2] == ($1 | 0)) {
    btCompoundShape__removeChildShapeByIndex_28int_29($0, $3);
   }
   $4 = ($2 | 0) > 1;
   $2 = $3;
   if ($4) {
    continue;
   }
   break;
  }
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0);
}
function btCapsuleShape_calculateLocalInertia_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_btVector3___operator__28btAlignedObjectArray_btVector3__20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 btAlignedObjectArray_btVector3___copyFromArray_28btAlignedObjectArray_btVector3__20const__29($1, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function ccDiscreteDynamicsWorld_addCollisionObject_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], -3);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSphereShape_calculateLocalInertia_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDiscreteDynamicsWorld_addCollisionObject_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], -3);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexShape_calculateLocalInertia_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btEmptyShape_calculateLocalInertia_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld_stepSimulation_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, HEAPF32[$2 + 8 >> 2], 1, Math_fround(.01666666753590107)) | 0;
 $3 = $2 + 16 | 0;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 return $0 | 0;
}
function btDiscreteDynamicsWorld_stepSimulation_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, HEAPF32[$2 + 8 >> 2], 1, Math_fround(.01666666753590107)) | 0;
 $3 = $2 + 16 | 0;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 return $0 | 0;
}
function btConeShape_calculateLocalInertia_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundCompoundCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = HEAP32[$0 + 84 >> 2];
 $3 = HEAP32[$2 + 8 >> 2];
 if (($3 | 0) >= 1) {
  $0 = 0;
  while (1) {
   $4 = HEAP32[(HEAP32[$2 + 16 >> 2] + Math_imul($0, 12) | 0) + 8 >> 2];
   if ($4) {
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $1);
    $3 = HEAP32[$2 + 8 >> 2];
   }
   $0 = $0 + 1 | 0;
   if (($0 | 0) < ($3 | 0)) {
    continue;
   }
   break;
  }
 }
}
function btBoxShape_calculateLocalInertia_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_int___clear_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 btAlignedObjectArray_int___destroy_28int_2c_20int_29($0, 0, btAlignedObjectArray_int___size_28_29_20const($0));
 btAlignedObjectArray_int___deallocate_28_29($0);
 btAlignedObjectArray_int___init_28_29($0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTransform_btTransform_2($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = operator_20new_28unsigned_20long_29(64);
 btTransform__btTransform_28btQuaternion_20const__2c_20btVector3_20const__29($1, HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function btActionInterface_updateAction_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$3 + 8 >> 2], HEAPF32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionWorld_addCollisionObject_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], -1);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_btCollisionObject_20const____btAlignedObjectArray_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 btAlignedAllocator_btCollisionObject_20const__2c_2016u___btAlignedAllocator_28_29($2);
 btAlignedObjectArray_btCollisionObject_20const____init_28_29($2);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function btRigidBody_applyImpulse_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 btRigidBody__applyImpulse_28btVector3_20const__2c_20btVector3_20const__29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDynamicsWorld_addCollisionObject_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2], -1);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_btVector3___deallocate_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if (HEAP32[$0 + 12 >> 2]) {
  if (HEAP8[$0 + 16 | 0] & 1) {
   btAlignedAllocator_btVector3_2c_2016u___deallocate_28btVector3__29($0, HEAP32[$0 + 12 >> 2]);
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedAllocator_btPersistentManifold__2c_2016u___allocate_28int_2c_20btPersistentManifold__20const___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$3 + 8 >> 2] << 2, 16);
 $1 = $3 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function ccDiscreteDynamicsWorld_addConstraint_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btMatrix3x3__btMatrix3x3_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 8 >> 2] = $0;
 $0 = HEAP32[$1 + 8 >> 2];
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = $0 + 48 | 0;
 while (1) {
  btVector3__btVector3_28_29($0);
  $0 = $0 + 16 | 0;
  if (($2 | 0) != ($0 | 0)) {
   continue;
  }
  break;
 }
 $0 = HEAP32[$1 + 12 >> 2];
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btDiscreteDynamicsWorld_addConstraint_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP8[$3 + 7 | 0] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, HEAP32[$3 + 8 >> 2], HEAP8[$3 + 7 | 0] & 1);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_setMassProps_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 btRigidBody__setMassProps_28float_2c_20btVector3_20const__29(HEAP32[$3 + 12 >> 2], HEAPF32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_applyForce_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 btRigidBody__applyForce_28btVector3_20const__2c_20btVector3_20const__29(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionWorld__computeOverlappingPairs_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $2 = CProfileSample__CProfileSample_28char_20const__29($1 + 8 | 0, 7803);
 $3 = HEAP32[$0 + 68 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 32 >> 2]]($3, HEAP32[$0 + 24 >> 2]);
 CProfileSample___CProfileSample_28_29($2);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_float___operator__28btAlignedObjectArray_float__20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 btAlignedObjectArray_float___copyFromArray_28btAlignedObjectArray_float__20const__29($1, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function btRigidBody_setDamping_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = Math_fround($2);
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 btRigidBody__setDamping_28float_2c_20float_29(HEAP32[$3 + 12 >> 2], HEAPF32[$3 + 8 >> 2], HEAPF32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHashedOverlappingPairCache__removeOverlappingPairsContainingProxy_28btBroadphaseProxy__2c_20btDispatcher__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = 15772;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $3 + 8 | 0, $2);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDiscreteDynamicsWorld__saveKinematicState_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0, $4 = 0;
 $3 = HEAP32[$0 + 8 >> 2];
 if (($3 | 0) >= 1) {
  while (1) {
   $2 = HEAP32[HEAP32[$0 + 16 >> 2] + ($4 << 2) >> 2];
   if (!(!$2 | !(HEAP32[$2 + 252 >> 2] & 2) | (!(HEAPU8[$2 + 204 | 0] & 2) | HEAP32[$2 + 220 >> 2] == 2))) {
    btRigidBody__saveKinematicState_28float_29($2, $1);
    $3 = HEAP32[$0 + 8 >> 2];
   }
   $4 = $4 + 1 | 0;
   if (($4 | 0) < ($3 | 0)) {
    continue;
   }
   break;
  }
 }
}
function btDbvt___btDbvt_28_29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 >> 2];
 if ($1) {
  recursedeletenode_28btDbvt__2c_20btDbvtNode__29($0, $1);
 }
 btAlignedFreeInternal_28void__29(HEAP32[$0 + 4 >> 2]);
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = -1;
 $1 = HEAP32[$0 + 32 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 36 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 32 >> 2] = 0;
 }
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP8[$0 + 36 | 0] = 1;
 return $0;
}
function __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = HEAP32[$1 + 16 >> 2];
 if (!$0) {
  HEAP32[$1 + 36 >> 2] = 1;
  HEAP32[$1 + 24 >> 2] = $3;
  HEAP32[$1 + 16 >> 2] = $2;
  return;
 }
 label$2 : {
  if (($2 | 0) == ($0 | 0)) {
   if (HEAP32[$1 + 24 >> 2] != 2) {
    break label$2;
   }
   HEAP32[$1 + 24 >> 2] = $3;
   return;
  }
  HEAP8[$1 + 54 | 0] = 1;
  HEAP32[$1 + 24 >> 2] = 2;
  HEAP32[$1 + 36 >> 2] = HEAP32[$1 + 36 >> 2] + 1;
 }
}
function btAlignedObjectArray_float___deallocate_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if (HEAP32[$0 + 12 >> 2]) {
  if (HEAP8[$0 + 16 | 0] & 1) {
   btAlignedAllocator_float_2c_2016u___deallocate_28float__29($0, HEAP32[$0 + 12 >> 2]);
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSphereShape__calculateLocalInertia_28float_2c_20btVector3__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 var $3 = Math_fround(0), $4 = Math_fround(0);
 $3 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $4 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 HEAP32[$2 + 12 >> 2] = 0;
 $1 = Math_fround($4 * Math_fround($3 * Math_fround($1 * Math_fround(.4000000059604645))));
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[$2 + 4 >> 2] = $1;
 HEAPF32[$2 >> 2] = $1;
}
function btCollisionObject__setWorldTransform_28btTransform_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
 btTransform__operator__28btTransform_20const__29($0 + 4 | 0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_btCollisionObject_20const____swap_28int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAP32[$3 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] + (HEAP32[$3 + 8 >> 2] << 2) >> 2];
 HEAP32[HEAP32[$0 + 12 >> 2] + (HEAP32[$3 + 8 >> 2] << 2) >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] + (HEAP32[$3 + 4 >> 2] << 2) >> 2];
 HEAP32[HEAP32[$0 + 12 >> 2] + (HEAP32[$3 + 4 >> 2] << 2) >> 2] = HEAP32[$3 >> 2];
}
function btPolyhedralConvexAabbCachingShape__btPolyhedralConvexAabbCachingShape_28_29($0) {
 var $1 = 0;
 btConvexInternalShape__btConvexInternalShape_28_29($0);
 HEAP8[$0 + 92 | 0] = 0;
 HEAP32[$0 + 88 >> 2] = 0;
 HEAP32[$0 + 80 >> 2] = -1082130432;
 HEAP32[$0 + 84 >> 2] = -1082130432;
 HEAP32[$0 + 72 >> 2] = 0;
 HEAP32[$0 + 76 >> 2] = -1082130432;
 $1 = $0 - -64 | 0;
 HEAP32[$1 >> 2] = 1065353216;
 HEAP32[$1 + 4 >> 2] = 1065353216;
 HEAP32[$0 >> 2] = 12772;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP32[$0 + 60 >> 2] = 1065353216;
 return $0;
}
function __cxa_guard_acquire($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 $0 = __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___cxa_guard_acquire_28_29(__cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__InitByteNoThreads_28unsigned_20int__29($1, $0));
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btAlignedObjectArray_int___operator__28btAlignedObjectArray_int__20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 btAlignedObjectArray_int___copyFromArray_28btAlignedObjectArray_int__20const__29($1, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1;
}
function btDiscreteDynamicsWorld__clearForces_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 if (HEAP32[$0 + 248 >> 2] >= 1) {
  while (1) {
   $1 = HEAP32[HEAP32[$0 + 256 >> 2] + ($2 << 2) >> 2];
   HEAP32[$1 + 472 >> 2] = 0;
   HEAP32[$1 + 476 >> 2] = 0;
   HEAP32[$1 + 496 >> 2] = 0;
   HEAP32[$1 + 500 >> 2] = 0;
   HEAP32[$1 + 488 >> 2] = 0;
   HEAP32[$1 + 492 >> 2] = 0;
   HEAP32[$1 + 480 >> 2] = 0;
   HEAP32[$1 + 484 >> 2] = 0;
   $2 = $2 + 1 | 0;
   if (($2 | 0) < HEAP32[$0 + 248 >> 2]) {
    continue;
   }
   break;
  }
 }
}
function btConvexConcaveCollisionAlgorithm___btConvexConcaveCollisionAlgorithm_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 + 8 >> 2] = 6372;
 HEAP32[$0 >> 2] = 6344;
 $1 = HEAP32[$0 + 56 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($1, HEAP32[$0 + 72 >> 2]);
 $1 = HEAP32[$0 + 56 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, HEAP32[$0 + 72 >> 2]);
 btTriangleCallback___btTriangleCallback_28_29($0 + 8 | 0);
 btActivatingCollisionAlgorithm___btActivatingCollisionAlgorithm_28_29($0);
 return $0 | 0;
}
function btRigidBody_getAabb_2($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 btRigidBody__getAabb_28btVector3__2c_20btVector3__29_20const(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_int___deallocate_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if (HEAP32[$0 + 12 >> 2]) {
  if (HEAP8[$0 + 16 | 0] & 1) {
   btAlignedAllocator_int_2c_2016u___deallocate_28int__29($0, HEAP32[$0 + 12 >> 2]);
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccAllHitsRayResultCallback_set_m_hitNormalWorld_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btAlignedObjectArray_btVector3___operator__28btAlignedObjectArray_btVector3__20const__29(HEAP32[$2 + 12 >> 2] + 72 | 0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccAllHitsRayResultCallback_set_m_hitPointWorld_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btAlignedObjectArray_btVector3___operator__28btAlignedObjectArray_btVector3__20const__29(HEAP32[$2 + 12 >> 2] + 92 | 0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody___btRigidBody_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $2 = global$0 - 16 | 0;
 $1 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 HEAP32[$2 + 12 >> 2] = $0;
 $1 = HEAP32[$2 + 12 >> 2];
 HEAP32[$1 >> 2] = 2252;
 btAlignedObjectArray_btTypedConstraint_____btAlignedObjectArray_28_29($1 + 544 | 0);
 btCollisionObject___btCollisionObject_28_29($1);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $1 | 0;
}
function btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__btCompoundLeafCallback__ProcessChild_28int_2c_20btTransform_20const__2c_20btCollisionShape_20const__29__LocalInfoAdder__needsCollision_28btBroadphaseProxy__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $0 = HEAP32[$0 + 16 >> 2];
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1) | 0;
}
function AllHitsRayResultCallback_set_m_hitNormalWorld_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btAlignedObjectArray_btVector3___operator__28btAlignedObjectArray_btVector3__20const__29(HEAP32[$2 + 12 >> 2] + 72 | 0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionWorld__ClosestConvexResultCallback___ClosestConvexResultCallback_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 btCollisionWorld__ClosestConvexResultCallback___ClosestConvexResultCallback_28_29($0);
 operator_20delete_28void__29($0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function AllHitsRayResultCallback_set_m_hitPointWorld_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btAlignedObjectArray_btVector3___operator__28btAlignedObjectArray_btVector3__20const__29(HEAP32[$2 + 12 >> 2] + 92 | 0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDbvt__clear_28_29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 >> 2];
 if ($1) {
  recursedeletenode_28btDbvt__2c_20btDbvtNode__29($0, $1);
 }
 btAlignedFreeInternal_28void__29(HEAP32[$0 + 4 >> 2]);
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = -1;
 $1 = HEAP32[$0 + 32 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 36 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 32 >> 2] = 0;
 }
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP8[$0 + 36 | 0] = 1;
}
function btConeShape__btConeShape_28float_2c_20float_29($0, $1, $2) {
 btConvexInternalShape__btConvexInternalShape_28_29($0);
 HEAPF32[$0 + 64 >> 2] = $2;
 HEAPF32[$0 + 60 >> 2] = $1;
 HEAP32[$0 >> 2] = 11196;
 HEAP32[$0 + 76 >> 2] = 2;
 HEAP32[$0 + 68 >> 2] = 0;
 HEAP32[$0 + 72 >> 2] = 1;
 HEAP32[$0 + 4 >> 2] = 11;
 HEAPF32[$0 + 40 >> 2] = $1;
 HEAPF32[$0 + 36 >> 2] = $2;
 HEAPF32[$0 + 32 >> 2] = $1;
 HEAPF32[$0 + 56 >> 2] = $1 / Math_fround(Math_sqrt(Math_fround(Math_fround($1 * $1) + Math_fround($2 * $2))));
 return $0;
}
function btAlignedAllocator_btVector3_2c_2016u___allocate_28int_2c_20btVector3_20const___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$3 + 8 >> 2] << 4, 16);
 $1 = $3 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function btVector3__setZero_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAPF32[$1 + 8 >> 2] = 0;
 HEAPF32[$1 + 4 >> 2] = 0;
 HEAPF32[$1 >> 2] = 0;
 btVector3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__29($0, $1 + 8 | 0, $1 + 4 | 0, $1);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundShape__getChildShape_28int_29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[btAlignedObjectArray_btCompoundShapeChild___operator_5b_5d_28int_29_20const(HEAP32[$2 + 12 >> 2] + 20 | 0, HEAP32[$2 + 8 >> 2]) + 64 >> 2];
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function ccAllHitsRayResultCallback_set_m_hitFractions_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btAlignedObjectArray_float___operator__28btAlignedObjectArray_float__20const__29(HEAP32[$2 + 12 >> 2] + 112 | 0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btPoint2PointConstraint__getParam_28int_2c_20int_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = Math_fround(0);
 $3 = Math_fround(3.4028234663852886e+38);
 label$1 : {
  if (($2 | 0) != -1) {
   break label$1;
  }
  $2 = $1 + -1 | 0;
  if ($2 >>> 0 > 3) {
   break label$1;
  }
  label$2 : {
   switch ($2 - 2 | 0) {
   default:
    return Math_fround(HEAPF32[$0 + 336 >> 2]);
   case 0:
   case 1:
    break label$2;
   }
  }
  $3 = HEAPF32[$0 + 340 >> 2];
 }
 return Math_fround($3);
}
function btCollisionObject__isActive_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ((btCollisionObject__getActivationState_28_29_20const($0) | 0) != 2) {
  $3 = (btCollisionObject__getActivationState_28_29_20const($0) | 0) != 5;
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $3;
}
function __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 $4 = HEAP32[$0 + 4 >> 2];
 $0 = HEAP32[$0 >> 2];
 $6 = $0;
 $7 = $1;
 $1 = 0;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  $5 = $4 >> 8;
  $1 = $5;
  if (!($4 & 1)) {
   break label$1;
  }
  $1 = HEAP32[HEAP32[$2 >> 2] + $5 >> 2];
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($6, $7, $2 + $1 | 0, $4 & 2 ? $3 : 2);
}
function ccNotMeClosestConvexResultCallback___ccNotMeClosestConvexResultCallback_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 ccNotMeClosestConvexResultCallback___ccNotMeClosestConvexResultCallback_28_29($0);
 operator_20delete_28void__29($0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function AllHitsRayResultCallback_set_m_hitFractions_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btAlignedObjectArray_float___operator__28btAlignedObjectArray_float__20const__29(HEAP32[$2 + 12 >> 2] + 112 | 0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSphereShape__setUnscaledRadius_28float_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 btVector3__setX_28float_29($0 + 36 | 0, HEAPF32[$2 + 8 >> 2]);
 btConvexInternalShape__setMargin_28float_29($0, HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionDispatcher_getManifoldByIndexInternal_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, HEAP32[$2 + 8 >> 2]) | 0;
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function __cxa_guard_release($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___cxa_guard_release_28_29(__cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__InitByteNoThreads_28unsigned_20int__29($1, $0));
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexShape__getMarginNonVirtual_28_29_20const($0) {
 var $1 = 0;
 label$1 : {
  $1 = HEAP32[$0 + 4 >> 2];
  if ($1 >>> 0 > 13) {
   break label$1;
  }
  label$2 : {
   switch ($1 - 2 | 0) {
   case 6:
    return Math_fround(HEAPF32[$0 + 32 >> 2] * HEAPF32[$0 + 16 >> 2]);
   case 0:
   case 1:
   case 4:
   case 5:
   case 7:
   case 10:
    break label$1;
   default:
    break label$2;
   }
  }
  return HEAPF32[$0 + 48 >> 2];
 }
 return Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
}
function btAlignedAllocator_float_2c_2016u___allocate_28int_2c_20float_20const___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$3 + 8 >> 2] << 2, 16);
 $1 = $3 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function ccAllHitsRayResultCallback_set_m_shapeParts_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btAlignedObjectArray_int___operator__28btAlignedObjectArray_int__20const__29(HEAP32[$2 + 12 >> 2] + 132 | 0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionWorld__ClosestRayResultCallback___ClosestRayResultCallback_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 btCollisionWorld__ClosestRayResultCallback___ClosestRayResultCallback_28_29($0);
 operator_20delete_28void__29($0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionWorld__AllHitsRayResultCallback___AllHitsRayResultCallback_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 btCollisionWorld__AllHitsRayResultCallback___AllHitsRayResultCallback_28_29($0);
 operator_20delete_28void__29($0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionDispatcher__freeCollisionAlgorithm_28void__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 label$1 : {
  if (!$1) {
   break label$1;
  }
  $0 = HEAP32[$0 + 68 >> 2];
  $2 = HEAP32[$0 + 16 >> 2];
  if ($2 >>> 0 > $1 >>> 0 | Math_imul(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]) + $2 >>> 0 <= $1 >>> 0) {
   break label$1;
  }
  HEAP32[$1 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$0 + 12 >> 2] = $1;
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
  return;
 }
 btAlignedFreeInternal_28void__29($1);
}
function ccClosestRayResultCallback_set_m_hitNormalWorld_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $2 = HEAP32[$2 + 12 >> 2];
 $0 = $2;
 HEAP32[$0 + 52 >> 2] = $4;
 HEAP32[$0 + 56 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 60 >> 2] = $4;
 HEAP32[$1 + 64 >> 2] = $0;
}
function ccClosestRayResultCallback_set_m_hitPointWorld_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $2 = HEAP32[$2 + 12 >> 2];
 $0 = $2;
 HEAP32[$0 + 68 >> 2] = $4;
 HEAP32[$0 + 72 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 76 >> 2] = $4;
 HEAP32[$1 + 80 >> 2] = $0;
}
function btAlignedAllocator_int_2c_2016u___allocate_28int_2c_20int_20const___29($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$3 + 8 >> 2] << 2, 16);
 $1 = $3 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function ccClosestRayResultCallback_set_m_rayFromWorld_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $2 = HEAP32[$2 + 12 >> 2];
 $0 = $2;
 HEAP32[$0 + 20 >> 2] = $4;
 HEAP32[$0 + 24 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 28 >> 2] = $4;
 HEAP32[$1 + 32 >> 2] = $0;
}
function ccAllHitsRayResultCallback_set_m_rayFromWorld_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $2 = HEAP32[$2 + 12 >> 2];
 $0 = $2;
 HEAP32[$0 + 40 >> 2] = $4;
 HEAP32[$0 + 44 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 48 >> 2] = $4;
 HEAP32[$1 + 52 >> 2] = $0;
}
function ClosestRayResultCallback_set_m_hitNormalWorld_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $2 = HEAP32[$2 + 12 >> 2];
 $0 = $2;
 HEAP32[$0 + 52 >> 2] = $4;
 HEAP32[$0 + 56 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 60 >> 2] = $4;
 HEAP32[$1 + 64 >> 2] = $0;
}
function btConstCollisionObjectArray_at_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[btAlignedObjectArray_btCollisionObject_20const____at_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]) >> 2];
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function ClosestRayResultCallback_set_m_hitPointWorld_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $2 = HEAP32[$2 + 12 >> 2];
 $0 = $2;
 HEAP32[$0 + 68 >> 2] = $4;
 HEAP32[$0 + 72 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 76 >> 2] = $4;
 HEAP32[$1 + 80 >> 2] = $0;
}
function ccClosestRayResultCallback_set_m_rayToWorld_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $2 = HEAP32[$2 + 12 >> 2];
 $0 = $2;
 HEAP32[$0 + 36 >> 2] = $4;
 HEAP32[$0 + 40 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 44 >> 2] = $4;
 HEAP32[$1 + 48 >> 2] = $0;
}
function ccAllHitsRayResultCallback_set_m_rayToWorld_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $2 = HEAP32[$2 + 12 >> 2];
 $0 = $2;
 HEAP32[$0 + 56 >> 2] = $4;
 HEAP32[$0 + 60 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 64 >> 2] = $4;
 HEAP32[$1 + 68 >> 2] = $0;
}
function ClosestRayResultCallback_set_m_rayFromWorld_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $2 = HEAP32[$2 + 12 >> 2];
 $0 = $2;
 HEAP32[$0 + 20 >> 2] = $4;
 HEAP32[$0 + 24 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 28 >> 2] = $4;
 HEAP32[$1 + 32 >> 2] = $0;
}
function AllHitsRayResultCallback_set_m_rayFromWorld_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $2 = HEAP32[$2 + 12 >> 2];
 $0 = $2;
 HEAP32[$0 + 40 >> 2] = $4;
 HEAP32[$0 + 44 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 48 >> 2] = $4;
 HEAP32[$1 + 52 >> 2] = $0;
}
function btRigidBody_btRigidBody_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = btCollisionObject__operator_20new_28unsigned_20long_29(676);
 btRigidBody__btRigidBody_28btRigidBody__btRigidBodyConstructionInfo_20const__29($2, HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function btDispatcher_getManifoldByIndexInternal_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, HEAP32[$2 + 8 >> 2]) | 0;
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function btCollisionDispatcher_btCollisionDispatcher_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = operator_20new_28unsigned_20long_29(10448);
 btCollisionDispatcher__btCollisionDispatcher_28btCollisionConfiguration__29($2, HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function ClosestRayResultCallback_set_m_rayToWorld_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $2 = HEAP32[$2 + 12 >> 2];
 $0 = $2;
 HEAP32[$0 + 36 >> 2] = $4;
 HEAP32[$0 + 40 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 44 >> 2] = $4;
 HEAP32[$1 + 48 >> 2] = $0;
}
function AllHitsRayResultCallback_set_m_rayToWorld_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $2 = HEAP32[$2 + 12 >> 2];
 $0 = $2;
 HEAP32[$0 + 56 >> 2] = $4;
 HEAP32[$0 + 60 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 64 >> 2] = $4;
 HEAP32[$1 + 68 >> 2] = $0;
}
function btScalarArray_at_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = Math_fround(0);
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $4 = HEAPF32[btAlignedObjectArray_float___at_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]) >> 2];
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($4);
}
function btCompoundShape__getChildShape_28int_29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[btAlignedObjectArray_btCompoundShapeChild___operator_5b_5d_28int_29(HEAP32[$2 + 12 >> 2] + 20 | 0, HEAP32[$2 + 8 >> 2]) + 64 >> 2];
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0;
}
function btCollisionWorld__ConvexResultCallback__needsCollision_28btBroadphaseProxy__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP8[$2 + 7 | 0] = (HEAP32[HEAP32[$2 + 8 >> 2] + 4 >> 2] & HEAP32[$0 + 12 >> 2]) != 0;
 $3 = HEAP8[$2 + 7 | 0] & 1 ? (HEAP32[$0 + 8 >> 2] & HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2]) != 0 : $3;
 HEAP8[$2 + 7 | 0] = $3;
 return HEAP8[$2 + 7 | 0] & 1;
}
function btPoint2PointConstraint_setBreakingImpulseThreshold_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btTypedConstraint__setBreakingImpulseThreshold_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btManifoldPoint_set_m_positionWorldOnB_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $2 = HEAP32[$2 + 12 >> 2];
 $0 = $2;
 HEAP32[$0 + 32 >> 2] = $4;
 HEAP32[$0 + 36 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 40 >> 2] = $4;
 HEAP32[$1 + 44 >> 2] = $0;
}
function btManifoldPoint_set_m_positionWorldOnA_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $2 = HEAP32[$2 + 12 >> 2];
 $0 = $2;
 HEAP32[$0 + 48 >> 2] = $4;
 HEAP32[$0 + 52 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 56 >> 2] = $4;
 HEAP32[$1 + 60 >> 2] = $0;
}
function btConvexTriangleMeshShape__setLocalScaling_28btVector3_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = $1;
 $1 = HEAP32[$2 >> 2];
 $3 = HEAP32[$2 + 4 >> 2];
 $5 = $1;
 $4 = HEAP32[$0 + 96 >> 2];
 $1 = $4;
 HEAP32[$1 + 4 >> 2] = $5;
 HEAP32[$1 + 8 >> 2] = $3;
 $1 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$2 + 8 >> 2];
 $2 = $3;
 $3 = $4;
 HEAP32[$3 + 12 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = $1;
 btPolyhedralConvexAabbCachingShape__recalcLocalAabb_28_29($0);
}
function btCollisionWorld__RayResultCallback__needsCollision_28btBroadphaseProxy__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP8[$2 + 7 | 0] = (HEAP32[HEAP32[$2 + 8 >> 2] + 4 >> 2] & HEAP16[$0 + 14 >> 1]) != 0;
 $3 = HEAP8[$2 + 7 | 0] & 1 ? (HEAP16[$0 + 12 >> 1] & HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2]) != 0 : $3;
 HEAP8[$2 + 7 | 0] = $3;
 return HEAP8[$2 + 7 | 0] & 1;
}
function btCollisionObject__checkCollideWithOverride_28btCollisionObject_20const__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $3 = HEAP32[$0 + 288 >> 2];
 $2 = $3;
 label$1 : {
  if (($3 | 0) < 1) {
   break label$1;
  }
  $0 = HEAP32[$0 + 296 >> 2];
  $2 = 0;
  while (1) {
   if (HEAP32[($2 << 2) + $0 >> 2] == ($1 | 0)) {
    break label$1;
   }
   $2 = $2 + 1 | 0;
   if (($3 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
  $2 = $3;
 }
 return ($2 | 0) >= ($3 | 0) | 0;
}
function btRigidBody__setDamping_28float_2c_20float_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAPF32[$3 + 8 >> 2] = $2;
 HEAPF32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 >> 2] = 1065353216;
 HEAP32[$0 + 504 >> 2] = HEAP32[($1 < Math_fround(0) ? $3 + 4 | 0 : $1 > Math_fround(1) ? $3 : $3 + 12 | 0) >> 2];
 HEAP32[$3 + 4 >> 2] = 0;
 HEAP32[$3 >> 2] = 1065353216;
 HEAP32[$0 + 508 >> 2] = HEAP32[($2 < Math_fround(0) ? $3 + 4 | 0 : $2 > Math_fround(1) ? $3 : $3 + 8 | 0) >> 2];
}
function btManifoldPoint_set_m_normalWorldOnB_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $2 = HEAP32[$2 + 12 >> 2];
 $0 = $2;
 HEAP32[$0 + 64 >> 2] = $4;
 HEAP32[$0 + 68 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 72 >> 2] = $4;
 HEAP32[$1 + 76 >> 2] = $0;
}
function ccNotMeClosestConvexResultCallback___ccNotMeClosestConvexResultCallback_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 btCollisionWorld__ClosestConvexResultCallback___ClosestConvexResultCallback_28_29($2);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function btTypedConstraint__btTypedConstraint_28btTypedConstraintType_2c_20btRigidBody__29($0, $1, $2) {
 HEAP32[$0 + 28 >> 2] = $2;
 HEAP32[$0 + 24 >> 2] = -1;
 HEAP16[$0 + 20 >> 1] = 1;
 HEAP32[$0 + 16 >> 2] = 2139095039;
 HEAP32[$0 + 8 >> 2] = -1;
 HEAP32[$0 + 12 >> 2] = -1;
 HEAP32[$0 >> 2] = 3500;
 HEAP32[$0 + 4 >> 2] = $1;
 btTypedConstraint__getFixedBody_28_29();
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 40 >> 2] = 1028443341;
 HEAP32[$0 + 32 >> 2] = 20848;
 return $0;
}
function ccDiscreteDynamicsWorld_setAllowCcdPenetration_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 ccDiscreteDynamicsWorld__setAllowCcdPenetration_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld___ccDiscreteDynamicsWorld_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 ccDiscreteDynamicsWorld___ccDiscreteDynamicsWorld_28_29($0);
 ccDiscreteDynamicsWorld__operator_20delete_28void__29($0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody__setAngularVelocity_28btVector3_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 HEAP32[$1 + 304 >> 2] = HEAP32[$1 + 304 >> 2] + 1;
 $2 = HEAP32[$2 + 8 >> 2];
 $3 = HEAP32[$2 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 388 >> 2] = $3;
 HEAP32[$1 + 392 >> 2] = $0;
 $3 = HEAP32[$2 + 12 >> 2];
 $0 = HEAP32[$2 + 8 >> 2];
 HEAP32[$1 + 396 >> 2] = $0;
 HEAP32[$1 + 400 >> 2] = $3;
}
function btManifoldPoint_set_m_localPointB_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $2 = HEAP32[$2 + 12 >> 2];
 $0 = $2;
 HEAP32[$0 + 16 >> 2] = $4;
 HEAP32[$0 + 20 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 24 >> 2] = $4;
 HEAP32[$1 + 28 >> 2] = $0;
}
function btTypedConstraint_setBreakingImpulseThreshold_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btTypedConstraint__setBreakingImpulseThreshold_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody__setLinearVelocity_28btVector3_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 HEAP32[$1 + 304 >> 2] = HEAP32[$1 + 304 >> 2] + 1;
 $2 = HEAP32[$2 + 8 >> 2];
 $3 = HEAP32[$2 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 372 >> 2] = $3;
 HEAP32[$1 + 376 >> 2] = $0;
 $3 = HEAP32[$2 + 12 >> 2];
 $0 = HEAP32[$2 + 8 >> 2];
 HEAP32[$1 + 380 >> 2] = $0;
 HEAP32[$1 + 384 >> 2] = $3;
}
function btPoint2PointConstraint__setPivotB_28btVector3_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $2 = HEAP32[$2 + 12 >> 2];
 $0 = $2;
 HEAP32[$0 + 316 >> 2] = $4;
 HEAP32[$0 + 320 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 324 >> 2] = $4;
 HEAP32[$1 + 328 >> 2] = $0;
}
function btPoint2PointConstraint__setPivotA_28btVector3_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $2 = HEAP32[$2 + 12 >> 2];
 $0 = $2;
 HEAP32[$0 + 300 >> 2] = $4;
 HEAP32[$0 + 304 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 308 >> 2] = $4;
 HEAP32[$1 + 312 >> 2] = $0;
}
function btHingeConstraint_setBreakingImpulseThreshold_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btTypedConstraint__setBreakingImpulseThreshold_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btFixedConstraint_setBreakingImpulseThreshold_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btTypedConstraint__setBreakingImpulseThreshold_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_btVector3___btAlignedObjectArray_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 btAlignedAllocator_btVector3_2c_2016u___btAlignedAllocator_28_29($2);
 btAlignedObjectArray_btVector3___init_28_29($2);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function btTriangleMesh_btTriangleMesh_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP8[$1 + 15 | 0] = $0;
 $2 = btTriangleIndexVertexArray__operator_20new_28unsigned_20long_29(172);
 btTriangleMesh__btTriangleMesh_28bool_2c_20bool_29($2, HEAP8[$1 + 15 | 0] & 1, 1);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function btRigidBody__setAngularFactor_28btVector3_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 HEAP32[$1 + 304 >> 2] = HEAP32[$1 + 304 >> 2] + 1;
 $2 = HEAP32[$2 + 8 >> 2];
 $3 = HEAP32[$2 >> 2];
 $0 = HEAP32[$2 + 4 >> 2];
 HEAP32[$1 + 604 >> 2] = $3;
 HEAP32[$1 + 608 >> 2] = $0;
 $3 = HEAP32[$2 + 12 >> 2];
 $0 = HEAP32[$2 + 8 >> 2];
 HEAP32[$1 + 612 >> 2] = $0;
 HEAP32[$1 + 616 >> 2] = $3;
}
function btConstCollisionObjectArray___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  btAlignedObjectArray_btCollisionObject_20const_____btAlignedObjectArray_28_29($0);
  operator_20delete_28void__29($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btOverlappingPairCache_setInternalGhostPairCallback_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 60 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld_setDeactivationTime_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 ccDiscreteDynamicsWorld__setDeactivationTime_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld_addCollisionObject_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$2 + 8 >> 2], 2, -3);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btStridingMeshInterface__setScaling_28btVector3_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $2 = HEAP32[$2 + 12 >> 2];
 $0 = $2;
 HEAP32[$0 + 4 >> 2] = $4;
 HEAP32[$0 + 8 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 12 >> 2] = $4;
 HEAP32[$1 + 16 >> 2] = $0;
}
function btDiscreteDynamicsWorld_addCollisionObject_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$2 + 8 >> 2], 2, -3);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDiscreteDynamicsWorld__updateVehicles_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btDiscreteDynamicsWorld__updateActions_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSequentialImpulseConstraintSolver__convertContacts_28btPersistentManifold___2c_20int_2c_20btContactSolverInfo_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 if (($2 | 0) >= 1) {
  while (1) {
   btSequentialImpulseConstraintSolver__convertContact_28btPersistentManifold__2c_20btContactSolverInfo_20const__29($0, HEAP32[($4 << 2) + $1 >> 2], $3);
   $4 = $4 + 1 | 0;
   if (($4 | 0) != ($2 | 0)) {
    continue;
   }
   break;
  }
 }
}
function btManifoldPoint_set_m_localPointA_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $2 = HEAP32[$2 + 12 >> 2];
 $0 = $2;
 HEAP32[$0 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 8 >> 2] = $4;
 HEAP32[$1 + 12 >> 2] = $0;
}
function btOverlappingPairCache_setOverlapFilterCallback_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btOverlappingPairCache_getNumOverlappingPairs_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $3 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btCompoundCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = HEAP32[$0 + 52 >> 2];
 if (($2 | 0) >= 1) {
  while (1) {
   $4 = HEAP32[HEAP32[$0 + 60 >> 2] + ($3 << 2) >> 2];
   if ($4) {
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $1);
    $2 = HEAP32[$0 + 52 >> 2];
   }
   $3 = $3 + 1 | 0;
   if (($3 | 0) < ($2 | 0)) {
    continue;
   }
   break;
  }
 }
}
function btCollisionWorld__ClosestConvexResultCallback___ClosestConvexResultCallback_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 btCollisionWorld__ConvexResultCallback___ConvexResultCallback_28_29($2);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function btHeightfieldTerrainShape_setMargin_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCylinderShape_btCylinderShape_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = btCylinderShape__operator_20new_28unsigned_20long_29(64);
 btCylinderShape__btCylinderShape_28btVector3_20const__29($2, HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function btConvexTriangleMeshShape_setMargin_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionObject_setCcdSweptSphereRadius_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btCollisionObject__setCcdSweptSphereRadius_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld_removeCollisionObject_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDiscreteDynamicsWorld_removeCollisionObject_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundShape_btCompoundShape_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP8[$1 + 15 | 0] = $0;
 $2 = btCompoundShape__operator_20new_28unsigned_20long_29(204);
 btCompoundShape__btCompoundShape_28bool_2c_20int_29($2, HEAP8[$1 + 15 | 0] & 1, 0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function btPersistentManifold_getContactPoint_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = btPersistentManifold__getContactPoint_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function ccClosestRayResultCallback___ccClosestRayResultCallback_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 ccClosestRayResultCallback___ccClosestRayResultCallback_28_29($0);
 operator_20delete_28void__29($0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccAllHitsRayResultCallback___ccAllHitsRayResultCallback_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 ccAllHitsRayResultCallback___ccAllHitsRayResultCallback_28_29($0);
 operator_20delete_28void__29($0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSphereShape_btSphereShape_1($0) {
 $0 = Math_fround($0);
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAPF32[$1 + 12 >> 2] = $0;
 $3 = btSphereShape__operator_20new_28unsigned_20long_29(60);
 btSphereShape__btSphereShape_28float_29($3, HEAPF32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $3 | 0;
}
function btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 btGjkPairDetector__getClosestPointsNonVirtual_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__29($0, $1, $2, $3);
}
function btConvexInternalShape_setMargin_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionWorld_addCollisionObject_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$2 + 8 >> 2], 1, -1);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionObject_setCcdMotionThreshold_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btCollisionObject__setCcdMotionThreshold_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_float___btAlignedObjectArray_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 btAlignedAllocator_float_2c_2016u___btAlignedAllocator_28_29($2);
 btAlignedObjectArray_float___init_28_29($2);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3) {
 var $4 = 0, $5 = 0;
 $4 = $2 >>> 16 | 0;
 $5 = $0 >>> 16 | 0;
 $3 = (Math_imul($4, $5) + Math_imul($1, $2) | 0) + Math_imul($3, $0) | 0;
 $2 = $2 & 65535;
 $0 = $0 & 65535;
 $1 = Math_imul($2, $0);
 $2 = ($1 >>> 16 | 0) + Math_imul($2, $5) | 0;
 $3 = $3 + ($2 >>> 16 | 0) | 0;
 $2 = Math_imul($0, $4) + ($2 & 65535) | 0;
 i64toi32_i32$HIGH_BITS = $3 + ($2 >>> 16 | 0) | 0;
 return $1 & 65535 | $2 << 16;
}
function btVoronoiSimplexSolver__reset_28_29($0) {
 var $1 = 0;
 HEAP8[$0 + 356 | 0] = 1;
 HEAP32[$0 >> 2] = 0;
 HEAP8[$0 + 312 | 0] = 0;
 HEAP32[$0 + 292 >> 2] = 1566444395;
 HEAP32[$0 + 296 >> 2] = 1566444395;
 HEAP32[$0 + 336 >> 2] = 0;
 HEAP32[$0 + 340 >> 2] = 0;
 HEAP32[$0 + 300 >> 2] = 1566444395;
 HEAP32[$0 + 304 >> 2] = 0;
 HEAP32[$0 + 344 >> 2] = 0;
 HEAP32[$0 + 348 >> 2] = 0;
 HEAP8[$0 + 352 | 0] = 0;
 $1 = $0;
 $0 = $0 + 332 | 0;
 HEAP8[$0 | 0] = HEAPU8[$1 + 332 | 0] & 240;
}
function btHeightfieldTerrainShape_setLocalScaling_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDynamicsWorld_addCollisionObject_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$2 + 8 >> 2], 1, -1);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexTriangleMeshShape_setLocalScaling_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld_removeConstraint_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 60 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld_addConstraint_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, HEAP32[$2 + 8 >> 2], 0);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_setCenterOfMassTransform_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btRigidBody__setCenterOfMassTransform_28btTransform_20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_setCcdSweptSphereRadius_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btCollisionObject__setCcdSweptSphereRadius_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDiscreteDynamicsWorld_removeConstraint_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 60 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDiscreteDynamicsWorld_addConstraint_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, HEAP32[$2 + 8 >> 2], 0);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDefaultMotionState___btDefaultMotionState_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 btDefaultMotionState___btDefaultMotionState_28_29($0);
 btDefaultMotionState__operator_20delete_28void__29($0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld_setNarrowPhaseMethod_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 ccDiscreteDynamicsWorld__setNarrowPhaseMethod_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld_removeRigidBody_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 92 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btVector3__btVector3_28float_20const__2c_20float_20const__2c_20float_20const__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 HEAPF32[$0 >> 2] = HEAPF32[HEAP32[$4 + 8 >> 2] >> 2];
 HEAPF32[$0 + 4 >> 2] = HEAPF32[HEAP32[$4 + 4 >> 2] >> 2];
 HEAPF32[$0 + 8 >> 2] = HEAPF32[HEAP32[$4 >> 2] >> 2];
 HEAPF32[$0 + 12 >> 2] = 0;
 return $0;
}
function btDiscreteDynamicsWorld_removeRigidBody_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 92 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccClosestRayResultCallback_setQueryTrigger_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 ccClosestRayResultCallback__setQueryTrigger_28bool_29(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccAllHitsRayResultCallback_setQueryTrigger_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 ccAllHitsRayResultCallback__setQueryTrigger_28bool_29(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTriangleMeshShape__setLocalScaling_28btVector3_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 $2 = $1;
 $1 = HEAP32[$2 >> 2];
 $3 = HEAP32[$2 + 4 >> 2];
 $5 = $1;
 $4 = HEAP32[$0 + 52 >> 2];
 $1 = $4;
 HEAP32[$1 + 4 >> 2] = $5;
 HEAP32[$1 + 8 >> 2] = $3;
 $1 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$2 + 8 >> 2];
 $2 = $3;
 $3 = $4;
 HEAP32[$3 + 12 >> 2] = $2;
 HEAP32[$3 + 16 >> 2] = $1;
 btTriangleMeshShape__recalcLocalAabb_28_29($0);
}
function btTransform__setOrigin_28btVector3_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $1 = HEAP32[$3 + 4 >> 2];
 $4 = $0;
 $2 = HEAP32[$2 + 12 >> 2];
 $0 = $2;
 HEAP32[$0 + 48 >> 2] = $4;
 HEAP32[$0 + 52 >> 2] = $1;
 $0 = HEAP32[$3 + 12 >> 2];
 $1 = HEAP32[$3 + 8 >> 2];
 $4 = $1;
 $1 = $2;
 HEAP32[$1 + 56 >> 2] = $4;
 HEAP32[$1 + 60 >> 2] = $0;
}
function btDefaultMotionState_setWorldTransform_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionWorld_removeCollisionObject_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionObject_setWorldTransform_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionObject__setWorldTransform_28btTransform_20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionObject_setSpinningFriction_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btCollisionObject__setSpinningFriction_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBvhTriangleMeshShape_setLocalScaling_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld_setContactBreakingThreshold_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btCollisionWorld__setContactBreakingThreshold_28float_29(HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSphereTriangleCollisionAlgorithm___btSphereTriangleCollisionAlgorithm_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 HEAP32[$0 >> 2] = 9764;
 label$1 : {
  if (!HEAPU8[$0 + 8 | 0]) {
   break label$1;
  }
  $1 = HEAP32[$0 + 12 >> 2];
  if (!$1) {
   break label$1;
  }
  $2 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 }
 btActivatingCollisionAlgorithm___btActivatingCollisionAlgorithm_28_29($0);
 operator_20delete_28void__29($0);
}
function btPoint2PointConstraint_getBreakingImpulseThreshold_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btTypedConstraint__getBreakingImpulseThreshold_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btDynamicsWorld_removeCollisionObject_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDiscreteDynamicsWorld_setContactBreakingThreshold_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btCollisionWorld__setContactBreakingThreshold_28float_29(HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDefaultMotionState_getWorldTransform_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexInternalShape_setLocalScaling_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionShape_setMargin_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld_removeAction_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld_addRigidBody_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_setCcdMotionThreshold_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btCollisionObject__setCcdMotionThreshold_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHingeConstraint_setMaxMotorImpulse_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btHingeConstraint__setMaxMotorImpulse_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDiscreteDynamicsWorld_removeAction_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDiscreteDynamicsWorld_addRigidBody_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCylinderShape_setMargin_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundShape_setMargin_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionObject_setRollingFriction_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btCollisionObject__setRollingFriction_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_int___btAlignedObjectArray_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 btAlignedAllocator_int_2c_2016u___btAlignedAllocator_28_29($2);
 btAlignedObjectArray_int___init_28_29($2);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function ccClosestRayResultCallback___ccClosestRayResultCallback_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 btCollisionWorld__ClosestRayResultCallback___ClosestRayResultCallback_28_29($2);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function btTriangleMeshShape_setLocalScaling_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionWorld__ClosestRayResultCallback___ClosestRayResultCallback_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 btCollisionWorld__RayResultCallback___RayResultCallback_28_29($2);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function btCollisionObject_forceActivationState_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionObject__forceActivationState_28int_29_20const(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCapsuleShape_setMargin_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld_setGravity_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTypedConstraint__btTypedConstraint_28btTypedConstraintType_2c_20btRigidBody__2c_20btRigidBody__29($0, $1, $2, $3) {
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP32[$0 + 40 >> 2] = 1028443341;
 HEAP32[$0 + 32 >> 2] = $3;
 HEAP32[$0 + 28 >> 2] = $2;
 HEAP32[$0 + 24 >> 2] = -1;
 HEAP16[$0 + 20 >> 1] = 1;
 HEAP32[$0 + 16 >> 2] = 2139095039;
 HEAP32[$0 + 8 >> 2] = -1;
 HEAP32[$0 + 12 >> 2] = -1;
 HEAP32[$0 >> 2] = 3500;
 HEAP32[$0 + 4 >> 2] = $1;
 return $0;
}
function btTriangleIndexVertexArray___btTriangleIndexVertexArray_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 15164;
 $1 = HEAP32[$0 + 32 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 36 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 32 >> 2] = 0;
 }
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP8[$0 + 36 | 0] = 1;
 btStridingMeshInterface___btStridingMeshInterface_28_29($0);
 btAlignedFreeInternal_28void__29($0);
}
function btStridingMeshInterface_setScaling_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btStridingMeshInterface__setScaling_28btVector3_20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btStaticPlaneShape_setPlaneConstant_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btStaticPlaneShape__setPlaneConstant_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btStaticPlaneShape_setLocalScaling_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSphereShape_setMargin_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHeightfieldTerrainShape__btHeightfieldTerrainShape_28int_2c_20int_2c_20void_20const__2c_20float_2c_20float_2c_20float_2c_20int_2c_20PHY_ScalarType_2c_20bool_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 btConcaveShape__btConcaveShape_28_29($0);
 HEAP32[$0 >> 2] = 14684;
 btHeightfieldTerrainShape__initialize_28int_2c_20int_2c_20void_20const__2c_20float_2c_20float_2c_20float_2c_20int_2c_20PHY_ScalarType_2c_20bool_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);
 return $0;
}
function btDiscreteDynamicsWorld_setGravity_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexShape_setMargin_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $4 = 0;
 $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 40 >> 2]]($2, $0) | 0;
 $4 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $3) | 0;
 HEAP32[$1 >> 2] = $4;
 if ($4) {
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2, $3);
 }
 $2 = HEAP32[$0 + 4 >> 2];
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = $2;
 return 13098;
}
function btCollisionObject_setCollisionShape_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld_addAction_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSphereSphereCollisionAlgorithm___btSphereSphereCollisionAlgorithm_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 HEAP32[$0 >> 2] = 5028;
 label$1 : {
  if (!HEAPU8[$0 + 8 | 0]) {
   break label$1;
  }
  $1 = HEAP32[$0 + 12 >> 2];
  if (!$1) {
   break label$1;
  }
  $2 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 }
 btActivatingCollisionAlgorithm___btActivatingCollisionAlgorithm_28_29($0);
 operator_20delete_28void__29($0);
}
function btHeightfieldTerrainShape_getMargin_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $3 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btDiscreteDynamicsWorld_addAction_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexTriangleMeshShape_getMargin_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $3 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btTransform__operator__28btVector3_20const__29_20const($0, $1, $2) {
 var $3 = 0, $4 = 0;
 $3 = global$0 - 16 | 0;
 $4 = $3;
 if ($3 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $4;
 HEAP32[$3 + 12 >> 2] = $1;
 HEAP32[$3 + 8 >> 2] = $2;
 btTransform__operator_28_29_28btVector3_20const__29_20const($0, HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
 $0 = $3 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_setWorldTransform_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionObject__setWorldTransform_28btTransform_20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_setSpinningFriction_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btCollisionObject__setSpinningFriction_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btPoint2PointConstraint_setPivotB_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btPoint2PointConstraint__setPivotB_28btVector3_20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btPoint2PointConstraint_setPivotA_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btPoint2PointConstraint__setPivotA_28btVector3_20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHingeConstraint_setUseReferenceFrameA_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 btHingeConstraint__setUseReferenceFrameA_28bool_29(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundShape_removeChildShape_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionShape_setLocalScaling_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBoxShape_setUnscaledHalfExtents_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btBoxShape__setUnscaledHalfExtents_28btVector3_20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBU_Simplex1to4_setLocalScaling_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBU_Simplex1to4__addVertex_28btVector3_20const__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = HEAP32[$0 + 96 >> 2];
 HEAP32[$0 + 96 >> 2] = $2 + 1;
 $3 = $1;
 $4 = HEAP32[$3 + 8 >> 2];
 $1 = HEAP32[$3 + 12 >> 2];
 $2 = ($2 << 4) + $0 | 0;
 HEAP32[$2 + 108 >> 2] = $4;
 HEAP32[$2 + 112 >> 2] = $1;
 $4 = HEAP32[$3 + 4 >> 2];
 $1 = HEAP32[$3 >> 2];
 HEAP32[$2 + 100 >> 2] = $1;
 HEAP32[$2 + 104 >> 2] = $4;
 btPolyhedralConvexAabbCachingShape__recalcLocalAabb_28_29($0);
}
function btTypedConstraint_getBreakingImpulseThreshold_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btTypedConstraint__getBreakingImpulseThreshold_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btMotionState_setWorldTransform_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btIndexedMeshArray_at_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = btAlignedObjectArray_btIndexedMesh___at_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function btHingeConstraint_getBreakingImpulseThreshold_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btTypedConstraint__getBreakingImpulseThreshold_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btFixedConstraint_getBreakingImpulseThreshold_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btTypedConstraint__getBreakingImpulseThreshold_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btCylinderShape_setLocalScaling_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundShape_setLocalScaling_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionObject_setActivationState_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionObject__setActivationState_28int_29_20const(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionDispatcher_setDispatcherFlags_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionDispatcher__setDispatcherFlags_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBoxShape_setMargin_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccOverlapFilterCallback___ccOverlapFilterCallback_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 ccOverlapFilterCallback___ccOverlapFilterCallback_28_29($0);
 operator_20delete_28void__29($0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_setRollingFriction_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btCollisionObject__setRollingFriction_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btMotionState_getWorldTransform_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btIndexedMeshArray___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  btAlignedObjectArray_btIndexedMesh____btAlignedObjectArray_28_29($0);
  operator_20delete_28void__29($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConcaveShape_setLocalScaling_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundShape_getChildShape_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = btCompoundShape__getChildShape_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function btCollisionWorld_setContactBreakingThreshold_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btCollisionWorld__setContactBreakingThreshold_28float_29(HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCapsuleShape_setLocalScaling_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTransform_op_mul_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = btTransform__operator___28btTransform_20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function btSphereShape_setLocalScaling_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_forceActivationState_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionObject__forceActivationState_28int_29_20const(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDynamicsWorld_setContactBreakingThreshold_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btCollisionWorld__setContactBreakingThreshold_28float_29(HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexShape_setLocalScaling_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexInternalShape_getMargin_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $3 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btCompoundShape_removeChildShapeByIndex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCompoundShape__removeChildShapeByIndex_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld_setAllowSleep_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 ccDiscreteDynamicsWorld__setAllowSleep_28bool_29(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_setCollisionShape_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btEmptyShape_setLocalScaling_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDynamicsWorld_removeAction_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionObject_setRestitution_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btCollisionObject__setRestitution_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConeShape_setLocalScaling_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btVector3__setValue_28float_20const__2c_20float_20const__2c_20float_20const__29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP32[$4 + 8 >> 2] = $1;
 HEAP32[$4 + 4 >> 2] = $2;
 HEAP32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 HEAPF32[$0 >> 2] = HEAPF32[HEAP32[$4 + 8 >> 2] >> 2];
 HEAPF32[$0 + 4 >> 2] = HEAPF32[HEAP32[$4 + 4 >> 2] >> 2];
 HEAPF32[$0 + 8 >> 2] = HEAPF32[HEAP32[$4 >> 2] >> 2];
 HEAPF32[$0 + 12 >> 2] = 0;
}
function btSphereShape_setUnscaledRadius_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btSphereShape__setUnscaledRadius_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_setAngularVelocity_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btRigidBody__setAngularVelocity_28btVector3_20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_applyTorqueImpulse_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btRigidBody__applyTorqueImpulse_28btVector3_20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btIntArray_at_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[btAlignedObjectArray_int___at_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]) >> 2];
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function btBoxShape_setLocalScaling_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTriangleMesh_setScaling_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btStridingMeshInterface__setScaling_28btVector3_20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_setActivationState_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionObject__setActivationState_28int_29_20const(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDynamicsWorld_addAction_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($0, HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_setLinearVelocity_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btRigidBody__setLinearVelocity_28btVector3_20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_applyCentralForce_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btRigidBody__applyCentralForce_28btVector3_20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btPoint2PointConstraint_enableFeedback_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 btTypedConstraint__enableFeedback_28bool_29(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionShape_getMargin_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $3 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btVector3Array_at_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = btAlignedObjectArray_btVector3___at_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $1 = $2 + 16 | 0;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function btCylinderShape_getMargin_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $3 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btCompoundShape_getMargin_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $3 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btVector3Array___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  btAlignedObjectArray_btVector3____btAlignedObjectArray_28_29($0);
  operator_20delete_28void__29($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_setRestitution_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btCollisionObject__setRestitution_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_setAngularFactor_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btRigidBody__setAngularFactor_28btVector3_20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionObject_setFriction_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btCollisionObject__setFriction_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCapsuleShape_getMargin_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $3 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btSphereShape_getMargin_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $3 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btConvexShape_getMargin_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $3 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btCollisionObject_setCollisionFlags_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionObject__setCollisionFlags_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBoxShape_btBoxShape_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = btBoxShape__operator_20new_28unsigned_20long_29(64);
 btBoxShape__btBoxShape_28btVector3_20const__29($2, HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function btBoxBoxCollisionAlgorithm___btBoxBoxCollisionAlgorithm_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 HEAP32[$0 >> 2] = 7108;
 label$1 : {
  if (!HEAPU8[$0 + 8 | 0]) {
   break label$1;
  }
  $1 = HEAP32[$0 + 12 >> 2];
  if (!$1) {
   break label$1;
  }
  $2 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 }
 btActivatingCollisionAlgorithm___btActivatingCollisionAlgorithm_28_29($0);
 operator_20delete_28void__29($0);
}
function btAlignedAllocator_btCollisionObject_20const__2c_2016u___deallocate_28btCollisionObject_20const___29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btAlignedFreeInternal_28void__29(HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_setLinearFactor_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btRigidBody__setLinearFactor_28btVector3_20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHeightfieldTerrainShape_setUserIndex2_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex2_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHeightfieldTerrainShape_getLocalBoundingSphere_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btCollisionShape__getLocalBoundingSphere_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btConvexTriangleMeshShape_setUserIndex2_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex2_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexTriangleMeshShape_getLocalBoundingSphere_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btCollisionShape__getLocalBoundingSphere_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btAlignedObjectArray_btCollisionObject_20const_____btAlignedObjectArray_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 btAlignedObjectArray_btCollisionObject_20const____clear_28_29($2);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function btTypedConstraint_enableFeedback_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 btTypedConstraint__enableFeedback_28bool_29(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHingeConstraint_setAngularOnly_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 btHingeConstraint__setAngularOnly_28bool_29(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHingeConstraint_enableFeedback_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 btTypedConstraint__enableFeedback_28bool_29(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHeightfieldTerrainShape_setUserIndex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btFixedConstraint_enableFeedback_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 btTypedConstraint__enableFeedback_28bool_29(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexTriangleMeshShape_setUserIndex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBoxShape_getMargin_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $3 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btBU_Simplex1to4_addVertex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btBU_Simplex1to4__addVertex_28btVector3_20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btScalarArray___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  btAlignedObjectArray_float____btAlignedObjectArray_28_29($0);
  operator_20delete_28void__29($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_getLinearSleepingThreshold_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btRigidBody__getLinearSleepingThreshold_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btBvhTriangleMeshShape_setUserIndex2_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex2_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBvhTriangleMeshShape_getLocalBoundingSphere_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btCollisionShape__getLocalBoundingSphere_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btSphereTriangleCollisionAlgorithm___btSphereTriangleCollisionAlgorithm_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 HEAP32[$0 >> 2] = 9764;
 label$1 : {
  if (!HEAPU8[$0 + 8 | 0]) {
   break label$1;
  }
  $1 = HEAP32[$0 + 12 >> 2];
  if (!$1) {
   break label$1;
  }
  $2 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 }
 btActivatingCollisionAlgorithm___btActivatingCollisionAlgorithm_28_29($0);
 return $0 | 0;
}
function btRigidBody_setFriction_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btCollisionObject__setFriction_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexInternalShape_setUserIndex2_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex2_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexInternalShape_getLocalBoundingSphere_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btCollisionShape__getLocalBoundingSphere_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[$1 + 8 >> 2], 0)) {
  __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $1, $2, $3);
 }
}
function btTransform_setRotation_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btTransform__setRotation_28btQuaternion_20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_setCollisionFlags_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionObject__setCollisionFlags_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btMatrix3x3_getRotation_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btMatrix3x3__getRotation_28btQuaternion__29_20const(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBvhTriangleMeshShape_setUserIndex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccOverlapFilterCallback__ccOverlapFilterCallback_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 btOverlapFilterCallback__btOverlapFilterCallback_28_29($2);
 HEAP32[$2 >> 2] = 1580;
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function btTriangleMeshShape_setUserIndex2_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex2_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTriangleMeshShape_getLocalBoundingSphere_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btCollisionShape__getLocalBoundingSphere_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btConvexInternalShape_setUserIndex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionObject_activate_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 btCollisionObject__activate_28bool_29_20const(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTransform__setRotation_28btQuaternion_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btMatrix3x3__setRotation_28btQuaternion_20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btStaticPlaneShape_setUserIndex2_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex2_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btStaticPlaneShape_getLocalBoundingSphere_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btCollisionShape__getLocalBoundingSphere_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btEmptyAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $0 = HEAP32[$1 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 8) | 0;
 btEmptyAlgorithm__btEmptyAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__29($0, $1);
 return $0 | 0;
}
function btCollisionObject_setUserIndex2_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionObject__setUserIndex2_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTriangleMeshShape_setUserIndex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSphereSphereCollisionAlgorithm___btSphereSphereCollisionAlgorithm_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 HEAP32[$0 >> 2] = 5028;
 label$1 : {
  if (!HEAPU8[$0 + 8 | 0]) {
   break label$1;
  }
  $1 = HEAP32[$0 + 12 >> 2];
  if (!$1) {
   break label$1;
  }
  $2 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 }
 btActivatingCollisionAlgorithm___btActivatingCollisionAlgorithm_28_29($0);
 return $0 | 0;
}
function btRigidBody_applyTorque_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btRigidBody__applyTorque_28btVector3_20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btIntArray___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  btAlignedObjectArray_int____btAlignedObjectArray_28_29($0);
  operator_20delete_28void__29($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHingeConstraint_enableMotor_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 btHingeConstraint__enableMotor_28bool_29(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btClosestNotMeConvexResultCallback__needsCollision_28btBroadphaseProxy__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = HEAP32[$1 >> 2];
 $3 = HEAP32[$0 + 84 >> 2];
 if (!(!(HEAP32[$1 + 8 >> 2] & HEAP32[$0 + 8 >> 2]) | (!(HEAP32[$0 + 12 >> 2] & HEAP32[$1 + 4 >> 2]) | ($2 | 0) == ($3 | 0)))) {
  $0 = HEAP32[$0 + 96 >> 2];
  $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $3, $2) | 0;
 }
 return $4 | 0;
}
function btStaticPlaneShape_setUserIndex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionShape_setUserIndex2_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex2_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionShape_getLocalBoundingSphere_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btCollisionShape__getLocalBoundingSphere_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btCollisionObject_setUserIndex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionObject__setUserIndex_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBU_Simplex1to4_setUserIndex2_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex2_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBU_Simplex1to4_getLocalBoundingSphere_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btCollisionShape__getLocalBoundingSphere_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btAlignedAllocator_btPersistentManifold__2c_2016u___deallocate_28btPersistentManifold___29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btAlignedFreeInternal_28void__29(HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_setGravity_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btRigidBody__setGravity_28btVector3_20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCylinderShape_setUserIndex2_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex2_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCylinderShape_getLocalBoundingSphere_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btCollisionShape__getLocalBoundingSphere_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btCompoundShape_setUserIndex2_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex2_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundShape_getLocalBoundingSphere_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btCollisionShape__getLocalBoundingSphere_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function ccOverlapFilterCallback___ccOverlapFilterCallback_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 btOverlapFilterCallback___btOverlapFilterCallback_28_29($2);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function btTriangleIndexVertexArray___btTriangleIndexVertexArray_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 15164;
 $1 = HEAP32[$0 + 32 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 36 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 32 >> 2] = 0;
 }
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP8[$0 + 36 | 0] = 1;
 btStridingMeshInterface___btStridingMeshInterface_28_29($0);
 return $0 | 0;
}
function btConcaveShape_setUserIndex2_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex2_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConcaveShape_getLocalBoundingSphere_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btCollisionShape__getLocalBoundingSphere_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btCollisionShape_setUserIndex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCapsuleShape_setUserIndex2_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex2_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCapsuleShape_getLocalBoundingSphere_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btCollisionShape__getLocalBoundingSphere_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btBU_Simplex1to4_setUserIndex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTransform_setOrigin_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btTransform__setOrigin_28btVector3_20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSphereShape_setUserIndex2_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex2_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSphereShape_getLocalBoundingSphere_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btCollisionShape__getLocalBoundingSphere_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btRigidBody_activate_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 btCollisionObject__activate_28bool_29_20const(HEAP32[$2 + 12 >> 2], HEAP8[$2 + 11 | 0] & 1);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHingeConstraint_setAxis_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btHingeConstraint__setAxis_28btVector3__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCylinderShape_setUserIndex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexShape_setUserIndex2_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex2_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexShape_getLocalBoundingSphere_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btCollisionShape__getLocalBoundingSphere_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btCompoundShape_setUserIndex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_setUserIndex2_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionObject__setUserIndex2_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btEmptyShape_setUserIndex2_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex2_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btEmptyShape_getLocalBoundingSphere_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btCollisionShape__getLocalBoundingSphere_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btConvexInternalShape_getImplicitShapeDimensions_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btConvexInternalShape__getImplicitShapeDimensions_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btConcaveShape_setUserIndex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCapsuleShape_setUserIndex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTransform__setBasis_28btMatrix3x3_20const__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btMatrix3x3__operator__28btMatrix3x3_20const__29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSphereShape_setUserIndex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexShape_setUserIndex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConeShape_setUserIndex2_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex2_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConeShape_setRadius_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btConeShape__setRadius_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConeShape_setHeight_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btConeShape__setHeight_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConeShape_getLocalBoundingSphere_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btCollisionShape__getLocalBoundingSphere_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btCollisionShape__isCompound_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btBroadphaseProxy__isCompound_28int_29(btCollisionShape__getShapeType_28_29_20const(HEAP32[$1 + 12 >> 2])) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btTransform__getRotation_28_29_20const($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $1;
 $1 = HEAP32[$2 + 12 >> 2];
 btQuaternion__btQuaternion_28_29($0);
 btMatrix3x3__getRotation_28btQuaternion__29_20const($1, $0);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_setUserIndex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionObject__setUserIndex_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btEmptyShape_setUserIndex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBoxShape_setUserIndex2_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex2_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBoxShape_getLocalBoundingSphere_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btCollisionShape__getLocalBoundingSphere_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btAlignedAllocator_btTypedConstraint__2c_2016u___deallocate_28btTypedConstraint___29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btAlignedFreeInternal_28void__29(HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSequentialImpulseConstraintSolver__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btConeShape_setUserIndex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBroadphaseInterface_getOverlappingPairCache_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btConeShape_setConeUpIndex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btConeShape__setConeUpIndex_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBoxShape_setUserIndex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btCollisionShape__setUserIndex_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_btTypedConstraint_____btAlignedObjectArray_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 btAlignedObjectArray_btTypedConstraint____clear_28_29($2);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function btCollisionShape__isConvex_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btBroadphaseProxy__isConvex_28int_29(btCollisionShape__getShapeType_28_29_20const(HEAP32[$1 + 12 >> 2])) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btCylinderShape_getImplicitShapeDimensions_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btConvexInternalShape__getImplicitShapeDimensions_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCollisionObject_isStaticOrKinematicObject_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionObject__isStaticOrKinematicObject_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btHeightfieldTerrainShape_getLocalScaling_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btConvexTriangleMeshShape_getLocalScaling_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCapsuleShape_getImplicitShapeDimensions_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btConvexInternalShape__getImplicitShapeDimensions_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btBoxBoxCollisionAlgorithm___btBoxBoxCollisionAlgorithm_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 HEAP32[$0 >> 2] = 7108;
 label$1 : {
  if (!HEAPU8[$0 + 8 | 0]) {
   break label$1;
  }
  $1 = HEAP32[$0 + 12 >> 2];
  if (!$1) {
   break label$1;
  }
  $2 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 }
 btActivatingCollisionAlgorithm___btActivatingCollisionAlgorithm_28_29($0);
 return $0 | 0;
}
function btSphereShape_getImplicitShapeDimensions_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btConvexInternalShape__getImplicitShapeDimensions_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btGeneric6DofSpring2Constraint__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btDbvtBroadphase_getOverlappingPairCache_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btRigidBody___btRigidBody_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 2252;
 $1 = HEAP32[$0 + 556 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 560 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 556 >> 2] = 0;
 }
 HEAP32[$0 + 556 >> 2] = 0;
 HEAP32[$0 + 548 >> 2] = 0;
 HEAP32[$0 + 552 >> 2] = 0;
 HEAP8[$0 + 560 | 0] = 1;
 btCollisionObject___btCollisionObject_28_29($0);
 btAlignedFreeInternal_28void__29($0);
}
function btQuaternion__length2_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $3 = btQuaternion__dot_28btQuaternion_20const__29_20const($0, $0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $3;
}
function btVector3__operator___28btVector3_20const__29_1($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] - HEAPF32[HEAP32[$2 + 8 >> 2] >> 2];
 HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] - HEAPF32[HEAP32[$2 + 8 >> 2] + 4 >> 2];
 HEAPF32[$0 + 8 >> 2] = HEAPF32[$0 + 8 >> 2] - HEAPF32[HEAP32[$2 + 8 >> 2] + 8 >> 2];
 return $0;
}
function btConeShape_getImplicitShapeDimensions_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btConvexInternalShape__getImplicitShapeDimensions_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCollisionDispatcher___btCollisionDispatcher_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 4072;
 $1 = HEAP32[$0 + 20 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 24 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 20 >> 2] = 0;
 }
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP8[$0 + 24 | 0] = 1;
 btDispatcher___btDispatcher_28_29($0);
 operator_20delete_28void__29($0);
}
function btBvhTriangleMeshShape_getLocalScaling_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btQuaternion_setZ_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btQuadWord__setZ_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuaternion_setY_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btQuadWord__setY_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuaternion_setX_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btQuadWord__setX_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuaternion_setW_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btQuadWord__setW_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexInternalShape_getLocalScaling_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btConstCollisionObjectArray_size_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedObjectArray_btCollisionObject_20const____size_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCollisionDispatcher_getNumManifolds_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btBoxShape_getImplicitShapeDimensions_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btConvexInternalShape__getImplicitShapeDimensions_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btVector3__operator___28btVector3_20const__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] + HEAPF32[HEAP32[$2 + 8 >> 2] >> 2];
 HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] + HEAPF32[HEAP32[$2 + 8 >> 2] + 4 >> 2];
 HEAPF32[$0 + 8 >> 2] = HEAPF32[$0 + 8 >> 2] + HEAPF32[HEAP32[$2 + 8 >> 2] + 8 >> 2];
 return $0;
}
function btTriangleIndexVertexArray__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btSequentialImpulseConstraintSolver___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_isStaticOrKinematicObject_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionObject__isStaticOrKinematicObject_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCompoundShape__getNumChildShapes_28_29_20const($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedObjectArray_btCompoundShapeChild___size_28_29_20const(HEAP32[$1 + 12 >> 2] + 20 | 0);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btAlignedAllocator_btIndexedMesh_2c_2016u___deallocate_28btIndexedMesh__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btAlignedFreeInternal_28void__29(HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTriangleMeshShape_getLocalScaling_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btStaticPlaneShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 HEAP32[$2 + 8 >> 2] = -581039253;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 >> 2] = -581039253;
 HEAP32[$2 + 4 >> 2] = -581039253;
 $2 = $3;
 HEAP32[$2 + 8 >> 2] = 1566444395;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP32[$2 >> 2] = 1566444395;
 HEAP32[$2 + 4 >> 2] = 1566444395;
}
function btQuadWord_setZ_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btQuadWord__setZ_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuadWord_setY_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btQuadWord__setY_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuadWord_setX_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btQuadWord__setX_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuadWord_setW_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btQuadWord__setW_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHeightfieldTerrainShape__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btConvexTriangleMeshShape__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function sbrk($0) {
 var $1 = 0, $2 = 0, $3 = 0;
 $2 = emscripten_get_sbrk_ptr();
 $1 = HEAP32[$2 >> 2];
 $3 = $0 + 3 & -4;
 $0 = $1 + $3 | 0;
 label$1 : {
  if ($0 >>> 0 <= $1 >>> 0 ? ($3 | 0) >= 1 : 0) {
   break label$1;
  }
  if ($0 >>> 0 > __wasm_memory_size() << 16 >>> 0) {
   if (!emscripten_resize_heap($0 | 0)) {
    break label$1;
   }
  }
  HEAP32[$2 >> 2] = $0;
  return $1;
 }
 HEAP32[__errno_location() >> 2] = 48;
 return -1;
}
function ccDiscreteDynamicsWorld_getCcdTriggerRecorder_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = ccDiscreteDynamicsWorld__getCcdTriggerRecorder_28_29(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btStaticPlaneShape_getLocalScaling_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCollisionWorld__getPairCache_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[HEAP32[$1 + 12 >> 2] + 68 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btAlignedObjectArray_btIndexedMesh____btAlignedObjectArray_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 btAlignedObjectArray_btIndexedMesh___clear_28_29($2);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function ccDiscreteDynamicsWorld__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btVector3_setZ_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btVector3__setZ_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btVector3_setY_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btVector3__setY_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btVector3_setX_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 btVector3__setX_28float_29(HEAP32[$2 + 12 >> 2], HEAPF32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btPoint2PointConstraint__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btDiscreteDynamicsWorld__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btVector3__dot_28btVector3_20const__29_20const($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 return Math_fround(Math_fround(Math_fround(HEAPF32[$0 >> 2] * HEAPF32[HEAP32[$2 + 8 >> 2] >> 2]) + Math_fround(HEAPF32[$0 + 4 >> 2] * HEAPF32[HEAP32[$2 + 8 >> 2] + 4 >> 2])) + Math_fround(HEAPF32[$0 + 8 >> 2] * HEAPF32[HEAP32[$2 + 8 >> 2] + 8 >> 2]));
}
function btRigidBody_setFlags_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btRigidBody__setFlags_28int_29(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHashedOverlappingPairCache__cleanProxyFromPairs_28btBroadphaseProxy__2c_20btDispatcher__29__CleanPairCallback__processOverlap_28btBroadphasePair__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2];
 if (!(HEAP32[$1 + 4 >> 2] != ($2 | 0) ? ($2 | 0) != HEAP32[$1 >> 2] : 0)) {
  $2 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 32 >> 2]]($2, $1, HEAP32[$0 + 12 >> 2]);
 }
 return 0;
}
function btDefaultCollisionConfiguration___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionShape_getLocalScaling_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btBvhTriangleMeshShape__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btBU_Simplex1to4_getLocalScaling_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function ccClosestRayResultCallback_hasHit_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionWorld__RayResultCallback__hasHit_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function ccAllHitsRayResultCallback_hasHit_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionWorld__RayResultCallback__hasHit_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCylinderShape_getLocalScaling_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCompoundShape_getLocalScaling_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btVector3__length2_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $3 = btVector3__dot_28btVector3_20const__29_20const($0, $0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $3;
}
function btPersistentManifold__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btDefaultMotionState__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btConcaveShape_getLocalScaling_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCapsuleShape_getLocalScaling_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btSphereShape_getLocalScaling_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btConvexShape_getLocalScaling_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function ClosestRayResultCallback_hasHit_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionWorld__RayResultCallback__hasHit_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function AllHitsRayResultCallback_hasHit_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionWorld__RayResultCallback__hasHit_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btTriangleMeshShape__btTriangleMeshShape_28btStridingMeshInterface__29($0, $1) {
 btConcaveShape__btConcaveShape_28_29($0);
 HEAP32[$0 + 52 >> 2] = $1;
 HEAP32[$0 >> 2] = 12164;
 HEAP32[$0 + 4 >> 2] = 21;
 if (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 40 >> 2]]($1)) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1, $0 + 20 | 0, $0 + 36 | 0);
  return $0;
 }
 btTriangleMeshShape__recalcLocalAabb_28_29($0);
 return $0;
}
function btStaticPlaneShape__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btEmptyShape_getLocalScaling_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btDispatcher_getNumManifolds_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btAlignedAllocator_btVector3_2c_2016u___deallocate_28btVector3__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btAlignedFreeInternal_28void__29(HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccClosestRayResultCallback___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccAllHitsRayResultCallback___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHingeConstraint__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btConeShape_getLocalScaling_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCollisionObject__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btOverlappingPairCallback___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHeightfieldTerrainShape___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexTriangleMeshShape___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionObject_isKinematicObject_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionObject__isKinematicObject_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btBoxShape_getLocalScaling_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btBU_Simplex1to4__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btAlignedObjectArray_btVector3____btAlignedObjectArray_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 btAlignedObjectArray_btVector3___clear_28_29($2);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function btHashedOverlappingPairCache__cleanOverlappingPair_28btBroadphasePair__2c_20btDispatcher__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 label$1 : {
  if (!$2) {
   break label$1;
  }
  $0 = HEAP32[$1 + 8 >> 2];
  if (!$0) {
   break label$1;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0) | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 60 >> 2]]($2, HEAP32[$1 + 8 >> 2]);
  HEAP32[$1 + 8 >> 2] = 0;
 }
}
function btCylinderShape__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btCompoundShape__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btCollisionConfiguration___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ClosestRayResultCallback___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function AllHitsRayResultCallback___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccOverlapFilterCallback___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTriangleMesh_getIndexedMeshArray_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btTriangleIndexVertexArray__getIndexedMeshArray_28_29(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btTransform__btTransform_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 btMatrix3x3__btMatrix3x3_28_29($2);
 btVector3__btVector3_28_29($2 + 48 | 0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function btStridingMeshInterface___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_getCenterOfMassTransform_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btRigidBody__getCenterOfMassTransform_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btPoint2PointConstraint___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btOverlapFilterCallback___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btManifoldPoint_getAppliedImpulse_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = +btManifoldPoint__getAppliedImpulse_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return +$3;
}
function btDiscreteDynamicsWorld___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDefaultMotionState___btDefaultMotionState_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 btMotionState___btMotionState_28_29($2);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2 | 0;
}
function btCollisionObject_getActivationState_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionObject__getActivationState_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCapsuleShape__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btSphereShape__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btPersistentManifold___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  btPersistentManifold__operator_20delete_28void__29($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btOverlappingPairCache___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBvhTriangleMeshShape___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btQuaternion_z_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = HEAPF32[btQuadWord__z_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btQuaternion_y_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = HEAPF32[btQuadWord__y_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btQuaternion_x_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = HEAPF32[btQuadWord__x_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btQuaternion_w_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = HEAPF32[btQuadWord__w_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btPoint2PointConstraint_getPivotInB_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btPoint2PointConstraint__getPivotInB_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btPoint2PointConstraint_getPivotInA_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btPoint2PointConstraint__getPivotInA_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btPersistentManifold_getNumContacts_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btPersistentManifold__getNumContacts_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btEmptyShape__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btConvexTriangleCallback___btConvexTriangleCallback_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 6372;
 $1 = HEAP32[$0 + 48 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($1, HEAP32[$0 + 64 >> 2]);
 $1 = HEAP32[$0 + 48 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, HEAP32[$0 + 64 >> 2]);
 btTriangleCallback___btTriangleCallback_28_29($0);
 btAlignedFreeInternal_28void__29($0);
}
function btConvexInternalShape___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionObject_getCollisionFlags_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionObject__getCollisionFlags_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCollisionDispatcher___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBroadphaseInterface___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
 var $6 = 0, $7 = 0;
 $7 = HEAP32[$0 + 4 >> 2];
 $6 = $7 >> 8;
 $0 = HEAP32[$0 >> 2];
 $6 = $7 & 1 ? HEAP32[HEAP32[$3 >> 2] + $6 >> 2] : $6;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $2, $6 + $3 | 0, $7 & 2 ? $4 : 2, $5);
}
function RayResultCallback_hasHit_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionWorld__RayResultCallback__hasHit_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btHeightfieldTerrainShape_getUserIndex2_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex2_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btDefaultMotionState___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexTriangleMeshShape_getUserIndex2_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex2_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btConeShape__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btVector3__length_28_29_20const($0) {
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = btSqrt_28float_29(btVector3__length2_28_29_20const(HEAP32[$1 + 12 >> 2]));
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $3;
}
function btTriangleMeshShape___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_isKinematicObject_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionObject__isKinematicObject_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btRigidBody__applyGravity_28_29($0) {
 if (!(HEAPU8[$0 + 204 | 0] & 3)) {
  HEAPF32[$0 + 472 >> 2] = Math_fround(HEAPF32[$0 + 424 >> 2] * HEAPF32[$0 + 408 >> 2]) + HEAPF32[$0 + 472 >> 2];
  HEAPF32[$0 + 476 >> 2] = Math_fround(HEAPF32[$0 + 428 >> 2] * HEAPF32[$0 + 412 >> 2]) + HEAPF32[$0 + 476 >> 2];
  HEAPF32[$0 + 480 >> 2] = Math_fround(HEAPF32[$0 + 432 >> 2] * HEAPF32[$0 + 416 >> 2]) + HEAPF32[$0 + 480 >> 2];
 }
}
function btQuadWord_z_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = HEAPF32[btQuadWord__z_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btQuadWord_y_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = HEAPF32[btQuadWord__y_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btQuadWord_x_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = HEAPF32[btQuadWord__x_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btQuadWord_w_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = HEAPF32[btQuadWord__w_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btCollisionObject_isStaticObject_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionObject__isStaticObject_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btBoxShape__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btAlignedAllocator_float_2c_2016u___deallocate_28float__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btAlignedFreeInternal_28void__29(HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btVector3__operator_20new_28unsigned_20long_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(HEAP32[$1 + 12 >> 2], 16);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0;
}
function btStaticPlaneShape___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btHeightfieldTerrainShape_isCompound_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__isCompound_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btHeightfieldTerrainShape_getUserIndex_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btConvexTriangleMeshShape_isCompound_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__isCompound_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btConvexTriangleMeshShape_getUserIndex_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btConstraintSolver___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBoxShape__getEdge_28int_2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0, $6 = 0;
 $4 = $0;
 if ($1 >>> 0 <= 11) {
  $1 = $1 << 2;
  $5 = HEAP32[$1 + 14300 >> 2];
  $6 = HEAP32[$1 + 14252 >> 2];
 }
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($4, $6, $2);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, $5, $3);
}
function btVector3_z_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = HEAPF32[btVector3__z_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btVector3_y_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = HEAPF32[btVector3__y_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btVector3_x_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = HEAPF32[btVector3__x_28_29_20const(HEAP32[$1 + 12 >> 2]) >> 2];
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return Math_fround($3);
}
function btTypedConstraint___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btStaticPlaneShape_getPlaneNormal_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btStaticPlaneShape__getPlaneNormal_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btRigidBody_getActivationState_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionObject__getActivationState_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btHingeConstraint___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btFixedConstraint___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundShape_getNumChildShapes_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCompoundShape__getNumChildShapes_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__btCompoundLeafCallback__ProcessChild_28int_2c_20btTransform_20const__2c_20btCollisionShape_20const__29__LocalInfoAdder___LocalInfoAdder_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btCollisionObject___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBvhTriangleMeshShape_getUserIndex2_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex2_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btAlignedObjectArray_float____btAlignedObjectArray_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 btAlignedObjectArray_float___clear_28_29($2);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function btActionInterface___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function RayResultCallback___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDbvtBroadphase___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexInternalShape_getUserIndex2_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex2_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCollisionWorld___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionShape___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionDispatcher___btCollisionDispatcher_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 4072;
 $1 = HEAP32[$0 + 20 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 24 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 20 >> 2] = 0;
 }
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP8[$0 + 24 | 0] = 1;
 btDispatcher___btDispatcher_28_29($0);
 return $0 | 0;
}
function btBroadphaseProxy___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  btBroadphaseProxy__operator_20delete_28void__29($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBU_Simplex1to4___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_getCollisionFlags_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionObject__getCollisionFlags_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btDynamicsWorld___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCylinderShape___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCompoundShape___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btBvhTriangleMeshShape_isCompound_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__isCompound_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btBvhTriangleMeshShape_getUserIndex_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btAlignedAllocator_int_2c_2016u___deallocate_28int__29($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = global$0 - 16 | 0;
 $3 = $2;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $3;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 btAlignedFreeInternal_28void__29(HEAP32[$2 + 8 >> 2]);
 $0 = $2 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTriangleMesh___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTriangleMeshShape_getUserIndex2_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex2_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btIndexedMeshArray_size_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedObjectArray_btIndexedMesh___size_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btDefaultCollisionConstructionInfo___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexInternalShape_isCompound_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__isCompound_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btConvexInternalShape_getUserIndex_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btConcaveShape___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCapsuleShape___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btStaticPlaneShape_getUserIndex2_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex2_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btSphereShape___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_isStaticObject_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionObject__isStaticObject_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btMotionState___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexShape___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionObject_getWorldTransform_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionObject__getWorldTransform_28_29(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCollisionObject_getCollisionShape_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionObject__getCollisionShape_28_29(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btAlignedObjectArray_int____btAlignedObjectArray_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 btAlignedObjectArray_int___clear_28_29($2);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function btTriangleMeshShape_isCompound_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__isCompound_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btTriangleMeshShape_getUserIndex_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btEmptyShape___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDispatcher___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btStaticPlaneShape_isCompound_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__isCompound_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btStaticPlaneShape_getUserIndex_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btRigidBody_getAngularVelocity_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btRigidBody__getAngularVelocity_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btRigidBody___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btManifoldPoint_getDistance_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $3 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $3 = +btManifoldPoint__getDistance_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return +$3;
}
function btConeShape___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionShape_getUserIndex2_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex2_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCollisionObject_getUserIndex_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionObject__getUserIndex_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btBU_Simplex1to4_getUserIndex2_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex2_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btDbvtTreeCollider__Process_28btDbvtNode_20const__2c_20btDbvtNode_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 if (($1 | 0) != ($2 | 0)) {
  $3 = HEAP32[HEAP32[$0 + 4 >> 2] + 96 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, HEAP32[$1 + 36 >> 2], HEAP32[$2 + 36 >> 2]) | 0;
  $1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 120 >> 2] = HEAP32[$1 + 120 >> 2] + 1;
 }
}
function btCylinderShape_getUserIndex2_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex2_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCompoundShape_getUserIndex2_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex2_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btBoxShape___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld_getSolverInfo_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btDynamicsWorld__getSolverInfo_28_29(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btRigidBody_getLinearVelocity_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btRigidBody__getLinearVelocity_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btPersistentManifold_getBody1_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btPersistentManifold__getBody1_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btPersistentManifold_getBody0_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btPersistentManifold__getBody0_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btDiscreteDynamicsWorld_getSolverInfo_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btDynamicsWorld__getSolverInfo_28_29(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btConstCollisionObjectArray_clear_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 btAlignedObjectArray_btCollisionObject_20const____clear_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConcaveShape_getUserIndex2_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex2_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCollisionShape_isCompound_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__isCompound_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCollisionShape_getUserIndex_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCapsuleShape_getUserIndex2_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex2_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btBU_Simplex1to4_isCompound_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__isCompound_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btBU_Simplex1to4_getUserIndex_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function ccDiscreteDynamicsWorld_getPairCache_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionWorld__getPairCache_28_29(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btSphereShape_getUserIndex2_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex2_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btIndexedMesh___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  btIndexedMesh__operator_20delete_28void__29($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDiscreteDynamicsWorld_getPairCache_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionWorld__getPairCache_28_29(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCylinderShape_isCompound_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__isCompound_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCylinderShape_getUserIndex_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btConvexShape_getUserIndex2_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex2_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCompoundShape_isCompound_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__isCompound_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCompoundShape_getUserIndex_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btSphereShape___btSphereShape_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 btConvexInternalShape___btConvexInternalShape_28_29($2);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function btRigidBody_getWorldTransform_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionObject__getWorldTransform_28_29(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btRigidBody_getAngularFactor_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btRigidBody__getAngularFactor_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btRigidBodyConstructionInfo___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btEmptyShape_getUserIndex2_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex2_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btConvexInternalShape___btConvexInternalShape_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 btConvexShape___btConvexShape_28_29($2);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function btConcaveShape_isCompound_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__isCompound_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btConcaveShape_getUserIndex_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCollisionObject_isActive_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionObject__isActive_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCapsuleShape_isCompound_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__isCompound_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCapsuleShape_getUserIndex_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btVector3Array_size_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedObjectArray_btVector3___size_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btSphereShape_isCompound_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__isCompound_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btSphereShape_getUserIndex_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btPoint2PointConstraint_set_m_setting_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $3 = HEAP32[$2 + 8 >> 2];
 $0 = HEAP32[$3 >> 2];
 $4 = HEAP32[$3 + 4 >> 2];
 $1 = $0;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 + 348 >> 2] = $1;
 HEAP32[$0 + 352 >> 2] = $4;
 HEAP32[$0 + 356 >> 2] = HEAP32[$3 + 8 >> 2];
}
function btConvexShape_isCompound_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__isCompound_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btConvexShape_getUserIndex_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btConvexPolyhedron__btConvexPolyhedron_28_29($0) {
 HEAP32[$0 >> 2] = 11348;
 HEAP8[$0 + 20 | 0] = 1;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP8[$0 + 40 | 0] = 1;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP8[$0 + 60 | 0] = 1;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 return $0;
}
function btConeShape_getUserIndex2_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex2_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btRigidBody_getUserIndex_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionObject__getUserIndex_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btRigidBody_getLinearFactor_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btRigidBody__getLinearFactor_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btEmptyShape_isCompound_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__isCompound_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btEmptyShape_getUserIndex_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btBoxShape_getUserIndex2_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex2_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btConeShape_isCompound_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__isCompound_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btConeShape_getUserIndex_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btRigidBody_getTotalTorque_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btRigidBody__getTotalTorque_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__BridgeTriangleConvexcastCallback___BridgeTriangleConvexcastCallback_28_29_1($0) {
 $0 = $0 | 0;
 btTriangleCallback___btTriangleCallback_28_29($0);
 operator_20delete_28void__29($0);
}
function btBoxShape_isCompound_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__isCompound_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btBoxShape_getUserIndex_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionShape__getUserIndex_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btScalarArray_size_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedObjectArray_float___size_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btRigidBody_isActive_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionObject__isActive_28_29_20const(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btRigidBody_getTotalForce_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btRigidBody__getTotalForce_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btRigidBody_getCollisionShape_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btRigidBody__getCollisionShape_28_29(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btDynamicsWorld_getSolverInfo_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btDynamicsWorld__getSolverInfo_28_29(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCollisionWorld_getPairCache_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionWorld__getPairCache_28_29(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__BridgeTriangleConvexcastCallback___BridgeTriangleConvexcastCallback_28_29($0) {
 $0 = $0 | 0;
 btTriangleCallback___btTriangleCallback_28_29($0);
 operator_20delete_28void__29($0);
}
function btAngularLimit__getHigh_28_29_20const($0) {
 var $1 = Math_fround(0);
 $1 = fmodf(Math_fround(HEAPF32[$0 >> 2] + HEAPF32[$0 + 4 >> 2]), Math_fround(6.2831854820251465));
 if (!!($1 < Math_fround(-3.1415927410125732))) {
  return Math_fround($1 + Math_fround(6.2831854820251465));
 }
 $1 = $1 > Math_fround(3.1415927410125732) ^ 1 ? $1 : Math_fround($1 + Math_fround(-6.2831854820251465));
 return $1;
}
function btVoronoiSimplexSolver__closest_28btVector3__29($0, $1) {
 var $2 = 0, $3 = 0, $4 = 0;
 $4 = btVoronoiSimplexSolver__updateClosestVectorAndPoints_28_29($0);
 $2 = $0;
 $0 = HEAP32[$2 + 284 >> 2];
 $3 = HEAP32[$2 + 288 >> 2];
 HEAP32[$1 + 8 >> 2] = $0;
 HEAP32[$1 + 12 >> 2] = $3;
 $0 = HEAP32[$2 + 280 >> 2];
 $3 = HEAP32[$2 + 276 >> 2];
 HEAP32[$1 >> 2] = $3;
 HEAP32[$1 + 4 >> 2] = $0;
 return $4;
}
function btVector3___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  btVector3__operator_20delete_28void__29($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDynamicsWorld_getPairCache_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btCollisionWorld__getPairCache_28_29(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btCollisionObject___btCollisionObject_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 3980;
 $1 = HEAP32[$0 + 296 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 300 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 296 >> 2] = 0;
 }
 HEAP32[$0 + 296 >> 2] = 0;
 HEAP32[$0 + 288 >> 2] = 0;
 HEAP32[$0 + 292 >> 2] = 0;
 HEAP8[$0 + 300 | 0] = 1;
 btAlignedFreeInternal_28void__29($0);
}
function btAngularLimit__getLow_28_29_20const($0) {
 var $1 = Math_fround(0);
 $1 = fmodf(Math_fround(HEAPF32[$0 >> 2] - HEAPF32[$0 + 4 >> 2]), Math_fround(6.2831854820251465));
 if (!!($1 < Math_fround(-3.1415927410125732))) {
  return Math_fround($1 + Math_fround(6.2831854820251465));
 }
 $1 = $1 > Math_fround(3.1415927410125732) ^ 1 ? $1 : Math_fround($1 + Math_fround(-6.2831854820251465));
 return $1;
}
function btHingeConstraint__enableAngularMotor_28bool_2c_20float_2c_20float_29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = global$0 - 16 | 0;
 HEAP32[$4 + 12 >> 2] = $0;
 HEAP8[$4 + 11 | 0] = $1;
 HEAPF32[$4 + 4 >> 2] = $2;
 HEAPF32[$4 >> 2] = $3;
 $0 = HEAP32[$4 + 12 >> 2];
 HEAP8[$0 + 737 | 0] = HEAP8[$4 + 11 | 0] & 1;
 HEAPF32[$0 + 680 >> 2] = HEAPF32[$4 + 4 >> 2];
 HEAPF32[$0 + 684 >> 2] = HEAPF32[$4 >> 2];
}
function btContactSolverInfo___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConstraintSetting___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_wantsSleeping_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btRigidBody__wantsSleeping_28_29(HEAP32[$1 + 12 >> 2]) & 1;
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btIntArray_size_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btAlignedObjectArray_int___size_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btConvexTriangleCallback___btConvexTriangleCallback_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 6372;
 $1 = HEAP32[$0 + 48 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($1, HEAP32[$0 + 64 >> 2]);
 $1 = HEAP32[$0 + 48 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, HEAP32[$0 + 64 >> 2]);
 btTriangleCallback___btTriangleCallback_28_29($0);
 return $0 | 0;
}
function btRigidBody_getMotionState_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btRigidBody__getMotionState_28_29(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btManifoldPoint___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexPlaneCollisionAlgorithm___btConvexPlaneCollisionAlgorithm_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 HEAP32[$0 >> 2] = 6184;
 label$1 : {
  if (!HEAPU8[$0 + 8 | 0]) {
   break label$1;
  }
  $1 = HEAP32[$0 + 12 >> 2];
  if (!$1) {
   break label$1;
  }
  $2 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 }
 operator_20delete_28void__29($0);
}
function __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
 var $5 = 0, $6 = 0;
 $6 = HEAP32[$0 + 4 >> 2];
 $5 = $6 >> 8;
 $0 = HEAP32[$0 >> 2];
 $5 = $6 & 1 ? HEAP32[HEAP32[$2 >> 2] + $5 >> 2] : $5;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $5 + $2 | 0, $6 & 2 ? $3 : 2, $4);
}
function LocalShapeInfo___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btManifoldPoint_getShape1_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btManifoldPoint__getShape1_28_29(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btManifoldPoint_getShape0_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btManifoldPoint__getShape0_28_29(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btConvexInternalShape__setLocalScaling_28btVector3_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0);
 $2 = HEAPF32[$1 >> 2];
 $3 = HEAPF32[$1 + 4 >> 2];
 $4 = HEAPF32[$1 + 8 >> 2];
 HEAP32[$0 + 28 >> 2] = 0;
 HEAPF32[$0 + 24 >> 2] = Math_abs($4);
 HEAPF32[$0 + 20 >> 2] = Math_abs($3);
 HEAPF32[$0 + 16 >> 2] = Math_abs($2);
}
function btQuaternion___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCylinderShape__getRadius_28_29_20const($0) {
 $0 = $0 | 0;
 var $1 = Math_fround(0), $2 = Math_fround(0);
 $1 = HEAPF32[$0 + 32 >> 2];
 $2 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 return Math_fround(Math_fround($1 + $2));
}
function btTransform___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_getFlags_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btRigidBody__getFlags_28_29_20const(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btMatrix3x3___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCollisionDispatcher__needsResponse_28btCollisionObject_20const__2c_20btCollisionObject_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $1 = HEAP32[$1 + 204 >> 2];
 label$1 : {
  if ($1 & 4) {
   break label$1;
  }
  $2 = HEAP32[$2 + 204 >> 2];
  if ($2 & 4) {
   break label$1;
  }
  if (!($1 & 3)) {
   return 1;
  }
  $3 = !($2 & 3);
 }
 return $3 | 0;
}
function btQuadWord___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function strcmp($0, $1) {
 var $2 = 0, $3 = 0;
 $2 = HEAPU8[$0 | 0];
 $3 = HEAPU8[$1 | 0];
 label$1 : {
  if (!$2 | ($2 | 0) != ($3 | 0)) {
   break label$1;
  }
  while (1) {
   $3 = HEAPU8[$1 + 1 | 0];
   $2 = HEAPU8[$0 + 1 | 0];
   if (!$2) {
    break label$1;
   }
   $1 = $1 + 1 | 0;
   $0 = $0 + 1 | 0;
   if (($2 | 0) == ($3 | 0)) {
    continue;
   }
   break;
  }
 }
 return $2 - $3 | 0;
}
function recursedeletenode_28btDbvt__2c_20btDbvtNode__29($0, $1) {
 if (HEAP32[$1 + 40 >> 2]) {
  recursedeletenode_28btDbvt__2c_20btDbvtNode__29($0, HEAP32[$1 + 36 >> 2]);
  recursedeletenode_28btDbvt__2c_20btDbvtNode__29($0, HEAP32[$1 + 40 >> 2]);
 }
 if (HEAP32[$0 >> 2] == ($1 | 0)) {
  HEAP32[$0 >> 2] = 0;
 }
 btAlignedFreeInternal_28void__29(HEAP32[$0 + 4 >> 2]);
 HEAP32[$0 + 4 >> 2] = $1;
}
function btCollisionObject_activate_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 btCollisionObject__activate_28bool_29_20const(HEAP32[$1 + 12 >> 2], 0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function ccDiscreteDynamicsWorld_getFixedBody_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btDynamicsWorld__getFixedBody_28_29();
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btDiscreteDynamicsWorld_getFixedBody_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btDynamicsWorld__getFixedBody_28_29();
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btBU_Simplex1to4__getVertex_28int_2c_20btVector3__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $0 = ($1 << 4) + $0 | 0;
 $3 = $0;
 $0 = HEAP32[$3 + 108 >> 2];
 $1 = HEAP32[$3 + 112 >> 2];
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $1;
 $0 = HEAP32[$3 + 104 >> 2];
 $1 = HEAP32[$3 + 100 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $0;
}
function VoidPtr___destroy___0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 if ($0) {
  operator_20delete_28void__29($0);
 }
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTransform_getOrigin_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btTransform__getOrigin_28_29(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function ccDiscreteDynamicsWorld__operator_20delete_28void__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 btAlignedFreeInternal_28void__29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btSimulationIslandManager__btSimulationIslandManager_28_29($0) {
 HEAP32[$0 >> 2] = 6080;
 btUnionFind__btUnionFind_28_29($0 + 4 | 0);
 HEAP32[$0 + 36 >> 2] = 0;
 HEAP8[$0 + 40 | 0] = 1;
 HEAP8[$0 + 60 | 0] = 1;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP8[$0 + 64 | 0] = 1;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 return $0;
}
function btRigidBody_updateInertiaTensor_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 btRigidBody__updateInertiaTensor_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTransform_getBasis_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btTransform__getBasis_28_29(HEAP32[$1 + 12 >> 2]);
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btRigidBody_activate_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 btCollisionObject__activate_28bool_29_20const(HEAP32[$1 + 12 >> 2], 0);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTriangleShape__getVertex_28int_2c_20btVector3__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $0 = ($1 << 4) + $0 | 0;
 $3 = $0;
 $0 = HEAP32[$3 + 68 >> 2];
 $1 = HEAP32[$3 + 72 >> 2];
 HEAP32[$2 + 8 >> 2] = $0;
 HEAP32[$2 + 12 >> 2] = $1;
 $0 = HEAP32[$3 + 64 >> 2];
 $1 = HEAP32[$3 + 60 >> 2];
 HEAP32[$2 >> 2] = $1;
 HEAP32[$2 + 4 >> 2] = $0;
}
function btBvhTriangleMeshShape___btBvhTriangleMeshShape_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 11532;
 if (HEAPU8[$0 + 65 | 0]) {
  $1 = HEAP32[$0 + 56 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 56 >> 2]);
 }
 btTriangleMeshShape___btTriangleMeshShape_28_29($0);
 btAlignedFreeInternal_28void__29($0);
}
function btQuaternion__btQuaternion_28_29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAP32[$1 + 12 >> 2];
 btQuadWord__btQuadWord_28_29($2);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
 return $2;
}
function btPersistentManifold__operator_20delete_28void__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 btAlignedFreeInternal_28void__29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDefaultMotionState__operator_20delete_28void__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 btAlignedFreeInternal_28void__29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_btCollisionObject_20const____destroy_28int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = HEAP32[$3 + 8 >> 2];
 while (1) {
  if (HEAP32[$3 >> 2] < HEAP32[$3 + 4 >> 2]) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
   continue;
  }
  break;
 }
}
function btVector3Array_clear_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 btAlignedObjectArray_btVector3___clear_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody__btRigidBody_28btRigidBody__btRigidBodyConstructionInfo_20const__29($0, $1) {
 btCollisionObject__btCollisionObject_28_29($0);
 HEAP8[$0 + 560 | 0] = 1;
 HEAP32[$0 >> 2] = 2252;
 HEAP32[$0 + 556 >> 2] = 0;
 HEAP32[$0 + 548 >> 2] = 0;
 HEAP32[$0 + 552 >> 2] = 0;
 btRigidBody__setupRigidBody_28btRigidBody__btRigidBodyConstructionInfo_20const__29($0, $1);
 return $0;
}
function btDynamicsWorld_getFixedBody_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = btDynamicsWorld__getFixedBody_28_29();
 $2 = $1 + 16 | 0;
 if ($2 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 return $0 | 0;
}
function btConvexTriangleMeshShape__btConvexTriangleMeshShape_28btStridingMeshInterface__2c_20bool_29($0, $1, $2) {
 var $3 = 0;
 $3 = btPolyhedralConvexAabbCachingShape__btPolyhedralConvexAabbCachingShape_28_29($0);
 HEAP32[$0 + 96 >> 2] = $1;
 HEAP32[$0 >> 2] = 13660;
 HEAP32[$0 + 4 >> 2] = 3;
 if ($2) {
  btPolyhedralConvexAabbCachingShape__recalcLocalAabb_28_29($3);
 }
 return $0;
}
function btBroadphaseProxy__operator_20delete_28void__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 btAlignedFreeInternal_28void__29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btCapsuleShape__btCapsuleShape_28float_2c_20float_29($0, $1, $2) {
 btConvexInternalShape__btConvexInternalShape_28_29($0);
 HEAPF32[$0 + 48 >> 2] = $1;
 HEAP32[$0 >> 2] = 13496;
 HEAP32[$0 + 56 >> 2] = 1;
 HEAP32[$0 + 4 >> 2] = 10;
 HEAP32[$0 + 44 >> 2] = 0;
 HEAPF32[$0 + 40 >> 2] = $1;
 HEAPF32[$0 + 36 >> 2] = $2 * Math_fround(.5);
 HEAPF32[$0 + 32 >> 2] = $1;
 return $0;
}
function btAlignedObjectArray_btPersistentManifold____destroy_28int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = HEAP32[$3 + 8 >> 2];
 while (1) {
  if (HEAP32[$3 >> 2] < HEAP32[$3 + 4 >> 2]) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
   continue;
  }
  break;
 }
}
function btContinuousConvexCollision__btContinuousConvexCollision_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($0, $1, $2, $3, $4) {
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = $4;
 HEAP32[$0 + 4 >> 2] = $3;
 HEAP32[$0 >> 2] = 7352;
 return $0;
}
function btCollisionObject___btCollisionObject_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 3980;
 $1 = HEAP32[$0 + 296 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 300 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 296 >> 2] = 0;
 }
 HEAP32[$0 + 296 >> 2] = 0;
 HEAP32[$0 + 288 >> 2] = 0;
 HEAP32[$0 + 292 >> 2] = 0;
 HEAP8[$0 + 300 | 0] = 1;
 return $0 | 0;
}
function btScalarArray_clear_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 btAlignedObjectArray_float___clear_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btIndexedMesh__operator_20delete_28void__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 btAlignedFreeInternal_28void__29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btConvexPlaneCollisionAlgorithm___btConvexPlaneCollisionAlgorithm_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 HEAP32[$0 >> 2] = 6184;
 label$1 : {
  if (!HEAPU8[$0 + 8 | 0]) {
   break label$1;
  }
  $1 = HEAP32[$0 + 12 >> 2];
  if (!$1) {
   break label$1;
  }
  $2 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
 }
 return $0 | 0;
}
function btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__LocalInfoAdder2__needsCollision_28btBroadphaseProxy__29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $0 = HEAP32[$0 + 20 >> 2];
 return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1) | 0;
}
function btAlignedObjectArray_btTypedConstraint____destroy_28int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = HEAP32[$3 + 8 >> 2];
 while (1) {
  if (HEAP32[$3 >> 2] < HEAP32[$3 + 4 >> 2]) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
   continue;
  }
  break;
 }
}
function btVector3__operator_20delete_28void__29($0) {
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 btAlignedFreeInternal_28void__29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btMinkowskiPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29__btIntermediateResult__setShapeIdentifiersB_28int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
}
function btMinkowskiPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29__btIntermediateResult__setShapeIdentifiersA_28int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
}
function btIntArray_clear_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 btAlignedObjectArray_int___clear_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btTransform_setIdentity_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 btTransform__setIdentity_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btRigidBody_clearForces_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 btRigidBody__clearForces_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btAlignedObjectArray_btIndexedMesh___destroy_28int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = HEAP32[$3 + 8 >> 2];
 while (1) {
  if (HEAP32[$3 >> 2] < HEAP32[$3 + 4 >> 2]) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
   continue;
  }
  break;
 }
}
function btRigidBody_clearState_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 btRigidBody__clearState_28_29(HEAP32[$1 + 12 >> 2]);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = Math_fround(0);
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $2 = HEAPF32[HEAP32[$1 + 12 >> 2] + 56 >> 2];
 label$1 : {
  if (Math_fround(Math_abs($2)) < Math_fround(2147483648)) {
   $0 = ~~$2;
   break label$1;
  }
  $0 = -2147483648;
 }
 return $0 | 0;
}
function btAlignedObjectArray_btVector3___destroy_28int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = HEAP32[$3 + 8 >> 2];
 while (1) {
  if (HEAP32[$3 >> 2] < HEAP32[$3 + 4 >> 2]) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
   continue;
  }
  break;
 }
}
function btCollisionDispatcher__allocateCollisionAlgorithm_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $0 = HEAP32[$0 + 68 >> 2];
 $2 = HEAP32[$0 + 12 >> 2];
 if ($2) {
  HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -1;
  return $2 | 0;
 }
 return btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1, 16) | 0;
}
function btAlignedObjectArray_float___destroy_28int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = HEAP32[$3 + 8 >> 2];
 while (1) {
  if (HEAP32[$3 >> 2] < HEAP32[$3 + 4 >> 2]) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
   continue;
  }
  break;
 }
}
function btMinkowskiPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29__btIntermediateResult___btIntermediateResult_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btAlignedObjectArray_int___destroy_28int_2c_20int_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAP32[$3 + 8 >> 2] = $1;
 HEAP32[$3 + 4 >> 2] = $2;
 HEAP32[$3 >> 2] = HEAP32[$3 + 8 >> 2];
 while (1) {
  if (HEAP32[$3 >> 2] < HEAP32[$3 + 4 >> 2]) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
   continue;
  }
  break;
 }
}
function btHeightfieldTerrainShape__setLocalScaling_28btVector3_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = $1;
 $1 = HEAP32[$2 >> 2];
 $3 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 112 >> 2] = $1;
 HEAP32[$0 + 116 >> 2] = $3;
 $1 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$2 + 8 >> 2];
 HEAP32[$0 + 120 >> 2] = $3;
 HEAP32[$0 + 124 >> 2] = $1;
}
function btBvhTriangleMeshShape___btBvhTriangleMeshShape_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 11532;
 if (HEAPU8[$0 + 65 | 0]) {
  $1 = HEAP32[$0 + 56 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 56 >> 2]);
 }
 btTriangleMeshShape___btTriangleMeshShape_28_29($0);
 return $0 | 0;
}
function __cxx_global_array_dtor($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0;
 $1 = global$0 - 16 | 0;
 $2 = $1;
 if ($1 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $2;
 HEAP32[$1 + 12 >> 2] = $0;
 btRigidBody___btRigidBody_28_29(20036);
 $0 = $1 + 16 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
 btCollisionAlgorithm__btCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__29($0, $1);
 HEAP32[$0 >> 2] = 4952;
 return $0;
}
function btDefaultCollisionConstructionInfo__btDefaultCollisionConstructionInfo_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 4096;
 HEAP32[$0 + 12 >> 2] = 4096;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 1;
 return $0;
}
function btVector3__minAxis_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 label$1 : {
  if (HEAPF32[$0 >> 2] < HEAPF32[$0 + 4 >> 2]) {
   $0 = HEAPF32[$0 >> 2] < HEAPF32[$0 + 8 >> 2] ? 0 : 2;
   break label$1;
  }
  $0 = HEAPF32[$0 + 4 >> 2] < HEAPF32[$0 + 8 >> 2] ? 1 : 2;
 }
 return $0;
}
function btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__BridgeTriangleRaycastCallback___BridgeTriangleRaycastCallback_28_29($0) {
 $0 = $0 | 0;
 btTriangleCallback___btTriangleCallback_28_29($0);
 operator_20delete_28void__29($0);
}
function btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btDummyResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
}
function btStaticPlaneShape__setLocalScaling_28btVector3_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = $1;
 $1 = HEAP32[$2 >> 2];
 $3 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 72 >> 2] = $1;
 HEAP32[$0 + 76 >> 2] = $3;
 $1 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$2 + 8 >> 2];
 HEAP32[$0 + 80 >> 2] = $3;
 HEAP32[$0 + 84 >> 2] = $1;
}
function btBoxShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if ($1 >>> 0 <= 5) {
  HEAP32[$2 + 12 >> 2] = 0;
  $1 = $1 << 2;
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 14228 >> 2];
  HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 14204 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 + 14180 >> 2];
 }
}
function CProfileNode__CleanupMemory_28_29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 + 24 >> 2];
 if ($1) {
  CProfileNode__CleanupMemory_28_29($1);
  operator_20delete_28void__29($1);
 }
 HEAP32[$0 + 24 >> 2] = 0;
 $1 = HEAP32[$0 + 28 >> 2];
 if ($1) {
  CProfileNode__CleanupMemory_28_29($1);
  operator_20delete_28void__29($1);
 }
 HEAP32[$0 + 28 >> 2] = 0;
}
function btEmptyShape__setLocalScaling_28btVector3_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = $1;
 $1 = HEAP32[$2 >> 2];
 $3 = HEAP32[$2 + 4 >> 2];
 HEAP32[$0 + 20 >> 2] = $1;
 HEAP32[$0 + 24 >> 2] = $3;
 $1 = HEAP32[$2 + 12 >> 2];
 $3 = HEAP32[$2 + 8 >> 2];
 HEAP32[$0 + 28 >> 2] = $3;
 HEAP32[$0 + 32 >> 2] = $1;
}
function btDiscreteDynamicsWorld__getGravity_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0;
 $2 = $1;
 $1 = HEAP32[$2 + 264 >> 2];
 $3 = HEAP32[$2 + 268 >> 2];
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $3;
 $1 = HEAP32[$2 + 276 >> 2];
 $3 = HEAP32[$2 + 272 >> 2];
 HEAP32[$0 + 8 >> 2] = $3;
 HEAP32[$0 + 12 >> 2] = $1;
}
function btConvexConcaveCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__LocalTriangleSphereCastCallback___LocalTriangleSphereCastCallback_28_29($0) {
 $0 = $0 | 0;
 btTriangleCallback___btTriangleCallback_28_29($0);
 operator_20delete_28void__29($0);
}
function btCollisionWorld__RayResultCallback__RayResultCallback_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 1900;
 HEAPF32[$0 + 4 >> 2] = 1;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP16[$0 + 12 >> 1] = 1;
 HEAP16[$0 + 14 >> 1] = 65535;
 HEAP32[$0 + 16 >> 2] = 0;
 return $0;
}
function $28anonymous_20namespace_29__AtomicInt_unsigned_20char___store_28unsigned_20char_2c_20std____2___28anonymous_20namespace_29____libcpp_atomic_order_29($0) {
 void_20std____2___28anonymous_20namespace_29____libcpp_atomic_store_unsigned_20char_2c_20unsigned_20char__28unsigned_20char__2c_20unsigned_20char_2c_20int_29(HEAP32[$0 >> 2]);
}
function btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($0) {
 $0 = $0 | 0;
 var $1 = 0;
 HEAP32[$0 >> 2] = 12640;
 $1 = HEAP32[$0 + 56 >> 2];
 if ($1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 56 >> 2]);
 }
 btConvexShape___btConvexShape_28_29($0);
 return $0 | 0;
}
function is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, $2) {
 if (!$2) {
  return std__type_info__operator___28std__type_info_20const__29_20const($0, $1);
 }
 if (($0 | 0) == ($1 | 0)) {
  return 1;
 }
 return !strcmp(std__type_info__name_28_29_20const($0), std__type_info__name_28_29_20const($1));
}
function btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__btCompoundLeafCallback___btCompoundLeafCallback_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function __cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__acquire_init_byte_28_29($0) {
 var $1 = 0, $2 = 0;
 label$1 : {
  $0 = HEAP32[$0 + 8 >> 2];
  $1 = HEAPU8[$0 | 0];
  if (($1 | 0) != 1) {
   if ($1 & 2) {
    break label$1;
   }
   HEAP8[$0 | 0] = 2;
   $2 = 1;
  }
  return $2;
 }
 abort_message(19432, 0);
 abort();
}
function btPoint2PointConstraint__getInfo2_28btTypedConstraint__btConstraintInfo2__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 btPoint2PointConstraint__getInfo2NonVirtual_28btTypedConstraint__btConstraintInfo2__2c_20btTransform_20const__2c_20btTransform_20const__29($0, $1, HEAP32[$0 + 28 >> 2] + 4 | 0, HEAP32[$0 + 32 >> 2] + 4 | 0);
}
function __cxx_global_array_dtor_1($0) {
 $0 = $0 | 0;
 HEAP32[5212] = 2252;
 $0 = HEAP32[5351];
 if ($0) {
  if (HEAPU8[21408]) {
   btAlignedFreeInternal_28void__29($0);
  }
  HEAP32[5351] = 0;
 }
 HEAP8[21408] = 1;
 HEAP32[5349] = 0;
 HEAP32[5350] = 0;
 HEAP32[5351] = 0;
 btCollisionObject___btCollisionObject_28_29(20848);
}
function dynCall_fiiiiiiiiii($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 return Math_fround(Math_fround(FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)));
}
function btRigidBody__setSleepingThresholds_28float_2c_20float_29($0, $1, $2) {
 var $3 = 0;
 $3 = global$0 - 16 | 0;
 HEAP32[$3 + 12 >> 2] = $0;
 HEAPF32[$3 + 8 >> 2] = $1;
 HEAPF32[$3 + 4 >> 2] = $2;
 $0 = HEAP32[$3 + 12 >> 2];
 HEAPF32[$0 + 532 >> 2] = HEAPF32[$3 + 8 >> 2];
 HEAPF32[$0 + 536 >> 2] = HEAPF32[$3 + 4 >> 2];
}
function btDefaultMotionState_btDefaultMotionState_0() {
 var $0 = 0;
 $0 = btDefaultMotionState__operator_20new_28unsigned_20long_29(200);
 btDefaultMotionState__btDefaultMotionState_28btTransform_20const__2c_20btTransform_20const__29($0, btTransform__getIdentity_28_29(), btTransform__getIdentity_28_29());
 return $0 | 0;
}
function btCompoundLeafCallback__Process_28btDbvtNode_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $1 = HEAP32[$1 + 36 >> 2];
 btCompoundLeafCallback__ProcessChildShape_28btCollisionShape_20const__2c_20int_29($0, HEAP32[(HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] + 4 >> 2] + 28 >> 2] + Math_imul($1, 80) | 0) + 64 >> 2], $1);
}
function btOptimizedBvh__build_28btStridingMeshInterface__2c_20bool_2c_20btVector3_20const__2c_20btVector3_20const__29__QuantizedNodeTriangleCallback___QuantizedNodeTriangleCallback_28_29($0) {
 $0 = $0 | 0;
 btInternalTriangleIndexCallback___btInternalTriangleIndexCallback_28_29($0);
 operator_20delete_28void__29($0);
}
function btUnionFind___btUnionFind_28_29($0) {
 var $1 = 0;
 $1 = HEAP32[$0 + 12 >> 2];
 if ($1) {
  if (HEAPU8[$0 + 16 | 0]) {
   btAlignedFreeInternal_28void__29($1);
  }
  HEAP32[$0 + 12 >> 2] = 0;
 }
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP8[$0 + 16 | 0] = 1;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 return $0;
}
function operator_20new_28unsigned_20long_29($0) {
 var $1 = 0;
 $1 = $0 ? $0 : 1;
 label$1 : {
  while (1) {
   $0 = dlmalloc($1);
   if ($0) {
    break label$1;
   }
   $0 = std__get_new_handler_28_29();
   if ($0) {
    FUNCTION_TABLE[$0]();
    continue;
   }
   break;
  }
  abort();
  abort();
 }
 return $0;
}
function btConvexInternalShape__btConvexInternalShape_28_29($0) {
 btConvexShape__btConvexShape_28_29($0);
 HEAP32[$0 + 48 >> 2] = 1025758986;
 HEAP32[$0 + 24 >> 2] = 1065353216;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 1065353216;
 HEAP32[$0 + 20 >> 2] = 1065353216;
 HEAP32[$0 >> 2] = 13284;
 return $0;
}
function btContinuousConvexCollision__btContinuousConvexCollision_28btConvexShape_20const__2c_20btStaticPlaneShape_20const__29($0, $1, $2) {
 HEAP32[$0 + 20 >> 2] = $2;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 >> 2] = 7352;
 return $0;
}



function btHashedOverlappingPairCache__removeOverlappingPairsContainingProxy_28btBroadphaseProxy__2c_20btDispatcher__29__RemovePairCallback__processOverlap_28btBroadphasePair__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $0 = HEAP32[$0 + 4 >> 2];
 return ($0 | 0) == HEAP32[$1 >> 2] | HEAP32[$1 + 4 >> 2] == ($0 | 0);
}
function btDiscreteDynamicsWorld__removeCollisionObject_28btCollisionObject__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if (!(!$1 | !(HEAP32[$1 + 252 >> 2] & 2))) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 92 >> 2]]($0, $1);
  return;
 }
 btCollisionWorld__removeCollisionObject_28btCollisionObject__29($0, $1);
}
function btDiscreteDynamicsWorld__setConstraintSolver_28btConstraintSolver__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if (HEAPU8[$0 + 289 | 0]) {
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 216 >> 2]);
 }
 HEAP32[$0 + 216 >> 2] = $1;
 HEAP8[$0 + 289 | 0] = 0;
 HEAP32[HEAP32[$0 + 212 >> 2] + 8 >> 2] = $1;
}
function btTriangleMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const__FilteredCallback___FilteredCallback_28_29($0) {
 $0 = $0 | 0;
 btInternalTriangleIndexCallback___btInternalTriangleIndexCallback_28_29($0);
 operator_20delete_28void__29($0);
}
function dynCall_iiiiiiiiiii($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) | 0;
}
function btTriangleShape__getEdge_28int_2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, $1, $2);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, ($1 + 1 | 0) % 3 | 0, $3);
}
function btOptimizedBvh__build_28btStridingMeshInterface__2c_20bool_2c_20btVector3_20const__2c_20btVector3_20const__29__NodeTriangleCallback___NodeTriangleCallback_28_29($0) {
 $0 = $0 | 0;
 btInternalTriangleIndexCallback___btInternalTriangleIndexCallback_28_29($0);
 operator_20delete_28void__29($0);
}
function btBU_Simplex1to4__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 btPolyhedralConvexAabbCachingShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3);
}
function $28anonymous_20namespace_29__AtomicInt_unsigned_20char___load_28std____2___28anonymous_20namespace_29____libcpp_atomic_order_29($0) {
 return unsigned_20char_20std____2___28anonymous_20namespace_29____libcpp_atomic_load_unsigned_20char__28unsigned_20char_20const__2c_20int_29(HEAP32[$0 >> 2]);
}
function btTriangleMesh__addTriangleIndices_28int_2c_20int_2c_20int_29($0, $1, $2, $3) {
 var $4 = 0;
 $4 = HEAP32[$0 + 32 >> 2];
 HEAP32[$4 >> 2] = HEAP32[$4 >> 2] + 1;
 btTriangleMesh__addIndex_28int_29($0, $1);
 btTriangleMesh__addIndex_28int_29($0, $2);
 btTriangleMesh__addIndex_28int_29($0, $3);
}
function btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btWithoutMarginResult__setShapeIdentifiersB_28int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
}
function btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btWithoutMarginResult__setShapeIdentifiersA_28int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
}
function dynCall_fiiiiiiiii($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 return Math_fround(Math_fround(FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8, $9)));
}
function btCompoundCompoundCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return Math_fround(Math_fround(0));
}
function btSphereTriangleCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return Math_fround(Math_fround(1));
}
function btCollisionWorld__ConvexResultCallback__ConvexResultCallback_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 1556;
 HEAPF32[$0 + 4 >> 2] = 1;
 HEAP32[$0 + 8 >> 2] = 1;
 HEAP32[$0 + 12 >> 2] = -1;
 return $0;
}



function btSphereSphereCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return Math_fround(Math_fround(1));
}
function btConvexPlaneCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return Math_fround(Math_fround(1));
}
function dynCall_viiiiiiiiii($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8, $9, $10);
}
function btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btDummyResult__setShapeIdentifiersB_28int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
}
function btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btDummyResult__setShapeIdentifiersA_28int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
}
function btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btWithoutMarginResult___btWithoutMarginResult_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btCollisionObject__setSpinningFriction_28float_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
 HEAPF32[$0 + 240 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btCollisionObject__setRollingFriction_28float_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
 HEAPF32[$0 + 236 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btBoxBoxCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return Math_fround(Math_fround(1));
}
function btPersistentManifold__clearUserCache_28btManifoldPoint__29($0, $1) {
 var $2 = 0;
 label$1 : {
  $0 = HEAP32[$1 + 116 >> 2];
  if (!$0) {
   break label$1;
  }
  $2 = HEAP32[5383];
  if (!$2) {
   break label$1;
  }
  FUNCTION_TABLE[$2]($0) | 0;
  HEAP32[$1 + 116 >> 2] = 0;
 }
}
function __cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__InitByteNoThreads_28unsigned_20int__29($0, $1) {
 __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___GuardObject_28unsigned_20int__29($0, $1);
 return $0;
}
function non_virtual_20thunk_20to_20DebugDrawcallback___DebugDrawcallback_28_29_1($0) {
 $0 = $0 | 0;
 btInternalTriangleIndexCallback___btInternalTriangleIndexCallback_28_29($0);
 $0 = $0 + -4 | 0;
 btTriangleCallback___btTriangleCallback_28_29($0);
 operator_20delete_28void__29($0);
}
function btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0() {
 var $0 = 0;
 $0 = btSequentialImpulseConstraintSolver__operator_20new_28unsigned_20long_29(236);
 btSequentialImpulseConstraintSolver__btSequentialImpulseConstraintSolver_28_29($0);
 return $0 | 0;
}
function btCollisionObject__setRestitution_28float_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
 HEAPF32[$0 + 232 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___GuardObject_28unsigned_20int__29($0, $1) {
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 >> 2] = $1;
 HEAP32[$0 + 8 >> 2] = $1 + 1;
 return $0;
}
function btDbvt__btDbvt_28_29($0) {
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = -1;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP8[$0 + 36 | 0] = 1;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 return $0;
}
function btCollisionObject__setFriction_28float_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
 HEAPF32[$0 + 228 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btRigidBody__predictIntegratedTransform_28float_2c_20btTransform__29($0, $1, $2) {
 btTransformUtil__integrateTransform_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20btTransform__29($0 + 4 | 0, $0 + 372 | 0, $0 + 388 | 0, $1, $2);
}
function btManifoldResult__btManifoldResult_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2) {
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 >> 2] = 7180;
 return $0;
}
function btEmptyAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return Math_fround(Math_fround(1));
}
function btBvhTriangleMeshShape__performConvexcast_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29__MyNodeOverlapCallback___MyNodeOverlapCallback_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btCylinderShape__getAnisotropicRollingFrictionDirection_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + (HEAP32[$1 + 56 >> 2] << 2) >> 2] = 1065353216;
}
function btCollisionWorld__serialize_28btSerializer__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 32 >> 2]]($1);
 btCollisionWorld__serializeCollisionObjects_28btSerializer__29($0, $1);
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1);
}
function non_virtual_20thunk_20to_20DebugDrawcallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $0 = $0 + -4 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1, $2, $3);
}
function btSubsimplexConvexCast__btSubsimplexConvexCast_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__29($0, $1, $2, $3) {
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $3;
 HEAP32[$0 >> 2] = 6284;
 return $0;
}
function btManifoldResult__calculateCombinedFriction_28btCollisionObject_20const__2c_20btCollisionObject_20const__29($0, $1) {
 return Math_fround(Math_min(Math_fround(Math_max(Math_fround(HEAPF32[$0 + 228 >> 2] * HEAPF32[$1 + 228 >> 2]), Math_fround(-10))), Math_fround(10)));
}
function btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__LocalInfoAdder2___LocalInfoAdder2_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btCapsuleShape__getAnisotropicRollingFrictionDirection_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + (HEAP32[$1 + 56 >> 2] << 2) >> 2] = 1065353216;
}
function btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 120 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btAlignedObjectArray_btCompoundShapeChild___operator_5b_5d_28int_29_20const($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 80) | 0;
}
function btAlignedObjectArray_btCollisionObject_20const____allocSize_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAP32[$2 + 8 >> 2]) {
  $0 = HEAP32[$2 + 8 >> 2] << 1;
 } else {
  $0 = 1;
 }
 return $0;
}
function btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 116 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btDummyResult___btDummyResult_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btAlignedObjectArray_btCollisionObject_20const____init_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 16 | 0] = 1;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
}
function btAlignedObjectArray_btPersistentManifold____allocSize_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAP32[$2 + 8 >> 2]) {
  $0 = HEAP32[$2 + 8 >> 2] << 1;
 } else {
  $0 = 1;
 }
 return $0;
}
function CProfileNode__Reset_28_29($0) {
 var $1 = 0;
 while (1) {
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  $1 = HEAP32[$0 + 24 >> 2];
  if ($1) {
   CProfileNode__Reset_28_29($1);
  }
  $0 = HEAP32[$0 + 28 >> 2];
  if ($0) {
   continue;
  }
  break;
 }
}
function btOptimizedBvh__serializeInPlace_28void__2c_20unsigned_20int_2c_20bool_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return btQuantizedBvh__serialize_28void__2c_20unsigned_20int_2c_20bool_29_20const($0, $1, $2, $3) | 0;
}
function btAlignedObjectArray_btCompoundShapeChild___operator_5b_5d_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] + Math_imul(HEAP32[$2 + 8 >> 2], 80) | 0;
}
function btAlignedAllocDefault_28unsigned_20long_2c_20int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $0 = FUNCTION_TABLE[HEAP32[4974]](($0 + $1 | 0) + 3 | 0) | 0;
 if ($0) {
  $2 = ($0 + $1 | 0) + 3 & 0 - $1;
  HEAP32[$2 + -4 >> 2] = $0;
 }
 return $2 | 0;
}
function ccClosestRayResultCallback_set_m_closestHitFraction_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function ccAllHitsRayResultCallback_set_m_closestHitFraction_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btRigidBodyConstructionInfo_set_m_rollingFriction_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 104 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btEmptyAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
}
function dynCall_viiiiiiiii($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8, $9);
}
function btRigidBodyConstructionInfo_set_m_angularDamping_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 96 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btDiscreteDynamicsWorld__addCollisionObject_28btCollisionObject__2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 btCollisionWorld__addCollisionObject_28btCollisionObject__2c_20int_2c_20int_29($0, $1, $2, $3);
}
function btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__RayTester___RayTester_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btAlignedObjectArray_btTypedConstraint____init_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 16 | 0] = 1;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
}
function ClosestRayResultCallback_set_m_closestHitFraction_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function AllHitsRayResultCallback_set_m_closestHitFraction_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function non_virtual_20thunk_20to_20DebugDrawcallback___DebugDrawcallback_28_29($0) {
 $0 = $0 | 0;
 btInternalTriangleIndexCallback___btInternalTriangleIndexCallback_28_29($0);
 $0 = $0 + -4 | 0;
 btTriangleCallback___btTriangleCallback_28_29($0);
 return $0 | 0;
}
function btRigidBodyConstructionInfo_set_m_linearDamping_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 92 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 56 >> 2] = HEAP32[$2 + 8 >> 2];
}
function __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3) {
 if (!(HEAP32[$1 + 28 >> 2] == 1 | HEAP32[$1 + 4 >> 2] != ($2 | 0))) {
  HEAP32[$1 + 28 >> 2] = $3;
 }
}
function btRigidBodyConstructionInfo_set_m_restitution_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 112 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btGjkConvexCast__btGjkConvexCast_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__29($0, $1, $2, $3) {
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 8 >> 2] = $1;
 HEAP32[$0 + 4 >> 2] = $3;
 HEAP32[$0 >> 2] = 7240;
 return $0;
}
function btConstraintSetting__btConstraintSetting_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAPF32[$0 >> 2] = .30000001192092896;
 HEAPF32[$0 + 4 >> 2] = 1;
 HEAPF32[$0 + 8 >> 2] = 0;
 return $0;
}
function btRigidBodyConstructionInfo_set_m_friction_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 100 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btAlignedObjectArray_btIndexedMesh___init_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 16 | 0] = 1;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
}
function btPolyhedralConvexAabbCachingShape__setLocalScaling_28btVector3_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 btConvexInternalShape__setLocalScaling_28btVector3_20const__29($0, $1);
 btPolyhedralConvexAabbCachingShape__recalcLocalAabb_28_29($0);
}
function btAlignedObjectArray_btVector3___allocSize_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAP32[$2 + 8 >> 2]) {
  $0 = HEAP32[$2 + 8 >> 2] << 1;
 } else {
  $0 = 1;
 }
 return $0;
}
function ccClosestRayResultCallback_set_m_collisionFilterGroup_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP16[HEAP32[$2 + 12 >> 2] + 12 >> 1] = HEAP32[$2 + 8 >> 2];
}
function ccAllHitsRayResultCallback_set_m_collisionFilterGroup_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP16[HEAP32[$2 + 12 >> 2] + 12 >> 1] = HEAP32[$2 + 8 >> 2];
}
function btHeightfieldTerrainShape__calculateLocalInertia_28float_2c_20btVector3__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
}
function btConvexInternalShape__setMargin_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 52 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function RayResultCallback_set_m_closestHitFraction_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function ccClosestRayResultCallback_set_m_collisionFilterMask_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP16[HEAP32[$2 + 12 >> 2] + 14 >> 1] = HEAP32[$2 + 8 >> 2];
}
function ccAllHitsRayResultCallback_set_m_collisionFilterMask_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP16[HEAP32[$2 + 12 >> 2] + 14 >> 1] = HEAP32[$2 + 8 >> 2];
}
function btAlignedObjectArray_btVector3___init_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 16 | 0] = 1;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
}
function ClosestRayResultCallback_set_m_collisionFilterGroup_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP16[HEAP32[$2 + 12 >> 2] + 12 >> 1] = HEAP32[$2 + 8 >> 2];
}
function AllHitsRayResultCallback_set_m_collisionFilterGroup_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP16[HEAP32[$2 + 12 >> 2] + 12 >> 1] = HEAP32[$2 + 8 >> 2];
}
function btSphereShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (($3 | 0) >= 1) {
  memset($2, 0, $3 << 4);
 }
}
function btAlignedObjectArray_float___allocSize_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAP32[$2 + 8 >> 2]) {
  $0 = HEAP32[$2 + 8 >> 2] << 1;
 } else {
  $0 = 1;
 }
 return $0;
}
function ClosestRayResultCallback_set_m_collisionFilterMask_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP16[HEAP32[$2 + 12 >> 2] + 14 >> 1] = HEAP32[$2 + 8 >> 2];
}
function AllHitsRayResultCallback_set_m_collisionFilterMask_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP16[HEAP32[$2 + 12 >> 2] + 14 >> 1] = HEAP32[$2 + 8 >> 2];
}
function dynCall_iiiiiiiii($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7, $8) | 0;
}
function btConstraintSetting_set_m_impulseClamp_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btCollisionWorld__setDebugDrawer_28btIDebugDraw__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 72 >> 2] = HEAP32[$2 + 8 >> 2];
}
function btAlignedObjectArray_btCollisionObject_20const____at_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2) | 0;
}
function btAlignedObjectArray_int___allocSize_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 if (HEAP32[$2 + 8 >> 2]) {
  $0 = HEAP32[$2 + 8 >> 2] << 1;
 } else {
  $0 = 1;
 }
 return $0;
}
function ccClosestRayResultCallback_set_m_collisionObject_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = HEAP32[$2 + 8 >> 2];
}
function ccAllHitsRayResultCallback_set_m_collisionObject_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = HEAP32[$2 + 8 >> 2];
}
function btTriangleMeshShape__calculateLocalInertia_28float_2c_20btVector3__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
}
function btAlignedObjectArray_float___init_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 16 | 0] = 1;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
}
function btAlignedObjectArray_btRigidBody____operator_5b_5d_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2) | 0;
}
function btStaticPlaneShape__calculateLocalInertia_28float_2c_20btVector3__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
}
function btSphereShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
}
function btAlignedObjectArray_int___init_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP8[$0 + 16 | 0] = 1;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
}
function ClosestRayResultCallback_set_m_collisionObject_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = HEAP32[$2 + 8 >> 2];
}
function AllHitsRayResultCallback_set_m_collisionObject_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = HEAP32[$2 + 8 >> 2];
}
function btConstraintSetting_set_m_damping_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function RayResultCallback_set_m_collisionFilterGroup_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP16[HEAP32[$2 + 12 >> 2] + 12 >> 1] = HEAP32[$2 + 8 >> 2];
}
function btTriangleShape__calculateLocalInertia_28float_2c_20btVector3__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 HEAP32[$2 + 8 >> 2] = 0;
 HEAP32[$2 + 12 >> 2] = 0;
}
function btBroadphaseProxy_set_m_collisionFilterGroup_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = HEAP32[$2 + 8 >> 2];
}
function RayResultCallback_set_m_collisionFilterMask_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP16[HEAP32[$2 + 12 >> 2] + 14 >> 1] = HEAP32[$2 + 8 >> 2];
}
function ccClosestRayResultCallback_set_m_shapePart_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 84 >> 2] = HEAP32[$2 + 8 >> 2];
}
function btManifoldPoint_set_m_userPersistentData1_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 124 >> 2] = HEAP32[$2 + 8 >> 2];
}
function btManifoldPoint_set_m_userPersistentData0_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 120 >> 2] = HEAP32[$2 + 8 >> 2];
}
function btConvexInternalShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0, $1, $2, $3);
}
function btBroadphaseProxy_set_m_collisionFilterMask_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = HEAP32[$2 + 8 >> 2];
}
function DebugDrawcallback___DebugDrawcallback_28_29_1($0) {
 $0 = $0 | 0;
 btInternalTriangleIndexCallback___btInternalTriangleIndexCallback_28_29($0 + 4 | 0);
 btTriangleCallback___btTriangleCallback_28_29($0);
 operator_20delete_28void__29($0);
}
function btManifoldPoint_set_m_userPersistentData_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 116 >> 2] = HEAP32[$2 + 8 >> 2];
}
function SphereTriangleDetector__SphereTriangleDetector_28btSphereShape__2c_20btTriangleShape__2c_20float_29($0, $1, $2, $3) {
 HEAPF32[$0 + 12 >> 2] = $3;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 >> 2] = 9704;
 return $0;
}
function btEmptyAlgorithm__btEmptyAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__29($0, $1) {
 btCollisionAlgorithm__btCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__29($0, $1);
 HEAP32[$0 >> 2] = 4860;
 return $0;
}
function btConvexConvexAlgorithm__CreateFunc__CreateFunc_28btConvexPenetrationDepthSolver__29($0, $1) {
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 3;
 HEAP32[$0 >> 2] = 9844;
 HEAP8[$0 + 4 | 0] = 0;
 HEAP32[$0 + 8 >> 2] = $1;
 return $0;
}
function btContactSolverInfo_set_m_splitImpulse_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 52 >> 2] = HEAP8[$2 + 11 | 0] & 1;
}
function btCollisionShape__getAnisotropicRollingFrictionDirection_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 8 >> 2] = 1065353216;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 >> 2] = 1065353216;
 HEAP32[$0 + 4 >> 2] = 1065353216;
}
function btAlignedObjectArray_float___operator_5b_5d_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2) | 0;
}
function btHashedSimplePairCache__addOverlappingPair_28int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[5649] = HEAP32[5649] + 1;
 return btHashedSimplePairCache__internalAddPair_28int_2c_20int_29($0, $1, $2) | 0;
}
function btContactSolverInfo_set_m_numIterations_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 20 >> 2] = HEAP32[$2 + 8 >> 2];
}
function btBvhTriangleMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const__MyNodeOverlapCallback___MyNodeOverlapCallback_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}



function btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(24);
 btDefaultCollisionConstructionInfo__btDefaultCollisionConstructionInfo_28_29($0);
 return $0 | 0;
}
function btAlignedObjectArray_int___operator_5b_5d_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2) | 0;
}
function RayResultCallback_set_m_collisionObject_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = HEAP32[$2 + 8 >> 2];
}
function btTriangleShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0, $1, $2, $3);
}
function btConstraintSetting_set_m_tau_1($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btAlignedObjectArray_btIndexedMesh___at_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 5) | 0;
}
function btPersistentManifold__getContactPoint_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return (HEAP32[$2 + 12 >> 2] + 4 | 0) + Math_imul(HEAP32[$2 + 8 >> 2], 208) | 0;
}
function dynCall_fiiifii($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = Math_fround($4);
 $5 = $5 | 0;
 $6 = $6 | 0;
 return Math_fround(Math_fround(FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6)));
}
function btInfMaskConverter__btInfMaskConverter_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 $0 = HEAP32[$2 + 12 >> 2];
 HEAP32[$0 >> 2] = HEAP32[$2 + 8 >> 2];
 return $0;
}
function btCollisionObject__getCcdSquareMotionThreshold_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 return Math_fround(HEAPF32[$0 + 276 >> 2] * HEAPF32[$0 + 276 >> 2]);
}
function LocalShapeInfo_set_m_triangleIndex_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = HEAP32[$2 + 8 >> 2];
}
function btAlignedObjectArray_btVector3___at_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 4) | 0;
}
function ccDiscreteDynamicsWorld__setAllowCcdPenetration_28float_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 56 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btTypedConstraint__setBreakingImpulseThreshold_28float_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 16 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btDbvt__remove_28btDbvtNode__29($0, $1) {
 removeleaf_28btDbvt__2c_20btDbvtNode__29($0, $1);
 btAlignedFreeInternal_28void__29(HEAP32[$0 + 4 >> 2]);
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + -1;
}
function btManifoldPoint_set_m_index1_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 112 >> 2] = HEAP32[$2 + 8 >> 2];
}
function btManifoldPoint_set_m_index0_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 108 >> 2] = HEAP32[$2 + 8 >> 2];
}
function btDbvtBroadphase__calculateOverlappingPairs_28btDispatcher__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 btDbvtBroadphase__collide_28btDispatcher__29($0, $1);
 btDbvtBroadphase__performDeferredRemoval_28btDispatcher__29($0, $1);
}
function btAlignedObjectArray_float___at_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2) | 0;
}
function ccDiscreteDynamicsWorld__setNarrowPhaseMethod_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP8[HEAP32[$2 + 12 >> 2] + 52 | 0] = HEAP32[$2 + 8 >> 2] == 1;
}
function btIndexedMesh_set_m_numTriangles_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = HEAP32[$2 + 8 >> 2];
}
function btCollisionObject__setCcdSweptSphereRadius_28float_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 272 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btAlignedObjectArray_int___at_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 2) | 0;
}
function DebugDrawcallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1, $2, $3);
}
function btSequentialImpulseConstraintSolver___btSequentialImpulseConstraintSolver_28_29_1($0) {
 $0 = $0 | 0;
 btAlignedFreeInternal_28void__29(btSequentialImpulseConstraintSolver___btSequentialImpulseConstraintSolver_28_29($0));
}
function btCompoundCompoundCollisionAlgorithm___btCompoundCompoundCollisionAlgorithm_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(btCompoundCompoundCollisionAlgorithm___btCompoundCompoundCollisionAlgorithm_28_29($0));
}
function btCollisionObject__setCcdMotionThreshold_28float_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 276 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function LocalShapeInfo_set_m_shapePart_1($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] >> 2] = HEAP32[$2 + 8 >> 2];
}
function ccAllHitsRayResultCallback__setQueryTrigger_28bool_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP8[HEAP32[$2 + 12 >> 2] + 152 | 0] = HEAP8[$2 + 11 | 0] & 1;
}
function btBU_Simplex1to4__btBU_Simplex1to4_28_29($0) {
 btPolyhedralConvexAabbCachingShape__btPolyhedralConvexAabbCachingShape_28_29($0);
 HEAP32[$0 + 96 >> 2] = 0;
 HEAP32[$0 >> 2] = 10828;
 HEAP32[$0 + 4 >> 2] = 2;
 return $0;
}
function ccClosestRayResultCallback__setQueryTrigger_28bool_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP8[HEAP32[$2 + 12 >> 2] + 88 | 0] = HEAP8[$2 + 11 | 0] & 1;
}
function btManifoldPoint_set_m_distance1_1($0, $1) {
 $0 = $0 | 0;
 $1 = +$1;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF64[$2 >> 3] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 80 >> 2] = HEAPF64[$2 >> 3];
}
function btCollisionPairCallback__processOverlap_28btBroadphasePair__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 8 >> 2];
 FUNCTION_TABLE[HEAP32[$2 + 64 >> 2]]($1, $2, HEAP32[$0 + 4 >> 2]);
 return 0;
}
function btBvhTriangleMeshShape__performRaycast_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29__MyNodeOverlapCallback___MyNodeOverlapCallback_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function __sindf($0) {
 var $1 = 0, $2 = 0;
 $1 = $0 * $0;
 $2 = $1 * $0;
 return Math_fround($2 * ($1 * $1) * ($1 * 2718311493989822e-21 + -.00019839334836096632) + ($2 * ($1 * .008333329385889463 + -.16666666641626524) + $0));
}
function btHingeConstraint__setMaxMotorImpulse_28float_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 684 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btCollisionShape__getContactBreakingThreshold_28float_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 return Math_fround(Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0)) * $1));
}
function btTypedConstraint__setupSolverConstraint_28btAlignedObjectArray_btSolverConstraint___2c_20int_2c_20int_2c_20float_29($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = Math_fround($4);
}
function btTriangleShape__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 124 >> 2]]($0, $3, $1, $2);
}
function btHingeConstraint__setUseReferenceFrameA_28bool_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP8[HEAP32[$2 + 12 >> 2] + 740 | 0] = HEAP8[$2 + 11 | 0] & 1;
}
function DebugDrawcallback___DebugDrawcallback_28_29($0) {
 $0 = $0 | 0;
 btInternalTriangleIndexCallback___btInternalTriangleIndexCallback_28_29($0 + 4 | 0);
 btTriangleCallback___btTriangleCallback_28_29($0);
 return $0 | 0;
}
function btStaticPlaneShape__setPlaneConstant_28float_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 72 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btCollisionDispatcher__setDispatcherFlags_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = HEAP32[$2 + 8 >> 2];
}
function btConeShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 btConeShape__coneLocalSupport_28btVector3_20const__29_20const($0, $1, $2);
}
function btCollisionObject__setHitFraction_28float_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 268 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btConvexConcaveCollisionAlgorithm___btConvexConcaveCollisionAlgorithm_28_29_1($0) {
 $0 = $0 | 0;
 btAlignedFreeInternal_28void__29(btConvexConcaveCollisionAlgorithm___btConvexConcaveCollisionAlgorithm_28_29($0));
}
function btConeShape__getAnisotropicRollingFrictionDirection_28_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 1065353216;
}
function btAlignedObjectArray_btCollisionObject_20const____pop_back_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
}
function btHashedOverlappingPairCache__removeOverlappingPairsContainingProxy_28btBroadphaseProxy__2c_20btDispatcher__29__RemovePairCallback___RemovePairCallback_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btCollisionObject__setCollisionFlags_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 204 >> 2] = HEAP32[$2 + 8 >> 2];
}
function dynCall_viiiiiii($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6, $7);
}
function ccOverlapFilterCallback_ccOverlapFilterCallback_0() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(4);
 HEAP32[$0 >> 2] = 0;
 ccOverlapFilterCallback__ccOverlapFilterCallback_28_29($0);
 return $0 | 0;
}
function btTriangleMeshShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($0, $1, $2);
}
function btMatrix3x3__operator_5b_5d_28int_29_20const($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 12 >> 2] + (HEAP32[$2 + 8 >> 2] << 4) | 0;
}
function btHingeConstraint__setAngularOnly_28bool_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP8[HEAP32[$2 + 12 >> 2] + 736 | 0] = HEAP8[$2 + 11 | 0] & 1;
}
function btCollisionObject__activate_28bool_29_20const($0, $1) {
 if (!(HEAPU8[$0 + 204 | 0] & 3 ? !$1 : 0)) {
  if ((HEAP32[$0 + 220 >> 2] & -2) != 4) {
   HEAP32[$0 + 220 >> 2] = 1;
  }
  HEAP32[$0 + 224 >> 2] = 0;
 }
}
function btTypedConstraint__enableFeedback_28bool_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP8[HEAP32[$2 + 12 >> 2] + 21 | 0] = HEAP8[$2 + 11 | 0] & 1;
}
function btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 120 >> 2]);
}
function btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 116 >> 2]);
}
function btCollisionObject__setUserIndex2_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 260 >> 2] = HEAP32[$2 + 8 >> 2];
}
function dynCall_fiifii($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 $4 = $4 | 0;
 $5 = $5 | 0;
 return Math_fround(Math_fround(FUNCTION_TABLE[$0]($1, $2, $3, $4, $5)));
}
function btHingeConstraint__enableMotor_28bool_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP8[HEAP32[$2 + 12 >> 2] + 737 | 0] = HEAP8[$2 + 11 | 0] & 1;
}
function btCollisionObject__setUserIndex_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 264 >> 2] = HEAP32[$2 + 8 >> 2];
}
function btCollisionObject__setCollisionShape_28btCollisionShape__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 200 >> 2] = $1;
 HEAP32[$0 + 192 >> 2] = $1;
 HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
}
function btCollisionShape__setUserIndex2_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 16 >> 2] = HEAP32[$2 + 8 >> 2];
}
function btCollisionShape__setUserIndex_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 12 >> 2] = HEAP32[$2 + 8 >> 2];
}
function btTriangleMesh_btTriangleMesh_0() {
 var $0 = 0;
 $0 = btTriangleIndexVertexArray__operator_20new_28unsigned_20long_29(172);
 btTriangleMesh__btTriangleMesh_28bool_2c_20bool_29($0, 1, 1);
 return $0 | 0;
}
function btConeShape__setRadius_28float_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 64 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btConeShape__setHeight_28float_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 68 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btPersistentManifold_btPersistentManifold_0() {
 var $0 = 0;
 $0 = btPersistentManifold__operator_20new_28unsigned_20long_29(868);
 btPersistentManifold__btPersistentManifold_28_29($0);
 return $0 | 0;
}
function btDefaultCollisionConfiguration___btDefaultCollisionConfiguration_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(btDefaultCollisionConfiguration___btDefaultCollisionConfiguration_28_29($0));
}
function ccClosestRayResultCallback_get_m_closestHitFraction_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
}
function ccAllHitsRayResultCallback_get_m_closestHitFraction_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
}
function btRigidBodyConstructionInfo_get_m_rollingFriction_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 104 >> 2]);
}
function btPoint2PointConstraint__getInfo1_28btTypedConstraint__btConstraintInfo1__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $0 = HEAPU8[$0 + 344 | 0] ? 0 : 3;
 HEAP32[$1 + 4 >> 2] = $0;
 HEAP32[$1 >> 2] = $0;
}
function BroadphaseAabbTester__Process_28btDbvtNode_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $0 = HEAP32[$0 + 4 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$1 + 36 >> 2]) | 0;
}
function dynCall_iiiiiii($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6) | 0;
}
function BroadphaseRayTester__Process_28btDbvtNode_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $0 = HEAP32[$0 + 4 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$1 + 36 >> 2]) | 0;
}
function dynCall_fiiiii($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return Math_fround(Math_fround(FUNCTION_TABLE[$0]($1, $2, $3, $4, $5)));
}
function ccDiscreteDynamicsWorld__setDeactivationTime_28float_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[4965] = HEAPF32[$2 + 8 >> 2];
}
function ccDiscreteDynamicsWorld__setAllowSleep_28bool_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP8[$2 + 11 | 0] = $1;
 HEAP8[20836] = (HEAPU8[$2 + 11 | 0] ^ -1) & 1;
}
function btRigidBodyConstructionInfo_get_m_angularDamping_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 96 >> 2]);
}
function ClosestRayResultCallback_get_m_closestHitFraction_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
}
function AllHitsRayResultCallback_get_m_closestHitFraction_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
}
function btRigidBody__setFlags_28int_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 HEAP32[HEAP32[$2 + 12 >> 2] + 564 >> 2] = HEAP32[$2 + 8 >> 2];
}
function btRigidBodyConstructionInfo_get_m_linearDamping_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 92 >> 2]);
}
function btCollisionWorld__ConvexResultCallback__hasHit_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPF32[HEAP32[$1 + 12 >> 2] + 4 >> 2] < Math_fround(1);
}
function btRigidBodyConstructionInfo_get_m_restitution_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 112 >> 2]);
}
function btQuadWord__setW_28float_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 12 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btQuadWord__setZ_28float_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btQuadWord__setY_28float_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btCompoundShape_btCompoundShape_0() {
 var $0 = 0;
 $0 = btCompoundShape__operator_20new_28unsigned_20long_29(204);
 btCompoundShape__btCompoundShape_28bool_2c_20int_29($0, 1, 0);
 return $0 | 0;
}
function btVector3__setZ_28float_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btVector3__setY_28float_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] + 4 >> 2] = HEAPF32[$2 + 8 >> 2];
}
function __cosdf($0) {
 var $1 = 0;
 $0 = $0 * $0;
 $1 = $0 * $0;
 return Math_fround($0 * -.499999997251031 + 1 + $1 * .04166662332373906 + $0 * $1 * ($0 * 2439044879627741e-20 + -.001388676377460993));
}
function LocalSupportVertexCallback___LocalSupportVertexCallback_28_29($0) {
 $0 = $0 | 0;
 btInternalTriangleIndexCallback___btInternalTriangleIndexCallback_28_29($0);
 operator_20delete_28void__29($0);
}
function btRigidBodyConstructionInfo_get_m_friction_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 100 >> 2]);
}
function btHashedOverlappingPairCache___btHashedOverlappingPairCache_28_29_1($0) {
 $0 = $0 | 0;
 btAlignedFreeInternal_28void__29(btHashedOverlappingPairCache___btHashedOverlappingPairCache_28_29($0));
}
function std__get_new_handler_28_29() {
 return void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29(25056);
}
function btHashedOverlappingPairCache__cleanProxyFromPairs_28btBroadphaseProxy__2c_20btDispatcher__29__CleanPairCallback___CleanPairCallback_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btRigidBody__getAabb_28btVector3__2c_20btVector3__29_20const($0, $1, $2) {
 var $3 = 0;
 $3 = HEAP32[$0 + 192 >> 2];
 FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $0 + 4 | 0, $1, $2);
}
function btQuadWord__setX_28float_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btOverlapFilterCallback__btOverlapFilterCallback_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 1672;
 return $0;
}
function btAlignedObjectArray_btCollisionObject_20const____capacity_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
}
function RayResultCallback_get_m_closestHitFraction_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
}
function btVector3__setX_28float_29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAPF32[$2 + 8 >> 2] = $1;
 HEAPF32[HEAP32[$2 + 12 >> 2] >> 2] = HEAPF32[$2 + 8 >> 2];
}
function btManifoldResult__calculateCombinedRestitution_28btCollisionObject_20const__2c_20btCollisionObject_20const__29($0, $1) {
 return Math_fround(HEAPF32[$0 + 232 >> 2] * HEAPF32[$1 + 232 >> 2]);
}
function btHeightfieldTerrainShape___btHeightfieldTerrainShape_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 14684;
 btConcaveShape___btConcaveShape_28_29($0);
 btAlignedFreeInternal_28void__29($0);
}
function btCollisionObject__isStaticOrKinematicObject_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return (HEAP32[HEAP32[$1 + 12 >> 2] + 204 >> 2] & 3) != 0;
}
function ccClosestRayResultCallback_get_m_collisionFilterGroup_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP16[HEAP32[$1 + 12 >> 2] + 12 >> 1];
}
function ccAllHitsRayResultCallback_get_m_collisionFilterGroup_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP16[HEAP32[$1 + 12 >> 2] + 12 >> 1];
}
function btVector3__operator_20new_28unsigned_20long_2c_20void__29($0, $1) {
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
 return HEAP32[$2 + 8 >> 2];
}
function btDbvtBroadphase_btDbvtBroadphase_0() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(176);
 btDbvtBroadphase__btDbvtBroadphase_28btOverlappingPairCache__29($0, 0);
 return $0 | 0;
}
function btCompoundCollisionAlgorithm___btCompoundCollisionAlgorithm_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(btCompoundCollisionAlgorithm___btCompoundCollisionAlgorithm_28_29($0));
}
function btBoxBoxDetector__btBoxBoxDetector_28btBoxShape_20const__2c_20btBoxShape_20const__29($0, $1, $2) {
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 4 >> 2] = $1;
 HEAP32[$0 >> 2] = 7056;
 return $0;
}
function __cxx_global_array_dtor_3($0) {
 $0 = $0 | 0;
 $0 = 25040;
 while (1) {
  $0 = $0 + -36 | 0;
  CProfileNode__CleanupMemory_28_29($0);
  if (($0 | 0) != 22736) {
   continue;
  }
  break;
 }
}
function dynCall_viiiiii($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4, $5, $6);
}
function ccClosestRayResultCallback_get_m_collisionFilterMask_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP16[HEAP32[$1 + 12 >> 2] + 14 >> 1];
}
function ccAllHitsRayResultCallback_get_m_collisionFilterMask_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP16[HEAP32[$1 + 12 >> 2] + 14 >> 1];
}
function btEmptyShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
}
function btDbvtTreeCollider__Process_28btDbvtNode_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1, HEAP32[HEAP32[$0 + 8 >> 2] + 48 >> 2]);
}
function btConcaveShape__btConcaveShape_28_29($0) {
 HEAP32[$0 + 4 >> 2] = 35;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = -1;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 >> 2] = 13912;
 return $0;
}
function btConstraintSetting_get_m_impulseClamp_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 8 >> 2]);
}
function btAlignedObjectArray_btCollisionObject_20const____size_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}
function ClosestRayResultCallback_get_m_collisionFilterGroup_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP16[HEAP32[$1 + 12 >> 2] + 12 >> 1];
}
function AllHitsRayResultCallback_get_m_collisionFilterGroup_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP16[HEAP32[$1 + 12 >> 2] + 12 >> 1];
}
function btDbvt__ICollide__Process_28btDbvtNode_20const__2c_20float_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1);
}
function btCollisionObject_btCollisionObject_0() {
 var $0 = 0;
 $0 = btCollisionObject__operator_20new_28unsigned_20long_29(324);
 btCollisionObject__btCollisionObject_28_29($0);
 return $0 | 0;
}
function btAlignedObjectArray_btPersistentManifold____capacity_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
}
function ClosestRayResultCallback_get_m_collisionFilterMask_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP16[HEAP32[$1 + 12 >> 2] + 14 >> 1];
}
function AllHitsRayResultCallback_get_m_collisionFilterMask_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP16[HEAP32[$1 + 12 >> 2] + 14 >> 1];
}
function void_20std____2___28anonymous_20namespace_29____libcpp_atomic_store_unsigned_20char_2c_20unsigned_20char__28unsigned_20char__2c_20unsigned_20char_2c_20int_29($0) {
 HEAP8[$0 | 0] = 1;
}
function ccClosestRayResultCallback_get_m_collisionObject_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
}
function ccAllHitsRayResultCallback_get_m_collisionObject_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
}
function btContactSolverInfo_get_m_splitImpulse_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 52 >> 2] != 0 | 0;
}
function btCollisionWorld__ConvexResultCallback___ConvexResultCallback_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}
function btAlignedAllocator_btCollisionObject_20const__2c_2016u___btAlignedAllocator_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}
function btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($0) {
 btConvexInternalShape__btConvexInternalShape_28_29($0);
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP32[$0 >> 2] = 12640;
 return $0;
}
function btConvexTriangleMeshShape___btConvexTriangleMeshShape_28_29($0) {
 $0 = $0 | 0;
 btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($0);
 btAlignedFreeInternal_28void__29($0);
}
function btConstraintSetting_get_m_damping_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] + 4 >> 2]);
}
function btCollisionObject__isKinematicObject_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return (HEAP32[HEAP32[$1 + 12 >> 2] + 204 >> 2] & 2) != 0;
}
function btAlignedObjectArray_btPersistentManifold____size_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}
function btTypedConstraint__getBreakingImpulseThreshold_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPF32[HEAP32[$1 + 12 >> 2] + 16 >> 2];
}
function btCollisionWorld__RayResultCallback__hasHit_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] != 0;
}
function btCollisionAlgorithm__btCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__29($0, $1) {
 HEAP32[$0 >> 2] = 16456;
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 >> 2];
 return $0;
}
function btBU_Simplex1to4_btBU_Simplex1to4_0() {
 var $0 = 0;
 $0 = btBU_Simplex1to4__operator_20new_28unsigned_20long_29(168);
 btBU_Simplex1to4__btBU_Simplex1to4_28_29($0);
 return $0 | 0;
}
function btAlignedObjectArray_btCompoundShapeChild___size_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}
function ClosestRayResultCallback_get_m_collisionObject_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
}
function AllHitsRayResultCallback_get_m_collisionObject_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
}
function RayResultCallback_get_m_collisionFilterGroup_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP16[HEAP32[$1 + 12 >> 2] + 12 >> 1];
}
function btCollisionObject__isStaticObject_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return (HEAP32[HEAP32[$1 + 12 >> 2] + 204 >> 2] & 1) != 0;
}
function btCollisionObject__hasContactResponse_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return !(HEAP32[HEAP32[$1 + 12 >> 2] + 204 >> 2] & 4);
}
function btBroadphaseProxy_get_m_collisionFilterGroup_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}
function btAlignedObjectArray_btTypedConstraint____size_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}
function RayResultCallback_get_m_collisionFilterMask_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP16[HEAP32[$1 + 12 >> 2] + 14 >> 1];
}
function stackAlloc($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $0 = global$0 - $0 & -16;
 $1 = $0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $1;
 return $0 | 0;
}
function ccClosestRayResultCallback_get_m_shapePart_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 84 >> 2];
}
function btManifoldPoint_get_m_userPersistentData1_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 124 >> 2];
}
function btManifoldPoint_get_m_userPersistentData0_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 120 >> 2];
}
function btCollisionObject__getCcdSweptSphereRadius_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPF32[HEAP32[$1 + 12 >> 2] + 272 >> 2];
}
function btBroadphaseProxy_get_m_collisionFilterMask_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
}
function __cxxabiv1____vmi_class_type_info_____vmi_class_type_info_28_29($0) {
 $0 = $0 | 0;
 __cxxabiv1____shim_type_info_____shim_type_info_28_29($0);
 operator_20delete_28void__29($0);
}
function btSimulationIslandManager___btSimulationIslandManager_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(btSimulationIslandManager___btSimulationIslandManager_28_29($0));
}
function btManifoldPoint_get_m_userPersistentData_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 116 >> 2];
}
function btCollisionWorld__RayResultCallback___RayResultCallback_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}
function btBU_Simplex1to4__getNumEdges_28_29_20const($0) {
 $0 = $0 | 0;
 $0 = HEAP32[$0 + 96 >> 2] + -2 | 0;
 if ($0 >>> 0 <= 2) {
  return HEAP32[($0 << 2) + 11008 >> 2];
 }
 return 0;
}
function void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29($0) {
 return HEAP32[$0 >> 2];
}
function dynCall_iiiiii($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4, $5) | 0;
}
function ccAllHitsRayResultCallback_get_m_collisionObjects_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 20 | 0;
}
function btDiscreteDynamicsWorld__setNumTasks_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = global$0 - 16 | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = $1;
}
function __cxxabiv1____si_class_type_info_____si_class_type_info_28_29($0) {
 $0 = $0 | 0;
 __cxxabiv1____shim_type_info_____shim_type_info_28_29($0);
 operator_20delete_28void__29($0);
}
function dynCall_fiiii($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return Math_fround(Math_fround(FUNCTION_TABLE[$0]($1, $2, $3, $4)));
}
function btRigidBody__getLinearSleepingThreshold_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPF32[HEAP32[$1 + 12 >> 2] + 532 >> 2];
}
function btContactSolverInfo_get_m_numIterations_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 20 >> 2];
}
function dynCall_viiiif($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = Math_fround($5);
 FUNCTION_TABLE[$0]($1, $2, $3, $4, $5);
}
function ccClosestRayResultCallback_get_m_hitNormalWorld_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 52 | 0;
}
function ccAllHitsRayResultCallback_get_m_hitNormalWorld_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 72 | 0;
}
function btTypedConstraint__solveConstraintObsolete_28btSolverBody__2c_20btSolverBody__2c_20float_29($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
}
function btConvexInternalShape__getImplicitShapeDimensions_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 36 | 0;
}
function btConstraintSetting_get_m_tau_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return Math_fround(HEAPF32[HEAP32[$1 + 12 >> 2] >> 2]);
}
function btConstraintSetting_btConstraintSetting_0() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(12);
 btConstraintSetting__btConstraintSetting_28_29($0);
 return $0 | 0;
}
function btAlignedObjectArray_btVector3___capacity_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
}
function btAlignedObjectArray_btIndexedMesh___size_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}
function RayResultCallback_get_m_collisionObject_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
}
function AllHitsRayResultCallback_get_m_collisionObjects_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 20 | 0;
}
function ccClosestRayResultCallback_get_m_hitPointWorld_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 68 | 0;
}
function ccAllHitsRayResultCallback_get_m_hitPointWorld_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 92 | 0;
}
function ccAllHitsRayResultCallback_get_m_hitFractions_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 112 | 0;
}
function btDiscreteDynamicsWorld___btDiscreteDynamicsWorld_28_29_1($0) {
 $0 = $0 | 0;
 btAlignedFreeInternal_28void__29(btDiscreteDynamicsWorld___btDiscreteDynamicsWorld_28_29($0));
}
function btAlignedObjectArray_btRigidBody____size_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}
function ccClosestRayResultCallback_get_m_rayFromWorld_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 20 | 0;
}
function ccAllHitsRayResultCallback_get_m_rayFromWorld_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 40 | 0;
}
function btCollisionWorld__getDebugDrawer_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 72 >> 2];
}
function btCollisionObject__getActivationState_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 220 >> 2];
}
function ClosestRayResultCallback_get_m_hitNormalWorld_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 52 | 0;
}
function AllHitsRayResultCallback_get_m_hitNormalWorld_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 72 | 0;
}
function dynCall_iifif($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = $3 | 0;
 $4 = Math_fround($4);
 return FUNCTION_TABLE[$0]($1, $2, $3, $4) | 0;
}
function ccAllHitsRayResultCallback_get_m_shapeParts_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 132 | 0;
}
function btPersistentManifold__getNumContacts_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 844 >> 2];
}
function btOverlapFilterCallback___btOverlapFilterCallback_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}
function btMotionState__btMotionState_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 $0 = HEAP32[$1 + 12 >> 2];
 HEAP32[$0 >> 2] = 2228;
 return $0;
}
function btCollisionObject__getCollisionShape_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 192 >> 2];
}
function btCollisionObject__getCollisionFlags_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 204 >> 2];
}
function ClosestRayResultCallback_get_m_hitPointWorld_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 68 | 0;
}
function AllHitsRayResultCallback_get_m_hitPointWorld_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 92 | 0;
}
function AllHitsRayResultCallback_get_m_hitFractions_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 112 | 0;
}
function ccClosestRayResultCallback_get_m_rayToWorld_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 36 | 0;
}
function ccAllHitsRayResultCallback_get_m_rayToWorld_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 56 | 0;
}
function btManifoldPoint__getAppliedImpulse_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPF32[HEAP32[$1 + 12 >> 2] + 132 >> 2];
}
function btAlignedObjectArray_float___capacity_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
}
function btAlignedObjectArray_btVector3___size_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}
function __cxxabiv1____class_type_info_____class_type_info_28_29($0) {
 $0 = $0 | 0;
 __cxxabiv1____shim_type_info_____shim_type_info_28_29($0);
 operator_20delete_28void__29($0);
}
function ClosestRayResultCallback_get_m_rayFromWorld_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 20 | 0;
}
function AllHitsRayResultCallback_get_m_rayFromWorld_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 40 | 0;
}
function btManifoldPoint_get_m_distance1_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return +HEAPF32[HEAP32[$1 + 12 >> 2] + 80 >> 2];
}
function btHashedSimplePairCache___btHashedSimplePairCache_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(btHashedSimplePairCache___btHashedSimplePairCache_28_29($0));
}
function btConvexConvexAlgorithm___btConvexConvexAlgorithm_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(btConvexConvexAlgorithm___btConvexConvexAlgorithm_28_29($0));
}
function btCollisionWorld__setContactBreakingThreshold_28float_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAPF32[$1 + 12 >> 2] = $0;
 HEAPF32[4966] = HEAPF32[$1 + 12 >> 2];
}
function LocalShapeInfo_get_m_triangleIndex_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}
function btManifoldResult__setShapeIdentifiersB_28int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[$0 + 28 >> 2] = $2;
 HEAP32[$0 + 20 >> 2] = $1;
}
function btManifoldResult__setShapeIdentifiersA_28int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[$0 + 24 >> 2] = $2;
 HEAP32[$0 + 16 >> 2] = $1;
}
function btAlignedObjectArray_int___capacity_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2];
}
function ClosestRayResultCallback_get_m_rayToWorld_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 36 | 0;
}
function AllHitsRayResultCallback_get_m_rayToWorld_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 56 | 0;
}
function btRigidBody__getAngularDamping_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPF32[HEAP32[$1 + 12 >> 2] + 508 >> 2];
}
function btCollisionObject__getUserIndex_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 264 >> 2];
}
function btAlignedObjectArray_float___size_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}
function btAlignedAllocator_btVector3_2c_2016u___btAlignedAllocator_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}
function dynCall_viiiii($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4, $5);
}
function btRigidBody__getLinearDamping_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPF32[HEAP32[$1 + 12 >> 2] + 504 >> 2];
}
function btPoint2PointConstraint_get_m_setting_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 348 | 0;
}
function btPersistentManifold__getBody1_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 840 >> 2];
}
function btPersistentManifold__getBody0_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 836 >> 2];
}
function btManifoldPoint_get_m_positionWorldOnB_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 32 | 0;
}
function btManifoldPoint_get_m_positionWorldOnA_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 48 | 0;
}
function btManifoldPoint_get_m_index1_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 112 >> 2];
}
function btManifoldPoint_get_m_index0_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 108 >> 2];
}
function btHeightfieldTerrainShape___btHeightfieldTerrainShape_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 14684;
 btConcaveShape___btConcaveShape_28_29($0);
 return $0 | 0;
}
function btCollisionShape__getUserIndex2_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 16 >> 2];
}
function ccDiscreteDynamicsWorld__getCcdTriggerRecorder_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 348 | 0;
}
function btTriangleIndexVertexArray__getIndexedMeshArray_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 20 | 0;
}
function btManifoldPoint_get_m_normalWorldOnB_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] - -64 | 0;
}
function btCollisionShape__getUserIndex_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 12 >> 2];
}
function btBU_Simplex1to4___btBU_Simplex1to4_28_29($0) {
 $0 = $0 | 0;
 btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($0);
 btAlignedFreeInternal_28void__29($0);
}
function btAlignedObjectArray_int___size_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}
function unsigned_20char_20std____2___28anonymous_20namespace_29____libcpp_atomic_load_unsigned_20char__28unsigned_20char_20const__2c_20int_29($0) {
 return HEAPU8[$0 | 0];
}
function btManifoldPoint__getDistance_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAPF32[HEAP32[$1 + 12 >> 2] + 80 >> 2];
}
function btIndexedMesh_get_m_numTriangles_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}
function btCollisionShape__getShapeType_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 4 >> 2];
}
function btCollisionObject__getCollisionShape_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 192 >> 2];
}
function btTriangleShape___btTriangleShape_28_29($0) {
 $0 = $0 | 0;
 btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($0);
 btAlignedFreeInternal_28void__29($0);
}
function btPoint2PointConstraint__getPivotInB_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 316 | 0;
}
function btPoint2PointConstraint__getPivotInA_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 300 | 0;
}
function btDiscreteDynamicsWorld__removeCharacter_28btActionInterface__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $1);
}
function btAlignedAllocator_float_2c_2016u___btAlignedAllocator_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}
function btRigidBody__getCenterOfMassTransform_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}
function LocalShapeInfo_get_m_shapePart_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] >> 2];
}
function btManifoldPoint_get_m_localPointB_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 16 | 0;
}
function btEmptyShape_btEmptyShape_0() {
 var $0 = 0;
 $0 = btEmptyShape__operator_20new_28unsigned_20long_29(40);
 btEmptyShape__btEmptyShape_28_29($0);
 return $0 | 0;
}
function btDiscreteDynamicsWorld__removeVehicle_28btActionInterface__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $1);
}
function btCollisionObject__getWorldTransform_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}
function btAlignedAllocator_int_2c_2016u___btAlignedAllocator_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}
function btStaticPlaneShape__getPlaneNormal_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 56 | 0;
}
function btDiscreteDynamicsWorld__addCharacter_28btActionInterface__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($0, $1);
}
function btConvexShape__btConvexShape_28_29($0) {
 HEAP32[$0 + 12 >> 2] = -1;
 HEAP32[$0 + 4 >> 2] = 35;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 >> 2] = 13156;
 return $0;
}
function btRigidBody__getBroadphaseProxy_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 188 >> 2];
}
function btConvexTriangleMeshShape__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
}
function btContinuousConvexCollision___btContinuousConvexCollision_28_29($0) {
 $0 = $0 | 0;
 btConvexCast___btConvexCast_28_29($0);
 operator_20delete_28void__29($0);
}
function SupportVertexCallback___SupportVertexCallback_28_29($0) {
 $0 = $0 | 0;
 btTriangleCallback___btTriangleCallback_28_29($0);
 operator_20delete_28void__29($0);
}
function btRigidBody__getCollisionShape_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 192 >> 2];
}
function btRigidBody__getAngularVelocity_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 388 | 0;
}
function btDiscreteDynamicsWorld__addVehicle_28btActionInterface__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($0, $1);
}
function btConvexTriangleMeshShape__getEdge_28int_2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
}
function btRigidBody__getLinearVelocity_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 372 | 0;
}
function btRigidBody__getFlags_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 564 >> 2];
}
function btHashedOverlappingPairCache__setInternalGhostPairCallback_28btOverlappingPairCallback__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 68 >> 2] = $1;
}
function btRigidBody__getAngularFactor_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 604 | 0;
}
function btRigidBody__getMotionState_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 540 >> 2];
}
function btRigidBody__getLinearFactor_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 408 | 0;
}
function btConvexTriangleMeshShape__isInside_28btVector3_20const__2c_20float_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 return 0;
}
function dynCall_iiiii($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3, $4) | 0;
}
function btRigidBody__getTotalTorque_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 488 | 0;
}
function btManifoldPoint__getShape1_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 204 >> 2];
}
function btManifoldPoint__getShape0_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[HEAP32[$1 + 12 >> 2] + 200 >> 2];
}
function btGeneric6DofSpring2Constraint___btGeneric6DofSpring2Constraint_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 3500;
 btAlignedFreeInternal_28void__29($0);
}
function btConvexPolyhedron___btConvexPolyhedron_28_29_1($0) {
 $0 = $0 | 0;
 btAlignedFreeInternal_28void__29(btConvexPolyhedron___btConvexPolyhedron_28_29($0));
}
function dynCall_fiii($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return Math_fround(Math_fround(FUNCTION_TABLE[$0]($1, $2, $3)));
}
function btVector3__operator_20float_20const__28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}
function btUnionFind__btUnionFind_28_29($0) {
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP8[$0 + 16 | 0] = 1;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 + 8 >> 2] = 0;
 return $0;
}
function btTriangleMeshShape___btTriangleMeshShape_28_29_1($0) {
 $0 = $0 | 0;
 btConcaveShape___btConcaveShape_28_29($0);
 btAlignedFreeInternal_28void__29($0);
}
function btRigidBody__getTotalForce_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 472 | 0;
}
function btCollisionObject__getWorldTransform_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}
function btBoxShape___btBoxShape_28_29($0) {
 $0 = $0 | 0;
 btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($0);
 btAlignedFreeInternal_28void__29($0);
}
function dynCall_viiif($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = Math_fround($4);
 FUNCTION_TABLE[$0]($1, $2, $3, $4);
}
function dynCall_viifi($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 $4 = $4 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4);
}
function btMotionState___btMotionState_28_29($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}
function btManifoldPoint_get_m_localPointA_0($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}
function btCollisionDispatcher__getManifoldByIndexInternal_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return HEAP32[HEAP32[$0 + 20 >> 2] + ($1 << 2) >> 2];
}
function btStaticPlaneShape___btStaticPlaneShape_28_29_1($0) {
 $0 = $0 | 0;
 btConcaveShape___btConcaveShape_28_29($0);
 btAlignedFreeInternal_28void__29($0);
}
function btHashedOverlappingPairCache__setOverlapFilterCallback_28btOverlapFilterCallback__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 24 >> 2] = $1;
}
function btCollisionWorld__getDispatchInfo_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 28 | 0;
}
function btCollisionDispatcher__getInternalManifoldPointer_28_29($0) {
 $0 = $0 | 0;
 if (!HEAP32[$0 + 12 >> 2]) {
  return 0;
 }
 return HEAP32[$0 + 20 >> 2];
}
function btDiscreteDynamicsWorld__getConstraint_28int_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return HEAP32[HEAP32[$0 + 236 >> 2] + ($1 << 2) >> 2];
}
function btBU_Simplex1to4__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
}
function btSubsimplexConvexCast___btSubsimplexConvexCast_28_29($0) {
 $0 = $0 | 0;
 btConvexCast___btConvexCast_28_29($0);
 operator_20delete_28void__29($0);
}
function btBU_Simplex1to4__getNumPlanes_28_29_20const($0) {
 $0 = $0 | 0;
 $0 = HEAP32[$0 + 96 >> 2];
 return (($0 | 0) == 4 ? 4 : (($0 | 0) == 3) << 1) | 0;
}
function btTransform__getOrigin_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 48 | 0;
}
function btDynamicsWorld__getSolverInfo_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 92 | 0;
}
function btEmptyShape__btEmptyShape_28_29($0) {
 btConcaveShape__btConcaveShape_28_29($0);
 HEAP32[$0 + 4 >> 2] = 27;
 HEAP32[$0 >> 2] = 12996;
 return $0;
}
function btBroadphaseProxy__isCompound_28int_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] == 31;
}
function btAlignedAllocInternal_28unsigned_20long_2c_20int_29($0, $1) {
 HEAP32[6261] = HEAP32[6261] + 1;
 return FUNCTION_TABLE[HEAP32[4972]]($0, $1) | 0;
}
function btVector3_btVector3_0() {
 var $0 = 0;
 $0 = btVector3__operator_20new_28unsigned_20long_29(16);
 btVector3__btVector3_28_29($0);
 return $0 | 0;
}
function btSqrt_28float_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAPF32[$1 + 12 >> 2] = $0;
 return Math_fround(Math_sqrt(HEAPF32[$1 + 12 >> 2]));
}
function btBU_Simplex1to4__isInside_28btVector3_20const__2c_20float_29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 return 0;
}
function __cxxabiv1___28anonymous_20namespace_29__GuardObject___cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads___derived_28_29($0) {
 return $0;
}
function btFabs_28float_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAPF32[$1 + 12 >> 2] = $0;
 return Math_fround(Math_abs(HEAPF32[$1 + 12 >> 2]));
}
function btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
}
function btCollisionWorld__ConvexResultCallback___ConvexResultCallback_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0;
 abort();
}
function btBroadphaseProxy__isConvex_28int_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] < 20;
}
function dynCall_viiii($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3, $4);
}
function btTransform_btTransform_0() {
 var $0 = 0;
 $0 = operator_20new_28unsigned_20long_29(64);
 btTransform__btTransform_28_29($0);
 return $0 | 0;
}
function btOptimizedBvh___btOptimizedBvh_28_29_1($0) {
 $0 = $0 | 0;
 btQuantizedBvh___btQuantizedBvh_28_29($0);
 btAlignedFreeInternal_28void__29($0);
}
function btDiscreteDynamicsWorld__getConstraint_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return HEAP32[HEAP32[$0 + 236 >> 2] + ($1 << 2) >> 2];
}
function btDbvtBroadphase___btDbvtBroadphase_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(btDbvtBroadphase___btDbvtBroadphase_28_29($0));
}
function btCompoundShape___btCompoundShape_28_29_1($0) {
 $0 = $0 | 0;
 btAlignedFreeInternal_28void__29(btCompoundShape___btCompoundShape_28_29($0));
}
function btCollisionWorld___btCollisionWorld_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29(btCollisionWorld___btCollisionWorld_28_29($0));
}
function btQuadWord__getZ_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 8 | 0;
}
function btQuadWord__getY_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}
function btCylinderShape___btCylinderShape_28_29($0) {
 $0 = $0 | 0;
 btConvexShape___btConvexShape_28_29($0);
 btAlignedFreeInternal_28void__29($0);
}
function dynCall_iiif($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 return FUNCTION_TABLE[$0]($1, $2, $3) | 0;
}
function btVector3__getZ_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 8 | 0;
}
function btVector3__getY_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}
function btTransform__getOrigin_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 48 | 0;
}
function btSphereShape__getMargin_28_29_20const($0) {
 $0 = $0 | 0;
 return Math_fround(Math_fround(HEAPF32[$0 + 32 >> 2] * HEAPF32[$0 + 16 >> 2]));
}
function btPoint2PointConstraint___btPoint2PointConstraint_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 3500;
 btAlignedFreeInternal_28void__29($0);
}
function btCollisionObject__setActivationState_28int_29_20const($0, $1) {
 if ((HEAP32[$0 + 220 >> 2] & -2) != 4) {
  HEAP32[$0 + 220 >> 2] = $1;
 }
}
function dynCall_fif($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 return Math_fround(Math_fround(FUNCTION_TABLE[$0]($1, $2)));
}
function btSphereShape___btSphereShape_28_29_1($0) {
 $0 = $0 | 0;
 btConvexShape___btConvexShape_28_29($0);
 btAlignedFreeInternal_28void__29($0);
}
function btQuadWord__w_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 12 | 0;
}
function btEmptyShape___btEmptyShape_28_29_1($0) {
 $0 = $0 | 0;
 btConcaveShape___btConcaveShape_28_29($0);
 btAlignedFreeInternal_28void__29($0);
}
function btConstraintSolver__allSolved_28btContactSolverInfo_20const__2c_20btIDebugDraw__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
}
function btCollisionWorld__RayResultCallback___RayResultCallback_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0;
 abort();
}
function btCapsuleShape___btCapsuleShape_28_29($0) {
 $0 = $0 | 0;
 btConvexShape___btConvexShape_28_29($0);
 btAlignedFreeInternal_28void__29($0);
}
function btTriangleMesh___btTriangleMesh_28_29_1($0) {
 $0 = $0 | 0;
 btAlignedFreeInternal_28void__29(btTriangleMesh___btTriangleMesh_28_29($0));
}
function btTransform__getBasis_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}
function btQuantizedBvh___btQuantizedBvh_28_29_1($0) {
 $0 = $0 | 0;
 btAlignedFreeInternal_28void__29(btQuantizedBvh___btQuantizedBvh_28_29($0));
}
function btQuadWord__z_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 8 | 0;
}
function btQuadWord__y_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}
function btVector3__z_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 8 | 0;
}
function btVector3__y_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2] + 4 | 0;
}
function btVector3__operator_20float__28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}
function btEmptyShape__calculateLocalInertia_28float_2c_20btVector3__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 $2 = $2 | 0;
}
function btGjkConvexCast___btGjkConvexCast_28_29($0) {
 $0 = $0 | 0;
 btConvexCast___btConvexCast_28_29($0);
 operator_20delete_28void__29($0);
}
function btConvexConcaveCollisionAlgorithm__SwappedCreateFunc___SwappedCreateFunc_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function $28anonymous_20namespace_29__AtomicInt_unsigned_20char___AtomicInt_28unsigned_20char__29($0, $1) {
 HEAP32[$0 >> 2] = $1;
 return $0;
}
function btQuadWord__getX_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}
function btOverlapFilterCallback___btOverlapFilterCallback_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0;
 abort();
}
function btConeShape___btConeShape_28_29($0) {
 $0 = $0 | 0;
 btConvexShape___btConvexShape_28_29($0);
 btAlignedFreeInternal_28void__29($0);
}
function btClosestNotMeConvexResultCallback___btClosestNotMeConvexResultCallback_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function __wasm_rotl_i32($0, $1) {
 var $2 = 0;
 $2 = $1 & 31;
 $1 = 0 - $1 & 31;
 return (-1 >>> $2 & $0) << $2 | (-1 << $1 & $0) >>> $1;
}



function btVector3__getX_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}
function btDbvt__ICollide__Process_28btDbvtNode_20const__2c_20btDbvtNode_20const__29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
}
function dynCall_iiii($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return FUNCTION_TABLE[$0]($1, $2, $3) | 0;
}
function btQuadWord__btQuadWord_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}
function btMinkowskiPenetrationDepthSolver___btMinkowskiPenetrationDepthSolver_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btTransform__getBasis_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}
function btQuadWord__x_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}
function btFixedConstraint___btFixedConstraint_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 3500;
 btAlignedFreeInternal_28void__29($0);
}
function dynCall_viif($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = Math_fround($3);
 FUNCTION_TABLE[$0]($1, $2, $3);
}
function dynCall_vifi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 $3 = $3 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3);
}
function btVector3__x_28_29_20const($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}
function btVector3__btVector3_28_29($0) {
 var $1 = 0;
 $1 = global$0 - 16 | 0;
 HEAP32[$1 + 12 >> 2] = $0;
 return HEAP32[$1 + 12 >> 2];
}
function btEmptyAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}
function btCompoundCollisionAlgorithm__SwappedCreateFunc___SwappedCreateFunc_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function __cxxabiv1____shim_type_info_____shim_type_info_28_29($0) {
 $0 = $0 | 0;
 std__type_info___type_info_28_29($0);
 return $0 | 0;
}
function btTriangleMeshShape___btTriangleMeshShape_28_29($0) {
 $0 = $0 | 0;
 btConcaveShape___btConcaveShape_28_29($0);
 return $0 | 0;
}
function btHingeConstraint___btHingeConstraint_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 3500;
 btAlignedFreeInternal_28void__29($0);
}
function btDiscreteDynamicsWorld__getWorldType_28_29_20const($0) {
 $0 = $0 | 0;
 HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0;
 return 2;
}
function __wasm_i64_mul($0, $1, $2, $3) {
 $3 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3);
 return $3;
}
function std__type_info__operator___28std__type_info_20const__29_20const($0, $1) {
 return HEAP32[$0 + 4 >> 2] == HEAP32[$1 + 4 >> 2];
}
function btStaticPlaneShape___btStaticPlaneShape_28_29($0) {
 $0 = $0 | 0;
 btConcaveShape___btConcaveShape_28_29($0);
 return $0 | 0;
}
function btConvexTriangleMeshShape__getVertex_28int_2c_20btVector3__29_20const($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
}
function btGjkEpaPenetrationDepthSolver___btGjkEpaPenetrationDepthSolver_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btCompoundCompoundLeafCallback___btCompoundCompoundLeafCallback_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btOptimizedBvh__btOptimizedBvh_28_29($0) {
 btQuantizedBvh__btQuantizedBvh_28_29($0);
 HEAP32[$0 >> 2] = 14356;
 return $0;
}
function btAlignedFreeInternal_28void__29($0) {
 if ($0) {
  HEAP32[6262] = HEAP32[6262] + 1;
  FUNCTION_TABLE[HEAP32[4973]]($0);
 }
}
function btCompoundCompoundCollisionAlgorithm__CreateFunc___CreateFunc_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function __cxxabiv1___28anonymous_20namespace_29__InitByteNoThreads__release_init_byte_28_29($0) {
 HEAP8[HEAP32[$0 + 8 >> 2]] = 1;
}
function btSphereTriangleCollisionAlgorithm__CreateFunc___CreateFunc_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btHashedOverlappingPairCache__getOverlappingPairArrayPtr_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 16 >> 2];
}
function dynCall_viii($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 FUNCTION_TABLE[$0]($1, $2, $3);
}
function btConvexConcaveCollisionAlgorithm__CreateFunc___CreateFunc_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btAlignedFreeDefault_28void__29($0) {
 $0 = $0 | 0;
 if ($0) {
  FUNCTION_TABLE[HEAP32[4975]](HEAP32[$0 + -4 >> 2]);
 }
}
function btSphereSphereCollisionAlgorithm__CreateFunc___CreateFunc_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btOptimizedBvh___btOptimizedBvh_28_29($0) {
 $0 = $0 | 0;
 btQuantizedBvh___btQuantizedBvh_28_29($0);
 return $0 | 0;
}
function btDiscreteCollisionDetectorInterface___btDiscreteCollisionDetectorInterface_28_29($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function btConvexPlaneCollisionAlgorithm__CreateFunc___CreateFunc_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btTriangleIndexVertexArray__hasPremadeAabb_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 48 >> 2] == 1 | 0;
}
function btHashedOverlappingPairCache__getNumOverlappingPairs_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 8 >> 2];
}
function __cxx_global_array_dtor_2($0) {
 $0 = $0 | 0;
 $0 = HEAP32[5682];
 if ($0) {
  operator_20delete_28void__29($0);
 }
}
function stackRestore($0) {
 $0 = $0 | 0;
 if ($0 >>> 0 < global$2 >>> 0) {
  __handle_stack_overflow();
 }
 global$0 = $0;
}
function btDefaultCollisionConfiguration__getCollisionAlgorithmPool_28_29($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 16 >> 2];
}
function btConvexTriangleMeshShape__getLocalScaling_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 96 >> 2] + 4 | 0;
}
function btCompoundCollisionAlgorithm__CreateFunc___CreateFunc_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function setThrew($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 if (!HEAP32[6389]) {
  HEAP32[6390] = $1;
  HEAP32[6389] = $0;
 }
}
function btEmptyShape___btEmptyShape_28_29($0) {
 $0 = $0 | 0;
 btConcaveShape___btConcaveShape_28_29($0);
 return $0 | 0;
}
function btDefaultCollisionConfiguration__getPersistentManifoldPool_28_29($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 8 >> 2];
}
function btConvexCast__CastResult__reportFailure_28int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
}
function btCompoundShape__setMargin_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 HEAPF32[$0 + 76 >> 2] = $1;
}
function btPointCollector__setShapeIdentifiersB_28int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
}
function btPointCollector__setShapeIdentifiersA_28int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
}
function btPerturbedContactResult___btPerturbedContactResult_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btMotionState___btMotionState_28_29_1($0) {
 $0 = $0 | 0;
 HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0;
 abort();
}
function btHashedOverlappingPairCache__getOverlappingPairArrayPtr_28_29($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 16 >> 2];
}
function btConcaveShape__setMargin_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 HEAPF32[$0 + 16 >> 2] = $1;
}
function btBoxBoxCollisionAlgorithm__CreateFunc___CreateFunc_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btSphereShape__setMargin_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
 HEAPF32[$0 + 48 >> 2] = $1;
}
function btGeneric6DofConstraint__getAngle_28int_29_20const($0, $1) {
 return HEAPF32[(($1 << 2) + $0 | 0) + 1192 >> 2];
}
function btConvexConvexAlgorithm__CreateFunc___CreateFunc_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btConvexInternalShape__getMargin_28_29_20const($0) {
 $0 = $0 | 0;
 return Math_fround(HEAPF32[$0 + 48 >> 2]);
}
function btCollisionPairCallback___btCollisionPairCallback_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btCollisionDispatcher__getInternalManifoldPool_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 72 >> 2];
}
function btTriangleMeshShape__getLocalScaling_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 52 >> 2] + 4 | 0;
}
function btCompoundLeafCallback___btCompoundLeafCallback_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function SphereTriangleDetector___SphereTriangleDetector_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function dynCall_iii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return FUNCTION_TABLE[$0]($1, $2) | 0;
}
function btTriangleIndexVertexArray__unLockReadOnlyVertexBase_28int_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}
function btPolyhedralConvexAabbCachingShape___btPolyhedralConvexAabbCachingShape_28_29($0) {
 $0 = $0 | 0;
 abort();
}
function btInternalTriangleIndexCallback___btInternalTriangleIndexCallback_28_29($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function btHashedSimplePairCache__getOverlappingPairArrayPtr_28_29($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 16 >> 2];
}
function btGeneric6DofSpring2Constraint__calculateSerializeBufferSize_28_29_20const($0) {
 $0 = $0 | 0;
 return 644;
}
function btDiscreteDynamicsWorld__getNumConstraints_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 228 >> 2];
}
function dynCall_fi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return Math_fround(Math_fround(FUNCTION_TABLE[$0]($1)));
}
function btTriangleIndexVertexArray__getNumSubParts_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 24 >> 2];
}
function btSingleSweepCallback___btSingleSweepCallback_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btConstraintSolver__prepareSolve_28int_2c_20int_29($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
}
function CProfileSample__CProfileSample_28char_20const__29($0, $1) {
 FUNCTION_TABLE[HEAP32[4970]]($1);
 return $0;
}
function dynCall_vif($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = Math_fround($2);
 FUNCTION_TABLE[$0]($1, $2);
}
function btDbvtBroadphase__getOverlappingPairCache_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 96 >> 2];
}
function btConvexPenetrationDepthSolver___btConvexPenetrationDepthSolver_28_29($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function btConvexCast__CastResult__drawCoordSystem_28btTransform_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}
function btCollisionAlgorithmCreateFunc___btCollisionAlgorithmCreateFunc_28_29($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function btActivatingCollisionAlgorithm___btActivatingCollisionAlgorithm_28_29($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function btTypedConstraint___btTypedConstraint_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 3500;
 return $0 | 0;
}
function btFixedConstraint___btFixedConstraint_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 3500;
 return $0 | 0;
}
function btConvexInternalShape__getNumPreferredPenetrationDirections_28_29_20const($0) {
 $0 = $0 | 0;
 return 0;
}
function btCompoundShape__getMargin_28_29_20const($0) {
 $0 = $0 | 0;
 return Math_fround(HEAPF32[$0 + 76 >> 2]);
}
function BroadphaseAabbTester___BroadphaseAabbTester_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btConcaveShape__getMargin_28_29_20const($0) {
 $0 = $0 | 0;
 return Math_fround(HEAPF32[$0 + 16 >> 2]);
}
function btSingleRayCallback___btSingleRayCallback_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btEmptyAlgorithm__CreateFunc___CreateFunc_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btCollisionDispatcher__getNumManifolds_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 12 >> 2];
}
function btCollisionDispatcher__getInternalManifoldPool_28_29($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 72 >> 2];
}
function BroadphaseRayTester___BroadphaseRayTester_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btPersistentManifold__getContactBreakingThreshold_28_29_20const($0) {
 return HEAPF32[$0 + 848 >> 2];
}
function btDiscreteDynamicsWorld__getConstraintSolver_28_29($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 216 >> 2];
}
function btDbvt__ICollide__AllLeaves_28btDbvtNode_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1;
}
function btActivatingCollisionAlgorithm___btActivatingCollisionAlgorithm_28_29_1($0) {
 $0 = $0 | 0;
 abort();
}
function btDbvtTreeCollider___btDbvtTreeCollider_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btConvexCast__CastResult___CastResult_28_29_1($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btStridingMeshInterface__calculateSerializeBufferSize_28_29_20const($0) {
 $0 = $0 | 0;
 return 28;
}
function btPoint2PointConstraint__calculateSerializeBufferSize_28_29_20const($0) {
 $0 = $0 | 0;
 return 84;
}
function btHashedOverlappingPairCache__getOverlappingPairArray_28_29($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0;
}
function btDbvt__ICollide__Descent_28btDbvtNode_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1;
}
function btTriangleShape__getNumPreferredPenetrationDirections_28_29_20const($0) {
 $0 = $0 | 0;
 return 2;
}
function btPoint2PointConstraint__getFlags_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 332 >> 2];
}
function btHeightfieldTerrainShape__getLocalScaling_28_29_20const($0) {
 $0 = $0 | 0;
 return $0 + 112 | 0;
}
function btGjkPairDetector___btGjkPairDetector_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btBvhTriangleMeshShape__calculateSerializeBufferSize_28_29_20const($0) {
 $0 = $0 | 0;
 return 60;
}
function btDbvtBroadphase__getOverlappingPairCache_28_29($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 96 >> 2];
}
function btConvexInternalShape__calculateSerializeBufferSize_28_29_20const($0) {
 $0 = $0 | 0;
 return 52;
}
function dynCall_vii($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 FUNCTION_TABLE[$0]($1, $2);
}
function btSequentialImpulseConstraintSolver__reset_28_29($0) {
 $0 = $0 | 0;
 HEAP32[$0 + 232 >> 2] = 0;
}
function btPointCollector___btPointCollector_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btManifoldResult___btManifoldResult_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btEmptyAlgorithm___btEmptyAlgorithm_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btBoxBoxDetector___btBoxBoxDetector_28_29($0) {
 $0 = $0 | 0;
 operator_20delete_28void__29($0);
}
function btBU_Simplex1to4__getNumVertices_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 96 >> 2];
}
function btTriangleConvexcastCallback___btTriangleConvexcastCallback_28_29($0) {
 $0 = $0 | 0;
 abort();
}
function btSequentialImpulseConstraintSolver__getSolverType_28_29_20const($0) {
 $0 = $0 | 0;
 return 1;
}
function btDiscreteCollisionDetectorInterface__Result___Result_28_29($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function btCollisionObject__forceActivationState_28int_29_20const($0, $1) {
 HEAP32[$0 + 220 >> 2] = $1;
}
function btTriangleIndexVertexArray__preallocateVertices_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}
function btStaticPlaneShape__calculateSerializeBufferSize_28_29_20const($0) {
 $0 = $0 | 0;
 return 52;
}
function btHingeConstraint__calculateSerializeBufferSize_28_29_20const($0) {
 $0 = $0 | 0;
 return 220;
}
function btCollisionObject__calculateSerializeBufferSize_28_29_20const($0) {
 $0 = $0 | 0;
 return 264;
}
function __cxx_global_var_init() {
 btInfMaskConverter__btInfMaskConverter_28int_29(19904, 2139095040);
}
function btTypedConstraint__calculateSerializeBufferSize_28_29_20const($0) {
 $0 = $0 | 0;
 return 52;
}
function btTriangleIndexVertexArray__preallocateIndices_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}
function btQuantizedBvh__calculateSerializeBufferSizeNew_28_29_20const($0) {
 $0 = $0 | 0;
 return 84;
}
function btConvexInternalShape__getLocalScaling_28_29_20const($0) {
 $0 = $0 | 0;
 return $0 + 16 | 0;
}
function btConvexCast__CastResult__DebugDraw_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
}
function btBroadphaseAabbCallback___btBroadphaseAabbCallback_28_29($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function btBoxShape__getNumPreferredPenetrationDirections_28_29_20const($0) {
 $0 = $0 | 0;
 return 6;
}
function btHingeConstraint__getFlags_28_29_20const($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 748 >> 2];
}
function btCollisionShape__calculateSerializeBufferSize_28_29_20const($0) {
 $0 = $0 | 0;
 return 12;
}
function btBU_Simplex1to4__getIndex_28int_29_20const($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 0;
}
function btTriangleIndexVertexArray__unLockVertexBase_28int_29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}
function btCylinderShape__calculateSerializeBufferSize_28_29_20const($0) {
 $0 = $0 | 0;
 return 60;
}
function btCompoundShape__calculateSerializeBufferSize_28_29_20const($0) {
 $0 = $0 | 0;
 return 24;
}
function btStaticPlaneShape__getLocalScaling_28_29_20const($0) {
 $0 = $0 | 0;
 return $0 + 72 | 0;
}
function btConvexConvexAlgorithm__CreateFunc___CreateFunc_28_29($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function btCapsuleShape__calculateSerializeBufferSize_28_29_20const($0) {
 $0 = $0 | 0;
 return 60;
}
function std__uncaught_exception_28_29() {
 return (std__uncaught_exceptions_28_29() | 0) > 0 | 0;
}
function btTriangleRaycastCallback___btTriangleRaycastCallback_28_29($0) {
 $0 = $0 | 0;
 abort();
}
function btRigidBody__calculateSerializeBufferSize_28_29_20const($0) {
 $0 = $0 | 0;
 return 496;
}
function btDbvt__ICollide__Process_28btDbvtNode_20const__29($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}
function btCompoundShape__getLocalScaling_28_29_20const($0) {
 $0 = $0 | 0;
 return $0 + 184 | 0;
}
function CProfileSample___CProfileSample_28_29($0) {
 FUNCTION_TABLE[HEAP32[4971]]();
 return $0;
}
function btNodeOverlapCallback___btNodeOverlapCallback_28_29($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function btConeShape__calculateSerializeBufferSize_28_29_20const($0) {
 $0 = $0 | 0;
 return 60;
}
function btConvexTriangleMeshShape__getNumVertices_28_29_20const($0) {
 $0 = $0 | 0;
 return 0;
}
function btPolyhedralConvexShape___btPolyhedralConvexShape_28_29($0) {
 $0 = $0 | 0;
 abort();
}
function btHashedOverlappingPairCache__hasDeferredRemoval_28_29($0) {
 $0 = $0 | 0;
 return 0;
}
function btCollisionAlgorithm___btCollisionAlgorithm_28_29($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function dynCall_ii($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return FUNCTION_TABLE[$0]($1) | 0;
}
function btEmptyShape__getLocalScaling_28_29_20const($0) {
 $0 = $0 | 0;
 return $0 + 20 | 0;
}
function btConvexTriangleMeshShape__getNumPlanes_28_29_20const($0) {
 $0 = $0 | 0;
 return 0;
}
function __wasm_call_ctors() {
 _GLOBAL__sub_I_glue_cpp();
 _GLOBAL__sub_I_btQuickprof_cpp();
}
function CProfileManager__Increment_Frame_Counter_28_29() {
 HEAP32[6260] = HEAP32[6260] + 1;
}
function btHeightfieldTerrainShape__getName_28_29_20const($0) {
 $0 = $0 | 0;
 return 14796;
}
function btConvexTriangleMeshShape__getNumEdges_28_29_20const($0) {
 $0 = $0 | 0;
 return 0;
}
function btConvexTriangleMeshShape__getName_28_29_20const($0) {
 $0 = $0 | 0;
 return 13888;
}
function btConvexInternalShape___btConvexInternalShape_28_29_1($0) {
 $0 = $0 | 0;
 abort();
}
function btCapsuleShape__setMargin_28float_29($0, $1) {
 $0 = $0 | 0;
 $1 = Math_fround($1);
}
function btMutexUnlock_28btSpinMutex__29($0) {
 HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0;
}
function btTriangleCallback___btTriangleCallback_28_29($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function btCollisionAlgorithm___btCollisionAlgorithm_28_29_1($0) {
 $0 = $0 | 0;
 abort();
}
function btAllocDefault_28unsigned_20long_29($0) {
 $0 = $0 | 0;
 return dlmalloc($0) | 0;
}
function btMutexLock_28btSpinMutex__29($0) {
 HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0;
}
function btBvhTriangleMeshShape__getName_28_29_20const($0) {
 $0 = $0 | 0;
 return 12140;
}
function btOverlapCallback___btOverlapCallback_28_29($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function btConvexCast__CastResult___CastResult_28_29($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function btTriangleMeshShape__getName_28_29_20const($0) {
 $0 = $0 | 0;
 return 12468;
}
function btTriangleShape__getNumVertices_28_29_20const($0) {
 $0 = $0 | 0;
 return 3;
}
function btStaticPlaneShape__getName_28_29_20const($0) {
 $0 = $0 | 0;
 return 12596;
}
function btTypedConstraint___btTypedConstraint_28_29_1($0) {
 $0 = $0 | 0;
 abort();
}
function btTriangleShape__getNumPlanes_28_29_20const($0) {
 $0 = $0 | 0;
 return 1;
}
function btBU_Simplex1to4__getName_28_29_20const($0) {
 $0 = $0 | 0;
 return 10988;
}
function dynCall_vi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 FUNCTION_TABLE[$0]($1);
}
function btTriangleShape__getNumEdges_28_29_20const($0) {
 $0 = $0 | 0;
 return 3;
}
function btStridingMeshInterface___btStridingMeshInterface_28_29($0) {
 return $0;
}
function btCylinderShape__getName_28_29_20const($0) {
 $0 = $0 | 0;
 return 14944;
}
function btConcaveShape___btConcaveShape_28_29($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function btCompoundShape__getName_28_29_20const($0) {
 $0 = $0 | 0;
 return 11176;
}
function btTriangleShape__getName_28_29_20const($0) {
 $0 = $0 | 0;
 return 6736;
}
function btCapsuleShape__getName_28_29_20const($0) {
 $0 = $0 | 0;
 return 13620;
}
function std__uncaught_exceptions_28_29() {
 return __cxa_uncaught_exceptions();
}
function btSphereShape__getName_28_29_20const($0) {
 $0 = $0 | 0;
 return 11516;
}
function btGeneric6DofSpring2Constraint__buildJacobian_28_29($0) {
 $0 = $0 | 0;
}
function btConvexShape___btConvexShape_28_29($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function btBoxShape__getNumVertices_28_29_20const($0) {
 $0 = $0 | 0;
 return 8;
}
function btEmptyShape__getName_28_29_20const($0) {
 $0 = $0 | 0;
 return 13092;
}
function std__type_info__name_28_29_20const($0) {
 return HEAP32[$0 + 4 >> 2];
}
function btDbvt__ICollide___ICollide_28_29($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function btConvexCast___btConvexCast_28_29($0) {
 $0 = $0 | 0;
 return $0 | 0;
}
function btConeShape__getName_28_29_20const($0) {
 $0 = $0 | 0;
 return 11316;
}
function btConcaveShape___btConcaveShape_28_29_1($0) {
 $0 = $0 | 0;
 abort();
}
function btBoxShape__getNumPlanes_28_29_20const($0) {
 $0 = $0 | 0;
 return 6;
}
function btBoxShape__getNumEdges_28_29_20const($0) {
 $0 = $0 | 0;
 return 12;
}
function __cxxabiv1____shim_type_info__noop2_28_29_20const($0) {
 $0 = $0 | 0;
}
function __cxxabiv1____shim_type_info__noop1_28_29_20const($0) {
 $0 = $0 | 0;
}
function btBoxShape__getName_28_29_20const($0) {
 $0 = $0 | 0;
 return 14176;
}
function CProfileManager__Reset_28_29() {
 gettimeofday(HEAP32[5682], 0) | 0;
}
function btConvexShape___btConvexShape_28_29_1($0) {
 $0 = $0 | 0;
 abort();
}
function btEnterProfileZoneDefault_28char_20const__29($0) {
 $0 = $0 | 0;
}
function btTypedConstraint__buildJacobian_28_29($0) {
 $0 = $0 | 0;
}
function __cxa_pure_virtual() {
 abort_message(19486, 0);
 abort();
}
function btFreeDefault_28void__29($0) {
 $0 = $0 | 0;
 dlfree($0);
}
function __growWasmMemory($0) {
 $0 = $0 | 0;
 return abort() | 0;
}
function btConstraintParamsBT_CONSTRAINT_STOP_ERP() {
 return 2;
}
function btConstraintParamsBT_CONSTRAINT_STOP_CFM() {
 return 4;
}
function btDbvtBroadphase__printStats_28_29($0) {
 $0 = $0 | 0;
}
function __set_stack_limit($0) {
 $0 = $0 | 0;
 global$2 = $0;
}
function _GLOBAL__sub_I_glue_cpp() {
 __cxx_global_var_init();
}
function dynCall_v($0) {
 $0 = $0 | 0;
 FUNCTION_TABLE[$0]();
}
function btDispatcher___btDispatcher_28_29($0) {
 return $0;
}
function std__type_info___type_info_28_29($0) {
 return $0;
}
function btConstraintParamsBT_CONSTRAINT_ERP() {
 return 1;
}
function btConstraintParamsBT_CONSTRAINT_CFM() {
 return 3;
}
function sqrtf($0) {
 return Math_fround(Math_sqrt($0));
}
function operator_20delete_28void__29($0) {
 dlfree($0);
}
function fabsf($0) {
 return Math_fround(Math_abs($0));
}
function PHY_ScalarTypePHY_FIXEDPOINT88() {
 return 4;
}
function emscripten_get_sbrk_ptr() {
 return 25568;
}
function __cxa_uncaught_exceptions() {
 return 0;
}
function PHY_ScalarTypePHY_INTEGER() {
 return 2;
}
function PHY_ScalarTypePHY_DOUBLE() {
 return 1;
}
function PHY_ScalarTypePHY_UCHAR() {
 return 5;
}
function PHY_ScalarTypePHY_SHORT() {
 return 3;
}
function PHY_ScalarTypePHY_FLOAT() {
 return 0;
}
function stackSave() {
 return global$0 | 0;
}
function floor($0) {
 return Math_floor($0);
}
function __errno_location() {
 return 25052;
}
function btLeaveProfileZoneDefault_28_29() {}
function sqrt($0) {
 return Math_sqrt($0);
}
function abort_message($0, $1) {
 abort();
}

// EMSCRIPTEN_END_FUNCS

;
 FUNCTION_TABLE[1] = __cxx_global_array_dtor;
 FUNCTION_TABLE[2] = ccDiscreteDynamicsWorld__ccDiscreteDynamicsWorld_28btDispatcher__2c_20btBroadphaseInterface__2c_20btConstraintSolver__2c_20btCollisionConfiguration__29;
 FUNCTION_TABLE[3] = ccDiscreteDynamicsWorld___ccDiscreteDynamicsWorld_28_29;
 FUNCTION_TABLE[4] = ccDiscreteDynamicsWorld___ccDiscreteDynamicsWorld_28_29_1;
 FUNCTION_TABLE[5] = btCollisionWorld__updateAabbs_28_29;
 FUNCTION_TABLE[6] = btCollisionWorld__computeOverlappingPairs_28_29;
 FUNCTION_TABLE[7] = btCollisionWorld__setDebugDrawer_28btIDebugDraw__29;
 FUNCTION_TABLE[8] = btCollisionWorld__getDebugDrawer_28_29;
 FUNCTION_TABLE[9] = btDiscreteDynamicsWorld__debugDrawWorld_28_29;
 FUNCTION_TABLE[10] = btCollisionWorld__debugDrawObject_28btTransform_20const__2c_20btCollisionShape_20const__2c_20btVector3_20const__29;
 FUNCTION_TABLE[11] = btCollisionWorld__rayTest_28btVector3_20const__2c_20btVector3_20const__2c_20btCollisionWorld__RayResultCallback__29_20const;
 FUNCTION_TABLE[12] = btDiscreteDynamicsWorld__addCollisionObject_28btCollisionObject__2c_20int_2c_20int_29;
 FUNCTION_TABLE[13] = btDiscreteDynamicsWorld__removeCollisionObject_28btCollisionObject__29;
 FUNCTION_TABLE[14] = btCollisionWorld__performDiscreteCollisionDetection_28_29;
 FUNCTION_TABLE[15] = btDiscreteDynamicsWorld__serialize_28btSerializer__29;
 FUNCTION_TABLE[16] = btDiscreteDynamicsWorld__stepSimulation_28float_2c_20int_2c_20float_29;
 FUNCTION_TABLE[17] = btDiscreteDynamicsWorld__addConstraint_28btTypedConstraint__2c_20bool_29;
 FUNCTION_TABLE[18] = btDiscreteDynamicsWorld__removeConstraint_28btTypedConstraint__29;
 FUNCTION_TABLE[19] = btDiscreteDynamicsWorld__addAction_28btActionInterface__29;
 FUNCTION_TABLE[20] = btDiscreteDynamicsWorld__removeAction_28btActionInterface__29;
 FUNCTION_TABLE[21] = btDiscreteDynamicsWorld__setGravity_28btVector3_20const__29;
 FUNCTION_TABLE[22] = btDiscreteDynamicsWorld__getGravity_28_29_20const;
 FUNCTION_TABLE[23] = btDiscreteDynamicsWorld__synchronizeMotionStates_28_29;
 FUNCTION_TABLE[24] = btDiscreteDynamicsWorld__addRigidBody_28btRigidBody__29;
 FUNCTION_TABLE[25] = btDiscreteDynamicsWorld__addRigidBody_28btRigidBody__2c_20int_2c_20int_29;
 FUNCTION_TABLE[26] = btDiscreteDynamicsWorld__removeRigidBody_28btRigidBody__29;
 FUNCTION_TABLE[27] = btDiscreteDynamicsWorld__setConstraintSolver_28btConstraintSolver__29;
 FUNCTION_TABLE[28] = btDiscreteDynamicsWorld__getConstraintSolver_28_29;
 FUNCTION_TABLE[29] = btDiscreteDynamicsWorld__getNumConstraints_28_29_20const;
 FUNCTION_TABLE[30] = btDiscreteDynamicsWorld__getConstraint_28int_29;
 FUNCTION_TABLE[31] = btDiscreteDynamicsWorld__getConstraint_28int_29_20const;
 FUNCTION_TABLE[32] = btDiscreteDynamicsWorld__getWorldType_28_29_20const;
 FUNCTION_TABLE[33] = btDiscreteDynamicsWorld__clearForces_28_29;
 FUNCTION_TABLE[34] = btDiscreteDynamicsWorld__addVehicle_28btActionInterface__29;
 FUNCTION_TABLE[35] = btDiscreteDynamicsWorld__removeVehicle_28btActionInterface__29;
 FUNCTION_TABLE[36] = btDiscreteDynamicsWorld__addCharacter_28btActionInterface__29;
 FUNCTION_TABLE[37] = btDiscreteDynamicsWorld__removeCharacter_28btActionInterface__29;
 FUNCTION_TABLE[38] = btDiscreteDynamicsWorld__predictUnconstraintMotion_28float_29;
 FUNCTION_TABLE[39] = btDiscreteDynamicsWorld__integrateTransforms_28float_29;
 FUNCTION_TABLE[40] = btDiscreteDynamicsWorld__calculateSimulationIslands_28_29;
 FUNCTION_TABLE[41] = btDiscreteDynamicsWorld__solveConstraints_28btContactSolverInfo__29;
 FUNCTION_TABLE[42] = btDiscreteDynamicsWorld__updateActivationState_28float_29;
 FUNCTION_TABLE[43] = btDiscreteDynamicsWorld__internalSingleStepSimulation_28float_29;
 FUNCTION_TABLE[44] = ccDiscreteDynamicsWorld__createPredictiveContacts_28float_29;
 FUNCTION_TABLE[45] = btDiscreteDynamicsWorld__saveKinematicState_28float_29;
 FUNCTION_TABLE[46] = btDiscreteDynamicsWorld__debugDrawConstraint_28btTypedConstraint__29;
 FUNCTION_TABLE[47] = ccDiscreteDynamicsWorld__applyGravity_28_29;
 FUNCTION_TABLE[48] = btDiscreteDynamicsWorld__setNumTasks_28int_29;
 FUNCTION_TABLE[49] = btDiscreteDynamicsWorld__updateVehicles_28float_29;
 FUNCTION_TABLE[50] = btCollisionWorld__ClosestConvexResultCallback___ClosestConvexResultCallback_28_29;
 FUNCTION_TABLE[51] = btCollisionWorld__ClosestConvexResultCallback___ClosestConvexResultCallback_28_29_1;
 FUNCTION_TABLE[52] = btCollisionWorld__ConvexResultCallback__needsCollision_28btBroadphaseProxy__29_20const;
 FUNCTION_TABLE[53] = btCollisionWorld__ClosestConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29;
 FUNCTION_TABLE[54] = btCollisionWorld__ConvexResultCallback___ConvexResultCallback_28_29;
 FUNCTION_TABLE[55] = btCollisionWorld__ConvexResultCallback___ConvexResultCallback_28_29_1;
 FUNCTION_TABLE[56] = __cxa_pure_virtual;
 FUNCTION_TABLE[57] = ccOverlapFilterCallback___ccOverlapFilterCallback_28_29;
 FUNCTION_TABLE[58] = ccOverlapFilterCallback___ccOverlapFilterCallback_28_29_1;
 FUNCTION_TABLE[59] = ccOverlapFilterCallback__needBroadphaseCollision_28btBroadphaseProxy__2c_20btBroadphaseProxy__29_20const;
 FUNCTION_TABLE[60] = btOverlapFilterCallback___btOverlapFilterCallback_28_29;
 FUNCTION_TABLE[61] = btOverlapFilterCallback___btOverlapFilterCallback_28_29_1;
 FUNCTION_TABLE[62] = ccNotMeClosestConvexResultCallback___ccNotMeClosestConvexResultCallback_28_29;
 FUNCTION_TABLE[63] = ccNotMeClosestConvexResultCallback___ccNotMeClosestConvexResultCallback_28_29_1;
 FUNCTION_TABLE[64] = ccNotMeClosestConvexResultCallback__needsCollision_28btBroadphaseProxy__29_20const;
 FUNCTION_TABLE[65] = ccNotMeClosestConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29;
 FUNCTION_TABLE[66] = btCollisionWorld__AllHitsRayResultCallback___AllHitsRayResultCallback_28_29;
 FUNCTION_TABLE[67] = btCollisionWorld__AllHitsRayResultCallback___AllHitsRayResultCallback_28_29_1;
 FUNCTION_TABLE[68] = btCollisionWorld__RayResultCallback__needsCollision_28btBroadphaseProxy__29_20const;
 FUNCTION_TABLE[69] = btCollisionWorld__AllHitsRayResultCallback__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29;
 FUNCTION_TABLE[70] = btCollisionWorld__RayResultCallback___RayResultCallback_28_29;
 FUNCTION_TABLE[71] = btCollisionWorld__RayResultCallback___RayResultCallback_28_29_1;
 FUNCTION_TABLE[72] = btCollisionWorld__ClosestRayResultCallback___ClosestRayResultCallback_28_29;
 FUNCTION_TABLE[73] = btCollisionWorld__ClosestRayResultCallback___ClosestRayResultCallback_28_29_1;
 FUNCTION_TABLE[74] = btCollisionWorld__ClosestRayResultCallback__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29;
 FUNCTION_TABLE[75] = ccAllHitsRayResultCallback___ccAllHitsRayResultCallback_28_29;
 FUNCTION_TABLE[76] = ccAllHitsRayResultCallback___ccAllHitsRayResultCallback_28_29_1;
 FUNCTION_TABLE[77] = ccAllHitsRayResultCallback__needsCollision_28btBroadphaseProxy__29_20const;
 FUNCTION_TABLE[78] = ccAllHitsRayResultCallback__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29;
 FUNCTION_TABLE[79] = ccClosestRayResultCallback___ccClosestRayResultCallback_28_29;
 FUNCTION_TABLE[80] = ccClosestRayResultCallback___ccClosestRayResultCallback_28_29_1;
 FUNCTION_TABLE[81] = ccClosestRayResultCallback__needsCollision_28btBroadphaseProxy__29_20const;
 FUNCTION_TABLE[82] = ccClosestRayResultCallback__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29;
 FUNCTION_TABLE[83] = btDefaultMotionState___btDefaultMotionState_28_29;
 FUNCTION_TABLE[84] = btDefaultMotionState___btDefaultMotionState_28_29_1;
 FUNCTION_TABLE[85] = btDefaultMotionState__getWorldTransform_28btTransform__29_20const;
 FUNCTION_TABLE[86] = btDefaultMotionState__setWorldTransform_28btTransform_20const__29;
 FUNCTION_TABLE[87] = btMotionState___btMotionState_28_29;
 FUNCTION_TABLE[88] = btMotionState___btMotionState_28_29_1;
 FUNCTION_TABLE[89] = btRigidBody___btRigidBody_28_29;
 FUNCTION_TABLE[90] = btRigidBody___btRigidBody_28_29_1;
 FUNCTION_TABLE[91] = btCollisionObject__setCollisionShape_28btCollisionShape__29;
 FUNCTION_TABLE[92] = btCollisionObject__checkCollideWithOverride_28btCollisionObject_20const__29_20const;
 FUNCTION_TABLE[93] = btRigidBody__calculateSerializeBufferSize_28_29_20const;
 FUNCTION_TABLE[94] = btRigidBody__serialize_28void__2c_20btSerializer__29_20const;
 FUNCTION_TABLE[95] = btRigidBody__serializeSingleObject_28btSerializer__29_20const;
 FUNCTION_TABLE[96] = btDiscreteDynamicsWorld___btDiscreteDynamicsWorld_28_29;
 FUNCTION_TABLE[97] = btDiscreteDynamicsWorld___btDiscreteDynamicsWorld_28_29_1;
 FUNCTION_TABLE[98] = btDiscreteDynamicsWorld__createPredictiveContacts_28float_29;
 FUNCTION_TABLE[99] = btDiscreteDynamicsWorld__applyGravity_28_29;
 FUNCTION_TABLE[100] = InplaceSolverIslandCallback___InplaceSolverIslandCallback_28_29;
 FUNCTION_TABLE[101] = InplaceSolverIslandCallback___InplaceSolverIslandCallback_28_29_1;
 FUNCTION_TABLE[102] = InplaceSolverIslandCallback__processIsland_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20int_29;
 FUNCTION_TABLE[103] = btClosestNotMeConvexResultCallback___btClosestNotMeConvexResultCallback_28_29;
 FUNCTION_TABLE[104] = btClosestNotMeConvexResultCallback__needsCollision_28btBroadphaseProxy__29_20const;
 FUNCTION_TABLE[105] = btClosestNotMeConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29;
 FUNCTION_TABLE[106] = btFixedConstraint___btFixedConstraint_28_29;
 FUNCTION_TABLE[107] = btFixedConstraint___btFixedConstraint_28_29_1;
 FUNCTION_TABLE[108] = btGeneric6DofSpring2Constraint__buildJacobian_28_29;
 FUNCTION_TABLE[109] = btTypedConstraint__setupSolverConstraint_28btAlignedObjectArray_btSolverConstraint___2c_20int_2c_20int_2c_20float_29;
 FUNCTION_TABLE[110] = btGeneric6DofSpring2Constraint__getInfo1_28btTypedConstraint__btConstraintInfo1__29;
 FUNCTION_TABLE[111] = btGeneric6DofSpring2Constraint__getInfo2_28btTypedConstraint__btConstraintInfo2__29;
 FUNCTION_TABLE[112] = btTypedConstraint__solveConstraintObsolete_28btSolverBody__2c_20btSolverBody__2c_20float_29;
 FUNCTION_TABLE[113] = btGeneric6DofSpring2Constraint__setParam_28int_2c_20float_2c_20int_29;
 FUNCTION_TABLE[114] = btGeneric6DofSpring2Constraint__getParam_28int_2c_20int_29_20const;
 FUNCTION_TABLE[115] = btGeneric6DofSpring2Constraint__calculateSerializeBufferSize_28_29_20const;
 FUNCTION_TABLE[116] = btGeneric6DofSpring2Constraint__serialize_28void__2c_20btSerializer__29_20const;
 FUNCTION_TABLE[117] = btTypedConstraint___btTypedConstraint_28_29;
 FUNCTION_TABLE[118] = btGeneric6DofSpring2Constraint___btGeneric6DofSpring2Constraint_28_29;
 FUNCTION_TABLE[119] = btPoint2PointConstraint___btPoint2PointConstraint_28_29;
 FUNCTION_TABLE[120] = btPoint2PointConstraint__buildJacobian_28_29;
 FUNCTION_TABLE[121] = btPoint2PointConstraint__getInfo1_28btTypedConstraint__btConstraintInfo1__29;
 FUNCTION_TABLE[122] = btPoint2PointConstraint__getInfo2_28btTypedConstraint__btConstraintInfo2__29;
 FUNCTION_TABLE[123] = btPoint2PointConstraint__setParam_28int_2c_20float_2c_20int_29;
 FUNCTION_TABLE[124] = btPoint2PointConstraint__getParam_28int_2c_20int_29_20const;
 FUNCTION_TABLE[125] = btPoint2PointConstraint__calculateSerializeBufferSize_28_29_20const;
 FUNCTION_TABLE[126] = btPoint2PointConstraint__serialize_28void__2c_20btSerializer__29_20const;
 FUNCTION_TABLE[127] = btPoint2PointConstraint__getFlags_28_29_20const;
 FUNCTION_TABLE[128] = __cxx_global_array_dtor_1;
 FUNCTION_TABLE[129] = btTypedConstraint___btTypedConstraint_28_29_1;
 FUNCTION_TABLE[130] = btTypedConstraint__buildJacobian_28_29;
 FUNCTION_TABLE[131] = btTypedConstraint__calculateSerializeBufferSize_28_29_20const;
 FUNCTION_TABLE[132] = btTypedConstraint__serialize_28void__2c_20btSerializer__29_20const;
 FUNCTION_TABLE[133] = btHingeConstraint___btHingeConstraint_28_29;
 FUNCTION_TABLE[134] = btHingeConstraint__buildJacobian_28_29;
 FUNCTION_TABLE[135] = btHingeConstraint__getInfo1_28btTypedConstraint__btConstraintInfo1__29;
 FUNCTION_TABLE[136] = btHingeConstraint__getInfo2_28btTypedConstraint__btConstraintInfo2__29;
 FUNCTION_TABLE[137] = btHingeConstraint__setParam_28int_2c_20float_2c_20int_29;
 FUNCTION_TABLE[138] = btHingeConstraint__getParam_28int_2c_20int_29_20const;
 FUNCTION_TABLE[139] = btHingeConstraint__calculateSerializeBufferSize_28_29_20const;
 FUNCTION_TABLE[140] = btHingeConstraint__serialize_28void__2c_20btSerializer__29_20const;
 FUNCTION_TABLE[141] = btHingeConstraint__getFlags_28_29_20const;
 FUNCTION_TABLE[142] = gResolveSingleConstraintRowGeneric_scalar_reference_28btSolverBody__2c_20btSolverBody__2c_20btSolverConstraint_20const__29;
 FUNCTION_TABLE[143] = gResolveSingleConstraintRowLowerLimit_scalar_reference_28btSolverBody__2c_20btSolverBody__2c_20btSolverConstraint_20const__29;
 FUNCTION_TABLE[144] = gResolveSplitPenetrationImpulse_scalar_reference_28btSolverBody__2c_20btSolverBody__2c_20btSolverConstraint_20const__29;
 FUNCTION_TABLE[145] = btSequentialImpulseConstraintSolver___btSequentialImpulseConstraintSolver_28_29;
 FUNCTION_TABLE[146] = btSequentialImpulseConstraintSolver___btSequentialImpulseConstraintSolver_28_29_1;
 FUNCTION_TABLE[147] = btConstraintSolver__prepareSolve_28int_2c_20int_29;
 FUNCTION_TABLE[148] = btSequentialImpulseConstraintSolver__solveGroup_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__2c_20btDispatcher__29;
 FUNCTION_TABLE[149] = btConstraintSolver__allSolved_28btContactSolverInfo_20const__2c_20btIDebugDraw__29;
 FUNCTION_TABLE[150] = btSequentialImpulseConstraintSolver__reset_28_29;
 FUNCTION_TABLE[151] = btSequentialImpulseConstraintSolver__getSolverType_28_29_20const;
 FUNCTION_TABLE[152] = btSequentialImpulseConstraintSolver__convertContacts_28btPersistentManifold___2c_20int_2c_20btContactSolverInfo_20const__29;
 FUNCTION_TABLE[153] = btSequentialImpulseConstraintSolver__solveGroupCacheFriendlySplitImpulseIterations_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29;
 FUNCTION_TABLE[154] = btSequentialImpulseConstraintSolver__solveGroupCacheFriendlyFinish_28btCollisionObject___2c_20int_2c_20btContactSolverInfo_20const__29;
 FUNCTION_TABLE[155] = btSequentialImpulseConstraintSolver__solveSingleIteration_28int_2c_20btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29;
 FUNCTION_TABLE[156] = btSequentialImpulseConstraintSolver__solveGroupCacheFriendlySetup_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29;
 FUNCTION_TABLE[157] = btSequentialImpulseConstraintSolver__solveGroupCacheFriendlyIterations_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29;
 FUNCTION_TABLE[158] = btCollisionObject___btCollisionObject_28_29;
 FUNCTION_TABLE[159] = btCollisionObject___btCollisionObject_28_29_1;
 FUNCTION_TABLE[160] = btCollisionObject__calculateSerializeBufferSize_28_29_20const;
 FUNCTION_TABLE[161] = btCollisionObject__serialize_28void__2c_20btSerializer__29_20const;
 FUNCTION_TABLE[162] = btCollisionObject__serializeSingleObject_28btSerializer__29_20const;
 FUNCTION_TABLE[163] = btCollisionDispatcher__defaultNearCallback_28btBroadphasePair__2c_20btCollisionDispatcher__2c_20btDispatcherInfo_20const__29;
 FUNCTION_TABLE[164] = btCollisionDispatcher___btCollisionDispatcher_28_29;
 FUNCTION_TABLE[165] = btCollisionDispatcher___btCollisionDispatcher_28_29_1;
 FUNCTION_TABLE[166] = btCollisionDispatcher__findAlgorithm_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btPersistentManifold__2c_20ebtDispatcherQueryType_29;
 FUNCTION_TABLE[167] = btCollisionDispatcher__getNewManifold_28btCollisionObject_20const__2c_20btCollisionObject_20const__29;
 FUNCTION_TABLE[168] = btCollisionDispatcher__releaseManifold_28btPersistentManifold__29;
 FUNCTION_TABLE[169] = btCollisionDispatcher__clearManifold_28btPersistentManifold__29;
 FUNCTION_TABLE[170] = btCollisionDispatcher__needsCollision_28btCollisionObject_20const__2c_20btCollisionObject_20const__29;
 FUNCTION_TABLE[171] = btCollisionDispatcher__needsResponse_28btCollisionObject_20const__2c_20btCollisionObject_20const__29;
 FUNCTION_TABLE[172] = btCollisionDispatcher__dispatchAllCollisionPairs_28btOverlappingPairCache__2c_20btDispatcherInfo_20const__2c_20btDispatcher__29;
 FUNCTION_TABLE[173] = btCollisionDispatcher__getNumManifolds_28_29_20const;
 FUNCTION_TABLE[174] = btCollisionDispatcher__getManifoldByIndexInternal_28int_29;
 FUNCTION_TABLE[175] = btCollisionDispatcher__getInternalManifoldPointer_28_29;
 FUNCTION_TABLE[176] = btCollisionDispatcher__getInternalManifoldPool_28_29;
 FUNCTION_TABLE[177] = btCollisionDispatcher__getInternalManifoldPool_28_29_20const;
 FUNCTION_TABLE[178] = btCollisionDispatcher__allocateCollisionAlgorithm_28int_29;
 FUNCTION_TABLE[179] = btCollisionDispatcher__freeCollisionAlgorithm_28void__29;
 FUNCTION_TABLE[180] = btOverlapCallback___btOverlapCallback_28_29;
 FUNCTION_TABLE[181] = btCollisionPairCallback___btCollisionPairCallback_28_29;
 FUNCTION_TABLE[182] = btCollisionPairCallback__processOverlap_28btBroadphasePair__29;
 FUNCTION_TABLE[183] = btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const;
 FUNCTION_TABLE[184] = btConvexShape__localGetSupportVertexNonVirtual_28btVector3_20const__29_20const;
 FUNCTION_TABLE[185] = btConvexPenetrationDepthSolver___btConvexPenetrationDepthSolver_28_29;
 FUNCTION_TABLE[186] = btGjkEpaPenetrationDepthSolver___btGjkEpaPenetrationDepthSolver_28_29;
 FUNCTION_TABLE[187] = btGjkEpaPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29;
 FUNCTION_TABLE[188] = btDiscreteCollisionDetectorInterface___btDiscreteCollisionDetectorInterface_28_29;
 FUNCTION_TABLE[189] = btGjkPairDetector___btGjkPairDetector_28_29;
 FUNCTION_TABLE[190] = btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29;
 FUNCTION_TABLE[191] = btMinkowskiPenetrationDepthSolver___btMinkowskiPenetrationDepthSolver_28_29;
 FUNCTION_TABLE[192] = btMinkowskiPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29;
 FUNCTION_TABLE[193] = btDiscreteCollisionDetectorInterface__Result___Result_28_29;
 FUNCTION_TABLE[194] = btMinkowskiPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29__btIntermediateResult___btIntermediateResult_28_29;
 FUNCTION_TABLE[195] = btMinkowskiPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29__btIntermediateResult__setShapeIdentifiersA_28int_2c_20int_29;
 FUNCTION_TABLE[196] = btMinkowskiPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29__btIntermediateResult__setShapeIdentifiersB_28int_2c_20int_29;
 FUNCTION_TABLE[197] = btMinkowskiPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29__btIntermediateResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29;
 FUNCTION_TABLE[198] = btCollisionAlgorithm___btCollisionAlgorithm_28_29;
 FUNCTION_TABLE[199] = btEmptyAlgorithm___btEmptyAlgorithm_28_29;
 FUNCTION_TABLE[200] = btEmptyAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29;
 FUNCTION_TABLE[201] = btEmptyAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29;
 FUNCTION_TABLE[202] = btEmptyAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29;
 FUNCTION_TABLE[203] = btActivatingCollisionAlgorithm___btActivatingCollisionAlgorithm_28_29;
 FUNCTION_TABLE[204] = btActivatingCollisionAlgorithm___btActivatingCollisionAlgorithm_28_29_1;
 FUNCTION_TABLE[205] = btSphereSphereCollisionAlgorithm___btSphereSphereCollisionAlgorithm_28_29;
 FUNCTION_TABLE[206] = btSphereSphereCollisionAlgorithm___btSphereSphereCollisionAlgorithm_28_29_1;
 FUNCTION_TABLE[207] = btSphereSphereCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29;
 FUNCTION_TABLE[208] = btSphereSphereCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29;
 FUNCTION_TABLE[209] = btSphereSphereCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29;
 FUNCTION_TABLE[210] = btDefaultCollisionConfiguration___btDefaultCollisionConfiguration_28_29;
 FUNCTION_TABLE[211] = btDefaultCollisionConfiguration___btDefaultCollisionConfiguration_28_29_1;
 FUNCTION_TABLE[212] = btDefaultCollisionConfiguration__getPersistentManifoldPool_28_29;
 FUNCTION_TABLE[213] = btDefaultCollisionConfiguration__getCollisionAlgorithmPool_28_29;
 FUNCTION_TABLE[214] = btDefaultCollisionConfiguration__getCollisionAlgorithmCreateFunc_28int_2c_20int_29;
 FUNCTION_TABLE[215] = btDefaultCollisionConfiguration__getClosestPointsAlgorithmCreateFunc_28int_2c_20int_29;
 FUNCTION_TABLE[216] = btCollisionAlgorithmCreateFunc___btCollisionAlgorithmCreateFunc_28_29;
 FUNCTION_TABLE[217] = btConvexConcaveCollisionAlgorithm__CreateFunc___CreateFunc_28_29;
 FUNCTION_TABLE[218] = btConvexConcaveCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29;
 FUNCTION_TABLE[219] = btConvexConcaveCollisionAlgorithm__SwappedCreateFunc___SwappedCreateFunc_28_29;
 FUNCTION_TABLE[220] = btConvexConcaveCollisionAlgorithm__SwappedCreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29;
 FUNCTION_TABLE[221] = btCompoundCollisionAlgorithm__CreateFunc___CreateFunc_28_29;
 FUNCTION_TABLE[222] = btCompoundCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29;
 FUNCTION_TABLE[223] = btCompoundCompoundCollisionAlgorithm__CreateFunc___CreateFunc_28_29;
 FUNCTION_TABLE[224] = btCompoundCompoundCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29;
 FUNCTION_TABLE[225] = btCompoundCollisionAlgorithm__SwappedCreateFunc___SwappedCreateFunc_28_29;
 FUNCTION_TABLE[226] = btCompoundCollisionAlgorithm__SwappedCreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29;
 FUNCTION_TABLE[227] = btEmptyAlgorithm__CreateFunc___CreateFunc_28_29;
 FUNCTION_TABLE[228] = btEmptyAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29;
 FUNCTION_TABLE[229] = btSphereSphereCollisionAlgorithm__CreateFunc___CreateFunc_28_29;
 FUNCTION_TABLE[230] = btSphereSphereCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29;
 FUNCTION_TABLE[231] = btSphereTriangleCollisionAlgorithm__CreateFunc___CreateFunc_28_29;
 FUNCTION_TABLE[232] = btSphereTriangleCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29;
 FUNCTION_TABLE[233] = btBoxBoxCollisionAlgorithm__CreateFunc___CreateFunc_28_29;
 FUNCTION_TABLE[234] = btBoxBoxCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29;
 FUNCTION_TABLE[235] = btConvexPlaneCollisionAlgorithm__CreateFunc___CreateFunc_28_29;
 FUNCTION_TABLE[236] = btConvexPlaneCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29;
 FUNCTION_TABLE[237] = btSimulationIslandManager___btSimulationIslandManager_28_29;
 FUNCTION_TABLE[238] = btSimulationIslandManager___btSimulationIslandManager_28_29_1;
 FUNCTION_TABLE[239] = btSimulationIslandManager__updateActivationState_28btCollisionWorld__2c_20btDispatcher__29;
 FUNCTION_TABLE[240] = btSimulationIslandManager__storeIslandActivationState_28btCollisionWorld__29;
 FUNCTION_TABLE[241] = btConvexPlaneCollisionAlgorithm___btConvexPlaneCollisionAlgorithm_28_29;
 FUNCTION_TABLE[242] = btConvexPlaneCollisionAlgorithm___btConvexPlaneCollisionAlgorithm_28_29_1;
 FUNCTION_TABLE[243] = btConvexPlaneCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29;
 FUNCTION_TABLE[244] = btConvexPlaneCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29;
 FUNCTION_TABLE[245] = btConvexPlaneCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29;
 FUNCTION_TABLE[246] = btConvexCast___btConvexCast_28_29;
 FUNCTION_TABLE[247] = btSubsimplexConvexCast___btSubsimplexConvexCast_28_29;
 FUNCTION_TABLE[248] = btSubsimplexConvexCast__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29;
 FUNCTION_TABLE[249] = btConvexConcaveCollisionAlgorithm___btConvexConcaveCollisionAlgorithm_28_29;
 FUNCTION_TABLE[250] = btConvexConcaveCollisionAlgorithm___btConvexConcaveCollisionAlgorithm_28_29_1;
 FUNCTION_TABLE[251] = btConvexConcaveCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29;
 FUNCTION_TABLE[252] = btConvexConcaveCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29;
 FUNCTION_TABLE[253] = btConvexConcaveCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29;
 FUNCTION_TABLE[254] = btConvexTriangleCallback___btConvexTriangleCallback_28_29;
 FUNCTION_TABLE[255] = btConvexTriangleCallback___btConvexTriangleCallback_28_29_1;
 FUNCTION_TABLE[256] = btConvexTriangleCallback__processTriangle_28btVector3__2c_20int_2c_20int_29;
 FUNCTION_TABLE[257] = btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1;
 FUNCTION_TABLE[258] = btTriangleShape___btTriangleShape_28_29;
 FUNCTION_TABLE[259] = btTriangleShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[260] = btCollisionShape__getBoundingSphere_28btVector3__2c_20float__29_20const;
 FUNCTION_TABLE[261] = btCollisionShape__getAngularMotionDisc_28_29_20const;
 FUNCTION_TABLE[262] = btCollisionShape__getContactBreakingThreshold_28float_29_20const;
 FUNCTION_TABLE[263] = btConvexInternalShape__setLocalScaling_28btVector3_20const__29;
 FUNCTION_TABLE[264] = btConvexInternalShape__getLocalScaling_28_29_20const;
 FUNCTION_TABLE[265] = btTriangleShape__calculateLocalInertia_28float_2c_20btVector3__29_20const;
 FUNCTION_TABLE[266] = btTriangleShape__getName_28_29_20const;
 FUNCTION_TABLE[267] = btCollisionShape__getAnisotropicRollingFrictionDirection_28_29_20const;
 FUNCTION_TABLE[268] = btConvexInternalShape__setMargin_28float_29;
 FUNCTION_TABLE[269] = btConvexInternalShape__getMargin_28_29_20const;
 FUNCTION_TABLE[270] = btConvexInternalShape__calculateSerializeBufferSize_28_29_20const;
 FUNCTION_TABLE[271] = btConvexInternalShape__serialize_28void__2c_20btSerializer__29_20const;
 FUNCTION_TABLE[272] = btCollisionShape__serializeSingleShape_28btSerializer__29_20const;
 FUNCTION_TABLE[273] = btConvexInternalShape__localGetSupportingVertex_28btVector3_20const__29_20const;
 FUNCTION_TABLE[274] = btTriangleShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const;
 FUNCTION_TABLE[275] = btConvexShape__project_28btTransform_20const__2c_20btVector3_20const__2c_20float__2c_20float__2c_20btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[276] = btTriangleShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const;
 FUNCTION_TABLE[277] = btConvexInternalShape__getAabbSlow_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[278] = btTriangleShape__getNumPreferredPenetrationDirections_28_29_20const;
 FUNCTION_TABLE[279] = btTriangleShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const;
 FUNCTION_TABLE[280] = btPolyhedralConvexShape__initializePolyhedralFeatures_28int_29;
 FUNCTION_TABLE[281] = btTriangleShape__getNumVertices_28_29_20const;
 FUNCTION_TABLE[282] = btTriangleShape__getNumEdges_28_29_20const;
 FUNCTION_TABLE[283] = btTriangleShape__getEdge_28int_2c_20btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[284] = btTriangleShape__getVertex_28int_2c_20btVector3__29_20const;
 FUNCTION_TABLE[285] = btTriangleShape__getNumPlanes_28_29_20const;
 FUNCTION_TABLE[286] = btTriangleShape__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const;
 FUNCTION_TABLE[287] = btTriangleShape__isInside_28btVector3_20const__2c_20float_29_20const;
 FUNCTION_TABLE[288] = btTriangleShape__getPlaneEquation_28int_2c_20btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[289] = btTriangleCallback___btTriangleCallback_28_29;
 FUNCTION_TABLE[290] = btConvexConcaveCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__LocalTriangleSphereCastCallback___LocalTriangleSphereCastCallback_28_29;
 FUNCTION_TABLE[291] = btConvexConcaveCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__LocalTriangleSphereCastCallback__processTriangle_28btVector3__2c_20int_2c_20int_29;
 FUNCTION_TABLE[292] = btConvexCast__CastResult__DebugDraw_28float_29;
 FUNCTION_TABLE[293] = btConvexCast__CastResult__drawCoordSystem_28btTransform_20const__29;
 FUNCTION_TABLE[294] = btConvexCast__CastResult__reportFailure_28int_2c_20int_29;
 FUNCTION_TABLE[295] = btConvexCast__CastResult___CastResult_28_29;
 FUNCTION_TABLE[296] = btConvexCast__CastResult___CastResult_28_29_1;
 FUNCTION_TABLE[297] = btBoxBoxDetector___btBoxBoxDetector_28_29;
 FUNCTION_TABLE[298] = btBoxBoxDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29;
 FUNCTION_TABLE[299] = btBoxBoxCollisionAlgorithm___btBoxBoxCollisionAlgorithm_28_29;
 FUNCTION_TABLE[300] = btBoxBoxCollisionAlgorithm___btBoxBoxCollisionAlgorithm_28_29_1;
 FUNCTION_TABLE[301] = btBoxBoxCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29;
 FUNCTION_TABLE[302] = btBoxBoxCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29;
 FUNCTION_TABLE[303] = btBoxBoxCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29;
 FUNCTION_TABLE[304] = btManifoldResult___btManifoldResult_28_29;
 FUNCTION_TABLE[305] = btManifoldResult__setShapeIdentifiersA_28int_2c_20int_29;
 FUNCTION_TABLE[306] = btManifoldResult__setShapeIdentifiersB_28int_2c_20int_29;
 FUNCTION_TABLE[307] = btManifoldResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29;
 FUNCTION_TABLE[308] = btGjkConvexCast___btGjkConvexCast_28_29;
 FUNCTION_TABLE[309] = btGjkConvexCast__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29;
 FUNCTION_TABLE[310] = btPointCollector___btPointCollector_28_29;
 FUNCTION_TABLE[311] = btPointCollector__setShapeIdentifiersA_28int_2c_20int_29;
 FUNCTION_TABLE[312] = btPointCollector__setShapeIdentifiersB_28int_2c_20int_29;
 FUNCTION_TABLE[313] = btPointCollector__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29;
 FUNCTION_TABLE[314] = btContinuousConvexCollision___btContinuousConvexCollision_28_29;
 FUNCTION_TABLE[315] = btContinuousConvexCollision__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29;
 FUNCTION_TABLE[316] = btTriangleRaycastCallback___btTriangleRaycastCallback_28_29;
 FUNCTION_TABLE[317] = btTriangleRaycastCallback__processTriangle_28btVector3__2c_20int_2c_20int_29;
 FUNCTION_TABLE[318] = btTriangleConvexcastCallback___btTriangleConvexcastCallback_28_29;
 FUNCTION_TABLE[319] = btTriangleConvexcastCallback__processTriangle_28btVector3__2c_20int_2c_20int_29;
 FUNCTION_TABLE[320] = btCollisionWorld___btCollisionWorld_28_29;
 FUNCTION_TABLE[321] = btCollisionWorld___btCollisionWorld_28_29_1;
 FUNCTION_TABLE[322] = btCollisionWorld__debugDrawWorld_28_29;
 FUNCTION_TABLE[323] = btCollisionWorld__addCollisionObject_28btCollisionObject__2c_20int_2c_20int_29;
 FUNCTION_TABLE[324] = btCollisionWorld__removeCollisionObject_28btCollisionObject__29;
 FUNCTION_TABLE[325] = btCollisionWorld__serialize_28btSerializer__29;
 FUNCTION_TABLE[326] = btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__BridgeTriangleRaycastCallback___BridgeTriangleRaycastCallback_28_29;
 FUNCTION_TABLE[327] = btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__BridgeTriangleRaycastCallback__reportHit_28btVector3_20const__2c_20float_2c_20int_2c_20int_29;
 FUNCTION_TABLE[328] = btDbvt__ICollide___ICollide_28_29;
 FUNCTION_TABLE[329] = btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__RayTester___RayTester_28_29;
 FUNCTION_TABLE[330] = btDbvt__ICollide__Process_28btDbvtNode_20const__2c_20btDbvtNode_20const__29;
 FUNCTION_TABLE[331] = btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__RayTester__Process_28btDbvtNode_20const__29;
 FUNCTION_TABLE[332] = btDbvt__ICollide__Process_28btDbvtNode_20const__2c_20float_29;
 FUNCTION_TABLE[333] = btDbvt__ICollide__Descent_28btDbvtNode_20const__29;
 FUNCTION_TABLE[334] = btDbvt__ICollide__AllLeaves_28btDbvtNode_20const__29;
 FUNCTION_TABLE[335] = btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__LocalInfoAdder2___LocalInfoAdder2_28_29;
 FUNCTION_TABLE[336] = btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__LocalInfoAdder2__needsCollision_28btBroadphaseProxy__29_20const;
 FUNCTION_TABLE[337] = btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__LocalInfoAdder2__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29;
 FUNCTION_TABLE[338] = btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__BridgeTriangleConvexcastCallback___BridgeTriangleConvexcastCallback_28_29;
 FUNCTION_TABLE[339] = btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__BridgeTriangleConvexcastCallback__reportHit_28btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20int_2c_20int_29;
 FUNCTION_TABLE[340] = btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__BridgeTriangleConvexcastCallback___BridgeTriangleConvexcastCallback_28_29_1;
 FUNCTION_TABLE[341] = btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__BridgeTriangleConvexcastCallback__reportHit_28btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20int_2c_20int_29_1;
 FUNCTION_TABLE[342] = btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__btCompoundLeafCallback___btCompoundLeafCallback_28_29;
 FUNCTION_TABLE[343] = btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__btCompoundLeafCallback__Process_28btDbvtNode_20const__29;
 FUNCTION_TABLE[344] = btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__btCompoundLeafCallback__ProcessChild_28int_2c_20btTransform_20const__2c_20btCollisionShape_20const__29__LocalInfoAdder___LocalInfoAdder_28_29;
 FUNCTION_TABLE[345] = btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__btCompoundLeafCallback__ProcessChild_28int_2c_20btTransform_20const__2c_20btCollisionShape_20const__29__LocalInfoAdder__needsCollision_28btBroadphaseProxy__29_20const;
 FUNCTION_TABLE[346] = btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__btCompoundLeafCallback__ProcessChild_28int_2c_20btTransform_20const__2c_20btCollisionShape_20const__29__LocalInfoAdder__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29;
 FUNCTION_TABLE[347] = btBroadphaseAabbCallback___btBroadphaseAabbCallback_28_29;
 FUNCTION_TABLE[348] = btSingleRayCallback___btSingleRayCallback_28_29;
 FUNCTION_TABLE[349] = btSingleRayCallback__process_28btBroadphaseProxy_20const__29;
 FUNCTION_TABLE[350] = btSingleSweepCallback___btSingleSweepCallback_28_29;
 FUNCTION_TABLE[351] = btSingleSweepCallback__process_28btBroadphaseProxy_20const__29;
 FUNCTION_TABLE[352] = DebugDrawcallback___DebugDrawcallback_28_29;
 FUNCTION_TABLE[353] = DebugDrawcallback___DebugDrawcallback_28_29_1;
 FUNCTION_TABLE[354] = DebugDrawcallback__processTriangle_28btVector3__2c_20int_2c_20int_29;
 FUNCTION_TABLE[355] = DebugDrawcallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29;
 FUNCTION_TABLE[356] = non_virtual_20thunk_20to_20DebugDrawcallback___DebugDrawcallback_28_29;
 FUNCTION_TABLE[357] = non_virtual_20thunk_20to_20DebugDrawcallback___DebugDrawcallback_28_29_1;
 FUNCTION_TABLE[358] = non_virtual_20thunk_20to_20DebugDrawcallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29;
 FUNCTION_TABLE[359] = SphereTriangleDetector___SphereTriangleDetector_28_29;
 FUNCTION_TABLE[360] = SphereTriangleDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29;
 FUNCTION_TABLE[361] = btSphereTriangleCollisionAlgorithm___btSphereTriangleCollisionAlgorithm_28_29;
 FUNCTION_TABLE[362] = btSphereTriangleCollisionAlgorithm___btSphereTriangleCollisionAlgorithm_28_29_1;
 FUNCTION_TABLE[363] = btSphereTriangleCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29;
 FUNCTION_TABLE[364] = btSphereTriangleCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29;
 FUNCTION_TABLE[365] = btSphereTriangleCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29;
 FUNCTION_TABLE[366] = btConvexConvexAlgorithm__CreateFunc___CreateFunc_28_29;
 FUNCTION_TABLE[367] = btConvexConvexAlgorithm__CreateFunc___CreateFunc_28_29_1;
 FUNCTION_TABLE[368] = btConvexConvexAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29;
 FUNCTION_TABLE[369] = btConvexConvexAlgorithm___btConvexConvexAlgorithm_28_29;
 FUNCTION_TABLE[370] = btConvexConvexAlgorithm___btConvexConvexAlgorithm_28_29_1;
 FUNCTION_TABLE[371] = btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29;
 FUNCTION_TABLE[372] = btConvexConvexAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29;
 FUNCTION_TABLE[373] = btConvexConvexAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29;
 FUNCTION_TABLE[374] = btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btDummyResult___btDummyResult_28_29;
 FUNCTION_TABLE[375] = btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btDummyResult__setShapeIdentifiersA_28int_2c_20int_29;
 FUNCTION_TABLE[376] = btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btDummyResult__setShapeIdentifiersB_28int_2c_20int_29;
 FUNCTION_TABLE[377] = btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btDummyResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29;
 FUNCTION_TABLE[378] = btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btWithoutMarginResult___btWithoutMarginResult_28_29;
 FUNCTION_TABLE[379] = btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btWithoutMarginResult__setShapeIdentifiersA_28int_2c_20int_29;
 FUNCTION_TABLE[380] = btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btWithoutMarginResult__setShapeIdentifiersB_28int_2c_20int_29;
 FUNCTION_TABLE[381] = btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btWithoutMarginResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29;
 FUNCTION_TABLE[382] = btPerturbedContactResult___btPerturbedContactResult_28_29;
 FUNCTION_TABLE[383] = btPerturbedContactResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29;
 FUNCTION_TABLE[384] = btCompoundCollisionAlgorithm___btCompoundCollisionAlgorithm_28_29;
 FUNCTION_TABLE[385] = btCompoundCollisionAlgorithm___btCompoundCollisionAlgorithm_28_29_1;
 FUNCTION_TABLE[386] = btCompoundCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29;
 FUNCTION_TABLE[387] = btCompoundCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29;
 FUNCTION_TABLE[388] = btCompoundCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29;
 FUNCTION_TABLE[389] = btCompoundLeafCallback___btCompoundLeafCallback_28_29;
 FUNCTION_TABLE[390] = btCompoundLeafCallback__Process_28btDbvtNode_20const__29;
 FUNCTION_TABLE[391] = btHashedSimplePairCache___btHashedSimplePairCache_28_29;
 FUNCTION_TABLE[392] = btHashedSimplePairCache___btHashedSimplePairCache_28_29_1;
 FUNCTION_TABLE[393] = btHashedSimplePairCache__removeOverlappingPair_28int_2c_20int_29;
 FUNCTION_TABLE[394] = btHashedSimplePairCache__addOverlappingPair_28int_2c_20int_29;
 FUNCTION_TABLE[395] = btHashedSimplePairCache__getOverlappingPairArrayPtr_28_29;
 FUNCTION_TABLE[396] = btCompoundCompoundCollisionAlgorithm___btCompoundCompoundCollisionAlgorithm_28_29;
 FUNCTION_TABLE[397] = btCompoundCompoundCollisionAlgorithm___btCompoundCompoundCollisionAlgorithm_28_29_1;
 FUNCTION_TABLE[398] = btCompoundCompoundCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29;
 FUNCTION_TABLE[399] = btCompoundCompoundCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29;
 FUNCTION_TABLE[400] = btCompoundCompoundCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29;
 FUNCTION_TABLE[401] = btCompoundCompoundLeafCallback___btCompoundCompoundLeafCallback_28_29;
 FUNCTION_TABLE[402] = btCompoundCompoundLeafCallback__Process_28btDbvtNode_20const__2c_20btDbvtNode_20const__29;
 FUNCTION_TABLE[403] = btDbvt__ICollide__Process_28btDbvtNode_20const__29;
 FUNCTION_TABLE[404] = btBU_Simplex1to4___btBU_Simplex1to4_28_29;
 FUNCTION_TABLE[405] = btBU_Simplex1to4__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[406] = btPolyhedralConvexAabbCachingShape__setLocalScaling_28btVector3_20const__29;
 FUNCTION_TABLE[407] = btPolyhedralConvexShape__calculateLocalInertia_28float_2c_20btVector3__29_20const;
 FUNCTION_TABLE[408] = btBU_Simplex1to4__getName_28_29_20const;
 FUNCTION_TABLE[409] = btPolyhedralConvexShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const;
 FUNCTION_TABLE[410] = btPolyhedralConvexShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const;
 FUNCTION_TABLE[411] = btConvexInternalShape__getNumPreferredPenetrationDirections_28_29_20const;
 FUNCTION_TABLE[412] = btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const;
 FUNCTION_TABLE[413] = btBU_Simplex1to4__getNumVertices_28_29_20const;
 FUNCTION_TABLE[414] = btBU_Simplex1to4__getNumEdges_28_29_20const;
 FUNCTION_TABLE[415] = btBU_Simplex1to4__getEdge_28int_2c_20btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[416] = btBU_Simplex1to4__getVertex_28int_2c_20btVector3__29_20const;
 FUNCTION_TABLE[417] = btBU_Simplex1to4__getNumPlanes_28_29_20const;
 FUNCTION_TABLE[418] = btBU_Simplex1to4__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const;
 FUNCTION_TABLE[419] = btBU_Simplex1to4__isInside_28btVector3_20const__2c_20float_29_20const;
 FUNCTION_TABLE[420] = btBU_Simplex1to4__getIndex_28int_29_20const;
 FUNCTION_TABLE[421] = btCompoundShape___btCompoundShape_28_29;
 FUNCTION_TABLE[422] = btCompoundShape___btCompoundShape_28_29_1;
 FUNCTION_TABLE[423] = btCompoundShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[424] = btCompoundShape__setLocalScaling_28btVector3_20const__29;
 FUNCTION_TABLE[425] = btCompoundShape__getLocalScaling_28_29_20const;
 FUNCTION_TABLE[426] = btCompoundShape__calculateLocalInertia_28float_2c_20btVector3__29_20const;
 FUNCTION_TABLE[427] = btCompoundShape__getName_28_29_20const;
 FUNCTION_TABLE[428] = btCompoundShape__setMargin_28float_29;
 FUNCTION_TABLE[429] = btCompoundShape__getMargin_28_29_20const;
 FUNCTION_TABLE[430] = btCompoundShape__calculateSerializeBufferSize_28_29_20const;
 FUNCTION_TABLE[431] = btCompoundShape__serialize_28void__2c_20btSerializer__29_20const;
 FUNCTION_TABLE[432] = btCompoundShape__removeChildShape_28btCollisionShape__29;
 FUNCTION_TABLE[433] = btCompoundShape__recalculateLocalAabb_28_29;
 FUNCTION_TABLE[434] = btConvexShape___btConvexShape_28_29;
 FUNCTION_TABLE[435] = btConeShape___btConeShape_28_29;
 FUNCTION_TABLE[436] = btConvexInternalShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[437] = btConeShape__setLocalScaling_28btVector3_20const__29;
 FUNCTION_TABLE[438] = btConeShape__calculateLocalInertia_28float_2c_20btVector3__29_20const;
 FUNCTION_TABLE[439] = btConeShape__getName_28_29_20const;
 FUNCTION_TABLE[440] = btConeShape__getAnisotropicRollingFrictionDirection_28_29_20const;
 FUNCTION_TABLE[441] = btConeShape__calculateSerializeBufferSize_28_29_20const;
 FUNCTION_TABLE[442] = btConeShape__serialize_28void__2c_20btSerializer__29_20const;
 FUNCTION_TABLE[443] = btConeShape__localGetSupportingVertex_28btVector3_20const__29_20const;
 FUNCTION_TABLE[444] = btConeShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const;
 FUNCTION_TABLE[445] = btConeShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const;
 FUNCTION_TABLE[446] = btConvexPolyhedron___btConvexPolyhedron_28_29;
 FUNCTION_TABLE[447] = btConvexPolyhedron___btConvexPolyhedron_28_29_1;
 FUNCTION_TABLE[448] = btSphereShape___btSphereShape_28_29_1;
 FUNCTION_TABLE[449] = btSphereShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[450] = btSphereShape__calculateLocalInertia_28float_2c_20btVector3__29_20const;
 FUNCTION_TABLE[451] = btSphereShape__getName_28_29_20const;
 FUNCTION_TABLE[452] = btSphereShape__setMargin_28float_29;
 FUNCTION_TABLE[453] = btSphereShape__getMargin_28_29_20const;
 FUNCTION_TABLE[454] = btSphereShape__localGetSupportingVertex_28btVector3_20const__29_20const;
 FUNCTION_TABLE[455] = btSphereShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const;
 FUNCTION_TABLE[456] = btSphereShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const;
 FUNCTION_TABLE[457] = btBvhTriangleMeshShape___btBvhTriangleMeshShape_28_29;
 FUNCTION_TABLE[458] = btBvhTriangleMeshShape___btBvhTriangleMeshShape_28_29_1;
 FUNCTION_TABLE[459] = btTriangleMeshShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[460] = btBvhTriangleMeshShape__setLocalScaling_28btVector3_20const__29;
 FUNCTION_TABLE[461] = btTriangleMeshShape__getLocalScaling_28_29_20const;
 FUNCTION_TABLE[462] = btTriangleMeshShape__calculateLocalInertia_28float_2c_20btVector3__29_20const;
 FUNCTION_TABLE[463] = btBvhTriangleMeshShape__getName_28_29_20const;
 FUNCTION_TABLE[464] = btConcaveShape__setMargin_28float_29;
 FUNCTION_TABLE[465] = btConcaveShape__getMargin_28_29_20const;
 FUNCTION_TABLE[466] = btBvhTriangleMeshShape__calculateSerializeBufferSize_28_29_20const;
 FUNCTION_TABLE[467] = btBvhTriangleMeshShape__serialize_28void__2c_20btSerializer__29_20const;
 FUNCTION_TABLE[468] = btBvhTriangleMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const;
 FUNCTION_TABLE[469] = btTriangleMeshShape__localGetSupportingVertex_28btVector3_20const__29_20const;
 FUNCTION_TABLE[470] = btTriangleMeshShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const;
 FUNCTION_TABLE[471] = btBvhTriangleMeshShape__serializeSingleBvh_28btSerializer__29_20const;
 FUNCTION_TABLE[472] = btBvhTriangleMeshShape__serializeSingleTriangleInfoMap_28btSerializer__29_20const;
 FUNCTION_TABLE[473] = btNodeOverlapCallback___btNodeOverlapCallback_28_29;
 FUNCTION_TABLE[474] = btBvhTriangleMeshShape__performRaycast_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29__MyNodeOverlapCallback___MyNodeOverlapCallback_28_29;
 FUNCTION_TABLE[475] = btBvhTriangleMeshShape__performRaycast_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29__MyNodeOverlapCallback__processNode_28int_2c_20int_29;
 FUNCTION_TABLE[476] = btBvhTriangleMeshShape__performConvexcast_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29__MyNodeOverlapCallback___MyNodeOverlapCallback_28_29;
 FUNCTION_TABLE[477] = btBvhTriangleMeshShape__performConvexcast_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29__MyNodeOverlapCallback__processNode_28int_2c_20int_29;
 FUNCTION_TABLE[478] = btBvhTriangleMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const__MyNodeOverlapCallback___MyNodeOverlapCallback_28_29;
 FUNCTION_TABLE[479] = btBvhTriangleMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const__MyNodeOverlapCallback__processNode_28int_2c_20int_29;
 FUNCTION_TABLE[480] = btTriangleMeshShape___btTriangleMeshShape_28_29;
 FUNCTION_TABLE[481] = btTriangleMeshShape___btTriangleMeshShape_28_29_1;
 FUNCTION_TABLE[482] = btTriangleMeshShape__setLocalScaling_28btVector3_20const__29;
 FUNCTION_TABLE[483] = btTriangleMeshShape__getName_28_29_20const;
 FUNCTION_TABLE[484] = btCollisionShape__calculateSerializeBufferSize_28_29_20const;
 FUNCTION_TABLE[485] = btCollisionShape__serialize_28void__2c_20btSerializer__29_20const;
 FUNCTION_TABLE[486] = btTriangleMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const;
 FUNCTION_TABLE[487] = btInternalTriangleIndexCallback___btInternalTriangleIndexCallback_28_29;
 FUNCTION_TABLE[488] = btTriangleMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const__FilteredCallback___FilteredCallback_28_29;
 FUNCTION_TABLE[489] = btTriangleMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const__FilteredCallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29;
 FUNCTION_TABLE[490] = SupportVertexCallback___SupportVertexCallback_28_29;
 FUNCTION_TABLE[491] = SupportVertexCallback__processTriangle_28btVector3__2c_20int_2c_20int_29;
 FUNCTION_TABLE[492] = btStaticPlaneShape___btStaticPlaneShape_28_29;
 FUNCTION_TABLE[493] = btStaticPlaneShape___btStaticPlaneShape_28_29_1;
 FUNCTION_TABLE[494] = btStaticPlaneShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[495] = btStaticPlaneShape__setLocalScaling_28btVector3_20const__29;
 FUNCTION_TABLE[496] = btStaticPlaneShape__getLocalScaling_28_29_20const;
 FUNCTION_TABLE[497] = btStaticPlaneShape__calculateLocalInertia_28float_2c_20btVector3__29_20const;
 FUNCTION_TABLE[498] = btStaticPlaneShape__getName_28_29_20const;
 FUNCTION_TABLE[499] = btStaticPlaneShape__calculateSerializeBufferSize_28_29_20const;
 FUNCTION_TABLE[500] = btStaticPlaneShape__serialize_28void__2c_20btSerializer__29_20const;
 FUNCTION_TABLE[501] = btStaticPlaneShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const;
 FUNCTION_TABLE[502] = btPolyhedralConvexShape___btPolyhedralConvexShape_28_29;
 FUNCTION_TABLE[503] = btPolyhedralConvexAabbCachingShape___btPolyhedralConvexAabbCachingShape_28_29;
 FUNCTION_TABLE[504] = btPolyhedralConvexAabbCachingShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[505] = btEmptyShape___btEmptyShape_28_29;
 FUNCTION_TABLE[506] = btEmptyShape___btEmptyShape_28_29_1;
 FUNCTION_TABLE[507] = btEmptyShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[508] = btEmptyShape__setLocalScaling_28btVector3_20const__29;
 FUNCTION_TABLE[509] = btEmptyShape__getLocalScaling_28_29_20const;
 FUNCTION_TABLE[510] = btEmptyShape__calculateLocalInertia_28float_2c_20btVector3__29_20const;
 FUNCTION_TABLE[511] = btEmptyShape__getName_28_29_20const;
 FUNCTION_TABLE[512] = btEmptyShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const;
 FUNCTION_TABLE[513] = btConvexShape___btConvexShape_28_29_1;
 FUNCTION_TABLE[514] = btConvexInternalShape___btConvexInternalShape_28_29_1;
 FUNCTION_TABLE[515] = btCapsuleShape___btCapsuleShape_28_29;
 FUNCTION_TABLE[516] = btCapsuleShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[517] = btCapsuleShape__setLocalScaling_28btVector3_20const__29;
 FUNCTION_TABLE[518] = btCapsuleShape__calculateLocalInertia_28float_2c_20btVector3__29_20const;
 FUNCTION_TABLE[519] = btCapsuleShape__getName_28_29_20const;
 FUNCTION_TABLE[520] = btCapsuleShape__getAnisotropicRollingFrictionDirection_28_29_20const;
 FUNCTION_TABLE[521] = btCapsuleShape__setMargin_28float_29;
 FUNCTION_TABLE[522] = btCapsuleShape__calculateSerializeBufferSize_28_29_20const;
 FUNCTION_TABLE[523] = btCapsuleShape__serialize_28void__2c_20btSerializer__29_20const;
 FUNCTION_TABLE[524] = btCapsuleShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const;
 FUNCTION_TABLE[525] = btCapsuleShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const;
 FUNCTION_TABLE[526] = btConvexTriangleMeshShape___btConvexTriangleMeshShape_28_29;
 FUNCTION_TABLE[527] = btConvexTriangleMeshShape__setLocalScaling_28btVector3_20const__29;
 FUNCTION_TABLE[528] = btConvexTriangleMeshShape__getLocalScaling_28_29_20const;
 FUNCTION_TABLE[529] = btConvexTriangleMeshShape__getName_28_29_20const;
 FUNCTION_TABLE[530] = btConvexTriangleMeshShape__localGetSupportingVertex_28btVector3_20const__29_20const;
 FUNCTION_TABLE[531] = btConvexTriangleMeshShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const;
 FUNCTION_TABLE[532] = btConvexTriangleMeshShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const;
 FUNCTION_TABLE[533] = btConvexTriangleMeshShape__getNumVertices_28_29_20const;
 FUNCTION_TABLE[534] = btConvexTriangleMeshShape__getNumEdges_28_29_20const;
 FUNCTION_TABLE[535] = btConvexTriangleMeshShape__getEdge_28int_2c_20btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[536] = btConvexTriangleMeshShape__getVertex_28int_2c_20btVector3__29_20const;
 FUNCTION_TABLE[537] = btConvexTriangleMeshShape__getNumPlanes_28_29_20const;
 FUNCTION_TABLE[538] = btConvexTriangleMeshShape__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const;
 FUNCTION_TABLE[539] = btConvexTriangleMeshShape__isInside_28btVector3_20const__2c_20float_29_20const;
 FUNCTION_TABLE[540] = LocalSupportVertexCallback___LocalSupportVertexCallback_28_29;
 FUNCTION_TABLE[541] = LocalSupportVertexCallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29;
 FUNCTION_TABLE[542] = btConcaveShape___btConcaveShape_28_29;
 FUNCTION_TABLE[543] = btConcaveShape___btConcaveShape_28_29_1;
 FUNCTION_TABLE[544] = btBoxShape___btBoxShape_28_29;
 FUNCTION_TABLE[545] = btBoxShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[546] = btBoxShape__setLocalScaling_28btVector3_20const__29;
 FUNCTION_TABLE[547] = btBoxShape__calculateLocalInertia_28float_2c_20btVector3__29_20const;
 FUNCTION_TABLE[548] = btBoxShape__getName_28_29_20const;
 FUNCTION_TABLE[549] = btBoxShape__setMargin_28float_29;
 FUNCTION_TABLE[550] = btBoxShape__localGetSupportingVertex_28btVector3_20const__29_20const;
 FUNCTION_TABLE[551] = btBoxShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const;
 FUNCTION_TABLE[552] = btBoxShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const;
 FUNCTION_TABLE[553] = btBoxShape__getNumPreferredPenetrationDirections_28_29_20const;
 FUNCTION_TABLE[554] = btBoxShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const;
 FUNCTION_TABLE[555] = btBoxShape__getNumVertices_28_29_20const;
 FUNCTION_TABLE[556] = btBoxShape__getNumEdges_28_29_20const;
 FUNCTION_TABLE[557] = btBoxShape__getEdge_28int_2c_20btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[558] = btBoxShape__getVertex_28int_2c_20btVector3__29_20const;
 FUNCTION_TABLE[559] = btBoxShape__getNumPlanes_28_29_20const;
 FUNCTION_TABLE[560] = btBoxShape__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const;
 FUNCTION_TABLE[561] = btBoxShape__isInside_28btVector3_20const__2c_20float_29_20const;
 FUNCTION_TABLE[562] = btBoxShape__getPlaneEquation_28btVector4__2c_20int_29_20const;
 FUNCTION_TABLE[563] = btOptimizedBvh___btOptimizedBvh_28_29;
 FUNCTION_TABLE[564] = btOptimizedBvh___btOptimizedBvh_28_29_1;
 FUNCTION_TABLE[565] = btQuantizedBvh__serialize_28void__2c_20unsigned_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[566] = btQuantizedBvh__calculateSerializeBufferSizeNew_28_29_20const;
 FUNCTION_TABLE[567] = btQuantizedBvh__serialize_28void__2c_20btSerializer__29_20const;
 FUNCTION_TABLE[568] = btQuantizedBvh__deSerializeFloat_28btQuantizedBvhFloatData__29;
 FUNCTION_TABLE[569] = btQuantizedBvh__deSerializeDouble_28btQuantizedBvhDoubleData__29;
 FUNCTION_TABLE[570] = btOptimizedBvh__serializeInPlace_28void__2c_20unsigned_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[571] = btOptimizedBvh__build_28btStridingMeshInterface__2c_20bool_2c_20btVector3_20const__2c_20btVector3_20const__29__QuantizedNodeTriangleCallback___QuantizedNodeTriangleCallback_28_29;
 FUNCTION_TABLE[572] = btOptimizedBvh__build_28btStridingMeshInterface__2c_20bool_2c_20btVector3_20const__2c_20btVector3_20const__29__QuantizedNodeTriangleCallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29;
 FUNCTION_TABLE[573] = btOptimizedBvh__build_28btStridingMeshInterface__2c_20bool_2c_20btVector3_20const__2c_20btVector3_20const__29__NodeTriangleCallback___NodeTriangleCallback_28_29;
 FUNCTION_TABLE[574] = btOptimizedBvh__build_28btStridingMeshInterface__2c_20bool_2c_20btVector3_20const__2c_20btVector3_20const__29__NodeTriangleCallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29;
 FUNCTION_TABLE[575] = btHeightfieldTerrainShape___btHeightfieldTerrainShape_28_29;
 FUNCTION_TABLE[576] = btHeightfieldTerrainShape___btHeightfieldTerrainShape_28_29_1;
 FUNCTION_TABLE[577] = btHeightfieldTerrainShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[578] = btHeightfieldTerrainShape__setLocalScaling_28btVector3_20const__29;
 FUNCTION_TABLE[579] = btHeightfieldTerrainShape__getLocalScaling_28_29_20const;
 FUNCTION_TABLE[580] = btHeightfieldTerrainShape__calculateLocalInertia_28float_2c_20btVector3__29_20const;
 FUNCTION_TABLE[581] = btHeightfieldTerrainShape__getName_28_29_20const;
 FUNCTION_TABLE[582] = btHeightfieldTerrainShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const;
 FUNCTION_TABLE[583] = btHeightfieldTerrainShape__getRawHeightFieldValue_28int_2c_20int_29_20const;
 FUNCTION_TABLE[584] = btCylinderShape___btCylinderShape_28_29;
 FUNCTION_TABLE[585] = btCylinderShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[586] = btCylinderShape__setLocalScaling_28btVector3_20const__29;
 FUNCTION_TABLE[587] = btCylinderShape__calculateLocalInertia_28float_2c_20btVector3__29_20const;
 FUNCTION_TABLE[588] = btCylinderShape__getName_28_29_20const;
 FUNCTION_TABLE[589] = btCylinderShape__getAnisotropicRollingFrictionDirection_28_29_20const;
 FUNCTION_TABLE[590] = btCylinderShape__setMargin_28float_29;
 FUNCTION_TABLE[591] = btCylinderShape__calculateSerializeBufferSize_28_29_20const;
 FUNCTION_TABLE[592] = btCylinderShape__serialize_28void__2c_20btSerializer__29_20const;
 FUNCTION_TABLE[593] = btCylinderShape__localGetSupportingVertex_28btVector3_20const__29_20const;
 FUNCTION_TABLE[594] = btCylinderShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const;
 FUNCTION_TABLE[595] = btCylinderShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const;
 FUNCTION_TABLE[596] = btCylinderShape__getRadius_28_29_20const;
 FUNCTION_TABLE[597] = btTriangleIndexVertexArray___btTriangleIndexVertexArray_28_29;
 FUNCTION_TABLE[598] = btTriangleIndexVertexArray___btTriangleIndexVertexArray_28_29_1;
 FUNCTION_TABLE[599] = btStridingMeshInterface__InternalProcessAllTriangles_28btInternalTriangleIndexCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const;
 FUNCTION_TABLE[600] = btTriangleIndexVertexArray__getLockedVertexIndexBase_28unsigned_20char___2c_20int__2c_20PHY_ScalarType__2c_20int__2c_20unsigned_20char___2c_20int__2c_20int__2c_20PHY_ScalarType__2c_20int_29;
 FUNCTION_TABLE[601] = btTriangleIndexVertexArray__getLockedReadOnlyVertexIndexBase_28unsigned_20char_20const___2c_20int__2c_20PHY_ScalarType__2c_20int__2c_20unsigned_20char_20const___2c_20int__2c_20int__2c_20PHY_ScalarType__2c_20int_29_20const;
 FUNCTION_TABLE[602] = btTriangleIndexVertexArray__unLockVertexBase_28int_29;
 FUNCTION_TABLE[603] = btTriangleIndexVertexArray__unLockReadOnlyVertexBase_28int_29_20const;
 FUNCTION_TABLE[604] = btTriangleIndexVertexArray__getNumSubParts_28_29_20const;
 FUNCTION_TABLE[605] = btTriangleIndexVertexArray__preallocateVertices_28int_29;
 FUNCTION_TABLE[606] = btTriangleIndexVertexArray__preallocateIndices_28int_29;
 FUNCTION_TABLE[607] = btTriangleIndexVertexArray__hasPremadeAabb_28_29_20const;
 FUNCTION_TABLE[608] = btTriangleIndexVertexArray__setPremadeAabb_28btVector3_20const__2c_20btVector3_20const__29_20const;
 FUNCTION_TABLE[609] = btTriangleIndexVertexArray__getPremadeAabb_28btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[610] = btStridingMeshInterface__calculateSerializeBufferSize_28_29_20const;
 FUNCTION_TABLE[611] = btStridingMeshInterface__serialize_28void__2c_20btSerializer__29_20const;
 FUNCTION_TABLE[612] = btTriangleMesh___btTriangleMesh_28_29;
 FUNCTION_TABLE[613] = btTriangleMesh___btTriangleMesh_28_29_1;
 FUNCTION_TABLE[614] = btTriangleMesh__preallocateVertices_28int_29;
 FUNCTION_TABLE[615] = btTriangleMesh__preallocateIndices_28int_29;
 FUNCTION_TABLE[616] = btHashedOverlappingPairCache___btHashedOverlappingPairCache_28_29;
 FUNCTION_TABLE[617] = btHashedOverlappingPairCache___btHashedOverlappingPairCache_28_29_1;
 FUNCTION_TABLE[618] = btHashedOverlappingPairCache__addOverlappingPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__29;
 FUNCTION_TABLE[619] = btHashedOverlappingPairCache__removeOverlappingPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__2c_20btDispatcher__29;
 FUNCTION_TABLE[620] = btHashedOverlappingPairCache__removeOverlappingPairsContainingProxy_28btBroadphaseProxy__2c_20btDispatcher__29;
 FUNCTION_TABLE[621] = btHashedOverlappingPairCache__getOverlappingPairArrayPtr_28_29;
 FUNCTION_TABLE[622] = btHashedOverlappingPairCache__getOverlappingPairArrayPtr_28_29_20const;
 FUNCTION_TABLE[623] = btHashedOverlappingPairCache__getOverlappingPairArray_28_29;
 FUNCTION_TABLE[624] = btHashedOverlappingPairCache__cleanOverlappingPair_28btBroadphasePair__2c_20btDispatcher__29;
 FUNCTION_TABLE[625] = btHashedOverlappingPairCache__getNumOverlappingPairs_28_29_20const;
 FUNCTION_TABLE[626] = btHashedOverlappingPairCache__cleanProxyFromPairs_28btBroadphaseProxy__2c_20btDispatcher__29;
 FUNCTION_TABLE[627] = btHashedOverlappingPairCache__setOverlapFilterCallback_28btOverlapFilterCallback__29;
 FUNCTION_TABLE[628] = btHashedOverlappingPairCache__processAllOverlappingPairs_28btOverlapCallback__2c_20btDispatcher__29;
 FUNCTION_TABLE[629] = btHashedOverlappingPairCache__findPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__29;
 FUNCTION_TABLE[630] = btHashedOverlappingPairCache__hasDeferredRemoval_28_29;
 FUNCTION_TABLE[631] = btHashedOverlappingPairCache__setInternalGhostPairCallback_28btOverlappingPairCallback__29;
 FUNCTION_TABLE[632] = btHashedOverlappingPairCache__sortOverlappingPairs_28btDispatcher__29;
 FUNCTION_TABLE[633] = btHashedOverlappingPairCache__cleanProxyFromPairs_28btBroadphaseProxy__2c_20btDispatcher__29__CleanPairCallback___CleanPairCallback_28_29;
 FUNCTION_TABLE[634] = btHashedOverlappingPairCache__cleanProxyFromPairs_28btBroadphaseProxy__2c_20btDispatcher__29__CleanPairCallback__processOverlap_28btBroadphasePair__29;
 FUNCTION_TABLE[635] = btHashedOverlappingPairCache__removeOverlappingPairsContainingProxy_28btBroadphaseProxy__2c_20btDispatcher__29__RemovePairCallback___RemovePairCallback_28_29;
 FUNCTION_TABLE[636] = btHashedOverlappingPairCache__removeOverlappingPairsContainingProxy_28btBroadphaseProxy__2c_20btDispatcher__29__RemovePairCallback__processOverlap_28btBroadphasePair__29;
 FUNCTION_TABLE[637] = btDbvtBroadphase___btDbvtBroadphase_28_29;
 FUNCTION_TABLE[638] = btDbvtBroadphase___btDbvtBroadphase_28_29_1;
 FUNCTION_TABLE[639] = btDbvtBroadphase__createProxy_28btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20void__2c_20int_2c_20int_2c_20btDispatcher__29;
 FUNCTION_TABLE[640] = btDbvtBroadphase__destroyProxy_28btBroadphaseProxy__2c_20btDispatcher__29;
 FUNCTION_TABLE[641] = btDbvtBroadphase__setAabb_28btBroadphaseProxy__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btDispatcher__29;
 FUNCTION_TABLE[642] = btDbvtBroadphase__getAabb_28btBroadphaseProxy__2c_20btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[643] = btDbvtBroadphase__rayTest_28btVector3_20const__2c_20btVector3_20const__2c_20btBroadphaseRayCallback__2c_20btVector3_20const__2c_20btVector3_20const__29;
 FUNCTION_TABLE[644] = btDbvtBroadphase__aabbTest_28btVector3_20const__2c_20btVector3_20const__2c_20btBroadphaseAabbCallback__29;
 FUNCTION_TABLE[645] = btDbvtBroadphase__calculateOverlappingPairs_28btDispatcher__29;
 FUNCTION_TABLE[646] = btDbvtBroadphase__getOverlappingPairCache_28_29;
 FUNCTION_TABLE[647] = btDbvtBroadphase__getOverlappingPairCache_28_29_20const;
 FUNCTION_TABLE[648] = btDbvtBroadphase__getBroadphaseAabb_28btVector3__2c_20btVector3__29_20const;
 FUNCTION_TABLE[649] = btDbvtBroadphase__resetPool_28btDispatcher__29;
 FUNCTION_TABLE[650] = btDbvtBroadphase__printStats_28_29;
 FUNCTION_TABLE[651] = btDbvtTreeCollider___btDbvtTreeCollider_28_29;
 FUNCTION_TABLE[652] = btDbvtTreeCollider__Process_28btDbvtNode_20const__2c_20btDbvtNode_20const__29;
 FUNCTION_TABLE[653] = btDbvtTreeCollider__Process_28btDbvtNode_20const__29;
 FUNCTION_TABLE[654] = BroadphaseRayTester___BroadphaseRayTester_28_29;
 FUNCTION_TABLE[655] = BroadphaseRayTester__Process_28btDbvtNode_20const__29;
 FUNCTION_TABLE[656] = BroadphaseAabbTester___BroadphaseAabbTester_28_29;
 FUNCTION_TABLE[657] = BroadphaseAabbTester__Process_28btDbvtNode_20const__29;
 FUNCTION_TABLE[658] = btQuantizedBvh___btQuantizedBvh_28_29;
 FUNCTION_TABLE[659] = btQuantizedBvh___btQuantizedBvh_28_29_1;
 FUNCTION_TABLE[660] = btCollisionAlgorithm___btCollisionAlgorithm_28_29_1;
 FUNCTION_TABLE[661] = __cxx_global_array_dtor_2;
 FUNCTION_TABLE[662] = __cxx_global_array_dtor_3;
 FUNCTION_TABLE[663] = btEnterProfileZoneDefault_28char_20const__29;
 FUNCTION_TABLE[664] = btLeaveProfileZoneDefault_28_29;
 FUNCTION_TABLE[665] = btAlignedAllocDefault_28unsigned_20long_2c_20int_29;
 FUNCTION_TABLE[666] = btAlignedFreeDefault_28void__29;
 FUNCTION_TABLE[667] = btAllocDefault_28unsigned_20long_29;
 FUNCTION_TABLE[668] = btFreeDefault_28void__29;
 FUNCTION_TABLE[669] = __cxxabiv1____shim_type_info_____shim_type_info_28_29;
 FUNCTION_TABLE[670] = __cxxabiv1____class_type_info_____class_type_info_28_29;
 FUNCTION_TABLE[671] = __cxxabiv1____shim_type_info__noop1_28_29_20const;
 FUNCTION_TABLE[672] = __cxxabiv1____shim_type_info__noop2_28_29_20const;
 FUNCTION_TABLE[673] = __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const;
 FUNCTION_TABLE[674] = __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[675] = __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[676] = __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const;
 FUNCTION_TABLE[677] = __cxxabiv1____si_class_type_info_____si_class_type_info_28_29;
 FUNCTION_TABLE[678] = __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[679] = __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[680] = __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const;
 FUNCTION_TABLE[681] = __cxxabiv1____vmi_class_type_info_____vmi_class_type_info_28_29;
 FUNCTION_TABLE[682] = __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[683] = __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const;
 FUNCTION_TABLE[684] = __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const;
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
}
 
 return {
  "__wasm_call_ctors": __wasm_call_ctors, 
  "btCollisionShape_setLocalScaling_1": btCollisionShape_setLocalScaling_1, 
  "btCollisionShape_getLocalScaling_0": btCollisionShape_getLocalScaling_0, 
  "btCollisionShape_calculateLocalInertia_2": btCollisionShape_calculateLocalInertia_2, 
  "btCollisionShape_setMargin_1": btCollisionShape_setMargin_1, 
  "btCollisionShape_getMargin_0": btCollisionShape_getMargin_0, 
  "btCollisionShape_isCompound_0": btCollisionShape_isCompound_0, 
  "btCollisionShape_getUserIndex_0": btCollisionShape_getUserIndex_0, 
  "btCollisionShape_setUserIndex_1": btCollisionShape_setUserIndex_1, 
  "btCollisionShape_getUserIndex2_0": btCollisionShape_getUserIndex2_0, 
  "btCollisionShape_setUserIndex2_1": btCollisionShape_setUserIndex2_1, 
  "btCollisionShape_getAabb_3": btCollisionShape_getAabb_3, 
  "btCollisionShape_getLocalBoundingSphere_0": btCollisionShape_getLocalBoundingSphere_0, 
  "btCollisionShape___destroy___0": btCollisionShape___destroy___0, 
  "btCollisionWorld_rayTest_3": btCollisionWorld_rayTest_3, 
  "btCollisionWorld_rayTestSingle_6": btCollisionWorld_rayTestSingle_6, 
  "btCollisionWorld_getPairCache_0": btCollisionWorld_getPairCache_0, 
  "btCollisionWorld_addCollisionObject_1": btCollisionWorld_addCollisionObject_1, 
  "btCollisionWorld_addCollisionObject_2": btCollisionWorld_addCollisionObject_2, 
  "btCollisionWorld_addCollisionObject_3": btCollisionWorld_addCollisionObject_3, 
  "btCollisionWorld_removeCollisionObject_1": btCollisionWorld_removeCollisionObject_1, 
  "btCollisionWorld_setContactBreakingThreshold_1": btCollisionWorld_setContactBreakingThreshold_1, 
  "btCollisionWorld___destroy___0": btCollisionWorld___destroy___0, 
  "btConvexShape_setLocalScaling_1": btConvexShape_setLocalScaling_1, 
  "btConvexShape_getLocalScaling_0": btConvexShape_getLocalScaling_0, 
  "btConvexShape_calculateLocalInertia_2": btConvexShape_calculateLocalInertia_2, 
  "btConvexShape_setMargin_1": btConvexShape_setMargin_1, 
  "btConvexShape_getMargin_0": btConvexShape_getMargin_0, 
  "btConvexShape_isCompound_0": btConvexShape_isCompound_0, 
  "btConvexShape_getUserIndex_0": btConvexShape_getUserIndex_0, 
  "btConvexShape_setUserIndex_1": btConvexShape_setUserIndex_1, 
  "btConvexShape_getUserIndex2_0": btConvexShape_getUserIndex2_0, 
  "btConvexShape_setUserIndex2_1": btConvexShape_setUserIndex2_1, 
  "btConvexShape_getAabb_3": btConvexShape_getAabb_3, 
  "btConvexShape_getLocalBoundingSphere_0": btConvexShape_getLocalBoundingSphere_0, 
  "btConvexShape___destroy___0": btConvexShape___destroy___0, 
  "btDynamicsWorld_addAction_1": btDynamicsWorld_addAction_1, 
  "btDynamicsWorld_removeAction_1": btDynamicsWorld_removeAction_1, 
  "btDynamicsWorld_getSolverInfo_0": btDynamicsWorld_getSolverInfo_0, 
  "btDynamicsWorld_getFixedBody_0": btDynamicsWorld_getFixedBody_0, 
  "btDynamicsWorld_rayTest_3": btDynamicsWorld_rayTest_3, 
  "btDynamicsWorld_rayTestSingle_6": btDynamicsWorld_rayTestSingle_6, 
  "btDynamicsWorld_getPairCache_0": btDynamicsWorld_getPairCache_0, 
  "btDynamicsWorld_addCollisionObject_1": btDynamicsWorld_addCollisionObject_1, 
  "btDynamicsWorld_addCollisionObject_2": btDynamicsWorld_addCollisionObject_2, 
  "btDynamicsWorld_addCollisionObject_3": btDynamicsWorld_addCollisionObject_3, 
  "btDynamicsWorld_removeCollisionObject_1": btDynamicsWorld_removeCollisionObject_1, 
  "btDynamicsWorld_setContactBreakingThreshold_1": btDynamicsWorld_setContactBreakingThreshold_1, 
  "btDynamicsWorld___destroy___0": btDynamicsWorld___destroy___0, 
  "RayResultCallback_hasHit_0": RayResultCallback_hasHit_0, 
  "RayResultCallback_get_m_collisionFilterGroup_0": RayResultCallback_get_m_collisionFilterGroup_0, 
  "RayResultCallback_set_m_collisionFilterGroup_1": RayResultCallback_set_m_collisionFilterGroup_1, 
  "RayResultCallback_get_m_collisionFilterMask_0": RayResultCallback_get_m_collisionFilterMask_0, 
  "RayResultCallback_set_m_collisionFilterMask_1": RayResultCallback_set_m_collisionFilterMask_1, 
  "RayResultCallback_get_m_closestHitFraction_0": RayResultCallback_get_m_closestHitFraction_0, 
  "RayResultCallback_set_m_closestHitFraction_1": RayResultCallback_set_m_closestHitFraction_1, 
  "RayResultCallback_get_m_collisionObject_0": RayResultCallback_get_m_collisionObject_0, 
  "RayResultCallback_set_m_collisionObject_1": RayResultCallback_set_m_collisionObject_1, 
  "RayResultCallback___destroy___0": RayResultCallback___destroy___0, 
  "btConcaveShape_setLocalScaling_1": btConcaveShape_setLocalScaling_1, 
  "btConcaveShape_getLocalScaling_0": btConcaveShape_getLocalScaling_0, 
  "btConcaveShape_calculateLocalInertia_2": btConcaveShape_calculateLocalInertia_2, 
  "btConcaveShape_isCompound_0": btConcaveShape_isCompound_0, 
  "btConcaveShape_getUserIndex_0": btConcaveShape_getUserIndex_0, 
  "btConcaveShape_setUserIndex_1": btConcaveShape_setUserIndex_1, 
  "btConcaveShape_getUserIndex2_0": btConcaveShape_getUserIndex2_0, 
  "btConcaveShape_setUserIndex2_1": btConcaveShape_setUserIndex2_1, 
  "btConcaveShape_getAabb_3": btConcaveShape_getAabb_3, 
  "btConcaveShape_getLocalBoundingSphere_0": btConcaveShape_getLocalBoundingSphere_0, 
  "btConcaveShape___destroy___0": btConcaveShape___destroy___0, 
  "btStridingMeshInterface_setScaling_1": btStridingMeshInterface_setScaling_1, 
  "btStridingMeshInterface___destroy___0": btStridingMeshInterface___destroy___0, 
  "btBroadphaseInterface_getOverlappingPairCache_0": btBroadphaseInterface_getOverlappingPairCache_0, 
  "btBroadphaseInterface___destroy___0": btBroadphaseInterface___destroy___0, 
  "btCollisionObject_btCollisionObject_0": btCollisionObject_btCollisionObject_0, 
  "btCollisionObject_getCollisionShape_0": btCollisionObject_getCollisionShape_0, 
  "btCollisionObject_getActivationState_0": btCollisionObject_getActivationState_0, 
  "btCollisionObject_setActivationState_1": btCollisionObject_setActivationState_1, 
  "btCollisionObject_forceActivationState_1": btCollisionObject_forceActivationState_1, 
  "btCollisionObject_activate_0": btCollisionObject_activate_0, 
  "btCollisionObject_activate_1": btCollisionObject_activate_1, 
  "btCollisionObject_isActive_0": btCollisionObject_isActive_0, 
  "btCollisionObject_isKinematicObject_0": btCollisionObject_isKinematicObject_0, 
  "btCollisionObject_isStaticObject_0": btCollisionObject_isStaticObject_0, 
  "btCollisionObject_isStaticOrKinematicObject_0": btCollisionObject_isStaticOrKinematicObject_0, 
  "btCollisionObject_setRestitution_1": btCollisionObject_setRestitution_1, 
  "btCollisionObject_setFriction_1": btCollisionObject_setFriction_1, 
  "btCollisionObject_setRollingFriction_1": btCollisionObject_setRollingFriction_1, 
  "btCollisionObject_setSpinningFriction_1": btCollisionObject_setSpinningFriction_1, 
  "btCollisionObject_getWorldTransform_0": btCollisionObject_getWorldTransform_0, 
  "btCollisionObject_getCollisionFlags_0": btCollisionObject_getCollisionFlags_0, 
  "btCollisionObject_setCollisionFlags_1": btCollisionObject_setCollisionFlags_1, 
  "btCollisionObject_setWorldTransform_1": btCollisionObject_setWorldTransform_1, 
  "btCollisionObject_setCollisionShape_1": btCollisionObject_setCollisionShape_1, 
  "btCollisionObject_setCcdMotionThreshold_1": btCollisionObject_setCcdMotionThreshold_1, 
  "btCollisionObject_setCcdSweptSphereRadius_1": btCollisionObject_setCcdSweptSphereRadius_1, 
  "btCollisionObject_getUserIndex_0": btCollisionObject_getUserIndex_0, 
  "btCollisionObject_setUserIndex_1": btCollisionObject_setUserIndex_1, 
  "btCollisionObject_setUserIndex2_1": btCollisionObject_setUserIndex2_1, 
  "btCollisionObject_setIgnoreCollisionCheck_2": btCollisionObject_setIgnoreCollisionCheck_2, 
  "btCollisionObject___destroy___0": btCollisionObject___destroy___0, 
  "btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4": btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4, 
  "btDiscreteDynamicsWorld_setGravity_1": btDiscreteDynamicsWorld_setGravity_1, 
  "btDiscreteDynamicsWorld_getGravity_0": btDiscreteDynamicsWorld_getGravity_0, 
  "btDiscreteDynamicsWorld_addRigidBody_1": btDiscreteDynamicsWorld_addRigidBody_1, 
  "btDiscreteDynamicsWorld_addRigidBody_3": btDiscreteDynamicsWorld_addRigidBody_3, 
  "btDiscreteDynamicsWorld_removeRigidBody_1": btDiscreteDynamicsWorld_removeRigidBody_1, 
  "btDiscreteDynamicsWorld_addConstraint_1": btDiscreteDynamicsWorld_addConstraint_1, 
  "btDiscreteDynamicsWorld_addConstraint_2": btDiscreteDynamicsWorld_addConstraint_2, 
  "btDiscreteDynamicsWorld_removeConstraint_1": btDiscreteDynamicsWorld_removeConstraint_1, 
  "btDiscreteDynamicsWorld_stepSimulation_1": btDiscreteDynamicsWorld_stepSimulation_1, 
  "btDiscreteDynamicsWorld_stepSimulation_2": btDiscreteDynamicsWorld_stepSimulation_2, 
  "btDiscreteDynamicsWorld_stepSimulation_3": btDiscreteDynamicsWorld_stepSimulation_3, 
  "btDiscreteDynamicsWorld_rayTest_3": btDiscreteDynamicsWorld_rayTest_3, 
  "btDiscreteDynamicsWorld_rayTestSingle_6": btDiscreteDynamicsWorld_rayTestSingle_6, 
  "btDiscreteDynamicsWorld_getPairCache_0": btDiscreteDynamicsWorld_getPairCache_0, 
  "btDiscreteDynamicsWorld_addCollisionObject_1": btDiscreteDynamicsWorld_addCollisionObject_1, 
  "btDiscreteDynamicsWorld_addCollisionObject_2": btDiscreteDynamicsWorld_addCollisionObject_2, 
  "btDiscreteDynamicsWorld_addCollisionObject_3": btDiscreteDynamicsWorld_addCollisionObject_3, 
  "btDiscreteDynamicsWorld_removeCollisionObject_1": btDiscreteDynamicsWorld_removeCollisionObject_1, 
  "btDiscreteDynamicsWorld_setContactBreakingThreshold_1": btDiscreteDynamicsWorld_setContactBreakingThreshold_1, 
  "btDiscreteDynamicsWorld_addAction_1": btDiscreteDynamicsWorld_addAction_1, 
  "btDiscreteDynamicsWorld_removeAction_1": btDiscreteDynamicsWorld_removeAction_1, 
  "btDiscreteDynamicsWorld_getSolverInfo_0": btDiscreteDynamicsWorld_getSolverInfo_0, 
  "btDiscreteDynamicsWorld_getFixedBody_0": btDiscreteDynamicsWorld_getFixedBody_0, 
  "btDiscreteDynamicsWorld___destroy___0": btDiscreteDynamicsWorld___destroy___0, 
  "btMotionState_getWorldTransform_1": btMotionState_getWorldTransform_1, 
  "btMotionState_setWorldTransform_1": btMotionState_setWorldTransform_1, 
  "btMotionState___destroy___0": btMotionState___destroy___0, 
  "btConvexInternalShape_getImplicitShapeDimensions_0": btConvexInternalShape_getImplicitShapeDimensions_0, 
  "btConvexInternalShape_setLocalScaling_1": btConvexInternalShape_setLocalScaling_1, 
  "btConvexInternalShape_getLocalScaling_0": btConvexInternalShape_getLocalScaling_0, 
  "btConvexInternalShape_calculateLocalInertia_2": btConvexInternalShape_calculateLocalInertia_2, 
  "btConvexInternalShape_setMargin_1": btConvexInternalShape_setMargin_1, 
  "btConvexInternalShape_getMargin_0": btConvexInternalShape_getMargin_0, 
  "btConvexInternalShape_isCompound_0": btConvexInternalShape_isCompound_0, 
  "btConvexInternalShape_getUserIndex_0": btConvexInternalShape_getUserIndex_0, 
  "btConvexInternalShape_setUserIndex_1": btConvexInternalShape_setUserIndex_1, 
  "btConvexInternalShape_getUserIndex2_0": btConvexInternalShape_getUserIndex2_0, 
  "btConvexInternalShape_setUserIndex2_1": btConvexInternalShape_setUserIndex2_1, 
  "btConvexInternalShape_getAabb_3": btConvexInternalShape_getAabb_3, 
  "btConvexInternalShape_getLocalBoundingSphere_0": btConvexInternalShape_getLocalBoundingSphere_0, 
  "btConvexInternalShape___destroy___0": btConvexInternalShape___destroy___0, 
  "AllHitsRayResultCallback_AllHitsRayResultCallback_2": AllHitsRayResultCallback_AllHitsRayResultCallback_2, 
  "AllHitsRayResultCallback_hasHit_0": AllHitsRayResultCallback_hasHit_0, 
  "AllHitsRayResultCallback_get_m_collisionObjects_0": AllHitsRayResultCallback_get_m_collisionObjects_0, 
  "AllHitsRayResultCallback_set_m_collisionObjects_1": AllHitsRayResultCallback_set_m_collisionObjects_1, 
  "AllHitsRayResultCallback_get_m_rayFromWorld_0": AllHitsRayResultCallback_get_m_rayFromWorld_0, 
  "AllHitsRayResultCallback_set_m_rayFromWorld_1": AllHitsRayResultCallback_set_m_rayFromWorld_1, 
  "AllHitsRayResultCallback_get_m_rayToWorld_0": AllHitsRayResultCallback_get_m_rayToWorld_0, 
  "AllHitsRayResultCallback_set_m_rayToWorld_1": AllHitsRayResultCallback_set_m_rayToWorld_1, 
  "AllHitsRayResultCallback_get_m_hitNormalWorld_0": AllHitsRayResultCallback_get_m_hitNormalWorld_0, 
  "AllHitsRayResultCallback_set_m_hitNormalWorld_1": AllHitsRayResultCallback_set_m_hitNormalWorld_1, 
  "AllHitsRayResultCallback_get_m_hitPointWorld_0": AllHitsRayResultCallback_get_m_hitPointWorld_0, 
  "AllHitsRayResultCallback_set_m_hitPointWorld_1": AllHitsRayResultCallback_set_m_hitPointWorld_1, 
  "AllHitsRayResultCallback_get_m_hitFractions_0": AllHitsRayResultCallback_get_m_hitFractions_0, 
  "AllHitsRayResultCallback_set_m_hitFractions_1": AllHitsRayResultCallback_set_m_hitFractions_1, 
  "AllHitsRayResultCallback_get_m_collisionFilterGroup_0": AllHitsRayResultCallback_get_m_collisionFilterGroup_0, 
  "AllHitsRayResultCallback_set_m_collisionFilterGroup_1": AllHitsRayResultCallback_set_m_collisionFilterGroup_1, 
  "AllHitsRayResultCallback_get_m_collisionFilterMask_0": AllHitsRayResultCallback_get_m_collisionFilterMask_0, 
  "AllHitsRayResultCallback_set_m_collisionFilterMask_1": AllHitsRayResultCallback_set_m_collisionFilterMask_1, 
  "AllHitsRayResultCallback_get_m_closestHitFraction_0": AllHitsRayResultCallback_get_m_closestHitFraction_0, 
  "AllHitsRayResultCallback_set_m_closestHitFraction_1": AllHitsRayResultCallback_set_m_closestHitFraction_1, 
  "AllHitsRayResultCallback_get_m_collisionObject_0": AllHitsRayResultCallback_get_m_collisionObject_0, 
  "AllHitsRayResultCallback_set_m_collisionObject_1": AllHitsRayResultCallback_set_m_collisionObject_1, 
  "AllHitsRayResultCallback___destroy___0": AllHitsRayResultCallback___destroy___0, 
  "btDispatcher_getNumManifolds_0": btDispatcher_getNumManifolds_0, 
  "btDispatcher_getManifoldByIndexInternal_1": btDispatcher_getManifoldByIndexInternal_1, 
  "btDispatcher___destroy___0": btDispatcher___destroy___0, 
  "ClosestRayResultCallback_ClosestRayResultCallback_2": ClosestRayResultCallback_ClosestRayResultCallback_2, 
  "ClosestRayResultCallback_hasHit_0": ClosestRayResultCallback_hasHit_0, 
  "ClosestRayResultCallback_get_m_rayFromWorld_0": ClosestRayResultCallback_get_m_rayFromWorld_0, 
  "ClosestRayResultCallback_set_m_rayFromWorld_1": ClosestRayResultCallback_set_m_rayFromWorld_1, 
  "ClosestRayResultCallback_get_m_rayToWorld_0": ClosestRayResultCallback_get_m_rayToWorld_0, 
  "ClosestRayResultCallback_set_m_rayToWorld_1": ClosestRayResultCallback_set_m_rayToWorld_1, 
  "ClosestRayResultCallback_get_m_hitNormalWorld_0": ClosestRayResultCallback_get_m_hitNormalWorld_0, 
  "ClosestRayResultCallback_set_m_hitNormalWorld_1": ClosestRayResultCallback_set_m_hitNormalWorld_1, 
  "ClosestRayResultCallback_get_m_hitPointWorld_0": ClosestRayResultCallback_get_m_hitPointWorld_0, 
  "ClosestRayResultCallback_set_m_hitPointWorld_1": ClosestRayResultCallback_set_m_hitPointWorld_1, 
  "ClosestRayResultCallback_get_m_collisionFilterGroup_0": ClosestRayResultCallback_get_m_collisionFilterGroup_0, 
  "ClosestRayResultCallback_set_m_collisionFilterGroup_1": ClosestRayResultCallback_set_m_collisionFilterGroup_1, 
  "ClosestRayResultCallback_get_m_collisionFilterMask_0": ClosestRayResultCallback_get_m_collisionFilterMask_0, 
  "ClosestRayResultCallback_set_m_collisionFilterMask_1": ClosestRayResultCallback_set_m_collisionFilterMask_1, 
  "ClosestRayResultCallback_get_m_closestHitFraction_0": ClosestRayResultCallback_get_m_closestHitFraction_0, 
  "ClosestRayResultCallback_set_m_closestHitFraction_1": ClosestRayResultCallback_set_m_closestHitFraction_1, 
  "ClosestRayResultCallback_get_m_collisionObject_0": ClosestRayResultCallback_get_m_collisionObject_0, 
  "ClosestRayResultCallback_set_m_collisionObject_1": ClosestRayResultCallback_set_m_collisionObject_1, 
  "ClosestRayResultCallback___destroy___0": ClosestRayResultCallback___destroy___0, 
  "btTriangleMeshShape_setLocalScaling_1": btTriangleMeshShape_setLocalScaling_1, 
  "btTriangleMeshShape_getLocalScaling_0": btTriangleMeshShape_getLocalScaling_0, 
  "btTriangleMeshShape_calculateLocalInertia_2": btTriangleMeshShape_calculateLocalInertia_2, 
  "btTriangleMeshShape_isCompound_0": btTriangleMeshShape_isCompound_0, 
  "btTriangleMeshShape_getUserIndex_0": btTriangleMeshShape_getUserIndex_0, 
  "btTriangleMeshShape_setUserIndex_1": btTriangleMeshShape_setUserIndex_1, 
  "btTriangleMeshShape_getUserIndex2_0": btTriangleMeshShape_getUserIndex2_0, 
  "btTriangleMeshShape_setUserIndex2_1": btTriangleMeshShape_setUserIndex2_1, 
  "btTriangleMeshShape_getAabb_3": btTriangleMeshShape_getAabb_3, 
  "btTriangleMeshShape_getLocalBoundingSphere_0": btTriangleMeshShape_getLocalBoundingSphere_0, 
  "btTriangleMeshShape___destroy___0": btTriangleMeshShape___destroy___0, 
  "btOverlapFilterCallback___destroy___0": btOverlapFilterCallback___destroy___0, 
  "btQuadWord_x_0": btQuadWord_x_0, 
  "btQuadWord_y_0": btQuadWord_y_0, 
  "btQuadWord_z_0": btQuadWord_z_0, 
  "btQuadWord_w_0": btQuadWord_w_0, 
  "btQuadWord_setX_1": btQuadWord_setX_1, 
  "btQuadWord_setY_1": btQuadWord_setY_1, 
  "btQuadWord_setZ_1": btQuadWord_setZ_1, 
  "btQuadWord_setW_1": btQuadWord_setW_1, 
  "btQuadWord___destroy___0": btQuadWord___destroy___0, 
  "btTypedConstraint_enableFeedback_1": btTypedConstraint_enableFeedback_1, 
  "btTypedConstraint_getBreakingImpulseThreshold_0": btTypedConstraint_getBreakingImpulseThreshold_0, 
  "btTypedConstraint_setBreakingImpulseThreshold_1": btTypedConstraint_setBreakingImpulseThreshold_1, 
  "btTypedConstraint_getParam_2": btTypedConstraint_getParam_2, 
  "btTypedConstraint_setParam_3": btTypedConstraint_setParam_3, 
  "btTypedConstraint___destroy___0": btTypedConstraint___destroy___0, 
  "btMatrix3x3_getRotation_1": btMatrix3x3_getRotation_1, 
  "btMatrix3x3___destroy___0": btMatrix3x3___destroy___0, 
  "btScalarArray_size_0": btScalarArray_size_0, 
  "btScalarArray_at_1": btScalarArray_at_1, 
  "btScalarArray_clear_0": btScalarArray_clear_0, 
  "btScalarArray___destroy___0": btScalarArray___destroy___0, 
  "btBvhTriangleMeshShape_btBvhTriangleMeshShape_2": btBvhTriangleMeshShape_btBvhTriangleMeshShape_2, 
  "btBvhTriangleMeshShape_btBvhTriangleMeshShape_3": btBvhTriangleMeshShape_btBvhTriangleMeshShape_3, 
  "btBvhTriangleMeshShape_setLocalScaling_1": btBvhTriangleMeshShape_setLocalScaling_1, 
  "btBvhTriangleMeshShape_getLocalScaling_0": btBvhTriangleMeshShape_getLocalScaling_0, 
  "btBvhTriangleMeshShape_calculateLocalInertia_2": btBvhTriangleMeshShape_calculateLocalInertia_2, 
  "btBvhTriangleMeshShape_isCompound_0": btBvhTriangleMeshShape_isCompound_0, 
  "btBvhTriangleMeshShape_getUserIndex_0": btBvhTriangleMeshShape_getUserIndex_0, 
  "btBvhTriangleMeshShape_setUserIndex_1": btBvhTriangleMeshShape_setUserIndex_1, 
  "btBvhTriangleMeshShape_getUserIndex2_0": btBvhTriangleMeshShape_getUserIndex2_0, 
  "btBvhTriangleMeshShape_setUserIndex2_1": btBvhTriangleMeshShape_setUserIndex2_1, 
  "btBvhTriangleMeshShape_getAabb_3": btBvhTriangleMeshShape_getAabb_3, 
  "btBvhTriangleMeshShape_getLocalBoundingSphere_0": btBvhTriangleMeshShape_getLocalBoundingSphere_0, 
  "btBvhTriangleMeshShape___destroy___0": btBvhTriangleMeshShape___destroy___0, 
  "btDbvtBroadphase_btDbvtBroadphase_0": btDbvtBroadphase_btDbvtBroadphase_0, 
  "btDbvtBroadphase_getOverlappingPairCache_0": btDbvtBroadphase_getOverlappingPairCache_0, 
  "btDbvtBroadphase___destroy___0": btDbvtBroadphase___destroy___0, 
  "btIntArray_size_0": btIntArray_size_0, 
  "btIntArray_at_1": btIntArray_at_1, 
  "btIntArray_clear_0": btIntArray_clear_0, 
  "btIntArray___destroy___0": btIntArray___destroy___0, 
  "ccAllHitsRayResultCallback_ccAllHitsRayResultCallback_2": ccAllHitsRayResultCallback_ccAllHitsRayResultCallback_2, 
  "ccAllHitsRayResultCallback_setQueryTrigger_1": ccAllHitsRayResultCallback_setQueryTrigger_1, 
  "ccAllHitsRayResultCallback_hasHit_0": ccAllHitsRayResultCallback_hasHit_0, 
  "ccAllHitsRayResultCallback_get_m_shapeParts_0": ccAllHitsRayResultCallback_get_m_shapeParts_0, 
  "ccAllHitsRayResultCallback_set_m_shapeParts_1": ccAllHitsRayResultCallback_set_m_shapeParts_1, 
  "ccAllHitsRayResultCallback_get_m_collisionObjects_0": ccAllHitsRayResultCallback_get_m_collisionObjects_0, 
  "ccAllHitsRayResultCallback_set_m_collisionObjects_1": ccAllHitsRayResultCallback_set_m_collisionObjects_1, 
  "ccAllHitsRayResultCallback_get_m_rayFromWorld_0": ccAllHitsRayResultCallback_get_m_rayFromWorld_0, 
  "ccAllHitsRayResultCallback_set_m_rayFromWorld_1": ccAllHitsRayResultCallback_set_m_rayFromWorld_1, 
  "ccAllHitsRayResultCallback_get_m_rayToWorld_0": ccAllHitsRayResultCallback_get_m_rayToWorld_0, 
  "ccAllHitsRayResultCallback_set_m_rayToWorld_1": ccAllHitsRayResultCallback_set_m_rayToWorld_1, 
  "ccAllHitsRayResultCallback_get_m_hitNormalWorld_0": ccAllHitsRayResultCallback_get_m_hitNormalWorld_0, 
  "ccAllHitsRayResultCallback_set_m_hitNormalWorld_1": ccAllHitsRayResultCallback_set_m_hitNormalWorld_1, 
  "ccAllHitsRayResultCallback_get_m_hitPointWorld_0": ccAllHitsRayResultCallback_get_m_hitPointWorld_0, 
  "ccAllHitsRayResultCallback_set_m_hitPointWorld_1": ccAllHitsRayResultCallback_set_m_hitPointWorld_1, 
  "ccAllHitsRayResultCallback_get_m_hitFractions_0": ccAllHitsRayResultCallback_get_m_hitFractions_0, 
  "ccAllHitsRayResultCallback_set_m_hitFractions_1": ccAllHitsRayResultCallback_set_m_hitFractions_1, 
  "ccAllHitsRayResultCallback_get_m_collisionFilterGroup_0": ccAllHitsRayResultCallback_get_m_collisionFilterGroup_0, 
  "ccAllHitsRayResultCallback_set_m_collisionFilterGroup_1": ccAllHitsRayResultCallback_set_m_collisionFilterGroup_1, 
  "ccAllHitsRayResultCallback_get_m_collisionFilterMask_0": ccAllHitsRayResultCallback_get_m_collisionFilterMask_0, 
  "ccAllHitsRayResultCallback_set_m_collisionFilterMask_1": ccAllHitsRayResultCallback_set_m_collisionFilterMask_1, 
  "ccAllHitsRayResultCallback_get_m_closestHitFraction_0": ccAllHitsRayResultCallback_get_m_closestHitFraction_0, 
  "ccAllHitsRayResultCallback_set_m_closestHitFraction_1": ccAllHitsRayResultCallback_set_m_closestHitFraction_1, 
  "ccAllHitsRayResultCallback_get_m_collisionObject_0": ccAllHitsRayResultCallback_get_m_collisionObject_0, 
  "ccAllHitsRayResultCallback_set_m_collisionObject_1": ccAllHitsRayResultCallback_set_m_collisionObject_1, 
  "ccAllHitsRayResultCallback___destroy___0": ccAllHitsRayResultCallback___destroy___0, 
  "btConstCollisionObjectArray_size_0": btConstCollisionObjectArray_size_0, 
  "btConstCollisionObjectArray_at_1": btConstCollisionObjectArray_at_1, 
  "btConstCollisionObjectArray_clear_0": btConstCollisionObjectArray_clear_0, 
  "btConstCollisionObjectArray___destroy___0": btConstCollisionObjectArray___destroy___0, 
  "btBroadphaseProxy_get_m_collisionFilterGroup_0": btBroadphaseProxy_get_m_collisionFilterGroup_0, 
  "btBroadphaseProxy_set_m_collisionFilterGroup_1": btBroadphaseProxy_set_m_collisionFilterGroup_1, 
  "btBroadphaseProxy_get_m_collisionFilterMask_0": btBroadphaseProxy_get_m_collisionFilterMask_0, 
  "btBroadphaseProxy_set_m_collisionFilterMask_1": btBroadphaseProxy_set_m_collisionFilterMask_1, 
  "btBroadphaseProxy___destroy___0": btBroadphaseProxy___destroy___0, 
  "btIndexedMesh_get_m_numTriangles_0": btIndexedMesh_get_m_numTriangles_0, 
  "btIndexedMesh_set_m_numTriangles_1": btIndexedMesh_set_m_numTriangles_1, 
  "btIndexedMesh___destroy___0": btIndexedMesh___destroy___0, 
  "btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3": btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3, 
  "btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4": btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4, 
  "btRigidBodyConstructionInfo_get_m_linearDamping_0": btRigidBodyConstructionInfo_get_m_linearDamping_0, 
  "btRigidBodyConstructionInfo_set_m_linearDamping_1": btRigidBodyConstructionInfo_set_m_linearDamping_1, 
  "btRigidBodyConstructionInfo_get_m_angularDamping_0": btRigidBodyConstructionInfo_get_m_angularDamping_0, 
  "btRigidBodyConstructionInfo_set_m_angularDamping_1": btRigidBodyConstructionInfo_set_m_angularDamping_1, 
  "btRigidBodyConstructionInfo_get_m_friction_0": btRigidBodyConstructionInfo_get_m_friction_0, 
  "btRigidBodyConstructionInfo_set_m_friction_1": btRigidBodyConstructionInfo_set_m_friction_1, 
  "btRigidBodyConstructionInfo_get_m_rollingFriction_0": btRigidBodyConstructionInfo_get_m_rollingFriction_0, 
  "btRigidBodyConstructionInfo_set_m_rollingFriction_1": btRigidBodyConstructionInfo_set_m_rollingFriction_1, 
  "btRigidBodyConstructionInfo_get_m_restitution_0": btRigidBodyConstructionInfo_get_m_restitution_0, 
  "btRigidBodyConstructionInfo_set_m_restitution_1": btRigidBodyConstructionInfo_set_m_restitution_1, 
  "btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0": btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0, 
  "btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1": btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1, 
  "btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0": btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0, 
  "btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1": btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1, 
  "btRigidBodyConstructionInfo___destroy___0": btRigidBodyConstructionInfo___destroy___0, 
  "btManifoldPoint_getAppliedImpulse_0": btManifoldPoint_getAppliedImpulse_0, 
  "btManifoldPoint_getDistance_0": btManifoldPoint_getDistance_0, 
  "btManifoldPoint_getShape0_0": btManifoldPoint_getShape0_0, 
  "btManifoldPoint_getShape1_0": btManifoldPoint_getShape1_0, 
  "btManifoldPoint_get_m_localPointA_0": btManifoldPoint_get_m_localPointA_0, 
  "btManifoldPoint_set_m_localPointA_1": btManifoldPoint_set_m_localPointA_1, 
  "btManifoldPoint_get_m_localPointB_0": btManifoldPoint_get_m_localPointB_0, 
  "btManifoldPoint_set_m_localPointB_1": btManifoldPoint_set_m_localPointB_1, 
  "btManifoldPoint_get_m_positionWorldOnA_0": btManifoldPoint_get_m_positionWorldOnA_0, 
  "btManifoldPoint_set_m_positionWorldOnA_1": btManifoldPoint_set_m_positionWorldOnA_1, 
  "btManifoldPoint_get_m_positionWorldOnB_0": btManifoldPoint_get_m_positionWorldOnB_0, 
  "btManifoldPoint_set_m_positionWorldOnB_1": btManifoldPoint_set_m_positionWorldOnB_1, 
  "btManifoldPoint_get_m_normalWorldOnB_0": btManifoldPoint_get_m_normalWorldOnB_0, 
  "btManifoldPoint_set_m_normalWorldOnB_1": btManifoldPoint_set_m_normalWorldOnB_1, 
  "btManifoldPoint_get_m_distance1_0": btManifoldPoint_get_m_distance1_0, 
  "btManifoldPoint_set_m_distance1_1": btManifoldPoint_set_m_distance1_1, 
  "btManifoldPoint_get_m_index0_0": btManifoldPoint_get_m_index0_0, 
  "btManifoldPoint_set_m_index0_1": btManifoldPoint_set_m_index0_1, 
  "btManifoldPoint_get_m_index1_0": btManifoldPoint_get_m_index1_0, 
  "btManifoldPoint_set_m_index1_1": btManifoldPoint_set_m_index1_1, 
  "btManifoldPoint_get_m_userPersistentData_0": btManifoldPoint_get_m_userPersistentData_0, 
  "btManifoldPoint_set_m_userPersistentData_1": btManifoldPoint_set_m_userPersistentData_1, 
  "btManifoldPoint_get_m_userPersistentData0_0": btManifoldPoint_get_m_userPersistentData0_0, 
  "btManifoldPoint_set_m_userPersistentData0_1": btManifoldPoint_set_m_userPersistentData0_1, 
  "btManifoldPoint_get_m_userPersistentData1_0": btManifoldPoint_get_m_userPersistentData1_0, 
  "btManifoldPoint_set_m_userPersistentData1_1": btManifoldPoint_set_m_userPersistentData1_1, 
  "btManifoldPoint___destroy___0": btManifoldPoint___destroy___0, 
  "btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0": btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0, 
  "btSequentialImpulseConstraintSolver___destroy___0": btSequentialImpulseConstraintSolver___destroy___0, 
  "btPoint2PointConstraint_btPoint2PointConstraint_2": btPoint2PointConstraint_btPoint2PointConstraint_2, 
  "btPoint2PointConstraint_btPoint2PointConstraint_4": btPoint2PointConstraint_btPoint2PointConstraint_4, 
  "btPoint2PointConstraint_setPivotA_1": btPoint2PointConstraint_setPivotA_1, 
  "btPoint2PointConstraint_setPivotB_1": btPoint2PointConstraint_setPivotB_1, 
  "btPoint2PointConstraint_getPivotInA_0": btPoint2PointConstraint_getPivotInA_0, 
  "btPoint2PointConstraint_getPivotInB_0": btPoint2PointConstraint_getPivotInB_0, 
  "btPoint2PointConstraint_enableFeedback_1": btPoint2PointConstraint_enableFeedback_1, 
  "btPoint2PointConstraint_getBreakingImpulseThreshold_0": btPoint2PointConstraint_getBreakingImpulseThreshold_0, 
  "btPoint2PointConstraint_setBreakingImpulseThreshold_1": btPoint2PointConstraint_setBreakingImpulseThreshold_1, 
  "btPoint2PointConstraint_getParam_2": btPoint2PointConstraint_getParam_2, 
  "btPoint2PointConstraint_setParam_3": btPoint2PointConstraint_setParam_3, 
  "btPoint2PointConstraint_get_m_setting_0": btPoint2PointConstraint_get_m_setting_0, 
  "btPoint2PointConstraint_set_m_setting_1": btPoint2PointConstraint_set_m_setting_1, 
  "btPoint2PointConstraint___destroy___0": btPoint2PointConstraint___destroy___0, 
  "ccOverlapFilterCallback_ccOverlapFilterCallback_0": ccOverlapFilterCallback_ccOverlapFilterCallback_0, 
  "ccOverlapFilterCallback___destroy___0": ccOverlapFilterCallback___destroy___0, 
  "btConvexTriangleMeshShape_btConvexTriangleMeshShape_1": btConvexTriangleMeshShape_btConvexTriangleMeshShape_1, 
  "btConvexTriangleMeshShape_btConvexTriangleMeshShape_2": btConvexTriangleMeshShape_btConvexTriangleMeshShape_2, 
  "btConvexTriangleMeshShape_setLocalScaling_1": btConvexTriangleMeshShape_setLocalScaling_1, 
  "btConvexTriangleMeshShape_getLocalScaling_0": btConvexTriangleMeshShape_getLocalScaling_0, 
  "btConvexTriangleMeshShape_calculateLocalInertia_2": btConvexTriangleMeshShape_calculateLocalInertia_2, 
  "btConvexTriangleMeshShape_setMargin_1": btConvexTriangleMeshShape_setMargin_1, 
  "btConvexTriangleMeshShape_getMargin_0": btConvexTriangleMeshShape_getMargin_0, 
  "btConvexTriangleMeshShape_isCompound_0": btConvexTriangleMeshShape_isCompound_0, 
  "btConvexTriangleMeshShape_getUserIndex_0": btConvexTriangleMeshShape_getUserIndex_0, 
  "btConvexTriangleMeshShape_setUserIndex_1": btConvexTriangleMeshShape_setUserIndex_1, 
  "btConvexTriangleMeshShape_getUserIndex2_0": btConvexTriangleMeshShape_getUserIndex2_0, 
  "btConvexTriangleMeshShape_setUserIndex2_1": btConvexTriangleMeshShape_setUserIndex2_1, 
  "btConvexTriangleMeshShape_getAabb_3": btConvexTriangleMeshShape_getAabb_3, 
  "btConvexTriangleMeshShape_getLocalBoundingSphere_0": btConvexTriangleMeshShape_getLocalBoundingSphere_0, 
  "btConvexTriangleMeshShape___destroy___0": btConvexTriangleMeshShape___destroy___0, 
  "ccClosestRayResultCallback_ccClosestRayResultCallback_2": ccClosestRayResultCallback_ccClosestRayResultCallback_2, 
  "ccClosestRayResultCallback_setQueryTrigger_1": ccClosestRayResultCallback_setQueryTrigger_1, 
  "ccClosestRayResultCallback_hasHit_0": ccClosestRayResultCallback_hasHit_0, 
  "ccClosestRayResultCallback_get_m_shapePart_0": ccClosestRayResultCallback_get_m_shapePart_0, 
  "ccClosestRayResultCallback_set_m_shapePart_1": ccClosestRayResultCallback_set_m_shapePart_1, 
  "ccClosestRayResultCallback_get_m_rayFromWorld_0": ccClosestRayResultCallback_get_m_rayFromWorld_0, 
  "ccClosestRayResultCallback_set_m_rayFromWorld_1": ccClosestRayResultCallback_set_m_rayFromWorld_1, 
  "ccClosestRayResultCallback_get_m_rayToWorld_0": ccClosestRayResultCallback_get_m_rayToWorld_0, 
  "ccClosestRayResultCallback_set_m_rayToWorld_1": ccClosestRayResultCallback_set_m_rayToWorld_1, 
  "ccClosestRayResultCallback_get_m_hitNormalWorld_0": ccClosestRayResultCallback_get_m_hitNormalWorld_0, 
  "ccClosestRayResultCallback_set_m_hitNormalWorld_1": ccClosestRayResultCallback_set_m_hitNormalWorld_1, 
  "ccClosestRayResultCallback_get_m_hitPointWorld_0": ccClosestRayResultCallback_get_m_hitPointWorld_0, 
  "ccClosestRayResultCallback_set_m_hitPointWorld_1": ccClosestRayResultCallback_set_m_hitPointWorld_1, 
  "ccClosestRayResultCallback_get_m_collisionFilterGroup_0": ccClosestRayResultCallback_get_m_collisionFilterGroup_0, 
  "ccClosestRayResultCallback_set_m_collisionFilterGroup_1": ccClosestRayResultCallback_set_m_collisionFilterGroup_1, 
  "ccClosestRayResultCallback_get_m_collisionFilterMask_0": ccClosestRayResultCallback_get_m_collisionFilterMask_0, 
  "ccClosestRayResultCallback_set_m_collisionFilterMask_1": ccClosestRayResultCallback_set_m_collisionFilterMask_1, 
  "ccClosestRayResultCallback_get_m_closestHitFraction_0": ccClosestRayResultCallback_get_m_closestHitFraction_0, 
  "ccClosestRayResultCallback_set_m_closestHitFraction_1": ccClosestRayResultCallback_set_m_closestHitFraction_1, 
  "ccClosestRayResultCallback_get_m_collisionObject_0": ccClosestRayResultCallback_get_m_collisionObject_0, 
  "ccClosestRayResultCallback_set_m_collisionObject_1": ccClosestRayResultCallback_set_m_collisionObject_1, 
  "ccClosestRayResultCallback___destroy___0": ccClosestRayResultCallback___destroy___0, 
  "btHeightfieldTerrainShape_btHeightfieldTerrainShape_9": btHeightfieldTerrainShape_btHeightfieldTerrainShape_9, 
  "btHeightfieldTerrainShape_setMargin_1": btHeightfieldTerrainShape_setMargin_1, 
  "btHeightfieldTerrainShape_getMargin_0": btHeightfieldTerrainShape_getMargin_0, 
  "btHeightfieldTerrainShape_setLocalScaling_1": btHeightfieldTerrainShape_setLocalScaling_1, 
  "btHeightfieldTerrainShape_getLocalScaling_0": btHeightfieldTerrainShape_getLocalScaling_0, 
  "btHeightfieldTerrainShape_calculateLocalInertia_2": btHeightfieldTerrainShape_calculateLocalInertia_2, 
  "btHeightfieldTerrainShape_isCompound_0": btHeightfieldTerrainShape_isCompound_0, 
  "btHeightfieldTerrainShape_getUserIndex_0": btHeightfieldTerrainShape_getUserIndex_0, 
  "btHeightfieldTerrainShape_setUserIndex_1": btHeightfieldTerrainShape_setUserIndex_1, 
  "btHeightfieldTerrainShape_getUserIndex2_0": btHeightfieldTerrainShape_getUserIndex2_0, 
  "btHeightfieldTerrainShape_setUserIndex2_1": btHeightfieldTerrainShape_setUserIndex2_1, 
  "btHeightfieldTerrainShape_getAabb_3": btHeightfieldTerrainShape_getAabb_3, 
  "btHeightfieldTerrainShape_getLocalBoundingSphere_0": btHeightfieldTerrainShape_getLocalBoundingSphere_0, 
  "btHeightfieldTerrainShape___destroy___0": btHeightfieldTerrainShape___destroy___0, 
  "VoidPtr___destroy___0": VoidPtr___destroy___0, 
  "btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0": btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0, 
  "btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1": btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1, 
  "btDefaultCollisionConfiguration___destroy___0": btDefaultCollisionConfiguration___destroy___0, 
  "btOverlappingPairCallback___destroy___0": btOverlappingPairCallback___destroy___0, 
  "btTriangleMesh_btTriangleMesh_0": btTriangleMesh_btTriangleMesh_0, 
  "btTriangleMesh_btTriangleMesh_1": btTriangleMesh_btTriangleMesh_1, 
  "btTriangleMesh_btTriangleMesh_2": btTriangleMesh_btTriangleMesh_2, 
  "btTriangleMesh_addTriangle_3": btTriangleMesh_addTriangle_3, 
  "btTriangleMesh_addTriangle_4": btTriangleMesh_addTriangle_4, 
  "btTriangleMesh_addTriangleIndices_3": btTriangleMesh_addTriangleIndices_3, 
  "btTriangleMesh_getIndexedMeshArray_0": btTriangleMesh_getIndexedMeshArray_0, 
  "btTriangleMesh_setScaling_1": btTriangleMesh_setScaling_1, 
  "btTriangleMesh___destroy___0": btTriangleMesh___destroy___0, 
  "btCollisionConfiguration___destroy___0": btCollisionConfiguration___destroy___0, 
  "btPersistentManifold_btPersistentManifold_0": btPersistentManifold_btPersistentManifold_0, 
  "btPersistentManifold_getBody0_0": btPersistentManifold_getBody0_0, 
  "btPersistentManifold_getBody1_0": btPersistentManifold_getBody1_0, 
  "btPersistentManifold_getNumContacts_0": btPersistentManifold_getNumContacts_0, 
  "btPersistentManifold_getContactPoint_1": btPersistentManifold_getContactPoint_1, 
  "btPersistentManifold___destroy___0": btPersistentManifold___destroy___0, 
  "btBoxShape_btBoxShape_1": btBoxShape_btBoxShape_1, 
  "btBoxShape_setMargin_1": btBoxShape_setMargin_1, 
  "btBoxShape_getMargin_0": btBoxShape_getMargin_0, 
  "btBoxShape_setUnscaledHalfExtents_1": btBoxShape_setUnscaledHalfExtents_1, 
  "btBoxShape_setLocalScaling_1": btBoxShape_setLocalScaling_1, 
  "btBoxShape_getLocalScaling_0": btBoxShape_getLocalScaling_0, 
  "btBoxShape_calculateLocalInertia_2": btBoxShape_calculateLocalInertia_2, 
  "btBoxShape_isCompound_0": btBoxShape_isCompound_0, 
  "btBoxShape_getUserIndex_0": btBoxShape_getUserIndex_0, 
  "btBoxShape_setUserIndex_1": btBoxShape_setUserIndex_1, 
  "btBoxShape_getUserIndex2_0": btBoxShape_getUserIndex2_0, 
  "btBoxShape_setUserIndex2_1": btBoxShape_setUserIndex2_1, 
  "btBoxShape_getAabb_3": btBoxShape_getAabb_3, 
  "btBoxShape_getLocalBoundingSphere_0": btBoxShape_getLocalBoundingSphere_0, 
  "btBoxShape_getImplicitShapeDimensions_0": btBoxShape_getImplicitShapeDimensions_0, 
  "btBoxShape___destroy___0": btBoxShape___destroy___0, 
  "btCapsuleShape_btCapsuleShape_2": btCapsuleShape_btCapsuleShape_2, 
  "btCapsuleShape_setMargin_1": btCapsuleShape_setMargin_1, 
  "btCapsuleShape_getMargin_0": btCapsuleShape_getMargin_0, 
  "btCapsuleShape_updateProp_3": btCapsuleShape_updateProp_3, 
  "btCapsuleShape_setLocalScaling_1": btCapsuleShape_setLocalScaling_1, 
  "btCapsuleShape_getLocalScaling_0": btCapsuleShape_getLocalScaling_0, 
  "btCapsuleShape_calculateLocalInertia_2": btCapsuleShape_calculateLocalInertia_2, 
  "btCapsuleShape_isCompound_0": btCapsuleShape_isCompound_0, 
  "btCapsuleShape_getUserIndex_0": btCapsuleShape_getUserIndex_0, 
  "btCapsuleShape_setUserIndex_1": btCapsuleShape_setUserIndex_1, 
  "btCapsuleShape_getUserIndex2_0": btCapsuleShape_getUserIndex2_0, 
  "btCapsuleShape_setUserIndex2_1": btCapsuleShape_setUserIndex2_1, 
  "btCapsuleShape_getAabb_3": btCapsuleShape_getAabb_3, 
  "btCapsuleShape_getLocalBoundingSphere_0": btCapsuleShape_getLocalBoundingSphere_0, 
  "btCapsuleShape_getImplicitShapeDimensions_0": btCapsuleShape_getImplicitShapeDimensions_0, 
  "btCapsuleShape___destroy___0": btCapsuleShape___destroy___0, 
  "btCompoundShape_btCompoundShape_0": btCompoundShape_btCompoundShape_0, 
  "btCompoundShape_btCompoundShape_1": btCompoundShape_btCompoundShape_1, 
  "btCompoundShape_addChildShape_2": btCompoundShape_addChildShape_2, 
  "btCompoundShape_removeChildShape_1": btCompoundShape_removeChildShape_1, 
  "btCompoundShape_removeChildShapeByIndex_1": btCompoundShape_removeChildShapeByIndex_1, 
  "btCompoundShape_getNumChildShapes_0": btCompoundShape_getNumChildShapes_0, 
  "btCompoundShape_getChildShape_1": btCompoundShape_getChildShape_1, 
  "btCompoundShape_updateChildTransform_2": btCompoundShape_updateChildTransform_2, 
  "btCompoundShape_updateChildTransform_3": btCompoundShape_updateChildTransform_3, 
  "btCompoundShape_setMargin_1": btCompoundShape_setMargin_1, 
  "btCompoundShape_getMargin_0": btCompoundShape_getMargin_0, 
  "btCompoundShape_setMaterial_3": btCompoundShape_setMaterial_3, 
  "btCompoundShape_setMaterial_4": btCompoundShape_setMaterial_4, 
  "btCompoundShape_setMaterial_5": btCompoundShape_setMaterial_5, 
  "btCompoundShape_setMaterial_6": btCompoundShape_setMaterial_6, 
  "btCompoundShape_setLocalScaling_1": btCompoundShape_setLocalScaling_1, 
  "btCompoundShape_getLocalScaling_0": btCompoundShape_getLocalScaling_0, 
  "btCompoundShape_calculateLocalInertia_2": btCompoundShape_calculateLocalInertia_2, 
  "btCompoundShape_isCompound_0": btCompoundShape_isCompound_0, 
  "btCompoundShape_getUserIndex_0": btCompoundShape_getUserIndex_0, 
  "btCompoundShape_setUserIndex_1": btCompoundShape_setUserIndex_1, 
  "btCompoundShape_getUserIndex2_0": btCompoundShape_getUserIndex2_0, 
  "btCompoundShape_setUserIndex2_1": btCompoundShape_setUserIndex2_1, 
  "btCompoundShape_getAabb_3": btCompoundShape_getAabb_3, 
  "btCompoundShape_getLocalBoundingSphere_0": btCompoundShape_getLocalBoundingSphere_0, 
  "btCompoundShape___destroy___0": btCompoundShape___destroy___0, 
  "btDefaultMotionState_btDefaultMotionState_0": btDefaultMotionState_btDefaultMotionState_0, 
  "btDefaultMotionState_btDefaultMotionState_1": btDefaultMotionState_btDefaultMotionState_1, 
  "btDefaultMotionState_btDefaultMotionState_2": btDefaultMotionState_btDefaultMotionState_2, 
  "btDefaultMotionState_getWorldTransform_1": btDefaultMotionState_getWorldTransform_1, 
  "btDefaultMotionState_setWorldTransform_1": btDefaultMotionState_setWorldTransform_1, 
  "btDefaultMotionState___destroy___0": btDefaultMotionState___destroy___0, 
  "btHingeConstraint_btHingeConstraint_4": btHingeConstraint_btHingeConstraint_4, 
  "btHingeConstraint_btHingeConstraint_5": btHingeConstraint_btHingeConstraint_5, 
  "btHingeConstraint_setLimit_4": btHingeConstraint_setLimit_4, 
  "btHingeConstraint_setLimit_5": btHingeConstraint_setLimit_5, 
  "btHingeConstraint_enableAngularMotor_3": btHingeConstraint_enableAngularMotor_3, 
  "btHingeConstraint_setAngularOnly_1": btHingeConstraint_setAngularOnly_1, 
  "btHingeConstraint_enableMotor_1": btHingeConstraint_enableMotor_1, 
  "btHingeConstraint_setMaxMotorImpulse_1": btHingeConstraint_setMaxMotorImpulse_1, 
  "btHingeConstraint_setMotorTarget_2": btHingeConstraint_setMotorTarget_2, 
  "btHingeConstraint_setFrames_2": btHingeConstraint_setFrames_2, 
  "btHingeConstraint_setAxis_1": btHingeConstraint_setAxis_1, 
  "btHingeConstraint_setUseReferenceFrameA_1": btHingeConstraint_setUseReferenceFrameA_1, 
  "btHingeConstraint_enableFeedback_1": btHingeConstraint_enableFeedback_1, 
  "btHingeConstraint_getBreakingImpulseThreshold_0": btHingeConstraint_getBreakingImpulseThreshold_0, 
  "btHingeConstraint_setBreakingImpulseThreshold_1": btHingeConstraint_setBreakingImpulseThreshold_1, 
  "btHingeConstraint_getParam_2": btHingeConstraint_getParam_2, 
  "btHingeConstraint_setParam_3": btHingeConstraint_setParam_3, 
  "btHingeConstraint___destroy___0": btHingeConstraint___destroy___0, 
  "btQuaternion_btQuaternion_4": btQuaternion_btQuaternion_4, 
  "btQuaternion_setValue_4": btQuaternion_setValue_4, 
  "btQuaternion_x_0": btQuaternion_x_0, 
  "btQuaternion_y_0": btQuaternion_y_0, 
  "btQuaternion_z_0": btQuaternion_z_0, 
  "btQuaternion_w_0": btQuaternion_w_0, 
  "btQuaternion_setX_1": btQuaternion_setX_1, 
  "btQuaternion_setY_1": btQuaternion_setY_1, 
  "btQuaternion_setZ_1": btQuaternion_setZ_1, 
  "btQuaternion_setW_1": btQuaternion_setW_1, 
  "btQuaternion___destroy___0": btQuaternion___destroy___0, 
  "btConeShape_btConeShape_2": btConeShape_btConeShape_2, 
  "btConeShape_setRadius_1": btConeShape_setRadius_1, 
  "btConeShape_setHeight_1": btConeShape_setHeight_1, 
  "btConeShape_setConeUpIndex_1": btConeShape_setConeUpIndex_1, 
  "btConeShape_setLocalScaling_1": btConeShape_setLocalScaling_1, 
  "btConeShape_getLocalScaling_0": btConeShape_getLocalScaling_0, 
  "btConeShape_calculateLocalInertia_2": btConeShape_calculateLocalInertia_2, 
  "btConeShape_isCompound_0": btConeShape_isCompound_0, 
  "btConeShape_getUserIndex_0": btConeShape_getUserIndex_0, 
  "btConeShape_setUserIndex_1": btConeShape_setUserIndex_1, 
  "btConeShape_getUserIndex2_0": btConeShape_getUserIndex2_0, 
  "btConeShape_setUserIndex2_1": btConeShape_setUserIndex2_1, 
  "btConeShape_getAabb_3": btConeShape_getAabb_3, 
  "btConeShape_getLocalBoundingSphere_0": btConeShape_getLocalBoundingSphere_0, 
  "btConeShape_getImplicitShapeDimensions_0": btConeShape_getImplicitShapeDimensions_0, 
  "btConeShape___destroy___0": btConeShape___destroy___0, 
  "btBU_Simplex1to4_btBU_Simplex1to4_0": btBU_Simplex1to4_btBU_Simplex1to4_0, 
  "btBU_Simplex1to4_addVertex_1": btBU_Simplex1to4_addVertex_1, 
  "btBU_Simplex1to4_setLocalScaling_1": btBU_Simplex1to4_setLocalScaling_1, 
  "btBU_Simplex1to4_getLocalScaling_0": btBU_Simplex1to4_getLocalScaling_0, 
  "btBU_Simplex1to4_calculateLocalInertia_2": btBU_Simplex1to4_calculateLocalInertia_2, 
  "btBU_Simplex1to4_isCompound_0": btBU_Simplex1to4_isCompound_0, 
  "btBU_Simplex1to4_getUserIndex_0": btBU_Simplex1to4_getUserIndex_0, 
  "btBU_Simplex1to4_setUserIndex_1": btBU_Simplex1to4_setUserIndex_1, 
  "btBU_Simplex1to4_getUserIndex2_0": btBU_Simplex1to4_getUserIndex2_0, 
  "btBU_Simplex1to4_setUserIndex2_1": btBU_Simplex1to4_setUserIndex2_1, 
  "btBU_Simplex1to4_getAabb_3": btBU_Simplex1to4_getAabb_3, 
  "btBU_Simplex1to4_getLocalBoundingSphere_0": btBU_Simplex1to4_getLocalBoundingSphere_0, 
  "btBU_Simplex1to4___destroy___0": btBU_Simplex1to4___destroy___0, 
  "btContactSolverInfo_get_m_splitImpulse_0": btContactSolverInfo_get_m_splitImpulse_0, 
  "btContactSolverInfo_set_m_splitImpulse_1": btContactSolverInfo_set_m_splitImpulse_1, 
  "btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0": btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0, 
  "btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1": btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1, 
  "btContactSolverInfo_get_m_numIterations_0": btContactSolverInfo_get_m_numIterations_0, 
  "btContactSolverInfo_set_m_numIterations_1": btContactSolverInfo_set_m_numIterations_1, 
  "btContactSolverInfo___destroy___0": btContactSolverInfo___destroy___0, 
  "btStaticPlaneShape_btStaticPlaneShape_2": btStaticPlaneShape_btStaticPlaneShape_2, 
  "btStaticPlaneShape_getPlaneNormal_0": btStaticPlaneShape_getPlaneNormal_0, 
  "btStaticPlaneShape_setPlaneConstant_1": btStaticPlaneShape_setPlaneConstant_1, 
  "btStaticPlaneShape_setLocalScaling_1": btStaticPlaneShape_setLocalScaling_1, 
  "btStaticPlaneShape_getLocalScaling_0": btStaticPlaneShape_getLocalScaling_0, 
  "btStaticPlaneShape_calculateLocalInertia_2": btStaticPlaneShape_calculateLocalInertia_2, 
  "btStaticPlaneShape_isCompound_0": btStaticPlaneShape_isCompound_0, 
  "btStaticPlaneShape_getUserIndex_0": btStaticPlaneShape_getUserIndex_0, 
  "btStaticPlaneShape_setUserIndex_1": btStaticPlaneShape_setUserIndex_1, 
  "btStaticPlaneShape_getUserIndex2_0": btStaticPlaneShape_getUserIndex2_0, 
  "btStaticPlaneShape_setUserIndex2_1": btStaticPlaneShape_setUserIndex2_1, 
  "btStaticPlaneShape_getAabb_3": btStaticPlaneShape_getAabb_3, 
  "btStaticPlaneShape_getLocalBoundingSphere_0": btStaticPlaneShape_getLocalBoundingSphere_0, 
  "btStaticPlaneShape___destroy___0": btStaticPlaneShape___destroy___0, 
  "btActionInterface_updateAction_2": btActionInterface_updateAction_2, 
  "btActionInterface___destroy___0": btActionInterface___destroy___0, 
  "btOverlappingPairCache_setInternalGhostPairCallback_1": btOverlappingPairCache_setInternalGhostPairCallback_1, 
  "btOverlappingPairCache_setOverlapFilterCallback_1": btOverlappingPairCache_setOverlapFilterCallback_1, 
  "btOverlappingPairCache_getNumOverlappingPairs_0": btOverlappingPairCache_getNumOverlappingPairs_0, 
  "btOverlappingPairCache___destroy___0": btOverlappingPairCache___destroy___0, 
  "btVector3_btVector3_0": btVector3_btVector3_0, 
  "btVector3_btVector3_3": btVector3_btVector3_3, 
  "btVector3_x_0": btVector3_x_0, 
  "btVector3_y_0": btVector3_y_0, 
  "btVector3_z_0": btVector3_z_0, 
  "btVector3_setX_1": btVector3_setX_1, 
  "btVector3_setY_1": btVector3_setY_1, 
  "btVector3_setZ_1": btVector3_setZ_1, 
  "btVector3_setValue_3": btVector3_setValue_3, 
  "btVector3___destroy___0": btVector3___destroy___0, 
  "btSphereShape_btSphereShape_1": btSphereShape_btSphereShape_1, 
  "btSphereShape_setMargin_1": btSphereShape_setMargin_1, 
  "btSphereShape_getMargin_0": btSphereShape_getMargin_0, 
  "btSphereShape_setUnscaledRadius_1": btSphereShape_setUnscaledRadius_1, 
  "btSphereShape_setLocalScaling_1": btSphereShape_setLocalScaling_1, 
  "btSphereShape_getLocalScaling_0": btSphereShape_getLocalScaling_0, 
  "btSphereShape_calculateLocalInertia_2": btSphereShape_calculateLocalInertia_2, 
  "btSphereShape_isCompound_0": btSphereShape_isCompound_0, 
  "btSphereShape_getUserIndex_0": btSphereShape_getUserIndex_0, 
  "btSphereShape_setUserIndex_1": btSphereShape_setUserIndex_1, 
  "btSphereShape_getUserIndex2_0": btSphereShape_getUserIndex2_0, 
  "btSphereShape_setUserIndex2_1": btSphereShape_setUserIndex2_1, 
  "btSphereShape_getAabb_3": btSphereShape_getAabb_3, 
  "btSphereShape_getLocalBoundingSphere_0": btSphereShape_getLocalBoundingSphere_0, 
  "btSphereShape_getImplicitShapeDimensions_0": btSphereShape_getImplicitShapeDimensions_0, 
  "btSphereShape___destroy___0": btSphereShape___destroy___0, 
  "btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0": btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0, 
  "btDefaultCollisionConstructionInfo___destroy___0": btDefaultCollisionConstructionInfo___destroy___0, 
  "btEmptyShape_btEmptyShape_0": btEmptyShape_btEmptyShape_0, 
  "btEmptyShape_setLocalScaling_1": btEmptyShape_setLocalScaling_1, 
  "btEmptyShape_getLocalScaling_0": btEmptyShape_getLocalScaling_0, 
  "btEmptyShape_calculateLocalInertia_2": btEmptyShape_calculateLocalInertia_2, 
  "btEmptyShape_isCompound_0": btEmptyShape_isCompound_0, 
  "btEmptyShape_getUserIndex_0": btEmptyShape_getUserIndex_0, 
  "btEmptyShape_setUserIndex_1": btEmptyShape_setUserIndex_1, 
  "btEmptyShape_getUserIndex2_0": btEmptyShape_getUserIndex2_0, 
  "btEmptyShape_setUserIndex2_1": btEmptyShape_setUserIndex2_1, 
  "btEmptyShape_getAabb_3": btEmptyShape_getAabb_3, 
  "btEmptyShape_getLocalBoundingSphere_0": btEmptyShape_getLocalBoundingSphere_0, 
  "btEmptyShape___destroy___0": btEmptyShape___destroy___0, 
  "btConstraintSetting_btConstraintSetting_0": btConstraintSetting_btConstraintSetting_0, 
  "btConstraintSetting_get_m_tau_0": btConstraintSetting_get_m_tau_0, 
  "btConstraintSetting_set_m_tau_1": btConstraintSetting_set_m_tau_1, 
  "btConstraintSetting_get_m_damping_0": btConstraintSetting_get_m_damping_0, 
  "btConstraintSetting_set_m_damping_1": btConstraintSetting_set_m_damping_1, 
  "btConstraintSetting_get_m_impulseClamp_0": btConstraintSetting_get_m_impulseClamp_0, 
  "btConstraintSetting_set_m_impulseClamp_1": btConstraintSetting_set_m_impulseClamp_1, 
  "btConstraintSetting___destroy___0": btConstraintSetting___destroy___0, 
  "LocalShapeInfo_get_m_shapePart_0": LocalShapeInfo_get_m_shapePart_0, 
  "LocalShapeInfo_set_m_shapePart_1": LocalShapeInfo_set_m_shapePart_1, 
  "LocalShapeInfo_get_m_triangleIndex_0": LocalShapeInfo_get_m_triangleIndex_0, 
  "LocalShapeInfo_set_m_triangleIndex_1": LocalShapeInfo_set_m_triangleIndex_1, 
  "LocalShapeInfo___destroy___0": LocalShapeInfo___destroy___0, 
  "btVector3Array_size_0": btVector3Array_size_0, 
  "btVector3Array_at_1": btVector3Array_at_1, 
  "btVector3Array_clear_0": btVector3Array_clear_0, 
  "btVector3Array___destroy___0": btVector3Array___destroy___0, 
  "btConstraintSolver___destroy___0": btConstraintSolver___destroy___0, 
  "btFixedConstraint_btFixedConstraint_4": btFixedConstraint_btFixedConstraint_4, 
  "btFixedConstraint_enableFeedback_1": btFixedConstraint_enableFeedback_1, 
  "btFixedConstraint_getBreakingImpulseThreshold_0": btFixedConstraint_getBreakingImpulseThreshold_0, 
  "btFixedConstraint_setBreakingImpulseThreshold_1": btFixedConstraint_setBreakingImpulseThreshold_1, 
  "btFixedConstraint_getParam_2": btFixedConstraint_getParam_2, 
  "btFixedConstraint_setParam_3": btFixedConstraint_setParam_3, 
  "btFixedConstraint___destroy___0": btFixedConstraint___destroy___0, 
  "btCollisionDispatcher_btCollisionDispatcher_1": btCollisionDispatcher_btCollisionDispatcher_1, 
  "btCollisionDispatcher_setDispatcherFlags_1": btCollisionDispatcher_setDispatcherFlags_1, 
  "btCollisionDispatcher_getNumManifolds_0": btCollisionDispatcher_getNumManifolds_0, 
  "btCollisionDispatcher_getManifoldByIndexInternal_1": btCollisionDispatcher_getManifoldByIndexInternal_1, 
  "btCollisionDispatcher___destroy___0": btCollisionDispatcher___destroy___0, 
  "btRigidBody_btRigidBody_1": btRigidBody_btRigidBody_1, 
  "btRigidBody_getCenterOfMassTransform_0": btRigidBody_getCenterOfMassTransform_0, 
  "btRigidBody_setCenterOfMassTransform_1": btRigidBody_setCenterOfMassTransform_1, 
  "btRigidBody_setSleepingThresholds_2": btRigidBody_setSleepingThresholds_2, 
  "btRigidBody_getLinearSleepingThreshold_0": btRigidBody_getLinearSleepingThreshold_0, 
  "btRigidBody_setDamping_2": btRigidBody_setDamping_2, 
  "btRigidBody_setMassProps_2": btRigidBody_setMassProps_2, 
  "btRigidBody_getLinearFactor_0": btRigidBody_getLinearFactor_0, 
  "btRigidBody_setLinearFactor_1": btRigidBody_setLinearFactor_1, 
  "btRigidBody_applyTorque_1": btRigidBody_applyTorque_1, 
  "btRigidBody_applyForce_2": btRigidBody_applyForce_2, 
  "btRigidBody_applyCentralForce_1": btRigidBody_applyCentralForce_1, 
  "btRigidBody_applyTorqueImpulse_1": btRigidBody_applyTorqueImpulse_1, 
  "btRigidBody_applyImpulse_2": btRigidBody_applyImpulse_2, 
  "btRigidBody_updateInertiaTensor_0": btRigidBody_updateInertiaTensor_0, 
  "btRigidBody_getLinearVelocity_0": btRigidBody_getLinearVelocity_0, 
  "btRigidBody_getAngularVelocity_0": btRigidBody_getAngularVelocity_0, 
  "btRigidBody_setLinearVelocity_1": btRigidBody_setLinearVelocity_1, 
  "btRigidBody_setAngularVelocity_1": btRigidBody_setAngularVelocity_1, 
  "btRigidBody_getMotionState_0": btRigidBody_getMotionState_0, 
  "btRigidBody_getAngularFactor_0": btRigidBody_getAngularFactor_0, 
  "btRigidBody_setAngularFactor_1": btRigidBody_setAngularFactor_1, 
  "btRigidBody_getAabb_2": btRigidBody_getAabb_2, 
  "btRigidBody_setGravity_1": btRigidBody_setGravity_1, 
  "btRigidBody_getFlags_0": btRigidBody_getFlags_0, 
  "btRigidBody_setFlags_1": btRigidBody_setFlags_1, 
  "btRigidBody_wantsSleeping_0": btRigidBody_wantsSleeping_0, 
  "btRigidBody_clearForces_0": btRigidBody_clearForces_0, 
  "btRigidBody_getTotalForce_0": btRigidBody_getTotalForce_0, 
  "btRigidBody_getTotalTorque_0": btRigidBody_getTotalTorque_0, 
  "btRigidBody_clearState_0": btRigidBody_clearState_0, 
  "btRigidBody_getCollisionShape_0": btRigidBody_getCollisionShape_0, 
  "btRigidBody_getActivationState_0": btRigidBody_getActivationState_0, 
  "btRigidBody_setActivationState_1": btRigidBody_setActivationState_1, 
  "btRigidBody_forceActivationState_1": btRigidBody_forceActivationState_1, 
  "btRigidBody_activate_0": btRigidBody_activate_0, 
  "btRigidBody_activate_1": btRigidBody_activate_1, 
  "btRigidBody_isActive_0": btRigidBody_isActive_0, 
  "btRigidBody_isKinematicObject_0": btRigidBody_isKinematicObject_0, 
  "btRigidBody_isStaticObject_0": btRigidBody_isStaticObject_0, 
  "btRigidBody_isStaticOrKinematicObject_0": btRigidBody_isStaticOrKinematicObject_0, 
  "btRigidBody_setRestitution_1": btRigidBody_setRestitution_1, 
  "btRigidBody_setFriction_1": btRigidBody_setFriction_1, 
  "btRigidBody_setRollingFriction_1": btRigidBody_setRollingFriction_1, 
  "btRigidBody_setSpinningFriction_1": btRigidBody_setSpinningFriction_1, 
  "btRigidBody_getWorldTransform_0": btRigidBody_getWorldTransform_0, 
  "btRigidBody_getCollisionFlags_0": btRigidBody_getCollisionFlags_0, 
  "btRigidBody_setCollisionFlags_1": btRigidBody_setCollisionFlags_1, 
  "btRigidBody_setWorldTransform_1": btRigidBody_setWorldTransform_1, 
  "btRigidBody_setCollisionShape_1": btRigidBody_setCollisionShape_1, 
  "btRigidBody_setCcdMotionThreshold_1": btRigidBody_setCcdMotionThreshold_1, 
  "btRigidBody_setCcdSweptSphereRadius_1": btRigidBody_setCcdSweptSphereRadius_1, 
  "btRigidBody_getUserIndex_0": btRigidBody_getUserIndex_0, 
  "btRigidBody_setUserIndex_1": btRigidBody_setUserIndex_1, 
  "btRigidBody_setUserIndex2_1": btRigidBody_setUserIndex2_1, 
  "btRigidBody_setIgnoreCollisionCheck_2": btRigidBody_setIgnoreCollisionCheck_2, 
  "btRigidBody___destroy___0": btRigidBody___destroy___0, 
  "btIndexedMeshArray_size_0": btIndexedMeshArray_size_0, 
  "btIndexedMeshArray_at_1": btIndexedMeshArray_at_1, 
  "btIndexedMeshArray___destroy___0": btIndexedMeshArray___destroy___0, 
  "ccDiscreteDynamicsWorld_ccDiscreteDynamicsWorld_4": ccDiscreteDynamicsWorld_ccDiscreteDynamicsWorld_4, 
  "ccDiscreteDynamicsWorld_setAllowSleep_1": ccDiscreteDynamicsWorld_setAllowSleep_1, 
  "ccDiscreteDynamicsWorld_setDeactivationTime_1": ccDiscreteDynamicsWorld_setDeactivationTime_1, 
  "ccDiscreteDynamicsWorld_setNarrowPhaseMethod_1": ccDiscreteDynamicsWorld_setNarrowPhaseMethod_1, 
  "ccDiscreteDynamicsWorld_setAllowCcdPenetration_1": ccDiscreteDynamicsWorld_setAllowCcdPenetration_1, 
  "ccDiscreteDynamicsWorld_getCcdTriggerRecorder_0": ccDiscreteDynamicsWorld_getCcdTriggerRecorder_0, 
  "ccDiscreteDynamicsWorld_rayTest_3": ccDiscreteDynamicsWorld_rayTest_3, 
  "ccDiscreteDynamicsWorld_rayTestSingle_6": ccDiscreteDynamicsWorld_rayTestSingle_6, 
  "ccDiscreteDynamicsWorld_getPairCache_0": ccDiscreteDynamicsWorld_getPairCache_0, 
  "ccDiscreteDynamicsWorld_addCollisionObject_1": ccDiscreteDynamicsWorld_addCollisionObject_1, 
  "ccDiscreteDynamicsWorld_addCollisionObject_2": ccDiscreteDynamicsWorld_addCollisionObject_2, 
  "ccDiscreteDynamicsWorld_addCollisionObject_3": ccDiscreteDynamicsWorld_addCollisionObject_3, 
  "ccDiscreteDynamicsWorld_removeCollisionObject_1": ccDiscreteDynamicsWorld_removeCollisionObject_1, 
  "ccDiscreteDynamicsWorld_setContactBreakingThreshold_1": ccDiscreteDynamicsWorld_setContactBreakingThreshold_1, 
  "ccDiscreteDynamicsWorld_setGravity_1": ccDiscreteDynamicsWorld_setGravity_1, 
  "ccDiscreteDynamicsWorld_getGravity_0": ccDiscreteDynamicsWorld_getGravity_0, 
  "ccDiscreteDynamicsWorld_addRigidBody_1": ccDiscreteDynamicsWorld_addRigidBody_1, 
  "ccDiscreteDynamicsWorld_addRigidBody_3": ccDiscreteDynamicsWorld_addRigidBody_3, 
  "ccDiscreteDynamicsWorld_removeRigidBody_1": ccDiscreteDynamicsWorld_removeRigidBody_1, 
  "ccDiscreteDynamicsWorld_addConstraint_1": ccDiscreteDynamicsWorld_addConstraint_1, 
  "ccDiscreteDynamicsWorld_addConstraint_2": ccDiscreteDynamicsWorld_addConstraint_2, 
  "ccDiscreteDynamicsWorld_removeConstraint_1": ccDiscreteDynamicsWorld_removeConstraint_1, 
  "ccDiscreteDynamicsWorld_stepSimulation_1": ccDiscreteDynamicsWorld_stepSimulation_1, 
  "ccDiscreteDynamicsWorld_stepSimulation_2": ccDiscreteDynamicsWorld_stepSimulation_2, 
  "ccDiscreteDynamicsWorld_stepSimulation_3": ccDiscreteDynamicsWorld_stepSimulation_3, 
  "ccDiscreteDynamicsWorld_addAction_1": ccDiscreteDynamicsWorld_addAction_1, 
  "ccDiscreteDynamicsWorld_removeAction_1": ccDiscreteDynamicsWorld_removeAction_1, 
  "ccDiscreteDynamicsWorld_getSolverInfo_0": ccDiscreteDynamicsWorld_getSolverInfo_0, 
  "ccDiscreteDynamicsWorld_getFixedBody_0": ccDiscreteDynamicsWorld_getFixedBody_0, 
  "ccDiscreteDynamicsWorld___destroy___0": ccDiscreteDynamicsWorld___destroy___0, 
  "btTransform_btTransform_0": btTransform_btTransform_0, 
  "btTransform_btTransform_2": btTransform_btTransform_2, 
  "btTransform_setIdentity_0": btTransform_setIdentity_0, 
  "btTransform_setOrigin_1": btTransform_setOrigin_1, 
  "btTransform_setRotation_1": btTransform_setRotation_1, 
  "btTransform_getOrigin_0": btTransform_getOrigin_0, 
  "btTransform_getRotation_0": btTransform_getRotation_0, 
  "btTransform_getBasis_0": btTransform_getBasis_0, 
  "btTransform_inverse_0": btTransform_inverse_0, 
  "btTransform_op_mul_1": btTransform_op_mul_1, 
  "btTransform___destroy___0": btTransform___destroy___0, 
  "btCylinderShape_btCylinderShape_1": btCylinderShape_btCylinderShape_1, 
  "btCylinderShape_setMargin_1": btCylinderShape_setMargin_1, 
  "btCylinderShape_getMargin_0": btCylinderShape_getMargin_0, 
  "btCylinderShape_updateProp_3": btCylinderShape_updateProp_3, 
  "btCylinderShape_setLocalScaling_1": btCylinderShape_setLocalScaling_1, 
  "btCylinderShape_getLocalScaling_0": btCylinderShape_getLocalScaling_0, 
  "btCylinderShape_calculateLocalInertia_2": btCylinderShape_calculateLocalInertia_2, 
  "btCylinderShape_isCompound_0": btCylinderShape_isCompound_0, 
  "btCylinderShape_getUserIndex_0": btCylinderShape_getUserIndex_0, 
  "btCylinderShape_setUserIndex_1": btCylinderShape_setUserIndex_1, 
  "btCylinderShape_getUserIndex2_0": btCylinderShape_getUserIndex2_0, 
  "btCylinderShape_setUserIndex2_1": btCylinderShape_setUserIndex2_1, 
  "btCylinderShape_getAabb_3": btCylinderShape_getAabb_3, 
  "btCylinderShape_getLocalBoundingSphere_0": btCylinderShape_getLocalBoundingSphere_0, 
  "btCylinderShape_getImplicitShapeDimensions_0": btCylinderShape_getImplicitShapeDimensions_0, 
  "btCylinderShape___destroy___0": btCylinderShape___destroy___0, 
  "btConstraintParamsBT_CONSTRAINT_ERP": btConstraintParamsBT_CONSTRAINT_ERP, 
  "btConstraintParamsBT_CONSTRAINT_STOP_ERP": btConstraintParamsBT_CONSTRAINT_STOP_ERP, 
  "btConstraintParamsBT_CONSTRAINT_CFM": btConstraintParamsBT_CONSTRAINT_CFM, 
  "btConstraintParamsBT_CONSTRAINT_STOP_CFM": btConstraintParamsBT_CONSTRAINT_STOP_CFM, 
  "PHY_ScalarTypePHY_FLOAT": PHY_ScalarTypePHY_FLOAT, 
  "PHY_ScalarTypePHY_DOUBLE": PHY_ScalarTypePHY_DOUBLE, 
  "PHY_ScalarTypePHY_INTEGER": PHY_ScalarTypePHY_INTEGER, 
  "PHY_ScalarTypePHY_SHORT": PHY_ScalarTypePHY_SHORT, 
  "PHY_ScalarTypePHY_FIXEDPOINT88": PHY_ScalarTypePHY_FIXEDPOINT88, 
  "PHY_ScalarTypePHY_UCHAR": PHY_ScalarTypePHY_UCHAR, 
  "malloc": dlmalloc, 
  "free": dlfree, 
  "__errno_location": __errno_location, 
  "setThrew": setThrew, 
  "_ZSt18uncaught_exceptionv": std__uncaught_exception_28_29, 
  "__set_stack_limit": __set_stack_limit, 
  "stackSave": stackSave, 
  "stackAlloc": stackAlloc, 
  "stackRestore": stackRestore, 
  "__growWasmMemory": __growWasmMemory, 
  "dynCall_vi": dynCall_vi, 
  "dynCall_iiiiii": dynCall_iiiiii, 
  "dynCall_ii": dynCall_ii, 
  "dynCall_vii": dynCall_vii, 
  "dynCall_viiii": dynCall_viiii, 
  "dynCall_iifif": dynCall_iifif, 
  "dynCall_viii": dynCall_viii, 
  "dynCall_iii": dynCall_iii, 
  "dynCall_vif": dynCall_vif, 
  "dynCall_fiii": dynCall_fiii, 
  "dynCall_v": dynCall_v, 
  "dynCall_iiii": dynCall_iiii, 
  "dynCall_viiiiii": dynCall_viiiiii, 
  "dynCall_viiiif": dynCall_viiiif, 
  "dynCall_viiif": dynCall_viiif, 
  "dynCall_viifi": dynCall_viifi, 
  "dynCall_fiiiiiiiiii": dynCall_fiiiiiiiiii, 
  "dynCall_viiiiiiiii": dynCall_viiiiiiiii, 
  "dynCall_fiiii": dynCall_fiiii, 
  "dynCall_fiiiiiiiii": dynCall_fiiiiiiiii, 
  "dynCall_iiiiiiiiiii": dynCall_iiiiiiiiiii, 
  "dynCall_viiiii": dynCall_viiiii, 
  "dynCall_fiiiii": dynCall_fiiiii, 
  "dynCall_iiiii": dynCall_iiiii, 
  "dynCall_iiiiiii": dynCall_iiiiiii, 
  "dynCall_fi": dynCall_fi, 
  "dynCall_fif": dynCall_fif, 
  "dynCall_vifi": dynCall_vifi, 
  "dynCall_viiiiiii": dynCall_viiiiiii, 
  "dynCall_iiif": dynCall_iiif, 
  "dynCall_fiifii": dynCall_fiifii, 
  "dynCall_viif": dynCall_viif, 
  "dynCall_fiiifii": dynCall_fiiifii, 
  "dynCall_viiiiiiiiii": dynCall_viiiiiiiiii, 
  "dynCall_iiiiiiiii": dynCall_iiiiiiiii
};
}

for (var base64ReverseLookup = new Uint8Array(123/*'z'+1*/), i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2);
    if (b64[bLength-2] == '=') --end;
    if (b64[bLength-1] == '=') --end;
    for (; i < bLength; i += 4, j += 3) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j+1 < end) uint8Array[j+1] = b1 << 4 | b2 >> 2;
      if (j+2 < end) uint8Array[j+2] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
var bufferView = new Uint8Array(wasmMemory.buffer);
base64DecodeToExistingUint8Array(bufferView, 1028, "");
base64DecodeToExistingUint8Array(bufferView, 14214, "gD8AAIC/");
base64DecodeToExistingUint8Array(bufferView, 14246, "gD8AAIC/AAAAAAAAAAABAAAAAgAAAAAAAAABAAAAAgAAAAMAAAAEAAAABAAAAAUAAAAGAAAAAQAAAAIAAAADAAAAAwAAAAQAAAAFAAAABgAAAAcAAAAFAAAABgAAAAcAAAAHAAAAAAAAAEg4AAAzAgAANAIAADUCAAA2AgAANwIAADgCAAA5AgAAOgIAADE0YnRPcHRpbWl6ZWRCdmgAAAAA5EwAADQ4AAA4QAAAAAAAAMw4AADnAQAAOwIAADwCAABaTjE0YnRPcHRpbWl6ZWRCdmg1YnVpbGRFUDIzYnRTdHJpZGluZ01lc2hJbnRlcmZhY2ViUks5YnRWZWN0b3IzUzRfRTI5UXVhbnRpemVkTm9kZVRyaWFuZ2xlQ2FsbGJhY2sA5EwAAGg4AACoNAAAAAAAAEg5AADnAQAAPQIAAD4CAABaTjE0YnRPcHRpbWl6ZWRCdmg1YnVpbGRFUDIzYnRTdHJpZGluZ01lc2hJbnRlcmZhY2ViUks5YnRWZWN0b3IzUzRfRTIwTm9kZVRyaWFuZ2xlQ2FsbGJhY2sAAORMAADsOAAAqDQAAAAAAADAOQAAPwIAAEACAABBAgAABAEAAAUBAAAGAQAAQgIAAEMCAABEAgAARQIAAAsBAADQAQAA0QEAAOQBAADlAQAAEAEAAEYCAABHAgAAMjVidEhlaWdodGZpZWxkVGVycmFpblNoYXBlAORMAACkOQAAsDYAAEhFSUdIVEZJRUxEAAAAAABUOgAAsgEAAEgCAABJAgAABAEAAAUBAAAGAQAASgIAAAgBAABLAgAATAIAAE0CAABOAgAADQEAAE8CAABQAgAAEAEAAFECAABSAgAAEwEAAFMCAAAVAQAAmwEAAJwBAABUAgAAMTVidEN5bGluZGVyU2hhcGUAAADkTAAAQDoAAFg0AABDeWxpbmRlclkAYnRDeWxpbmRlclNoYXBlRGF0YQBidEludEluZGV4RGF0YQBidFNob3J0SW50SW5kZXhUcmlwbGV0RGF0YQBidENoYXJJbmRleFRyaXBsZXREYXRhAGJ0VmVjdG9yM0Zsb2F0RGF0YQBidFZlY3RvcjNEb3VibGVEYXRhAGJ0TWVzaFBhcnREYXRhAGJ0U3RyaWRpbmdNZXNoSW50ZXJmYWNlRGF0YQAyM2J0U3RyaWRpbmdNZXNoSW50ZXJmYWNlAAC8TAAAETsAAAAAAACYOwAAVQIAAFYCAABXAgAAWAIAAFkCAABaAgAAWwIAAFwCAABdAgAAXgIAAF8CAABgAgAAYQIAAGICAABjAgAAMjZidFRyaWFuZ2xlSW5kZXhWZXJ0ZXhBcnJheQAAAADkTAAAeDsAACw7AAAAAAAA/DsAAGQCAABlAgAAVwIAAFgCAABZAgAAWgIAAFsCAABcAgAAZgIAAGcCAABfAgAAYAIAAGECAABiAgAAYwIAADE0YnRUcmlhbmdsZU1lc2gAAAAA5EwAAOg7AACYOwAAAAAAAPg8AABoAgAAaQIAAGoCAABrAgAAbAIAAG0CAABuAgAAbwIAAHACAABxAgAAcgIAAHMCAAB0AgAAdQIAAHYCAAB3AgAAeAIAAGJ0SGFzaGVkT3ZlcmxhcHBpbmdQYWlyQ2FjaGU6OnByb2Nlc3NBbGxPdmVybGFwcGluZ1BhaXJzADI4YnRIYXNoZWRPdmVybGFwcGluZ1BhaXJDYWNoZQAyMmJ0T3ZlcmxhcHBpbmdQYWlyQ2FjaGUAMjVidE92ZXJsYXBwaW5nUGFpckNhbGxiYWNrAAAAALxMAADFPAAA5EwAAKw8AADkPAAA5EwAAI08AADsPAAAAAAAAIg9AAC0AAAAeQIAAHoCAABaTjI4YnRIYXNoZWRPdmVybGFwcGluZ1BhaXJDYWNoZTE5Y2xlYW5Qcm94eUZyb21QYWlyc0VQMTdidEJyb2FkcGhhc2VQcm94eVAxMmJ0RGlzcGF0Y2hlckUxN0NsZWFuUGFpckNhbGxiYWNrAAAA5EwAABg9AACQEAAAAAAAACw+AAC0AAAAewIAAHwCAABaTjI4YnRIYXNoZWRPdmVybGFwcGluZ1BhaXJDYWNoZTM3cmVtb3ZlT3ZlcmxhcHBpbmdQYWlyc0NvbnRhaW5pbmdQcm94eUVQMTdidEJyb2FkcGhhc2VQcm94eVAxMmJ0RGlzcGF0Y2hlckUxOFJlbW92ZVBhaXJDYWxsYmFjawAAAADkTAAAqD0AAJAQAAAAAAAArD4AAH0CAAB+AgAAfwIAAIACAACBAgAAggIAAIMCAACEAgAAhQIAAIYCAACHAgAAiAIAAIkCAACKAgAAMTZidERidnRCcm9hZHBoYXNlADIxYnRCcm9hZHBoYXNlSW50ZXJmYWNlAAC8TAAAiz4AAORMAAB4PgAApD4AAAAAAAD0PgAASAEAAIsCAACMAgAAjQIAAEwBAABNAQAATgEAADE4YnREYnZ0VHJlZUNvbGxpZGVyAAAAAORMAADcPgAAgCAAAAAAAAA8PwAASAEAAI4CAABKAQAAjwIAAEwBAABNAQAATgEAADE5QnJvYWRwaGFzZVJheVRlc3RlcgAAAORMAAAkPwAAgCAAAAAAAACEPwAASAEAAJACAABKAQAAkQIAAEwBAABNAQAATgEAADIwQnJvYWRwaGFzZUFhYmJUZXN0ZXIAAORMAABsPwAAgCAAADEyYnREaXNwYXRjaGVyAAC8TAAAkD8AAAAAAAA4QAAAkgIAAJMCAAA1AgAANgIAADcCAAA4AgAAOQIAAGJ0T3B0aW1pemVkQnZoTm9kZURhdGEAYnRRdWFudGl6ZWRCdmhOb2RlRGF0YQBidEJ2aFN1YnRyZWVJbmZvRGF0YQBidFF1YW50aXplZEJ2aEZsb2F0RGF0YQAxNGJ0UXVhbnRpemVkQnZoALxMAAAnQAAAAAAAADwTAADGAAAAlAIAADgAAAA4AAAAOAAAAFJvb3Q=");
base64DecodeToExistingUint8Array(bufferView, 16496, "AwAAAAQAAAAEAAAABgAAAIP5ogBETm4A/CkVANFXJwDdNPUAYtvAADyZlQBBkEMAY1H+ALveqwC3YcUAOm4kANJNQgBJBuAACeouAByS0QDrHf4AKbEcAOg+pwD1NYIARLsuAJzphAC0JnAAQX5fANaROQBTgzkAnPQ5AItfhAAo+b0A+B87AN7/lwAPmAUAES/vAApaiwBtH20Az342AAnLJwBGT7cAnmY/AC3qXwC6J3UA5evHAD178QD3OQcAklKKAPtr6gAfsV8ACF2NADADVgB7/EYA8KtrACC8zwA29JoA46kdAF5hkQAIG+YAhZllAKAUXwCNQGgAgNj/ACdzTQAGBjEAylYVAMmocwB74mAAa4zAABnERwDNZ8MACejcAFmDKgCLdsQAphyWAESv3QAZV9EApT4FAAUH/wAzfj8AwjLoAJhP3gC7fTIAJj3DAB5r7wCf+F4ANR86AH/yygDxhx0AfJAhAGokfADVbvoAMC13ABU7QwC1FMYAwxmdAK3EwgAsTUEADABdAIZ9RgDjcS0Am8aaADNiAAC00nwAtKeXADdV1QDXPvYAoxAYAE12/ABknSoAcNerAGN8+AB6sFcAFxXnAMBJVgA71tkAp4Q4ACQjywDWincAWlQjAAAfuQDxChsAGc7fAJ8x/wBmHmoAmVdhAKz7RwB+f9gAImW3ADLoiQDmv2AA78TNAGw2CQBdP9QAFt7XAFg73gDem5IA0iIoACiG6ADiWE0AxsoyAAjjFgDgfcsAF8BQAPMdpwAY4FsALhM0AIMSYgCDSAEA9Y5bAK2wfwAe6fIASEpDABBn0wCq3dgArl9CAGphzgAKKKQA05m0AAam8gBcd38Ao8KDAGE8iACKc3gAr4xaAG/XvQAtpmMA9L/LAI2B7wAmwWcAVcpFAMrZNgAoqNIAwmGNABLJdwAEJhQAEkabAMRZxADIxUQATbKRAAAX8wDUQ60AKUnlAP3VEAAAvvwAHpTMAHDO7gATPvUA7PGAALPnwwDH+CgAkwWUAMFxPgAuCbMAC0XzAIgSnACrIHsALrWfAEeSwgB7Mi8ADFVtAHKnkABr5x8AMcuWAHkWSgBBeeIA9N+JAOiUlwDi5oQAmTGXAIjtawBfXzYAu/0OAEiatABnpGwAcXJCAI1dMgCfFbgAvOUJAI0xJQD3dDkAMAUcAA0MAQBLCGgALO5YAEeqkAB05wIAvdYkAPd9pgBuSHIAnxbvAI6UpgC0kfYA0VNRAM8K8gAgmDMA9Ut+ALJjaADdPl8AQF0DAIWJfwBVUikAN2TAAG3YEAAySDIAW0x1AE5x1ABFVG4ACwnBACr1aQAUZtUAJwedAF0EUAC0O9sA6nbFAIf5FwBJa30AHSe6AJZpKQDGzKwArRRUAJDiagCI2YkALHJQAASkvgB3B5QA8zBwAAD8JwDqcagAZsJJAGTgPQCX3YMAoz+XAEOU/QANhowAMUHeAJI5nQDdcIwAF7fnAAjfOwAVNysAXICgAFqAkwAQEZIAD+jYAGyArwDb/0sAOJAPAFkYdgBipRUAYcu7AMeJuQAQQL0A0vIEAEl1JwDrtvYA2yK7AAoUqgCJJi8AZIN2AAk7MwAOlBoAUTqqAB2jwgCv7a4AXCYSAG3CTQAtepwAwFaXAAM/gwAJ8PYAK0CMAG0xmQA5tAcADCAVANjDWwD1ksQAxq1LAE7KpQCnN80A5qk2AKuSlADdQmgAGWPeAHaM7wBoi1IA/Ns3AK6hqwDfFTEAAK6hAAz72gBkTWYA7QW3ACllMABXVr8AR/86AGr5uQB1vvMAKJPfAKuAMABmjPYABMsVAPoiBgDZ5B0APbOkAFcbjwA2zQkATkLpABO+pAAzI7UA8KoaAE9lqADSwaUACz8PAFt4zQAj+XYAe4sEAIkXcgDGplMAb27iAO/rAACbSlgAxNq3AKpmugB2z88A0QIdALHxLQCMmcEAw613AIZI2gD3XaAAxoD0AKzwLwDd7JoAP1y8ANDebQCQxx8AKtu2AKMlOgAAr5oArVOTALZXBAApLbQAS4B+ANoHpwB2qg4Ae1mhABYSKgDcty0A+uX9AInb/gCJvv0A5HZsAAap/AA+gHAAhW4VAP2H/wAoPgcAYWczACoYhgBNveoAs+evAI9tbgCVZzkAMb9bAITXSAAw3xYAxy1DACVhNQDJcM4AMMu4AL9s/QCkAKIABWzkAFrdoAAhb0cAYhLSALlchABwYUkAa1bgAJlSAQBQVTcAHtW3ADPxxAATbl8AXTDkAIUuqQAdssMAoTI2AAi3pADqsdQAFvchAI9p5AAn/3cADAOAAI1ALQBPzaAAIKWZALOi0wAvXQoAtPlCABHaywB9vtAAm9vBAKsXvQDKooEACGpcAC5VFwAnAFUAfxTwAOEHhgAUC2QAlkGNAIe+3gDa/SoAayW2AHuJNAAF8/4Aub+eAGhqTwBKKqgAT8RaAC34vADXWpgA9MeVAA1NjQAgOqYApFdfABQ/sQCAOJUAzCABAHHdhgDJ3rYAv2D1AE1lEQABB2sAjLCsALLA0ABRVUgAHvsOAJVywwCjBjsAwEA1AAbcewDgRcwATin6ANbKyADo80EAfGTeAJtk2ADZvjEApJfDAHdY1ABp48UA8NoTALo6PABGGEYAVXVfANK99QBuksYArC5dAA5E7QAcPkIAYcSHACn96QDn1vMAInzKAG+RNQAI4MUA/9eNAG5q4gCw/cYAkwjBAHxddABrrbIAzW6dAD5yewDGEWoA98+pAClz3wC1yboAtwBRAOKyDQB0uiQA5X1gAHTYigANFSwAgRgMAH5mlAABKRYAn3p2AP39vgBWRe8A2X42AOzZEwCLurkAxJf8ADGoJwDxbsMAlMU2ANioVgC0qLUAz8wOABKJLQBvVzQALFaJAJnO4wDWILkAa16qAD4qnAARX8wA/QtKAOH0+wCOO20A4oYsAOnUhAD8tKkA7+7RAC41yQAvOWEAOCFEABvZyACB/AoA+0pqAC8c2ABTtIQATpmMAFQizAAqVdwAwMbWAAsZlgAacLgAaZVkACZaYAA/Uu4AfxEPAPS1EQD8y/UANLwtADS87gDoXcwA3V5gAGeOmwCSM+8AyRe4AGFYmwDhV7wAUYPGANg+EADdcUgALRzdAK8YoQAhLEYAWfPXANl6mACeVMAAT4b6AFYG/ADlea4AiSI2ADitIgBnk9wAVeiqAIImOADK55sAUQ2kAJkzsQCp1w4AaQVIAGWy8AB/iKcAiEyXAPnRNgAhkrMAe4JKAJjPIQBAn9wA3EdVAOF0OgBn60IA/p3fAF7UXwB7Z6QAuqx6AFX2ogAriCMAQbpVAFluCAAhKoYAOUeDAInj5gDlntQASftAAP9W6QAcD8oAxVmKAJT6KwDTwcUAD8XPANtargBHxYYAhUNiACGGOwAseZQAEGGHACpMewCALBoAQ78SAIgmkAB4PIkAqMTkAOXbewDEOsIAJvTqAPdnigANkr8AZaMrAD2TsQC9fAsApFHcACfdYwBp4d0AmpQZAKgplQBozigACe20AESfIABOmMoAcIJjAH58IwAPuTIAp/WOABRW5wAh8QgAtZ0qAG9+TQClGVEAtfmrAILf1gCW3WEAFjYCAMQ6nwCDoqEAcu1tADmNegCCuKkAazJcAEYnWwAANO0A0gB3APz0VQABWU0A4HGA");
base64DecodeToExistingUint8Array(bufferView, 19283, "QPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNThj7T7aD0k/Xph7P9oPyT9pN6wxaCEiM7QPFDNoIaIz2w9JP9sPSb/kyxZA5MsWwAAAAAAAAACA2w9JQNsPScAAAIA/AADAPwAAAADcz9E1AAAAAADAFT9fX2N4YV9ndWFyZF9hY3F1aXJlIGRldGVjdGVkIHJlY3Vyc2l2ZSBpbml0aWFsaXphdGlvbgBQdXJlIHZpcnR1YWwgZnVuY3Rpb24gY2FsbGVkIQBTdDl0eXBlX2luZm8AAAAAvEwAADxMAABOMTBfX2N4eGFiaXYxMTZfX3NoaW1fdHlwZV9pbmZvRQAAAADkTAAAVEwAAExMAABOMTBfX2N4eGFiaXYxMTdfX2NsYXNzX3R5cGVfaW5mb0UAAADkTAAAhEwAAHhMAAAAAAAAqEwAAJ0CAACeAgAAnwIAAKACAAChAgAAogIAAKMCAACkAgAAAAAAACxNAACdAgAApQIAAJ8CAACgAgAAoQIAAKYCAACnAgAAqAIAAE4xMF9fY3h4YWJpdjEyMF9fc2lfY2xhc3NfdHlwZV9pbmZvRQAAAADkTAAABE0AAKhMAAAAAAAAiE0AAJ0CAACpAgAAnwIAAKACAAChAgAAqgIAAKsCAACsAgAATjEwX19jeHhhYml2MTIxX192bWlfY2xhc3NfdHlwZV9pbmZvRQAAAORMAABgTQAAqEw=");
base64DecodeToExistingUint8Array(bufferView, 19863, "QArXozwBAAAAbxKDOgEAAACXAgAAmAIAAJkCAACaAgAAmwIAAJwC");
return asmFunc({
    'Int8Array': Int8Array,
    'Int16Array': Int16Array,
    'Int32Array': Int32Array,
    'Uint8Array': Uint8Array,
    'Uint16Array': Uint16Array,
    'Uint32Array': Uint32Array,
    'Float32Array': Float32Array,
    'Float64Array': Float64Array,
    'NaN': NaN,
    'Infinity': Infinity,
    'Math': Math
  },
  asmLibraryArg,
  wasmMemory.buffer
)

}// EMSCRIPTEN_END_ASM




)(asmLibraryArg, wasmMemory, wasmTable);
    return {
      'exports': exports
    };
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        ok({
          'instance': new WebAssembly.Instance(new WebAssembly.Module(binary))
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];



if (typeof WebAssembly !== 'object') {
  abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');
}


/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}






// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.
var wasmTable = new WebAssembly.Table({
  'initial': 685,
  'maximum': 685 + 20,
  'element': 'anyfunc'
});


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}


/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}



/**
 * @license
 * Copyright 2020 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0 || i == maxBytesToRead / 2) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}



// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 1024,
    STACK_BASE = 5268608,
    STACKTOP = STACK_BASE,
    STACK_MAX = 25728,
    DYNAMIC_BASE = 5268608,
    DYNAMICTOP_PTR = 25568;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 67108864;if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) Object.defineProperty(Module, 'INITIAL_MEMORY', { configurable: true, get: function() { abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_INITIAL_MEMORY') } });

assert(INITIAL_INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */




// In standalone mode, the wasm creates the memory, and the user can't provide it.
// In non-standalone/normal mode, we create the memory here.

/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
      ,
      'maximum': INITIAL_INITIAL_MEMORY / WASM_PAGE_SIZE
    });
  }


if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_INITIAL_MEMORY % WASM_PAGE_SIZE === 0);
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;




/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  // The stack grows downwards
  HEAPU32[(STACK_MAX >> 2)+1] = 0x2135467;
  HEAPU32[(STACK_MAX >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)+1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}




/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback(Module); // Pass the module as the first argument.
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

/** @param {number|boolean=} ignore */
function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
/** @param {number|boolean=} ignore */
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw new WebAssembly.RuntimeError(what);
}


var memoryInitializer = null;


/**
 * @license
 * Copyright 2015 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */




// show errors on likely calls to FS when it was not included
var FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



/**
 * @license
 * Copyright 2017 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

function hasPrefix(str, prefix) {
  return String.prototype.startsWith ?
      str.startsWith(prefix) :
      str.indexOf(prefix) === 0;
}

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return hasPrefix(filename, dataURIPrefix);
}

var fileURIPrefix = "file://";

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return hasPrefix(filename, fileURIPrefix);
}



var wasmBinaryFile = '';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (wasmBinary) {
      return new Uint8Array(wasmBinary);
    }

    var binary = tryParseAsDataURI(wasmBinaryFile);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, and have the Fetch api, use that;
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function'
      ) {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return new Promise(function(resolve, reject) {
    resolve(getBinary());
  });
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');


  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}


// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};
function array_bounds_check_error(idx,size){ throw 'Array index ' + idx + ' out of bounds: [0,' + size + ')'; }



// STATICTOP = STATIC_BASE + 24704;
/* global initializers */  __ATINIT__.push({ func: function() { ___wasm_call_ctors() } });




/* no memory initializer */
// {{PRE_LIBRARY}}


  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  
  function _atexit(func, arg) {
      warnOnce('atexit() called, but EXIT_RUNTIME is not set, so atexits() will not be called. set EXIT_RUNTIME to 1 (see the FAQ)');
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit(a0,a1
  ) {
  return _atexit(a0,a1);
  }

  function ___handle_stack_overflow() {
      abort('stack overflow')
    }

  function _abort() {
      abort();
    }

  function _emscripten_get_sbrk_ptr() {
      return 25568;
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  
  function _emscripten_get_heap_size() {
      return HEAPU8.length;
    }
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s INITIAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }
var ASSERTIONS = true;

/**
 * @license
 * Copyright 2017 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


var asmGlobalArg = {};
var asmLibraryArg = { "__cxa_atexit": ___cxa_atexit, "__handle_stack_overflow": ___handle_stack_overflow, "abort": _abort, "array_bounds_check_error": array_bounds_check_error, "emscripten_get_sbrk_ptr": _emscripten_get_sbrk_ptr, "emscripten_memcpy_big": _emscripten_memcpy_big, "emscripten_resize_heap": _emscripten_resize_heap, "getTempRet0": getTempRet0, "gettimeofday": _gettimeofday, "memory": wasmMemory, "setTempRet0": setTempRet0, "table": wasmTable };
var asm = createWasm();
Module["asm"] = asm;
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__wasm_call_ctors"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionShape_setLocalScaling_1 = Module["_btCollisionShape_setLocalScaling_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionShape_setLocalScaling_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionShape_getLocalScaling_0 = Module["_btCollisionShape_getLocalScaling_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionShape_getLocalScaling_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionShape_calculateLocalInertia_2 = Module["_btCollisionShape_calculateLocalInertia_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionShape_calculateLocalInertia_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionShape_setMargin_1 = Module["_btCollisionShape_setMargin_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionShape_setMargin_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionShape_getMargin_0 = Module["_btCollisionShape_getMargin_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionShape_getMargin_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionShape_isCompound_0 = Module["_btCollisionShape_isCompound_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionShape_isCompound_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionShape_getUserIndex_0 = Module["_btCollisionShape_getUserIndex_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionShape_getUserIndex_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionShape_setUserIndex_1 = Module["_btCollisionShape_setUserIndex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionShape_setUserIndex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionShape_getUserIndex2_0 = Module["_btCollisionShape_getUserIndex2_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionShape_getUserIndex2_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionShape_setUserIndex2_1 = Module["_btCollisionShape_setUserIndex2_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionShape_setUserIndex2_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionShape_getAabb_3 = Module["_btCollisionShape_getAabb_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionShape_getAabb_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionShape_getLocalBoundingSphere_0 = Module["_btCollisionShape_getLocalBoundingSphere_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionShape_getLocalBoundingSphere_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionShape___destroy___0 = Module["_btCollisionShape___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionShape___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionWorld_rayTest_3 = Module["_btCollisionWorld_rayTest_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionWorld_rayTest_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionWorld_rayTestSingle_6 = Module["_btCollisionWorld_rayTestSingle_6"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionWorld_rayTestSingle_6"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionWorld_getPairCache_0 = Module["_btCollisionWorld_getPairCache_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionWorld_getPairCache_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionWorld_addCollisionObject_1 = Module["_btCollisionWorld_addCollisionObject_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionWorld_addCollisionObject_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionWorld_addCollisionObject_2 = Module["_btCollisionWorld_addCollisionObject_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionWorld_addCollisionObject_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionWorld_addCollisionObject_3 = Module["_btCollisionWorld_addCollisionObject_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionWorld_addCollisionObject_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionWorld_removeCollisionObject_1 = Module["_btCollisionWorld_removeCollisionObject_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionWorld_removeCollisionObject_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionWorld_setContactBreakingThreshold_1 = Module["_btCollisionWorld_setContactBreakingThreshold_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionWorld_setContactBreakingThreshold_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionWorld___destroy___0 = Module["_btCollisionWorld___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionWorld___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexShape_setLocalScaling_1 = Module["_btConvexShape_setLocalScaling_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexShape_setLocalScaling_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexShape_getLocalScaling_0 = Module["_btConvexShape_getLocalScaling_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexShape_getLocalScaling_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexShape_calculateLocalInertia_2 = Module["_btConvexShape_calculateLocalInertia_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexShape_calculateLocalInertia_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexShape_setMargin_1 = Module["_btConvexShape_setMargin_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexShape_setMargin_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexShape_getMargin_0 = Module["_btConvexShape_getMargin_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexShape_getMargin_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexShape_isCompound_0 = Module["_btConvexShape_isCompound_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexShape_isCompound_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexShape_getUserIndex_0 = Module["_btConvexShape_getUserIndex_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexShape_getUserIndex_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexShape_setUserIndex_1 = Module["_btConvexShape_setUserIndex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexShape_setUserIndex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexShape_getUserIndex2_0 = Module["_btConvexShape_getUserIndex2_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexShape_getUserIndex2_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexShape_setUserIndex2_1 = Module["_btConvexShape_setUserIndex2_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexShape_setUserIndex2_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexShape_getAabb_3 = Module["_btConvexShape_getAabb_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexShape_getAabb_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexShape_getLocalBoundingSphere_0 = Module["_btConvexShape_getLocalBoundingSphere_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexShape_getLocalBoundingSphere_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexShape___destroy___0 = Module["_btConvexShape___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexShape___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDynamicsWorld_addAction_1 = Module["_btDynamicsWorld_addAction_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDynamicsWorld_addAction_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDynamicsWorld_removeAction_1 = Module["_btDynamicsWorld_removeAction_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDynamicsWorld_removeAction_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDynamicsWorld_getSolverInfo_0 = Module["_btDynamicsWorld_getSolverInfo_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDynamicsWorld_getSolverInfo_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDynamicsWorld_getFixedBody_0 = Module["_btDynamicsWorld_getFixedBody_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDynamicsWorld_getFixedBody_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDynamicsWorld_rayTest_3 = Module["_btDynamicsWorld_rayTest_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDynamicsWorld_rayTest_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDynamicsWorld_rayTestSingle_6 = Module["_btDynamicsWorld_rayTestSingle_6"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDynamicsWorld_rayTestSingle_6"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDynamicsWorld_getPairCache_0 = Module["_btDynamicsWorld_getPairCache_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDynamicsWorld_getPairCache_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDynamicsWorld_addCollisionObject_1 = Module["_btDynamicsWorld_addCollisionObject_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDynamicsWorld_addCollisionObject_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDynamicsWorld_addCollisionObject_2 = Module["_btDynamicsWorld_addCollisionObject_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDynamicsWorld_addCollisionObject_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDynamicsWorld_addCollisionObject_3 = Module["_btDynamicsWorld_addCollisionObject_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDynamicsWorld_addCollisionObject_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDynamicsWorld_removeCollisionObject_1 = Module["_btDynamicsWorld_removeCollisionObject_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDynamicsWorld_removeCollisionObject_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDynamicsWorld_setContactBreakingThreshold_1 = Module["_btDynamicsWorld_setContactBreakingThreshold_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDynamicsWorld_setContactBreakingThreshold_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDynamicsWorld___destroy___0 = Module["_btDynamicsWorld___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDynamicsWorld___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _RayResultCallback_hasHit_0 = Module["_RayResultCallback_hasHit_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["RayResultCallback_hasHit_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _RayResultCallback_get_m_collisionFilterGroup_0 = Module["_RayResultCallback_get_m_collisionFilterGroup_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["RayResultCallback_get_m_collisionFilterGroup_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _RayResultCallback_set_m_collisionFilterGroup_1 = Module["_RayResultCallback_set_m_collisionFilterGroup_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["RayResultCallback_set_m_collisionFilterGroup_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _RayResultCallback_get_m_collisionFilterMask_0 = Module["_RayResultCallback_get_m_collisionFilterMask_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["RayResultCallback_get_m_collisionFilterMask_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _RayResultCallback_set_m_collisionFilterMask_1 = Module["_RayResultCallback_set_m_collisionFilterMask_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["RayResultCallback_set_m_collisionFilterMask_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _RayResultCallback_get_m_closestHitFraction_0 = Module["_RayResultCallback_get_m_closestHitFraction_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["RayResultCallback_get_m_closestHitFraction_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _RayResultCallback_set_m_closestHitFraction_1 = Module["_RayResultCallback_set_m_closestHitFraction_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["RayResultCallback_set_m_closestHitFraction_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _RayResultCallback_get_m_collisionObject_0 = Module["_RayResultCallback_get_m_collisionObject_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["RayResultCallback_get_m_collisionObject_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _RayResultCallback_set_m_collisionObject_1 = Module["_RayResultCallback_set_m_collisionObject_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["RayResultCallback_set_m_collisionObject_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _RayResultCallback___destroy___0 = Module["_RayResultCallback___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["RayResultCallback___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConcaveShape_setLocalScaling_1 = Module["_btConcaveShape_setLocalScaling_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConcaveShape_setLocalScaling_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConcaveShape_getLocalScaling_0 = Module["_btConcaveShape_getLocalScaling_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConcaveShape_getLocalScaling_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConcaveShape_calculateLocalInertia_2 = Module["_btConcaveShape_calculateLocalInertia_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConcaveShape_calculateLocalInertia_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConcaveShape_isCompound_0 = Module["_btConcaveShape_isCompound_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConcaveShape_isCompound_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConcaveShape_getUserIndex_0 = Module["_btConcaveShape_getUserIndex_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConcaveShape_getUserIndex_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConcaveShape_setUserIndex_1 = Module["_btConcaveShape_setUserIndex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConcaveShape_setUserIndex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConcaveShape_getUserIndex2_0 = Module["_btConcaveShape_getUserIndex2_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConcaveShape_getUserIndex2_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConcaveShape_setUserIndex2_1 = Module["_btConcaveShape_setUserIndex2_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConcaveShape_setUserIndex2_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConcaveShape_getAabb_3 = Module["_btConcaveShape_getAabb_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConcaveShape_getAabb_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConcaveShape_getLocalBoundingSphere_0 = Module["_btConcaveShape_getLocalBoundingSphere_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConcaveShape_getLocalBoundingSphere_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConcaveShape___destroy___0 = Module["_btConcaveShape___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConcaveShape___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btStridingMeshInterface_setScaling_1 = Module["_btStridingMeshInterface_setScaling_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btStridingMeshInterface_setScaling_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btStridingMeshInterface___destroy___0 = Module["_btStridingMeshInterface___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btStridingMeshInterface___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBroadphaseInterface_getOverlappingPairCache_0 = Module["_btBroadphaseInterface_getOverlappingPairCache_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBroadphaseInterface_getOverlappingPairCache_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBroadphaseInterface___destroy___0 = Module["_btBroadphaseInterface___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBroadphaseInterface___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_btCollisionObject_0 = Module["_btCollisionObject_btCollisionObject_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_btCollisionObject_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_getCollisionShape_0 = Module["_btCollisionObject_getCollisionShape_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_getCollisionShape_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_getActivationState_0 = Module["_btCollisionObject_getActivationState_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_getActivationState_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_setActivationState_1 = Module["_btCollisionObject_setActivationState_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_setActivationState_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_forceActivationState_1 = Module["_btCollisionObject_forceActivationState_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_forceActivationState_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_activate_0 = Module["_btCollisionObject_activate_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_activate_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_activate_1 = Module["_btCollisionObject_activate_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_activate_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_isActive_0 = Module["_btCollisionObject_isActive_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_isActive_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_isKinematicObject_0 = Module["_btCollisionObject_isKinematicObject_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_isKinematicObject_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_isStaticObject_0 = Module["_btCollisionObject_isStaticObject_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_isStaticObject_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_isStaticOrKinematicObject_0 = Module["_btCollisionObject_isStaticOrKinematicObject_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_isStaticOrKinematicObject_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_setRestitution_1 = Module["_btCollisionObject_setRestitution_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_setRestitution_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_setFriction_1 = Module["_btCollisionObject_setFriction_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_setFriction_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_setRollingFriction_1 = Module["_btCollisionObject_setRollingFriction_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_setRollingFriction_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_setSpinningFriction_1 = Module["_btCollisionObject_setSpinningFriction_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_setSpinningFriction_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_getWorldTransform_0 = Module["_btCollisionObject_getWorldTransform_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_getWorldTransform_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_getCollisionFlags_0 = Module["_btCollisionObject_getCollisionFlags_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_getCollisionFlags_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_setCollisionFlags_1 = Module["_btCollisionObject_setCollisionFlags_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_setCollisionFlags_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_setWorldTransform_1 = Module["_btCollisionObject_setWorldTransform_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_setWorldTransform_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_setCollisionShape_1 = Module["_btCollisionObject_setCollisionShape_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_setCollisionShape_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_setCcdMotionThreshold_1 = Module["_btCollisionObject_setCcdMotionThreshold_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_setCcdMotionThreshold_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_setCcdSweptSphereRadius_1 = Module["_btCollisionObject_setCcdSweptSphereRadius_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_setCcdSweptSphereRadius_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_getUserIndex_0 = Module["_btCollisionObject_getUserIndex_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_getUserIndex_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_setUserIndex_1 = Module["_btCollisionObject_setUserIndex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_setUserIndex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_setUserIndex2_1 = Module["_btCollisionObject_setUserIndex2_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_setUserIndex2_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject_setIgnoreCollisionCheck_2 = Module["_btCollisionObject_setIgnoreCollisionCheck_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject_setIgnoreCollisionCheck_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionObject___destroy___0 = Module["_btCollisionObject___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionObject___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4 = Module["_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_setGravity_1 = Module["_btDiscreteDynamicsWorld_setGravity_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_setGravity_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_getGravity_0 = Module["_btDiscreteDynamicsWorld_getGravity_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_getGravity_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_addRigidBody_1 = Module["_btDiscreteDynamicsWorld_addRigidBody_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_addRigidBody_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_addRigidBody_3 = Module["_btDiscreteDynamicsWorld_addRigidBody_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_addRigidBody_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_removeRigidBody_1 = Module["_btDiscreteDynamicsWorld_removeRigidBody_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_removeRigidBody_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_addConstraint_1 = Module["_btDiscreteDynamicsWorld_addConstraint_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_addConstraint_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_addConstraint_2 = Module["_btDiscreteDynamicsWorld_addConstraint_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_addConstraint_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_removeConstraint_1 = Module["_btDiscreteDynamicsWorld_removeConstraint_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_removeConstraint_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_stepSimulation_1 = Module["_btDiscreteDynamicsWorld_stepSimulation_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_stepSimulation_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_stepSimulation_2 = Module["_btDiscreteDynamicsWorld_stepSimulation_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_stepSimulation_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_stepSimulation_3 = Module["_btDiscreteDynamicsWorld_stepSimulation_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_stepSimulation_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_rayTest_3 = Module["_btDiscreteDynamicsWorld_rayTest_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_rayTest_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_rayTestSingle_6 = Module["_btDiscreteDynamicsWorld_rayTestSingle_6"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_rayTestSingle_6"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_getPairCache_0 = Module["_btDiscreteDynamicsWorld_getPairCache_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_getPairCache_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_addCollisionObject_1 = Module["_btDiscreteDynamicsWorld_addCollisionObject_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_addCollisionObject_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_addCollisionObject_2 = Module["_btDiscreteDynamicsWorld_addCollisionObject_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_addCollisionObject_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_addCollisionObject_3 = Module["_btDiscreteDynamicsWorld_addCollisionObject_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_addCollisionObject_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_removeCollisionObject_1 = Module["_btDiscreteDynamicsWorld_removeCollisionObject_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_removeCollisionObject_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_setContactBreakingThreshold_1 = Module["_btDiscreteDynamicsWorld_setContactBreakingThreshold_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_setContactBreakingThreshold_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_addAction_1 = Module["_btDiscreteDynamicsWorld_addAction_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_addAction_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_removeAction_1 = Module["_btDiscreteDynamicsWorld_removeAction_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_removeAction_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_getSolverInfo_0 = Module["_btDiscreteDynamicsWorld_getSolverInfo_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_getSolverInfo_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld_getFixedBody_0 = Module["_btDiscreteDynamicsWorld_getFixedBody_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld_getFixedBody_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDiscreteDynamicsWorld___destroy___0 = Module["_btDiscreteDynamicsWorld___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDiscreteDynamicsWorld___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btMotionState_getWorldTransform_1 = Module["_btMotionState_getWorldTransform_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btMotionState_getWorldTransform_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btMotionState_setWorldTransform_1 = Module["_btMotionState_setWorldTransform_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btMotionState_setWorldTransform_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btMotionState___destroy___0 = Module["_btMotionState___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btMotionState___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexInternalShape_getImplicitShapeDimensions_0 = Module["_btConvexInternalShape_getImplicitShapeDimensions_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexInternalShape_getImplicitShapeDimensions_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexInternalShape_setLocalScaling_1 = Module["_btConvexInternalShape_setLocalScaling_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexInternalShape_setLocalScaling_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexInternalShape_getLocalScaling_0 = Module["_btConvexInternalShape_getLocalScaling_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexInternalShape_getLocalScaling_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexInternalShape_calculateLocalInertia_2 = Module["_btConvexInternalShape_calculateLocalInertia_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexInternalShape_calculateLocalInertia_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexInternalShape_setMargin_1 = Module["_btConvexInternalShape_setMargin_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexInternalShape_setMargin_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexInternalShape_getMargin_0 = Module["_btConvexInternalShape_getMargin_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexInternalShape_getMargin_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexInternalShape_isCompound_0 = Module["_btConvexInternalShape_isCompound_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexInternalShape_isCompound_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexInternalShape_getUserIndex_0 = Module["_btConvexInternalShape_getUserIndex_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexInternalShape_getUserIndex_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexInternalShape_setUserIndex_1 = Module["_btConvexInternalShape_setUserIndex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexInternalShape_setUserIndex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexInternalShape_getUserIndex2_0 = Module["_btConvexInternalShape_getUserIndex2_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexInternalShape_getUserIndex2_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexInternalShape_setUserIndex2_1 = Module["_btConvexInternalShape_setUserIndex2_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexInternalShape_setUserIndex2_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexInternalShape_getAabb_3 = Module["_btConvexInternalShape_getAabb_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexInternalShape_getAabb_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexInternalShape_getLocalBoundingSphere_0 = Module["_btConvexInternalShape_getLocalBoundingSphere_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexInternalShape_getLocalBoundingSphere_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexInternalShape___destroy___0 = Module["_btConvexInternalShape___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexInternalShape___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback_AllHitsRayResultCallback_2 = Module["_AllHitsRayResultCallback_AllHitsRayResultCallback_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback_AllHitsRayResultCallback_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback_hasHit_0 = Module["_AllHitsRayResultCallback_hasHit_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback_hasHit_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback_get_m_collisionObjects_0 = Module["_AllHitsRayResultCallback_get_m_collisionObjects_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback_get_m_collisionObjects_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback_set_m_collisionObjects_1 = Module["_AllHitsRayResultCallback_set_m_collisionObjects_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback_set_m_collisionObjects_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback_get_m_rayFromWorld_0 = Module["_AllHitsRayResultCallback_get_m_rayFromWorld_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback_get_m_rayFromWorld_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback_set_m_rayFromWorld_1 = Module["_AllHitsRayResultCallback_set_m_rayFromWorld_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback_set_m_rayFromWorld_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback_get_m_rayToWorld_0 = Module["_AllHitsRayResultCallback_get_m_rayToWorld_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback_get_m_rayToWorld_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback_set_m_rayToWorld_1 = Module["_AllHitsRayResultCallback_set_m_rayToWorld_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback_set_m_rayToWorld_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback_get_m_hitNormalWorld_0 = Module["_AllHitsRayResultCallback_get_m_hitNormalWorld_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback_get_m_hitNormalWorld_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback_set_m_hitNormalWorld_1 = Module["_AllHitsRayResultCallback_set_m_hitNormalWorld_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback_set_m_hitNormalWorld_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback_get_m_hitPointWorld_0 = Module["_AllHitsRayResultCallback_get_m_hitPointWorld_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback_get_m_hitPointWorld_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback_set_m_hitPointWorld_1 = Module["_AllHitsRayResultCallback_set_m_hitPointWorld_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback_set_m_hitPointWorld_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback_get_m_hitFractions_0 = Module["_AllHitsRayResultCallback_get_m_hitFractions_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback_get_m_hitFractions_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback_set_m_hitFractions_1 = Module["_AllHitsRayResultCallback_set_m_hitFractions_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback_set_m_hitFractions_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback_get_m_collisionFilterGroup_0 = Module["_AllHitsRayResultCallback_get_m_collisionFilterGroup_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback_get_m_collisionFilterGroup_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback_set_m_collisionFilterGroup_1 = Module["_AllHitsRayResultCallback_set_m_collisionFilterGroup_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback_set_m_collisionFilterGroup_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback_get_m_collisionFilterMask_0 = Module["_AllHitsRayResultCallback_get_m_collisionFilterMask_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback_get_m_collisionFilterMask_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback_set_m_collisionFilterMask_1 = Module["_AllHitsRayResultCallback_set_m_collisionFilterMask_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback_set_m_collisionFilterMask_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback_get_m_closestHitFraction_0 = Module["_AllHitsRayResultCallback_get_m_closestHitFraction_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback_get_m_closestHitFraction_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback_set_m_closestHitFraction_1 = Module["_AllHitsRayResultCallback_set_m_closestHitFraction_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback_set_m_closestHitFraction_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback_get_m_collisionObject_0 = Module["_AllHitsRayResultCallback_get_m_collisionObject_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback_get_m_collisionObject_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback_set_m_collisionObject_1 = Module["_AllHitsRayResultCallback_set_m_collisionObject_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback_set_m_collisionObject_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _AllHitsRayResultCallback___destroy___0 = Module["_AllHitsRayResultCallback___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["AllHitsRayResultCallback___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDispatcher_getNumManifolds_0 = Module["_btDispatcher_getNumManifolds_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDispatcher_getNumManifolds_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDispatcher_getManifoldByIndexInternal_1 = Module["_btDispatcher_getManifoldByIndexInternal_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDispatcher_getManifoldByIndexInternal_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDispatcher___destroy___0 = Module["_btDispatcher___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDispatcher___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ClosestRayResultCallback_ClosestRayResultCallback_2 = Module["_ClosestRayResultCallback_ClosestRayResultCallback_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ClosestRayResultCallback_ClosestRayResultCallback_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ClosestRayResultCallback_hasHit_0 = Module["_ClosestRayResultCallback_hasHit_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ClosestRayResultCallback_hasHit_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ClosestRayResultCallback_get_m_rayFromWorld_0 = Module["_ClosestRayResultCallback_get_m_rayFromWorld_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ClosestRayResultCallback_get_m_rayFromWorld_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ClosestRayResultCallback_set_m_rayFromWorld_1 = Module["_ClosestRayResultCallback_set_m_rayFromWorld_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ClosestRayResultCallback_set_m_rayFromWorld_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ClosestRayResultCallback_get_m_rayToWorld_0 = Module["_ClosestRayResultCallback_get_m_rayToWorld_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ClosestRayResultCallback_get_m_rayToWorld_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ClosestRayResultCallback_set_m_rayToWorld_1 = Module["_ClosestRayResultCallback_set_m_rayToWorld_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ClosestRayResultCallback_set_m_rayToWorld_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ClosestRayResultCallback_get_m_hitNormalWorld_0 = Module["_ClosestRayResultCallback_get_m_hitNormalWorld_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ClosestRayResultCallback_get_m_hitNormalWorld_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ClosestRayResultCallback_set_m_hitNormalWorld_1 = Module["_ClosestRayResultCallback_set_m_hitNormalWorld_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ClosestRayResultCallback_set_m_hitNormalWorld_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ClosestRayResultCallback_get_m_hitPointWorld_0 = Module["_ClosestRayResultCallback_get_m_hitPointWorld_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ClosestRayResultCallback_get_m_hitPointWorld_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ClosestRayResultCallback_set_m_hitPointWorld_1 = Module["_ClosestRayResultCallback_set_m_hitPointWorld_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ClosestRayResultCallback_set_m_hitPointWorld_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ClosestRayResultCallback_get_m_collisionFilterGroup_0 = Module["_ClosestRayResultCallback_get_m_collisionFilterGroup_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ClosestRayResultCallback_get_m_collisionFilterGroup_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ClosestRayResultCallback_set_m_collisionFilterGroup_1 = Module["_ClosestRayResultCallback_set_m_collisionFilterGroup_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ClosestRayResultCallback_set_m_collisionFilterGroup_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ClosestRayResultCallback_get_m_collisionFilterMask_0 = Module["_ClosestRayResultCallback_get_m_collisionFilterMask_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ClosestRayResultCallback_get_m_collisionFilterMask_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ClosestRayResultCallback_set_m_collisionFilterMask_1 = Module["_ClosestRayResultCallback_set_m_collisionFilterMask_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ClosestRayResultCallback_set_m_collisionFilterMask_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ClosestRayResultCallback_get_m_closestHitFraction_0 = Module["_ClosestRayResultCallback_get_m_closestHitFraction_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ClosestRayResultCallback_get_m_closestHitFraction_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ClosestRayResultCallback_set_m_closestHitFraction_1 = Module["_ClosestRayResultCallback_set_m_closestHitFraction_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ClosestRayResultCallback_set_m_closestHitFraction_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ClosestRayResultCallback_get_m_collisionObject_0 = Module["_ClosestRayResultCallback_get_m_collisionObject_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ClosestRayResultCallback_get_m_collisionObject_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ClosestRayResultCallback_set_m_collisionObject_1 = Module["_ClosestRayResultCallback_set_m_collisionObject_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ClosestRayResultCallback_set_m_collisionObject_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ClosestRayResultCallback___destroy___0 = Module["_ClosestRayResultCallback___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ClosestRayResultCallback___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTriangleMeshShape_setLocalScaling_1 = Module["_btTriangleMeshShape_setLocalScaling_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTriangleMeshShape_setLocalScaling_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTriangleMeshShape_getLocalScaling_0 = Module["_btTriangleMeshShape_getLocalScaling_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTriangleMeshShape_getLocalScaling_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTriangleMeshShape_calculateLocalInertia_2 = Module["_btTriangleMeshShape_calculateLocalInertia_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTriangleMeshShape_calculateLocalInertia_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTriangleMeshShape_isCompound_0 = Module["_btTriangleMeshShape_isCompound_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTriangleMeshShape_isCompound_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTriangleMeshShape_getUserIndex_0 = Module["_btTriangleMeshShape_getUserIndex_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTriangleMeshShape_getUserIndex_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTriangleMeshShape_setUserIndex_1 = Module["_btTriangleMeshShape_setUserIndex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTriangleMeshShape_setUserIndex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTriangleMeshShape_getUserIndex2_0 = Module["_btTriangleMeshShape_getUserIndex2_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTriangleMeshShape_getUserIndex2_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTriangleMeshShape_setUserIndex2_1 = Module["_btTriangleMeshShape_setUserIndex2_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTriangleMeshShape_setUserIndex2_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTriangleMeshShape_getAabb_3 = Module["_btTriangleMeshShape_getAabb_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTriangleMeshShape_getAabb_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTriangleMeshShape_getLocalBoundingSphere_0 = Module["_btTriangleMeshShape_getLocalBoundingSphere_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTriangleMeshShape_getLocalBoundingSphere_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTriangleMeshShape___destroy___0 = Module["_btTriangleMeshShape___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTriangleMeshShape___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btOverlapFilterCallback___destroy___0 = Module["_btOverlapFilterCallback___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btOverlapFilterCallback___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btQuadWord_x_0 = Module["_btQuadWord_x_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btQuadWord_x_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btQuadWord_y_0 = Module["_btQuadWord_y_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btQuadWord_y_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btQuadWord_z_0 = Module["_btQuadWord_z_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btQuadWord_z_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btQuadWord_w_0 = Module["_btQuadWord_w_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btQuadWord_w_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btQuadWord_setX_1 = Module["_btQuadWord_setX_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btQuadWord_setX_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btQuadWord_setY_1 = Module["_btQuadWord_setY_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btQuadWord_setY_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btQuadWord_setZ_1 = Module["_btQuadWord_setZ_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btQuadWord_setZ_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btQuadWord_setW_1 = Module["_btQuadWord_setW_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btQuadWord_setW_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btQuadWord___destroy___0 = Module["_btQuadWord___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btQuadWord___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTypedConstraint_enableFeedback_1 = Module["_btTypedConstraint_enableFeedback_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTypedConstraint_enableFeedback_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTypedConstraint_getBreakingImpulseThreshold_0 = Module["_btTypedConstraint_getBreakingImpulseThreshold_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTypedConstraint_getBreakingImpulseThreshold_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTypedConstraint_setBreakingImpulseThreshold_1 = Module["_btTypedConstraint_setBreakingImpulseThreshold_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTypedConstraint_setBreakingImpulseThreshold_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTypedConstraint_getParam_2 = Module["_btTypedConstraint_getParam_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTypedConstraint_getParam_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTypedConstraint_setParam_3 = Module["_btTypedConstraint_setParam_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTypedConstraint_setParam_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTypedConstraint___destroy___0 = Module["_btTypedConstraint___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTypedConstraint___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btMatrix3x3_getRotation_1 = Module["_btMatrix3x3_getRotation_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btMatrix3x3_getRotation_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btMatrix3x3___destroy___0 = Module["_btMatrix3x3___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btMatrix3x3___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btScalarArray_size_0 = Module["_btScalarArray_size_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btScalarArray_size_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btScalarArray_at_1 = Module["_btScalarArray_at_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btScalarArray_at_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btScalarArray_clear_0 = Module["_btScalarArray_clear_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btScalarArray_clear_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btScalarArray___destroy___0 = Module["_btScalarArray___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btScalarArray___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBvhTriangleMeshShape_btBvhTriangleMeshShape_2 = Module["_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBvhTriangleMeshShape_btBvhTriangleMeshShape_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBvhTriangleMeshShape_btBvhTriangleMeshShape_3 = Module["_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBvhTriangleMeshShape_btBvhTriangleMeshShape_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBvhTriangleMeshShape_setLocalScaling_1 = Module["_btBvhTriangleMeshShape_setLocalScaling_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBvhTriangleMeshShape_setLocalScaling_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBvhTriangleMeshShape_getLocalScaling_0 = Module["_btBvhTriangleMeshShape_getLocalScaling_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBvhTriangleMeshShape_getLocalScaling_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBvhTriangleMeshShape_calculateLocalInertia_2 = Module["_btBvhTriangleMeshShape_calculateLocalInertia_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBvhTriangleMeshShape_calculateLocalInertia_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBvhTriangleMeshShape_isCompound_0 = Module["_btBvhTriangleMeshShape_isCompound_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBvhTriangleMeshShape_isCompound_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBvhTriangleMeshShape_getUserIndex_0 = Module["_btBvhTriangleMeshShape_getUserIndex_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBvhTriangleMeshShape_getUserIndex_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBvhTriangleMeshShape_setUserIndex_1 = Module["_btBvhTriangleMeshShape_setUserIndex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBvhTriangleMeshShape_setUserIndex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBvhTriangleMeshShape_getUserIndex2_0 = Module["_btBvhTriangleMeshShape_getUserIndex2_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBvhTriangleMeshShape_getUserIndex2_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBvhTriangleMeshShape_setUserIndex2_1 = Module["_btBvhTriangleMeshShape_setUserIndex2_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBvhTriangleMeshShape_setUserIndex2_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBvhTriangleMeshShape_getAabb_3 = Module["_btBvhTriangleMeshShape_getAabb_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBvhTriangleMeshShape_getAabb_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBvhTriangleMeshShape_getLocalBoundingSphere_0 = Module["_btBvhTriangleMeshShape_getLocalBoundingSphere_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBvhTriangleMeshShape_getLocalBoundingSphere_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBvhTriangleMeshShape___destroy___0 = Module["_btBvhTriangleMeshShape___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBvhTriangleMeshShape___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDbvtBroadphase_btDbvtBroadphase_0 = Module["_btDbvtBroadphase_btDbvtBroadphase_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDbvtBroadphase_btDbvtBroadphase_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDbvtBroadphase_getOverlappingPairCache_0 = Module["_btDbvtBroadphase_getOverlappingPairCache_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDbvtBroadphase_getOverlappingPairCache_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDbvtBroadphase___destroy___0 = Module["_btDbvtBroadphase___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDbvtBroadphase___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btIntArray_size_0 = Module["_btIntArray_size_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btIntArray_size_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btIntArray_at_1 = Module["_btIntArray_at_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btIntArray_at_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btIntArray_clear_0 = Module["_btIntArray_clear_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btIntArray_clear_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btIntArray___destroy___0 = Module["_btIntArray___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btIntArray___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_ccAllHitsRayResultCallback_2 = Module["_ccAllHitsRayResultCallback_ccAllHitsRayResultCallback_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_ccAllHitsRayResultCallback_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_setQueryTrigger_1 = Module["_ccAllHitsRayResultCallback_setQueryTrigger_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_setQueryTrigger_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_hasHit_0 = Module["_ccAllHitsRayResultCallback_hasHit_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_hasHit_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_get_m_shapeParts_0 = Module["_ccAllHitsRayResultCallback_get_m_shapeParts_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_get_m_shapeParts_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_set_m_shapeParts_1 = Module["_ccAllHitsRayResultCallback_set_m_shapeParts_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_set_m_shapeParts_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_get_m_collisionObjects_0 = Module["_ccAllHitsRayResultCallback_get_m_collisionObjects_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_get_m_collisionObjects_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_set_m_collisionObjects_1 = Module["_ccAllHitsRayResultCallback_set_m_collisionObjects_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_set_m_collisionObjects_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_get_m_rayFromWorld_0 = Module["_ccAllHitsRayResultCallback_get_m_rayFromWorld_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_get_m_rayFromWorld_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_set_m_rayFromWorld_1 = Module["_ccAllHitsRayResultCallback_set_m_rayFromWorld_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_set_m_rayFromWorld_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_get_m_rayToWorld_0 = Module["_ccAllHitsRayResultCallback_get_m_rayToWorld_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_get_m_rayToWorld_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_set_m_rayToWorld_1 = Module["_ccAllHitsRayResultCallback_set_m_rayToWorld_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_set_m_rayToWorld_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_get_m_hitNormalWorld_0 = Module["_ccAllHitsRayResultCallback_get_m_hitNormalWorld_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_get_m_hitNormalWorld_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_set_m_hitNormalWorld_1 = Module["_ccAllHitsRayResultCallback_set_m_hitNormalWorld_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_set_m_hitNormalWorld_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_get_m_hitPointWorld_0 = Module["_ccAllHitsRayResultCallback_get_m_hitPointWorld_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_get_m_hitPointWorld_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_set_m_hitPointWorld_1 = Module["_ccAllHitsRayResultCallback_set_m_hitPointWorld_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_set_m_hitPointWorld_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_get_m_hitFractions_0 = Module["_ccAllHitsRayResultCallback_get_m_hitFractions_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_get_m_hitFractions_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_set_m_hitFractions_1 = Module["_ccAllHitsRayResultCallback_set_m_hitFractions_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_set_m_hitFractions_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_get_m_collisionFilterGroup_0 = Module["_ccAllHitsRayResultCallback_get_m_collisionFilterGroup_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_get_m_collisionFilterGroup_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_set_m_collisionFilterGroup_1 = Module["_ccAllHitsRayResultCallback_set_m_collisionFilterGroup_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_set_m_collisionFilterGroup_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_get_m_collisionFilterMask_0 = Module["_ccAllHitsRayResultCallback_get_m_collisionFilterMask_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_get_m_collisionFilterMask_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_set_m_collisionFilterMask_1 = Module["_ccAllHitsRayResultCallback_set_m_collisionFilterMask_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_set_m_collisionFilterMask_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_get_m_closestHitFraction_0 = Module["_ccAllHitsRayResultCallback_get_m_closestHitFraction_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_get_m_closestHitFraction_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_set_m_closestHitFraction_1 = Module["_ccAllHitsRayResultCallback_set_m_closestHitFraction_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_set_m_closestHitFraction_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_get_m_collisionObject_0 = Module["_ccAllHitsRayResultCallback_get_m_collisionObject_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_get_m_collisionObject_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback_set_m_collisionObject_1 = Module["_ccAllHitsRayResultCallback_set_m_collisionObject_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback_set_m_collisionObject_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccAllHitsRayResultCallback___destroy___0 = Module["_ccAllHitsRayResultCallback___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccAllHitsRayResultCallback___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConstCollisionObjectArray_size_0 = Module["_btConstCollisionObjectArray_size_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConstCollisionObjectArray_size_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConstCollisionObjectArray_at_1 = Module["_btConstCollisionObjectArray_at_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConstCollisionObjectArray_at_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConstCollisionObjectArray_clear_0 = Module["_btConstCollisionObjectArray_clear_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConstCollisionObjectArray_clear_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConstCollisionObjectArray___destroy___0 = Module["_btConstCollisionObjectArray___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConstCollisionObjectArray___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBroadphaseProxy_get_m_collisionFilterGroup_0 = Module["_btBroadphaseProxy_get_m_collisionFilterGroup_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBroadphaseProxy_get_m_collisionFilterGroup_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBroadphaseProxy_set_m_collisionFilterGroup_1 = Module["_btBroadphaseProxy_set_m_collisionFilterGroup_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBroadphaseProxy_set_m_collisionFilterGroup_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBroadphaseProxy_get_m_collisionFilterMask_0 = Module["_btBroadphaseProxy_get_m_collisionFilterMask_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBroadphaseProxy_get_m_collisionFilterMask_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBroadphaseProxy_set_m_collisionFilterMask_1 = Module["_btBroadphaseProxy_set_m_collisionFilterMask_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBroadphaseProxy_set_m_collisionFilterMask_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBroadphaseProxy___destroy___0 = Module["_btBroadphaseProxy___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBroadphaseProxy___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btIndexedMesh_get_m_numTriangles_0 = Module["_btIndexedMesh_get_m_numTriangles_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btIndexedMesh_get_m_numTriangles_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btIndexedMesh_set_m_numTriangles_1 = Module["_btIndexedMesh_set_m_numTriangles_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btIndexedMesh_set_m_numTriangles_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btIndexedMesh___destroy___0 = Module["_btIndexedMesh___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btIndexedMesh___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3 = Module["_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4 = Module["_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBodyConstructionInfo_get_m_linearDamping_0 = Module["_btRigidBodyConstructionInfo_get_m_linearDamping_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBodyConstructionInfo_get_m_linearDamping_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBodyConstructionInfo_set_m_linearDamping_1 = Module["_btRigidBodyConstructionInfo_set_m_linearDamping_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBodyConstructionInfo_set_m_linearDamping_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBodyConstructionInfo_get_m_angularDamping_0 = Module["_btRigidBodyConstructionInfo_get_m_angularDamping_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBodyConstructionInfo_get_m_angularDamping_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBodyConstructionInfo_set_m_angularDamping_1 = Module["_btRigidBodyConstructionInfo_set_m_angularDamping_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBodyConstructionInfo_set_m_angularDamping_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBodyConstructionInfo_get_m_friction_0 = Module["_btRigidBodyConstructionInfo_get_m_friction_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBodyConstructionInfo_get_m_friction_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBodyConstructionInfo_set_m_friction_1 = Module["_btRigidBodyConstructionInfo_set_m_friction_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBodyConstructionInfo_set_m_friction_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBodyConstructionInfo_get_m_rollingFriction_0 = Module["_btRigidBodyConstructionInfo_get_m_rollingFriction_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBodyConstructionInfo_get_m_rollingFriction_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBodyConstructionInfo_set_m_rollingFriction_1 = Module["_btRigidBodyConstructionInfo_set_m_rollingFriction_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBodyConstructionInfo_set_m_rollingFriction_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBodyConstructionInfo_get_m_restitution_0 = Module["_btRigidBodyConstructionInfo_get_m_restitution_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBodyConstructionInfo_get_m_restitution_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBodyConstructionInfo_set_m_restitution_1 = Module["_btRigidBodyConstructionInfo_set_m_restitution_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBodyConstructionInfo_set_m_restitution_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0 = Module["_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1 = Module["_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0 = Module["_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1 = Module["_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBodyConstructionInfo___destroy___0 = Module["_btRigidBodyConstructionInfo___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBodyConstructionInfo___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_getAppliedImpulse_0 = Module["_btManifoldPoint_getAppliedImpulse_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_getAppliedImpulse_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_getDistance_0 = Module["_btManifoldPoint_getDistance_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_getDistance_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_getShape0_0 = Module["_btManifoldPoint_getShape0_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_getShape0_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_getShape1_0 = Module["_btManifoldPoint_getShape1_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_getShape1_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_get_m_localPointA_0 = Module["_btManifoldPoint_get_m_localPointA_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_get_m_localPointA_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_set_m_localPointA_1 = Module["_btManifoldPoint_set_m_localPointA_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_set_m_localPointA_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_get_m_localPointB_0 = Module["_btManifoldPoint_get_m_localPointB_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_get_m_localPointB_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_set_m_localPointB_1 = Module["_btManifoldPoint_set_m_localPointB_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_set_m_localPointB_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_get_m_positionWorldOnA_0 = Module["_btManifoldPoint_get_m_positionWorldOnA_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_get_m_positionWorldOnA_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_set_m_positionWorldOnA_1 = Module["_btManifoldPoint_set_m_positionWorldOnA_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_set_m_positionWorldOnA_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_get_m_positionWorldOnB_0 = Module["_btManifoldPoint_get_m_positionWorldOnB_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_get_m_positionWorldOnB_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_set_m_positionWorldOnB_1 = Module["_btManifoldPoint_set_m_positionWorldOnB_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_set_m_positionWorldOnB_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_get_m_normalWorldOnB_0 = Module["_btManifoldPoint_get_m_normalWorldOnB_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_get_m_normalWorldOnB_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_set_m_normalWorldOnB_1 = Module["_btManifoldPoint_set_m_normalWorldOnB_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_set_m_normalWorldOnB_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_get_m_distance1_0 = Module["_btManifoldPoint_get_m_distance1_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_get_m_distance1_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_set_m_distance1_1 = Module["_btManifoldPoint_set_m_distance1_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_set_m_distance1_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_get_m_index0_0 = Module["_btManifoldPoint_get_m_index0_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_get_m_index0_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_set_m_index0_1 = Module["_btManifoldPoint_set_m_index0_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_set_m_index0_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_get_m_index1_0 = Module["_btManifoldPoint_get_m_index1_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_get_m_index1_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_set_m_index1_1 = Module["_btManifoldPoint_set_m_index1_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_set_m_index1_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_get_m_userPersistentData_0 = Module["_btManifoldPoint_get_m_userPersistentData_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_get_m_userPersistentData_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_set_m_userPersistentData_1 = Module["_btManifoldPoint_set_m_userPersistentData_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_set_m_userPersistentData_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_get_m_userPersistentData0_0 = Module["_btManifoldPoint_get_m_userPersistentData0_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_get_m_userPersistentData0_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_set_m_userPersistentData0_1 = Module["_btManifoldPoint_set_m_userPersistentData0_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_set_m_userPersistentData0_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_get_m_userPersistentData1_0 = Module["_btManifoldPoint_get_m_userPersistentData1_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_get_m_userPersistentData1_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint_set_m_userPersistentData1_1 = Module["_btManifoldPoint_set_m_userPersistentData1_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint_set_m_userPersistentData1_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btManifoldPoint___destroy___0 = Module["_btManifoldPoint___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btManifoldPoint___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0 = Module["_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btSequentialImpulseConstraintSolver___destroy___0 = Module["_btSequentialImpulseConstraintSolver___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btSequentialImpulseConstraintSolver___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btPoint2PointConstraint_btPoint2PointConstraint_2 = Module["_btPoint2PointConstraint_btPoint2PointConstraint_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btPoint2PointConstraint_btPoint2PointConstraint_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btPoint2PointConstraint_btPoint2PointConstraint_4 = Module["_btPoint2PointConstraint_btPoint2PointConstraint_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btPoint2PointConstraint_btPoint2PointConstraint_4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btPoint2PointConstraint_setPivotA_1 = Module["_btPoint2PointConstraint_setPivotA_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btPoint2PointConstraint_setPivotA_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btPoint2PointConstraint_setPivotB_1 = Module["_btPoint2PointConstraint_setPivotB_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btPoint2PointConstraint_setPivotB_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btPoint2PointConstraint_getPivotInA_0 = Module["_btPoint2PointConstraint_getPivotInA_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btPoint2PointConstraint_getPivotInA_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btPoint2PointConstraint_getPivotInB_0 = Module["_btPoint2PointConstraint_getPivotInB_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btPoint2PointConstraint_getPivotInB_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btPoint2PointConstraint_enableFeedback_1 = Module["_btPoint2PointConstraint_enableFeedback_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btPoint2PointConstraint_enableFeedback_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btPoint2PointConstraint_getBreakingImpulseThreshold_0 = Module["_btPoint2PointConstraint_getBreakingImpulseThreshold_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btPoint2PointConstraint_getBreakingImpulseThreshold_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btPoint2PointConstraint_setBreakingImpulseThreshold_1 = Module["_btPoint2PointConstraint_setBreakingImpulseThreshold_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btPoint2PointConstraint_setBreakingImpulseThreshold_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btPoint2PointConstraint_getParam_2 = Module["_btPoint2PointConstraint_getParam_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btPoint2PointConstraint_getParam_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btPoint2PointConstraint_setParam_3 = Module["_btPoint2PointConstraint_setParam_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btPoint2PointConstraint_setParam_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btPoint2PointConstraint_get_m_setting_0 = Module["_btPoint2PointConstraint_get_m_setting_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btPoint2PointConstraint_get_m_setting_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btPoint2PointConstraint_set_m_setting_1 = Module["_btPoint2PointConstraint_set_m_setting_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btPoint2PointConstraint_set_m_setting_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btPoint2PointConstraint___destroy___0 = Module["_btPoint2PointConstraint___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btPoint2PointConstraint___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccOverlapFilterCallback_ccOverlapFilterCallback_0 = Module["_ccOverlapFilterCallback_ccOverlapFilterCallback_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccOverlapFilterCallback_ccOverlapFilterCallback_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccOverlapFilterCallback___destroy___0 = Module["_ccOverlapFilterCallback___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccOverlapFilterCallback___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexTriangleMeshShape_btConvexTriangleMeshShape_1 = Module["_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexTriangleMeshShape_btConvexTriangleMeshShape_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexTriangleMeshShape_btConvexTriangleMeshShape_2 = Module["_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexTriangleMeshShape_btConvexTriangleMeshShape_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexTriangleMeshShape_setLocalScaling_1 = Module["_btConvexTriangleMeshShape_setLocalScaling_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexTriangleMeshShape_setLocalScaling_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexTriangleMeshShape_getLocalScaling_0 = Module["_btConvexTriangleMeshShape_getLocalScaling_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexTriangleMeshShape_getLocalScaling_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexTriangleMeshShape_calculateLocalInertia_2 = Module["_btConvexTriangleMeshShape_calculateLocalInertia_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexTriangleMeshShape_calculateLocalInertia_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexTriangleMeshShape_setMargin_1 = Module["_btConvexTriangleMeshShape_setMargin_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexTriangleMeshShape_setMargin_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexTriangleMeshShape_getMargin_0 = Module["_btConvexTriangleMeshShape_getMargin_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexTriangleMeshShape_getMargin_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexTriangleMeshShape_isCompound_0 = Module["_btConvexTriangleMeshShape_isCompound_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexTriangleMeshShape_isCompound_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexTriangleMeshShape_getUserIndex_0 = Module["_btConvexTriangleMeshShape_getUserIndex_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexTriangleMeshShape_getUserIndex_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexTriangleMeshShape_setUserIndex_1 = Module["_btConvexTriangleMeshShape_setUserIndex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexTriangleMeshShape_setUserIndex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexTriangleMeshShape_getUserIndex2_0 = Module["_btConvexTriangleMeshShape_getUserIndex2_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexTriangleMeshShape_getUserIndex2_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexTriangleMeshShape_setUserIndex2_1 = Module["_btConvexTriangleMeshShape_setUserIndex2_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexTriangleMeshShape_setUserIndex2_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexTriangleMeshShape_getAabb_3 = Module["_btConvexTriangleMeshShape_getAabb_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexTriangleMeshShape_getAabb_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexTriangleMeshShape_getLocalBoundingSphere_0 = Module["_btConvexTriangleMeshShape_getLocalBoundingSphere_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexTriangleMeshShape_getLocalBoundingSphere_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConvexTriangleMeshShape___destroy___0 = Module["_btConvexTriangleMeshShape___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConvexTriangleMeshShape___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccClosestRayResultCallback_ccClosestRayResultCallback_2 = Module["_ccClosestRayResultCallback_ccClosestRayResultCallback_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccClosestRayResultCallback_ccClosestRayResultCallback_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccClosestRayResultCallback_setQueryTrigger_1 = Module["_ccClosestRayResultCallback_setQueryTrigger_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccClosestRayResultCallback_setQueryTrigger_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccClosestRayResultCallback_hasHit_0 = Module["_ccClosestRayResultCallback_hasHit_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccClosestRayResultCallback_hasHit_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccClosestRayResultCallback_get_m_shapePart_0 = Module["_ccClosestRayResultCallback_get_m_shapePart_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccClosestRayResultCallback_get_m_shapePart_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccClosestRayResultCallback_set_m_shapePart_1 = Module["_ccClosestRayResultCallback_set_m_shapePart_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccClosestRayResultCallback_set_m_shapePart_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccClosestRayResultCallback_get_m_rayFromWorld_0 = Module["_ccClosestRayResultCallback_get_m_rayFromWorld_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccClosestRayResultCallback_get_m_rayFromWorld_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccClosestRayResultCallback_set_m_rayFromWorld_1 = Module["_ccClosestRayResultCallback_set_m_rayFromWorld_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccClosestRayResultCallback_set_m_rayFromWorld_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccClosestRayResultCallback_get_m_rayToWorld_0 = Module["_ccClosestRayResultCallback_get_m_rayToWorld_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccClosestRayResultCallback_get_m_rayToWorld_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccClosestRayResultCallback_set_m_rayToWorld_1 = Module["_ccClosestRayResultCallback_set_m_rayToWorld_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccClosestRayResultCallback_set_m_rayToWorld_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccClosestRayResultCallback_get_m_hitNormalWorld_0 = Module["_ccClosestRayResultCallback_get_m_hitNormalWorld_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccClosestRayResultCallback_get_m_hitNormalWorld_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccClosestRayResultCallback_set_m_hitNormalWorld_1 = Module["_ccClosestRayResultCallback_set_m_hitNormalWorld_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccClosestRayResultCallback_set_m_hitNormalWorld_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccClosestRayResultCallback_get_m_hitPointWorld_0 = Module["_ccClosestRayResultCallback_get_m_hitPointWorld_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccClosestRayResultCallback_get_m_hitPointWorld_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccClosestRayResultCallback_set_m_hitPointWorld_1 = Module["_ccClosestRayResultCallback_set_m_hitPointWorld_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccClosestRayResultCallback_set_m_hitPointWorld_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccClosestRayResultCallback_get_m_collisionFilterGroup_0 = Module["_ccClosestRayResultCallback_get_m_collisionFilterGroup_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccClosestRayResultCallback_get_m_collisionFilterGroup_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccClosestRayResultCallback_set_m_collisionFilterGroup_1 = Module["_ccClosestRayResultCallback_set_m_collisionFilterGroup_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccClosestRayResultCallback_set_m_collisionFilterGroup_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccClosestRayResultCallback_get_m_collisionFilterMask_0 = Module["_ccClosestRayResultCallback_get_m_collisionFilterMask_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccClosestRayResultCallback_get_m_collisionFilterMask_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccClosestRayResultCallback_set_m_collisionFilterMask_1 = Module["_ccClosestRayResultCallback_set_m_collisionFilterMask_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccClosestRayResultCallback_set_m_collisionFilterMask_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccClosestRayResultCallback_get_m_closestHitFraction_0 = Module["_ccClosestRayResultCallback_get_m_closestHitFraction_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccClosestRayResultCallback_get_m_closestHitFraction_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccClosestRayResultCallback_set_m_closestHitFraction_1 = Module["_ccClosestRayResultCallback_set_m_closestHitFraction_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccClosestRayResultCallback_set_m_closestHitFraction_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccClosestRayResultCallback_get_m_collisionObject_0 = Module["_ccClosestRayResultCallback_get_m_collisionObject_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccClosestRayResultCallback_get_m_collisionObject_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccClosestRayResultCallback_set_m_collisionObject_1 = Module["_ccClosestRayResultCallback_set_m_collisionObject_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccClosestRayResultCallback_set_m_collisionObject_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccClosestRayResultCallback___destroy___0 = Module["_ccClosestRayResultCallback___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccClosestRayResultCallback___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHeightfieldTerrainShape_btHeightfieldTerrainShape_9 = Module["_btHeightfieldTerrainShape_btHeightfieldTerrainShape_9"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHeightfieldTerrainShape_btHeightfieldTerrainShape_9"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHeightfieldTerrainShape_setMargin_1 = Module["_btHeightfieldTerrainShape_setMargin_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHeightfieldTerrainShape_setMargin_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHeightfieldTerrainShape_getMargin_0 = Module["_btHeightfieldTerrainShape_getMargin_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHeightfieldTerrainShape_getMargin_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHeightfieldTerrainShape_setLocalScaling_1 = Module["_btHeightfieldTerrainShape_setLocalScaling_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHeightfieldTerrainShape_setLocalScaling_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHeightfieldTerrainShape_getLocalScaling_0 = Module["_btHeightfieldTerrainShape_getLocalScaling_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHeightfieldTerrainShape_getLocalScaling_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHeightfieldTerrainShape_calculateLocalInertia_2 = Module["_btHeightfieldTerrainShape_calculateLocalInertia_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHeightfieldTerrainShape_calculateLocalInertia_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHeightfieldTerrainShape_isCompound_0 = Module["_btHeightfieldTerrainShape_isCompound_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHeightfieldTerrainShape_isCompound_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHeightfieldTerrainShape_getUserIndex_0 = Module["_btHeightfieldTerrainShape_getUserIndex_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHeightfieldTerrainShape_getUserIndex_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHeightfieldTerrainShape_setUserIndex_1 = Module["_btHeightfieldTerrainShape_setUserIndex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHeightfieldTerrainShape_setUserIndex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHeightfieldTerrainShape_getUserIndex2_0 = Module["_btHeightfieldTerrainShape_getUserIndex2_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHeightfieldTerrainShape_getUserIndex2_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHeightfieldTerrainShape_setUserIndex2_1 = Module["_btHeightfieldTerrainShape_setUserIndex2_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHeightfieldTerrainShape_setUserIndex2_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHeightfieldTerrainShape_getAabb_3 = Module["_btHeightfieldTerrainShape_getAabb_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHeightfieldTerrainShape_getAabb_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHeightfieldTerrainShape_getLocalBoundingSphere_0 = Module["_btHeightfieldTerrainShape_getLocalBoundingSphere_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHeightfieldTerrainShape_getLocalBoundingSphere_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHeightfieldTerrainShape___destroy___0 = Module["_btHeightfieldTerrainShape___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHeightfieldTerrainShape___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _VoidPtr___destroy___0 = Module["_VoidPtr___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["VoidPtr___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0 = Module["_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1 = Module["_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDefaultCollisionConfiguration___destroy___0 = Module["_btDefaultCollisionConfiguration___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDefaultCollisionConfiguration___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btOverlappingPairCallback___destroy___0 = Module["_btOverlappingPairCallback___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btOverlappingPairCallback___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTriangleMesh_btTriangleMesh_0 = Module["_btTriangleMesh_btTriangleMesh_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTriangleMesh_btTriangleMesh_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTriangleMesh_btTriangleMesh_1 = Module["_btTriangleMesh_btTriangleMesh_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTriangleMesh_btTriangleMesh_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTriangleMesh_btTriangleMesh_2 = Module["_btTriangleMesh_btTriangleMesh_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTriangleMesh_btTriangleMesh_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTriangleMesh_addTriangle_3 = Module["_btTriangleMesh_addTriangle_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTriangleMesh_addTriangle_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTriangleMesh_addTriangle_4 = Module["_btTriangleMesh_addTriangle_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTriangleMesh_addTriangle_4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTriangleMesh_addTriangleIndices_3 = Module["_btTriangleMesh_addTriangleIndices_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTriangleMesh_addTriangleIndices_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTriangleMesh_getIndexedMeshArray_0 = Module["_btTriangleMesh_getIndexedMeshArray_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTriangleMesh_getIndexedMeshArray_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTriangleMesh_setScaling_1 = Module["_btTriangleMesh_setScaling_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTriangleMesh_setScaling_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTriangleMesh___destroy___0 = Module["_btTriangleMesh___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTriangleMesh___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionConfiguration___destroy___0 = Module["_btCollisionConfiguration___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionConfiguration___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btPersistentManifold_btPersistentManifold_0 = Module["_btPersistentManifold_btPersistentManifold_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btPersistentManifold_btPersistentManifold_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btPersistentManifold_getBody0_0 = Module["_btPersistentManifold_getBody0_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btPersistentManifold_getBody0_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btPersistentManifold_getBody1_0 = Module["_btPersistentManifold_getBody1_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btPersistentManifold_getBody1_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btPersistentManifold_getNumContacts_0 = Module["_btPersistentManifold_getNumContacts_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btPersistentManifold_getNumContacts_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btPersistentManifold_getContactPoint_1 = Module["_btPersistentManifold_getContactPoint_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btPersistentManifold_getContactPoint_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btPersistentManifold___destroy___0 = Module["_btPersistentManifold___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btPersistentManifold___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBoxShape_btBoxShape_1 = Module["_btBoxShape_btBoxShape_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBoxShape_btBoxShape_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBoxShape_setMargin_1 = Module["_btBoxShape_setMargin_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBoxShape_setMargin_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBoxShape_getMargin_0 = Module["_btBoxShape_getMargin_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBoxShape_getMargin_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBoxShape_setUnscaledHalfExtents_1 = Module["_btBoxShape_setUnscaledHalfExtents_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBoxShape_setUnscaledHalfExtents_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBoxShape_setLocalScaling_1 = Module["_btBoxShape_setLocalScaling_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBoxShape_setLocalScaling_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBoxShape_getLocalScaling_0 = Module["_btBoxShape_getLocalScaling_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBoxShape_getLocalScaling_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBoxShape_calculateLocalInertia_2 = Module["_btBoxShape_calculateLocalInertia_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBoxShape_calculateLocalInertia_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBoxShape_isCompound_0 = Module["_btBoxShape_isCompound_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBoxShape_isCompound_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBoxShape_getUserIndex_0 = Module["_btBoxShape_getUserIndex_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBoxShape_getUserIndex_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBoxShape_setUserIndex_1 = Module["_btBoxShape_setUserIndex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBoxShape_setUserIndex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBoxShape_getUserIndex2_0 = Module["_btBoxShape_getUserIndex2_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBoxShape_getUserIndex2_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBoxShape_setUserIndex2_1 = Module["_btBoxShape_setUserIndex2_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBoxShape_setUserIndex2_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBoxShape_getAabb_3 = Module["_btBoxShape_getAabb_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBoxShape_getAabb_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBoxShape_getLocalBoundingSphere_0 = Module["_btBoxShape_getLocalBoundingSphere_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBoxShape_getLocalBoundingSphere_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBoxShape_getImplicitShapeDimensions_0 = Module["_btBoxShape_getImplicitShapeDimensions_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBoxShape_getImplicitShapeDimensions_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBoxShape___destroy___0 = Module["_btBoxShape___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBoxShape___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCapsuleShape_btCapsuleShape_2 = Module["_btCapsuleShape_btCapsuleShape_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCapsuleShape_btCapsuleShape_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCapsuleShape_setMargin_1 = Module["_btCapsuleShape_setMargin_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCapsuleShape_setMargin_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCapsuleShape_getMargin_0 = Module["_btCapsuleShape_getMargin_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCapsuleShape_getMargin_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCapsuleShape_updateProp_3 = Module["_btCapsuleShape_updateProp_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCapsuleShape_updateProp_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCapsuleShape_setLocalScaling_1 = Module["_btCapsuleShape_setLocalScaling_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCapsuleShape_setLocalScaling_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCapsuleShape_getLocalScaling_0 = Module["_btCapsuleShape_getLocalScaling_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCapsuleShape_getLocalScaling_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCapsuleShape_calculateLocalInertia_2 = Module["_btCapsuleShape_calculateLocalInertia_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCapsuleShape_calculateLocalInertia_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCapsuleShape_isCompound_0 = Module["_btCapsuleShape_isCompound_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCapsuleShape_isCompound_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCapsuleShape_getUserIndex_0 = Module["_btCapsuleShape_getUserIndex_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCapsuleShape_getUserIndex_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCapsuleShape_setUserIndex_1 = Module["_btCapsuleShape_setUserIndex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCapsuleShape_setUserIndex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCapsuleShape_getUserIndex2_0 = Module["_btCapsuleShape_getUserIndex2_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCapsuleShape_getUserIndex2_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCapsuleShape_setUserIndex2_1 = Module["_btCapsuleShape_setUserIndex2_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCapsuleShape_setUserIndex2_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCapsuleShape_getAabb_3 = Module["_btCapsuleShape_getAabb_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCapsuleShape_getAabb_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCapsuleShape_getLocalBoundingSphere_0 = Module["_btCapsuleShape_getLocalBoundingSphere_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCapsuleShape_getLocalBoundingSphere_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCapsuleShape_getImplicitShapeDimensions_0 = Module["_btCapsuleShape_getImplicitShapeDimensions_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCapsuleShape_getImplicitShapeDimensions_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCapsuleShape___destroy___0 = Module["_btCapsuleShape___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCapsuleShape___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_btCompoundShape_0 = Module["_btCompoundShape_btCompoundShape_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_btCompoundShape_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_btCompoundShape_1 = Module["_btCompoundShape_btCompoundShape_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_btCompoundShape_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_addChildShape_2 = Module["_btCompoundShape_addChildShape_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_addChildShape_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_removeChildShape_1 = Module["_btCompoundShape_removeChildShape_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_removeChildShape_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_removeChildShapeByIndex_1 = Module["_btCompoundShape_removeChildShapeByIndex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_removeChildShapeByIndex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_getNumChildShapes_0 = Module["_btCompoundShape_getNumChildShapes_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_getNumChildShapes_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_getChildShape_1 = Module["_btCompoundShape_getChildShape_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_getChildShape_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_updateChildTransform_2 = Module["_btCompoundShape_updateChildTransform_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_updateChildTransform_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_updateChildTransform_3 = Module["_btCompoundShape_updateChildTransform_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_updateChildTransform_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_setMargin_1 = Module["_btCompoundShape_setMargin_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_setMargin_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_getMargin_0 = Module["_btCompoundShape_getMargin_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_getMargin_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_setMaterial_3 = Module["_btCompoundShape_setMaterial_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_setMaterial_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_setMaterial_4 = Module["_btCompoundShape_setMaterial_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_setMaterial_4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_setMaterial_5 = Module["_btCompoundShape_setMaterial_5"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_setMaterial_5"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_setMaterial_6 = Module["_btCompoundShape_setMaterial_6"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_setMaterial_6"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_setLocalScaling_1 = Module["_btCompoundShape_setLocalScaling_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_setLocalScaling_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_getLocalScaling_0 = Module["_btCompoundShape_getLocalScaling_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_getLocalScaling_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_calculateLocalInertia_2 = Module["_btCompoundShape_calculateLocalInertia_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_calculateLocalInertia_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_isCompound_0 = Module["_btCompoundShape_isCompound_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_isCompound_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_getUserIndex_0 = Module["_btCompoundShape_getUserIndex_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_getUserIndex_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_setUserIndex_1 = Module["_btCompoundShape_setUserIndex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_setUserIndex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_getUserIndex2_0 = Module["_btCompoundShape_getUserIndex2_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_getUserIndex2_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_setUserIndex2_1 = Module["_btCompoundShape_setUserIndex2_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_setUserIndex2_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_getAabb_3 = Module["_btCompoundShape_getAabb_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_getAabb_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape_getLocalBoundingSphere_0 = Module["_btCompoundShape_getLocalBoundingSphere_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape_getLocalBoundingSphere_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCompoundShape___destroy___0 = Module["_btCompoundShape___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCompoundShape___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDefaultMotionState_btDefaultMotionState_0 = Module["_btDefaultMotionState_btDefaultMotionState_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDefaultMotionState_btDefaultMotionState_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDefaultMotionState_btDefaultMotionState_1 = Module["_btDefaultMotionState_btDefaultMotionState_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDefaultMotionState_btDefaultMotionState_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDefaultMotionState_btDefaultMotionState_2 = Module["_btDefaultMotionState_btDefaultMotionState_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDefaultMotionState_btDefaultMotionState_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDefaultMotionState_getWorldTransform_1 = Module["_btDefaultMotionState_getWorldTransform_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDefaultMotionState_getWorldTransform_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDefaultMotionState_setWorldTransform_1 = Module["_btDefaultMotionState_setWorldTransform_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDefaultMotionState_setWorldTransform_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDefaultMotionState___destroy___0 = Module["_btDefaultMotionState___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDefaultMotionState___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHingeConstraint_btHingeConstraint_4 = Module["_btHingeConstraint_btHingeConstraint_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHingeConstraint_btHingeConstraint_4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHingeConstraint_btHingeConstraint_5 = Module["_btHingeConstraint_btHingeConstraint_5"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHingeConstraint_btHingeConstraint_5"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHingeConstraint_setLimit_4 = Module["_btHingeConstraint_setLimit_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHingeConstraint_setLimit_4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHingeConstraint_setLimit_5 = Module["_btHingeConstraint_setLimit_5"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHingeConstraint_setLimit_5"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHingeConstraint_enableAngularMotor_3 = Module["_btHingeConstraint_enableAngularMotor_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHingeConstraint_enableAngularMotor_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHingeConstraint_setAngularOnly_1 = Module["_btHingeConstraint_setAngularOnly_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHingeConstraint_setAngularOnly_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHingeConstraint_enableMotor_1 = Module["_btHingeConstraint_enableMotor_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHingeConstraint_enableMotor_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHingeConstraint_setMaxMotorImpulse_1 = Module["_btHingeConstraint_setMaxMotorImpulse_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHingeConstraint_setMaxMotorImpulse_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHingeConstraint_setMotorTarget_2 = Module["_btHingeConstraint_setMotorTarget_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHingeConstraint_setMotorTarget_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHingeConstraint_setFrames_2 = Module["_btHingeConstraint_setFrames_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHingeConstraint_setFrames_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHingeConstraint_setAxis_1 = Module["_btHingeConstraint_setAxis_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHingeConstraint_setAxis_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHingeConstraint_setUseReferenceFrameA_1 = Module["_btHingeConstraint_setUseReferenceFrameA_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHingeConstraint_setUseReferenceFrameA_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHingeConstraint_enableFeedback_1 = Module["_btHingeConstraint_enableFeedback_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHingeConstraint_enableFeedback_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHingeConstraint_getBreakingImpulseThreshold_0 = Module["_btHingeConstraint_getBreakingImpulseThreshold_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHingeConstraint_getBreakingImpulseThreshold_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHingeConstraint_setBreakingImpulseThreshold_1 = Module["_btHingeConstraint_setBreakingImpulseThreshold_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHingeConstraint_setBreakingImpulseThreshold_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHingeConstraint_getParam_2 = Module["_btHingeConstraint_getParam_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHingeConstraint_getParam_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHingeConstraint_setParam_3 = Module["_btHingeConstraint_setParam_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHingeConstraint_setParam_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btHingeConstraint___destroy___0 = Module["_btHingeConstraint___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btHingeConstraint___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btQuaternion_btQuaternion_4 = Module["_btQuaternion_btQuaternion_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btQuaternion_btQuaternion_4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btQuaternion_setValue_4 = Module["_btQuaternion_setValue_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btQuaternion_setValue_4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btQuaternion_x_0 = Module["_btQuaternion_x_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btQuaternion_x_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btQuaternion_y_0 = Module["_btQuaternion_y_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btQuaternion_y_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btQuaternion_z_0 = Module["_btQuaternion_z_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btQuaternion_z_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btQuaternion_w_0 = Module["_btQuaternion_w_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btQuaternion_w_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btQuaternion_setX_1 = Module["_btQuaternion_setX_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btQuaternion_setX_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btQuaternion_setY_1 = Module["_btQuaternion_setY_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btQuaternion_setY_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btQuaternion_setZ_1 = Module["_btQuaternion_setZ_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btQuaternion_setZ_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btQuaternion_setW_1 = Module["_btQuaternion_setW_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btQuaternion_setW_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btQuaternion___destroy___0 = Module["_btQuaternion___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btQuaternion___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConeShape_btConeShape_2 = Module["_btConeShape_btConeShape_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConeShape_btConeShape_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConeShape_setRadius_1 = Module["_btConeShape_setRadius_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConeShape_setRadius_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConeShape_setHeight_1 = Module["_btConeShape_setHeight_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConeShape_setHeight_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConeShape_setConeUpIndex_1 = Module["_btConeShape_setConeUpIndex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConeShape_setConeUpIndex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConeShape_setLocalScaling_1 = Module["_btConeShape_setLocalScaling_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConeShape_setLocalScaling_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConeShape_getLocalScaling_0 = Module["_btConeShape_getLocalScaling_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConeShape_getLocalScaling_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConeShape_calculateLocalInertia_2 = Module["_btConeShape_calculateLocalInertia_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConeShape_calculateLocalInertia_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConeShape_isCompound_0 = Module["_btConeShape_isCompound_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConeShape_isCompound_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConeShape_getUserIndex_0 = Module["_btConeShape_getUserIndex_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConeShape_getUserIndex_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConeShape_setUserIndex_1 = Module["_btConeShape_setUserIndex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConeShape_setUserIndex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConeShape_getUserIndex2_0 = Module["_btConeShape_getUserIndex2_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConeShape_getUserIndex2_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConeShape_setUserIndex2_1 = Module["_btConeShape_setUserIndex2_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConeShape_setUserIndex2_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConeShape_getAabb_3 = Module["_btConeShape_getAabb_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConeShape_getAabb_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConeShape_getLocalBoundingSphere_0 = Module["_btConeShape_getLocalBoundingSphere_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConeShape_getLocalBoundingSphere_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConeShape_getImplicitShapeDimensions_0 = Module["_btConeShape_getImplicitShapeDimensions_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConeShape_getImplicitShapeDimensions_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConeShape___destroy___0 = Module["_btConeShape___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConeShape___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBU_Simplex1to4_btBU_Simplex1to4_0 = Module["_btBU_Simplex1to4_btBU_Simplex1to4_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBU_Simplex1to4_btBU_Simplex1to4_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBU_Simplex1to4_addVertex_1 = Module["_btBU_Simplex1to4_addVertex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBU_Simplex1to4_addVertex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBU_Simplex1to4_setLocalScaling_1 = Module["_btBU_Simplex1to4_setLocalScaling_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBU_Simplex1to4_setLocalScaling_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBU_Simplex1to4_getLocalScaling_0 = Module["_btBU_Simplex1to4_getLocalScaling_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBU_Simplex1to4_getLocalScaling_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBU_Simplex1to4_calculateLocalInertia_2 = Module["_btBU_Simplex1to4_calculateLocalInertia_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBU_Simplex1to4_calculateLocalInertia_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBU_Simplex1to4_isCompound_0 = Module["_btBU_Simplex1to4_isCompound_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBU_Simplex1to4_isCompound_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBU_Simplex1to4_getUserIndex_0 = Module["_btBU_Simplex1to4_getUserIndex_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBU_Simplex1to4_getUserIndex_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBU_Simplex1to4_setUserIndex_1 = Module["_btBU_Simplex1to4_setUserIndex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBU_Simplex1to4_setUserIndex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBU_Simplex1to4_getUserIndex2_0 = Module["_btBU_Simplex1to4_getUserIndex2_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBU_Simplex1to4_getUserIndex2_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBU_Simplex1to4_setUserIndex2_1 = Module["_btBU_Simplex1to4_setUserIndex2_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBU_Simplex1to4_setUserIndex2_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBU_Simplex1to4_getAabb_3 = Module["_btBU_Simplex1to4_getAabb_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBU_Simplex1to4_getAabb_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBU_Simplex1to4_getLocalBoundingSphere_0 = Module["_btBU_Simplex1to4_getLocalBoundingSphere_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBU_Simplex1to4_getLocalBoundingSphere_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btBU_Simplex1to4___destroy___0 = Module["_btBU_Simplex1to4___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btBU_Simplex1to4___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btContactSolverInfo_get_m_splitImpulse_0 = Module["_btContactSolverInfo_get_m_splitImpulse_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btContactSolverInfo_get_m_splitImpulse_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btContactSolverInfo_set_m_splitImpulse_1 = Module["_btContactSolverInfo_set_m_splitImpulse_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btContactSolverInfo_set_m_splitImpulse_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0 = Module["_btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1 = Module["_btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btContactSolverInfo_get_m_numIterations_0 = Module["_btContactSolverInfo_get_m_numIterations_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btContactSolverInfo_get_m_numIterations_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btContactSolverInfo_set_m_numIterations_1 = Module["_btContactSolverInfo_set_m_numIterations_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btContactSolverInfo_set_m_numIterations_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btContactSolverInfo___destroy___0 = Module["_btContactSolverInfo___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btContactSolverInfo___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btStaticPlaneShape_btStaticPlaneShape_2 = Module["_btStaticPlaneShape_btStaticPlaneShape_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btStaticPlaneShape_btStaticPlaneShape_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btStaticPlaneShape_getPlaneNormal_0 = Module["_btStaticPlaneShape_getPlaneNormal_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btStaticPlaneShape_getPlaneNormal_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btStaticPlaneShape_setPlaneConstant_1 = Module["_btStaticPlaneShape_setPlaneConstant_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btStaticPlaneShape_setPlaneConstant_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btStaticPlaneShape_setLocalScaling_1 = Module["_btStaticPlaneShape_setLocalScaling_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btStaticPlaneShape_setLocalScaling_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btStaticPlaneShape_getLocalScaling_0 = Module["_btStaticPlaneShape_getLocalScaling_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btStaticPlaneShape_getLocalScaling_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btStaticPlaneShape_calculateLocalInertia_2 = Module["_btStaticPlaneShape_calculateLocalInertia_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btStaticPlaneShape_calculateLocalInertia_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btStaticPlaneShape_isCompound_0 = Module["_btStaticPlaneShape_isCompound_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btStaticPlaneShape_isCompound_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btStaticPlaneShape_getUserIndex_0 = Module["_btStaticPlaneShape_getUserIndex_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btStaticPlaneShape_getUserIndex_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btStaticPlaneShape_setUserIndex_1 = Module["_btStaticPlaneShape_setUserIndex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btStaticPlaneShape_setUserIndex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btStaticPlaneShape_getUserIndex2_0 = Module["_btStaticPlaneShape_getUserIndex2_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btStaticPlaneShape_getUserIndex2_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btStaticPlaneShape_setUserIndex2_1 = Module["_btStaticPlaneShape_setUserIndex2_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btStaticPlaneShape_setUserIndex2_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btStaticPlaneShape_getAabb_3 = Module["_btStaticPlaneShape_getAabb_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btStaticPlaneShape_getAabb_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btStaticPlaneShape_getLocalBoundingSphere_0 = Module["_btStaticPlaneShape_getLocalBoundingSphere_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btStaticPlaneShape_getLocalBoundingSphere_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btStaticPlaneShape___destroy___0 = Module["_btStaticPlaneShape___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btStaticPlaneShape___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btActionInterface_updateAction_2 = Module["_btActionInterface_updateAction_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btActionInterface_updateAction_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btActionInterface___destroy___0 = Module["_btActionInterface___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btActionInterface___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btOverlappingPairCache_setInternalGhostPairCallback_1 = Module["_btOverlappingPairCache_setInternalGhostPairCallback_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btOverlappingPairCache_setInternalGhostPairCallback_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btOverlappingPairCache_setOverlapFilterCallback_1 = Module["_btOverlappingPairCache_setOverlapFilterCallback_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btOverlappingPairCache_setOverlapFilterCallback_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btOverlappingPairCache_getNumOverlappingPairs_0 = Module["_btOverlappingPairCache_getNumOverlappingPairs_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btOverlappingPairCache_getNumOverlappingPairs_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btOverlappingPairCache___destroy___0 = Module["_btOverlappingPairCache___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btOverlappingPairCache___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btVector3_btVector3_0 = Module["_btVector3_btVector3_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btVector3_btVector3_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btVector3_btVector3_3 = Module["_btVector3_btVector3_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btVector3_btVector3_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btVector3_x_0 = Module["_btVector3_x_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btVector3_x_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btVector3_y_0 = Module["_btVector3_y_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btVector3_y_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btVector3_z_0 = Module["_btVector3_z_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btVector3_z_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btVector3_setX_1 = Module["_btVector3_setX_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btVector3_setX_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btVector3_setY_1 = Module["_btVector3_setY_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btVector3_setY_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btVector3_setZ_1 = Module["_btVector3_setZ_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btVector3_setZ_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btVector3_setValue_3 = Module["_btVector3_setValue_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btVector3_setValue_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btVector3___destroy___0 = Module["_btVector3___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btVector3___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btSphereShape_btSphereShape_1 = Module["_btSphereShape_btSphereShape_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btSphereShape_btSphereShape_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btSphereShape_setMargin_1 = Module["_btSphereShape_setMargin_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btSphereShape_setMargin_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btSphereShape_getMargin_0 = Module["_btSphereShape_getMargin_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btSphereShape_getMargin_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btSphereShape_setUnscaledRadius_1 = Module["_btSphereShape_setUnscaledRadius_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btSphereShape_setUnscaledRadius_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btSphereShape_setLocalScaling_1 = Module["_btSphereShape_setLocalScaling_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btSphereShape_setLocalScaling_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btSphereShape_getLocalScaling_0 = Module["_btSphereShape_getLocalScaling_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btSphereShape_getLocalScaling_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btSphereShape_calculateLocalInertia_2 = Module["_btSphereShape_calculateLocalInertia_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btSphereShape_calculateLocalInertia_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btSphereShape_isCompound_0 = Module["_btSphereShape_isCompound_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btSphereShape_isCompound_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btSphereShape_getUserIndex_0 = Module["_btSphereShape_getUserIndex_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btSphereShape_getUserIndex_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btSphereShape_setUserIndex_1 = Module["_btSphereShape_setUserIndex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btSphereShape_setUserIndex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btSphereShape_getUserIndex2_0 = Module["_btSphereShape_getUserIndex2_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btSphereShape_getUserIndex2_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btSphereShape_setUserIndex2_1 = Module["_btSphereShape_setUserIndex2_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btSphereShape_setUserIndex2_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btSphereShape_getAabb_3 = Module["_btSphereShape_getAabb_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btSphereShape_getAabb_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btSphereShape_getLocalBoundingSphere_0 = Module["_btSphereShape_getLocalBoundingSphere_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btSphereShape_getLocalBoundingSphere_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btSphereShape_getImplicitShapeDimensions_0 = Module["_btSphereShape_getImplicitShapeDimensions_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btSphereShape_getImplicitShapeDimensions_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btSphereShape___destroy___0 = Module["_btSphereShape___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btSphereShape___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0 = Module["_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btDefaultCollisionConstructionInfo___destroy___0 = Module["_btDefaultCollisionConstructionInfo___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btDefaultCollisionConstructionInfo___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btEmptyShape_btEmptyShape_0 = Module["_btEmptyShape_btEmptyShape_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btEmptyShape_btEmptyShape_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btEmptyShape_setLocalScaling_1 = Module["_btEmptyShape_setLocalScaling_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btEmptyShape_setLocalScaling_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btEmptyShape_getLocalScaling_0 = Module["_btEmptyShape_getLocalScaling_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btEmptyShape_getLocalScaling_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btEmptyShape_calculateLocalInertia_2 = Module["_btEmptyShape_calculateLocalInertia_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btEmptyShape_calculateLocalInertia_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btEmptyShape_isCompound_0 = Module["_btEmptyShape_isCompound_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btEmptyShape_isCompound_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btEmptyShape_getUserIndex_0 = Module["_btEmptyShape_getUserIndex_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btEmptyShape_getUserIndex_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btEmptyShape_setUserIndex_1 = Module["_btEmptyShape_setUserIndex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btEmptyShape_setUserIndex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btEmptyShape_getUserIndex2_0 = Module["_btEmptyShape_getUserIndex2_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btEmptyShape_getUserIndex2_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btEmptyShape_setUserIndex2_1 = Module["_btEmptyShape_setUserIndex2_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btEmptyShape_setUserIndex2_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btEmptyShape_getAabb_3 = Module["_btEmptyShape_getAabb_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btEmptyShape_getAabb_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btEmptyShape_getLocalBoundingSphere_0 = Module["_btEmptyShape_getLocalBoundingSphere_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btEmptyShape_getLocalBoundingSphere_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btEmptyShape___destroy___0 = Module["_btEmptyShape___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btEmptyShape___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConstraintSetting_btConstraintSetting_0 = Module["_btConstraintSetting_btConstraintSetting_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConstraintSetting_btConstraintSetting_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConstraintSetting_get_m_tau_0 = Module["_btConstraintSetting_get_m_tau_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConstraintSetting_get_m_tau_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConstraintSetting_set_m_tau_1 = Module["_btConstraintSetting_set_m_tau_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConstraintSetting_set_m_tau_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConstraintSetting_get_m_damping_0 = Module["_btConstraintSetting_get_m_damping_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConstraintSetting_get_m_damping_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConstraintSetting_set_m_damping_1 = Module["_btConstraintSetting_set_m_damping_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConstraintSetting_set_m_damping_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConstraintSetting_get_m_impulseClamp_0 = Module["_btConstraintSetting_get_m_impulseClamp_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConstraintSetting_get_m_impulseClamp_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConstraintSetting_set_m_impulseClamp_1 = Module["_btConstraintSetting_set_m_impulseClamp_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConstraintSetting_set_m_impulseClamp_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConstraintSetting___destroy___0 = Module["_btConstraintSetting___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConstraintSetting___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _LocalShapeInfo_get_m_shapePart_0 = Module["_LocalShapeInfo_get_m_shapePart_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["LocalShapeInfo_get_m_shapePart_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _LocalShapeInfo_set_m_shapePart_1 = Module["_LocalShapeInfo_set_m_shapePart_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["LocalShapeInfo_set_m_shapePart_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _LocalShapeInfo_get_m_triangleIndex_0 = Module["_LocalShapeInfo_get_m_triangleIndex_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["LocalShapeInfo_get_m_triangleIndex_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _LocalShapeInfo_set_m_triangleIndex_1 = Module["_LocalShapeInfo_set_m_triangleIndex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["LocalShapeInfo_set_m_triangleIndex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _LocalShapeInfo___destroy___0 = Module["_LocalShapeInfo___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["LocalShapeInfo___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btVector3Array_size_0 = Module["_btVector3Array_size_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btVector3Array_size_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btVector3Array_at_1 = Module["_btVector3Array_at_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btVector3Array_at_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btVector3Array_clear_0 = Module["_btVector3Array_clear_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btVector3Array_clear_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btVector3Array___destroy___0 = Module["_btVector3Array___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btVector3Array___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConstraintSolver___destroy___0 = Module["_btConstraintSolver___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConstraintSolver___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btFixedConstraint_btFixedConstraint_4 = Module["_btFixedConstraint_btFixedConstraint_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btFixedConstraint_btFixedConstraint_4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btFixedConstraint_enableFeedback_1 = Module["_btFixedConstraint_enableFeedback_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btFixedConstraint_enableFeedback_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btFixedConstraint_getBreakingImpulseThreshold_0 = Module["_btFixedConstraint_getBreakingImpulseThreshold_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btFixedConstraint_getBreakingImpulseThreshold_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btFixedConstraint_setBreakingImpulseThreshold_1 = Module["_btFixedConstraint_setBreakingImpulseThreshold_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btFixedConstraint_setBreakingImpulseThreshold_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btFixedConstraint_getParam_2 = Module["_btFixedConstraint_getParam_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btFixedConstraint_getParam_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btFixedConstraint_setParam_3 = Module["_btFixedConstraint_setParam_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btFixedConstraint_setParam_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btFixedConstraint___destroy___0 = Module["_btFixedConstraint___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btFixedConstraint___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionDispatcher_btCollisionDispatcher_1 = Module["_btCollisionDispatcher_btCollisionDispatcher_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionDispatcher_btCollisionDispatcher_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionDispatcher_setDispatcherFlags_1 = Module["_btCollisionDispatcher_setDispatcherFlags_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionDispatcher_setDispatcherFlags_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionDispatcher_getNumManifolds_0 = Module["_btCollisionDispatcher_getNumManifolds_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionDispatcher_getNumManifolds_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionDispatcher_getManifoldByIndexInternal_1 = Module["_btCollisionDispatcher_getManifoldByIndexInternal_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionDispatcher_getManifoldByIndexInternal_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCollisionDispatcher___destroy___0 = Module["_btCollisionDispatcher___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCollisionDispatcher___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_btRigidBody_1 = Module["_btRigidBody_btRigidBody_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_btRigidBody_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_getCenterOfMassTransform_0 = Module["_btRigidBody_getCenterOfMassTransform_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_getCenterOfMassTransform_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setCenterOfMassTransform_1 = Module["_btRigidBody_setCenterOfMassTransform_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setCenterOfMassTransform_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setSleepingThresholds_2 = Module["_btRigidBody_setSleepingThresholds_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setSleepingThresholds_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_getLinearSleepingThreshold_0 = Module["_btRigidBody_getLinearSleepingThreshold_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_getLinearSleepingThreshold_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setDamping_2 = Module["_btRigidBody_setDamping_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setDamping_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setMassProps_2 = Module["_btRigidBody_setMassProps_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setMassProps_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_getLinearFactor_0 = Module["_btRigidBody_getLinearFactor_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_getLinearFactor_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setLinearFactor_1 = Module["_btRigidBody_setLinearFactor_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setLinearFactor_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_applyTorque_1 = Module["_btRigidBody_applyTorque_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_applyTorque_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_applyForce_2 = Module["_btRigidBody_applyForce_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_applyForce_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_applyCentralForce_1 = Module["_btRigidBody_applyCentralForce_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_applyCentralForce_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_applyTorqueImpulse_1 = Module["_btRigidBody_applyTorqueImpulse_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_applyTorqueImpulse_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_applyImpulse_2 = Module["_btRigidBody_applyImpulse_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_applyImpulse_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_updateInertiaTensor_0 = Module["_btRigidBody_updateInertiaTensor_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_updateInertiaTensor_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_getLinearVelocity_0 = Module["_btRigidBody_getLinearVelocity_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_getLinearVelocity_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_getAngularVelocity_0 = Module["_btRigidBody_getAngularVelocity_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_getAngularVelocity_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setLinearVelocity_1 = Module["_btRigidBody_setLinearVelocity_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setLinearVelocity_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setAngularVelocity_1 = Module["_btRigidBody_setAngularVelocity_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setAngularVelocity_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_getMotionState_0 = Module["_btRigidBody_getMotionState_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_getMotionState_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_getAngularFactor_0 = Module["_btRigidBody_getAngularFactor_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_getAngularFactor_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setAngularFactor_1 = Module["_btRigidBody_setAngularFactor_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setAngularFactor_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_getAabb_2 = Module["_btRigidBody_getAabb_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_getAabb_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setGravity_1 = Module["_btRigidBody_setGravity_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setGravity_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_getFlags_0 = Module["_btRigidBody_getFlags_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_getFlags_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setFlags_1 = Module["_btRigidBody_setFlags_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setFlags_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_wantsSleeping_0 = Module["_btRigidBody_wantsSleeping_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_wantsSleeping_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_clearForces_0 = Module["_btRigidBody_clearForces_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_clearForces_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_getTotalForce_0 = Module["_btRigidBody_getTotalForce_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_getTotalForce_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_getTotalTorque_0 = Module["_btRigidBody_getTotalTorque_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_getTotalTorque_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_clearState_0 = Module["_btRigidBody_clearState_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_clearState_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_getCollisionShape_0 = Module["_btRigidBody_getCollisionShape_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_getCollisionShape_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_getActivationState_0 = Module["_btRigidBody_getActivationState_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_getActivationState_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setActivationState_1 = Module["_btRigidBody_setActivationState_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setActivationState_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_forceActivationState_1 = Module["_btRigidBody_forceActivationState_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_forceActivationState_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_activate_0 = Module["_btRigidBody_activate_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_activate_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_activate_1 = Module["_btRigidBody_activate_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_activate_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_isActive_0 = Module["_btRigidBody_isActive_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_isActive_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_isKinematicObject_0 = Module["_btRigidBody_isKinematicObject_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_isKinematicObject_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_isStaticObject_0 = Module["_btRigidBody_isStaticObject_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_isStaticObject_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_isStaticOrKinematicObject_0 = Module["_btRigidBody_isStaticOrKinematicObject_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_isStaticOrKinematicObject_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setRestitution_1 = Module["_btRigidBody_setRestitution_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setRestitution_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setFriction_1 = Module["_btRigidBody_setFriction_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setFriction_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setRollingFriction_1 = Module["_btRigidBody_setRollingFriction_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setRollingFriction_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setSpinningFriction_1 = Module["_btRigidBody_setSpinningFriction_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setSpinningFriction_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_getWorldTransform_0 = Module["_btRigidBody_getWorldTransform_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_getWorldTransform_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_getCollisionFlags_0 = Module["_btRigidBody_getCollisionFlags_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_getCollisionFlags_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setCollisionFlags_1 = Module["_btRigidBody_setCollisionFlags_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setCollisionFlags_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setWorldTransform_1 = Module["_btRigidBody_setWorldTransform_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setWorldTransform_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setCollisionShape_1 = Module["_btRigidBody_setCollisionShape_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setCollisionShape_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setCcdMotionThreshold_1 = Module["_btRigidBody_setCcdMotionThreshold_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setCcdMotionThreshold_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setCcdSweptSphereRadius_1 = Module["_btRigidBody_setCcdSweptSphereRadius_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setCcdSweptSphereRadius_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_getUserIndex_0 = Module["_btRigidBody_getUserIndex_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_getUserIndex_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setUserIndex_1 = Module["_btRigidBody_setUserIndex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setUserIndex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setUserIndex2_1 = Module["_btRigidBody_setUserIndex2_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setUserIndex2_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody_setIgnoreCollisionCheck_2 = Module["_btRigidBody_setIgnoreCollisionCheck_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody_setIgnoreCollisionCheck_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btRigidBody___destroy___0 = Module["_btRigidBody___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btRigidBody___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btIndexedMeshArray_size_0 = Module["_btIndexedMeshArray_size_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btIndexedMeshArray_size_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btIndexedMeshArray_at_1 = Module["_btIndexedMeshArray_at_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btIndexedMeshArray_at_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btIndexedMeshArray___destroy___0 = Module["_btIndexedMeshArray___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btIndexedMeshArray___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_ccDiscreteDynamicsWorld_4 = Module["_ccDiscreteDynamicsWorld_ccDiscreteDynamicsWorld_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_ccDiscreteDynamicsWorld_4"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_setAllowSleep_1 = Module["_ccDiscreteDynamicsWorld_setAllowSleep_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_setAllowSleep_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_setDeactivationTime_1 = Module["_ccDiscreteDynamicsWorld_setDeactivationTime_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_setDeactivationTime_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_setNarrowPhaseMethod_1 = Module["_ccDiscreteDynamicsWorld_setNarrowPhaseMethod_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_setNarrowPhaseMethod_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_setAllowCcdPenetration_1 = Module["_ccDiscreteDynamicsWorld_setAllowCcdPenetration_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_setAllowCcdPenetration_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_getCcdTriggerRecorder_0 = Module["_ccDiscreteDynamicsWorld_getCcdTriggerRecorder_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_getCcdTriggerRecorder_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_rayTest_3 = Module["_ccDiscreteDynamicsWorld_rayTest_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_rayTest_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_rayTestSingle_6 = Module["_ccDiscreteDynamicsWorld_rayTestSingle_6"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_rayTestSingle_6"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_getPairCache_0 = Module["_ccDiscreteDynamicsWorld_getPairCache_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_getPairCache_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_addCollisionObject_1 = Module["_ccDiscreteDynamicsWorld_addCollisionObject_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_addCollisionObject_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_addCollisionObject_2 = Module["_ccDiscreteDynamicsWorld_addCollisionObject_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_addCollisionObject_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_addCollisionObject_3 = Module["_ccDiscreteDynamicsWorld_addCollisionObject_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_addCollisionObject_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_removeCollisionObject_1 = Module["_ccDiscreteDynamicsWorld_removeCollisionObject_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_removeCollisionObject_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_setContactBreakingThreshold_1 = Module["_ccDiscreteDynamicsWorld_setContactBreakingThreshold_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_setContactBreakingThreshold_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_setGravity_1 = Module["_ccDiscreteDynamicsWorld_setGravity_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_setGravity_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_getGravity_0 = Module["_ccDiscreteDynamicsWorld_getGravity_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_getGravity_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_addRigidBody_1 = Module["_ccDiscreteDynamicsWorld_addRigidBody_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_addRigidBody_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_addRigidBody_3 = Module["_ccDiscreteDynamicsWorld_addRigidBody_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_addRigidBody_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_removeRigidBody_1 = Module["_ccDiscreteDynamicsWorld_removeRigidBody_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_removeRigidBody_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_addConstraint_1 = Module["_ccDiscreteDynamicsWorld_addConstraint_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_addConstraint_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_addConstraint_2 = Module["_ccDiscreteDynamicsWorld_addConstraint_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_addConstraint_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_removeConstraint_1 = Module["_ccDiscreteDynamicsWorld_removeConstraint_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_removeConstraint_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_stepSimulation_1 = Module["_ccDiscreteDynamicsWorld_stepSimulation_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_stepSimulation_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_stepSimulation_2 = Module["_ccDiscreteDynamicsWorld_stepSimulation_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_stepSimulation_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_stepSimulation_3 = Module["_ccDiscreteDynamicsWorld_stepSimulation_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_stepSimulation_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_addAction_1 = Module["_ccDiscreteDynamicsWorld_addAction_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_addAction_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_removeAction_1 = Module["_ccDiscreteDynamicsWorld_removeAction_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_removeAction_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_getSolverInfo_0 = Module["_ccDiscreteDynamicsWorld_getSolverInfo_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_getSolverInfo_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld_getFixedBody_0 = Module["_ccDiscreteDynamicsWorld_getFixedBody_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld_getFixedBody_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _ccDiscreteDynamicsWorld___destroy___0 = Module["_ccDiscreteDynamicsWorld___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["ccDiscreteDynamicsWorld___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTransform_btTransform_0 = Module["_btTransform_btTransform_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTransform_btTransform_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTransform_btTransform_2 = Module["_btTransform_btTransform_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTransform_btTransform_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTransform_setIdentity_0 = Module["_btTransform_setIdentity_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTransform_setIdentity_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTransform_setOrigin_1 = Module["_btTransform_setOrigin_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTransform_setOrigin_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTransform_setRotation_1 = Module["_btTransform_setRotation_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTransform_setRotation_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTransform_getOrigin_0 = Module["_btTransform_getOrigin_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTransform_getOrigin_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTransform_getRotation_0 = Module["_btTransform_getRotation_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTransform_getRotation_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTransform_getBasis_0 = Module["_btTransform_getBasis_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTransform_getBasis_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTransform_inverse_0 = Module["_btTransform_inverse_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTransform_inverse_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTransform_op_mul_1 = Module["_btTransform_op_mul_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTransform_op_mul_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btTransform___destroy___0 = Module["_btTransform___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btTransform___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCylinderShape_btCylinderShape_1 = Module["_btCylinderShape_btCylinderShape_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCylinderShape_btCylinderShape_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCylinderShape_setMargin_1 = Module["_btCylinderShape_setMargin_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCylinderShape_setMargin_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCylinderShape_getMargin_0 = Module["_btCylinderShape_getMargin_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCylinderShape_getMargin_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCylinderShape_updateProp_3 = Module["_btCylinderShape_updateProp_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCylinderShape_updateProp_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCylinderShape_setLocalScaling_1 = Module["_btCylinderShape_setLocalScaling_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCylinderShape_setLocalScaling_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCylinderShape_getLocalScaling_0 = Module["_btCylinderShape_getLocalScaling_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCylinderShape_getLocalScaling_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCylinderShape_calculateLocalInertia_2 = Module["_btCylinderShape_calculateLocalInertia_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCylinderShape_calculateLocalInertia_2"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCylinderShape_isCompound_0 = Module["_btCylinderShape_isCompound_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCylinderShape_isCompound_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCylinderShape_getUserIndex_0 = Module["_btCylinderShape_getUserIndex_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCylinderShape_getUserIndex_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCylinderShape_setUserIndex_1 = Module["_btCylinderShape_setUserIndex_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCylinderShape_setUserIndex_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCylinderShape_getUserIndex2_0 = Module["_btCylinderShape_getUserIndex2_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCylinderShape_getUserIndex2_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCylinderShape_setUserIndex2_1 = Module["_btCylinderShape_setUserIndex2_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCylinderShape_setUserIndex2_1"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCylinderShape_getAabb_3 = Module["_btCylinderShape_getAabb_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCylinderShape_getAabb_3"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCylinderShape_getLocalBoundingSphere_0 = Module["_btCylinderShape_getLocalBoundingSphere_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCylinderShape_getLocalBoundingSphere_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCylinderShape_getImplicitShapeDimensions_0 = Module["_btCylinderShape_getImplicitShapeDimensions_0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCylinderShape_getImplicitShapeDimensions_0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btCylinderShape___destroy___0 = Module["_btCylinderShape___destroy___0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btCylinderShape___destroy___0"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConstraintParamsBT_CONSTRAINT_ERP = Module["_btConstraintParamsBT_CONSTRAINT_ERP"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConstraintParamsBT_CONSTRAINT_ERP"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConstraintParamsBT_CONSTRAINT_STOP_ERP = Module["_btConstraintParamsBT_CONSTRAINT_STOP_ERP"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConstraintParamsBT_CONSTRAINT_STOP_ERP"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConstraintParamsBT_CONSTRAINT_CFM = Module["_btConstraintParamsBT_CONSTRAINT_CFM"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConstraintParamsBT_CONSTRAINT_CFM"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _btConstraintParamsBT_CONSTRAINT_STOP_CFM = Module["_btConstraintParamsBT_CONSTRAINT_STOP_CFM"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["btConstraintParamsBT_CONSTRAINT_STOP_CFM"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _PHY_ScalarTypePHY_FLOAT = Module["_PHY_ScalarTypePHY_FLOAT"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["PHY_ScalarTypePHY_FLOAT"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _PHY_ScalarTypePHY_DOUBLE = Module["_PHY_ScalarTypePHY_DOUBLE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["PHY_ScalarTypePHY_DOUBLE"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _PHY_ScalarTypePHY_INTEGER = Module["_PHY_ScalarTypePHY_INTEGER"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["PHY_ScalarTypePHY_INTEGER"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _PHY_ScalarTypePHY_SHORT = Module["_PHY_ScalarTypePHY_SHORT"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["PHY_ScalarTypePHY_SHORT"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _PHY_ScalarTypePHY_FIXEDPOINT88 = Module["_PHY_ScalarTypePHY_FIXEDPOINT88"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["PHY_ScalarTypePHY_FIXEDPOINT88"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _PHY_ScalarTypePHY_UCHAR = Module["_PHY_ScalarTypePHY_UCHAR"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["PHY_ScalarTypePHY_UCHAR"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["malloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _free = Module["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["free"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__errno_location"].apply(null, arguments)
};

/** @type {function(...*):?} */
var _setThrew = Module["_setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setThrew"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ZSt18uncaught_exceptionv"].apply(null, arguments)
};

/** @type {function(...*):?} */
var ___set_stack_limit = Module["___set_stack_limit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__set_stack_limit"].apply(null, arguments)
};

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackSave"].apply(null, arguments)
};

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackAlloc"].apply(null, arguments)
};

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackRestore"].apply(null, arguments)
};

/** @type {function(...*):?} */
var __growWasmMemory = Module["__growWasmMemory"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__growWasmMemory"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_vi = Module["dynCall_vi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiii = Module["dynCall_iiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_ii = Module["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_vii = Module["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiii = Module["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iifif = Module["dynCall_iifif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iifif"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viii = Module["dynCall_viii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iii = Module["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_vif = Module["dynCall_vif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vif"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_fiii = Module["dynCall_fiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_fiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_v = Module["dynCall_v"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_v"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiii = Module["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiiif = Module["dynCall_viiiif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiif"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiif = Module["dynCall_viiif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiif"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viifi = Module["dynCall_viifi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viifi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_fiiiiiiiiii = Module["dynCall_fiiiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_fiiiiiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_fiiii = Module["dynCall_fiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_fiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_fiiiiiiiii = Module["dynCall_fiiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_fiiiiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiiiiiiii = Module["dynCall_iiiiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_fiiiii = Module["dynCall_fiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_fiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiii = Module["dynCall_iiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_fi = Module["dynCall_fi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_fi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_fif = Module["dynCall_fif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_fif"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_vifi = Module["dynCall_vifi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vifi"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiif = Module["dynCall_iiif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiif"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_fiifii = Module["dynCall_fiifii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_fiifii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viif = Module["dynCall_viif"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viif"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_fiiifii = Module["dynCall_fiiifii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_fiiifii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiiiii"].apply(null, arguments)
};

/** @type {function(...*):?} */
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiiii"].apply(null, arguments)
};



/**
 * @license
 * Copyright 2010 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getMemory")) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addRunDependency")) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "removeRunDependency")) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPath")) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDataFile")) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createPreloadedFile")) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLazyFile")) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_createDevice")) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "FS_unlink")) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addFunction"] = addFunction;
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortOnCannotGrowMemory")) Module["abortOnCannotGrowMemory"] = function() { abort("'abortOnCannotGrowMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setjmpId")) Module["setjmpId"] = function() { abort("'setjmpId' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "flush_NO_FILESYSTEM")) Module["flush_NO_FILESYSTEM"] = function() { abort("'flush_NO_FILESYSTEM' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
Module["abortStackOverflow"] = abortStackOverflow;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });



var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};





/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    readyPromiseResolve(Module);
    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = null;
    if (flush) flush();
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
    warnOnce('(this may also be due to not including full filesystem support - try building with -s FORCE_FILESYSTEM=1)');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
      readyPromiseReject(msg);
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}




// Bindings utilities

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function WrapperObject() {
}
WrapperObject.prototype = Object.create(WrapperObject.prototype);
WrapperObject.prototype.constructor = WrapperObject;
WrapperObject.prototype.__class__ = WrapperObject;
WrapperObject.__cache__ = {};
Module['WrapperObject'] = WrapperObject;

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant)
    @param {*=} __class__ */
function getCache(__class__) {
  return (__class__ || WrapperObject).__cache__;
}
Module['getCache'] = getCache;

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant)
    @param {*=} __class__ */
function wrapPointer(ptr, __class__) {
  var cache = getCache(__class__);
  var ret = cache[ptr];
  if (ret) return ret;
  ret = Object.create((__class__ || WrapperObject).prototype);
  ret.ptr = ptr;
  return cache[ptr] = ret;
}
Module['wrapPointer'] = wrapPointer;

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function castObject(obj, __class__) {
  return wrapPointer(obj.ptr, __class__);
}
Module['castObject'] = castObject;

Module['NULL'] = wrapPointer(0);

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function destroy(obj) {
  if (!obj['__destroy__']) throw 'Error: Cannot destroy object. (Did you create it yourself?)';
  obj['__destroy__']();
  // Remove from cache, so the object can be GC'd and refs added onto it released
  delete getCache(obj.__class__)[obj.ptr];
}
Module['destroy'] = destroy;

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function compare(obj1, obj2) {
  return obj1.ptr === obj2.ptr;
}
Module['compare'] = compare;

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function getPointer(obj) {
  return obj.ptr;
}
Module['getPointer'] = getPointer;

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function getClass(obj) {
  return obj.__class__;
}
Module['getClass'] = getClass;

// Converts big (string or array) values into a C-style storage, in temporary space

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
var ensureCache = {
  buffer: 0,  // the main buffer of temporary storage
  size: 0,   // the size of buffer
  pos: 0,    // the next free offset in buffer
  temps: [], // extra allocations
  needed: 0, // the total size we need next time

  prepare: function() {
    if (ensureCache.needed) {
      // clear the temps
      for (var i = 0; i < ensureCache.temps.length; i++) {
        Module['_free'](ensureCache.temps[i]);
      }
      ensureCache.temps.length = 0;
      // prepare to allocate a bigger buffer
      Module['_free'](ensureCache.buffer);
      ensureCache.buffer = 0;
      ensureCache.size += ensureCache.needed;
      // clean up
      ensureCache.needed = 0;
    }
    if (!ensureCache.buffer) { // happens first time, or when we need to grow
      ensureCache.size += 128; // heuristic, avoid many small grow events
      ensureCache.buffer = Module['_malloc'](ensureCache.size);
      assert(ensureCache.buffer);
    }
    ensureCache.pos = 0;
  },
  alloc: function(array, view) {
    assert(ensureCache.buffer);
    var bytes = view.BYTES_PER_ELEMENT;
    var len = array.length * bytes;
    len = (len + 7) & -8; // keep things aligned to 8 byte boundaries
    var ret;
    if (ensureCache.pos + len >= ensureCache.size) {
      // we failed to allocate in the buffer, ensureCache time around :(
      assert(len > 0); // null terminator, at least
      ensureCache.needed += len;
      ret = Module['_malloc'](len);
      ensureCache.temps.push(ret);
    } else {
      // we can allocate in the buffer
      ret = ensureCache.buffer + ensureCache.pos;
      ensureCache.pos += len;
    }
    return ret;
  },
  copy: function(array, view, offset) {
    offset >>>= 0;
    var bytes = view.BYTES_PER_ELEMENT;
    switch (bytes) {
      case 2: offset >>>= 1; break;
      case 4: offset >>>= 2; break;
      case 8: offset >>>= 3; break;
    }
    for (var i = 0; i < array.length; i++) {
      view[offset + i] = array[i];
    }
  },
};

/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function ensureString(value) {
  if (typeof value === 'string') {
    var intArray = intArrayFromString(value);
    var offset = ensureCache.alloc(intArray, HEAP8);
    ensureCache.copy(intArray, HEAP8, offset);
    return offset;
  }
  return value;
}
/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function ensureInt8(value) {
  if (typeof value === 'object') {
    var offset = ensureCache.alloc(value, HEAP8);
    ensureCache.copy(value, HEAP8, offset);
    return offset;
  }
  return value;
}
/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function ensureInt16(value) {
  if (typeof value === 'object') {
    var offset = ensureCache.alloc(value, HEAP16);
    ensureCache.copy(value, HEAP16, offset);
    return offset;
  }
  return value;
}
/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function ensureInt32(value) {
  if (typeof value === 'object') {
    var offset = ensureCache.alloc(value, HEAP32);
    ensureCache.copy(value, HEAP32, offset);
    return offset;
  }
  return value;
}
/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function ensureFloat32(value) {
  if (typeof value === 'object') {
    var offset = ensureCache.alloc(value, HEAPF32);
    ensureCache.copy(value, HEAPF32, offset);
    return offset;
  }
  return value;
}
/** @suppress {duplicate} (TODO: avoid emitting this multiple times, it is redundant) */
function ensureFloat64(value) {
  if (typeof value === 'object') {
    var offset = ensureCache.alloc(value, HEAPF64);
    ensureCache.copy(value, HEAPF64, offset);
    return offset;
  }
  return value;
}


// btCollisionShape
/** @suppress {undefinedVars, duplicate} @this{Object} */function btCollisionShape() { throw "cannot construct a btCollisionShape, no constructor in IDL" }
btCollisionShape.prototype = Object.create(WrapperObject.prototype);
btCollisionShape.prototype.constructor = btCollisionShape;
btCollisionShape.prototype.__class__ = btCollisionShape;
btCollisionShape.__cache__ = {};
Module['btCollisionShape'] = btCollisionShape;

btCollisionShape.prototype['setLocalScaling'] = btCollisionShape.prototype.setLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function(scaling) {
  var self = this.ptr;
  if (scaling && typeof scaling === 'object') scaling = scaling.ptr;
  _btCollisionShape_setLocalScaling_1(self, scaling);
};;

btCollisionShape.prototype['getLocalScaling'] = btCollisionShape.prototype.getLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btCollisionShape_getLocalScaling_0(self), btVector3);
};;

btCollisionShape.prototype['calculateLocalInertia'] = btCollisionShape.prototype.calculateLocalInertia = /** @suppress {undefinedVars, duplicate} @this{Object} */function(mass, inertia) {
  var self = this.ptr;
  if (mass && typeof mass === 'object') mass = mass.ptr;
  if (inertia && typeof inertia === 'object') inertia = inertia.ptr;
  _btCollisionShape_calculateLocalInertia_2(self, mass, inertia);
};;

btCollisionShape.prototype['setMargin'] = btCollisionShape.prototype.setMargin = /** @suppress {undefinedVars, duplicate} @this{Object} */function(margin) {
  var self = this.ptr;
  if (margin && typeof margin === 'object') margin = margin.ptr;
  _btCollisionShape_setMargin_1(self, margin);
};;

btCollisionShape.prototype['getMargin'] = btCollisionShape.prototype.getMargin = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btCollisionShape_getMargin_0(self);
};;

btCollisionShape.prototype['isCompound'] = btCollisionShape.prototype.isCompound = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btCollisionShape_isCompound_0(self));
};;

btCollisionShape.prototype['getUserIndex'] = btCollisionShape.prototype.getUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btCollisionShape_getUserIndex_0(self);
};;

btCollisionShape.prototype['setUserIndex'] = btCollisionShape.prototype.setUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btCollisionShape_setUserIndex_1(self, index);
};;

btCollisionShape.prototype['getUserIndex2'] = btCollisionShape.prototype.getUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btCollisionShape_getUserIndex2_0(self);
};;

btCollisionShape.prototype['setUserIndex2'] = btCollisionShape.prototype.setUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btCollisionShape_setUserIndex2_1(self, index);
};;

btCollisionShape.prototype['getAabb'] = btCollisionShape.prototype.getAabb = /** @suppress {undefinedVars, duplicate} @this{Object} */function(t, min, max) {
  var self = this.ptr;
  if (t && typeof t === 'object') t = t.ptr;
  if (min && typeof min === 'object') min = min.ptr;
  if (max && typeof max === 'object') max = max.ptr;
  _btCollisionShape_getAabb_3(self, t, min, max);
};;

btCollisionShape.prototype['getLocalBoundingSphere'] = btCollisionShape.prototype.getLocalBoundingSphere = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btCollisionShape_getLocalBoundingSphere_0(self);
};;

  btCollisionShape.prototype['__destroy__'] = btCollisionShape.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btCollisionShape___destroy___0(self);
};
// btCollisionWorld
/** @suppress {undefinedVars, duplicate} @this{Object} */function btCollisionWorld() { throw "cannot construct a btCollisionWorld, no constructor in IDL" }
btCollisionWorld.prototype = Object.create(WrapperObject.prototype);
btCollisionWorld.prototype.constructor = btCollisionWorld;
btCollisionWorld.prototype.__class__ = btCollisionWorld;
btCollisionWorld.__cache__ = {};
Module['btCollisionWorld'] = btCollisionWorld;

btCollisionWorld.prototype['rayTest'] = btCollisionWorld.prototype.rayTest = /** @suppress {undefinedVars, duplicate} @this{Object} */function(rayFromWorld, rayToWorld, resultCallback) {
  var self = this.ptr;
  if (rayFromWorld && typeof rayFromWorld === 'object') rayFromWorld = rayFromWorld.ptr;
  if (rayToWorld && typeof rayToWorld === 'object') rayToWorld = rayToWorld.ptr;
  if (resultCallback && typeof resultCallback === 'object') resultCallback = resultCallback.ptr;
  _btCollisionWorld_rayTest_3(self, rayFromWorld, rayToWorld, resultCallback);
};;

btCollisionWorld.prototype['rayTestSingle'] = btCollisionWorld.prototype.rayTestSingle = /** @suppress {undefinedVars, duplicate} @this{Object} */function(rayFromTrans, rayToTrans, collisionObject, collisionShape, colObjWorldTransform, resultCallback) {
  var self = this.ptr;
  if (rayFromTrans && typeof rayFromTrans === 'object') rayFromTrans = rayFromTrans.ptr;
  if (rayToTrans && typeof rayToTrans === 'object') rayToTrans = rayToTrans.ptr;
  if (collisionObject && typeof collisionObject === 'object') collisionObject = collisionObject.ptr;
  if (collisionShape && typeof collisionShape === 'object') collisionShape = collisionShape.ptr;
  if (colObjWorldTransform && typeof colObjWorldTransform === 'object') colObjWorldTransform = colObjWorldTransform.ptr;
  if (resultCallback && typeof resultCallback === 'object') resultCallback = resultCallback.ptr;
  _btCollisionWorld_rayTestSingle_6(self, rayFromTrans, rayToTrans, collisionObject, collisionShape, colObjWorldTransform, resultCallback);
};;

btCollisionWorld.prototype['getPairCache'] = btCollisionWorld.prototype.getPairCache = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btCollisionWorld_getPairCache_0(self), btOverlappingPairCache);
};;

btCollisionWorld.prototype['addCollisionObject'] = btCollisionWorld.prototype.addCollisionObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function(collisionObject, collisionFilterGroup, collisionFilterMask) {
  var self = this.ptr;
  if (collisionObject && typeof collisionObject === 'object') collisionObject = collisionObject.ptr;
  if (collisionFilterGroup && typeof collisionFilterGroup === 'object') collisionFilterGroup = collisionFilterGroup.ptr;
  if (collisionFilterMask && typeof collisionFilterMask === 'object') collisionFilterMask = collisionFilterMask.ptr;
  if (collisionFilterGroup === undefined) { _btCollisionWorld_addCollisionObject_1(self, collisionObject);  return }
  if (collisionFilterMask === undefined) { _btCollisionWorld_addCollisionObject_2(self, collisionObject, collisionFilterGroup);  return }
  _btCollisionWorld_addCollisionObject_3(self, collisionObject, collisionFilterGroup, collisionFilterMask);
};;

btCollisionWorld.prototype['removeCollisionObject'] = btCollisionWorld.prototype.removeCollisionObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function(collisionObject) {
  var self = this.ptr;
  if (collisionObject && typeof collisionObject === 'object') collisionObject = collisionObject.ptr;
  _btCollisionWorld_removeCollisionObject_1(self, collisionObject);
};;

btCollisionWorld.prototype['setContactBreakingThreshold'] = btCollisionWorld.prototype.setContactBreakingThreshold = /** @suppress {undefinedVars, duplicate} @this{Object} */function(b) {
  var self = this.ptr;
  if (b && typeof b === 'object') b = b.ptr;
  _btCollisionWorld_setContactBreakingThreshold_1(self, b);
};;

  btCollisionWorld.prototype['__destroy__'] = btCollisionWorld.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btCollisionWorld___destroy___0(self);
};
// btConvexShape
/** @suppress {undefinedVars, duplicate} @this{Object} */function btConvexShape() { throw "cannot construct a btConvexShape, no constructor in IDL" }
btConvexShape.prototype = Object.create(btCollisionShape.prototype);
btConvexShape.prototype.constructor = btConvexShape;
btConvexShape.prototype.__class__ = btConvexShape;
btConvexShape.__cache__ = {};
Module['btConvexShape'] = btConvexShape;

btConvexShape.prototype['setLocalScaling'] = btConvexShape.prototype.setLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function(scaling) {
  var self = this.ptr;
  if (scaling && typeof scaling === 'object') scaling = scaling.ptr;
  _btConvexShape_setLocalScaling_1(self, scaling);
};;

btConvexShape.prototype['getLocalScaling'] = btConvexShape.prototype.getLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btConvexShape_getLocalScaling_0(self), btVector3);
};;

btConvexShape.prototype['calculateLocalInertia'] = btConvexShape.prototype.calculateLocalInertia = /** @suppress {undefinedVars, duplicate} @this{Object} */function(mass, inertia) {
  var self = this.ptr;
  if (mass && typeof mass === 'object') mass = mass.ptr;
  if (inertia && typeof inertia === 'object') inertia = inertia.ptr;
  _btConvexShape_calculateLocalInertia_2(self, mass, inertia);
};;

btConvexShape.prototype['setMargin'] = btConvexShape.prototype.setMargin = /** @suppress {undefinedVars, duplicate} @this{Object} */function(margin) {
  var self = this.ptr;
  if (margin && typeof margin === 'object') margin = margin.ptr;
  _btConvexShape_setMargin_1(self, margin);
};;

btConvexShape.prototype['getMargin'] = btConvexShape.prototype.getMargin = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btConvexShape_getMargin_0(self);
};;

btConvexShape.prototype['isCompound'] = btConvexShape.prototype.isCompound = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btConvexShape_isCompound_0(self));
};;

btConvexShape.prototype['getUserIndex'] = btConvexShape.prototype.getUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btConvexShape_getUserIndex_0(self);
};;

btConvexShape.prototype['setUserIndex'] = btConvexShape.prototype.setUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btConvexShape_setUserIndex_1(self, index);
};;

btConvexShape.prototype['getUserIndex2'] = btConvexShape.prototype.getUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btConvexShape_getUserIndex2_0(self);
};;

btConvexShape.prototype['setUserIndex2'] = btConvexShape.prototype.setUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btConvexShape_setUserIndex2_1(self, index);
};;

btConvexShape.prototype['getAabb'] = btConvexShape.prototype.getAabb = /** @suppress {undefinedVars, duplicate} @this{Object} */function(t, min, max) {
  var self = this.ptr;
  if (t && typeof t === 'object') t = t.ptr;
  if (min && typeof min === 'object') min = min.ptr;
  if (max && typeof max === 'object') max = max.ptr;
  _btConvexShape_getAabb_3(self, t, min, max);
};;

btConvexShape.prototype['getLocalBoundingSphere'] = btConvexShape.prototype.getLocalBoundingSphere = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btConvexShape_getLocalBoundingSphere_0(self);
};;

  btConvexShape.prototype['__destroy__'] = btConvexShape.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btConvexShape___destroy___0(self);
};
// btDynamicsWorld
/** @suppress {undefinedVars, duplicate} @this{Object} */function btDynamicsWorld() { throw "cannot construct a btDynamicsWorld, no constructor in IDL" }
btDynamicsWorld.prototype = Object.create(btCollisionWorld.prototype);
btDynamicsWorld.prototype.constructor = btDynamicsWorld;
btDynamicsWorld.prototype.__class__ = btDynamicsWorld;
btDynamicsWorld.__cache__ = {};
Module['btDynamicsWorld'] = btDynamicsWorld;

btDynamicsWorld.prototype['addAction'] = btDynamicsWorld.prototype.addAction = /** @suppress {undefinedVars, duplicate} @this{Object} */function(action) {
  var self = this.ptr;
  if (action && typeof action === 'object') action = action.ptr;
  _btDynamicsWorld_addAction_1(self, action);
};;

btDynamicsWorld.prototype['removeAction'] = btDynamicsWorld.prototype.removeAction = /** @suppress {undefinedVars, duplicate} @this{Object} */function(action) {
  var self = this.ptr;
  if (action && typeof action === 'object') action = action.ptr;
  _btDynamicsWorld_removeAction_1(self, action);
};;

btDynamicsWorld.prototype['getSolverInfo'] = btDynamicsWorld.prototype.getSolverInfo = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btDynamicsWorld_getSolverInfo_0(self), btContactSolverInfo);
};;

btDynamicsWorld.prototype['getFixedBody'] = btDynamicsWorld.prototype.getFixedBody = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btDynamicsWorld_getFixedBody_0(self), btRigidBody);
};;

btDynamicsWorld.prototype['rayTest'] = btDynamicsWorld.prototype.rayTest = /** @suppress {undefinedVars, duplicate} @this{Object} */function(rayFromWorld, rayToWorld, resultCallback) {
  var self = this.ptr;
  if (rayFromWorld && typeof rayFromWorld === 'object') rayFromWorld = rayFromWorld.ptr;
  if (rayToWorld && typeof rayToWorld === 'object') rayToWorld = rayToWorld.ptr;
  if (resultCallback && typeof resultCallback === 'object') resultCallback = resultCallback.ptr;
  _btDynamicsWorld_rayTest_3(self, rayFromWorld, rayToWorld, resultCallback);
};;

btDynamicsWorld.prototype['rayTestSingle'] = btDynamicsWorld.prototype.rayTestSingle = /** @suppress {undefinedVars, duplicate} @this{Object} */function(rayFromTrans, rayToTrans, collisionObject, collisionShape, colObjWorldTransform, resultCallback) {
  var self = this.ptr;
  if (rayFromTrans && typeof rayFromTrans === 'object') rayFromTrans = rayFromTrans.ptr;
  if (rayToTrans && typeof rayToTrans === 'object') rayToTrans = rayToTrans.ptr;
  if (collisionObject && typeof collisionObject === 'object') collisionObject = collisionObject.ptr;
  if (collisionShape && typeof collisionShape === 'object') collisionShape = collisionShape.ptr;
  if (colObjWorldTransform && typeof colObjWorldTransform === 'object') colObjWorldTransform = colObjWorldTransform.ptr;
  if (resultCallback && typeof resultCallback === 'object') resultCallback = resultCallback.ptr;
  _btDynamicsWorld_rayTestSingle_6(self, rayFromTrans, rayToTrans, collisionObject, collisionShape, colObjWorldTransform, resultCallback);
};;

btDynamicsWorld.prototype['getPairCache'] = btDynamicsWorld.prototype.getPairCache = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btDynamicsWorld_getPairCache_0(self), btOverlappingPairCache);
};;

btDynamicsWorld.prototype['addCollisionObject'] = btDynamicsWorld.prototype.addCollisionObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function(collisionObject, collisionFilterGroup, collisionFilterMask) {
  var self = this.ptr;
  if (collisionObject && typeof collisionObject === 'object') collisionObject = collisionObject.ptr;
  if (collisionFilterGroup && typeof collisionFilterGroup === 'object') collisionFilterGroup = collisionFilterGroup.ptr;
  if (collisionFilterMask && typeof collisionFilterMask === 'object') collisionFilterMask = collisionFilterMask.ptr;
  if (collisionFilterGroup === undefined) { _btDynamicsWorld_addCollisionObject_1(self, collisionObject);  return }
  if (collisionFilterMask === undefined) { _btDynamicsWorld_addCollisionObject_2(self, collisionObject, collisionFilterGroup);  return }
  _btDynamicsWorld_addCollisionObject_3(self, collisionObject, collisionFilterGroup, collisionFilterMask);
};;

btDynamicsWorld.prototype['removeCollisionObject'] = btDynamicsWorld.prototype.removeCollisionObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function(collisionObject) {
  var self = this.ptr;
  if (collisionObject && typeof collisionObject === 'object') collisionObject = collisionObject.ptr;
  _btDynamicsWorld_removeCollisionObject_1(self, collisionObject);
};;

btDynamicsWorld.prototype['setContactBreakingThreshold'] = btDynamicsWorld.prototype.setContactBreakingThreshold = /** @suppress {undefinedVars, duplicate} @this{Object} */function(b) {
  var self = this.ptr;
  if (b && typeof b === 'object') b = b.ptr;
  _btDynamicsWorld_setContactBreakingThreshold_1(self, b);
};;

  btDynamicsWorld.prototype['__destroy__'] = btDynamicsWorld.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btDynamicsWorld___destroy___0(self);
};
// RayResultCallback
/** @suppress {undefinedVars, duplicate} @this{Object} */function RayResultCallback() { throw "cannot construct a RayResultCallback, no constructor in IDL" }
RayResultCallback.prototype = Object.create(WrapperObject.prototype);
RayResultCallback.prototype.constructor = RayResultCallback;
RayResultCallback.prototype.__class__ = RayResultCallback;
RayResultCallback.__cache__ = {};
Module['RayResultCallback'] = RayResultCallback;

RayResultCallback.prototype['hasHit'] = RayResultCallback.prototype.hasHit = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_RayResultCallback_hasHit_0(self));
};;

  RayResultCallback.prototype['get_m_collisionFilterGroup'] = RayResultCallback.prototype.get_m_collisionFilterGroup = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _RayResultCallback_get_m_collisionFilterGroup_0(self);
};
    RayResultCallback.prototype['set_m_collisionFilterGroup'] = RayResultCallback.prototype.set_m_collisionFilterGroup = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _RayResultCallback_set_m_collisionFilterGroup_1(self, arg0);
};
    Object.defineProperty(RayResultCallback.prototype, 'm_collisionFilterGroup', { get: RayResultCallback.prototype.get_m_collisionFilterGroup, set: RayResultCallback.prototype.set_m_collisionFilterGroup });
  RayResultCallback.prototype['get_m_collisionFilterMask'] = RayResultCallback.prototype.get_m_collisionFilterMask = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _RayResultCallback_get_m_collisionFilterMask_0(self);
};
    RayResultCallback.prototype['set_m_collisionFilterMask'] = RayResultCallback.prototype.set_m_collisionFilterMask = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _RayResultCallback_set_m_collisionFilterMask_1(self, arg0);
};
    Object.defineProperty(RayResultCallback.prototype, 'm_collisionFilterMask', { get: RayResultCallback.prototype.get_m_collisionFilterMask, set: RayResultCallback.prototype.set_m_collisionFilterMask });
  RayResultCallback.prototype['get_m_closestHitFraction'] = RayResultCallback.prototype.get_m_closestHitFraction = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _RayResultCallback_get_m_closestHitFraction_0(self);
};
    RayResultCallback.prototype['set_m_closestHitFraction'] = RayResultCallback.prototype.set_m_closestHitFraction = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _RayResultCallback_set_m_closestHitFraction_1(self, arg0);
};
    Object.defineProperty(RayResultCallback.prototype, 'm_closestHitFraction', { get: RayResultCallback.prototype.get_m_closestHitFraction, set: RayResultCallback.prototype.set_m_closestHitFraction });
  RayResultCallback.prototype['get_m_collisionObject'] = RayResultCallback.prototype.get_m_collisionObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_RayResultCallback_get_m_collisionObject_0(self), btCollisionObject);
};
    RayResultCallback.prototype['set_m_collisionObject'] = RayResultCallback.prototype.set_m_collisionObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _RayResultCallback_set_m_collisionObject_1(self, arg0);
};
    Object.defineProperty(RayResultCallback.prototype, 'm_collisionObject', { get: RayResultCallback.prototype.get_m_collisionObject, set: RayResultCallback.prototype.set_m_collisionObject });
  RayResultCallback.prototype['__destroy__'] = RayResultCallback.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _RayResultCallback___destroy___0(self);
};
// btConcaveShape
/** @suppress {undefinedVars, duplicate} @this{Object} */function btConcaveShape() { throw "cannot construct a btConcaveShape, no constructor in IDL" }
btConcaveShape.prototype = Object.create(btCollisionShape.prototype);
btConcaveShape.prototype.constructor = btConcaveShape;
btConcaveShape.prototype.__class__ = btConcaveShape;
btConcaveShape.__cache__ = {};
Module['btConcaveShape'] = btConcaveShape;

btConcaveShape.prototype['setLocalScaling'] = btConcaveShape.prototype.setLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function(scaling) {
  var self = this.ptr;
  if (scaling && typeof scaling === 'object') scaling = scaling.ptr;
  _btConcaveShape_setLocalScaling_1(self, scaling);
};;

btConcaveShape.prototype['getLocalScaling'] = btConcaveShape.prototype.getLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btConcaveShape_getLocalScaling_0(self), btVector3);
};;

btConcaveShape.prototype['calculateLocalInertia'] = btConcaveShape.prototype.calculateLocalInertia = /** @suppress {undefinedVars, duplicate} @this{Object} */function(mass, inertia) {
  var self = this.ptr;
  if (mass && typeof mass === 'object') mass = mass.ptr;
  if (inertia && typeof inertia === 'object') inertia = inertia.ptr;
  _btConcaveShape_calculateLocalInertia_2(self, mass, inertia);
};;

btConcaveShape.prototype['isCompound'] = btConcaveShape.prototype.isCompound = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btConcaveShape_isCompound_0(self));
};;

btConcaveShape.prototype['getUserIndex'] = btConcaveShape.prototype.getUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btConcaveShape_getUserIndex_0(self);
};;

btConcaveShape.prototype['setUserIndex'] = btConcaveShape.prototype.setUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btConcaveShape_setUserIndex_1(self, index);
};;

btConcaveShape.prototype['getUserIndex2'] = btConcaveShape.prototype.getUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btConcaveShape_getUserIndex2_0(self);
};;

btConcaveShape.prototype['setUserIndex2'] = btConcaveShape.prototype.setUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btConcaveShape_setUserIndex2_1(self, index);
};;

btConcaveShape.prototype['getAabb'] = btConcaveShape.prototype.getAabb = /** @suppress {undefinedVars, duplicate} @this{Object} */function(t, min, max) {
  var self = this.ptr;
  if (t && typeof t === 'object') t = t.ptr;
  if (min && typeof min === 'object') min = min.ptr;
  if (max && typeof max === 'object') max = max.ptr;
  _btConcaveShape_getAabb_3(self, t, min, max);
};;

btConcaveShape.prototype['getLocalBoundingSphere'] = btConcaveShape.prototype.getLocalBoundingSphere = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btConcaveShape_getLocalBoundingSphere_0(self);
};;

  btConcaveShape.prototype['__destroy__'] = btConcaveShape.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btConcaveShape___destroy___0(self);
};
// btStridingMeshInterface
/** @suppress {undefinedVars, duplicate} @this{Object} */function btStridingMeshInterface() { throw "cannot construct a btStridingMeshInterface, no constructor in IDL" }
btStridingMeshInterface.prototype = Object.create(WrapperObject.prototype);
btStridingMeshInterface.prototype.constructor = btStridingMeshInterface;
btStridingMeshInterface.prototype.__class__ = btStridingMeshInterface;
btStridingMeshInterface.__cache__ = {};
Module['btStridingMeshInterface'] = btStridingMeshInterface;

btStridingMeshInterface.prototype['setScaling'] = btStridingMeshInterface.prototype.setScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function(scaling) {
  var self = this.ptr;
  if (scaling && typeof scaling === 'object') scaling = scaling.ptr;
  _btStridingMeshInterface_setScaling_1(self, scaling);
};;

  btStridingMeshInterface.prototype['__destroy__'] = btStridingMeshInterface.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btStridingMeshInterface___destroy___0(self);
};
// btBroadphaseInterface
/** @suppress {undefinedVars, duplicate} @this{Object} */function btBroadphaseInterface() { throw "cannot construct a btBroadphaseInterface, no constructor in IDL" }
btBroadphaseInterface.prototype = Object.create(WrapperObject.prototype);
btBroadphaseInterface.prototype.constructor = btBroadphaseInterface;
btBroadphaseInterface.prototype.__class__ = btBroadphaseInterface;
btBroadphaseInterface.__cache__ = {};
Module['btBroadphaseInterface'] = btBroadphaseInterface;

btBroadphaseInterface.prototype['getOverlappingPairCache'] = btBroadphaseInterface.prototype.getOverlappingPairCache = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btBroadphaseInterface_getOverlappingPairCache_0(self), btOverlappingPairCache);
};;

  btBroadphaseInterface.prototype['__destroy__'] = btBroadphaseInterface.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btBroadphaseInterface___destroy___0(self);
};
// btCollisionObject
/** @suppress {undefinedVars, duplicate} @this{Object} */function btCollisionObject() {
  this.ptr = _btCollisionObject_btCollisionObject_0();
  getCache(btCollisionObject)[this.ptr] = this;
};;
btCollisionObject.prototype = Object.create(WrapperObject.prototype);
btCollisionObject.prototype.constructor = btCollisionObject;
btCollisionObject.prototype.__class__ = btCollisionObject;
btCollisionObject.__cache__ = {};
Module['btCollisionObject'] = btCollisionObject;

btCollisionObject.prototype['getCollisionShape'] = btCollisionObject.prototype.getCollisionShape = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btCollisionObject_getCollisionShape_0(self), btCollisionShape);
};;

btCollisionObject.prototype['getActivationState'] = btCollisionObject.prototype.getActivationState = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btCollisionObject_getActivationState_0(self);
};;

btCollisionObject.prototype['setActivationState'] = btCollisionObject.prototype.setActivationState = /** @suppress {undefinedVars, duplicate} @this{Object} */function(newState) {
  var self = this.ptr;
  if (newState && typeof newState === 'object') newState = newState.ptr;
  _btCollisionObject_setActivationState_1(self, newState);
};;

btCollisionObject.prototype['forceActivationState'] = btCollisionObject.prototype.forceActivationState = /** @suppress {undefinedVars, duplicate} @this{Object} */function(newState) {
  var self = this.ptr;
  if (newState && typeof newState === 'object') newState = newState.ptr;
  _btCollisionObject_forceActivationState_1(self, newState);
};;

btCollisionObject.prototype['activate'] = btCollisionObject.prototype.activate = /** @suppress {undefinedVars, duplicate} @this{Object} */function(forceActivation) {
  var self = this.ptr;
  if (forceActivation && typeof forceActivation === 'object') forceActivation = forceActivation.ptr;
  if (forceActivation === undefined) { _btCollisionObject_activate_0(self);  return }
  _btCollisionObject_activate_1(self, forceActivation);
};;

btCollisionObject.prototype['isActive'] = btCollisionObject.prototype.isActive = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btCollisionObject_isActive_0(self));
};;

btCollisionObject.prototype['isKinematicObject'] = btCollisionObject.prototype.isKinematicObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btCollisionObject_isKinematicObject_0(self));
};;

btCollisionObject.prototype['isStaticObject'] = btCollisionObject.prototype.isStaticObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btCollisionObject_isStaticObject_0(self));
};;

btCollisionObject.prototype['isStaticOrKinematicObject'] = btCollisionObject.prototype.isStaticOrKinematicObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btCollisionObject_isStaticOrKinematicObject_0(self));
};;

btCollisionObject.prototype['setRestitution'] = btCollisionObject.prototype.setRestitution = /** @suppress {undefinedVars, duplicate} @this{Object} */function(r) {
  var self = this.ptr;
  if (r && typeof r === 'object') r = r.ptr;
  _btCollisionObject_setRestitution_1(self, r);
};;

btCollisionObject.prototype['setFriction'] = btCollisionObject.prototype.setFriction = /** @suppress {undefinedVars, duplicate} @this{Object} */function(f) {
  var self = this.ptr;
  if (f && typeof f === 'object') f = f.ptr;
  _btCollisionObject_setFriction_1(self, f);
};;

btCollisionObject.prototype['setRollingFriction'] = btCollisionObject.prototype.setRollingFriction = /** @suppress {undefinedVars, duplicate} @this{Object} */function(rf) {
  var self = this.ptr;
  if (rf && typeof rf === 'object') rf = rf.ptr;
  _btCollisionObject_setRollingFriction_1(self, rf);
};;

btCollisionObject.prototype['setSpinningFriction'] = btCollisionObject.prototype.setSpinningFriction = /** @suppress {undefinedVars, duplicate} @this{Object} */function(sf) {
  var self = this.ptr;
  if (sf && typeof sf === 'object') sf = sf.ptr;
  _btCollisionObject_setSpinningFriction_1(self, sf);
};;

btCollisionObject.prototype['getWorldTransform'] = btCollisionObject.prototype.getWorldTransform = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btCollisionObject_getWorldTransform_0(self), btTransform);
};;

btCollisionObject.prototype['getCollisionFlags'] = btCollisionObject.prototype.getCollisionFlags = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btCollisionObject_getCollisionFlags_0(self);
};;

btCollisionObject.prototype['setCollisionFlags'] = btCollisionObject.prototype.setCollisionFlags = /** @suppress {undefinedVars, duplicate} @this{Object} */function(flags) {
  var self = this.ptr;
  if (flags && typeof flags === 'object') flags = flags.ptr;
  _btCollisionObject_setCollisionFlags_1(self, flags);
};;

btCollisionObject.prototype['setWorldTransform'] = btCollisionObject.prototype.setWorldTransform = /** @suppress {undefinedVars, duplicate} @this{Object} */function(worldTrans) {
  var self = this.ptr;
  if (worldTrans && typeof worldTrans === 'object') worldTrans = worldTrans.ptr;
  _btCollisionObject_setWorldTransform_1(self, worldTrans);
};;

btCollisionObject.prototype['setCollisionShape'] = btCollisionObject.prototype.setCollisionShape = /** @suppress {undefinedVars, duplicate} @this{Object} */function(collisionShape) {
  var self = this.ptr;
  if (collisionShape && typeof collisionShape === 'object') collisionShape = collisionShape.ptr;
  _btCollisionObject_setCollisionShape_1(self, collisionShape);
};;

btCollisionObject.prototype['setCcdMotionThreshold'] = btCollisionObject.prototype.setCcdMotionThreshold = /** @suppress {undefinedVars, duplicate} @this{Object} */function(ccdMotionThreshold) {
  var self = this.ptr;
  if (ccdMotionThreshold && typeof ccdMotionThreshold === 'object') ccdMotionThreshold = ccdMotionThreshold.ptr;
  _btCollisionObject_setCcdMotionThreshold_1(self, ccdMotionThreshold);
};;

btCollisionObject.prototype['setCcdSweptSphereRadius'] = btCollisionObject.prototype.setCcdSweptSphereRadius = /** @suppress {undefinedVars, duplicate} @this{Object} */function(radius) {
  var self = this.ptr;
  if (radius && typeof radius === 'object') radius = radius.ptr;
  _btCollisionObject_setCcdSweptSphereRadius_1(self, radius);
};;

btCollisionObject.prototype['getUserIndex'] = btCollisionObject.prototype.getUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btCollisionObject_getUserIndex_0(self);
};;

btCollisionObject.prototype['setUserIndex'] = btCollisionObject.prototype.setUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btCollisionObject_setUserIndex_1(self, index);
};;

btCollisionObject.prototype['setUserIndex2'] = btCollisionObject.prototype.setUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btCollisionObject_setUserIndex2_1(self, index);
};;

btCollisionObject.prototype['setIgnoreCollisionCheck'] = btCollisionObject.prototype.setIgnoreCollisionCheck = /** @suppress {undefinedVars, duplicate} @this{Object} */function(co, ig) {
  var self = this.ptr;
  if (co && typeof co === 'object') co = co.ptr;
  if (ig && typeof ig === 'object') ig = ig.ptr;
  _btCollisionObject_setIgnoreCollisionCheck_2(self, co, ig);
};;

  btCollisionObject.prototype['__destroy__'] = btCollisionObject.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btCollisionObject___destroy___0(self);
};
// btDiscreteDynamicsWorld
/** @suppress {undefinedVars, duplicate} @this{Object} */function btDiscreteDynamicsWorld(dispatcher, pairCache, constraintSolver, collisionConfiguration) {
  if (dispatcher && typeof dispatcher === 'object') dispatcher = dispatcher.ptr;
  if (pairCache && typeof pairCache === 'object') pairCache = pairCache.ptr;
  if (constraintSolver && typeof constraintSolver === 'object') constraintSolver = constraintSolver.ptr;
  if (collisionConfiguration && typeof collisionConfiguration === 'object') collisionConfiguration = collisionConfiguration.ptr;
  this.ptr = _btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4(dispatcher, pairCache, constraintSolver, collisionConfiguration);
  getCache(btDiscreteDynamicsWorld)[this.ptr] = this;
};;
btDiscreteDynamicsWorld.prototype = Object.create(btDynamicsWorld.prototype);
btDiscreteDynamicsWorld.prototype.constructor = btDiscreteDynamicsWorld;
btDiscreteDynamicsWorld.prototype.__class__ = btDiscreteDynamicsWorld;
btDiscreteDynamicsWorld.__cache__ = {};
Module['btDiscreteDynamicsWorld'] = btDiscreteDynamicsWorld;

btDiscreteDynamicsWorld.prototype['setGravity'] = btDiscreteDynamicsWorld.prototype.setGravity = /** @suppress {undefinedVars, duplicate} @this{Object} */function(gravity) {
  var self = this.ptr;
  if (gravity && typeof gravity === 'object') gravity = gravity.ptr;
  _btDiscreteDynamicsWorld_setGravity_1(self, gravity);
};;

btDiscreteDynamicsWorld.prototype['getGravity'] = btDiscreteDynamicsWorld.prototype.getGravity = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btDiscreteDynamicsWorld_getGravity_0(self), btVector3);
};;

btDiscreteDynamicsWorld.prototype['addRigidBody'] = btDiscreteDynamicsWorld.prototype.addRigidBody = /** @suppress {undefinedVars, duplicate} @this{Object} */function(body, group, mask) {
  var self = this.ptr;
  if (body && typeof body === 'object') body = body.ptr;
  if (group && typeof group === 'object') group = group.ptr;
  if (mask && typeof mask === 'object') mask = mask.ptr;
  if (group === undefined) { _btDiscreteDynamicsWorld_addRigidBody_1(self, body);  return }
  if (mask === undefined) { _btDiscreteDynamicsWorld_addRigidBody_2(self, body, group);  return }
  _btDiscreteDynamicsWorld_addRigidBody_3(self, body, group, mask);
};;

btDiscreteDynamicsWorld.prototype['removeRigidBody'] = btDiscreteDynamicsWorld.prototype.removeRigidBody = /** @suppress {undefinedVars, duplicate} @this{Object} */function(body) {
  var self = this.ptr;
  if (body && typeof body === 'object') body = body.ptr;
  _btDiscreteDynamicsWorld_removeRigidBody_1(self, body);
};;

btDiscreteDynamicsWorld.prototype['addConstraint'] = btDiscreteDynamicsWorld.prototype.addConstraint = /** @suppress {undefinedVars, duplicate} @this{Object} */function(constraint, disableCollisionsBetweenLinkedBodies) {
  var self = this.ptr;
  if (constraint && typeof constraint === 'object') constraint = constraint.ptr;
  if (disableCollisionsBetweenLinkedBodies && typeof disableCollisionsBetweenLinkedBodies === 'object') disableCollisionsBetweenLinkedBodies = disableCollisionsBetweenLinkedBodies.ptr;
  if (disableCollisionsBetweenLinkedBodies === undefined) { _btDiscreteDynamicsWorld_addConstraint_1(self, constraint);  return }
  _btDiscreteDynamicsWorld_addConstraint_2(self, constraint, disableCollisionsBetweenLinkedBodies);
};;

btDiscreteDynamicsWorld.prototype['removeConstraint'] = btDiscreteDynamicsWorld.prototype.removeConstraint = /** @suppress {undefinedVars, duplicate} @this{Object} */function(constraint) {
  var self = this.ptr;
  if (constraint && typeof constraint === 'object') constraint = constraint.ptr;
  _btDiscreteDynamicsWorld_removeConstraint_1(self, constraint);
};;

btDiscreteDynamicsWorld.prototype['stepSimulation'] = btDiscreteDynamicsWorld.prototype.stepSimulation = /** @suppress {undefinedVars, duplicate} @this{Object} */function(timeStep, maxSubSteps, fixedTimeStep) {
  var self = this.ptr;
  if (timeStep && typeof timeStep === 'object') timeStep = timeStep.ptr;
  if (maxSubSteps && typeof maxSubSteps === 'object') maxSubSteps = maxSubSteps.ptr;
  if (fixedTimeStep && typeof fixedTimeStep === 'object') fixedTimeStep = fixedTimeStep.ptr;
  if (maxSubSteps === undefined) { return _btDiscreteDynamicsWorld_stepSimulation_1(self, timeStep) }
  if (fixedTimeStep === undefined) { return _btDiscreteDynamicsWorld_stepSimulation_2(self, timeStep, maxSubSteps) }
  return _btDiscreteDynamicsWorld_stepSimulation_3(self, timeStep, maxSubSteps, fixedTimeStep);
};;

btDiscreteDynamicsWorld.prototype['rayTest'] = btDiscreteDynamicsWorld.prototype.rayTest = /** @suppress {undefinedVars, duplicate} @this{Object} */function(rayFromWorld, rayToWorld, resultCallback) {
  var self = this.ptr;
  if (rayFromWorld && typeof rayFromWorld === 'object') rayFromWorld = rayFromWorld.ptr;
  if (rayToWorld && typeof rayToWorld === 'object') rayToWorld = rayToWorld.ptr;
  if (resultCallback && typeof resultCallback === 'object') resultCallback = resultCallback.ptr;
  _btDiscreteDynamicsWorld_rayTest_3(self, rayFromWorld, rayToWorld, resultCallback);
};;

btDiscreteDynamicsWorld.prototype['rayTestSingle'] = btDiscreteDynamicsWorld.prototype.rayTestSingle = /** @suppress {undefinedVars, duplicate} @this{Object} */function(rayFromTrans, rayToTrans, collisionObject, collisionShape, colObjWorldTransform, resultCallback) {
  var self = this.ptr;
  if (rayFromTrans && typeof rayFromTrans === 'object') rayFromTrans = rayFromTrans.ptr;
  if (rayToTrans && typeof rayToTrans === 'object') rayToTrans = rayToTrans.ptr;
  if (collisionObject && typeof collisionObject === 'object') collisionObject = collisionObject.ptr;
  if (collisionShape && typeof collisionShape === 'object') collisionShape = collisionShape.ptr;
  if (colObjWorldTransform && typeof colObjWorldTransform === 'object') colObjWorldTransform = colObjWorldTransform.ptr;
  if (resultCallback && typeof resultCallback === 'object') resultCallback = resultCallback.ptr;
  _btDiscreteDynamicsWorld_rayTestSingle_6(self, rayFromTrans, rayToTrans, collisionObject, collisionShape, colObjWorldTransform, resultCallback);
};;

btDiscreteDynamicsWorld.prototype['getPairCache'] = btDiscreteDynamicsWorld.prototype.getPairCache = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btDiscreteDynamicsWorld_getPairCache_0(self), btOverlappingPairCache);
};;

btDiscreteDynamicsWorld.prototype['addCollisionObject'] = btDiscreteDynamicsWorld.prototype.addCollisionObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function(collisionObject, collisionFilterGroup, collisionFilterMask) {
  var self = this.ptr;
  if (collisionObject && typeof collisionObject === 'object') collisionObject = collisionObject.ptr;
  if (collisionFilterGroup && typeof collisionFilterGroup === 'object') collisionFilterGroup = collisionFilterGroup.ptr;
  if (collisionFilterMask && typeof collisionFilterMask === 'object') collisionFilterMask = collisionFilterMask.ptr;
  if (collisionFilterGroup === undefined) { _btDiscreteDynamicsWorld_addCollisionObject_1(self, collisionObject);  return }
  if (collisionFilterMask === undefined) { _btDiscreteDynamicsWorld_addCollisionObject_2(self, collisionObject, collisionFilterGroup);  return }
  _btDiscreteDynamicsWorld_addCollisionObject_3(self, collisionObject, collisionFilterGroup, collisionFilterMask);
};;

btDiscreteDynamicsWorld.prototype['removeCollisionObject'] = btDiscreteDynamicsWorld.prototype.removeCollisionObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function(collisionObject) {
  var self = this.ptr;
  if (collisionObject && typeof collisionObject === 'object') collisionObject = collisionObject.ptr;
  _btDiscreteDynamicsWorld_removeCollisionObject_1(self, collisionObject);
};;

btDiscreteDynamicsWorld.prototype['setContactBreakingThreshold'] = btDiscreteDynamicsWorld.prototype.setContactBreakingThreshold = /** @suppress {undefinedVars, duplicate} @this{Object} */function(b) {
  var self = this.ptr;
  if (b && typeof b === 'object') b = b.ptr;
  _btDiscreteDynamicsWorld_setContactBreakingThreshold_1(self, b);
};;

btDiscreteDynamicsWorld.prototype['addAction'] = btDiscreteDynamicsWorld.prototype.addAction = /** @suppress {undefinedVars, duplicate} @this{Object} */function(action) {
  var self = this.ptr;
  if (action && typeof action === 'object') action = action.ptr;
  _btDiscreteDynamicsWorld_addAction_1(self, action);
};;

btDiscreteDynamicsWorld.prototype['removeAction'] = btDiscreteDynamicsWorld.prototype.removeAction = /** @suppress {undefinedVars, duplicate} @this{Object} */function(action) {
  var self = this.ptr;
  if (action && typeof action === 'object') action = action.ptr;
  _btDiscreteDynamicsWorld_removeAction_1(self, action);
};;

btDiscreteDynamicsWorld.prototype['getSolverInfo'] = btDiscreteDynamicsWorld.prototype.getSolverInfo = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btDiscreteDynamicsWorld_getSolverInfo_0(self), btContactSolverInfo);
};;

btDiscreteDynamicsWorld.prototype['getFixedBody'] = btDiscreteDynamicsWorld.prototype.getFixedBody = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btDiscreteDynamicsWorld_getFixedBody_0(self), btRigidBody);
};;

  btDiscreteDynamicsWorld.prototype['__destroy__'] = btDiscreteDynamicsWorld.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btDiscreteDynamicsWorld___destroy___0(self);
};
// btMotionState
/** @suppress {undefinedVars, duplicate} @this{Object} */function btMotionState() { throw "cannot construct a btMotionState, no constructor in IDL" }
btMotionState.prototype = Object.create(WrapperObject.prototype);
btMotionState.prototype.constructor = btMotionState;
btMotionState.prototype.__class__ = btMotionState;
btMotionState.__cache__ = {};
Module['btMotionState'] = btMotionState;

btMotionState.prototype['getWorldTransform'] = btMotionState.prototype.getWorldTransform = /** @suppress {undefinedVars, duplicate} @this{Object} */function(worldTrans) {
  var self = this.ptr;
  if (worldTrans && typeof worldTrans === 'object') worldTrans = worldTrans.ptr;
  _btMotionState_getWorldTransform_1(self, worldTrans);
};;

btMotionState.prototype['setWorldTransform'] = btMotionState.prototype.setWorldTransform = /** @suppress {undefinedVars, duplicate} @this{Object} */function(worldTrans) {
  var self = this.ptr;
  if (worldTrans && typeof worldTrans === 'object') worldTrans = worldTrans.ptr;
  _btMotionState_setWorldTransform_1(self, worldTrans);
};;

  btMotionState.prototype['__destroy__'] = btMotionState.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btMotionState___destroy___0(self);
};
// btConvexInternalShape
/** @suppress {undefinedVars, duplicate} @this{Object} */function btConvexInternalShape() { throw "cannot construct a btConvexInternalShape, no constructor in IDL" }
btConvexInternalShape.prototype = Object.create(btConvexShape.prototype);
btConvexInternalShape.prototype.constructor = btConvexInternalShape;
btConvexInternalShape.prototype.__class__ = btConvexInternalShape;
btConvexInternalShape.__cache__ = {};
Module['btConvexInternalShape'] = btConvexInternalShape;

btConvexInternalShape.prototype['getImplicitShapeDimensions'] = btConvexInternalShape.prototype.getImplicitShapeDimensions = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btConvexInternalShape_getImplicitShapeDimensions_0(self), btVector3);
};;

btConvexInternalShape.prototype['setLocalScaling'] = btConvexInternalShape.prototype.setLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function(scaling) {
  var self = this.ptr;
  if (scaling && typeof scaling === 'object') scaling = scaling.ptr;
  _btConvexInternalShape_setLocalScaling_1(self, scaling);
};;

btConvexInternalShape.prototype['getLocalScaling'] = btConvexInternalShape.prototype.getLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btConvexInternalShape_getLocalScaling_0(self), btVector3);
};;

btConvexInternalShape.prototype['calculateLocalInertia'] = btConvexInternalShape.prototype.calculateLocalInertia = /** @suppress {undefinedVars, duplicate} @this{Object} */function(mass, inertia) {
  var self = this.ptr;
  if (mass && typeof mass === 'object') mass = mass.ptr;
  if (inertia && typeof inertia === 'object') inertia = inertia.ptr;
  _btConvexInternalShape_calculateLocalInertia_2(self, mass, inertia);
};;

btConvexInternalShape.prototype['setMargin'] = btConvexInternalShape.prototype.setMargin = /** @suppress {undefinedVars, duplicate} @this{Object} */function(margin) {
  var self = this.ptr;
  if (margin && typeof margin === 'object') margin = margin.ptr;
  _btConvexInternalShape_setMargin_1(self, margin);
};;

btConvexInternalShape.prototype['getMargin'] = btConvexInternalShape.prototype.getMargin = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btConvexInternalShape_getMargin_0(self);
};;

btConvexInternalShape.prototype['isCompound'] = btConvexInternalShape.prototype.isCompound = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btConvexInternalShape_isCompound_0(self));
};;

btConvexInternalShape.prototype['getUserIndex'] = btConvexInternalShape.prototype.getUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btConvexInternalShape_getUserIndex_0(self);
};;

btConvexInternalShape.prototype['setUserIndex'] = btConvexInternalShape.prototype.setUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btConvexInternalShape_setUserIndex_1(self, index);
};;

btConvexInternalShape.prototype['getUserIndex2'] = btConvexInternalShape.prototype.getUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btConvexInternalShape_getUserIndex2_0(self);
};;

btConvexInternalShape.prototype['setUserIndex2'] = btConvexInternalShape.prototype.setUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btConvexInternalShape_setUserIndex2_1(self, index);
};;

btConvexInternalShape.prototype['getAabb'] = btConvexInternalShape.prototype.getAabb = /** @suppress {undefinedVars, duplicate} @this{Object} */function(t, min, max) {
  var self = this.ptr;
  if (t && typeof t === 'object') t = t.ptr;
  if (min && typeof min === 'object') min = min.ptr;
  if (max && typeof max === 'object') max = max.ptr;
  _btConvexInternalShape_getAabb_3(self, t, min, max);
};;

btConvexInternalShape.prototype['getLocalBoundingSphere'] = btConvexInternalShape.prototype.getLocalBoundingSphere = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btConvexInternalShape_getLocalBoundingSphere_0(self);
};;

  btConvexInternalShape.prototype['__destroy__'] = btConvexInternalShape.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btConvexInternalShape___destroy___0(self);
};
// AllHitsRayResultCallback
/** @suppress {undefinedVars, duplicate} @this{Object} */function AllHitsRayResultCallback(from, to) {
  if (from && typeof from === 'object') from = from.ptr;
  if (to && typeof to === 'object') to = to.ptr;
  this.ptr = _AllHitsRayResultCallback_AllHitsRayResultCallback_2(from, to);
  getCache(AllHitsRayResultCallback)[this.ptr] = this;
};;
AllHitsRayResultCallback.prototype = Object.create(RayResultCallback.prototype);
AllHitsRayResultCallback.prototype.constructor = AllHitsRayResultCallback;
AllHitsRayResultCallback.prototype.__class__ = AllHitsRayResultCallback;
AllHitsRayResultCallback.__cache__ = {};
Module['AllHitsRayResultCallback'] = AllHitsRayResultCallback;

AllHitsRayResultCallback.prototype['hasHit'] = AllHitsRayResultCallback.prototype.hasHit = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_AllHitsRayResultCallback_hasHit_0(self));
};;

  AllHitsRayResultCallback.prototype['get_m_collisionObjects'] = AllHitsRayResultCallback.prototype.get_m_collisionObjects = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_AllHitsRayResultCallback_get_m_collisionObjects_0(self), btConstCollisionObjectArray);
};
    AllHitsRayResultCallback.prototype['set_m_collisionObjects'] = AllHitsRayResultCallback.prototype.set_m_collisionObjects = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _AllHitsRayResultCallback_set_m_collisionObjects_1(self, arg0);
};
    Object.defineProperty(AllHitsRayResultCallback.prototype, 'm_collisionObjects', { get: AllHitsRayResultCallback.prototype.get_m_collisionObjects, set: AllHitsRayResultCallback.prototype.set_m_collisionObjects });
  AllHitsRayResultCallback.prototype['get_m_rayFromWorld'] = AllHitsRayResultCallback.prototype.get_m_rayFromWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_AllHitsRayResultCallback_get_m_rayFromWorld_0(self), btVector3);
};
    AllHitsRayResultCallback.prototype['set_m_rayFromWorld'] = AllHitsRayResultCallback.prototype.set_m_rayFromWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _AllHitsRayResultCallback_set_m_rayFromWorld_1(self, arg0);
};
    Object.defineProperty(AllHitsRayResultCallback.prototype, 'm_rayFromWorld', { get: AllHitsRayResultCallback.prototype.get_m_rayFromWorld, set: AllHitsRayResultCallback.prototype.set_m_rayFromWorld });
  AllHitsRayResultCallback.prototype['get_m_rayToWorld'] = AllHitsRayResultCallback.prototype.get_m_rayToWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_AllHitsRayResultCallback_get_m_rayToWorld_0(self), btVector3);
};
    AllHitsRayResultCallback.prototype['set_m_rayToWorld'] = AllHitsRayResultCallback.prototype.set_m_rayToWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _AllHitsRayResultCallback_set_m_rayToWorld_1(self, arg0);
};
    Object.defineProperty(AllHitsRayResultCallback.prototype, 'm_rayToWorld', { get: AllHitsRayResultCallback.prototype.get_m_rayToWorld, set: AllHitsRayResultCallback.prototype.set_m_rayToWorld });
  AllHitsRayResultCallback.prototype['get_m_hitNormalWorld'] = AllHitsRayResultCallback.prototype.get_m_hitNormalWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_AllHitsRayResultCallback_get_m_hitNormalWorld_0(self), btVector3Array);
};
    AllHitsRayResultCallback.prototype['set_m_hitNormalWorld'] = AllHitsRayResultCallback.prototype.set_m_hitNormalWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _AllHitsRayResultCallback_set_m_hitNormalWorld_1(self, arg0);
};
    Object.defineProperty(AllHitsRayResultCallback.prototype, 'm_hitNormalWorld', { get: AllHitsRayResultCallback.prototype.get_m_hitNormalWorld, set: AllHitsRayResultCallback.prototype.set_m_hitNormalWorld });
  AllHitsRayResultCallback.prototype['get_m_hitPointWorld'] = AllHitsRayResultCallback.prototype.get_m_hitPointWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_AllHitsRayResultCallback_get_m_hitPointWorld_0(self), btVector3Array);
};
    AllHitsRayResultCallback.prototype['set_m_hitPointWorld'] = AllHitsRayResultCallback.prototype.set_m_hitPointWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _AllHitsRayResultCallback_set_m_hitPointWorld_1(self, arg0);
};
    Object.defineProperty(AllHitsRayResultCallback.prototype, 'm_hitPointWorld', { get: AllHitsRayResultCallback.prototype.get_m_hitPointWorld, set: AllHitsRayResultCallback.prototype.set_m_hitPointWorld });
  AllHitsRayResultCallback.prototype['get_m_hitFractions'] = AllHitsRayResultCallback.prototype.get_m_hitFractions = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_AllHitsRayResultCallback_get_m_hitFractions_0(self), btScalarArray);
};
    AllHitsRayResultCallback.prototype['set_m_hitFractions'] = AllHitsRayResultCallback.prototype.set_m_hitFractions = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _AllHitsRayResultCallback_set_m_hitFractions_1(self, arg0);
};
    Object.defineProperty(AllHitsRayResultCallback.prototype, 'm_hitFractions', { get: AllHitsRayResultCallback.prototype.get_m_hitFractions, set: AllHitsRayResultCallback.prototype.set_m_hitFractions });
  AllHitsRayResultCallback.prototype['get_m_collisionFilterGroup'] = AllHitsRayResultCallback.prototype.get_m_collisionFilterGroup = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _AllHitsRayResultCallback_get_m_collisionFilterGroup_0(self);
};
    AllHitsRayResultCallback.prototype['set_m_collisionFilterGroup'] = AllHitsRayResultCallback.prototype.set_m_collisionFilterGroup = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _AllHitsRayResultCallback_set_m_collisionFilterGroup_1(self, arg0);
};
    Object.defineProperty(AllHitsRayResultCallback.prototype, 'm_collisionFilterGroup', { get: AllHitsRayResultCallback.prototype.get_m_collisionFilterGroup, set: AllHitsRayResultCallback.prototype.set_m_collisionFilterGroup });
  AllHitsRayResultCallback.prototype['get_m_collisionFilterMask'] = AllHitsRayResultCallback.prototype.get_m_collisionFilterMask = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _AllHitsRayResultCallback_get_m_collisionFilterMask_0(self);
};
    AllHitsRayResultCallback.prototype['set_m_collisionFilterMask'] = AllHitsRayResultCallback.prototype.set_m_collisionFilterMask = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _AllHitsRayResultCallback_set_m_collisionFilterMask_1(self, arg0);
};
    Object.defineProperty(AllHitsRayResultCallback.prototype, 'm_collisionFilterMask', { get: AllHitsRayResultCallback.prototype.get_m_collisionFilterMask, set: AllHitsRayResultCallback.prototype.set_m_collisionFilterMask });
  AllHitsRayResultCallback.prototype['get_m_closestHitFraction'] = AllHitsRayResultCallback.prototype.get_m_closestHitFraction = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _AllHitsRayResultCallback_get_m_closestHitFraction_0(self);
};
    AllHitsRayResultCallback.prototype['set_m_closestHitFraction'] = AllHitsRayResultCallback.prototype.set_m_closestHitFraction = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _AllHitsRayResultCallback_set_m_closestHitFraction_1(self, arg0);
};
    Object.defineProperty(AllHitsRayResultCallback.prototype, 'm_closestHitFraction', { get: AllHitsRayResultCallback.prototype.get_m_closestHitFraction, set: AllHitsRayResultCallback.prototype.set_m_closestHitFraction });
  AllHitsRayResultCallback.prototype['get_m_collisionObject'] = AllHitsRayResultCallback.prototype.get_m_collisionObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_AllHitsRayResultCallback_get_m_collisionObject_0(self), btCollisionObject);
};
    AllHitsRayResultCallback.prototype['set_m_collisionObject'] = AllHitsRayResultCallback.prototype.set_m_collisionObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _AllHitsRayResultCallback_set_m_collisionObject_1(self, arg0);
};
    Object.defineProperty(AllHitsRayResultCallback.prototype, 'm_collisionObject', { get: AllHitsRayResultCallback.prototype.get_m_collisionObject, set: AllHitsRayResultCallback.prototype.set_m_collisionObject });
  AllHitsRayResultCallback.prototype['__destroy__'] = AllHitsRayResultCallback.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _AllHitsRayResultCallback___destroy___0(self);
};
// btDispatcher
/** @suppress {undefinedVars, duplicate} @this{Object} */function btDispatcher() { throw "cannot construct a btDispatcher, no constructor in IDL" }
btDispatcher.prototype = Object.create(WrapperObject.prototype);
btDispatcher.prototype.constructor = btDispatcher;
btDispatcher.prototype.__class__ = btDispatcher;
btDispatcher.__cache__ = {};
Module['btDispatcher'] = btDispatcher;

btDispatcher.prototype['getNumManifolds'] = btDispatcher.prototype.getNumManifolds = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btDispatcher_getNumManifolds_0(self);
};;

btDispatcher.prototype['getManifoldByIndexInternal'] = btDispatcher.prototype.getManifoldByIndexInternal = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return wrapPointer(_btDispatcher_getManifoldByIndexInternal_1(self, index), btPersistentManifold);
};;

  btDispatcher.prototype['__destroy__'] = btDispatcher.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btDispatcher___destroy___0(self);
};
// ClosestRayResultCallback
/** @suppress {undefinedVars, duplicate} @this{Object} */function ClosestRayResultCallback(from, to) {
  if (from && typeof from === 'object') from = from.ptr;
  if (to && typeof to === 'object') to = to.ptr;
  this.ptr = _ClosestRayResultCallback_ClosestRayResultCallback_2(from, to);
  getCache(ClosestRayResultCallback)[this.ptr] = this;
};;
ClosestRayResultCallback.prototype = Object.create(RayResultCallback.prototype);
ClosestRayResultCallback.prototype.constructor = ClosestRayResultCallback;
ClosestRayResultCallback.prototype.__class__ = ClosestRayResultCallback;
ClosestRayResultCallback.__cache__ = {};
Module['ClosestRayResultCallback'] = ClosestRayResultCallback;

ClosestRayResultCallback.prototype['hasHit'] = ClosestRayResultCallback.prototype.hasHit = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_ClosestRayResultCallback_hasHit_0(self));
};;

  ClosestRayResultCallback.prototype['get_m_rayFromWorld'] = ClosestRayResultCallback.prototype.get_m_rayFromWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ClosestRayResultCallback_get_m_rayFromWorld_0(self), btVector3);
};
    ClosestRayResultCallback.prototype['set_m_rayFromWorld'] = ClosestRayResultCallback.prototype.set_m_rayFromWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ClosestRayResultCallback_set_m_rayFromWorld_1(self, arg0);
};
    Object.defineProperty(ClosestRayResultCallback.prototype, 'm_rayFromWorld', { get: ClosestRayResultCallback.prototype.get_m_rayFromWorld, set: ClosestRayResultCallback.prototype.set_m_rayFromWorld });
  ClosestRayResultCallback.prototype['get_m_rayToWorld'] = ClosestRayResultCallback.prototype.get_m_rayToWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ClosestRayResultCallback_get_m_rayToWorld_0(self), btVector3);
};
    ClosestRayResultCallback.prototype['set_m_rayToWorld'] = ClosestRayResultCallback.prototype.set_m_rayToWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ClosestRayResultCallback_set_m_rayToWorld_1(self, arg0);
};
    Object.defineProperty(ClosestRayResultCallback.prototype, 'm_rayToWorld', { get: ClosestRayResultCallback.prototype.get_m_rayToWorld, set: ClosestRayResultCallback.prototype.set_m_rayToWorld });
  ClosestRayResultCallback.prototype['get_m_hitNormalWorld'] = ClosestRayResultCallback.prototype.get_m_hitNormalWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ClosestRayResultCallback_get_m_hitNormalWorld_0(self), btVector3);
};
    ClosestRayResultCallback.prototype['set_m_hitNormalWorld'] = ClosestRayResultCallback.prototype.set_m_hitNormalWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ClosestRayResultCallback_set_m_hitNormalWorld_1(self, arg0);
};
    Object.defineProperty(ClosestRayResultCallback.prototype, 'm_hitNormalWorld', { get: ClosestRayResultCallback.prototype.get_m_hitNormalWorld, set: ClosestRayResultCallback.prototype.set_m_hitNormalWorld });
  ClosestRayResultCallback.prototype['get_m_hitPointWorld'] = ClosestRayResultCallback.prototype.get_m_hitPointWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ClosestRayResultCallback_get_m_hitPointWorld_0(self), btVector3);
};
    ClosestRayResultCallback.prototype['set_m_hitPointWorld'] = ClosestRayResultCallback.prototype.set_m_hitPointWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ClosestRayResultCallback_set_m_hitPointWorld_1(self, arg0);
};
    Object.defineProperty(ClosestRayResultCallback.prototype, 'm_hitPointWorld', { get: ClosestRayResultCallback.prototype.get_m_hitPointWorld, set: ClosestRayResultCallback.prototype.set_m_hitPointWorld });
  ClosestRayResultCallback.prototype['get_m_collisionFilterGroup'] = ClosestRayResultCallback.prototype.get_m_collisionFilterGroup = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _ClosestRayResultCallback_get_m_collisionFilterGroup_0(self);
};
    ClosestRayResultCallback.prototype['set_m_collisionFilterGroup'] = ClosestRayResultCallback.prototype.set_m_collisionFilterGroup = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ClosestRayResultCallback_set_m_collisionFilterGroup_1(self, arg0);
};
    Object.defineProperty(ClosestRayResultCallback.prototype, 'm_collisionFilterGroup', { get: ClosestRayResultCallback.prototype.get_m_collisionFilterGroup, set: ClosestRayResultCallback.prototype.set_m_collisionFilterGroup });
  ClosestRayResultCallback.prototype['get_m_collisionFilterMask'] = ClosestRayResultCallback.prototype.get_m_collisionFilterMask = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _ClosestRayResultCallback_get_m_collisionFilterMask_0(self);
};
    ClosestRayResultCallback.prototype['set_m_collisionFilterMask'] = ClosestRayResultCallback.prototype.set_m_collisionFilterMask = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ClosestRayResultCallback_set_m_collisionFilterMask_1(self, arg0);
};
    Object.defineProperty(ClosestRayResultCallback.prototype, 'm_collisionFilterMask', { get: ClosestRayResultCallback.prototype.get_m_collisionFilterMask, set: ClosestRayResultCallback.prototype.set_m_collisionFilterMask });
  ClosestRayResultCallback.prototype['get_m_closestHitFraction'] = ClosestRayResultCallback.prototype.get_m_closestHitFraction = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _ClosestRayResultCallback_get_m_closestHitFraction_0(self);
};
    ClosestRayResultCallback.prototype['set_m_closestHitFraction'] = ClosestRayResultCallback.prototype.set_m_closestHitFraction = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ClosestRayResultCallback_set_m_closestHitFraction_1(self, arg0);
};
    Object.defineProperty(ClosestRayResultCallback.prototype, 'm_closestHitFraction', { get: ClosestRayResultCallback.prototype.get_m_closestHitFraction, set: ClosestRayResultCallback.prototype.set_m_closestHitFraction });
  ClosestRayResultCallback.prototype['get_m_collisionObject'] = ClosestRayResultCallback.prototype.get_m_collisionObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ClosestRayResultCallback_get_m_collisionObject_0(self), btCollisionObject);
};
    ClosestRayResultCallback.prototype['set_m_collisionObject'] = ClosestRayResultCallback.prototype.set_m_collisionObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ClosestRayResultCallback_set_m_collisionObject_1(self, arg0);
};
    Object.defineProperty(ClosestRayResultCallback.prototype, 'm_collisionObject', { get: ClosestRayResultCallback.prototype.get_m_collisionObject, set: ClosestRayResultCallback.prototype.set_m_collisionObject });
  ClosestRayResultCallback.prototype['__destroy__'] = ClosestRayResultCallback.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _ClosestRayResultCallback___destroy___0(self);
};
// btTriangleMeshShape
/** @suppress {undefinedVars, duplicate} @this{Object} */function btTriangleMeshShape() { throw "cannot construct a btTriangleMeshShape, no constructor in IDL" }
btTriangleMeshShape.prototype = Object.create(btConcaveShape.prototype);
btTriangleMeshShape.prototype.constructor = btTriangleMeshShape;
btTriangleMeshShape.prototype.__class__ = btTriangleMeshShape;
btTriangleMeshShape.__cache__ = {};
Module['btTriangleMeshShape'] = btTriangleMeshShape;

btTriangleMeshShape.prototype['setLocalScaling'] = btTriangleMeshShape.prototype.setLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function(scaling) {
  var self = this.ptr;
  if (scaling && typeof scaling === 'object') scaling = scaling.ptr;
  _btTriangleMeshShape_setLocalScaling_1(self, scaling);
};;

btTriangleMeshShape.prototype['getLocalScaling'] = btTriangleMeshShape.prototype.getLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btTriangleMeshShape_getLocalScaling_0(self), btVector3);
};;

btTriangleMeshShape.prototype['calculateLocalInertia'] = btTriangleMeshShape.prototype.calculateLocalInertia = /** @suppress {undefinedVars, duplicate} @this{Object} */function(mass, inertia) {
  var self = this.ptr;
  if (mass && typeof mass === 'object') mass = mass.ptr;
  if (inertia && typeof inertia === 'object') inertia = inertia.ptr;
  _btTriangleMeshShape_calculateLocalInertia_2(self, mass, inertia);
};;

btTriangleMeshShape.prototype['isCompound'] = btTriangleMeshShape.prototype.isCompound = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btTriangleMeshShape_isCompound_0(self));
};;

btTriangleMeshShape.prototype['getUserIndex'] = btTriangleMeshShape.prototype.getUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btTriangleMeshShape_getUserIndex_0(self);
};;

btTriangleMeshShape.prototype['setUserIndex'] = btTriangleMeshShape.prototype.setUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btTriangleMeshShape_setUserIndex_1(self, index);
};;

btTriangleMeshShape.prototype['getUserIndex2'] = btTriangleMeshShape.prototype.getUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btTriangleMeshShape_getUserIndex2_0(self);
};;

btTriangleMeshShape.prototype['setUserIndex2'] = btTriangleMeshShape.prototype.setUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btTriangleMeshShape_setUserIndex2_1(self, index);
};;

btTriangleMeshShape.prototype['getAabb'] = btTriangleMeshShape.prototype.getAabb = /** @suppress {undefinedVars, duplicate} @this{Object} */function(t, min, max) {
  var self = this.ptr;
  if (t && typeof t === 'object') t = t.ptr;
  if (min && typeof min === 'object') min = min.ptr;
  if (max && typeof max === 'object') max = max.ptr;
  _btTriangleMeshShape_getAabb_3(self, t, min, max);
};;

btTriangleMeshShape.prototype['getLocalBoundingSphere'] = btTriangleMeshShape.prototype.getLocalBoundingSphere = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btTriangleMeshShape_getLocalBoundingSphere_0(self);
};;

  btTriangleMeshShape.prototype['__destroy__'] = btTriangleMeshShape.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btTriangleMeshShape___destroy___0(self);
};
// btOverlapFilterCallback
/** @suppress {undefinedVars, duplicate} @this{Object} */function btOverlapFilterCallback() { throw "cannot construct a btOverlapFilterCallback, no constructor in IDL" }
btOverlapFilterCallback.prototype = Object.create(WrapperObject.prototype);
btOverlapFilterCallback.prototype.constructor = btOverlapFilterCallback;
btOverlapFilterCallback.prototype.__class__ = btOverlapFilterCallback;
btOverlapFilterCallback.__cache__ = {};
Module['btOverlapFilterCallback'] = btOverlapFilterCallback;

  btOverlapFilterCallback.prototype['__destroy__'] = btOverlapFilterCallback.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btOverlapFilterCallback___destroy___0(self);
};
// btQuadWord
/** @suppress {undefinedVars, duplicate} @this{Object} */function btQuadWord() { throw "cannot construct a btQuadWord, no constructor in IDL" }
btQuadWord.prototype = Object.create(WrapperObject.prototype);
btQuadWord.prototype.constructor = btQuadWord;
btQuadWord.prototype.__class__ = btQuadWord;
btQuadWord.__cache__ = {};
Module['btQuadWord'] = btQuadWord;

btQuadWord.prototype['x'] = btQuadWord.prototype.x = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btQuadWord_x_0(self);
};;

btQuadWord.prototype['y'] = btQuadWord.prototype.y = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btQuadWord_y_0(self);
};;

btQuadWord.prototype['z'] = btQuadWord.prototype.z = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btQuadWord_z_0(self);
};;

btQuadWord.prototype['w'] = btQuadWord.prototype.w = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btQuadWord_w_0(self);
};;

btQuadWord.prototype['setX'] = btQuadWord.prototype.setX = /** @suppress {undefinedVars, duplicate} @this{Object} */function(x) {
  var self = this.ptr;
  if (x && typeof x === 'object') x = x.ptr;
  _btQuadWord_setX_1(self, x);
};;

btQuadWord.prototype['setY'] = btQuadWord.prototype.setY = /** @suppress {undefinedVars, duplicate} @this{Object} */function(y) {
  var self = this.ptr;
  if (y && typeof y === 'object') y = y.ptr;
  _btQuadWord_setY_1(self, y);
};;

btQuadWord.prototype['setZ'] = btQuadWord.prototype.setZ = /** @suppress {undefinedVars, duplicate} @this{Object} */function(z) {
  var self = this.ptr;
  if (z && typeof z === 'object') z = z.ptr;
  _btQuadWord_setZ_1(self, z);
};;

btQuadWord.prototype['setW'] = btQuadWord.prototype.setW = /** @suppress {undefinedVars, duplicate} @this{Object} */function(w) {
  var self = this.ptr;
  if (w && typeof w === 'object') w = w.ptr;
  _btQuadWord_setW_1(self, w);
};;

  btQuadWord.prototype['__destroy__'] = btQuadWord.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btQuadWord___destroy___0(self);
};
// btTypedConstraint
/** @suppress {undefinedVars, duplicate} @this{Object} */function btTypedConstraint() { throw "cannot construct a btTypedConstraint, no constructor in IDL" }
btTypedConstraint.prototype = Object.create(WrapperObject.prototype);
btTypedConstraint.prototype.constructor = btTypedConstraint;
btTypedConstraint.prototype.__class__ = btTypedConstraint;
btTypedConstraint.__cache__ = {};
Module['btTypedConstraint'] = btTypedConstraint;

btTypedConstraint.prototype['enableFeedback'] = btTypedConstraint.prototype.enableFeedback = /** @suppress {undefinedVars, duplicate} @this{Object} */function(needsFeedback) {
  var self = this.ptr;
  if (needsFeedback && typeof needsFeedback === 'object') needsFeedback = needsFeedback.ptr;
  _btTypedConstraint_enableFeedback_1(self, needsFeedback);
};;

btTypedConstraint.prototype['getBreakingImpulseThreshold'] = btTypedConstraint.prototype.getBreakingImpulseThreshold = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btTypedConstraint_getBreakingImpulseThreshold_0(self);
};;

btTypedConstraint.prototype['setBreakingImpulseThreshold'] = btTypedConstraint.prototype.setBreakingImpulseThreshold = /** @suppress {undefinedVars, duplicate} @this{Object} */function(threshold) {
  var self = this.ptr;
  if (threshold && typeof threshold === 'object') threshold = threshold.ptr;
  _btTypedConstraint_setBreakingImpulseThreshold_1(self, threshold);
};;

btTypedConstraint.prototype['getParam'] = btTypedConstraint.prototype.getParam = /** @suppress {undefinedVars, duplicate} @this{Object} */function(num, axis) {
  var self = this.ptr;
  if (num && typeof num === 'object') num = num.ptr;
  if (axis && typeof axis === 'object') axis = axis.ptr;
  return _btTypedConstraint_getParam_2(self, num, axis);
};;

btTypedConstraint.prototype['setParam'] = btTypedConstraint.prototype.setParam = /** @suppress {undefinedVars, duplicate} @this{Object} */function(num, value, axis) {
  var self = this.ptr;
  if (num && typeof num === 'object') num = num.ptr;
  if (value && typeof value === 'object') value = value.ptr;
  if (axis && typeof axis === 'object') axis = axis.ptr;
  _btTypedConstraint_setParam_3(self, num, value, axis);
};;

  btTypedConstraint.prototype['__destroy__'] = btTypedConstraint.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btTypedConstraint___destroy___0(self);
};
// btMatrix3x3
/** @suppress {undefinedVars, duplicate} @this{Object} */function btMatrix3x3() { throw "cannot construct a btMatrix3x3, no constructor in IDL" }
btMatrix3x3.prototype = Object.create(WrapperObject.prototype);
btMatrix3x3.prototype.constructor = btMatrix3x3;
btMatrix3x3.prototype.__class__ = btMatrix3x3;
btMatrix3x3.__cache__ = {};
Module['btMatrix3x3'] = btMatrix3x3;

btMatrix3x3.prototype['getRotation'] = btMatrix3x3.prototype.getRotation = /** @suppress {undefinedVars, duplicate} @this{Object} */function(q) {
  var self = this.ptr;
  if (q && typeof q === 'object') q = q.ptr;
  _btMatrix3x3_getRotation_1(self, q);
};;

  btMatrix3x3.prototype['__destroy__'] = btMatrix3x3.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btMatrix3x3___destroy___0(self);
};
// btScalarArray
/** @suppress {undefinedVars, duplicate} @this{Object} */function btScalarArray() { throw "cannot construct a btScalarArray, no constructor in IDL" }
btScalarArray.prototype = Object.create(WrapperObject.prototype);
btScalarArray.prototype.constructor = btScalarArray;
btScalarArray.prototype.__class__ = btScalarArray;
btScalarArray.__cache__ = {};
Module['btScalarArray'] = btScalarArray;

btScalarArray.prototype['size'] = btScalarArray.prototype.size = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btScalarArray_size_0(self);
};;

btScalarArray.prototype['at'] = btScalarArray.prototype.at = /** @suppress {undefinedVars, duplicate} @this{Object} */function(n) {
  var self = this.ptr;
  if (n && typeof n === 'object') n = n.ptr;
  return _btScalarArray_at_1(self, n);
};;

btScalarArray.prototype['clear'] = btScalarArray.prototype.clear = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btScalarArray_clear_0(self);
};;

  btScalarArray.prototype['__destroy__'] = btScalarArray.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btScalarArray___destroy___0(self);
};
// btBvhTriangleMeshShape
/** @suppress {undefinedVars, duplicate} @this{Object} */function btBvhTriangleMeshShape(meshInterface, useQuantizedAabbCompression, buildBvh) {
  if (meshInterface && typeof meshInterface === 'object') meshInterface = meshInterface.ptr;
  if (useQuantizedAabbCompression && typeof useQuantizedAabbCompression === 'object') useQuantizedAabbCompression = useQuantizedAabbCompression.ptr;
  if (buildBvh && typeof buildBvh === 'object') buildBvh = buildBvh.ptr;
  if (buildBvh === undefined) { this.ptr = _btBvhTriangleMeshShape_btBvhTriangleMeshShape_2(meshInterface, useQuantizedAabbCompression); getCache(btBvhTriangleMeshShape)[this.ptr] = this;return }
  this.ptr = _btBvhTriangleMeshShape_btBvhTriangleMeshShape_3(meshInterface, useQuantizedAabbCompression, buildBvh);
  getCache(btBvhTriangleMeshShape)[this.ptr] = this;
};;
btBvhTriangleMeshShape.prototype = Object.create(btTriangleMeshShape.prototype);
btBvhTriangleMeshShape.prototype.constructor = btBvhTriangleMeshShape;
btBvhTriangleMeshShape.prototype.__class__ = btBvhTriangleMeshShape;
btBvhTriangleMeshShape.__cache__ = {};
Module['btBvhTriangleMeshShape'] = btBvhTriangleMeshShape;

btBvhTriangleMeshShape.prototype['setLocalScaling'] = btBvhTriangleMeshShape.prototype.setLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function(scaling) {
  var self = this.ptr;
  if (scaling && typeof scaling === 'object') scaling = scaling.ptr;
  _btBvhTriangleMeshShape_setLocalScaling_1(self, scaling);
};;

btBvhTriangleMeshShape.prototype['getLocalScaling'] = btBvhTriangleMeshShape.prototype.getLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btBvhTriangleMeshShape_getLocalScaling_0(self), btVector3);
};;

btBvhTriangleMeshShape.prototype['calculateLocalInertia'] = btBvhTriangleMeshShape.prototype.calculateLocalInertia = /** @suppress {undefinedVars, duplicate} @this{Object} */function(mass, inertia) {
  var self = this.ptr;
  if (mass && typeof mass === 'object') mass = mass.ptr;
  if (inertia && typeof inertia === 'object') inertia = inertia.ptr;
  _btBvhTriangleMeshShape_calculateLocalInertia_2(self, mass, inertia);
};;

btBvhTriangleMeshShape.prototype['isCompound'] = btBvhTriangleMeshShape.prototype.isCompound = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btBvhTriangleMeshShape_isCompound_0(self));
};;

btBvhTriangleMeshShape.prototype['getUserIndex'] = btBvhTriangleMeshShape.prototype.getUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btBvhTriangleMeshShape_getUserIndex_0(self);
};;

btBvhTriangleMeshShape.prototype['setUserIndex'] = btBvhTriangleMeshShape.prototype.setUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btBvhTriangleMeshShape_setUserIndex_1(self, index);
};;

btBvhTriangleMeshShape.prototype['getUserIndex2'] = btBvhTriangleMeshShape.prototype.getUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btBvhTriangleMeshShape_getUserIndex2_0(self);
};;

btBvhTriangleMeshShape.prototype['setUserIndex2'] = btBvhTriangleMeshShape.prototype.setUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btBvhTriangleMeshShape_setUserIndex2_1(self, index);
};;

btBvhTriangleMeshShape.prototype['getAabb'] = btBvhTriangleMeshShape.prototype.getAabb = /** @suppress {undefinedVars, duplicate} @this{Object} */function(t, min, max) {
  var self = this.ptr;
  if (t && typeof t === 'object') t = t.ptr;
  if (min && typeof min === 'object') min = min.ptr;
  if (max && typeof max === 'object') max = max.ptr;
  _btBvhTriangleMeshShape_getAabb_3(self, t, min, max);
};;

btBvhTriangleMeshShape.prototype['getLocalBoundingSphere'] = btBvhTriangleMeshShape.prototype.getLocalBoundingSphere = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btBvhTriangleMeshShape_getLocalBoundingSphere_0(self);
};;

  btBvhTriangleMeshShape.prototype['__destroy__'] = btBvhTriangleMeshShape.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btBvhTriangleMeshShape___destroy___0(self);
};
// btDbvtBroadphase
/** @suppress {undefinedVars, duplicate} @this{Object} */function btDbvtBroadphase() {
  this.ptr = _btDbvtBroadphase_btDbvtBroadphase_0();
  getCache(btDbvtBroadphase)[this.ptr] = this;
};;
btDbvtBroadphase.prototype = Object.create(btBroadphaseInterface.prototype);
btDbvtBroadphase.prototype.constructor = btDbvtBroadphase;
btDbvtBroadphase.prototype.__class__ = btDbvtBroadphase;
btDbvtBroadphase.__cache__ = {};
Module['btDbvtBroadphase'] = btDbvtBroadphase;

btDbvtBroadphase.prototype['getOverlappingPairCache'] = btDbvtBroadphase.prototype.getOverlappingPairCache = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btDbvtBroadphase_getOverlappingPairCache_0(self), btOverlappingPairCache);
};;

  btDbvtBroadphase.prototype['__destroy__'] = btDbvtBroadphase.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btDbvtBroadphase___destroy___0(self);
};
// btIntArray
/** @suppress {undefinedVars, duplicate} @this{Object} */function btIntArray() { throw "cannot construct a btIntArray, no constructor in IDL" }
btIntArray.prototype = Object.create(WrapperObject.prototype);
btIntArray.prototype.constructor = btIntArray;
btIntArray.prototype.__class__ = btIntArray;
btIntArray.__cache__ = {};
Module['btIntArray'] = btIntArray;

btIntArray.prototype['size'] = btIntArray.prototype.size = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btIntArray_size_0(self);
};;

btIntArray.prototype['at'] = btIntArray.prototype.at = /** @suppress {undefinedVars, duplicate} @this{Object} */function(n) {
  var self = this.ptr;
  if (n && typeof n === 'object') n = n.ptr;
  return _btIntArray_at_1(self, n);
};;

btIntArray.prototype['clear'] = btIntArray.prototype.clear = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btIntArray_clear_0(self);
};;

  btIntArray.prototype['__destroy__'] = btIntArray.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btIntArray___destroy___0(self);
};
// ccAllHitsRayResultCallback
/** @suppress {undefinedVars, duplicate} @this{Object} */function ccAllHitsRayResultCallback(from, to) {
  if (from && typeof from === 'object') from = from.ptr;
  if (to && typeof to === 'object') to = to.ptr;
  this.ptr = _ccAllHitsRayResultCallback_ccAllHitsRayResultCallback_2(from, to);
  getCache(ccAllHitsRayResultCallback)[this.ptr] = this;
};;
ccAllHitsRayResultCallback.prototype = Object.create(AllHitsRayResultCallback.prototype);
ccAllHitsRayResultCallback.prototype.constructor = ccAllHitsRayResultCallback;
ccAllHitsRayResultCallback.prototype.__class__ = ccAllHitsRayResultCallback;
ccAllHitsRayResultCallback.__cache__ = {};
Module['ccAllHitsRayResultCallback'] = ccAllHitsRayResultCallback;

ccAllHitsRayResultCallback.prototype['setQueryTrigger'] = ccAllHitsRayResultCallback.prototype.setQueryTrigger = /** @suppress {undefinedVars, duplicate} @this{Object} */function(v) {
  var self = this.ptr;
  if (v && typeof v === 'object') v = v.ptr;
  _ccAllHitsRayResultCallback_setQueryTrigger_1(self, v);
};;

ccAllHitsRayResultCallback.prototype['hasHit'] = ccAllHitsRayResultCallback.prototype.hasHit = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_ccAllHitsRayResultCallback_hasHit_0(self));
};;

  ccAllHitsRayResultCallback.prototype['get_m_shapeParts'] = ccAllHitsRayResultCallback.prototype.get_m_shapeParts = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ccAllHitsRayResultCallback_get_m_shapeParts_0(self), btIntArray);
};
    ccAllHitsRayResultCallback.prototype['set_m_shapeParts'] = ccAllHitsRayResultCallback.prototype.set_m_shapeParts = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ccAllHitsRayResultCallback_set_m_shapeParts_1(self, arg0);
};
    Object.defineProperty(ccAllHitsRayResultCallback.prototype, 'm_shapeParts', { get: ccAllHitsRayResultCallback.prototype.get_m_shapeParts, set: ccAllHitsRayResultCallback.prototype.set_m_shapeParts });
  ccAllHitsRayResultCallback.prototype['get_m_collisionObjects'] = ccAllHitsRayResultCallback.prototype.get_m_collisionObjects = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ccAllHitsRayResultCallback_get_m_collisionObjects_0(self), btConstCollisionObjectArray);
};
    ccAllHitsRayResultCallback.prototype['set_m_collisionObjects'] = ccAllHitsRayResultCallback.prototype.set_m_collisionObjects = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ccAllHitsRayResultCallback_set_m_collisionObjects_1(self, arg0);
};
    Object.defineProperty(ccAllHitsRayResultCallback.prototype, 'm_collisionObjects', { get: ccAllHitsRayResultCallback.prototype.get_m_collisionObjects, set: ccAllHitsRayResultCallback.prototype.set_m_collisionObjects });
  ccAllHitsRayResultCallback.prototype['get_m_rayFromWorld'] = ccAllHitsRayResultCallback.prototype.get_m_rayFromWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ccAllHitsRayResultCallback_get_m_rayFromWorld_0(self), btVector3);
};
    ccAllHitsRayResultCallback.prototype['set_m_rayFromWorld'] = ccAllHitsRayResultCallback.prototype.set_m_rayFromWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ccAllHitsRayResultCallback_set_m_rayFromWorld_1(self, arg0);
};
    Object.defineProperty(ccAllHitsRayResultCallback.prototype, 'm_rayFromWorld', { get: ccAllHitsRayResultCallback.prototype.get_m_rayFromWorld, set: ccAllHitsRayResultCallback.prototype.set_m_rayFromWorld });
  ccAllHitsRayResultCallback.prototype['get_m_rayToWorld'] = ccAllHitsRayResultCallback.prototype.get_m_rayToWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ccAllHitsRayResultCallback_get_m_rayToWorld_0(self), btVector3);
};
    ccAllHitsRayResultCallback.prototype['set_m_rayToWorld'] = ccAllHitsRayResultCallback.prototype.set_m_rayToWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ccAllHitsRayResultCallback_set_m_rayToWorld_1(self, arg0);
};
    Object.defineProperty(ccAllHitsRayResultCallback.prototype, 'm_rayToWorld', { get: ccAllHitsRayResultCallback.prototype.get_m_rayToWorld, set: ccAllHitsRayResultCallback.prototype.set_m_rayToWorld });
  ccAllHitsRayResultCallback.prototype['get_m_hitNormalWorld'] = ccAllHitsRayResultCallback.prototype.get_m_hitNormalWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ccAllHitsRayResultCallback_get_m_hitNormalWorld_0(self), btVector3Array);
};
    ccAllHitsRayResultCallback.prototype['set_m_hitNormalWorld'] = ccAllHitsRayResultCallback.prototype.set_m_hitNormalWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ccAllHitsRayResultCallback_set_m_hitNormalWorld_1(self, arg0);
};
    Object.defineProperty(ccAllHitsRayResultCallback.prototype, 'm_hitNormalWorld', { get: ccAllHitsRayResultCallback.prototype.get_m_hitNormalWorld, set: ccAllHitsRayResultCallback.prototype.set_m_hitNormalWorld });
  ccAllHitsRayResultCallback.prototype['get_m_hitPointWorld'] = ccAllHitsRayResultCallback.prototype.get_m_hitPointWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ccAllHitsRayResultCallback_get_m_hitPointWorld_0(self), btVector3Array);
};
    ccAllHitsRayResultCallback.prototype['set_m_hitPointWorld'] = ccAllHitsRayResultCallback.prototype.set_m_hitPointWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ccAllHitsRayResultCallback_set_m_hitPointWorld_1(self, arg0);
};
    Object.defineProperty(ccAllHitsRayResultCallback.prototype, 'm_hitPointWorld', { get: ccAllHitsRayResultCallback.prototype.get_m_hitPointWorld, set: ccAllHitsRayResultCallback.prototype.set_m_hitPointWorld });
  ccAllHitsRayResultCallback.prototype['get_m_hitFractions'] = ccAllHitsRayResultCallback.prototype.get_m_hitFractions = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ccAllHitsRayResultCallback_get_m_hitFractions_0(self), btScalarArray);
};
    ccAllHitsRayResultCallback.prototype['set_m_hitFractions'] = ccAllHitsRayResultCallback.prototype.set_m_hitFractions = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ccAllHitsRayResultCallback_set_m_hitFractions_1(self, arg0);
};
    Object.defineProperty(ccAllHitsRayResultCallback.prototype, 'm_hitFractions', { get: ccAllHitsRayResultCallback.prototype.get_m_hitFractions, set: ccAllHitsRayResultCallback.prototype.set_m_hitFractions });
  ccAllHitsRayResultCallback.prototype['get_m_collisionFilterGroup'] = ccAllHitsRayResultCallback.prototype.get_m_collisionFilterGroup = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _ccAllHitsRayResultCallback_get_m_collisionFilterGroup_0(self);
};
    ccAllHitsRayResultCallback.prototype['set_m_collisionFilterGroup'] = ccAllHitsRayResultCallback.prototype.set_m_collisionFilterGroup = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ccAllHitsRayResultCallback_set_m_collisionFilterGroup_1(self, arg0);
};
    Object.defineProperty(ccAllHitsRayResultCallback.prototype, 'm_collisionFilterGroup', { get: ccAllHitsRayResultCallback.prototype.get_m_collisionFilterGroup, set: ccAllHitsRayResultCallback.prototype.set_m_collisionFilterGroup });
  ccAllHitsRayResultCallback.prototype['get_m_collisionFilterMask'] = ccAllHitsRayResultCallback.prototype.get_m_collisionFilterMask = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _ccAllHitsRayResultCallback_get_m_collisionFilterMask_0(self);
};
    ccAllHitsRayResultCallback.prototype['set_m_collisionFilterMask'] = ccAllHitsRayResultCallback.prototype.set_m_collisionFilterMask = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ccAllHitsRayResultCallback_set_m_collisionFilterMask_1(self, arg0);
};
    Object.defineProperty(ccAllHitsRayResultCallback.prototype, 'm_collisionFilterMask', { get: ccAllHitsRayResultCallback.prototype.get_m_collisionFilterMask, set: ccAllHitsRayResultCallback.prototype.set_m_collisionFilterMask });
  ccAllHitsRayResultCallback.prototype['get_m_closestHitFraction'] = ccAllHitsRayResultCallback.prototype.get_m_closestHitFraction = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _ccAllHitsRayResultCallback_get_m_closestHitFraction_0(self);
};
    ccAllHitsRayResultCallback.prototype['set_m_closestHitFraction'] = ccAllHitsRayResultCallback.prototype.set_m_closestHitFraction = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ccAllHitsRayResultCallback_set_m_closestHitFraction_1(self, arg0);
};
    Object.defineProperty(ccAllHitsRayResultCallback.prototype, 'm_closestHitFraction', { get: ccAllHitsRayResultCallback.prototype.get_m_closestHitFraction, set: ccAllHitsRayResultCallback.prototype.set_m_closestHitFraction });
  ccAllHitsRayResultCallback.prototype['get_m_collisionObject'] = ccAllHitsRayResultCallback.prototype.get_m_collisionObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ccAllHitsRayResultCallback_get_m_collisionObject_0(self), btCollisionObject);
};
    ccAllHitsRayResultCallback.prototype['set_m_collisionObject'] = ccAllHitsRayResultCallback.prototype.set_m_collisionObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ccAllHitsRayResultCallback_set_m_collisionObject_1(self, arg0);
};
    Object.defineProperty(ccAllHitsRayResultCallback.prototype, 'm_collisionObject', { get: ccAllHitsRayResultCallback.prototype.get_m_collisionObject, set: ccAllHitsRayResultCallback.prototype.set_m_collisionObject });
  ccAllHitsRayResultCallback.prototype['__destroy__'] = ccAllHitsRayResultCallback.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _ccAllHitsRayResultCallback___destroy___0(self);
};
// btConstCollisionObjectArray
/** @suppress {undefinedVars, duplicate} @this{Object} */function btConstCollisionObjectArray() { throw "cannot construct a btConstCollisionObjectArray, no constructor in IDL" }
btConstCollisionObjectArray.prototype = Object.create(WrapperObject.prototype);
btConstCollisionObjectArray.prototype.constructor = btConstCollisionObjectArray;
btConstCollisionObjectArray.prototype.__class__ = btConstCollisionObjectArray;
btConstCollisionObjectArray.__cache__ = {};
Module['btConstCollisionObjectArray'] = btConstCollisionObjectArray;

btConstCollisionObjectArray.prototype['size'] = btConstCollisionObjectArray.prototype.size = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btConstCollisionObjectArray_size_0(self);
};;

btConstCollisionObjectArray.prototype['at'] = btConstCollisionObjectArray.prototype.at = /** @suppress {undefinedVars, duplicate} @this{Object} */function(n) {
  var self = this.ptr;
  if (n && typeof n === 'object') n = n.ptr;
  return wrapPointer(_btConstCollisionObjectArray_at_1(self, n), btCollisionObject);
};;

btConstCollisionObjectArray.prototype['clear'] = btConstCollisionObjectArray.prototype.clear = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btConstCollisionObjectArray_clear_0(self);
};;

  btConstCollisionObjectArray.prototype['__destroy__'] = btConstCollisionObjectArray.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btConstCollisionObjectArray___destroy___0(self);
};
// btBroadphaseProxy
/** @suppress {undefinedVars, duplicate} @this{Object} */function btBroadphaseProxy() { throw "cannot construct a btBroadphaseProxy, no constructor in IDL" }
btBroadphaseProxy.prototype = Object.create(WrapperObject.prototype);
btBroadphaseProxy.prototype.constructor = btBroadphaseProxy;
btBroadphaseProxy.prototype.__class__ = btBroadphaseProxy;
btBroadphaseProxy.__cache__ = {};
Module['btBroadphaseProxy'] = btBroadphaseProxy;

  btBroadphaseProxy.prototype['get_m_collisionFilterGroup'] = btBroadphaseProxy.prototype.get_m_collisionFilterGroup = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btBroadphaseProxy_get_m_collisionFilterGroup_0(self);
};
    btBroadphaseProxy.prototype['set_m_collisionFilterGroup'] = btBroadphaseProxy.prototype.set_m_collisionFilterGroup = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btBroadphaseProxy_set_m_collisionFilterGroup_1(self, arg0);
};
    Object.defineProperty(btBroadphaseProxy.prototype, 'm_collisionFilterGroup', { get: btBroadphaseProxy.prototype.get_m_collisionFilterGroup, set: btBroadphaseProxy.prototype.set_m_collisionFilterGroup });
  btBroadphaseProxy.prototype['get_m_collisionFilterMask'] = btBroadphaseProxy.prototype.get_m_collisionFilterMask = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btBroadphaseProxy_get_m_collisionFilterMask_0(self);
};
    btBroadphaseProxy.prototype['set_m_collisionFilterMask'] = btBroadphaseProxy.prototype.set_m_collisionFilterMask = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btBroadphaseProxy_set_m_collisionFilterMask_1(self, arg0);
};
    Object.defineProperty(btBroadphaseProxy.prototype, 'm_collisionFilterMask', { get: btBroadphaseProxy.prototype.get_m_collisionFilterMask, set: btBroadphaseProxy.prototype.set_m_collisionFilterMask });
  btBroadphaseProxy.prototype['__destroy__'] = btBroadphaseProxy.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btBroadphaseProxy___destroy___0(self);
};
// btIndexedMesh
/** @suppress {undefinedVars, duplicate} @this{Object} */function btIndexedMesh() { throw "cannot construct a btIndexedMesh, no constructor in IDL" }
btIndexedMesh.prototype = Object.create(WrapperObject.prototype);
btIndexedMesh.prototype.constructor = btIndexedMesh;
btIndexedMesh.prototype.__class__ = btIndexedMesh;
btIndexedMesh.__cache__ = {};
Module['btIndexedMesh'] = btIndexedMesh;

  btIndexedMesh.prototype['get_m_numTriangles'] = btIndexedMesh.prototype.get_m_numTriangles = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btIndexedMesh_get_m_numTriangles_0(self);
};
    btIndexedMesh.prototype['set_m_numTriangles'] = btIndexedMesh.prototype.set_m_numTriangles = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btIndexedMesh_set_m_numTriangles_1(self, arg0);
};
    Object.defineProperty(btIndexedMesh.prototype, 'm_numTriangles', { get: btIndexedMesh.prototype.get_m_numTriangles, set: btIndexedMesh.prototype.set_m_numTriangles });
  btIndexedMesh.prototype['__destroy__'] = btIndexedMesh.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btIndexedMesh___destroy___0(self);
};
// btRigidBodyConstructionInfo
/** @suppress {undefinedVars, duplicate} @this{Object} */function btRigidBodyConstructionInfo(mass, motionState, collisionShape, localInertia) {
  if (mass && typeof mass === 'object') mass = mass.ptr;
  if (motionState && typeof motionState === 'object') motionState = motionState.ptr;
  if (collisionShape && typeof collisionShape === 'object') collisionShape = collisionShape.ptr;
  if (localInertia && typeof localInertia === 'object') localInertia = localInertia.ptr;
  if (localInertia === undefined) { this.ptr = _btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3(mass, motionState, collisionShape); getCache(btRigidBodyConstructionInfo)[this.ptr] = this;return }
  this.ptr = _btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4(mass, motionState, collisionShape, localInertia);
  getCache(btRigidBodyConstructionInfo)[this.ptr] = this;
};;
btRigidBodyConstructionInfo.prototype = Object.create(WrapperObject.prototype);
btRigidBodyConstructionInfo.prototype.constructor = btRigidBodyConstructionInfo;
btRigidBodyConstructionInfo.prototype.__class__ = btRigidBodyConstructionInfo;
btRigidBodyConstructionInfo.__cache__ = {};
Module['btRigidBodyConstructionInfo'] = btRigidBodyConstructionInfo;

  btRigidBodyConstructionInfo.prototype['get_m_linearDamping'] = btRigidBodyConstructionInfo.prototype.get_m_linearDamping = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btRigidBodyConstructionInfo_get_m_linearDamping_0(self);
};
    btRigidBodyConstructionInfo.prototype['set_m_linearDamping'] = btRigidBodyConstructionInfo.prototype.set_m_linearDamping = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btRigidBodyConstructionInfo_set_m_linearDamping_1(self, arg0);
};
    Object.defineProperty(btRigidBodyConstructionInfo.prototype, 'm_linearDamping', { get: btRigidBodyConstructionInfo.prototype.get_m_linearDamping, set: btRigidBodyConstructionInfo.prototype.set_m_linearDamping });
  btRigidBodyConstructionInfo.prototype['get_m_angularDamping'] = btRigidBodyConstructionInfo.prototype.get_m_angularDamping = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btRigidBodyConstructionInfo_get_m_angularDamping_0(self);
};
    btRigidBodyConstructionInfo.prototype['set_m_angularDamping'] = btRigidBodyConstructionInfo.prototype.set_m_angularDamping = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btRigidBodyConstructionInfo_set_m_angularDamping_1(self, arg0);
};
    Object.defineProperty(btRigidBodyConstructionInfo.prototype, 'm_angularDamping', { get: btRigidBodyConstructionInfo.prototype.get_m_angularDamping, set: btRigidBodyConstructionInfo.prototype.set_m_angularDamping });
  btRigidBodyConstructionInfo.prototype['get_m_friction'] = btRigidBodyConstructionInfo.prototype.get_m_friction = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btRigidBodyConstructionInfo_get_m_friction_0(self);
};
    btRigidBodyConstructionInfo.prototype['set_m_friction'] = btRigidBodyConstructionInfo.prototype.set_m_friction = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btRigidBodyConstructionInfo_set_m_friction_1(self, arg0);
};
    Object.defineProperty(btRigidBodyConstructionInfo.prototype, 'm_friction', { get: btRigidBodyConstructionInfo.prototype.get_m_friction, set: btRigidBodyConstructionInfo.prototype.set_m_friction });
  btRigidBodyConstructionInfo.prototype['get_m_rollingFriction'] = btRigidBodyConstructionInfo.prototype.get_m_rollingFriction = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btRigidBodyConstructionInfo_get_m_rollingFriction_0(self);
};
    btRigidBodyConstructionInfo.prototype['set_m_rollingFriction'] = btRigidBodyConstructionInfo.prototype.set_m_rollingFriction = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btRigidBodyConstructionInfo_set_m_rollingFriction_1(self, arg0);
};
    Object.defineProperty(btRigidBodyConstructionInfo.prototype, 'm_rollingFriction', { get: btRigidBodyConstructionInfo.prototype.get_m_rollingFriction, set: btRigidBodyConstructionInfo.prototype.set_m_rollingFriction });
  btRigidBodyConstructionInfo.prototype['get_m_restitution'] = btRigidBodyConstructionInfo.prototype.get_m_restitution = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btRigidBodyConstructionInfo_get_m_restitution_0(self);
};
    btRigidBodyConstructionInfo.prototype['set_m_restitution'] = btRigidBodyConstructionInfo.prototype.set_m_restitution = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btRigidBodyConstructionInfo_set_m_restitution_1(self, arg0);
};
    Object.defineProperty(btRigidBodyConstructionInfo.prototype, 'm_restitution', { get: btRigidBodyConstructionInfo.prototype.get_m_restitution, set: btRigidBodyConstructionInfo.prototype.set_m_restitution });
  btRigidBodyConstructionInfo.prototype['get_m_linearSleepingThreshold'] = btRigidBodyConstructionInfo.prototype.get_m_linearSleepingThreshold = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0(self);
};
    btRigidBodyConstructionInfo.prototype['set_m_linearSleepingThreshold'] = btRigidBodyConstructionInfo.prototype.set_m_linearSleepingThreshold = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1(self, arg0);
};
    Object.defineProperty(btRigidBodyConstructionInfo.prototype, 'm_linearSleepingThreshold', { get: btRigidBodyConstructionInfo.prototype.get_m_linearSleepingThreshold, set: btRigidBodyConstructionInfo.prototype.set_m_linearSleepingThreshold });
  btRigidBodyConstructionInfo.prototype['get_m_angularSleepingThreshold'] = btRigidBodyConstructionInfo.prototype.get_m_angularSleepingThreshold = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0(self);
};
    btRigidBodyConstructionInfo.prototype['set_m_angularSleepingThreshold'] = btRigidBodyConstructionInfo.prototype.set_m_angularSleepingThreshold = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1(self, arg0);
};
    Object.defineProperty(btRigidBodyConstructionInfo.prototype, 'm_angularSleepingThreshold', { get: btRigidBodyConstructionInfo.prototype.get_m_angularSleepingThreshold, set: btRigidBodyConstructionInfo.prototype.set_m_angularSleepingThreshold });
  btRigidBodyConstructionInfo.prototype['__destroy__'] = btRigidBodyConstructionInfo.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btRigidBodyConstructionInfo___destroy___0(self);
};
// btManifoldPoint
/** @suppress {undefinedVars, duplicate} @this{Object} */function btManifoldPoint() { throw "cannot construct a btManifoldPoint, no constructor in IDL" }
btManifoldPoint.prototype = Object.create(WrapperObject.prototype);
btManifoldPoint.prototype.constructor = btManifoldPoint;
btManifoldPoint.prototype.__class__ = btManifoldPoint;
btManifoldPoint.__cache__ = {};
Module['btManifoldPoint'] = btManifoldPoint;

btManifoldPoint.prototype['getAppliedImpulse'] = btManifoldPoint.prototype.getAppliedImpulse = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btManifoldPoint_getAppliedImpulse_0(self);
};;

btManifoldPoint.prototype['getDistance'] = btManifoldPoint.prototype.getDistance = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btManifoldPoint_getDistance_0(self);
};;

btManifoldPoint.prototype['getShape0'] = btManifoldPoint.prototype.getShape0 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btManifoldPoint_getShape0_0(self), btCollisionShape);
};;

btManifoldPoint.prototype['getShape1'] = btManifoldPoint.prototype.getShape1 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btManifoldPoint_getShape1_0(self), btCollisionShape);
};;

  btManifoldPoint.prototype['get_m_localPointA'] = btManifoldPoint.prototype.get_m_localPointA = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btManifoldPoint_get_m_localPointA_0(self), btVector3);
};
    btManifoldPoint.prototype['set_m_localPointA'] = btManifoldPoint.prototype.set_m_localPointA = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btManifoldPoint_set_m_localPointA_1(self, arg0);
};
    Object.defineProperty(btManifoldPoint.prototype, 'm_localPointA', { get: btManifoldPoint.prototype.get_m_localPointA, set: btManifoldPoint.prototype.set_m_localPointA });
  btManifoldPoint.prototype['get_m_localPointB'] = btManifoldPoint.prototype.get_m_localPointB = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btManifoldPoint_get_m_localPointB_0(self), btVector3);
};
    btManifoldPoint.prototype['set_m_localPointB'] = btManifoldPoint.prototype.set_m_localPointB = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btManifoldPoint_set_m_localPointB_1(self, arg0);
};
    Object.defineProperty(btManifoldPoint.prototype, 'm_localPointB', { get: btManifoldPoint.prototype.get_m_localPointB, set: btManifoldPoint.prototype.set_m_localPointB });
  btManifoldPoint.prototype['get_m_positionWorldOnA'] = btManifoldPoint.prototype.get_m_positionWorldOnA = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btManifoldPoint_get_m_positionWorldOnA_0(self), btVector3);
};
    btManifoldPoint.prototype['set_m_positionWorldOnA'] = btManifoldPoint.prototype.set_m_positionWorldOnA = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btManifoldPoint_set_m_positionWorldOnA_1(self, arg0);
};
    Object.defineProperty(btManifoldPoint.prototype, 'm_positionWorldOnA', { get: btManifoldPoint.prototype.get_m_positionWorldOnA, set: btManifoldPoint.prototype.set_m_positionWorldOnA });
  btManifoldPoint.prototype['get_m_positionWorldOnB'] = btManifoldPoint.prototype.get_m_positionWorldOnB = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btManifoldPoint_get_m_positionWorldOnB_0(self), btVector3);
};
    btManifoldPoint.prototype['set_m_positionWorldOnB'] = btManifoldPoint.prototype.set_m_positionWorldOnB = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btManifoldPoint_set_m_positionWorldOnB_1(self, arg0);
};
    Object.defineProperty(btManifoldPoint.prototype, 'm_positionWorldOnB', { get: btManifoldPoint.prototype.get_m_positionWorldOnB, set: btManifoldPoint.prototype.set_m_positionWorldOnB });
  btManifoldPoint.prototype['get_m_normalWorldOnB'] = btManifoldPoint.prototype.get_m_normalWorldOnB = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btManifoldPoint_get_m_normalWorldOnB_0(self), btVector3);
};
    btManifoldPoint.prototype['set_m_normalWorldOnB'] = btManifoldPoint.prototype.set_m_normalWorldOnB = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btManifoldPoint_set_m_normalWorldOnB_1(self, arg0);
};
    Object.defineProperty(btManifoldPoint.prototype, 'm_normalWorldOnB', { get: btManifoldPoint.prototype.get_m_normalWorldOnB, set: btManifoldPoint.prototype.set_m_normalWorldOnB });
  btManifoldPoint.prototype['get_m_distance1'] = btManifoldPoint.prototype.get_m_distance1 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btManifoldPoint_get_m_distance1_0(self);
};
    btManifoldPoint.prototype['set_m_distance1'] = btManifoldPoint.prototype.set_m_distance1 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btManifoldPoint_set_m_distance1_1(self, arg0);
};
    Object.defineProperty(btManifoldPoint.prototype, 'm_distance1', { get: btManifoldPoint.prototype.get_m_distance1, set: btManifoldPoint.prototype.set_m_distance1 });
  btManifoldPoint.prototype['get_m_index0'] = btManifoldPoint.prototype.get_m_index0 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btManifoldPoint_get_m_index0_0(self);
};
    btManifoldPoint.prototype['set_m_index0'] = btManifoldPoint.prototype.set_m_index0 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btManifoldPoint_set_m_index0_1(self, arg0);
};
    Object.defineProperty(btManifoldPoint.prototype, 'm_index0', { get: btManifoldPoint.prototype.get_m_index0, set: btManifoldPoint.prototype.set_m_index0 });
  btManifoldPoint.prototype['get_m_index1'] = btManifoldPoint.prototype.get_m_index1 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btManifoldPoint_get_m_index1_0(self);
};
    btManifoldPoint.prototype['set_m_index1'] = btManifoldPoint.prototype.set_m_index1 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btManifoldPoint_set_m_index1_1(self, arg0);
};
    Object.defineProperty(btManifoldPoint.prototype, 'm_index1', { get: btManifoldPoint.prototype.get_m_index1, set: btManifoldPoint.prototype.set_m_index1 });
  btManifoldPoint.prototype['get_m_userPersistentData'] = btManifoldPoint.prototype.get_m_userPersistentData = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btManifoldPoint_get_m_userPersistentData_0(self);
};
    btManifoldPoint.prototype['set_m_userPersistentData'] = btManifoldPoint.prototype.set_m_userPersistentData = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btManifoldPoint_set_m_userPersistentData_1(self, arg0);
};
    Object.defineProperty(btManifoldPoint.prototype, 'm_userPersistentData', { get: btManifoldPoint.prototype.get_m_userPersistentData, set: btManifoldPoint.prototype.set_m_userPersistentData });
  btManifoldPoint.prototype['get_m_userPersistentData0'] = btManifoldPoint.prototype.get_m_userPersistentData0 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btManifoldPoint_get_m_userPersistentData0_0(self);
};
    btManifoldPoint.prototype['set_m_userPersistentData0'] = btManifoldPoint.prototype.set_m_userPersistentData0 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btManifoldPoint_set_m_userPersistentData0_1(self, arg0);
};
    Object.defineProperty(btManifoldPoint.prototype, 'm_userPersistentData0', { get: btManifoldPoint.prototype.get_m_userPersistentData0, set: btManifoldPoint.prototype.set_m_userPersistentData0 });
  btManifoldPoint.prototype['get_m_userPersistentData1'] = btManifoldPoint.prototype.get_m_userPersistentData1 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btManifoldPoint_get_m_userPersistentData1_0(self);
};
    btManifoldPoint.prototype['set_m_userPersistentData1'] = btManifoldPoint.prototype.set_m_userPersistentData1 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btManifoldPoint_set_m_userPersistentData1_1(self, arg0);
};
    Object.defineProperty(btManifoldPoint.prototype, 'm_userPersistentData1', { get: btManifoldPoint.prototype.get_m_userPersistentData1, set: btManifoldPoint.prototype.set_m_userPersistentData1 });
  btManifoldPoint.prototype['__destroy__'] = btManifoldPoint.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btManifoldPoint___destroy___0(self);
};
// btSequentialImpulseConstraintSolver
/** @suppress {undefinedVars, duplicate} @this{Object} */function btSequentialImpulseConstraintSolver() {
  this.ptr = _btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0();
  getCache(btSequentialImpulseConstraintSolver)[this.ptr] = this;
};;
btSequentialImpulseConstraintSolver.prototype = Object.create(WrapperObject.prototype);
btSequentialImpulseConstraintSolver.prototype.constructor = btSequentialImpulseConstraintSolver;
btSequentialImpulseConstraintSolver.prototype.__class__ = btSequentialImpulseConstraintSolver;
btSequentialImpulseConstraintSolver.__cache__ = {};
Module['btSequentialImpulseConstraintSolver'] = btSequentialImpulseConstraintSolver;

  btSequentialImpulseConstraintSolver.prototype['__destroy__'] = btSequentialImpulseConstraintSolver.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btSequentialImpulseConstraintSolver___destroy___0(self);
};
// btPoint2PointConstraint
/** @suppress {undefinedVars, duplicate} @this{Object} */function btPoint2PointConstraint(rbA, rbB, pivotInA, pivotInB) {
  if (rbA && typeof rbA === 'object') rbA = rbA.ptr;
  if (rbB && typeof rbB === 'object') rbB = rbB.ptr;
  if (pivotInA && typeof pivotInA === 'object') pivotInA = pivotInA.ptr;
  if (pivotInB && typeof pivotInB === 'object') pivotInB = pivotInB.ptr;
  if (pivotInA === undefined) { this.ptr = _btPoint2PointConstraint_btPoint2PointConstraint_2(rbA, rbB); getCache(btPoint2PointConstraint)[this.ptr] = this;return }
  if (pivotInB === undefined) { this.ptr = _btPoint2PointConstraint_btPoint2PointConstraint_3(rbA, rbB, pivotInA); getCache(btPoint2PointConstraint)[this.ptr] = this;return }
  this.ptr = _btPoint2PointConstraint_btPoint2PointConstraint_4(rbA, rbB, pivotInA, pivotInB);
  getCache(btPoint2PointConstraint)[this.ptr] = this;
};;
btPoint2PointConstraint.prototype = Object.create(btTypedConstraint.prototype);
btPoint2PointConstraint.prototype.constructor = btPoint2PointConstraint;
btPoint2PointConstraint.prototype.__class__ = btPoint2PointConstraint;
btPoint2PointConstraint.__cache__ = {};
Module['btPoint2PointConstraint'] = btPoint2PointConstraint;

btPoint2PointConstraint.prototype['setPivotA'] = btPoint2PointConstraint.prototype.setPivotA = /** @suppress {undefinedVars, duplicate} @this{Object} */function(pivotA) {
  var self = this.ptr;
  if (pivotA && typeof pivotA === 'object') pivotA = pivotA.ptr;
  _btPoint2PointConstraint_setPivotA_1(self, pivotA);
};;

btPoint2PointConstraint.prototype['setPivotB'] = btPoint2PointConstraint.prototype.setPivotB = /** @suppress {undefinedVars, duplicate} @this{Object} */function(pivotB) {
  var self = this.ptr;
  if (pivotB && typeof pivotB === 'object') pivotB = pivotB.ptr;
  _btPoint2PointConstraint_setPivotB_1(self, pivotB);
};;

btPoint2PointConstraint.prototype['getPivotInA'] = btPoint2PointConstraint.prototype.getPivotInA = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btPoint2PointConstraint_getPivotInA_0(self), btVector3);
};;

btPoint2PointConstraint.prototype['getPivotInB'] = btPoint2PointConstraint.prototype.getPivotInB = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btPoint2PointConstraint_getPivotInB_0(self), btVector3);
};;

btPoint2PointConstraint.prototype['enableFeedback'] = btPoint2PointConstraint.prototype.enableFeedback = /** @suppress {undefinedVars, duplicate} @this{Object} */function(needsFeedback) {
  var self = this.ptr;
  if (needsFeedback && typeof needsFeedback === 'object') needsFeedback = needsFeedback.ptr;
  _btPoint2PointConstraint_enableFeedback_1(self, needsFeedback);
};;

btPoint2PointConstraint.prototype['getBreakingImpulseThreshold'] = btPoint2PointConstraint.prototype.getBreakingImpulseThreshold = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btPoint2PointConstraint_getBreakingImpulseThreshold_0(self);
};;

btPoint2PointConstraint.prototype['setBreakingImpulseThreshold'] = btPoint2PointConstraint.prototype.setBreakingImpulseThreshold = /** @suppress {undefinedVars, duplicate} @this{Object} */function(threshold) {
  var self = this.ptr;
  if (threshold && typeof threshold === 'object') threshold = threshold.ptr;
  _btPoint2PointConstraint_setBreakingImpulseThreshold_1(self, threshold);
};;

btPoint2PointConstraint.prototype['getParam'] = btPoint2PointConstraint.prototype.getParam = /** @suppress {undefinedVars, duplicate} @this{Object} */function(num, axis) {
  var self = this.ptr;
  if (num && typeof num === 'object') num = num.ptr;
  if (axis && typeof axis === 'object') axis = axis.ptr;
  return _btPoint2PointConstraint_getParam_2(self, num, axis);
};;

btPoint2PointConstraint.prototype['setParam'] = btPoint2PointConstraint.prototype.setParam = /** @suppress {undefinedVars, duplicate} @this{Object} */function(num, value, axis) {
  var self = this.ptr;
  if (num && typeof num === 'object') num = num.ptr;
  if (value && typeof value === 'object') value = value.ptr;
  if (axis && typeof axis === 'object') axis = axis.ptr;
  _btPoint2PointConstraint_setParam_3(self, num, value, axis);
};;

  btPoint2PointConstraint.prototype['get_m_setting'] = btPoint2PointConstraint.prototype.get_m_setting = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btPoint2PointConstraint_get_m_setting_0(self), btConstraintSetting);
};
    btPoint2PointConstraint.prototype['set_m_setting'] = btPoint2PointConstraint.prototype.set_m_setting = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btPoint2PointConstraint_set_m_setting_1(self, arg0);
};
    Object.defineProperty(btPoint2PointConstraint.prototype, 'm_setting', { get: btPoint2PointConstraint.prototype.get_m_setting, set: btPoint2PointConstraint.prototype.set_m_setting });
  btPoint2PointConstraint.prototype['__destroy__'] = btPoint2PointConstraint.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btPoint2PointConstraint___destroy___0(self);
};
// ccOverlapFilterCallback
/** @suppress {undefinedVars, duplicate} @this{Object} */function ccOverlapFilterCallback() {
  this.ptr = _ccOverlapFilterCallback_ccOverlapFilterCallback_0();
  getCache(ccOverlapFilterCallback)[this.ptr] = this;
};;
ccOverlapFilterCallback.prototype = Object.create(btOverlapFilterCallback.prototype);
ccOverlapFilterCallback.prototype.constructor = ccOverlapFilterCallback;
ccOverlapFilterCallback.prototype.__class__ = ccOverlapFilterCallback;
ccOverlapFilterCallback.__cache__ = {};
Module['ccOverlapFilterCallback'] = ccOverlapFilterCallback;

  ccOverlapFilterCallback.prototype['__destroy__'] = ccOverlapFilterCallback.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _ccOverlapFilterCallback___destroy___0(self);
};
// btConvexTriangleMeshShape
/** @suppress {undefinedVars, duplicate} @this{Object} */function btConvexTriangleMeshShape(meshInterface, calcAabb) {
  if (meshInterface && typeof meshInterface === 'object') meshInterface = meshInterface.ptr;
  if (calcAabb && typeof calcAabb === 'object') calcAabb = calcAabb.ptr;
  if (calcAabb === undefined) { this.ptr = _btConvexTriangleMeshShape_btConvexTriangleMeshShape_1(meshInterface); getCache(btConvexTriangleMeshShape)[this.ptr] = this;return }
  this.ptr = _btConvexTriangleMeshShape_btConvexTriangleMeshShape_2(meshInterface, calcAabb);
  getCache(btConvexTriangleMeshShape)[this.ptr] = this;
};;
btConvexTriangleMeshShape.prototype = Object.create(btConvexShape.prototype);
btConvexTriangleMeshShape.prototype.constructor = btConvexTriangleMeshShape;
btConvexTriangleMeshShape.prototype.__class__ = btConvexTriangleMeshShape;
btConvexTriangleMeshShape.__cache__ = {};
Module['btConvexTriangleMeshShape'] = btConvexTriangleMeshShape;

btConvexTriangleMeshShape.prototype['setLocalScaling'] = btConvexTriangleMeshShape.prototype.setLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function(scaling) {
  var self = this.ptr;
  if (scaling && typeof scaling === 'object') scaling = scaling.ptr;
  _btConvexTriangleMeshShape_setLocalScaling_1(self, scaling);
};;

btConvexTriangleMeshShape.prototype['getLocalScaling'] = btConvexTriangleMeshShape.prototype.getLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btConvexTriangleMeshShape_getLocalScaling_0(self), btVector3);
};;

btConvexTriangleMeshShape.prototype['calculateLocalInertia'] = btConvexTriangleMeshShape.prototype.calculateLocalInertia = /** @suppress {undefinedVars, duplicate} @this{Object} */function(mass, inertia) {
  var self = this.ptr;
  if (mass && typeof mass === 'object') mass = mass.ptr;
  if (inertia && typeof inertia === 'object') inertia = inertia.ptr;
  _btConvexTriangleMeshShape_calculateLocalInertia_2(self, mass, inertia);
};;

btConvexTriangleMeshShape.prototype['setMargin'] = btConvexTriangleMeshShape.prototype.setMargin = /** @suppress {undefinedVars, duplicate} @this{Object} */function(margin) {
  var self = this.ptr;
  if (margin && typeof margin === 'object') margin = margin.ptr;
  _btConvexTriangleMeshShape_setMargin_1(self, margin);
};;

btConvexTriangleMeshShape.prototype['getMargin'] = btConvexTriangleMeshShape.prototype.getMargin = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btConvexTriangleMeshShape_getMargin_0(self);
};;

btConvexTriangleMeshShape.prototype['isCompound'] = btConvexTriangleMeshShape.prototype.isCompound = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btConvexTriangleMeshShape_isCompound_0(self));
};;

btConvexTriangleMeshShape.prototype['getUserIndex'] = btConvexTriangleMeshShape.prototype.getUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btConvexTriangleMeshShape_getUserIndex_0(self);
};;

btConvexTriangleMeshShape.prototype['setUserIndex'] = btConvexTriangleMeshShape.prototype.setUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btConvexTriangleMeshShape_setUserIndex_1(self, index);
};;

btConvexTriangleMeshShape.prototype['getUserIndex2'] = btConvexTriangleMeshShape.prototype.getUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btConvexTriangleMeshShape_getUserIndex2_0(self);
};;

btConvexTriangleMeshShape.prototype['setUserIndex2'] = btConvexTriangleMeshShape.prototype.setUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btConvexTriangleMeshShape_setUserIndex2_1(self, index);
};;

btConvexTriangleMeshShape.prototype['getAabb'] = btConvexTriangleMeshShape.prototype.getAabb = /** @suppress {undefinedVars, duplicate} @this{Object} */function(t, min, max) {
  var self = this.ptr;
  if (t && typeof t === 'object') t = t.ptr;
  if (min && typeof min === 'object') min = min.ptr;
  if (max && typeof max === 'object') max = max.ptr;
  _btConvexTriangleMeshShape_getAabb_3(self, t, min, max);
};;

btConvexTriangleMeshShape.prototype['getLocalBoundingSphere'] = btConvexTriangleMeshShape.prototype.getLocalBoundingSphere = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btConvexTriangleMeshShape_getLocalBoundingSphere_0(self);
};;

  btConvexTriangleMeshShape.prototype['__destroy__'] = btConvexTriangleMeshShape.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btConvexTriangleMeshShape___destroy___0(self);
};
// ccClosestRayResultCallback
/** @suppress {undefinedVars, duplicate} @this{Object} */function ccClosestRayResultCallback(from, to) {
  if (from && typeof from === 'object') from = from.ptr;
  if (to && typeof to === 'object') to = to.ptr;
  this.ptr = _ccClosestRayResultCallback_ccClosestRayResultCallback_2(from, to);
  getCache(ccClosestRayResultCallback)[this.ptr] = this;
};;
ccClosestRayResultCallback.prototype = Object.create(ClosestRayResultCallback.prototype);
ccClosestRayResultCallback.prototype.constructor = ccClosestRayResultCallback;
ccClosestRayResultCallback.prototype.__class__ = ccClosestRayResultCallback;
ccClosestRayResultCallback.__cache__ = {};
Module['ccClosestRayResultCallback'] = ccClosestRayResultCallback;

ccClosestRayResultCallback.prototype['setQueryTrigger'] = ccClosestRayResultCallback.prototype.setQueryTrigger = /** @suppress {undefinedVars, duplicate} @this{Object} */function(v) {
  var self = this.ptr;
  if (v && typeof v === 'object') v = v.ptr;
  _ccClosestRayResultCallback_setQueryTrigger_1(self, v);
};;

ccClosestRayResultCallback.prototype['hasHit'] = ccClosestRayResultCallback.prototype.hasHit = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_ccClosestRayResultCallback_hasHit_0(self));
};;

  ccClosestRayResultCallback.prototype['get_m_shapePart'] = ccClosestRayResultCallback.prototype.get_m_shapePart = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _ccClosestRayResultCallback_get_m_shapePart_0(self);
};
    ccClosestRayResultCallback.prototype['set_m_shapePart'] = ccClosestRayResultCallback.prototype.set_m_shapePart = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ccClosestRayResultCallback_set_m_shapePart_1(self, arg0);
};
    Object.defineProperty(ccClosestRayResultCallback.prototype, 'm_shapePart', { get: ccClosestRayResultCallback.prototype.get_m_shapePart, set: ccClosestRayResultCallback.prototype.set_m_shapePart });
  ccClosestRayResultCallback.prototype['get_m_rayFromWorld'] = ccClosestRayResultCallback.prototype.get_m_rayFromWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ccClosestRayResultCallback_get_m_rayFromWorld_0(self), btVector3);
};
    ccClosestRayResultCallback.prototype['set_m_rayFromWorld'] = ccClosestRayResultCallback.prototype.set_m_rayFromWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ccClosestRayResultCallback_set_m_rayFromWorld_1(self, arg0);
};
    Object.defineProperty(ccClosestRayResultCallback.prototype, 'm_rayFromWorld', { get: ccClosestRayResultCallback.prototype.get_m_rayFromWorld, set: ccClosestRayResultCallback.prototype.set_m_rayFromWorld });
  ccClosestRayResultCallback.prototype['get_m_rayToWorld'] = ccClosestRayResultCallback.prototype.get_m_rayToWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ccClosestRayResultCallback_get_m_rayToWorld_0(self), btVector3);
};
    ccClosestRayResultCallback.prototype['set_m_rayToWorld'] = ccClosestRayResultCallback.prototype.set_m_rayToWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ccClosestRayResultCallback_set_m_rayToWorld_1(self, arg0);
};
    Object.defineProperty(ccClosestRayResultCallback.prototype, 'm_rayToWorld', { get: ccClosestRayResultCallback.prototype.get_m_rayToWorld, set: ccClosestRayResultCallback.prototype.set_m_rayToWorld });
  ccClosestRayResultCallback.prototype['get_m_hitNormalWorld'] = ccClosestRayResultCallback.prototype.get_m_hitNormalWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ccClosestRayResultCallback_get_m_hitNormalWorld_0(self), btVector3);
};
    ccClosestRayResultCallback.prototype['set_m_hitNormalWorld'] = ccClosestRayResultCallback.prototype.set_m_hitNormalWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ccClosestRayResultCallback_set_m_hitNormalWorld_1(self, arg0);
};
    Object.defineProperty(ccClosestRayResultCallback.prototype, 'm_hitNormalWorld', { get: ccClosestRayResultCallback.prototype.get_m_hitNormalWorld, set: ccClosestRayResultCallback.prototype.set_m_hitNormalWorld });
  ccClosestRayResultCallback.prototype['get_m_hitPointWorld'] = ccClosestRayResultCallback.prototype.get_m_hitPointWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ccClosestRayResultCallback_get_m_hitPointWorld_0(self), btVector3);
};
    ccClosestRayResultCallback.prototype['set_m_hitPointWorld'] = ccClosestRayResultCallback.prototype.set_m_hitPointWorld = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ccClosestRayResultCallback_set_m_hitPointWorld_1(self, arg0);
};
    Object.defineProperty(ccClosestRayResultCallback.prototype, 'm_hitPointWorld', { get: ccClosestRayResultCallback.prototype.get_m_hitPointWorld, set: ccClosestRayResultCallback.prototype.set_m_hitPointWorld });
  ccClosestRayResultCallback.prototype['get_m_collisionFilterGroup'] = ccClosestRayResultCallback.prototype.get_m_collisionFilterGroup = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _ccClosestRayResultCallback_get_m_collisionFilterGroup_0(self);
};
    ccClosestRayResultCallback.prototype['set_m_collisionFilterGroup'] = ccClosestRayResultCallback.prototype.set_m_collisionFilterGroup = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ccClosestRayResultCallback_set_m_collisionFilterGroup_1(self, arg0);
};
    Object.defineProperty(ccClosestRayResultCallback.prototype, 'm_collisionFilterGroup', { get: ccClosestRayResultCallback.prototype.get_m_collisionFilterGroup, set: ccClosestRayResultCallback.prototype.set_m_collisionFilterGroup });
  ccClosestRayResultCallback.prototype['get_m_collisionFilterMask'] = ccClosestRayResultCallback.prototype.get_m_collisionFilterMask = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _ccClosestRayResultCallback_get_m_collisionFilterMask_0(self);
};
    ccClosestRayResultCallback.prototype['set_m_collisionFilterMask'] = ccClosestRayResultCallback.prototype.set_m_collisionFilterMask = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ccClosestRayResultCallback_set_m_collisionFilterMask_1(self, arg0);
};
    Object.defineProperty(ccClosestRayResultCallback.prototype, 'm_collisionFilterMask', { get: ccClosestRayResultCallback.prototype.get_m_collisionFilterMask, set: ccClosestRayResultCallback.prototype.set_m_collisionFilterMask });
  ccClosestRayResultCallback.prototype['get_m_closestHitFraction'] = ccClosestRayResultCallback.prototype.get_m_closestHitFraction = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _ccClosestRayResultCallback_get_m_closestHitFraction_0(self);
};
    ccClosestRayResultCallback.prototype['set_m_closestHitFraction'] = ccClosestRayResultCallback.prototype.set_m_closestHitFraction = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ccClosestRayResultCallback_set_m_closestHitFraction_1(self, arg0);
};
    Object.defineProperty(ccClosestRayResultCallback.prototype, 'm_closestHitFraction', { get: ccClosestRayResultCallback.prototype.get_m_closestHitFraction, set: ccClosestRayResultCallback.prototype.set_m_closestHitFraction });
  ccClosestRayResultCallback.prototype['get_m_collisionObject'] = ccClosestRayResultCallback.prototype.get_m_collisionObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ccClosestRayResultCallback_get_m_collisionObject_0(self), btCollisionObject);
};
    ccClosestRayResultCallback.prototype['set_m_collisionObject'] = ccClosestRayResultCallback.prototype.set_m_collisionObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _ccClosestRayResultCallback_set_m_collisionObject_1(self, arg0);
};
    Object.defineProperty(ccClosestRayResultCallback.prototype, 'm_collisionObject', { get: ccClosestRayResultCallback.prototype.get_m_collisionObject, set: ccClosestRayResultCallback.prototype.set_m_collisionObject });
  ccClosestRayResultCallback.prototype['__destroy__'] = ccClosestRayResultCallback.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _ccClosestRayResultCallback___destroy___0(self);
};
// btHeightfieldTerrainShape
/** @suppress {undefinedVars, duplicate} @this{Object} */function btHeightfieldTerrainShape(heightStickWidth, heightStickLength, heightfieldData, heightScale, minHeight, maxHeight, upAxis, hdt, flipQuadEdges) {
  if (heightStickWidth && typeof heightStickWidth === 'object') heightStickWidth = heightStickWidth.ptr;
  if (heightStickLength && typeof heightStickLength === 'object') heightStickLength = heightStickLength.ptr;
  if (heightfieldData && typeof heightfieldData === 'object') heightfieldData = heightfieldData.ptr;
  if (heightScale && typeof heightScale === 'object') heightScale = heightScale.ptr;
  if (minHeight && typeof minHeight === 'object') minHeight = minHeight.ptr;
  if (maxHeight && typeof maxHeight === 'object') maxHeight = maxHeight.ptr;
  if (upAxis && typeof upAxis === 'object') upAxis = upAxis.ptr;
  if (hdt && typeof hdt === 'object') hdt = hdt.ptr;
  if (flipQuadEdges && typeof flipQuadEdges === 'object') flipQuadEdges = flipQuadEdges.ptr;
  this.ptr = _btHeightfieldTerrainShape_btHeightfieldTerrainShape_9(heightStickWidth, heightStickLength, heightfieldData, heightScale, minHeight, maxHeight, upAxis, hdt, flipQuadEdges);
  getCache(btHeightfieldTerrainShape)[this.ptr] = this;
};;
btHeightfieldTerrainShape.prototype = Object.create(btConcaveShape.prototype);
btHeightfieldTerrainShape.prototype.constructor = btHeightfieldTerrainShape;
btHeightfieldTerrainShape.prototype.__class__ = btHeightfieldTerrainShape;
btHeightfieldTerrainShape.__cache__ = {};
Module['btHeightfieldTerrainShape'] = btHeightfieldTerrainShape;

btHeightfieldTerrainShape.prototype['setMargin'] = btHeightfieldTerrainShape.prototype.setMargin = /** @suppress {undefinedVars, duplicate} @this{Object} */function(margin) {
  var self = this.ptr;
  if (margin && typeof margin === 'object') margin = margin.ptr;
  _btHeightfieldTerrainShape_setMargin_1(self, margin);
};;

btHeightfieldTerrainShape.prototype['getMargin'] = btHeightfieldTerrainShape.prototype.getMargin = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btHeightfieldTerrainShape_getMargin_0(self);
};;

btHeightfieldTerrainShape.prototype['setLocalScaling'] = btHeightfieldTerrainShape.prototype.setLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function(scaling) {
  var self = this.ptr;
  if (scaling && typeof scaling === 'object') scaling = scaling.ptr;
  _btHeightfieldTerrainShape_setLocalScaling_1(self, scaling);
};;

btHeightfieldTerrainShape.prototype['getLocalScaling'] = btHeightfieldTerrainShape.prototype.getLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btHeightfieldTerrainShape_getLocalScaling_0(self), btVector3);
};;

btHeightfieldTerrainShape.prototype['calculateLocalInertia'] = btHeightfieldTerrainShape.prototype.calculateLocalInertia = /** @suppress {undefinedVars, duplicate} @this{Object} */function(mass, inertia) {
  var self = this.ptr;
  if (mass && typeof mass === 'object') mass = mass.ptr;
  if (inertia && typeof inertia === 'object') inertia = inertia.ptr;
  _btHeightfieldTerrainShape_calculateLocalInertia_2(self, mass, inertia);
};;

btHeightfieldTerrainShape.prototype['isCompound'] = btHeightfieldTerrainShape.prototype.isCompound = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btHeightfieldTerrainShape_isCompound_0(self));
};;

btHeightfieldTerrainShape.prototype['getUserIndex'] = btHeightfieldTerrainShape.prototype.getUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btHeightfieldTerrainShape_getUserIndex_0(self);
};;

btHeightfieldTerrainShape.prototype['setUserIndex'] = btHeightfieldTerrainShape.prototype.setUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btHeightfieldTerrainShape_setUserIndex_1(self, index);
};;

btHeightfieldTerrainShape.prototype['getUserIndex2'] = btHeightfieldTerrainShape.prototype.getUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btHeightfieldTerrainShape_getUserIndex2_0(self);
};;

btHeightfieldTerrainShape.prototype['setUserIndex2'] = btHeightfieldTerrainShape.prototype.setUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btHeightfieldTerrainShape_setUserIndex2_1(self, index);
};;

btHeightfieldTerrainShape.prototype['getAabb'] = btHeightfieldTerrainShape.prototype.getAabb = /** @suppress {undefinedVars, duplicate} @this{Object} */function(t, min, max) {
  var self = this.ptr;
  if (t && typeof t === 'object') t = t.ptr;
  if (min && typeof min === 'object') min = min.ptr;
  if (max && typeof max === 'object') max = max.ptr;
  _btHeightfieldTerrainShape_getAabb_3(self, t, min, max);
};;

btHeightfieldTerrainShape.prototype['getLocalBoundingSphere'] = btHeightfieldTerrainShape.prototype.getLocalBoundingSphere = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btHeightfieldTerrainShape_getLocalBoundingSphere_0(self);
};;

  btHeightfieldTerrainShape.prototype['__destroy__'] = btHeightfieldTerrainShape.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btHeightfieldTerrainShape___destroy___0(self);
};
// VoidPtr
/** @suppress {undefinedVars, duplicate} @this{Object} */function VoidPtr() { throw "cannot construct a VoidPtr, no constructor in IDL" }
VoidPtr.prototype = Object.create(WrapperObject.prototype);
VoidPtr.prototype.constructor = VoidPtr;
VoidPtr.prototype.__class__ = VoidPtr;
VoidPtr.__cache__ = {};
Module['VoidPtr'] = VoidPtr;

  VoidPtr.prototype['__destroy__'] = VoidPtr.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _VoidPtr___destroy___0(self);
};
// btDefaultCollisionConfiguration
/** @suppress {undefinedVars, duplicate} @this{Object} */function btDefaultCollisionConfiguration(info) {
  if (info && typeof info === 'object') info = info.ptr;
  if (info === undefined) { this.ptr = _btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0(); getCache(btDefaultCollisionConfiguration)[this.ptr] = this;return }
  this.ptr = _btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1(info);
  getCache(btDefaultCollisionConfiguration)[this.ptr] = this;
};;
btDefaultCollisionConfiguration.prototype = Object.create(WrapperObject.prototype);
btDefaultCollisionConfiguration.prototype.constructor = btDefaultCollisionConfiguration;
btDefaultCollisionConfiguration.prototype.__class__ = btDefaultCollisionConfiguration;
btDefaultCollisionConfiguration.__cache__ = {};
Module['btDefaultCollisionConfiguration'] = btDefaultCollisionConfiguration;

  btDefaultCollisionConfiguration.prototype['__destroy__'] = btDefaultCollisionConfiguration.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btDefaultCollisionConfiguration___destroy___0(self);
};
// btOverlappingPairCallback
/** @suppress {undefinedVars, duplicate} @this{Object} */function btOverlappingPairCallback() { throw "cannot construct a btOverlappingPairCallback, no constructor in IDL" }
btOverlappingPairCallback.prototype = Object.create(WrapperObject.prototype);
btOverlappingPairCallback.prototype.constructor = btOverlappingPairCallback;
btOverlappingPairCallback.prototype.__class__ = btOverlappingPairCallback;
btOverlappingPairCallback.__cache__ = {};
Module['btOverlappingPairCallback'] = btOverlappingPairCallback;

  btOverlappingPairCallback.prototype['__destroy__'] = btOverlappingPairCallback.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btOverlappingPairCallback___destroy___0(self);
};
// btTriangleMesh
/** @suppress {undefinedVars, duplicate} @this{Object} */function btTriangleMesh(use32bitIndices, use4componentVertices) {
  if (use32bitIndices && typeof use32bitIndices === 'object') use32bitIndices = use32bitIndices.ptr;
  if (use4componentVertices && typeof use4componentVertices === 'object') use4componentVertices = use4componentVertices.ptr;
  if (use32bitIndices === undefined) { this.ptr = _btTriangleMesh_btTriangleMesh_0(); getCache(btTriangleMesh)[this.ptr] = this;return }
  if (use4componentVertices === undefined) { this.ptr = _btTriangleMesh_btTriangleMesh_1(use32bitIndices); getCache(btTriangleMesh)[this.ptr] = this;return }
  this.ptr = _btTriangleMesh_btTriangleMesh_2(use32bitIndices, use4componentVertices);
  getCache(btTriangleMesh)[this.ptr] = this;
};;
btTriangleMesh.prototype = Object.create(btStridingMeshInterface.prototype);
btTriangleMesh.prototype.constructor = btTriangleMesh;
btTriangleMesh.prototype.__class__ = btTriangleMesh;
btTriangleMesh.__cache__ = {};
Module['btTriangleMesh'] = btTriangleMesh;

btTriangleMesh.prototype['addTriangle'] = btTriangleMesh.prototype.addTriangle = /** @suppress {undefinedVars, duplicate} @this{Object} */function(vertex0, vertex1, vertex2, removeDuplicateVertices) {
  var self = this.ptr;
  if (vertex0 && typeof vertex0 === 'object') vertex0 = vertex0.ptr;
  if (vertex1 && typeof vertex1 === 'object') vertex1 = vertex1.ptr;
  if (vertex2 && typeof vertex2 === 'object') vertex2 = vertex2.ptr;
  if (removeDuplicateVertices && typeof removeDuplicateVertices === 'object') removeDuplicateVertices = removeDuplicateVertices.ptr;
  if (removeDuplicateVertices === undefined) { _btTriangleMesh_addTriangle_3(self, vertex0, vertex1, vertex2);  return }
  _btTriangleMesh_addTriangle_4(self, vertex0, vertex1, vertex2, removeDuplicateVertices);
};;

btTriangleMesh.prototype['addTriangleIndices'] = btTriangleMesh.prototype.addTriangleIndices = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index1, index2, index3) {
  var self = this.ptr;
  if (index1 && typeof index1 === 'object') index1 = index1.ptr;
  if (index2 && typeof index2 === 'object') index2 = index2.ptr;
  if (index3 && typeof index3 === 'object') index3 = index3.ptr;
  _btTriangleMesh_addTriangleIndices_3(self, index1, index2, index3);
};;

btTriangleMesh.prototype['getIndexedMeshArray'] = btTriangleMesh.prototype.getIndexedMeshArray = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btTriangleMesh_getIndexedMeshArray_0(self), btIndexedMeshArray);
};;

btTriangleMesh.prototype['setScaling'] = btTriangleMesh.prototype.setScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function(scaling) {
  var self = this.ptr;
  if (scaling && typeof scaling === 'object') scaling = scaling.ptr;
  _btTriangleMesh_setScaling_1(self, scaling);
};;

  btTriangleMesh.prototype['__destroy__'] = btTriangleMesh.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btTriangleMesh___destroy___0(self);
};
// btCollisionConfiguration
/** @suppress {undefinedVars, duplicate} @this{Object} */function btCollisionConfiguration() { throw "cannot construct a btCollisionConfiguration, no constructor in IDL" }
btCollisionConfiguration.prototype = Object.create(WrapperObject.prototype);
btCollisionConfiguration.prototype.constructor = btCollisionConfiguration;
btCollisionConfiguration.prototype.__class__ = btCollisionConfiguration;
btCollisionConfiguration.__cache__ = {};
Module['btCollisionConfiguration'] = btCollisionConfiguration;

  btCollisionConfiguration.prototype['__destroy__'] = btCollisionConfiguration.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btCollisionConfiguration___destroy___0(self);
};
// btPersistentManifold
/** @suppress {undefinedVars, duplicate} @this{Object} */function btPersistentManifold() {
  this.ptr = _btPersistentManifold_btPersistentManifold_0();
  getCache(btPersistentManifold)[this.ptr] = this;
};;
btPersistentManifold.prototype = Object.create(WrapperObject.prototype);
btPersistentManifold.prototype.constructor = btPersistentManifold;
btPersistentManifold.prototype.__class__ = btPersistentManifold;
btPersistentManifold.__cache__ = {};
Module['btPersistentManifold'] = btPersistentManifold;

btPersistentManifold.prototype['getBody0'] = btPersistentManifold.prototype.getBody0 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btPersistentManifold_getBody0_0(self), btCollisionObject);
};;

btPersistentManifold.prototype['getBody1'] = btPersistentManifold.prototype.getBody1 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btPersistentManifold_getBody1_0(self), btCollisionObject);
};;

btPersistentManifold.prototype['getNumContacts'] = btPersistentManifold.prototype.getNumContacts = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btPersistentManifold_getNumContacts_0(self);
};;

btPersistentManifold.prototype['getContactPoint'] = btPersistentManifold.prototype.getContactPoint = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return wrapPointer(_btPersistentManifold_getContactPoint_1(self, index), btManifoldPoint);
};;

  btPersistentManifold.prototype['__destroy__'] = btPersistentManifold.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btPersistentManifold___destroy___0(self);
};
// btBoxShape
/** @suppress {undefinedVars, duplicate} @this{Object} */function btBoxShape(boxHalfExtents) {
  if (boxHalfExtents && typeof boxHalfExtents === 'object') boxHalfExtents = boxHalfExtents.ptr;
  this.ptr = _btBoxShape_btBoxShape_1(boxHalfExtents);
  getCache(btBoxShape)[this.ptr] = this;
};;
btBoxShape.prototype = Object.create(btConvexInternalShape.prototype);
btBoxShape.prototype.constructor = btBoxShape;
btBoxShape.prototype.__class__ = btBoxShape;
btBoxShape.__cache__ = {};
Module['btBoxShape'] = btBoxShape;

btBoxShape.prototype['setMargin'] = btBoxShape.prototype.setMargin = /** @suppress {undefinedVars, duplicate} @this{Object} */function(margin) {
  var self = this.ptr;
  if (margin && typeof margin === 'object') margin = margin.ptr;
  _btBoxShape_setMargin_1(self, margin);
};;

btBoxShape.prototype['getMargin'] = btBoxShape.prototype.getMargin = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btBoxShape_getMargin_0(self);
};;

btBoxShape.prototype['setUnscaledHalfExtents'] = btBoxShape.prototype.setUnscaledHalfExtents = /** @suppress {undefinedVars, duplicate} @this{Object} */function(boxHalfExtents) {
  var self = this.ptr;
  if (boxHalfExtents && typeof boxHalfExtents === 'object') boxHalfExtents = boxHalfExtents.ptr;
  _btBoxShape_setUnscaledHalfExtents_1(self, boxHalfExtents);
};;

btBoxShape.prototype['setLocalScaling'] = btBoxShape.prototype.setLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function(scaling) {
  var self = this.ptr;
  if (scaling && typeof scaling === 'object') scaling = scaling.ptr;
  _btBoxShape_setLocalScaling_1(self, scaling);
};;

btBoxShape.prototype['getLocalScaling'] = btBoxShape.prototype.getLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btBoxShape_getLocalScaling_0(self), btVector3);
};;

btBoxShape.prototype['calculateLocalInertia'] = btBoxShape.prototype.calculateLocalInertia = /** @suppress {undefinedVars, duplicate} @this{Object} */function(mass, inertia) {
  var self = this.ptr;
  if (mass && typeof mass === 'object') mass = mass.ptr;
  if (inertia && typeof inertia === 'object') inertia = inertia.ptr;
  _btBoxShape_calculateLocalInertia_2(self, mass, inertia);
};;

btBoxShape.prototype['isCompound'] = btBoxShape.prototype.isCompound = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btBoxShape_isCompound_0(self));
};;

btBoxShape.prototype['getUserIndex'] = btBoxShape.prototype.getUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btBoxShape_getUserIndex_0(self);
};;

btBoxShape.prototype['setUserIndex'] = btBoxShape.prototype.setUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btBoxShape_setUserIndex_1(self, index);
};;

btBoxShape.prototype['getUserIndex2'] = btBoxShape.prototype.getUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btBoxShape_getUserIndex2_0(self);
};;

btBoxShape.prototype['setUserIndex2'] = btBoxShape.prototype.setUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btBoxShape_setUserIndex2_1(self, index);
};;

btBoxShape.prototype['getAabb'] = btBoxShape.prototype.getAabb = /** @suppress {undefinedVars, duplicate} @this{Object} */function(t, min, max) {
  var self = this.ptr;
  if (t && typeof t === 'object') t = t.ptr;
  if (min && typeof min === 'object') min = min.ptr;
  if (max && typeof max === 'object') max = max.ptr;
  _btBoxShape_getAabb_3(self, t, min, max);
};;

btBoxShape.prototype['getLocalBoundingSphere'] = btBoxShape.prototype.getLocalBoundingSphere = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btBoxShape_getLocalBoundingSphere_0(self);
};;

btBoxShape.prototype['getImplicitShapeDimensions'] = btBoxShape.prototype.getImplicitShapeDimensions = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btBoxShape_getImplicitShapeDimensions_0(self), btVector3);
};;

  btBoxShape.prototype['__destroy__'] = btBoxShape.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btBoxShape___destroy___0(self);
};
// btCapsuleShape
/** @suppress {undefinedVars, duplicate} @this{Object} */function btCapsuleShape(radius, height) {
  if (radius && typeof radius === 'object') radius = radius.ptr;
  if (height && typeof height === 'object') height = height.ptr;
  this.ptr = _btCapsuleShape_btCapsuleShape_2(radius, height);
  getCache(btCapsuleShape)[this.ptr] = this;
};;
btCapsuleShape.prototype = Object.create(btConvexInternalShape.prototype);
btCapsuleShape.prototype.constructor = btCapsuleShape;
btCapsuleShape.prototype.__class__ = btCapsuleShape;
btCapsuleShape.__cache__ = {};
Module['btCapsuleShape'] = btCapsuleShape;

btCapsuleShape.prototype['setMargin'] = btCapsuleShape.prototype.setMargin = /** @suppress {undefinedVars, duplicate} @this{Object} */function(margin) {
  var self = this.ptr;
  if (margin && typeof margin === 'object') margin = margin.ptr;
  _btCapsuleShape_setMargin_1(self, margin);
};;

btCapsuleShape.prototype['getMargin'] = btCapsuleShape.prototype.getMargin = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btCapsuleShape_getMargin_0(self);
};;

btCapsuleShape.prototype['updateProp'] = btCapsuleShape.prototype.updateProp = /** @suppress {undefinedVars, duplicate} @this{Object} */function(r, h, upAxis) {
  var self = this.ptr;
  if (r && typeof r === 'object') r = r.ptr;
  if (h && typeof h === 'object') h = h.ptr;
  if (upAxis && typeof upAxis === 'object') upAxis = upAxis.ptr;
  _btCapsuleShape_updateProp_3(self, r, h, upAxis);
};;

btCapsuleShape.prototype['setLocalScaling'] = btCapsuleShape.prototype.setLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function(scaling) {
  var self = this.ptr;
  if (scaling && typeof scaling === 'object') scaling = scaling.ptr;
  _btCapsuleShape_setLocalScaling_1(self, scaling);
};;

btCapsuleShape.prototype['getLocalScaling'] = btCapsuleShape.prototype.getLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btCapsuleShape_getLocalScaling_0(self), btVector3);
};;

btCapsuleShape.prototype['calculateLocalInertia'] = btCapsuleShape.prototype.calculateLocalInertia = /** @suppress {undefinedVars, duplicate} @this{Object} */function(mass, inertia) {
  var self = this.ptr;
  if (mass && typeof mass === 'object') mass = mass.ptr;
  if (inertia && typeof inertia === 'object') inertia = inertia.ptr;
  _btCapsuleShape_calculateLocalInertia_2(self, mass, inertia);
};;

btCapsuleShape.prototype['isCompound'] = btCapsuleShape.prototype.isCompound = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btCapsuleShape_isCompound_0(self));
};;

btCapsuleShape.prototype['getUserIndex'] = btCapsuleShape.prototype.getUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btCapsuleShape_getUserIndex_0(self);
};;

btCapsuleShape.prototype['setUserIndex'] = btCapsuleShape.prototype.setUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btCapsuleShape_setUserIndex_1(self, index);
};;

btCapsuleShape.prototype['getUserIndex2'] = btCapsuleShape.prototype.getUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btCapsuleShape_getUserIndex2_0(self);
};;

btCapsuleShape.prototype['setUserIndex2'] = btCapsuleShape.prototype.setUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btCapsuleShape_setUserIndex2_1(self, index);
};;

btCapsuleShape.prototype['getAabb'] = btCapsuleShape.prototype.getAabb = /** @suppress {undefinedVars, duplicate} @this{Object} */function(t, min, max) {
  var self = this.ptr;
  if (t && typeof t === 'object') t = t.ptr;
  if (min && typeof min === 'object') min = min.ptr;
  if (max && typeof max === 'object') max = max.ptr;
  _btCapsuleShape_getAabb_3(self, t, min, max);
};;

btCapsuleShape.prototype['getLocalBoundingSphere'] = btCapsuleShape.prototype.getLocalBoundingSphere = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btCapsuleShape_getLocalBoundingSphere_0(self);
};;

btCapsuleShape.prototype['getImplicitShapeDimensions'] = btCapsuleShape.prototype.getImplicitShapeDimensions = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btCapsuleShape_getImplicitShapeDimensions_0(self), btVector3);
};;

  btCapsuleShape.prototype['__destroy__'] = btCapsuleShape.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btCapsuleShape___destroy___0(self);
};
// btCompoundShape
/** @suppress {undefinedVars, duplicate} @this{Object} */function btCompoundShape(enableDynamicAabbTree) {
  if (enableDynamicAabbTree && typeof enableDynamicAabbTree === 'object') enableDynamicAabbTree = enableDynamicAabbTree.ptr;
  if (enableDynamicAabbTree === undefined) { this.ptr = _btCompoundShape_btCompoundShape_0(); getCache(btCompoundShape)[this.ptr] = this;return }
  this.ptr = _btCompoundShape_btCompoundShape_1(enableDynamicAabbTree);
  getCache(btCompoundShape)[this.ptr] = this;
};;
btCompoundShape.prototype = Object.create(btCollisionShape.prototype);
btCompoundShape.prototype.constructor = btCompoundShape;
btCompoundShape.prototype.__class__ = btCompoundShape;
btCompoundShape.__cache__ = {};
Module['btCompoundShape'] = btCompoundShape;

btCompoundShape.prototype['addChildShape'] = btCompoundShape.prototype.addChildShape = /** @suppress {undefinedVars, duplicate} @this{Object} */function(localTransform, shape) {
  var self = this.ptr;
  if (localTransform && typeof localTransform === 'object') localTransform = localTransform.ptr;
  if (shape && typeof shape === 'object') shape = shape.ptr;
  _btCompoundShape_addChildShape_2(self, localTransform, shape);
};;

btCompoundShape.prototype['removeChildShape'] = btCompoundShape.prototype.removeChildShape = /** @suppress {undefinedVars, duplicate} @this{Object} */function(shape) {
  var self = this.ptr;
  if (shape && typeof shape === 'object') shape = shape.ptr;
  _btCompoundShape_removeChildShape_1(self, shape);
};;

btCompoundShape.prototype['removeChildShapeByIndex'] = btCompoundShape.prototype.removeChildShapeByIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(childShapeindex) {
  var self = this.ptr;
  if (childShapeindex && typeof childShapeindex === 'object') childShapeindex = childShapeindex.ptr;
  _btCompoundShape_removeChildShapeByIndex_1(self, childShapeindex);
};;

btCompoundShape.prototype['getNumChildShapes'] = btCompoundShape.prototype.getNumChildShapes = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btCompoundShape_getNumChildShapes_0(self);
};;

btCompoundShape.prototype['getChildShape'] = btCompoundShape.prototype.getChildShape = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return wrapPointer(_btCompoundShape_getChildShape_1(self, index), btCollisionShape);
};;

btCompoundShape.prototype['updateChildTransform'] = btCompoundShape.prototype.updateChildTransform = /** @suppress {undefinedVars, duplicate} @this{Object} */function(childIndex, newChildTransform, shouldRecalculateLocalAabb) {
  var self = this.ptr;
  if (childIndex && typeof childIndex === 'object') childIndex = childIndex.ptr;
  if (newChildTransform && typeof newChildTransform === 'object') newChildTransform = newChildTransform.ptr;
  if (shouldRecalculateLocalAabb && typeof shouldRecalculateLocalAabb === 'object') shouldRecalculateLocalAabb = shouldRecalculateLocalAabb.ptr;
  if (shouldRecalculateLocalAabb === undefined) { _btCompoundShape_updateChildTransform_2(self, childIndex, newChildTransform);  return }
  _btCompoundShape_updateChildTransform_3(self, childIndex, newChildTransform, shouldRecalculateLocalAabb);
};;

btCompoundShape.prototype['setMargin'] = btCompoundShape.prototype.setMargin = /** @suppress {undefinedVars, duplicate} @this{Object} */function(margin) {
  var self = this.ptr;
  if (margin && typeof margin === 'object') margin = margin.ptr;
  _btCompoundShape_setMargin_1(self, margin);
};;

btCompoundShape.prototype['getMargin'] = btCompoundShape.prototype.getMargin = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btCompoundShape_getMargin_0(self);
};;

btCompoundShape.prototype['setMaterial'] = btCompoundShape.prototype.setMaterial = /** @suppress {undefinedVars, duplicate} @this{Object} */function(childShapeindex, f, r, rf, sf, m) {
  var self = this.ptr;
  if (childShapeindex && typeof childShapeindex === 'object') childShapeindex = childShapeindex.ptr;
  if (f && typeof f === 'object') f = f.ptr;
  if (r && typeof r === 'object') r = r.ptr;
  if (rf && typeof rf === 'object') rf = rf.ptr;
  if (sf && typeof sf === 'object') sf = sf.ptr;
  if (m && typeof m === 'object') m = m.ptr;
  if (rf === undefined) { _btCompoundShape_setMaterial_3(self, childShapeindex, f, r);  return }
  if (sf === undefined) { _btCompoundShape_setMaterial_4(self, childShapeindex, f, r, rf);  return }
  if (m === undefined) { _btCompoundShape_setMaterial_5(self, childShapeindex, f, r, rf, sf);  return }
  _btCompoundShape_setMaterial_6(self, childShapeindex, f, r, rf, sf, m);
};;

btCompoundShape.prototype['setLocalScaling'] = btCompoundShape.prototype.setLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function(scaling) {
  var self = this.ptr;
  if (scaling && typeof scaling === 'object') scaling = scaling.ptr;
  _btCompoundShape_setLocalScaling_1(self, scaling);
};;

btCompoundShape.prototype['getLocalScaling'] = btCompoundShape.prototype.getLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btCompoundShape_getLocalScaling_0(self), btVector3);
};;

btCompoundShape.prototype['calculateLocalInertia'] = btCompoundShape.prototype.calculateLocalInertia = /** @suppress {undefinedVars, duplicate} @this{Object} */function(mass, inertia) {
  var self = this.ptr;
  if (mass && typeof mass === 'object') mass = mass.ptr;
  if (inertia && typeof inertia === 'object') inertia = inertia.ptr;
  _btCompoundShape_calculateLocalInertia_2(self, mass, inertia);
};;

btCompoundShape.prototype['isCompound'] = btCompoundShape.prototype.isCompound = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btCompoundShape_isCompound_0(self));
};;

btCompoundShape.prototype['getUserIndex'] = btCompoundShape.prototype.getUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btCompoundShape_getUserIndex_0(self);
};;

btCompoundShape.prototype['setUserIndex'] = btCompoundShape.prototype.setUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btCompoundShape_setUserIndex_1(self, index);
};;

btCompoundShape.prototype['getUserIndex2'] = btCompoundShape.prototype.getUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btCompoundShape_getUserIndex2_0(self);
};;

btCompoundShape.prototype['setUserIndex2'] = btCompoundShape.prototype.setUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btCompoundShape_setUserIndex2_1(self, index);
};;

btCompoundShape.prototype['getAabb'] = btCompoundShape.prototype.getAabb = /** @suppress {undefinedVars, duplicate} @this{Object} */function(t, min, max) {
  var self = this.ptr;
  if (t && typeof t === 'object') t = t.ptr;
  if (min && typeof min === 'object') min = min.ptr;
  if (max && typeof max === 'object') max = max.ptr;
  _btCompoundShape_getAabb_3(self, t, min, max);
};;

btCompoundShape.prototype['getLocalBoundingSphere'] = btCompoundShape.prototype.getLocalBoundingSphere = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btCompoundShape_getLocalBoundingSphere_0(self);
};;

  btCompoundShape.prototype['__destroy__'] = btCompoundShape.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btCompoundShape___destroy___0(self);
};
// btDefaultMotionState
/** @suppress {undefinedVars, duplicate} @this{Object} */function btDefaultMotionState(startTrans, centerOfMassOffset) {
  if (startTrans && typeof startTrans === 'object') startTrans = startTrans.ptr;
  if (centerOfMassOffset && typeof centerOfMassOffset === 'object') centerOfMassOffset = centerOfMassOffset.ptr;
  if (startTrans === undefined) { this.ptr = _btDefaultMotionState_btDefaultMotionState_0(); getCache(btDefaultMotionState)[this.ptr] = this;return }
  if (centerOfMassOffset === undefined) { this.ptr = _btDefaultMotionState_btDefaultMotionState_1(startTrans); getCache(btDefaultMotionState)[this.ptr] = this;return }
  this.ptr = _btDefaultMotionState_btDefaultMotionState_2(startTrans, centerOfMassOffset);
  getCache(btDefaultMotionState)[this.ptr] = this;
};;
btDefaultMotionState.prototype = Object.create(btMotionState.prototype);
btDefaultMotionState.prototype.constructor = btDefaultMotionState;
btDefaultMotionState.prototype.__class__ = btDefaultMotionState;
btDefaultMotionState.__cache__ = {};
Module['btDefaultMotionState'] = btDefaultMotionState;

btDefaultMotionState.prototype['getWorldTransform'] = btDefaultMotionState.prototype.getWorldTransform = /** @suppress {undefinedVars, duplicate} @this{Object} */function(worldTrans) {
  var self = this.ptr;
  if (worldTrans && typeof worldTrans === 'object') worldTrans = worldTrans.ptr;
  _btDefaultMotionState_getWorldTransform_1(self, worldTrans);
};;

btDefaultMotionState.prototype['setWorldTransform'] = btDefaultMotionState.prototype.setWorldTransform = /** @suppress {undefinedVars, duplicate} @this{Object} */function(worldTrans) {
  var self = this.ptr;
  if (worldTrans && typeof worldTrans === 'object') worldTrans = worldTrans.ptr;
  _btDefaultMotionState_setWorldTransform_1(self, worldTrans);
};;

  btDefaultMotionState.prototype['__destroy__'] = btDefaultMotionState.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btDefaultMotionState___destroy___0(self);
};
// btHingeConstraint
/** @suppress {undefinedVars, duplicate} @this{Object} */function btHingeConstraint(rbA, rbB, rbAFrame, rbBFrame, useReferenceFrameA) {
  if (rbA && typeof rbA === 'object') rbA = rbA.ptr;
  if (rbB && typeof rbB === 'object') rbB = rbB.ptr;
  if (rbAFrame && typeof rbAFrame === 'object') rbAFrame = rbAFrame.ptr;
  if (rbBFrame && typeof rbBFrame === 'object') rbBFrame = rbBFrame.ptr;
  if (useReferenceFrameA && typeof useReferenceFrameA === 'object') useReferenceFrameA = useReferenceFrameA.ptr;
  if (useReferenceFrameA === undefined) { this.ptr = _btHingeConstraint_btHingeConstraint_4(rbA, rbB, rbAFrame, rbBFrame); getCache(btHingeConstraint)[this.ptr] = this;return }
  this.ptr = _btHingeConstraint_btHingeConstraint_5(rbA, rbB, rbAFrame, rbBFrame, useReferenceFrameA);
  getCache(btHingeConstraint)[this.ptr] = this;
};;
btHingeConstraint.prototype = Object.create(btTypedConstraint.prototype);
btHingeConstraint.prototype.constructor = btHingeConstraint;
btHingeConstraint.prototype.__class__ = btHingeConstraint;
btHingeConstraint.__cache__ = {};
Module['btHingeConstraint'] = btHingeConstraint;

btHingeConstraint.prototype['setLimit'] = btHingeConstraint.prototype.setLimit = /** @suppress {undefinedVars, duplicate} @this{Object} */function(low, high, softness, biasFactor, relaxationFactor) {
  var self = this.ptr;
  if (low && typeof low === 'object') low = low.ptr;
  if (high && typeof high === 'object') high = high.ptr;
  if (softness && typeof softness === 'object') softness = softness.ptr;
  if (biasFactor && typeof biasFactor === 'object') biasFactor = biasFactor.ptr;
  if (relaxationFactor && typeof relaxationFactor === 'object') relaxationFactor = relaxationFactor.ptr;
  if (relaxationFactor === undefined) { _btHingeConstraint_setLimit_4(self, low, high, softness, biasFactor);  return }
  _btHingeConstraint_setLimit_5(self, low, high, softness, biasFactor, relaxationFactor);
};;

btHingeConstraint.prototype['enableAngularMotor'] = btHingeConstraint.prototype.enableAngularMotor = /** @suppress {undefinedVars, duplicate} @this{Object} */function(enableMotor, targetVelocity, maxMotorImpulse) {
  var self = this.ptr;
  if (enableMotor && typeof enableMotor === 'object') enableMotor = enableMotor.ptr;
  if (targetVelocity && typeof targetVelocity === 'object') targetVelocity = targetVelocity.ptr;
  if (maxMotorImpulse && typeof maxMotorImpulse === 'object') maxMotorImpulse = maxMotorImpulse.ptr;
  _btHingeConstraint_enableAngularMotor_3(self, enableMotor, targetVelocity, maxMotorImpulse);
};;

btHingeConstraint.prototype['setAngularOnly'] = btHingeConstraint.prototype.setAngularOnly = /** @suppress {undefinedVars, duplicate} @this{Object} */function(angularOnly) {
  var self = this.ptr;
  if (angularOnly && typeof angularOnly === 'object') angularOnly = angularOnly.ptr;
  _btHingeConstraint_setAngularOnly_1(self, angularOnly);
};;

btHingeConstraint.prototype['enableMotor'] = btHingeConstraint.prototype.enableMotor = /** @suppress {undefinedVars, duplicate} @this{Object} */function(enableMotor) {
  var self = this.ptr;
  if (enableMotor && typeof enableMotor === 'object') enableMotor = enableMotor.ptr;
  _btHingeConstraint_enableMotor_1(self, enableMotor);
};;

btHingeConstraint.prototype['setMaxMotorImpulse'] = btHingeConstraint.prototype.setMaxMotorImpulse = /** @suppress {undefinedVars, duplicate} @this{Object} */function(maxMotorImpulse) {
  var self = this.ptr;
  if (maxMotorImpulse && typeof maxMotorImpulse === 'object') maxMotorImpulse = maxMotorImpulse.ptr;
  _btHingeConstraint_setMaxMotorImpulse_1(self, maxMotorImpulse);
};;

btHingeConstraint.prototype['setMotorTarget'] = btHingeConstraint.prototype.setMotorTarget = /** @suppress {undefinedVars, duplicate} @this{Object} */function(targetAngle, dt) {
  var self = this.ptr;
  if (targetAngle && typeof targetAngle === 'object') targetAngle = targetAngle.ptr;
  if (dt && typeof dt === 'object') dt = dt.ptr;
  _btHingeConstraint_setMotorTarget_2(self, targetAngle, dt);
};;

btHingeConstraint.prototype['setFrames'] = btHingeConstraint.prototype.setFrames = /** @suppress {undefinedVars, duplicate} @this{Object} */function(frameA, frameB) {
  var self = this.ptr;
  if (frameA && typeof frameA === 'object') frameA = frameA.ptr;
  if (frameB && typeof frameB === 'object') frameB = frameB.ptr;
  _btHingeConstraint_setFrames_2(self, frameA, frameB);
};;

btHingeConstraint.prototype['setAxis'] = btHingeConstraint.prototype.setAxis = /** @suppress {undefinedVars, duplicate} @this{Object} */function(axisInA) {
  var self = this.ptr;
  if (axisInA && typeof axisInA === 'object') axisInA = axisInA.ptr;
  _btHingeConstraint_setAxis_1(self, axisInA);
};;

btHingeConstraint.prototype['setUseReferenceFrameA'] = btHingeConstraint.prototype.setUseReferenceFrameA = /** @suppress {undefinedVars, duplicate} @this{Object} */function(urfa) {
  var self = this.ptr;
  if (urfa && typeof urfa === 'object') urfa = urfa.ptr;
  _btHingeConstraint_setUseReferenceFrameA_1(self, urfa);
};;

btHingeConstraint.prototype['enableFeedback'] = btHingeConstraint.prototype.enableFeedback = /** @suppress {undefinedVars, duplicate} @this{Object} */function(needsFeedback) {
  var self = this.ptr;
  if (needsFeedback && typeof needsFeedback === 'object') needsFeedback = needsFeedback.ptr;
  _btHingeConstraint_enableFeedback_1(self, needsFeedback);
};;

btHingeConstraint.prototype['getBreakingImpulseThreshold'] = btHingeConstraint.prototype.getBreakingImpulseThreshold = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btHingeConstraint_getBreakingImpulseThreshold_0(self);
};;

btHingeConstraint.prototype['setBreakingImpulseThreshold'] = btHingeConstraint.prototype.setBreakingImpulseThreshold = /** @suppress {undefinedVars, duplicate} @this{Object} */function(threshold) {
  var self = this.ptr;
  if (threshold && typeof threshold === 'object') threshold = threshold.ptr;
  _btHingeConstraint_setBreakingImpulseThreshold_1(self, threshold);
};;

btHingeConstraint.prototype['getParam'] = btHingeConstraint.prototype.getParam = /** @suppress {undefinedVars, duplicate} @this{Object} */function(num, axis) {
  var self = this.ptr;
  if (num && typeof num === 'object') num = num.ptr;
  if (axis && typeof axis === 'object') axis = axis.ptr;
  return _btHingeConstraint_getParam_2(self, num, axis);
};;

btHingeConstraint.prototype['setParam'] = btHingeConstraint.prototype.setParam = /** @suppress {undefinedVars, duplicate} @this{Object} */function(num, value, axis) {
  var self = this.ptr;
  if (num && typeof num === 'object') num = num.ptr;
  if (value && typeof value === 'object') value = value.ptr;
  if (axis && typeof axis === 'object') axis = axis.ptr;
  _btHingeConstraint_setParam_3(self, num, value, axis);
};;

  btHingeConstraint.prototype['__destroy__'] = btHingeConstraint.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btHingeConstraint___destroy___0(self);
};
// btQuaternion
/** @suppress {undefinedVars, duplicate} @this{Object} */function btQuaternion(x, y, z, w) {
  if (x && typeof x === 'object') x = x.ptr;
  if (y && typeof y === 'object') y = y.ptr;
  if (z && typeof z === 'object') z = z.ptr;
  if (w && typeof w === 'object') w = w.ptr;
  this.ptr = _btQuaternion_btQuaternion_4(x, y, z, w);
  getCache(btQuaternion)[this.ptr] = this;
};;
btQuaternion.prototype = Object.create(btQuadWord.prototype);
btQuaternion.prototype.constructor = btQuaternion;
btQuaternion.prototype.__class__ = btQuaternion;
btQuaternion.__cache__ = {};
Module['btQuaternion'] = btQuaternion;

btQuaternion.prototype['setValue'] = btQuaternion.prototype.setValue = /** @suppress {undefinedVars, duplicate} @this{Object} */function(x, y, z, w) {
  var self = this.ptr;
  if (x && typeof x === 'object') x = x.ptr;
  if (y && typeof y === 'object') y = y.ptr;
  if (z && typeof z === 'object') z = z.ptr;
  if (w && typeof w === 'object') w = w.ptr;
  _btQuaternion_setValue_4(self, x, y, z, w);
};;

btQuaternion.prototype['x'] = btQuaternion.prototype.x = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btQuaternion_x_0(self);
};;

btQuaternion.prototype['y'] = btQuaternion.prototype.y = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btQuaternion_y_0(self);
};;

btQuaternion.prototype['z'] = btQuaternion.prototype.z = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btQuaternion_z_0(self);
};;

btQuaternion.prototype['w'] = btQuaternion.prototype.w = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btQuaternion_w_0(self);
};;

btQuaternion.prototype['setX'] = btQuaternion.prototype.setX = /** @suppress {undefinedVars, duplicate} @this{Object} */function(x) {
  var self = this.ptr;
  if (x && typeof x === 'object') x = x.ptr;
  _btQuaternion_setX_1(self, x);
};;

btQuaternion.prototype['setY'] = btQuaternion.prototype.setY = /** @suppress {undefinedVars, duplicate} @this{Object} */function(y) {
  var self = this.ptr;
  if (y && typeof y === 'object') y = y.ptr;
  _btQuaternion_setY_1(self, y);
};;

btQuaternion.prototype['setZ'] = btQuaternion.prototype.setZ = /** @suppress {undefinedVars, duplicate} @this{Object} */function(z) {
  var self = this.ptr;
  if (z && typeof z === 'object') z = z.ptr;
  _btQuaternion_setZ_1(self, z);
};;

btQuaternion.prototype['setW'] = btQuaternion.prototype.setW = /** @suppress {undefinedVars, duplicate} @this{Object} */function(w) {
  var self = this.ptr;
  if (w && typeof w === 'object') w = w.ptr;
  _btQuaternion_setW_1(self, w);
};;

  btQuaternion.prototype['__destroy__'] = btQuaternion.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btQuaternion___destroy___0(self);
};
// btConeShape
/** @suppress {undefinedVars, duplicate} @this{Object} */function btConeShape(radius, height) {
  if (radius && typeof radius === 'object') radius = radius.ptr;
  if (height && typeof height === 'object') height = height.ptr;
  this.ptr = _btConeShape_btConeShape_2(radius, height);
  getCache(btConeShape)[this.ptr] = this;
};;
btConeShape.prototype = Object.create(btConvexInternalShape.prototype);
btConeShape.prototype.constructor = btConeShape;
btConeShape.prototype.__class__ = btConeShape;
btConeShape.__cache__ = {};
Module['btConeShape'] = btConeShape;

btConeShape.prototype['setRadius'] = btConeShape.prototype.setRadius = /** @suppress {undefinedVars, duplicate} @this{Object} */function(radius) {
  var self = this.ptr;
  if (radius && typeof radius === 'object') radius = radius.ptr;
  _btConeShape_setRadius_1(self, radius);
};;

btConeShape.prototype['setHeight'] = btConeShape.prototype.setHeight = /** @suppress {undefinedVars, duplicate} @this{Object} */function(height) {
  var self = this.ptr;
  if (height && typeof height === 'object') height = height.ptr;
  _btConeShape_setHeight_1(self, height);
};;

btConeShape.prototype['setConeUpIndex'] = btConeShape.prototype.setConeUpIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(upIndex) {
  var self = this.ptr;
  if (upIndex && typeof upIndex === 'object') upIndex = upIndex.ptr;
  _btConeShape_setConeUpIndex_1(self, upIndex);
};;

btConeShape.prototype['setLocalScaling'] = btConeShape.prototype.setLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function(scaling) {
  var self = this.ptr;
  if (scaling && typeof scaling === 'object') scaling = scaling.ptr;
  _btConeShape_setLocalScaling_1(self, scaling);
};;

btConeShape.prototype['getLocalScaling'] = btConeShape.prototype.getLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btConeShape_getLocalScaling_0(self), btVector3);
};;

btConeShape.prototype['calculateLocalInertia'] = btConeShape.prototype.calculateLocalInertia = /** @suppress {undefinedVars, duplicate} @this{Object} */function(mass, inertia) {
  var self = this.ptr;
  if (mass && typeof mass === 'object') mass = mass.ptr;
  if (inertia && typeof inertia === 'object') inertia = inertia.ptr;
  _btConeShape_calculateLocalInertia_2(self, mass, inertia);
};;

btConeShape.prototype['isCompound'] = btConeShape.prototype.isCompound = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btConeShape_isCompound_0(self));
};;

btConeShape.prototype['getUserIndex'] = btConeShape.prototype.getUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btConeShape_getUserIndex_0(self);
};;

btConeShape.prototype['setUserIndex'] = btConeShape.prototype.setUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btConeShape_setUserIndex_1(self, index);
};;

btConeShape.prototype['getUserIndex2'] = btConeShape.prototype.getUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btConeShape_getUserIndex2_0(self);
};;

btConeShape.prototype['setUserIndex2'] = btConeShape.prototype.setUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btConeShape_setUserIndex2_1(self, index);
};;

btConeShape.prototype['getAabb'] = btConeShape.prototype.getAabb = /** @suppress {undefinedVars, duplicate} @this{Object} */function(t, min, max) {
  var self = this.ptr;
  if (t && typeof t === 'object') t = t.ptr;
  if (min && typeof min === 'object') min = min.ptr;
  if (max && typeof max === 'object') max = max.ptr;
  _btConeShape_getAabb_3(self, t, min, max);
};;

btConeShape.prototype['getLocalBoundingSphere'] = btConeShape.prototype.getLocalBoundingSphere = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btConeShape_getLocalBoundingSphere_0(self);
};;

btConeShape.prototype['getImplicitShapeDimensions'] = btConeShape.prototype.getImplicitShapeDimensions = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btConeShape_getImplicitShapeDimensions_0(self), btVector3);
};;

  btConeShape.prototype['__destroy__'] = btConeShape.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btConeShape___destroy___0(self);
};
// btBU_Simplex1to4
/** @suppress {undefinedVars, duplicate} @this{Object} */function btBU_Simplex1to4() {
  this.ptr = _btBU_Simplex1to4_btBU_Simplex1to4_0();
  getCache(btBU_Simplex1to4)[this.ptr] = this;
};;
btBU_Simplex1to4.prototype = Object.create(btConvexShape.prototype);
btBU_Simplex1to4.prototype.constructor = btBU_Simplex1to4;
btBU_Simplex1to4.prototype.__class__ = btBU_Simplex1to4;
btBU_Simplex1to4.__cache__ = {};
Module['btBU_Simplex1to4'] = btBU_Simplex1to4;

btBU_Simplex1to4.prototype['addVertex'] = btBU_Simplex1to4.prototype.addVertex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(pt) {
  var self = this.ptr;
  if (pt && typeof pt === 'object') pt = pt.ptr;
  _btBU_Simplex1to4_addVertex_1(self, pt);
};;

btBU_Simplex1to4.prototype['setLocalScaling'] = btBU_Simplex1to4.prototype.setLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function(scaling) {
  var self = this.ptr;
  if (scaling && typeof scaling === 'object') scaling = scaling.ptr;
  _btBU_Simplex1to4_setLocalScaling_1(self, scaling);
};;

btBU_Simplex1to4.prototype['getLocalScaling'] = btBU_Simplex1to4.prototype.getLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btBU_Simplex1to4_getLocalScaling_0(self), btVector3);
};;

btBU_Simplex1to4.prototype['calculateLocalInertia'] = btBU_Simplex1to4.prototype.calculateLocalInertia = /** @suppress {undefinedVars, duplicate} @this{Object} */function(mass, inertia) {
  var self = this.ptr;
  if (mass && typeof mass === 'object') mass = mass.ptr;
  if (inertia && typeof inertia === 'object') inertia = inertia.ptr;
  _btBU_Simplex1to4_calculateLocalInertia_2(self, mass, inertia);
};;

btBU_Simplex1to4.prototype['isCompound'] = btBU_Simplex1to4.prototype.isCompound = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btBU_Simplex1to4_isCompound_0(self));
};;

btBU_Simplex1to4.prototype['getUserIndex'] = btBU_Simplex1to4.prototype.getUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btBU_Simplex1to4_getUserIndex_0(self);
};;

btBU_Simplex1to4.prototype['setUserIndex'] = btBU_Simplex1to4.prototype.setUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btBU_Simplex1to4_setUserIndex_1(self, index);
};;

btBU_Simplex1to4.prototype['getUserIndex2'] = btBU_Simplex1to4.prototype.getUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btBU_Simplex1to4_getUserIndex2_0(self);
};;

btBU_Simplex1to4.prototype['setUserIndex2'] = btBU_Simplex1to4.prototype.setUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btBU_Simplex1to4_setUserIndex2_1(self, index);
};;

btBU_Simplex1to4.prototype['getAabb'] = btBU_Simplex1to4.prototype.getAabb = /** @suppress {undefinedVars, duplicate} @this{Object} */function(t, min, max) {
  var self = this.ptr;
  if (t && typeof t === 'object') t = t.ptr;
  if (min && typeof min === 'object') min = min.ptr;
  if (max && typeof max === 'object') max = max.ptr;
  _btBU_Simplex1to4_getAabb_3(self, t, min, max);
};;

btBU_Simplex1to4.prototype['getLocalBoundingSphere'] = btBU_Simplex1to4.prototype.getLocalBoundingSphere = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btBU_Simplex1to4_getLocalBoundingSphere_0(self);
};;

  btBU_Simplex1to4.prototype['__destroy__'] = btBU_Simplex1to4.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btBU_Simplex1to4___destroy___0(self);
};
// btContactSolverInfo
/** @suppress {undefinedVars, duplicate} @this{Object} */function btContactSolverInfo() { throw "cannot construct a btContactSolverInfo, no constructor in IDL" }
btContactSolverInfo.prototype = Object.create(WrapperObject.prototype);
btContactSolverInfo.prototype.constructor = btContactSolverInfo;
btContactSolverInfo.prototype.__class__ = btContactSolverInfo;
btContactSolverInfo.__cache__ = {};
Module['btContactSolverInfo'] = btContactSolverInfo;

  btContactSolverInfo.prototype['get_m_splitImpulse'] = btContactSolverInfo.prototype.get_m_splitImpulse = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btContactSolverInfo_get_m_splitImpulse_0(self));
};
    btContactSolverInfo.prototype['set_m_splitImpulse'] = btContactSolverInfo.prototype.set_m_splitImpulse = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btContactSolverInfo_set_m_splitImpulse_1(self, arg0);
};
    Object.defineProperty(btContactSolverInfo.prototype, 'm_splitImpulse', { get: btContactSolverInfo.prototype.get_m_splitImpulse, set: btContactSolverInfo.prototype.set_m_splitImpulse });
  btContactSolverInfo.prototype['get_m_splitImpulsePenetrationThreshold'] = btContactSolverInfo.prototype.get_m_splitImpulsePenetrationThreshold = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0(self);
};
    btContactSolverInfo.prototype['set_m_splitImpulsePenetrationThreshold'] = btContactSolverInfo.prototype.set_m_splitImpulsePenetrationThreshold = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1(self, arg0);
};
    Object.defineProperty(btContactSolverInfo.prototype, 'm_splitImpulsePenetrationThreshold', { get: btContactSolverInfo.prototype.get_m_splitImpulsePenetrationThreshold, set: btContactSolverInfo.prototype.set_m_splitImpulsePenetrationThreshold });
  btContactSolverInfo.prototype['get_m_numIterations'] = btContactSolverInfo.prototype.get_m_numIterations = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btContactSolverInfo_get_m_numIterations_0(self);
};
    btContactSolverInfo.prototype['set_m_numIterations'] = btContactSolverInfo.prototype.set_m_numIterations = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btContactSolverInfo_set_m_numIterations_1(self, arg0);
};
    Object.defineProperty(btContactSolverInfo.prototype, 'm_numIterations', { get: btContactSolverInfo.prototype.get_m_numIterations, set: btContactSolverInfo.prototype.set_m_numIterations });
  btContactSolverInfo.prototype['__destroy__'] = btContactSolverInfo.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btContactSolverInfo___destroy___0(self);
};
// btStaticPlaneShape
/** @suppress {undefinedVars, duplicate} @this{Object} */function btStaticPlaneShape(planeNormal, planeConstant) {
  if (planeNormal && typeof planeNormal === 'object') planeNormal = planeNormal.ptr;
  if (planeConstant && typeof planeConstant === 'object') planeConstant = planeConstant.ptr;
  this.ptr = _btStaticPlaneShape_btStaticPlaneShape_2(planeNormal, planeConstant);
  getCache(btStaticPlaneShape)[this.ptr] = this;
};;
btStaticPlaneShape.prototype = Object.create(btConcaveShape.prototype);
btStaticPlaneShape.prototype.constructor = btStaticPlaneShape;
btStaticPlaneShape.prototype.__class__ = btStaticPlaneShape;
btStaticPlaneShape.__cache__ = {};
Module['btStaticPlaneShape'] = btStaticPlaneShape;

btStaticPlaneShape.prototype['getPlaneNormal'] = btStaticPlaneShape.prototype.getPlaneNormal = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btStaticPlaneShape_getPlaneNormal_0(self), btVector3);
};;

btStaticPlaneShape.prototype['setPlaneConstant'] = btStaticPlaneShape.prototype.setPlaneConstant = /** @suppress {undefinedVars, duplicate} @this{Object} */function(v) {
  var self = this.ptr;
  if (v && typeof v === 'object') v = v.ptr;
  _btStaticPlaneShape_setPlaneConstant_1(self, v);
};;

btStaticPlaneShape.prototype['setLocalScaling'] = btStaticPlaneShape.prototype.setLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function(scaling) {
  var self = this.ptr;
  if (scaling && typeof scaling === 'object') scaling = scaling.ptr;
  _btStaticPlaneShape_setLocalScaling_1(self, scaling);
};;

btStaticPlaneShape.prototype['getLocalScaling'] = btStaticPlaneShape.prototype.getLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btStaticPlaneShape_getLocalScaling_0(self), btVector3);
};;

btStaticPlaneShape.prototype['calculateLocalInertia'] = btStaticPlaneShape.prototype.calculateLocalInertia = /** @suppress {undefinedVars, duplicate} @this{Object} */function(mass, inertia) {
  var self = this.ptr;
  if (mass && typeof mass === 'object') mass = mass.ptr;
  if (inertia && typeof inertia === 'object') inertia = inertia.ptr;
  _btStaticPlaneShape_calculateLocalInertia_2(self, mass, inertia);
};;

btStaticPlaneShape.prototype['isCompound'] = btStaticPlaneShape.prototype.isCompound = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btStaticPlaneShape_isCompound_0(self));
};;

btStaticPlaneShape.prototype['getUserIndex'] = btStaticPlaneShape.prototype.getUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btStaticPlaneShape_getUserIndex_0(self);
};;

btStaticPlaneShape.prototype['setUserIndex'] = btStaticPlaneShape.prototype.setUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btStaticPlaneShape_setUserIndex_1(self, index);
};;

btStaticPlaneShape.prototype['getUserIndex2'] = btStaticPlaneShape.prototype.getUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btStaticPlaneShape_getUserIndex2_0(self);
};;

btStaticPlaneShape.prototype['setUserIndex2'] = btStaticPlaneShape.prototype.setUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btStaticPlaneShape_setUserIndex2_1(self, index);
};;

btStaticPlaneShape.prototype['getAabb'] = btStaticPlaneShape.prototype.getAabb = /** @suppress {undefinedVars, duplicate} @this{Object} */function(t, min, max) {
  var self = this.ptr;
  if (t && typeof t === 'object') t = t.ptr;
  if (min && typeof min === 'object') min = min.ptr;
  if (max && typeof max === 'object') max = max.ptr;
  _btStaticPlaneShape_getAabb_3(self, t, min, max);
};;

btStaticPlaneShape.prototype['getLocalBoundingSphere'] = btStaticPlaneShape.prototype.getLocalBoundingSphere = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btStaticPlaneShape_getLocalBoundingSphere_0(self);
};;

  btStaticPlaneShape.prototype['__destroy__'] = btStaticPlaneShape.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btStaticPlaneShape___destroy___0(self);
};
// btActionInterface
/** @suppress {undefinedVars, duplicate} @this{Object} */function btActionInterface() { throw "cannot construct a btActionInterface, no constructor in IDL" }
btActionInterface.prototype = Object.create(WrapperObject.prototype);
btActionInterface.prototype.constructor = btActionInterface;
btActionInterface.prototype.__class__ = btActionInterface;
btActionInterface.__cache__ = {};
Module['btActionInterface'] = btActionInterface;

btActionInterface.prototype['updateAction'] = btActionInterface.prototype.updateAction = /** @suppress {undefinedVars, duplicate} @this{Object} */function(collisionWorld, deltaTimeStep) {
  var self = this.ptr;
  if (collisionWorld && typeof collisionWorld === 'object') collisionWorld = collisionWorld.ptr;
  if (deltaTimeStep && typeof deltaTimeStep === 'object') deltaTimeStep = deltaTimeStep.ptr;
  _btActionInterface_updateAction_2(self, collisionWorld, deltaTimeStep);
};;

  btActionInterface.prototype['__destroy__'] = btActionInterface.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btActionInterface___destroy___0(self);
};
// btOverlappingPairCache
/** @suppress {undefinedVars, duplicate} @this{Object} */function btOverlappingPairCache() { throw "cannot construct a btOverlappingPairCache, no constructor in IDL" }
btOverlappingPairCache.prototype = Object.create(WrapperObject.prototype);
btOverlappingPairCache.prototype.constructor = btOverlappingPairCache;
btOverlappingPairCache.prototype.__class__ = btOverlappingPairCache;
btOverlappingPairCache.__cache__ = {};
Module['btOverlappingPairCache'] = btOverlappingPairCache;

btOverlappingPairCache.prototype['setInternalGhostPairCallback'] = btOverlappingPairCache.prototype.setInternalGhostPairCallback = /** @suppress {undefinedVars, duplicate} @this{Object} */function(ghostPairCallback) {
  var self = this.ptr;
  if (ghostPairCallback && typeof ghostPairCallback === 'object') ghostPairCallback = ghostPairCallback.ptr;
  _btOverlappingPairCache_setInternalGhostPairCallback_1(self, ghostPairCallback);
};;

btOverlappingPairCache.prototype['setOverlapFilterCallback'] = btOverlappingPairCache.prototype.setOverlapFilterCallback = /** @suppress {undefinedVars, duplicate} @this{Object} */function(cb) {
  var self = this.ptr;
  if (cb && typeof cb === 'object') cb = cb.ptr;
  _btOverlappingPairCache_setOverlapFilterCallback_1(self, cb);
};;

btOverlappingPairCache.prototype['getNumOverlappingPairs'] = btOverlappingPairCache.prototype.getNumOverlappingPairs = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btOverlappingPairCache_getNumOverlappingPairs_0(self);
};;

  btOverlappingPairCache.prototype['__destroy__'] = btOverlappingPairCache.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btOverlappingPairCache___destroy___0(self);
};
// btVector3
/** @suppress {undefinedVars, duplicate} @this{Object} */function btVector3(x, y, z) {
  if (x && typeof x === 'object') x = x.ptr;
  if (y && typeof y === 'object') y = y.ptr;
  if (z && typeof z === 'object') z = z.ptr;
  if (x === undefined) { this.ptr = _btVector3_btVector3_0(); getCache(btVector3)[this.ptr] = this;return }
  if (y === undefined) { this.ptr = _btVector3_btVector3_1(x); getCache(btVector3)[this.ptr] = this;return }
  if (z === undefined) { this.ptr = _btVector3_btVector3_2(x, y); getCache(btVector3)[this.ptr] = this;return }
  this.ptr = _btVector3_btVector3_3(x, y, z);
  getCache(btVector3)[this.ptr] = this;
};;
btVector3.prototype = Object.create(WrapperObject.prototype);
btVector3.prototype.constructor = btVector3;
btVector3.prototype.__class__ = btVector3;
btVector3.__cache__ = {};
Module['btVector3'] = btVector3;

btVector3.prototype['x'] = btVector3.prototype.x = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btVector3_x_0(self);
};;

btVector3.prototype['y'] = btVector3.prototype.y = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btVector3_y_0(self);
};;

btVector3.prototype['z'] = btVector3.prototype.z = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btVector3_z_0(self);
};;

btVector3.prototype['setX'] = btVector3.prototype.setX = /** @suppress {undefinedVars, duplicate} @this{Object} */function(x) {
  var self = this.ptr;
  if (x && typeof x === 'object') x = x.ptr;
  _btVector3_setX_1(self, x);
};;

btVector3.prototype['setY'] = btVector3.prototype.setY = /** @suppress {undefinedVars, duplicate} @this{Object} */function(y) {
  var self = this.ptr;
  if (y && typeof y === 'object') y = y.ptr;
  _btVector3_setY_1(self, y);
};;

btVector3.prototype['setZ'] = btVector3.prototype.setZ = /** @suppress {undefinedVars, duplicate} @this{Object} */function(z) {
  var self = this.ptr;
  if (z && typeof z === 'object') z = z.ptr;
  _btVector3_setZ_1(self, z);
};;

btVector3.prototype['setValue'] = btVector3.prototype.setValue = /** @suppress {undefinedVars, duplicate} @this{Object} */function(x, y, z) {
  var self = this.ptr;
  if (x && typeof x === 'object') x = x.ptr;
  if (y && typeof y === 'object') y = y.ptr;
  if (z && typeof z === 'object') z = z.ptr;
  _btVector3_setValue_3(self, x, y, z);
};;

  btVector3.prototype['__destroy__'] = btVector3.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btVector3___destroy___0(self);
};
// btSphereShape
/** @suppress {undefinedVars, duplicate} @this{Object} */function btSphereShape(radius) {
  if (radius && typeof radius === 'object') radius = radius.ptr;
  this.ptr = _btSphereShape_btSphereShape_1(radius);
  getCache(btSphereShape)[this.ptr] = this;
};;
btSphereShape.prototype = Object.create(btConvexInternalShape.prototype);
btSphereShape.prototype.constructor = btSphereShape;
btSphereShape.prototype.__class__ = btSphereShape;
btSphereShape.__cache__ = {};
Module['btSphereShape'] = btSphereShape;

btSphereShape.prototype['setMargin'] = btSphereShape.prototype.setMargin = /** @suppress {undefinedVars, duplicate} @this{Object} */function(margin) {
  var self = this.ptr;
  if (margin && typeof margin === 'object') margin = margin.ptr;
  _btSphereShape_setMargin_1(self, margin);
};;

btSphereShape.prototype['getMargin'] = btSphereShape.prototype.getMargin = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btSphereShape_getMargin_0(self);
};;

btSphereShape.prototype['setUnscaledRadius'] = btSphereShape.prototype.setUnscaledRadius = /** @suppress {undefinedVars, duplicate} @this{Object} */function(radius) {
  var self = this.ptr;
  if (radius && typeof radius === 'object') radius = radius.ptr;
  _btSphereShape_setUnscaledRadius_1(self, radius);
};;

btSphereShape.prototype['setLocalScaling'] = btSphereShape.prototype.setLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function(scaling) {
  var self = this.ptr;
  if (scaling && typeof scaling === 'object') scaling = scaling.ptr;
  _btSphereShape_setLocalScaling_1(self, scaling);
};;

btSphereShape.prototype['getLocalScaling'] = btSphereShape.prototype.getLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btSphereShape_getLocalScaling_0(self), btVector3);
};;

btSphereShape.prototype['calculateLocalInertia'] = btSphereShape.prototype.calculateLocalInertia = /** @suppress {undefinedVars, duplicate} @this{Object} */function(mass, inertia) {
  var self = this.ptr;
  if (mass && typeof mass === 'object') mass = mass.ptr;
  if (inertia && typeof inertia === 'object') inertia = inertia.ptr;
  _btSphereShape_calculateLocalInertia_2(self, mass, inertia);
};;

btSphereShape.prototype['isCompound'] = btSphereShape.prototype.isCompound = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btSphereShape_isCompound_0(self));
};;

btSphereShape.prototype['getUserIndex'] = btSphereShape.prototype.getUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btSphereShape_getUserIndex_0(self);
};;

btSphereShape.prototype['setUserIndex'] = btSphereShape.prototype.setUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btSphereShape_setUserIndex_1(self, index);
};;

btSphereShape.prototype['getUserIndex2'] = btSphereShape.prototype.getUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btSphereShape_getUserIndex2_0(self);
};;

btSphereShape.prototype['setUserIndex2'] = btSphereShape.prototype.setUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btSphereShape_setUserIndex2_1(self, index);
};;

btSphereShape.prototype['getAabb'] = btSphereShape.prototype.getAabb = /** @suppress {undefinedVars, duplicate} @this{Object} */function(t, min, max) {
  var self = this.ptr;
  if (t && typeof t === 'object') t = t.ptr;
  if (min && typeof min === 'object') min = min.ptr;
  if (max && typeof max === 'object') max = max.ptr;
  _btSphereShape_getAabb_3(self, t, min, max);
};;

btSphereShape.prototype['getLocalBoundingSphere'] = btSphereShape.prototype.getLocalBoundingSphere = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btSphereShape_getLocalBoundingSphere_0(self);
};;

btSphereShape.prototype['getImplicitShapeDimensions'] = btSphereShape.prototype.getImplicitShapeDimensions = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btSphereShape_getImplicitShapeDimensions_0(self), btVector3);
};;

  btSphereShape.prototype['__destroy__'] = btSphereShape.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btSphereShape___destroy___0(self);
};
// btDefaultCollisionConstructionInfo
/** @suppress {undefinedVars, duplicate} @this{Object} */function btDefaultCollisionConstructionInfo() {
  this.ptr = _btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0();
  getCache(btDefaultCollisionConstructionInfo)[this.ptr] = this;
};;
btDefaultCollisionConstructionInfo.prototype = Object.create(WrapperObject.prototype);
btDefaultCollisionConstructionInfo.prototype.constructor = btDefaultCollisionConstructionInfo;
btDefaultCollisionConstructionInfo.prototype.__class__ = btDefaultCollisionConstructionInfo;
btDefaultCollisionConstructionInfo.__cache__ = {};
Module['btDefaultCollisionConstructionInfo'] = btDefaultCollisionConstructionInfo;

  btDefaultCollisionConstructionInfo.prototype['__destroy__'] = btDefaultCollisionConstructionInfo.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btDefaultCollisionConstructionInfo___destroy___0(self);
};
// btEmptyShape
/** @suppress {undefinedVars, duplicate} @this{Object} */function btEmptyShape() {
  this.ptr = _btEmptyShape_btEmptyShape_0();
  getCache(btEmptyShape)[this.ptr] = this;
};;
btEmptyShape.prototype = Object.create(btConcaveShape.prototype);
btEmptyShape.prototype.constructor = btEmptyShape;
btEmptyShape.prototype.__class__ = btEmptyShape;
btEmptyShape.__cache__ = {};
Module['btEmptyShape'] = btEmptyShape;

btEmptyShape.prototype['setLocalScaling'] = btEmptyShape.prototype.setLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function(scaling) {
  var self = this.ptr;
  if (scaling && typeof scaling === 'object') scaling = scaling.ptr;
  _btEmptyShape_setLocalScaling_1(self, scaling);
};;

btEmptyShape.prototype['getLocalScaling'] = btEmptyShape.prototype.getLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btEmptyShape_getLocalScaling_0(self), btVector3);
};;

btEmptyShape.prototype['calculateLocalInertia'] = btEmptyShape.prototype.calculateLocalInertia = /** @suppress {undefinedVars, duplicate} @this{Object} */function(mass, inertia) {
  var self = this.ptr;
  if (mass && typeof mass === 'object') mass = mass.ptr;
  if (inertia && typeof inertia === 'object') inertia = inertia.ptr;
  _btEmptyShape_calculateLocalInertia_2(self, mass, inertia);
};;

btEmptyShape.prototype['isCompound'] = btEmptyShape.prototype.isCompound = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btEmptyShape_isCompound_0(self));
};;

btEmptyShape.prototype['getUserIndex'] = btEmptyShape.prototype.getUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btEmptyShape_getUserIndex_0(self);
};;

btEmptyShape.prototype['setUserIndex'] = btEmptyShape.prototype.setUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btEmptyShape_setUserIndex_1(self, index);
};;

btEmptyShape.prototype['getUserIndex2'] = btEmptyShape.prototype.getUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btEmptyShape_getUserIndex2_0(self);
};;

btEmptyShape.prototype['setUserIndex2'] = btEmptyShape.prototype.setUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btEmptyShape_setUserIndex2_1(self, index);
};;

btEmptyShape.prototype['getAabb'] = btEmptyShape.prototype.getAabb = /** @suppress {undefinedVars, duplicate} @this{Object} */function(t, min, max) {
  var self = this.ptr;
  if (t && typeof t === 'object') t = t.ptr;
  if (min && typeof min === 'object') min = min.ptr;
  if (max && typeof max === 'object') max = max.ptr;
  _btEmptyShape_getAabb_3(self, t, min, max);
};;

btEmptyShape.prototype['getLocalBoundingSphere'] = btEmptyShape.prototype.getLocalBoundingSphere = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btEmptyShape_getLocalBoundingSphere_0(self);
};;

  btEmptyShape.prototype['__destroy__'] = btEmptyShape.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btEmptyShape___destroy___0(self);
};
// btConstraintSetting
/** @suppress {undefinedVars, duplicate} @this{Object} */function btConstraintSetting() {
  this.ptr = _btConstraintSetting_btConstraintSetting_0();
  getCache(btConstraintSetting)[this.ptr] = this;
};;
btConstraintSetting.prototype = Object.create(WrapperObject.prototype);
btConstraintSetting.prototype.constructor = btConstraintSetting;
btConstraintSetting.prototype.__class__ = btConstraintSetting;
btConstraintSetting.__cache__ = {};
Module['btConstraintSetting'] = btConstraintSetting;

  btConstraintSetting.prototype['get_m_tau'] = btConstraintSetting.prototype.get_m_tau = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btConstraintSetting_get_m_tau_0(self);
};
    btConstraintSetting.prototype['set_m_tau'] = btConstraintSetting.prototype.set_m_tau = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btConstraintSetting_set_m_tau_1(self, arg0);
};
    Object.defineProperty(btConstraintSetting.prototype, 'm_tau', { get: btConstraintSetting.prototype.get_m_tau, set: btConstraintSetting.prototype.set_m_tau });
  btConstraintSetting.prototype['get_m_damping'] = btConstraintSetting.prototype.get_m_damping = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btConstraintSetting_get_m_damping_0(self);
};
    btConstraintSetting.prototype['set_m_damping'] = btConstraintSetting.prototype.set_m_damping = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btConstraintSetting_set_m_damping_1(self, arg0);
};
    Object.defineProperty(btConstraintSetting.prototype, 'm_damping', { get: btConstraintSetting.prototype.get_m_damping, set: btConstraintSetting.prototype.set_m_damping });
  btConstraintSetting.prototype['get_m_impulseClamp'] = btConstraintSetting.prototype.get_m_impulseClamp = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btConstraintSetting_get_m_impulseClamp_0(self);
};
    btConstraintSetting.prototype['set_m_impulseClamp'] = btConstraintSetting.prototype.set_m_impulseClamp = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _btConstraintSetting_set_m_impulseClamp_1(self, arg0);
};
    Object.defineProperty(btConstraintSetting.prototype, 'm_impulseClamp', { get: btConstraintSetting.prototype.get_m_impulseClamp, set: btConstraintSetting.prototype.set_m_impulseClamp });
  btConstraintSetting.prototype['__destroy__'] = btConstraintSetting.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btConstraintSetting___destroy___0(self);
};
// LocalShapeInfo
/** @suppress {undefinedVars, duplicate} @this{Object} */function LocalShapeInfo() { throw "cannot construct a LocalShapeInfo, no constructor in IDL" }
LocalShapeInfo.prototype = Object.create(WrapperObject.prototype);
LocalShapeInfo.prototype.constructor = LocalShapeInfo;
LocalShapeInfo.prototype.__class__ = LocalShapeInfo;
LocalShapeInfo.__cache__ = {};
Module['LocalShapeInfo'] = LocalShapeInfo;

  LocalShapeInfo.prototype['get_m_shapePart'] = LocalShapeInfo.prototype.get_m_shapePart = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _LocalShapeInfo_get_m_shapePart_0(self);
};
    LocalShapeInfo.prototype['set_m_shapePart'] = LocalShapeInfo.prototype.set_m_shapePart = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _LocalShapeInfo_set_m_shapePart_1(self, arg0);
};
    Object.defineProperty(LocalShapeInfo.prototype, 'm_shapePart', { get: LocalShapeInfo.prototype.get_m_shapePart, set: LocalShapeInfo.prototype.set_m_shapePart });
  LocalShapeInfo.prototype['get_m_triangleIndex'] = LocalShapeInfo.prototype.get_m_triangleIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _LocalShapeInfo_get_m_triangleIndex_0(self);
};
    LocalShapeInfo.prototype['set_m_triangleIndex'] = LocalShapeInfo.prototype.set_m_triangleIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(arg0) {
  var self = this.ptr;
  if (arg0 && typeof arg0 === 'object') arg0 = arg0.ptr;
  _LocalShapeInfo_set_m_triangleIndex_1(self, arg0);
};
    Object.defineProperty(LocalShapeInfo.prototype, 'm_triangleIndex', { get: LocalShapeInfo.prototype.get_m_triangleIndex, set: LocalShapeInfo.prototype.set_m_triangleIndex });
  LocalShapeInfo.prototype['__destroy__'] = LocalShapeInfo.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _LocalShapeInfo___destroy___0(self);
};
// btVector3Array
/** @suppress {undefinedVars, duplicate} @this{Object} */function btVector3Array() { throw "cannot construct a btVector3Array, no constructor in IDL" }
btVector3Array.prototype = Object.create(WrapperObject.prototype);
btVector3Array.prototype.constructor = btVector3Array;
btVector3Array.prototype.__class__ = btVector3Array;
btVector3Array.__cache__ = {};
Module['btVector3Array'] = btVector3Array;

btVector3Array.prototype['size'] = btVector3Array.prototype.size = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btVector3Array_size_0(self);
};;

btVector3Array.prototype['at'] = btVector3Array.prototype.at = /** @suppress {undefinedVars, duplicate} @this{Object} */function(n) {
  var self = this.ptr;
  if (n && typeof n === 'object') n = n.ptr;
  return wrapPointer(_btVector3Array_at_1(self, n), btVector3);
};;

btVector3Array.prototype['clear'] = btVector3Array.prototype.clear = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btVector3Array_clear_0(self);
};;

  btVector3Array.prototype['__destroy__'] = btVector3Array.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btVector3Array___destroy___0(self);
};
// btConstraintSolver
/** @suppress {undefinedVars, duplicate} @this{Object} */function btConstraintSolver() { throw "cannot construct a btConstraintSolver, no constructor in IDL" }
btConstraintSolver.prototype = Object.create(WrapperObject.prototype);
btConstraintSolver.prototype.constructor = btConstraintSolver;
btConstraintSolver.prototype.__class__ = btConstraintSolver;
btConstraintSolver.__cache__ = {};
Module['btConstraintSolver'] = btConstraintSolver;

  btConstraintSolver.prototype['__destroy__'] = btConstraintSolver.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btConstraintSolver___destroy___0(self);
};
// btFixedConstraint
/** @suppress {undefinedVars, duplicate} @this{Object} */function btFixedConstraint(rbA, rbB, frameInA, frameInB) {
  if (rbA && typeof rbA === 'object') rbA = rbA.ptr;
  if (rbB && typeof rbB === 'object') rbB = rbB.ptr;
  if (frameInA && typeof frameInA === 'object') frameInA = frameInA.ptr;
  if (frameInB && typeof frameInB === 'object') frameInB = frameInB.ptr;
  this.ptr = _btFixedConstraint_btFixedConstraint_4(rbA, rbB, frameInA, frameInB);
  getCache(btFixedConstraint)[this.ptr] = this;
};;
btFixedConstraint.prototype = Object.create(btTypedConstraint.prototype);
btFixedConstraint.prototype.constructor = btFixedConstraint;
btFixedConstraint.prototype.__class__ = btFixedConstraint;
btFixedConstraint.__cache__ = {};
Module['btFixedConstraint'] = btFixedConstraint;

btFixedConstraint.prototype['enableFeedback'] = btFixedConstraint.prototype.enableFeedback = /** @suppress {undefinedVars, duplicate} @this{Object} */function(needsFeedback) {
  var self = this.ptr;
  if (needsFeedback && typeof needsFeedback === 'object') needsFeedback = needsFeedback.ptr;
  _btFixedConstraint_enableFeedback_1(self, needsFeedback);
};;

btFixedConstraint.prototype['getBreakingImpulseThreshold'] = btFixedConstraint.prototype.getBreakingImpulseThreshold = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btFixedConstraint_getBreakingImpulseThreshold_0(self);
};;

btFixedConstraint.prototype['setBreakingImpulseThreshold'] = btFixedConstraint.prototype.setBreakingImpulseThreshold = /** @suppress {undefinedVars, duplicate} @this{Object} */function(threshold) {
  var self = this.ptr;
  if (threshold && typeof threshold === 'object') threshold = threshold.ptr;
  _btFixedConstraint_setBreakingImpulseThreshold_1(self, threshold);
};;

btFixedConstraint.prototype['getParam'] = btFixedConstraint.prototype.getParam = /** @suppress {undefinedVars, duplicate} @this{Object} */function(num, axis) {
  var self = this.ptr;
  if (num && typeof num === 'object') num = num.ptr;
  if (axis && typeof axis === 'object') axis = axis.ptr;
  return _btFixedConstraint_getParam_2(self, num, axis);
};;

btFixedConstraint.prototype['setParam'] = btFixedConstraint.prototype.setParam = /** @suppress {undefinedVars, duplicate} @this{Object} */function(num, value, axis) {
  var self = this.ptr;
  if (num && typeof num === 'object') num = num.ptr;
  if (value && typeof value === 'object') value = value.ptr;
  if (axis && typeof axis === 'object') axis = axis.ptr;
  _btFixedConstraint_setParam_3(self, num, value, axis);
};;

  btFixedConstraint.prototype['__destroy__'] = btFixedConstraint.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btFixedConstraint___destroy___0(self);
};
// btCollisionDispatcher
/** @suppress {undefinedVars, duplicate} @this{Object} */function btCollisionDispatcher(conf) {
  if (conf && typeof conf === 'object') conf = conf.ptr;
  this.ptr = _btCollisionDispatcher_btCollisionDispatcher_1(conf);
  getCache(btCollisionDispatcher)[this.ptr] = this;
};;
btCollisionDispatcher.prototype = Object.create(btDispatcher.prototype);
btCollisionDispatcher.prototype.constructor = btCollisionDispatcher;
btCollisionDispatcher.prototype.__class__ = btCollisionDispatcher;
btCollisionDispatcher.__cache__ = {};
Module['btCollisionDispatcher'] = btCollisionDispatcher;

btCollisionDispatcher.prototype['setDispatcherFlags'] = btCollisionDispatcher.prototype.setDispatcherFlags = /** @suppress {undefinedVars, duplicate} @this{Object} */function(flags) {
  var self = this.ptr;
  if (flags && typeof flags === 'object') flags = flags.ptr;
  _btCollisionDispatcher_setDispatcherFlags_1(self, flags);
};;

btCollisionDispatcher.prototype['getNumManifolds'] = btCollisionDispatcher.prototype.getNumManifolds = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btCollisionDispatcher_getNumManifolds_0(self);
};;

btCollisionDispatcher.prototype['getManifoldByIndexInternal'] = btCollisionDispatcher.prototype.getManifoldByIndexInternal = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  return wrapPointer(_btCollisionDispatcher_getManifoldByIndexInternal_1(self, index), btPersistentManifold);
};;

  btCollisionDispatcher.prototype['__destroy__'] = btCollisionDispatcher.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btCollisionDispatcher___destroy___0(self);
};
// btRigidBody
/** @suppress {undefinedVars, duplicate} @this{Object} */function btRigidBody(constructionInfo) {
  if (constructionInfo && typeof constructionInfo === 'object') constructionInfo = constructionInfo.ptr;
  this.ptr = _btRigidBody_btRigidBody_1(constructionInfo);
  getCache(btRigidBody)[this.ptr] = this;
};;
btRigidBody.prototype = Object.create(btCollisionObject.prototype);
btRigidBody.prototype.constructor = btRigidBody;
btRigidBody.prototype.__class__ = btRigidBody;
btRigidBody.__cache__ = {};
Module['btRigidBody'] = btRigidBody;

btRigidBody.prototype['getCenterOfMassTransform'] = btRigidBody.prototype.getCenterOfMassTransform = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btRigidBody_getCenterOfMassTransform_0(self), btTransform);
};;

btRigidBody.prototype['setCenterOfMassTransform'] = btRigidBody.prototype.setCenterOfMassTransform = /** @suppress {undefinedVars, duplicate} @this{Object} */function(xform) {
  var self = this.ptr;
  if (xform && typeof xform === 'object') xform = xform.ptr;
  _btRigidBody_setCenterOfMassTransform_1(self, xform);
};;

btRigidBody.prototype['setSleepingThresholds'] = btRigidBody.prototype.setSleepingThresholds = /** @suppress {undefinedVars, duplicate} @this{Object} */function(linear, angular) {
  var self = this.ptr;
  if (linear && typeof linear === 'object') linear = linear.ptr;
  if (angular && typeof angular === 'object') angular = angular.ptr;
  _btRigidBody_setSleepingThresholds_2(self, linear, angular);
};;

btRigidBody.prototype['getLinearSleepingThreshold'] = btRigidBody.prototype.getLinearSleepingThreshold = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btRigidBody_getLinearSleepingThreshold_0(self);
};;

btRigidBody.prototype['setDamping'] = btRigidBody.prototype.setDamping = /** @suppress {undefinedVars, duplicate} @this{Object} */function(lin_damping, ang_damping) {
  var self = this.ptr;
  if (lin_damping && typeof lin_damping === 'object') lin_damping = lin_damping.ptr;
  if (ang_damping && typeof ang_damping === 'object') ang_damping = ang_damping.ptr;
  _btRigidBody_setDamping_2(self, lin_damping, ang_damping);
};;

btRigidBody.prototype['setMassProps'] = btRigidBody.prototype.setMassProps = /** @suppress {undefinedVars, duplicate} @this{Object} */function(mass, inertia) {
  var self = this.ptr;
  if (mass && typeof mass === 'object') mass = mass.ptr;
  if (inertia && typeof inertia === 'object') inertia = inertia.ptr;
  _btRigidBody_setMassProps_2(self, mass, inertia);
};;

btRigidBody.prototype['getLinearFactor'] = btRigidBody.prototype.getLinearFactor = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btRigidBody_getLinearFactor_0(self), btVector3);
};;

btRigidBody.prototype['setLinearFactor'] = btRigidBody.prototype.setLinearFactor = /** @suppress {undefinedVars, duplicate} @this{Object} */function(linearFactor) {
  var self = this.ptr;
  if (linearFactor && typeof linearFactor === 'object') linearFactor = linearFactor.ptr;
  _btRigidBody_setLinearFactor_1(self, linearFactor);
};;

btRigidBody.prototype['applyTorque'] = btRigidBody.prototype.applyTorque = /** @suppress {undefinedVars, duplicate} @this{Object} */function(torque) {
  var self = this.ptr;
  if (torque && typeof torque === 'object') torque = torque.ptr;
  _btRigidBody_applyTorque_1(self, torque);
};;

btRigidBody.prototype['applyForce'] = btRigidBody.prototype.applyForce = /** @suppress {undefinedVars, duplicate} @this{Object} */function(force, rel_pos) {
  var self = this.ptr;
  if (force && typeof force === 'object') force = force.ptr;
  if (rel_pos && typeof rel_pos === 'object') rel_pos = rel_pos.ptr;
  _btRigidBody_applyForce_2(self, force, rel_pos);
};;

btRigidBody.prototype['applyCentralForce'] = btRigidBody.prototype.applyCentralForce = /** @suppress {undefinedVars, duplicate} @this{Object} */function(force) {
  var self = this.ptr;
  if (force && typeof force === 'object') force = force.ptr;
  _btRigidBody_applyCentralForce_1(self, force);
};;

btRigidBody.prototype['applyTorqueImpulse'] = btRigidBody.prototype.applyTorqueImpulse = /** @suppress {undefinedVars, duplicate} @this{Object} */function(torque) {
  var self = this.ptr;
  if (torque && typeof torque === 'object') torque = torque.ptr;
  _btRigidBody_applyTorqueImpulse_1(self, torque);
};;

btRigidBody.prototype['applyImpulse'] = btRigidBody.prototype.applyImpulse = /** @suppress {undefinedVars, duplicate} @this{Object} */function(impulse, rel_pos) {
  var self = this.ptr;
  if (impulse && typeof impulse === 'object') impulse = impulse.ptr;
  if (rel_pos && typeof rel_pos === 'object') rel_pos = rel_pos.ptr;
  _btRigidBody_applyImpulse_2(self, impulse, rel_pos);
};;

btRigidBody.prototype['updateInertiaTensor'] = btRigidBody.prototype.updateInertiaTensor = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btRigidBody_updateInertiaTensor_0(self);
};;

btRigidBody.prototype['getLinearVelocity'] = btRigidBody.prototype.getLinearVelocity = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btRigidBody_getLinearVelocity_0(self), btVector3);
};;

btRigidBody.prototype['getAngularVelocity'] = btRigidBody.prototype.getAngularVelocity = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btRigidBody_getAngularVelocity_0(self), btVector3);
};;

btRigidBody.prototype['setLinearVelocity'] = btRigidBody.prototype.setLinearVelocity = /** @suppress {undefinedVars, duplicate} @this{Object} */function(lin_vel) {
  var self = this.ptr;
  if (lin_vel && typeof lin_vel === 'object') lin_vel = lin_vel.ptr;
  _btRigidBody_setLinearVelocity_1(self, lin_vel);
};;

btRigidBody.prototype['setAngularVelocity'] = btRigidBody.prototype.setAngularVelocity = /** @suppress {undefinedVars, duplicate} @this{Object} */function(ang_vel) {
  var self = this.ptr;
  if (ang_vel && typeof ang_vel === 'object') ang_vel = ang_vel.ptr;
  _btRigidBody_setAngularVelocity_1(self, ang_vel);
};;

btRigidBody.prototype['getMotionState'] = btRigidBody.prototype.getMotionState = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btRigidBody_getMotionState_0(self), btMotionState);
};;

btRigidBody.prototype['getAngularFactor'] = btRigidBody.prototype.getAngularFactor = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btRigidBody_getAngularFactor_0(self), btVector3);
};;

btRigidBody.prototype['setAngularFactor'] = btRigidBody.prototype.setAngularFactor = /** @suppress {undefinedVars, duplicate} @this{Object} */function(angularFactor) {
  var self = this.ptr;
  if (angularFactor && typeof angularFactor === 'object') angularFactor = angularFactor.ptr;
  _btRigidBody_setAngularFactor_1(self, angularFactor);
};;

btRigidBody.prototype['getAabb'] = btRigidBody.prototype.getAabb = /** @suppress {undefinedVars, duplicate} @this{Object} */function(aabbMin, aabbMax) {
  var self = this.ptr;
  if (aabbMin && typeof aabbMin === 'object') aabbMin = aabbMin.ptr;
  if (aabbMax && typeof aabbMax === 'object') aabbMax = aabbMax.ptr;
  _btRigidBody_getAabb_2(self, aabbMin, aabbMax);
};;

btRigidBody.prototype['setGravity'] = btRigidBody.prototype.setGravity = /** @suppress {undefinedVars, duplicate} @this{Object} */function(acceleration) {
  var self = this.ptr;
  if (acceleration && typeof acceleration === 'object') acceleration = acceleration.ptr;
  _btRigidBody_setGravity_1(self, acceleration);
};;

btRigidBody.prototype['getFlags'] = btRigidBody.prototype.getFlags = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btRigidBody_getFlags_0(self);
};;

btRigidBody.prototype['setFlags'] = btRigidBody.prototype.setFlags = /** @suppress {undefinedVars, duplicate} @this{Object} */function(flags) {
  var self = this.ptr;
  if (flags && typeof flags === 'object') flags = flags.ptr;
  _btRigidBody_setFlags_1(self, flags);
};;

btRigidBody.prototype['wantsSleeping'] = btRigidBody.prototype.wantsSleeping = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btRigidBody_wantsSleeping_0(self));
};;

btRigidBody.prototype['clearForces'] = btRigidBody.prototype.clearForces = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btRigidBody_clearForces_0(self);
};;

btRigidBody.prototype['getTotalForce'] = btRigidBody.prototype.getTotalForce = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btRigidBody_getTotalForce_0(self), btVector3);
};;

btRigidBody.prototype['getTotalTorque'] = btRigidBody.prototype.getTotalTorque = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btRigidBody_getTotalTorque_0(self), btVector3);
};;

btRigidBody.prototype['clearState'] = btRigidBody.prototype.clearState = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btRigidBody_clearState_0(self);
};;

btRigidBody.prototype['getCollisionShape'] = btRigidBody.prototype.getCollisionShape = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btRigidBody_getCollisionShape_0(self), btCollisionShape);
};;

btRigidBody.prototype['getActivationState'] = btRigidBody.prototype.getActivationState = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btRigidBody_getActivationState_0(self);
};;

btRigidBody.prototype['setActivationState'] = btRigidBody.prototype.setActivationState = /** @suppress {undefinedVars, duplicate} @this{Object} */function(newState) {
  var self = this.ptr;
  if (newState && typeof newState === 'object') newState = newState.ptr;
  _btRigidBody_setActivationState_1(self, newState);
};;

btRigidBody.prototype['forceActivationState'] = btRigidBody.prototype.forceActivationState = /** @suppress {undefinedVars, duplicate} @this{Object} */function(newState) {
  var self = this.ptr;
  if (newState && typeof newState === 'object') newState = newState.ptr;
  _btRigidBody_forceActivationState_1(self, newState);
};;

btRigidBody.prototype['activate'] = btRigidBody.prototype.activate = /** @suppress {undefinedVars, duplicate} @this{Object} */function(forceActivation) {
  var self = this.ptr;
  if (forceActivation && typeof forceActivation === 'object') forceActivation = forceActivation.ptr;
  if (forceActivation === undefined) { _btRigidBody_activate_0(self);  return }
  _btRigidBody_activate_1(self, forceActivation);
};;

btRigidBody.prototype['isActive'] = btRigidBody.prototype.isActive = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btRigidBody_isActive_0(self));
};;

btRigidBody.prototype['isKinematicObject'] = btRigidBody.prototype.isKinematicObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btRigidBody_isKinematicObject_0(self));
};;

btRigidBody.prototype['isStaticObject'] = btRigidBody.prototype.isStaticObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btRigidBody_isStaticObject_0(self));
};;

btRigidBody.prototype['isStaticOrKinematicObject'] = btRigidBody.prototype.isStaticOrKinematicObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btRigidBody_isStaticOrKinematicObject_0(self));
};;

btRigidBody.prototype['setRestitution'] = btRigidBody.prototype.setRestitution = /** @suppress {undefinedVars, duplicate} @this{Object} */function(r) {
  var self = this.ptr;
  if (r && typeof r === 'object') r = r.ptr;
  _btRigidBody_setRestitution_1(self, r);
};;

btRigidBody.prototype['setFriction'] = btRigidBody.prototype.setFriction = /** @suppress {undefinedVars, duplicate} @this{Object} */function(f) {
  var self = this.ptr;
  if (f && typeof f === 'object') f = f.ptr;
  _btRigidBody_setFriction_1(self, f);
};;

btRigidBody.prototype['setRollingFriction'] = btRigidBody.prototype.setRollingFriction = /** @suppress {undefinedVars, duplicate} @this{Object} */function(rf) {
  var self = this.ptr;
  if (rf && typeof rf === 'object') rf = rf.ptr;
  _btRigidBody_setRollingFriction_1(self, rf);
};;

btRigidBody.prototype['setSpinningFriction'] = btRigidBody.prototype.setSpinningFriction = /** @suppress {undefinedVars, duplicate} @this{Object} */function(sf) {
  var self = this.ptr;
  if (sf && typeof sf === 'object') sf = sf.ptr;
  _btRigidBody_setSpinningFriction_1(self, sf);
};;

btRigidBody.prototype['getWorldTransform'] = btRigidBody.prototype.getWorldTransform = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btRigidBody_getWorldTransform_0(self), btTransform);
};;

btRigidBody.prototype['getCollisionFlags'] = btRigidBody.prototype.getCollisionFlags = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btRigidBody_getCollisionFlags_0(self);
};;

btRigidBody.prototype['setCollisionFlags'] = btRigidBody.prototype.setCollisionFlags = /** @suppress {undefinedVars, duplicate} @this{Object} */function(flags) {
  var self = this.ptr;
  if (flags && typeof flags === 'object') flags = flags.ptr;
  _btRigidBody_setCollisionFlags_1(self, flags);
};;

btRigidBody.prototype['setWorldTransform'] = btRigidBody.prototype.setWorldTransform = /** @suppress {undefinedVars, duplicate} @this{Object} */function(worldTrans) {
  var self = this.ptr;
  if (worldTrans && typeof worldTrans === 'object') worldTrans = worldTrans.ptr;
  _btRigidBody_setWorldTransform_1(self, worldTrans);
};;

btRigidBody.prototype['setCollisionShape'] = btRigidBody.prototype.setCollisionShape = /** @suppress {undefinedVars, duplicate} @this{Object} */function(collisionShape) {
  var self = this.ptr;
  if (collisionShape && typeof collisionShape === 'object') collisionShape = collisionShape.ptr;
  _btRigidBody_setCollisionShape_1(self, collisionShape);
};;

btRigidBody.prototype['setCcdMotionThreshold'] = btRigidBody.prototype.setCcdMotionThreshold = /** @suppress {undefinedVars, duplicate} @this{Object} */function(ccdMotionThreshold) {
  var self = this.ptr;
  if (ccdMotionThreshold && typeof ccdMotionThreshold === 'object') ccdMotionThreshold = ccdMotionThreshold.ptr;
  _btRigidBody_setCcdMotionThreshold_1(self, ccdMotionThreshold);
};;

btRigidBody.prototype['setCcdSweptSphereRadius'] = btRigidBody.prototype.setCcdSweptSphereRadius = /** @suppress {undefinedVars, duplicate} @this{Object} */function(radius) {
  var self = this.ptr;
  if (radius && typeof radius === 'object') radius = radius.ptr;
  _btRigidBody_setCcdSweptSphereRadius_1(self, radius);
};;

btRigidBody.prototype['getUserIndex'] = btRigidBody.prototype.getUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btRigidBody_getUserIndex_0(self);
};;

btRigidBody.prototype['setUserIndex'] = btRigidBody.prototype.setUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btRigidBody_setUserIndex_1(self, index);
};;

btRigidBody.prototype['setUserIndex2'] = btRigidBody.prototype.setUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btRigidBody_setUserIndex2_1(self, index);
};;

btRigidBody.prototype['setIgnoreCollisionCheck'] = btRigidBody.prototype.setIgnoreCollisionCheck = /** @suppress {undefinedVars, duplicate} @this{Object} */function(co, ig) {
  var self = this.ptr;
  if (co && typeof co === 'object') co = co.ptr;
  if (ig && typeof ig === 'object') ig = ig.ptr;
  _btRigidBody_setIgnoreCollisionCheck_2(self, co, ig);
};;

  btRigidBody.prototype['__destroy__'] = btRigidBody.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btRigidBody___destroy___0(self);
};
// btIndexedMeshArray
/** @suppress {undefinedVars, duplicate} @this{Object} */function btIndexedMeshArray() { throw "cannot construct a btIndexedMeshArray, no constructor in IDL" }
btIndexedMeshArray.prototype = Object.create(WrapperObject.prototype);
btIndexedMeshArray.prototype.constructor = btIndexedMeshArray;
btIndexedMeshArray.prototype.__class__ = btIndexedMeshArray;
btIndexedMeshArray.__cache__ = {};
Module['btIndexedMeshArray'] = btIndexedMeshArray;

btIndexedMeshArray.prototype['size'] = btIndexedMeshArray.prototype.size = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btIndexedMeshArray_size_0(self);
};;

btIndexedMeshArray.prototype['at'] = btIndexedMeshArray.prototype.at = /** @suppress {undefinedVars, duplicate} @this{Object} */function(n) {
  var self = this.ptr;
  if (n && typeof n === 'object') n = n.ptr;
  return wrapPointer(_btIndexedMeshArray_at_1(self, n), btIndexedMesh);
};;

  btIndexedMeshArray.prototype['__destroy__'] = btIndexedMeshArray.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btIndexedMeshArray___destroy___0(self);
};
// ccDiscreteDynamicsWorld
/** @suppress {undefinedVars, duplicate} @this{Object} */function ccDiscreteDynamicsWorld(dispatcher, pairCache, constraintSolver, collisionConfiguration) {
  if (dispatcher && typeof dispatcher === 'object') dispatcher = dispatcher.ptr;
  if (pairCache && typeof pairCache === 'object') pairCache = pairCache.ptr;
  if (constraintSolver && typeof constraintSolver === 'object') constraintSolver = constraintSolver.ptr;
  if (collisionConfiguration && typeof collisionConfiguration === 'object') collisionConfiguration = collisionConfiguration.ptr;
  this.ptr = _ccDiscreteDynamicsWorld_ccDiscreteDynamicsWorld_4(dispatcher, pairCache, constraintSolver, collisionConfiguration);
  getCache(ccDiscreteDynamicsWorld)[this.ptr] = this;
};;
ccDiscreteDynamicsWorld.prototype = Object.create(btDiscreteDynamicsWorld.prototype);
ccDiscreteDynamicsWorld.prototype.constructor = ccDiscreteDynamicsWorld;
ccDiscreteDynamicsWorld.prototype.__class__ = ccDiscreteDynamicsWorld;
ccDiscreteDynamicsWorld.__cache__ = {};
Module['ccDiscreteDynamicsWorld'] = ccDiscreteDynamicsWorld;

ccDiscreteDynamicsWorld.prototype['setAllowSleep'] = ccDiscreteDynamicsWorld.prototype.setAllowSleep = /** @suppress {undefinedVars, duplicate} @this{Object} */function(v) {
  var self = this.ptr;
  if (v && typeof v === 'object') v = v.ptr;
  _ccDiscreteDynamicsWorld_setAllowSleep_1(self, v);
};;

ccDiscreteDynamicsWorld.prototype['setDeactivationTime'] = ccDiscreteDynamicsWorld.prototype.setDeactivationTime = /** @suppress {undefinedVars, duplicate} @this{Object} */function(v) {
  var self = this.ptr;
  if (v && typeof v === 'object') v = v.ptr;
  _ccDiscreteDynamicsWorld_setDeactivationTime_1(self, v);
};;

ccDiscreteDynamicsWorld.prototype['setNarrowPhaseMethod'] = ccDiscreteDynamicsWorld.prototype.setNarrowPhaseMethod = /** @suppress {undefinedVars, duplicate} @this{Object} */function(v) {
  var self = this.ptr;
  if (v && typeof v === 'object') v = v.ptr;
  _ccDiscreteDynamicsWorld_setNarrowPhaseMethod_1(self, v);
};;

ccDiscreteDynamicsWorld.prototype['setAllowCcdPenetration'] = ccDiscreteDynamicsWorld.prototype.setAllowCcdPenetration = /** @suppress {undefinedVars, duplicate} @this{Object} */function(v) {
  var self = this.ptr;
  if (v && typeof v === 'object') v = v.ptr;
  _ccDiscreteDynamicsWorld_setAllowCcdPenetration_1(self, v);
};;

ccDiscreteDynamicsWorld.prototype['getCcdTriggerRecorder'] = ccDiscreteDynamicsWorld.prototype.getCcdTriggerRecorder = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ccDiscreteDynamicsWorld_getCcdTriggerRecorder_0(self), btIntArray);
};;

ccDiscreteDynamicsWorld.prototype['rayTest'] = ccDiscreteDynamicsWorld.prototype.rayTest = /** @suppress {undefinedVars, duplicate} @this{Object} */function(rayFromWorld, rayToWorld, resultCallback) {
  var self = this.ptr;
  if (rayFromWorld && typeof rayFromWorld === 'object') rayFromWorld = rayFromWorld.ptr;
  if (rayToWorld && typeof rayToWorld === 'object') rayToWorld = rayToWorld.ptr;
  if (resultCallback && typeof resultCallback === 'object') resultCallback = resultCallback.ptr;
  _ccDiscreteDynamicsWorld_rayTest_3(self, rayFromWorld, rayToWorld, resultCallback);
};;

ccDiscreteDynamicsWorld.prototype['rayTestSingle'] = ccDiscreteDynamicsWorld.prototype.rayTestSingle = /** @suppress {undefinedVars, duplicate} @this{Object} */function(rayFromTrans, rayToTrans, collisionObject, collisionShape, colObjWorldTransform, resultCallback) {
  var self = this.ptr;
  if (rayFromTrans && typeof rayFromTrans === 'object') rayFromTrans = rayFromTrans.ptr;
  if (rayToTrans && typeof rayToTrans === 'object') rayToTrans = rayToTrans.ptr;
  if (collisionObject && typeof collisionObject === 'object') collisionObject = collisionObject.ptr;
  if (collisionShape && typeof collisionShape === 'object') collisionShape = collisionShape.ptr;
  if (colObjWorldTransform && typeof colObjWorldTransform === 'object') colObjWorldTransform = colObjWorldTransform.ptr;
  if (resultCallback && typeof resultCallback === 'object') resultCallback = resultCallback.ptr;
  _ccDiscreteDynamicsWorld_rayTestSingle_6(self, rayFromTrans, rayToTrans, collisionObject, collisionShape, colObjWorldTransform, resultCallback);
};;

ccDiscreteDynamicsWorld.prototype['getPairCache'] = ccDiscreteDynamicsWorld.prototype.getPairCache = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ccDiscreteDynamicsWorld_getPairCache_0(self), btOverlappingPairCache);
};;

ccDiscreteDynamicsWorld.prototype['addCollisionObject'] = ccDiscreteDynamicsWorld.prototype.addCollisionObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function(collisionObject, collisionFilterGroup, collisionFilterMask) {
  var self = this.ptr;
  if (collisionObject && typeof collisionObject === 'object') collisionObject = collisionObject.ptr;
  if (collisionFilterGroup && typeof collisionFilterGroup === 'object') collisionFilterGroup = collisionFilterGroup.ptr;
  if (collisionFilterMask && typeof collisionFilterMask === 'object') collisionFilterMask = collisionFilterMask.ptr;
  if (collisionFilterGroup === undefined) { _ccDiscreteDynamicsWorld_addCollisionObject_1(self, collisionObject);  return }
  if (collisionFilterMask === undefined) { _ccDiscreteDynamicsWorld_addCollisionObject_2(self, collisionObject, collisionFilterGroup);  return }
  _ccDiscreteDynamicsWorld_addCollisionObject_3(self, collisionObject, collisionFilterGroup, collisionFilterMask);
};;

ccDiscreteDynamicsWorld.prototype['removeCollisionObject'] = ccDiscreteDynamicsWorld.prototype.removeCollisionObject = /** @suppress {undefinedVars, duplicate} @this{Object} */function(collisionObject) {
  var self = this.ptr;
  if (collisionObject && typeof collisionObject === 'object') collisionObject = collisionObject.ptr;
  _ccDiscreteDynamicsWorld_removeCollisionObject_1(self, collisionObject);
};;

ccDiscreteDynamicsWorld.prototype['setContactBreakingThreshold'] = ccDiscreteDynamicsWorld.prototype.setContactBreakingThreshold = /** @suppress {undefinedVars, duplicate} @this{Object} */function(b) {
  var self = this.ptr;
  if (b && typeof b === 'object') b = b.ptr;
  _ccDiscreteDynamicsWorld_setContactBreakingThreshold_1(self, b);
};;

ccDiscreteDynamicsWorld.prototype['setGravity'] = ccDiscreteDynamicsWorld.prototype.setGravity = /** @suppress {undefinedVars, duplicate} @this{Object} */function(gravity) {
  var self = this.ptr;
  if (gravity && typeof gravity === 'object') gravity = gravity.ptr;
  _ccDiscreteDynamicsWorld_setGravity_1(self, gravity);
};;

ccDiscreteDynamicsWorld.prototype['getGravity'] = ccDiscreteDynamicsWorld.prototype.getGravity = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ccDiscreteDynamicsWorld_getGravity_0(self), btVector3);
};;

ccDiscreteDynamicsWorld.prototype['addRigidBody'] = ccDiscreteDynamicsWorld.prototype.addRigidBody = /** @suppress {undefinedVars, duplicate} @this{Object} */function(body, group, mask) {
  var self = this.ptr;
  if (body && typeof body === 'object') body = body.ptr;
  if (group && typeof group === 'object') group = group.ptr;
  if (mask && typeof mask === 'object') mask = mask.ptr;
  if (group === undefined) { _ccDiscreteDynamicsWorld_addRigidBody_1(self, body);  return }
  if (mask === undefined) { _ccDiscreteDynamicsWorld_addRigidBody_2(self, body, group);  return }
  _ccDiscreteDynamicsWorld_addRigidBody_3(self, body, group, mask);
};;

ccDiscreteDynamicsWorld.prototype['removeRigidBody'] = ccDiscreteDynamicsWorld.prototype.removeRigidBody = /** @suppress {undefinedVars, duplicate} @this{Object} */function(body) {
  var self = this.ptr;
  if (body && typeof body === 'object') body = body.ptr;
  _ccDiscreteDynamicsWorld_removeRigidBody_1(self, body);
};;

ccDiscreteDynamicsWorld.prototype['addConstraint'] = ccDiscreteDynamicsWorld.prototype.addConstraint = /** @suppress {undefinedVars, duplicate} @this{Object} */function(constraint, disableCollisionsBetweenLinkedBodies) {
  var self = this.ptr;
  if (constraint && typeof constraint === 'object') constraint = constraint.ptr;
  if (disableCollisionsBetweenLinkedBodies && typeof disableCollisionsBetweenLinkedBodies === 'object') disableCollisionsBetweenLinkedBodies = disableCollisionsBetweenLinkedBodies.ptr;
  if (disableCollisionsBetweenLinkedBodies === undefined) { _ccDiscreteDynamicsWorld_addConstraint_1(self, constraint);  return }
  _ccDiscreteDynamicsWorld_addConstraint_2(self, constraint, disableCollisionsBetweenLinkedBodies);
};;

ccDiscreteDynamicsWorld.prototype['removeConstraint'] = ccDiscreteDynamicsWorld.prototype.removeConstraint = /** @suppress {undefinedVars, duplicate} @this{Object} */function(constraint) {
  var self = this.ptr;
  if (constraint && typeof constraint === 'object') constraint = constraint.ptr;
  _ccDiscreteDynamicsWorld_removeConstraint_1(self, constraint);
};;

ccDiscreteDynamicsWorld.prototype['stepSimulation'] = ccDiscreteDynamicsWorld.prototype.stepSimulation = /** @suppress {undefinedVars, duplicate} @this{Object} */function(timeStep, maxSubSteps, fixedTimeStep) {
  var self = this.ptr;
  if (timeStep && typeof timeStep === 'object') timeStep = timeStep.ptr;
  if (maxSubSteps && typeof maxSubSteps === 'object') maxSubSteps = maxSubSteps.ptr;
  if (fixedTimeStep && typeof fixedTimeStep === 'object') fixedTimeStep = fixedTimeStep.ptr;
  if (maxSubSteps === undefined) { return _ccDiscreteDynamicsWorld_stepSimulation_1(self, timeStep) }
  if (fixedTimeStep === undefined) { return _ccDiscreteDynamicsWorld_stepSimulation_2(self, timeStep, maxSubSteps) }
  return _ccDiscreteDynamicsWorld_stepSimulation_3(self, timeStep, maxSubSteps, fixedTimeStep);
};;

ccDiscreteDynamicsWorld.prototype['addAction'] = ccDiscreteDynamicsWorld.prototype.addAction = /** @suppress {undefinedVars, duplicate} @this{Object} */function(action) {
  var self = this.ptr;
  if (action && typeof action === 'object') action = action.ptr;
  _ccDiscreteDynamicsWorld_addAction_1(self, action);
};;

ccDiscreteDynamicsWorld.prototype['removeAction'] = ccDiscreteDynamicsWorld.prototype.removeAction = /** @suppress {undefinedVars, duplicate} @this{Object} */function(action) {
  var self = this.ptr;
  if (action && typeof action === 'object') action = action.ptr;
  _ccDiscreteDynamicsWorld_removeAction_1(self, action);
};;

ccDiscreteDynamicsWorld.prototype['getSolverInfo'] = ccDiscreteDynamicsWorld.prototype.getSolverInfo = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ccDiscreteDynamicsWorld_getSolverInfo_0(self), btContactSolverInfo);
};;

ccDiscreteDynamicsWorld.prototype['getFixedBody'] = ccDiscreteDynamicsWorld.prototype.getFixedBody = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_ccDiscreteDynamicsWorld_getFixedBody_0(self), btRigidBody);
};;

  ccDiscreteDynamicsWorld.prototype['__destroy__'] = ccDiscreteDynamicsWorld.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _ccDiscreteDynamicsWorld___destroy___0(self);
};
// btTransform
/** @suppress {undefinedVars, duplicate} @this{Object} */function btTransform(q, v) {
  if (q && typeof q === 'object') q = q.ptr;
  if (v && typeof v === 'object') v = v.ptr;
  if (q === undefined) { this.ptr = _btTransform_btTransform_0(); getCache(btTransform)[this.ptr] = this;return }
  if (v === undefined) { this.ptr = _btTransform_btTransform_1(q); getCache(btTransform)[this.ptr] = this;return }
  this.ptr = _btTransform_btTransform_2(q, v);
  getCache(btTransform)[this.ptr] = this;
};;
btTransform.prototype = Object.create(WrapperObject.prototype);
btTransform.prototype.constructor = btTransform;
btTransform.prototype.__class__ = btTransform;
btTransform.__cache__ = {};
Module['btTransform'] = btTransform;

btTransform.prototype['setIdentity'] = btTransform.prototype.setIdentity = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btTransform_setIdentity_0(self);
};;

btTransform.prototype['setOrigin'] = btTransform.prototype.setOrigin = /** @suppress {undefinedVars, duplicate} @this{Object} */function(origin) {
  var self = this.ptr;
  if (origin && typeof origin === 'object') origin = origin.ptr;
  _btTransform_setOrigin_1(self, origin);
};;

btTransform.prototype['setRotation'] = btTransform.prototype.setRotation = /** @suppress {undefinedVars, duplicate} @this{Object} */function(rotation) {
  var self = this.ptr;
  if (rotation && typeof rotation === 'object') rotation = rotation.ptr;
  _btTransform_setRotation_1(self, rotation);
};;

btTransform.prototype['getOrigin'] = btTransform.prototype.getOrigin = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btTransform_getOrigin_0(self), btVector3);
};;

btTransform.prototype['getRotation'] = btTransform.prototype.getRotation = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btTransform_getRotation_0(self), btQuaternion);
};;

btTransform.prototype['getBasis'] = btTransform.prototype.getBasis = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btTransform_getBasis_0(self), btMatrix3x3);
};;

btTransform.prototype['inverse'] = btTransform.prototype.inverse = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btTransform_inverse_0(self), btTransform);
};;

btTransform.prototype['op_mul'] = btTransform.prototype.op_mul = /** @suppress {undefinedVars, duplicate} @this{Object} */function(t) {
  var self = this.ptr;
  if (t && typeof t === 'object') t = t.ptr;
  return wrapPointer(_btTransform_op_mul_1(self, t), btTransform);
};;

  btTransform.prototype['__destroy__'] = btTransform.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btTransform___destroy___0(self);
};
// btCylinderShape
/** @suppress {undefinedVars, duplicate} @this{Object} */function btCylinderShape(halfExtents) {
  if (halfExtents && typeof halfExtents === 'object') halfExtents = halfExtents.ptr;
  this.ptr = _btCylinderShape_btCylinderShape_1(halfExtents);
  getCache(btCylinderShape)[this.ptr] = this;
};;
btCylinderShape.prototype = Object.create(btConvexInternalShape.prototype);
btCylinderShape.prototype.constructor = btCylinderShape;
btCylinderShape.prototype.__class__ = btCylinderShape;
btCylinderShape.__cache__ = {};
Module['btCylinderShape'] = btCylinderShape;

btCylinderShape.prototype['setMargin'] = btCylinderShape.prototype.setMargin = /** @suppress {undefinedVars, duplicate} @this{Object} */function(margin) {
  var self = this.ptr;
  if (margin && typeof margin === 'object') margin = margin.ptr;
  _btCylinderShape_setMargin_1(self, margin);
};;

btCylinderShape.prototype['getMargin'] = btCylinderShape.prototype.getMargin = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btCylinderShape_getMargin_0(self);
};;

btCylinderShape.prototype['updateProp'] = btCylinderShape.prototype.updateProp = /** @suppress {undefinedVars, duplicate} @this{Object} */function(r, h, upAxis) {
  var self = this.ptr;
  if (r && typeof r === 'object') r = r.ptr;
  if (h && typeof h === 'object') h = h.ptr;
  if (upAxis && typeof upAxis === 'object') upAxis = upAxis.ptr;
  _btCylinderShape_updateProp_3(self, r, h, upAxis);
};;

btCylinderShape.prototype['setLocalScaling'] = btCylinderShape.prototype.setLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function(scaling) {
  var self = this.ptr;
  if (scaling && typeof scaling === 'object') scaling = scaling.ptr;
  _btCylinderShape_setLocalScaling_1(self, scaling);
};;

btCylinderShape.prototype['getLocalScaling'] = btCylinderShape.prototype.getLocalScaling = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btCylinderShape_getLocalScaling_0(self), btVector3);
};;

btCylinderShape.prototype['calculateLocalInertia'] = btCylinderShape.prototype.calculateLocalInertia = /** @suppress {undefinedVars, duplicate} @this{Object} */function(mass, inertia) {
  var self = this.ptr;
  if (mass && typeof mass === 'object') mass = mass.ptr;
  if (inertia && typeof inertia === 'object') inertia = inertia.ptr;
  _btCylinderShape_calculateLocalInertia_2(self, mass, inertia);
};;

btCylinderShape.prototype['isCompound'] = btCylinderShape.prototype.isCompound = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return !!(_btCylinderShape_isCompound_0(self));
};;

btCylinderShape.prototype['getUserIndex'] = btCylinderShape.prototype.getUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btCylinderShape_getUserIndex_0(self);
};;

btCylinderShape.prototype['setUserIndex'] = btCylinderShape.prototype.setUserIndex = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btCylinderShape_setUserIndex_1(self, index);
};;

btCylinderShape.prototype['getUserIndex2'] = btCylinderShape.prototype.getUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btCylinderShape_getUserIndex2_0(self);
};;

btCylinderShape.prototype['setUserIndex2'] = btCylinderShape.prototype.setUserIndex2 = /** @suppress {undefinedVars, duplicate} @this{Object} */function(index) {
  var self = this.ptr;
  if (index && typeof index === 'object') index = index.ptr;
  _btCylinderShape_setUserIndex2_1(self, index);
};;

btCylinderShape.prototype['getAabb'] = btCylinderShape.prototype.getAabb = /** @suppress {undefinedVars, duplicate} @this{Object} */function(t, min, max) {
  var self = this.ptr;
  if (t && typeof t === 'object') t = t.ptr;
  if (min && typeof min === 'object') min = min.ptr;
  if (max && typeof max === 'object') max = max.ptr;
  _btCylinderShape_getAabb_3(self, t, min, max);
};;

btCylinderShape.prototype['getLocalBoundingSphere'] = btCylinderShape.prototype.getLocalBoundingSphere = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return _btCylinderShape_getLocalBoundingSphere_0(self);
};;

btCylinderShape.prototype['getImplicitShapeDimensions'] = btCylinderShape.prototype.getImplicitShapeDimensions = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  return wrapPointer(_btCylinderShape_getImplicitShapeDimensions_0(self), btVector3);
};;

  btCylinderShape.prototype['__destroy__'] = btCylinderShape.prototype.__destroy__ = /** @suppress {undefinedVars, duplicate} @this{Object} */function() {
  var self = this.ptr;
  _btCylinderShape___destroy___0(self);
};
(function() {
  function setupEnums() {
    

    // btConstraintParams

    Module['BT_CONSTRAINT_ERP'] = _btConstraintParamsBT_CONSTRAINT_ERP();

    Module['BT_CONSTRAINT_STOP_ERP'] = _btConstraintParamsBT_CONSTRAINT_STOP_ERP();

    Module['BT_CONSTRAINT_CFM'] = _btConstraintParamsBT_CONSTRAINT_CFM();

    Module['BT_CONSTRAINT_STOP_CFM'] = _btConstraintParamsBT_CONSTRAINT_STOP_CFM();

    

    // PHY_ScalarType

    Module['PHY_FLOAT'] = _PHY_ScalarTypePHY_FLOAT();

    Module['PHY_DOUBLE'] = _PHY_ScalarTypePHY_DOUBLE();

    Module['PHY_INTEGER'] = _PHY_ScalarTypePHY_INTEGER();

    Module['PHY_SHORT'] = _PHY_ScalarTypePHY_SHORT();

    Module['PHY_FIXEDPOINT88'] = _PHY_ScalarTypePHY_FIXEDPOINT88();

    Module['PHY_UCHAR'] = _PHY_ScalarTypePHY_UCHAR();

  }
  if (runtimeInitialized) setupEnums();
  else addOnPreMain(setupEnums);
})();

this['Ammo'] = Module; /* With or without a closure, the proper usage is Ammo.* */


  return Ammo.ready
}
);
})();
if (typeof exports === 'object' && typeof module === 'object')
      module.exports = Ammo;
    else if (typeof define === 'function' && define['amd'])
      define([], function() { return Ammo; });
    else if (typeof exports === 'object')
      exports["Ammo"] = Ammo;
    