function instantiate(asmLibraryArg) {
  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "");
  base64DecodeToExistingUint8Array(bufferView, 19736, "BQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAwAAAIRPAAAAAAAAAAAAAAAAAAACAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==");
  base64DecodeToExistingUint8Array(bufferView
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(env) {
 var memory = env.memory;
 var buffer = memory.buffer;
 memory.grow = __wasm_memory_grow;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 var fimport$0 = env.fd_close;
 var fimport$1 = env.fd_write;
 var fimport$3 = env.getWorldTransform;
 var fimport$4 = env.setWorldTransform;
 var legalimport$fimport$2 = env.fd_seek;
 var global$0 = 86848;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0($0_1) {
  if (!$0_1) {
   return __wasm_memory_size() << 16
  }
  label$2 : {
   if ($0_1 & 65535) {
    break label$2
   }
   if (($0_1 | 0) <= -1) {
    break label$2
   }
   $0_1 = __wasm_memory_grow($0_1 >>> 16 | 0);
   if (($0_1 | 0) == -1) {
    HEAP32[4962] = 48;
    return -1;
   }
   return $0_1 << 16;
  }
  abort();
 }
 
 function $1($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   HEAP8[$0_1 | 0] = $1_1;
   $3_1 = $0_1 + $2_1 | 0;
   HEAP8[$3_1 - 1 | 0] = $1_1;
   if ($2_1 >>> 0 < 3) {
    break label$1
   }
   HEAP8[$0_1 + 2 | 0] = $1_1;
   HEAP8[$0_1 + 1 | 0] = $1_1;
   HEAP8[$3_1 - 3 | 0] = $1_1;
   HEAP8[$3_1 - 2 | 0] = $1_1;
   if ($2_1 >>> 0 < 7) {
    break label$1
   }
   HEAP8[$0_1 + 3 | 0] = $1_1;
   HEAP8[$3_1 - 4 | 0] = $1_1;
   if ($2_1 >>> 0 < 9) {
    break label$1
   }
   $3_1 = 0 - $0_1 & 3;
   $5_1 = $3_1 + $0_1 | 0;
   $1_1 = Math_imul($1_1 & 255, 16843009);
   HEAP32[$5_1 >> 2] = $1_1;
   $2_1 = $2_1 - $3_1 & -4;
   $3_1 = $2_1 + $5_1 | 0;
   HEAP32[$3_1 - 4 >> 2] = $1_1;
   if ($2_1 >>> 0 < 9) {
    break label$1
   }
   HEAP32[$5_1 + 8 >> 2] = $1_1;
   HEAP32[$5_1 + 4 >> 2] = $1_1;
   HEAP32[$3_1 - 8 >> 2] = $1_1;
   HEAP32[$3_1 - 12 >> 2] = $1_1;
   if ($2_1 >>> 0 < 25) {
    break label$1
   }
   HEAP32[$5_1 + 24 >> 2] = $1_1;
   HEAP32[$5_1 + 20 >> 2] = $1_1;
   HEAP32[$5_1 + 16 >> 2] = $1_1;
   HEAP32[$5_1 + 12 >> 2] = $1_1;
   HEAP32[$3_1 - 16 >> 2] = $1_1;
   HEAP32[$3_1 - 20 >> 2] = $1_1;
   HEAP32[$3_1 - 24 >> 2] = $1_1;
   HEAP32[$3_1 - 28 >> 2] = $1_1;
   $4_1 = $5_1 & 4 | 24;
   $2_1 = $2_1 - $4_1 | 0;
   if ($2_1 >>> 0 < 32) {
    break label$1
   }
   $3_1 = $1_1;
   $6_1 = $1_1;
   $1_1 = $5_1 + $4_1 | 0;
   while (1) {
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[$1_1 + 4 >> 2] = $3_1;
    $4_1 = $1_1 + 24 | 0;
    HEAP32[$4_1 >> 2] = $6_1;
    HEAP32[$4_1 + 4 >> 2] = $3_1;
    $4_1 = $1_1 + 16 | 0;
    HEAP32[$4_1 >> 2] = $6_1;
    HEAP32[$4_1 + 4 >> 2] = $3_1;
    $4_1 = $1_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = $6_1;
    HEAP32[$4_1 + 4 >> 2] = $3_1;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 - 32 | 0;
    if ($2_1 >>> 0 > 31) {
     continue
    }
    break;
   };
  }
  return $0_1;
 }
 
 function $2($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  label$1 : {
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    if (!($1_1 & 3)) {
     break label$2
    }
    while (1) {
     HEAP8[$0_1 | 0] = HEAPU8[$1_1 | 0];
     $3_1 = $2_1 - 1 | 0;
     $0_1 = $0_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     if (($2_1 | 0) == 1) {
      break label$1
     }
     $2_1 = $3_1;
     if ($1_1 & 3) {
      continue
     }
     break;
    };
    break label$1;
   }
   $3_1 = $2_1;
  }
  $2_1 = $0_1 & 3;
  label$4 : {
   if (!$2_1) {
    label$6 : {
     if ($3_1 >>> 0 < 16) {
      $2_1 = $3_1;
      break label$6;
     }
     $2_1 = $3_1 - 16 | 0;
     while (1) {
      HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$0_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2];
      HEAP32[$0_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
      HEAP32[$0_1 + 12 >> 2] = HEAP32[$1_1 + 12 >> 2];
      $0_1 = $0_1 + 16 | 0;
      $1_1 = $1_1 + 16 | 0;
      $3_1 = $3_1 - 16 | 0;
      if ($3_1 >>> 0 > 15) {
       continue
      }
      break;
     };
    }
    if ($2_1 & 8) {
     $3_1 = HEAP32[$1_1 + 4 >> 2];
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $3_1;
     $1_1 = $1_1 + 8 | 0;
     $0_1 = $0_1 + 8 | 0;
    }
    if ($2_1 & 4) {
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
     $1_1 = $1_1 + 4 | 0;
     $0_1 = $0_1 + 4 | 0;
    }
    if ($2_1 & 2) {
     HEAP8[$0_1 | 0] = HEAPU8[$1_1 | 0];
     HEAP8[$0_1 + 1 | 0] = HEAPU8[$1_1 + 1 | 0];
     $1_1 = $1_1 + 2 | 0;
     $0_1 = $0_1 + 2 | 0;
    }
    if (!($2_1 & 1)) {
     break label$4
    }
    HEAP8[$0_1 | 0] = HEAPU8[$1_1 | 0];
    return;
   }
   label$12 : {
    if ($3_1 >>> 0 < 32) {
     break label$12
    }
    $2_1 = $2_1 - 1 | 0;
    if ($2_1 >>> 0 > 2) {
     break label$12
    }
    label$13 : {
     switch ($2_1 - 1 | 0) {
     default:
      HEAP8[$0_1 + 1 | 0] = HEAPU8[$1_1 + 1 | 0];
      $4_1 = HEAP32[$1_1 >> 2];
      HEAP8[$0_1 | 0] = $4_1;
      HEAP8[$0_1 + 2 | 0] = HEAPU8[$1_1 + 2 | 0];
      $7_1 = $3_1 - 3 | 0;
      $8_1 = $0_1 + 3 | 0;
      $9_1 = $3_1 - 20 & -16;
      $2_1 = 0;
      while (1) {
       $0_1 = $2_1 + $8_1 | 0;
       $6_1 = $1_1 + $2_1 | 0;
       $5_1 = HEAP32[$6_1 + 4 >> 2];
       HEAP32[$0_1 >> 2] = $5_1 << 8 | $4_1 >>> 24;
       $4_1 = HEAP32[$6_1 + 8 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $4_1 << 8 | $5_1 >>> 24;
       $5_1 = HEAP32[$6_1 + 12 >> 2];
       HEAP32[$0_1 + 8 >> 2] = $5_1 << 8 | $4_1 >>> 24;
       $4_1 = HEAP32[$6_1 + 16 >> 2];
       HEAP32[$0_1 + 12 >> 2] = $4_1 << 8 | $5_1 >>> 24;
       $2_1 = $2_1 + 16 | 0;
       $7_1 = $7_1 - 16 | 0;
       if ($7_1 >>> 0 > 16) {
        continue
       }
       break;
      };
      $0_1 = $2_1 + $8_1 | 0;
      $1_1 = ($1_1 + $2_1 | 0) + 3 | 0;
      $3_1 = ($3_1 - $9_1 | 0) - 19 | 0;
      break label$12;
     case 0:
      $4_1 = HEAP32[$1_1 >> 2];
      HEAP8[$0_1 | 0] = $4_1;
      HEAP8[$0_1 + 1 | 0] = HEAPU8[$1_1 + 1 | 0];
      $7_1 = $3_1 - 2 | 0;
      $8_1 = $0_1 + 2 | 0;
      $9_1 = $3_1 - 20 & -16;
      $2_1 = 0;
      while (1) {
       $0_1 = $2_1 + $8_1 | 0;
       $6_1 = $1_1 + $2_1 | 0;
       $5_1 = HEAP32[$6_1 + 4 >> 2];
       HEAP32[$0_1 >> 2] = $5_1 << 16 | $4_1 >>> 16;
       $4_1 = HEAP32[$6_1 + 8 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $4_1 << 16 | $5_1 >>> 16;
       $5_1 = HEAP32[$6_1 + 12 >> 2];
       HEAP32[$0_1 + 8 >> 2] = $5_1 << 16 | $4_1 >>> 16;
       $4_1 = HEAP32[$6_1 + 16 >> 2];
       HEAP32[$0_1 + 12 >> 2] = $4_1 << 16 | $5_1 >>> 16;
       $2_1 = $2_1 + 16 | 0;
       $7_1 = $7_1 - 16 | 0;
       if ($7_1 >>> 0 > 17) {
        continue
       }
       break;
      };
      $0_1 = $2_1 + $8_1 | 0;
      $1_1 = ($1_1 + $2_1 | 0) + 2 | 0;
      $3_1 = ($3_1 - $9_1 | 0) - 18 | 0;
      break label$12;
     case 1:
      break label$13;
     };
    }
    $4_1 = HEAP32[$1_1 >> 2];
    HEAP8[$0_1 | 0] = $4_1;
    $7_1 = $3_1 - 1 | 0;
    $8_1 = $0_1 + 1 | 0;
    $9_1 = $3_1 - 20 & -16;
    $2_1 = 0;
    while (1) {
     $0_1 = $2_1 + $8_1 | 0;
     $6_1 = $1_1 + $2_1 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$0_1 >> 2] = $5_1 << 24 | $4_1 >>> 8;
     $4_1 = HEAP32[$6_1 + 8 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $4_1 << 24 | $5_1 >>> 8;
     $5_1 = HEAP32[$6_1 + 12 >> 2];
     HEAP32[$0_1 + 8 >> 2] = $5_1 << 24 | $4_1 >>> 8;
     $4_1 = HEAP32[$6_1 + 16 >> 2];
     HEAP32[$0_1 + 12 >> 2] = $4_1 << 24 | $5_1 >>> 8;
     $2_1 = $2_1 + 16 | 0;
     $7_1 = $7_1 - 16 | 0;
     if ($7_1 >>> 0 > 18) {
      continue
     }
     break;
    };
    $0_1 = $2_1 + $8_1 | 0;
    $1_1 = ($1_1 + $2_1 | 0) + 1 | 0;
    $3_1 = ($3_1 - $9_1 | 0) - 17 | 0;
   }
   if ($3_1 & 16) {
    $2_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8;
    HEAP8[$0_1 | 0] = $2_1;
    HEAP8[$0_1 + 1 | 0] = $2_1 >>> 8;
    HEAP8[$0_1 + 2 | 0] = HEAPU8[$1_1 + 2 | 0];
    HEAP8[$0_1 + 3 | 0] = HEAPU8[$1_1 + 3 | 0];
    HEAP8[$0_1 + 4 | 0] = HEAPU8[$1_1 + 4 | 0];
    HEAP8[$0_1 + 5 | 0] = HEAPU8[$1_1 + 5 | 0];
    HEAP8[$0_1 + 6 | 0] = HEAPU8[$1_1 + 6 | 0];
    HEAP8[$0_1 + 7 | 0] = HEAPU8[$1_1 + 7 | 0];
    HEAP8[$0_1 + 8 | 0] = HEAPU8[$1_1 + 8 | 0];
    HEAP8[$0_1 + 9 | 0] = HEAPU8[$1_1 + 9 | 0];
    HEAP8[$0_1 + 10 | 0] = HEAPU8[$1_1 + 10 | 0];
    HEAP8[$0_1 + 11 | 0] = HEAPU8[$1_1 + 11 | 0];
    HEAP8[$0_1 + 12 | 0] = HEAPU8[$1_1 + 12 | 0];
    HEAP8[$0_1 + 13 | 0] = HEAPU8[$1_1 + 13 | 0];
    HEAP8[$0_1 + 14 | 0] = HEAPU8[$1_1 + 14 | 0];
    HEAP8[$0_1 + 15 | 0] = HEAPU8[$1_1 + 15 | 0];
    $1_1 = $1_1 + 16 | 0;
    $0_1 = $0_1 + 16 | 0;
   }
   if ($3_1 & 8) {
    HEAP8[$0_1 | 0] = HEAPU8[$1_1 | 0];
    HEAP8[$0_1 + 1 | 0] = HEAPU8[$1_1 + 1 | 0];
    HEAP8[$0_1 + 2 | 0] = HEAPU8[$1_1 + 2 | 0];
    HEAP8[$0_1 + 3 | 0] = HEAPU8[$1_1 + 3 | 0];
    HEAP8[$0_1 + 4 | 0] = HEAPU8[$1_1 + 4 | 0];
    HEAP8[$0_1 + 5 | 0] = HEAPU8[$1_1 + 5 | 0];
    HEAP8[$0_1 + 6 | 0] = HEAPU8[$1_1 + 6 | 0];
    HEAP8[$0_1 + 7 | 0] = HEAPU8[$1_1 + 7 | 0];
    $1_1 = $1_1 + 8 | 0;
    $0_1 = $0_1 + 8 | 0;
   }
   if ($3_1 & 4) {
    HEAP8[$0_1 | 0] = HEAPU8[$1_1 | 0];
    HEAP8[$0_1 + 1 | 0] = HEAPU8[$1_1 + 1 | 0];
    HEAP8[$0_1 + 2 | 0] = HEAPU8[$1_1 + 2 | 0];
    HEAP8[$0_1 + 3 | 0] = HEAPU8[$1_1 + 3 | 0];
    $1_1 = $1_1 + 4 | 0;
    $0_1 = $0_1 + 4 | 0;
   }
   if ($3_1 & 2) {
    HEAP8[$0_1 | 0] = HEAPU8[$1_1 | 0];
    HEAP8[$0_1 + 1 | 0] = HEAPU8[$1_1 + 1 | 0];
    $1_1 = $1_1 + 2 | 0;
    $0_1 = $0_1 + 2 | 0;
   }
   if (!($3_1 & 1)) {
    break label$4
   }
   HEAP8[$0_1 | 0] = HEAPU8[$1_1 | 0];
  }
 }
 
 function $3($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11_1 = global$0 - 16 | 0;
  global$0 = $11_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             if ($0_1 >>> 0 <= 236) {
              $5_1 = HEAP32[4963];
              $6_1 = $0_1 >>> 0 < 11 ? 16 : $0_1 + 19 & -16;
              $2_1 = $6_1 >>> 3 | 0;
              $1_1 = $5_1 >>> $2_1 | 0;
              if ($1_1 & 3) {
               $3_1 = ($2_1 | $1_1 & 1) ^ 1;
               $1_1 = $3_1 << 3;
               $4_1 = HEAP32[$1_1 + 19900 >> 2];
               $0_1 = $4_1 + 8 | 0;
               $2_1 = HEAP32[$4_1 + 8 >> 2];
               $1_1 = $1_1 + 19892 | 0;
               label$14 : {
                if (($2_1 | 0) == ($1_1 | 0)) {
                 (wasm2js_i32$0 = 19852, wasm2js_i32$1 = __wasm_rotl_i32($3_1) & $5_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
                 break label$14;
                }
                HEAP32[$1_1 + 8 >> 2] = $2_1;
                HEAP32[$2_1 + 12 >> 2] = $1_1;
               }
               $1_1 = $3_1 << 3;
               HEAP32[$4_1 + 4 >> 2] = $1_1 | 3;
               $1_1 = $1_1 + $4_1 | 0;
               HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] | 1;
               break label$1;
              }
              $9_1 = HEAP32[4965];
              if ($9_1 >>> 0 >= $6_1 >>> 0) {
               break label$11
              }
              if ($1_1) {
               $0_1 = 2 << $2_1;
               $0_1 = (0 - $0_1 | $0_1) & $1_1 << $2_1;
               $1_1 = (0 - $0_1 & $0_1) - 1 | 0;
               $0_1 = $1_1 >>> 12 & 16;
               $2_1 = $0_1;
               $1_1 = $1_1 >>> $0_1 | 0;
               $0_1 = $1_1 >>> 5 & 8;
               $2_1 = $2_1 | $0_1;
               $1_1 = $1_1 >>> $0_1 | 0;
               $0_1 = $1_1 >>> 2 & 4;
               $2_1 = $2_1 | $0_1;
               $1_1 = $1_1 >>> $0_1 | 0;
               $0_1 = $1_1 >>> 1 & 2;
               $2_1 = $2_1 | $0_1;
               $1_1 = $1_1 >>> $0_1 | 0;
               $0_1 = $1_1 >>> 1 & 1;
               $2_1 = ($2_1 | $0_1) + ($1_1 >>> $0_1 | 0) | 0;
               $0_1 = $2_1 << 3;
               $3_1 = HEAP32[$0_1 + 19900 >> 2];
               $1_1 = HEAP32[$3_1 + 8 >> 2];
               $0_1 = $0_1 + 19892 | 0;
               label$17 : {
                if (($1_1 | 0) == ($0_1 | 0)) {
                 $5_1 = __wasm_rotl_i32($2_1) & $5_1;
                 HEAP32[4963] = $5_1;
                 break label$17;
                }
                HEAP32[$0_1 + 8 >> 2] = $1_1;
                HEAP32[$1_1 + 12 >> 2] = $0_1;
               }
               $0_1 = $3_1 + 8 | 0;
               HEAP32[$3_1 + 4 >> 2] = $6_1 | 3;
               $1_1 = $2_1 << 3;
               $4_1 = $1_1 - $6_1 | 0;
               HEAP32[$1_1 + $3_1 >> 2] = $4_1;
               $3_1 = $3_1 + $6_1 | 0;
               HEAP32[$3_1 + 4 >> 2] = $4_1 | 1;
               if ($9_1) {
                $1_1 = $9_1 >>> 3 | 0;
                $2_1 = ($1_1 << 3) + 19892 | 0;
                $6_1 = HEAP32[4968];
                $1_1 = 1 << $1_1;
                label$20 : {
                 if (!($1_1 & $5_1)) {
                  HEAP32[4963] = $1_1 | $5_1;
                  $1_1 = $2_1;
                  break label$20;
                 }
                 $1_1 = HEAP32[$2_1 + 8 >> 2];
                }
                HEAP32[$1_1 + 12 >> 2] = $6_1;
                HEAP32[$2_1 + 8 >> 2] = $6_1;
                HEAP32[$6_1 + 12 >> 2] = $2_1;
                HEAP32[$6_1 + 8 >> 2] = $1_1;
               }
               HEAP32[4968] = $3_1;
               HEAP32[4965] = $4_1;
               break label$1;
              }
              $7_1 = HEAP32[4964];
              if (!$7_1) {
               break label$11
              }
              $1_1 = (0 - $7_1 & $7_1) - 1 | 0;
              $0_1 = $1_1 >>> 12 & 16;
              $2_1 = $0_1;
              $1_1 = $1_1 >>> $0_1 | 0;
              $0_1 = $1_1 >>> 5 & 8;
              $2_1 = $2_1 | $0_1;
              $1_1 = $1_1 >>> $0_1 | 0;
              $0_1 = $1_1 >>> 2 & 4;
              $2_1 = $2_1 | $0_1;
              $1_1 = $1_1 >>> $0_1 | 0;
              $0_1 = $1_1 >>> 1 & 2;
              $2_1 = $2_1 | $0_1;
              $1_1 = $1_1 >>> $0_1 | 0;
              $0_1 = $1_1 >>> 1 & 1;
              $1_1 = HEAP32[(($2_1 | $0_1) + ($1_1 >>> $0_1 | 0) << 2) + 20156 >> 2];
              $3_1 = (HEAP32[$1_1 + 4 >> 2] & -8) - $6_1 | 0;
              $2_1 = $1_1;
              while (1) {
               label$23 : {
                $0_1 = HEAP32[$2_1 + 16 >> 2];
                if (!$0_1) {
                 $0_1 = HEAP32[$2_1 + 20 >> 2];
                 if (!$0_1) {
                  break label$23
                 }
                }
                $2_1 = (HEAP32[$0_1 + 4 >> 2] & -8) - $6_1 | 0;
                $4_1 = $2_1 >>> 0 < $3_1 >>> 0;
                $3_1 = $4_1 ? $2_1 : $3_1;
                $1_1 = $4_1 ? $0_1 : $1_1;
                $2_1 = $0_1;
                continue;
               }
               break;
              };
              $10_1 = HEAP32[$1_1 + 24 >> 2];
              $4_1 = HEAP32[$1_1 + 12 >> 2];
              if (($4_1 | 0) != ($1_1 | 0)) {
               $0_1 = HEAP32[$1_1 + 8 >> 2];
               HEAP32[$4_1 + 8 >> 2] = $0_1;
               HEAP32[$0_1 + 12 >> 2] = $4_1;
               break label$2;
              }
              $2_1 = $1_1 + 20 | 0;
              $0_1 = HEAP32[$2_1 >> 2];
              if (!$0_1) {
               $0_1 = HEAP32[$1_1 + 16 >> 2];
               if (!$0_1) {
                break label$10
               }
               $2_1 = $1_1 + 16 | 0;
              }
              while (1) {
               $8_1 = $2_1;
               $4_1 = $0_1;
               $2_1 = $0_1 + 20 | 0;
               $0_1 = HEAP32[$2_1 >> 2];
               if ($0_1) {
                continue
               }
               $2_1 = $4_1 + 16 | 0;
               $0_1 = HEAP32[$4_1 + 16 >> 2];
               if ($0_1) {
                continue
               }
               break;
              };
              HEAP32[$8_1 >> 2] = 0;
              break label$2;
             }
             $6_1 = -1;
             if ($0_1 >>> 0 > 4294967231) {
              break label$11
             }
             $0_1 = $0_1 + 19 | 0;
             $6_1 = $0_1 & -16;
             $7_1 = HEAP32[4964];
             if (!$7_1) {
              break label$11
             }
             $2_1 = 0 - $6_1 | 0;
             $0_1 = $0_1 >>> 8 | 0;
             $8_1 = 0;
             label$32 : {
              if (!$0_1) {
               break label$32
              }
              $8_1 = 31;
              if ($6_1 >>> 0 > 16777215) {
               break label$32
              }
              $1_1 = $0_1 + 1048320 >>> 16 & 8;
              $0_1 = $0_1 << $1_1;
              $5_1 = $0_1 + 520192 >>> 16 & 4;
              $0_1 = $0_1 << $5_1;
              $3_1 = $0_1 + 245760 >>> 16 & 2;
              $0_1 = ($0_1 << $3_1 >>> 15 | 0) - ($3_1 | ($1_1 | $5_1)) | 0;
              $8_1 = ($0_1 << 1 | $6_1 >>> $0_1 + 21 & 1) + 28 | 0;
             }
             $3_1 = HEAP32[($8_1 << 2) + 20156 >> 2];
             label$29 : {
              label$30 : {
               label$31 : {
                if (!$3_1) {
                 $0_1 = 0;
                 break label$31;
                }
                $1_1 = $6_1 << (($8_1 | 0) == 31 ? 0 : 25 - ($8_1 >>> 1 | 0) | 0);
                $0_1 = 0;
                while (1) {
                 label$35 : {
                  $5_1 = (HEAP32[$3_1 + 4 >> 2] & -8) - $6_1 | 0;
                  if ($5_1 >>> 0 >= $2_1 >>> 0) {
                   break label$35
                  }
                  $4_1 = $3_1;
                  $2_1 = $5_1;
                  if ($2_1) {
                   break label$35
                  }
                  $2_1 = 0;
                  $0_1 = $3_1;
                  break label$30;
                 }
                 $5_1 = HEAP32[$3_1 + 20 >> 2];
                 $3_1 = HEAP32[(($1_1 >>> 29 & 4) + $3_1 | 0) + 16 >> 2];
                 $0_1 = $5_1 ? (($5_1 | 0) == ($3_1 | 0) ? $0_1 : $5_1) : $0_1;
                 $1_1 = $1_1 << (($3_1 | 0) != 0);
                 if ($3_1) {
                  continue
                 }
                 break;
                };
               }
               if (!($0_1 | $4_1)) {
                $0_1 = 2 << $8_1;
                $0_1 = (0 - $0_1 | $0_1) & $7_1;
                if (!$0_1) {
                 break label$11
                }
                $1_1 = ($0_1 & 0 - $0_1) - 1 | 0;
                $0_1 = $1_1 >>> 12 & 16;
                $3_1 = $0_1;
                $1_1 = $1_1 >>> $0_1 | 0;
                $0_1 = $1_1 >>> 5 & 8;
                $3_1 = $3_1 | $0_1;
                $1_1 = $1_1 >>> $0_1 | 0;
                $0_1 = $1_1 >>> 2 & 4;
                $3_1 = $3_1 | $0_1;
                $1_1 = $1_1 >>> $0_1 | 0;
                $0_1 = $1_1 >>> 1 & 2;
                $3_1 = $3_1 | $0_1;
                $1_1 = $1_1 >>> $0_1 | 0;
                $0_1 = $1_1 >>> 1 & 1;
                $0_1 = HEAP32[(($3_1 | $0_1) + ($1_1 >>> $0_1 | 0) << 2) + 20156 >> 2];
               }
               if (!$0_1) {
                break label$29
               }
              }
              while (1) {
               $1_1 = (HEAP32[$0_1 + 4 >> 2] & -8) - $6_1 | 0;
               $3_1 = $1_1 >>> 0 < $2_1 >>> 0;
               $2_1 = $3_1 ? $1_1 : $2_1;
               $4_1 = $3_1 ? $0_1 : $4_1;
               $1_1 = HEAP32[$0_1 + 16 >> 2];
               if ($1_1) {
                $0_1 = $1_1
               } else {
                $0_1 = HEAP32[$0_1 + 20 >> 2]
               }
               if ($0_1) {
                continue
               }
               break;
              };
             }
             if (!$4_1) {
              break label$11
             }
             if (HEAP32[4965] - $6_1 >>> 0 <= $2_1 >>> 0) {
              break label$11
             }
             $8_1 = HEAP32[$4_1 + 24 >> 2];
             $1_1 = HEAP32[$4_1 + 12 >> 2];
             if (($4_1 | 0) != ($1_1 | 0)) {
              $0_1 = HEAP32[$4_1 + 8 >> 2];
              HEAP32[$1_1 + 8 >> 2] = $0_1;
              HEAP32[$0_1 + 12 >> 2] = $1_1;
              break label$3;
             }
             $3_1 = $4_1 + 20 | 0;
             $0_1 = HEAP32[$3_1 >> 2];
             if (!$0_1) {
              $0_1 = HEAP32[$4_1 + 16 >> 2];
              if (!$0_1) {
               break label$9
              }
              $3_1 = $4_1 + 16 | 0;
             }
             while (1) {
              $5_1 = $3_1;
              $1_1 = $0_1;
              $3_1 = $0_1 + 20 | 0;
              $0_1 = HEAP32[$3_1 >> 2];
              if ($0_1) {
               continue
              }
              $3_1 = $1_1 + 16 | 0;
              $0_1 = HEAP32[$1_1 + 16 >> 2];
              if ($0_1) {
               continue
              }
              break;
             };
             HEAP32[$5_1 >> 2] = 0;
             break label$3;
            }
            $2_1 = HEAP32[4965];
            if ($2_1 >>> 0 >= $6_1 >>> 0) {
             $3_1 = HEAP32[4968];
             $1_1 = $2_1 - $6_1 | 0;
             label$45 : {
              if ($1_1 >>> 0 >= 16) {
               $0_1 = $3_1 + $6_1 | 0;
               HEAP32[$0_1 + 4 >> 2] = $1_1 | 1;
               HEAP32[4965] = $1_1;
               HEAP32[4968] = $0_1;
               HEAP32[$2_1 + $3_1 >> 2] = $1_1;
               HEAP32[$3_1 + 4 >> 2] = $6_1 | 3;
               break label$45;
              }
              HEAP32[$3_1 + 4 >> 2] = $2_1 | 3;
              $0_1 = $2_1 + $3_1 | 0;
              HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] | 1;
              HEAP32[4968] = 0;
              HEAP32[4965] = 0;
             }
             $0_1 = $3_1 + 8 | 0;
             break label$1;
            }
            $7_1 = HEAP32[4966];
            if ($7_1 >>> 0 > $6_1 >>> 0) {
             $2_1 = HEAP32[4969];
             $1_1 = $2_1 + $6_1 | 0;
             $0_1 = $7_1 - $6_1 | 0;
             HEAP32[$1_1 + 4 >> 2] = $0_1 | 1;
             HEAP32[4966] = $0_1;
             HEAP32[4969] = $1_1;
             HEAP32[$2_1 + 4 >> 2] = $6_1 | 3;
             $0_1 = $2_1 + 8 | 0;
             break label$1;
            }
            $0_1 = 0;
            $8_1 = $6_1 + 71 | 0;
            $1_1 = $8_1;
            if (HEAP32[5081]) {
             $2_1 = HEAP32[5083]
            } else {
             HEAP32[5084] = -1;
             HEAP32[5085] = -1;
             HEAP32[5082] = 65536;
             HEAP32[5083] = 65536;
             HEAP32[5081] = $11_1 + 12 & -16 ^ 1431655768;
             HEAP32[5086] = 0;
             HEAP32[5074] = 0;
             $2_1 = 65536;
            }
            $4_1 = $1_1 + $2_1 | 0;
            $3_1 = 0 - $2_1 | 0;
            $2_1 = $4_1 & $3_1;
            if ($2_1 >>> 0 <= $6_1 >>> 0) {
             HEAP32[4962] = 48;
             break label$1;
            }
            label$51 : {
             $1_1 = HEAP32[5073];
             if (!$1_1) {
              break label$51
             }
             $0_1 = HEAP32[5071];
             $5_1 = $0_1 + $2_1 | 0;
             if ($1_1 >>> 0 >= $5_1 >>> 0 ? $0_1 >>> 0 < $5_1 >>> 0 : 0) {
              break label$51
             }
             $0_1 = 0;
             HEAP32[4962] = 48;
             break label$1;
            }
            if (HEAPU8[20296] & 4) {
             break label$6
            }
            label$52 : {
             label$53 : {
              $5_1 = HEAP32[4969];
              if ($5_1) {
               $0_1 = 20300;
               while (1) {
                $1_1 = HEAP32[$0_1 >> 2];
                if ($5_1 >>> 0 < $1_1 + HEAP32[$0_1 + 4 >> 2] >>> 0 ? $1_1 >>> 0 <= $5_1 >>> 0 : 0) {
                 break label$53
                }
                $0_1 = HEAP32[$0_1 + 8 >> 2];
                if ($0_1) {
                 continue
                }
                break;
               };
              }
              $1_1 = $0(0);
              if (($1_1 | 0) == -1) {
               break label$7
              }
              $5_1 = $2_1;
              $3_1 = HEAP32[5082];
              $0_1 = $3_1 - 1 | 0;
              if ($0_1 & $1_1) {
               $5_1 = ($2_1 - $1_1 | 0) + ($0_1 + $1_1 & 0 - $3_1) | 0
              }
              if ($5_1 >>> 0 <= $6_1 >>> 0) {
               break label$7
              }
              if ($5_1 >>> 0 > 2147483646) {
               break label$7
              }
              $3_1 = HEAP32[5073];
              if ($3_1) {
               $0_1 = HEAP32[5071];
               $4_1 = $0_1 + $5_1 | 0;
               if ($0_1 >>> 0 >= $4_1 >>> 0) {
                break label$7
               }
               if ($3_1 >>> 0 < $4_1 >>> 0) {
                break label$7
               }
              }
              $0_1 = $0($5_1);
              if (($1_1 | 0) != ($0_1 | 0)) {
               break label$52
              }
              break label$5;
             }
             $5_1 = $3_1 & $4_1 - $7_1;
             if ($5_1 >>> 0 > 2147483646) {
              break label$7
             }
             $1_1 = $0($5_1);
             if (($1_1 | 0) == (HEAP32[$0_1 >> 2] + HEAP32[$0_1 + 4 >> 2] | 0)) {
              break label$8
             }
             $0_1 = $1_1;
            }
            $1_1 = $0_1;
            label$59 : {
             if ($6_1 + 72 >>> 0 <= $5_1 >>> 0) {
              break label$59
             }
             if ($5_1 >>> 0 > 2147483646) {
              break label$59
             }
             if (($1_1 | 0) == -1) {
              break label$59
             }
             $0_1 = HEAP32[5083];
             $0_1 = $0_1 + ($8_1 - $5_1 | 0) & 0 - $0_1;
             if ($0_1 >>> 0 > 2147483646) {
              break label$5
             }
             if (($0($0_1) | 0) != -1) {
              $5_1 = $0_1 + $5_1 | 0;
              break label$5;
             }
             $0(0 - $5_1 | 0);
             break label$7;
            }
            if (($1_1 | 0) != -1) {
             break label$5
            }
            break label$7;
           }
           $4_1 = 0;
           break label$2;
          }
          $1_1 = 0;
          break label$3;
         }
         if (($1_1 | 0) != -1) {
          break label$5
         }
        }
        HEAP32[5074] = HEAP32[5074] | 4;
       }
       if ($2_1 >>> 0 > 2147483646) {
        break label$4
       }
       $1_1 = $0($2_1);
       $0_1 = $0(0);
       if ($1_1 >>> 0 >= $0_1 >>> 0) {
        break label$4
       }
       if (($1_1 | 0) == -1) {
        break label$4
       }
       if (($0_1 | 0) == -1) {
        break label$4
       }
       $5_1 = $0_1 - $1_1 | 0;
       if ($5_1 >>> 0 <= $6_1 + 56 >>> 0) {
        break label$4
       }
      }
      $0_1 = HEAP32[5071] + $5_1 | 0;
      HEAP32[5071] = $0_1;
      if ($0_1 >>> 0 > HEAPU32[5072]) {
       HEAP32[5072] = $0_1
      }
      label$62 : {
       label$63 : {
        label$64 : {
         $7_1 = HEAP32[4969];
         if ($7_1) {
          $0_1 = 20300;
          while (1) {
           $2_1 = HEAP32[$0_1 >> 2];
           $4_1 = HEAP32[$0_1 + 4 >> 2];
           if (($2_1 + $4_1 | 0) == ($1_1 | 0)) {
            break label$64
           }
           $0_1 = HEAP32[$0_1 + 8 >> 2];
           if ($0_1) {
            continue
           }
           break;
          };
          break label$63;
         }
         $0_1 = HEAP32[4967];
         if (!($0_1 >>> 0 <= $1_1 >>> 0 ? $0_1 : 0)) {
          HEAP32[4967] = $1_1
         }
         $0_1 = 0;
         HEAP32[5076] = $5_1;
         HEAP32[5075] = $1_1;
         HEAP32[4971] = -1;
         HEAP32[4972] = HEAP32[5081];
         HEAP32[5078] = 0;
         while (1) {
          $2_1 = $0_1 + 19892 | 0;
          HEAP32[$0_1 + 19900 >> 2] = $2_1;
          HEAP32[$0_1 + 19904 >> 2] = $2_1;
          $0_1 = $0_1 + 8 | 0;
          if (($0_1 | 0) != 256) {
           continue
          }
          break;
         };
         $0_1 = $1_1 + 8 & 15 ? -8 - $1_1 & 15 : 0;
         $3_1 = $0_1 + $1_1 | 0;
         $2_1 = $5_1 - 56 | 0;
         $0_1 = $2_1 - $0_1 | 0;
         HEAP32[$3_1 + 4 >> 2] = $0_1 | 1;
         HEAP32[4970] = HEAP32[5085];
         HEAP32[4966] = $0_1;
         HEAP32[4969] = $3_1;
         HEAP32[($1_1 + $2_1 | 0) + 4 >> 2] = 56;
         break label$62;
        }
        if (HEAPU8[$0_1 + 12 | 0] & 8) {
         break label$63
        }
        if ($1_1 >>> 0 <= $7_1 >>> 0) {
         break label$63
        }
        if ($2_1 >>> 0 > $7_1 >>> 0) {
         break label$63
        }
        $1_1 = $7_1 + 8 & 15 ? -8 - $7_1 & 15 : 0;
        $3_1 = $1_1 + $7_1 | 0;
        $2_1 = HEAP32[4966] + $5_1 | 0;
        $1_1 = $2_1 - $1_1 | 0;
        HEAP32[$3_1 + 4 >> 2] = $1_1 | 1;
        HEAP32[$0_1 + 4 >> 2] = $4_1 + $5_1;
        HEAP32[4970] = HEAP32[5085];
        HEAP32[4966] = $1_1;
        HEAP32[4969] = $3_1;
        HEAP32[($2_1 + $7_1 | 0) + 4 >> 2] = 56;
        break label$62;
       }
       $4_1 = HEAP32[4967];
       if ($4_1 >>> 0 > $1_1 >>> 0) {
        HEAP32[4967] = $1_1;
        $4_1 = 0;
       }
       $2_1 = $1_1 + $5_1 | 0;
       $0_1 = 20300;
       label$70 : {
        label$71 : {
         label$72 : {
          label$73 : {
           label$74 : {
            label$75 : {
             while (1) {
              if (($2_1 | 0) != HEAP32[$0_1 >> 2]) {
               $0_1 = HEAP32[$0_1 + 8 >> 2];
               if ($0_1) {
                continue
               }
               break label$75;
              }
              break;
             };
             if (!(HEAPU8[$0_1 + 12 | 0] & 8)) {
              break label$74
             }
            }
            $0_1 = 20300;
            while (1) {
             $2_1 = HEAP32[$0_1 >> 2];
             if ($2_1 >>> 0 <= $7_1 >>> 0) {
              $4_1 = $2_1 + HEAP32[$0_1 + 4 >> 2] | 0;
              if ($4_1 >>> 0 > $7_1 >>> 0) {
               break label$73
              }
             }
             $0_1 = HEAP32[$0_1 + 8 >> 2];
             continue;
            };
           }
           HEAP32[$0_1 >> 2] = $1_1;
           HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] + $5_1;
           $10_1 = ($1_1 + 8 & 15 ? -8 - $1_1 & 15 : 0) + $1_1 | 0;
           HEAP32[$10_1 + 4 >> 2] = $6_1 | 3;
           $1_1 = $2_1 + ($2_1 + 8 & 15 ? -8 - $2_1 & 15 : 0) | 0;
           $0_1 = ($1_1 - $10_1 | 0) - $6_1 | 0;
           $8_1 = $6_1 + $10_1 | 0;
           if (($1_1 | 0) == ($7_1 | 0)) {
            HEAP32[4969] = $8_1;
            $0_1 = HEAP32[4966] + $0_1 | 0;
            HEAP32[4966] = $0_1;
            HEAP32[$8_1 + 4 >> 2] = $0_1 | 1;
            break label$71;
           }
           if (HEAP32[4968] == ($1_1 | 0)) {
            HEAP32[4968] = $8_1;
            $0_1 = HEAP32[4965] + $0_1 | 0;
            HEAP32[4965] = $0_1;
            HEAP32[$8_1 + 4 >> 2] = $0_1 | 1;
            HEAP32[$0_1 + $8_1 >> 2] = $0_1;
            break label$71;
           }
           $2_1 = HEAP32[$1_1 + 4 >> 2];
           if (($2_1 & 3) == 1) {
            $7_1 = $2_1 & -8;
            label$83 : {
             if ($2_1 >>> 0 <= 255) {
              $4_1 = HEAP32[$1_1 + 8 >> 2];
              $2_1 = $2_1 >>> 3 | 0;
              $3_1 = HEAP32[$1_1 + 12 >> 2];
              if (($3_1 | 0) == ($4_1 | 0)) {
               (wasm2js_i32$0 = 19852, wasm2js_i32$1 = HEAP32[4963] & __wasm_rotl_i32($2_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
               break label$83;
              }
              HEAP32[$3_1 + 8 >> 2] = $4_1;
              HEAP32[$4_1 + 12 >> 2] = $3_1;
              break label$83;
             }
             $9_1 = HEAP32[$1_1 + 24 >> 2];
             $5_1 = HEAP32[$1_1 + 12 >> 2];
             label$86 : {
              if (($5_1 | 0) != ($1_1 | 0)) {
               $2_1 = HEAP32[$1_1 + 8 >> 2];
               HEAP32[$5_1 + 8 >> 2] = $2_1;
               HEAP32[$2_1 + 12 >> 2] = $5_1;
               break label$86;
              }
              label$89 : {
               $3_1 = $1_1 + 20 | 0;
               $6_1 = HEAP32[$3_1 >> 2];
               if ($6_1) {
                break label$89
               }
               $3_1 = $1_1 + 16 | 0;
               $6_1 = HEAP32[$3_1 >> 2];
               if ($6_1) {
                break label$89
               }
               $5_1 = 0;
               break label$86;
              }
              while (1) {
               $2_1 = $3_1;
               $5_1 = $6_1;
               $3_1 = $5_1 + 20 | 0;
               $6_1 = HEAP32[$3_1 >> 2];
               if ($6_1) {
                continue
               }
               $3_1 = $5_1 + 16 | 0;
               $6_1 = HEAP32[$5_1 + 16 >> 2];
               if ($6_1) {
                continue
               }
               break;
              };
              HEAP32[$2_1 >> 2] = 0;
             }
             if (!$9_1) {
              break label$83
             }
             $3_1 = HEAP32[$1_1 + 28 >> 2];
             $2_1 = ($3_1 << 2) + 20156 | 0;
             label$91 : {
              if (HEAP32[$2_1 >> 2] == ($1_1 | 0)) {
               HEAP32[$2_1 >> 2] = $5_1;
               if ($5_1) {
                break label$91
               }
               (wasm2js_i32$0 = 19856, wasm2js_i32$1 = HEAP32[4964] & __wasm_rotl_i32($3_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
               break label$83;
              }
              HEAP32[$9_1 + (HEAP32[$9_1 + 16 >> 2] == ($1_1 | 0) ? 16 : 20) >> 2] = $5_1;
              if (!$5_1) {
               break label$83
              }
             }
             HEAP32[$5_1 + 24 >> 2] = $9_1;
             $2_1 = HEAP32[$1_1 + 16 >> 2];
             if ($2_1) {
              HEAP32[$5_1 + 16 >> 2] = $2_1;
              HEAP32[$2_1 + 24 >> 2] = $5_1;
             }
             $2_1 = HEAP32[$1_1 + 20 >> 2];
             if (!$2_1) {
              break label$83
             }
             HEAP32[$5_1 + 20 >> 2] = $2_1;
             HEAP32[$2_1 + 24 >> 2] = $5_1;
            }
            $1_1 = $1_1 + $7_1 | 0;
            $0_1 = $0_1 + $7_1 | 0;
           }
           HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] & -2;
           HEAP32[$0_1 + $8_1 >> 2] = $0_1;
           HEAP32[$8_1 + 4 >> 2] = $0_1 | 1;
           if ($0_1 >>> 0 <= 255) {
            $0_1 = $0_1 >>> 3 | 0;
            $1_1 = ($0_1 << 3) + 19892 | 0;
            $2_1 = HEAP32[4963];
            $0_1 = 1 << $0_1;
            label$95 : {
             if (!($2_1 & $0_1)) {
              HEAP32[4963] = $0_1 | $2_1;
              $0_1 = $1_1;
              break label$95;
             }
             $0_1 = HEAP32[$1_1 + 8 >> 2];
            }
            HEAP32[$0_1 + 12 >> 2] = $8_1;
            HEAP32[$1_1 + 8 >> 2] = $8_1;
            HEAP32[$8_1 + 12 >> 2] = $1_1;
            HEAP32[$8_1 + 8 >> 2] = $0_1;
            break label$71;
           }
           $2_1 = $8_1;
           $5_1 = $2_1;
           $3_1 = $0_1 >>> 8 | 0;
           $1_1 = 0;
           label$97 : {
            if (!$3_1) {
             break label$97
            }
            $1_1 = 31;
            if ($0_1 >>> 0 > 16777215) {
             break label$97
            }
            $1_1 = $3_1;
            $3_1 = $3_1 + 1048320 >>> 16 & 8;
            $1_1 = $1_1 << $3_1;
            $6_1 = $1_1 + 520192 >>> 16 & 4;
            $1_1 = $1_1 << $6_1;
            $4_1 = $1_1 + 245760 >>> 16 & 2;
            $1_1 = ($1_1 << $4_1 >>> 15 | 0) - ($4_1 | ($3_1 | $6_1)) | 0;
            $1_1 = ($1_1 << 1 | $0_1 >>> $1_1 + 21 & 1) + 28 | 0;
           }
           HEAP32[$5_1 + 28 >> 2] = $1_1;
           HEAP32[$2_1 + 16 >> 2] = 0;
           HEAP32[$2_1 + 20 >> 2] = 0;
           $6_1 = ($1_1 << 2) + 20156 | 0;
           $4_1 = HEAP32[4964];
           $3_1 = 1 << $1_1;
           if (!($4_1 & $3_1)) {
            HEAP32[$6_1 >> 2] = $2_1;
            HEAP32[4964] = $3_1 | $4_1;
            HEAP32[$2_1 + 24 >> 2] = $6_1;
            HEAP32[$2_1 + 8 >> 2] = $2_1;
            HEAP32[$2_1 + 12 >> 2] = $2_1;
            break label$71;
           }
           $3_1 = $0_1 << (($1_1 | 0) == 31 ? 0 : 25 - ($1_1 >>> 1 | 0) | 0);
           $1_1 = HEAP32[$6_1 >> 2];
           while (1) {
            $4_1 = $1_1;
            if ((HEAP32[$1_1 + 4 >> 2] & -8) == ($0_1 | 0)) {
             break label$72
            }
            $1_1 = $3_1 >>> 29 | 0;
            $3_1 = $3_1 << 1;
            $6_1 = ($4_1 + ($1_1 & 4) | 0) + 16 | 0;
            $1_1 = HEAP32[$6_1 >> 2];
            if ($1_1) {
             continue
            }
            break;
           };
           HEAP32[$6_1 >> 2] = $2_1;
           HEAP32[$2_1 + 24 >> 2] = $4_1;
           HEAP32[$2_1 + 12 >> 2] = $2_1;
           HEAP32[$2_1 + 8 >> 2] = $2_1;
           break label$71;
          }
          $2_1 = $1_1 + 8 & 15 ? -8 - $1_1 & 15 : 0;
          $3_1 = $2_1 + $1_1 | 0;
          $0_1 = $5_1 - 56 | 0;
          $2_1 = $0_1 - $2_1 | 0;
          HEAP32[$3_1 + 4 >> 2] = $2_1 | 1;
          HEAP32[($0_1 + $1_1 | 0) + 4 >> 2] = 56;
          $0_1 = ($4_1 + ($4_1 - 55 & 15 ? 55 - $4_1 & 15 : 0) | 0) - 63 | 0;
          $8_1 = $0_1 >>> 0 < $7_1 + 16 >>> 0 ? $7_1 : $0_1;
          HEAP32[$8_1 + 4 >> 2] = 35;
          HEAP32[4970] = HEAP32[5085];
          HEAP32[4966] = $2_1;
          HEAP32[4969] = $3_1;
          $0_1 = HEAP32[5078];
          $2_1 = $8_1 + 16 | 0;
          HEAP32[$2_1 >> 2] = HEAP32[5077];
          HEAP32[$2_1 + 4 >> 2] = $0_1;
          $0_1 = HEAP32[5076];
          HEAP32[$8_1 + 8 >> 2] = HEAP32[5075];
          HEAP32[$8_1 + 12 >> 2] = $0_1;
          HEAP32[5077] = $8_1 + 8;
          HEAP32[5076] = $5_1;
          HEAP32[5075] = $1_1;
          HEAP32[5078] = 0;
          $0_1 = $8_1 + 36 | 0;
          while (1) {
           HEAP32[$0_1 >> 2] = 7;
           $0_1 = $0_1 + 4 | 0;
           if ($4_1 >>> 0 > $0_1 >>> 0) {
            continue
           }
           break;
          };
          if (($7_1 | 0) == ($8_1 | 0)) {
           break label$62
          }
          HEAP32[$8_1 + 4 >> 2] = HEAP32[$8_1 + 4 >> 2] & -2;
          $5_1 = $8_1 - $7_1 | 0;
          HEAP32[$8_1 >> 2] = $5_1;
          HEAP32[$7_1 + 4 >> 2] = $5_1 | 1;
          if ($5_1 >>> 0 <= 255) {
           $0_1 = $5_1 >>> 3 | 0;
           $1_1 = ($0_1 << 3) + 19892 | 0;
           $2_1 = HEAP32[4963];
           $0_1 = 1 << $0_1;
           label$102 : {
            if (!($2_1 & $0_1)) {
             HEAP32[4963] = $0_1 | $2_1;
             $0_1 = $1_1;
             break label$102;
            }
            $0_1 = HEAP32[$1_1 + 8 >> 2];
           }
           HEAP32[$0_1 + 12 >> 2] = $7_1;
           HEAP32[$1_1 + 8 >> 2] = $7_1;
           HEAP32[$7_1 + 12 >> 2] = $1_1;
           HEAP32[$7_1 + 8 >> 2] = $0_1;
           break label$62;
          }
          HEAP32[$7_1 + 16 >> 2] = 0;
          HEAP32[$7_1 + 20 >> 2] = 0;
          $2_1 = $7_1 + 28 | 0;
          $1_1 = $5_1 >>> 8 | 0;
          $0_1 = 0;
          label$104 : {
           if (!$1_1) {
            break label$104
           }
           $0_1 = 31;
           if ($5_1 >>> 0 > 16777215) {
            break label$104
           }
           $0_1 = $1_1;
           $1_1 = $1_1 + 1048320 >>> 16 & 8;
           $0_1 = $0_1 << $1_1;
           $4_1 = $0_1 + 520192 >>> 16 & 4;
           $0_1 = $0_1 << $4_1;
           $3_1 = $0_1 + 245760 >>> 16 & 2;
           $0_1 = ($0_1 << $3_1 >>> 15 | 0) - ($3_1 | ($1_1 | $4_1)) | 0;
           $0_1 = ($0_1 << 1 | $5_1 >>> $0_1 + 21 & 1) + 28 | 0;
          }
          HEAP32[$2_1 >> 2] = $0_1;
          $3_1 = ($0_1 << 2) + 20156 | 0;
          $2_1 = HEAP32[4964];
          $1_1 = 1 << $0_1;
          if (!($2_1 & $1_1)) {
           HEAP32[$3_1 >> 2] = $7_1;
           HEAP32[4964] = $1_1 | $2_1;
           HEAP32[$7_1 + 24 >> 2] = $3_1;
           HEAP32[$7_1 + 8 >> 2] = $7_1;
           HEAP32[$7_1 + 12 >> 2] = $7_1;
           break label$62;
          }
          $0_1 = $5_1 << (($0_1 | 0) == 31 ? 0 : 25 - ($0_1 >>> 1 | 0) | 0);
          $1_1 = HEAP32[$3_1 >> 2];
          while (1) {
           $2_1 = $1_1;
           if (($5_1 | 0) == (HEAP32[$1_1 + 4 >> 2] & -8)) {
            break label$70
           }
           $1_1 = $0_1 >>> 29 | 0;
           $0_1 = $0_1 << 1;
           $3_1 = ($2_1 + ($1_1 & 4) | 0) + 16 | 0;
           $1_1 = HEAP32[$3_1 >> 2];
           if ($1_1) {
            continue
           }
           break;
          };
          HEAP32[$3_1 >> 2] = $7_1;
          HEAP32[$7_1 + 24 >> 2] = $2_1;
          HEAP32[$7_1 + 12 >> 2] = $7_1;
          HEAP32[$7_1 + 8 >> 2] = $7_1;
          break label$62;
         }
         $0_1 = HEAP32[$4_1 + 8 >> 2];
         HEAP32[$4_1 + 8 >> 2] = $2_1;
         HEAP32[$0_1 + 12 >> 2] = $2_1;
         HEAP32[$2_1 + 24 >> 2] = 0;
         HEAP32[$2_1 + 8 >> 2] = $0_1;
         HEAP32[$2_1 + 12 >> 2] = $4_1;
        }
        $0_1 = $10_1 + 8 | 0;
        break label$1;
       }
       $0_1 = HEAP32[$2_1 + 8 >> 2];
       HEAP32[$2_1 + 8 >> 2] = $7_1;
       HEAP32[$0_1 + 12 >> 2] = $7_1;
       HEAP32[$7_1 + 24 >> 2] = 0;
       HEAP32[$7_1 + 8 >> 2] = $0_1;
       HEAP32[$7_1 + 12 >> 2] = $2_1;
      }
      $0_1 = HEAP32[4966];
      if ($0_1 >>> 0 <= $6_1 >>> 0) {
       break label$4
      }
      $2_1 = HEAP32[4969];
      $1_1 = $2_1 + $6_1 | 0;
      $0_1 = $0_1 - $6_1 | 0;
      HEAP32[$1_1 + 4 >> 2] = $0_1 | 1;
      HEAP32[4966] = $0_1;
      HEAP32[4969] = $1_1;
      HEAP32[$2_1 + 4 >> 2] = $6_1 | 3;
      $0_1 = $2_1 + 8 | 0;
      break label$1;
     }
     $0_1 = 0;
     HEAP32[4962] = 48;
     break label$1;
    }
    label$107 : {
     if (!$8_1) {
      break label$107
     }
     $3_1 = HEAP32[$4_1 + 28 >> 2];
     $0_1 = ($3_1 << 2) + 20156 | 0;
     label$108 : {
      if (HEAP32[$0_1 >> 2] == ($4_1 | 0)) {
       HEAP32[$0_1 >> 2] = $1_1;
       if ($1_1) {
        break label$108
       }
       $7_1 = __wasm_rotl_i32($3_1) & $7_1;
       HEAP32[4964] = $7_1;
       break label$107;
      }
      HEAP32[$8_1 + (HEAP32[$8_1 + 16 >> 2] == ($4_1 | 0) ? 16 : 20) >> 2] = $1_1;
      if (!$1_1) {
       break label$107
      }
     }
     HEAP32[$1_1 + 24 >> 2] = $8_1;
     $0_1 = HEAP32[$4_1 + 16 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 16 >> 2] = $0_1;
      HEAP32[$0_1 + 24 >> 2] = $1_1;
     }
     $0_1 = HEAP32[$4_1 + 20 >> 2];
     if (!$0_1) {
      break label$107
     }
     HEAP32[$1_1 + 20 >> 2] = $0_1;
     HEAP32[$0_1 + 24 >> 2] = $1_1;
    }
    label$111 : {
     if ($2_1 >>> 0 <= 15) {
      $0_1 = $2_1 + $6_1 | 0;
      HEAP32[$4_1 + 4 >> 2] = $0_1 | 3;
      $0_1 = $0_1 + $4_1 | 0;
      HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] | 1;
      break label$111;
     }
     $3_1 = $4_1 + $6_1 | 0;
     HEAP32[$3_1 + 4 >> 2] = $2_1 | 1;
     HEAP32[$4_1 + 4 >> 2] = $6_1 | 3;
     HEAP32[$2_1 + $3_1 >> 2] = $2_1;
     if ($2_1 >>> 0 <= 255) {
      $0_1 = $2_1 >>> 3 | 0;
      $1_1 = ($0_1 << 3) + 19892 | 0;
      $2_1 = HEAP32[4963];
      $0_1 = 1 << $0_1;
      label$114 : {
       if (!($2_1 & $0_1)) {
        HEAP32[4963] = $0_1 | $2_1;
        $0_1 = $1_1;
        break label$114;
       }
       $0_1 = HEAP32[$1_1 + 8 >> 2];
      }
      HEAP32[$0_1 + 12 >> 2] = $3_1;
      HEAP32[$1_1 + 8 >> 2] = $3_1;
      HEAP32[$3_1 + 12 >> 2] = $1_1;
      HEAP32[$3_1 + 8 >> 2] = $0_1;
      break label$111;
     }
     $1_1 = $3_1;
     $8_1 = $1_1;
     $3_1 = $2_1 >>> 8 | 0;
     $0_1 = 0;
     label$116 : {
      if (!$3_1) {
       break label$116
      }
      $0_1 = 31;
      if ($2_1 >>> 0 > 16777215) {
       break label$116
      }
      $0_1 = $3_1;
      $3_1 = $3_1 + 1048320 >>> 16 & 8;
      $0_1 = $0_1 << $3_1;
      $5_1 = $0_1 + 520192 >>> 16 & 4;
      $0_1 = $0_1 << $5_1;
      $6_1 = $0_1 + 245760 >>> 16 & 2;
      $0_1 = ($0_1 << $6_1 >>> 15 | 0) - ($6_1 | ($3_1 | $5_1)) | 0;
      $0_1 = ($0_1 << 1 | $2_1 >>> $0_1 + 21 & 1) + 28 | 0;
     }
     HEAP32[$8_1 + 28 >> 2] = $0_1;
     HEAP32[$1_1 + 16 >> 2] = 0;
     HEAP32[$1_1 + 20 >> 2] = 0;
     $6_1 = ($0_1 << 2) + 20156 | 0;
     $3_1 = 1 << $0_1;
     if (!($3_1 & $7_1)) {
      HEAP32[$6_1 >> 2] = $1_1;
      HEAP32[4964] = $3_1 | $7_1;
      HEAP32[$1_1 + 24 >> 2] = $6_1;
      HEAP32[$1_1 + 8 >> 2] = $1_1;
      HEAP32[$1_1 + 12 >> 2] = $1_1;
      break label$111;
     }
     $0_1 = $2_1 << (($0_1 | 0) == 31 ? 0 : 25 - ($0_1 >>> 1 | 0) | 0);
     $6_1 = HEAP32[$6_1 >> 2];
     label$118 : {
      while (1) {
       $3_1 = $6_1;
       if ((HEAP32[$3_1 + 4 >> 2] & -8) == ($2_1 | 0)) {
        break label$118
       }
       $6_1 = $0_1 >>> 29 | 0;
       $0_1 = $0_1 << 1;
       $5_1 = ($3_1 + ($6_1 & 4) | 0) + 16 | 0;
       $6_1 = HEAP32[$5_1 >> 2];
       if ($6_1) {
        continue
       }
       break;
      };
      HEAP32[$5_1 >> 2] = $1_1;
      HEAP32[$1_1 + 24 >> 2] = $3_1;
      HEAP32[$1_1 + 12 >> 2] = $1_1;
      HEAP32[$1_1 + 8 >> 2] = $1_1;
      break label$111;
     }
     $0_1 = HEAP32[$3_1 + 8 >> 2];
     HEAP32[$3_1 + 8 >> 2] = $1_1;
     HEAP32[$0_1 + 12 >> 2] = $1_1;
     HEAP32[$1_1 + 24 >> 2] = 0;
     HEAP32[$1_1 + 8 >> 2] = $0_1;
     HEAP32[$1_1 + 12 >> 2] = $3_1;
    }
    $0_1 = $4_1 + 8 | 0;
    break label$1;
   }
   label$120 : {
    if (!$10_1) {
     break label$120
    }
    $2_1 = HEAP32[$1_1 + 28 >> 2];
    $0_1 = ($2_1 << 2) + 20156 | 0;
    label$121 : {
     if (HEAP32[$0_1 >> 2] == ($1_1 | 0)) {
      HEAP32[$0_1 >> 2] = $4_1;
      if ($4_1) {
       break label$121
      }
      (wasm2js_i32$0 = 19856, wasm2js_i32$1 = __wasm_rotl_i32($2_1) & $7_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$120;
     }
     HEAP32[$10_1 + (HEAP32[$10_1 + 16 >> 2] == ($1_1 | 0) ? 16 : 20) >> 2] = $4_1;
     if (!$4_1) {
      break label$120
     }
    }
    HEAP32[$4_1 + 24 >> 2] = $10_1;
    $0_1 = HEAP32[$1_1 + 16 >> 2];
    if ($0_1) {
     HEAP32[$4_1 + 16 >> 2] = $0_1;
     HEAP32[$0_1 + 24 >> 2] = $4_1;
    }
    $0_1 = HEAP32[$1_1 + 20 >> 2];
    if (!$0_1) {
     break label$120
    }
    HEAP32[$4_1 + 20 >> 2] = $0_1;
    HEAP32[$0_1 + 24 >> 2] = $4_1;
   }
   label$124 : {
    if ($3_1 >>> 0 <= 15) {
     $0_1 = $3_1 + $6_1 | 0;
     HEAP32[$1_1 + 4 >> 2] = $0_1 | 3;
     $0_1 = $0_1 + $1_1 | 0;
     HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] | 1;
     break label$124;
    }
    $4_1 = $1_1 + $6_1 | 0;
    HEAP32[$4_1 + 4 >> 2] = $3_1 | 1;
    HEAP32[$1_1 + 4 >> 2] = $6_1 | 3;
    HEAP32[$3_1 + $4_1 >> 2] = $3_1;
    if ($9_1) {
     $0_1 = $9_1 >>> 3 | 0;
     $2_1 = ($0_1 << 3) + 19892 | 0;
     $6_1 = HEAP32[4968];
     $0_1 = 1 << $0_1;
     label$127 : {
      if (!($0_1 & $5_1)) {
       HEAP32[4963] = $0_1 | $5_1;
       $0_1 = $2_1;
       break label$127;
      }
      $0_1 = HEAP32[$2_1 + 8 >> 2];
     }
     HEAP32[$0_1 + 12 >> 2] = $6_1;
     HEAP32[$2_1 + 8 >> 2] = $6_1;
     HEAP32[$6_1 + 12 >> 2] = $2_1;
     HEAP32[$6_1 + 8 >> 2] = $0_1;
    }
    HEAP32[4968] = $4_1;
    HEAP32[4965] = $3_1;
   }
   $0_1 = $1_1 + 8 | 0;
  }
  global$0 = $11_1 + 16 | 0;
  return $0_1;
 }
 
 function $4($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $2_1 = $0_1 - 8 | 0;
   $0_1 = HEAP32[$0_1 - 4 >> 2];
   $4_1 = $0_1 & -8;
   $5_1 = $2_1 + $4_1 | 0;
   label$2 : {
    if ($0_1 & 1) {
     break label$2
    }
    if (!($0_1 & 3)) {
     break label$1
    }
    $0_1 = HEAP32[$2_1 >> 2];
    $2_1 = $2_1 - $0_1 | 0;
    if ($2_1 >>> 0 < HEAPU32[4967]) {
     break label$1
    }
    $4_1 = $0_1 + $4_1 | 0;
    if (HEAP32[4968] != ($2_1 | 0)) {
     if ($0_1 >>> 0 <= 255) {
      $3_1 = $0_1 >>> 3 | 0;
      $0_1 = HEAP32[$2_1 + 8 >> 2];
      $1_1 = HEAP32[$2_1 + 12 >> 2];
      if (($1_1 | 0) == ($0_1 | 0)) {
       (wasm2js_i32$0 = 19852, wasm2js_i32$1 = HEAP32[4963] & __wasm_rotl_i32($3_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[$1_1 + 8 >> 2] = $0_1;
      HEAP32[$0_1 + 12 >> 2] = $1_1;
      break label$2;
     }
     $7_1 = HEAP32[$2_1 + 24 >> 2];
     $0_1 = HEAP32[$2_1 + 12 >> 2];
     label$6 : {
      if (($2_1 | 0) != ($0_1 | 0)) {
       $1_1 = HEAP32[$2_1 + 8 >> 2];
       HEAP32[$0_1 + 8 >> 2] = $1_1;
       HEAP32[$1_1 + 12 >> 2] = $0_1;
       break label$6;
      }
      label$9 : {
       $1_1 = $2_1 + 20 | 0;
       $3_1 = HEAP32[$1_1 >> 2];
       if ($3_1) {
        break label$9
       }
       $1_1 = $2_1 + 16 | 0;
       $3_1 = HEAP32[$1_1 >> 2];
       if ($3_1) {
        break label$9
       }
       $0_1 = 0;
       break label$6;
      }
      while (1) {
       $6_1 = $1_1;
       $0_1 = $3_1;
       $1_1 = $0_1 + 20 | 0;
       $3_1 = HEAP32[$1_1 >> 2];
       if ($3_1) {
        continue
       }
       $1_1 = $0_1 + 16 | 0;
       $3_1 = HEAP32[$0_1 + 16 >> 2];
       if ($3_1) {
        continue
       }
       break;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     $1_1 = HEAP32[$2_1 + 28 >> 2];
     $3_1 = ($1_1 << 2) + 20156 | 0;
     label$11 : {
      if (HEAP32[$3_1 >> 2] == ($2_1 | 0)) {
       HEAP32[$3_1 >> 2] = $0_1;
       if ($0_1) {
        break label$11
       }
       (wasm2js_i32$0 = 19856, wasm2js_i32$1 = HEAP32[4964] & __wasm_rotl_i32($1_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[$7_1 + (HEAP32[$7_1 + 16 >> 2] == ($2_1 | 0) ? 16 : 20) >> 2] = $0_1;
      if (!$0_1) {
       break label$2
      }
     }
     HEAP32[$0_1 + 24 >> 2] = $7_1;
     $1_1 = HEAP32[$2_1 + 16 >> 2];
     if ($1_1) {
      HEAP32[$0_1 + 16 >> 2] = $1_1;
      HEAP32[$1_1 + 24 >> 2] = $0_1;
     }
     $1_1 = HEAP32[$2_1 + 20 >> 2];
     if (!$1_1) {
      break label$2
     }
     HEAP32[$0_1 + 20 >> 2] = $1_1;
     HEAP32[$1_1 + 24 >> 2] = $0_1;
     break label$2;
    }
    $0_1 = HEAP32[$5_1 + 4 >> 2];
    if (($0_1 & 3) != 3) {
     break label$2
    }
    HEAP32[$5_1 + 4 >> 2] = $0_1 & -2;
    HEAP32[4965] = $4_1;
    HEAP32[$2_1 + $4_1 >> 2] = $4_1;
    HEAP32[$2_1 + 4 >> 2] = $4_1 | 1;
    break label$1;
   }
   if ($2_1 >>> 0 >= $5_1 >>> 0) {
    break label$1
   }
   $0_1 = HEAP32[$5_1 + 4 >> 2];
   if (!($0_1 & 1)) {
    break label$1
   }
   label$14 : {
    if (!($0_1 & 2)) {
     if (HEAP32[4969] == ($5_1 | 0)) {
      HEAP32[4969] = $2_1;
      $0_1 = HEAP32[4966] + $4_1 | 0;
      HEAP32[4966] = $0_1;
      HEAP32[$2_1 + 4 >> 2] = $0_1 | 1;
      if (HEAP32[4968] != ($2_1 | 0)) {
       break label$1
      }
      HEAP32[4965] = 0;
      HEAP32[4968] = 0;
      break label$1;
     }
     if (HEAP32[4968] == ($5_1 | 0)) {
      HEAP32[4968] = $2_1;
      $0_1 = HEAP32[4965] + $4_1 | 0;
      HEAP32[4965] = $0_1;
      HEAP32[$2_1 + 4 >> 2] = $0_1 | 1;
      HEAP32[$0_1 + $2_1 >> 2] = $0_1;
      break label$1;
     }
     $4_1 = ($0_1 & -8) + $4_1 | 0;
     label$18 : {
      if ($0_1 >>> 0 <= 255) {
       $3_1 = HEAP32[$5_1 + 8 >> 2];
       $0_1 = $0_1 >>> 3 | 0;
       $1_1 = HEAP32[$5_1 + 12 >> 2];
       if (($3_1 | 0) == ($1_1 | 0)) {
        (wasm2js_i32$0 = 19852, wasm2js_i32$1 = HEAP32[4963] & __wasm_rotl_i32($0_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$18;
       }
       HEAP32[$1_1 + 8 >> 2] = $3_1;
       HEAP32[$3_1 + 12 >> 2] = $1_1;
       break label$18;
      }
      $7_1 = HEAP32[$5_1 + 24 >> 2];
      $0_1 = HEAP32[$5_1 + 12 >> 2];
      label$23 : {
       if (($5_1 | 0) != ($0_1 | 0)) {
        $1_1 = HEAP32[$5_1 + 8 >> 2];
        HEAP32[$0_1 + 8 >> 2] = $1_1;
        HEAP32[$1_1 + 12 >> 2] = $0_1;
        break label$23;
       }
       label$26 : {
        $1_1 = $5_1 + 20 | 0;
        $3_1 = HEAP32[$1_1 >> 2];
        if ($3_1) {
         break label$26
        }
        $1_1 = $5_1 + 16 | 0;
        $3_1 = HEAP32[$1_1 >> 2];
        if ($3_1) {
         break label$26
        }
        $0_1 = 0;
        break label$23;
       }
       while (1) {
        $6_1 = $1_1;
        $0_1 = $3_1;
        $1_1 = $0_1 + 20 | 0;
        $3_1 = HEAP32[$1_1 >> 2];
        if ($3_1) {
         continue
        }
        $1_1 = $0_1 + 16 | 0;
        $3_1 = HEAP32[$0_1 + 16 >> 2];
        if ($3_1) {
         continue
        }
        break;
       };
       HEAP32[$6_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$18
      }
      $1_1 = HEAP32[$5_1 + 28 >> 2];
      $3_1 = ($1_1 << 2) + 20156 | 0;
      label$28 : {
       if (HEAP32[$3_1 >> 2] == ($5_1 | 0)) {
        HEAP32[$3_1 >> 2] = $0_1;
        if ($0_1) {
         break label$28
        }
        (wasm2js_i32$0 = 19856, wasm2js_i32$1 = HEAP32[4964] & __wasm_rotl_i32($1_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$18;
       }
       HEAP32[$7_1 + (HEAP32[$7_1 + 16 >> 2] == ($5_1 | 0) ? 16 : 20) >> 2] = $0_1;
       if (!$0_1) {
        break label$18
       }
      }
      HEAP32[$0_1 + 24 >> 2] = $7_1;
      $1_1 = HEAP32[$5_1 + 16 >> 2];
      if ($1_1) {
       HEAP32[$0_1 + 16 >> 2] = $1_1;
       HEAP32[$1_1 + 24 >> 2] = $0_1;
      }
      $1_1 = HEAP32[$5_1 + 20 >> 2];
      if (!$1_1) {
       break label$18
      }
      HEAP32[$0_1 + 20 >> 2] = $1_1;
      HEAP32[$1_1 + 24 >> 2] = $0_1;
     }
     HEAP32[$2_1 + $4_1 >> 2] = $4_1;
     HEAP32[$2_1 + 4 >> 2] = $4_1 | 1;
     if (HEAP32[4968] != ($2_1 | 0)) {
      break label$14
     }
     HEAP32[4965] = $4_1;
     break label$1;
    }
    HEAP32[$5_1 + 4 >> 2] = $0_1 & -2;
    HEAP32[$2_1 + $4_1 >> 2] = $4_1;
    HEAP32[$2_1 + 4 >> 2] = $4_1 | 1;
   }
   if ($4_1 >>> 0 <= 255) {
    $1_1 = $4_1 >>> 3 | 0;
    $0_1 = ($1_1 << 3) + 19892 | 0;
    $3_1 = HEAP32[4963];
    $1_1 = 1 << $1_1;
    label$32 : {
     if (!($3_1 & $1_1)) {
      HEAP32[4963] = $1_1 | $3_1;
      $1_1 = $0_1;
      break label$32;
     }
     $1_1 = HEAP32[$0_1 + 8 >> 2];
    }
    HEAP32[$1_1 + 12 >> 2] = $2_1;
    HEAP32[$0_1 + 8 >> 2] = $2_1;
    HEAP32[$2_1 + 12 >> 2] = $0_1;
    HEAP32[$2_1 + 8 >> 2] = $1_1;
    break label$1;
   }
   HEAP32[$2_1 + 16 >> 2] = 0;
   HEAP32[$2_1 + 20 >> 2] = 0;
   $3_1 = $2_1 + 28 | 0;
   $1_1 = $4_1 >>> 8 | 0;
   $0_1 = 0;
   label$34 : {
    if (!$1_1) {
     break label$34
    }
    $0_1 = 31;
    if ($4_1 >>> 0 > 16777215) {
     break label$34
    }
    $6_1 = $1_1 + 1048320 >>> 16 & 8;
    $1_1 = $1_1 << $6_1;
    $0_1 = $1_1 + 520192 >>> 16 & 4;
    $5_1 = $1_1 << $0_1;
    $1_1 = $5_1 + 245760 >>> 16 & 2;
    $0_1 = ($5_1 << $1_1 >>> 15 | 0) - ($1_1 | ($0_1 | $6_1)) | 0;
    $0_1 = ($0_1 << 1 | $4_1 >>> $0_1 + 21 & 1) + 28 | 0;
   }
   HEAP32[$3_1 >> 2] = $0_1;
   $3_1 = ($0_1 << 2) + 20156 | 0;
   $1_1 = HEAP32[4964];
   $6_1 = 1 << $0_1;
   label$35 : {
    if (!($1_1 & $6_1)) {
     HEAP32[$3_1 >> 2] = $2_1;
     HEAP32[4964] = $1_1 | $6_1;
     HEAP32[$2_1 + 24 >> 2] = $3_1;
     HEAP32[$2_1 + 8 >> 2] = $2_1;
     HEAP32[$2_1 + 12 >> 2] = $2_1;
     break label$35;
    }
    $1_1 = $4_1 << (($0_1 | 0) == 31 ? 0 : 25 - ($0_1 >>> 1 | 0) | 0);
    $0_1 = HEAP32[$3_1 >> 2];
    label$37 : {
     while (1) {
      $3_1 = $0_1;
      if ((HEAP32[$0_1 + 4 >> 2] & -8) == ($4_1 | 0)) {
       break label$37
      }
      $0_1 = $1_1 >>> 29 | 0;
      $1_1 = $1_1 << 1;
      $6_1 = ($3_1 + ($0_1 & 4) | 0) + 16 | 0;
      $0_1 = HEAP32[$6_1 >> 2];
      if ($0_1) {
       continue
      }
      break;
     };
     HEAP32[$6_1 >> 2] = $2_1;
     HEAP32[$2_1 + 24 >> 2] = $3_1;
     HEAP32[$2_1 + 12 >> 2] = $2_1;
     HEAP32[$2_1 + 8 >> 2] = $2_1;
     break label$35;
    }
    $0_1 = HEAP32[$3_1 + 8 >> 2];
    HEAP32[$3_1 + 8 >> 2] = $2_1;
    HEAP32[$0_1 + 12 >> 2] = $2_1;
    HEAP32[$2_1 + 24 >> 2] = 0;
    HEAP32[$2_1 + 8 >> 2] = $0_1;
    HEAP32[$2_1 + 12 >> 2] = $3_1;
   }
   $0_1 = HEAP32[4971] - 1 | 0;
   HEAP32[4971] = $0_1;
   if ($0_1) {
    break label$1
   }
   $2_1 = 20308;
   while (1) {
    $0_1 = HEAP32[$2_1 >> 2];
    $2_1 = $0_1 + 8 | 0;
    if ($0_1) {
     continue
    }
    break;
   };
   HEAP32[4971] = -1;
  }
 }
 
 function $5($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $0_1 = fimport$0(HEAP32[$0_1 + 56 >> 2]) | 0;
  $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   HEAP32[4962] = $0_1;
   $1_1 = -1;
  }
  return $1_1 | 0;
 }
 
 function $6($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = -1;
  label$1 : {
   if (($2_1 | 0) <= -1) {
    HEAP32[4962] = 28;
    break label$1;
   }
   $0_1 = fimport$1($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 + 12 | 0) | 0;
   if ($0_1) {
    HEAP32[4962] = $0_1;
    break label$1;
   }
   $4_1 = HEAP32[$3_1 + 12 >> 2];
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1;
 }
 
 function $7($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $2_1;
  HEAP32[$3_1 + 8 >> 2] = $1_1;
  $1_1 = HEAP32[$0_1 + 24 >> 2];
  HEAP32[$3_1 >> 2] = $1_1;
  $1_1 = HEAP32[$0_1 + 20 >> 2] - $1_1 | 0;
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  $6_1 = 2;
  $4_1 = $6(HEAP32[$0_1 + 56 >> 2], $3_1, 2);
  $7_1 = $1_1 + $2_1 | 0;
  label$1 : {
   if (($4_1 | 0) != ($7_1 | 0)) {
    $1_1 = $3_1;
    while (1) {
     if (($4_1 | 0) <= -1) {
      HEAP32[$0_1 + 24 >> 2] = 0;
      HEAP32[$0_1 + 16 >> 2] = 0;
      HEAP32[$0_1 + 20 >> 2] = 0;
      HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 32;
      $0_1 = 0;
      if (($6_1 | 0) == 2) {
       break label$1
      }
      $0_1 = $2_1 - HEAP32[$1_1 + 4 >> 2] | 0;
      break label$1;
     }
     $5_1 = HEAP32[$1_1 + 4 >> 2];
     $8_1 = $5_1 >>> 0 < $4_1 >>> 0;
     $1_1 = $8_1 ? $1_1 + 8 | 0 : $1_1;
     $5_1 = $4_1 - ($8_1 ? $5_1 : 0) | 0;
     HEAP32[$1_1 >> 2] = $5_1 + HEAP32[$1_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] - $5_1;
     $7_1 = $7_1 - $4_1 | 0;
     $6_1 = $6_1 - $8_1 | 0;
     $4_1 = $6(HEAP32[$0_1 + 56 >> 2], $1_1, $6_1);
     if (($7_1 | 0) != ($4_1 | 0)) {
      continue
     }
     break;
    };
   }
   $1_1 = HEAP32[$0_1 + 40 >> 2];
   HEAP32[$0_1 + 24 >> 2] = $1_1;
   HEAP32[$0_1 + 20 >> 2] = $1_1;
   HEAP32[$0_1 + 16 >> 2] = $1_1 + HEAP32[$0_1 + 44 >> 2];
   $0_1 = $2_1;
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $8($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $0_1 = legalimport$fimport$2(HEAP32[$0_1 + 56 >> 2], $1_1 | 0, $2_1 | 0, $3_1 & 255, $4_1 + 8 | 0) | 0;
  label$1 : {
   if ($0_1) {
    HEAP32[4962] = ($0_1 | 0) == 76 ? 70 : $0_1;
    $1_1 = -1;
    $0_1 = -1;
    break label$1;
   }
   $1_1 = HEAP32[$4_1 + 12 >> 2];
   $0_1 = HEAP32[$4_1 + 8 >> 2];
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$HIGH_BITS = $1_1;
  return $0_1 | 0;
 }
 
 function $9($0_1) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 + 60 >> 2];
  HEAP32[$0_1 + 60 >> 2] = $1_1 - 1 | $1_1;
  $1_1 = HEAP32[$0_1 >> 2];
  if ($1_1 & 8) {
   HEAP32[$0_1 >> 2] = $1_1 | 32;
   return -1;
  }
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = 0;
  $1_1 = HEAP32[$0_1 + 40 >> 2];
  HEAP32[$0_1 + 24 >> 2] = $1_1;
  HEAP32[$0_1 + 20 >> 2] = $1_1;
  HEAP32[$0_1 + 16 >> 2] = $1_1 + HEAP32[$0_1 + 44 >> 2];
  return 0;
 }
 
 function $10($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   $3_1 = HEAP32[$2_1 + 16 >> 2];
   if (!$3_1) {
    if ($9($2_1)) {
     break label$1
    }
    $3_1 = HEAP32[$2_1 + 16 >> 2];
   }
   $5_1 = HEAP32[$2_1 + 20 >> 2];
   if ($3_1 - $5_1 >>> 0 < $1_1 >>> 0) {
    FUNCTION_TABLE[HEAP32[$2_1 + 32 >> 2]]($2_1, $0_1, $1_1) | 0;
    return;
   }
   label$5 : {
    if (HEAP32[$2_1 + 64 >> 2] < 0) {
     break label$5
    }
    $3_1 = $0_1;
    while (1) {
     if (($1_1 | 0) == ($4_1 | 0)) {
      break label$5
     }
     $4_1 = $4_1 + 1 | 0;
     $7_1 = $1_1 + $3_1 | 0;
     $6_1 = $3_1 - 1 | 0;
     $3_1 = $6_1;
     if (HEAPU8[$7_1 - 1 | 0] != 10) {
      continue
     }
     break;
    };
    $3_1 = $0_1;
    $0_1 = ($1_1 - $4_1 | 0) + 1 | 0;
    if (FUNCTION_TABLE[HEAP32[$2_1 + 32 >> 2]]($2_1, $3_1, $0_1) >>> 0 < $0_1 >>> 0) {
     break label$1
    }
    $0_1 = ($1_1 + $6_1 | 0) + 1 | 0;
    $5_1 = HEAP32[$2_1 + 20 >> 2];
    $1_1 = $4_1 - 1 | 0;
   }
   $2($5_1, $0_1, $1_1);
   HEAP32[$2_1 + 20 >> 2] = HEAP32[$2_1 + 20 >> 2] + $1_1;
  }
 }
 
 function $11($0_1, $1_1) {
  if (!$0_1) {
   return 0
  }
  if ($0_1) {
   label$3 : {
    if ($1_1 >>> 0 <= 127) {
     HEAP8[$0_1 | 0] = $1_1;
     $0_1 = 1;
     break label$3;
    }
    label$5 : {
     if (!HEAP32[5089]) {
      if (($1_1 & -128) != 57216) {
       break label$5
      }
      HEAP8[$0_1 | 0] = $1_1;
      $0_1 = 1;
      break label$3;
     }
     if ($1_1 >>> 0 <= 2047) {
      HEAP8[$0_1 + 1 | 0] = $1_1 & 63 | 128;
      HEAP8[$0_1 | 0] = $1_1 >>> 6 | 192;
      $0_1 = 2;
      break label$3;
     }
     if (!(($1_1 & -8192) != 57344 ? $1_1 >>> 0 >= 55296 : 0)) {
      HEAP8[$0_1 + 2 | 0] = $1_1 & 63 | 128;
      HEAP8[$0_1 | 0] = $1_1 >>> 12 | 224;
      HEAP8[$0_1 + 1 | 0] = $1_1 >>> 6 & 63 | 128;
      $0_1 = 3;
      break label$3;
     }
     if ($1_1 - 65536 >>> 0 <= 1048575) {
      HEAP8[$0_1 + 3 | 0] = $1_1 & 63 | 128;
      HEAP8[$0_1 | 0] = $1_1 >>> 18 | 240;
      HEAP8[$0_1 + 2 | 0] = $1_1 >>> 6 & 63 | 128;
      HEAP8[$0_1 + 1 | 0] = $1_1 >>> 12 & 63 | 128;
      $0_1 = 4;
      break label$3;
     }
    }
    HEAP32[4962] = 25;
    $0_1 = -1;
   }
  } else {
   $0_1 = 1
  }
  return $0_1;
 }
 
 function $12($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  $3_1 = wasm2js_scratch_load_i32(1) | 0;
  $4_1 = wasm2js_scratch_load_i32(0) | 0;
  $2_1 = $3_1 >>> 20 & 2047;
  if (($2_1 | 0) != 2047) {
   if (!$2_1) {
    if ($0_1 == 0.0) {
     HEAP32[$1_1 >> 2] = 0;
     return $0_1;
    }
    $0_1 = $12($0_1 * 18446744073709551615.0, $1_1);
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + -64;
    return $0_1;
   }
   HEAP32[$1_1 >> 2] = $2_1 - 1022;
   wasm2js_scratch_store_i32(0, $4_1 | 0);
   wasm2js_scratch_store_i32(1, $3_1 & -2146435073 | 1071644672);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return $0_1;
 }
 
 function $13($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 208 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 204 >> 2] = $2_1;
  $4_1 = $3_1 + 192 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $3_1 + 184 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $3_1 + 176 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 168 >> 2] = 0;
  HEAP32[$3_1 + 172 >> 2] = 0;
  HEAP32[$3_1 + 160 >> 2] = 0;
  HEAP32[$3_1 + 164 >> 2] = 0;
  HEAP32[$3_1 + 200 >> 2] = $2_1;
  if (($14(0, $1_1, $3_1 + 200 | 0, $3_1 + 80 | 0, $3_1 + 160 | 0) | 0) >= 0) {
   $4_1 = HEAP32[$0_1 >> 2];
   if (HEAP32[$0_1 + 60 >> 2] <= 0) {
    HEAP32[$0_1 >> 2] = $4_1 & -33
   }
   label$3 : {
    label$4 : {
     label$5 : {
      if (!HEAP32[$0_1 + 44 >> 2]) {
       HEAP32[$0_1 + 44 >> 2] = 80;
       HEAP32[$0_1 + 24 >> 2] = 0;
       HEAP32[$0_1 + 16 >> 2] = 0;
       HEAP32[$0_1 + 20 >> 2] = 0;
       $5_1 = HEAP32[$0_1 + 40 >> 2];
       HEAP32[$0_1 + 40 >> 2] = $3_1;
       break label$5;
      }
      if (HEAP32[$0_1 + 16 >> 2]) {
       break label$4
      }
     }
     if ($9($0_1)) {
      break label$3
     }
    }
    $14($0_1, $1_1, $3_1 + 200 | 0, $3_1 + 80 | 0, $3_1 + 160 | 0);
   }
   if ($5_1) {
    FUNCTION_TABLE[HEAP32[$0_1 + 32 >> 2]]($0_1, 0, 0) | 0;
    HEAP32[$0_1 + 44 >> 2] = 0;
    HEAP32[$0_1 + 40 >> 2] = $5_1;
    HEAP32[$0_1 + 24 >> 2] = 0;
    HEAP32[$0_1 + 16 >> 2] = 0;
    HEAP32[$0_1 + 20 >> 2] = 0;
   }
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | $4_1 & 32;
  }
  global$0 = $3_1 + 208 | 0;
 }
 
 function $14($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0.0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0.0, $25 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11_1 = global$0 - 880 | 0;
  global$0 = $11_1;
  $34_1 = $11_1 + 336 | 8;
  $35_1 = $11_1 + 55 | 0;
  $36_1 = -338 - $11_1 | 0;
  $30_1 = $11_1 + 336 | 9;
  $37_1 = $11_1 + 656 | 0;
  $27_1 = $11_1 + 336 | 0;
  $33_1 = -336 - $11_1 | 0;
  $26_1 = $11_1 + 56 | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      $8_1 = $1_1;
      if ((2147483647 - $21_1 | 0) < ($5_1 | 0)) {
       break label$4
      }
      $21_1 = $5_1 + $21_1 | 0;
      label$5 : {
       label$6 : {
        label$7 : {
         $5_1 = HEAPU8[$8_1 | 0];
         if ($5_1) {
          while (1) {
           label$10 : {
            $5_1 = $5_1 & 255;
            label$11 : {
             if ($5_1) {
              if (($5_1 | 0) != 37) {
               break label$10
              }
              $6_1 = $1_1;
              $5_1 = $6_1;
              while (1) {
               if (HEAPU8[$5_1 + 1 | 0] != 37) {
                $1_1 = $5_1;
                break label$11;
               }
               $6_1 = $6_1 + 1 | 0;
               $7_1 = HEAPU8[$5_1 + 2 | 0];
               $1_1 = $5_1 + 2 | 0;
               $5_1 = $1_1;
               if (($7_1 | 0) == 37) {
                continue
               }
               break;
              };
              break label$11;
             }
             $6_1 = $1_1;
            }
            $5_1 = $6_1 - $8_1 | 0;
            $22_1 = 2147483647 - $21_1 | 0;
            if (($5_1 | 0) > ($22_1 | 0)) {
             break label$4
            }
            label$15 : {
             if (!$0_1) {
              break label$15
             }
             if (HEAPU8[$0_1 | 0] & 32) {
              break label$15
             }
             $10($8_1, $5_1, $0_1);
            }
            if ($5_1) {
             continue label$3
            }
            $5_1 = $1_1 + 1 | 0;
            $9_1 = HEAP8[$1_1 + 1 | 0];
            $10_1 = $9_1 - 48 | 0;
            $7_1 = -1;
            label$16 : {
             if ($10_1 >>> 0 > 9) {
              break label$16
             }
             $6_1 = HEAPU8[$1_1 + 2 | 0] == 36;
             $5_1 = $6_1 ? $1_1 + 3 | 0 : $5_1;
             $28_1 = $6_1 ? 1 : $28_1;
             $9_1 = HEAP8[($6_1 ? 3 : 1) + $1_1 | 0];
             $7_1 = $6_1 ? $10_1 : -1;
            }
            $6_1 = 0;
            $1_1 = $9_1 - 32 | 0;
            label$17 : {
             if ($1_1 >>> 0 > 31) {
              $1_1 = $5_1;
              break label$17;
             }
             $12_1 = 1 << $1_1;
             if (!($12_1 & 75913)) {
              $1_1 = $5_1;
              break label$17;
             }
             while (1) {
              $1_1 = $5_1 + 1 | 0;
              $6_1 = $6_1 | $12_1;
              $9_1 = HEAP8[$5_1 + 1 | 0];
              $10_1 = $9_1 - 32 | 0;
              if ($10_1 >>> 0 > 31) {
               break label$17
              }
              $5_1 = $1_1;
              $12_1 = 1 << $10_1;
              if ($12_1 & 75913) {
               continue
              }
              break;
             };
            }
            label$21 : {
             if (($9_1 | 0) == 42) {
              label$23 : {
               label$24 : {
                $5_1 = HEAP8[$1_1 + 1 | 0] - 48 | 0;
                if ($5_1 >>> 0 > 9) {
                 break label$24
                }
                if (HEAPU8[$1_1 + 2 | 0] != 36) {
                 break label$24
                }
                HEAP32[($5_1 << 2) + $4_1 >> 2] = 10;
                $10_1 = $1_1 + 3 | 0;
                $28_1 = 1;
                $15_1 = HEAP32[((HEAP8[$1_1 + 1 | 0] << 3) + $3_1 | 0) - 384 >> 2];
                break label$23;
               }
               if ($28_1) {
                break label$7
               }
               $10_1 = $1_1 + 1 | 0;
               if (!$0_1) {
                $28_1 = 0;
                $15_1 = 0;
                break label$21;
               }
               $1_1 = HEAP32[$2_1 >> 2];
               HEAP32[$2_1 >> 2] = $1_1 + 4;
               $28_1 = 0;
               $15_1 = HEAP32[$1_1 >> 2];
              }
              if (($15_1 | 0) > -1) {
               break label$21
              }
              $15_1 = 0 - $15_1 | 0;
              $6_1 = $6_1 | 8192;
              break label$21;
             }
             $15_1 = 0;
             $12_1 = $9_1 - 48 | 0;
             if ($12_1 >>> 0 > 9) {
              $10_1 = $1_1;
              break label$21;
             }
             $5_1 = 0;
             while (1) {
              $15_1 = -1;
              $9_1 = HEAP8[$1_1 + 1 | 0];
              $10_1 = $1_1 + 1 | 0;
              $1_1 = $10_1;
              if ($5_1 >>> 0 <= 214748364) {
               $5_1 = Math_imul($5_1, 10);
               $15_1 = (2147483647 - $5_1 | 0) < ($12_1 | 0) ? -1 : $5_1 + $12_1 | 0;
              }
              $5_1 = $15_1;
              $12_1 = $9_1 - 48 | 0;
              if ($12_1 >>> 0 < 10) {
               continue
              }
              break;
             };
             if (($15_1 | 0) < 0) {
              break label$4
             }
            }
            $5_1 = 0;
            $9_1 = -1;
            label$29 : {
             if (HEAPU8[$10_1 | 0] != 46) {
              $1_1 = $10_1;
              $19_1 = 0;
              break label$29;
             }
             $9_1 = HEAP8[$10_1 + 1 | 0];
             if (($9_1 | 0) == 42) {
              label$32 : {
               label$33 : {
                $1_1 = HEAP8[$10_1 + 2 | 0] - 48 | 0;
                if ($1_1 >>> 0 > 9) {
                 break label$33
                }
                if (HEAPU8[$10_1 + 3 | 0] != 36) {
                 break label$33
                }
                HEAP32[($1_1 << 2) + $4_1 >> 2] = 10;
                $1_1 = $10_1 + 4 | 0;
                $9_1 = HEAP32[((HEAP8[$10_1 + 2 | 0] << 3) + $3_1 | 0) - 384 >> 2];
                break label$32;
               }
               if ($28_1) {
                break label$7
               }
               $1_1 = $10_1 + 2 | 0;
               $9_1 = 0;
               if (!$0_1) {
                break label$32
               }
               $10_1 = HEAP32[$2_1 >> 2];
               HEAP32[$2_1 >> 2] = $10_1 + 4;
               $9_1 = HEAP32[$10_1 >> 2];
              }
              $19_1 = ($9_1 ^ -1) >>> 31 | 0;
              break label$29;
             }
             $1_1 = $10_1 + 1 | 0;
             $14_1 = $9_1 - 48 | 0;
             if ($14_1 >>> 0 > 9) {
              $19_1 = 1;
              $9_1 = 0;
              break label$29;
             }
             $10_1 = 0;
             $12_1 = $1_1;
             while (1) {
              $9_1 = -1;
              if ($10_1 >>> 0 <= 214748364) {
               $1_1 = Math_imul($10_1, 10);
               $9_1 = (2147483647 - $1_1 | 0) < ($14_1 | 0) ? -1 : $1_1 + $14_1 | 0;
              }
              $19_1 = 1;
              $13_1 = HEAP8[$12_1 + 1 | 0];
              $1_1 = $12_1 + 1 | 0;
              $12_1 = $1_1;
              $10_1 = $9_1;
              $14_1 = $13_1 - 48 | 0;
              if ($14_1 >>> 0 < 10) {
               continue
              }
              break;
             };
            }
            while (1) {
             $12_1 = $5_1;
             $5_1 = HEAP8[$1_1 | 0] - 65 | 0;
             if ($5_1 >>> 0 > 57) {
              break label$7
             }
             $1_1 = $1_1 + 1 | 0;
             $5_1 = HEAPU8[($5_1 + Math_imul($12_1, 58) | 0) + 2720 | 0];
             if ($5_1 - 1 >>> 0 < 8) {
              continue
             }
             break;
            };
            if (!$5_1) {
             break label$7
            }
            label$38 : {
             label$39 : {
              label$40 : {
               if (($5_1 | 0) == 27) {
                if (($7_1 | 0) <= -1) {
                 break label$40
                }
                break label$7;
               }
               if (($7_1 | 0) < 0) {
                break label$39
               }
               HEAP32[($7_1 << 2) + $4_1 >> 2] = $5_1;
               $5_1 = ($7_1 << 3) + $3_1 | 0;
               $7_1 = HEAP32[$5_1 + 4 >> 2];
               HEAP32[$11_1 + 56 >> 2] = HEAP32[$5_1 >> 2];
               HEAP32[$11_1 + 60 >> 2] = $7_1;
              }
              $5_1 = 0;
              if (!$0_1) {
               continue label$3
              }
              break label$38;
             }
             if (!$0_1) {
              $21_1 = 0;
              break label$1;
             }
             $15($11_1 + 56 | 0, $5_1, $2_1);
            }
            $7_1 = $6_1 & -65537;
            $16_1 = $6_1 & 8192 ? $7_1 : $6_1;
            label$43 : {
             label$44 : {
              label$45 : {
               $5_1 = HEAP8[$1_1 - 1 | 0];
               $10_1 = $12_1 ? (($5_1 & 15) == 3 ? $5_1 & -33 : $5_1) : $5_1;
               $5_1 = $10_1 - 65 | 0;
               if ($5_1 >>> 0 > 55) {
                break label$45
               }
               label$46 : {
                label$47 : {
                 label$48 : {
                  label$49 : {
                   label$50 : {
                    label$51 : {
                     label$52 : {
                      label$53 : {
                       label$54 : {
                        label$55 : {
                         label$56 : {
                          label$57 : {
                           switch ($5_1 - 1 | 0) {
                           case 51:
                            $13_1 = 0;
                            $12_1 = HEAP32[$11_1 + 56 >> 2];
                            $5_1 = HEAP32[$11_1 + 60 >> 2];
                            $14_1 = 2694;
                            break label$56;
                           case 44:
                            $5_1 = 0;
                            $6_1 = $12_1 & 255;
                            if ($6_1 >>> 0 > 7) {
                             continue label$3
                            }
                            label$63 : {
                             switch ($6_1 - 1 | 0) {
                             default:
                              HEAP32[HEAP32[$11_1 + 56 >> 2] >> 2] = $21_1;
                              continue label$3;
                             case 0:
                              HEAP32[HEAP32[$11_1 + 56 >> 2] >> 2] = $21_1;
                              continue label$3;
                             case 1:
                              $6_1 = HEAP32[$11_1 + 56 >> 2];
                              HEAP32[$6_1 >> 2] = $21_1;
                              HEAP32[$6_1 + 4 >> 2] = $21_1 >> 31;
                              continue label$3;
                             case 2:
                              HEAP16[HEAP32[$11_1 + 56 >> 2] >> 1] = $21_1;
                              continue label$3;
                             case 3:
                              HEAP8[HEAP32[$11_1 + 56 >> 2]] = $21_1;
                              continue label$3;
                             case 5:
                              HEAP32[HEAP32[$11_1 + 56 >> 2] >> 2] = $21_1;
                              continue label$3;
                             case 4:
                              continue label$3;
                             case 6:
                              break label$63;
                             };
                            }
                            $6_1 = HEAP32[$11_1 + 56 >> 2];
                            HEAP32[$6_1 >> 2] = $21_1;
                            HEAP32[$6_1 + 4 >> 2] = $21_1 >> 31;
                            continue label$3;
                           case 46:
                            $9_1 = $9_1 >>> 0 > 8 ? $9_1 : 8;
                            $16_1 = $16_1 | 8;
                            $10_1 = 120;
                           case 22:
                           case 54:
                            $13_1 = 0;
                            $14_1 = 2694;
                            $6_1 = HEAP32[$11_1 + 60 >> 2];
                            $5_1 = $6_1;
                            $12_1 = HEAP32[$11_1 + 56 >> 2];
                            if (!($5_1 | $12_1)) {
                             $8_1 = $26_1;
                             break label$55;
                            }
                            $7_1 = $10_1 & 32;
                            $8_1 = $26_1;
                            while (1) {
                             $8_1 = $8_1 - 1 | 0;
                             HEAP8[$8_1 | 0] = $7_1 | HEAPU8[($12_1 & 15) + 3328 | 0];
                             $6_1 = $5_1;
                             $5_1 = $5_1 >>> 4 | 0;
                             $12_1 = ($6_1 & 15) << 28 | $12_1 >>> 4;
                             if ($12_1 | $5_1) {
                              continue
                             }
                             break;
                            };
                            if (!($16_1 & 8)) {
                             break label$55
                            }
                            if (!(HEAP32[$11_1 + 56 >> 2] | HEAP32[$11_1 + 60 >> 2])) {
                             break label$55
                            }
                            $14_1 = ($10_1 >> 4) + 2694 | 0;
                            $13_1 = 2;
                            break label$55;
                           case 45:
                            $8_1 = $26_1;
                            $6_1 = HEAP32[$11_1 + 60 >> 2];
                            $5_1 = $6_1;
                            $12_1 = HEAP32[$11_1 + 56 >> 2];
                            if ($5_1 | $12_1) {
                             while (1) {
                              $8_1 = $8_1 - 1 | 0;
                              HEAP8[$8_1 | 0] = $12_1 & 7 | 48;
                              $6_1 = $5_1;
                              $5_1 = $5_1 >>> 3 | 0;
                              $12_1 = ($6_1 & 7) << 29 | $12_1 >>> 3;
                              if ($12_1 | $5_1) {
                               continue
                              }
                              break;
                             }
                            }
                            $13_1 = 0;
                            $14_1 = 2694;
                            if (!($16_1 & 8)) {
                             break label$55
                            }
                            $5_1 = $26_1 - $8_1 | 0;
                            $9_1 = ($5_1 | 0) < ($9_1 | 0) ? $9_1 : $5_1 + 1 | 0;
                            break label$55;
                           case 0:
                           case 2:
                           case 6:
                           case 7:
                           case 8:
                           case 9:
                           case 10:
                           case 11:
                           case 12:
                           case 13:
                           case 14:
                           case 15:
                           case 16:
                           case 18:
                           case 19:
                           case 20:
                           case 21:
                           case 23:
                           case 24:
                           case 25:
                           case 26:
                           case 27:
                           case 28:
                           case 29:
                           case 30:
                           case 32:
                           case 38:
                           case 40:
                           case 41:
                           case 42:
                           case 47:
                           case 48:
                           case 50:
                           case 52:
                           case 53:
                            break label$45;
                           case 1:
                            break label$49;
                           case 17:
                            break label$50;
                           case 49:
                            break label$52;
                           case 43:
                            break label$53;
                           case 33:
                            break label$54;
                           case 34:
                           case 39:
                            break label$57;
                           default:
                            break label$46;
                           };
                          }
                          $6_1 = HEAP32[$11_1 + 60 >> 2];
                          $5_1 = $6_1;
                          $12_1 = HEAP32[$11_1 + 56 >> 2];
                          if (($5_1 | 0) < -1 ? 1 : ($5_1 | 0) <= -1) {
                           $5_1 = 0 - ((($12_1 | 0) != 0) + $5_1 | 0) | 0;
                           $12_1 = 0 - $12_1 | 0;
                           HEAP32[$11_1 + 56 >> 2] = $12_1;
                           HEAP32[$11_1 + 60 >> 2] = $5_1;
                           $13_1 = 1;
                           $14_1 = 2694;
                           break label$56;
                          }
                          if ($16_1 & 2048) {
                           $13_1 = 1;
                           $14_1 = 2695;
                           break label$56;
                          }
                          $13_1 = $16_1 & 1;
                          $14_1 = $13_1 ? 2696 : 2694;
                         }
                         label$76 : {
                          if ($5_1 >>> 0 < 1) {
                           $6_1 = $12_1;
                           $8_1 = $26_1;
                           break label$76;
                          }
                          $8_1 = $26_1;
                          while (1) {
                           $6_1 = __wasm_i64_udiv($12_1, $5_1, 10);
                           $10_1 = i64toi32_i32$HIGH_BITS;
                           $7_1 = $10_1;
                           $8_1 = $8_1 - 1 | 0;
                           (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = $12_1 - __wasm_i64_mul($6_1, $7_1, 10, 0) | 48), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
                           $10_1 = $5_1 >>> 0 > 9;
                           $12_1 = $6_1;
                           $5_1 = $7_1;
                           if ($10_1) {
                            continue
                           }
                           break;
                          };
                         }
                         $5_1 = $6_1;
                         if (!$5_1) {
                          break label$55
                         }
                         while (1) {
                          $8_1 = $8_1 - 1 | 0;
                          $6_1 = ($5_1 >>> 0) / 10 | 0;
                          HEAP8[$8_1 | 0] = $5_1 - Math_imul($6_1, 10) | 48;
                          $7_1 = $5_1 >>> 0 > 9;
                          $5_1 = $6_1;
                          if ($7_1) {
                           continue
                          }
                          break;
                         };
                        }
                        if (($9_1 | 0) < 0 ? $19_1 : 0) {
                         break label$4
                        }
                        $16_1 = $19_1 ? $16_1 & -65537 : $16_1;
                        $5_1 = HEAP32[$11_1 + 56 >> 2];
                        $6_1 = HEAP32[$11_1 + 60 >> 2];
                        label$80 : {
                         if ($9_1) {
                          break label$80
                         }
                         if ($5_1 | $6_1) {
                          break label$80
                         }
                         $8_1 = $26_1;
                         $5_1 = $8_1;
                         $9_1 = 0;
                         break label$5;
                        }
                        $5_1 = !($5_1 | $6_1) + ($26_1 - $8_1 | 0) | 0;
                        $9_1 = ($5_1 | 0) < ($9_1 | 0) ? $9_1 : $5_1;
                        break label$44;
                       }
                       HEAP8[$11_1 + 55 | 0] = HEAP32[$11_1 + 56 >> 2];
                       $13_1 = 0;
                       $14_1 = 2694;
                       $9_1 = 1;
                       $8_1 = $35_1;
                       $5_1 = $26_1;
                       $16_1 = $7_1;
                       break label$5;
                      }
                      $8_1 = HEAP32[4962];
                      $5_1 = 0;
                      if (!HEAP32[5095]) {
                       HEAP32[5095] = 20356
                      }
                      label$82 : {
                       label$83 : {
                        while (1) {
                         if (($8_1 | 0) != HEAPU8[$5_1 + 1040 | 0]) {
                          $6_1 = 77;
                          $5_1 = $5_1 + 1 | 0;
                          if (($5_1 | 0) != 77) {
                           continue
                          }
                          break label$83;
                         }
                         break;
                        };
                        $6_1 = $5_1;
                        if ($5_1) {
                         break label$83
                        }
                        $8_1 = 1120;
                        break label$82;
                       }
                       $5_1 = 1120;
                       while (1) {
                        $10_1 = HEAPU8[$5_1 | 0];
                        $8_1 = $5_1 + 1 | 0;
                        $5_1 = $8_1;
                        if ($10_1) {
                         continue
                        }
                        $5_1 = $8_1;
                        $6_1 = $6_1 - 1 | 0;
                        if ($6_1) {
                         continue
                        }
                        break;
                       };
                      }
                      break label$51;
                     }
                     $5_1 = HEAP32[$11_1 + 56 >> 2];
                     $8_1 = $5_1 ? $5_1 : 2704;
                    }
                    $13_1 = 0;
                    $14_1 = $8_1;
                    $10_1 = $8_1;
                    $19_1 = ($9_1 | 0) < 0 ? 2147483647 : $9_1;
                    $6_1 = $19_1;
                    $16_1 = ($6_1 | 0) != 0;
                    label$87 : {
                     label$88 : {
                      label$89 : {
                       label$90 : {
                        if (!$6_1) {
                         $5_1 = $6_1;
                         break label$90;
                        }
                        if (!($10_1 & 3)) {
                         $5_1 = $6_1;
                         break label$90;
                        }
                        while (1) {
                         if (!HEAPU8[$10_1 | 0]) {
                          $5_1 = $6_1;
                          break label$89;
                         }
                         $16_1 = ($6_1 | 0) != 1;
                         $5_1 = $6_1 - 1 | 0;
                         $10_1 = $10_1 + 1 | 0;
                         if (($6_1 | 0) == 1) {
                          break label$90
                         }
                         $6_1 = $5_1;
                         if ($10_1 & 3) {
                          continue
                         }
                         break;
                        };
                       }
                       if (!$16_1) {
                        break label$88
                       }
                      }
                      label$95 : {
                       if (!HEAPU8[$10_1 | 0]) {
                        break label$95
                       }
                       if ($5_1 >>> 0 < 4) {
                        break label$95
                       }
                       $12_1 = $5_1 - 4 | 0;
                       $6_1 = $12_1 & 3;
                       $12_1 = (($12_1 & -4) + $10_1 | 0) + 4 | 0;
                       while (1) {
                        $16_1 = HEAP32[$10_1 >> 2];
                        if (($16_1 ^ -1) & $16_1 - 16843009 & -2139062144) {
                         break label$95
                        }
                        $10_1 = $10_1 + 4 | 0;
                        $5_1 = $5_1 - 4 | 0;
                        if ($5_1 >>> 0 > 3) {
                         continue
                        }
                        break;
                       };
                       $5_1 = $6_1;
                       $10_1 = $12_1;
                      }
                      if (!$5_1) {
                       break label$88
                      }
                      while (1) {
                       if (!HEAPU8[$10_1 | 0]) {
                        break label$87
                       }
                       $10_1 = $10_1 + 1 | 0;
                       $5_1 = $5_1 - 1 | 0;
                       if ($5_1) {
                        continue
                       }
                       break;
                      };
                     }
                     $10_1 = 0;
                    }
                    $6_1 = $10_1 ? $10_1 - $8_1 | 0 : $19_1;
                    $5_1 = $6_1 + $14_1 | 0;
                    $14_1 = 2694;
                    if (($9_1 | 0) <= -1) {
                     break label$43
                    }
                    $16_1 = $7_1;
                    $9_1 = $6_1;
                    break label$5;
                   }
                   $8_1 = HEAP32[$11_1 + 56 >> 2];
                   $6_1 = $8_1;
                   if ($9_1) {
                    break label$48
                   }
                   $5_1 = 0;
                   break label$47;
                  }
                  HEAP32[$11_1 + 12 >> 2] = 0;
                  HEAP32[$11_1 + 8 >> 2] = HEAP32[$11_1 + 56 >> 2];
                  HEAP32[$11_1 + 56 >> 2] = $11_1 + 8;
                  $9_1 = -1;
                  $6_1 = $11_1 + 8 | 0;
                 }
                 $5_1 = 0;
                 $8_1 = $6_1;
                 label$98 : {
                  while (1) {
                   $7_1 = HEAP32[$6_1 >> 2];
                   if (!$7_1) {
                    break label$98
                   }
                   label$100 : {
                    $7_1 = $11($11_1 + 4 | 0, $7_1);
                    $10_1 = ($7_1 | 0) < 0;
                    if ($10_1) {
                     break label$100
                    }
                    if ($7_1 >>> 0 > $9_1 - $5_1 >>> 0) {
                     break label$100
                    }
                    $6_1 = $6_1 + 4 | 0;
                    $5_1 = $5_1 + $7_1 | 0;
                    if ($9_1 >>> 0 > $5_1 >>> 0) {
                     continue
                    }
                    break label$98;
                   }
                   break;
                  };
                  if ($10_1) {
                   break label$2
                  }
                 }
                 if (($5_1 | 0) < 0) {
                  break label$4
                 }
                }
                $10_1 = $16_1 & 73728;
                label$101 : {
                 if ($10_1) {
                  break label$101
                 }
                 if (($5_1 | 0) >= ($15_1 | 0)) {
                  break label$101
                 }
                 $14_1 = $15_1 - $5_1 | 0;
                 $6_1 = $14_1 >>> 0 < 256;
                 $1($11_1 - -64 | 0, 32, $6_1 ? $14_1 : 256);
                 $12_1 = HEAP32[$0_1 >> 2];
                 $7_1 = $12_1 & 32;
                 label$102 : {
                  if (!$6_1) {
                   $6_1 = !$7_1;
                   $7_1 = $14_1;
                   while (1) {
                    if ($6_1 & 1) {
                     $10($11_1 - -64 | 0, 256, $0_1);
                     $12_1 = HEAP32[$0_1 >> 2];
                    }
                    $9_1 = $12_1 & 32;
                    $6_1 = !$9_1;
                    $7_1 = $7_1 - 256 | 0;
                    if ($7_1 >>> 0 > 255) {
                     continue
                    }
                    break;
                   };
                   if ($9_1) {
                    break label$101
                   }
                   $14_1 = $14_1 & 255;
                   break label$102;
                  }
                  if ($7_1) {
                   break label$101
                  }
                 }
                 $10($11_1 - -64 | 0, $14_1, $0_1);
                }
                label$106 : {
                 if (!$5_1) {
                  break label$106
                 }
                 $6_1 = 0;
                 while (1) {
                  $7_1 = HEAP32[$8_1 >> 2];
                  if (!$7_1) {
                   break label$106
                  }
                  $7_1 = $11($11_1 + 4 | 0, $7_1);
                  $6_1 = $7_1 + $6_1 | 0;
                  if ($6_1 >>> 0 > $5_1 >>> 0) {
                   break label$106
                  }
                  if (!(HEAPU8[$0_1 | 0] & 32)) {
                   $10($11_1 + 4 | 0, $7_1, $0_1)
                  }
                  $8_1 = $8_1 + 4 | 0;
                  if ($5_1 >>> 0 > $6_1 >>> 0) {
                   continue
                  }
                  break;
                 };
                }
                label$109 : {
                 if (($10_1 | 0) != 8192) {
                  break label$109
                 }
                 if (($5_1 | 0) >= ($15_1 | 0)) {
                  break label$109
                 }
                 $9_1 = $15_1 - $5_1 | 0;
                 $6_1 = $9_1 >>> 0 < 256;
                 $1($11_1 - -64 | 0, 32, $6_1 ? $9_1 : 256);
                 $8_1 = HEAP32[$0_1 >> 2];
                 $7_1 = $8_1 & 32;
                 label$110 : {
                  if (!$6_1) {
                   $6_1 = !$7_1;
                   $7_1 = $9_1;
                   while (1) {
                    if ($6_1 & 1) {
                     $10($11_1 - -64 | 0, 256, $0_1);
                     $8_1 = HEAP32[$0_1 >> 2];
                    }
                    $10_1 = $8_1 & 32;
                    $6_1 = !$10_1;
                    $7_1 = $7_1 - 256 | 0;
                    if ($7_1 >>> 0 > 255) {
                     continue
                    }
                    break;
                   };
                   if ($10_1) {
                    break label$109
                   }
                   $9_1 = $9_1 & 255;
                   break label$110;
                  }
                  if ($7_1) {
                   break label$109
                  }
                 }
                 $10($11_1 - -64 | 0, $9_1, $0_1);
                }
                $5_1 = ($5_1 | 0) < ($15_1 | 0) ? $15_1 : $5_1;
                continue label$3;
               }
               if ($19_1 ? ($9_1 | 0) <= -1 : 0) {
                break label$4
               }
               $18_1 = HEAPF64[$11_1 + 56 >> 3];
               HEAP32[$11_1 + 364 >> 2] = 0;
               wasm2js_scratch_store_f64(+$18_1);
               $5_1 = wasm2js_scratch_load_i32(1) | 0;
               wasm2js_scratch_load_i32(0) | 0;
               label$114 : {
                if (($5_1 | 0) < -1 ? 1 : ($5_1 | 0) <= -1) {
                 $18_1 = -$18_1;
                 $22_1 = 1;
                 $20_1 = 3344;
                 break label$114;
                }
                if ($16_1 & 2048) {
                 $22_1 = 1;
                 $20_1 = 3347;
                 break label$114;
                }
                $22_1 = $16_1 & 1;
                $20_1 = $22_1 ? 3350 : 3345;
               }
               $24_1 = Math_abs($18_1);
               label$117 : {
                if (!($24_1 != infinity & $24_1 == $24_1)) {
                 $8_1 = $22_1 + 3 | 0;
                 label$119 : {
                  if ($16_1 & 8192) {
                   break label$119
                  }
                  if (($8_1 | 0) >= ($15_1 | 0)) {
                   break label$119
                  }
                  $9_1 = $15_1 - $8_1 | 0;
                  $5_1 = $9_1 >>> 0 < 256;
                  $1($11_1 - -64 | 0, 32, $5_1 ? $9_1 : 256);
                  $7_1 = HEAP32[$0_1 >> 2];
                  $6_1 = $7_1 & 32;
                  label$120 : {
                   if (!$5_1) {
                    $5_1 = !$6_1;
                    $6_1 = $9_1;
                    while (1) {
                     if ($5_1 & 1) {
                      $10($11_1 - -64 | 0, 256, $0_1);
                      $7_1 = HEAP32[$0_1 >> 2];
                     }
                     $12_1 = $7_1 & 32;
                     $5_1 = !$12_1;
                     $6_1 = $6_1 - 256 | 0;
                     if ($6_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($12_1) {
                     break label$119
                    }
                    $9_1 = $9_1 & 255;
                    break label$120;
                   }
                   if ($6_1) {
                    break label$119
                   }
                  }
                  $10($11_1 - -64 | 0, $9_1, $0_1);
                 }
                 $5_1 = HEAP32[$0_1 >> 2];
                 if (!($5_1 & 32)) {
                  $10($20_1, $22_1, $0_1);
                  $5_1 = HEAP32[$0_1 >> 2];
                 }
                 if (!($5_1 & 32)) {
                  $5_1 = ($10_1 & 32) >>> 5 | 0;
                  $10($18_1 != $18_1 ? ($5_1 ? 3371 : 3375) : $5_1 ? 3363 : 3367, 3, $0_1);
                 }
                 label$127 : {
                  if (($16_1 & 73728) != 8192) {
                   break label$127
                  }
                  if (($8_1 | 0) >= ($15_1 | 0)) {
                   break label$127
                  }
                  $9_1 = $15_1 - $8_1 | 0;
                  $5_1 = $9_1 >>> 0 < 256;
                  $1($11_1 - -64 | 0, 32, $5_1 ? $9_1 : 256);
                  $7_1 = HEAP32[$0_1 >> 2];
                  $6_1 = $7_1 & 32;
                  label$128 : {
                   if (!$5_1) {
                    $5_1 = !$6_1;
                    $6_1 = $9_1;
                    while (1) {
                     if ($5_1 & 1) {
                      $10($11_1 - -64 | 0, 256, $0_1);
                      $7_1 = HEAP32[$0_1 >> 2];
                     }
                     $10_1 = $7_1 & 32;
                     $5_1 = !$10_1;
                     $6_1 = $6_1 - 256 | 0;
                     if ($6_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($10_1) {
                     break label$127
                    }
                    $9_1 = $9_1 & 255;
                    break label$128;
                   }
                   if ($6_1) {
                    break label$127
                   }
                  }
                  $10($11_1 - -64 | 0, $9_1, $0_1);
                 }
                 $5_1 = ($8_1 | 0) < ($15_1 | 0) ? $15_1 : $8_1;
                 break label$117;
                }
                $18_1 = $12($18_1, $11_1 + 364 | 0);
                $18_1 = $18_1 + $18_1;
                if ($18_1 != 0.0) {
                 HEAP32[$11_1 + 364 >> 2] = HEAP32[$11_1 + 364 >> 2] - 1
                }
                $25 = $10_1 | 32;
                if (($25 | 0) == 97) {
                 $6_1 = $20_1 + 9 | 0;
                 $5_1 = $20_1;
                 $20_1 = $10_1 & 32;
                 $13_1 = $20_1 ? $6_1 : $5_1;
                 label$134 : {
                  if ($9_1 >>> 0 > 11) {
                   break label$134
                  }
                  if (($9_1 | 0) == 12) {
                   break label$134
                  }
                  $5_1 = $9_1 - 12 | 0;
                  $24_1 = 16.0;
                  while (1) {
                   $24_1 = $24_1 * 16.0;
                   $6_1 = $5_1;
                   $5_1 = $5_1 + 1 | 0;
                   if ($5_1 >>> 0 >= $6_1 >>> 0) {
                    continue
                   }
                   break;
                  };
                  if (HEAPU8[$13_1 | 0] == 45) {
                   $18_1 = -($24_1 + (-$18_1 - $24_1));
                   break label$134;
                  }
                  $18_1 = $18_1 + $24_1 - $24_1;
                 }
                 $7_1 = $27_1;
                 $12_1 = HEAP32[$11_1 + 364 >> 2];
                 $5_1 = $12_1 >> 31;
                 $5_1 = $5_1 ^ $5_1 + $12_1;
                 label$137 : {
                  if ($5_1) {
                   $6_1 = 0;
                   while (1) {
                    $8_1 = ($5_1 >>> 0) / 10 | 0;
                    HEAP8[($6_1 + $11_1 | 0) + 335 | 0] = $5_1 - Math_imul($8_1, 10) | 48;
                    $6_1 = $6_1 - 1 | 0;
                    $7_1 = $5_1 >>> 0 > 9;
                    $5_1 = $8_1;
                    if ($7_1) {
                     continue
                    }
                    break;
                   };
                   $7_1 = ($6_1 + $11_1 | 0) + 336 | 0;
                   if ($6_1) {
                    break label$137
                   }
                  }
                  $7_1 = $7_1 - 1 | 0;
                  HEAP8[$7_1 | 0] = 48;
                 }
                 $14_1 = $22_1 | 2;
                 $19_1 = $7_1 - 2 | 0;
                 HEAP8[$19_1 | 0] = $10_1 + 15;
                 HEAP8[$7_1 - 1 | 0] = ($12_1 | 0) < 0 ? 45 : 43;
                 $8_1 = $16_1 & 8;
                 $6_1 = $11_1 + 336 | 0;
                 while (1) {
                  $5_1 = $6_1;
                  $7_1 = $5_1;
                  $10_1 = $20_1;
                  if (Math_abs($18_1) < 2147483648.0) {
                   $6_1 = ~~$18_1
                  } else {
                   $6_1 = -2147483648
                  }
                  HEAP8[$7_1 | 0] = $10_1 | HEAPU8[$6_1 + 3328 | 0];
                  $18_1 = ($18_1 - +($6_1 | 0)) * 16.0;
                  $6_1 = $5_1 + 1 | 0;
                  label$143 : {
                   if (($6_1 - ($11_1 + 336 | 0) | 0) != 1) {
                    break label$143
                   }
                   label$144 : {
                    if ($8_1) {
                     break label$144
                    }
                    if (($9_1 | 0) > 0) {
                     break label$144
                    }
                    if ($18_1 == 0.0) {
                     break label$143
                    }
                   }
                   HEAP8[$5_1 + 1 | 0] = 46;
                   $6_1 = $5_1 + 2 | 0;
                  }
                  if ($18_1 != 0.0) {
                   continue
                  }
                  break;
                 };
                 $5_1 = -1;
                 $20_1 = $27_1 - $19_1 | 0;
                 $8_1 = $20_1 + $14_1 | 0;
                 if ((2147483645 - $8_1 | 0) < ($9_1 | 0)) {
                  break label$117
                 }
                 $12_1 = $6_1 - ($11_1 + 336 | 0) | 0;
                 $9_1 = $9_1 ? (($6_1 + $36_1 | 0) < ($9_1 | 0) ? $9_1 + 2 | 0 : $12_1) : $12_1;
                 $8_1 = $9_1 + $8_1 | 0;
                 $16_1 = $16_1 & 73728;
                 label$145 : {
                  if ($16_1) {
                   break label$145
                  }
                  if (($8_1 | 0) >= ($15_1 | 0)) {
                   break label$145
                  }
                  $10_1 = $15_1 - $8_1 | 0;
                  $5_1 = $10_1 >>> 0 < 256;
                  $1($11_1 - -64 | 0, 32, $5_1 ? $10_1 : 256);
                  $7_1 = HEAP32[$0_1 >> 2];
                  $6_1 = $7_1 & 32;
                  label$146 : {
                   if (!$5_1) {
                    $5_1 = !$6_1;
                    $6_1 = $10_1;
                    while (1) {
                     if ($5_1 & 1) {
                      $10($11_1 - -64 | 0, 256, $0_1);
                      $7_1 = HEAP32[$0_1 >> 2];
                     }
                     $17_1 = $7_1 & 32;
                     $5_1 = !$17_1;
                     $6_1 = $6_1 - 256 | 0;
                     if ($6_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($17_1) {
                     break label$145
                    }
                    $10_1 = $10_1 & 255;
                    break label$146;
                   }
                   if ($6_1) {
                    break label$145
                   }
                  }
                  $10($11_1 - -64 | 0, $10_1, $0_1);
                 }
                 if (!(HEAPU8[$0_1 | 0] & 32)) {
                  $10($13_1, $14_1, $0_1)
                 }
                 label$151 : {
                  if (($16_1 | 0) != 65536) {
                   break label$151
                  }
                  if (($8_1 | 0) >= ($15_1 | 0)) {
                   break label$151
                  }
                  $14_1 = $15_1 - $8_1 | 0;
                  $5_1 = $14_1 >>> 0 < 256;
                  $1($11_1 - -64 | 0, 48, $5_1 ? $14_1 : 256);
                  $7_1 = HEAP32[$0_1 >> 2];
                  $6_1 = $7_1 & 32;
                  label$152 : {
                   if (!$5_1) {
                    $5_1 = !$6_1;
                    $6_1 = $14_1;
                    while (1) {
                     if ($5_1 & 1) {
                      $10($11_1 - -64 | 0, 256, $0_1);
                      $7_1 = HEAP32[$0_1 >> 2];
                     }
                     $10_1 = $7_1 & 32;
                     $5_1 = !$10_1;
                     $6_1 = $6_1 - 256 | 0;
                     if ($6_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($10_1) {
                     break label$151
                    }
                    $14_1 = $14_1 & 255;
                    break label$152;
                   }
                   if ($6_1) {
                    break label$151
                   }
                  }
                  $10($11_1 - -64 | 0, $14_1, $0_1);
                 }
                 if (!(HEAPU8[$0_1 | 0] & 32)) {
                  $10($11_1 + 336 | 0, $12_1, $0_1)
                 }
                 $9_1 = $9_1 - $12_1 | 0;
                 label$157 : {
                  if (($9_1 | 0) < 1) {
                   break label$157
                  }
                  $6_1 = $9_1 >>> 0 < 256;
                  $1($11_1 - -64 | 0, 48, $6_1 ? $9_1 : 256);
                  $7_1 = HEAP32[$0_1 >> 2];
                  $5_1 = $7_1 & 32;
                  label$158 : {
                   if (!$6_1) {
                    $5_1 = !$5_1;
                    $6_1 = $9_1;
                    while (1) {
                     if ($5_1 & 1) {
                      $10($11_1 - -64 | 0, 256, $0_1);
                      $7_1 = HEAP32[$0_1 >> 2];
                     }
                     $10_1 = $7_1 & 32;
                     $5_1 = !$10_1;
                     $6_1 = $6_1 - 256 | 0;
                     if ($6_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($10_1) {
                     break label$157
                    }
                    $9_1 = $9_1 & 255;
                    break label$158;
                   }
                   if ($5_1) {
                    break label$157
                   }
                  }
                  $10($11_1 - -64 | 0, $9_1, $0_1);
                 }
                 if (!(HEAPU8[$0_1 | 0] & 32)) {
                  $10($19_1, $20_1, $0_1)
                 }
                 label$163 : {
                  if (($16_1 | 0) != 8192) {
                   break label$163
                  }
                  if (($8_1 | 0) >= ($15_1 | 0)) {
                   break label$163
                  }
                  $9_1 = $15_1 - $8_1 | 0;
                  $5_1 = $9_1 >>> 0 < 256;
                  $1($11_1 - -64 | 0, 32, $5_1 ? $9_1 : 256);
                  $7_1 = HEAP32[$0_1 >> 2];
                  $6_1 = $7_1 & 32;
                  label$164 : {
                   if (!$5_1) {
                    $5_1 = !$6_1;
                    $6_1 = $9_1;
                    while (1) {
                     if ($5_1 & 1) {
                      $10($11_1 - -64 | 0, 256, $0_1);
                      $7_1 = HEAP32[$0_1 >> 2];
                     }
                     $10_1 = $7_1 & 32;
                     $5_1 = !$10_1;
                     $6_1 = $6_1 - 256 | 0;
                     if ($6_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($10_1) {
                     break label$163
                    }
                    $9_1 = $9_1 & 255;
                    break label$164;
                   }
                   if ($6_1) {
                    break label$163
                   }
                  }
                  $10($11_1 - -64 | 0, $9_1, $0_1);
                 }
                 $5_1 = ($8_1 | 0) < ($15_1 | 0) ? $15_1 : $8_1;
                 break label$117;
                }
                $5_1 = ($9_1 | 0) < 0;
                label$168 : {
                 if ($18_1 == 0.0) {
                  $8_1 = HEAP32[$11_1 + 364 >> 2];
                  break label$168;
                 }
                 $8_1 = HEAP32[$11_1 + 364 >> 2] - 28 | 0;
                 HEAP32[$11_1 + 364 >> 2] = $8_1;
                 $18_1 = $18_1 * 268435456.0;
                }
                $13_1 = $5_1 ? 6 : $9_1;
                $19_1 = ($8_1 | 0) < 0 ? $11_1 + 368 | 0 : $37_1;
                $7_1 = $19_1;
                while (1) {
                 $6_1 = $7_1;
                 if ($18_1 < 4294967296.0 & $18_1 >= 0.0) {
                  $5_1 = ~~$18_1 >>> 0
                 } else {
                  $5_1 = 0
                 }
                 HEAP32[$6_1 >> 2] = $5_1;
                 $7_1 = $7_1 + 4 | 0;
                 $18_1 = ($18_1 - +($5_1 >>> 0)) * 1.0e9;
                 if ($18_1 != 0.0) {
                  continue
                 }
                 break;
                };
                label$173 : {
                 if (($8_1 | 0) < 1) {
                  $5_1 = $7_1;
                  $6_1 = $19_1;
                  break label$173;
                 }
                 $6_1 = $19_1;
                 while (1) {
                  $9_1 = ($8_1 | 0) < 29 ? $8_1 : 29;
                  $5_1 = $7_1 - 4 | 0;
                  label$176 : {
                   if ($6_1 >>> 0 > $5_1 >>> 0) {
                    break label$176
                   }
                   $8_1 = $9_1;
                   $12_1 = 0;
                   while (1) {
                    $32_1 = $12_1;
                    $14_1 = $5_1;
                    $12_1 = HEAP32[$5_1 >> 2];
                    $5_1 = $8_1 & 31;
                    if (($8_1 & 63) >>> 0 >= 32) {
                     $17_1 = $12_1 << $5_1;
                     $23_1 = 0;
                    } else {
                     $17_1 = (1 << $5_1) - 1 & $12_1 >>> 32 - $5_1;
                     $23_1 = $12_1 << $5_1;
                    }
                    $12_1 = $32_1 + $23_1 | 0;
                    $5_1 = $17_1;
                    $17_1 = $12_1;
                    $12_1 = __wasm_i64_udiv($12_1, $12_1 >>> 0 < $23_1 >>> 0 ? $5_1 + 1 | 0 : $5_1, 1e9);
                    (wasm2js_i32$0 = $14_1, wasm2js_i32$1 = $17_1 - __wasm_i64_mul($12_1, i64toi32_i32$HIGH_BITS, 1e9, 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
                    $5_1 = $14_1 - 4 | 0;
                    if ($6_1 >>> 0 <= $5_1 >>> 0) {
                     continue
                    }
                    break;
                   };
                   if (!$12_1) {
                    break label$176
                   }
                   $6_1 = $6_1 - 4 | 0;
                   HEAP32[$6_1 >> 2] = $12_1;
                  }
                  while (1) {
                   $5_1 = $7_1;
                   if ($6_1 >>> 0 < $5_1 >>> 0) {
                    $7_1 = $5_1 - 4 | 0;
                    if (!HEAP32[$7_1 >> 2]) {
                     continue
                    }
                   }
                   break;
                  };
                  $8_1 = HEAP32[$11_1 + 364 >> 2] - $9_1 | 0;
                  HEAP32[$11_1 + 364 >> 2] = $8_1;
                  $7_1 = $5_1;
                  if (($8_1 | 0) > 0) {
                   continue
                  }
                  break;
                 };
                }
                if (($8_1 | 0) <= -1) {
                 $12_1 = (($13_1 + 25 >>> 0) / 9 | 0) + 1 | 0;
                 while (1) {
                  $9_1 = ($8_1 | 0) < -9 ? 9 : 0 - $8_1 | 0;
                  label$182 : {
                   if ($5_1 >>> 0 <= $6_1 >>> 0) {
                    $6_1 = HEAP32[$6_1 >> 2] ? $6_1 : $6_1 + 4 | 0;
                    break label$182;
                   }
                   $14_1 = 1e9 >>> $9_1 | 0;
                   $17_1 = -1 << $9_1 ^ -1;
                   $8_1 = 0;
                   $7_1 = $6_1;
                   while (1) {
                    $23_1 = $8_1;
                    $8_1 = HEAP32[$7_1 >> 2];
                    HEAP32[$7_1 >> 2] = $23_1 + ($8_1 >>> $9_1 | 0);
                    $8_1 = Math_imul($14_1, $8_1 & $17_1);
                    $7_1 = $7_1 + 4 | 0;
                    if ($7_1 >>> 0 < $5_1 >>> 0) {
                     continue
                    }
                    break;
                   };
                   $6_1 = HEAP32[$6_1 >> 2] ? $6_1 : $6_1 + 4 | 0;
                   if (!$8_1) {
                    break label$182
                   }
                   HEAP32[$5_1 >> 2] = $8_1;
                   $5_1 = $5_1 + 4 | 0;
                  }
                  $8_1 = $9_1 + HEAP32[$11_1 + 364 >> 2] | 0;
                  HEAP32[$11_1 + 364 >> 2] = $8_1;
                  $7_1 = ($25 | 0) == 102 ? $19_1 : $6_1;
                  $5_1 = ($12_1 | 0) < $5_1 - $7_1 >> 2 ? $7_1 + ($12_1 << 2) | 0 : $5_1;
                  if (($8_1 | 0) < 0) {
                   continue
                  }
                  break;
                 };
                }
                $7_1 = 0;
                label$185 : {
                 if ($5_1 >>> 0 <= $6_1 >>> 0) {
                  break label$185
                 }
                 $7_1 = Math_imul($19_1 - $6_1 >> 2, 9);
                 $9_1 = HEAP32[$6_1 >> 2];
                 if ($9_1 >>> 0 < 10) {
                  break label$185
                 }
                 $8_1 = 10;
                 while (1) {
                  $7_1 = $7_1 + 1 | 0;
                  $8_1 = Math_imul($8_1, 10);
                  if ($9_1 >>> 0 >= $8_1 >>> 0) {
                   continue
                  }
                  break;
                 };
                }
                $12_1 = ($25 | 0) == 102 ? 0 : $7_1;
                $25 = ($25 | 0) == 103;
                $14_1 = $25 & ($13_1 | 0) != 0;
                $8_1 = ($13_1 - $12_1 | 0) - $14_1 | 0;
                if (($8_1 | 0) < (Math_imul($5_1 - $19_1 >> 2, 9) - 9 | 0)) {
                 $17_1 = $8_1 + 9216 | 0;
                 $23_1 = ($17_1 | 0) / 9 | 0;
                 $31_1 = $19_1 + ($23_1 << 2) | 0;
                 $9_1 = $31_1 - 4092 | 0;
                 $8_1 = 10;
                 $32_1 = $17_1;
                 $17_1 = Math_imul($23_1, 9);
                 if (($32_1 - $17_1 | 0) <= 7) {
                  $12_1 = ((($13_1 - $14_1 | 0) - $12_1 | 0) - $17_1 | 0) + 9215 | 0;
                  while (1) {
                   $8_1 = Math_imul($8_1, 10);
                   $12_1 = $12_1 + 1 | 0;
                   if (($12_1 | 0) < 7) {
                    continue
                   }
                   break;
                  };
                 }
                 $14_1 = HEAP32[$9_1 >> 2];
                 $17_1 = ($14_1 >>> 0) / ($8_1 >>> 0) | 0;
                 $23_1 = $9_1 + 4 | 0;
                 $12_1 = $14_1 - Math_imul($8_1, $17_1) | 0;
                 label$190 : {
                  if ($12_1 ? 0 : ($23_1 | 0) == ($5_1 | 0)) {
                   break label$190
                  }
                  label$191 : {
                   if (!($17_1 & 1)) {
                    $18_1 = 9007199254740992.0;
                    if ($6_1 >>> 0 >= $9_1 >>> 0) {
                     break label$191
                    }
                    if (($8_1 | 0) != 1e9) {
                     break label$191
                    }
                    if (!(HEAP8[$9_1 - 4 | 0] & 1)) {
                     break label$191
                    }
                   }
                   $18_1 = 9007199254740994.0;
                  }
                  $17_1 = $8_1 >>> 1 | 0;
                  $24_1 = $12_1 >>> 0 < $17_1 >>> 0 ? .5 : ($5_1 | 0) == ($23_1 | 0) ? (($17_1 | 0) == ($12_1 | 0) ? 1.0 : 1.5) : 1.5;
                  label$193 : {
                   if (!$22_1) {
                    break label$193
                   }
                   if (HEAPU8[$20_1 | 0] != 45) {
                    break label$193
                   }
                   $24_1 = -$24_1;
                   $18_1 = -$18_1;
                  }
                  $12_1 = $14_1 - $12_1 | 0;
                  HEAP32[$9_1 >> 2] = $12_1;
                  if ($18_1 + $24_1 == $18_1) {
                   break label$190
                  }
                  $8_1 = $8_1 + $12_1 | 0;
                  HEAP32[$9_1 >> 2] = $8_1;
                  if ($8_1 >>> 0 >= 1e9) {
                   $7_1 = $31_1 - 4096 | 0;
                   while (1) {
                    HEAP32[$7_1 + 4 >> 2] = 0;
                    if ($6_1 >>> 0 > $7_1 >>> 0) {
                     $6_1 = $6_1 - 4 | 0;
                     HEAP32[$6_1 >> 2] = 0;
                    }
                    $8_1 = HEAP32[$7_1 >> 2] + 1 | 0;
                    HEAP32[$7_1 >> 2] = $8_1;
                    $7_1 = $7_1 - 4 | 0;
                    if ($8_1 >>> 0 > 999999999) {
                     continue
                    }
                    break;
                   };
                   $9_1 = $7_1 + 4 | 0;
                  }
                  $7_1 = Math_imul($19_1 - $6_1 >> 2, 9);
                  $12_1 = HEAP32[$6_1 >> 2];
                  if ($12_1 >>> 0 < 10) {
                   break label$190
                  }
                  $8_1 = 10;
                  while (1) {
                   $7_1 = $7_1 + 1 | 0;
                   $8_1 = Math_imul($8_1, 10);
                   if ($12_1 >>> 0 >= $8_1 >>> 0) {
                    continue
                   }
                   break;
                  };
                 }
                 $8_1 = $9_1 + 4 | 0;
                 $5_1 = $5_1 >>> 0 > $8_1 >>> 0 ? $8_1 : $5_1;
                }
                label$198 : {
                 while (1) {
                  $12_1 = $5_1;
                  $9_1 = 0;
                  if ($6_1 >>> 0 >= $5_1 >>> 0) {
                   break label$198
                  }
                  $5_1 = $12_1 - 4 | 0;
                  if (!HEAP32[$5_1 >> 2]) {
                   continue
                  }
                  break;
                 };
                 $9_1 = 1;
                }
                label$200 : {
                 if (!$25) {
                  $14_1 = $16_1 & 8;
                  break label$200;
                 }
                 $5_1 = $13_1 ? $13_1 : 1;
                 $8_1 = ($5_1 | 0) > ($7_1 | 0) & ($7_1 | 0) > -5;
                 $13_1 = ($8_1 ? $7_1 ^ -1 : -1) + $5_1 | 0;
                 $10_1 = ($8_1 ? -1 : -2) + $10_1 | 0;
                 $14_1 = $16_1 & 8;
                 if ($14_1) {
                  break label$200
                 }
                 $5_1 = 9;
                 label$202 : {
                  if (!$9_1) {
                   break label$202
                  }
                  $14_1 = HEAP32[$12_1 - 4 >> 2];
                  if (!$14_1) {
                   break label$202
                  }
                  $5_1 = 0;
                  if (($14_1 >>> 0) % 10 | 0) {
                   break label$202
                  }
                  $8_1 = 10;
                  while (1) {
                   $5_1 = $5_1 + 1 | 0;
                   $8_1 = Math_imul($8_1, 10);
                   if (!(($14_1 >>> 0) % ($8_1 >>> 0) | 0)) {
                    continue
                   }
                   break;
                  };
                 }
                 $8_1 = Math_imul($12_1 - $19_1 >> 2, 9) - 9 | 0;
                 if (($10_1 | 32) == 102) {
                  $14_1 = 0;
                  $5_1 = $8_1 - $5_1 | 0;
                  $5_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
                  $13_1 = ($5_1 | 0) > ($13_1 | 0) ? $13_1 : $5_1;
                  break label$200;
                 }
                 $14_1 = 0;
                 $5_1 = ($7_1 + $8_1 | 0) - $5_1 | 0;
                 $5_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
                 $13_1 = ($5_1 | 0) > ($13_1 | 0) ? $13_1 : $5_1;
                }
                $5_1 = -1;
                $23_1 = $13_1 | $14_1;
                if ((($23_1 ? 2147483645 : 2147483646) | 0) < ($13_1 | 0)) {
                 break label$117
                }
                $25 = ((($23_1 | 0) != 0) + $13_1 | 0) + 1 | 0;
                $31_1 = ($10_1 | 32) != 102;
                label$205 : {
                 if (!$31_1) {
                  if ((2147483647 - $25 | 0) < ($7_1 | 0)) {
                   break label$117
                  }
                  $7_1 = ($7_1 | 0) > 0 ? $7_1 : 0;
                  break label$205;
                 }
                 $8_1 = $27_1;
                 $5_1 = $7_1 >> 31;
                 $5_1 = $5_1 + $7_1 ^ $5_1;
                 if ($5_1) {
                  while (1) {
                   $8_1 = $8_1 - 1 | 0;
                   $17_1 = ($5_1 >>> 0) / 10 | 0;
                   HEAP8[$8_1 | 0] = $5_1 - Math_imul($17_1, 10) | 48;
                   $29_1 = $5_1 >>> 0 > 9;
                   $5_1 = $17_1;
                   if ($29_1) {
                    continue
                   }
                   break;
                  }
                 }
                 if (($27_1 - $8_1 | 0) <= 1) {
                  $5_1 = $8_1 - 1 | 0;
                  while (1) {
                   HEAP8[$5_1 | 0] = 48;
                   $8_1 = $27_1 - $5_1 | 0;
                   $17_1 = $5_1 - 1 | 0;
                   $5_1 = $17_1;
                   if (($8_1 | 0) < 2) {
                    continue
                   }
                   break;
                  };
                  $8_1 = $17_1 + 1 | 0;
                 }
                 $29_1 = $8_1 - 2 | 0;
                 HEAP8[$29_1 | 0] = $10_1;
                 $5_1 = -1;
                 HEAP8[$8_1 - 1 | 0] = ($7_1 | 0) < 0 ? 45 : 43;
                 $7_1 = $27_1 - $29_1 | 0;
                 if (($7_1 | 0) > (2147483647 - $25 | 0)) {
                  break label$117
                 }
                }
                $8_1 = $7_1 + $25 | 0;
                if (($8_1 | 0) > ($22_1 ^ 2147483647)) {
                 break label$117
                }
                $17_1 = $8_1 + $22_1 | 0;
                $16_1 = $16_1 & 73728;
                label$211 : {
                 if ($16_1) {
                  break label$211
                 }
                 if (($15_1 | 0) <= ($17_1 | 0)) {
                  break label$211
                 }
                 $10_1 = $15_1 - $17_1 | 0;
                 $5_1 = $10_1 >>> 0 < 256;
                 $1($11_1 - -64 | 0, 32, $5_1 ? $10_1 : 256);
                 $8_1 = HEAP32[$0_1 >> 2];
                 $7_1 = $8_1 & 32;
                 label$212 : {
                  if (!$5_1) {
                   $5_1 = !$7_1;
                   $7_1 = $10_1;
                   while (1) {
                    if ($5_1 & 1) {
                     $10($11_1 - -64 | 0, 256, $0_1);
                     $8_1 = HEAP32[$0_1 >> 2];
                    }
                    $25 = $8_1 & 32;
                    $5_1 = !$25;
                    $7_1 = $7_1 - 256 | 0;
                    if ($7_1 >>> 0 > 255) {
                     continue
                    }
                    break;
                   };
                   if ($25) {
                    break label$211
                   }
                   $10_1 = $10_1 & 255;
                   break label$212;
                  }
                  if ($7_1) {
                   break label$211
                  }
                 }
                 $10($11_1 - -64 | 0, $10_1, $0_1);
                }
                if (!(HEAPU8[$0_1 | 0] & 32)) {
                 $10($20_1, $22_1, $0_1)
                }
                label$217 : {
                 if (($16_1 | 0) != 65536) {
                  break label$217
                 }
                 if (($15_1 | 0) <= ($17_1 | 0)) {
                  break label$217
                 }
                 $10_1 = $15_1 - $17_1 | 0;
                 $5_1 = $10_1 >>> 0 < 256;
                 $1($11_1 - -64 | 0, 48, $5_1 ? $10_1 : 256);
                 $8_1 = HEAP32[$0_1 >> 2];
                 $7_1 = $8_1 & 32;
                 label$218 : {
                  if (!$5_1) {
                   $5_1 = !$7_1;
                   $7_1 = $10_1;
                   while (1) {
                    if ($5_1 & 1) {
                     $10($11_1 - -64 | 0, 256, $0_1);
                     $8_1 = HEAP32[$0_1 >> 2];
                    }
                    $20_1 = $8_1 & 32;
                    $5_1 = !$20_1;
                    $7_1 = $7_1 - 256 | 0;
                    if ($7_1 >>> 0 > 255) {
                     continue
                    }
                    break;
                   };
                   if ($20_1) {
                    break label$217
                   }
                   $10_1 = $10_1 & 255;
                   break label$218;
                  }
                  if ($7_1) {
                   break label$217
                  }
                 }
                 $10($11_1 - -64 | 0, $10_1, $0_1);
                }
                label$222 : {
                 if (!$31_1) {
                  $7_1 = $6_1 >>> 0 > $19_1 >>> 0 ? $19_1 : $6_1;
                  $9_1 = $7_1;
                  while (1) {
                   $5_1 = HEAP32[$9_1 >> 2];
                   label$225 : {
                    if (!$5_1) {
                     $6_1 = 0;
                     break label$225;
                    }
                    $6_1 = 0;
                    while (1) {
                     $8_1 = ($5_1 >>> 0) / 10 | 0;
                     HEAP8[$6_1 + $34_1 | 0] = $5_1 - Math_imul($8_1, 10) | 48;
                     $6_1 = $6_1 - 1 | 0;
                     $10_1 = $5_1 >>> 0 > 9;
                     $5_1 = $8_1;
                     if ($10_1) {
                      continue
                     }
                     break;
                    };
                   }
                   $5_1 = $6_1 + $30_1 | 0;
                   label$228 : {
                    if (($7_1 | 0) != ($9_1 | 0)) {
                     if ($11_1 + 336 >>> 0 >= $5_1 >>> 0) {
                      break label$228
                     }
                     $1($11_1 + 336 | 0, 48, $6_1 + 9 | 0);
                     $5_1 = $11_1 + 336 | 0;
                     break label$228;
                    }
                    if ($6_1) {
                     break label$228
                    }
                    $5_1 = $5_1 - 1 | 0;
                    HEAP8[$5_1 | 0] = 48;
                   }
                   if (!(HEAPU8[$0_1 | 0] & 32)) {
                    $10($5_1, $30_1 - $5_1 | 0, $0_1)
                   }
                   $9_1 = $9_1 + 4 | 0;
                   if ($19_1 >>> 0 >= $9_1 >>> 0) {
                    continue
                   }
                   break;
                  };
                  label$231 : {
                   if (!$23_1) {
                    break label$231
                   }
                   if (HEAPU8[$0_1 | 0] & 32) {
                    break label$231
                   }
                   $10(3379, 1, $0_1);
                  }
                  label$232 : {
                   if (($13_1 | 0) < 1) {
                    $5_1 = $13_1;
                    break label$232;
                   }
                   if ($9_1 >>> 0 >= $12_1 >>> 0) {
                    $5_1 = $13_1;
                    break label$232;
                   }
                   while (1) {
                    $5_1 = $30_1;
                    $6_1 = HEAP32[$9_1 >> 2];
                    label$236 : {
                     if ($6_1) {
                      while (1) {
                       $5_1 = $5_1 - 1 | 0;
                       $8_1 = ($6_1 >>> 0) / 10 | 0;
                       HEAP8[$5_1 | 0] = $6_1 - Math_imul($8_1, 10) | 48;
                       $7_1 = $6_1 >>> 0 > 9;
                       $6_1 = $8_1;
                       if ($7_1) {
                        continue
                       }
                       break;
                      };
                      if ($11_1 + 336 >>> 0 >= $5_1 >>> 0) {
                       break label$236
                      }
                     }
                     $1($11_1 + 336 | 0, 48, $5_1 + $33_1 | 0);
                     while (1) {
                      $5_1 = $5_1 - 1 | 0;
                      if ($5_1 >>> 0 > $11_1 + 336 >>> 0) {
                       continue
                      }
                      break;
                     };
                    }
                    if (!(HEAPU8[$0_1 | 0] & 32)) {
                     $10($5_1, ($13_1 | 0) < 9 ? $13_1 : 9, $0_1)
                    }
                    $5_1 = $13_1 - 9 | 0;
                    if (($13_1 | 0) < 10) {
                     break label$232
                    }
                    $13_1 = $5_1;
                    $9_1 = $9_1 + 4 | 0;
                    if ($12_1 >>> 0 > $9_1 >>> 0) {
                     continue
                    }
                    break;
                   };
                  }
                  if (($5_1 | 0) < 1) {
                   break label$222
                  }
                  $7_1 = $5_1 >>> 0 < 256;
                  $1($11_1 - -64 | 0, 48, $7_1 ? $5_1 : 256);
                  $8_1 = HEAP32[$0_1 >> 2];
                  $6_1 = $8_1 & 32;
                  label$241 : {
                   if (!$7_1) {
                    $6_1 = !$6_1;
                    $7_1 = $5_1;
                    while (1) {
                     if ($6_1 & 1) {
                      $10($11_1 - -64 | 0, 256, $0_1);
                      $8_1 = HEAP32[$0_1 >> 2];
                     }
                     $10_1 = $8_1 & 32;
                     $6_1 = !$10_1;
                     $7_1 = $7_1 - 256 | 0;
                     if ($7_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($10_1) {
                     break label$222
                    }
                    $5_1 = $5_1 & 255;
                    break label$241;
                   }
                   if ($6_1) {
                    break label$222
                   }
                  }
                  $10($11_1 - -64 | 0, $5_1, $0_1);
                  break label$222;
                 }
                 label$245 : {
                  if (($13_1 | 0) < 0) {
                   break label$245
                  }
                  $10_1 = $9_1 ? $12_1 : $6_1 + 4 | 0;
                  $9_1 = $6_1;
                  while (1) {
                   $8_1 = $30_1;
                   $5_1 = HEAP32[$9_1 >> 2];
                   label$247 : {
                    if ($5_1) {
                     $7_1 = 0;
                     while (1) {
                      $8_1 = ($5_1 >>> 0) / 10 | 0;
                      HEAP8[($7_1 + $11_1 | 0) + 344 | 0] = $5_1 - Math_imul($8_1, 10) | 48;
                      $7_1 = $7_1 - 1 | 0;
                      $12_1 = $5_1 >>> 0 > 9;
                      $5_1 = $8_1;
                      if ($12_1) {
                       continue
                      }
                      break;
                     };
                     $8_1 = ($7_1 + $11_1 | 0) + 345 | 0;
                     if ($7_1) {
                      break label$247
                     }
                    }
                    $8_1 = $8_1 - 1 | 0;
                    HEAP8[$8_1 | 0] = 48;
                   }
                   label$250 : {
                    if (($6_1 | 0) != ($9_1 | 0)) {
                     if ($11_1 + 336 >>> 0 >= $8_1 >>> 0) {
                      break label$250
                     }
                     $1($11_1 + 336 | 0, 48, $8_1 + $33_1 | 0);
                     while (1) {
                      $8_1 = $8_1 - 1 | 0;
                      if ($8_1 >>> 0 > $11_1 + 336 >>> 0) {
                       continue
                      }
                      break;
                     };
                     break label$250;
                    }
                    if (!(HEAPU8[$0_1 | 0] & 32)) {
                     $10($8_1, 1, $0_1)
                    }
                    $8_1 = $8_1 + 1 | 0;
                    if (($13_1 | 0) < 1 ? !$14_1 : 0) {
                     break label$250
                    }
                    if (HEAPU8[$0_1 | 0] & 32) {
                     break label$250
                    }
                    $10(3379, 1, $0_1);
                   }
                   $5_1 = $30_1 - $8_1 | 0;
                   if (!(HEAPU8[$0_1 | 0] & 32)) {
                    $10($8_1, ($5_1 | 0) < ($13_1 | 0) ? $5_1 : $13_1, $0_1)
                   }
                   $9_1 = $9_1 + 4 | 0;
                   $13_1 = $13_1 - $5_1 | 0;
                   if (($13_1 | 0) > -1 ? $10_1 >>> 0 > $9_1 >>> 0 : 0) {
                    continue
                   }
                   break;
                  };
                  if (($13_1 | 0) < 1) {
                   break label$245
                  }
                  $6_1 = $13_1 >>> 0 < 256;
                  $1($11_1 - -64 | 0, 48, $6_1 ? $13_1 : 256);
                  $7_1 = HEAP32[$0_1 >> 2];
                  $5_1 = $7_1 & 32;
                  label$255 : {
                   if (!$6_1) {
                    $5_1 = !$5_1;
                    $6_1 = $13_1;
                    while (1) {
                     if ($5_1 & 1) {
                      $10($11_1 - -64 | 0, 256, $0_1);
                      $7_1 = HEAP32[$0_1 >> 2];
                     }
                     $8_1 = $7_1 & 32;
                     $5_1 = !$8_1;
                     $6_1 = $6_1 - 256 | 0;
                     if ($6_1 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($8_1) {
                     break label$245
                    }
                    $13_1 = $13_1 & 255;
                    break label$255;
                   }
                   if ($5_1) {
                    break label$245
                   }
                  }
                  $10($11_1 - -64 | 0, $13_1, $0_1);
                 }
                 if (HEAPU8[$0_1 | 0] & 32) {
                  break label$222
                 }
                 $10($29_1, $27_1 - $29_1 | 0, $0_1);
                }
                label$259 : {
                 if (($16_1 | 0) != 8192) {
                  break label$259
                 }
                 if (($15_1 | 0) <= ($17_1 | 0)) {
                  break label$259
                 }
                 $12_1 = $15_1 - $17_1 | 0;
                 $5_1 = $12_1 >>> 0 < 256;
                 $1($11_1 - -64 | 0, 32, $5_1 ? $12_1 : 256);
                 $7_1 = HEAP32[$0_1 >> 2];
                 $6_1 = $7_1 & 32;
                 label$260 : {
                  if (!$5_1) {
                   $5_1 = !$6_1;
                   $6_1 = $12_1;
                   while (1) {
                    if ($5_1 & 1) {
                     $10($11_1 - -64 | 0, 256, $0_1);
                     $7_1 = HEAP32[$0_1 >> 2];
                    }
                    $8_1 = $7_1 & 32;
                    $5_1 = !$8_1;
                    $6_1 = $6_1 - 256 | 0;
                    if ($6_1 >>> 0 > 255) {
                     continue
                    }
                    break;
                   };
                   if ($8_1) {
                    break label$259
                   }
                   $12_1 = $12_1 & 255;
                   break label$260;
                  }
                  if ($6_1) {
                   break label$259
                  }
                 }
                 $10($11_1 - -64 | 0, $12_1, $0_1);
                }
                $5_1 = ($15_1 | 0) > ($17_1 | 0) ? $15_1 : $17_1;
               }
               if (($5_1 | 0) >= 0) {
                continue label$3
               }
               break label$4;
              }
              $13_1 = 0;
              $14_1 = 2694;
             }
             $5_1 = $26_1;
             break label$5;
            }
            $16_1 = $7_1;
            $9_1 = $6_1;
            if (!HEAPU8[$5_1 | 0]) {
             break label$5
            }
            break label$4;
           }
           $5_1 = HEAPU8[$1_1 + 1 | 0];
           $1_1 = $1_1 + 1 | 0;
           continue;
          }
         }
         if ($0_1) {
          break label$1
         }
         if (!$28_1) {
          $21_1 = 0;
          break label$1;
         }
         $1_1 = HEAP32[$4_1 + 4 >> 2];
         $0_1 = 1;
         label$265 : {
          if (!$1_1) {
           break label$265
          }
          $15($3_1 + 8 | 0, $1_1, $2_1);
          $1_1 = HEAP32[$4_1 + 8 >> 2];
          $0_1 = 2;
          if (!$1_1) {
           break label$265
          }
          $15($3_1 + 16 | 0, $1_1, $2_1);
          $1_1 = HEAP32[$4_1 + 12 >> 2];
          $0_1 = 3;
          if (!$1_1) {
           break label$265
          }
          $15($3_1 + 24 | 0, $1_1, $2_1);
          $1_1 = HEAP32[$4_1 + 16 >> 2];
          $0_1 = 4;
          if (!$1_1) {
           break label$265
          }
          $15($3_1 + 32 | 0, $1_1, $2_1);
          $1_1 = HEAP32[$4_1 + 20 >> 2];
          $0_1 = 5;
          if (!$1_1) {
           break label$265
          }
          $15($3_1 + 40 | 0, $1_1, $2_1);
          $1_1 = HEAP32[$4_1 + 24 >> 2];
          $0_1 = 6;
          if (!$1_1) {
           break label$265
          }
          $15($3_1 + 48 | 0, $1_1, $2_1);
          $1_1 = HEAP32[$4_1 + 28 >> 2];
          $0_1 = 7;
          if (!$1_1) {
           break label$265
          }
          $15($3_1 + 56 | 0, $1_1, $2_1);
          $1_1 = HEAP32[$4_1 + 32 >> 2];
          $0_1 = 8;
          if (!$1_1) {
           break label$265
          }
          $15($3_1 - -64 | 0, $1_1, $2_1);
          $0_1 = HEAP32[$4_1 + 36 >> 2];
          if ($0_1) {
           break label$6
          }
          $0_1 = 9;
         }
         $5_1 = $0_1 - 1 | 0;
         $1_1 = ($0_1 << 2) + $4_1 | 0;
         while (1) {
          if (HEAP32[$1_1 >> 2]) {
           break label$7
          }
          $1_1 = $1_1 + 4 | 0;
          $21_1 = 1;
          $5_1 = $5_1 + 1 | 0;
          if ($5_1 >>> 0 <= 8) {
           continue
          }
          break;
         };
         break label$1;
        }
        HEAP32[4962] = 28;
        break label$2;
       }
       $15($3_1 + 72 | 0, $0_1, $2_1);
       $21_1 = 1;
       break label$1;
      }
      $20_1 = $5_1 - $8_1 | 0;
      $17_1 = ($9_1 | 0) < ($20_1 | 0) ? $20_1 : $9_1;
      if (($17_1 | 0) > (2147483647 - $13_1 | 0)) {
       break label$4
      }
      $19_1 = $13_1 + $17_1 | 0;
      $5_1 = ($15_1 | 0) < ($19_1 | 0) ? $19_1 : $15_1;
      if (($22_1 | 0) < ($5_1 | 0)) {
       break label$4
      }
      $16_1 = $16_1 & 73728;
      label$267 : {
       if ($16_1) {
        break label$267
       }
       if (($15_1 | 0) <= ($19_1 | 0)) {
        break label$267
       }
       $10_1 = $5_1 - $19_1 | 0;
       $6_1 = $10_1 >>> 0 < 256;
       $1($11_1 - -64 | 0, 32, $6_1 ? $10_1 : 256);
       $12_1 = HEAP32[$0_1 >> 2];
       $7_1 = $12_1 & 32;
       label$268 : {
        if (!$6_1) {
         $6_1 = !$7_1;
         $7_1 = $10_1;
         while (1) {
          if ($6_1 & 1) {
           $10($11_1 - -64 | 0, 256, $0_1);
           $12_1 = HEAP32[$0_1 >> 2];
          }
          $22_1 = $12_1 & 32;
          $6_1 = !$22_1;
          $7_1 = $7_1 - 256 | 0;
          if ($7_1 >>> 0 > 255) {
           continue
          }
          break;
         };
         if ($22_1) {
          break label$267
         }
         $10_1 = $10_1 & 255;
         break label$268;
        }
        if ($7_1) {
         break label$267
        }
       }
       $10($11_1 - -64 | 0, $10_1, $0_1);
      }
      if (!(HEAPU8[$0_1 | 0] & 32)) {
       $10($14_1, $13_1, $0_1)
      }
      label$273 : {
       if (($16_1 | 0) != 65536) {
        break label$273
       }
       if (($15_1 | 0) <= ($19_1 | 0)) {
        break label$273
       }
       $13_1 = $5_1 - $19_1 | 0;
       $6_1 = $13_1 >>> 0 < 256;
       $1($11_1 - -64 | 0, 48, $6_1 ? $13_1 : 256);
       $12_1 = HEAP32[$0_1 >> 2];
       $7_1 = $12_1 & 32;
       label$274 : {
        if (!$6_1) {
         $6_1 = !$7_1;
         $7_1 = $13_1;
         while (1) {
          if ($6_1 & 1) {
           $10($11_1 - -64 | 0, 256, $0_1);
           $12_1 = HEAP32[$0_1 >> 2];
          }
          $10_1 = $12_1 & 32;
          $6_1 = !$10_1;
          $7_1 = $7_1 - 256 | 0;
          if ($7_1 >>> 0 > 255) {
           continue
          }
          break;
         };
         if ($10_1) {
          break label$273
         }
         $13_1 = $13_1 & 255;
         break label$274;
        }
        if ($7_1) {
         break label$273
        }
       }
       $10($11_1 - -64 | 0, $13_1, $0_1);
      }
      label$278 : {
       if (($9_1 | 0) <= ($20_1 | 0)) {
        break label$278
       }
       $10_1 = $17_1 - $20_1 | 0;
       $6_1 = $10_1 >>> 0 < 256;
       $1($11_1 - -64 | 0, 48, $6_1 ? $10_1 : 256);
       $12_1 = HEAP32[$0_1 >> 2];
       $7_1 = $12_1 & 32;
       label$279 : {
        if (!$6_1) {
         $6_1 = !$7_1;
         $7_1 = $10_1;
         while (1) {
          if ($6_1 & 1) {
           $10($11_1 - -64 | 0, 256, $0_1);
           $12_1 = HEAP32[$0_1 >> 2];
          }
          $9_1 = $12_1 & 32;
          $6_1 = !$9_1;
          $7_1 = $7_1 - 256 | 0;
          if ($7_1 >>> 0 > 255) {
           continue
          }
          break;
         };
         if ($9_1) {
          break label$278
         }
         $10_1 = $10_1 & 255;
         break label$279;
        }
        if ($7_1) {
         break label$278
        }
       }
       $10($11_1 - -64 | 0, $10_1, $0_1);
      }
      if (!(HEAPU8[$0_1 | 0] & 32)) {
       $10($8_1, $20_1, $0_1)
      }
      if (($16_1 | 0) != 8192) {
       continue
      }
      if (($15_1 | 0) <= ($19_1 | 0)) {
       continue
      }
      $15_1 = $5_1 - $19_1 | 0;
      $6_1 = $15_1 >>> 0 < 256;
      $1($11_1 - -64 | 0, 32, $6_1 ? $15_1 : 256);
      $8_1 = HEAP32[$0_1 >> 2];
      $7_1 = $8_1 & 32;
      label$284 : {
       if (!$6_1) {
        $6_1 = !$7_1;
        $7_1 = $15_1;
        while (1) {
         if ($6_1 & 1) {
          $10($11_1 - -64 | 0, 256, $0_1);
          $8_1 = HEAP32[$0_1 >> 2];
         }
         $10_1 = $8_1 & 32;
         $6_1 = !$10_1;
         $7_1 = $7_1 - 256 | 0;
         if ($7_1 >>> 0 > 255) {
          continue
         }
         break;
        };
        if ($10_1) {
         continue
        }
        $15_1 = $15_1 & 255;
        break label$284;
       }
       if ($7_1) {
        continue
       }
      }
      $10($11_1 - -64 | 0, $15_1, $0_1);
      continue;
     }
     break;
    };
    HEAP32[4962] = 61;
   }
   $21_1 = -1;
  }
  global$0 = $11_1 + 880 | 0;
  return $21_1;
 }
 
 function $15($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $1_1 = $1_1 - 9 | 0;
     if ($1_1 >>> 0 <= 17) {
      label$5 : {
       switch ($1_1 - 1 | 0) {
       case 5:
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        $1_1 = HEAP16[$1_1 >> 1];
        HEAP32[$0_1 >> 2] = $1_1;
        HEAP32[$0_1 + 4 >> 2] = $1_1 >> 31;
        return;
       case 6:
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        HEAP32[$0_1 >> 2] = HEAPU16[$1_1 >> 1];
        HEAP32[$0_1 + 4 >> 2] = 0;
        return;
       case 7:
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        $1_1 = HEAP8[$1_1 | 0];
        HEAP32[$0_1 >> 2] = $1_1;
        HEAP32[$0_1 + 4 >> 2] = $1_1 >> 31;
        return;
       case 8:
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        HEAP32[$0_1 >> 2] = HEAPU8[$1_1 | 0];
        HEAP32[$0_1 + 4 >> 2] = 0;
        return;
       case 16:
        $0_1 = 3180;
        while (1) {
         $0_1 = $0_1 + 4 | 0;
         $2_1 = HEAP32[$0_1 >> 2];
         if (!(($2_1 ^ -1) & $2_1 - 16843009 & -2139062144)) {
          continue
         }
         break;
        };
        $1_1 = $0_1 - 3184 | 0;
        label$11 : {
         if (!($2_1 & 255)) {
          break label$11
         }
         while (1) {
          $2_1 = HEAPU8[$0_1 + 1 | 0];
          $1_1 = $0_1 + 1 | 0;
          $0_1 = $1_1;
          if ($2_1) {
           continue
          }
          break;
         };
         $1_1 = $1_1 - 3184 | 0;
        }
        $0_1 = $1_1;
        $2_1 = 0;
        $5_1 = 3184;
        $1_1 = HEAP32[4938];
        label$19 : {
         if (!$1_1) {
          $1_1 = 0;
          if ($9(19736)) {
           break label$19
          }
          $1_1 = HEAP32[4938];
         }
         $4_1 = HEAP32[4939];
         if ($1_1 - $4_1 >>> 0 < $0_1 >>> 0) {
          $1_1 = FUNCTION_TABLE[HEAP32[4942]](19736, 3184, $0_1) | 0;
          break label$19;
         }
         $3_1 = $0_1;
         label$23 : {
          if (HEAP32[4950] < 0) {
           break label$23
          }
          $6_1 = $0_1 + 3184 | 0;
          $1_1 = 0;
          while (1) {
           $3_1 = $0_1;
           if (!($0_1 + $1_1 | 0)) {
            break label$23
           }
           $7_1 = $1_1 + $6_1 | 0;
           $3_1 = $1_1 - 1 | 0;
           $1_1 = $3_1;
           if (HEAPU8[$7_1 - 1 | 0] != 10) {
            continue
           }
           break;
          };
          $2_1 = ($0_1 + $3_1 | 0) + 1 | 0;
          $1_1 = FUNCTION_TABLE[HEAP32[4942]](19736, 3184, $2_1) | 0;
          if ($1_1 >>> 0 < $2_1 >>> 0) {
           break label$19
          }
          $5_1 = ($3_1 + $6_1 | 0) + 1 | 0;
          $4_1 = HEAP32[4939];
          $3_1 = $3_1 ^ -1;
         }
         $2($4_1, $5_1, $3_1);
         HEAP32[4939] = $3_1 + HEAP32[4939];
         $1_1 = $2_1 + $3_1 | 0;
        }
        label$18 : {
         if (($0_1 | 0) == ($1_1 | 0)) {
          break label$18
         }
        }
        abort();
       case 2:
       case 9:
       case 11:
       case 12:
       case 15:
        break label$1;
       case 1:
       case 4:
       case 10:
       case 14:
        break label$2;
       case 0:
       case 3:
       case 13:
        break label$3;
       default:
        break label$5;
       };
      }
      $1_1 = HEAP32[$2_1 >> 2];
      HEAP32[$2_1 >> 2] = $1_1 + 4;
      HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
     }
     return;
    }
    $1_1 = HEAP32[$2_1 >> 2];
    HEAP32[$2_1 >> 2] = $1_1 + 4;
    $1_1 = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 >> 2] = $1_1;
    HEAP32[$0_1 + 4 >> 2] = $1_1 >> 31;
    return;
   }
   $1_1 = HEAP32[$2_1 >> 2];
   HEAP32[$2_1 >> 2] = $1_1 + 4;
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = 0;
   return;
  }
  $1_1 = HEAP32[$2_1 >> 2] + 7 & -8;
  HEAP32[$2_1 >> 2] = $1_1 + 8;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $16($0_1) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  if (!HEAP32[$1_1 + 12 >> 2]) {
   HEAP32[$1_1 + 12 >> 2] = 1
  }
  while (1) {
   label$3 : {
    $0_1 = $3(HEAP32[$1_1 + 12 >> 2]);
    HEAP32[$1_1 + 8 >> 2] = $0_1;
    if ($0_1) {
     break label$3
    }
    $0_1 = global$0 - 16 | 0;
    HEAP32[$0_1 + 12 >> 2] = 20384;
    HEAP32[$0_1 + 8 >> 2] = 2;
    HEAP32[$1_1 + 4 >> 2] = HEAP32[HEAP32[$0_1 + 12 >> 2] >> 2];
    if (!HEAP32[$1_1 + 4 >> 2]) {
     break label$3
    }
    FUNCTION_TABLE[HEAP32[$1_1 + 4 >> 2]]();
    continue;
   }
   break;
  };
  global$0 = $1_1 + 16 | 0;
  return HEAP32[$1_1 + 8 >> 2];
 }
 
 function $17($0_1) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  $4(HEAP32[$1_1 + 12 >> 2]);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $18($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $3_1 = HEAPU8[$1_1 | 0];
  $2_1 = HEAPU8[$0_1 | 0];
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   if (($3_1 | 0) != ($2_1 | 0)) {
    break label$1
   }
   $0_1 = $0_1 + 1 | 0;
   $1_1 = $1_1 + 1 | 0;
   while (1) {
    $3_1 = HEAPU8[$1_1 | 0];
    $2_1 = HEAPU8[$0_1 | 0];
    if (!$2_1) {
     break label$1
    }
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    if (($3_1 | 0) == ($2_1 | 0)) {
     continue
    }
    break;
   };
  }
  return $2_1 - $3_1 | 0;
 }
 
 function $19() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  HEAP32[$0_1 + 12 >> 2] = 3404;
  HEAP32[$0_1 + 8 >> 2] = 0;
  $13(HEAP32[256], HEAP32[$0_1 + 12 >> 2], HEAP32[$0_1 + 8 >> 2]);
  $1_1 = HEAP32[256];
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  HEAP32[$0_1 + 12 >> 2] = 0;
  $13($1_1, 3381, 0);
  global$0 = $0_1 + 16 | 0;
  abort();
 }
 
 function $20($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0_1;
 }
 
 function $21($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  $2_1 = HEAP32[$1_1 + 12 >> 2];
  HEAP32[$0_1 + 12 >> 2] = $2_1;
  HEAP32[(global$0 - 16 | 0) + 12 >> 2] = HEAP32[$0_1 + 12 >> 2];
  global$0 = $0_1 + 16 | 0;
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $22($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  $0_1 = HEAP32[$1_1 + 12 >> 2];
  $21($0_1);
  $17($0_1);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $23($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  $0_1 = HEAP32[$1_1 + 12 >> 2];
  $21($0_1);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $24($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0_1;
  $0_1 = HEAP32[$1_1 + 12 >> 2];
  $23($0_1);
  $17($0_1);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $26($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 8 >> 2] = $0_1;
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  HEAP8[$3_1 + 3 | 0] = $2_1;
  label$1 : {
   if (!(HEAP8[$3_1 + 3 | 0] & 1)) {
    $1_1 = HEAP32[$3_1 + 4 >> 2];
    $0_1 = global$0 - 16 | 0;
    global$0 = $0_1;
    HEAP32[$0_1 + 4 >> 2] = HEAP32[$3_1 + 8 >> 2];
    HEAP32[$0_1 >> 2] = $1_1;
    $1_1 = HEAP32[HEAP32[$0_1 >> 2] + 4 >> 2];
    HEAP32[$0_1 + 12 >> 2] = HEAP32[HEAP32[$0_1 + 4 >> 2] + 4 >> 2];
    HEAP32[$0_1 + 8 >> 2] = $1_1;
    $1_1 = 1;
    if (HEAP32[$0_1 + 12 >> 2] != HEAP32[$0_1 + 8 >> 2]) {
     $1_1 = !$18(HEAP32[$0_1 + 12 >> 2], HEAP32[$0_1 + 8 >> 2])
    }
    global$0 = $0_1 + 16 | 0;
    HEAP8[$3_1 + 15 | 0] = $1_1 & 1;
    break label$1;
   }
   $2_1 = $3_1;
   if (HEAP32[$3_1 + 8 >> 2] != HEAP32[$3_1 + 4 >> 2]) {
    $0_1 = global$0 - 16 | 0;
    HEAP32[$0_1 + 8 >> 2] = HEAP32[$3_1 + 8 >> 2];
    HEAP32[$0_1 + 12 >> 2] = HEAP32[HEAP32[$0_1 + 8 >> 2] + 4 >> 2];
    $1_1 = HEAP32[$0_1 + 12 >> 2];
    $0_1 = global$0 - 16 | 0;
    HEAP32[$0_1 + 8 >> 2] = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$0_1 + 12 >> 2] = HEAP32[HEAP32[$0_1 + 8 >> 2] + 4 >> 2];
    $0_1 = !$18($1_1, HEAP32[$0_1 + 12 >> 2]);
   } else {
    $0_1 = 1
   }
   HEAP8[$2_1 + 15 | 0] = $0_1;
  }
  global$0 = $3_1 + 16 | 0;
  return HEAP8[$3_1 + 15 | 0] & 1;
 }
 
 function $27($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 72 >> 2] = $0_1;
  HEAP32[$3_1 + 68 >> 2] = $1_1;
  HEAP32[$3_1 + 64 >> 2] = $2_1;
  $1_1 = HEAP32[$3_1 + 72 >> 2];
  label$1 : {
   if ($26($1_1, HEAP32[$3_1 + 68 >> 2], 0) & 1) {
    HEAP8[$3_1 + 79 | 0] = 1;
    break label$1;
   }
   $4_1 = $3_1;
   $2_1 = HEAP32[$3_1 + 68 >> 2];
   label$3 : {
    if ($2_1) {
     $0_1 = global$0 - 96 | 0;
     global$0 = $0_1;
     HEAP32[$0_1 + 92 >> 2] = $2_1;
     HEAP32[$0_1 + 88 >> 2] = 3468;
     HEAP32[$0_1 + 84 >> 2] = 3516;
     HEAP32[$0_1 + 80 >> 2] = 0;
     HEAP32[$0_1 + 76 >> 2] = HEAP32[HEAP32[$0_1 + 92 >> 2] >> 2];
     HEAP32[$0_1 + 72 >> 2] = HEAP32[HEAP32[$0_1 + 76 >> 2] - 8 >> 2];
     HEAP32[$0_1 + 68 >> 2] = HEAP32[$0_1 + 92 >> 2] + HEAP32[$0_1 + 72 >> 2];
     HEAP32[$0_1 + 64 >> 2] = HEAP32[HEAP32[$0_1 + 76 >> 2] - 4 >> 2];
     HEAP32[$0_1 + 60 >> 2] = 0;
     HEAP32[$0_1 >> 2] = HEAP32[$0_1 + 84 >> 2];
     HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 92 >> 2];
     HEAP32[$0_1 + 8 >> 2] = HEAP32[$0_1 + 88 >> 2];
     HEAP32[$0_1 + 12 >> 2] = HEAP32[$0_1 + 80 >> 2];
     HEAP32[$0_1 + 16 >> 2] = 0;
     HEAP32[$0_1 + 20 >> 2] = 0;
     HEAP32[$0_1 + 24 >> 2] = 0;
     HEAP32[$0_1 + 28 >> 2] = 0;
     HEAP32[$0_1 + 32 >> 2] = 0;
     HEAP32[$0_1 + 36 >> 2] = 0;
     HEAP32[$0_1 + 40 >> 2] = 0;
     HEAP32[$0_1 + 44 >> 2] = 0;
     HEAP32[$0_1 + 48 >> 2] = 0;
     HEAP8[$0_1 + 52 | 0] = 0;
     HEAP8[$0_1 + 53 | 0] = 0;
     HEAP8[$0_1 + 54 | 0] = 0;
     label$5 : {
      if ($26(HEAP32[$0_1 + 64 >> 2], HEAP32[$0_1 + 84 >> 2], 0) & 1) {
       HEAP32[$0_1 + 48 >> 2] = 1;
       $2_1 = HEAP32[$0_1 + 64 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $0_1, HEAP32[$0_1 + 68 >> 2], HEAP32[$0_1 + 68 >> 2], 1, 0);
       if (HEAP32[$0_1 + 24 >> 2] == 1) {
        HEAP32[$0_1 + 60 >> 2] = HEAP32[$0_1 + 68 >> 2]
       }
       break label$5;
      }
      $2_1 = HEAP32[$0_1 + 64 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 24 >> 2]]($2_1, $0_1, HEAP32[$0_1 + 68 >> 2], 1, 0);
      $2_1 = HEAP32[$0_1 + 36 >> 2];
      label$8 : {
       if ($2_1 >>> 0 > 1) {
        break label$8
       }
       if (($2_1 | 0) != 1) {
        if (HEAP32[$0_1 + 40 >> 2] != 1) {
         break label$8
        }
        if (HEAP32[$0_1 + 28 >> 2] != 1) {
         break label$8
        }
        if (HEAP32[$0_1 + 32 >> 2] != 1) {
         break label$8
        }
        HEAP32[$0_1 + 60 >> 2] = HEAP32[$0_1 + 20 >> 2];
        break label$8;
       }
       label$10 : {
        if (HEAP32[$0_1 + 24 >> 2] != 1) {
         if (HEAP32[$0_1 + 40 >> 2]) {
          break label$10
         }
         if (HEAP32[$0_1 + 28 >> 2] != 1) {
          break label$10
         }
         if (HEAP32[$0_1 + 32 >> 2] != 1) {
          break label$10
         }
        }
        HEAP32[$0_1 + 60 >> 2] = HEAP32[$0_1 + 16 >> 2];
       }
      }
     }
     global$0 = $0_1 + 96 | 0;
     $0_1 = HEAP32[$0_1 + 60 >> 2];
     break label$3;
    }
    $0_1 = 0;
   }
   HEAP32[$4_1 + 60 >> 2] = $0_1;
   if (!HEAP32[$3_1 + 60 >> 2]) {
    HEAP8[$3_1 + 79 | 0] = 0;
    break label$1;
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 + 60 >> 2];
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$3_1 + 8 >> 2] = $1_1;
   HEAP32[$3_1 + 12 >> 2] = -1;
   HEAP32[$3_1 + 16 >> 2] = 0;
   HEAP32[$3_1 + 20 >> 2] = 0;
   HEAP32[$3_1 + 24 >> 2] = 0;
   HEAP32[$3_1 + 28 >> 2] = 0;
   HEAP32[$3_1 + 32 >> 2] = 0;
   HEAP32[$3_1 + 36 >> 2] = 0;
   HEAP32[$3_1 + 40 >> 2] = 0;
   HEAP32[$3_1 + 44 >> 2] = 0;
   HEAP32[$3_1 + 48 >> 2] = 0;
   HEAP8[$3_1 + 52 | 0] = 0;
   HEAP8[$3_1 + 53 | 0] = 0;
   HEAP8[$3_1 + 54 | 0] = 0;
   HEAP32[$3_1 + 48 >> 2] = 1;
   $0_1 = HEAP32[$3_1 + 60 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1, $3_1, HEAP32[HEAP32[$3_1 + 64 >> 2] >> 2], 1);
   if (HEAP32[$3_1 + 24 >> 2] == 1) {
    HEAP32[HEAP32[$3_1 + 64 >> 2] >> 2] = HEAP32[$3_1 + 16 >> 2];
    HEAP8[$3_1 + 79 | 0] = 1;
    break label$1;
   }
   HEAP8[$3_1 + 79 | 0] = 0;
  }
  global$0 = $3_1 + 80 | 0;
  return HEAP8[$3_1 + 79 | 0] & 1;
 }
 
 function $28($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[$4_1 + 12 >> 2] = $0_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  HEAP32[$4_1 >> 2] = $3_1;
  label$1 : {
   if (!HEAP32[HEAP32[$4_1 + 8 >> 2] + 16 >> 2]) {
    HEAP32[HEAP32[$4_1 + 8 >> 2] + 16 >> 2] = HEAP32[$4_1 + 4 >> 2];
    HEAP32[HEAP32[$4_1 + 8 >> 2] + 24 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[HEAP32[$4_1 + 8 >> 2] + 36 >> 2] = 1;
    break label$1;
   }
   label$3 : {
    if (HEAP32[HEAP32[$4_1 + 8 >> 2] + 16 >> 2] == HEAP32[$4_1 + 4 >> 2]) {
     if (HEAP32[HEAP32[$4_1 + 8 >> 2] + 24 >> 2] == 2) {
      HEAP32[HEAP32[$4_1 + 8 >> 2] + 24 >> 2] = HEAP32[$4_1 >> 2]
     }
     break label$3;
    }
    $0_1 = HEAP32[$4_1 + 8 >> 2];
    HEAP32[$0_1 + 36 >> 2] = HEAP32[$0_1 + 36 >> 2] + 1;
    HEAP32[HEAP32[$4_1 + 8 >> 2] + 24 >> 2] = 2;
    HEAP8[HEAP32[$4_1 + 8 >> 2] + 54 | 0] = 1;
   }
  }
 }
 
 function $29($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $0_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  HEAP32[$4_1 >> 2] = $3_1;
  $0_1 = HEAP32[$4_1 + 12 >> 2];
  if ($26($0_1, HEAP32[HEAP32[$4_1 + 8 >> 2] + 8 >> 2], 0) & 1) {
   $28($0_1, HEAP32[$4_1 + 8 >> 2], HEAP32[$4_1 + 4 >> 2], HEAP32[$4_1 >> 2])
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $30($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $0_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  HEAP32[$4_1 >> 2] = $3_1;
  $0_1 = HEAP32[$4_1 + 12 >> 2];
  label$1 : {
   if ($26($0_1, HEAP32[HEAP32[$4_1 + 8 >> 2] + 8 >> 2], 0) & 1) {
    $28($0_1, HEAP32[$4_1 + 8 >> 2], HEAP32[$4_1 + 4 >> 2], HEAP32[$4_1 >> 2]);
    break label$1;
   }
   $0_1 = HEAP32[$0_1 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1, HEAP32[$4_1 + 8 >> 2], HEAP32[$4_1 + 4 >> 2], HEAP32[$4_1 >> 2]);
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $31($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 28 >> 2] = $0_1;
  HEAP32[$4_1 + 24 >> 2] = $1_1;
  HEAP32[$4_1 + 20 >> 2] = $2_1;
  HEAP32[$4_1 + 16 >> 2] = $3_1;
  $0_1 = HEAP32[$4_1 + 28 >> 2];
  HEAP32[$4_1 + 12 >> 2] = 0;
  if (HEAP32[$4_1 + 20 >> 2]) {
   HEAP32[$4_1 + 12 >> 2] = HEAP32[$0_1 + 4 >> 2] >> 8;
   if (HEAP32[$0_1 + 4 >> 2] & 1) {
    HEAP32[$4_1 + 8 >> 2] = HEAP32[HEAP32[$4_1 + 20 >> 2] >> 2];
    HEAP32[$4_1 + 12 >> 2] = HEAP32[HEAP32[$4_1 + 8 >> 2] + HEAP32[$4_1 + 12 >> 2] >> 2];
   }
  }
  $1_1 = HEAP32[$0_1 >> 2];
  $2_1 = $1_1;
  $3_1 = HEAP32[$4_1 + 24 >> 2];
  $5_1 = HEAP32[$4_1 + 20 >> 2] + HEAP32[$4_1 + 12 >> 2] | 0;
  if (HEAP32[$0_1 + 4 >> 2] & 2) {
   $0_1 = HEAP32[$4_1 + 16 >> 2]
  } else {
   $0_1 = 2
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 28 >> 2]]($2_1, $3_1, $5_1, $0_1);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $32($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 28 >> 2] = $0_1;
  HEAP32[$4_1 + 24 >> 2] = $1_1;
  HEAP32[$4_1 + 20 >> 2] = $2_1;
  HEAP32[$4_1 + 16 >> 2] = $3_1;
  $0_1 = HEAP32[$4_1 + 28 >> 2];
  label$1 : {
   if ($26($0_1, HEAP32[HEAP32[$4_1 + 24 >> 2] + 8 >> 2], 0) & 1) {
    $28($0_1, HEAP32[$4_1 + 24 >> 2], HEAP32[$4_1 + 20 >> 2], HEAP32[$4_1 + 16 >> 2]);
    break label$1;
   }
   HEAP32[$4_1 + 12 >> 2] = ($0_1 + 16 | 0) + (HEAP32[$0_1 + 12 >> 2] << 3);
   HEAP32[$4_1 + 8 >> 2] = $0_1 + 16;
   $31(HEAP32[$4_1 + 8 >> 2], HEAP32[$4_1 + 24 >> 2], HEAP32[$4_1 + 20 >> 2], HEAP32[$4_1 + 16 >> 2]);
   $0_1 = HEAP32[$4_1 + 8 >> 2] + 8 | 0;
   HEAP32[$4_1 + 8 >> 2] = $0_1;
   if ($0_1 >>> 0 < HEAPU32[$4_1 + 12 >> 2]) {
    while (1) {
     label$5 : {
      $31(HEAP32[$4_1 + 8 >> 2], HEAP32[$4_1 + 24 >> 2], HEAP32[$4_1 + 20 >> 2], HEAP32[$4_1 + 16 >> 2]);
      if (HEAP8[HEAP32[$4_1 + 24 >> 2] + 54 | 0] & 1) {
       break label$5
      }
      $0_1 = HEAP32[$4_1 + 8 >> 2] + 8 | 0;
      HEAP32[$4_1 + 8 >> 2] = $0_1;
      if ($0_1 >>> 0 < HEAPU32[$4_1 + 12 >> 2]) {
       continue
      }
     }
     break;
    }
   }
  }
  global$0 = $4_1 + 32 | 0;
 }
 
 function $33($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  HEAP32[$5_1 + 28 >> 2] = $0_1;
  HEAP32[$5_1 + 24 >> 2] = $1_1;
  HEAP32[$5_1 + 20 >> 2] = $2_1;
  HEAP32[$5_1 + 16 >> 2] = $3_1;
  HEAP32[$5_1 + 12 >> 2] = $4_1;
  HEAP8[HEAP32[$5_1 + 24 >> 2] + 53 | 0] = 1;
  if (HEAP32[$5_1 + 16 >> 2] == HEAP32[HEAP32[$5_1 + 24 >> 2] + 4 >> 2]) {
   HEAP8[HEAP32[$5_1 + 24 >> 2] + 52 | 0] = 1;
   label$2 : {
    if (!HEAP32[HEAP32[$5_1 + 24 >> 2] + 16 >> 2]) {
     HEAP32[HEAP32[$5_1 + 24 >> 2] + 16 >> 2] = HEAP32[$5_1 + 20 >> 2];
     HEAP32[HEAP32[$5_1 + 24 >> 2] + 24 >> 2] = HEAP32[$5_1 + 12 >> 2];
     HEAP32[HEAP32[$5_1 + 24 >> 2] + 36 >> 2] = 1;
     label$4 : {
      if (HEAP32[HEAP32[$5_1 + 24 >> 2] + 48 >> 2] != 1) {
       break label$4
      }
      if (HEAP32[HEAP32[$5_1 + 24 >> 2] + 24 >> 2] != 1) {
       break label$4
      }
      HEAP8[HEAP32[$5_1 + 24 >> 2] + 54 | 0] = 1;
     }
     break label$2;
    }
    label$5 : {
     if (HEAP32[HEAP32[$5_1 + 24 >> 2] + 16 >> 2] == HEAP32[$5_1 + 20 >> 2]) {
      if (HEAP32[HEAP32[$5_1 + 24 >> 2] + 24 >> 2] == 2) {
       HEAP32[HEAP32[$5_1 + 24 >> 2] + 24 >> 2] = HEAP32[$5_1 + 12 >> 2]
      }
      label$8 : {
       if (HEAP32[HEAP32[$5_1 + 24 >> 2] + 48 >> 2] != 1) {
        break label$8
       }
       if (HEAP32[HEAP32[$5_1 + 24 >> 2] + 24 >> 2] != 1) {
        break label$8
       }
       HEAP8[HEAP32[$5_1 + 24 >> 2] + 54 | 0] = 1;
      }
      break label$5;
     }
     $0_1 = HEAP32[$5_1 + 24 >> 2];
     HEAP32[$0_1 + 36 >> 2] = HEAP32[$0_1 + 36 >> 2] + 1;
     HEAP8[HEAP32[$5_1 + 24 >> 2] + 54 | 0] = 1;
    }
   }
  }
 }
 
 function $34($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[$4_1 + 12 >> 2] = $0_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  HEAP32[$4_1 >> 2] = $3_1;
  if (HEAP32[$4_1 + 4 >> 2] == HEAP32[HEAP32[$4_1 + 8 >> 2] + 4 >> 2]) {
   if (HEAP32[HEAP32[$4_1 + 8 >> 2] + 28 >> 2] != 1) {
    HEAP32[HEAP32[$4_1 + 8 >> 2] + 28 >> 2] = HEAP32[$4_1 >> 2]
   }
  }
 }
 
 function $35($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 44 >> 2] = $0_1;
  HEAP32[$5_1 + 40 >> 2] = $1_1;
  HEAP32[$5_1 + 36 >> 2] = $2_1;
  HEAP32[$5_1 + 32 >> 2] = $3_1;
  HEAP8[$5_1 + 31 | 0] = $4_1;
  $0_1 = HEAP32[$5_1 + 44 >> 2];
  label$1 : {
   if ($26($0_1, HEAP32[HEAP32[$5_1 + 40 >> 2] + 8 >> 2], HEAP8[$5_1 + 31 | 0] & 1) & 1) {
    $34($0_1, HEAP32[$5_1 + 40 >> 2], HEAP32[$5_1 + 36 >> 2], HEAP32[$5_1 + 32 >> 2]);
    break label$1;
   }
   label$3 : {
    if ($26($0_1, HEAP32[HEAP32[$5_1 + 40 >> 2] >> 2], HEAP8[$5_1 + 31 | 0] & 1) & 1) {
     if (!(HEAP32[$5_1 + 36 >> 2] != HEAP32[HEAP32[$5_1 + 40 >> 2] + 20 >> 2] ? HEAP32[$5_1 + 36 >> 2] != HEAP32[HEAP32[$5_1 + 40 >> 2] + 16 >> 2] : 0)) {
      if (HEAP32[$5_1 + 32 >> 2] == 1) {
       HEAP32[HEAP32[$5_1 + 40 >> 2] + 32 >> 2] = 1
      }
      break label$3;
     }
     HEAP32[HEAP32[$5_1 + 40 >> 2] + 32 >> 2] = HEAP32[$5_1 + 32 >> 2];
     HEAP8[$5_1 + 30 | 0] = 0;
     if (HEAP32[HEAP32[$5_1 + 40 >> 2] + 44 >> 2] != 4) {
      HEAP8[$5_1 + 29 | 0] = 0;
      HEAP32[$5_1 + 24 >> 2] = ($0_1 + 16 | 0) + (HEAP32[$0_1 + 12 >> 2] << 3);
      HEAP32[$5_1 + 20 >> 2] = $0_1 + 16;
      while (1) {
       label$10 : {
        if (HEAPU32[$5_1 + 20 >> 2] >= HEAPU32[$5_1 + 24 >> 2]) {
         break label$10
        }
        HEAP8[HEAP32[$5_1 + 40 >> 2] + 52 | 0] = 0;
        HEAP8[HEAP32[$5_1 + 40 >> 2] + 53 | 0] = 0;
        $36(HEAP32[$5_1 + 20 >> 2], HEAP32[$5_1 + 40 >> 2], HEAP32[$5_1 + 36 >> 2], HEAP32[$5_1 + 36 >> 2], 1, HEAP8[$5_1 + 31 | 0] & 1);
        if (HEAP8[HEAP32[$5_1 + 40 >> 2] + 54 | 0] & 1) {
         break label$10
        }
        if (HEAP8[HEAP32[$5_1 + 40 >> 2] + 53 | 0] & 1) {
         HEAP8[$5_1 + 29 | 0] = 1;
         label$12 : {
          if (HEAP8[HEAP32[$5_1 + 40 >> 2] + 52 | 0] & 1) {
           HEAP8[$5_1 + 30 | 0] = 1;
           if (HEAP32[HEAP32[$5_1 + 40 >> 2] + 24 >> 2] == 1) {
            break label$10
           }
           if (!(HEAP32[$0_1 + 8 >> 2] & 2)) {
            break label$10
           }
           break label$12;
          }
          if (!(HEAP32[$0_1 + 8 >> 2] & 1)) {
           break label$10
          }
         }
        }
        HEAP32[$5_1 + 20 >> 2] = HEAP32[$5_1 + 20 >> 2] + 8;
        continue;
       }
       break;
      };
      label$14 : {
       if (HEAP8[$5_1 + 29 | 0] & 1) {
        HEAP32[HEAP32[$5_1 + 40 >> 2] + 44 >> 2] = 3;
        break label$14;
       }
       HEAP32[HEAP32[$5_1 + 40 >> 2] + 44 >> 2] = 4;
      }
     }
     if (!(HEAP8[$5_1 + 30 | 0] & 1)) {
      HEAP32[HEAP32[$5_1 + 40 >> 2] + 20 >> 2] = HEAP32[$5_1 + 36 >> 2];
      $0_1 = HEAP32[$5_1 + 40 >> 2];
      HEAP32[$0_1 + 40 >> 2] = HEAP32[$0_1 + 40 >> 2] + 1;
      label$17 : {
       if (HEAP32[HEAP32[$5_1 + 40 >> 2] + 36 >> 2] != 1) {
        break label$17
       }
       if (HEAP32[HEAP32[$5_1 + 40 >> 2] + 24 >> 2] != 2) {
        break label$17
       }
       HEAP8[HEAP32[$5_1 + 40 >> 2] + 54 | 0] = 1;
      }
     }
     break label$3;
    }
    HEAP32[$5_1 + 16 >> 2] = ($0_1 + 16 | 0) + (HEAP32[$0_1 + 12 >> 2] << 3);
    HEAP32[$5_1 + 12 >> 2] = $0_1 + 16;
    $37(HEAP32[$5_1 + 12 >> 2], HEAP32[$5_1 + 40 >> 2], HEAP32[$5_1 + 36 >> 2], HEAP32[$5_1 + 32 >> 2], HEAP8[$5_1 + 31 | 0] & 1);
    $1_1 = HEAP32[$5_1 + 12 >> 2] + 8 | 0;
    HEAP32[$5_1 + 12 >> 2] = $1_1;
    if ($1_1 >>> 0 < HEAPU32[$5_1 + 16 >> 2]) {
     label$19 : {
      if (!(HEAP32[HEAP32[$5_1 + 40 >> 2] + 36 >> 2] != 1 ? !(HEAP32[$0_1 + 8 >> 2] & 2) : 0)) {
       while (1) {
        if (!(HEAP8[HEAP32[$5_1 + 40 >> 2] + 54 | 0] & 1)) {
         $37(HEAP32[$5_1 + 12 >> 2], HEAP32[$5_1 + 40 >> 2], HEAP32[$5_1 + 36 >> 2], HEAP32[$5_1 + 32 >> 2], HEAP8[$5_1 + 31 | 0] & 1);
         $0_1 = HEAP32[$5_1 + 12 >> 2] + 8 | 0;
         HEAP32[$5_1 + 12 >> 2] = $0_1;
         if ($0_1 >>> 0 < HEAPU32[$5_1 + 16 >> 2]) {
          continue
         }
        }
        break;
       };
       break label$19;
      }
      label$24 : {
       if (HEAP32[$0_1 + 8 >> 2] & 1) {
        while (1) {
         label$27 : {
          if (HEAP8[HEAP32[$5_1 + 40 >> 2] + 54 | 0] & 1) {
           break label$27
          }
          label$28 : {
           if (HEAP32[HEAP32[$5_1 + 40 >> 2] + 36 >> 2] != 1) {
            break label$28
           }
           if (HEAP32[HEAP32[$5_1 + 40 >> 2] + 24 >> 2] != 1) {
            break label$28
           }
           break label$27;
          }
          $37(HEAP32[$5_1 + 12 >> 2], HEAP32[$5_1 + 40 >> 2], HEAP32[$5_1 + 36 >> 2], HEAP32[$5_1 + 32 >> 2], HEAP8[$5_1 + 31 | 0] & 1);
          $0_1 = HEAP32[$5_1 + 12 >> 2] + 8 | 0;
          HEAP32[$5_1 + 12 >> 2] = $0_1;
          if ($0_1 >>> 0 < HEAPU32[$5_1 + 16 >> 2]) {
           continue
          }
         }
         break;
        };
        break label$24;
       }
       while (1) {
        label$30 : {
         if (HEAP8[HEAP32[$5_1 + 40 >> 2] + 54 | 0] & 1) {
          break label$30
         }
         if (HEAP32[HEAP32[$5_1 + 40 >> 2] + 36 >> 2] == 1) {
          break label$30
         }
         $37(HEAP32[$5_1 + 12 >> 2], HEAP32[$5_1 + 40 >> 2], HEAP32[$5_1 + 36 >> 2], HEAP32[$5_1 + 32 >> 2], HEAP8[$5_1 + 31 | 0] & 1);
         $0_1 = HEAP32[$5_1 + 12 >> 2] + 8 | 0;
         HEAP32[$5_1 + 12 >> 2] = $0_1;
         if ($0_1 >>> 0 < HEAPU32[$5_1 + 16 >> 2]) {
          continue
         }
        }
        break;
       };
      }
     }
    }
   }
  }
  global$0 = $5_1 + 48 | 0;
 }
 
 function $36($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 28 >> 2] = $0_1;
  HEAP32[$6_1 + 24 >> 2] = $1_1;
  HEAP32[$6_1 + 20 >> 2] = $2_1;
  HEAP32[$6_1 + 16 >> 2] = $3_1;
  HEAP32[$6_1 + 12 >> 2] = $4_1;
  HEAP8[$6_1 + 11 | 0] = $5_1;
  $0_1 = HEAP32[$6_1 + 28 >> 2];
  HEAP32[$6_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] >> 8;
  if (HEAP32[$0_1 + 4 >> 2] & 1) {
   HEAP32[$6_1 >> 2] = HEAP32[HEAP32[$6_1 + 16 >> 2] >> 2];
   HEAP32[$6_1 + 4 >> 2] = HEAP32[HEAP32[$6_1 >> 2] + HEAP32[$6_1 + 4 >> 2] >> 2];
  }
  $1_1 = HEAP32[$0_1 >> 2];
  $2_1 = $1_1;
  $3_1 = HEAP32[$6_1 + 24 >> 2];
  $4_1 = HEAP32[$6_1 + 20 >> 2];
  $5_1 = HEAP32[$6_1 + 16 >> 2] + HEAP32[$6_1 + 4 >> 2] | 0;
  if (HEAP32[$0_1 + 4 >> 2] & 2) {
   $0_1 = HEAP32[$6_1 + 12 >> 2]
  } else {
   $0_1 = 2
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]]($2_1, $3_1, $4_1, $5_1, $0_1, HEAP8[$6_1 + 11 | 0] & 1);
  global$0 = $6_1 + 32 | 0;
 }
 
 function $37($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 28 >> 2] = $0_1;
  HEAP32[$5_1 + 24 >> 2] = $1_1;
  HEAP32[$5_1 + 20 >> 2] = $2_1;
  HEAP32[$5_1 + 16 >> 2] = $3_1;
  HEAP8[$5_1 + 15 | 0] = $4_1;
  $0_1 = HEAP32[$5_1 + 28 >> 2];
  HEAP32[$5_1 + 8 >> 2] = HEAP32[$0_1 + 4 >> 2] >> 8;
  if (HEAP32[$0_1 + 4 >> 2] & 1) {
   HEAP32[$5_1 + 4 >> 2] = HEAP32[HEAP32[$5_1 + 20 >> 2] >> 2];
   HEAP32[$5_1 + 8 >> 2] = HEAP32[HEAP32[$5_1 + 4 >> 2] + HEAP32[$5_1 + 8 >> 2] >> 2];
  }
  $1_1 = HEAP32[$0_1 >> 2];
  $2_1 = $1_1;
  $3_1 = HEAP32[$5_1 + 24 >> 2];
  $4_1 = HEAP32[$5_1 + 20 >> 2] + HEAP32[$5_1 + 8 >> 2] | 0;
  if (HEAP32[$0_1 + 4 >> 2] & 2) {
   $0_1 = HEAP32[$5_1 + 16 >> 2]
  } else {
   $0_1 = 2
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 24 >> 2]]($2_1, $3_1, $4_1, $0_1, HEAP8[$5_1 + 15 | 0] & 1);
  global$0 = $5_1 + 32 | 0;
 }
 
 function $38($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 28 >> 2] = $0_1;
  HEAP32[$5_1 + 24 >> 2] = $1_1;
  HEAP32[$5_1 + 20 >> 2] = $2_1;
  HEAP32[$5_1 + 16 >> 2] = $3_1;
  HEAP8[$5_1 + 15 | 0] = $4_1;
  $0_1 = HEAP32[$5_1 + 28 >> 2];
  label$1 : {
   if ($26($0_1, HEAP32[HEAP32[$5_1 + 24 >> 2] + 8 >> 2], HEAP8[$5_1 + 15 | 0] & 1) & 1) {
    $34($0_1, HEAP32[$5_1 + 24 >> 2], HEAP32[$5_1 + 20 >> 2], HEAP32[$5_1 + 16 >> 2]);
    break label$1;
   }
   label$3 : {
    if ($26($0_1, HEAP32[HEAP32[$5_1 + 24 >> 2] >> 2], HEAP8[$5_1 + 15 | 0] & 1) & 1) {
     if (!(HEAP32[$5_1 + 20 >> 2] != HEAP32[HEAP32[$5_1 + 24 >> 2] + 20 >> 2] ? HEAP32[$5_1 + 20 >> 2] != HEAP32[HEAP32[$5_1 + 24 >> 2] + 16 >> 2] : 0)) {
      if (HEAP32[$5_1 + 16 >> 2] == 1) {
       HEAP32[HEAP32[$5_1 + 24 >> 2] + 32 >> 2] = 1
      }
      break label$3;
     }
     HEAP32[HEAP32[$5_1 + 24 >> 2] + 32 >> 2] = HEAP32[$5_1 + 16 >> 2];
     HEAP8[$5_1 + 14 | 0] = 0;
     if (HEAP32[HEAP32[$5_1 + 24 >> 2] + 44 >> 2] != 4) {
      HEAP8[$5_1 + 13 | 0] = 0;
      HEAP8[HEAP32[$5_1 + 24 >> 2] + 52 | 0] = 0;
      HEAP8[HEAP32[$5_1 + 24 >> 2] + 53 | 0] = 0;
      $0_1 = HEAP32[$0_1 + 8 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1, HEAP32[$5_1 + 24 >> 2], HEAP32[$5_1 + 20 >> 2], HEAP32[$5_1 + 20 >> 2], 1, HEAP8[$5_1 + 15 | 0] & 1);
      if (HEAP8[HEAP32[$5_1 + 24 >> 2] + 53 | 0] & 1) {
       HEAP8[$5_1 + 13 | 0] = 1;
       if (HEAP8[HEAP32[$5_1 + 24 >> 2] + 52 | 0] & 1) {
        HEAP8[$5_1 + 14 | 0] = 1
       }
      }
      label$11 : {
       if (HEAP8[$5_1 + 13 | 0] & 1) {
        HEAP32[HEAP32[$5_1 + 24 >> 2] + 44 >> 2] = 3;
        break label$11;
       }
       HEAP32[HEAP32[$5_1 + 24 >> 2] + 44 >> 2] = 4;
      }
     }
     if (!(HEAP8[$5_1 + 14 | 0] & 1)) {
      HEAP32[HEAP32[$5_1 + 24 >> 2] + 20 >> 2] = HEAP32[$5_1 + 20 >> 2];
      $0_1 = HEAP32[$5_1 + 24 >> 2];
      HEAP32[$0_1 + 40 >> 2] = HEAP32[$0_1 + 40 >> 2] + 1;
      label$14 : {
       if (HEAP32[HEAP32[$5_1 + 24 >> 2] + 36 >> 2] != 1) {
        break label$14
       }
       if (HEAP32[HEAP32[$5_1 + 24 >> 2] + 24 >> 2] != 2) {
        break label$14
       }
       HEAP8[HEAP32[$5_1 + 24 >> 2] + 54 | 0] = 1;
      }
     }
     break label$3;
    }
    $0_1 = HEAP32[$0_1 + 8 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2]]($0_1, HEAP32[$5_1 + 24 >> 2], HEAP32[$5_1 + 20 >> 2], HEAP32[$5_1 + 16 >> 2], HEAP8[$5_1 + 15 | 0] & 1);
   }
  }
  global$0 = $5_1 + 32 | 0;
 }
 
 function $39($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 28 >> 2] = $0_1;
  HEAP32[$5_1 + 24 >> 2] = $1_1;
  HEAP32[$5_1 + 20 >> 2] = $2_1;
  HEAP32[$5_1 + 16 >> 2] = $3_1;
  HEAP8[$5_1 + 15 | 0] = $4_1;
  $0_1 = HEAP32[$5_1 + 28 >> 2];
  label$1 : {
   if ($26($0_1, HEAP32[HEAP32[$5_1 + 24 >> 2] + 8 >> 2], HEAP8[$5_1 + 15 | 0] & 1) & 1) {
    $34($0_1, HEAP32[$5_1 + 24 >> 2], HEAP32[$5_1 + 20 >> 2], HEAP32[$5_1 + 16 >> 2]);
    break label$1;
   }
   if ($26($0_1, HEAP32[HEAP32[$5_1 + 24 >> 2] >> 2], HEAP8[$5_1 + 15 | 0] & 1) & 1) {
    label$4 : {
     if (!(HEAP32[$5_1 + 20 >> 2] != HEAP32[HEAP32[$5_1 + 24 >> 2] + 20 >> 2] ? HEAP32[$5_1 + 20 >> 2] != HEAP32[HEAP32[$5_1 + 24 >> 2] + 16 >> 2] : 0)) {
      if (HEAP32[$5_1 + 16 >> 2] == 1) {
       HEAP32[HEAP32[$5_1 + 24 >> 2] + 32 >> 2] = 1
      }
      break label$4;
     }
     HEAP32[HEAP32[$5_1 + 24 >> 2] + 32 >> 2] = HEAP32[$5_1 + 16 >> 2];
     HEAP32[HEAP32[$5_1 + 24 >> 2] + 20 >> 2] = HEAP32[$5_1 + 20 >> 2];
     $0_1 = HEAP32[$5_1 + 24 >> 2];
     HEAP32[$0_1 + 40 >> 2] = HEAP32[$0_1 + 40 >> 2] + 1;
     label$8 : {
      if (HEAP32[HEAP32[$5_1 + 24 >> 2] + 36 >> 2] != 1) {
       break label$8
      }
      if (HEAP32[HEAP32[$5_1 + 24 >> 2] + 24 >> 2] != 2) {
       break label$8
      }
      HEAP8[HEAP32[$5_1 + 24 >> 2] + 54 | 0] = 1;
     }
     HEAP32[HEAP32[$5_1 + 24 >> 2] + 44 >> 2] = 4;
    }
   }
  }
  global$0 = $5_1 + 32 | 0;
 }
 
 function $40($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 28 >> 2] = $0_1;
  HEAP32[$6_1 + 24 >> 2] = $1_1;
  HEAP32[$6_1 + 20 >> 2] = $2_1;
  HEAP32[$6_1 + 16 >> 2] = $3_1;
  HEAP32[$6_1 + 12 >> 2] = $4_1;
  HEAP8[$6_1 + 11 | 0] = $5_1;
  $0_1 = HEAP32[$6_1 + 28 >> 2];
  label$1 : {
   if ($26($0_1, HEAP32[HEAP32[$6_1 + 24 >> 2] + 8 >> 2], HEAP8[$6_1 + 11 | 0] & 1) & 1) {
    $33($0_1, HEAP32[$6_1 + 24 >> 2], HEAP32[$6_1 + 20 >> 2], HEAP32[$6_1 + 16 >> 2], HEAP32[$6_1 + 12 >> 2]);
    break label$1;
   }
   HEAP8[$6_1 + 10 | 0] = HEAP8[HEAP32[$6_1 + 24 >> 2] + 52 | 0] & 1;
   HEAP8[$6_1 + 9 | 0] = HEAP8[HEAP32[$6_1 + 24 >> 2] + 53 | 0] & 1;
   HEAP32[$6_1 + 4 >> 2] = ($0_1 + 16 | 0) + (HEAP32[$0_1 + 12 >> 2] << 3);
   HEAP32[$6_1 >> 2] = $0_1 + 16;
   HEAP8[HEAP32[$6_1 + 24 >> 2] + 52 | 0] = 0;
   HEAP8[HEAP32[$6_1 + 24 >> 2] + 53 | 0] = 0;
   $36(HEAP32[$6_1 >> 2], HEAP32[$6_1 + 24 >> 2], HEAP32[$6_1 + 20 >> 2], HEAP32[$6_1 + 16 >> 2], HEAP32[$6_1 + 12 >> 2], HEAP8[$6_1 + 11 | 0] & 1);
   HEAP8[$6_1 + 10 | 0] = HEAP8[HEAP32[$6_1 + 24 >> 2] + 52 | 0] & 1 | HEAP8[$6_1 + 10 | 0] & 1;
   HEAP8[$6_1 + 9 | 0] = HEAP8[HEAP32[$6_1 + 24 >> 2] + 53 | 0] & 1 | HEAP8[$6_1 + 9 | 0] & 1;
   $1_1 = HEAP32[$6_1 >> 2] + 8 | 0;
   HEAP32[$6_1 >> 2] = $1_1;
   if ($1_1 >>> 0 < HEAPU32[$6_1 + 4 >> 2]) {
    while (1) {
     label$5 : {
      if (HEAP8[HEAP32[$6_1 + 24 >> 2] + 54 | 0] & 1) {
       break label$5
      }
      label$6 : {
       if (HEAP8[HEAP32[$6_1 + 24 >> 2] + 52 | 0] & 1) {
        if (HEAP32[HEAP32[$6_1 + 24 >> 2] + 24 >> 2] == 1) {
         break label$5
        }
        if (!(HEAP32[$0_1 + 8 >> 2] & 2)) {
         break label$5
        }
        break label$6;
       }
       if (HEAP32[$0_1 + 8 >> 2] & 1 ? 0 : HEAP8[HEAP32[$6_1 + 24 >> 2] + 53 | 0] & 1) {
        break label$5
       }
      }
      HEAP8[HEAP32[$6_1 + 24 >> 2] + 52 | 0] = 0;
      HEAP8[HEAP32[$6_1 + 24 >> 2] + 53 | 0] = 0;
      $36(HEAP32[$6_1 >> 2], HEAP32[$6_1 + 24 >> 2], HEAP32[$6_1 + 20 >> 2], HEAP32[$6_1 + 16 >> 2], HEAP32[$6_1 + 12 >> 2], HEAP8[$6_1 + 11 | 0] & 1);
      HEAP8[$6_1 + 10 | 0] = HEAP8[HEAP32[$6_1 + 24 >> 2] + 52 | 0] & 1 | HEAP8[$6_1 + 10 | 0] & 1;
      HEAP8[$6_1 + 9 | 0] = HEAP8[HEAP32[$6_1 + 24 >> 2] + 53 | 0] & 1 | HEAP8[$6_1 + 9 | 0] & 1;
      $1_1 = HEAP32[$6_1 >> 2] + 8 | 0;
      HEAP32[$6_1 >> 2] = $1_1;
      if ($1_1 >>> 0 < HEAPU32[$6_1 + 4 >> 2]) {
       continue
      }
     }
     break;
    }
   }
   HEAP8[HEAP32[$6_1 + 24 >> 2] + 52 | 0] = HEAP8[$6_1 + 10 | 0] & 1;
   HEAP8[HEAP32[$6_1 + 24 >> 2] + 53 | 0] = HEAP8[$6_1 + 9 | 0] & 1;
  }
  global$0 = $6_1 + 32 | 0;
 }
 
 function $41($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 28 >> 2] = $0_1;
  HEAP32[$6_1 + 24 >> 2] = $1_1;
  HEAP32[$6_1 + 20 >> 2] = $2_1;
  HEAP32[$6_1 + 16 >> 2] = $3_1;
  HEAP32[$6_1 + 12 >> 2] = $4_1;
  HEAP8[$6_1 + 11 | 0] = $5_1;
  $0_1 = HEAP32[$6_1 + 28 >> 2];
  label$1 : {
   if ($26($0_1, HEAP32[HEAP32[$6_1 + 24 >> 2] + 8 >> 2], HEAP8[$6_1 + 11 | 0] & 1) & 1) {
    $33($0_1, HEAP32[$6_1 + 24 >> 2], HEAP32[$6_1 + 20 >> 2], HEAP32[$6_1 + 16 >> 2], HEAP32[$6_1 + 12 >> 2]);
    break label$1;
   }
   $0_1 = HEAP32[$0_1 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1, HEAP32[$6_1 + 24 >> 2], HEAP32[$6_1 + 20 >> 2], HEAP32[$6_1 + 16 >> 2], HEAP32[$6_1 + 12 >> 2], HEAP8[$6_1 + 11 | 0] & 1);
  }
  global$0 = $6_1 + 32 | 0;
 }
 
 function $42($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 28 >> 2] = $0_1;
  HEAP32[$6_1 + 24 >> 2] = $1_1;
  HEAP32[$6_1 + 20 >> 2] = $2_1;
  HEAP32[$6_1 + 16 >> 2] = $3_1;
  HEAP32[$6_1 + 12 >> 2] = $4_1;
  HEAP8[$6_1 + 11 | 0] = $5_1;
  $0_1 = HEAP32[$6_1 + 28 >> 2];
  if ($26($0_1, HEAP32[HEAP32[$6_1 + 24 >> 2] + 8 >> 2], HEAP8[$6_1 + 11 | 0] & 1) & 1) {
   $33($0_1, HEAP32[$6_1 + 24 >> 2], HEAP32[$6_1 + 20 >> 2], HEAP32[$6_1 + 16 >> 2], HEAP32[$6_1 + 12 >> 2])
  }
  global$0 = $6_1 + 32 | 0;
 }
 
 function $43($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = HEAP32[5097];
  if (!$1_1) {
   HEAP32[5097] = 20396;
   $1_1 = 20396;
  }
  $3_1 = HEAP32[5098];
  if (($3_1 | 0) == 32) {
   $2_1 = $3(260);
   label$3 : {
    if (!$2_1) {
     break label$3
    }
    if (!(HEAPU8[$2_1 - 4 | 0] & 3)) {
     break label$3
    }
    $1($2_1, 0, 260);
   }
   if (!$2_1) {
    return
   }
   $3_1 = 0;
   HEAP32[5097] = $2_1;
   HEAP32[$2_1 >> 2] = $1_1;
   HEAP32[5098] = 0;
   $1_1 = $2_1;
  }
  HEAP32[5098] = $3_1 + 1;
  $1_1 = ($3_1 << 2) + $1_1 | 0;
  HEAP32[$1_1 + 132 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = $0_1;
 }
 
 function $44($0_1) {
  var $1_1 = 0, $2_1 = Math_fround(0), $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $4_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
  $1_1 = $4_1 & 2147483647;
  label$1 : {
   if ($1_1 >>> 0 >= 1283457024) {
    if ($0_1 != $0_1) {
     break label$1
    }
    return ($4_1 | 0) < 0 ? Math_fround(-1.570796251296997) : Math_fround(1.570796251296997);
   }
   label$3 : {
    if ($1_1 >>> 0 <= 1054867455) {
     $3_1 = -1;
     if ($1_1 >>> 0 >= 964689920) {
      break label$3
     }
     break label$1;
    }
    $0_1 = Math_fround(Math_abs($0_1));
    if ($1_1 >>> 0 <= 1066926079) {
     if ($1_1 >>> 0 <= 1060110335) {
      $0_1 = Math_fround(Math_fround(Math_fround($0_1 + $0_1) + Math_fround(-1.0)) / Math_fround($0_1 + Math_fround(2.0)));
      $3_1 = 0;
      break label$3;
     }
     $0_1 = Math_fround(Math_fround($0_1 + Math_fround(-1.0)) / Math_fround($0_1 + Math_fround(1.0)));
     $3_1 = 1;
     break label$3;
    }
    if ($1_1 >>> 0 <= 1075576831) {
     $0_1 = Math_fround(Math_fround($0_1 + Math_fround(-1.5)) / Math_fround(Math_fround($0_1 * Math_fround(1.5)) + Math_fround(1.0)));
     $3_1 = 2;
     break label$3;
    }
    $0_1 = Math_fround(Math_fround(-1.0) / $0_1);
    $3_1 = 3;
   }
   $1_1 = $3_1;
   $5_1 = Math_fround($0_1 * $0_1);
   $2_1 = Math_fround($5_1 * $5_1);
   $6_1 = Math_fround($2_1 * Math_fround(Math_fround($2_1 * Math_fround(-.106480173766613)) + Math_fround(-.19999158382415771)));
   $2_1 = Math_fround($5_1 * Math_fround(Math_fround($2_1 * Math_fround(Math_fround($2_1 * Math_fround(.06168760731816292)) + Math_fround(.14253635704517365))) + Math_fround(.333333283662796)));
   if (($1_1 | 0) <= -1) {
    return Math_fround($0_1 - Math_fround($0_1 * Math_fround($6_1 + $2_1)))
   }
   $1_1 = $1_1 << 2;
   $0_1 = Math_fround(HEAPF32[$1_1 + 3760 >> 2] - Math_fround(Math_fround(Math_fround($0_1 * Math_fround($6_1 + $2_1)) - HEAPF32[$1_1 + 3776 >> 2]) - $0_1));
   $0_1 = ($4_1 | 0) < 0 ? Math_fround(-$0_1) : $0_1;
  }
  return $0_1;
 }
 
 function $45($0_1) {
  var $1_1 = 0.0;
  $0_1 = $0_1 * $0_1;
  $1_1 = $0_1 * $0_1;
  return Math_fround($0_1 * -.499999997251031 + 1.0 + $1_1 * .04166662332373906 + $0_1 * $1_1 * ($0_1 * 2.439044879627741e-05 + -.001388676377460993));
 }
 
 function $46($0_1) {
  var $1_1 = 0.0, $2_1 = 0.0;
  $1_1 = $0_1 * $0_1;
  $2_1 = $1_1 * $0_1;
  return Math_fround($2_1 * ($1_1 * $1_1) * ($1_1 * 2.718311493989822e-06 + -1.9839334836096632e-04) + ($2_1 * ($1_1 * .008333329385889463 + -.16666666641626524) + $0_1));
 }
 
 function $47($0_1, $1_1) {
  label$1 : {
   if (($1_1 | 0) >= 1024) {
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    if (($1_1 | 0) < 2047) {
     $1_1 = $1_1 - 1023 | 0;
     break label$1;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = (($1_1 | 0) < 3069 ? $1_1 : 3069) - 2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > -1023) {
    break label$1
   }
   $0_1 = $0_1 * 2.004168360008973e-292;
   if (($1_1 | 0) > -1992) {
    $1_1 = $1_1 + 969 | 0;
    break label$1;
   }
   $0_1 = $0_1 * 2.004168360008973e-292;
   $1_1 = (($1_1 | 0) > -2960 ? $1_1 : -2960) + 1938 | 0;
  }
  wasm2js_scratch_store_i32(0, 0);
  wasm2js_scratch_store_i32(1, $1_1 + 1023 << 20);
  return $0_1 * +wasm2js_scratch_load_f64();
 }
 
 function $48($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0.0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0.0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0.0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25 = 0, $26_1 = 0, $27_1 = 0;
  $16_1 = global$0 - 16 | 0;
  global$0 = $16_1;
  $20_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
  $2_1 = $20_1 & 2147483647;
  label$1 : {
   if ($2_1 >>> 0 <= 1305022426) {
    $12_1 = +$0_1;
    $3_1 = $12_1 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    HEAPF64[$1_1 >> 3] = $12_1 + $3_1 * -1.5707963109016418 + $3_1 * -1.5893254773528196e-08;
    if (Math_abs($3_1) < 2147483648.0) {
     $4_1 = ~~$3_1;
     break label$1;
    }
    $4_1 = -2147483648;
    break label$1;
   }
   if ($2_1 >>> 0 >= 2139095040) {
    HEAPF64[$1_1 >> 3] = Math_fround($0_1 - $0_1);
    break label$1;
   }
   $6_1 = $2_1;
   $2_1 = ($2_1 >>> 23 | 0) - 150 | 0;
   HEAPF64[$16_1 + 8 >> 3] = (wasm2js_scratch_store_i32(2, $6_1 - ($2_1 << 23) | 0), wasm2js_scratch_load_f32());
   $17_1 = $16_1 + 8 | 0;
   $7_1 = global$0 - 560 | 0;
   global$0 = $7_1;
   $6_1 = ($2_1 - 3 | 0) / 24 | 0;
   $18_1 = ($6_1 | 0) > 0 ? $6_1 : 0;
   $13_1 = $2_1 + Math_imul($18_1, -24) | 0;
   $15_1 = HEAP32[956];
   if (($15_1 | 0) >= 0) {
    $6_1 = $15_1 + 1 | 0;
    $2_1 = $18_1;
    $8_1 = ($2_1 << 2) + 3840 | 0;
    $5_1 = $7_1 + 320 | 0;
    while (1) {
     HEAPF64[$5_1 >> 3] = ($2_1 | 0) < 0 ? 0.0 : +HEAP32[$8_1 >> 2];
     $5_1 = $5_1 + 8 | 0;
     $8_1 = $8_1 + 4 | 0;
     $2_1 = $2_1 + 1 | 0;
     $6_1 = $6_1 - 1 | 0;
     if ($6_1) {
      continue
     }
     break;
    };
   }
   $9_1 = $13_1 - 24 | 0;
   $6_1 = $7_1 + 320 | 0;
   while (1) {
    $3_1 = 0.0;
    $2_1 = $17_1;
    $8_1 = 1;
    $5_1 = $6_1;
    while (1) {
     $3_1 = $3_1 + HEAPF64[$2_1 >> 3] * HEAPF64[$5_1 >> 3];
     $2_1 = $2_1 + 8 | 0;
     $5_1 = $5_1 - 8 | 0;
     $8_1 = $8_1 - 1 | 0;
     if ($8_1) {
      continue
     }
     break;
    };
    HEAPF64[($4_1 << 3) + $7_1 >> 3] = $3_1;
    $6_1 = $6_1 + 8 | 0;
    $2_1 = ($4_1 | 0) < ($15_1 | 0);
    $4_1 = $4_1 + 1 | 0;
    if ($2_1) {
     continue
    }
    break;
   };
   $23_1 = 23 - $9_1 | 0;
   $21_1 = 24 - $9_1 | 0;
   $24_1 = (($15_1 << 2) + $7_1 | 0) + 476 | 0;
   $25 = $7_1 + 476 | 0;
   $26_1 = $7_1 - 8 | 0;
   $4_1 = $15_1;
   label$11 : {
    while (1) {
     $2_1 = $4_1 << 3;
     $3_1 = HEAPF64[$2_1 + $7_1 >> 3];
     $11_1 = ($4_1 | 0) < 1;
     if (!$11_1) {
      $8_1 = $4_1 + 1 | 0;
      $2_1 = $2_1 + $26_1 | 0;
      $5_1 = $7_1 + 480 | 0;
      while (1) {
       $6_1 = $5_1;
       $19_1 = $3_1;
       $12_1 = $3_1 * 5.960464477539063e-08;
       label$16 : {
        if (Math_abs($12_1) < 2147483648.0) {
         $10_1 = ~~$12_1;
         break label$16;
        }
        $10_1 = -2147483648;
       }
       $3_1 = +($10_1 | 0);
       $12_1 = $19_1 + $3_1 * -16777216.0;
       label$15 : {
        if (Math_abs($12_1) < 2147483648.0) {
         $10_1 = ~~$12_1;
         break label$15;
        }
        $10_1 = -2147483648;
       }
       HEAP32[$6_1 >> 2] = $10_1;
       $5_1 = $5_1 + 4 | 0;
       $3_1 = HEAPF64[$2_1 >> 3] + $3_1;
       $2_1 = $2_1 - 8 | 0;
       $8_1 = $8_1 - 1 | 0;
       if (($8_1 | 0) > 1) {
        continue
       }
       break;
      };
     }
     $3_1 = $47($3_1, $9_1);
     $3_1 = $3_1 + Math_floor($3_1 * .125) * -8.0;
     label$19 : {
      if (Math_abs($3_1) < 2147483648.0) {
       $10_1 = ~~$3_1;
       break label$19;
      }
      $10_1 = -2147483648;
     }
     $3_1 = $3_1 - +($10_1 | 0);
     label$21 : {
      label$22 : {
       label$23 : {
        $8_1 = ($9_1 | 0) < 1;
        label$24 : {
         if (!$8_1) {
          $6_1 = (($4_1 << 2) + $7_1 | 0) + 476 | 0;
          $5_1 = HEAP32[$6_1 >> 2];
          $2_1 = $5_1 >> $21_1;
          $14_1 = $6_1;
          $6_1 = $5_1 - ($2_1 << $21_1) | 0;
          HEAP32[$14_1 >> 2] = $6_1;
          $10_1 = $2_1 + $10_1 | 0;
          $14_1 = $6_1 >> $23_1;
          break label$24;
         }
         if ($9_1) {
          break label$23
         }
         $14_1 = HEAP32[(($4_1 << 2) + $7_1 | 0) + 476 >> 2] >> 23;
        }
        if (($14_1 | 0) < 1) {
         break label$21
        }
        break label$22;
       }
       $14_1 = 2;
       if ($3_1 >= .5) {
        break label$22
       }
       $14_1 = 0;
       break label$21;
      }
      label$26 : {
       if ($11_1) {
        $11_1 = 0;
        break label$26;
       }
       $11_1 = 0;
       $2_1 = $7_1 + 480 | 0;
       $6_1 = $4_1;
       while (1) {
        $5_1 = HEAP32[$2_1 >> 2];
        label$29 : {
         label$30 : {
          $27_1 = $2_1;
          if ($11_1) {
           $22_1 = 16777215
          } else {
           if (!$5_1) {
            break label$30
           }
           $11_1 = 1;
           $22_1 = 16777216;
          }
          HEAP32[$27_1 >> 2] = $22_1 - $5_1;
          break label$29;
         }
         $11_1 = 0;
        }
        $2_1 = $2_1 + 4 | 0;
        $6_1 = $6_1 - 1 | 0;
        if ($6_1) {
         continue
        }
        break;
       };
      }
      label$33 : {
       if ($8_1) {
        break label$33
       }
       $2_1 = $9_1 - 1 | 0;
       if ($2_1 >>> 0 > 1) {
        break label$33
       }
       if (($2_1 | 0) != 1) {
        $2_1 = (($4_1 << 2) + $7_1 | 0) + 476 | 0;
        HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] & 8388607;
        break label$33;
       }
       $2_1 = (($4_1 << 2) + $7_1 | 0) + 476 | 0;
       HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] & 4194303;
      }
      $10_1 = $10_1 + 1 | 0;
      if (($14_1 | 0) != 2) {
       break label$21
      }
      $3_1 = 1.0 - $3_1;
      $14_1 = 2;
      if (!$11_1) {
       break label$21
      }
      $3_1 = $3_1 - $47(1.0, $9_1);
     }
     if ($3_1 == 0.0) {
      label$36 : {
       if (($4_1 | 0) <= ($15_1 | 0)) {
        break label$36
       }
       $2_1 = ($4_1 << 2) + $25 | 0;
       $5_1 = 0;
       $8_1 = $4_1;
       while (1) {
        $5_1 = HEAP32[$2_1 >> 2] | $5_1;
        $2_1 = $2_1 - 4 | 0;
        $8_1 = $8_1 - 1 | 0;
        if (($15_1 | 0) < ($8_1 | 0)) {
         continue
        }
        break;
       };
       if (!$5_1) {
        break label$36
       }
       $2_1 = (($4_1 << 2) + $7_1 | 0) + 476 | 0;
       $13_1 = $9_1;
       while (1) {
        $4_1 = $4_1 - 1 | 0;
        $13_1 = $13_1 - 24 | 0;
        $6_1 = HEAP32[$2_1 >> 2];
        $2_1 = $2_1 - 4 | 0;
        if (!$6_1) {
         continue
        }
        break;
       };
       break label$11;
      }
      $2_1 = $24_1;
      $6_1 = $4_1;
      while (1) {
       $6_1 = $6_1 + 1 | 0;
       $5_1 = HEAP32[$2_1 >> 2];
       $2_1 = $2_1 - 4 | 0;
       if (!$5_1) {
        continue
       }
       break;
      };
      $11_1 = (($4_1 << 3) + $7_1 | 0) + 328 | 0;
      while (1) {
       $2_1 = (($4_1 << 3) + $7_1 | 0) + 328 | 0;
       $4_1 = $4_1 + 1 | 0;
       HEAPF64[$2_1 >> 3] = HEAP32[($18_1 + $4_1 << 2) + 3840 >> 2];
       $3_1 = 0.0;
       $2_1 = $17_1;
       $5_1 = $11_1;
       $8_1 = 1;
       while (1) {
        $3_1 = $3_1 + HEAPF64[$2_1 >> 3] * HEAPF64[$5_1 >> 3];
        $2_1 = $2_1 + 8 | 0;
        $5_1 = $5_1 - 8 | 0;
        $8_1 = $8_1 - 1 | 0;
        if ($8_1) {
         continue
        }
        break;
       };
       HEAPF64[($4_1 << 3) + $7_1 >> 3] = $3_1;
       $11_1 = $11_1 + 8 | 0;
       if (($4_1 | 0) < ($6_1 | 0)) {
        continue
       }
       break;
      };
      $4_1 = $6_1;
      continue;
     }
     break;
    };
    $3_1 = $47($3_1, 0 - $9_1 | 0);
    label$42 : {
     if ($3_1 >= 16777216.0) {
      $5_1 = ($7_1 + 480 | 0) + ($4_1 << 2) | 0;
      $19_1 = $3_1;
      $12_1 = $3_1 * 5.960464477539063e-08;
      label$45 : {
       if (Math_abs($12_1) < 2147483648.0) {
        $2_1 = ~~$12_1;
        break label$45;
       }
       $2_1 = -2147483648;
      }
      $3_1 = $19_1 + +($2_1 | 0) * -16777216.0;
      label$44 : {
       if (Math_abs($3_1) < 2147483648.0) {
        $6_1 = ~~$3_1;
        break label$44;
       }
       $6_1 = -2147483648;
      }
      HEAP32[$5_1 >> 2] = $6_1;
      $4_1 = $4_1 + 1 | 0;
      break label$42;
     }
     if (Math_abs($3_1) < 2147483648.0) {
      $2_1 = ~~$3_1
     } else {
      $2_1 = -2147483648
     }
     $13_1 = $9_1;
    }
    HEAP32[($7_1 + 480 | 0) + ($4_1 << 2) >> 2] = $2_1;
   }
   label$50 : {
    if (($4_1 | 0) < 0) {
     break label$50
    }
    $8_1 = $4_1 + 1 | 0;
    $3_1 = $47(1.0, $13_1);
    $2_1 = ($7_1 + 480 | 0) + ($4_1 << 2) | 0;
    $5_1 = ($4_1 << 3) + $7_1 | 0;
    while (1) {
     HEAPF64[$5_1 >> 3] = $3_1 * +HEAP32[$2_1 >> 2];
     $2_1 = $2_1 - 4 | 0;
     $5_1 = $5_1 - 8 | 0;
     $3_1 = $3_1 * 5.960464477539063e-08;
     $8_1 = $8_1 - 1 | 0;
     if (($8_1 | 0) > 0) {
      continue
     }
     break;
    };
    if (($4_1 | 0) < 0) {
     break label$50
    }
    $6_1 = ($4_1 << 3) + $7_1 | 0;
    $2_1 = $4_1;
    while (1) {
     $9_1 = $2_1;
     $13_1 = $4_1 - $2_1 | 0;
     $3_1 = 0.0;
     $2_1 = 0;
     $5_1 = 0;
     while (1) {
      label$54 : {
       $3_1 = $3_1 + HEAPF64[$2_1 + 6608 >> 3] * HEAPF64[$2_1 + $6_1 >> 3];
       if (($5_1 | 0) >= ($15_1 | 0)) {
        break label$54
       }
       $2_1 = $2_1 + 8 | 0;
       $17_1 = $5_1 >>> 0 < $13_1 >>> 0;
       $5_1 = $5_1 + 1 | 0;
       if ($17_1) {
        continue
       }
      }
      break;
     };
     HEAPF64[($7_1 + 160 | 0) + ($13_1 << 3) >> 3] = $3_1;
     $6_1 = $6_1 - 8 | 0;
     $2_1 = $9_1 - 1 | 0;
     if (($9_1 | 0) > 0) {
      continue
     }
     break;
    };
   }
   label$55 : {
    if (($4_1 | 0) < 0) {
     $3_1 = 0.0;
     break label$55;
    }
    $5_1 = $4_1 + 1 | 0;
    $2_1 = ($7_1 + 160 | 0) + ($4_1 << 3) | 0;
    $3_1 = 0.0;
    while (1) {
     $3_1 = $3_1 + HEAPF64[$2_1 >> 3];
     $2_1 = $2_1 - 8 | 0;
     $5_1 = $5_1 - 1 | 0;
     if (($5_1 | 0) > 0) {
      continue
     }
     break;
    };
   }
   HEAPF64[$16_1 >> 3] = $14_1 ? -$3_1 : $3_1;
   global$0 = $7_1 + 560 | 0;
   $4_1 = $10_1 & 7;
   $3_1 = HEAPF64[$16_1 >> 3];
   if (($20_1 | 0) <= -1) {
    HEAPF64[$1_1 >> 3] = -$3_1;
    $4_1 = 0 - $4_1 | 0;
    break label$1;
   }
   HEAPF64[$1_1 >> 3] = $3_1;
  }
  global$0 = $16_1 + 16 | 0;
  return $4_1;
 }
 
 function $49($0_1) {
  var $1_1 = Math_fround(0), $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0.0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
  $2_1 = $4_1 & 2147483647;
  label$1 : {
   if ($2_1 >>> 0 <= 1061752794) {
    $1_1 = Math_fround(1.0);
    if ($2_1 >>> 0 < 964689920) {
     break label$1
    }
    $1_1 = $45(+$0_1);
    break label$1;
   }
   if ($2_1 >>> 0 <= 1081824209) {
    $5_1 = +$0_1;
    if ($2_1 >>> 0 >= 1075235812) {
     $1_1 = Math_fround(-$45((($4_1 | 0) < 0 ? 3.141592653589793 : -3.141592653589793) + $5_1));
     break label$1;
    }
    if (($4_1 | 0) <= -1) {
     $1_1 = $46($5_1 + 1.5707963267948966);
     break label$1;
    }
    $1_1 = $46(1.5707963267948966 - $5_1);
    break label$1;
   }
   if ($2_1 >>> 0 <= 1088565717) {
    if ($2_1 >>> 0 >= 1085271520) {
     $1_1 = $45((($4_1 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + +$0_1);
     break label$1;
    }
    if (($4_1 | 0) <= -1) {
     $1_1 = $46(-4.71238898038469 - +$0_1);
     break label$1;
    }
    $1_1 = $46(+$0_1 + -4.71238898038469);
    break label$1;
   }
   $1_1 = Math_fround($0_1 - $0_1);
   if ($2_1 >>> 0 >= 2139095040) {
    break label$1
   }
   $2_1 = $48($0_1, $3_1 + 8 | 0) & 3;
   if ($2_1 >>> 0 <= 2) {
    label$10 : {
     switch ($2_1 - 1 | 0) {
     default:
      $1_1 = $45(HEAPF64[$3_1 + 8 >> 3]);
      break label$1;
     case 0:
      $1_1 = $46(-HEAPF64[$3_1 + 8 >> 3]);
      break label$1;
     case 1:
      break label$10;
     };
    }
    $1_1 = Math_fround(-$45(HEAPF64[$3_1 + 8 >> 3]));
    break label$1;
   }
   $1_1 = $46(HEAPF64[$3_1 + 8 >> 3]);
  }
  $0_1 = $1_1;
  global$0 = $3_1 + 16 | 0;
  return $0_1;
 }
 
 function $50($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0.0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $4_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
  $1_1 = $4_1 & 2147483647;
  label$1 : {
   if ($1_1 >>> 0 <= 1061752794) {
    if ($1_1 >>> 0 < 964689920) {
     break label$1
    }
    $0_1 = $46(+$0_1);
    break label$1;
   }
   if ($1_1 >>> 0 <= 1081824209) {
    $3_1 = +$0_1;
    if ($1_1 >>> 0 <= 1075235811) {
     if (($4_1 | 0) <= -1) {
      $0_1 = Math_fround(-$45($3_1 + 1.5707963267948966));
      break label$1;
     }
     $0_1 = $45($3_1 + -1.5707963267948966);
     break label$1;
    }
    $0_1 = $46(-((($4_1 | 0) < 0 ? 3.141592653589793 : -3.141592653589793) + $3_1));
    break label$1;
   }
   if ($1_1 >>> 0 <= 1088565717) {
    $3_1 = +$0_1;
    if ($1_1 >>> 0 <= 1085271519) {
     if (($4_1 | 0) <= -1) {
      $0_1 = $45($3_1 + 4.71238898038469);
      break label$1;
     }
     $0_1 = Math_fround(-$45($3_1 + -4.71238898038469));
     break label$1;
    }
    $0_1 = $46((($4_1 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + $3_1);
    break label$1;
   }
   if ($1_1 >>> 0 >= 2139095040) {
    $0_1 = Math_fround($0_1 - $0_1);
    break label$1;
   }
   $1_1 = $48($0_1, $2_1 + 8 | 0) & 3;
   if ($1_1 >>> 0 <= 2) {
    label$11 : {
     switch ($1_1 - 1 | 0) {
     default:
      $0_1 = $46(HEAPF64[$2_1 + 8 >> 3]);
      break label$1;
     case 0:
      $0_1 = $45(HEAPF64[$2_1 + 8 >> 3]);
      break label$1;
     case 1:
      break label$11;
     };
    }
    $0_1 = $46(-HEAPF64[$2_1 + 8 >> 3]);
    break label$1;
   }
   $0_1 = Math_fround(-$45(HEAPF64[$2_1 + 8 >> 3]));
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1;
 }
 
 function $51($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0.0, $5_1 = 0, $6_1 = 0, $7_1 = 0.0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = 0.0;
  $5_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
  $8_1 = $5_1 << 1;
  $3_1 = $8_1 - 1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $6_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
      label$5 : {
       if ($6_1 - 8388608 >>> 0 <= 2130706431) {
        if ($3_1 >>> 0 > 4278190078) {
         break label$5
        }
        break label$3;
       }
       if ($3_1 >>> 0 < 4278190079) {
        break label$4
       }
      }
      $9_1 = Math_fround(1.0);
      if (($6_1 | 0) == 1065353216) {
       break label$2
      }
      if (!$8_1) {
       break label$2
      }
      $2_1 = $6_1 << 1;
      if (!($8_1 >>> 0 < 4278190081 ? $2_1 >>> 0 <= 4278190080 : 0)) {
       return Math_fround($0_1 + $1_1)
      }
      if (($2_1 | 0) == 2130706432) {
       break label$2
      }
      return (($5_1 ^ -1) >>> 31 | 0) == ($2_1 >>> 0 < 2130706432 | 0) ? Math_fround(0.0) : Math_fround($1_1 * $1_1);
     }
     if (($6_1 << 1) - 1 >>> 0 >= 4278190079) {
      $9_1 = Math_fround($0_1 * $0_1);
      label$9 : {
       if (($6_1 | 0) > -1) {
        break label$9
       }
       $2_1 = $5_1 >>> 23 & 255;
       if ($2_1 - 127 >>> 0 > 23) {
        break label$9
       }
       $2_1 = 1 << 150 - $2_1;
       $9_1 = $2_1 & $5_1 ? ($5_1 & $2_1 - 1 ? $9_1 : Math_fround(-$9_1)) : $9_1;
      }
      if (($5_1 | 0) > -1) {
       break label$2
      }
      return Math_fround(Math_fround(1.0) / $9_1);
     }
     if (($6_1 | 0) <= -1) {
      $2_1 = $5_1 >>> 23 & 255;
      if ($2_1 >>> 0 < 127) {
       break label$1
      }
      label$11 : {
       if ($2_1 >>> 0 <= 150) {
        $3_1 = 1 << 150 - $2_1;
        if ($5_1 & $3_1 - 1) {
         break label$1
        }
        $2_1 = 65536;
        if ($3_1 & $5_1) {
         break label$11
        }
       }
       $2_1 = 0;
      }
      $6_1 = $6_1 & 2147483647;
     }
     if ($6_1 >>> 0 > 8388607) {
      break label$3
     }
     $6_1 = ((wasm2js_scratch_store_f32(Math_fround($0_1 * Math_fround(8388608.0))), wasm2js_scratch_load_i32(2)) & 2147483647) - 192937984 | 0;
    }
    $8_1 = $6_1 - 1060306944 | 0;
    $3_1 = $8_1 >>> 15 & 240;
    $4_1 = HEAPF64[$3_1 + 6672 >> 3] * +(wasm2js_scratch_store_i32(2, $6_1 - ($8_1 & -8388608) | 0), wasm2js_scratch_load_f32()) + -1.0;
    $7_1 = $4_1 * $4_1;
    $7_1 = ((HEAPF64[867] + HEAPF64[866] * $4_1) * ($7_1 * $7_1) + ($7_1 * (HEAPF64[869] + HEAPF64[868] * $4_1) + (HEAPF64[$3_1 + 6680 >> 3] + +($8_1 >> 23) + $4_1 * HEAPF64[870]))) * +$1_1;
    wasm2js_scratch_store_f64(+$7_1);
    $3_1 = wasm2js_scratch_load_i32(1) | 0;
    wasm2js_scratch_load_i32(0) | 0;
    label$13 : {
     $3_1 = $3_1 & 2147450880;
     if (($3_1 | 0) == 1079967744 | $3_1 >>> 0 < 1079967744) {
      break label$13
     }
     if ($7_1 > 127.99999995700433) {
      return Math_fround(($2_1 ? Math_fround(-1584563250285286751870879.0e5) : Math_fround(1584563250285286751870879.0e5)) * Math_fround(1584563250285286751870879.0e5))
     }
     if (!($7_1 <= -150.0)) {
      break label$13
     }
     return Math_fround(($2_1 ? Math_fround(-2.524354896707238e-29) : Math_fround(2.524354896707238e-29)) * Math_fround(2.524354896707238e-29));
    }
    $10_1 = $7_1;
    $4_1 = HEAPF64[903];
    $7_1 = $7_1 + $4_1;
    $4_1 = $10_1 - ($7_1 - $4_1);
    $10_1 = $4_1 * $4_1 * (HEAPF64[905] + HEAPF64[904] * $4_1) + ($4_1 * HEAPF64[906] + 1.0);
    wasm2js_scratch_store_f64(+$7_1);
    wasm2js_scratch_load_i32(1) | 0;
    $5_1 = wasm2js_scratch_load_i32(0) | 0;
    $8_1 = $2_1 + $5_1 | 0;
    $8_1 = $8_1 << 15;
    $3_1 = (($5_1 & 31) << 3) + 6968 | 0;
    $2_1 = HEAP32[$3_1 >> 2];
    $3_1 = HEAP32[$3_1 + 4 >> 2] + $8_1 | 0;
    wasm2js_scratch_store_i32(0, $2_1 | 0);
    wasm2js_scratch_store_i32(1, ($2_1 >>> 0 > $2_1 >>> 0 ? $3_1 + 1 | 0 : $3_1) | 0);
    $9_1 = Math_fround($10_1 * +wasm2js_scratch_load_f64());
   }
   return $9_1;
  }
  $0_1 = Math_fround($0_1 - $0_1);
  return Math_fround($0_1 / $0_1);
 }
 
 function $52($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $5_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
  $2_1 = $5_1 >>> 23 & 255;
  if (($2_1 | 0) == 255) {
   $0_1 = Math_fround($0_1 * Math_fround(6.2831854820251465));
   return Math_fround($0_1 / $0_1);
  }
  $1_1 = $5_1 << 1;
  if ($1_1 >>> 0 > 2173837238) {
   label$3 : {
    if (!$2_1) {
     $2_1 = 0;
     $1_1 = $5_1 << 9;
     if (($1_1 | 0) >= 0) {
      while (1) {
       $2_1 = $2_1 - 1 | 0;
       $1_1 = $1_1 << 1;
       if (($1_1 | 0) > -1) {
        continue
       }
       break;
      }
     }
     $1_1 = $5_1 << 1 - $2_1;
     break label$3;
    }
    $1_1 = $5_1 & 8388607 | 8388608;
   }
   $3_1 = $1_1 - 13176795 | 0;
   $4_1 = ($3_1 | 0) > -1;
   if (($2_1 | 0) > 129) {
    while (1) {
     label$9 : {
      if (!($4_1 & 1)) {
       break label$9
      }
      $1_1 = $3_1;
      if ($1_1) {
       break label$9
      }
      return Math_fround($0_1 * Math_fround(0.0));
     }
     $1_1 = $1_1 << 1;
     $3_1 = $1_1 - 13176795 | 0;
     $4_1 = ($3_1 | 0) > -1;
     $2_1 = $2_1 - 1 | 0;
     if (($2_1 | 0) > 129) {
      continue
     }
     break;
    };
    $2_1 = 129;
   }
   label$10 : {
    if (!$4_1) {
     break label$10
    }
    $1_1 = $3_1;
    if ($1_1) {
     break label$10
    }
    return Math_fround($0_1 * Math_fround(0.0));
   }
   label$11 : {
    if ($1_1 >>> 0 > 8388607) {
     $4_1 = $1_1;
     break label$11;
    }
    while (1) {
     $2_1 = $2_1 - 1 | 0;
     $3_1 = $1_1 >>> 0 < 4194304;
     $4_1 = $1_1 << 1;
     $1_1 = $4_1;
     if ($3_1) {
      continue
     }
     break;
    };
   }
   $3_1 = $5_1 & -2147483648;
   if (($2_1 | 0) >= 1) {
    $1_1 = $4_1 - 8388608 | $2_1 << 23
   } else {
    $1_1 = $4_1 >>> 1 - $2_1 | 0
   }
   return wasm2js_scratch_store_i32(2, $1_1 | $3_1), wasm2js_scratch_load_f32();
  }
  return ($1_1 | 0) == -2121130058 ? Math_fround($0_1 * Math_fround(0.0)) : $0_1;
 }
 
 function $53($0_1) {
  var $1_1 = 0;
  HEAP32[5164] = HEAP32[5164] + 1;
  $0_1 = $3($0_1 + 19 | 0);
  if ($0_1) {
   $1_1 = $0_1 + 19 & -16;
   HEAP32[$1_1 - 4 >> 2] = $0_1;
  }
  return $1_1;
 }
 
 function $54($0_1) {
  if ($0_1) {
   HEAP32[5165] = HEAP32[5165] + 1;
   $4(HEAP32[$0_1 - 4 >> 2]);
  }
 }
 
 function $55($0_1) {
  var $1_1 = 0;
  HEAP32[$0_1 + 132 >> 2] = 0;
  HEAP32[$0_1 + 136 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 7304;
  HEAP32[$0_1 + 188 >> 2] = 0;
  HEAP32[$0_1 + 192 >> 2] = 0;
  HEAP32[$0_1 + 180 >> 2] = 0;
  HEAP32[$0_1 + 184 >> 2] = 1566444395;
  HEAP32[$0_1 + 164 >> 2] = 1065353216;
  HEAP32[$0_1 + 168 >> 2] = 1065353216;
  HEAP32[$0_1 + 276 >> 2] = 0;
  HEAP32[$0_1 + 280 >> 2] = 0;
  HEAP32[$0_1 + 268 >> 2] = 1065353216;
  HEAP32[$0_1 + 272 >> 2] = 0;
  HEAP32[$0_1 + 260 >> 2] = -1;
  HEAP32[$0_1 + 264 >> 2] = -1;
  HEAP32[$0_1 + 252 >> 2] = 1;
  HEAP32[$0_1 + 256 >> 2] = 0;
  HEAP32[$0_1 + 244 >> 2] = 1036831949;
  HEAP32[$0_1 + 248 >> 2] = 1176256512;
  HEAP32[$0_1 + 236 >> 2] = 0;
  HEAP32[$0_1 + 240 >> 2] = 0;
  HEAP32[$0_1 + 228 >> 2] = 1056964608;
  HEAP32[$0_1 + 232 >> 2] = 0;
  HEAP32[$0_1 + 220 >> 2] = 1;
  HEAP32[$0_1 + 224 >> 2] = 0;
  HEAP32[$0_1 + 212 >> 2] = -1;
  HEAP32[$0_1 + 216 >> 2] = -1;
  HEAP32[$0_1 + 204 >> 2] = 1;
  HEAP32[$0_1 + 208 >> 2] = -1;
  $1_1 = $0_1 + 140 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 148 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 156 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 172 | 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 196 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0_1 + 300 | 0] = 1;
  HEAP32[$0_1 + 304 >> 2] = 0;
  HEAP32[$0_1 + 296 >> 2] = 0;
  $1_1 = $0_1 + 288 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 16 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 24 >> 2] = 1065353216;
  $1_1 = $0_1 + 28 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 36 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 44 >> 2] = 1065353216;
  $1_1 = $0_1 + 48 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 56 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 - -64 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 72 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 80 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 88 >> 2] = 1065353216;
  $1_1 = $0_1 + 92 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 100 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 112 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 108 >> 2] = 1065353216;
  $1_1 = $0_1 + 120 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 128 >> 2] = 0;
  return $0_1;
 }
 
 function $56($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 7304;
  $57($0_1 + 284 | 0);
  return $0_1 | 0;
 }
 
 function $57($0_1) {
  $96($0_1);
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP8[$0_1 + 16 | 0] = 1;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = 0;
 }
 
 function $58($0_1) {
  $0_1 = $0_1 | 0;
  $54($56($0_1));
 }
 
 function $59($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 200 >> 2] = $1_1;
  HEAP32[$0_1 + 192 >> 2] = $1_1;
  HEAP32[$0_1 + 304 >> 2] = HEAP32[$0_1 + 304 >> 2] + 1;
 }
 
 function $60($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 + 288 >> 2];
  return ($2_1 | 0) <= ($61($2_1, HEAP32[$0_1 + 296 >> 2], $1_1) | 0) | 0;
 }
 
 function $61($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $4_1 = ($0_1 | 0) > 0 ? $0_1 : 0;
  while (1) {
   label$2 : {
    if (($3_1 | 0) != ($4_1 | 0)) {
     if (HEAP32[$1_1 >> 2] != ($2_1 | 0)) {
      break label$2
     }
     $0_1 = $3_1;
    }
    return $0_1;
   }
   $1_1 = $1_1 + 4 | 0;
   $3_1 = $3_1 + 1 | 0;
   continue;
  };
 }
 
 function $62($0_1) {
  $0_1 = $0_1 | 0;
  return 264;
 }
 
 function $63($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $64($0_1 + 4 | 0, $1_1 + 16 | 0);
  $64($0_1 + 68 | 0, $1_1 + 80 | 0);
  $65($0_1 + 132 | 0, $1_1 + 144 | 0);
  $65($0_1 + 148 | 0, $1_1 + 160 | 0);
  $65($0_1 + 164 | 0, $1_1 + 176 | 0);
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 232 >> 2] = HEAP32[$0_1 + 180 >> 2];
  HEAPF32[$1_1 + 192 >> 2] = HEAPF32[$0_1 + 184 >> 2];
  $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, HEAP32[$0_1 + 192 >> 2]) | 0;
  $4_1 = HEAP32[$0_1 + 228 >> 2];
  HEAP32[$1_1 + 196 >> 2] = HEAP32[$0_1 + 224 >> 2];
  HEAP32[$1_1 + 200 >> 2] = $4_1;
  $4_1 = HEAP32[$0_1 + 212 >> 2];
  HEAP32[$1_1 + 240 >> 2] = HEAP32[$0_1 + 208 >> 2];
  HEAP32[$1_1 + 244 >> 2] = $4_1;
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  HEAP32[$1_1 + 236 >> 2] = HEAP32[$0_1 + 204 >> 2];
  HEAP32[$1_1 + 248 >> 2] = HEAP32[$0_1 + 220 >> 2];
  HEAPF32[$1_1 + 204 >> 2] = HEAPF32[$0_1 + 236 >> 2];
  HEAPF32[$1_1 + 208 >> 2] = HEAPF32[$0_1 + 244 >> 2];
  HEAPF32[$1_1 + 212 >> 2] = HEAPF32[$0_1 + 248 >> 2];
  HEAPF32[$1_1 + 216 >> 2] = HEAPF32[$0_1 + 232 >> 2];
  HEAP32[$1_1 + 252 >> 2] = HEAP32[$0_1 + 252 >> 2];
  $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 40 >> 2]]($2_1, $0_1) | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0;
  HEAP32[$1_1 + 12 >> 2] = $4_1;
  if ($4_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 48 >> 2]]($2_1, $3_1)
  }
  HEAPF32[$1_1 + 220 >> 2] = HEAPF32[$0_1 + 268 >> 2];
  $2_1 = HEAP32[$0_1 + 280 >> 2];
  $3_1 = HEAP32[$0_1 + 276 >> 2];
  $0_1 = HEAP32[$0_1 + 272 >> 2];
  HEAP32[$1_1 + 260 >> 2] = 0;
  HEAP32[$1_1 + 224 >> 2] = $0_1;
  HEAP32[$1_1 + 228 >> 2] = $3_1;
  HEAP32[$1_1 + 256 >> 2] = $2_1;
  return 7340;
 }
 
 function $64($0_1, $1_1) {
  $67($0_1, $1_1);
  $65($0_1 + 48 | 0, $1_1 + 48 | 0);
 }
 
 function $65($0_1, $1_1) {
  var $2_1 = 0;
  while (1) {
   if (($2_1 | 0) != 16) {
    HEAPF32[$1_1 + $2_1 >> 2] = HEAPF32[$0_1 + $2_1 >> 2];
    $2_1 = $2_1 + 4 | 0;
    continue;
   }
   break;
  };
 }
 
 function $66($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2_1 = ((((wasm2js_i32$1 = $1_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 16 >> 2]]($0_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
  (((((wasm2js_i32$3 = $1_1, wasm2js_i32$2 = $2_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1, HEAP32[$2_1 + 8 >> 2], $1_1) | 0), wasm2js_i32$4 = 1245859651), wasm2js_i32$5 = $0_1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
 }
 
 function $67($0_1, $1_1) {
  var $2_1 = 0;
  while (1) {
   if (($2_1 | 0) != 48) {
    $65($0_1 + $2_1 | 0, $1_1 + $2_1 | 0);
    $2_1 = $2_1 + 16 | 0;
    continue;
   }
   break;
  };
 }
 
 function $68($0_1, $1_1) {
  if (!(HEAPU8[$0_1 + 204 | 0] & 3 ? !$1_1 : 0)) {
   if ((HEAP32[$0_1 + 220 >> 2] & -2) != 4) {
    HEAP32[$0_1 + 220 >> 2] = 1
   }
   HEAP32[$0_1 + 224 >> 2] = 0;
  }
 }
 
 function $69($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0);
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  $4_1 = $3_1 + 44 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $3_1 + 56 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 52 >> 2] = 1065353216;
  $4_1 = $3_1 - -64 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $3_1 + 76 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 72 >> 2] = 1065353216;
  $4_1 = $3_1 + 84 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 92 >> 2] = 0;
  HEAP32[$3_1 + 36 >> 2] = 0;
  HEAP32[$3_1 + 40 >> 2] = 0;
  HEAP32[$3_1 + 32 >> 2] = 1065353216;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $3_1 + 32 | 0, $3_1 + 16 | 0, $3_1);
  $8_1 = HEAPF32[$3_1 >> 2];
  $9_1 = HEAPF32[$3_1 + 16 >> 2];
  $5_1 = Math_fround($8_1 - $9_1);
  $7_1 = Math_fround($5_1 * $5_1);
  $5_1 = HEAPF32[$3_1 + 4 >> 2];
  $10_1 = HEAPF32[$3_1 + 20 >> 2];
  $6_1 = Math_fround($5_1 - $10_1);
  $12_1 = Math_fround($7_1 + Math_fround($6_1 * $6_1));
  $6_1 = HEAPF32[$3_1 + 8 >> 2];
  $7_1 = HEAPF32[$3_1 + 24 >> 2];
  $11_1 = Math_fround($6_1 - $7_1);
  HEAPF32[$2_1 >> 2] = Math_fround(Math_sqrt(Math_fround($12_1 + Math_fround($11_1 * $11_1)))) * Math_fround(.5);
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAPF32[$1_1 + 8 >> 2] = Math_fround($7_1 + $6_1) * Math_fround(.5);
  HEAPF32[$1_1 + 4 >> 2] = Math_fround($10_1 + $5_1) * Math_fround(.5);
  HEAPF32[$1_1 >> 2] = Math_fround($9_1 + $8_1) * Math_fround(.5);
  global$0 = $3_1 + 96 | 0;
 }
 
 function $70($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  return Math_fround(Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 16 >> 2]]($0_1)) * $1_1));
 }
 
 function $71($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = Math_fround(0), $3_1 = Math_fround(0);
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]]($0_1, $1_1 + 16 | 0, $1_1 + 12 | 0);
  global$0 = $1_1 + 32 | 0;
  $2_1 = HEAPF32[$1_1 + 16 >> 2];
  $3_1 = Math_fround($2_1 * $2_1);
  $2_1 = HEAPF32[$1_1 + 20 >> 2];
  $3_1 = Math_fround($3_1 + Math_fround($2_1 * $2_1));
  $2_1 = HEAPF32[$1_1 + 24 >> 2];
  return Math_fround(Math_fround(Math_fround(Math_sqrt(Math_fround($3_1 + Math_fround($2_1 * $2_1)))) + HEAPF32[$1_1 + 12 >> 2]));
 }
 
 function $72($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 40 >> 2]]($2_1, $0_1) | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0;
  HEAP32[$1_1 >> 2] = $4_1;
  if ($4_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 48 >> 2]]($2_1, $3_1)
  }
  $0_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = $0_1;
  return 7387;
 }
 
 function $73($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2_1 = ((((wasm2js_i32$1 = $1_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 52 >> 2]]($0_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
  (((((wasm2js_i32$3 = $1_1, wasm2js_i32$2 = $2_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 56 >> 2]]($0_1, HEAP32[$2_1 + 8 >> 2], $1_1) | 0), wasm2js_i32$4 = 1346455635), wasm2js_i32$5 = $0_1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
 }
 
 function $74($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $75($0_1) {
  $0_1 = $0_1 | 0;
  return 12;
 }
 
 function $76($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  $8_1 = $2_1 + 4 | 0;
  $9_1 = $2_1 + 8 | 0;
  $77($7_1 - -64 | 0, HEAPF32[$2_1 >> 2], HEAPF32[$8_1 >> 2], HEAPF32[$9_1 >> 2], $1_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 64 >> 2]]($7_1 + 32 | 0, $0_1, $7_1 - -64 | 0);
  $78($7_1 + 48 | 0, $1_1, HEAPF32[$7_1 + 32 >> 2], HEAPF32[$7_1 + 36 >> 2], HEAPF32[$7_1 + 40 >> 2]);
  HEAP32[$7_1 + 12 >> 2] = 0;
  HEAPF32[$7_1 + 8 >> 2] = -HEAPF32[$7_1 + 72 >> 2];
  HEAPF32[$7_1 + 4 >> 2] = -HEAPF32[$7_1 + 68 >> 2];
  HEAPF32[$7_1 >> 2] = -HEAPF32[$7_1 + 64 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 64 >> 2]]($7_1 + 16 | 0, $0_1, $7_1);
  $78($7_1 + 32 | 0, $1_1, HEAPF32[$7_1 + 16 >> 2], HEAPF32[$7_1 + 20 >> 2], HEAPF32[$7_1 + 24 >> 2]);
  $0_1 = $7_1 + 56 | 0;
  HEAPF32[$3_1 >> 2] = Math_fround(Math_fround(HEAPF32[$7_1 + 48 >> 2] * HEAPF32[$2_1 >> 2]) + Math_fround(HEAPF32[$7_1 + 52 >> 2] * HEAPF32[$8_1 >> 2])) + Math_fround(HEAPF32[$0_1 >> 2] * HEAPF32[$9_1 >> 2]);
  $1_1 = $7_1 + 40 | 0;
  HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(HEAPF32[$7_1 + 32 >> 2] * HEAPF32[$2_1 >> 2]) + Math_fround(HEAPF32[$7_1 + 36 >> 2] * HEAPF32[$8_1 >> 2])) + Math_fround(HEAPF32[$1_1 >> 2] * HEAPF32[$9_1 >> 2]);
  $9_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $6_1 + 8 | 0;
  $8_1 = $2_1;
  HEAP32[$8_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $9_1;
  $8_1 = HEAP32[$7_1 + 36 >> 2];
  HEAP32[$6_1 >> 2] = HEAP32[$7_1 + 32 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $8_1;
  $9_1 = HEAP32[$0_1 + 4 >> 2];
  $8_1 = $5_1 + 8 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $9_1;
  $9_1 = HEAP32[$7_1 + 52 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$7_1 + 48 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $9_1;
  $10_1 = HEAPF32[$3_1 >> 2];
  $11_1 = HEAPF32[$4_1 >> 2];
  if ($10_1 > $11_1) {
   HEAPF32[$3_1 >> 2] = $11_1;
   HEAPF32[$4_1 >> 2] = $10_1;
   $3_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $3_1;
   $0_1 = HEAP32[$7_1 + 52 >> 2];
   HEAP32[$6_1 >> 2] = HEAP32[$7_1 + 48 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$7_1 + 36 >> 2];
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 + 32 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$8_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$8_1 + 4 >> 2] = $0_1;
  }
  global$0 = $7_1 + 80 | 0;
 }
 
 function $77($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $5_1 = Math_fround(Math_fround(HEAPF32[$4_1 >> 2] * $1_1) + Math_fround(HEAPF32[$4_1 + 16 >> 2] * $2_1));
  $6_1 = Math_fround(HEAPF32[$4_1 + 32 >> 2] * $3_1);
  $7_1 = Math_fround(Math_fround(HEAPF32[$4_1 + 4 >> 2] * $1_1) + Math_fround(HEAPF32[$4_1 + 20 >> 2] * $2_1));
  $8_1 = Math_fround(HEAPF32[$4_1 + 36 >> 2] * $3_1);
  $9_1 = HEAPF32[$4_1 + 40 >> 2];
  $10_1 = HEAPF32[$4_1 + 24 >> 2];
  $11_1 = HEAPF32[$4_1 + 8 >> 2];
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 + 8 >> 2] = Math_fround(Math_fround($11_1 * $1_1) + Math_fround($10_1 * $2_1)) + Math_fround($9_1 * $3_1);
  HEAPF32[$0_1 + 4 >> 2] = $7_1 + $8_1;
  HEAPF32[$0_1 >> 2] = $5_1 + $6_1;
 }
 
 function $78($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $80($5_1, $2_1, $3_1, $4_1, HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2], HEAPF32[$1_1 + 16 >> 2], HEAPF32[$1_1 + 20 >> 2], HEAPF32[$1_1 + 24 >> 2], HEAPF32[$1_1 + 32 >> 2], HEAPF32[$1_1 + 36 >> 2], HEAPF32[$1_1 + 40 >> 2]);
  $2_1 = HEAPF32[$5_1 >> 2];
  $3_1 = HEAPF32[$5_1 + 4 >> 2];
  $4_1 = HEAPF32[$5_1 + 8 >> 2];
  $6_1 = HEAPF32[$1_1 + 48 >> 2];
  $7_1 = HEAPF32[$1_1 + 52 >> 2];
  $8_1 = HEAPF32[$1_1 + 56 >> 2];
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 + 8 >> 2] = $4_1 + $8_1;
  HEAPF32[$0_1 + 4 >> 2] = $3_1 + $7_1;
  HEAPF32[$0_1 >> 2] = $2_1 + $6_1;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $79($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = Math_fround(0), $13_1 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19_1 = Math_fround(0);
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    switch (HEAP32[$1_1 + 4 >> 2]) {
    case 8:
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[$0_1 + 4 >> 2] = 0;
     $0_1 = $0_1 + 8 | 0;
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[$0_1 + 4 >> 2] = 0;
     break label$1;
    case 0:
     HEAP32[$0_1 + 12 >> 2] = 0;
     $4_1 = HEAPF32[$1_1 + 32 >> 2];
     HEAPF32[$0_1 >> 2] = HEAPF32[$2_1 >> 2] >= Math_fround(0.0) ? $4_1 : Math_fround(-$4_1);
     $4_1 = HEAPF32[$1_1 + 40 >> 2];
     HEAPF32[$0_1 + 8 >> 2] = HEAPF32[$2_1 + 8 >> 2] >= Math_fround(0.0) ? $4_1 : Math_fround(-$4_1);
     $4_1 = HEAPF32[$1_1 + 36 >> 2];
     HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$2_1 + 4 >> 2] >= Math_fround(0.0) ? $4_1 : Math_fround(-$4_1);
     break label$1;
    case 1:
     $7_1 = HEAPF32[$2_1 >> 2];
     $5_1 = HEAPF32[$2_1 + 4 >> 2];
     $6_1 = HEAPF32[$2_1 + 8 >> 2];
     $2_1 = $1_1 + 60 | 0;
     $80($3_1 + 32 | 0, $7_1, $5_1, $6_1, HEAPF32[$2_1 >> 2], HEAPF32[$1_1 - -64 >> 2], HEAPF32[$1_1 + 68 >> 2], HEAPF32[$1_1 + 76 >> 2], HEAPF32[$1_1 + 80 >> 2], HEAPF32[$1_1 + 84 >> 2], HEAPF32[$1_1 + 92 >> 2], HEAPF32[$1_1 + 96 >> 2], HEAPF32[$1_1 + 100 >> 2]);
     HEAP32[$0_1 + 12 >> 2] = 0;
     $4_1 = HEAPF32[$3_1 + 32 >> 2];
     $5_1 = HEAPF32[$3_1 + 36 >> 2];
     $1_1 = $4_1 < $5_1;
     $1_1 = $2_1 + ((HEAPF32[$3_1 + 40 >> 2] > ($1_1 ? $5_1 : $4_1) ? 2 : $1_1) << 4) | 0;
     HEAPF32[$0_1 + 8 >> 2] = HEAPF32[$1_1 + 8 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $2_1;
     break label$1;
    case 13:
     $13_1 = $1_1 + 40 | 0;
     $18_1 = HEAP32[$13_1 + 4 >> 2];
     $8_1 = $3_1 + 40 | 0;
     HEAP32[$8_1 >> 2] = HEAP32[$13_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $18_1;
     $8_1 = HEAP32[$1_1 + 36 >> 2];
     HEAP32[$3_1 + 32 >> 2] = HEAP32[$1_1 + 32 >> 2];
     HEAP32[$3_1 + 36 >> 2] = $8_1;
     HEAP32[$3_1 + 28 >> 2] = 0;
     HEAPF32[$3_1 + 16 >> 2] = HEAPF32[$2_1 >> 2];
     $7_1 = HEAPF32[$2_1 + 4 >> 2];
     HEAPF32[$3_1 + 20 >> 2] = $7_1;
     $4_1 = HEAPF32[$2_1 + 8 >> 2];
     HEAPF32[$3_1 + 24 >> 2] = $4_1;
     $2_1 = 1;
     $8_1 = 2;
     label$10 : {
      label$11 : {
       label$12 : {
        $1_1 = HEAP32[$1_1 + 56 >> 2];
        switch ($1_1 - 1 | 0) {
        case 1:
         break label$11;
        case 0:
         break label$12;
        default:
         break label$10;
        };
       }
       $2_1 = 0;
       $11_1 = 1;
       break label$10;
      }
      $2_1 = 0;
      $11_1 = 2;
      $8_1 = 1;
      $4_1 = $7_1;
     }
     $7_1 = HEAPF32[($3_1 + 32 | 0) + ($1_1 << 2) >> 2];
     $1_1 = $2_1 << 2;
     $10_1 = HEAPF32[($1_1 | $3_1 + 32) >> 2];
     $6_1 = HEAPF32[($1_1 | $3_1 + 16) >> 2];
     $9_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($4_1 * $4_1))));
     label$13 : {
      if ($9_1 != Math_fround(0.0)) {
       $5_1 = Math_fround($10_1 / $9_1);
       HEAPF32[($2_1 << 2 | $3_1) >> 2] = $6_1 * $5_1;
       $1_1 = $11_1 << 2;
       HEAPF32[$1_1 + $3_1 >> 2] = HEAPF32[$1_1 + ($3_1 + 16 | 0) >> 2] < Math_fround(0.0) ? Math_fround(-$7_1) : $7_1;
       $5_1 = Math_fround($4_1 * $5_1);
       break label$13;
      }
      HEAPF32[($2_1 << 2 | $3_1) >> 2] = $10_1;
      $1_1 = $11_1 << 2;
      HEAPF32[$1_1 + $3_1 >> 2] = HEAPF32[$1_1 + ($3_1 + 16 | 0) >> 2] < Math_fround(0.0) ? Math_fround(-$7_1) : $7_1;
     }
     $4_1 = HEAPF32[$3_1 >> 2];
     HEAPF32[($8_1 << 2) + $3_1 >> 2] = $5_1;
     HEAP32[$0_1 + 12 >> 2] = 0;
     HEAPF32[$0_1 >> 2] = $4_1;
     $1_1 = HEAP32[$3_1 + 8 >> 2];
     HEAP32[$0_1 + 4 >> 2] = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$0_1 + 8 >> 2] = $1_1;
     break label$1;
    case 10:
     $11_1 = HEAP32[$1_1 + 56 >> 2];
     $8_1 = $11_1 << 2;
     $14_1 = HEAPF32[($8_1 + $1_1 | 0) + 32 >> 2];
     $4_1 = Math_fround(1.0);
     $7_1 = HEAPF32[$2_1 >> 2];
     $5_1 = $7_1;
     $9_1 = Math_fround($5_1 * $5_1);
     $5_1 = HEAPF32[$2_1 + 4 >> 2];
     $10_1 = HEAPF32[$2_1 + 8 >> 2];
     $6_1 = $10_1;
     $6_1 = Math_fround(Math_fround($9_1 + Math_fround($5_1 * $5_1)) + Math_fround($6_1 * $6_1));
     if (!($6_1 < Math_fround(1.4210854715202004e-14))) {
      $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($6_1)));
      $15_1 = Math_fround($4_1 * $10_1);
      $16_1 = Math_fround($4_1 * $5_1);
      $4_1 = Math_fround($4_1 * $7_1);
     }
     $1_1 = $3_1 + 40 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$3_1 + 32 >> 2] = 0;
     HEAP32[$3_1 + 36 >> 2] = 0;
     HEAPF32[$8_1 + ($3_1 + 32 | 0) >> 2] = $14_1;
     $5_1 = Math_fround(-999999984306749440.0);
     $7_1 = Math_fround(0.0);
     $10_1 = Math_fround(0.0);
     $6_1 = HEAPF32[$3_1 + 32 >> 2];
     $9_1 = HEAPF32[$3_1 + 36 >> 2];
     $12_1 = HEAPF32[$1_1 >> 2];
     $17_1 = Math_fround(Math_fround(Math_fround($6_1 * $4_1) + Math_fround($9_1 * $16_1)) + Math_fround($12_1 * $15_1));
     if ($17_1 > Math_fround(-999999984306749440.0)) {
      $7_1 = $9_1;
      $10_1 = $12_1;
      $19_1 = $6_1;
      $5_1 = $17_1;
     }
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$3_1 + 32 >> 2] = 0;
     HEAP32[$3_1 + 36 >> 2] = 0;
     HEAPF32[($3_1 + 32 | 0) + ($11_1 << 2) >> 2] = -$14_1;
     $6_1 = HEAPF32[$1_1 >> 2];
     $9_1 = HEAPF32[$3_1 + 32 >> 2];
     $12_1 = HEAPF32[$3_1 + 36 >> 2];
     HEAP32[$0_1 + 12 >> 2] = 0;
     $1_1 = Math_fround(Math_fround(Math_fround($4_1 * $9_1) + Math_fround($16_1 * $12_1)) + Math_fround($15_1 * $6_1)) > $5_1;
     HEAPF32[$0_1 + 8 >> 2] = $1_1 ? $6_1 : $10_1;
     HEAPF32[$0_1 + 4 >> 2] = $1_1 ? $12_1 : $7_1;
     HEAPF32[$0_1 >> 2] = $1_1 ? $9_1 : $19_1;
     break label$1;
    case 5:
     $81($0_1, HEAPF32[$2_1 >> 2], HEAPF32[$2_1 + 4 >> 2], HEAPF32[$2_1 + 8 >> 2], HEAP32[$1_1 + 96 >> 2], HEAP32[$1_1 + 100 >> 2], $1_1 + 16 | 0);
     break label$1;
    case 4:
     $81($0_1, HEAPF32[$2_1 >> 2], HEAPF32[$2_1 + 4 >> 2], HEAPF32[$2_1 + 8 >> 2], HEAP32[$1_1 + 108 >> 2], HEAP32[$1_1 + 100 >> 2], $1_1 + 16 | 0);
     break label$1;
    default:
     break label$2;
    };
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 68 >> 2]]($0_1, $1_1, $2_1);
  }
  global$0 = $3_1 + 48 | 0;
 }
 
 function $80($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1) {
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 + 8 >> 2] = Math_fround(Math_fround($1_1 * $10_1) + Math_fround($2_1 * $11_1)) + Math_fround($3_1 * $12_1);
  HEAPF32[$0_1 + 4 >> 2] = Math_fround(Math_fround($1_1 * $7_1) + Math_fround($2_1 * $8_1)) + Math_fround($3_1 * $9_1);
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround($1_1 * $4_1) + Math_fround($2_1 * $5_1)) + Math_fround($3_1 * $6_1);
 }
 
 function $81($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[$7_1 + 28 >> 2] = 0;
  HEAPF32[$7_1 + 24 >> 2] = HEAPF32[$6_1 + 8 >> 2] * $3_1;
  HEAPF32[$7_1 + 20 >> 2] = HEAPF32[$6_1 + 4 >> 2] * $2_1;
  HEAPF32[$7_1 + 16 >> 2] = HEAPF32[$6_1 >> 2] * $1_1;
  $5_1 = $82($7_1 + 16 | 0, $4_1, $5_1, $7_1 + 12 | 0);
  HEAP32[$0_1 + 12 >> 2] = 0;
  $4_1 = ($5_1 << 4) + $4_1 | 0;
  HEAPF32[$0_1 + 8 >> 2] = HEAPF32[$4_1 + 8 >> 2] * HEAPF32[$6_1 + 8 >> 2];
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$4_1 + 4 >> 2] * HEAPF32[$6_1 + 4 >> 2];
  HEAPF32[$0_1 >> 2] = HEAPF32[$4_1 >> 2] * HEAPF32[$6_1 >> 2];
  global$0 = $7_1 + 32 | 0;
 }
 
 function $82($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0;
  $8_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
  $4_1 = Math_fround(-3402823466385288598117041.0e14);
  $2_1 = -1;
  while (1) {
   if (($5_1 | 0) != ($8_1 | 0)) {
    $6_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2] * HEAPF32[$0_1 >> 2]) + Math_fround(HEAPF32[$1_1 + 4 >> 2] * HEAPF32[$0_1 + 4 >> 2])) + Math_fround(HEAPF32[$1_1 + 8 >> 2] * HEAPF32[$0_1 + 8 >> 2]));
    $7_1 = $6_1 > $4_1;
    $4_1 = $7_1 ? $6_1 : $4_1;
    $2_1 = $7_1 ? $5_1 : $2_1;
    $1_1 = $1_1 + 16 | 0;
    $5_1 = $5_1 + 1 | 0;
    continue;
   }
   break;
  };
  HEAPF32[$3_1 >> 2] = $4_1;
  return $2_1;
 }
 
 function $83($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $7_1 = $2_1 + 8 | 0;
  $9_1 = HEAP32[$7_1 + 4 >> 2];
  $8_1 = $3_1 + 24 | 0;
  $5_1 = $8_1;
  HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $9_1;
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$3_1 + 16 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 20 >> 2] = $5_1;
  $4_1 = HEAPF32[$3_1 + 16 >> 2];
  $6_1 = Math_fround($4_1 * $4_1);
  $4_1 = HEAPF32[$3_1 + 20 >> 2];
  $6_1 = Math_fround($6_1 + Math_fround($4_1 * $4_1));
  $4_1 = HEAPF32[$8_1 >> 2];
  if (Math_fround($6_1 + Math_fround($4_1 * $4_1)) < Math_fround(1.4210854715202004e-14)) {
   HEAP32[$3_1 + 24 >> 2] = -1082130432;
   HEAP32[$3_1 + 28 >> 2] = 0;
   HEAP32[$3_1 + 16 >> 2] = -1082130432;
   HEAP32[$3_1 + 20 >> 2] = -1082130432;
  }
  $79($3_1, $1_1, $84($3_1 + 16 | 0));
  label$2 : {
   label$3 : {
    switch (HEAP32[$1_1 + 4 >> 2]) {
    case 8:
     $4_1 = Math_fround(HEAPF32[$1_1 + 32 >> 2] * HEAPF32[$1_1 + 16 >> 2]);
     break label$2;
    case 0:
    case 1:
    case 4:
    case 5:
    case 10:
    case 11:
    case 13:
     $4_1 = HEAPF32[$1_1 + 48 >> 2];
     break label$2;
    default:
     break label$3;
    };
   }
   $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
  }
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 + 8 >> 2] = Math_fround($4_1 * HEAPF32[$3_1 + 24 >> 2]) + HEAPF32[$3_1 + 8 >> 2];
  HEAPF32[$0_1 + 4 >> 2] = Math_fround($4_1 * HEAPF32[$3_1 + 20 >> 2]) + HEAPF32[$3_1 + 4 >> 2];
  HEAPF32[$0_1 >> 2] = Math_fround($4_1 * HEAPF32[$3_1 + 16 >> 2]) + HEAPF32[$3_1 >> 2];
  global$0 = $3_1 + 32 | 0;
 }
 
 function $84($0_1) {
  var $1_1 = Math_fround(0), $2_1 = Math_fround(0);
  $1_1 = HEAPF32[$0_1 >> 2];
  $2_1 = Math_fround($1_1 * $1_1);
  $1_1 = HEAPF32[$0_1 + 4 >> 2];
  $2_1 = Math_fround($2_1 + Math_fround($1_1 * $1_1));
  $1_1 = HEAPF32[$0_1 + 8 >> 2];
  return $139($0_1, Math_fround(Math_sqrt(Math_fround($2_1 + Math_fround($1_1 * $1_1)))));
 }
 
 function $85($0_1) {
  var $1_1 = 0;
  HEAP32[$0_1 + 12 >> 2] = -1;
  HEAP32[$0_1 + 4 >> 2] = 35;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 + 48 >> 2] = 1025758986;
  HEAP32[$0_1 + 16 >> 2] = 1065353216;
  HEAP32[$0_1 + 20 >> 2] = 1065353216;
  HEAP32[$0_1 >> 2] = 7472;
  $1_1 = $0_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  HEAP32[$1_1 + 4 >> 2] = 0;
  return $0_1;
 }
 
 function $86($0_1) {
  $0_1 = $0_1 | 0;
  abort();
 }
 
 function $87($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0);
  $2_1 = HEAPF32[$1_1 >> 2];
  $3_1 = HEAPF32[$1_1 + 4 >> 2];
  $4_1 = HEAPF32[$1_1 + 8 >> 2];
  HEAP32[$0_1 + 28 >> 2] = 0;
  HEAPF32[$0_1 + 24 >> 2] = Math_abs($4_1);
  HEAPF32[$0_1 + 20 >> 2] = Math_abs($3_1);
  HEAPF32[$0_1 + 16 >> 2] = Math_abs($2_1);
 }
 
 function $88($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 68 >> 2]]($0_1, $1_1, $2_1);
  if (Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1)) != Math_fround(0.0)) {
   $7_1 = $2_1 + 8 | 0;
   $9_1 = HEAP32[$7_1 + 4 >> 2];
   $8_1 = $3_1 + 24 | 0;
   $5_1 = $8_1;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $9_1;
   $5_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$3_1 + 16 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$3_1 + 20 >> 2] = $5_1;
   $4_1 = HEAPF32[$3_1 + 16 >> 2];
   $6_1 = Math_fround($4_1 * $4_1);
   $4_1 = HEAPF32[$3_1 + 20 >> 2];
   $6_1 = Math_fround($6_1 + Math_fround($4_1 * $4_1));
   $4_1 = HEAPF32[$8_1 >> 2];
   if (Math_fround($6_1 + Math_fround($4_1 * $4_1)) < Math_fround(1.4210854715202004e-14)) {
    HEAP32[$3_1 + 24 >> 2] = -1082130432;
    HEAP32[$3_1 + 28 >> 2] = 0;
    HEAP32[$3_1 + 16 >> 2] = -1082130432;
    HEAP32[$3_1 + 20 >> 2] = -1082130432;
   }
   $84($3_1 + 16 | 0);
   $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
   HEAP32[$3_1 + 12 >> 2] = 0;
   HEAPF32[$3_1 + 8 >> 2] = $4_1 * HEAPF32[$3_1 + 24 >> 2];
   HEAPF32[$3_1 + 4 >> 2] = $4_1 * HEAPF32[$3_1 + 20 >> 2];
   HEAPF32[$3_1 >> 2] = $4_1 * HEAPF32[$3_1 + 16 >> 2];
   $89($0_1, $3_1);
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $89($0_1, $1_1) {
  HEAPF32[$0_1 >> 2] = HEAPF32[$1_1 >> 2] + HEAPF32[$0_1 >> 2];
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$1_1 + 4 >> 2] + HEAPF32[$0_1 + 4 >> 2];
  HEAPF32[$0_1 + 8 >> 2] = HEAPF32[$1_1 + 8 >> 2] + HEAPF32[$0_1 + 8 >> 2];
  return $0_1;
 }
 
 function $90($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0);
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $7_1 = $4_1 + 72 | 0;
  while (1) {
   if (($5_1 | 0) == 12) {
    global$0 = $4_1 + 80 | 0
   } else {
    HEAP32[$7_1 >> 2] = 0;
    HEAP32[$7_1 + 4 >> 2] = 0;
    HEAP32[$4_1 + 64 >> 2] = 0;
    HEAP32[$4_1 + 68 >> 2] = 0;
    $6_1 = ($4_1 - -64 | 0) + $5_1 | 0;
    HEAP32[$6_1 >> 2] = 1065353216;
    $77($4_1 + 32 | 0, HEAPF32[$4_1 + 64 >> 2], HEAPF32[$4_1 + 68 >> 2], HEAPF32[$7_1 >> 2], $1_1);
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 64 >> 2]]($4_1 + 48 | 0, $0_1, $4_1 + 32 | 0);
    $78($4_1 + 32 | 0, $1_1, HEAPF32[$4_1 + 48 >> 2], HEAPF32[$4_1 + 52 >> 2], HEAPF32[$4_1 + 56 >> 2]);
    HEAP32[$6_1 >> 2] = -1082130432;
    $6_1 = ($4_1 + 32 | 0) + $5_1 | 0;
    HEAPF32[$3_1 + $5_1 >> 2] = $8_1 + HEAPF32[$6_1 >> 2];
    $77($4_1, HEAPF32[$4_1 + 64 >> 2], HEAPF32[$4_1 + 68 >> 2], HEAPF32[$7_1 >> 2], $1_1);
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 64 >> 2]]($4_1 + 16 | 0, $0_1, $4_1);
    $78($4_1 + 32 | 0, $1_1, HEAPF32[$4_1 + 16 >> 2], HEAPF32[$4_1 + 20 >> 2], HEAPF32[$4_1 + 24 >> 2]);
    HEAPF32[$2_1 + $5_1 >> 2] = HEAPF32[$6_1 >> 2] - $8_1;
    $5_1 = $5_1 + 4 | 0;
    continue;
   }
   break;
  };
 }
 
 function $91($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 7608;
  $57($0_1 + 44 | 0);
  $92($0_1 + 24 | 0);
  $57($0_1 + 4 | 0);
  return $0_1 | 0;
 }
 
 function $92($0_1) {
  $144($0_1, HEAP32[$0_1 + 4 >> 2]);
  $96($0_1);
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP8[$0_1 + 16 | 0] = 1;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = 0;
 }
 
 function $93($0_1) {
  $0_1 = $0_1 | 0;
  $54($91($0_1));
 }
 
 function $94($0_1) {
  var $1_1 = Math_fround(0), $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = HEAP32[$0_1 + 28 >> 2];
  $8_1 = (($4_1 | 0) > 0 ? $4_1 : 0) + 1 | 0;
  label$1 : {
   while (1) {
    label$3 : {
     label$4 : {
      label$5 : {
       switch ($5_1 | 0) {
       case 0:
        $1_1 = Math_fround(HEAPF32[$0_1 + 88 >> 2] + HEAPF32[$0_1 + 72 >> 2]);
        $2_1 = Math_fround(HEAPF32[$0_1 + 84 >> 2] + HEAPF32[$0_1 + 68 >> 2]);
        $3_1 = Math_fround(HEAPF32[$0_1 + 80 >> 2] + HEAPF32[$0_1 + 64 >> 2]);
        break label$4;
       case 1:
        $1_1 = Math_fround(HEAPF32[$0_1 + 72 >> 2] - HEAPF32[$0_1 + 88 >> 2]);
        $2_1 = Math_fround(HEAPF32[$0_1 + 84 >> 2] + HEAPF32[$0_1 + 68 >> 2]);
        $3_1 = Math_fround(HEAPF32[$0_1 + 80 >> 2] + HEAPF32[$0_1 + 64 >> 2]);
        break label$4;
       case 2:
        $1_1 = Math_fround(HEAPF32[$0_1 + 88 >> 2] + HEAPF32[$0_1 + 72 >> 2]);
        $2_1 = Math_fround(HEAPF32[$0_1 + 68 >> 2] - HEAPF32[$0_1 + 84 >> 2]);
        $3_1 = Math_fround(HEAPF32[$0_1 + 80 >> 2] + HEAPF32[$0_1 + 64 >> 2]);
        break label$4;
       case 3:
        $1_1 = Math_fround(HEAPF32[$0_1 + 72 >> 2] - HEAPF32[$0_1 + 88 >> 2]);
        $2_1 = Math_fround(HEAPF32[$0_1 + 68 >> 2] - HEAPF32[$0_1 + 84 >> 2]);
        $3_1 = Math_fround(HEAPF32[$0_1 + 80 >> 2] + HEAPF32[$0_1 + 64 >> 2]);
        break label$4;
       case 4:
        $1_1 = Math_fround(HEAPF32[$0_1 + 88 >> 2] + HEAPF32[$0_1 + 72 >> 2]);
        $2_1 = Math_fround(HEAPF32[$0_1 + 84 >> 2] + HEAPF32[$0_1 + 68 >> 2]);
        $3_1 = Math_fround(HEAPF32[$0_1 + 64 >> 2] - HEAPF32[$0_1 + 80 >> 2]);
        break label$4;
       case 5:
        $1_1 = Math_fround(HEAPF32[$0_1 + 72 >> 2] - HEAPF32[$0_1 + 88 >> 2]);
        $2_1 = Math_fround(HEAPF32[$0_1 + 84 >> 2] + HEAPF32[$0_1 + 68 >> 2]);
        $3_1 = Math_fround(HEAPF32[$0_1 + 64 >> 2] - HEAPF32[$0_1 + 80 >> 2]);
        break label$4;
       case 6:
        $1_1 = Math_fround(HEAPF32[$0_1 + 88 >> 2] + HEAPF32[$0_1 + 72 >> 2]);
        $2_1 = Math_fround(HEAPF32[$0_1 + 68 >> 2] - HEAPF32[$0_1 + 84 >> 2]);
        $3_1 = Math_fround(HEAPF32[$0_1 + 64 >> 2] - HEAPF32[$0_1 + 80 >> 2]);
        break label$4;
       case 8:
        break label$3;
       case 7:
        break label$5;
       default:
        break label$4;
       };
      }
      $1_1 = Math_fround(HEAPF32[$0_1 + 72 >> 2] - HEAPF32[$0_1 + 88 >> 2]);
      $2_1 = Math_fround(HEAPF32[$0_1 + 68 >> 2] - HEAPF32[$0_1 + 84 >> 2]);
      $3_1 = Math_fround(HEAPF32[$0_1 + 64 >> 2] - HEAPF32[$0_1 + 80 >> 2]);
     }
     $7_1 = 20;
     $4_1 = $8_1;
     while (1) {
      $4_1 = $4_1 - 1 | 0;
      if ($4_1) {
       $6_1 = HEAP32[$0_1 + 36 >> 2] + $7_1 | 0;
       $7_1 = $7_1 + 36 | 0;
       if (!(Math_fround(HEAPF32[$6_1 + 12 >> 2] + Math_fround(Math_fround(Math_fround($3_1 * HEAPF32[$6_1 >> 2]) + Math_fround($2_1 * HEAPF32[$6_1 + 4 >> 2])) + Math_fround($1_1 * HEAPF32[$6_1 + 8 >> 2]))) > Math_fround(0.0))) {
        continue
       }
       break label$1;
      }
      break;
     };
     $5_1 = $5_1 + 1 | 0;
     continue;
    }
    break;
   };
   $5_1 = 8;
  }
  return $5_1 >>> 0 > 7;
 }
 
 function $95($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  label$1 : {
   if (+Math_fround(Math_abs($0_1)) > 1.0e-06) {
    break label$1
   }
   if (+Math_fround(Math_abs($1_1)) > 1.0e-06) {
    break label$1
   }
   if (+Math_fround(Math_abs($2_1)) > 1.0e-06) {
    break label$1
   }
   $3_1 = 1;
  }
  return $3_1;
 }
 
 function $96($0_1) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 + 12 >> 2];
  if ($1_1) {
   if (HEAPU8[$0_1 + 16 | 0]) {
    $54($1_1)
   }
   HEAP32[$0_1 + 12 >> 2] = 0;
  }
 }
 
 function $97($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = -1;
  label$1 : {
   $3_1 = ($2_1 << 16) + ($1_1 << 16 >> 16) & HEAP32[$0_1 + 48 >> 2] - 1;
   if ($3_1 >>> 0 >= HEAPU32[$0_1 + 4 >> 2]) {
    break label$1
   }
   $3_1 = HEAP32[$0_1 + 12 >> 2] + ($3_1 << 2) | 0;
   $6_1 = $1_1 & 65535;
   while (1) {
    $4_1 = -1;
    $1_1 = HEAP32[$3_1 >> 2];
    if (($1_1 | 0) == -1) {
     break label$1
    }
    $3_1 = $1_1 << 2;
    $5_1 = $3_1 + HEAP32[$0_1 + 72 >> 2] | 0;
    if (HEAPU16[$5_1 >> 1] == ($6_1 | 0)) {
     $4_1 = $1_1;
     if (HEAPU16[$5_1 + 2 >> 1] == ($2_1 & 65535)) {
      break label$1
     }
    }
    $3_1 = $3_1 + HEAP32[$0_1 + 32 >> 2] | 0;
    continue;
   };
  }
  return $4_1;
 }
 
 function $98($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13_1 = Math_fround(0), $14_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[$3_1 >> 2] = 2139095039;
  HEAP32[$4_1 >> 2] = -8388609;
  $9_1 = HEAP32[$0_1 + 8 >> 2];
  $9_1 = ($9_1 | 0) > 0 ? $9_1 : 0;
  while (1) {
   if (!$9_1) {
    $10_1 = HEAPF32[$4_1 >> 2];
    $13_1 = HEAPF32[$3_1 >> 2];
    if ($10_1 < $13_1) {
     HEAPF32[$3_1 >> 2] = $10_1;
     HEAPF32[$4_1 >> 2] = $13_1;
     $0_1 = $5_1 + 8 | 0;
     $2_1 = HEAP32[$0_1 >> 2];
     $3_1 = HEAP32[$0_1 + 4 >> 2];
     $1_1 = $6_1 + 8 | 0;
     $4_1 = $1_1;
     $9_1 = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$0_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $9_1;
     $0_1 = HEAP32[$5_1 >> 2];
     $4_1 = HEAP32[$5_1 + 4 >> 2];
     $9_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $9_1;
     HEAP32[$6_1 >> 2] = $0_1;
     HEAP32[$6_1 + 4 >> 2] = $4_1;
     HEAP32[$1_1 >> 2] = $2_1;
     HEAP32[$1_1 + 4 >> 2] = $3_1;
    }
    global$0 = $8_1 + 32 | 0;
    return;
   }
   $7_1 = HEAP32[$0_1 + 16 >> 2] + $14_1 | 0;
   $78($8_1, $1_1, HEAPF32[$7_1 >> 2], HEAPF32[$7_1 + 4 >> 2], HEAPF32[$7_1 + 8 >> 2]);
   $10_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$8_1 >> 2] * HEAPF32[$2_1 >> 2]) + Math_fround(HEAPF32[$8_1 + 4 >> 2] * HEAPF32[$2_1 + 4 >> 2])) + Math_fround(HEAPF32[$8_1 + 8 >> 2] * HEAPF32[$2_1 + 8 >> 2]));
   if ($10_1 < HEAPF32[$3_1 >> 2]) {
    HEAPF32[$3_1 >> 2] = $10_1;
    $7_1 = HEAP32[$8_1 + 4 >> 2];
    HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $7_1;
    $11_1 = $8_1 + 8 | 0;
    $12_1 = HEAP32[$11_1 + 4 >> 2];
    $7_1 = $5_1 + 8 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$11_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $12_1;
   }
   if ($10_1 > HEAPF32[$4_1 >> 2]) {
    HEAPF32[$4_1 >> 2] = $10_1;
    $7_1 = HEAP32[$8_1 + 4 >> 2];
    HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $7_1;
    $11_1 = $8_1 + 8 | 0;
    $12_1 = HEAP32[$11_1 + 4 >> 2];
    $7_1 = $6_1 + 8 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$11_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $12_1;
   }
   $9_1 = $9_1 - 1 | 0;
   $14_1 = $14_1 + 16 | 0;
   continue;
  };
 }
 
 function $99($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $9_1 = $4_1;
  $7_1 = __wasm_i64_mul($4_1, 0, $1_1, 0);
  $10_1 = i64toi32_i32$HIGH_BITS;
  $5_1 = $3_1;
  $11_1 = $2_1;
  $4_1 = 0;
  $6_1 = __wasm_i64_mul($5_1, 0, $2_1, $4_1);
  $3_1 = i64toi32_i32$HIGH_BITS;
  $4_1 = __wasm_i64_mul($5_1, 0, $1_1, 0);
  $8_1 = 0 + $4_1 | 0;
  $1_1 = $6_1 + $7_1 | 0;
  $2_1 = $6_1 >>> 0 > $1_1 >>> 0;
  $5_1 = $1_1 + i64toi32_i32$HIGH_BITS | 0;
  $5_1 = $4_1 >>> 0 > $8_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
  $4_1 = $8_1;
  HEAP32[$0_1 >> 2] = $4_1;
  HEAP32[$0_1 + 4 >> 2] = $5_1;
  $5_1 = $1_1 >>> 0 > $5_1 >>> 0;
  $1_1 = $10_1;
  $7_1 = __wasm_i64_mul($11_1, 0, $9_1, 0) + $1_1 | 0;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $4_1 = $1_1 >>> 0 > $7_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $6_1 = $3_1 + $7_1 | 0;
  $1_1 = $4_1;
  $1_1 = $3_1 >>> 0 > $6_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $3_1 = $2_1 + $6_1 | 0;
  $1_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  $2_1 = $3_1;
  $3_1 = $5_1 + $3_1 | 0;
  HEAP32[$0_1 + 8 >> 2] = $3_1;
  HEAP32[$0_1 + 12 >> 2] = $2_1 >>> 0 > $3_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
 }
 
 function $100($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $6_1 = HEAP32[$0_1 + 16 >> 2];
  $2_1 = HEAP32[$1_1 + 16 >> 2];
  label$1 : {
   if (($6_1 | 0) != ($2_1 | 0)) {
    $2_1 = $6_1 - $2_1 | 0;
    break label$1;
   }
   $2_1 = 0;
   if (!$6_1) {
    break label$1
   }
   $99($3_1 + 16 | 0, HEAP32[$0_1 >> 2], HEAP32[$0_1 + 4 >> 2], HEAP32[$1_1 + 8 >> 2], HEAP32[$1_1 + 12 >> 2]);
   $99($3_1, HEAP32[$0_1 + 8 >> 2], HEAP32[$0_1 + 12 >> 2], HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2]);
   $1_1 = HEAP32[$3_1 + 28 >> 2];
   $2_1 = HEAP32[$3_1 + 12 >> 2];
   $5_1 = HEAP32[$3_1 + 24 >> 2];
   $0_1 = HEAP32[$3_1 + 8 >> 2];
   $4_1 = -1;
   label$3 : {
    if (($1_1 | 0) == ($2_1 | 0) & $5_1 >>> 0 < $0_1 >>> 0 | $1_1 >>> 0 < $2_1 >>> 0) {
     break label$3
    }
    $4_1 = 1;
    if (($1_1 | 0) == ($2_1 | 0) & $5_1 >>> 0 > $0_1 >>> 0 | $1_1 >>> 0 > $2_1 >>> 0) {
     break label$3
    }
    $1_1 = HEAP32[$3_1 + 20 >> 2];
    $2_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = HEAP32[$3_1 + 16 >> 2];
    $0_1 = HEAP32[$3_1 >> 2];
    $4_1 = -1;
    if (($1_1 | 0) == ($2_1 | 0) & $5_1 >>> 0 < $0_1 >>> 0 | $1_1 >>> 0 < $2_1 >>> 0) {
     break label$3
    }
    $4_1 = ($1_1 | 0) == ($2_1 | 0) & $5_1 >>> 0 > $0_1 >>> 0 | $1_1 >>> 0 > $2_1 >>> 0;
   }
   $2_1 = Math_imul($6_1, $4_1);
  }
  global$0 = $3_1 + 32 | 0;
  return $2_1;
 }
 
 function $101($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $3_1 = $0_1 + 48 | 0;
  $4_1 = $102($3_1);
  $3_1 = $102($3_1);
  HEAP32[$4_1 + 8 >> 2] = $3_1;
  HEAP32[$4_1 + 12 >> 2] = $2_1;
  HEAP32[$4_1 + 16 >> 2] = 0;
  $2_1 = HEAP32[$0_1 + 100 >> 2];
  HEAP32[$4_1 + 20 >> 2] = $2_1;
  HEAP32[$3_1 + 8 >> 2] = $4_1;
  HEAP32[$3_1 + 12 >> 2] = $1_1;
  HEAP32[$3_1 + 16 >> 2] = 0;
  HEAP32[$3_1 + 20 >> 2] = $2_1;
  $1_1 = HEAP32[$0_1 + 116 >> 2];
  $2_1 = $1_1 + 1 | 0;
  HEAP32[$0_1 + 116 >> 2] = $2_1;
  if (($1_1 | 0) >= HEAP32[$0_1 + 120 >> 2]) {
   HEAP32[$0_1 + 120 >> 2] = $2_1
  }
  return $4_1;
 }
 
 function $102($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 + 8 >> 2];
   if ($2_1) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 + 4 >> 2];
   label$2 : {
    if ($1_1) {
     HEAP32[$0_1 + 4 >> 2] = HEAP32[$1_1 + 8 >> 2];
     break label$2;
    }
    $1_1 = $53(12);
    HEAP32[$1_1 + 8 >> 2] = 0;
    $2_1 = HEAP32[$0_1 + 12 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $2_1;
    (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $53(Math_imul($2_1, 24))), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $2_1 = HEAP32[$0_1 >> 2];
    HEAP32[$0_1 >> 2] = $1_1;
    HEAP32[$1_1 + 8 >> 2] = $2_1;
   }
   $4_1 = HEAP32[$1_1 + 4 >> 2];
   $5_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
   $2_1 = HEAP32[$1_1 >> 2];
   $3_1 = $2_1;
   $1_1 = 0;
   while (1) {
    if (($1_1 | 0) == ($5_1 | 0)) {
     break label$1
    }
    $6_1 = $3_1;
    $3_1 = $3_1 + 24 | 0;
    $1_1 = $1_1 + 1 | 0;
    HEAP32[$6_1 >> 2] = ($4_1 | 0) > ($1_1 | 0) ? $3_1 : 0;
    continue;
   };
  }
  HEAP32[$0_1 + 8 >> 2] = HEAP32[$2_1 >> 2];
  $0_1 = $2_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $0_1 = $2_1 + 16 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  return $2_1;
 }
 
 function $103($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0;
  $7_1 = global$0 - 144 | 0;
  global$0 = $7_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $4_1 = $2_1 - $1_1 | 0;
       switch ($4_1 | 0) {
       case 1:
        break label$3;
       case 2:
        break label$4;
       case 0:
        break label$5;
       default:
        break label$2;
       };
      }
      HEAP32[$3_1 >> 2] = 0;
      HEAP32[$3_1 + 4 >> 2] = 0;
      $0_1 = $3_1 + 8 | 0;
      HEAP32[$0_1 >> 2] = 0;
      HEAP32[$0_1 + 4 >> 2] = 0;
      break label$1;
     }
     $4_1 = HEAP32[HEAP32[$0_1 + 92 >> 2] + ($1_1 << 2) >> 2];
     $6_1 = HEAP32[$4_1 + 204 >> 2];
     $1_1 = HEAP32[$4_1 + 92 >> 2];
     label$6 : {
      $5_1 = HEAP32[$4_1 + 88 >> 2];
      $2_1 = HEAP32[$4_1 + 200 >> 2];
      label$7 : {
       if (($5_1 | 0) != ($2_1 | 0)) {
        break label$7
       }
       if (($1_1 | 0) != ($6_1 | 0)) {
        break label$7
       }
       $6_1 = $1_1;
       if (HEAP32[$4_1 + 96 >> 2] == HEAP32[$4_1 + 208 >> 2]) {
        break label$6
       }
      }
      $8_1 = $4_1 + 112 | 0;
      $9_1 = $1_1 - $6_1 | 0;
      $1_1 = $5_1 - $2_1 | 0;
      label$8 : {
       if (!($9_1 | $1_1)) {
        $1_1 = HEAP32[$4_1 + 96 >> 2] > HEAP32[$4_1 + 208 >> 2];
        $6_1 = $1_1 ? $8_1 : $4_1;
        HEAP32[$3_1 + 8 >> 2] = $6_1;
        HEAP32[$3_1 + 4 >> 2] = $6_1;
        HEAP32[$3_1 >> 2] = $6_1;
        HEAP32[$6_1 + 4 >> 2] = $6_1;
        HEAP32[$6_1 >> 2] = $6_1;
        $8_1 = $1_1 ? $4_1 : $8_1;
        $4_1 = $6_1;
        break label$8;
       }
       HEAP32[$4_1 + 4 >> 2] = $8_1;
       HEAP32[$4_1 >> 2] = $8_1;
       HEAP32[$4_1 + 116 >> 2] = $4_1;
       HEAP32[$4_1 + 112 >> 2] = $4_1;
       $2_1 = ($1_1 | 0) < 0;
       $6_1 = ($9_1 | 0) < 0;
       $1_1 = $2_1 | $6_1 & !$1_1;
       HEAP32[$3_1 + 4 >> 2] = $1_1 ? $8_1 : $4_1;
       HEAP32[$3_1 >> 2] = $1_1 ? $4_1 : $8_1;
       if (!($2_1 & !$9_1 ? 0 : !$6_1)) {
        HEAP32[$3_1 + 8 >> 2] = $4_1;
        $6_1 = $8_1;
        break label$8;
       }
       HEAP32[$3_1 + 8 >> 2] = $8_1;
       $6_1 = $4_1;
      }
      HEAP32[$3_1 + 12 >> 2] = $6_1;
      $1_1 = $101($0_1, $4_1, $8_1);
      HEAP32[$4_1 + 8 >> 2] = $1_1;
      $0_1 = HEAP32[$1_1 + 8 >> 2];
      HEAP32[$8_1 + 8 >> 2] = $0_1;
      HEAP32[$1_1 + 4 >> 2] = $1_1;
      HEAP32[$1_1 >> 2] = $1_1;
      HEAP32[$0_1 + 4 >> 2] = $0_1;
      HEAP32[$0_1 >> 2] = $0_1;
      break label$1;
     }
     HEAP32[$4_1 + 8 >> 2] = 0;
     HEAP32[$3_1 + 12 >> 2] = $4_1;
     HEAP32[$3_1 + 8 >> 2] = $4_1;
     HEAP32[$3_1 + 4 >> 2] = $4_1;
     HEAP32[$3_1 >> 2] = $4_1;
     HEAP32[$4_1 + 4 >> 2] = $4_1;
     HEAP32[$4_1 >> 2] = $4_1;
     break label$1;
    }
    $0_1 = HEAP32[HEAP32[$0_1 + 92 >> 2] + ($1_1 << 2) >> 2];
    HEAP32[$0_1 + 8 >> 2] = 0;
    HEAP32[$3_1 + 12 >> 2] = $0_1;
    HEAP32[$3_1 + 8 >> 2] = $0_1;
    HEAP32[$3_1 + 4 >> 2] = $0_1;
    HEAP32[$3_1 >> 2] = $0_1;
    HEAP32[$0_1 + 4 >> 2] = $0_1;
    HEAP32[$0_1 >> 2] = $0_1;
    break label$1;
   }
   $6_1 = (($4_1 | 0) / 2 | 0) + $1_1 | 0;
   $10_1 = ($2_1 | 0) > ($6_1 | 0) ? $2_1 : $6_1;
   $8_1 = HEAP32[$0_1 + 92 >> 2] + ($6_1 << 2) | 0;
   $4_1 = HEAP32[$8_1 - 4 >> 2];
   $13_1 = HEAP32[$4_1 + 88 >> 2];
   $9_1 = HEAP32[$4_1 + 96 >> 2];
   $5_1 = HEAP32[$4_1 + 92 >> 2];
   $4_1 = $6_1;
   label$11 : {
    while (1) {
     if (($4_1 | 0) == ($10_1 | 0)) {
      break label$11
     }
     label$13 : {
      $11_1 = HEAP32[$8_1 >> 2];
      if (($13_1 | 0) != HEAP32[$11_1 + 88 >> 2]) {
       break label$13
      }
      if (($5_1 | 0) != HEAP32[$11_1 + 92 >> 2]) {
       break label$13
      }
      if (($9_1 | 0) != HEAP32[$11_1 + 96 >> 2]) {
       break label$13
      }
      $8_1 = $8_1 + 4 | 0;
      $4_1 = $4_1 + 1 | 0;
      continue;
     }
     break;
    };
    $10_1 = $4_1;
   }
   $103($0_1, $1_1, $6_1, $3_1);
   $1_1 = $7_1 + 16 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$7_1 + 8 >> 2] = 0;
   HEAP32[$7_1 + 12 >> 2] = 0;
   $103($0_1, $10_1, $2_1, $7_1 + 8 | 0);
   $9_1 = HEAP32[$7_1 + 12 >> 2];
   if (!$9_1) {
    break label$1
   }
   $17_1 = HEAP32[$3_1 + 4 >> 2];
   if (!$17_1) {
    $0_1 = HEAP32[$7_1 + 12 >> 2];
    HEAP32[$3_1 >> 2] = HEAP32[$7_1 + 8 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $0_1;
    $1_1 = $7_1 + 16 | 0;
    $0_1 = HEAP32[$1_1 + 4 >> 2];
    $2_1 = $3_1 + 8 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $0_1;
    break label$1;
   }
   HEAP32[$0_1 + 100 >> 2] = HEAP32[$0_1 + 100 >> 2] - 1;
   $19_1 = HEAP32[$3_1 + 12 >> 2];
   $1_1 = HEAP32[$19_1 + 88 >> 2];
   $13_1 = HEAP32[$7_1 + 16 >> 2];
   label$15 : {
    label$16 : {
     if (($1_1 | 0) != HEAP32[$13_1 + 88 >> 2]) {
      break label$16
     }
     $32_1 = HEAP32[$19_1 + 92 >> 2];
     if (($32_1 | 0) != HEAP32[$13_1 + 92 >> 2]) {
      break label$16
     }
     $2_1 = HEAP32[$13_1 + 4 >> 2];
     if (($2_1 | 0) == ($13_1 | 0)) {
      $2_1 = HEAP32[$13_1 + 8 >> 2];
      if ($2_1) {
       $13_1 = HEAP32[$2_1 + 12 >> 2];
       $32_1 = HEAP32[$13_1 + 92 >> 2];
       $1_1 = HEAP32[$13_1 + 88 >> 2];
      }
      $33_1 = $1_1 + 1 | 0;
      $1_1 = HEAP32[$13_1 + 96 >> 2];
      break label$15;
     }
     $1_1 = HEAP32[$13_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $2_1;
     HEAP32[$2_1 >> 2] = $1_1;
     if (HEAP32[$7_1 + 8 >> 2] == ($13_1 | 0)) {
      $6_1 = $1_1;
      $8_1 = HEAP32[$1_1 + 88 >> 2];
      $4_1 = HEAP32[$2_1 + 88 >> 2];
      label$21 : {
       if (($8_1 | 0) < ($4_1 | 0)) {
        break label$21
       }
       if (($4_1 | 0) == ($8_1 | 0)) {
        if (HEAP32[$1_1 + 92 >> 2] < HEAP32[$2_1 + 92 >> 2]) {
         break label$21
        }
       }
       $6_1 = $2_1;
      }
      HEAP32[$7_1 + 8 >> 2] = $6_1;
     }
     if (($9_1 | 0) != ($13_1 | 0)) {
      break label$16
     }
     label$23 : {
      $6_1 = HEAP32[$1_1 + 88 >> 2];
      $4_1 = HEAP32[$2_1 + 88 >> 2];
      if (($6_1 | 0) <= ($4_1 | 0)) {
       if (($4_1 | 0) != ($6_1 | 0)) {
        break label$23
       }
       if (HEAP32[$1_1 + 92 >> 2] <= HEAP32[$2_1 + 92 >> 2]) {
        break label$23
       }
      }
      HEAP32[$7_1 + 12 >> 2] = $1_1;
      $9_1 = $1_1;
      break label$16;
     }
     HEAP32[$7_1 + 12 >> 2] = $2_1;
     $9_1 = $2_1;
    }
    $15_1 = HEAP32[$3_1 >> 2];
    $18_1 = HEAP32[$7_1 + 8 >> 2];
    $1_1 = 1;
    $13_1 = 0;
    $19_1 = 0;
    $8_1 = $9_1;
    $4_1 = $17_1;
    while (1) {
     if (($16_1 | 0) == 2) {
      HEAP32[$8_1 >> 2] = $4_1;
      HEAP32[$4_1 + 4 >> 2] = $8_1;
      HEAP32[$19_1 >> 2] = $13_1;
      HEAP32[$13_1 + 4 >> 2] = $19_1;
      if (HEAP32[$18_1 + 88 >> 2] < HEAP32[$15_1 + 88 >> 2]) {
       HEAP32[$3_1 >> 2] = $18_1
      }
      if (HEAP32[$9_1 + 88 >> 2] >= HEAP32[$17_1 + 88 >> 2]) {
       HEAP32[$3_1 + 4 >> 2] = $9_1
      }
      HEAP32[$3_1 + 12 >> 2] = HEAP32[$7_1 + 20 >> 2];
      $6_1 = 0;
      $2_1 = HEAP32[$13_1 + 88 >> 2] - HEAP32[$19_1 + 88 >> 2] | 0;
      $8_1 = HEAP32[$13_1 + 92 >> 2] - HEAP32[$19_1 + 92 >> 2] | 0;
      $3_1 = HEAP32[$13_1 + 96 >> 2] - HEAP32[$19_1 + 96 >> 2] | 0;
      $104($7_1 + 120 | 0, 0, 0, -1, $2_1, $8_1, $3_1);
      $4_1 = HEAP32[$19_1 + 8 >> 2];
      $26_1 = HEAP32[$7_1 + 120 >> 2];
      $27_1 = HEAP32[$7_1 + 124 >> 2];
      $28_1 = HEAP32[$7_1 + 136 >> 2];
      $29_1 = HEAP32[$7_1 + 140 >> 2];
      $30_1 = HEAP32[$7_1 + 128 >> 2];
      $22_1 = HEAP32[$7_1 + 132 >> 2];
      HEAP32[$7_1 + 80 >> 2] = 0;
      $12_1 = $8_1 >> 31;
      $1_1 = __wasm_i64_mul($28_1, $29_1, $8_1, $12_1);
      $9_1 = i64toi32_i32$HIGH_BITS;
      $11_1 = $3_1 >> 31;
      $5_1 = __wasm_i64_mul($30_1, $22_1, $3_1, $11_1);
      $24_1 = $1_1 - $5_1 | 0;
      $25 = $9_1 - (i64toi32_i32$HIGH_BITS + ($1_1 >>> 0 < $5_1 >>> 0) | 0) | 0;
      $10_1 = $2_1 >> 31;
      $1_1 = __wasm_i64_mul($30_1, $22_1, $2_1, $10_1);
      $9_1 = i64toi32_i32$HIGH_BITS;
      $5_1 = __wasm_i64_mul($26_1, $27_1, $8_1, $12_1);
      $21_1 = $1_1 - $5_1 | 0;
      $18_1 = $9_1 - (i64toi32_i32$HIGH_BITS + ($1_1 >>> 0 < $5_1 >>> 0) | 0) | 0;
      $1_1 = __wasm_i64_mul($26_1, $27_1, $3_1, $11_1);
      $9_1 = i64toi32_i32$HIGH_BITS;
      $5_1 = __wasm_i64_mul($28_1, $29_1, $2_1, $10_1);
      $17_1 = $1_1 - $5_1 | 0;
      $16_1 = $9_1 - (i64toi32_i32$HIGH_BITS + ($1_1 >>> 0 < $5_1 >>> 0) | 0) | 0;
      $1_1 = 0;
      if ($4_1) {
       while (1) {
        $11_1 = HEAP32[$4_1 + 12 >> 2];
        $5_1 = HEAP32[$11_1 + 92 >> 2] - HEAP32[$19_1 + 92 >> 2] | 0;
        $15_1 = $5_1;
        $20_1 = $5_1 >> 31;
        $5_1 = __wasm_i64_mul($30_1, $22_1, $5_1, $20_1);
        $9_1 = i64toi32_i32$HIGH_BITS;
        $10_1 = $5_1;
        $5_1 = HEAP32[$11_1 + 88 >> 2] - HEAP32[$19_1 + 88 >> 2] | 0;
        $14_1 = $5_1;
        $12_1 = $5_1 >> 31;
        $5_1 = __wasm_i64_mul($26_1, $27_1, $5_1, $12_1);
        $10_1 = $10_1 + $5_1 | 0;
        $9_1 = i64toi32_i32$HIGH_BITS + $9_1 | 0;
        $9_1 = $5_1 >>> 0 > $10_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
        $31_1 = $10_1;
        $5_1 = HEAP32[$11_1 + 96 >> 2] - HEAP32[$19_1 + 96 >> 2] | 0;
        $11_1 = $5_1;
        $10_1 = $5_1 >> 31;
        $5_1 = __wasm_i64_mul($28_1, $29_1, $5_1, $10_1);
        if (($31_1 | 0) != (0 - $5_1 | 0)) {
         $5_1 = 1
        } else {
         $5_1 = (0 - (i64toi32_i32$HIGH_BITS + (($5_1 | 0) != 0) | 0) | 0) != ($9_1 | 0)
        }
        label$31 : {
         if ($5_1) {
          break label$31
         }
         $5_1 = __wasm_i64_mul($15_1, $20_1, $17_1, $16_1);
         $9_1 = i64toi32_i32$HIGH_BITS;
         $15_1 = $5_1;
         $5_1 = __wasm_i64_mul($24_1, $25, $14_1, $12_1);
         $12_1 = $15_1 + $5_1 | 0;
         $14_1 = i64toi32_i32$HIGH_BITS + $9_1 | 0;
         $14_1 = $5_1 >>> 0 > $12_1 >>> 0 ? $14_1 + 1 | 0 : $14_1;
         $5_1 = __wasm_i64_mul($21_1, $18_1, $11_1, $10_1);
         $9_1 = $5_1 + $12_1 | 0;
         $14_1 = i64toi32_i32$HIGH_BITS + $14_1 | 0;
         $14_1 = $5_1 >>> 0 > $9_1 >>> 0 ? $14_1 + 1 | 0 : $14_1;
         $5_1 = $9_1;
         if (($14_1 | 0) < 0) {
          $5_1 = 1
         } else {
          $5_1 = ($14_1 | 0) <= 0 ? $5_1 >>> 0 < 1 : 0
         }
         if ($5_1) {
          break label$31
         }
         if ($1_1) {
          if (($105($1_1, $4_1, $2_1, $8_1, $3_1, 0, 0, -1) | 0) != 1) {
           break label$31
          }
         }
         $1_1 = $4_1;
        }
        $4_1 = HEAP32[$4_1 >> 2];
        if (($4_1 | 0) != HEAP32[$19_1 + 8 >> 2]) {
         continue
        }
        break;
       };
       HEAP32[$7_1 + 80 >> 2] = $1_1;
      }
      $4_1 = HEAP32[$13_1 + 8 >> 2];
      HEAP32[$7_1 + 56 >> 2] = 0;
      if ($4_1) {
       while (1) {
        $11_1 = HEAP32[$4_1 + 12 >> 2];
        $5_1 = HEAP32[$11_1 + 92 >> 2] - HEAP32[$13_1 + 92 >> 2] | 0;
        $15_1 = $5_1;
        $20_1 = $5_1 >> 31;
        $5_1 = __wasm_i64_mul($30_1, $22_1, $5_1, $20_1);
        $9_1 = i64toi32_i32$HIGH_BITS;
        $10_1 = $5_1;
        $5_1 = HEAP32[$11_1 + 88 >> 2] - HEAP32[$13_1 + 88 >> 2] | 0;
        $14_1 = $5_1;
        $12_1 = $5_1 >> 31;
        $5_1 = __wasm_i64_mul($26_1, $27_1, $5_1, $12_1);
        $10_1 = $10_1 + $5_1 | 0;
        $9_1 = i64toi32_i32$HIGH_BITS + $9_1 | 0;
        $9_1 = $5_1 >>> 0 > $10_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
        $31_1 = $10_1;
        $5_1 = HEAP32[$11_1 + 96 >> 2] - HEAP32[$13_1 + 96 >> 2] | 0;
        $11_1 = $5_1;
        $10_1 = $5_1 >> 31;
        $5_1 = __wasm_i64_mul($28_1, $29_1, $5_1, $10_1);
        if (($31_1 | 0) != (0 - $5_1 | 0)) {
         $5_1 = 1
        } else {
         $5_1 = (0 - (i64toi32_i32$HIGH_BITS + (($5_1 | 0) != 0) | 0) | 0) != ($9_1 | 0)
        }
        label$35 : {
         if ($5_1) {
          break label$35
         }
         $5_1 = __wasm_i64_mul($15_1, $20_1, $17_1, $16_1);
         $9_1 = i64toi32_i32$HIGH_BITS;
         $15_1 = $5_1;
         $5_1 = __wasm_i64_mul($24_1, $25, $14_1, $12_1);
         $12_1 = $15_1 + $5_1 | 0;
         $14_1 = i64toi32_i32$HIGH_BITS + $9_1 | 0;
         $14_1 = $5_1 >>> 0 > $12_1 >>> 0 ? $14_1 + 1 | 0 : $14_1;
         $5_1 = __wasm_i64_mul($21_1, $18_1, $11_1, $10_1);
         $9_1 = $5_1 + $12_1 | 0;
         $10_1 = i64toi32_i32$HIGH_BITS + $14_1 | 0;
         $10_1 = $5_1 >>> 0 > $9_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
         $5_1 = $9_1;
         if (($10_1 | 0) < 0) {
          $5_1 = 1
         } else {
          $5_1 = ($10_1 | 0) <= 0 ? $5_1 >>> 0 < 1 : 0
         }
         if ($5_1) {
          break label$35
         }
         if ($6_1) {
          if (($105($6_1, $4_1, $2_1, $8_1, $3_1, 0, 0, -1) | 0) != 2) {
           break label$35
          }
         }
         $6_1 = $4_1;
        }
        $4_1 = HEAP32[$4_1 >> 2];
        if (($4_1 | 0) != HEAP32[$13_1 + 8 >> 2]) {
         continue
        }
        break;
       };
       HEAP32[$7_1 + 56 >> 2] = $6_1;
      }
      label$37 : {
       if (!($1_1 | $6_1)) {
        break label$37
       }
       $106($0_1, $19_1, $13_1, $7_1 + 80 | 0, $7_1 + 56 | 0);
       $1_1 = HEAP32[$7_1 + 80 >> 2];
       if ($1_1) {
        $19_1 = HEAP32[$1_1 + 12 >> 2]
       }
       $1_1 = HEAP32[$7_1 + 56 >> 2];
       if (!$1_1) {
        break label$37
       }
       $13_1 = HEAP32[$1_1 + 12 >> 2];
      }
      $32_1 = HEAP32[$13_1 + 92 >> 2];
      $33_1 = HEAP32[$13_1 + 88 >> 2];
      $1_1 = HEAP32[$13_1 + 96 >> 2] + 1 | 0;
     } else {
      $5_1 = HEAP32[$8_1 + 88 >> 2];
      $11_1 = HEAP32[$4_1 + 88 >> 2];
      $2_1 = Math_imul($5_1 - $11_1 | 0, $1_1);
      label$40 : {
       if (($2_1 | 0) >= 1) {
        $11_1 = HEAP32[$8_1 + 92 >> 2];
        while (1) {
         $5_1 = $8_1;
         $6_1 = HEAP32[$4_1 + 92 >> 2];
         $14_1 = $2_1;
         while (1) {
          label$44 : {
           $21_1 = $11_1 - $6_1 | 0;
           $12_1 = !$16_1 << 2;
           $8_1 = HEAP32[$12_1 + $4_1 >> 2];
           if (($8_1 | 0) == ($4_1 | 0)) {
            break label$44
           }
           $2_1 = HEAP32[$8_1 + 92 >> 2];
           $10_1 = $2_1 - $6_1 | 0;
           if (($10_1 | 0) > 0) {
            break label$44
           }
           $6_1 = HEAP32[$8_1 + 88 >> 2];
           $20_1 = Math_imul($6_1 - HEAP32[$4_1 + 88 >> 2] | 0, $1_1);
           if ($20_1) {
            if (($20_1 | 0) > -1) {
             break label$44
            }
            if ((Math_imul($10_1, $14_1) | 0) > (Math_imul($20_1, $21_1) | 0)) {
             break label$44
            }
           }
           $14_1 = Math_imul(HEAP32[$5_1 + 88 >> 2] - $6_1 | 0, $1_1);
           $6_1 = $2_1;
           $4_1 = $8_1;
           continue;
          }
          break;
         };
         $8_1 = HEAP32[$5_1 + $12_1 >> 2];
         if (($5_1 | 0) == ($8_1 | 0)) {
          break label$40
         }
         $6_1 = HEAP32[$8_1 + 92 >> 2];
         $12_1 = $6_1 - $11_1 | 0;
         if (($12_1 | 0) > -1) {
          break label$40
         }
         $10_1 = HEAP32[$8_1 + 88 >> 2];
         $2_1 = Math_imul($10_1 - HEAP32[$4_1 + 88 >> 2] | 0, $1_1);
         if (($2_1 | 0) < 1) {
          break label$40
         }
         $11_1 = $6_1;
         $6_1 = Math_imul($10_1 - HEAP32[$5_1 + 88 >> 2] | 0, $1_1);
         if (!$6_1) {
          continue
         }
         if (($6_1 | 0) > -1) {
          break label$40
         }
         if ((Math_imul($14_1, $12_1) | 0) < (Math_imul($6_1, $21_1) | 0)) {
          continue
         }
         break;
        };
        break label$40;
       }
       label$46 : {
        if (($2_1 | 0) <= -1) {
         $10_1 = HEAP32[$4_1 + 92 >> 2];
         $11_1 = HEAP32[$8_1 + 92 >> 2];
         label$48 : while (1) {
          $24_1 = (($16_1 | 0) != 0) << 2;
          $14_1 = HEAP32[$24_1 + $8_1 >> 2];
          while (1) {
           $6_1 = $4_1;
           $20_1 = $2_1;
           $22_1 = $11_1 - $10_1 | 0;
           label$50 : {
            if (($8_1 | 0) == ($14_1 | 0)) {
             break label$50
            }
            $4_1 = HEAP32[$14_1 + 92 >> 2];
            $2_1 = $4_1 - $11_1 | 0;
            if (($2_1 | 0) < 0) {
             break label$50
            }
            $12_1 = HEAP32[$14_1 + 88 >> 2];
            $5_1 = Math_imul($12_1 - $5_1 | 0, $1_1);
            if ($5_1) {
             if (($5_1 | 0) > -1) {
              break label$50
             }
             if ((Math_imul($2_1, $20_1) | 0) > (Math_imul($5_1, $22_1) | 0)) {
              break label$50
             }
            }
            $2_1 = Math_imul($12_1 - HEAP32[$6_1 + 88 >> 2] | 0, $1_1);
            $5_1 = $12_1;
            $11_1 = $4_1;
            $8_1 = $14_1;
            $4_1 = $6_1;
            continue label$48;
           }
           $4_1 = HEAP32[$6_1 + $24_1 >> 2];
           if (($6_1 | 0) == ($4_1 | 0)) {
            break label$46
           }
           $12_1 = HEAP32[$4_1 + 92 >> 2];
           $25 = $12_1 - $10_1 | 0;
           if (($25 | 0) < 1) {
            break label$46
           }
           $5_1 = HEAP32[$8_1 + 88 >> 2];
           $21_1 = HEAP32[$4_1 + 88 >> 2];
           $2_1 = Math_imul($5_1 - $21_1 | 0, $1_1);
           if (($2_1 | 0) > -1) {
            break label$46
           }
           $10_1 = $12_1;
           $12_1 = Math_imul($21_1 - HEAP32[$6_1 + 88 >> 2] | 0, $1_1);
           if (!$12_1) {
            continue
           }
           if (($12_1 | 0) > -1) {
            break label$46
           }
           if ((Math_imul($20_1, $25) | 0) < (Math_imul($12_1, $22_1) | 0)) {
            continue
           }
           break;
          };
          break;
         };
         break label$46;
        }
        $2_1 = HEAP32[$4_1 + 92 >> 2];
        $6_1 = $4_1;
        while (1) {
         label$53 : {
          $10_1 = $6_1;
          $6_1 = HEAP32[$6_1 + (!$16_1 << 2) >> 2];
          if (($6_1 | 0) == ($4_1 | 0)) {
           break label$53
          }
          if (($11_1 | 0) != HEAP32[$6_1 + 88 >> 2]) {
           break label$53
          }
          $5_1 = $2_1;
          $2_1 = HEAP32[$6_1 + 92 >> 2];
          if (($5_1 | 0) >= ($2_1 | 0)) {
           continue
          }
         }
         break;
        };
        $6_1 = HEAP32[$8_1 + 92 >> 2];
        $4_1 = $8_1;
        while (1) {
         label$55 : {
          $5_1 = $4_1;
          $4_1 = HEAP32[$4_1 + ((($16_1 | 0) != 0) << 2) >> 2];
          if (($8_1 | 0) == ($4_1 | 0)) {
           break label$55
          }
          if (($11_1 | 0) != HEAP32[$4_1 + 88 >> 2]) {
           break label$55
          }
          $2_1 = $6_1;
          $6_1 = HEAP32[$4_1 + 92 >> 2];
          if (($2_1 | 0) <= ($6_1 | 0)) {
           continue
          }
         }
         break;
        };
        $4_1 = $10_1;
        break label$40;
       }
       $5_1 = $8_1;
       $4_1 = $6_1;
      }
      if ($16_1) {
       $8_1 = $5_1
      } else {
       $1_1 = -1;
       $13_1 = $5_1;
       $19_1 = $4_1;
       $4_1 = $15_1;
       $8_1 = $18_1;
      }
      $16_1 = $16_1 + 1 | 0;
      continue;
     }
     break;
    };
   }
   $31_1 = $1_1;
   $2_1 = $19_1;
   $10_1 = $13_1;
   $5_1 = 0;
   $8_1 = 0;
   $20_1 = 0;
   $26_1 = 1;
   $16_1 = 0;
   $12_1 = 0;
   $14_1 = 0;
   $3_1 = 0;
   while (1) {
    HEAP32[$7_1 + 116 >> 2] = -1;
    $15_1 = HEAP32[$2_1 + 88 >> 2];
    $9_1 = HEAP32[$10_1 + 88 >> 2] - $15_1 | 0;
    HEAP32[$7_1 + 104 >> 2] = $9_1;
    $27_1 = $10_1 + 96 | 0;
    $28_1 = $2_1 + 96 | 0;
    $11_1 = HEAP32[$28_1 >> 2];
    $4_1 = HEAP32[$27_1 >> 2] - $11_1 | 0;
    HEAP32[$7_1 + 112 >> 2] = $4_1;
    $29_1 = $10_1 + 92 | 0;
    $30_1 = $2_1 + 92 | 0;
    $1_1 = HEAP32[$30_1 >> 2];
    $6_1 = HEAP32[$29_1 >> 2] - $1_1 | 0;
    HEAP32[$7_1 + 108 >> 2] = $6_1;
    $104($7_1 + 120 | 0, $33_1 - $15_1 | 0, $32_1 - $1_1 | 0, $31_1 - $11_1 | 0, $9_1, $6_1, $4_1);
    $22_1 = HEAP32[$7_1 + 128 >> 2];
    $24_1 = HEAP32[$7_1 + 132 >> 2];
    $25 = $9_1 >> 31;
    $1_1 = __wasm_i64_mul($22_1, $24_1, $9_1, $25);
    $18_1 = i64toi32_i32$HIGH_BITS;
    $17_1 = HEAP32[$7_1 + 120 >> 2];
    $15_1 = HEAP32[$7_1 + 124 >> 2];
    $21_1 = $6_1 >> 31;
    $11_1 = __wasm_i64_mul($17_1, $15_1, $6_1, $21_1);
    HEAP32[$7_1 + 96 >> 2] = $1_1 - $11_1;
    HEAP32[$7_1 + 100 >> 2] = $18_1 - (i64toi32_i32$HIGH_BITS + ($1_1 >>> 0 < $11_1 >>> 0) | 0);
    $18_1 = $4_1 >> 31;
    $1_1 = __wasm_i64_mul($17_1, $15_1, $4_1, $18_1);
    $17_1 = i64toi32_i32$HIGH_BITS;
    $15_1 = HEAP32[$7_1 + 136 >> 2];
    $11_1 = HEAP32[$7_1 + 140 >> 2];
    $9_1 = __wasm_i64_mul($9_1, $25, $15_1, $11_1);
    HEAP32[$7_1 + 88 >> 2] = $1_1 - $9_1;
    HEAP32[$7_1 + 92 >> 2] = $17_1 - (i64toi32_i32$HIGH_BITS + ($1_1 >>> 0 < $9_1 >>> 0) | 0);
    $1_1 = __wasm_i64_mul($15_1, $11_1, $6_1, $21_1);
    $6_1 = i64toi32_i32$HIGH_BITS;
    $4_1 = __wasm_i64_mul($22_1, $24_1, $4_1, $18_1);
    HEAP32[$7_1 + 80 >> 2] = $1_1 - $4_1;
    HEAP32[$7_1 + 84 >> 2] = $6_1 - (i64toi32_i32$HIGH_BITS + ($1_1 >>> 0 < $4_1 >>> 0) | 0);
    HEAP32[$7_1 + 72 >> 2] = 0;
    $1_1 = $7_1 - -64 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    HEAP32[$7_1 + 56 >> 2] = 0;
    HEAP32[$7_1 + 60 >> 2] = 0;
    $17_1 = $107($0_1, 0, $2_1, $7_1 + 104 | 0, $7_1 + 120 | 0, $7_1 + 80 | 0, $7_1 + 56 | 0);
    HEAP32[$7_1 + 48 >> 2] = 0;
    $1_1 = $7_1 + 40 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    HEAP32[$7_1 + 32 >> 2] = 0;
    HEAP32[$7_1 + 36 >> 2] = 0;
    $1_1 = $107($0_1, 1, $10_1, $7_1 + 104 | 0, $7_1 + 120 | 0, $7_1 + 80 | 0, $7_1 + 32 | 0);
    label$59 : {
     if (!($1_1 | $17_1)) {
      $4_1 = $101($0_1, $2_1, $10_1);
      HEAP32[$2_1 + 8 >> 2] = $4_1;
      $1_1 = HEAP32[$4_1 + 8 >> 2];
      HEAP32[$10_1 + 8 >> 2] = $1_1;
      HEAP32[$4_1 + 4 >> 2] = $4_1;
      HEAP32[$4_1 >> 2] = $4_1;
      HEAP32[$1_1 + 4 >> 2] = $1_1;
      HEAP32[$1_1 >> 2] = $1_1;
      $4_1 = 0;
      break label$59;
     }
     $18_1 = $17_1 ? -1 : 1;
     label$61 : {
      if (!$17_1) {
       break label$61
      }
      if (!$1_1) {
       break label$61
      }
      $18_1 = $100($7_1 + 56 | 0, $7_1 + 32 | 0);
     }
     label$62 : {
      label$63 : {
       if ($26_1) {
        break label$63
       }
       label$64 : {
        if (($18_1 | 0) >= 0) {
         if (HEAP32[$7_1 + 48 >> 2] > -1) {
          break label$63
         }
         if (!(HEAP32[$7_1 + 40 >> 2] | HEAP32[$7_1 + 44 >> 2])) {
          break label$64
         }
         break label$63;
        }
        if (HEAP32[$7_1 + 72 >> 2] > -1) {
         break label$63
        }
        if (HEAP32[$7_1 + 64 >> 2] | HEAP32[$7_1 + 68 >> 2]) {
         break label$63
        }
       }
       $15_1 = $5_1;
       $6_1 = $8_1;
       $11_1 = $16_1;
       $9_1 = $12_1;
       break label$62;
      }
      $11_1 = $101($0_1, $2_1, $10_1);
      $9_1 = $11_1;
      if ($16_1) {
       HEAP32[$16_1 + 4 >> 2] = $11_1;
       $9_1 = $12_1;
      }
      HEAP32[$11_1 >> 2] = $16_1;
      $15_1 = HEAP32[$11_1 + 8 >> 2];
      $6_1 = $15_1;
      if ($5_1) {
       HEAP32[$5_1 >> 2] = $15_1;
       $6_1 = $8_1;
      }
      HEAP32[$15_1 + 4 >> 2] = $5_1;
     }
     HEAP32[$7_1 + 28 >> 2] = $17_1;
     HEAP32[$7_1 + 24 >> 2] = $1_1;
     $5_1 = $1_1;
     if (!$18_1) {
      $106($0_1, $2_1, $10_1, $7_1 + 28 | 0, $7_1 + 24 | 0);
      $5_1 = HEAP32[$7_1 + 24 >> 2];
     }
     label$69 : {
      label$70 : {
       if (($18_1 | 0) < 0) {
        break label$70
       }
       if (!$5_1) {
        break label$70
       }
       label$71 : {
        label$72 : {
         if ($23_1) {
          $4_1 = HEAP32[$23_1 >> 2];
          while (1) {
           if (($1_1 | 0) != ($4_1 | 0)) {
            $8_1 = HEAP32[$4_1 >> 2];
            $108($0_1, $4_1);
            $4_1 = $8_1;
            continue;
           }
           break;
          };
          if ($15_1) {
           break label$72
          }
          break label$71;
         }
         if (!$15_1) {
          $20_1 = $1_1;
          break label$71;
         }
         $23_1 = HEAP32[$1_1 + 4 >> 2];
         $20_1 = $6_1;
        }
        HEAP32[$23_1 >> 2] = $6_1;
        HEAP32[$6_1 + 4 >> 2] = $23_1;
        HEAP32[$15_1 >> 2] = $1_1;
        HEAP32[$1_1 + 4 >> 2] = $15_1;
        $5_1 = HEAP32[$7_1 + 24 >> 2];
        $6_1 = 0;
       }
       $31_1 = HEAP32[$27_1 >> 2];
       $32_1 = HEAP32[$29_1 >> 2];
       $23_1 = HEAP32[$5_1 + 8 >> 2];
       $1_1 = HEAP32[$5_1 + 12 >> 2];
       $33_1 = HEAP32[$10_1 + 88 >> 2];
       $5_1 = 0;
       break label$69;
      }
      $1_1 = $10_1;
      $5_1 = $15_1;
     }
     $8_1 = $6_1;
     label$77 : {
      label$78 : {
       if (($18_1 | 0) > 0) {
        break label$78
       }
       $10_1 = HEAP32[$7_1 + 28 >> 2];
       if (!$10_1) {
        break label$78
       }
       label$79 : {
        label$80 : {
         label$81 : {
          label$82 : {
           if ($3_1) {
            $18_1 = $3_1 + 4 | 0;
            $4_1 = HEAP32[$3_1 + 4 >> 2];
            while (1) {
             if (($4_1 | 0) != ($17_1 | 0)) {
              $6_1 = HEAP32[$4_1 + 4 >> 2];
              $108($0_1, $4_1);
              $4_1 = $6_1;
              continue;
             }
             break;
            };
            if ($11_1) {
             break label$82
            }
            break label$79;
           }
           if ($11_1) {
            break label$81
           }
           $14_1 = $17_1;
           break label$79;
          }
          HEAP32[$9_1 >> 2] = $3_1;
          break label$80;
         }
         $3_1 = HEAP32[$17_1 >> 2];
         HEAP32[$9_1 >> 2] = $3_1;
         $18_1 = $3_1 + 4 | 0;
         $14_1 = $9_1;
        }
        HEAP32[$18_1 >> 2] = $9_1;
        HEAP32[$17_1 >> 2] = $11_1;
        HEAP32[$11_1 + 4 >> 2] = $17_1;
        $10_1 = HEAP32[$7_1 + 28 >> 2];
        $9_1 = 0;
       }
       $31_1 = HEAP32[$28_1 >> 2];
       $32_1 = HEAP32[$30_1 >> 2];
       $3_1 = HEAP32[$10_1 + 8 >> 2];
       $33_1 = HEAP32[$2_1 + 88 >> 2];
       $16_1 = 0;
       $2_1 = HEAP32[$10_1 + 12 >> 2];
       break label$77;
      }
      $16_1 = $11_1;
     }
     $12_1 = $9_1;
     $4_1 = 1;
     label$86 : {
      if (($2_1 | 0) != ($19_1 | 0)) {
       break label$86
      }
      if (($1_1 | 0) != ($13_1 | 0)) {
       break label$86
      }
      label$87 : {
       if (!$3_1) {
        HEAP32[$16_1 + 4 >> 2] = $12_1;
        HEAP32[$12_1 >> 2] = $16_1;
        HEAP32[$2_1 + 8 >> 2] = $16_1;
        break label$87;
       }
       $4_1 = HEAP32[$3_1 + 4 >> 2];
       while (1) {
        if (($4_1 | 0) == ($14_1 | 0)) {
         if (!$16_1) {
          break label$87
         }
         HEAP32[$3_1 + 4 >> 2] = $12_1;
         HEAP32[$12_1 >> 2] = $3_1;
         HEAP32[$16_1 + 4 >> 2] = $14_1;
         HEAP32[$14_1 >> 2] = $16_1;
        } else {
         $1_1 = HEAP32[$4_1 + 4 >> 2];
         $108($0_1, $4_1);
         $4_1 = $1_1;
         continue;
        }
        break;
       };
      }
      if (!$23_1) {
       HEAP32[$8_1 + 4 >> 2] = $5_1;
       HEAP32[$5_1 >> 2] = $8_1;
       HEAP32[$13_1 + 8 >> 2] = $5_1;
       $23_1 = 0;
       $10_1 = $13_1;
       $4_1 = 0;
       break label$59;
      }
      $4_1 = HEAP32[$23_1 >> 2];
      while (1) {
       if (($4_1 | 0) == ($20_1 | 0)) {
        label$95 : {
         $4_1 = 0;
         if ($5_1) {
          break label$95
         }
         $10_1 = $13_1;
         $5_1 = 0;
         break label$59;
        }
       } else {
        $1_1 = HEAP32[$4_1 >> 2];
        $108($0_1, $4_1);
        $4_1 = $1_1;
        continue;
       }
       break;
      };
      HEAP32[$8_1 + 4 >> 2] = $23_1;
      HEAP32[$23_1 >> 2] = $8_1;
      HEAP32[$20_1 + 4 >> 2] = $5_1;
      HEAP32[$5_1 >> 2] = $20_1;
      $10_1 = $13_1;
      break label$59;
     }
     $10_1 = $1_1;
     $26_1 = 0;
    }
    if ($4_1) {
     continue
    }
    break;
   };
  }
  global$0 = $7_1 + 144 | 0;
 }
 
 function $104($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = 0;
  $7_1 = Math_imul($1_1, $5_1) - Math_imul($2_1, $4_1) | 0;
  HEAP32[$0_1 + 16 >> 2] = $7_1;
  HEAP32[$0_1 + 20 >> 2] = $7_1 >> 31;
  $1_1 = Math_imul($3_1, $4_1) - Math_imul($1_1, $6_1) | 0;
  HEAP32[$0_1 + 8 >> 2] = $1_1;
  HEAP32[$0_1 + 12 >> 2] = $1_1 >> 31;
  $1_1 = Math_imul($2_1, $6_1) - Math_imul($3_1, $5_1) | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[$0_1 + 4 >> 2] = $1_1 >> 31;
 }
 
 function $105($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  var $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $8_1 = global$0 - 48 | 0;
  global$0 = $8_1;
  $9_1 = HEAP32[$0_1 + 4 >> 2];
  if (HEAP32[$0_1 >> 2] == ($1_1 | 0)) {
   $10_1 = 2;
   if (($1_1 | 0) == ($9_1 | 0)) {
    $104($8_1 + 24 | 0, $5_1, $6_1, $7_1, $2_1, $3_1, $4_1);
    $0_1 = HEAP32[$0_1 + 12 >> 2];
    $2_1 = HEAP32[HEAP32[$1_1 + 8 >> 2] + 12 >> 2];
    $3_1 = HEAP32[$2_1 + 88 >> 2];
    $5_1 = HEAP32[$0_1 + 88 >> 2] - $3_1 | 0;
    $4_1 = HEAP32[$2_1 + 92 >> 2];
    $6_1 = HEAP32[$0_1 + 92 >> 2] - $4_1 | 0;
    $2_1 = HEAP32[$2_1 + 96 >> 2];
    $7_1 = HEAP32[$0_1 + 96 >> 2] - $2_1 | 0;
    $0_1 = HEAP32[$1_1 + 12 >> 2];
    $104($8_1, $5_1, $6_1, $7_1, HEAP32[$0_1 + 88 >> 2] - $3_1 | 0, HEAP32[$0_1 + 92 >> 2] - $4_1 | 0, HEAP32[$0_1 + 96 >> 2] - $2_1 | 0);
    $0_1 = __wasm_i64_mul(HEAP32[$8_1 + 8 >> 2], HEAP32[$8_1 + 12 >> 2], HEAP32[$8_1 + 32 >> 2], HEAP32[$8_1 + 36 >> 2]);
    $2_1 = i64toi32_i32$HIGH_BITS;
    $3_1 = __wasm_i64_mul(HEAP32[$8_1 >> 2], HEAP32[$8_1 + 4 >> 2], HEAP32[$8_1 + 24 >> 2], HEAP32[$8_1 + 28 >> 2]);
    $1_1 = $3_1 + $0_1 | 0;
    $0_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
    $0_1 = $1_1 >>> 0 < $3_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    $2_1 = __wasm_i64_mul(HEAP32[$8_1 + 16 >> 2], HEAP32[$8_1 + 20 >> 2], HEAP32[$8_1 + 40 >> 2], HEAP32[$8_1 + 44 >> 2]);
    $1_1 = $2_1 + $1_1 | 0;
    $0_1 = i64toi32_i32$HIGH_BITS + $0_1 | 0;
    $0_1 = $1_1 >>> 0 < $2_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
    if (($0_1 | 0) > 0) {
     $0_1 = 1
    } else {
     $0_1 = ($0_1 | 0) >= 0 ? $1_1 : 0
    }
    $10_1 = $0_1 ? 2 : 1;
   }
   global$0 = $8_1 + 48 | 0;
   return $10_1;
  }
  global$0 = $8_1 + 48 | 0;
  return ($1_1 | 0) == ($9_1 | 0);
 }
 
 function $106($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0;
  $15_1 = global$0 - 80 | 0;
  global$0 = $15_1;
  $45_1 = HEAP32[$4_1 >> 2];
  $16_1 = $1_1;
  $44_1 = HEAP32[$3_1 >> 2];
  if ($44_1) {
   $16_1 = HEAP32[$44_1 + 12 >> 2]
  }
  $21_1 = HEAP32[$16_1 + 96 >> 2];
  $18_1 = HEAP32[$16_1 + 92 >> 2];
  $22_1 = HEAP32[$16_1 + 88 >> 2];
  $13_1 = $45_1 ? HEAP32[$45_1 + 12 >> 2] : $2_1;
  $16_1 = HEAP32[$13_1 + 96 >> 2];
  $23_1 = HEAP32[$13_1 + 92 >> 2];
  $13_1 = HEAP32[$13_1 + 88 >> 2];
  $11_1 = HEAP32[$1_1 + 88 >> 2];
  $32_1 = HEAP32[$2_1 + 88 >> 2] - $11_1 | 0;
  $10_1 = $1_1 + 92 | 0;
  $8_1 = HEAP32[$10_1 >> 2];
  $33_1 = HEAP32[$2_1 + 92 >> 2] - $8_1 | 0;
  $5_1 = HEAP32[$2_1 + 96 >> 2];
  $14_1 = $1_1 + 96 | 0;
  $2_1 = HEAP32[$14_1 >> 2];
  $34_1 = $5_1 - $2_1 | 0;
  $5_1 = HEAP32[($44_1 ? $44_1 : $45_1) + 12 >> 2];
  $104($15_1 + 56 | 0, HEAP32[$5_1 + 88 >> 2] - $11_1 | 0, HEAP32[$5_1 + 92 >> 2] - $8_1 | 0, HEAP32[$5_1 + 96 >> 2] - $2_1 | 0, $32_1, $33_1, $34_1);
  $37_1 = HEAP32[$15_1 + 56 >> 2];
  $38_1 = HEAP32[$15_1 + 60 >> 2];
  $7_1 = $34_1 >> 31;
  $2_1 = __wasm_i64_mul($37_1, $38_1, $34_1, $7_1);
  $11_1 = i64toi32_i32$HIGH_BITS;
  $39_1 = HEAP32[$15_1 + 72 >> 2];
  $40_1 = HEAP32[$15_1 + 76 >> 2];
  $9_1 = $32_1 >> 31;
  $8_1 = __wasm_i64_mul($39_1, $40_1, $32_1, $9_1);
  $24_1 = $2_1 - $8_1 | 0;
  $25 = $11_1 - (i64toi32_i32$HIGH_BITS + ($2_1 >>> 0 < $8_1 >>> 0) | 0) | 0;
  $8_1 = __wasm_i64_mul($24_1, $25, $18_1, $18_1 >> 31);
  $5_1 = i64toi32_i32$HIGH_BITS;
  $6_1 = $33_1 >> 31;
  $2_1 = __wasm_i64_mul($39_1, $40_1, $33_1, $6_1);
  $11_1 = i64toi32_i32$HIGH_BITS;
  $12_1 = $8_1;
  $41_1 = HEAP32[$15_1 + 64 >> 2];
  $42_1 = HEAP32[$15_1 + 68 >> 2];
  $8_1 = __wasm_i64_mul($41_1, $42_1, $34_1, $7_1);
  $26_1 = $2_1 - $8_1 | 0;
  $27_1 = $11_1 - (i64toi32_i32$HIGH_BITS + ($2_1 >>> 0 < $8_1 >>> 0) | 0) | 0;
  $8_1 = __wasm_i64_mul($26_1, $27_1, $22_1, $22_1 >> 31);
  $11_1 = $12_1 + $8_1 | 0;
  $2_1 = i64toi32_i32$HIGH_BITS + $5_1 | 0;
  $2_1 = $8_1 >>> 0 > $11_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $8_1 = __wasm_i64_mul($32_1, $9_1, $41_1, $42_1);
  $5_1 = i64toi32_i32$HIGH_BITS;
  $7_1 = $11_1;
  $11_1 = __wasm_i64_mul($33_1, $6_1, $37_1, $38_1);
  $28_1 = $8_1 - $11_1 | 0;
  $29_1 = $5_1 - (i64toi32_i32$HIGH_BITS + ($8_1 >>> 0 < $11_1 >>> 0) | 0) | 0;
  $8_1 = __wasm_i64_mul($28_1, $29_1, $21_1, $21_1 >> 31);
  $11_1 = $7_1 + $8_1 | 0;
  $7_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
  $7_1 = $8_1 >>> 0 > $11_1 >>> 0 ? $7_1 + 1 | 0 : $7_1;
  $8_1 = $7_1;
  $2_1 = HEAP32[$10_1 >> 2];
  $5_1 = __wasm_i64_mul($41_1, $42_1, $2_1, $2_1 >> 31);
  $2_1 = i64toi32_i32$HIGH_BITS;
  $1_1 = HEAP32[$1_1 + 88 >> 2];
  $1_1 = __wasm_i64_mul($37_1, $38_1, $1_1, $1_1 >> 31);
  $5_1 = $1_1 + $5_1 | 0;
  $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
  $2_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $1_1 = HEAP32[$14_1 >> 2];
  $1_1 = __wasm_i64_mul($39_1, $40_1, $1_1, $1_1 >> 31);
  $5_1 = $1_1 + $5_1 | 0;
  $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
  $14_1 = $5_1;
  $9_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  label$3 : {
   $1_1 = HEAP32[$3_1 >> 2];
   if (!$1_1) {
    break label$3
   }
   $2_1 = HEAP32[$1_1 + 12 >> 2];
   while (1) {
    if (!$2_1) {
     break label$3
    }
    $1_1 = HEAP32[HEAP32[$1_1 + 8 >> 2] + 4 >> 2];
    $19_1 = HEAP32[$1_1 + 12 >> 2];
    $2_1 = HEAP32[$19_1 + 92 >> 2];
    $20_1 = $2_1;
    $12_1 = $2_1 >> 31;
    $2_1 = __wasm_i64_mul($41_1, $42_1, $2_1, $12_1);
    $6_1 = i64toi32_i32$HIGH_BITS;
    $10_1 = $2_1;
    $2_1 = HEAP32[$19_1 + 88 >> 2];
    $17_1 = $2_1;
    $7_1 = $2_1 >> 31;
    $5_1 = __wasm_i64_mul($37_1, $38_1, $2_1, $7_1);
    $10_1 = $10_1 + $5_1 | 0;
    $2_1 = i64toi32_i32$HIGH_BITS + $6_1 | 0;
    $2_1 = $5_1 >>> 0 > $10_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    $30_1 = $10_1;
    $5_1 = HEAP32[$19_1 + 96 >> 2];
    $10_1 = $5_1;
    $6_1 = $5_1 >> 31;
    $5_1 = __wasm_i64_mul($39_1, $40_1, $5_1, $6_1);
    $19_1 = $30_1 + $5_1 | 0;
    $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
    $2_1 = $5_1 >>> 0 > $19_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    $5_1 = $19_1;
    if (($2_1 | 0) < ($9_1 | 0) ? 1 : ($2_1 | 0) <= ($9_1 | 0) ? $5_1 >>> 0 < $14_1 >>> 0 : 0) {
     break label$3
    }
    if (HEAP32[$1_1 + 20 >> 2] == HEAP32[$0_1 + 100 >> 2]) {
     break label$3
    }
    $2_1 = __wasm_i64_mul($20_1, $12_1, $24_1, $25);
    $5_1 = i64toi32_i32$HIGH_BITS;
    $12_1 = $2_1;
    $2_1 = __wasm_i64_mul($17_1, $7_1, $26_1, $27_1);
    $17_1 = $12_1 + $2_1 | 0;
    $7_1 = i64toi32_i32$HIGH_BITS + $5_1 | 0;
    $5_1 = __wasm_i64_mul($28_1, $29_1, $10_1, $6_1);
    $6_1 = $5_1 + $17_1 | 0;
    $2_1 = i64toi32_i32$HIGH_BITS + ($2_1 >>> 0 > $17_1 >>> 0 ? $7_1 + 1 | 0 : $7_1) | 0;
    $2_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    $5_1 = $2_1;
    if (($8_1 | 0) > ($2_1 | 0) ? 1 : ($2_1 | 0) <= ($8_1 | 0) ? $6_1 >>> 0 <= $11_1 >>> 0 : 0) {
     break label$3
    }
    HEAP32[$3_1 >> 2] = $1_1;
    $2_1 = HEAP32[$1_1 + 12 >> 2];
    $21_1 = HEAP32[$2_1 + 96 >> 2];
    $18_1 = HEAP32[$2_1 + 92 >> 2];
    $22_1 = HEAP32[$2_1 + 88 >> 2];
    $11_1 = $6_1;
    $8_1 = $5_1;
    continue;
   };
  }
  $1_1 = __wasm_i64_mul($24_1, $25, $23_1, $23_1 >> 31);
  $2_1 = i64toi32_i32$HIGH_BITS;
  $5_1 = $1_1;
  $1_1 = __wasm_i64_mul($26_1, $27_1, $13_1, $13_1 >> 31);
  $5_1 = $5_1 + $1_1 | 0;
  $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
  $2_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $1_1 = __wasm_i64_mul($28_1, $29_1, $16_1, $16_1 >> 31);
  $6_1 = $1_1 + $5_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
  $5_1 = $1_1 >>> 0 > $6_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
  label$5 : {
   $1_1 = HEAP32[$4_1 >> 2];
   if (!$1_1) {
    $1_1 = 0;
    break label$5;
   }
   $2_1 = HEAP32[$1_1 + 12 >> 2];
   while (1) {
    if (!$2_1) {
     break label$5
    }
    $17_1 = HEAP32[HEAP32[$1_1 + 8 >> 2] >> 2];
    $31_1 = HEAP32[$17_1 + 12 >> 2];
    $2_1 = HEAP32[$31_1 + 92 >> 2];
    $35_1 = $2_1;
    $30_1 = $2_1 >> 31;
    $2_1 = __wasm_i64_mul($41_1, $42_1, $2_1, $30_1);
    $10_1 = i64toi32_i32$HIGH_BITS;
    $12_1 = $2_1;
    $2_1 = HEAP32[$31_1 + 88 >> 2];
    $19_1 = $2_1;
    $20_1 = $2_1 >> 31;
    $7_1 = __wasm_i64_mul($37_1, $38_1, $2_1, $20_1);
    $12_1 = $12_1 + $7_1 | 0;
    $2_1 = i64toi32_i32$HIGH_BITS + $10_1 | 0;
    $2_1 = $7_1 >>> 0 > $12_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    $43_1 = $12_1;
    $7_1 = HEAP32[$31_1 + 96 >> 2];
    $12_1 = $7_1;
    $10_1 = $7_1 >> 31;
    $7_1 = __wasm_i64_mul($39_1, $40_1, $7_1, $10_1);
    $31_1 = $43_1 + $7_1 | 0;
    $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
    $2_1 = $7_1 >>> 0 > $31_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    $7_1 = $31_1;
    if (($2_1 | 0) < ($9_1 | 0) ? 1 : ($2_1 | 0) <= ($9_1 | 0) ? $7_1 >>> 0 < $14_1 >>> 0 : 0) {
     break label$5
    }
    if (HEAP32[$17_1 + 20 >> 2] == HEAP32[$0_1 + 100 >> 2]) {
     break label$5
    }
    $2_1 = __wasm_i64_mul($35_1, $30_1, $24_1, $25);
    $7_1 = i64toi32_i32$HIGH_BITS;
    $30_1 = $2_1;
    $2_1 = __wasm_i64_mul($26_1, $27_1, $19_1, $20_1);
    $20_1 = $30_1 + $2_1 | 0;
    $7_1 = i64toi32_i32$HIGH_BITS + $7_1 | 0;
    $10_1 = __wasm_i64_mul($28_1, $29_1, $12_1, $10_1);
    $12_1 = $10_1 + $20_1 | 0;
    $2_1 = i64toi32_i32$HIGH_BITS + ($2_1 >>> 0 > $20_1 >>> 0 ? $7_1 + 1 | 0 : $7_1) | 0;
    $2_1 = $10_1 >>> 0 > $12_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    $10_1 = $12_1;
    $7_1 = $2_1;
    if (($5_1 | 0) > ($2_1 | 0) ? 1 : ($2_1 | 0) <= ($5_1 | 0) ? $6_1 >>> 0 >= $10_1 >>> 0 : 0) {
     break label$5
    }
    HEAP32[$4_1 >> 2] = $17_1;
    $2_1 = HEAP32[$17_1 + 12 >> 2];
    $16_1 = HEAP32[$2_1 + 96 >> 2];
    $23_1 = HEAP32[$2_1 + 92 >> 2];
    $13_1 = HEAP32[$2_1 + 88 >> 2];
    $1_1 = $17_1;
    $6_1 = $10_1;
    $5_1 = $7_1;
    continue;
   };
  }
  label$8 : {
   $8_1 = $5_1 - (($6_1 >>> 0 < $11_1 >>> 0) + $8_1 | 0) | 0;
   $11_1 = $6_1 - $11_1 | 0;
   $2_1 = $11_1;
   if (($8_1 | 0) > 0) {
    $2_1 = 1
   } else {
    $2_1 = ($8_1 | 0) >= 0 ? $2_1 >>> 0 >= 1 : 0
   }
   if ($2_1) {
    while (1) {
     $1_1 = (Math_imul($33_1, $23_1 - $18_1 | 0) + Math_imul($32_1, $13_1 - $22_1 | 0) | 0) + Math_imul($34_1, $16_1 - $21_1 | 0) | 0;
     $43_1 = $1_1;
     $31_1 = $1_1 >> 31;
     label$11 : {
      $1_1 = HEAP32[$3_1 >> 2];
      if (!$1_1) {
       break label$11
      }
      if (!HEAP32[$1_1 + 12 >> 2]) {
       break label$11
      }
      $14_1 = HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2];
      if (HEAP32[$14_1 + 20 >> 2] <= HEAP32[$0_1 + 100 >> 2]) {
       break label$11
      }
      $1_1 = HEAP32[$14_1 + 12 >> 2];
      $2_1 = HEAP32[$1_1 + 92 >> 2] - $18_1 | 0;
      $6_1 = HEAP32[$1_1 + 88 >> 2] - $22_1 | 0;
      $7_1 = HEAP32[$1_1 + 96 >> 2] - $21_1 | 0;
      $9_1 = (Math_imul($2_1, $33_1) + Math_imul($6_1, $32_1) | 0) + Math_imul($7_1, $34_1) | 0;
      $1_1 = $9_1 >>> 31 | 0;
      $5_1 = __wasm_i64_mul($24_1, $25, $2_1, $2_1 >> 31);
      $2_1 = i64toi32_i32$HIGH_BITS;
      $10_1 = $5_1;
      $5_1 = __wasm_i64_mul($26_1, $27_1, $6_1, $6_1 >> 31);
      $6_1 = $10_1 + $5_1 | 0;
      $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
      $2_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
      $5_1 = __wasm_i64_mul($28_1, $29_1, $7_1, $7_1 >> 31);
      $6_1 = $5_1 + $6_1 | 0;
      $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
      $2_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
      $5_1 = $6_1;
      if ($2_1 | $5_1) {
       if (($2_1 | 0) > -1) {
        break label$11
       }
       $1_1 = ($100($109($15_1 + 32 | 0, $9_1, $9_1 >> 31, $5_1, $2_1), $109($15_1 + 8 | 0, $43_1, $31_1, $11_1, $8_1)) | 0) > -1;
      }
      if (!$1_1) {
       break label$11
      }
      $1_1 = HEAP32[$14_1 + 12 >> 2];
      $21_1 = HEAP32[$1_1 + 96 >> 2];
      $18_1 = HEAP32[$1_1 + 92 >> 2];
      $22_1 = HEAP32[$1_1 + 88 >> 2];
      HEAP32[$3_1 >> 2] = ($44_1 | 0) == HEAP32[$3_1 >> 2] ? 0 : $14_1;
      $1_1 = $23_1 - $18_1 | 0;
      $1_1 = __wasm_i64_mul($24_1, $25, $1_1, $1_1 >> 31);
      $2_1 = i64toi32_i32$HIGH_BITS;
      $5_1 = $1_1;
      $1_1 = $13_1 - $22_1 | 0;
      $1_1 = __wasm_i64_mul($26_1, $27_1, $1_1, $1_1 >> 31);
      $8_1 = $5_1 + $1_1 | 0;
      $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
      $2_1 = $1_1 >>> 0 > $8_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
      $1_1 = $16_1 - $21_1 | 0;
      $1_1 = __wasm_i64_mul($28_1, $29_1, $1_1, $1_1 >> 31);
      $8_1 = $1_1 + $8_1 | 0;
      $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
      $11_1 = $8_1;
      $8_1 = $1_1 >>> 0 > $8_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
      continue;
     }
     $1_1 = HEAP32[$4_1 >> 2];
     if (!$1_1) {
      break label$8
     }
     if (!HEAP32[$1_1 + 12 >> 2]) {
      break label$8
     }
     $36_1 = HEAP32[HEAP32[$1_1 + 8 >> 2] >> 2];
     if (HEAP32[$36_1 + 20 >> 2] <= HEAP32[$0_1 + 100 >> 2]) {
      break label$8
     }
     $6_1 = HEAP32[$36_1 + 12 >> 2];
     $35_1 = HEAP32[$6_1 + 92 >> 2];
     $30_1 = $35_1 - $23_1 | 0;
     $1_1 = $30_1;
     $19_1 = $1_1;
     $20_1 = $1_1 >> 31;
     $1_1 = __wasm_i64_mul($41_1, $42_1, $1_1, $20_1);
     $2_1 = i64toi32_i32$HIGH_BITS;
     $5_1 = $1_1;
     $12_1 = HEAP32[$6_1 + 88 >> 2];
     $9_1 = $12_1 - $13_1 | 0;
     $1_1 = $9_1;
     $17_1 = $1_1;
     $10_1 = $1_1 >> 31;
     $1_1 = __wasm_i64_mul($37_1, $38_1, $1_1, $10_1);
     $5_1 = $5_1 + $1_1 | 0;
     $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
     $2_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
     $13_1 = $5_1;
     $6_1 = HEAP32[$6_1 + 96 >> 2];
     $5_1 = $6_1 - $16_1 | 0;
     $1_1 = $5_1;
     $14_1 = $1_1;
     $7_1 = $1_1 >> 31;
     $1_1 = __wasm_i64_mul($39_1, $40_1, $1_1, $7_1);
     if (($13_1 | 0) != (0 - $1_1 | 0)) {
      $1_1 = 1
     } else {
      $1_1 = (0 - (i64toi32_i32$HIGH_BITS + (($1_1 | 0) != 0) | 0) | 0) != ($2_1 | 0)
     }
     if ($1_1) {
      break label$8
     }
     $1_1 = $35_1 - $18_1 | 0;
     $1_1 = __wasm_i64_mul($24_1, $25, $1_1, $1_1 >> 31);
     $2_1 = i64toi32_i32$HIGH_BITS;
     $13_1 = $1_1;
     $1_1 = $12_1 - $22_1 | 0;
     $1_1 = __wasm_i64_mul($26_1, $27_1, $1_1, $1_1 >> 31);
     $13_1 = $13_1 + $1_1 | 0;
     $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
     $2_1 = $1_1 >>> 0 > $13_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
     $1_1 = $6_1 - $21_1 | 0;
     $1_1 = __wasm_i64_mul($28_1, $29_1, $1_1, $1_1 >> 31);
     $6_1 = $1_1 + $13_1 | 0;
     $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
     $2_1 = $1_1 >>> 0 > $6_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
     $1_1 = $6_1;
     if (($2_1 | 0) < 0) {
      $6_1 = 1
     } else {
      $6_1 = ($2_1 | 0) <= 0 ? $1_1 >>> 0 < 1 : 0
     }
     if ($6_1) {
      break label$8
     }
     $13_1 = (Math_imul($33_1, $30_1) + Math_imul($9_1, $32_1) | 0) + Math_imul($5_1, $34_1) | 0;
     $6_1 = $13_1 >>> 31 | 0;
     $9_1 = __wasm_i64_mul($19_1, $20_1, $24_1, $25);
     $5_1 = i64toi32_i32$HIGH_BITS;
     $12_1 = $9_1;
     $9_1 = __wasm_i64_mul($26_1, $27_1, $17_1, $10_1);
     $10_1 = $12_1 + $9_1 | 0;
     $5_1 = i64toi32_i32$HIGH_BITS + $5_1 | 0;
     $5_1 = $9_1 >>> 0 > $10_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
     $9_1 = __wasm_i64_mul($28_1, $29_1, $14_1, $7_1);
     $14_1 = $9_1 + $10_1 | 0;
     $7_1 = i64toi32_i32$HIGH_BITS + $5_1 | 0;
     $5_1 = $14_1;
     $7_1 = $9_1 >>> 0 > $5_1 >>> 0 ? $7_1 + 1 | 0 : $7_1;
     if ($5_1 | $7_1) {
      if (($7_1 | 0) > -1) {
       break label$8
      }
      $6_1 = ($100($109($15_1 + 32 | 0, $13_1, $13_1 >> 31, $5_1, $7_1), $109($15_1 + 8 | 0, $43_1, $31_1, $11_1, $8_1)) | 0) > 0;
     }
     if (!$6_1) {
      break label$8
     }
     HEAP32[$4_1 >> 2] = $36_1;
     $8_1 = HEAP32[$36_1 + 12 >> 2];
     $16_1 = HEAP32[$8_1 + 96 >> 2];
     $23_1 = HEAP32[$8_1 + 92 >> 2];
     $13_1 = HEAP32[$8_1 + 88 >> 2];
     $11_1 = $1_1;
     $8_1 = $2_1;
     continue;
    }
   }
   if (($8_1 | 0) > -1) {
    break label$8
   }
   while (1) {
    $2_1 = (Math_imul($33_1, $23_1 - $18_1 | 0) + Math_imul($32_1, $13_1 - $22_1 | 0) | 0) + Math_imul($34_1, $16_1 - $21_1 | 0) | 0;
    $43_1 = $2_1;
    $31_1 = $2_1 >> 31;
    label$15 : {
     if (!$1_1) {
      break label$15
     }
     if (!HEAP32[$1_1 + 12 >> 2]) {
      break label$15
     }
     $14_1 = HEAP32[HEAP32[$1_1 + 4 >> 2] + 8 >> 2];
     if (HEAP32[$14_1 + 20 >> 2] <= HEAP32[$0_1 + 100 >> 2]) {
      break label$15
     }
     $1_1 = HEAP32[$14_1 + 12 >> 2];
     $2_1 = HEAP32[$1_1 + 92 >> 2] - $23_1 | 0;
     $6_1 = HEAP32[$1_1 + 88 >> 2] - $13_1 | 0;
     $7_1 = HEAP32[$1_1 + 96 >> 2] - $16_1 | 0;
     $9_1 = (Math_imul($2_1, $33_1) + Math_imul($6_1, $32_1) | 0) + Math_imul($7_1, $34_1) | 0;
     $1_1 = ($9_1 | 0) > 0;
     $5_1 = __wasm_i64_mul($24_1, $25, $2_1, $2_1 >> 31);
     $2_1 = i64toi32_i32$HIGH_BITS;
     $10_1 = $5_1;
     $5_1 = __wasm_i64_mul($26_1, $27_1, $6_1, $6_1 >> 31);
     $6_1 = $10_1 + $5_1 | 0;
     $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
     $2_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
     $5_1 = __wasm_i64_mul($28_1, $29_1, $7_1, $7_1 >> 31);
     $6_1 = $5_1 + $6_1 | 0;
     $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
     $2_1 = $5_1 >>> 0 > $6_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
     $5_1 = $6_1;
     if ($2_1 | $5_1) {
      if (($2_1 | 0) > -1) {
       break label$15
      }
      $1_1 = ($100($109($15_1 + 32 | 0, $9_1, $9_1 >> 31, $5_1, $2_1), $109($15_1 + 8 | 0, $43_1, $31_1, $11_1, $8_1)) | 0) < 1;
     }
     if (!$1_1) {
      break label$15
     }
     $1_1 = HEAP32[$14_1 + 12 >> 2];
     $16_1 = HEAP32[$1_1 + 96 >> 2];
     $23_1 = HEAP32[$1_1 + 92 >> 2];
     $13_1 = HEAP32[$1_1 + 88 >> 2];
     $1_1 = ($45_1 | 0) == HEAP32[$4_1 >> 2] ? 0 : $14_1;
     HEAP32[$4_1 >> 2] = $1_1;
     $2_1 = $23_1 - $18_1 | 0;
     $2_1 = __wasm_i64_mul($24_1, $25, $2_1, $2_1 >> 31);
     $8_1 = i64toi32_i32$HIGH_BITS;
     $5_1 = $2_1;
     $2_1 = $13_1 - $22_1 | 0;
     $2_1 = __wasm_i64_mul($26_1, $27_1, $2_1, $2_1 >> 31);
     $11_1 = $5_1 + $2_1 | 0;
     $5_1 = i64toi32_i32$HIGH_BITS + $8_1 | 0;
     $5_1 = $2_1 >>> 0 > $11_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
     $2_1 = $16_1 - $21_1 | 0;
     $8_1 = __wasm_i64_mul($28_1, $29_1, $2_1, $2_1 >> 31);
     $11_1 = $8_1 + $11_1 | 0;
     $2_1 = i64toi32_i32$HIGH_BITS + $5_1 | 0;
     $2_1 = $8_1 >>> 0 > $11_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
     $8_1 = $2_1;
     continue;
    }
    $1_1 = HEAP32[$3_1 >> 2];
    if (!$1_1) {
     break label$8
    }
    if (!HEAP32[$1_1 + 12 >> 2]) {
     break label$8
    }
    $36_1 = HEAP32[HEAP32[$1_1 + 8 >> 2] + 4 >> 2];
    if (HEAP32[$36_1 + 20 >> 2] <= HEAP32[$0_1 + 100 >> 2]) {
     break label$8
    }
    $9_1 = HEAP32[$36_1 + 12 >> 2];
    $35_1 = HEAP32[$9_1 + 92 >> 2];
    $30_1 = $35_1 - $18_1 | 0;
    $1_1 = $30_1;
    $19_1 = $1_1;
    $20_1 = $1_1 >> 31;
    $1_1 = __wasm_i64_mul($41_1, $42_1, $1_1, $20_1);
    $2_1 = i64toi32_i32$HIGH_BITS;
    $5_1 = $1_1;
    $6_1 = HEAP32[$9_1 + 88 >> 2];
    $12_1 = $6_1 - $22_1 | 0;
    $1_1 = $12_1;
    $17_1 = $1_1;
    $7_1 = $1_1 >> 31;
    $1_1 = __wasm_i64_mul($37_1, $38_1, $1_1, $7_1);
    $5_1 = $5_1 + $1_1 | 0;
    $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
    $2_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    $18_1 = $5_1;
    $5_1 = HEAP32[$9_1 + 96 >> 2];
    $9_1 = $5_1 - $21_1 | 0;
    $1_1 = $9_1;
    $10_1 = $1_1;
    $14_1 = $1_1 >> 31;
    $1_1 = __wasm_i64_mul($39_1, $40_1, $1_1, $14_1);
    if (($18_1 | 0) != (0 - $1_1 | 0)) {
     $1_1 = 1
    } else {
     $1_1 = (0 - (i64toi32_i32$HIGH_BITS + (($1_1 | 0) != 0) | 0) | 0) != ($2_1 | 0)
    }
    if ($1_1) {
     break label$8
    }
    $1_1 = $23_1 - $35_1 | 0;
    $1_1 = __wasm_i64_mul($24_1, $25, $1_1, $1_1 >> 31);
    $2_1 = i64toi32_i32$HIGH_BITS;
    $35_1 = $1_1;
    $1_1 = $13_1 - $6_1 | 0;
    $1_1 = __wasm_i64_mul($26_1, $27_1, $1_1, $1_1 >> 31);
    $6_1 = $35_1 + $1_1 | 0;
    $2_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
    $2_1 = $1_1 >>> 0 > $6_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    $1_1 = $16_1 - $5_1 | 0;
    $1_1 = __wasm_i64_mul($28_1, $29_1, $1_1, $1_1 >> 31);
    $6_1 = $1_1 + $6_1 | 0;
    $5_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
    $5_1 = $1_1 >>> 0 > $6_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
    if (($5_1 | 0) > -1) {
     break label$8
    }
    $12_1 = (Math_imul($33_1, $30_1) + Math_imul($12_1, $32_1) | 0) + Math_imul($9_1, $34_1) | 0;
    $1_1 = ($12_1 | 0) > 0;
    $2_1 = __wasm_i64_mul($19_1, $20_1, $24_1, $25);
    $9_1 = i64toi32_i32$HIGH_BITS;
    $19_1 = $2_1;
    $2_1 = __wasm_i64_mul($26_1, $27_1, $17_1, $7_1);
    $17_1 = $19_1 + $2_1 | 0;
    $7_1 = i64toi32_i32$HIGH_BITS + $9_1 | 0;
    $9_1 = __wasm_i64_mul($28_1, $29_1, $10_1, $14_1);
    $14_1 = $9_1 + $17_1 | 0;
    $2_1 = i64toi32_i32$HIGH_BITS + ($2_1 >>> 0 > $17_1 >>> 0 ? $7_1 + 1 | 0 : $7_1) | 0;
    $2_1 = $9_1 >>> 0 > $14_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    $9_1 = $14_1;
    if ($2_1 | $9_1) {
     if (($2_1 | 0) > -1) {
      break label$8
     }
     $1_1 = $100($109($15_1 + 32 | 0, $12_1, $12_1 >> 31, $9_1, $2_1), $109($15_1 + 8 | 0, $43_1, $31_1, $11_1, $8_1)) >>> 31 | 0;
    }
    if (!$1_1) {
     break label$8
    }
    HEAP32[$3_1 >> 2] = $36_1;
    $2_1 = HEAP32[$36_1 + 12 >> 2];
    $21_1 = HEAP32[$2_1 + 96 >> 2];
    $18_1 = HEAP32[$2_1 + 92 >> 2];
    $1_1 = HEAP32[$4_1 >> 2];
    $22_1 = HEAP32[$2_1 + 88 >> 2];
    $11_1 = $6_1;
    $8_1 = $5_1;
    continue;
   };
  }
  global$0 = $15_1 + 80 | 0;
 }
 
 function $107($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0;
  $10_1 = global$0 - 32 | 0;
  global$0 = $10_1;
  $7_1 = HEAP32[$2_1 + 8 >> 2];
  if ($7_1) {
   $21_1 = $3_1 + 4 | 0;
   $11_1 = $7_1;
   while (1) {
    if (HEAP32[$11_1 + 20 >> 2] > HEAP32[$0_1 + 100 >> 2]) {
     $13_1 = $10_1 + 8 | 0;
     $8_1 = HEAP32[$11_1 + 12 >> 2];
     $18_1 = HEAP32[$8_1 + 92 >> 2] - HEAP32[$2_1 + 92 >> 2] | 0;
     $7_1 = $18_1;
     $16_1 = $7_1 >> 31;
     $7_1 = __wasm_i64_mul($7_1, $16_1, HEAP32[$5_1 + 8 >> 2], HEAP32[$5_1 + 12 >> 2]);
     $14_1 = i64toi32_i32$HIGH_BITS;
     $12_1 = $7_1;
     $19_1 = HEAP32[$8_1 + 88 >> 2] - HEAP32[$2_1 + 88 >> 2] | 0;
     $7_1 = $19_1;
     $20_1 = $7_1 >> 31;
     $15_1 = __wasm_i64_mul($7_1, $20_1, HEAP32[$5_1 >> 2], HEAP32[$5_1 + 4 >> 2]);
     $12_1 = $12_1 + $15_1 | 0;
     $7_1 = i64toi32_i32$HIGH_BITS + $14_1 | 0;
     $7_1 = $12_1 >>> 0 < $15_1 >>> 0 ? $7_1 + 1 | 0 : $7_1;
     $14_1 = $12_1;
     $12_1 = HEAP32[$8_1 + 96 >> 2] - HEAP32[$2_1 + 96 >> 2] | 0;
     $8_1 = $12_1;
     $15_1 = $8_1 >> 31;
     $17_1 = __wasm_i64_mul($8_1, $15_1, HEAP32[$5_1 + 16 >> 2], HEAP32[$5_1 + 20 >> 2]);
     $8_1 = $14_1 + $17_1 | 0;
     $7_1 = i64toi32_i32$HIGH_BITS + $7_1 | 0;
     $7_1 = $8_1 >>> 0 < $17_1 >>> 0 ? $7_1 + 1 | 0 : $7_1;
     $14_1 = __wasm_i64_mul(HEAP32[$4_1 + 8 >> 2], HEAP32[$4_1 + 12 >> 2], $18_1, $16_1);
     $16_1 = i64toi32_i32$HIGH_BITS;
     $17_1 = $13_1;
     $22_1 = $8_1;
     $23_1 = $7_1;
     $13_1 = __wasm_i64_mul(HEAP32[$4_1 >> 2], HEAP32[$4_1 + 4 >> 2], $19_1, $20_1);
     $8_1 = $13_1 + $14_1 | 0;
     $7_1 = i64toi32_i32$HIGH_BITS + $16_1 | 0;
     $7_1 = $8_1 >>> 0 < $13_1 >>> 0 ? $7_1 + 1 | 0 : $7_1;
     $13_1 = __wasm_i64_mul(HEAP32[$4_1 + 16 >> 2], HEAP32[$4_1 + 20 >> 2], $12_1, $15_1);
     $8_1 = $13_1 + $8_1 | 0;
     $7_1 = i64toi32_i32$HIGH_BITS + $7_1 | 0;
     $7_1 = $109($17_1, $22_1, $23_1, $8_1, $8_1 >>> 0 < $13_1 >>> 0 ? $7_1 + 1 | 0 : $7_1);
     label$5 : {
      if (HEAP32[$10_1 + 16 >> 2] | HEAP32[$10_1 + 20 >> 2] ? 0 : !HEAP32[$10_1 + 24 >> 2]) {
       break label$5
      }
      if (!$9_1) {
       $9_1 = HEAP32[$10_1 + 12 >> 2];
       HEAP32[$6_1 >> 2] = HEAP32[$10_1 + 8 >> 2];
       HEAP32[$6_1 + 4 >> 2] = $9_1;
       HEAP32[$6_1 + 16 >> 2] = HEAP32[$10_1 + 24 >> 2];
       $7_1 = $10_1 + 16 | 0;
       $8_1 = HEAP32[$7_1 + 4 >> 2];
       $9_1 = $6_1 + 8 | 0;
       HEAP32[$9_1 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[$9_1 + 4 >> 2] = $8_1;
       $9_1 = $11_1;
       break label$5;
      }
      $7_1 = $100($7_1, $6_1);
      if (($7_1 | 0) <= -1) {
       $9_1 = HEAP32[$10_1 + 12 >> 2];
       HEAP32[$6_1 >> 2] = HEAP32[$10_1 + 8 >> 2];
       HEAP32[$6_1 + 4 >> 2] = $9_1;
       HEAP32[$6_1 + 16 >> 2] = HEAP32[$10_1 + 24 >> 2];
       $7_1 = $10_1 + 16 | 0;
       $8_1 = HEAP32[$7_1 + 4 >> 2];
       $9_1 = $6_1 + 8 | 0;
       HEAP32[$9_1 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[$9_1 + 4 >> 2] = $8_1;
       $9_1 = $11_1;
       break label$5;
      }
      if ($7_1) {
       break label$5
      }
      $9_1 = ($105($9_1, $11_1, HEAP32[$3_1 >> 2], HEAP32[$21_1 >> 2], HEAP32[$3_1 + 8 >> 2], $19_1, $18_1, $12_1) | 0) != 2 ^ $1_1 ? $11_1 : $9_1;
     }
     $7_1 = HEAP32[$2_1 + 8 >> 2];
    }
    $11_1 = HEAP32[$11_1 >> 2];
    if (($11_1 | 0) != ($7_1 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $10_1 + 32 | 0;
  return $9_1;
 }
 
 function $108($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = HEAP32[$1_1 + 8 >> 2];
  $2_1 = HEAP32[$1_1 >> 2];
  if (($2_1 | 0) != ($1_1 | 0)) {
   HEAP32[$2_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2];
   HEAP32[HEAP32[$1_1 + 4 >> 2] >> 2] = $2_1;
   $4_1 = $2_1;
  }
  HEAP32[HEAP32[$3_1 + 12 >> 2] + 8 >> 2] = $4_1;
  $2_1 = HEAP32[$3_1 >> 2];
  if (($2_1 | 0) != ($3_1 | 0)) {
   HEAP32[$2_1 + 4 >> 2] = HEAP32[$3_1 + 4 >> 2];
   HEAP32[HEAP32[$3_1 + 4 >> 2] >> 2] = $2_1;
   $5_1 = $2_1;
  }
  HEAP32[HEAP32[$1_1 + 12 >> 2] + 8 >> 2] = $5_1;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$1_1 + 16 >> 2] = 0;
  $2_1 = $1_1 + 8 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0_1 + 56 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$2_1 >> 2] = $1_1;
  HEAP32[$3_1 + 16 >> 2] = 0;
  $1_1 = $3_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$2_1 >> 2] = $3_1;
  HEAP32[$0_1 + 116 >> 2] = HEAP32[$0_1 + 116 >> 2] - 1;
 }
 
 function $109($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0;
  if (($2_1 | 0) > 0) {
   $5_1 = 1
  } else {
   $5_1 = ($2_1 | 0) >= 0 ? $1_1 >>> 0 >= 1 : 0
  }
  label$1 : {
   if ($5_1) {
    HEAP32[$0_1 + 16 >> 2] = 1;
    $5_1 = -1;
    break label$1;
   }
   if (($2_1 | 0) < -1 ? 1 : ($2_1 | 0) <= -1) {
    HEAP32[$0_1 + 16 >> 2] = -1;
    $5_1 = $1_1;
    $1_1 = 0 - $1_1 | 0;
    $2_1 = 0 - ((($5_1 | 0) != 0) + $2_1 | 0) | 0;
    $5_1 = 1;
    break label$1;
   }
   HEAP32[$0_1 + 16 >> 2] = 0;
   $1_1 = 0;
   $2_1 = 0;
   $5_1 = 0;
  }
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  $1_1 = 0;
  $2_1 = 0;
  if (($4_1 | 0) > 0) {
   $6_1 = 1
  } else {
   $6_1 = ($4_1 | 0) >= 0 ? $3_1 : 0
  }
  label$4 : {
   if ($6_1) {
    $1_1 = $3_1;
    $2_1 = $4_1;
    break label$4;
   }
   if (($4_1 | 0) > -1) {
    break label$4
   }
   HEAP32[$0_1 + 16 >> 2] = $5_1;
   $1_1 = 0 - $3_1 | 0;
   $2_1 = 0 - ((($3_1 | 0) != 0) + $4_1 | 0) | 0;
  }
  HEAP32[$0_1 + 8 >> 2] = $1_1;
  HEAP32[$0_1 + 12 >> 2] = $2_1;
  return $0_1;
 }
 
 function $110($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $4_1 = $53($1_1 << 2)
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   while (1) {
    if ($2_1) {
     HEAP32[$4_1 + $3_1 >> 2] = HEAP32[HEAP32[$0_1 + 12 >> 2] + $3_1 >> 2];
     $2_1 = $2_1 - 1 | 0;
     $3_1 = $3_1 + 4 | 0;
     continue;
    }
    break;
   };
   $96($0_1);
   HEAP32[$0_1 + 12 >> 2] = $4_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $111($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $10_1 = HEAP32[$0_1 + 12 >> 2];
  $3_1 = $10_1 + (($1_1 + $2_1 | 0) / 2 << 4) | 0;
  $8_1 = $3_1 + 8 | 0;
  $6_1 = HEAP32[$8_1 + 4 >> 2];
  $4_1 = $5_1 + 8 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $6_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $6_1;
  $8_1 = $1_1;
  $6_1 = $2_1;
  while (1) {
   $3_1 = ($8_1 << 4) + $10_1 | 0;
   while (1) {
    $8_1 = $8_1 + 1 | 0;
    $4_1 = $112($3_1, $5_1);
    $9_1 = $3_1 + 16 | 0;
    $3_1 = $9_1;
    if ($4_1) {
     continue
    }
    break;
   };
   $4_1 = $8_1 - 1 | 0;
   $3_1 = ($6_1 << 4) + 16 | 0;
   while (1) {
    $6_1 = $6_1 - 1 | 0;
    $7_1 = $3_1 + $10_1 | 0;
    $12_1 = $3_1 - 16 | 0;
    $3_1 = $12_1;
    if ($112($5_1, $7_1 - 16 | 0)) {
     continue
    }
    break;
   };
   $3_1 = $6_1 + 1 | 0;
   if (($3_1 | 0) >= ($4_1 | 0)) {
    $4_1 = $9_1 - 16 | 0;
    $9_1 = $4_1 + 8 | 0;
    $7_1 = $9_1;
    $3_1 = HEAP32[$7_1 + 4 >> 2];
    $11_1 = $5_1 + 24 | 0;
    HEAP32[$11_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$11_1 + 4 >> 2] = $3_1;
    $3_1 = HEAP32[$4_1 + 4 >> 2];
    HEAP32[$5_1 + 16 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$5_1 + 20 >> 2] = $3_1;
    $7_1 = $10_1 + $12_1 | 0;
    $3_1 = HEAP32[$7_1 + 4 >> 2];
    HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $3_1;
    $3_1 = $7_1 + 8 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$9_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$9_1 + 4 >> 2] = $4_1;
    $4_1 = HEAP32[$5_1 + 20 >> 2];
    $7_1 = HEAP32[$0_1 + 12 >> 2] + $12_1 | 0;
    $3_1 = $7_1;
    HEAP32[$3_1 >> 2] = HEAP32[$5_1 + 16 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $4_1;
    $4_1 = HEAP32[$11_1 + 4 >> 2];
    $3_1 = $3_1 + 8 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$11_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $4_1;
    $3_1 = $6_1;
    $4_1 = $8_1;
   }
   if (($3_1 | 0) >= ($4_1 | 0)) {
    $10_1 = HEAP32[$0_1 + 12 >> 2];
    $8_1 = $4_1;
    $6_1 = $3_1;
    continue;
   }
   break;
  };
  if (($1_1 | 0) < ($3_1 | 0)) {
   $111($0_1, $1_1, $3_1)
  }
  if (($2_1 | 0) > ($4_1 | 0)) {
   $111($0_1, $4_1, $2_1)
  }
  global$0 = $5_1 + 32 | 0;
 }
 
 function $112($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $4_1 = 1;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  label$1 : {
   if (($2_1 | 0) < ($3_1 | 0)) {
    break label$1
   }
   if (($2_1 | 0) != ($3_1 | 0)) {
    return 0
   }
   $2_1 = HEAP32[$0_1 >> 2];
   $3_1 = HEAP32[$1_1 >> 2];
   if (($2_1 | 0) < ($3_1 | 0)) {
    break label$1
   }
   $4_1 = 0;
   if (($2_1 | 0) != ($3_1 | 0)) {
    break label$1
   }
   $4_1 = HEAP32[$0_1 + 8 >> 2] < HEAP32[$1_1 + 8 >> 2];
  }
  return $4_1;
 }
 
 function $113($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $5_1 = $1_1 + 8 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $2_1 + 8 | 0;
  $3_1 = $4_1;
  HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $6_1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $84($2_1);
  $3_1 = HEAP32[$4_1 + 4 >> 2];
  $1_1 = $0_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $114($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$0_1 + 8 >> 2];
  $1_1 = HEAP32[$0_1 + 12 >> 2];
  $5_1 = $1_1;
  $4_1 = Math_fround(Math_fround(Math_fround(+($3_1 >>> 0) + +($1_1 >>> 0) * 4294967296.0) * Math_fround(18446744073709551615.0)) + Math_fround(+HEAPU32[$0_1 >> 2] + +HEAPU32[$0_1 + 4 >> 2] * 4294967296.0));
  label$1 : {
   if (($1_1 | 0) > 0 ? 1 : ($1_1 | 0) >= 0) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 + 4 >> 2];
   $0_1 = HEAP32[$0_1 >> 2];
   HEAP32[$2_1 >> 2] = 0 - $0_1;
   HEAP32[$2_1 + 4 >> 2] = 0 - ($1_1 + (($0_1 | 0) != 0) | 0);
   $0_1 = !($0_1 | $1_1);
   $1_1 = $3_1 ^ -1;
   $3_1 = $0_1 + $1_1 | 0;
   $0_1 = $5_1 ^ -1;
   HEAP32[$2_1 + 8 >> 2] = $3_1;
   HEAP32[$2_1 + 12 >> 2] = $1_1 >>> 0 > $3_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
   $4_1 = Math_fround(-$114($2_1));
  }
  global$0 = $2_1 + 16 | 0;
  return $4_1;
 }
 
 function $115($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[$0_1 + 104 >> 2];
  if (($2_1 | 0) <= -1) {
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$0_1 + 104 >> 2] = $2_1;
   $3_1 = $2_1;
   if (HEAP32[$1_1 + 8 >> 2] == ($2_1 | 0)) {
    $110($1_1, $2_1 ? $2_1 << 1 : 1);
    $3_1 = HEAP32[$1_1 + 4 >> 2];
   }
   HEAP32[$1_1 + 4 >> 2] = $3_1 + 1;
   HEAP32[HEAP32[$1_1 + 12 >> 2] + ($3_1 << 2) >> 2] = $0_1;
  }
  return $2_1;
 }
 
 function $116($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  if (($2_1 | 0) == HEAP32[$0_1 + 8 >> 2]) {
   $117($0_1, $2_1 ? $2_1 << 1 : 1);
   $2_1 = HEAP32[$0_1 + 4 >> 2];
  }
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 + 12 >> 2] + Math_imul($2_1, 12) | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] + 1;
 }
 
 function $117($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $6_1 = $53(Math_imul($1_1, 12))
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   while (1) {
    if ($2_1) {
     $4_1 = HEAP32[$0_1 + 12 >> 2] + $3_1 | 0;
     $7_1 = HEAP32[$4_1 + 4 >> 2];
     $5_1 = $6_1 + $3_1 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $7_1;
     HEAP32[$5_1 + 8 >> 2] = HEAP32[$4_1 + 8 >> 2];
     $2_1 = $2_1 - 1 | 0;
     $3_1 = $3_1 + 12 | 0;
     continue;
    }
    break;
   };
   $96($0_1);
   HEAP32[$0_1 + 12 >> 2] = $6_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $118($0_1) {
  $85($0_1);
  HEAP32[$0_1 + 56 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 7656;
 }
 
 function $119($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 7656;
  $1_1 = HEAP32[$0_1 + 56 >> 2];
  if ($1_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   $54(HEAP32[$0_1 + 56 >> 2]);
  }
  return $0_1 | 0;
 }
 
 function $120($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 80 >> 2]]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $121($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0);
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $4_1 = $3_1 + 44 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $3_1 + 56 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 52 >> 2] = 1065353216;
  $4_1 = $3_1 - -64 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $3_1 + 76 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 72 >> 2] = 1065353216;
  $4_1 = $3_1 + 84 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 92 >> 2] = 0;
  HEAP32[$3_1 + 36 >> 2] = 0;
  HEAP32[$3_1 + 40 >> 2] = 0;
  HEAP32[$3_1 + 32 >> 2] = 1065353216;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $3_1 + 32 | 0, $3_1 + 16 | 0, $3_1);
  HEAP32[$2_1 + 12 >> 2] = 0;
  $1_1 = Math_fround($1_1 * Math_fround(.0833333283662796));
  $6_1 = Math_fround($5_1 + Math_fround(Math_fround(HEAPF32[$3_1 >> 2] - HEAPF32[$3_1 + 16 >> 2]) * Math_fround(.5)));
  $6_1 = Math_fround($6_1 + $6_1);
  $6_1 = Math_fround($6_1 * $6_1);
  $7_1 = Math_fround($5_1 + Math_fround(Math_fround(HEAPF32[$3_1 + 4 >> 2] - HEAPF32[$3_1 + 20 >> 2]) * Math_fround(.5)));
  $7_1 = Math_fround($7_1 + $7_1);
  $7_1 = Math_fround($7_1 * $7_1);
  HEAPF32[$2_1 + 8 >> 2] = $1_1 * Math_fround($6_1 + $7_1);
  $5_1 = Math_fround($5_1 + Math_fround(Math_fround(HEAPF32[$3_1 + 8 >> 2] - HEAPF32[$3_1 + 24 >> 2]) * Math_fround(.5)));
  $5_1 = Math_fround($5_1 + $5_1);
  $5_1 = Math_fround($5_1 * $5_1);
  HEAPF32[$2_1 + 4 >> 2] = $1_1 * Math_fround($6_1 + $5_1);
  HEAPF32[$2_1 >> 2] = $1_1 * Math_fround($7_1 + $5_1);
  global$0 = $3_1 + 96 | 0;
 }
 
 function $122($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0_1 + 48 >> 2] = $1_1;
 }
 
 function $123($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0);
  $3_1 = global$0 - 2080 | 0;
  global$0 = $3_1;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $5_1 = $0_1 + 8 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $8_1 = $2_1 + 8 | 0;
  $9_1 = HEAP32[$8_1 + 4 >> 2];
  $5_1 = $3_1 + 2072 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $9_1;
  $6_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$3_1 + 2064 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 2068 >> 2] = $6_1;
  $7_1 = HEAPF32[$3_1 + 2064 >> 2];
  $4_1 = $7_1;
  $10_1 = Math_fround($4_1 * $4_1);
  $12_1 = HEAPF32[$3_1 + 2068 >> 2];
  $4_1 = $12_1;
  $13_1 = Math_fround($10_1 + Math_fround($4_1 * $4_1));
  $10_1 = HEAPF32[$5_1 >> 2];
  $4_1 = $10_1;
  $4_1 = Math_fround($13_1 + Math_fround($4_1 * $4_1));
  label$1 : {
   if ($4_1 < Math_fround(9.999999747378752e-05)) {
    HEAP32[$3_1 + 2072 >> 2] = 0;
    HEAP32[$3_1 + 2076 >> 2] = 0;
    HEAP32[$3_1 + 2064 >> 2] = 1065353216;
    HEAP32[$3_1 + 2068 >> 2] = 0;
    break label$1;
   }
   $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($4_1)));
   HEAPF32[$3_1 + 2072 >> 2] = $4_1 * $10_1;
   HEAPF32[$3_1 + 2068 >> 2] = $4_1 * $12_1;
   HEAPF32[$3_1 + 2064 >> 2] = $4_1 * $7_1;
  }
  $4_1 = Math_fround(-999999984306749440.0);
  $9_1 = $0_1 + 8 | 0;
  while (1) {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 96 >> 2]]($1_1) | 0) > ($11_1 | 0)) {
    $5_1 = 128;
    label$5 : {
     label$6 : {
      if (((FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 96 >> 2]]($1_1) | 0) - $11_1 | 0) > 127) {
       break label$6
      }
      $5_1 = (FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 96 >> 2]]($1_1) | 0) - $11_1 | 0;
      if (($5_1 | 0) >= 1) {
       break label$6
      }
      $2_1 = 0;
      break label$5;
     }
     $2_1 = $5_1;
    }
    $8_1 = $2_1;
    $2_1 = 0;
    $6_1 = $3_1;
    while (1) {
     if (($2_1 | 0) != ($8_1 | 0)) {
      FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 108 >> 2]]($1_1, $2_1, $6_1);
      $6_1 = $6_1 + 16 | 0;
      $2_1 = $2_1 + 1 | 0;
      continue;
     }
     break;
    };
    $2_1 = $82($3_1 + 2064 | 0, $3_1, $5_1, $3_1 + 2060 | 0);
    $7_1 = HEAPF32[$3_1 + 2060 >> 2];
    if ($7_1 > $4_1) {
     $2_1 = ($2_1 << 4) + $3_1 | 0;
     $5_1 = HEAP32[$2_1 + 12 >> 2];
     HEAP32[$9_1 >> 2] = HEAP32[$2_1 + 8 >> 2];
     HEAP32[$9_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$2_1 + 4 >> 2];
     HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $5_1;
     $4_1 = $7_1;
    }
    $11_1 = $11_1 + 128 | 0;
    continue;
   }
   break;
  };
  global$0 = $3_1 + 2080 | 0;
 }
 
 function $124($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13_1 = 0, $14_1 = 0;
  $5_1 = global$0 - 2064 | 0;
  global$0 = $5_1;
  $4_1 = $2_1 + 12 | 0;
  $10_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  $3_1 = $10_1;
  while (1) {
   if ($3_1) {
    HEAP32[$4_1 >> 2] = -581039253;
    $3_1 = $3_1 - 1 | 0;
    $4_1 = $4_1 + 16 | 0;
    continue;
   } else {
    label$5 : while (1) {
     if (($9_1 | 0) != ($10_1 | 0)) {
      $3_1 = $9_1 << 4;
      $13_1 = $3_1 + $1_1 | 0;
      $8_1 = $2_1 + $3_1 | 0;
      $11_1 = $8_1 + 12 | 0;
      $7_1 = 0;
      while (1) {
       if ((FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 96 >> 2]]($0_1) | 0) <= ($7_1 | 0)) {
        $9_1 = $9_1 + 1 | 0;
        continue label$5;
       }
       $6_1 = 128;
       label$8 : {
        label$9 : {
         if (((FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 96 >> 2]]($0_1) | 0) - $7_1 | 0) > 127) {
          break label$9
         }
         $6_1 = (FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 96 >> 2]]($0_1) | 0) - $7_1 | 0;
         if (($6_1 | 0) >= 1) {
          break label$9
         }
         $3_1 = 0;
         break label$8;
        }
        $3_1 = $6_1;
       }
       $14_1 = $3_1;
       $3_1 = 0;
       $4_1 = $5_1;
       while (1) {
        if (($3_1 | 0) != ($14_1 | 0)) {
         FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 108 >> 2]]($0_1, $3_1, $4_1);
         $4_1 = $4_1 + 16 | 0;
         $3_1 = $3_1 + 1 | 0;
         continue;
        }
        break;
       };
       $3_1 = $82($13_1, $5_1, $6_1, $5_1 + 2060 | 0);
       $12_1 = HEAPF32[$5_1 + 2060 >> 2];
       if ($12_1 > HEAPF32[$11_1 >> 2]) {
        $3_1 = ($3_1 << 4) + $5_1 | 0;
        $6_1 = HEAP32[$3_1 + 12 >> 2];
        $4_1 = $8_1 + 8 | 0;
        HEAP32[$4_1 >> 2] = HEAP32[$3_1 + 8 >> 2];
        HEAP32[$4_1 + 4 >> 2] = $6_1;
        $4_1 = HEAP32[$3_1 + 4 >> 2];
        HEAP32[$8_1 >> 2] = HEAP32[$3_1 >> 2];
        HEAP32[$8_1 + 4 >> 2] = $4_1;
        HEAPF32[$11_1 >> 2] = $12_1;
       }
       $7_1 = $7_1 + 128 | 0;
       continue;
      };
     }
     break;
    }
   }
   break;
  };
  global$0 = $5_1 + 2064 | 0;
 }
 
 function $125($0_1) {
  $0_1 = $0_1 | 0;
  return 0;
 }
 
 function $126($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $127($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14_1 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19_1 = 0, $20_1 = Math_fround(0), $21_1 = 0, $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = 0, $25 = 0, $26_1 = 0, $27_1 = 0, $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38_1 = Math_fround(0), $39_1 = Math_fround(0);
  $2_1 = global$0 - 400 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$0_1 + 56 >> 2];
  if ($3_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] >> 2]]($3_1) | 0;
   $54(HEAP32[$0_1 + 56 >> 2]);
  }
  $3_1 = $53(132);
  HEAP8[$3_1 + 20 | 0] = 1;
  HEAP32[$3_1 >> 2] = 7608;
  HEAP32[$3_1 + 16 >> 2] = 0;
  HEAP8[$3_1 + 40 | 0] = 1;
  HEAP32[$3_1 + 8 >> 2] = 0;
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAP32[$3_1 + 36 >> 2] = 0;
  HEAP8[$3_1 + 60 | 0] = 1;
  HEAP32[$3_1 + 28 >> 2] = 0;
  HEAP32[$3_1 + 32 >> 2] = 0;
  HEAP32[$3_1 + 56 >> 2] = 0;
  HEAP32[$3_1 + 48 >> 2] = 0;
  HEAP32[$3_1 + 52 >> 2] = 0;
  HEAP32[$0_1 + 56 >> 2] = $3_1;
  HEAP32[$2_1 + 236 >> 2] = 0;
  HEAP8[$2_1 + 240 | 0] = 1;
  HEAP32[$2_1 + 228 >> 2] = 0;
  HEAP32[$2_1 + 232 >> 2] = 0;
  $3_1 = 0;
  while (1) if ((FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 96 >> 2]]($0_1) | 0) <= ($3_1 | 0)) {
   HEAP8[$2_1 + 196 | 0] = 1;
   HEAP32[$2_1 + 192 >> 2] = 0;
   HEAP8[$2_1 + 216 | 0] = 1;
   $3_1 = $2_1 + 184 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$2_1 + 212 >> 2] = 0;
   $3_1 = $2_1 + 204 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$2_1 + 172 >> 2] = 0;
   HEAP8[$2_1 + 176 | 0] = 1;
   HEAP32[$2_1 + 164 >> 2] = 0;
   HEAP32[$2_1 + 168 >> 2] = 0;
   label$4 : {
    if ($1_1) {
     HEAP32[$2_1 + 332 >> 2] = 0;
     HEAP8[$2_1 + 336 | 0] = 1;
     HEAP32[$2_1 + 324 >> 2] = 0;
     HEAP32[$2_1 + 328 >> 2] = 0;
     $25 = ($5_1 | 0) > 0 ? $5_1 : 0;
     $3_1 = 0;
     label$6 : while (1) {
      if (($3_1 | 0) != ($25 | 0)) {
       $10_1 = ($3_1 << 4) + $12_1 | 0;
       $26_1 = $10_1 + 8 | 0;
       $21_1 = $10_1 + 4 | 0;
       $1_1 = $3_1 + 1 | 0;
       $3_1 = $1_1;
       label$8 : while (1) {
        if (($3_1 | 0) == ($5_1 | 0)) {
         $3_1 = $1_1;
         continue label$6;
        }
        $18_1 = ($3_1 << 4) + $12_1 | 0;
        $24_1 = $18_1 + 8 | 0;
        $30_1 = $18_1 + 4 | 0;
        $8_1 = $3_1 + 1 | 0;
        $13_1 = $8_1;
        label$10 : while (1) {
         if (($5_1 | 0) <= ($13_1 | 0)) {
          $3_1 = $8_1;
          continue label$8;
         }
         $6_1 = HEAPF32[$10_1 >> 2];
         $7_1 = Math_fround(HEAPF32[$18_1 >> 2] - $6_1);
         $3_1 = ($13_1 << 4) + $12_1 | 0;
         $11_1 = HEAPF32[$21_1 >> 2];
         $16_1 = Math_fround(HEAPF32[$3_1 + 4 >> 2] - $11_1);
         $11_1 = Math_fround(HEAPF32[$30_1 >> 2] - $11_1);
         $6_1 = Math_fround(HEAPF32[$3_1 >> 2] - $6_1);
         $17_1 = Math_fround(Math_fround($7_1 * $16_1) - Math_fround($11_1 * $6_1));
         $14_1 = HEAPF32[$26_1 >> 2];
         $20_1 = Math_fround(HEAPF32[$24_1 >> 2] - $14_1);
         $23_1 = Math_fround($20_1 * $6_1);
         $6_1 = Math_fround(HEAPF32[$3_1 + 8 >> 2] - $14_1);
         $14_1 = Math_fround($23_1 - Math_fround($7_1 * $6_1));
         $16_1 = Math_fround(Math_fround($11_1 * $6_1) - Math_fround($20_1 * $16_1));
         $15_1 = 0;
         $6_1 = Math_fround(1.0);
         while (1) if (($15_1 | 0) == 2) {
          $13_1 = $13_1 + 1 | 0;
          continue label$10;
         } else {
          HEAP32[$2_1 + 148 >> 2] = 0;
          $7_1 = Math_fround($17_1 * $6_1);
          HEAPF32[$2_1 + 144 >> 2] = $7_1;
          $11_1 = Math_fround($14_1 * $6_1);
          HEAPF32[$2_1 + 140 >> 2] = $11_1;
          $6_1 = Math_fround($16_1 * $6_1);
          HEAPF32[$2_1 + 136 >> 2] = $6_1;
          label$15 : {
           if (!(Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($11_1 * $11_1)) + Math_fround($7_1 * $7_1)) > Math_fround(9.999999747378752e-05))) {
            break label$15
           }
           $4_1 = 0;
           $31_1 = $84($2_1 + 136 | 0);
           $19_1 = HEAP32[$2_1 + 324 >> 2];
           $32_1 = ($19_1 | 0) > 0 ? $19_1 : 0;
           $6_1 = HEAPF32[$2_1 + 144 >> 2];
           $7_1 = HEAPF32[$2_1 + 140 >> 2];
           $11_1 = HEAPF32[$2_1 + 136 >> 2];
           $3_1 = HEAP32[$2_1 + 332 >> 2];
           label$16 : {
            while (1) {
             $9_1 = $4_1;
             if (($32_1 | 0) == ($4_1 | 0)) {
              break label$16
             }
             $20_1 = HEAPF32[$3_1 >> 2];
             $33_1 = $3_1 + 4 | 0;
             $27_1 = $3_1 + 8 | 0;
             $3_1 = $3_1 + 16 | 0;
             $4_1 = $9_1 + 1 | 0;
             if (!(Math_fround(Math_fround(Math_fround($11_1 * $20_1) + Math_fround($7_1 * HEAPF32[$33_1 >> 2])) + Math_fround($6_1 * HEAPF32[$27_1 >> 2])) > Math_fround(.9990000128746033))) {
              continue
             }
             break;
            };
            if (($9_1 | 0) < ($19_1 | 0)) {
             break label$15
            }
           }
           $20_1 = Math_fround(Math_fround(Math_fround($11_1 * HEAPF32[$10_1 >> 2]) + Math_fround($7_1 * HEAPF32[$21_1 >> 2])) + Math_fround($6_1 * HEAPF32[$26_1 >> 2]));
           HEAPF32[$2_1 + 148 >> 2] = -$20_1;
           $4_1 = 0;
           $3_1 = $12_1;
           label$18 : {
            while (1) {
             $9_1 = $4_1;
             if (($25 | 0) == ($4_1 | 0)) {
              break label$18
             }
             $22_1 = HEAPF32[$3_1 >> 2];
             $19_1 = $3_1 + 4 | 0;
             $32_1 = $3_1 + 8 | 0;
             $3_1 = $3_1 + 16 | 0;
             $4_1 = $9_1 + 1 | 0;
             if (!(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($11_1 * $22_1) + Math_fround($7_1 * HEAPF32[$19_1 >> 2])) + Math_fround($6_1 * HEAPF32[$32_1 >> 2])) - $20_1) + Math_fround(-.009999999776482582)) > Math_fround(0.0))) {
              continue
             }
             break;
            };
            if (($5_1 | 0) > ($9_1 | 0)) {
             break label$15
            }
           }
           $128($2_1 + 320 | 0, $31_1);
          }
          $15_1 = $15_1 + 1 | 0;
          $6_1 = Math_fround(-1.0);
          continue;
         };
        };
       };
      }
      break;
     };
     HEAP8[$2_1 + 152 | 0] = 1;
     HEAP32[$2_1 + 140 >> 2] = 0;
     HEAP32[$2_1 + 144 >> 2] = 0;
     HEAP32[$2_1 + 148 >> 2] = 0;
     $1_1 = HEAP32[$2_1 + 324 >> 2];
     $4_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
     $3_1 = HEAP32[$2_1 + 332 >> 2];
     while (1) if ($4_1) {
      $5_1 = $3_1 + 8 | 0;
      $12_1 = HEAP32[$5_1 + 4 >> 2];
      $1_1 = $2_1 + 120 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $12_1;
      $1_1 = HEAP32[$3_1 + 4 >> 2];
      HEAP32[$2_1 + 112 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$2_1 + 116 >> 2] = $1_1;
      $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
      HEAPF32[$2_1 + 124 >> 2] = HEAPF32[$2_1 + 124 >> 2] - $6_1;
      $3_1 = $3_1 + 16 | 0;
      $4_1 = $4_1 - 1 | 0;
      $128($2_1 + 136 | 0, $2_1 + 112 | 0);
      continue;
     } else {
      $3_1 = 0;
      HEAP32[$2_1 + 124 >> 2] = 0;
      HEAP8[$2_1 + 128 | 0] = 1;
      HEAP32[$2_1 + 116 >> 2] = 0;
      HEAP32[$2_1 + 120 >> 2] = 0;
      $10_1 = HEAP32[$2_1 + 140 >> 2];
      $21_1 = ($10_1 | 0) > 0 ? $10_1 : 0;
      $8_1 = HEAP32[$2_1 + 148 >> 2];
      label$23 : while (1) {
       if (($3_1 | 0) != ($21_1 | 0)) {
        $13_1 = $8_1 + ($3_1 << 4) | 0;
        $24_1 = $13_1 + 12 | 0;
        $25 = $13_1 + 8 | 0;
        $26_1 = $13_1 + 4 | 0;
        $1_1 = $3_1 + 1 | 0;
        $3_1 = $1_1;
        label$25 : while (1) {
         if (($3_1 | 0) == ($10_1 | 0)) {
          $3_1 = $1_1;
          continue label$23;
         }
         $15_1 = $8_1 + ($3_1 << 4) | 0;
         $18_1 = $15_1 + 8 | 0;
         $19_1 = $15_1 + 4 | 0;
         $30_1 = $15_1 + 12 | 0;
         $12_1 = $3_1 + 1 | 0;
         $4_1 = $12_1;
         while (1) if (($4_1 | 0) >= ($10_1 | 0)) {
          $3_1 = $12_1;
          continue label$25;
         } else {
          $3_1 = $8_1 + ($4_1 << 4) | 0;
          $5_1 = $3_1 + 4 | 0;
          $9_1 = $3_1 + 8 | 0;
          $129($2_1 + 88 | 0, HEAPF32[$15_1 >> 2], HEAPF32[$19_1 >> 2], HEAPF32[$18_1 >> 2], HEAPF32[$3_1 >> 2], HEAPF32[$5_1 >> 2], HEAPF32[$9_1 >> 2]);
          $23_1 = HEAPF32[$2_1 + 100 >> 2];
          $6_1 = HEAPF32[$2_1 + 96 >> 2];
          $7_1 = HEAPF32[$2_1 + 92 >> 2];
          $11_1 = HEAPF32[$2_1 + 88 >> 2];
          $129($2_1 + 88 | 0, HEAPF32[$3_1 >> 2], HEAPF32[$5_1 >> 2], HEAPF32[$9_1 >> 2], HEAPF32[$13_1 >> 2], HEAPF32[$26_1 >> 2], HEAPF32[$25 >> 2]);
          $16_1 = HEAPF32[$2_1 + 96 >> 2];
          $17_1 = HEAPF32[$2_1 + 92 >> 2];
          $14_1 = HEAPF32[$2_1 + 88 >> 2];
          $129($2_1 + 88 | 0, HEAPF32[$13_1 >> 2], HEAPF32[$26_1 >> 2], HEAPF32[$25 >> 2], HEAPF32[$15_1 >> 2], HEAPF32[$19_1 >> 2], HEAPF32[$18_1 >> 2]);
          $20_1 = HEAPF32[$2_1 + 96 >> 2];
          $22_1 = HEAPF32[$2_1 + 92 >> 2];
          $29_1 = HEAPF32[$2_1 + 88 >> 2];
          label$30 : {
           if (!(Math_fround(Math_fround(Math_fround($11_1 * $11_1) + Math_fround($7_1 * $7_1)) + Math_fround($6_1 * $6_1)) > Math_fround(9.999999747378752e-05))) {
            break label$30
           }
           if (!(Math_fround(Math_fround(Math_fround($14_1 * $14_1) + Math_fround($17_1 * $17_1)) + Math_fround($16_1 * $16_1)) > Math_fround(9.999999747378752e-05))) {
            break label$30
           }
           if (!(Math_fround(Math_fround(Math_fround($29_1 * $29_1) + Math_fround($22_1 * $22_1)) + Math_fround($20_1 * $20_1)) > Math_fround(9.999999747378752e-05))) {
            break label$30
           }
           $36_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$13_1 >> 2] * $11_1) + Math_fround(HEAPF32[$26_1 >> 2] * $7_1)) + Math_fround(HEAPF32[$25 >> 2] * $6_1));
           if (!(Math_fround(Math_abs($36_1)) > Math_fround(9.999999974752427e-07))) {
            break label$30
           }
           $28_1 = HEAPF32[$3_1 + 12 >> 2];
           $34_1 = HEAPF32[$30_1 >> 2];
           $35_1 = HEAPF32[$24_1 >> 2];
           HEAPF32[$2_1 + 100 >> 2] = $23_1;
           $23_1 = Math_fround(Math_fround(-1.0) / $36_1);
           $6_1 = Math_fround($23_1 * Math_fround(Math_fround($28_1 * $20_1) + Math_fround(Math_fround($34_1 * $16_1) + Math_fround($6_1 * $35_1))));
           HEAPF32[$2_1 + 96 >> 2] = $6_1;
           $7_1 = Math_fround($23_1 * Math_fround(Math_fround($28_1 * $22_1) + Math_fround(Math_fround($34_1 * $17_1) + Math_fround($7_1 * $35_1))));
           HEAPF32[$2_1 + 92 >> 2] = $7_1;
           $11_1 = Math_fround($23_1 * Math_fround(Math_fround($28_1 * $29_1) + Math_fround(Math_fround($34_1 * $14_1) + Math_fround($11_1 * $35_1))));
           HEAPF32[$2_1 + 88 >> 2] = $11_1;
           $5_1 = 0;
           $3_1 = $8_1;
           label$31 : {
            while (1) {
             $9_1 = $5_1;
             if (($21_1 | 0) == ($5_1 | 0)) {
              break label$31
             }
             $16_1 = HEAPF32[$3_1 >> 2];
             $31_1 = $3_1 + 4 | 0;
             $32_1 = $3_1 + 8 | 0;
             $33_1 = $3_1 + 12 | 0;
             $3_1 = $3_1 + 16 | 0;
             $5_1 = $9_1 + 1 | 0;
             if (!(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($16_1 * $11_1) + Math_fround(HEAPF32[$31_1 >> 2] * $7_1)) + Math_fround(HEAPF32[$32_1 >> 2] * $6_1)) + HEAPF32[$33_1 >> 2]) + Math_fround(-.009999999776482582)) > Math_fround(0.0))) {
              continue
             }
             break;
            };
            if (($9_1 | 0) < ($10_1 | 0)) {
             break label$30
            }
           }
           $128($2_1 + 112 | 0, $2_1 + 88 | 0);
          }
          $4_1 = $4_1 + 1 | 0;
          continue;
         };
        };
       }
       break;
      };
      $130($2_1 + 160 | 0, HEAP32[$2_1 + 124 >> 2], HEAP32[$2_1 + 116 >> 2]);
      $57($2_1 + 112 | 0);
      $57($2_1 + 136 | 0);
      $57($2_1 + 320 | 0);
      break label$4;
     };
    }
    $130($2_1 + 160 | 0, $12_1, $5_1);
   }
   $5_1 = 0;
   HEAP32[$2_1 + 148 >> 2] = 0;
   HEAP8[$2_1 + 152 | 0] = 1;
   HEAP32[$2_1 + 140 >> 2] = 0;
   HEAP32[$2_1 + 144 >> 2] = 0;
   $1_1 = HEAP32[$2_1 + 204 >> 2];
   $131($2_1 + 136 | 0, $1_1, $2_1 + 320 | 0);
   HEAP32[$2_1 + 124 >> 2] = 0;
   HEAP8[$2_1 + 128 | 0] = 1;
   HEAP32[$2_1 + 116 >> 2] = 0;
   HEAP32[$2_1 + 120 >> 2] = 0;
   $1($2_1 + 320 | 0, 0, 36);
   HEAP32[$2_1 + 332 >> 2] = 0;
   HEAP8[$2_1 + 336 | 0] = 1;
   HEAP32[$2_1 + 324 >> 2] = 0;
   HEAP32[$2_1 + 328 >> 2] = 0;
   label$33 : {
    if (($1_1 | 0) <= -1) {
     $4_1 = Math_imul($1_1, 36);
     $3_1 = $1_1;
     while (1) {
      if (!$3_1) {
       break label$33
      }
      $3_1 = $3_1 + 1 | 0;
      $57($4_1);
      $4_1 = $4_1 + 36 | 0;
      continue;
     };
    }
    $3_1 = $1_1;
    if ($3_1) {
     $132($2_1 + 112 | 0, $1_1);
     $5_1 = HEAP32[$2_1 + 124 >> 2];
    }
    $4_1 = $5_1;
    while (1) {
     if (!$3_1) {
      break label$33
     }
     $3_1 = $3_1 - 1 | 0;
     $133($4_1, $2_1 + 320 | 0);
     $4_1 = $4_1 + 36 | 0;
     continue;
    };
   }
   HEAP32[$2_1 + 116 >> 2] = $1_1;
   $57($2_1 + 320 | 0);
   $4_1 = HEAP32[$2_1 + 164 >> 2];
   $131(HEAP32[$0_1 + 56 >> 2] + 4 | 0, $4_1, $2_1 + 320 | 0);
   $3_1 = 0;
   $4_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
   $8_1 = HEAP32[$2_1 + 172 >> 2];
   while (1) {
    if ($4_1) {
     $12_1 = $3_1 + $8_1 | 0;
     $10_1 = HEAP32[$12_1 + 4 >> 2];
     $9_1 = HEAP32[HEAP32[$0_1 + 56 >> 2] + 16 >> 2] + $3_1 | 0;
     HEAP32[$9_1 >> 2] = HEAP32[$12_1 >> 2];
     HEAP32[$9_1 + 4 >> 2] = $10_1;
     $12_1 = $12_1 + 8 | 0;
     $13_1 = HEAP32[$12_1 + 4 >> 2];
     $9_1 = $9_1 + 8 | 0;
     HEAP32[$9_1 >> 2] = HEAP32[$12_1 >> 2];
     HEAP32[$9_1 + 4 >> 2] = $13_1;
     $4_1 = $4_1 - 1 | 0;
     $3_1 = $3_1 + 16 | 0;
     continue;
    }
    break;
   };
   $25 = ($1_1 | 0) > 0 ? $1_1 : 0;
   $9_1 = HEAP32[$2_1 + 148 >> 2];
   $26_1 = HEAP32[$2_1 + 192 >> 2];
   $21_1 = HEAP32[$2_1 + 212 >> 2];
   $13_1 = $2_1 + 96 | 0;
   $12_1 = 0;
   label$42 : while (1) {
    label$43 : {
     if (($12_1 | 0) == ($25 | 0)) {
      $3_1 = 0;
      HEAP32[$2_1 + 100 >> 2] = 0;
      HEAP8[$2_1 + 104 | 0] = 1;
      HEAP32[$2_1 + 92 >> 2] = 0;
      HEAP32[$2_1 + 96 >> 2] = 0;
      $1_1 = HEAP32[$2_1 + 116 >> 2];
      $4_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
      break label$43;
     }
     $1_1 = Math_imul($12_1, 36) + $5_1 | 0;
     $4_1 = 0;
     $18_1 = $26_1 + Math_imul(HEAP32[$21_1 + ($12_1 << 2) >> 2], 12) | 0;
     $3_1 = $18_1;
     while (1) {
      $10_1 = HEAP32[(Math_imul(HEAP32[$3_1 + 4 >> 2], 12) + $3_1 | 0) + 8 >> 2];
      HEAP32[$2_1 + 64 >> 2] = $10_1;
      $134($1_1, $2_1 - -64 | 0);
      $10_1 = $8_1 + ($10_1 << 4) | 0;
      $6_1 = HEAPF32[$10_1 >> 2];
      $15_1 = $8_1 + (HEAP32[$3_1 + 8 >> 2] << 4) | 0;
      $7_1 = HEAPF32[$15_1 >> 2];
      $11_1 = HEAPF32[$10_1 + 4 >> 2];
      $16_1 = HEAPF32[$15_1 + 4 >> 2];
      $17_1 = HEAPF32[$10_1 + 8 >> 2];
      $14_1 = HEAPF32[$15_1 + 8 >> 2];
      HEAP32[$2_1 + 100 >> 2] = 0;
      HEAPF32[$2_1 + 96 >> 2] = $14_1 - $17_1;
      HEAPF32[$2_1 + 92 >> 2] = $16_1 - $11_1;
      HEAPF32[$2_1 + 88 >> 2] = $7_1 - $6_1;
      $84($2_1 + 88 | 0);
      if (($4_1 | 0) <= 1) {
       $19_1 = HEAP32[$13_1 + 4 >> 2];
       $10_1 = ($2_1 + 320 | 0) + ($4_1 << 4) | 0;
       HEAP32[$10_1 + 8 >> 2] = HEAP32[$13_1 >> 2];
       HEAP32[$10_1 + 12 >> 2] = $19_1;
       $15_1 = HEAP32[$2_1 + 92 >> 2];
       HEAP32[$10_1 >> 2] = HEAP32[$2_1 + 88 >> 2];
       HEAP32[$10_1 + 4 >> 2] = $15_1;
       $4_1 = $4_1 + 1 | 0;
      } else {
       $4_1 = 2
      }
      $3_1 = Math_imul(HEAP32[$3_1 + 4 >> 2], 12) + $3_1 | 0;
      $3_1 = Math_imul(HEAP32[$3_1 >> 2], 12) + $3_1 | 0;
      if (($18_1 | 0) != ($3_1 | 0)) {
       continue
      }
      break;
     };
     label$48 : {
      if (($4_1 | 0) == 2) {
       $3_1 = $9_1 + ($12_1 << 4) | 0;
       HEAP32[$3_1 + 12 >> 2] = 0;
       $6_1 = HEAPF32[$2_1 + 340 >> 2];
       $7_1 = HEAPF32[$2_1 + 320 >> 2];
       $11_1 = HEAPF32[$2_1 + 324 >> 2];
       $16_1 = HEAPF32[$2_1 + 336 >> 2];
       HEAPF32[$3_1 + 8 >> 2] = Math_fround($6_1 * $7_1) - Math_fround($11_1 * $16_1);
       $23_1 = $16_1;
       $16_1 = HEAPF32[$2_1 + 328 >> 2];
       $37_1 = $7_1;
       $7_1 = HEAPF32[$2_1 + 344 >> 2];
       HEAPF32[$3_1 + 4 >> 2] = Math_fround($23_1 * $16_1) - Math_fround($37_1 * $7_1);
       HEAPF32[$3_1 >> 2] = Math_fround($11_1 * $7_1) - Math_fround($16_1 * $6_1);
       $84($3_1);
       HEAPF32[$1_1 + 20 >> 2] = HEAPF32[$3_1 >> 2];
       HEAPF32[$1_1 + 24 >> 2] = HEAPF32[$3_1 + 4 >> 2];
       $6_1 = HEAPF32[$3_1 + 8 >> 2];
       HEAP32[$1_1 + 32 >> 2] = 1900671690;
       HEAPF32[$1_1 + 28 >> 2] = $6_1;
       break label$48;
      }
      $3_1 = $9_1 + ($12_1 << 4) | 0;
      HEAP32[$3_1 >> 2] = 0;
      HEAP32[$3_1 + 4 >> 2] = 0;
      $3_1 = $3_1 + 8 | 0;
      HEAP32[$3_1 >> 2] = 0;
      HEAP32[$3_1 + 4 >> 2] = 0;
     }
     $4_1 = 0;
     $3_1 = HEAP32[$1_1 + 4 >> 2];
     $3_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
     $10_1 = $9_1 + ($12_1 << 4) | 0;
     $18_1 = $10_1 + 8 | 0;
     $19_1 = $10_1 + 4 | 0;
     $24_1 = $1_1 + 12 | 0;
     $6_1 = Math_fround(1000000015047466219876688.0e6);
     while (1) if ($3_1) {
      $15_1 = HEAP32[HEAP32[$0_1 + 56 >> 2] + 16 >> 2] + (HEAP32[HEAP32[$24_1 >> 2] + $4_1 >> 2] << 4) | 0;
      $7_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$15_1 >> 2] * HEAPF32[$10_1 >> 2]) + Math_fround(HEAPF32[$15_1 + 4 >> 2] * HEAPF32[$19_1 >> 2])) + Math_fround(HEAPF32[$15_1 + 8 >> 2] * HEAPF32[$18_1 >> 2]));
      $6_1 = $6_1 > $7_1 ? $7_1 : $6_1;
      $4_1 = $4_1 + 4 | 0;
      $3_1 = $3_1 - 1 | 0;
      continue;
     } else {
      HEAPF32[$1_1 + 32 >> 2] = -$6_1;
      $12_1 = $12_1 + 1 | 0;
      continue label$42;
     };
    }
    break;
   };
   while (1) {
    HEAP32[$2_1 + 320 >> 2] = $3_1;
    if (($3_1 | 0) != ($4_1 | 0)) {
     $3_1 = $3_1 + 1 | 0;
     $134($2_1 + 88 | 0, $2_1 + 320 | 0);
     continue;
    }
    break;
   };
   $26_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
   $10_1 = HEAP32[$2_1 + 124 >> 2];
   $25 = $2_1 + 32 | 0;
   while (1) {
    label$56 : {
     label$57 : {
      label$58 : {
       $1_1 = HEAP32[$2_1 + 92 >> 2];
       if ($1_1) {
        HEAP32[$2_1 + 76 >> 2] = 0;
        HEAP8[$2_1 + 80 | 0] = 1;
        HEAP32[$2_1 + 68 >> 2] = 0;
        HEAP32[$2_1 + 72 >> 2] = 0;
        $3_1 = $1_1 - 1 | 0;
        $5_1 = HEAP32[HEAP32[$2_1 + 100 >> 2] + ($3_1 << 2) >> 2];
        HEAP32[$2_1 + 60 >> 2] = $5_1;
        $134($2_1 - -64 | 0, $2_1 + 60 | 0);
        HEAP32[$2_1 + 92 >> 2] = $3_1;
        $4_1 = ($1_1 << 2) - 8 | 0;
        $1_1 = $10_1 + Math_imul($5_1, 36) | 0;
        $6_1 = HEAPF32[$1_1 + 20 >> 2];
        $7_1 = HEAPF32[$1_1 + 28 >> 2];
        $11_1 = HEAPF32[$1_1 + 24 >> 2];
        while (1) {
         label$61 : {
          if (($3_1 | 0) <= 0) {
           $15_1 = HEAP32[$2_1 + 68 >> 2];
           if (($15_1 | 0) > 1) {
            break label$61
           }
           $12_1 = HEAP32[$2_1 + 76 >> 2];
           break label$57;
          }
          $1_1 = HEAP32[HEAP32[$2_1 + 100 >> 2] + $4_1 >> 2];
          HEAP32[$2_1 + 320 >> 2] = $1_1;
          $5_1 = $10_1 + Math_imul($1_1, 36) | 0;
          if (Math_fround(Math_fround(Math_fround($6_1 * HEAPF32[$5_1 + 20 >> 2]) + Math_fround($11_1 * HEAPF32[$5_1 + 24 >> 2])) + Math_fround($7_1 * HEAPF32[$5_1 + 28 >> 2])) > Math_fround(.9990000128746033)) {
           $134($2_1 - -64 | 0, $2_1 + 320 | 0);
           $135($2_1 + 88 | 0, $1_1);
          }
          $3_1 = $3_1 - 1 | 0;
          $4_1 = $4_1 - 4 | 0;
          continue;
         }
         break;
        };
        $1_1 = 0;
        HEAP32[$2_1 + 52 >> 2] = 0;
        HEAP8[$2_1 + 56 | 0] = 1;
        HEAP32[$2_1 + 44 >> 2] = 0;
        HEAP32[$2_1 + 48 >> 2] = 0;
        HEAP32[$25 >> 2] = 0;
        HEAP32[$25 + 4 >> 2] = 0;
        HEAP32[$2_1 + 24 >> 2] = 0;
        HEAP32[$2_1 + 28 >> 2] = 0;
        $12_1 = HEAP32[$2_1 + 76 >> 2];
        label$64 : while (1) {
         label$65 : {
          if (($1_1 | 0) == ($15_1 | 0)) {
           HEAP32[$2_1 + 332 >> 2] = 0;
           HEAP8[$2_1 + 336 | 0] = 1;
           HEAP32[$2_1 + 324 >> 2] = 0;
           HEAP32[$2_1 + 328 >> 2] = 0;
           $1_1 = $10_1 + Math_imul(HEAP32[$12_1 >> 2], 36) | 0;
           $3_1 = 20;
           break label$65;
          }
          $3_1 = $10_1 + Math_imul(HEAP32[($1_1 << 2) + $12_1 >> 2], 36) | 0;
          $6_1 = HEAPF32[$3_1 + 28 >> 2];
          $7_1 = HEAPF32[$3_1 + 24 >> 2];
          HEAPF32[$2_1 + 24 >> 2] = HEAPF32[$3_1 + 20 >> 2] + HEAPF32[$2_1 + 24 >> 2];
          HEAPF32[$2_1 + 28 >> 2] = $7_1 + HEAPF32[$2_1 + 28 >> 2];
          HEAPF32[$2_1 + 32 >> 2] = $6_1 + HEAPF32[$2_1 + 32 >> 2];
          $9_1 = $3_1 + 12 | 0;
          $21_1 = $3_1 + 4 | 0;
          $13_1 = 0;
          while (1) if (HEAP32[$21_1 >> 2] <= ($13_1 | 0)) {
           $1_1 = $1_1 + 1 | 0;
           continue label$64;
          } else {
           $8_1 = HEAP32[HEAP32[$9_1 >> 2] + ($13_1 << 2) >> 2];
           $3_1 = HEAP32[HEAP32[$0_1 + 56 >> 2] + 16 >> 2] + ($8_1 << 4) | 0;
           $18_1 = $3_1 + 8 | 0;
           $19_1 = HEAP32[$18_1 + 4 >> 2];
           $5_1 = $2_1 + 8 | 0;
           $4_1 = $5_1;
           HEAP32[$4_1 >> 2] = HEAP32[$18_1 >> 2];
           HEAP32[$4_1 + 4 >> 2] = $19_1;
           $4_1 = HEAP32[$3_1 + 4 >> 2];
           HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
           HEAP32[$2_1 + 4 >> 2] = $4_1;
           $3_1 = HEAP32[$2_1 + 52 >> 2] + 20 | 0;
           $4_1 = HEAP32[$2_1 + 44 >> 2];
           $4_1 = (($4_1 | 0) > 0 ? $4_1 : 0) + 1 | 0;
           label$70 : {
            while (1) {
             $4_1 = $4_1 - 1 | 0;
             if ($4_1) {
              $18_1 = HEAP32[$3_1 >> 2];
              $3_1 = $3_1 + 24 | 0;
              if (($8_1 | 0) != ($18_1 | 0)) {
               continue
              }
              break label$70;
             }
             break;
            };
            $4_1 = HEAP32[$5_1 + 4 >> 2];
            $3_1 = $2_1 + 328 | 0;
            HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
            HEAP32[$3_1 + 4 >> 2] = $4_1;
            $3_1 = HEAP32[$2_1 + 4 >> 2];
            HEAP32[$2_1 + 320 >> 2] = HEAP32[$2_1 >> 2];
            HEAP32[$2_1 + 324 >> 2] = $3_1;
            HEAP32[$2_1 + 340 >> 2] = $8_1;
            $136($2_1 + 40 | 0, $2_1 + 320 | 0);
           }
           $13_1 = $13_1 + 1 | 0;
           continue;
          };
         }
         break;
        };
        while (1) {
         if (($3_1 | 0) != 36) {
          HEAPF32[($2_1 + 320 | 0) + $3_1 >> 2] = HEAPF32[$1_1 + $3_1 >> 2];
          $3_1 = $3_1 + 4 | 0;
          continue;
         }
         break;
        };
        HEAP32[$2_1 + 12 >> 2] = 0;
        HEAP32[$2_1 + 4 >> 2] = 0;
        HEAP32[$2_1 + 8 >> 2] = 0;
        HEAP8[$2_1 + 16 | 0] = 1;
        $137($84($2_1 + 24 | 0), $2_1 + 280 | 0, $2_1 + 264 | 0);
        $8_1 = HEAP32[$2_1 + 44 >> 2];
        if (($8_1 | 0) <= 1) {
         $3_1 = 0;
         while (1) {
          if (($3_1 | 0) >= ($8_1 | 0)) {
           break label$58
          }
          $136($2_1, HEAP32[$2_1 + 52 >> 2]);
          $3_1 = $3_1 + 1 | 0;
          $8_1 = HEAP32[$2_1 + 44 >> 2];
          continue;
         };
        }
        $1_1 = 0;
        $11_1 = HEAPF32[$2_1 + 288 >> 2];
        $16_1 = HEAPF32[$2_1 + 284 >> 2];
        $17_1 = HEAPF32[$2_1 + 280 >> 2];
        $3_1 = HEAP32[$2_1 + 52 >> 2];
        $4_1 = $3_1;
        while (1) {
         if (($1_1 | 0) >= ($8_1 | 0)) {
          HEAP32[$3_1 + 16 >> 2] = -246811958;
          $4_1 = $3_1 + 40 | 0;
          $1_1 = 1;
          $20_1 = HEAPF32[$2_1 + 272 >> 2];
          $22_1 = HEAPF32[$2_1 + 268 >> 2];
          $29_1 = HEAPF32[$2_1 + 264 >> 2];
          while (1) {
           if (($1_1 | 0) >= ($8_1 | 0)) {
            $4_1 = $3_1 + 8 | 0;
            $5_1 = HEAP32[$4_1 + 4 >> 2];
            $1_1 = $2_1 + 256 | 0;
            HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
            HEAP32[$1_1 + 4 >> 2] = $5_1;
            $1_1 = HEAP32[$3_1 + 4 >> 2];
            HEAP32[$2_1 + 248 >> 2] = HEAP32[$3_1 >> 2];
            HEAP32[$2_1 + 252 >> 2] = $1_1;
            $138($2_1 + 40 | 0, $2_1 + 248 | 0, 1, $8_1 - 1 | 0);
           } else {
            $6_1 = Math_fround(HEAPF32[$4_1 - 16 >> 2] - HEAPF32[$3_1 >> 2]);
            $7_1 = Math_fround(HEAPF32[$4_1 - 12 >> 2] - HEAPF32[$3_1 + 4 >> 2]);
            $28_1 = Math_fround(HEAPF32[$4_1 - 8 >> 2] - HEAPF32[$3_1 + 8 >> 2]);
            $14_1 = Math_fround(Math_fround(Math_fround($6_1 * $29_1) + Math_fround($7_1 * $22_1)) + Math_fround($28_1 * $20_1));
            $6_1 = Math_fround(Math_fround(Math_fround($6_1 * $17_1) + Math_fround($7_1 * $16_1)) + Math_fround($28_1 * $11_1));
            label$82 : {
             if (Math_fround(Math_fround($14_1 * $14_1) + Math_fround($6_1 * $6_1)) < Math_fround(1.1920928955078125e-07)) {
              HEAP32[$4_1 >> 2] = 0;
              break label$82;
             }
             $7_1 = Math_fround(Math_abs($14_1));
             $5_1 = $4_1;
             label$84 : {
              if ($6_1 >= Math_fround(0.0)) {
               $6_1 = Math_fround(Math_fround($6_1 - $7_1) / Math_fround($7_1 + $6_1));
               $7_1 = Math_fround(.7853981852531433);
               break label$84;
              }
              $6_1 = Math_fround(Math_fround($7_1 + $6_1) / Math_fround($7_1 - $6_1));
              $7_1 = Math_fround(2.356194496154785);
             }
             $6_1 = Math_fround($7_1 + Math_fround($6_1 * Math_fround(-.7853981852531433)));
             HEAPF32[$5_1 >> 2] = $14_1 < Math_fround(0.0) ? Math_fround(-$6_1) : $6_1;
            }
            $4_1 = $4_1 + 24 | 0;
            $1_1 = $1_1 + 1 | 0;
            continue;
           }
           break;
          };
          $3_1 = 0;
          while (1) {
           if (($3_1 | 0) != 48) {
            $136($2_1, HEAP32[$2_1 + 52 >> 2] + $3_1 | 0);
            $3_1 = $3_1 + 24 | 0;
            continue;
           }
           break;
          };
          $5_1 = 2;
          while (1) {
           if (HEAP32[$2_1 + 44 >> 2] == ($5_1 | 0)) {
            break label$58
           }
           $4_1 = HEAP32[$2_1 + 4 >> 2];
           $9_1 = ($4_1 | 0) < 1 ? $4_1 : 1;
           $3_1 = (HEAP32[$2_1 + 12 >> 2] + Math_imul($4_1, 24) | 0) - 48 | 0;
           $8_1 = Math_imul($5_1, 24);
           $1_1 = $8_1 + HEAP32[$2_1 + 52 >> 2] | 0;
           $13_1 = $1_1 + 8 | 0;
           $21_1 = $1_1 + 4 | 0;
           $7_1 = HEAPF32[$2_1 + 32 >> 2];
           $11_1 = HEAPF32[$2_1 + 28 >> 2];
           $16_1 = HEAPF32[$2_1 + 24 >> 2];
           label$89 : {
            label$90 : {
             while (1) {
              if (($4_1 | 0) < 2) {
               break label$90
              }
              $18_1 = $3_1 + 8 | 0;
              $19_1 = $3_1 + 24 | 0;
              $6_1 = HEAPF32[$3_1 >> 2];
              $24_1 = $3_1 + 32 | 0;
              $30_1 = $3_1 + 4 | 0;
              $31_1 = $3_1 + 28 | 0;
              $3_1 = $3_1 - 24 | 0;
              $4_1 = $4_1 - 1 | 0;
              $17_1 = Math_fround($6_1 - HEAPF32[$19_1 >> 2]);
              $14_1 = HEAPF32[$30_1 >> 2];
              $20_1 = Math_fround($14_1 - HEAPF32[$21_1 >> 2]);
              $14_1 = Math_fround($14_1 - HEAPF32[$31_1 >> 2]);
              $6_1 = Math_fround($6_1 - HEAPF32[$1_1 >> 2]);
              $37_1 = Math_fround(Math_fround(Math_fround($17_1 * $20_1) - Math_fround($14_1 * $6_1)) * $7_1);
              $23_1 = $14_1;
              $14_1 = HEAPF32[$18_1 >> 2];
              $22_1 = Math_fround($14_1 - HEAPF32[$13_1 >> 2]);
              $14_1 = Math_fround($14_1 - HEAPF32[$24_1 >> 2]);
              if (!(Math_fround($37_1 + Math_fround(Math_fround($16_1 * Math_fround(Math_fround($23_1 * $22_1) - Math_fround($14_1 * $20_1))) + Math_fround($11_1 * Math_fround(Math_fround($14_1 * $6_1) - Math_fround($17_1 * $22_1))))) > Math_fround(0.0))) {
               continue
              }
              break;
             };
             HEAP32[$2_1 + 4 >> 2] = $4_1 + 1;
             $136($2_1, $1_1);
             $9_1 = HEAP32[$2_1 + 4 >> 2];
             break label$89;
            }
            HEAP32[$2_1 + 4 >> 2] = $9_1;
           }
           if (($9_1 | 0) == 1) {
            $136($2_1, $8_1 + HEAP32[$2_1 + 52 >> 2] | 0)
           }
           $5_1 = $5_1 + 1 | 0;
           continue;
          };
         }
         $5_1 = $4_1 + 8 | 0;
         if (Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 >> 2] * $17_1) + Math_fround(HEAPF32[$4_1 + 4 >> 2] * $16_1)) + Math_fround(HEAPF32[$5_1 >> 2] * $11_1)) < Math_fround(Math_fround(Math_fround($17_1 * HEAPF32[$3_1 >> 2]) + Math_fround($16_1 * HEAPF32[$3_1 + 4 >> 2])) + Math_fround($11_1 * HEAPF32[$3_1 + 8 >> 2]))) {
          $21_1 = HEAP32[$3_1 >> 2];
          $18_1 = HEAP32[$3_1 + 4 >> 2];
          $9_1 = HEAP32[$4_1 + 4 >> 2];
          HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
          HEAP32[$3_1 + 4 >> 2] = $9_1;
          $9_1 = $3_1 + 16 | 0;
          $19_1 = HEAP32[$9_1 >> 2];
          $24_1 = HEAP32[$9_1 + 4 >> 2];
          $13_1 = $4_1 + 16 | 0;
          $30_1 = HEAP32[$13_1 + 4 >> 2];
          HEAP32[$9_1 >> 2] = HEAP32[$13_1 >> 2];
          HEAP32[$9_1 + 4 >> 2] = $30_1;
          $9_1 = $3_1 + 8 | 0;
          $30_1 = HEAP32[$9_1 >> 2];
          $31_1 = HEAP32[$9_1 + 4 >> 2];
          $32_1 = HEAP32[$5_1 + 4 >> 2];
          HEAP32[$9_1 >> 2] = HEAP32[$5_1 >> 2];
          HEAP32[$9_1 + 4 >> 2] = $32_1;
          HEAP32[$4_1 >> 2] = $21_1;
          HEAP32[$4_1 + 4 >> 2] = $18_1;
          HEAP32[$13_1 >> 2] = $19_1;
          HEAP32[$13_1 + 4 >> 2] = $24_1;
          HEAP32[$5_1 >> 2] = $30_1;
          HEAP32[$5_1 + 4 >> 2] = $31_1;
         }
         $4_1 = $4_1 + 24 | 0;
         $1_1 = $1_1 + 1 | 0;
         continue;
        };
       }
       $1_1 = HEAP32[$0_1 + 56 >> 2];
       HEAP8[$2_1 + 396 | 0] = 1;
       HEAP32[$2_1 + 392 >> 2] = 0;
       $0_1 = $2_1 + 384 | 0;
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$0_1 + 4 >> 2] = 0;
       HEAP8[$2_1 + 356 | 0] = 1;
       HEAP32[$2_1 + 352 >> 2] = 0;
       HEAP8[$2_1 + 376 | 0] = 1;
       $0_1 = $2_1 + 344 | 0;
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$0_1 + 4 >> 2] = 0;
       HEAP32[$2_1 + 372 >> 2] = 0;
       $0_1 = $2_1 + 364 | 0;
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$0_1 + 4 >> 2] = 0;
       HEAP32[$1_1 + 64 >> 2] = 0;
       HEAP32[$1_1 + 68 >> 2] = 0;
       $0_1 = $1_1 + 72 | 0;
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$0_1 + 4 >> 2] = 0;
       HEAP32[$2_1 + 332 >> 2] = 0;
       HEAP8[$2_1 + 336 | 0] = 1;
       HEAP32[$2_1 + 324 >> 2] = 0;
       HEAP32[$2_1 + 328 >> 2] = 0;
       $30_1 = $1_1 + 44 | 0;
       $25 = $1_1 - -64 | 0;
       $26_1 = $2_1 + 340 | 0;
       $21_1 = $2_1 + 380 | 0;
       $18_1 = $2_1 + 360 | 0;
       $9_1 = 0;
       label$94 : while (1) {
        $3_1 = HEAP32[$1_1 + 28 >> 2];
        if (($9_1 | 0) >= ($3_1 | 0)) {
         $6_1 = Math_fround(0.0);
         $9_1 = 0;
         label$96 : while (1) {
          if (($3_1 | 0) <= ($9_1 | 0)) {
           $139($25, $6_1);
           HEAP32[$1_1 + 96 >> 2] = 2139095039;
           $0_1 = HEAP32[$1_1 + 28 >> 2];
           $4_1 = ($0_1 | 0) > 0 ? $0_1 : 0;
           $6_1 = Math_fround(3402823466385288598117041.0e14);
           $8_1 = 32;
           while (1) {
            if ($4_1) {
             $0_1 = HEAP32[$1_1 + 36 >> 2] + $8_1 | 0;
             $7_1 = Math_fround(Math_abs(Math_fround(HEAPF32[$0_1 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$0_1 - 12 >> 2] * HEAPF32[$1_1 + 64 >> 2]) + Math_fround(HEAPF32[$0_1 - 8 >> 2] * HEAPF32[$1_1 + 68 >> 2])) + Math_fround(HEAPF32[$0_1 - 4 >> 2] * HEAPF32[$1_1 + 72 >> 2])))));
             if ($7_1 < $6_1) {
              HEAPF32[$1_1 + 96 >> 2] = $7_1;
              $6_1 = $7_1;
             }
             $4_1 = $4_1 - 1 | 0;
             $8_1 = $8_1 + 36 | 0;
             continue;
            } else {
             $4_1 = 8;
             $11_1 = Math_fround(-3402823466385288598117041.0e14);
             $16_1 = Math_fround(3402823466385288598117041.0e14);
             $17_1 = Math_fround(3402823466385288598117041.0e14);
             $14_1 = Math_fround(-3402823466385288598117041.0e14);
             $20_1 = Math_fround(-3402823466385288598117041.0e14);
             $22_1 = Math_fround(3402823466385288598117041.0e14);
             $0_1 = HEAP32[$1_1 + 8 >> 2];
             $3_1 = ($0_1 | 0) > 0 ? $0_1 : 0;
            }
            break;
           };
           while (1) {
            if ($3_1) {
             $0_1 = HEAP32[$1_1 + 16 >> 2] + $4_1 | 0;
             $7_1 = HEAPF32[$0_1 >> 2];
             $20_1 = $7_1 > $20_1 ? $7_1 : $20_1;
             $17_1 = $7_1 < $17_1 ? $7_1 : $17_1;
             $7_1 = HEAPF32[$0_1 - 4 >> 2];
             $14_1 = $7_1 > $14_1 ? $7_1 : $14_1;
             $16_1 = $7_1 < $16_1 ? $7_1 : $16_1;
             $7_1 = HEAPF32[$0_1 - 8 >> 2];
             $11_1 = $7_1 > $11_1 ? $7_1 : $11_1;
             $22_1 = $7_1 < $22_1 ? $7_1 : $22_1;
             $3_1 = $3_1 - 1 | 0;
             $4_1 = $4_1 + 16 | 0;
             continue;
            }
            break;
           };
           HEAP32[$1_1 + 128 >> 2] = 0;
           $34_1 = Math_fround($20_1 - $17_1);
           HEAPF32[$1_1 + 124 >> 2] = $34_1;
           $29_1 = Math_fround($14_1 - $16_1);
           HEAPF32[$1_1 + 120 >> 2] = $29_1;
           $28_1 = Math_fround($11_1 - $22_1);
           HEAPF32[$1_1 + 116 >> 2] = $28_1;
           $7_1 = Math_fround($6_1 / Math_fround(1.7320507764816284));
           HEAPF32[$1_1 + 88 >> 2] = $7_1;
           HEAP32[$1_1 + 112 >> 2] = 0;
           HEAPF32[$1_1 + 108 >> 2] = $17_1 + $20_1;
           HEAPF32[$1_1 + 104 >> 2] = $16_1 + $14_1;
           HEAPF32[$1_1 + 100 >> 2] = $11_1 + $22_1;
           HEAPF32[$1_1 + 84 >> 2] = $7_1;
           HEAPF32[$1_1 + 80 >> 2] = $7_1;
           $0_1 = $29_1 > $28_1;
           $0_1 = $34_1 > ($0_1 ? $29_1 : $28_1) ? 2 : $0_1;
           $3_1 = $0_1 << 2;
           $4_1 = $3_1 + ($1_1 + 80 | 0) | 0;
           $6_1 = Math_fround(HEAPF32[$3_1 + ($1_1 + 116 | 0) >> 2] * Math_fround(.5));
           HEAPF32[$4_1 >> 2] = $6_1;
           $11_1 = Math_fround(Math_fround($6_1 - $7_1) * Math_fround(.0009765625));
           $3_1 = 1024;
           label$104 : {
            label$105 : {
             while (1) {
              if ($3_1) {
               if ($94($1_1)) {
                break label$105
               }
               $6_1 = Math_fround($6_1 - $11_1);
               HEAPF32[$4_1 >> 2] = $6_1;
               $3_1 = $3_1 - 1 | 0;
               continue;
              }
              break;
             };
             HEAPF32[$1_1 + 84 >> 2] = $7_1;
             HEAPF32[$1_1 + 88 >> 2] = $7_1;
             HEAPF32[$1_1 + 80 >> 2] = $7_1;
             break label$104;
            }
            $4_1 = $1_1 + 80 | 0;
            $0_1 = 1 << $0_1 & 3;
            $3_1 = $4_1 + ($0_1 << 2) | 0;
            $0_1 = $4_1 + ((1 << $0_1 & 3) << 2) | 0;
            $6_1 = Math_fround(Math_fround(HEAPF32[$1_1 + 96 >> 2] - $7_1) * Math_fround(.0009765625));
            $4_1 = 1025;
            while (1) {
             $4_1 = $4_1 - 1 | 0;
             if (!$4_1) {
              break label$104
             }
             $7_1 = HEAPF32[$0_1 >> 2];
             $11_1 = HEAPF32[$3_1 >> 2];
             HEAPF32[$3_1 >> 2] = $6_1 + $11_1;
             HEAPF32[$0_1 >> 2] = $6_1 + HEAPF32[$0_1 >> 2];
             if ($94($1_1)) {
              continue
             }
             break;
            };
            HEAPF32[$3_1 >> 2] = $11_1;
            HEAPF32[$0_1 >> 2] = $7_1;
           }
           $96($21_1);
           HEAP32[$2_1 + 392 >> 2] = 0;
           HEAP8[$2_1 + 396 | 0] = 1;
           HEAP32[$2_1 + 384 >> 2] = 0;
           HEAP32[$2_1 + 388 >> 2] = 0;
           $96($18_1);
           HEAP32[$2_1 + 372 >> 2] = 0;
           HEAP8[$2_1 + 376 | 0] = 1;
           HEAP32[$2_1 + 364 >> 2] = 0;
           HEAP32[$2_1 + 368 >> 2] = 0;
           $57($26_1);
           $57($2_1 + 320 | 0);
           $57($2_1 + 88 | 0);
           $92($2_1 + 112 | 0);
           $57($2_1 + 136 | 0);
           $57($2_1 + 200 | 0);
           $57($2_1 + 180 | 0);
           $57($2_1 + 160 | 0);
           $57($2_1 + 224 | 0);
           global$0 = $2_1 + 400 | 0;
           return 1;
          }
          $3_1 = 0;
          $8_1 = Math_imul($9_1, 36);
          $0_1 = $8_1 + HEAP32[$1_1 + 36 >> 2] | 0;
          $13_1 = HEAP32[$0_1 + 4 >> 2];
          $4_1 = $13_1 - 2 | 0;
          $10_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
          $4_1 = 4;
          $0_1 = HEAP32[$1_1 + 16 >> 2] + (HEAP32[HEAP32[$0_1 + 12 >> 2] >> 2] << 4) | 0;
          $15_1 = $0_1 + 8 | 0;
          $19_1 = $0_1 + 4 | 0;
          while (1) if (($3_1 | 0) == ($10_1 | 0)) {
           $9_1 = $9_1 + 1 | 0;
           $3_1 = HEAP32[$1_1 + 28 >> 2];
           continue label$96;
          } else {
           $24_1 = HEAP32[$1_1 + 16 >> 2];
           $12_1 = HEAP32[($8_1 + HEAP32[$1_1 + 36 >> 2] | 0) + 12 >> 2];
           $5_1 = $24_1 + (HEAP32[$12_1 + (($3_1 + 2 | 0) % ($13_1 | 0) << 2) >> 2] << 4) | 0;
           $14_1 = HEAPF32[$5_1 >> 2];
           $7_1 = HEAPF32[$0_1 >> 2];
           $12_1 = $24_1 + (HEAP32[$4_1 + $12_1 >> 2] << 4) | 0;
           $20_1 = HEAPF32[$12_1 + 4 >> 2];
           $11_1 = HEAPF32[$19_1 >> 2];
           $22_1 = HEAPF32[$5_1 + 4 >> 2];
           $29_1 = HEAPF32[$12_1 >> 2];
           $28_1 = HEAPF32[$5_1 + 8 >> 2];
           $16_1 = HEAPF32[$15_1 >> 2];
           $34_1 = HEAPF32[$12_1 + 8 >> 2];
           HEAP32[$2_1 + 76 >> 2] = 0;
           $17_1 = Math_fround($11_1 - $20_1);
           $35_1 = Math_fround($16_1 - $28_1);
           $23_1 = Math_fround($16_1 - $34_1);
           $36_1 = Math_fround($11_1 - $22_1);
           $38_1 = Math_fround(Math_fround($17_1 * $35_1) - Math_fround($23_1 * $36_1));
           $39_1 = Math_fround($38_1 * $38_1);
           $37_1 = $23_1;
           $23_1 = Math_fround($7_1 - $14_1);
           $38_1 = Math_fround($7_1 - $29_1);
           $35_1 = Math_fround(Math_fround($37_1 * $23_1) - Math_fround($38_1 * $35_1));
           $17_1 = Math_fround(Math_fround($38_1 * $36_1) - Math_fround($17_1 * $23_1));
           $17_1 = Math_fround(Math_fround(Math_sqrt(Math_fround(Math_fround($39_1 + Math_fround($35_1 * $35_1)) + Math_fround($17_1 * $17_1)))) * Math_fround(.5));
           HEAPF32[$2_1 + 72 >> 2] = $17_1 * Math_fround(Math_fround($28_1 + Math_fround($16_1 + $34_1)) * Math_fround(.3333333432674408));
           HEAPF32[$2_1 + 68 >> 2] = $17_1 * Math_fround(Math_fround($22_1 + Math_fround($11_1 + $20_1)) * Math_fround(.3333333432674408));
           HEAPF32[$2_1 + 64 >> 2] = $17_1 * Math_fround(Math_fround($14_1 + Math_fround($7_1 + $29_1)) * Math_fround(.3333333432674408));
           $89($25, $2_1 - -64 | 0);
           $6_1 = Math_fround($17_1 + $6_1);
           $3_1 = $3_1 + 1 | 0;
           $4_1 = $4_1 + 4 | 0;
           continue;
          };
         };
        }
        $13_1 = 0;
        $31_1 = Math_imul($9_1, 36);
        $19_1 = HEAP32[($31_1 + HEAP32[$1_1 + 36 >> 2] | 0) + 4 >> 2];
        $32_1 = ($19_1 | 0) > 0 ? $19_1 : 0;
        $12_1 = $9_1 | -65536;
        while (1) {
         if (($13_1 | 0) == ($32_1 | 0)) {
          $9_1 = $9_1 + 1 | 0;
          continue label$94;
         }
         $0_1 = $13_1 << 2;
         $4_1 = HEAP32[($31_1 + HEAP32[$1_1 + 36 >> 2] | 0) + 12 >> 2];
         $13_1 = $13_1 + 1 | 0;
         $3_1 = HEAP16[$4_1 + (($13_1 | 0) % ($19_1 | 0) << 2) >> 1];
         $4_1 = HEAP16[$0_1 + $4_1 >> 1];
         $5_1 = ($3_1 | 0) > ($4_1 | 0);
         $0_1 = $5_1 ? $3_1 : $4_1;
         $15_1 = $5_1 ? $4_1 : $3_1;
         $3_1 = $97($2_1 + 320 | 0, $0_1, $15_1);
         $8_1 = HEAP32[$2_1 + 372 >> 2];
         $5_1 = HEAP32[$1_1 + 16 >> 2];
         $4_1 = $5_1 + ($15_1 << 4) | 0;
         $5_1 = $5_1 + ($0_1 << 4) | 0;
         HEAPF32[$2_1 + 72 >> 2] = HEAPF32[$4_1 + 8 >> 2] - HEAPF32[$5_1 + 8 >> 2];
         HEAPF32[$2_1 + 68 >> 2] = HEAPF32[$4_1 + 4 >> 2] - HEAPF32[$5_1 + 4 >> 2];
         HEAPF32[$2_1 + 64 >> 2] = HEAPF32[$4_1 >> 2] - HEAPF32[$5_1 >> 2];
         HEAP32[$2_1 + 76 >> 2] = 0;
         $4_1 = ($3_1 | 0) == -1 ? 0 : $8_1 + ($3_1 << 2) | 0;
         $10_1 = $84($2_1 - -64 | 0);
         $3_1 = HEAP32[$1_1 + 48 >> 2];
         $8_1 = (($3_1 | 0) > 0 ? $3_1 : 0) + 1 | 0;
         $3_1 = 8;
         $6_1 = HEAPF32[$2_1 + 72 >> 2];
         $7_1 = HEAPF32[$2_1 + 68 >> 2];
         $11_1 = HEAPF32[$2_1 + 64 >> 2];
         label$114 : {
          while (1) {
           $8_1 = $8_1 - 1 | 0;
           if ($8_1) {
            $5_1 = HEAP32[$1_1 + 56 >> 2] + $3_1 | 0;
            $16_1 = HEAPF32[$5_1 - 8 >> 2];
            $17_1 = HEAPF32[$5_1 - 4 >> 2];
            $14_1 = HEAPF32[$5_1 >> 2];
            if ($95(Math_fround($16_1 - $11_1), Math_fround($17_1 - $7_1), Math_fround($14_1 - $6_1))) {
             break label$114
            }
            $3_1 = $3_1 + 16 | 0;
            if (!$95(Math_fround($16_1 + $11_1), Math_fround($17_1 + $7_1), Math_fround($14_1 + $6_1))) {
             continue
            }
            break label$114;
           }
           break;
          };
          $128($30_1, $10_1);
         }
         if ($4_1) {
          HEAP16[$4_1 + 2 >> 1] = $9_1;
          continue;
         }
         $3_1 = $97($2_1 + 320 | 0, $0_1, $15_1);
         if (($3_1 | 0) != -1) {
          $0_1 = HEAP32[$2_1 + 372 >> 2] + ($3_1 << 2) | 0;
          HEAP16[$0_1 >> 1] = $12_1;
          HEAP16[$0_1 + 2 >> 1] = $12_1 >>> 16;
         } else {
          $24_1 = HEAP32[$2_1 + 364 >> 2];
          $3_1 = $24_1;
          $5_1 = HEAP32[$2_1 + 368 >> 2];
          label$120 : {
           if (($3_1 | 0) != ($5_1 | 0)) {
            break label$120
           }
           $3_1 = $5_1;
           $10_1 = $3_1 ? $3_1 << 1 : 1;
           if (($3_1 | 0) >= ($10_1 | 0)) {
            break label$120
           }
           $3_1 = 0;
           $4_1 = $5_1;
           $8_1 = 0;
           if ($10_1) {
            $8_1 = $53($10_1 << 2);
            $4_1 = HEAP32[$2_1 + 364 >> 2];
           }
           $4_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
           while (1) {
            if ($4_1) {
             $33_1 = $3_1 + $8_1 | 0;
             $27_1 = HEAP32[$2_1 + 372 >> 2] + $3_1 | 0;
             $27_1 = HEAPU16[$27_1 >> 1] | HEAPU16[$27_1 + 2 >> 1] << 16;
             HEAP16[$33_1 >> 1] = $27_1;
             HEAP16[$33_1 + 2 >> 1] = $27_1 >>> 16;
             $4_1 = $4_1 - 1 | 0;
             $3_1 = $3_1 + 4 | 0;
             continue;
            }
            break;
           };
           $96($18_1);
           HEAP32[$2_1 + 372 >> 2] = $8_1;
           HEAP8[$2_1 + 376 | 0] = 1;
           HEAP32[$2_1 + 368 >> 2] = $10_1;
           $3_1 = HEAP32[$2_1 + 364 >> 2];
          }
          $15_1 = $15_1 << 16;
          $3_1 = HEAP32[$2_1 + 372 >> 2] + ($3_1 << 2) | 0;
          HEAP16[$3_1 >> 1] = $12_1;
          HEAP16[$3_1 + 2 >> 1] = $12_1 >>> 16;
          HEAP32[$2_1 + 364 >> 2] = HEAP32[$2_1 + 364 >> 2] + 1;
          $4_1 = HEAP32[$2_1 + 384 >> 2];
          label$124 : {
           if (($4_1 | 0) != HEAP32[$2_1 + 388 >> 2]) {
            break label$124
           }
           $10_1 = $4_1 ? $4_1 << 1 : 1;
           if (($10_1 | 0) <= ($4_1 | 0)) {
            break label$124
           }
           $3_1 = 0;
           $8_1 = 0;
           if ($10_1) {
            $8_1 = $53($10_1 << 2);
            $4_1 = HEAP32[$2_1 + 384 >> 2];
           }
           $4_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
           while (1) {
            if ($4_1) {
             $33_1 = $3_1 + $8_1 | 0;
             $27_1 = HEAP32[$2_1 + 392 >> 2] + $3_1 | 0;
             $27_1 = HEAPU16[$27_1 >> 1] | HEAPU16[$27_1 + 2 >> 1] << 16;
             HEAP16[$33_1 >> 1] = $27_1;
             HEAP16[$33_1 + 2 >> 1] = $27_1 >>> 16;
             $4_1 = $4_1 - 1 | 0;
             $3_1 = $3_1 + 4 | 0;
             continue;
            }
            break;
           };
           $96($21_1);
           HEAP32[$2_1 + 392 >> 2] = $8_1;
           HEAP8[$2_1 + 396 | 0] = 1;
           HEAP32[$2_1 + 388 >> 2] = $10_1;
           $4_1 = HEAP32[$2_1 + 384 >> 2];
          }
          $10_1 = $0_1 + $15_1 | 0;
          $3_1 = HEAP32[$2_1 + 392 >> 2] + ($4_1 << 2) | 0;
          $0_1 = $15_1 | $0_1 & 65535;
          HEAP16[$3_1 >> 1] = $0_1;
          HEAP16[$3_1 + 2 >> 1] = $0_1 >>> 16;
          HEAP32[$2_1 + 384 >> 2] = HEAP32[$2_1 + 384 >> 2] + 1;
          $0_1 = HEAP32[$2_1 + 368 >> 2];
          label$128 : {
           if (($0_1 | 0) <= ($5_1 | 0)) {
            break label$128
           }
           $5_1 = HEAP32[$2_1 + 324 >> 2];
           if (($5_1 | 0) >= ($0_1 | 0)) {
            $5_1 = $0_1;
            break label$128;
           }
           HEAP32[$2_1 + 40 >> 2] = 0;
           $140($2_1 + 320 | 0, $0_1, $2_1 + 40 | 0);
           HEAP32[$2_1 + 40 >> 2] = 0;
           $140($26_1, $0_1, $2_1 + 40 | 0);
           $8_1 = HEAP32[$2_1 + 332 >> 2];
           $3_1 = ($0_1 | 0) > 0 ? $0_1 : 0;
           $4_1 = $3_1;
           while (1) {
            if ($4_1) {
             HEAP32[$8_1 >> 2] = -1;
             $4_1 = $4_1 - 1 | 0;
             $8_1 = $8_1 + 4 | 0;
             continue;
            } else {
             $4_1 = HEAP32[$2_1 + 352 >> 2];
             while (1) {
              if ($3_1) {
               HEAP32[$4_1 >> 2] = -1;
               $3_1 = $3_1 - 1 | 0;
               $4_1 = $4_1 + 4 | 0;
               continue;
              } else {
               $3_1 = 0;
               $0_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
               $8_1 = HEAP32[$2_1 + 352 >> 2];
               $5_1 = HEAP32[$2_1 + 332 >> 2];
               $4_1 = HEAP32[$2_1 + 392 >> 2];
               while (1) {
                if (($0_1 | 0) != ($3_1 | 0)) {
                 $15_1 = $5_1 + ((HEAP16[$4_1 >> 1] + (HEAPU16[$4_1 + 2 >> 1] << 16) & HEAP32[$2_1 + 368 >> 2] - 1) << 2) | 0;
                 HEAP32[$8_1 >> 2] = HEAP32[$15_1 >> 2];
                 HEAP32[$15_1 >> 2] = $3_1;
                 $4_1 = $4_1 + 4 | 0;
                 $8_1 = $8_1 + 4 | 0;
                 $3_1 = $3_1 + 1 | 0;
                 continue;
                }
                break;
               };
               $5_1 = HEAP32[$2_1 + 368 >> 2];
              }
              break;
             };
            }
            break;
           };
          }
          $0_1 = HEAP32[$2_1 + 332 >> 2] + (($10_1 & $5_1 - 1) << 2) | 0;
          HEAP32[HEAP32[$2_1 + 352 >> 2] + ($24_1 << 2) >> 2] = HEAP32[$0_1 >> 2];
          HEAP32[$0_1 >> 2] = $24_1;
         }
         continue;
        };
       };
      }
      $1_1 = 0;
      $3_1 = HEAP32[$2_1 + 4 >> 2];
      $5_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
      $8_1 = HEAP32[$2_1 + 12 >> 2];
      while (1) {
       if (($1_1 | 0) == ($5_1 | 0)) {
        $1_1 = HEAP32[$2_1 + 44 >> 2];
        $9_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
        $13_1 = HEAP32[$2_1 + 52 >> 2];
        $8_1 = (($15_1 | 0) > 0 ? $15_1 : 0) + 1 | 0;
       } else {
        $9_1 = ($8_1 + Math_imul($1_1, 24) | 0) + 20 | 0;
        $134($2_1 + 320 | 0, $9_1);
        $3_1 = HEAP32[$2_1 + 52 >> 2] + 20 | 0;
        $4_1 = HEAP32[$2_1 + 44 >> 2];
        $4_1 = (($4_1 | 0) > 0 ? $4_1 : 0) + 1 | 0;
        label$141 : {
         while (1) {
          $4_1 = $4_1 - 1 | 0;
          if (!$4_1) {
           break label$141
          }
          $13_1 = HEAP32[$3_1 >> 2];
          $21_1 = $3_1 + 24 | 0;
          $3_1 = $21_1;
          if (HEAP32[$9_1 >> 2] != ($13_1 | 0)) {
           continue
          }
          break;
         };
         HEAP32[$21_1 - 24 >> 2] = -1;
        }
        $1_1 = $1_1 + 1 | 0;
        continue;
       }
       break;
      };
      $5_1 = 0;
      while (1) {
       label$144 : {
        if (($5_1 | 0) != ($9_1 | 0)) {
         $21_1 = HEAP32[($13_1 + Math_imul($5_1, 24) | 0) + 20 >> 2];
         if (($21_1 | 0) == -1) {
          break label$144
         }
         $1_1 = 0;
         while (1) {
          if (($1_1 | 0) == ($26_1 | 0)) {
           break label$144
          }
          $4_1 = $8_1;
          $3_1 = $12_1;
          while (1) {
           label$148 : {
            $4_1 = $4_1 - 1 | 0;
            if (!$4_1) {
             $3_1 = 0;
             $18_1 = $10_1 + Math_imul($1_1, 36) | 0;
             $4_1 = HEAP32[$18_1 + 4 >> 2];
             $4_1 = (($4_1 | 0) > 0 ? $4_1 : 0) + 1 | 0;
             $18_1 = $18_1 + 12 | 0;
             while (1) {
              $4_1 = $4_1 - 1 | 0;
              if (!$4_1) {
               break label$148
              }
              $19_1 = HEAP32[$18_1 >> 2] + $3_1 | 0;
              $3_1 = $3_1 + 4 | 0;
              if (($21_1 | 0) != HEAP32[$19_1 >> 2]) {
               continue
              }
              break;
             };
             $57($2_1);
             $57($2_1 + 320 | 0);
             $57($2_1 + 40 | 0);
             break label$57;
            }
            $18_1 = HEAP32[$3_1 >> 2];
            $3_1 = $3_1 + 4 | 0;
            if (($1_1 | 0) != ($18_1 | 0)) {
             continue
            }
           }
           break;
          };
          $1_1 = $1_1 + 1 | 0;
          continue;
         };
        }
        $141(HEAP32[$0_1 + 56 >> 2] + 24 | 0, $2_1 + 320 | 0);
        $57($2_1);
        $57($2_1 + 320 | 0);
        $57($2_1 + 40 | 0);
        break label$56;
       }
       $5_1 = $5_1 + 1 | 0;
       continue;
      };
     }
     $3_1 = ($15_1 | 0) > 0 ? $15_1 : 0;
     while (1) {
      if (!$3_1) {
       break label$56
      }
      $1_1 = $133($2_1 + 320 | 0, $10_1 + Math_imul(HEAP32[$12_1 >> 2], 36) | 0);
      $141(HEAP32[$0_1 + 56 >> 2] + 24 | 0, $1_1);
      $12_1 = $12_1 + 4 | 0;
      $3_1 = $3_1 - 1 | 0;
      $57($2_1 + 320 | 0);
      continue;
     };
    }
    $57($2_1 - -64 | 0);
    continue;
   };
  } else {
   $8_1 = $2_1;
   $4_1 = $5_1;
   if (($4_1 | 0) == HEAP32[$2_1 + 232 >> 2]) {
    $142($2_1 + 224 | 0, $4_1 ? $4_1 << 1 : 1);
    $12_1 = HEAP32[$2_1 + 236 >> 2];
    $5_1 = HEAP32[$2_1 + 228 >> 2];
   } else {
    $5_1 = $4_1
   }
   $5_1 = $5_1 + 1 | 0;
   HEAP32[$8_1 + 228 >> 2] = $5_1;
   $8_1 = HEAP32[$2_1 + 324 >> 2];
   $4_1 = ($4_1 << 4) + $12_1 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$2_1 + 320 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $8_1;
   $9_1 = $2_1 + 328 | 0;
   $13_1 = HEAP32[$9_1 + 4 >> 2];
   $8_1 = $4_1 + 8 | 0;
   HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2];
   HEAP32[$8_1 + 4 >> 2] = $13_1;
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 108 >> 2]]($0_1, $3_1, $4_1);
   $3_1 = $3_1 + 1 | 0;
   continue;
  };
 }
 
 function $128($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  if (($2_1 | 0) == HEAP32[$0_1 + 8 >> 2]) {
   $142($0_1, $2_1 ? $2_1 << 1 : 1);
   $2_1 = HEAP32[$0_1 + 4 >> 2];
  }
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 + 12 >> 2] + ($2_1 << 4) | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $1_1 = $1_1 + 8 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $2_1 + 8 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] + 1;
 }
 
 function $129($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 + 8 >> 2] = Math_fround($5_1 * $1_1) - Math_fround($2_1 * $4_1);
  HEAPF32[$0_1 + 4 >> 2] = Math_fround($3_1 * $4_1) - Math_fround($6_1 * $1_1);
  HEAPF32[$0_1 >> 2] = Math_fround($2_1 * $6_1) - Math_fround($3_1 * $5_1);
 }
 
 function $130($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13_1 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 192 | 0;
  global$0 = $3_1;
  label$1 : {
   if (($2_1 | 0) <= 0) {
    $57($0_1);
    $57($0_1 + 20 | 0);
    $57($0_1 + 40 | 0);
    break label$1;
   }
   HEAP8[$3_1 + 104 | 0] = 1;
   $4_1 = $3_1 + 80 | 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[$4_1 + 4 >> 2] = 256;
   $4_1 = $3_1 - -64 | 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[$4_1 + 4 >> 2] = 256;
   $4_1 = $3_1 + 48 | 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[$4_1 + 4 >> 2] = 256;
   HEAP32[$3_1 + 100 >> 2] = 0;
   $4_1 = $3_1 + 92 | 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[$4_1 + 4 >> 2] = 0;
   HEAP32[$3_1 + 72 >> 2] = 0;
   HEAP32[$3_1 + 76 >> 2] = 0;
   HEAP32[$3_1 + 56 >> 2] = 0;
   HEAP32[$3_1 + 60 >> 2] = 0;
   HEAP32[$3_1 + 40 >> 2] = 0;
   HEAP32[$3_1 + 44 >> 2] = 0;
   $14_1 = Math_fround(1000000015047466219876688.0e6);
   $18_1 = Math_fround(-1000000015047466219876688.0e6);
   $5_1 = $2_1;
   $15_1 = Math_fround(-1000000015047466219876688.0e6);
   $16_1 = Math_fround(-1000000015047466219876688.0e6);
   $19_1 = Math_fround(1000000015047466219876688.0e6);
   $20_1 = Math_fround(1000000015047466219876688.0e6);
   $4_1 = $1_1;
   while (1) {
    if ($5_1) {
     $9_1 = HEAPF32[$4_1 + 8 >> 2];
     $16_1 = $9_1 > $16_1 ? $9_1 : $16_1;
     $8_1 = HEAPF32[$4_1 + 4 >> 2];
     $15_1 = $8_1 > $15_1 ? $8_1 : $15_1;
     $20_1 = $9_1 < $20_1 ? $9_1 : $20_1;
     $19_1 = $8_1 < $19_1 ? $8_1 : $19_1;
     $8_1 = HEAPF32[$4_1 >> 2];
     $18_1 = $8_1 > $18_1 ? $8_1 : $18_1;
     $14_1 = $8_1 < $14_1 ? $8_1 : $14_1;
     $4_1 = $4_1 + 16 | 0;
     $5_1 = $5_1 - 1 | 0;
     continue;
    }
    break;
   };
   $5_1 = 0;
   HEAP32[$3_1 + 188 >> 2] = 0;
   $12_1 = Math_fround($16_1 - $20_1);
   HEAPF32[$3_1 + 184 >> 2] = $12_1;
   $8_1 = Math_fround($15_1 - $19_1);
   HEAPF32[$3_1 + 180 >> 2] = $8_1;
   $9_1 = Math_fround($18_1 - $14_1);
   HEAPF32[$3_1 + 176 >> 2] = $9_1;
   label$5 : {
    if ($9_1 < $8_1) {
     $4_1 = $8_1 < $12_1 ? 2 : 1;
     HEAP32[$3_1 + 120 >> 2] = $4_1;
     break label$5;
    }
    $4_1 = ($9_1 < $12_1) << 1;
    HEAP32[$3_1 + 120 >> 2] = $4_1;
    $9_1 = $8_1;
    $5_1 = 1;
   }
   $5_1 = $9_1 < $12_1 ? $5_1 : 2;
   if (($5_1 | 0) == ($4_1 | 0)) {
    $5_1 = ($4_1 + 1 >>> 0) % 3 | 0
   }
   HEAP32[$3_1 + 112 >> 2] = $5_1;
   HEAP32[$3_1 + 116 >> 2] = ($4_1 ^ 3) - $5_1;
   $139($3_1 + 176 | 0, Math_fround(10216.0));
   $17_1 = HEAPF32[$3_1 + 176 >> 2];
   $6_1 = HEAP32[$3_1 + 120 >> 2];
   $5_1 = HEAP32[$3_1 + 116 >> 2];
   if (($6_1 | 0) != (($5_1 + 1 | 0) % 3 | 0)) {
    $17_1 = Math_fround(-$17_1);
    HEAPF32[$3_1 + 176 >> 2] = $17_1;
    HEAPF32[$3_1 + 180 >> 2] = -HEAPF32[$3_1 + 180 >> 2];
    HEAPF32[$3_1 + 184 >> 2] = -HEAPF32[$3_1 + 184 >> 2];
   }
   $7_1 = $3_1 + 184 | 0;
   $4_1 = HEAP32[$7_1 + 4 >> 2];
   $10_1 = $3_1 + 16 | 0;
   HEAP32[$10_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$10_1 + 4 >> 2] = $4_1;
   $4_1 = HEAP32[$3_1 + 180 >> 2];
   HEAP32[$3_1 + 8 >> 2] = HEAP32[$3_1 + 176 >> 2];
   HEAP32[$3_1 + 12 >> 2] = $4_1;
   if ($17_1 != Math_fround(0.0)) {
    $17_1 = Math_fround(Math_fround(1.0) / $17_1);
    HEAPF32[$3_1 + 176 >> 2] = $17_1;
   }
   $12_1 = HEAPF32[$3_1 + 180 >> 2];
   if ($12_1 != Math_fround(0.0)) {
    $12_1 = Math_fround(Math_fround(1.0) / $12_1);
    HEAPF32[$3_1 + 180 >> 2] = $12_1;
   }
   $9_1 = HEAPF32[$3_1 + 184 >> 2];
   if ($9_1 != Math_fround(0.0)) {
    $9_1 = Math_fround(Math_fround(1.0) / $9_1);
    HEAPF32[$3_1 + 184 >> 2] = $9_1;
   }
   HEAP32[$3_1 + 36 >> 2] = 0;
   $16_1 = Math_fround(Math_fround($16_1 + $20_1) * Math_fround(.5));
   HEAPF32[$3_1 + 32 >> 2] = $16_1;
   $15_1 = Math_fround(Math_fround($15_1 + $19_1) * Math_fround(.5));
   HEAPF32[$3_1 + 28 >> 2] = $15_1;
   $14_1 = Math_fround(Math_fround($18_1 + $14_1) * Math_fround(.5));
   HEAPF32[$3_1 + 24 >> 2] = $14_1;
   HEAP32[$3_1 + 164 >> 2] = 0;
   HEAP8[$3_1 + 168 | 0] = 1;
   HEAP32[$3_1 + 156 >> 2] = 0;
   HEAP32[$3_1 + 160 >> 2] = 0;
   $4_1 = 0;
   if (($2_1 | 0) >= 0) {
    $11_1 = $53($2_1 << 4);
    $5_1 = HEAP32[$3_1 + 156 >> 2];
    $5_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
    while (1) {
     if ($5_1) {
      $13_1 = HEAP32[$3_1 + 164 >> 2] + $4_1 | 0;
      $7_1 = HEAP32[$13_1 + 4 >> 2];
      $6_1 = $4_1 + $11_1 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$13_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $7_1;
      $10_1 = $13_1 + 8 | 0;
      $7_1 = HEAP32[$10_1 + 4 >> 2];
      $6_1 = $6_1 + 8 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$10_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $7_1;
      $5_1 = $5_1 - 1 | 0;
      $4_1 = $4_1 + 16 | 0;
      continue;
     }
     break;
    };
    $96($3_1 + 152 | 0);
    HEAP32[$3_1 + 164 >> 2] = $11_1;
    HEAP8[$3_1 + 168 | 0] = 1;
    HEAP32[$3_1 + 160 >> 2] = $2_1;
    $5_1 = 0;
    $4_1 = $2_1;
    while (1) {
     if ($4_1) {
      $7_1 = HEAP32[$3_1 + 140 >> 2];
      $6_1 = HEAP32[$3_1 + 164 >> 2] + $5_1 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$3_1 + 136 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $7_1;
      $10_1 = $3_1 + 144 | 0;
      $7_1 = HEAP32[$10_1 + 4 >> 2];
      $6_1 = $6_1 + 8 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$10_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $7_1;
      $4_1 = $4_1 - 1 | 0;
      $5_1 = $5_1 + 16 | 0;
      continue;
     }
     break;
    };
    $6_1 = HEAP32[$3_1 + 120 >> 2];
    $5_1 = HEAP32[$3_1 + 116 >> 2];
    $16_1 = HEAPF32[$3_1 + 32 >> 2];
    $15_1 = HEAPF32[$3_1 + 28 >> 2];
    $14_1 = HEAPF32[$3_1 + 24 >> 2];
    $9_1 = HEAPF32[$3_1 + 184 >> 2];
    $12_1 = HEAPF32[$3_1 + 180 >> 2];
    $17_1 = HEAPF32[$3_1 + 176 >> 2];
    $4_1 = HEAP32[$3_1 + 164 >> 2];
   }
   HEAP32[$3_1 + 156 >> 2] = $2_1;
   $13_1 = ($3_1 + 136 | 0) + (HEAP32[$3_1 + 112 >> 2] << 2) | 0;
   $6_1 = ($3_1 + 136 | 0) + ($6_1 << 2) | 0;
   $10_1 = ($3_1 + 136 | 0) + ($5_1 << 2) | 0;
   $5_1 = 0;
   while (1) {
    if (($2_1 | 0) != ($5_1 | 0)) {
     HEAP32[$3_1 + 148 >> 2] = 0;
     HEAPF32[$3_1 + 136 >> 2] = Math_fround(HEAPF32[$1_1 >> 2] - $14_1) * $17_1;
     HEAPF32[$3_1 + 144 >> 2] = Math_fround(HEAPF32[$1_1 + 8 >> 2] - $16_1) * $9_1;
     HEAPF32[$3_1 + 140 >> 2] = Math_fround(HEAPF32[$1_1 + 4 >> 2] - $15_1) * $12_1;
     HEAP32[$4_1 + 12 >> 2] = $5_1;
     $11_1 = $4_1 + 8 | 0;
     $8_1 = HEAPF32[$13_1 >> 2];
     label$19 : {
      if (Math_fround(Math_abs($8_1)) < Math_fround(2147483648.0)) {
       $7_1 = ~~$8_1;
       break label$19;
      }
      $7_1 = -2147483648;
     }
     HEAP32[$11_1 >> 2] = $7_1;
     $11_1 = $4_1 + 4 | 0;
     $8_1 = HEAPF32[$6_1 >> 2];
     label$21 : {
      if (Math_fround(Math_abs($8_1)) < Math_fround(2147483648.0)) {
       $7_1 = ~~$8_1;
       break label$21;
      }
      $7_1 = -2147483648;
     }
     HEAP32[$11_1 >> 2] = $7_1;
     $7_1 = $4_1;
     $8_1 = HEAPF32[$10_1 >> 2];
     label$23 : {
      if (Math_fround(Math_abs($8_1)) < Math_fround(2147483648.0)) {
       $11_1 = ~~$8_1;
       break label$23;
      }
      $11_1 = -2147483648;
     }
     HEAP32[$7_1 >> 2] = $11_1;
     $1_1 = $1_1 + 16 | 0;
     $4_1 = $4_1 + 16 | 0;
     $5_1 = $5_1 + 1 | 0;
     continue;
    }
    break;
   };
   if (($2_1 | 0) >= 2) {
    $111($3_1 + 152 | 0, 0, $2_1 - 1 | 0)
   }
   HEAP32[$3_1 + 48 >> 2] = 0;
   HEAP32[$3_1 + 44 >> 2] = HEAP32[$3_1 + 40 >> 2];
   HEAP32[$3_1 + 52 >> 2] = $2_1;
   $11_1 = $3_1 + 88 | 0;
   label$26 : {
    $1_1 = HEAP32[$3_1 + 92 >> 2];
    if (($1_1 | 0) > ($2_1 | 0)) {
     break label$26
    }
    if (($1_1 | 0) < ($2_1 | 0)) {
     $110($11_1, $2_1)
    }
    $4_1 = $2_1 - $1_1 | 0;
    $1_1 = $1_1 << 2;
    while (1) {
     if (!$4_1) {
      break label$26
     }
     HEAP32[HEAP32[$3_1 + 100 >> 2] + $1_1 >> 2] = 0;
     $4_1 = $4_1 - 1 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue;
    };
   }
   HEAP32[$3_1 + 92 >> 2] = $2_1;
   $10_1 = 0;
   while (1) {
    if (($2_1 | 0) != ($10_1 | 0)) {
     label$31 : {
      $6_1 = HEAP32[$3_1 + 48 >> 2];
      if ($6_1) {
       break label$31
      }
      $1_1 = HEAP32[$3_1 + 44 >> 2];
      label$32 : {
       if ($1_1) {
        HEAP32[$3_1 + 44 >> 2] = HEAP32[$1_1 + 8 >> 2];
        break label$32;
       }
       $1_1 = $53(12);
       HEAP32[$1_1 + 8 >> 2] = 0;
       $4_1 = HEAP32[$3_1 + 52 >> 2];
       HEAP32[$1_1 + 4 >> 2] = $4_1;
       (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $53(Math_imul($4_1, 112))), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       HEAP32[$1_1 + 8 >> 2] = HEAP32[$3_1 + 40 >> 2];
       HEAP32[$3_1 + 40 >> 2] = $1_1;
      }
      $4_1 = 0;
      $7_1 = HEAP32[$1_1 + 4 >> 2];
      $5_1 = ($7_1 | 0) > 0 ? $7_1 : 0;
      $6_1 = HEAP32[$1_1 >> 2];
      $1_1 = $6_1;
      while (1) {
       if (($4_1 | 0) == ($5_1 | 0)) {
        break label$31
       }
       $13_1 = $1_1;
       $1_1 = $1_1 + 112 | 0;
       $4_1 = $4_1 + 1 | 0;
       HEAP32[$13_1 >> 2] = ($7_1 | 0) > ($4_1 | 0) ? $1_1 : 0;
       continue;
      };
     }
     HEAP32[$3_1 + 48 >> 2] = HEAP32[$6_1 >> 2];
     $1_1 = $6_1 + 8 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$6_1 + 16 >> 2] = 0;
     HEAP32[$6_1 >> 2] = 0;
     HEAP32[$6_1 + 4 >> 2] = 0;
     HEAP32[$6_1 + 104 >> 2] = -1;
     HEAP32[$1_1 >> 2] = 0;
     $4_1 = HEAP32[$3_1 + 164 >> 2] + ($10_1 << 4) | 0;
     $1_1 = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$6_1 + 88 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$6_1 + 92 >> 2] = $1_1;
     $4_1 = $4_1 + 8 | 0;
     $1_1 = HEAP32[$4_1 + 4 >> 2];
     $5_1 = $6_1 + 96 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $1_1;
     HEAP32[$6_1 + 104 >> 2] = -1;
     HEAP32[HEAP32[$3_1 + 100 >> 2] + ($10_1 << 2) >> 2] = $6_1;
     $10_1 = $10_1 + 1 | 0;
     continue;
    }
    break;
   };
   $57($3_1 + 152 | 0);
   HEAP32[$3_1 + 124 >> 2] = 0;
   HEAP32[$3_1 + 128 >> 2] = 0;
   HEAP32[$3_1 + 64 >> 2] = 0;
   HEAP32[$3_1 + 108 >> 2] = -3;
   HEAP32[$3_1 + 68 >> 2] = Math_imul($2_1, 6);
   HEAP32[$3_1 + 60 >> 2] = HEAP32[$3_1 + 56 >> 2];
   $1_1 = $3_1 + 144 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$3_1 + 136 >> 2] = 0;
   HEAP32[$3_1 + 140 >> 2] = 0;
   $103($3_1 + 8 | 0, 0, $2_1, $3_1 + 136 | 0);
   HEAP32[$3_1 + 132 >> 2] = HEAP32[$3_1 + 136 >> 2];
   $57($3_1 + 152 | 0);
   $131($0_1, 0, $3_1 + 152 | 0);
   HEAP32[$3_1 + 160 >> 2] = 0;
   HEAP32[$3_1 + 152 >> 2] = 0;
   HEAP32[$3_1 + 156 >> 2] = 0;
   $21_1 = $0_1 + 20 | 0;
   label$35 : {
    $4_1 = HEAP32[$0_1 + 24 >> 2];
    if (($4_1 | 0) > 0) {
     break label$35
    }
    if (($4_1 | 0) <= -1) {
     $117($21_1, 0)
    }
    $1_1 = Math_imul($4_1, 12);
    while (1) {
     if (!$4_1) {
      break label$35
     }
     $2_1 = HEAP32[$3_1 + 156 >> 2];
     $5_1 = HEAP32[$0_1 + 32 >> 2] + $1_1 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$3_1 + 152 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $2_1;
     HEAP32[$5_1 + 8 >> 2] = HEAP32[$3_1 + 160 >> 2];
     $1_1 = $1_1 + 12 | 0;
     $4_1 = $4_1 + 1 | 0;
     continue;
    };
   }
   HEAP32[$0_1 + 24 >> 2] = 0;
   HEAP32[$3_1 + 152 >> 2] = 0;
   $13_1 = $0_1 + 40 | 0;
   $140($13_1, 0, $3_1 + 152 | 0);
   HEAP32[$3_1 + 164 >> 2] = 0;
   HEAP8[$3_1 + 168 | 0] = 1;
   HEAP32[$3_1 + 156 >> 2] = 0;
   HEAP32[$3_1 + 160 >> 2] = 0;
   $115(HEAP32[$3_1 + 132 >> 2], $3_1 + 152 | 0);
   $2_1 = 0;
   while (1) {
    $5_1 = HEAP32[$3_1 + 164 >> 2];
    if (HEAP32[$3_1 + 156 >> 2] <= ($2_1 | 0)) {
     $6_1 = 0;
     while (1) {
      label$41 : {
       if (($2_1 | 0) == ($6_1 | 0)) {
        $57($3_1 + 152 | 0);
        $57($11_1);
        while (1) {
         $0_1 = HEAP32[$3_1 + 72 >> 2];
         if (!$0_1) {
          break label$41
         }
         HEAP32[$3_1 + 72 >> 2] = HEAP32[$0_1 + 8 >> 2];
         $54(HEAP32[$0_1 >> 2]);
         $54($0_1);
         continue;
        };
       }
       $0_1 = HEAP32[HEAP32[$5_1 + ($6_1 << 2) >> 2] + 8 >> 2];
       if ($0_1) {
        $1_1 = $0_1;
        while (1) {
         if (HEAP32[$1_1 + 20 >> 2] >= 0) {
          $134($13_1, $1_1 + 20 | 0);
          $4_1 = $1_1;
          while (1) {
           HEAP32[$4_1 + 20 >> 2] = -1;
           $4_1 = HEAP32[HEAP32[$4_1 + 8 >> 2] + 4 >> 2];
           if (($4_1 | 0) != ($1_1 | 0)) {
            continue
           }
           break;
          };
         }
         $1_1 = HEAP32[$1_1 >> 2];
         if (($0_1 | 0) != ($1_1 | 0)) {
          continue
         }
         break;
        };
       }
       $6_1 = $6_1 + 1 | 0;
       continue;
      }
      break;
     };
     while (1) {
      $0_1 = HEAP32[$3_1 + 56 >> 2];
      if ($0_1) {
       HEAP32[$3_1 + 56 >> 2] = HEAP32[$0_1 + 8 >> 2];
       $54(HEAP32[$0_1 >> 2]);
       $54($0_1);
       continue;
      }
      break;
     };
     while (1) {
      $0_1 = HEAP32[$3_1 + 40 >> 2];
      if (!$0_1) {
       break label$1
      }
      HEAP32[$3_1 + 40 >> 2] = HEAP32[$0_1 + 8 >> 2];
      $54(HEAP32[$0_1 >> 2]);
      $54($0_1);
      continue;
     };
    }
    $4_1 = HEAP32[$5_1 + ($2_1 << 2) >> 2];
    $1_1 = HEAP32[$4_1 + 100 >> 2];
    label$51 : {
     if (($1_1 | 0) >= 0) {
      $9_1 = Math_fround(HEAP32[$4_1 + 88 >> 2]);
      break label$51;
     }
     $9_1 = Math_fround($114($4_1 + 24 | 0) / $114($4_1 + 72 | 0));
     $1_1 = HEAP32[$4_1 + 100 >> 2];
    }
    HEAPF32[($3_1 + 176 | 0) + (HEAP32[$3_1 + 116 >> 2] << 2) >> 2] = $9_1;
    label$53 : {
     if (($1_1 | 0) >= 0) {
      $9_1 = Math_fround(HEAP32[$4_1 + 92 >> 2]);
      break label$53;
     }
     $9_1 = Math_fround($114($4_1 + 40 | 0) / $114($4_1 + 72 | 0));
     $1_1 = HEAP32[$4_1 + 100 >> 2];
    }
    HEAPF32[($3_1 + 176 | 0) + (HEAP32[$3_1 + 120 >> 2] << 2) >> 2] = $9_1;
    if (($1_1 | 0) >= 0) {
     $8_1 = Math_fround(HEAP32[$4_1 + 96 >> 2])
    } else {
     $8_1 = Math_fround($114($4_1 + 56 | 0) / $114($4_1 + 72 | 0))
    }
    HEAPF32[($3_1 + 176 | 0) + (HEAP32[$3_1 + 112 >> 2] << 2) >> 2] = $8_1;
    HEAP32[$3_1 + 148 >> 2] = 0;
    HEAPF32[$3_1 + 144 >> 2] = Math_fround(HEAPF32[$3_1 + 184 >> 2] * HEAPF32[$3_1 + 16 >> 2]) + HEAPF32[$3_1 + 32 >> 2];
    HEAPF32[$3_1 + 140 >> 2] = Math_fround(HEAPF32[$3_1 + 180 >> 2] * HEAPF32[$3_1 + 12 >> 2]) + HEAPF32[$3_1 + 28 >> 2];
    HEAPF32[$3_1 + 136 >> 2] = Math_fround(HEAPF32[$3_1 + 176 >> 2] * HEAPF32[$3_1 + 8 >> 2]) + HEAPF32[$3_1 + 24 >> 2];
    $128($0_1, $3_1 + 136 | 0);
    $10_1 = HEAP32[$4_1 + 8 >> 2];
    if ($10_1) {
     $6_1 = -1;
     $1_1 = $10_1;
     $7_1 = -1;
     while (1) {
      $4_1 = HEAP32[$1_1 + 20 >> 2];
      if (($4_1 | 0) <= -1) {
       $5_1 = HEAP32[$0_1 + 24 >> 2];
       $4_1 = $3_1 + 184 | 0;
       HEAP32[$4_1 >> 2] = 0;
       HEAP32[$3_1 + 176 >> 2] = 0;
       HEAP32[$3_1 + 180 >> 2] = 0;
       $116($21_1, $3_1 + 176 | 0);
       HEAP32[$4_1 >> 2] = 0;
       HEAP32[$3_1 + 176 >> 2] = 0;
       HEAP32[$3_1 + 180 >> 2] = 0;
       $116($21_1, $3_1 + 176 | 0);
       HEAP32[$1_1 + 20 >> 2] = $5_1;
       HEAP32[HEAP32[$1_1 + 8 >> 2] + 20 >> 2] = $5_1 + 1;
       $5_1 = HEAP32[$0_1 + 32 >> 2] + Math_imul($5_1, 12) | 0;
       HEAP32[$5_1 + 4 >> 2] = 1;
       HEAP32[$5_1 + 16 >> 2] = -1;
       $4_1 = $115(HEAP32[$1_1 + 12 >> 2], $3_1 + 152 | 0);
       HEAP32[$5_1 + 20 >> 2] = $2_1;
       HEAP32[$5_1 + 8 >> 2] = $4_1;
       $4_1 = HEAP32[$1_1 + 20 >> 2];
      }
      $5_1 = $4_1;
      if (($6_1 | 0) >= 0) {
       HEAP32[HEAP32[$0_1 + 32 >> 2] + Math_imul($4_1, 12) >> 2] = $6_1 - $4_1;
       $5_1 = $7_1;
      }
      $6_1 = $4_1;
      $7_1 = $5_1;
      $1_1 = HEAP32[$1_1 >> 2];
      if (($10_1 | 0) != ($1_1 | 0)) {
       continue
      }
      break;
     };
     HEAP32[HEAP32[$0_1 + 32 >> 2] + Math_imul($7_1, 12) >> 2] = $6_1 - $7_1;
    }
    $2_1 = $2_1 + 1 | 0;
    continue;
   };
  }
  global$0 = $3_1 + 192 | 0;
 }
 
 function $131($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   $3_1 = HEAP32[$0_1 + 4 >> 2];
   if (($3_1 | 0) > ($1_1 | 0)) {
    break label$1
   }
   if (($1_1 | 0) > ($3_1 | 0)) {
    $142($0_1, $1_1)
   }
   $5_1 = $1_1 - $3_1 | 0;
   $3_1 = $3_1 << 4;
   while (1) {
    if (!$5_1) {
     break label$1
    }
    $6_1 = HEAP32[$2_1 + 4 >> 2];
    $4_1 = HEAP32[$0_1 + 12 >> 2] + $3_1 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    $7_1 = $2_1 + 8 | 0;
    $6_1 = HEAP32[$7_1 + 4 >> 2];
    $4_1 = $4_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    $5_1 = $5_1 - 1 | 0;
    $3_1 = $3_1 + 16 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $132($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $4_1 = $53(Math_imul($1_1, 36))
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   while (1) {
    if ($2_1) {
     $133($4_1 + $3_1 | 0, HEAP32[$0_1 + 12 >> 2] + $3_1 | 0);
     $2_1 = $2_1 - 1 | 0;
     $3_1 = $3_1 + 36 | 0;
     continue;
    }
    break;
   };
   $144($0_1, HEAP32[$0_1 + 4 >> 2]);
   $96($0_1);
   HEAP32[$0_1 + 12 >> 2] = $4_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $133($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP8[$0_1 + 16 | 0] = 1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$3_1 + 12 >> 2] = 0;
  $140($0_1, $2_1, $3_1 + 12 | 0);
  $143($1_1, $2_1, HEAP32[$0_1 + 12 >> 2]);
  $4_1 = $1_1 + 28 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $2_1 = $0_1 + 28 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $2_1 = HEAP32[$1_1 + 24 >> 2];
  HEAP32[$0_1 + 20 >> 2] = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$0_1 + 24 >> 2] = $2_1;
  global$0 = $3_1 + 16 | 0;
  return $0_1;
 }
 
 function $134($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  if (($2_1 | 0) == HEAP32[$0_1 + 8 >> 2]) {
   $145($0_1, $2_1 ? $2_1 << 1 : 1);
   $2_1 = HEAP32[$0_1 + 4 >> 2];
  }
  HEAP32[HEAP32[$0_1 + 12 >> 2] + ($2_1 << 2) >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] + 1;
 }
 
 function $135($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = HEAP32[$0_1 + 4 >> 2];
  $5_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  label$1 : {
   while (1) {
    if (($2_1 | 0) == ($5_1 | 0)) {
     break label$1
    }
    if (HEAP32[HEAP32[$0_1 + 12 >> 2] + $4_1 >> 2] != ($1_1 | 0)) {
     $4_1 = $4_1 + 4 | 0;
     $2_1 = $2_1 + 1 | 0;
     continue;
    }
    break;
   };
   if (($2_1 | 0) >= ($3_1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   $2_1 = $1_1 + ($2_1 << 2) | 0;
   $4_1 = HEAP32[$2_1 >> 2];
   $1_1 = ($1_1 + ($3_1 << 2) | 0) - 4 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$1_1 >> 2] = $4_1;
   HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] - 1;
  }
 }
 
 function $136($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  label$1 : {
   if (($2_1 | 0) != HEAP32[$0_1 + 8 >> 2]) {
    break label$1
   }
   $3_1 = $2_1 ? $2_1 << 1 : 1;
   if (($3_1 | 0) <= ($2_1 | 0)) {
    break label$1
   }
   if ($3_1) {
    $7_1 = $53(Math_imul($3_1, 24));
    $2_1 = HEAP32[$0_1 + 4 >> 2];
   }
   $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   while (1) {
    if ($2_1) {
     $10_1 = HEAP32[$0_1 + 12 >> 2] + $5_1 | 0;
     $4_1 = $10_1;
     $9_1 = HEAP32[$4_1 + 4 >> 2];
     $6_1 = $5_1 + $7_1 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $9_1;
     $4_1 = $4_1 + 16 | 0;
     $9_1 = HEAP32[$4_1 + 4 >> 2];
     $8_1 = $6_1 + 16 | 0;
     HEAP32[$8_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $9_1;
     $4_1 = $10_1 + 8 | 0;
     $8_1 = HEAP32[$4_1 + 4 >> 2];
     $6_1 = $6_1 + 8 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $8_1;
     $2_1 = $2_1 - 1 | 0;
     $5_1 = $5_1 + 24 | 0;
     continue;
    }
    break;
   };
   $96($0_1);
   HEAP32[$0_1 + 12 >> 2] = $7_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $3_1;
   $2_1 = HEAP32[$0_1 + 4 >> 2];
  }
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 + 12 >> 2] + Math_imul($2_1, 24) | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $5_1 = $1_1 + 16 | 0;
  $7_1 = HEAP32[$5_1 + 4 >> 2];
  $3_1 = $2_1 + 16 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $7_1;
  $1_1 = $1_1 + 8 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $2_1 + 8 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] + 1;
 }
 
 function $137($0_1, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0;
  $6_1 = $2_1;
  $3_1 = HEAPF32[$0_1 + 8 >> 2];
  label$1 : {
   if (Math_fround(Math_abs($3_1)) > Math_fround(.7071067690849304)) {
    $4_1 = HEAPF32[$0_1 + 4 >> 2];
    HEAP32[$1_1 >> 2] = 0;
    $4_1 = Math_fround(Math_fround($3_1 * $3_1) + Math_fround($4_1 * $4_1));
    $3_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($4_1)));
    HEAPF32[$1_1 + 4 >> 2] = $3_1 * Math_fround(-HEAPF32[$0_1 + 8 >> 2]);
    HEAPF32[$1_1 + 8 >> 2] = HEAPF32[$0_1 + 4 >> 2] * $3_1;
    HEAPF32[$2_1 >> 2] = $4_1 * $3_1;
    HEAPF32[$2_1 + 4 >> 2] = HEAPF32[$1_1 + 8 >> 2] * Math_fround(-HEAPF32[$0_1 >> 2]);
    $3_1 = Math_fround(HEAPF32[$0_1 >> 2] * HEAPF32[$1_1 + 4 >> 2]);
    break label$1;
   }
   $3_1 = HEAPF32[$0_1 >> 2];
   $4_1 = Math_fround($3_1 * $3_1);
   $3_1 = HEAPF32[$0_1 + 4 >> 2];
   $5_1 = Math_fround($4_1 + Math_fround($3_1 * $3_1));
   $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($5_1)));
   HEAPF32[$1_1 >> 2] = $4_1 * Math_fround(-$3_1);
   $3_1 = HEAPF32[$0_1 >> 2];
   HEAP32[$1_1 + 8 >> 2] = 0;
   $3_1 = Math_fround($3_1 * $4_1);
   HEAPF32[$1_1 + 4 >> 2] = $3_1;
   HEAPF32[$2_1 >> 2] = $3_1 * Math_fround(-HEAPF32[$0_1 + 8 >> 2]);
   HEAPF32[$2_1 + 4 >> 2] = HEAPF32[$0_1 + 8 >> 2] * HEAPF32[$1_1 >> 2];
   $3_1 = Math_fround($5_1 * $4_1);
  }
  HEAPF32[$6_1 + 8 >> 2] = $3_1;
 }
 
 function $138($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0;
  $10_1 = global$0 - 48 | 0;
  global$0 = $10_1;
  $8_1 = HEAP32[$0_1 + 12 >> 2] + Math_imul(($2_1 + $3_1 | 0) / 2 | 0, 24) | 0;
  $5_1 = $8_1 + 8 | 0;
  $4_1 = HEAP32[$5_1 + 4 >> 2];
  $7_1 = $10_1 + 8 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $4_1;
  $5_1 = $8_1 + 16 | 0;
  $4_1 = HEAP32[$5_1 + 4 >> 2];
  $7_1 = $10_1 + 16 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $4_1;
  $4_1 = HEAP32[$8_1 + 4 >> 2];
  HEAP32[$10_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$10_1 + 4 >> 2] = $4_1;
  $14_1 = $1_1 + 4 | 0;
  $5_1 = $2_1;
  $4_1 = $3_1;
  while (1) {
   $9_1 = Math_imul($5_1, 24);
   $8_1 = $5_1;
   while (1) {
    $8_1 = $8_1 + 1 | 0;
    $5_1 = HEAP32[$0_1 + 12 >> 2] + $9_1 | 0;
    $6_1 = $9_1 + 24 | 0;
    $9_1 = $6_1;
    $11_1 = $1_1 + 8 | 0;
    if ($146(HEAPF32[$1_1 >> 2], HEAPF32[$14_1 >> 2], HEAPF32[$11_1 >> 2], $5_1, $10_1)) {
     continue
    }
    break;
   };
   $5_1 = $8_1 - 1 | 0;
   $9_1 = Math_imul($4_1, 24) + 24 | 0;
   $7_1 = $4_1;
   while (1) {
    $7_1 = $7_1 - 1 | 0;
    $4_1 = HEAP32[$0_1 + 12 >> 2] + $9_1 | 0;
    $13_1 = $9_1 - 24 | 0;
    $9_1 = $13_1;
    if ($146(HEAPF32[$1_1 >> 2], HEAPF32[$14_1 >> 2], HEAPF32[$11_1 >> 2], $10_1, $4_1 - 24 | 0)) {
     continue
    }
    break;
   };
   $4_1 = $7_1 + 1 | 0;
   if (($4_1 | 0) >= ($5_1 | 0)) {
    $4_1 = HEAP32[$0_1 + 12 >> 2];
    $6_1 = ($4_1 + $6_1 | 0) - 24 | 0;
    $16_1 = HEAP32[$6_1 >> 2];
    $17_1 = HEAP32[$6_1 + 4 >> 2];
    $15_1 = $4_1 + $13_1 | 0;
    $5_1 = $15_1;
    $4_1 = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $4_1;
    $11_1 = $6_1 + 8 | 0;
    $4_1 = $11_1;
    $18_1 = HEAP32[$4_1 >> 2];
    $9_1 = HEAP32[$4_1 + 4 >> 2];
    $5_1 = $5_1 + 8 | 0;
    $4_1 = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$11_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$11_1 + 4 >> 2] = $4_1;
    $12_1 = $6_1 + 16 | 0;
    $6_1 = HEAP32[$12_1 >> 2];
    $11_1 = HEAP32[$12_1 + 4 >> 2];
    $5_1 = $15_1 + 16 | 0;
    $4_1 = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$12_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $4_1;
    $5_1 = HEAP32[$0_1 + 12 >> 2] + $13_1 | 0;
    $4_1 = $5_1;
    HEAP32[$4_1 >> 2] = $16_1;
    HEAP32[$4_1 + 4 >> 2] = $17_1;
    $4_1 = $4_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = $18_1;
    HEAP32[$4_1 + 4 >> 2] = $9_1;
    $4_1 = $5_1 + 16 | 0;
    HEAP32[$4_1 >> 2] = $6_1;
    HEAP32[$4_1 + 4 >> 2] = $11_1;
    $5_1 = $8_1;
    $4_1 = $7_1;
   }
   if (($4_1 | 0) >= ($5_1 | 0)) {
    continue
   }
   break;
  };
  if (($2_1 | 0) < ($4_1 | 0)) {
   $138($0_1, $1_1, $2_1, $4_1)
  }
  if (($3_1 | 0) > ($5_1 | 0)) {
   $138($0_1, $1_1, $5_1, $3_1)
  }
  global$0 = $10_1 + 48 | 0;
 }
 
 function $139($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAPF32[$2_1 + 12 >> 2] = Math_fround(1.0) / $1_1;
  $0_1 = $147($0_1, $2_1 + 12 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1;
 }
 
 function $140($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = HEAP32[$0_1 + 4 >> 2];
   if (($3_1 | 0) > ($1_1 | 0)) {
    break label$1
   }
   if (($1_1 | 0) > ($3_1 | 0)) {
    $145($0_1, $1_1)
   }
   $4_1 = $1_1 - $3_1 | 0;
   $3_1 = $3_1 << 2;
   while (1) {
    if (!$4_1) {
     break label$1
    }
    HEAP32[HEAP32[$0_1 + 12 >> 2] + $3_1 >> 2] = HEAP32[$2_1 >> 2];
    $4_1 = $4_1 - 1 | 0;
    $3_1 = $3_1 + 4 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $141($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  if (($2_1 | 0) == HEAP32[$0_1 + 8 >> 2]) {
   $132($0_1, $2_1 ? $2_1 << 1 : 1);
   $2_1 = HEAP32[$0_1 + 4 >> 2];
  }
  $133(HEAP32[$0_1 + 12 >> 2] + Math_imul($2_1, 36) | 0, $1_1);
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] + 1;
 }
 
 function $142($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $7_1 = $53($1_1 << 4)
   }
   $3_1 = HEAP32[$0_1 + 4 >> 2];
   $3_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
   while (1) {
    if ($3_1) {
     $4_1 = HEAP32[$0_1 + 12 >> 2] + $5_1 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $2_1 = $7_1 + $5_1 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $6_1;
     $4_1 = $4_1 + 8 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $2_1 = $2_1 + 8 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $6_1;
     $3_1 = $3_1 - 1 | 0;
     $5_1 = $5_1 + 16 | 0;
     continue;
    }
    break;
   };
   $96($0_1);
   HEAP32[$0_1 + 12 >> 2] = $7_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $143($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
  while (1) {
   if ($1_1) {
    HEAP32[$2_1 + $3_1 >> 2] = HEAP32[HEAP32[$0_1 + 12 >> 2] + $3_1 >> 2];
    $1_1 = $1_1 - 1 | 0;
    $3_1 = $3_1 + 4 | 0;
    continue;
   }
   break;
  };
 }
 
 function $144($0_1, $1_1) {
  var $2_1 = 0;
  $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
  while (1) {
   if ($1_1) {
    $57(HEAP32[$0_1 + 12 >> 2] + $2_1 | 0);
    $1_1 = $1_1 - 1 | 0;
    $2_1 = $2_1 + 36 | 0;
    continue;
   }
   break;
  };
 }
 
 function $145($0_1, $1_1) {
  var $2_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $2_1 = $53($1_1 << 2)
   } else {
    $2_1 = 0
   }
   $143($0_1, HEAP32[$0_1 + 4 >> 2], $2_1);
   $96($0_1);
   HEAP32[$0_1 + 12 >> 2] = $2_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $146($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $5_1 = HEAPF32[$4_1 + 16 >> 2];
  $6_1 = HEAPF32[$3_1 + 16 >> 2];
  if ($5_1 != $6_1) {
   return $5_1 > $6_1
  }
  $5_1 = Math_fround(HEAPF32[$3_1 >> 2] - $0_1);
  $6_1 = Math_fround($5_1 * $5_1);
  $5_1 = Math_fround(HEAPF32[$3_1 + 4 >> 2] - $1_1);
  $6_1 = Math_fround($6_1 + Math_fround($5_1 * $5_1));
  $5_1 = Math_fround(HEAPF32[$3_1 + 8 >> 2] - $2_1);
  $5_1 = Math_fround($6_1 + Math_fround($5_1 * $5_1));
  $0_1 = Math_fround(HEAPF32[$4_1 >> 2] - $0_1);
  $6_1 = Math_fround($0_1 * $0_1);
  $0_1 = Math_fround(HEAPF32[$4_1 + 4 >> 2] - $1_1);
  $1_1 = Math_fround($6_1 + Math_fround($0_1 * $0_1));
  $0_1 = Math_fround(HEAPF32[$4_1 + 8 >> 2] - $2_1);
  $0_1 = Math_fround($1_1 + Math_fround($0_1 * $0_1));
  return $0_1 != $5_1 ? $5_1 < $0_1 : HEAP32[$3_1 + 20 >> 2] < HEAP32[$4_1 + 20 >> 2];
 }
 
 function $147($0_1, $1_1) {
  HEAPF32[$0_1 >> 2] = HEAPF32[$1_1 >> 2] * HEAPF32[$0_1 >> 2];
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$1_1 >> 2] * HEAPF32[$0_1 + 4 >> 2];
  HEAPF32[$0_1 + 8 >> 2] = HEAPF32[$1_1 >> 2] * HEAPF32[$0_1 + 8 >> 2];
  return $0_1;
 }
 
 function $148($0_1) {
  $0_1 = $0_1 | 0;
  $119($0_1);
  $54($0_1);
 }
 
 function $149($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0);
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $5_1 = HEAPF32[$0_1 + 32 >> 2];
  $6_1 = HEAPF32[$0_1 + 36 >> 2];
  $10_1 = HEAPF32[$0_1 + 40 >> 2];
  $0_1 = global$0 + -64 | 0;
  global$0 = $0_1;
  $171($0_1 + 16 | 0, $1_1);
  $7_1 = HEAPF32[$1_1 + 52 >> 2];
  $8_1 = HEAPF32[$1_1 + 56 >> 2];
  $9_1 = HEAPF32[$1_1 + 48 >> 2];
  $80($0_1, Math_fround($5_1 + $4_1), Math_fround($6_1 + $4_1), Math_fround($10_1 + $4_1), HEAPF32[$0_1 + 16 >> 2], HEAPF32[$0_1 + 20 >> 2], HEAPF32[$0_1 + 24 >> 2], HEAPF32[$0_1 + 32 >> 2], HEAPF32[$0_1 + 36 >> 2], HEAPF32[$0_1 + 40 >> 2], HEAPF32[$0_1 + 48 >> 2], HEAPF32[$0_1 + 52 >> 2], HEAPF32[$0_1 + 56 >> 2]);
  HEAP32[$2_1 + 12 >> 2] = 0;
  $4_1 = HEAPF32[$0_1 + 8 >> 2];
  HEAPF32[$2_1 + 8 >> 2] = $8_1 - $4_1;
  $5_1 = HEAPF32[$0_1 + 4 >> 2];
  HEAPF32[$2_1 + 4 >> 2] = $7_1 - $5_1;
  $6_1 = HEAPF32[$0_1 >> 2];
  HEAPF32[$2_1 >> 2] = $9_1 - $6_1;
  HEAPF32[$3_1 >> 2] = $9_1 + $6_1;
  HEAPF32[$3_1 + 4 >> 2] = $7_1 + $5_1;
  HEAPF32[$3_1 + 8 >> 2] = $8_1 + $4_1;
  HEAP32[$3_1 + 12 >> 2] = 0;
  global$0 = $0_1 - -64 | 0;
 }
 
 function $150($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0);
  $2_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $3_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $5_1 = $0_1 + 20 | 0;
  $9_1 = HEAPF32[$5_1 >> 2];
  $6_1 = $0_1 + 36 | 0;
  $10_1 = HEAPF32[$6_1 >> 2];
  $7_1 = $0_1 + 24 | 0;
  $11_1 = HEAPF32[$7_1 >> 2];
  $8_1 = $0_1 + 40 | 0;
  $12_1 = HEAPF32[$8_1 >> 2];
  $13_1 = HEAPF32[$0_1 + 16 >> 2];
  $14_1 = HEAPF32[$0_1 + 32 >> 2];
  $87($0_1, $1_1);
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAPF32[$8_1 >> 2] = Math_fround(Math_fround(Math_fround($4_1 + $12_1) / $11_1) * HEAPF32[$7_1 >> 2]) - $4_1;
  HEAPF32[$6_1 >> 2] = Math_fround(Math_fround(Math_fround($3_1 + $10_1) / $9_1) * HEAPF32[$5_1 >> 2]) - $3_1;
  HEAPF32[$0_1 + 32 >> 2] = Math_fround(Math_fround(Math_fround($2_1 + $14_1) / $13_1) * HEAPF32[$0_1 + 16 >> 2]) - $2_1;
 }
 
 function $151($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 16 | 0;
 }
 
 function $152($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0);
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $153($5_1, $0_1);
  HEAP32[$2_1 + 12 >> 2] = 0;
  $1_1 = Math_fround($1_1 / Math_fround(12.0));
  $3_1 = HEAPF32[$5_1 >> 2];
  $3_1 = Math_fround($3_1 + $3_1);
  $3_1 = Math_fround($3_1 * $3_1);
  $4_1 = HEAPF32[$5_1 + 4 >> 2];
  $4_1 = Math_fround($4_1 + $4_1);
  $4_1 = Math_fround($4_1 * $4_1);
  HEAPF32[$2_1 + 8 >> 2] = $1_1 * Math_fround($3_1 + $4_1);
  $6_1 = $3_1;
  $3_1 = HEAPF32[$5_1 + 8 >> 2];
  $3_1 = Math_fround($3_1 + $3_1);
  $3_1 = Math_fround($3_1 * $3_1);
  HEAPF32[$2_1 + 4 >> 2] = $1_1 * Math_fround($6_1 + $3_1);
  HEAPF32[$2_1 >> 2] = $1_1 * Math_fround($4_1 + $3_1);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $153($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  $4_1 = $1_1 + 40 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $3_1 = $0_1 + 8 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $5_1;
  $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
  $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
  $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
  HEAP32[$2_1 + 12 >> 2] = 0;
  HEAPF32[$2_1 + 8 >> 2] = $8_1;
  HEAPF32[$2_1 + 4 >> 2] = $7_1;
  HEAPF32[$2_1 >> 2] = $6_1;
  $89($0_1, $2_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $154($0_1) {
  $0_1 = $0_1 | 0;
  return 8162;
 }
 
 function $155($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 8 >> 2] = 1065353216;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 1065353216;
  HEAP32[$0_1 + 4 >> 2] = 1065353216;
 }
 
 function $156($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  HEAPF32[$0_1 + 48 >> 2] = $1_1;
  $2_1 = $0_1 + 40 | 0;
  $1_1 = HEAPF32[$2_1 >> 2];
  $3_1 = $0_1 + 36 | 0;
  $7_1 = HEAPF32[$3_1 >> 2];
  $8_1 = HEAPF32[$0_1 + 32 >> 2];
  $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $11_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAPF32[$3_1 >> 2] = Math_fround($5_1 + $7_1) - $10_1;
  HEAPF32[$0_1 + 32 >> 2] = Math_fround($4_1 + $8_1) - $9_1;
  HEAPF32[$2_1 >> 2] = Math_fround($6_1 + $1_1) - $11_1;
 }
 
 function $157($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[$0_1 + 48 >> 2]);
 }
 
 function $158($0_1) {
  $0_1 = $0_1 | 0;
  return 52;
 }
 
 function $159($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $72($0_1, $1_1, $2_1);
  $65($0_1 + 32 | 0, $1_1 + 28 | 0);
  $65($0_1 + 16 | 0, $1_1 + 12 | 0);
  HEAP32[$1_1 + 48 >> 2] = 0;
  HEAPF32[$1_1 + 44 >> 2] = HEAPF32[$0_1 + 48 >> 2];
  return 8136;
 }
 
 function $160($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  $3_1 = HEAPF32[$1_1 + 36 >> 2];
  $4_1 = HEAPF32[$1_1 + 40 >> 2];
  $5_1 = HEAPF32[$1_1 + 32 >> 2];
  $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
  $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
  $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
  HEAP32[$0_1 + 12 >> 2] = 0;
  $4_1 = Math_fround($4_1 + $8_1);
  HEAPF32[$0_1 + 8 >> 2] = HEAPF32[$2_1 + 8 >> 2] >= Math_fround(0.0) ? $4_1 : Math_fround(-$4_1);
  $3_1 = Math_fround($3_1 + $7_1);
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$2_1 + 4 >> 2] >= Math_fround(0.0) ? $3_1 : Math_fround(-$3_1);
  $3_1 = Math_fround($5_1 + $6_1);
  HEAPF32[$0_1 >> 2] = HEAPF32[$2_1 >> 2] >= Math_fround(0.0) ? $3_1 : Math_fround(-$3_1);
 }
 
 function $161($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0);
  HEAP32[$0_1 + 12 >> 2] = 0;
  $3_1 = HEAPF32[$1_1 + 32 >> 2];
  HEAPF32[$0_1 >> 2] = HEAPF32[$2_1 >> 2] >= Math_fround(0.0) ? $3_1 : Math_fround(-$3_1);
  $3_1 = HEAPF32[$1_1 + 40 >> 2];
  HEAPF32[$0_1 + 8 >> 2] = HEAPF32[$2_1 + 8 >> 2] >= Math_fround(0.0) ? $3_1 : Math_fround(-$3_1);
  $3_1 = HEAPF32[$1_1 + 36 >> 2];
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$2_1 + 4 >> 2] >= Math_fround(0.0) ? $3_1 : Math_fround(-$3_1);
 }
 
 function $162($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $5_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  $3_1 = 0;
  while (1) {
   if ($5_1) {
    $4_1 = $1_1 + $3_1 | 0;
    $9_1 = HEAPF32[$4_1 + 4 >> 2];
    $10_1 = HEAPF32[$4_1 + 8 >> 2];
    $11_1 = HEAPF32[$4_1 >> 2];
    $6_1 = HEAPF32[$0_1 + 36 >> 2];
    $7_1 = HEAPF32[$0_1 + 40 >> 2];
    $8_1 = HEAPF32[$0_1 + 32 >> 2];
    $4_1 = $2_1 + $3_1 | 0;
    HEAP32[$4_1 + 12 >> 2] = 0;
    HEAPF32[$4_1 >> 2] = $11_1 >= Math_fround(0.0) ? $8_1 : Math_fround(-$8_1);
    HEAPF32[$4_1 + 8 >> 2] = $10_1 >= Math_fround(0.0) ? $7_1 : Math_fround(-$7_1);
    HEAPF32[$4_1 + 4 >> 2] = $9_1 >= Math_fround(0.0) ? $6_1 : Math_fround(-$6_1);
    $5_1 = $5_1 - 1 | 0;
    $3_1 = $3_1 + 16 | 0;
    continue;
   }
   break;
  };
 }
 
 function $163($0_1) {
  $0_1 = $0_1 | 0;
  return 6;
 }
 
 function $164($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  if ($1_1 >>> 0 <= 5) {
   HEAP32[$2_1 + 12 >> 2] = 0;
   $0_1 = $1_1 << 2;
   HEAPF32[$2_1 + 8 >> 2] = HEAPF32[$0_1 + 8112 >> 2];
   HEAPF32[$2_1 + 4 >> 2] = HEAPF32[$0_1 + 8088 >> 2];
   HEAPF32[$2_1 >> 2] = HEAPF32[$0_1 + 8064 >> 2];
  }
 }
 
 function $165($0_1) {
  $0_1 = $0_1 | 0;
  return 8;
 }
 
 function $166($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = $0_1;
  if ($1_1 >>> 0 <= 11) {
   $1_1 = $1_1 << 2;
   $5_1 = HEAP32[$1_1 + 8016 >> 2];
   $1_1 = HEAP32[$1_1 + 7968 >> 2];
  } else {
   $1_1 = 0
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 108 >> 2]]($4_1, $1_1, $2_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 108 >> 2]]($0_1, $5_1, $3_1);
 }
 
 function $167($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $153($4_1, $0_1);
  HEAP32[$2_1 + 12 >> 2] = 0;
  $3_1 = HEAPF32[$4_1 >> 2];
  $0_1 = $1_1 & 1;
  HEAPF32[$2_1 >> 2] = Math_fround($3_1 * Math_fround(!$0_1 | 0)) - Math_fround($3_1 * Math_fround($0_1 | 0));
  $3_1 = HEAPF32[$4_1 + 8 >> 2];
  $0_1 = $1_1 >>> 2 & 1;
  HEAPF32[$2_1 + 8 >> 2] = Math_fround($3_1 * Math_fround(!$0_1 | 0)) - Math_fround($3_1 * Math_fround($0_1 | 0));
  $3_1 = HEAPF32[$4_1 + 4 >> 2];
  $0_1 = $1_1 >>> 1 & 1;
  HEAPF32[$2_1 + 4 >> 2] = Math_fround($3_1 * Math_fround(!$0_1 | 0)) - Math_fround($3_1 * Math_fround($0_1 | 0));
  global$0 = $4_1 + 16 | 0;
 }
 
 function $168($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0);
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 124 >> 2]]($0_1, $4_1 + 32 | 0, $3_1);
  HEAP32[$1_1 + 12 >> 2] = 0;
  $5_1 = HEAPF32[$4_1 + 40 >> 2];
  HEAPF32[$1_1 + 8 >> 2] = $5_1;
  $6_1 = HEAPF32[$4_1 + 36 >> 2];
  HEAPF32[$1_1 + 4 >> 2] = $6_1;
  $7_1 = HEAPF32[$4_1 + 32 >> 2];
  HEAPF32[$1_1 >> 2] = $7_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAPF32[$4_1 + 8 >> 2] = -$5_1;
  HEAPF32[$4_1 + 4 >> 2] = -$6_1;
  HEAPF32[$4_1 >> 2] = -$7_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 64 >> 2]]($4_1 + 16 | 0, $0_1, $4_1);
  $1_1 = $4_1 + 24 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $2_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  $0_1 = HEAP32[$4_1 + 20 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 + 16 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $0_1;
  global$0 = $4_1 + 48 | 0;
 }
 
 function $169($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0;
  $3_1 = HEAPF32[$1_1 >> 2];
  $4_1 = HEAPF32[$0_1 + 32 >> 2];
  label$1 : {
   if (!($3_1 <= Math_fround($4_1 + $2_1))) {
    break label$1
   }
   if (!($3_1 >= Math_fround(Math_fround(-$4_1) - $2_1))) {
    break label$1
   }
   $3_1 = HEAPF32[$1_1 + 4 >> 2];
   $4_1 = HEAPF32[$0_1 + 36 >> 2];
   if (!($3_1 <= Math_fround($4_1 + $2_1))) {
    break label$1
   }
   if (!($3_1 >= Math_fround(Math_fround(-$4_1) - $2_1))) {
    break label$1
   }
   $3_1 = HEAPF32[$1_1 + 8 >> 2];
   $4_1 = HEAPF32[$0_1 + 40 >> 2];
   if (!($3_1 <= Math_fround($4_1 + $2_1))) {
    break label$1
   }
   $5_1 = $3_1 >= Math_fround(Math_fround(-$4_1) - $2_1);
  }
  return $5_1 | 0;
 }
 
 function $170($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  $6_1 = HEAPF32[$0_1 + 40 >> 2];
  $7_1 = HEAPF32[$0_1 + 36 >> 2];
  $3_1 = HEAPF32[$0_1 + 32 >> 2];
  $4_1 = Math_fround(1.0);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       switch ($2_1 | 0) {
       case 1:
        $4_1 = Math_fround(-1.0);
        break label$2;
       case 2:
        $5_1 = Math_fround(1.0);
        break label$3;
       case 3:
        $5_1 = Math_fround(-1.0);
        break label$3;
       case 4:
        $3_1 = Math_fround(1.0);
        break label$4;
       case 0:
        break label$2;
       case 5:
        break label$5;
       default:
        break label$1;
       };
      }
      $3_1 = Math_fround(-1.0);
     }
     $8_1 = $3_1;
     $4_1 = Math_fround(0.0);
     $3_1 = $6_1;
     break label$2;
    }
    $4_1 = Math_fround(0.0);
    $3_1 = $7_1;
   }
   HEAPF32[$1_1 + 8 >> 2] = $8_1;
   HEAPF32[$1_1 + 4 >> 2] = $5_1;
   HEAPF32[$1_1 >> 2] = $4_1;
   HEAPF32[$1_1 + 12 >> 2] = -$3_1;
  }
 }
 
 function $171($0_1, $1_1) {
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAP32[$0_1 + 28 >> 2] = 0;
  HEAPF32[$0_1 + 32 >> 2] = Math_abs(HEAPF32[$1_1 + 32 >> 2]);
  HEAPF32[$0_1 + 16 >> 2] = Math_abs(HEAPF32[$1_1 + 16 >> 2]);
  HEAPF32[$0_1 + 8 >> 2] = Math_abs(HEAPF32[$1_1 + 8 >> 2]);
  HEAPF32[$0_1 + 4 >> 2] = Math_abs(HEAPF32[$1_1 + 4 >> 2]);
  HEAPF32[$0_1 >> 2] = Math_abs(HEAPF32[$1_1 >> 2]);
  HEAPF32[$0_1 + 40 >> 2] = Math_abs(HEAPF32[$1_1 + 40 >> 2]);
  HEAPF32[$0_1 + 36 >> 2] = Math_abs(HEAPF32[$1_1 + 36 >> 2]);
  HEAPF32[$0_1 + 24 >> 2] = Math_abs(HEAPF32[$1_1 + 24 >> 2]);
  HEAPF32[$0_1 + 20 >> 2] = Math_abs(HEAPF32[$1_1 + 20 >> 2]);
 }
 
 function $172($0_1) {
  $0_1 = $0_1 | 0;
  $54($0_1);
 }
 
 function $173($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  $6_1 = $0_1 + 32 | 0;
  $0_1 = HEAP32[$0_1 + 56 >> 2];
  $5_1 = HEAPF32[$6_1 + (($0_1 + 2 | 0) % 3 << 2) >> 2];
  HEAPF32[$4_1 + 72 >> 2] = $5_1;
  HEAPF32[$4_1 + 68 >> 2] = $5_1;
  HEAPF32[$4_1 + 64 >> 2] = $5_1;
  $0_1 = $0_1 << 2;
  HEAPF32[$0_1 + ($4_1 - -64 | 0) >> 2] = $5_1 + HEAPF32[$0_1 + $6_1 >> 2];
  $171($4_1 + 16 | 0, $1_1);
  $5_1 = HEAPF32[$1_1 + 52 >> 2];
  $7_1 = HEAPF32[$1_1 + 56 >> 2];
  $8_1 = HEAPF32[$1_1 + 48 >> 2];
  $80($4_1, HEAPF32[$4_1 + 64 >> 2], HEAPF32[$4_1 + 68 >> 2], HEAPF32[$4_1 + 72 >> 2], HEAPF32[$4_1 + 16 >> 2], HEAPF32[$4_1 + 20 >> 2], HEAPF32[$4_1 + 24 >> 2], HEAPF32[$4_1 + 32 >> 2], HEAPF32[$4_1 + 36 >> 2], HEAPF32[$4_1 + 40 >> 2], HEAPF32[$4_1 + 48 >> 2], HEAPF32[$4_1 + 52 >> 2], HEAPF32[$4_1 + 56 >> 2]);
  HEAP32[$2_1 + 12 >> 2] = 0;
  $9_1 = HEAPF32[$4_1 + 8 >> 2];
  HEAPF32[$2_1 + 8 >> 2] = $7_1 - $9_1;
  $10_1 = HEAPF32[$4_1 + 4 >> 2];
  HEAPF32[$2_1 + 4 >> 2] = $5_1 - $10_1;
  $11_1 = HEAPF32[$4_1 >> 2];
  HEAPF32[$2_1 >> 2] = $8_1 - $11_1;
  HEAPF32[$3_1 >> 2] = $8_1 + $11_1;
  HEAPF32[$3_1 + 4 >> 2] = $5_1 + $10_1;
  HEAPF32[$3_1 + 8 >> 2] = $7_1 + $9_1;
  HEAP32[$3_1 + 12 >> 2] = 0;
  global$0 = $4_1 + 80 | 0;
 }
 
 function $174($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0);
  $4_1 = HEAPF32[$0_1 + 20 >> 2];
  $2_1 = $0_1 + 36 | 0;
  $5_1 = HEAPF32[$2_1 >> 2];
  $6_1 = HEAPF32[$0_1 + 24 >> 2];
  $3_1 = $0_1 + 40 | 0;
  $7_1 = HEAPF32[$3_1 >> 2];
  $8_1 = HEAPF32[$0_1 + 16 >> 2];
  $9_1 = HEAPF32[$0_1 + 32 >> 2];
  $87($0_1, $1_1);
  $10_1 = HEAPF32[$1_1 >> 2];
  $11_1 = HEAPF32[$1_1 + 4 >> 2];
  $12_1 = HEAPF32[$1_1 + 8 >> 2];
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAPF32[$3_1 >> 2] = $12_1 * Math_fround($7_1 / $6_1);
  HEAPF32[$2_1 >> 2] = $11_1 * Math_fround($5_1 / $4_1);
  HEAPF32[$0_1 + 32 >> 2] = $10_1 * Math_fround($9_1 / $8_1);
  HEAPF32[$0_1 + 48 >> 2] = HEAPF32[($0_1 + 32 | 0) + ((HEAP32[$0_1 + 56 >> 2] + 2 | 0) % 3 << 2) >> 2];
 }
 
 function $175($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0);
  $6_1 = $0_1 + 32 | 0;
  $5_1 = HEAP32[$0_1 + 56 >> 2];
  $3_1 = HEAPF32[$6_1 + (($5_1 + 2 | 0) % 3 << 2) >> 2];
  $0_1 = global$0 - 16 | 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 + 8 >> 2] = $3_1;
  HEAPF32[$0_1 + 4 >> 2] = $3_1;
  HEAPF32[$0_1 >> 2] = $3_1;
  $5_1 = $5_1 << 2;
  $7_1 = $5_1 + $0_1 | 0;
  HEAPF32[$7_1 >> 2] = HEAPF32[$5_1 + $6_1 >> 2] + HEAPF32[$7_1 >> 2];
  $1_1 = Math_fround($1_1 * Math_fround(.0833333283662796));
  $3_1 = HEAPF32[$0_1 >> 2];
  $3_1 = Math_fround($3_1 + $3_1);
  $3_1 = Math_fround($3_1 * $3_1);
  $4_1 = HEAPF32[$0_1 + 4 >> 2];
  $4_1 = Math_fround($4_1 + $4_1);
  $4_1 = Math_fround($4_1 * $4_1);
  HEAPF32[$2_1 + 8 >> 2] = $1_1 * Math_fround($3_1 + $4_1);
  $8_1 = $3_1;
  $3_1 = HEAPF32[$0_1 + 8 >> 2];
  $3_1 = Math_fround($3_1 + $3_1);
  $3_1 = Math_fround($3_1 * $3_1);
  HEAPF32[$2_1 + 4 >> 2] = $1_1 * Math_fround($8_1 + $3_1);
  HEAPF32[$2_1 >> 2] = $1_1 * Math_fround($4_1 + $3_1);
 }
 
 function $176($0_1) {
  $0_1 = $0_1 | 0;
  return 8311;
 }
 
 function $177($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $2_1 = $0_1 + 8 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[(HEAP32[$1_1 + 56 >> 2] << 2) + $0_1 >> 2] = 1065353216;
 }
 
 function $178($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
 }
 
 function $179($0_1) {
  $0_1 = $0_1 | 0;
  return 60;
 }
 
 function $180($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $159($0_1, $1_1, $2_1);
  $0_1 = HEAP32[$0_1 + 56 >> 2];
  HEAP32[$1_1 + 56 >> 2] = 0;
  HEAP32[$1_1 + 52 >> 2] = $0_1;
  return 8292;
 }
 
 function $181($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $9_1 = $0_1 + 8 | 0;
  HEAP32[$9_1 >> 2] = 0;
  HEAP32[$9_1 + 4 >> 2] = 0;
  $5_1 = HEAPF32[$2_1 >> 2];
  $3_1 = $5_1;
  $6_1 = Math_fround($3_1 * $3_1);
  $7_1 = HEAPF32[$2_1 + 4 >> 2];
  $3_1 = $7_1;
  $8_1 = Math_fround($6_1 + Math_fround($3_1 * $3_1));
  $6_1 = HEAPF32[$2_1 + 8 >> 2];
  $3_1 = $6_1;
  $3_1 = Math_fround($8_1 + Math_fround($3_1 * $3_1));
  label$1 : {
   if ($3_1 < Math_fround(9.999999747378752e-05)) {
    $6_1 = Math_fround(0.0);
    $3_1 = Math_fround(1.0);
    break label$1;
   }
   $3_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($3_1)));
   $6_1 = Math_fround($3_1 * $6_1);
   $11_1 = Math_fround($3_1 * $7_1);
   $3_1 = Math_fround($3_1 * $5_1);
  }
  $2_1 = $4_1 + 8 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $9_1 = HEAP32[$1_1 + 56 >> 2] << 2;
  $12_1 = $9_1 + $4_1 | 0;
  $8_1 = HEAPF32[($1_1 + $9_1 | 0) + 32 >> 2];
  HEAPF32[$12_1 >> 2] = $8_1;
  $5_1 = Math_fround(-999999984306749440.0);
  $10_1 = HEAPF32[$4_1 >> 2];
  $13_1 = HEAPF32[$4_1 + 4 >> 2];
  $14_1 = HEAPF32[$2_1 >> 2];
  $7_1 = Math_fround(Math_fround(Math_fround($10_1 * $3_1) + Math_fround($13_1 * $11_1)) + Math_fround($14_1 * $6_1));
  if ($7_1 > Math_fround(-999999984306749440.0)) {
   HEAPF32[$0_1 + 12 >> 2] = HEAPF32[$4_1 + 12 >> 2];
   HEAPF32[$0_1 + 8 >> 2] = $14_1;
   HEAPF32[$0_1 + 4 >> 2] = $13_1;
   HEAPF32[$0_1 >> 2] = $10_1;
   $5_1 = $7_1;
  }
  $1_1 = $4_1 + 8 | 0;
  $2_1 = $1_1;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAPF32[$12_1 >> 2] = -$8_1;
  $8_1 = $5_1;
  $10_1 = $3_1;
  $3_1 = HEAPF32[$4_1 >> 2];
  $5_1 = HEAPF32[$4_1 + 4 >> 2];
  $7_1 = HEAPF32[$2_1 >> 2];
  if ($8_1 < Math_fround(Math_fround(Math_fround($10_1 * $3_1) + Math_fround($11_1 * $5_1)) + Math_fround($6_1 * $7_1))) {
   HEAPF32[$0_1 + 12 >> 2] = HEAPF32[$4_1 + 12 >> 2];
   HEAPF32[$0_1 + 8 >> 2] = $7_1;
   HEAPF32[$0_1 + 4 >> 2] = $5_1;
   HEAPF32[$0_1 >> 2] = $3_1;
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $182($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19_1 = 0;
  $4_1 = global$0 - 16 | 0;
  $3_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  while (1) {
   if ($3_1) {
    $5_1 = $4_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$4_1 + 4 >> 2] = 0;
    $6_1 = HEAP32[$0_1 + 56 >> 2];
    $7_1 = $6_1 << 2;
    $8_1 = HEAPF32[($7_1 + $0_1 | 0) + 32 >> 2];
    HEAPF32[$4_1 + $7_1 >> 2] = $8_1;
    $9_1 = Math_fround(-999999984306749440.0);
    $11_1 = HEAPF32[$4_1 >> 2];
    $7_1 = $1_1 + $12_1 | 0;
    $13_1 = HEAPF32[$7_1 >> 2];
    $16_1 = HEAPF32[$4_1 + 4 >> 2];
    $17_1 = $7_1 + 4 | 0;
    $14_1 = HEAPF32[$17_1 >> 2];
    $18_1 = HEAPF32[$5_1 >> 2];
    $19_1 = $7_1 + 8 | 0;
    $15_1 = HEAPF32[$19_1 >> 2];
    $10_1 = Math_fround(Math_fround(Math_fround($11_1 * $13_1) + Math_fround($16_1 * $14_1)) + Math_fround($18_1 * $15_1));
    if ($10_1 > Math_fround(-999999984306749440.0)) {
     $6_1 = $2_1 + $12_1 | 0;
     HEAPF32[$6_1 >> 2] = $11_1;
     HEAPF32[$6_1 + 12 >> 2] = HEAPF32[$4_1 + 12 >> 2];
     HEAPF32[$6_1 + 8 >> 2] = $18_1;
     HEAPF32[$6_1 + 4 >> 2] = $16_1;
     $15_1 = HEAPF32[$19_1 >> 2];
     $14_1 = HEAPF32[$17_1 >> 2];
     $6_1 = HEAP32[$0_1 + 56 >> 2];
     $8_1 = HEAPF32[(($6_1 << 2) + $0_1 | 0) + 32 >> 2];
     $13_1 = HEAPF32[$7_1 >> 2];
     $9_1 = $10_1;
    }
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$4_1 + 4 >> 2] = 0;
    HEAPF32[($6_1 << 2) + $4_1 >> 2] = -$8_1;
    $11_1 = $9_1;
    $9_1 = HEAPF32[$4_1 >> 2];
    $10_1 = HEAPF32[$4_1 + 4 >> 2];
    $8_1 = HEAPF32[$5_1 >> 2];
    if ($11_1 < Math_fround(Math_fround(Math_fround($9_1 * $13_1) + Math_fround($10_1 * $14_1)) + Math_fround($8_1 * $15_1))) {
     $5_1 = $2_1 + $12_1 | 0;
     HEAPF32[$5_1 >> 2] = $9_1;
     HEAPF32[$5_1 + 12 >> 2] = HEAPF32[$4_1 + 12 >> 2];
     HEAPF32[$5_1 + 8 >> 2] = $8_1;
     HEAPF32[$5_1 + 4 >> 2] = $10_1;
    }
    $3_1 = $3_1 - 1 | 0;
    $12_1 = $12_1 + 16 | 0;
    continue;
   }
   break;
  };
 }
 
 function $183($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $153($4_1, $0_1);
  $3_1 = Math_fround($1_1 * Math_fround(.5));
  $5_1 = Math_fround($1_1 * Math_fround(.25));
  $1_1 = Math_fround($1_1 / Math_fround(12.0));
  $7_1 = 1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $0_1 = HEAP32[$0_1 + 56 >> 2];
      switch ($0_1 | 0) {
      case 0:
       break label$1;
      case 2:
       break label$4;
      default:
       break label$3;
      };
     }
     $8_1 = 2;
     break label$2;
    }
    $8_1 = 1;
   }
   $7_1 = 0;
  }
  $6_1 = $3_1;
  $3_1 = HEAPF32[($7_1 << 2 | $4_1) >> 2];
  $9_1 = Math_fround($3_1 * $3_1);
  $6_1 = Math_fround($6_1 * $9_1);
  $3_1 = $6_1;
  $10_1 = $1_1;
  $1_1 = HEAPF32[($8_1 << 2) + $4_1 >> 2];
  $1_1 = Math_fround(Math_fround($5_1 * $9_1) + Math_fround($10_1 * Math_fround($1_1 * Math_fround($1_1 * Math_fround(4.0)))));
  $5_1 = $1_1;
  label$5 : {
   label$6 : {
    switch ($0_1 | 0) {
    case 2:
     $3_1 = $1_1;
     $5_1 = $1_1;
     $1_1 = $6_1;
     break label$5;
    case 0:
     break label$5;
    default:
     break label$6;
    };
   }
   $3_1 = $1_1;
   $5_1 = $6_1;
  }
  HEAP32[$2_1 + 12 >> 2] = 0;
  HEAPF32[$2_1 + 8 >> 2] = $1_1;
  HEAPF32[$2_1 + 4 >> 2] = $5_1;
  HEAPF32[$2_1 >> 2] = $3_1;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $184($0_1) {
  $0_1 = $0_1 | 0;
  return 8480;
 }
 
 function $185($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $159($0_1, $1_1, $2_1);
  $0_1 = HEAP32[$0_1 + 56 >> 2];
  HEAP32[$1_1 + 56 >> 2] = 0;
  HEAP32[$1_1 + 52 >> 2] = $0_1;
  return 8460;
 }
 
 function $186($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0);
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 68 >> 2]]($3_1 + 16 | 0, $1_1, $2_1);
  $6_1 = $3_1 + 24 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $5_1 = $0_1 + 8 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $7_1;
  $5_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $5_1;
  if (Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1)) != Math_fround(0.0)) {
   $5_1 = $2_1 + 8 | 0;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $7_1;
   $5_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$3_1 + 16 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$3_1 + 20 >> 2] = $5_1;
   $4_1 = HEAPF32[$3_1 + 16 >> 2];
   $8_1 = Math_fround($4_1 * $4_1);
   $4_1 = HEAPF32[$3_1 + 20 >> 2];
   $8_1 = Math_fround($8_1 + Math_fround($4_1 * $4_1));
   $4_1 = HEAPF32[$6_1 >> 2];
   if (Math_fround($8_1 + Math_fround($4_1 * $4_1)) < Math_fround(1.4210854715202004e-14)) {
    HEAP32[$3_1 + 24 >> 2] = -1082130432;
    HEAP32[$3_1 + 28 >> 2] = 0;
    HEAP32[$3_1 + 16 >> 2] = -1082130432;
    HEAP32[$3_1 + 20 >> 2] = -1082130432;
   }
   $84($3_1 + 16 | 0);
   $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
   HEAP32[$3_1 + 12 >> 2] = 0;
   HEAPF32[$3_1 + 8 >> 2] = $4_1 * HEAPF32[$3_1 + 24 >> 2];
   HEAPF32[$3_1 + 4 >> 2] = $4_1 * HEAPF32[$3_1 + 20 >> 2];
   HEAPF32[$3_1 >> 2] = $4_1 * HEAPF32[$3_1 + 16 >> 2];
   $89($0_1, $3_1);
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $187($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $188($0_1, HEAPF32[$1_1 + 32 >> 2], HEAPF32[$1_1 + 36 >> 2], $2_1);
 }
 
 function $188($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0);
  $4_1 = HEAPF32[$3_1 >> 2];
  $5_1 = HEAPF32[$3_1 + 8 >> 2];
  $6_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1))));
  label$1 : {
   if ($6_1 != Math_fround(0.0)) {
    $1_1 = Math_fround($1_1 / $6_1);
    $7_1 = Math_fround($5_1 * $1_1);
    $1_1 = Math_fround($4_1 * $1_1);
    $2_1 = HEAPF32[$3_1 + 4 >> 2] < Math_fround(0.0) ? Math_fround(-$2_1) : $2_1;
    break label$1;
   }
   $2_1 = HEAPF32[$3_1 + 4 >> 2] < Math_fround(0.0) ? Math_fround(-$2_1) : $2_1;
  }
  HEAPF32[$0_1 + 8 >> 2] = $7_1;
  HEAPF32[$0_1 + 4 >> 2] = $2_1;
  HEAPF32[$0_1 >> 2] = $1_1;
 }
 
 function $189($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  $7_1 = $0_1 + 36 | 0;
  while (1) {
   if ($3_1) {
    $188($4_1, HEAPF32[$0_1 + 32 >> 2], HEAPF32[$7_1 >> 2], $1_1);
    $6_1 = $4_1 + 8 | 0;
    $8_1 = HEAP32[$6_1 + 4 >> 2];
    $5_1 = $2_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $8_1;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $5_1;
    $3_1 = $3_1 - 1 | 0;
    $2_1 = $2_1 + 16 | 0;
    $1_1 = $1_1 + 16 | 0;
    continue;
   } else {
    global$0 = $4_1 + 16 | 0
   }
   break;
  };
 }
 
 function $190($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $153($1_1, $0_1);
  global$0 = $1_1 + 16 | 0;
  return Math_fround(HEAPF32[$1_1 >> 2]);
 }
 
 function $191($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0);
  $4_1 = HEAP32[$0_1 + 72 >> 2] << 2;
  $2_1 = HEAPF32[$4_1 + $1_1 >> 2];
  $3_1 = $4_1;
  $4_1 = $0_1 + 16 | 0;
  $5_1 = Math_fround(HEAPF32[$0_1 + 64 >> 2] * Math_fround($2_1 / HEAPF32[$3_1 + $4_1 >> 2]));
  HEAPF32[$0_1 + 64 >> 2] = $5_1;
  $3_1 = HEAP32[$0_1 + 68 >> 2] << 2;
  $2_1 = Math_fround(HEAPF32[$3_1 + $1_1 >> 2] / HEAPF32[$4_1 + $3_1 >> 2]);
  $3_1 = HEAP32[$0_1 + 76 >> 2] << 2;
  $2_1 = Math_fround(HEAPF32[$0_1 + 60 >> 2] * Math_fround(Math_fround($2_1 + Math_fround(HEAPF32[$3_1 + $1_1 >> 2] / HEAPF32[$4_1 + $3_1 >> 2])) * Math_fround(.5)));
  HEAPF32[$0_1 + 60 >> 2] = $2_1;
  HEAPF32[$0_1 + 56 >> 2] = $2_1 / Math_fround(Math_sqrt(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($2_1 * $2_1))));
  $87($0_1, $1_1);
 }
 
 function $192($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  $4_1 = $3_1 + 44 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $3_1 + 56 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 52 >> 2] = 1065353216;
  $4_1 = $3_1 - -64 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $3_1 + 76 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 72 >> 2] = 1065353216;
  $4_1 = $3_1 + 84 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 92 >> 2] = 0;
  HEAP32[$3_1 + 36 >> 2] = 0;
  HEAP32[$3_1 + 40 >> 2] = 0;
  HEAP32[$3_1 + 32 >> 2] = 1065353216;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $3_1 + 32 | 0, $3_1 + 16 | 0, $3_1);
  $8_1 = HEAPF32[$3_1 + 24 >> 2];
  $9_1 = HEAPF32[$3_1 + 8 >> 2];
  $6_1 = HEAPF32[$3_1 + 16 >> 2];
  $7_1 = HEAPF32[$3_1 >> 2];
  $10_1 = HEAPF32[$3_1 + 20 >> 2];
  $11_1 = HEAPF32[$3_1 + 4 >> 2];
  $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  HEAP32[$2_1 + 12 >> 2] = 0;
  $1_1 = Math_fround($1_1 * Math_fround(.0833333283662796));
  $6_1 = Math_fround($5_1 + Math_fround(Math_fround($7_1 - $6_1) * Math_fround(.5)));
  $6_1 = Math_fround($6_1 + $6_1);
  $6_1 = Math_fround($6_1 * $6_1);
  $7_1 = Math_fround($5_1 + Math_fround(Math_fround($11_1 - $10_1) * Math_fround(.5)));
  $7_1 = Math_fround($7_1 + $7_1);
  $7_1 = Math_fround($7_1 * $7_1);
  HEAPF32[$2_1 + 8 >> 2] = $1_1 * Math_fround($6_1 + $7_1);
  $5_1 = Math_fround($5_1 + Math_fround(Math_fround($9_1 - $8_1) * Math_fround(.5)));
  $5_1 = Math_fround($5_1 + $5_1);
  $5_1 = Math_fround($5_1 * $5_1);
  HEAPF32[$2_1 + 4 >> 2] = $1_1 * Math_fround($6_1 + $5_1);
  HEAPF32[$2_1 >> 2] = $1_1 * Math_fround($7_1 + $5_1);
  global$0 = $3_1 + 96 | 0;
 }
 
 function $193($0_1) {
  $0_1 = $0_1 | 0;
  return 8636;
 }
 
 function $194($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 1065353216;
 }
 
 function $195($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $159($0_1, $1_1, $2_1);
  $0_1 = HEAP32[$0_1 + 72 >> 2];
  HEAP32[$1_1 + 56 >> 2] = 0;
  HEAP32[$1_1 + 52 >> 2] = $0_1;
  return 8620;
 }
 
 function $196($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $197($0_1, $1_1, $2_1);
  if (Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1)) != Math_fround(0.0)) {
   $7_1 = $2_1 + 8 | 0;
   $9_1 = HEAP32[$7_1 + 4 >> 2];
   $8_1 = $3_1 + 24 | 0;
   $5_1 = $8_1;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $9_1;
   $5_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$3_1 + 16 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$3_1 + 20 >> 2] = $5_1;
   $4_1 = HEAPF32[$3_1 + 16 >> 2];
   $6_1 = Math_fround($4_1 * $4_1);
   $4_1 = HEAPF32[$3_1 + 20 >> 2];
   $6_1 = Math_fround($6_1 + Math_fround($4_1 * $4_1));
   $4_1 = HEAPF32[$8_1 >> 2];
   if (Math_fround($6_1 + Math_fround($4_1 * $4_1)) < Math_fround(1.4210854715202004e-14)) {
    HEAP32[$3_1 + 24 >> 2] = -1082130432;
    HEAP32[$3_1 + 28 >> 2] = 0;
    HEAP32[$3_1 + 16 >> 2] = -1082130432;
    HEAP32[$3_1 + 20 >> 2] = -1082130432;
   }
   $84($3_1 + 16 | 0);
   $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
   HEAP32[$3_1 + 12 >> 2] = 0;
   HEAPF32[$3_1 + 8 >> 2] = $4_1 * HEAPF32[$3_1 + 24 >> 2];
   HEAPF32[$3_1 + 4 >> 2] = $4_1 * HEAPF32[$3_1 + 20 >> 2];
   HEAPF32[$3_1 >> 2] = $4_1 * HEAPF32[$3_1 + 16 >> 2];
   $89($0_1, $3_1);
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $197($0_1, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0);
  $4_1 = Math_fround(HEAPF32[$1_1 + 64 >> 2] * Math_fround(.5));
  $6_1 = HEAP32[$1_1 + 68 >> 2];
  $8_1 = HEAP32[$1_1 + 72 >> 2];
  $7_1 = $8_1 << 2;
  $3_1 = HEAPF32[$2_1 >> 2];
  $5_1 = Math_fround($3_1 * $3_1);
  $3_1 = HEAPF32[$2_1 + 4 >> 2];
  $5_1 = Math_fround($5_1 + Math_fround($3_1 * $3_1));
  $3_1 = HEAPF32[$2_1 + 8 >> 2];
  label$1 : {
   label$2 : {
    if (HEAPF32[$7_1 + $2_1 >> 2] > Math_fround(Math_fround(Math_sqrt(Math_fround($5_1 + Math_fround($3_1 * $3_1)))) * HEAPF32[$1_1 + 56 >> 2])) {
     HEAP32[($6_1 << 2) + $0_1 >> 2] = 0;
     HEAPF32[$0_1 + $7_1 >> 2] = $4_1;
     $2_1 = HEAP32[$1_1 + 76 >> 2];
     break label$2;
    }
    $3_1 = HEAPF32[($6_1 << 2) + $2_1 >> 2];
    $7_1 = $2_1;
    $2_1 = HEAP32[$1_1 + 76 >> 2];
    $9_1 = HEAPF32[$7_1 + ($2_1 << 2) >> 2];
    $10_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($3_1 * $3_1) + Math_fround($9_1 * $9_1))));
    if ($10_1 > Math_fround(1.1920928955078125e-07)) {
     $5_1 = $3_1;
     $3_1 = Math_fround(HEAPF32[$1_1 + 60 >> 2] / $10_1);
     HEAPF32[($6_1 << 2) + $0_1 >> 2] = $5_1 * $3_1;
     HEAPF32[($8_1 << 2) + $0_1 >> 2] = -$4_1;
     $4_1 = Math_fround($9_1 * $3_1);
     break label$1;
    }
    HEAP32[($6_1 << 2) + $0_1 >> 2] = 0;
    HEAPF32[($8_1 << 2) + $0_1 >> 2] = -$4_1;
   }
   $4_1 = Math_fround(0.0);
  }
  HEAPF32[($2_1 << 2) + $0_1 >> 2] = $4_1;
 }
 
 function $198($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $197($0_1, $1_1, $2_1);
 }
 
 function $199($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  while (1) {
   if ($3_1) {
    $197($4_1, $0_1, $1_1);
    $6_1 = $4_1 + 8 | 0;
    $7_1 = HEAP32[$6_1 + 4 >> 2];
    $5_1 = $2_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $7_1;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $5_1;
    $3_1 = $3_1 - 1 | 0;
    $2_1 = $2_1 + 16 | 0;
    $1_1 = $1_1 + 16 | 0;
    continue;
   } else {
    global$0 = $4_1 + 16 | 0
   }
   break;
  };
 }
 
 function $200($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  HEAP32[$2_1 + 8 >> 2] = -581039253;
  HEAP32[$2_1 + 12 >> 2] = 0;
  HEAP32[$2_1 >> 2] = -581039253;
  HEAP32[$2_1 + 4 >> 2] = -581039253;
  HEAP32[$3_1 + 8 >> 2] = 1566444395;
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAP32[$3_1 >> 2] = 1566444395;
  HEAP32[$3_1 + 4 >> 2] = 1566444395;
 }
 
 function $201($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 72 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 76 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 80 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $202($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 72 | 0;
 }
 
 function $203($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $0_1 = $2_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
 }
 
 function $204($0_1) {
  $0_1 = $0_1 | 0;
  return 8799;
 }
 
 function $205($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0_1 + 16 >> 2] = $1_1;
 }
 
 function $206($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[$0_1 + 16 >> 2]);
 }
 
 function $207($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0);
  $72($0_1, $1_1, $2_1);
  $65($0_1 + 72 | 0, $1_1 + 12 | 0);
  $65($0_1 + 52 | 0, $1_1 + 28 | 0);
  $3_1 = HEAPF32[$0_1 + 68 >> 2];
  HEAP32[$1_1 + 48 >> 2] = 0;
  HEAPF32[$1_1 + 44 >> 2] = $3_1;
  return 8776;
 }
 
 function $208($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  $6_1 = HEAPF32[$3_1 >> 2];
  $11_1 = HEAPF32[$2_1 >> 2];
  $5_1 = Math_fround(Math_fround($6_1 - $11_1) * Math_fround(.5));
  $9_1 = Math_fround($5_1 * $5_1);
  $7_1 = HEAPF32[$3_1 + 4 >> 2];
  $8_1 = HEAPF32[$2_1 + 4 >> 2];
  $5_1 = Math_fround(Math_fround($7_1 - $8_1) * Math_fround(.5));
  $10_1 = Math_fround($9_1 + Math_fround($5_1 * $5_1));
  $9_1 = HEAPF32[$3_1 + 8 >> 2];
  $14_1 = HEAPF32[$2_1 + 8 >> 2];
  $5_1 = Math_fround(Math_fround($9_1 - $14_1) * Math_fround(.5));
  $5_1 = Math_fround(Math_sqrt(Math_fround($10_1 + Math_fround($5_1 * $5_1))));
  $137($0_1 + 52 | 0, $4_1 - -64 | 0, $4_1 + 48 | 0);
  $12_1 = HEAPF32[$0_1 + 56 >> 2];
  $13_1 = HEAPF32[$0_1 + 60 >> 2];
  $15_1 = HEAPF32[$0_1 + 68 >> 2];
  $10_1 = HEAPF32[$0_1 + 52 >> 2];
  $0_1 = $4_1 + 44 | 0;
  HEAP32[$0_1 >> 2] = 0;
  $2_1 = $4_1 + 28 | 0;
  HEAP32[$2_1 >> 2] = 0;
  $11_1 = Math_fround(Math_fround($6_1 + $11_1) * Math_fround(.5));
  $7_1 = Math_fround(Math_fround($7_1 + $8_1) * Math_fround(.5));
  $8_1 = Math_fround(Math_fround($9_1 + $14_1) * Math_fround(.5));
  $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($10_1 * $11_1) + Math_fround($12_1 * $7_1)) + Math_fround($8_1 * $13_1)) - $15_1);
  $3_1 = $4_1 + 40 | 0;
  $8_1 = Math_fround($8_1 - Math_fround($13_1 * $6_1));
  $9_1 = Math_fround($5_1 * HEAPF32[$4_1 + 72 >> 2]);
  $14_1 = Math_fround($8_1 - $9_1);
  $13_1 = Math_fround($5_1 * HEAPF32[$4_1 + 56 >> 2]);
  $15_1 = Math_fround($14_1 - $13_1);
  HEAPF32[$3_1 >> 2] = $15_1;
  $16_1 = $4_1 + 36 | 0;
  $7_1 = Math_fround($7_1 - Math_fround($12_1 * $6_1));
  $17_1 = Math_fround($5_1 * HEAPF32[$4_1 + 68 >> 2]);
  $18_1 = Math_fround($7_1 - $17_1);
  $12_1 = Math_fround($5_1 * HEAPF32[$4_1 + 52 >> 2]);
  $19_1 = Math_fround($18_1 - $12_1);
  HEAPF32[$16_1 >> 2] = $19_1;
  $20_1 = $4_1 + 24 | 0;
  $8_1 = Math_fround($8_1 + $9_1);
  HEAPF32[$20_1 >> 2] = $8_1 - $13_1;
  $21_1 = $4_1 + 20 | 0;
  $7_1 = Math_fround($7_1 + $17_1);
  HEAPF32[$21_1 >> 2] = $7_1 - $12_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $6_1 = Math_fround($11_1 - Math_fround($10_1 * $6_1));
  $10_1 = Math_fround($5_1 * HEAPF32[$4_1 + 64 >> 2]);
  $11_1 = Math_fround($6_1 - $10_1);
  $5_1 = Math_fround($5_1 * HEAPF32[$4_1 + 48 >> 2]);
  $9_1 = Math_fround($11_1 - $5_1);
  HEAPF32[$4_1 + 32 >> 2] = $9_1;
  $6_1 = Math_fround($6_1 + $10_1);
  HEAPF32[$4_1 + 16 >> 2] = $6_1 - $5_1;
  $10_1 = Math_fround($8_1 + $13_1);
  HEAPF32[$4_1 + 8 >> 2] = $10_1;
  $7_1 = Math_fround($7_1 + $12_1);
  HEAPF32[$4_1 + 4 >> 2] = $7_1;
  $6_1 = Math_fround($6_1 + $5_1);
  HEAPF32[$4_1 >> 2] = $6_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $4_1, 0, 0);
  HEAP32[$0_1 >> 2] = 0;
  HEAPF32[$3_1 >> 2] = $10_1;
  HEAPF32[$16_1 >> 2] = $7_1;
  HEAP32[$2_1 >> 2] = 0;
  HEAPF32[$20_1 >> 2] = $14_1 + $13_1;
  HEAPF32[$21_1 >> 2] = $18_1 + $12_1;
  HEAPF32[$4_1 + 32 >> 2] = $6_1;
  HEAPF32[$4_1 + 16 >> 2] = $11_1 + $5_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAPF32[$4_1 + 8 >> 2] = $15_1;
  HEAPF32[$4_1 + 4 >> 2] = $19_1;
  HEAPF32[$4_1 >> 2] = $9_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $4_1, 0, 1);
  global$0 = $4_1 + 80 | 0;
 }
 
 function $209($0_1) {
  var $1_1 = 0;
  HEAP32[$0_1 + 16 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = -1;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 32 >> 2] = 0;
  HEAP8[$0_1 + 36 | 0] = 1;
  $1_1 = $0_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  return $0_1;
 }
 
 function $210($0_1) {
  $211($0_1);
  $57($0_1 + 20 | 0);
  return $0_1;
 }
 
 function $211($0_1) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2];
  if ($1_1) {
   $212($0_1, $1_1)
  }
  $54(HEAP32[$0_1 + 4 >> 2]);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = -1;
  $57($0_1 + 20 | 0);
  HEAP32[$0_1 + 16 >> 2] = 0;
 }
 
 function $212($0_1, $1_1) {
  if (HEAP32[$1_1 + 40 >> 2]) {
   $212($0_1, HEAP32[$1_1 + 36 >> 2]);
   $212($0_1, HEAP32[$1_1 + 40 >> 2]);
  }
  if (HEAP32[$0_1 >> 2] == ($1_1 | 0)) {
   HEAP32[$0_1 >> 2] = 0
  }
  $213($0_1, $1_1);
 }
 
 function $213($0_1, $1_1) {
  $54(HEAP32[$0_1 + 4 >> 2]);
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $214($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0;
  $12_1 = global$0 - 32 | 0;
  global$0 = $12_1;
  $1_1 = ($1_1 | 0) <= -1 ? HEAP32[$0_1 + 12 >> 2] : $1_1;
  label$2 : {
   if (($1_1 | 0) < 1) {
    break label$2
   }
   if (!HEAP32[$0_1 >> 2]) {
    break label$2
   }
   while (1) {
    $9_1 = 0;
    $2_1 = $0_1;
    while (1) {
     $2_1 = HEAP32[$2_1 >> 2];
     if (HEAP32[$2_1 + 40 >> 2]) {
      $4_1 = HEAP32[$2_1 + 32 >> 2];
      label$6 : {
       if ($2_1 >>> 0 >= $4_1 >>> 0) {
        $4_1 = $2_1;
        break label$6;
       }
       $3_1 = HEAP32[$4_1 + 40 >> 2];
       $5_1 = ($3_1 | 0) == ($2_1 | 0);
       $8_1 = (($2_1 | 0) != ($3_1 | 0)) << 2;
       $7_1 = HEAP32[($8_1 + $4_1 | 0) + 36 >> 2];
       $6_1 = HEAP32[$4_1 + 32 >> 2];
       $3_1 = $0_1;
       label$8 : {
        if (!$6_1) {
         break label$8
        }
        $3_1 = ($6_1 + ((HEAP32[$6_1 + 40 >> 2] == ($4_1 | 0)) << 2) | 0) + 36 | 0;
       }
       HEAP32[$3_1 >> 2] = $2_1;
       HEAP32[$7_1 + 32 >> 2] = $2_1;
       HEAP32[$4_1 + 32 >> 2] = $2_1;
       HEAP32[$2_1 + 32 >> 2] = $6_1;
       HEAP32[$4_1 + 36 >> 2] = HEAP32[$2_1 + 36 >> 2];
       HEAP32[$4_1 + 40 >> 2] = HEAP32[$2_1 + 40 >> 2];
       HEAP32[HEAP32[$2_1 + 36 >> 2] + 32 >> 2] = $4_1;
       HEAP32[HEAP32[$2_1 + 40 >> 2] + 32 >> 2] = $4_1;
       $3_1 = $2_1 + 36 | 0;
       HEAP32[$3_1 + ($5_1 << 2) >> 2] = $4_1;
       HEAP32[$3_1 + $8_1 >> 2] = $7_1;
       $3_1 = $4_1 + 24 | 0;
       $8_1 = HEAP32[$3_1 >> 2];
       $13_1 = HEAP32[$3_1 + 4 >> 2];
       $6_1 = $2_1 + 24 | 0;
       $5_1 = HEAP32[$6_1 + 4 >> 2];
       HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $5_1;
       $3_1 = $4_1 + 16 | 0;
       $14_1 = HEAP32[$3_1 >> 2];
       $15_1 = HEAP32[$3_1 + 4 >> 2];
       $7_1 = $2_1 + 16 | 0;
       $5_1 = $7_1;
       $10_1 = HEAP32[$5_1 + 4 >> 2];
       HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $10_1;
       $3_1 = $4_1 + 8 | 0;
       $10_1 = HEAP32[$3_1 >> 2];
       $16_1 = HEAP32[$3_1 + 4 >> 2];
       $5_1 = $2_1 + 8 | 0;
       $11_1 = HEAP32[$5_1 + 4 >> 2];
       HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $11_1;
       $3_1 = HEAP32[$4_1 >> 2];
       $17_1 = HEAP32[$4_1 + 4 >> 2];
       $11_1 = HEAP32[$2_1 + 4 >> 2];
       HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
       HEAP32[$4_1 + 4 >> 2] = $11_1;
       HEAP32[$2_1 >> 2] = $3_1;
       HEAP32[$2_1 + 4 >> 2] = $17_1;
       HEAP32[$6_1 >> 2] = $8_1;
       HEAP32[$6_1 + 4 >> 2] = $13_1;
       HEAP32[$7_1 >> 2] = $14_1;
       HEAP32[$7_1 + 4 >> 2] = $15_1;
       HEAP32[$5_1 >> 2] = $10_1;
       HEAP32[$5_1 + 4 >> 2] = $16_1;
      }
      $2_1 = (((HEAP32[$0_1 + 16 >> 2] >>> $9_1 & 1) << 2) + $4_1 | 0) + 36 | 0;
      $9_1 = $9_1 + 1 & 31;
      continue;
     }
     break;
    };
    $7_1 = $0_1;
    $4_1 = 0;
    label$9 : {
     if (!$215($0_1, $2_1)) {
      break label$9
     }
     $4_1 = HEAP32[$0_1 >> 2];
    }
    $216($7_1, $4_1, $2_1);
    HEAP32[$0_1 + 16 >> 2] = HEAP32[$0_1 + 16 >> 2] + 1;
    $1_1 = $1_1 - 1 | 0;
    if ($1_1) {
     continue
    }
    break;
   };
  }
  global$0 = $12_1 + 32 | 0;
 }
 
 function $215($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0);
  if (HEAP32[$0_1 >> 2] == ($1_1 | 0)) {
   HEAP32[$0_1 >> 2] = 0;
   return 0;
  }
  $2_1 = HEAP32[$1_1 + 32 >> 2];
  $3_1 = HEAP32[($2_1 + ((HEAP32[$2_1 + 40 >> 2] != ($1_1 | 0)) << 2) | 0) + 36 >> 2];
  $1_1 = HEAP32[$2_1 + 32 >> 2];
  label$2 : {
   label$3 : {
    if ($1_1) {
     HEAP32[(((HEAP32[$1_1 + 40 >> 2] == ($2_1 | 0)) << 2) + $1_1 | 0) + 36 >> 2] = $3_1;
     HEAP32[$3_1 + 32 >> 2] = $1_1;
     $213($0_1, $2_1);
     while (1) {
      if (!$1_1) {
       break label$3
      }
      $4_1 = HEAPF32[$1_1 + 24 >> 2];
      $5_1 = HEAPF32[$1_1 + 20 >> 2];
      $6_1 = HEAPF32[$1_1 + 16 >> 2];
      $7_1 = HEAPF32[$1_1 + 8 >> 2];
      $8_1 = HEAPF32[$1_1 + 4 >> 2];
      $9_1 = HEAPF32[$1_1 >> 2];
      $217(HEAP32[$1_1 + 36 >> 2], HEAP32[$1_1 + 40 >> 2], $1_1);
      label$6 : {
       if (HEAPF32[$1_1 >> 2] != $9_1) {
        break label$6
       }
       if (HEAPF32[$1_1 + 4 >> 2] != $8_1) {
        break label$6
       }
       if (HEAPF32[$1_1 + 8 >> 2] != $7_1) {
        break label$6
       }
       if (HEAPF32[$1_1 + 16 >> 2] != $6_1) {
        break label$6
       }
       if (HEAPF32[$1_1 + 20 >> 2] != $5_1) {
        break label$6
       }
       if (HEAPF32[$1_1 + 24 >> 2] == $4_1) {
        break label$2
       }
      }
      $1_1 = HEAP32[$1_1 + 32 >> 2];
      continue;
     };
    }
    HEAP32[$3_1 + 32 >> 2] = 0;
    HEAP32[$0_1 >> 2] = $3_1;
    $213($0_1, $2_1);
   }
   $1_1 = HEAP32[$0_1 >> 2];
  }
  return $1_1;
 }
 
 function $216($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  if (!HEAP32[$0_1 >> 2]) {
   HEAP32[$2_1 + 32 >> 2] = 0;
   HEAP32[$0_1 >> 2] = $2_1;
   return;
  }
  $3_1 = HEAP32[$1_1 + 40 >> 2];
  if ($3_1) {
   while (1) {
    $1_1 = HEAP32[($1_1 + 36 | 0) + (!($218($2_1, HEAP32[$1_1 + 36 >> 2]) < $218($2_1, $3_1)) << 2) >> 2];
    $3_1 = HEAP32[$1_1 + 40 >> 2];
    if ($3_1) {
     continue
    }
    break;
   }
  }
  $4_1 = HEAP32[$1_1 + 32 >> 2];
  $3_1 = $219($0_1, $4_1, 0);
  $217($2_1, $1_1, $3_1);
  label$4 : {
   if ($4_1) {
    HEAP32[(((HEAP32[HEAP32[$1_1 + 32 >> 2] + 40 >> 2] == ($1_1 | 0)) << 2) + $4_1 | 0) + 36 >> 2] = $3_1;
    HEAP32[$3_1 + 36 >> 2] = $1_1;
    HEAP32[$1_1 + 32 >> 2] = $3_1;
    HEAP32[$3_1 + 40 >> 2] = $2_1;
    HEAP32[$2_1 + 32 >> 2] = $3_1;
    while (1) {
     $0_1 = $4_1;
     if ($220($0_1, $3_1)) {
      break label$4
     }
     $217(HEAP32[$0_1 + 36 >> 2], HEAP32[$0_1 + 40 >> 2], $0_1);
     $3_1 = $0_1;
     $4_1 = HEAP32[$3_1 + 32 >> 2];
     if ($4_1) {
      continue
     }
     break;
    };
    break label$4;
   }
   HEAP32[$3_1 + 36 >> 2] = $1_1;
   HEAP32[$1_1 + 32 >> 2] = $3_1;
   HEAP32[$3_1 + 40 >> 2] = $2_1;
   HEAP32[$0_1 >> 2] = $3_1;
   HEAP32[$2_1 + 32 >> 2] = $3_1;
  }
 }
 
 function $217($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8_1 = 0;
  while (1) {
   if (($3_1 | 0) != 12) {
    $6_1 = $2_1 + $3_1 | 0;
    $7_1 = $0_1 + $3_1 | 0;
    $4_1 = HEAPF32[$7_1 >> 2];
    $8_1 = $1_1 + $3_1 | 0;
    $5_1 = HEAPF32[$8_1 >> 2];
    HEAPF32[$6_1 >> 2] = $4_1 < $5_1 ? $4_1 : $5_1;
    $4_1 = HEAPF32[$7_1 + 16 >> 2];
    $5_1 = HEAPF32[$8_1 + 16 >> 2];
    HEAPF32[$6_1 + 16 >> 2] = $4_1 > $5_1 ? $4_1 : $5_1;
    $3_1 = $3_1 + 4 | 0;
    continue;
   }
   break;
  };
 }
 
 function $218($0_1, $1_1) {
  return Math_fround(Math_fround(Math_fround(Math_abs(Math_fround(Math_fround(HEAPF32[$0_1 >> 2] + HEAPF32[$0_1 + 16 >> 2]) - Math_fround(HEAPF32[$1_1 >> 2] + HEAPF32[$1_1 + 16 >> 2])))) + Math_fround(Math_abs(Math_fround(Math_fround(HEAPF32[$0_1 + 4 >> 2] + HEAPF32[$0_1 + 20 >> 2]) - Math_fround(HEAPF32[$1_1 + 4 >> 2] + HEAPF32[$1_1 + 20 >> 2]))))) + Math_fround(Math_abs(Math_fround(Math_fround(HEAPF32[$0_1 + 8 >> 2] + HEAPF32[$0_1 + 24 >> 2]) - Math_fround(HEAPF32[$1_1 + 8 >> 2] + HEAPF32[$1_1 + 24 >> 2])))));
 }
 
 function $219($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = HEAP32[$0_1 + 4 >> 2];
  label$1 : {
   if ($3_1) {
    HEAP32[$0_1 + 4 >> 2] = 0;
    break label$1;
   }
   $3_1 = $53(44);
   $1($3_1, 0, 44);
  }
  HEAP32[$3_1 + 36 >> 2] = $2_1;
  HEAP32[$3_1 + 32 >> 2] = $1_1;
  HEAP32[$3_1 + 40 >> 2] = 0;
  return $3_1;
 }
 
 function $220($0_1, $1_1) {
  var $2_1 = 0;
  label$1 : {
   if (!(HEAPF32[$0_1 >> 2] <= HEAPF32[$1_1 >> 2])) {
    break label$1
   }
   if (!(HEAPF32[$0_1 + 4 >> 2] <= HEAPF32[$1_1 + 4 >> 2])) {
    break label$1
   }
   if (!(HEAPF32[$0_1 + 8 >> 2] <= HEAPF32[$1_1 + 8 >> 2])) {
    break label$1
   }
   if (!(HEAPF32[$0_1 + 16 >> 2] >= HEAPF32[$1_1 + 16 >> 2])) {
    break label$1
   }
   if (!(HEAPF32[$0_1 + 20 >> 2] >= HEAPF32[$1_1 + 20 >> 2])) {
    break label$1
   }
   $2_1 = HEAPF32[$0_1 + 24 >> 2] >= HEAPF32[$1_1 + 24 >> 2];
  }
  return $2_1;
 }
 
 function $221($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = $219($0_1, 0, $2_1);
  $3_1 = $2_1 + 24 | 0;
  $4_1 = $1_1 + 24 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $5_1;
  $4_1 = $1_1 + 16 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $3_1 = $2_1 + 16 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $5_1;
  $4_1 = $1_1 + 8 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $3_1 = $2_1 + 8 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $5_1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $216($0_1, HEAP32[$0_1 >> 2], $2_1);
  HEAP32[$0_1 + 12 >> 2] = HEAP32[$0_1 + 12 >> 2] + 1;
  return $2_1;
 }
 
 function $222($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = $215($0_1, $1_1);
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   $5_1 = HEAP32[$0_1 + 8 >> 2];
   if (($5_1 | 0) >= 0) {
    $4_1 = $5_1 + 1 | 0;
    while (1) {
     $5_1 = $3_1;
     $4_1 = $4_1 - 1 | 0;
     if (!$4_1) {
      break label$1
     }
     $3_1 = HEAP32[$5_1 + 32 >> 2];
     if ($3_1) {
      continue
     }
     break;
    };
    break label$1;
   }
   $5_1 = HEAP32[$0_1 >> 2];
  }
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  $4_1 = $2_1 + 24 | 0;
  $3_1 = HEAP32[$4_1 + 4 >> 2];
  $6_1 = $1_1 + 24 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $3_1;
  $4_1 = $2_1 + 16 | 0;
  $3_1 = HEAP32[$4_1 + 4 >> 2];
  $6_1 = $1_1 + 16 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $3_1;
  $3_1 = $2_1 + 8 | 0;
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  $4_1 = $1_1 + 8 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  $216($0_1, $5_1, $1_1);
 }
 
 function $223($0_1, $1_1) {
  $215($0_1, $1_1);
  $213($0_1, $1_1);
  HEAP32[$0_1 + 12 >> 2] = HEAP32[$0_1 + 12 >> 2] - 1;
 }
 
 function $224($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  if (($2_1 | 0) == HEAP32[$0_1 + 8 >> 2]) {
   $145($0_1, $2_1 ? $2_1 << 1 : 1);
   $2_1 = HEAP32[$0_1 + 4 >> 2];
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1 + 1;
  HEAP32[HEAP32[$0_1 + 12 >> 2] + ($2_1 << 2) >> 2] = HEAP32[$1_1 >> 2];
 }
 
 function $225($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]]($0_1, $1_1);
 }
 
 function $226($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 1;
 }
 
 function $227($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $11_1 = $53(Math_imul($1_1, 80))
   }
   $4_1 = HEAP32[$0_1 + 4 >> 2];
   $9_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
   $8_1 = 64;
   while (1) {
    if ($9_1) {
     $6_1 = HEAP32[$0_1 + 12 >> 2] + $8_1 | 0;
     $2_1 = $6_1 + -64 | 0;
     $7_1 = HEAP32[$2_1 + 4 >> 2];
     $4_1 = $8_1 + $11_1 | 0;
     $3_1 = $4_1 + -64 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $7_1;
     $2_1 = $2_1 + 8 | 0;
     $5_1 = HEAP32[$2_1 + 4 >> 2];
     $3_1 = $3_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $3_1 = $6_1 - 48 | 0;
     $7_1 = $3_1 + 8 | 0;
     $10_1 = HEAP32[$7_1 + 4 >> 2];
     $2_1 = $4_1 - 48 | 0;
     $5_1 = $2_1 + 8 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $10_1;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $5_1;
     $3_1 = $6_1 - 32 | 0;
     $7_1 = $3_1 + 8 | 0;
     $10_1 = HEAP32[$7_1 + 4 >> 2];
     $2_1 = $4_1 - 32 | 0;
     $5_1 = $2_1 + 8 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $10_1;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $5_1;
     $2_1 = $6_1 - 16 | 0;
     $7_1 = HEAP32[$2_1 + 4 >> 2];
     $3_1 = $4_1 - 16 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $7_1;
     $2_1 = $2_1 + 8 | 0;
     $5_1 = HEAP32[$2_1 + 4 >> 2];
     $3_1 = $3_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $2_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $2_1;
     $6_1 = $6_1 + 8 | 0;
     $2_1 = HEAP32[$6_1 + 4 >> 2];
     $4_1 = $4_1 + 8 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $2_1;
     $9_1 = $9_1 - 1 | 0;
     $8_1 = $8_1 + 80 | 0;
     continue;
    }
    break;
   };
   $96($0_1);
   HEAP32[$0_1 + 12 >> 2] = $11_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $228($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 8868;
  $1_1 = HEAP32[$0_1 + 68 >> 2];
  if ($1_1) {
   $210($1_1);
   $54(HEAP32[$0_1 + 68 >> 2]);
  }
  $57($0_1 + 176 | 0);
  $57($0_1 + 156 | 0);
  $57($0_1 + 136 | 0);
  $57($0_1 + 116 | 0);
  $57($0_1 + 96 | 0);
  $96($0_1 + 16 | 0);
  HEAP32[$0_1 + 28 >> 2] = 0;
  HEAP8[$0_1 + 32 | 0] = 1;
  $1_1 = $0_1 + 20 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $229($0_1) {
  $0_1 = $0_1 | 0;
  $54($228($0_1));
 }
 
 function $230($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0);
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  label$1 : {
   if (HEAP32[$0_1 + 20 >> 2]) {
    $5_1 = HEAPF32[$0_1 + 60 >> 2];
    $7_1 = HEAPF32[$0_1 + 44 >> 2];
    $9_1 = Math_fround(Math_fround($5_1 + $7_1) * Math_fround(.5));
    $8_1 = HEAPF32[$0_1 + 56 >> 2];
    $6_1 = HEAPF32[$0_1 + 40 >> 2];
    $10_1 = Math_fround(Math_fround($8_1 + $6_1) * Math_fround(.5));
    $7_1 = Math_fround(Math_fround($5_1 - $7_1) * Math_fround(.5));
    $8_1 = Math_fround(Math_fround($8_1 - $6_1) * Math_fround(.5));
    $5_1 = HEAPF32[$0_1 + 52 >> 2];
    $6_1 = HEAPF32[$0_1 + 36 >> 2];
    $11_1 = Math_fround(Math_fround($5_1 + $6_1) * Math_fround(.5));
    $5_1 = Math_fround(Math_fround($5_1 - $6_1) * Math_fround(.5));
    break label$1;
   }
   $5_1 = Math_fround(0.0);
  }
  $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $12_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $13_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $171($4_1 + 32 | 0, $1_1);
  $78($4_1 + 16 | 0, $1_1, $11_1, $10_1, $9_1);
  $80($4_1, Math_fround($6_1 + $5_1), Math_fround($12_1 + $8_1), Math_fround($13_1 + $7_1), HEAPF32[$4_1 + 32 >> 2], HEAPF32[$4_1 + 36 >> 2], HEAPF32[$4_1 + 40 >> 2], HEAPF32[$4_1 + 48 >> 2], HEAPF32[$4_1 + 52 >> 2], HEAPF32[$4_1 + 56 >> 2], HEAPF32[$4_1 + 64 >> 2], HEAPF32[$4_1 + 68 >> 2], HEAPF32[$4_1 + 72 >> 2]);
  HEAP32[$2_1 + 12 >> 2] = 0;
  $5_1 = HEAPF32[$4_1 + 24 >> 2];
  $7_1 = HEAPF32[$4_1 + 8 >> 2];
  HEAPF32[$2_1 + 8 >> 2] = $5_1 - $7_1;
  $9_1 = HEAPF32[$4_1 + 20 >> 2];
  $8_1 = HEAPF32[$4_1 + 4 >> 2];
  HEAPF32[$2_1 + 4 >> 2] = $9_1 - $8_1;
  $6_1 = HEAPF32[$4_1 + 16 >> 2];
  $10_1 = HEAPF32[$4_1 >> 2];
  HEAPF32[$2_1 >> 2] = $6_1 - $10_1;
  HEAPF32[$3_1 >> 2] = $6_1 + $10_1;
  HEAPF32[$3_1 + 4 >> 2] = $9_1 + $8_1;
  HEAPF32[$3_1 + 8 >> 2] = $5_1 + $7_1;
  HEAP32[$3_1 + 12 >> 2] = 0;
  global$0 = $4_1 + 80 | 0;
 }
 
 function $231($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  $9_1 = $4_1 - -64 | 0;
  $10_1 = $4_1 + 48 | 0;
  $11_1 = $4_1 + 32 | 0;
  $8_1 = 64;
  while (1) {
   if (HEAP32[$0_1 + 20 >> 2] <= ($12_1 | 0)) {
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$0_1 + 80 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 84 >> 2] = $2_1;
    $2_1 = $1_1 + 8 | 0;
    $1_1 = HEAP32[$2_1 + 4 >> 2];
    $3_1 = $0_1 + 88 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $1_1;
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 68 >> 2]]($0_1);
    global$0 = $4_1 + 80 | 0;
   } else {
    $7_1 = HEAP32[$0_1 + 28 >> 2] + $8_1 | 0;
    $6_1 = $7_1 + -64 | 0;
    $3_1 = $6_1 + 8 | 0;
    $2_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = $4_1 + 24 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $2_1;
    $2_1 = HEAP32[$6_1 + 4 >> 2];
    HEAP32[$4_1 + 16 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$4_1 + 20 >> 2] = $2_1;
    $6_1 = $7_1 - 48 | 0;
    $3_1 = $6_1 + 8 | 0;
    $2_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = $11_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $2_1;
    $2_1 = HEAP32[$6_1 + 4 >> 2];
    HEAP32[$11_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$11_1 + 4 >> 2] = $2_1;
    $3_1 = $7_1 - 32 | 0;
    $2_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$10_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$10_1 + 4 >> 2] = $2_1;
    $3_1 = $3_1 + 8 | 0;
    $2_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = $10_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $2_1;
    $3_1 = $7_1 - 16 | 0;
    $2_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$9_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$9_1 + 4 >> 2] = $2_1;
    $3_1 = $3_1 + 8 | 0;
    $2_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = $9_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $2_1;
    $2_1 = HEAP32[$7_1 >> 2];
    $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1) | 0;
    $3_1 = $6_1 + 8 | 0;
    $2_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = $4_1 + 8 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $2_1;
    $3_1 = HEAP32[$6_1 + 4 >> 2];
    $2_1 = HEAP32[$6_1 >> 2];
    HEAPF32[$5_1 >> 2] = Math_fround(HEAPF32[$5_1 >> 2] * HEAPF32[$1_1 + 8 >> 2]) / HEAPF32[$0_1 + 88 >> 2];
    HEAP32[$4_1 >> 2] = $2_1;
    HEAP32[$4_1 + 4 >> 2] = $3_1;
    HEAP32[$4_1 + 12 >> 2] = 0;
    HEAPF32[$4_1 >> 2] = Math_fround(HEAPF32[$4_1 >> 2] * HEAPF32[$1_1 >> 2]) / HEAPF32[$0_1 + 80 >> 2];
    HEAPF32[$4_1 + 4 >> 2] = Math_fround(HEAPF32[$4_1 + 4 >> 2] * HEAPF32[$1_1 + 4 >> 2]) / HEAPF32[$0_1 + 84 >> 2];
    $2_1 = HEAP32[HEAP32[$0_1 + 28 >> 2] + $8_1 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 24 >> 2]]($2_1, $4_1);
    HEAP32[$4_1 + 76 >> 2] = 0;
    HEAPF32[$4_1 + 72 >> 2] = Math_fround(HEAPF32[$4_1 + 72 >> 2] * HEAPF32[$1_1 + 8 >> 2]) / HEAPF32[$0_1 + 88 >> 2];
    HEAPF32[$4_1 + 68 >> 2] = Math_fround(HEAPF32[$4_1 + 68 >> 2] * HEAPF32[$1_1 + 4 >> 2]) / HEAPF32[$0_1 + 84 >> 2];
    HEAPF32[$4_1 + 64 >> 2] = Math_fround(HEAPF32[$4_1 + 64 >> 2] * HEAPF32[$1_1 >> 2]) / HEAPF32[$0_1 + 80 >> 2];
    $232($0_1, $12_1, $4_1 + 16 | 0, 0);
    $8_1 = $8_1 + 80 | 0;
    $12_1 = $12_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $232($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $5_1 = global$0 + -64 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$2_1 + 4 >> 2];
  $8_1 = Math_imul($1_1, 80);
  $1_1 = $8_1 + HEAP32[$0_1 + 28 >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $6_1;
  $6_1 = $2_1 + 8 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $1_1 + 8 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $6_1 = $2_1 + 24 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $1_1 + 24 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $4_1 = HEAP32[$2_1 + 20 >> 2];
  HEAP32[$1_1 + 16 >> 2] = HEAP32[$2_1 + 16 >> 2];
  HEAP32[$1_1 + 20 >> 2] = $4_1;
  $6_1 = $2_1 + 40 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $1_1 + 40 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $4_1 = HEAP32[$2_1 + 36 >> 2];
  HEAP32[$1_1 + 32 >> 2] = HEAP32[$2_1 + 32 >> 2];
  HEAP32[$1_1 + 36 >> 2] = $4_1;
  $6_1 = $2_1 + 56 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $1_1 + 56 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $4_1 = HEAP32[$2_1 + 52 >> 2];
  HEAP32[$1_1 + 48 >> 2] = HEAP32[$2_1 + 48 >> 2];
  HEAP32[$1_1 + 52 >> 2] = $4_1;
  if (HEAP32[$0_1 + 68 >> 2]) {
   $1_1 = HEAP32[(HEAP32[$0_1 + 28 >> 2] + $8_1 | 0) + 64 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $2_1, $5_1 + 48 | 0, $5_1 + 32 | 0);
   $2_1 = $5_1 + 56 | 0;
   $4_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $5_1 + 8 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $4_1;
   $2_1 = $5_1 + 40 | 0;
   $4_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $5_1 + 24 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $4_1;
   $1_1 = HEAP32[$5_1 + 52 >> 2];
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 + 48 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $1_1;
   $1_1 = HEAP32[$5_1 + 36 >> 2];
   HEAP32[$5_1 + 16 >> 2] = HEAP32[$5_1 + 32 >> 2];
   HEAP32[$5_1 + 20 >> 2] = $1_1;
   $222(HEAP32[$0_1 + 68 >> 2], HEAP32[(HEAP32[$0_1 + 28 >> 2] + $8_1 | 0) + 76 >> 2], $5_1);
  }
  if ($3_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 68 >> 2]]($0_1)
  }
  global$0 = $5_1 - -64 | 0;
 }
 
 function $233($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 80 | 0;
 }
 
 function $234($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0);
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  $5_1 = $3_1 + 44 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $3_1 + 56 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 52 >> 2] = 1065353216;
  $5_1 = $3_1 - -64 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $3_1 + 76 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 72 >> 2] = 1065353216;
  $5_1 = $3_1 + 84 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 92 >> 2] = 0;
  HEAP32[$3_1 + 36 >> 2] = 0;
  HEAP32[$3_1 + 40 >> 2] = 0;
  HEAP32[$3_1 + 32 >> 2] = 1065353216;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $3_1 + 32 | 0, $3_1 + 16 | 0, $3_1);
  $1_1 = Math_fround($1_1 / Math_fround(12.0));
  $4_1 = Math_fround(Math_fround(HEAPF32[$3_1 >> 2] - HEAPF32[$3_1 + 16 >> 2]) * Math_fround(.5));
  $4_1 = Math_fround($4_1 + $4_1);
  $4_1 = Math_fround($4_1 * $4_1);
  $6_1 = Math_fround(Math_fround(HEAPF32[$3_1 + 4 >> 2] - HEAPF32[$3_1 + 20 >> 2]) * Math_fround(.5));
  $6_1 = Math_fround($6_1 + $6_1);
  $6_1 = Math_fround($6_1 * $6_1);
  HEAPF32[$2_1 + 8 >> 2] = $1_1 * Math_fround($4_1 + $6_1);
  $7_1 = $4_1;
  $4_1 = Math_fround(Math_fround(HEAPF32[$3_1 + 8 >> 2] - HEAPF32[$3_1 + 24 >> 2]) * Math_fround(.5));
  $4_1 = Math_fround($4_1 + $4_1);
  $4_1 = Math_fround($4_1 * $4_1);
  HEAPF32[$2_1 + 4 >> 2] = $1_1 * Math_fround($7_1 + $4_1);
  HEAPF32[$2_1 >> 2] = $1_1 * Math_fround($6_1 + $4_1);
  global$0 = $3_1 + 96 | 0;
 }
 
 function $235($0_1) {
  $0_1 = $0_1 | 0;
  return 8997;
 }
 
 function $236($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0_1 + 76 >> 2] = $1_1;
 }
 
 function $237($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[$0_1 + 76 >> 2]);
 }
 
 function $238($0_1) {
  $0_1 = $0_1 | 0;
  return 24;
 }
 
 function $239($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $72($0_1, $1_1, $2_1);
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAPF32[$1_1 + 20 >> 2] = HEAPF32[$0_1 + 76 >> 2];
  $3_1 = HEAP32[$0_1 + 20 >> 2];
  HEAP32[$1_1 + 16 >> 2] = $3_1;
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 76, $3_1) | 0;
   $3_1 = HEAP32[$6_1 + 8 >> 2];
   (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
   while (1) {
    if (HEAP32[$1_1 + 16 >> 2] <= ($7_1 | 0)) {
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $6_1, 8952, 1497453121, HEAP32[$6_1 + 8 >> 2]);
     break label$1;
    }
    $4_1 = Math_imul($7_1, 80);
    $5_1 = $4_1 + HEAP32[$0_1 + 28 >> 2] | 0;
    HEAPF32[$3_1 + 72 >> 2] = HEAPF32[$5_1 + 72 >> 2];
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, HEAP32[$5_1 + 64 >> 2]) | 0), HEAP32[wasm2js_i32$0 + 64 >> 2] = wasm2js_i32$1;
    if (!(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 24 >> 2]]($2_1, HEAP32[($4_1 + HEAP32[$0_1 + 28 >> 2] | 0) + 64 >> 2]) | 0)) {
     $5_1 = HEAP32[($4_1 + HEAP32[$0_1 + 28 >> 2] | 0) + 64 >> 2];
     $5_1 = ((((wasm2js_i32$1 = $2_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 52 >> 2]]($5_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
     $8_1 = HEAP32[($4_1 + HEAP32[$0_1 + 28 >> 2] | 0) + 64 >> 2];
     (((((wasm2js_i32$3 = $2_1, wasm2js_i32$2 = $5_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 56 >> 2]]($8_1, HEAP32[$5_1 + 8 >> 2], $2_1) | 0), wasm2js_i32$4 = 1346455635), wasm2js_i32$5 = HEAP32[($4_1 + HEAP32[$0_1 + 28 >> 2] | 0) + 64 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
    }
    $5_1 = $4_1 + HEAP32[$0_1 + 28 >> 2] | 0;
    HEAP32[$3_1 + 68 >> 2] = HEAP32[$5_1 + 68 >> 2];
    $4_1 = 0;
    while (1) {
     if (($4_1 | 0) != 48) {
      $65($4_1 + $5_1 | 0, $4_1 + $3_1 | 0);
      $4_1 = $4_1 + 16 | 0;
      continue;
     }
     break;
    };
    $65($5_1 + 48 | 0, $3_1 + 48 | 0);
    $3_1 = $3_1 + 76 | 0;
    $7_1 = $7_1 + 1 | 0;
    continue;
   };
  }
  return 8977;
 }
 
 function $240($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  HEAP32[$0_1 + 72 >> 2] = HEAP32[$0_1 + 72 >> 2] + 1;
  $2_1 = HEAP32[$0_1 + 20 >> 2];
  $3_1 = Math_imul($2_1, 80) - 16 | 0;
  while (1) {
   label$2 : {
    if (($2_1 | 0) > 0) {
     $2_1 = $2_1 - 1 | 0;
     if (HEAP32[HEAP32[$0_1 + 28 >> 2] + $3_1 >> 2] != ($1_1 | 0)) {
      break label$2
     }
     $241($0_1, $2_1);
     break label$2;
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 68 >> 2]]($0_1);
    return;
   }
   $3_1 = $3_1 - 80 | 0;
   continue;
  };
 }
 
 function $241($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = Math_fround(0), $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  HEAP32[$0_1 + 72 >> 2] = HEAP32[$0_1 + 72 >> 2] + 1;
  $2_1 = HEAP32[$0_1 + 68 >> 2];
  if ($2_1) {
   $223($2_1, HEAP32[(HEAP32[$0_1 + 28 >> 2] + Math_imul($1_1, 80) | 0) + 76 >> 2])
  }
  $3_1 = HEAP32[$0_1 + 20 >> 2];
  $19_1 = Math_imul($1_1, 80);
  $20_1 = $0_1 + 28 | 0;
  $12_1 = HEAP32[$20_1 >> 2];
  $2_1 = $19_1 + $12_1 | 0;
  $5_1 = $2_1 + 8 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $7_1 = $4_1 + 8 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $8_1;
  $9_1 = $2_1 + 24 | 0;
  $14_1 = HEAP32[$9_1 + 4 >> 2];
  $16_1 = $4_1 + 24 | 0;
  $8_1 = $16_1;
  HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $14_1;
  $17_1 = $2_1 + 40 | 0;
  $10_1 = $17_1;
  $11_1 = HEAP32[$10_1 + 4 >> 2];
  $8_1 = $4_1 + 40 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$10_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $11_1;
  $10_1 = $2_1 + 56 | 0;
  $6_1 = HEAP32[$10_1 + 4 >> 2];
  $14_1 = $4_1 + 56 | 0;
  $11_1 = $14_1;
  HEAP32[$11_1 >> 2] = HEAP32[$10_1 >> 2];
  HEAP32[$11_1 + 4 >> 2] = $6_1;
  $18_1 = $2_1 + 72 | 0;
  $13_1 = $18_1;
  $21_1 = HEAP32[$13_1 + 4 >> 2];
  $11_1 = $4_1 + 72 | 0;
  $6_1 = $11_1;
  HEAP32[$6_1 >> 2] = HEAP32[$13_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $21_1;
  $6_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $6_1 = HEAP32[$2_1 + 20 >> 2];
  HEAP32[$4_1 + 16 >> 2] = HEAP32[$2_1 + 16 >> 2];
  HEAP32[$4_1 + 20 >> 2] = $6_1;
  $6_1 = HEAP32[$2_1 + 36 >> 2];
  HEAP32[$4_1 + 32 >> 2] = HEAP32[$2_1 + 32 >> 2];
  HEAP32[$4_1 + 36 >> 2] = $6_1;
  $6_1 = HEAP32[$2_1 + 52 >> 2];
  HEAP32[$4_1 + 48 >> 2] = HEAP32[$2_1 + 48 >> 2];
  HEAP32[$4_1 + 52 >> 2] = $6_1;
  $6_1 = HEAP32[$2_1 + 68 >> 2];
  HEAP32[$4_1 + 64 >> 2] = HEAP32[$2_1 + 64 >> 2];
  HEAP32[$4_1 + 68 >> 2] = $6_1;
  $6_1 = Math_imul($3_1, 80) - 80 | 0;
  $3_1 = $6_1 + $12_1 | 0;
  $13_1 = HEAP32[$3_1 + 68 >> 2];
  HEAP32[$2_1 + 64 >> 2] = HEAP32[$3_1 + 64 >> 2];
  HEAP32[$2_1 + 68 >> 2] = $13_1;
  $12_1 = $3_1 + 8 | 0;
  $13_1 = HEAP32[$12_1 + 4 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$12_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $13_1;
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $5_1 = $3_1 + 24 | 0;
  $12_1 = HEAP32[$5_1 + 4 >> 2];
  HEAP32[$9_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$9_1 + 4 >> 2] = $12_1;
  $5_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$2_1 + 16 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$2_1 + 20 >> 2] = $5_1;
  $5_1 = $3_1 + 40 | 0;
  $9_1 = HEAP32[$5_1 + 4 >> 2];
  HEAP32[$17_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$17_1 + 4 >> 2] = $9_1;
  $5_1 = HEAP32[$3_1 + 36 >> 2];
  HEAP32[$2_1 + 32 >> 2] = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$2_1 + 36 >> 2] = $5_1;
  $5_1 = $3_1 + 56 | 0;
  $9_1 = HEAP32[$5_1 + 4 >> 2];
  HEAP32[$10_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$10_1 + 4 >> 2] = $9_1;
  $5_1 = HEAP32[$3_1 + 52 >> 2];
  HEAP32[$2_1 + 48 >> 2] = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$2_1 + 52 >> 2] = $5_1;
  $2_1 = $3_1 + 72 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$18_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$18_1 + 4 >> 2] = $3_1;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $2_1 = $6_1 + HEAP32[$20_1 >> 2] | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $5_1 = HEAP32[$7_1 + 4 >> 2];
  $3_1 = $2_1 + 8 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $5_1;
  $7_1 = HEAP32[$16_1 + 4 >> 2];
  $3_1 = $2_1 + 24 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$16_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $7_1;
  $3_1 = HEAP32[$4_1 + 20 >> 2];
  HEAP32[$2_1 + 16 >> 2] = HEAP32[$4_1 + 16 >> 2];
  HEAP32[$2_1 + 20 >> 2] = $3_1;
  $7_1 = HEAP32[$8_1 + 4 >> 2];
  $3_1 = $2_1 + 40 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $7_1;
  $3_1 = HEAP32[$4_1 + 36 >> 2];
  HEAP32[$2_1 + 32 >> 2] = HEAP32[$4_1 + 32 >> 2];
  HEAP32[$2_1 + 36 >> 2] = $3_1;
  $7_1 = HEAP32[$14_1 + 4 >> 2];
  $3_1 = $2_1 + 56 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$14_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $7_1;
  $3_1 = HEAP32[$4_1 + 52 >> 2];
  HEAP32[$2_1 + 48 >> 2] = HEAP32[$4_1 + 48 >> 2];
  HEAP32[$2_1 + 52 >> 2] = $3_1;
  $7_1 = HEAP32[$11_1 + 4 >> 2];
  $3_1 = $2_1 + 72 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$11_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $7_1;
  $3_1 = HEAP32[$4_1 + 68 >> 2];
  HEAP32[$2_1 + 64 >> 2] = HEAP32[$4_1 + 64 >> 2];
  HEAP32[$2_1 + 68 >> 2] = $3_1;
  if (HEAP32[$0_1 + 68 >> 2]) {
   HEAP32[HEAP32[(HEAP32[$0_1 + 28 >> 2] + $19_1 | 0) + 76 >> 2] + 36 >> 2] = $1_1
  }
  HEAP32[$0_1 + 20 >> 2] = HEAP32[$0_1 + 20 >> 2] - 1;
  $15_1 = Math_fround($1_1 | 0);
  $243($0_1 + 96 | 0, $15_1);
  $243($0_1 + 136 | 0, $15_1);
  $243($0_1 + 116 | 0, $15_1);
  $243($0_1 + 156 | 0, $15_1);
  $135($0_1 + 176 | 0, $1_1);
  global$0 = $4_1 + 80 | 0;
 }
 
 function $242($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[$0_1 + 52 >> 2] = -581039253;
  HEAP32[$0_1 + 56 >> 2] = -581039253;
  HEAP32[$0_1 + 36 >> 2] = 1566444395;
  HEAP32[$0_1 + 40 >> 2] = 1566444395;
  $1_1 = $0_1 + 60 | 0;
  HEAP32[$1_1 >> 2] = -581039253;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 44 | 0;
  HEAP32[$1_1 >> 2] = 1566444395;
  HEAP32[$1_1 + 4 >> 2] = 0;
  label$1 : while (1) {
   if (HEAP32[$0_1 + 20 >> 2] > ($5_1 | 0)) {
    $1_1 = HEAP32[$0_1 + 28 >> 2] + Math_imul($5_1, 80) | 0;
    $2_1 = HEAP32[$1_1 + 64 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $1_1, $3_1 + 16 | 0, $3_1);
    $1_1 = 0;
    while (1) {
     if (($1_1 | 0) == 12) {
      $5_1 = $5_1 + 1 | 0;
      continue label$1;
     }
     $4_1 = HEAPF32[($3_1 + 16 | 0) + $1_1 >> 2];
     $2_1 = $0_1 + $1_1 | 0;
     $6_1 = $2_1 + 36 | 0;
     if ($4_1 < HEAPF32[$6_1 >> 2]) {
      HEAPF32[$6_1 >> 2] = $4_1
     }
     $4_1 = HEAPF32[$1_1 + $3_1 >> 2];
     $2_1 = $2_1 + 52 | 0;
     if ($4_1 > HEAPF32[$2_1 >> 2]) {
      HEAPF32[$2_1 >> 2] = $4_1
     }
     $1_1 = $1_1 + 4 | 0;
     continue;
    };
   }
   break;
  };
  global$0 = $3_1 + 32 | 0;
 }
 
 function $243($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = HEAP32[$0_1 + 4 >> 2];
  $5_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  label$1 : {
   while (1) {
    if (($2_1 | 0) == ($5_1 | 0)) {
     break label$1
    }
    if (HEAPF32[HEAP32[$0_1 + 12 >> 2] + $4_1 >> 2] != $1_1) {
     $4_1 = $4_1 + 4 | 0;
     $2_1 = $2_1 + 1 | 0;
     continue;
    }
    break;
   };
   if (($2_1 | 0) >= ($3_1 | 0)) {
    break label$1
   }
   $4_1 = $2_1 << 2;
   $2_1 = HEAP32[$0_1 + 12 >> 2];
   $4_1 = $4_1 + $2_1 | 0;
   $1_1 = HEAPF32[$4_1 >> 2];
   $3_1 = $3_1 - 1 | 0;
   $2_1 = $2_1 + ($3_1 << 2) | 0;
   HEAPF32[$4_1 >> 2] = HEAPF32[$2_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $3_1;
   HEAPF32[$2_1 >> 2] = $1_1;
  }
 }
 
 function $244($0_1, $1_1) {
  var $2_1 = Math_fround(0);
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 >> 2] = HEAPF32[$1_1 >> 2];
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$1_1 + 16 >> 2];
  HEAPF32[$0_1 + 8 >> 2] = HEAPF32[$1_1 + 32 >> 2];
  HEAPF32[$0_1 + 16 >> 2] = HEAPF32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 28 >> 2] = 0;
  HEAPF32[$0_1 + 32 >> 2] = HEAPF32[$1_1 + 8 >> 2];
  HEAPF32[$0_1 + 20 >> 2] = HEAPF32[$1_1 + 20 >> 2];
  HEAPF32[$0_1 + 24 >> 2] = HEAPF32[$1_1 + 36 >> 2];
  HEAPF32[$0_1 + 36 >> 2] = HEAPF32[$1_1 + 24 >> 2];
  $2_1 = HEAPF32[$1_1 + 40 >> 2];
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAPF32[$0_1 + 40 >> 2] = $2_1;
 }
 
 function $245($0_1, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0);
  $3_1 = HEAPF32[$2_1 >> 2];
  $4_1 = HEAPF32[$1_1 >> 2];
  $5_1 = HEAPF32[$2_1 + 16 >> 2];
  $6_1 = HEAPF32[$1_1 + 4 >> 2];
  $7_1 = HEAPF32[$2_1 + 32 >> 2];
  $8_1 = HEAPF32[$1_1 + 8 >> 2];
  $9_1 = HEAPF32[$2_1 + 4 >> 2];
  $10_1 = HEAPF32[$2_1 + 20 >> 2];
  $11_1 = HEAPF32[$2_1 + 36 >> 2];
  $12_1 = HEAPF32[$2_1 + 8 >> 2];
  $13_1 = HEAPF32[$2_1 + 24 >> 2];
  $14_1 = HEAPF32[$2_1 + 40 >> 2];
  $15_1 = HEAPF32[$1_1 + 16 >> 2];
  $16_1 = HEAPF32[$1_1 + 20 >> 2];
  $17_1 = HEAPF32[$1_1 + 24 >> 2];
  $18_1 = HEAPF32[$1_1 + 32 >> 2];
  $19_1 = HEAPF32[$1_1 + 36 >> 2];
  $20_1 = HEAPF32[$1_1 + 40 >> 2];
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAPF32[$0_1 + 40 >> 2] = Math_fround(Math_fround($12_1 * $18_1) + Math_fround($13_1 * $19_1)) + Math_fround($14_1 * $20_1);
  HEAPF32[$0_1 + 36 >> 2] = Math_fround(Math_fround($9_1 * $18_1) + Math_fround($10_1 * $19_1)) + Math_fround($11_1 * $20_1);
  HEAPF32[$0_1 + 32 >> 2] = Math_fround(Math_fround($3_1 * $18_1) + Math_fround($5_1 * $19_1)) + Math_fround($7_1 * $20_1);
  HEAP32[$0_1 + 28 >> 2] = 0;
  HEAPF32[$0_1 + 24 >> 2] = Math_fround(Math_fround($12_1 * $15_1) + Math_fround($13_1 * $16_1)) + Math_fround($14_1 * $17_1);
  HEAPF32[$0_1 + 20 >> 2] = Math_fround(Math_fround($9_1 * $15_1) + Math_fround($10_1 * $16_1)) + Math_fround($11_1 * $17_1);
  HEAPF32[$0_1 + 16 >> 2] = Math_fround(Math_fround($3_1 * $15_1) + Math_fround($5_1 * $16_1)) + Math_fround($7_1 * $17_1);
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 + 8 >> 2] = Math_fround(Math_fround($12_1 * $4_1) + Math_fround($13_1 * $6_1)) + Math_fround($14_1 * $8_1);
  HEAPF32[$0_1 + 4 >> 2] = Math_fround(Math_fround($9_1 * $4_1) + Math_fround($10_1 * $6_1)) + Math_fround($11_1 * $8_1);
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround($3_1 * $4_1) + Math_fround($5_1 * $6_1)) + Math_fround($7_1 * $8_1);
 }
 
 function $246($0_1, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0);
  $3_1 = HEAPF32[$1_1 + 12 >> 2];
  $4_1 = HEAPF32[$2_1 + 12 >> 2];
  $5_1 = HEAPF32[$2_1 >> 2];
  $6_1 = HEAPF32[$1_1 >> 2];
  $7_1 = HEAPF32[$1_1 + 4 >> 2];
  $8_1 = HEAPF32[$2_1 + 4 >> 2];
  $9_1 = HEAPF32[$2_1 + 8 >> 2];
  $10_1 = HEAPF32[$1_1 + 8 >> 2];
  HEAPF32[$0_1 + 12 >> 2] = Math_fround(Math_fround(Math_fround($3_1 * $4_1) - Math_fround($5_1 * $6_1)) - Math_fround($7_1 * $8_1)) - Math_fround($9_1 * $10_1);
  HEAPF32[$0_1 + 8 >> 2] = Math_fround(Math_fround(Math_fround($3_1 * $9_1) + Math_fround($4_1 * $10_1)) + Math_fround($6_1 * $8_1)) - Math_fround($5_1 * $7_1);
  HEAPF32[$0_1 + 4 >> 2] = Math_fround(Math_fround($5_1 * $10_1) + Math_fround(Math_fround($4_1 * $7_1) + Math_fround($3_1 * $8_1))) - Math_fround($6_1 * $9_1);
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(Math_fround($3_1 * $5_1) + Math_fround($6_1 * $4_1)) + Math_fround($7_1 * $9_1)) - Math_fround($10_1 * $8_1);
 }
 
 function $247($0_1) {
  var $1_1 = Math_fround(0);
  $1_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($248($0_1))));
  HEAPF32[$0_1 >> 2] = $1_1 * HEAPF32[$0_1 >> 2];
  HEAPF32[$0_1 + 4 >> 2] = $1_1 * HEAPF32[$0_1 + 4 >> 2];
  HEAPF32[$0_1 + 8 >> 2] = $1_1 * HEAPF32[$0_1 + 8 >> 2];
  HEAPF32[$0_1 + 12 >> 2] = $1_1 * HEAPF32[$0_1 + 12 >> 2];
  return $0_1;
 }
 
 function $248($0_1) {
  var $1_1 = Math_fround(0), $2_1 = Math_fround(0);
  $1_1 = HEAPF32[$0_1 >> 2];
  $2_1 = Math_fround($1_1 * $1_1);
  $1_1 = HEAPF32[$0_1 + 4 >> 2];
  $2_1 = Math_fround($2_1 + Math_fround($1_1 * $1_1));
  $1_1 = HEAPF32[$0_1 + 8 >> 2];
  $2_1 = Math_fround($2_1 + Math_fround($1_1 * $1_1));
  $1_1 = HEAPF32[$0_1 + 12 >> 2];
  return Math_fround($2_1 + Math_fround($1_1 * $1_1));
 }
 
 function $249($0_1, $1_1, $2_1, $3_1, $4_1) {
  var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $4_1 = Math_fround($4_1 * Math_fround(.5));
  (wasm2js_i32$0 = $0_1, wasm2js_f32$0 = $49($4_1)), HEAPF32[wasm2js_i32$0 + 12 >> 2] = wasm2js_f32$0;
  $4_1 = Math_fround($50($4_1) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($1_1 * $1_1) + Math_fround($2_1 * $2_1)) + Math_fround($3_1 * $3_1)))));
  HEAPF32[$0_1 + 8 >> 2] = $4_1 * $3_1;
  HEAPF32[$0_1 + 4 >> 2] = $4_1 * $2_1;
  HEAPF32[$0_1 >> 2] = $4_1 * $1_1;
 }
 
 function $250($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = 0, $15_1 = 0, $16_1 = 0.0, $17_1 = 0.0, $18_1 = 0.0;
  $2_1 = global$0 - 80 | 0;
  global$0 = $2_1;
  $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1) | 0;
  $15_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  $8_1 = HEAPF32[$0_1 + 12 >> 2];
  $9_1 = HEAPF32[$0_1 + 8 >> 2];
  $10_1 = HEAPF32[$0_1 + 4 >> 2];
  while (1) {
   if (($14_1 | 0) != ($15_1 | 0)) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 16 >> 2]]($0_1, $2_1 + 76 | 0, $2_1 + 52 | 0, $2_1 - -64 | 0, $2_1 + 56 | 0, $2_1 + 72 | 0, $2_1 + 68 | 0, $2_1 + 48 | 0, $2_1 + 60 | 0, $14_1);
    label$3 : {
     label$4 : {
      switch (HEAP32[$2_1 + 64 >> 2]) {
      case 0:
       label$6 : {
        switch (HEAP32[$2_1 + 60 >> 2] - 2 | 0) {
        case 0:
         $3_1 = 0;
         while (1) {
          if (HEAP32[$2_1 + 48 >> 2] <= ($3_1 | 0)) {
           break label$3
          }
          $7_1 = HEAP32[$2_1 + 76 >> 2];
          $6_1 = HEAP32[$2_1 + 56 >> 2];
          $5_1 = HEAP32[$2_1 + 72 >> 2] + Math_imul(HEAP32[$2_1 + 68 >> 2], $3_1) | 0;
          $4_1 = $7_1 + Math_imul($6_1, HEAP32[$5_1 >> 2]) | 0;
          $11_1 = HEAPF32[$4_1 >> 2];
          $12_1 = HEAPF32[$4_1 + 4 >> 2];
          $13_1 = HEAPF32[$4_1 + 8 >> 2];
          HEAP32[$2_1 + 12 >> 2] = 0;
          HEAPF32[$2_1 + 8 >> 2] = $8_1 * $13_1;
          HEAPF32[$2_1 + 4 >> 2] = $9_1 * $12_1;
          HEAPF32[$2_1 >> 2] = $10_1 * $11_1;
          $4_1 = $7_1 + Math_imul($6_1, HEAP32[$5_1 + 4 >> 2]) | 0;
          $11_1 = HEAPF32[$4_1 >> 2];
          $12_1 = HEAPF32[$4_1 + 4 >> 2];
          $13_1 = HEAPF32[$4_1 + 8 >> 2];
          HEAP32[$2_1 + 28 >> 2] = 0;
          HEAPF32[$2_1 + 24 >> 2] = $8_1 * $13_1;
          HEAPF32[$2_1 + 20 >> 2] = $9_1 * $12_1;
          HEAPF32[$2_1 + 16 >> 2] = $10_1 * $11_1;
          $5_1 = $7_1 + Math_imul($6_1, HEAP32[$5_1 + 8 >> 2]) | 0;
          $11_1 = HEAPF32[$5_1 >> 2];
          $12_1 = HEAPF32[$5_1 + 4 >> 2];
          $13_1 = HEAPF32[$5_1 + 8 >> 2];
          HEAP32[$2_1 + 44 >> 2] = 0;
          HEAPF32[$2_1 + 40 >> 2] = $8_1 * $13_1;
          HEAPF32[$2_1 + 36 >> 2] = $9_1 * $12_1;
          HEAPF32[$2_1 + 32 >> 2] = $10_1 * $11_1;
          FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $2_1, $14_1, $3_1);
          $3_1 = $3_1 + 1 | 0;
          continue;
         };
        case 1:
         $3_1 = 0;
         while (1) {
          if (HEAP32[$2_1 + 48 >> 2] <= ($3_1 | 0)) {
           break label$3
          }
          $7_1 = HEAP32[$2_1 + 76 >> 2];
          $6_1 = HEAP32[$2_1 + 56 >> 2];
          $5_1 = HEAP32[$2_1 + 72 >> 2] + Math_imul(HEAP32[$2_1 + 68 >> 2], $3_1) | 0;
          $4_1 = $7_1 + Math_imul($6_1, HEAPU16[$5_1 >> 1]) | 0;
          $11_1 = HEAPF32[$4_1 >> 2];
          $12_1 = HEAPF32[$4_1 + 4 >> 2];
          $13_1 = HEAPF32[$4_1 + 8 >> 2];
          HEAP32[$2_1 + 12 >> 2] = 0;
          HEAPF32[$2_1 + 8 >> 2] = $8_1 * $13_1;
          HEAPF32[$2_1 + 4 >> 2] = $9_1 * $12_1;
          HEAPF32[$2_1 >> 2] = $10_1 * $11_1;
          $4_1 = $7_1 + Math_imul($6_1, HEAPU16[$5_1 + 2 >> 1]) | 0;
          $11_1 = HEAPF32[$4_1 >> 2];
          $12_1 = HEAPF32[$4_1 + 4 >> 2];
          $13_1 = HEAPF32[$4_1 + 8 >> 2];
          HEAP32[$2_1 + 28 >> 2] = 0;
          HEAPF32[$2_1 + 24 >> 2] = $8_1 * $13_1;
          HEAPF32[$2_1 + 20 >> 2] = $9_1 * $12_1;
          HEAPF32[$2_1 + 16 >> 2] = $10_1 * $11_1;
          $5_1 = $7_1 + Math_imul($6_1, HEAPU16[$5_1 + 4 >> 1]) | 0;
          $11_1 = HEAPF32[$5_1 >> 2];
          $12_1 = HEAPF32[$5_1 + 4 >> 2];
          $13_1 = HEAPF32[$5_1 + 8 >> 2];
          HEAP32[$2_1 + 44 >> 2] = 0;
          HEAPF32[$2_1 + 40 >> 2] = $8_1 * $13_1;
          HEAPF32[$2_1 + 36 >> 2] = $9_1 * $12_1;
          HEAPF32[$2_1 + 32 >> 2] = $10_1 * $11_1;
          FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $2_1, $14_1, $3_1);
          $3_1 = $3_1 + 1 | 0;
          continue;
         };
        case 3:
         break label$6;
        default:
         break label$3;
        };
       }
       $3_1 = 0;
       while (1) {
        if (HEAP32[$2_1 + 48 >> 2] <= ($3_1 | 0)) {
         break label$3
        }
        $7_1 = HEAP32[$2_1 + 76 >> 2];
        $6_1 = HEAP32[$2_1 + 56 >> 2];
        $5_1 = HEAP32[$2_1 + 72 >> 2] + Math_imul(HEAP32[$2_1 + 68 >> 2], $3_1) | 0;
        $4_1 = $7_1 + Math_imul($6_1, HEAPU8[$5_1 | 0]) | 0;
        $11_1 = HEAPF32[$4_1 >> 2];
        $12_1 = HEAPF32[$4_1 + 4 >> 2];
        $13_1 = HEAPF32[$4_1 + 8 >> 2];
        HEAP32[$2_1 + 12 >> 2] = 0;
        HEAPF32[$2_1 + 8 >> 2] = $8_1 * $13_1;
        HEAPF32[$2_1 + 4 >> 2] = $9_1 * $12_1;
        HEAPF32[$2_1 >> 2] = $10_1 * $11_1;
        $4_1 = $7_1 + Math_imul($6_1, HEAPU8[$5_1 + 1 | 0]) | 0;
        $11_1 = HEAPF32[$4_1 >> 2];
        $12_1 = HEAPF32[$4_1 + 4 >> 2];
        $13_1 = HEAPF32[$4_1 + 8 >> 2];
        HEAP32[$2_1 + 28 >> 2] = 0;
        HEAPF32[$2_1 + 24 >> 2] = $8_1 * $13_1;
        HEAPF32[$2_1 + 20 >> 2] = $9_1 * $12_1;
        HEAPF32[$2_1 + 16 >> 2] = $10_1 * $11_1;
        $5_1 = $7_1 + Math_imul($6_1, HEAPU8[$5_1 + 2 | 0]) | 0;
        $11_1 = HEAPF32[$5_1 >> 2];
        $12_1 = HEAPF32[$5_1 + 4 >> 2];
        $13_1 = HEAPF32[$5_1 + 8 >> 2];
        HEAP32[$2_1 + 44 >> 2] = 0;
        HEAPF32[$2_1 + 40 >> 2] = $8_1 * $13_1;
        HEAPF32[$2_1 + 36 >> 2] = $9_1 * $12_1;
        HEAPF32[$2_1 + 32 >> 2] = $10_1 * $11_1;
        FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $2_1, $14_1, $3_1);
        $3_1 = $3_1 + 1 | 0;
        continue;
       };
      case 1:
       break label$4;
      default:
       break label$3;
      };
     }
     label$12 : {
      switch (HEAP32[$2_1 + 60 >> 2] - 2 | 0) {
      case 0:
       $3_1 = 0;
       while (1) {
        if (HEAP32[$2_1 + 48 >> 2] <= ($3_1 | 0)) {
         break label$3
        }
        HEAP32[$2_1 + 12 >> 2] = 0;
        HEAP32[$2_1 + 28 >> 2] = 0;
        $7_1 = HEAP32[$2_1 + 76 >> 2];
        $6_1 = HEAP32[$2_1 + 56 >> 2];
        $5_1 = HEAP32[$2_1 + 72 >> 2] + Math_imul(HEAP32[$2_1 + 68 >> 2], $3_1) | 0;
        $4_1 = $7_1 + Math_imul($6_1, HEAP32[$5_1 >> 2]) | 0;
        HEAPF32[$2_1 + 8 >> 2] = $8_1 * Math_fround(HEAPF64[$4_1 + 16 >> 3]);
        HEAPF32[$2_1 + 4 >> 2] = $9_1 * Math_fround(HEAPF64[$4_1 + 8 >> 3]);
        HEAPF32[$2_1 >> 2] = $10_1 * Math_fround(HEAPF64[$4_1 >> 3]);
        $4_1 = $7_1 + Math_imul($6_1, HEAP32[$5_1 + 4 >> 2]) | 0;
        HEAPF32[$2_1 + 24 >> 2] = $8_1 * Math_fround(HEAPF64[$4_1 + 16 >> 3]);
        HEAPF32[$2_1 + 20 >> 2] = $9_1 * Math_fround(HEAPF64[$4_1 + 8 >> 3]);
        HEAPF32[$2_1 + 16 >> 2] = $10_1 * Math_fround(HEAPF64[$4_1 >> 3]);
        HEAP32[$2_1 + 44 >> 2] = 0;
        $5_1 = $7_1 + Math_imul($6_1, HEAP32[$5_1 + 8 >> 2]) | 0;
        HEAPF32[$2_1 + 32 >> 2] = $10_1 * Math_fround(HEAPF64[$5_1 >> 3]);
        HEAPF32[$2_1 + 40 >> 2] = $8_1 * Math_fround(HEAPF64[$5_1 + 16 >> 3]);
        HEAPF32[$2_1 + 36 >> 2] = $9_1 * Math_fround(HEAPF64[$5_1 + 8 >> 3]);
        FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $2_1, $14_1, $3_1);
        $3_1 = $3_1 + 1 | 0;
        continue;
       };
      case 1:
       $3_1 = 0;
       while (1) {
        if (HEAP32[$2_1 + 48 >> 2] <= ($3_1 | 0)) {
         break label$3
        }
        HEAP32[$2_1 + 12 >> 2] = 0;
        HEAP32[$2_1 + 28 >> 2] = 0;
        $7_1 = HEAP32[$2_1 + 76 >> 2];
        $6_1 = HEAP32[$2_1 + 56 >> 2];
        $5_1 = HEAP32[$2_1 + 72 >> 2] + Math_imul(HEAP32[$2_1 + 68 >> 2], $3_1) | 0;
        $4_1 = $7_1 + Math_imul($6_1, HEAPU16[$5_1 >> 1]) | 0;
        HEAPF32[$2_1 + 8 >> 2] = $8_1 * Math_fround(HEAPF64[$4_1 + 16 >> 3]);
        HEAPF32[$2_1 + 4 >> 2] = $9_1 * Math_fround(HEAPF64[$4_1 + 8 >> 3]);
        HEAPF32[$2_1 >> 2] = $10_1 * Math_fround(HEAPF64[$4_1 >> 3]);
        $4_1 = $7_1 + Math_imul($6_1, HEAPU16[$5_1 + 2 >> 1]) | 0;
        HEAPF32[$2_1 + 24 >> 2] = $8_1 * Math_fround(HEAPF64[$4_1 + 16 >> 3]);
        HEAPF32[$2_1 + 20 >> 2] = $9_1 * Math_fround(HEAPF64[$4_1 + 8 >> 3]);
        HEAPF32[$2_1 + 16 >> 2] = $10_1 * Math_fround(HEAPF64[$4_1 >> 3]);
        HEAP32[$2_1 + 44 >> 2] = 0;
        $5_1 = $7_1 + Math_imul($6_1, HEAPU16[$5_1 + 4 >> 1]) | 0;
        HEAPF32[$2_1 + 32 >> 2] = $10_1 * Math_fround(HEAPF64[$5_1 >> 3]);
        HEAPF32[$2_1 + 40 >> 2] = $8_1 * Math_fround(HEAPF64[$5_1 + 16 >> 3]);
        HEAPF32[$2_1 + 36 >> 2] = $9_1 * Math_fround(HEAPF64[$5_1 + 8 >> 3]);
        FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $2_1, $14_1, $3_1);
        $3_1 = $3_1 + 1 | 0;
        continue;
       };
      case 3:
       break label$12;
      default:
       break label$3;
      };
     }
     $3_1 = 0;
     while (1) {
      if (HEAP32[$2_1 + 48 >> 2] <= ($3_1 | 0)) {
       break label$3
      }
      $5_1 = HEAP32[$2_1 + 72 >> 2] + Math_imul(HEAP32[$2_1 + 68 >> 2], $3_1) | 0;
      $6_1 = HEAPU8[$5_1 | 0];
      HEAP32[$2_1 + 12 >> 2] = 0;
      $7_1 = HEAP32[$2_1 + 76 >> 2];
      $4_1 = $6_1;
      $6_1 = HEAP32[$2_1 + 56 >> 2];
      $4_1 = $7_1 + Math_imul($4_1, $6_1) | 0;
      HEAPF32[$2_1 + 8 >> 2] = $8_1 * Math_fround(HEAPF64[$4_1 + 16 >> 3]);
      HEAPF32[$2_1 + 4 >> 2] = $9_1 * Math_fround(HEAPF64[$4_1 + 8 >> 3]);
      HEAPF32[$2_1 >> 2] = $10_1 * Math_fround(HEAPF64[$4_1 >> 3]);
      $4_1 = HEAPU8[$5_1 + 1 | 0];
      HEAP32[$2_1 + 28 >> 2] = 0;
      $4_1 = $7_1 + Math_imul($4_1, $6_1) | 0;
      HEAPF32[$2_1 + 24 >> 2] = $8_1 * Math_fround(HEAPF64[$4_1 + 16 >> 3]);
      HEAPF32[$2_1 + 20 >> 2] = $9_1 * Math_fround(HEAPF64[$4_1 + 8 >> 3]);
      HEAPF32[$2_1 + 16 >> 2] = $10_1 * Math_fround(HEAPF64[$4_1 >> 3]);
      $5_1 = $7_1 + Math_imul($6_1, HEAPU8[$5_1 + 2 | 0]) | 0;
      $16_1 = HEAPF64[$5_1 >> 3];
      $17_1 = HEAPF64[$5_1 + 8 >> 3];
      $18_1 = HEAPF64[$5_1 + 16 >> 3];
      HEAP32[$2_1 + 44 >> 2] = 0;
      HEAPF32[$2_1 + 40 >> 2] = $8_1 * Math_fround($18_1);
      HEAPF32[$2_1 + 36 >> 2] = $9_1 * Math_fround($17_1);
      HEAPF32[$2_1 + 32 >> 2] = $10_1 * Math_fround($16_1);
      FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $2_1, $14_1, $3_1);
      $3_1 = $3_1 + 1 | 0;
      continue;
     };
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2]]($0_1, $14_1);
    $14_1 = $14_1 + 1 | 0;
    continue;
   }
   break;
  };
  global$0 = $2_1 + 80 | 0;
 }
 
 function $251($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1) | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 20 >> 2] = $3_1;
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   $11_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 32, $3_1) | 0;
   $8_1 = HEAP32[$11_1 + 8 >> 2];
   (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $8_1) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1) | 0;
   $12_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
   while (1) {
    label$3 : {
     if (($10_1 | 0) != ($12_1 | 0)) {
      FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 16 >> 2]]($0_1, $5_1 + 28 | 0, $5_1 + 4 | 0, $5_1 + 16 | 0, $5_1 + 8 | 0, $5_1 + 24 | 0, $5_1 + 20 | 0, $5_1, $5_1 + 12 | 0, $10_1);
      HEAP32[$8_1 >> 2] = 0;
      HEAP32[$8_1 + 4 >> 2] = 0;
      $3_1 = $8_1 + 8 | 0;
      HEAP32[$3_1 >> 2] = 0;
      HEAP32[$3_1 + 4 >> 2] = 0;
      $3_1 = $8_1 + 16 | 0;
      HEAP32[$3_1 >> 2] = 0;
      HEAP32[$3_1 + 4 >> 2] = 0;
      $3_1 = HEAP32[$5_1 >> 2];
      HEAP32[$8_1 + 24 >> 2] = $3_1;
      HEAP32[$8_1 + 28 >> 2] = HEAP32[$5_1 + 4 >> 2];
      label$5 : {
       label$6 : {
        switch (HEAP32[$5_1 + 12 >> 2] - 2 | 0) {
        case 0:
         if (!$3_1) {
          break label$5
         }
         $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 4, Math_imul($3_1, 3)) | 0;
         $3_1 = HEAP32[$7_1 + 8 >> 2];
         (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
         $4_1 = 0;
         $9_1 = HEAP32[$5_1 + 24 >> 2];
         while (1) {
          if (($4_1 | 0) < HEAP32[$5_1 >> 2]) {
           $6_1 = $9_1 + Math_imul(HEAP32[$5_1 + 20 >> 2], $4_1) | 0;
           HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
           HEAP32[$3_1 + 4 >> 2] = HEAP32[$6_1 + 4 >> 2];
           HEAP32[$3_1 + 8 >> 2] = HEAP32[$6_1 + 8 >> 2];
           $3_1 = $3_1 + 12 | 0;
           $4_1 = $4_1 + 1 | 0;
           continue;
          }
          break;
         };
         FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $7_1, 9100, 1497453121, HEAP32[$7_1 + 8 >> 2]);
         break label$5;
        case 1:
         if (!$3_1) {
          break label$5
         }
         $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 8, $3_1) | 0;
         $3_1 = HEAP32[$7_1 + 8 >> 2];
         (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
         $4_1 = 0;
         while (1) {
          if (($4_1 | 0) < HEAP32[$5_1 >> 2]) {
           $6_1 = HEAP32[$5_1 + 24 >> 2] + Math_imul(HEAP32[$5_1 + 20 >> 2], $4_1) | 0;
           HEAP16[$3_1 >> 1] = HEAPU16[$6_1 >> 1];
           HEAP16[$3_1 + 2 >> 1] = HEAPU16[$6_1 + 2 >> 1];
           HEAP16[$3_1 + 4 >> 1] = HEAPU16[$6_1 + 4 >> 1];
           HEAP16[$3_1 + 6 >> 1] = 0;
           $3_1 = $3_1 + 8 | 0;
           $4_1 = $4_1 + 1 | 0;
           continue;
          }
          break;
         };
         FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $7_1, 9115, 1497453121, HEAP32[$7_1 + 8 >> 2]);
         break label$5;
        case 3:
         break label$6;
        default:
         break label$5;
        };
       }
       if (!$3_1) {
        break label$5
       }
       $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 4, $3_1) | 0;
       $3_1 = HEAP32[$7_1 + 8 >> 2];
       (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
       $4_1 = 0;
       while (1) {
        if (($4_1 | 0) < HEAP32[$5_1 >> 2]) {
         $6_1 = HEAP32[$5_1 + 24 >> 2] + Math_imul(HEAP32[$5_1 + 20 >> 2], $4_1) | 0;
         HEAP8[$3_1 | 0] = HEAPU8[$6_1 | 0];
         HEAP8[$3_1 + 1 | 0] = HEAPU8[$6_1 + 1 | 0];
         $6_1 = HEAPU8[$6_1 + 2 | 0];
         HEAP8[$3_1 + 3 | 0] = 0;
         HEAP8[$3_1 + 2 | 0] = $6_1;
         $3_1 = $3_1 + 4 | 0;
         $4_1 = $4_1 + 1 | 0;
         continue;
        }
        break;
       };
       FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $7_1, 9142, 1497453121, HEAP32[$7_1 + 8 >> 2]);
      }
      label$15 : {
       switch (HEAP32[$5_1 + 16 >> 2]) {
       case 0:
        $3_1 = HEAP32[$5_1 + 4 >> 2];
        if (!$3_1) {
         break label$3
        }
        $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 16, $3_1) | 0;
        $3_1 = HEAP32[$6_1 + 8 >> 2];
        (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        $4_1 = HEAP32[$5_1 + 4 >> 2];
        $7_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
        $9_1 = HEAP32[$5_1 + 8 >> 2];
        $4_1 = HEAP32[$5_1 + 28 >> 2];
        while (1) if ($7_1) {
         HEAPF32[$3_1 >> 2] = HEAPF32[$4_1 >> 2];
         HEAPF32[$3_1 + 4 >> 2] = HEAPF32[$4_1 + 4 >> 2];
         HEAPF32[$3_1 + 8 >> 2] = HEAPF32[$4_1 + 8 >> 2];
         $7_1 = $7_1 - 1 | 0;
         $3_1 = $3_1 + 16 | 0;
         $4_1 = $4_1 + $9_1 | 0;
         continue;
        } else {
         FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $6_1, 9165, 1497453121, HEAP32[$6_1 + 8 >> 2]);
         break label$3;
        };
       case 1:
        break label$15;
       default:
        break label$3;
       };
      }
      $3_1 = HEAP32[$5_1 + 4 >> 2];
      if (!$3_1) {
       break label$3
      }
      $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 32, $3_1) | 0;
      $3_1 = HEAP32[$6_1 + 8 >> 2];
      (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, $3_1) | 0), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
      $4_1 = HEAP32[$5_1 + 4 >> 2];
      $7_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
      $9_1 = HEAP32[$5_1 + 8 >> 2];
      $4_1 = HEAP32[$5_1 + 28 >> 2];
      while (1) if ($7_1) {
       HEAPF64[$3_1 >> 3] = HEAPF64[$4_1 >> 3];
       HEAPF64[$3_1 + 8 >> 3] = HEAPF64[$4_1 + 8 >> 3];
       HEAPF64[$3_1 + 16 >> 3] = HEAPF64[$4_1 + 16 >> 3];
       $7_1 = $7_1 - 1 | 0;
       $3_1 = $3_1 + 32 | 0;
       $4_1 = $4_1 + $9_1 | 0;
       continue;
      } else {
       FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $6_1, 9184, 1497453121, HEAP32[$6_1 + 8 >> 2]);
       break label$3;
      };
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $11_1, 9204, 1497453121, HEAP32[$11_1 + 8 >> 2]);
     break label$1;
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2]]($0_1, $10_1);
    $8_1 = $8_1 + 32 | 0;
    $10_1 = $10_1 + 1 | 0;
    continue;
   };
  }
  HEAP32[$1_1 + 24 >> 2] = 0;
  $65($0_1 + 4 | 0, $1_1 + 4 | 0);
  global$0 = $5_1 + 32 | 0;
  return 9219;
 }
 
 function $252($0_1, $1_1) {
  var $2_1 = Math_fround(0);
  $2_1 = HEAPF32[$1_1 >> 2];
  if ($2_1 < HEAPF32[$0_1 >> 2]) {
   HEAPF32[$0_1 >> 2] = $2_1
  }
  $2_1 = HEAPF32[$1_1 + 4 >> 2];
  if ($2_1 < HEAPF32[$0_1 + 4 >> 2]) {
   HEAPF32[$0_1 + 4 >> 2] = $2_1
  }
  $2_1 = HEAPF32[$1_1 + 8 >> 2];
  if ($2_1 < HEAPF32[$0_1 + 8 >> 2]) {
   HEAPF32[$0_1 + 8 >> 2] = $2_1
  }
  $2_1 = HEAPF32[$1_1 + 12 >> 2];
  if ($2_1 < HEAPF32[$0_1 + 12 >> 2]) {
   HEAPF32[$0_1 + 12 >> 2] = $2_1
  }
 }
 
 function $253($0_1, $1_1) {
  var $2_1 = Math_fround(0);
  $2_1 = HEAPF32[$1_1 >> 2];
  if ($2_1 > HEAPF32[$0_1 >> 2]) {
   HEAPF32[$0_1 >> 2] = $2_1
  }
  $2_1 = HEAPF32[$1_1 + 4 >> 2];
  if ($2_1 > HEAPF32[$0_1 + 4 >> 2]) {
   HEAPF32[$0_1 + 4 >> 2] = $2_1
  }
  $2_1 = HEAPF32[$1_1 + 8 >> 2];
  if ($2_1 > HEAPF32[$0_1 + 8 >> 2]) {
   HEAPF32[$0_1 + 8 >> 2] = $2_1
  }
  $2_1 = HEAPF32[$1_1 + 12 >> 2];
  if ($2_1 > HEAPF32[$0_1 + 12 >> 2]) {
   HEAPF32[$0_1 + 12 >> 2] = $2_1
  }
 }
 
 function $254($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 9292;
  $96($0_1 + 20 | 0);
  HEAP32[$0_1 + 32 >> 2] = 0;
  HEAP8[$0_1 + 36 | 0] = 1;
  $1_1 = $0_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $255($0_1) {
  $0_1 = $0_1 | 0;
  $54($254($0_1));
 }
 
 function $256($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $0_1 = HEAP32[$0_1 + 32 >> 2] + ($9_1 << 5) | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$0_1 + 12 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$0_1 + 20 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$0_1 + 16 >> 2];
  HEAP32[$3_1 >> 2] = HEAP32[$0_1 + 28 >> 2];
  HEAP32[$7_1 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$8_1 >> 2] = HEAP32[$0_1 + 24 >> 2];
  HEAP32[$6_1 >> 2] = HEAP32[$0_1 + 8 >> 2];
 }
 
 function $257($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $258($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 48 >> 2] == 1 | 0;
 }
 
 function $259($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 52 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 56 >> 2] = $3_1;
  $1_1 = $1_1 + 8 | 0;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $0_1 + 60 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0_1 + 68 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 72 >> 2] = $1_1;
  $2_1 = $2_1 + 8 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 76 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  HEAP32[$0_1 + 48 >> 2] = 1;
 }
 
 function $260($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = HEAP32[$0_1 + 56 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  $3_1 = $0_1 + 60 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $1_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $3_1 = $0_1 + 76 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $2_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$0_1 + 72 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$0_1 + 68 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
 }
 
 function $261($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 9404;
  $96($0_1 + 144 | 0);
  HEAP32[$0_1 + 156 >> 2] = 0;
  HEAP8[$0_1 + 160 | 0] = 1;
  $1_1 = $0_1 + 148 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $96($0_1 + 124 | 0);
  HEAP32[$0_1 + 136 >> 2] = 0;
  HEAP8[$0_1 + 140 | 0] = 1;
  $1_1 = $0_1 + 128 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $57($0_1 + 104 | 0);
  $57($0_1 + 84 | 0);
  $254($0_1);
  return $0_1 | 0;
 }
 
 function $262($0_1) {
  $0_1 = $0_1 | 0;
  $54($261($0_1));
 }
 
 function $263($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 24 >> 2];
 }
 
 function $264($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  if (HEAPU8[$0_1 + 165 | 0]) {
   $142($0_1 + 84 | 0, $1_1);
   return;
  }
  $265($0_1 + 104 | 0, $1_1);
 }
 
 function $265($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $4_1 = $53($1_1 << 2)
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   while (1) {
    if ($2_1) {
     HEAPF32[$4_1 + $3_1 >> 2] = HEAPF32[HEAP32[$0_1 + 12 >> 2] + $3_1 >> 2];
     $2_1 = $2_1 - 1 | 0;
     $3_1 = $3_1 + 4 | 0;
     continue;
    }
    break;
   };
   $96($0_1);
   HEAP32[$0_1 + 12 >> 2] = $4_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $266($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  if (HEAPU8[$0_1 + 164 | 0]) {
   $110($0_1 + 124 | 0, $1_1);
   return;
  }
  $267($0_1 + 144 | 0, $1_1);
 }
 
 function $267($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $4_1 = $53($1_1 << 1)
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   while (1) {
    if ($2_1) {
     HEAP16[$4_1 + $3_1 >> 1] = HEAPU16[HEAP32[$0_1 + 12 >> 2] + $3_1 >> 1];
     $2_1 = $2_1 - 1 | 0;
     $3_1 = $3_1 + 2 | 0;
     continue;
    }
    break;
   };
   $96($0_1);
   HEAP32[$0_1 + 12 >> 2] = $4_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $268($0_1) {
  $0_1 = $0_1 | 0;
  return 28;
 }
 
 function $269($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  if (HEAPU8[$0_1 + 164 | 0]) {
   $2_1 = HEAP32[$0_1 + 128 >> 2];
   if (($2_1 | 0) == HEAP32[$0_1 + 132 >> 2]) {
    $110($0_1 + 124 | 0, $2_1 ? $2_1 << 1 : 1);
    $2_1 = HEAP32[$0_1 + 128 >> 2];
   }
   $3_1 = HEAP32[$0_1 + 136 >> 2];
   HEAP32[$3_1 + ($2_1 << 2) >> 2] = $1_1;
   HEAP32[HEAP32[$0_1 + 32 >> 2] + 4 >> 2] = $3_1;
   HEAP32[$0_1 + 128 >> 2] = HEAP32[$0_1 + 128 >> 2] + 1;
   return;
  }
  $2_1 = HEAP32[$0_1 + 148 >> 2];
  if (($2_1 | 0) == HEAP32[$0_1 + 152 >> 2]) {
   $267($0_1 + 144 | 0, $2_1 ? $2_1 << 1 : 1);
   $2_1 = HEAP32[$0_1 + 148 >> 2];
  }
  HEAP32[$0_1 + 148 >> 2] = $2_1 + 1;
  $3_1 = HEAP32[$0_1 + 32 >> 2];
  $0_1 = HEAP32[$0_1 + 156 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $0_1;
  HEAP16[$0_1 + ($2_1 << 1) >> 1] = $1_1;
 }
 
 function $270($0_1, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0;
  label$1 : {
   if (HEAPU8[$0_1 + 165 | 0]) {
    label$3 : {
     if (!$2_1) {
      break label$3
     }
     $2_1 = HEAP32[$0_1 + 88 >> 2];
     $7_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
     $8_1 = HEAPF32[$1_1 + 8 >> 2];
     $9_1 = HEAPF32[$1_1 + 4 >> 2];
     $10_1 = HEAPF32[$1_1 >> 2];
     $2_1 = 0;
     while (1) {
      if (($2_1 | 0) == ($7_1 | 0)) {
       break label$3
      }
      $5_1 = HEAP32[$0_1 + 96 >> 2] + $4_1 | 0;
      $3_1 = Math_fround(HEAPF32[$5_1 >> 2] - $10_1);
      $6_1 = Math_fround($3_1 * $3_1);
      $3_1 = Math_fround(HEAPF32[$5_1 + 4 >> 2] - $9_1);
      $6_1 = Math_fround($6_1 + Math_fround($3_1 * $3_1));
      $3_1 = Math_fround(HEAPF32[$5_1 + 8 >> 2] - $8_1);
      if (HEAPF32[$0_1 + 168 >> 2] >= Math_fround($6_1 + Math_fround($3_1 * $3_1))) {
       break label$1
      }
      $4_1 = $4_1 + 16 | 0;
      $2_1 = $2_1 + 1 | 0;
      continue;
     };
    }
    $2_1 = $0_1 + 32 | 0;
    $4_1 = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 12 >> 2] = HEAP32[$4_1 + 12 >> 2] + 1;
    $128($0_1 + 84 | 0, $1_1);
    HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2] = HEAP32[$0_1 + 96 >> 2];
    return HEAP32[$0_1 + 88 >> 2] - 1 | 0;
   }
   label$5 : {
    if (!$2_1) {
     break label$5
    }
    $11_1 = HEAP32[$0_1 + 108 >> 2];
    $8_1 = HEAPF32[$1_1 + 8 >> 2];
    $9_1 = HEAPF32[$1_1 + 4 >> 2];
    $10_1 = HEAPF32[$1_1 >> 2];
    $2_1 = -1;
    $7_1 = -3;
    while (1) {
     $7_1 = $7_1 + 3 | 0;
     if (($11_1 | 0) <= ($7_1 | 0)) {
      break label$5
     }
     $2_1 = $2_1 + 1 | 0;
     $5_1 = HEAP32[$0_1 + 116 >> 2] + $4_1 | 0;
     $4_1 = $4_1 + 12 | 0;
     $3_1 = Math_fround(HEAPF32[$5_1 >> 2] - $10_1);
     $6_1 = Math_fround($3_1 * $3_1);
     $3_1 = Math_fround(HEAPF32[$5_1 + 4 >> 2] - $9_1);
     $6_1 = Math_fround($6_1 + Math_fround($3_1 * $3_1));
     $3_1 = Math_fround(HEAPF32[$5_1 + 8 >> 2] - $8_1);
     if (!(HEAPF32[$0_1 + 168 >> 2] >= Math_fround($6_1 + Math_fround($3_1 * $3_1)))) {
      continue
     }
     break;
    };
    break label$1;
   }
   $2_1 = $0_1 + 104 | 0;
   $271($2_1, $1_1);
   $271($2_1, $1_1 + 4 | 0);
   $271($2_1, $1_1 + 8 | 0);
   $1_1 = HEAP32[$0_1 + 32 >> 2];
   HEAP32[$1_1 + 16 >> 2] = HEAP32[$0_1 + 116 >> 2];
   HEAP32[$1_1 + 12 >> 2] = HEAP32[$1_1 + 12 >> 2] + 1;
   $2_1 = (HEAP32[$0_1 + 108 >> 2] / 3 | 0) - 1 | 0;
  }
  return $2_1;
 }
 
 function $271($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  if (($2_1 | 0) == HEAP32[$0_1 + 8 >> 2]) {
   $265($0_1, $2_1 ? $2_1 << 1 : 1);
   $2_1 = HEAP32[$0_1 + 4 >> 2];
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1 + 1;
  HEAPF32[HEAP32[$0_1 + 12 >> 2] + ($2_1 << 2) >> 2] = HEAPF32[$1_1 >> 2];
 }
 
 function $272($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $1_1 = global$0 - 48 | 0;
  global$0 = $1_1;
  while (1) {
   if (($3_1 | 0) == 12) {
    global$0 = $1_1 + 48 | 0
   } else {
    $2_1 = $1_1 + 40 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    HEAP32[$1_1 + 32 >> 2] = 0;
    HEAP32[$1_1 + 36 >> 2] = 0;
    $2_1 = ($1_1 + 32 | 0) + $3_1 | 0;
    HEAP32[$2_1 >> 2] = 1065353216;
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 68 >> 2]]($1_1 + 16 | 0, $0_1, $1_1 + 32 | 0);
    HEAP32[$2_1 >> 2] = -1082130432;
    $2_1 = $0_1 + $3_1 | 0;
    $5_1 = ($1_1 + 16 | 0) + $3_1 | 0;
    HEAPF32[$2_1 + 36 >> 2] = HEAPF32[$5_1 >> 2] + HEAPF32[$0_1 + 16 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 68 >> 2]]($1_1, $0_1, $1_1 + 32 | 0);
    $6_1 = $1_1 + 8 | 0;
    $7_1 = HEAP32[$6_1 + 4 >> 2];
    $4_1 = $1_1 + 24 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $7_1;
    $4_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$1_1 + 16 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$1_1 + 20 >> 2] = $4_1;
    HEAPF32[$2_1 + 20 >> 2] = HEAPF32[$5_1 >> 2] - HEAPF32[$0_1 + 16 >> 2];
    $3_1 = $3_1 + 4 | 0;
    continue;
   }
   break;
  };
 }
 
 function $273($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0);
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  $11_1 = $0_1 + 28 | 0;
  $5_1 = HEAPF32[$11_1 >> 2];
  $12_1 = $0_1 + 44 | 0;
  $6_1 = HEAPF32[$12_1 >> 2];
  $13_1 = $0_1 + 24 | 0;
  $7_1 = HEAPF32[$13_1 >> 2];
  $14_1 = $0_1 + 40 | 0;
  $8_1 = HEAPF32[$14_1 >> 2];
  $9_1 = HEAPF32[$0_1 + 20 >> 2];
  $10_1 = HEAPF32[$0_1 + 36 >> 2];
  $15_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $16_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $17_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $18_1 = HEAPF32[$13_1 >> 2];
  $19_1 = HEAPF32[$14_1 >> 2];
  $20_1 = HEAPF32[$11_1 >> 2];
  $21_1 = HEAPF32[$12_1 >> 2];
  $22_1 = HEAPF32[$0_1 + 20 >> 2];
  $23_1 = HEAPF32[$0_1 + 36 >> 2];
  $171($4_1 + 32 | 0, $1_1);
  $78($4_1 + 16 | 0, $1_1, Math_fround(Math_fround($23_1 + $22_1) * Math_fround(.5)), Math_fround(Math_fround($19_1 + $18_1) * Math_fround(.5)), Math_fround(Math_fround($21_1 + $20_1) * Math_fround(.5)));
  $80($4_1, Math_fround($15_1 + Math_fround(Math_fround($10_1 - $9_1) * Math_fround(.5))), Math_fround($16_1 + Math_fround(Math_fround($8_1 - $7_1) * Math_fround(.5))), Math_fround($17_1 + Math_fround(Math_fround($6_1 - $5_1) * Math_fround(.5))), HEAPF32[$4_1 + 32 >> 2], HEAPF32[$4_1 + 36 >> 2], HEAPF32[$4_1 + 40 >> 2], HEAPF32[$4_1 + 48 >> 2], HEAPF32[$4_1 + 52 >> 2], HEAPF32[$4_1 + 56 >> 2], HEAPF32[$4_1 + 64 >> 2], HEAPF32[$4_1 + 68 >> 2], HEAPF32[$4_1 + 72 >> 2]);
  HEAP32[$2_1 + 12 >> 2] = 0;
  $5_1 = HEAPF32[$4_1 + 24 >> 2];
  $6_1 = HEAPF32[$4_1 + 8 >> 2];
  HEAPF32[$2_1 + 8 >> 2] = $5_1 - $6_1;
  $7_1 = HEAPF32[$4_1 + 20 >> 2];
  $8_1 = HEAPF32[$4_1 + 4 >> 2];
  HEAPF32[$2_1 + 4 >> 2] = $7_1 - $8_1;
  $9_1 = HEAPF32[$4_1 + 16 >> 2];
  $10_1 = HEAPF32[$4_1 >> 2];
  HEAPF32[$2_1 >> 2] = $9_1 - $10_1;
  HEAPF32[$3_1 >> 2] = $9_1 + $10_1;
  HEAPF32[$3_1 + 4 >> 2] = $7_1 + $8_1;
  HEAPF32[$3_1 + 8 >> 2] = $5_1 + $6_1;
  HEAP32[$3_1 + 12 >> 2] = 0;
  global$0 = $4_1 + 80 | 0;
 }
 
 function $274($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$2_1 + 4 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = $3_1;
  $1_1 = $1_1 + 8 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $2_1 + 12 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $272($0_1);
 }
 
 function $275($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 52 >> 2] + 4 | 0;
 }
 
 function $276($0_1) {
  $0_1 = $0_1 | 0;
  return 9782;
 }
 
 function $277($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $6_1 = $2_1 + 8 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $5_1 = $4_1 + 24 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $7_1;
  $6_1 = $3_1 + 8 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $5_1 = $4_1 + 40 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $7_1;
  HEAP32[$4_1 + 8 >> 2] = 9656;
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 + 16 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 20 >> 2] = $5_1;
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$4_1 + 32 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 36 >> 2] = $5_1;
  HEAP32[$4_1 + 12 >> 2] = $1_1;
  $0_1 = HEAP32[$0_1 + 52 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $4_1 + 8 | 0, $2_1, $3_1);
  global$0 = $4_1 + 48 | 0;
 }
 
 function $278($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 192 | 0;
  global$0 = $3_1;
  $5_1 = $3_1 + 168 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $3_1 + 152 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $6_1 = $3_1 + 128 | 0;
  HEAP32[$6_1 >> 2] = 0;
  HEAP32[$6_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 136 >> 2] = 0;
  HEAP32[$3_1 + 160 >> 2] = 0;
  HEAP32[$3_1 + 164 >> 2] = 0;
  HEAP32[$3_1 + 144 >> 2] = 0;
  HEAP32[$3_1 + 148 >> 2] = 0;
  HEAP32[$3_1 + 120 >> 2] = 0;
  HEAP32[$3_1 + 124 >> 2] = 0;
  $6_1 = $3_1 + 28 | 0;
  $4_1 = $6_1;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $4_1 = $3_1 + 40 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 48 >> 2] = 0;
  $4_1 = $3_1 + 60 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 56 >> 2] = 1065353216;
  HEAP32[$3_1 + 52 >> 2] = HEAP32[$3_1 + 172 >> 2];
  $4_1 = $3_1 + 76 | 0;
  HEAP32[$4_1 >> 2] = 1065353216;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 20 >> 2] = 0;
  HEAP32[$3_1 + 24 >> 2] = 0;
  HEAP32[$3_1 + 16 >> 2] = 9600;
  HEAP32[$3_1 + 36 >> 2] = 1065353216;
  $7_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $3_1 + 68 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $4_1 = HEAP32[$3_1 + 128 >> 2];
  $5_1 = $3_1 + 84 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$3_1 + 124 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $4_1;
  $4_1 = $3_1 + 132 | 0;
  $7_1 = HEAP32[$4_1 + 4 >> 2];
  $5_1 = $3_1 + 92 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $7_1;
  HEAP32[$3_1 + 100 >> 2] = -581039253;
  $77($3_1 + 176 | 0, HEAPF32[$2_1 >> 2], HEAPF32[$2_1 + 4 >> 2], HEAPF32[$2_1 + 8 >> 2], $3_1 + 36 | 0);
  $5_1 = $3_1 + 184 | 0;
  $4_1 = HEAP32[$5_1 + 4 >> 2];
  $2_1 = $3_1 + 112 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $2_1 = HEAP32[$3_1 + 180 >> 2];
  HEAP32[$3_1 + 104 >> 2] = HEAP32[$3_1 + 176 >> 2];
  HEAP32[$3_1 + 108 >> 2] = $2_1;
  HEAP32[$3_1 + 184 >> 2] = 1566444395;
  HEAP32[$3_1 + 188 >> 2] = 0;
  HEAP32[$3_1 + 176 >> 2] = 1566444395;
  HEAP32[$3_1 + 180 >> 2] = 1566444395;
  HEAP32[$3_1 + 8 >> 2] = -581039253;
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAP32[$3_1 >> 2] = -581039253;
  HEAP32[$3_1 + 4 >> 2] = -581039253;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 64 >> 2]]($1_1, $3_1 + 16 | 0, $3_1, $3_1 + 176 | 0);
  $2_1 = HEAP32[$6_1 + 4 >> 2];
  $1_1 = $0_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  $1_1 = HEAP32[$3_1 + 24 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $3_1 + 192 | 0;
 }
 
 function $279($0_1) {
  $0_1 = $0_1 | 0;
  $17($0_1);
 }
 
 function $280($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0);
  $4_1 = $0_1 + 4 | 0;
  $8_1 = HEAPF32[$0_1 + 96 >> 2];
  $9_1 = HEAPF32[$0_1 + 92 >> 2];
  $10_1 = HEAPF32[$0_1 + 88 >> 2];
  $2_1 = 0;
  while (1) {
   if (($2_1 | 0) != 48) {
    $3_1 = $1_1 + $2_1 | 0;
    $5_1 = $3_1 + 8 | 0;
    $7_1 = Math_fround(Math_fround(Math_fround($10_1 * HEAPF32[$3_1 >> 2]) + Math_fround($9_1 * HEAPF32[$3_1 + 4 >> 2])) + Math_fround($8_1 * HEAPF32[$5_1 >> 2]));
    if ($7_1 > HEAPF32[$0_1 + 84 >> 2]) {
     HEAPF32[$0_1 + 84 >> 2] = $7_1;
     $6_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $6_1;
     $6_1 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $4_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
    }
    $2_1 = $2_1 + 16 | 0;
    continue;
   }
   break;
  };
 }
 
 function $281($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  if ($282($1_1, HEAPF32[$0_1 + 8 >> 2], HEAPF32[$0_1 + 12 >> 2], HEAPF32[$0_1 + 16 >> 2], HEAPF32[$0_1 + 24 >> 2], HEAPF32[$0_1 + 28 >> 2], HEAPF32[$0_1 + 32 >> 2])) {
   $0_1 = HEAP32[$0_1 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $1_1, $2_1, $3_1);
  }
 }
 
 function $282($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0;
  $10_1 = $4_1;
  $4_1 = HEAPF32[$0_1 >> 2];
  $8_1 = HEAPF32[$0_1 + 16 >> 2];
  $12_1 = $4_1 < $8_1 ? $4_1 : $8_1;
  $11_1 = HEAPF32[$0_1 + 32 >> 2];
  label$1 : {
   if ($10_1 < ($11_1 > $12_1 ? $12_1 : $11_1)) {
    break label$1
   }
   $7_1 = !($4_1 > $8_1) << 4;
   if (HEAPF32[(HEAPF32[$0_1 + $7_1 >> 2] > $11_1 ? $7_1 : 32) + $0_1 >> 2] < $1_1) {
    break label$1
   }
   $10_1 = $6_1;
   $1_1 = HEAPF32[$0_1 + 8 >> 2];
   $7_1 = $0_1 + 24 | 0;
   $4_1 = HEAPF32[$7_1 >> 2];
   $8_1 = $1_1 < $4_1 ? $1_1 : $4_1;
   $9_1 = $0_1 + 40 | 0;
   $6_1 = HEAPF32[$9_1 >> 2];
   if ($10_1 < ($6_1 > $8_1 ? $8_1 : $6_1)) {
    break label$1
   }
   $7_1 = $1_1 > $4_1 ? $0_1 + 8 | 0 : $7_1;
   if (HEAPF32[($6_1 < HEAPF32[$7_1 >> 2] ? $7_1 : $9_1) >> 2] < $3_1) {
    break label$1
   }
   $6_1 = $5_1;
   $1_1 = HEAPF32[$0_1 + 4 >> 2];
   $7_1 = $0_1 + 20 | 0;
   $3_1 = HEAPF32[$7_1 >> 2];
   $5_1 = $1_1 < $3_1 ? $1_1 : $3_1;
   $9_1 = $0_1 + 36 | 0;
   $4_1 = HEAPF32[$9_1 >> 2];
   if ($6_1 < ($4_1 > $5_1 ? $5_1 : $4_1)) {
    break label$1
   }
   $0_1 = $1_1 > $3_1 ? $0_1 + 4 | 0 : $7_1;
   if (HEAPF32[($4_1 < HEAPF32[$0_1 >> 2] ? $0_1 : $9_1) >> 2] < $2_1) {
    break label$1
   }
   $13_1 = 1;
  }
  return $13_1;
 }
 
 function $283($0_1) {
  var $1_1 = 0;
  HEAP8[$0_1 + 60 | 0] = 0;
  HEAP32[$0_1 + 52 >> 2] = 287;
  HEAP32[$0_1 >> 2] = 9828;
  HEAP32[$0_1 + 144 >> 2] = 0;
  HEAP8[$0_1 + 80 | 0] = 1;
  HEAP32[$0_1 + 76 >> 2] = 0;
  HEAP8[$0_1 + 100 | 0] = 1;
  $1_1 = $0_1 + 68 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 96 >> 2] = 0;
  HEAP8[$0_1 + 120 | 0] = 1;
  $1_1 = $0_1 + 88 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 116 >> 2] = 0;
  HEAP8[$0_1 + 140 | 0] = 1;
  $1_1 = $0_1 + 108 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 136 >> 2] = 0;
  HEAP8[$0_1 + 164 | 0] = 1;
  $1_1 = $0_1 + 128 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 160 >> 2] = 0;
  HEAP32[$0_1 + 168 >> 2] = 0;
  $1_1 = $0_1 + 152 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = -8388609;
  HEAP32[$0_1 + 8 >> 2] = -8388609;
  $1_1 = $0_1 + 12 | 0;
  HEAP32[$1_1 >> 2] = -8388609;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 20 >> 2] = 2139095039;
  HEAP32[$0_1 + 24 >> 2] = 2139095039;
  $1_1 = $0_1 + 28 | 0;
  HEAP32[$1_1 >> 2] = 2139095039;
  HEAP32[$1_1 + 4 >> 2] = 0;
  return $0_1;
 }
 
 function $284($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 9828;
  $57($0_1 + 148 | 0);
  $57($0_1 + 124 | 0);
  $57($0_1 + 104 | 0);
  $57($0_1 + 84 | 0);
  $57($0_1 - -64 | 0);
  return $0_1 | 0;
 }
 
 function $285($0_1) {
  $0_1 = $0_1 | 0;
  $54($284($0_1));
 }
 
 function $286($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  HEAP32[$0_1 + 168 >> 2] = HEAP32[$0_1 + 152 >> 2];
  $283($1_1);
  $2_1 = HEAP32[$0_1 + 56 >> 2];
  label$1 : {
   if ($3_1) {
    HEAP32[$1_1 + 56 >> 2] = $2_1 << 8 & 16711680 | $2_1 << 24 | ($2_1 >>> 8 & 65280 | $2_1 >>> 24);
    $287($0_1 + 4 | 0, $1_1 + 4 | 0);
    $287($0_1 + 20 | 0, $1_1 + 20 | 0);
    $287($0_1 + 36 | 0, $1_1 + 36 | 0);
    $2_1 = HEAP32[$0_1 + 144 >> 2];
    HEAP32[$1_1 + 144 >> 2] = $2_1 << 24 | $2_1 << 8 & 16711680 | ($2_1 >>> 8 & 65280 | $2_1 >>> 24);
    $2_1 = HEAP32[$0_1 + 168 >> 2];
    $2_1 = $2_1 << 24 | $2_1 << 8 & 16711680 | ($2_1 >>> 8 & 65280 | $2_1 >>> 24);
    break label$1;
   }
   HEAP32[$1_1 + 56 >> 2] = $2_1;
   $7_1 = $0_1 + 12 | 0;
   $4_1 = HEAP32[$7_1 + 4 >> 2];
   $2_1 = $1_1 + 12 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $2_1 = HEAP32[$0_1 + 8 >> 2];
   HEAP32[$1_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$1_1 + 8 >> 2] = $2_1;
   $7_1 = $0_1 + 28 | 0;
   $4_1 = HEAP32[$7_1 + 4 >> 2];
   $2_1 = $1_1 + 28 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $2_1 = HEAP32[$0_1 + 24 >> 2];
   HEAP32[$1_1 + 20 >> 2] = HEAP32[$0_1 + 20 >> 2];
   HEAP32[$1_1 + 24 >> 2] = $2_1;
   $2_1 = HEAP32[$0_1 + 40 >> 2];
   HEAP32[$1_1 + 36 >> 2] = HEAP32[$0_1 + 36 >> 2];
   HEAP32[$1_1 + 40 >> 2] = $2_1;
   $7_1 = $0_1 + 44 | 0;
   $4_1 = HEAP32[$7_1 + 4 >> 2];
   $2_1 = $1_1 + 44 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   HEAP32[$1_1 + 144 >> 2] = HEAP32[$0_1 + 144 >> 2];
   $2_1 = HEAP32[$0_1 + 168 >> 2];
  }
  HEAP8[$1_1 + 60 | 0] = HEAPU8[$0_1 + 60 | 0];
  HEAP32[$1_1 + 168 >> 2] = $2_1;
  $9_1 = $1_1 + 172 | 0;
  $7_1 = HEAP32[$0_1 + 56 >> 2];
  label$3 : {
   if (HEAPU8[$0_1 + 60 | 0]) {
    $10_1 = $1_1 + 124 | 0;
    $288($10_1, $9_1, $7_1, $7_1);
    $2_1 = ($7_1 | 0) > 0 ? $7_1 : 0;
    label$5 : {
     if (!$3_1) {
      while (1) {
       if (!$2_1) {
        break label$5
       }
       $4_1 = HEAP32[$1_1 + 136 >> 2] + $8_1 | 0;
       $5_1 = HEAP32[$0_1 + 136 >> 2] + $8_1 | 0;
       HEAP16[$4_1 >> 1] = HEAPU16[$5_1 >> 1];
       HEAP16[$4_1 + 2 >> 1] = HEAPU16[$5_1 + 2 >> 1];
       HEAP16[$4_1 + 4 >> 1] = HEAPU16[$5_1 + 4 >> 1];
       HEAP16[$4_1 + 6 >> 1] = HEAPU16[$5_1 + 6 >> 1];
       HEAP16[$4_1 + 8 >> 1] = HEAPU16[$5_1 + 8 >> 1];
       HEAP32[$4_1 + 12 >> 2] = HEAP32[$5_1 + 12 >> 2];
       HEAP16[$4_1 + 10 >> 1] = HEAPU16[$5_1 + 10 >> 1];
       $2_1 = $2_1 - 1 | 0;
       $8_1 = $8_1 + 16 | 0;
       continue;
      }
     }
     while (1) {
      if (!$2_1) {
       break label$5
      }
      $4_1 = HEAP32[$1_1 + 136 >> 2] + $8_1 | 0;
      $5_1 = HEAP32[$0_1 + 136 >> 2] + $8_1 | 0;
      $6_1 = HEAPU16[$5_1 >> 1];
      HEAP16[$4_1 >> 1] = ($6_1 << 24 | $6_1 << 8 & 16711680) >>> 16;
      $6_1 = HEAPU16[$5_1 + 2 >> 1];
      HEAP16[$4_1 + 2 >> 1] = ($6_1 << 24 | $6_1 << 8 & 16711680) >>> 16;
      $6_1 = HEAPU16[$5_1 + 4 >> 1];
      HEAP16[$4_1 + 4 >> 1] = ($6_1 << 24 | $6_1 << 8 & 16711680) >>> 16;
      $6_1 = HEAPU16[$5_1 + 6 >> 1];
      HEAP16[$4_1 + 6 >> 1] = ($6_1 << 24 | $6_1 << 8 & 16711680) >>> 16;
      $6_1 = HEAPU16[$5_1 + 8 >> 1];
      HEAP16[$4_1 + 8 >> 1] = ($6_1 << 24 | $6_1 << 8 & 16711680) >>> 16;
      $6_1 = HEAP32[$5_1 + 12 >> 2];
      HEAP32[$4_1 + 12 >> 2] = $6_1 << 24 | $6_1 << 8 & 16711680 | ($6_1 >>> 8 & 65280 | $6_1 >>> 24);
      $6_1 = $4_1 + 10 | 0;
      $4_1 = HEAPU16[$5_1 + 10 >> 1];
      HEAP16[$6_1 >> 1] = ($4_1 << 24 | $4_1 << 8 & 16711680) >>> 16;
      $2_1 = $2_1 - 1 | 0;
      $8_1 = $8_1 + 16 | 0;
      continue;
     };
    }
    $288($10_1, 0, 0, 0);
    $2_1 = $7_1 << 4;
    break label$3;
   }
   $10_1 = $1_1 + 84 | 0;
   $288($10_1, $9_1, $7_1, $7_1);
   $2_1 = 0;
   $8_1 = ($7_1 | 0) > 0 ? $7_1 : 0;
   label$9 : {
    if (!$3_1) {
     while (1) {
      if (!$8_1) {
       break label$9
      }
      $5_1 = HEAP32[$0_1 + 96 >> 2] + $2_1 | 0;
      $6_1 = HEAP32[$5_1 + 4 >> 2];
      $4_1 = HEAP32[$1_1 + 96 >> 2] + $2_1 | 0;
      HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $6_1;
      $5_1 = $5_1 + 8 | 0;
      $6_1 = HEAP32[$5_1 + 4 >> 2];
      $4_1 = $4_1 + 8 | 0;
      HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $6_1;
      $6_1 = HEAP32[$0_1 + 96 >> 2] + $2_1 | 0;
      $11_1 = $6_1 + 24 | 0;
      $12_1 = HEAP32[$11_1 + 4 >> 2];
      $4_1 = HEAP32[$1_1 + 96 >> 2] + $2_1 | 0;
      $5_1 = $4_1 + 24 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$11_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $12_1;
      $5_1 = $6_1 + 16 | 0;
      $6_1 = HEAP32[$5_1 + 4 >> 2];
      $4_1 = $4_1 + 16 | 0;
      HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $6_1;
      $4_1 = HEAP32[$1_1 + 96 >> 2] + $2_1 | 0;
      $5_1 = HEAP32[$0_1 + 96 >> 2] + $2_1 | 0;
      HEAP32[$4_1 + 32 >> 2] = HEAP32[$5_1 + 32 >> 2];
      HEAP32[$4_1 + 36 >> 2] = HEAP32[$5_1 + 36 >> 2];
      HEAP32[$4_1 + 40 >> 2] = HEAP32[$5_1 + 40 >> 2];
      $8_1 = $8_1 - 1 | 0;
      $2_1 = $2_1 - -64 | 0;
      continue;
     }
    }
    while (1) {
     if (!$8_1) {
      break label$9
     }
     $287(HEAP32[$0_1 + 96 >> 2] + $2_1 | 0, HEAP32[$1_1 + 96 >> 2] + $2_1 | 0);
     $287((HEAP32[$0_1 + 96 >> 2] + $2_1 | 0) + 16 | 0, (HEAP32[$1_1 + 96 >> 2] + $2_1 | 0) + 16 | 0);
     $5_1 = HEAP32[$1_1 + 96 >> 2] + $2_1 | 0;
     $6_1 = HEAP32[$0_1 + 96 >> 2] + $2_1 | 0;
     $4_1 = HEAP32[$6_1 + 32 >> 2];
     HEAP32[$5_1 + 32 >> 2] = $4_1 << 24 | $4_1 << 8 & 16711680 | ($4_1 >>> 8 & 65280 | $4_1 >>> 24);
     $4_1 = HEAP32[$6_1 + 36 >> 2];
     HEAP32[$5_1 + 36 >> 2] = $4_1 << 24 | $4_1 << 8 & 16711680 | ($4_1 >>> 8 & 65280 | $4_1 >>> 24);
     $4_1 = HEAP32[$6_1 + 40 >> 2];
     HEAP32[$5_1 + 40 >> 2] = $4_1 << 24 | $4_1 << 8 & 16711680 | ($4_1 >>> 8 & 65280 | $4_1 >>> 24);
     $8_1 = $8_1 - 1 | 0;
     $2_1 = $2_1 - -64 | 0;
     continue;
    };
   }
   $288($10_1, 0, 0, 0);
   $2_1 = $7_1 << 6;
  }
  $5_1 = $1_1 + 148 | 0;
  $4_1 = $2_1 + $9_1 | 0;
  $2_1 = HEAP32[$0_1 + 168 >> 2];
  $288($5_1, $4_1, $2_1, $2_1);
  label$13 : {
   if (!$3_1) {
    $2_1 = 0;
    $8_1 = 0;
    while (1) {
     if (HEAP32[$0_1 + 168 >> 2] <= ($8_1 | 0)) {
      break label$13
     }
     $3_1 = HEAP32[$1_1 + 160 >> 2] + $2_1 | 0;
     $7_1 = HEAP32[$0_1 + 160 >> 2] + $2_1 | 0;
     HEAP16[$3_1 >> 1] = HEAPU16[$7_1 >> 1];
     HEAP16[$3_1 + 2 >> 1] = HEAPU16[$7_1 + 2 >> 1];
     HEAP16[$3_1 + 4 >> 1] = HEAPU16[$7_1 + 4 >> 1];
     HEAP16[$3_1 + 6 >> 1] = HEAPU16[$7_1 + 6 >> 1];
     HEAP16[$3_1 + 8 >> 1] = HEAPU16[$7_1 + 8 >> 1];
     $9_1 = $7_1 + 12 | 0;
     $6_1 = HEAP32[$9_1 + 4 >> 2];
     $4_1 = $3_1 + 12 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$9_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $6_1;
     HEAP32[$3_1 + 28 >> 2] = 0;
     HEAP16[$3_1 + 10 >> 1] = HEAPU16[$7_1 + 10 >> 1];
     $3_1 = $3_1 + 20 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $2_1 = $2_1 + 32 | 0;
     $8_1 = $8_1 + 1 | 0;
     continue;
    };
   }
   $2_1 = 0;
   $3_1 = HEAP32[$0_1 + 168 >> 2];
   $7_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
   while (1) {
    if (!$7_1) {
     break label$13
    }
    $3_1 = HEAP32[$1_1 + 160 >> 2] + $2_1 | 0;
    $8_1 = HEAP32[$0_1 + 160 >> 2] + $2_1 | 0;
    $4_1 = HEAPU16[$8_1 >> 1];
    HEAP16[$3_1 >> 1] = ($4_1 << 24 | $4_1 << 8 & 16711680) >>> 16;
    $4_1 = HEAPU16[$8_1 + 2 >> 1];
    HEAP16[$3_1 + 2 >> 1] = ($4_1 << 24 | $4_1 << 8 & 16711680) >>> 16;
    $4_1 = HEAPU16[$8_1 + 4 >> 1];
    HEAP16[$3_1 + 4 >> 1] = ($4_1 << 24 | $4_1 << 8 & 16711680) >>> 16;
    $4_1 = HEAPU16[$8_1 + 6 >> 1];
    HEAP16[$3_1 + 6 >> 1] = ($4_1 << 24 | $4_1 << 8 & 16711680) >>> 16;
    $4_1 = HEAPU16[$8_1 + 8 >> 1];
    HEAP16[$3_1 + 8 >> 1] = ($4_1 << 24 | $4_1 << 8 & 16711680) >>> 16;
    $4_1 = HEAP32[$8_1 + 12 >> 2];
    HEAP32[$3_1 + 12 >> 2] = $4_1 << 24 | $4_1 << 8 & 16711680 | ($4_1 >>> 8 & 65280 | $4_1 >>> 24);
    $4_1 = HEAP32[$8_1 + 16 >> 2];
    HEAP32[$3_1 + 16 >> 2] = $4_1 << 24 | $4_1 << 8 & 16711680 | ($4_1 >>> 8 & 65280 | $4_1 >>> 24);
    $4_1 = $3_1 + 10 | 0;
    $3_1 = HEAPU16[$8_1 + 10 >> 1];
    HEAP16[$4_1 >> 1] = ($3_1 << 24 | $3_1 << 8 & 16711680) >>> 16;
    $7_1 = $7_1 - 1 | 0;
    $2_1 = $2_1 + 32 | 0;
    continue;
   };
  }
  $288($5_1, 0, 0, 0);
  HEAP32[$1_1 >> 2] = 0;
  return 1;
 }
 
 function $287($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  while (1) {
   if (($2_1 | 0) != 16) {
    $3_1 = $1_1 + $2_1 | 0;
    $4_1 = $0_1 + $2_1 | 0;
    HEAP8[$3_1 | 0] = HEAPU8[$4_1 + 3 | 0];
    HEAP8[$3_1 + 1 | 0] = HEAPU8[$4_1 + 2 | 0];
    HEAP8[$3_1 + 2 | 0] = HEAPU8[$4_1 + 1 | 0];
    HEAP8[$3_1 + 3 | 0] = HEAPU8[$4_1 | 0];
    $2_1 = $2_1 + 4 | 0;
    continue;
   }
   break;
  };
 }
 
 function $288($0_1, $1_1, $2_1, $3_1) {
  $57($0_1);
  HEAP32[$0_1 + 12 >> 2] = $1_1;
  HEAP8[$0_1 + 16 | 0] = 0;
  HEAP32[$0_1 + 8 >> 2] = $3_1;
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $289($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $65($0_1 + 20 | 0, $1_1 + 16 | 0);
  $65($0_1 + 4 | 0, $1_1);
  $65($0_1 + 36 | 0, $1_1 + 32 | 0);
  HEAP32[$1_1 + 48 >> 2] = HEAP32[$0_1 + 56 >> 2];
  HEAP32[$1_1 + 52 >> 2] = HEAPU8[$0_1 + 60 | 0];
  $3_1 = HEAP32[$0_1 + 88 >> 2];
  HEAP32[$1_1 + 56 >> 2] = $3_1;
  label$1 : {
   if (!$3_1) {
    HEAP32[$1_1 + 64 >> 2] = 0;
    break label$1;
   }
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, HEAP32[$0_1 + 96 >> 2]) | 0;
   HEAP32[$1_1 + 64 >> 2] = $3_1;
   if (!$3_1) {
    break label$1
   }
   $4_1 = HEAP32[$0_1 + 88 >> 2];
   $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 48, $4_1) | 0;
   $3_1 = HEAP32[$5_1 + 8 >> 2] + 44 | 0;
   $4_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
   while (1) {
    if ($4_1) {
     $65((HEAP32[$0_1 + 96 >> 2] + $7_1 | 0) + 16 | 0, $3_1 - 28 | 0);
     $65(HEAP32[$0_1 + 96 >> 2] + $7_1 | 0, $3_1 - 44 | 0);
     $6_1 = HEAP32[$0_1 + 96 >> 2] + $7_1 | 0;
     HEAP32[$3_1 - 12 >> 2] = HEAP32[$6_1 + 32 >> 2];
     $6_1 = $6_1 + 36 | 0;
     $8_1 = HEAP32[$6_1 + 4 >> 2];
     $6_1 = HEAP32[$6_1 >> 2];
     HEAP32[$3_1 >> 2] = 0;
     $9_1 = $3_1 - 8 | 0;
     HEAP32[$9_1 >> 2] = $6_1;
     HEAP32[$9_1 + 4 >> 2] = $8_1;
     $3_1 = $3_1 + 48 | 0;
     $4_1 = $4_1 - 1 | 0;
     $7_1 = $7_1 - -64 | 0;
     continue;
    } else {
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $5_1, 9864, 1497453121, HEAP32[$0_1 + 96 >> 2])
    }
    break;
   };
  }
  $3_1 = HEAP32[$0_1 + 128 >> 2];
  HEAP32[$1_1 + 60 >> 2] = $3_1;
  label$6 : {
   if (!$3_1) {
    HEAP32[$1_1 + 68 >> 2] = 0;
    break label$6;
   }
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, HEAP32[$0_1 + 136 >> 2]) | 0;
   HEAP32[$1_1 + 68 >> 2] = $3_1;
   if (!$3_1) {
    break label$6
   }
   $3_1 = HEAP32[$0_1 + 128 >> 2];
   $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 16, $3_1) | 0;
   $8_1 = HEAP32[$6_1 + 8 >> 2];
   $7_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
   $4_1 = 12;
   while (1) {
    if ($7_1) {
     $3_1 = $4_1 + $8_1 | 0;
     $5_1 = HEAP32[$0_1 + 136 >> 2] + $4_1 | 0;
     HEAP16[$3_1 - 6 >> 1] = HEAPU16[$5_1 - 6 >> 1];
     HEAP16[$3_1 - 4 >> 1] = HEAPU16[$5_1 - 4 >> 1];
     HEAP16[$3_1 - 2 >> 1] = HEAPU16[$5_1 - 2 >> 1];
     HEAP16[$3_1 - 12 >> 1] = HEAPU16[$5_1 - 12 >> 1];
     HEAP16[$3_1 - 10 >> 1] = HEAPU16[$5_1 - 10 >> 1];
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP16[$3_1 - 8 >> 1] = HEAPU16[$5_1 - 8 >> 1];
     $7_1 = $7_1 - 1 | 0;
     $4_1 = $4_1 + 16 | 0;
     continue;
    } else {
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $6_1, 9887, 1497453121, HEAP32[$0_1 + 136 >> 2])
    }
    break;
   };
  }
  HEAP32[$1_1 + 76 >> 2] = HEAP32[$0_1 + 144 >> 2];
  $3_1 = HEAP32[$0_1 + 152 >> 2];
  HEAP32[$1_1 + 80 >> 2] = $3_1;
  label$11 : {
   if (!$3_1) {
    HEAP32[$1_1 + 72 >> 2] = 0;
    break label$11;
   }
   $3_1 = $1_1;
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, HEAP32[$0_1 + 160 >> 2]) | 0;
   HEAP32[$3_1 + 72 >> 2] = $1_1;
   if (!$1_1) {
    break label$11
   }
   $1_1 = HEAP32[$0_1 + 152 >> 2];
   $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, 20, $1_1) | 0;
   $3_1 = HEAP32[$5_1 + 8 >> 2];
   $7_1 = 0;
   $4_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
   while (1) {
    if ($4_1) {
     $1_1 = HEAP32[$0_1 + 160 >> 2] + $7_1 | 0;
     HEAP16[$3_1 + 14 >> 1] = HEAPU16[$1_1 + 6 >> 1];
     HEAP16[$3_1 + 16 >> 1] = HEAPU16[$1_1 + 8 >> 1];
     HEAP16[$3_1 + 18 >> 1] = HEAPU16[$1_1 + 10 >> 1];
     HEAP16[$3_1 + 8 >> 1] = HEAPU16[$1_1 >> 1];
     HEAP16[$3_1 + 10 >> 1] = HEAPU16[$1_1 + 2 >> 1];
     $6_1 = $1_1 + 12 | 0;
     $8_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $8_1;
     HEAP16[$3_1 + 12 >> 1] = HEAPU16[$1_1 + 4 >> 1];
     $4_1 = $4_1 - 1 | 0;
     $7_1 = $7_1 + 32 | 0;
     $3_1 = $3_1 + 20 | 0;
     continue;
    } else {
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $5_1, 9910, 1497453121, HEAP32[$0_1 + 160 >> 2])
    }
    break;
   };
  }
  return 9931;
 }
 
 function $290($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $3_1 = global$0 + -64 | 0;
  global$0 = $3_1;
  $291($0_1 + 20 | 0, $1_1 + 16 | 0);
  $291($0_1 + 4 | 0, $1_1);
  $291($0_1 + 36 | 0, $1_1 + 32 | 0);
  HEAP32[$0_1 + 56 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP8[$0_1 + 60 | 0] = HEAP32[$1_1 + 52 >> 2] != 0;
  $2_1 = HEAP32[$1_1 + 56 >> 2];
  $6_1 = $1($3_1, 0, 64);
  $292($0_1 + 84 | 0, $2_1, $6_1);
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $2_1 = HEAP32[$1_1 + 64 >> 2];
   while (1) {
    if (!$3_1) {
     break label$1
    }
    $291((HEAP32[$0_1 + 96 >> 2] + $5_1 | 0) + 16 | 0, $2_1 + 16 | 0);
    $291(HEAP32[$0_1 + 96 >> 2] + $5_1 | 0, $2_1);
    $4_1 = HEAP32[$0_1 + 96 >> 2] + $5_1 | 0;
    HEAP32[$4_1 + 32 >> 2] = HEAP32[$2_1 + 32 >> 2];
    $7_1 = $2_1 + 36 | 0;
    $8_1 = HEAP32[$7_1 + 4 >> 2];
    $4_1 = $4_1 + 36 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $8_1;
    $3_1 = $3_1 - 1 | 0;
    $5_1 = $5_1 - -64 | 0;
    $2_1 = $2_1 + 48 | 0;
    continue;
   };
  }
  $2_1 = HEAP32[$1_1 + 60 >> 2];
  $3_1 = $6_1 + 8 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$6_1 >> 2] = 0;
  HEAP32[$6_1 + 4 >> 2] = 0;
  $131($0_1 + 124 | 0, $2_1, $6_1);
  label$3 : {
   if (!$2_1) {
    break label$3
   }
   $3_1 = 0;
   $5_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $7_1 = HEAP32[$1_1 + 68 >> 2];
   while (1) {
    if (!$5_1) {
     break label$3
    }
    $2_1 = HEAP32[$0_1 + 136 >> 2] + $3_1 | 0;
    $4_1 = $3_1 + $7_1 | 0;
    HEAP16[$2_1 + 6 >> 1] = HEAPU16[$4_1 + 6 >> 1];
    HEAP16[$2_1 + 8 >> 1] = HEAPU16[$4_1 + 8 >> 1];
    HEAP16[$2_1 + 10 >> 1] = HEAPU16[$4_1 + 10 >> 1];
    HEAP16[$2_1 >> 1] = HEAPU16[$4_1 >> 1];
    HEAP16[$2_1 + 2 >> 1] = HEAPU16[$4_1 + 2 >> 1];
    HEAP32[$2_1 + 12 >> 2] = HEAP32[$4_1 + 12 >> 2];
    HEAP16[$2_1 + 4 >> 1] = HEAPU16[$4_1 + 4 >> 1];
    $5_1 = $5_1 - 1 | 0;
    $3_1 = $3_1 + 16 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 144 >> 2] = HEAP32[$1_1 + 76 >> 2];
  $2_1 = HEAP32[$1_1 + 80 >> 2];
  $293($0_1 + 148 | 0, $2_1, $6_1);
  label$5 : {
   if (!$2_1) {
    break label$5
   }
   $5_1 = 0;
   $3_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $2_1 = HEAP32[$1_1 + 72 >> 2];
   while (1) {
    if (!$3_1) {
     break label$5
    }
    $1_1 = HEAP32[$0_1 + 160 >> 2] + $5_1 | 0;
    HEAP16[$1_1 + 6 >> 1] = HEAPU16[$2_1 + 14 >> 1];
    HEAP16[$1_1 + 8 >> 1] = HEAPU16[$2_1 + 16 >> 1];
    HEAP16[$1_1 + 10 >> 1] = HEAPU16[$2_1 + 18 >> 1];
    HEAP16[$1_1 >> 1] = HEAPU16[$2_1 + 8 >> 1];
    HEAP16[$1_1 + 2 >> 1] = HEAPU16[$2_1 + 10 >> 1];
    $7_1 = HEAP32[$2_1 + 4 >> 2];
    $4_1 = $1_1 + 12 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $7_1;
    HEAP16[$1_1 + 4 >> 1] = HEAPU16[$2_1 + 12 >> 1];
    $3_1 = $3_1 - 1 | 0;
    $5_1 = $5_1 + 32 | 0;
    $2_1 = $2_1 + 20 | 0;
    continue;
   };
  }
  global$0 = $6_1 - -64 | 0;
 }
 
 function $291($0_1, $1_1) {
  var $2_1 = 0;
  while (1) {
   if (($2_1 | 0) != 16) {
    HEAPF32[$0_1 + $2_1 >> 2] = HEAPF32[$1_1 + $2_1 >> 2];
    $2_1 = $2_1 + 4 | 0;
    continue;
   }
   break;
  };
 }
 
 function $292($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = HEAP32[$0_1 + 4 >> 2];
   if (($3_1 | 0) > ($1_1 | 0)) {
    break label$1
   }
   if (($1_1 | 0) > ($3_1 | 0)) {
    $315($0_1, $1_1)
   }
   $4_1 = $1_1 - $3_1 | 0;
   $3_1 = $3_1 << 6;
   while (1) {
    if (!$4_1) {
     break label$1
    }
    $2(HEAP32[$0_1 + 12 >> 2] + $3_1 | 0, $2_1, 64);
    $4_1 = $4_1 - 1 | 0;
    $3_1 = $3_1 - -64 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $293($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   $5_1 = HEAP32[$0_1 + 4 >> 2];
   if (($5_1 | 0) > ($1_1 | 0)) {
    break label$1
   }
   if (($1_1 | 0) > ($5_1 | 0)) {
    $296($0_1, $1_1)
   }
   $7_1 = $1_1 - $5_1 | 0;
   $5_1 = $5_1 << 5;
   while (1) {
    if (!$7_1) {
     break label$1
    }
    $4_1 = HEAP32[$2_1 + 4 >> 2];
    $6_1 = HEAP32[$0_1 + 12 >> 2] + $5_1 | 0;
    $3_1 = $6_1;
    HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $4_1;
    $4_1 = $2_1 + 24 | 0;
    $8_1 = HEAP32[$4_1 + 4 >> 2];
    $3_1 = $3_1 + 24 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $8_1;
    $4_1 = $2_1 + 16 | 0;
    $8_1 = HEAP32[$4_1 + 4 >> 2];
    $3_1 = $6_1 + 16 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $8_1;
    $3_1 = $2_1 + 8 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $6_1 = $6_1 + 8 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $4_1;
    $7_1 = $7_1 - 1 | 0;
    $5_1 = $5_1 + 32 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $294($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $3_1 = global$0 + -64 | 0;
  global$0 = $3_1;
  $295($0_1 + 20 | 0, $1_1 + 32 | 0);
  $295($0_1 + 4 | 0, $1_1);
  $295($0_1 + 36 | 0, $1_1 - -64 | 0);
  HEAP32[$0_1 + 56 >> 2] = HEAP32[$1_1 + 96 >> 2];
  HEAP8[$0_1 + 60 | 0] = HEAP32[$1_1 + 100 >> 2] != 0;
  $2_1 = HEAP32[$1_1 + 104 >> 2];
  $6_1 = $1($3_1, 0, 64);
  $292($0_1 + 84 | 0, $2_1, $6_1);
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $2_1 = HEAP32[$1_1 + 112 >> 2];
   while (1) {
    if (!$3_1) {
     break label$1
    }
    $295((HEAP32[$0_1 + 96 >> 2] + $5_1 | 0) + 16 | 0, $2_1 + 32 | 0);
    $295(HEAP32[$0_1 + 96 >> 2] + $5_1 | 0, $2_1);
    $4_1 = HEAP32[$0_1 + 96 >> 2] + $5_1 | 0;
    HEAP32[$4_1 + 32 >> 2] = HEAP32[$2_1 - -64 >> 2];
    $7_1 = $2_1 + 68 | 0;
    $8_1 = HEAP32[$7_1 + 4 >> 2];
    $4_1 = $4_1 + 36 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $8_1;
    $3_1 = $3_1 - 1 | 0;
    $5_1 = $5_1 - -64 | 0;
    $2_1 = $2_1 + 80 | 0;
    continue;
   };
  }
  $2_1 = HEAP32[$1_1 + 108 >> 2];
  $3_1 = $6_1 + 8 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$6_1 >> 2] = 0;
  HEAP32[$6_1 + 4 >> 2] = 0;
  $131($0_1 + 124 | 0, $2_1, $6_1);
  label$3 : {
   if (!$2_1) {
    break label$3
   }
   $3_1 = 0;
   $5_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $7_1 = HEAP32[$1_1 + 116 >> 2];
   while (1) {
    if (!$5_1) {
     break label$3
    }
    $2_1 = HEAP32[$0_1 + 136 >> 2] + $3_1 | 0;
    $4_1 = $3_1 + $7_1 | 0;
    HEAP16[$2_1 + 6 >> 1] = HEAPU16[$4_1 + 6 >> 1];
    HEAP16[$2_1 + 8 >> 1] = HEAPU16[$4_1 + 8 >> 1];
    HEAP16[$2_1 + 10 >> 1] = HEAPU16[$4_1 + 10 >> 1];
    HEAP16[$2_1 >> 1] = HEAPU16[$4_1 >> 1];
    HEAP16[$2_1 + 2 >> 1] = HEAPU16[$4_1 + 2 >> 1];
    HEAP32[$2_1 + 12 >> 2] = HEAP32[$4_1 + 12 >> 2];
    HEAP16[$2_1 + 4 >> 1] = HEAPU16[$4_1 + 4 >> 1];
    $5_1 = $5_1 - 1 | 0;
    $3_1 = $3_1 + 16 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 144 >> 2] = HEAP32[$1_1 + 120 >> 2];
  $2_1 = HEAP32[$1_1 + 124 >> 2];
  $293($0_1 + 148 | 0, $2_1, $6_1);
  label$5 : {
   if (!$2_1) {
    break label$5
   }
   $5_1 = 0;
   $3_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $2_1 = HEAP32[$1_1 + 128 >> 2];
   while (1) {
    if (!$3_1) {
     break label$5
    }
    $1_1 = HEAP32[$0_1 + 160 >> 2] + $5_1 | 0;
    HEAP16[$1_1 + 6 >> 1] = HEAPU16[$2_1 + 14 >> 1];
    HEAP16[$1_1 + 8 >> 1] = HEAPU16[$2_1 + 16 >> 1];
    HEAP16[$1_1 + 10 >> 1] = HEAPU16[$2_1 + 18 >> 1];
    HEAP16[$1_1 >> 1] = HEAPU16[$2_1 + 8 >> 1];
    HEAP16[$1_1 + 2 >> 1] = HEAPU16[$2_1 + 10 >> 1];
    $7_1 = HEAP32[$2_1 + 4 >> 2];
    $4_1 = $1_1 + 12 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $7_1;
    HEAP16[$1_1 + 4 >> 1] = HEAPU16[$2_1 + 12 >> 1];
    $3_1 = $3_1 - 1 | 0;
    $5_1 = $5_1 + 32 | 0;
    $2_1 = $2_1 + 20 | 0;
    continue;
   };
  }
  global$0 = $6_1 - -64 | 0;
 }
 
 function $295($0_1, $1_1) {
  var $2_1 = 0;
  while (1) {
   if (($2_1 | 0) != 16) {
    HEAPF32[$0_1 + $2_1 >> 2] = HEAPF64[$1_1 >> 3];
    $2_1 = $2_1 + 4 | 0;
    $1_1 = $1_1 + 8 | 0;
    continue;
   }
   break;
  };
 }
 
 function $296($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $9_1 = $53($1_1 << 5)
   }
   $4_1 = HEAP32[$0_1 + 4 >> 2];
   $4_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
   while (1) {
    if ($4_1) {
     $5_1 = HEAP32[$0_1 + 12 >> 2] + $8_1 | 0;
     $2_1 = $5_1;
     $6_1 = HEAP32[$2_1 + 4 >> 2];
     $3_1 = $9_1 + $8_1 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $2_1 = $2_1 + 24 | 0;
     $6_1 = HEAP32[$2_1 + 4 >> 2];
     $7_1 = $3_1 + 24 | 0;
     HEAP32[$7_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $6_1;
     $7_1 = $5_1 + 16 | 0;
     $6_1 = HEAP32[$7_1 + 4 >> 2];
     $2_1 = $3_1 + 16 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $6_1;
     $5_1 = $5_1 + 8 | 0;
     $2_1 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $3_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $2_1;
     $4_1 = $4_1 - 1 | 0;
     $8_1 = $8_1 + 32 | 0;
     continue;
    }
    break;
   };
   $96($0_1);
   HEAP32[$0_1 + 12 >> 2] = $9_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $297($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = 0, $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = 0, $24_1 = 0, $25 = Math_fround(0), $26_1 = 0, $27_1 = 0, $28_1 = 0;
  $4_1 = global$0 - 128 | 0;
  global$0 = $4_1;
  $17_1 = HEAP32[$0_1 + 56 >> 2];
  $11_1 = $2_1 - $1_1 | 0;
  label$1 : {
   if (($11_1 | 0) == 1) {
    label$3 : {
     if (HEAPU8[$0_1 + 60 | 0]) {
      $1_1 = HEAP32[$0_1 + 116 >> 2] + ($1_1 << 4) | 0;
      $5_1 = HEAP32[$1_1 + 4 >> 2];
      $2_1 = HEAP32[$0_1 + 136 >> 2] + ($17_1 << 4) | 0;
      $3_1 = $2_1;
      HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $5_1;
      $1_1 = $1_1 + 8 | 0;
      $3_1 = HEAP32[$1_1 + 4 >> 2];
      $2_1 = $2_1 + 8 | 0;
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$2_1 + 4 >> 2] = $3_1;
      break label$3;
     }
     $2(HEAP32[$0_1 + 96 >> 2] + ($17_1 << 6) | 0, HEAP32[$0_1 + 76 >> 2] + ($1_1 << 6) | 0, 64);
    }
    HEAP32[$0_1 + 56 >> 2] = HEAP32[$0_1 + 56 >> 2] + 1;
    break label$1;
   }
   $16_1 = ($1_1 | 0) < ($2_1 | 0) ? $2_1 : $1_1;
   $3_1 = $1_1;
   while (1) {
    if (($3_1 | 0) != ($16_1 | 0)) {
     $298($4_1 + 48 | 0, $0_1, $3_1);
     $299($4_1 + 32 | 0, $0_1, $3_1);
     $3_1 = $3_1 + 1 | 0;
     $9_1 = Math_fround($9_1 + Math_fround(Math_fround(HEAPF32[$4_1 + 56 >> 2] + HEAPF32[$4_1 + 40 >> 2]) * Math_fround(.5)));
     $12_1 = Math_fround($12_1 + Math_fround(Math_fround(HEAPF32[$4_1 + 52 >> 2] + HEAPF32[$4_1 + 36 >> 2]) * Math_fround(.5)));
     $13_1 = Math_fround($13_1 + Math_fround(Math_fround(HEAPF32[$4_1 + 48 >> 2] + HEAPF32[$4_1 + 32 >> 2]) * Math_fround(.5)));
     continue;
    }
    break;
   };
   $14_1 = Math_fround($11_1 | 0);
   $18_1 = Math_fround(Math_fround(1.0) / $14_1);
   $21_1 = Math_fround($18_1 * $9_1);
   $22_1 = Math_fround($18_1 * $12_1);
   $25 = Math_fround($18_1 * $13_1);
   $13_1 = Math_fround(0.0);
   $12_1 = Math_fround(0.0);
   $9_1 = Math_fround(0.0);
   $3_1 = $1_1;
   while (1) {
    if (($3_1 | 0) != ($16_1 | 0)) {
     $298($4_1 + 48 | 0, $0_1, $3_1);
     $299($4_1 + 32 | 0, $0_1, $3_1);
     $3_1 = $3_1 + 1 | 0;
     $19_1 = $9_1;
     $9_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 56 >> 2] + HEAPF32[$4_1 + 40 >> 2]) * Math_fround(.5)) - $21_1);
     $9_1 = Math_fround($19_1 + Math_fround($9_1 * $9_1));
     $19_1 = $12_1;
     $12_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 52 >> 2] + HEAPF32[$4_1 + 36 >> 2]) * Math_fround(.5)) - $22_1);
     $12_1 = Math_fround($19_1 + Math_fround($12_1 * $12_1));
     $19_1 = $13_1;
     $13_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 48 >> 2] + HEAPF32[$4_1 + 32 >> 2]) * Math_fround(.5)) - $25);
     $13_1 = Math_fround($19_1 + Math_fround($13_1 * $13_1));
     continue;
    }
    break;
   };
   HEAP32[$4_1 + 44 >> 2] = 0;
   $14_1 = Math_fround(Math_fround(1.0) / Math_fround($14_1 + Math_fround(-1.0)));
   $21_1 = Math_fround($14_1 * $13_1);
   $22_1 = Math_fround($14_1 * $9_1);
   $5_1 = ($21_1 < $22_1) << 1;
   $14_1 = Math_fround($14_1 * $12_1);
   $13_1 = Math_fround(0.0);
   $12_1 = Math_fround(0.0);
   $9_1 = Math_fround(0.0);
   $3_1 = $1_1;
   while (1) {
    if (($3_1 | 0) != ($16_1 | 0)) {
     $298($4_1 + 48 | 0, $0_1, $3_1);
     $299($4_1 + 16 | 0, $0_1, $3_1);
     $3_1 = $3_1 + 1 | 0;
     $13_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 56 >> 2] + HEAPF32[$4_1 + 24 >> 2]) * Math_fround(.5)) + $13_1);
     $12_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 52 >> 2] + HEAPF32[$4_1 + 20 >> 2]) * Math_fround(.5)) + $12_1);
     $9_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 48 >> 2] + HEAPF32[$4_1 + 16 >> 2]) * Math_fround(.5)) + $9_1);
     continue;
    }
    break;
   };
   HEAPF32[$4_1 + 40 >> 2] = $18_1 * $13_1;
   HEAPF32[$4_1 + 36 >> 2] = $18_1 * $12_1;
   HEAPF32[$4_1 + 32 >> 2] = $18_1 * $9_1;
   $3_1 = ($14_1 > $21_1 ? ($14_1 < $22_1 ? 2 : 1) : $5_1) << 2;
   $10_1 = $3_1 + ($4_1 + 16 | 0) | 0;
   $9_1 = HEAPF32[$3_1 + ($4_1 + 32 | 0) >> 2];
   $6_1 = $1_1 << 4;
   $15_1 = $1_1 << 6;
   $5_1 = $1_1;
   $3_1 = $1_1;
   while (1) {
    if (($3_1 | 0) != ($16_1 | 0)) {
     $298($4_1 + 48 | 0, $0_1, $3_1);
     $299($4_1, $0_1, $3_1);
     HEAP32[$4_1 + 28 >> 2] = 0;
     HEAPF32[$4_1 + 24 >> 2] = Math_fround(HEAPF32[$4_1 + 56 >> 2] + HEAPF32[$4_1 + 8 >> 2]) * Math_fround(.5);
     HEAPF32[$4_1 + 20 >> 2] = Math_fround(HEAPF32[$4_1 + 52 >> 2] + HEAPF32[$4_1 + 4 >> 2]) * Math_fround(.5);
     HEAPF32[$4_1 + 16 >> 2] = Math_fround(HEAPF32[$4_1 + 48 >> 2] + HEAPF32[$4_1 >> 2]) * Math_fround(.5);
     if ($9_1 < HEAPF32[$10_1 >> 2]) {
      label$14 : {
       if (HEAPU8[$0_1 + 60 | 0]) {
        $8_1 = HEAP32[$0_1 + 116 >> 2];
        $7_1 = $8_1 + $6_1 | 0;
        $26_1 = HEAP32[$7_1 >> 2];
        $20_1 = HEAP32[$7_1 + 4 >> 2];
        $24_1 = $5_1 << 4;
        $8_1 = $8_1 + $24_1 | 0;
        $23_1 = HEAP32[$8_1 + 4 >> 2];
        HEAP32[$7_1 >> 2] = HEAP32[$8_1 >> 2];
        HEAP32[$7_1 + 4 >> 2] = $23_1;
        $7_1 = $7_1 + 8 | 0;
        $23_1 = HEAP32[$7_1 >> 2];
        $27_1 = HEAP32[$7_1 + 4 >> 2];
        $8_1 = $8_1 + 8 | 0;
        $28_1 = HEAP32[$8_1 + 4 >> 2];
        HEAP32[$7_1 >> 2] = HEAP32[$8_1 >> 2];
        HEAP32[$7_1 + 4 >> 2] = $28_1;
        $7_1 = HEAP32[$0_1 + 116 >> 2] + $24_1 | 0;
        HEAP32[$7_1 >> 2] = $26_1;
        HEAP32[$7_1 + 4 >> 2] = $20_1;
        $7_1 = $7_1 + 8 | 0;
        HEAP32[$7_1 >> 2] = $23_1;
        HEAP32[$7_1 + 4 >> 2] = $27_1;
        break label$14;
       }
       $7_1 = HEAP32[$0_1 + 76 >> 2];
       $8_1 = $7_1 + $15_1 | 0;
       $2($4_1 + 48 | 0, $8_1, 64);
       $20_1 = $7_1;
       $7_1 = $5_1 << 6;
       $2($8_1, $20_1 + $7_1 | 0, 64);
       $2($7_1 + HEAP32[$0_1 + 76 >> 2] | 0, $4_1 + 48 | 0, 64);
      }
      $5_1 = $5_1 + 1 | 0;
     }
     $6_1 = $6_1 + 16 | 0;
     $15_1 = $15_1 - -64 | 0;
     $3_1 = $3_1 + 1 | 0;
     continue;
    }
    break;
   };
   $6_1 = ($11_1 >> 1) + $1_1 | 0;
   $3_1 = ($11_1 | 0) / 3 | 0;
   $11_1 = (($3_1 ^ -1) + $2_1 | 0) <= ($5_1 | 0);
   $15_1 = $1_1 + $3_1 | 0;
   $3_1 = $0_1 + 20 | 0;
   $7_1 = HEAP32[$0_1 + 56 >> 2];
   label$16 : {
    if (HEAPU8[$0_1 + 60 | 0]) {
     $300($0_1, HEAP32[$0_1 + 136 >> 2] + ($7_1 << 4) | 0, HEAPF32[$3_1 >> 2], HEAPF32[$0_1 + 24 >> 2], HEAPF32[$0_1 + 28 >> 2], 0);
     break label$16;
    }
    $20_1 = HEAP32[$3_1 + 4 >> 2];
    $10_1 = HEAP32[$0_1 + 96 >> 2] + ($7_1 << 6) | 0;
    $8_1 = $10_1;
    HEAP32[$8_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $20_1;
    $3_1 = $3_1 + 8 | 0;
    $8_1 = HEAP32[$3_1 + 4 >> 2];
    $10_1 = $10_1 + 8 | 0;
    HEAP32[$10_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$10_1 + 4 >> 2] = $8_1;
   }
   $11_1 = $11_1 ? $6_1 : $5_1;
   $15_1 = ($5_1 | 0) <= ($15_1 | 0);
   $3_1 = $0_1 + 4 | 0;
   $5_1 = HEAP32[$0_1 + 56 >> 2];
   label$18 : {
    if (HEAPU8[$0_1 + 60 | 0]) {
     $300($0_1, (HEAP32[$0_1 + 136 >> 2] + ($5_1 << 4) | 0) + 6 | 0, HEAPF32[$3_1 >> 2], HEAPF32[$0_1 + 8 >> 2], HEAPF32[$0_1 + 12 >> 2], 1);
     break label$18;
    }
    $8_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = HEAP32[$0_1 + 96 >> 2] + ($5_1 << 6) | 0;
    HEAP32[$5_1 + 16 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$5_1 + 20 >> 2] = $8_1;
    $3_1 = $3_1 + 8 | 0;
    $10_1 = HEAP32[$3_1 + 4 >> 2];
    $5_1 = $5_1 + 24 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $10_1;
   }
   $11_1 = $15_1 ? $6_1 : $11_1;
   $5_1 = $1_1;
   while (1) {
    label$21 : {
     $6_1 = HEAP32[$0_1 + 56 >> 2];
     if (($5_1 | 0) == ($16_1 | 0)) {
      break label$21
     }
     $299($4_1 + 48 | 0, $0_1, $5_1);
     $298($4_1 + 32 | 0, $0_1, $5_1);
     label$22 : {
      if (HEAPU8[$0_1 + 60 | 0]) {
       $3_1 = 0;
       $300($0_1, $4_1 + 16 | 0, HEAPF32[$4_1 + 48 >> 2], HEAPF32[$4_1 + 52 >> 2], HEAPF32[$4_1 + 56 >> 2], 0);
       $300($0_1, $4_1, HEAPF32[$4_1 + 32 >> 2], HEAPF32[$4_1 + 36 >> 2], HEAPF32[$4_1 + 40 >> 2], 1);
       $15_1 = HEAP32[$0_1 + 136 >> 2] + ($6_1 << 4) | 0;
       while (1) {
        if (($3_1 | 0) == 6) {
         break label$22
        }
        $10_1 = HEAPU16[($4_1 + 16 | 0) + $3_1 >> 1];
        $6_1 = $3_1 + $15_1 | 0;
        if ($10_1 >>> 0 < HEAPU16[$6_1 >> 1]) {
         HEAP16[$6_1 >> 1] = $10_1
        }
        $10_1 = HEAPU16[$4_1 + $3_1 >> 1];
        $6_1 = $6_1 + 6 | 0;
        if ($10_1 >>> 0 > HEAPU16[$6_1 >> 1]) {
         HEAP16[$6_1 >> 1] = $10_1
        }
        $3_1 = $3_1 + 2 | 0;
        continue;
       };
      }
      $3_1 = $6_1 << 6;
      $252($3_1 + HEAP32[$0_1 + 96 >> 2] | 0, $4_1 + 48 | 0);
      $253(($3_1 + HEAP32[$0_1 + 96 >> 2] | 0) + 16 | 0, $4_1 + 32 | 0);
     }
     $5_1 = $5_1 + 1 | 0;
     continue;
    }
    break;
   };
   $3_1 = $6_1 + 1 | 0;
   HEAP32[$0_1 + 56 >> 2] = $3_1;
   $297($0_1, $1_1, $11_1);
   $5_1 = HEAP32[$0_1 + 56 >> 2];
   $297($0_1, $11_1, $2_1);
   $1_1 = HEAP32[$0_1 + 56 >> 2] - $17_1 | 0;
   $6_1 = HEAPU8[$0_1 + 60 | 0];
   label$27 : {
    if (!$6_1) {
     break label$27
    }
    if (($1_1 | 0) < 129) {
     break label$27
    }
    $6_1 = HEAP32[$0_1 + 136 >> 2];
    $16_1 = $6_1 + ($5_1 << 4) | 0;
    $2_1 = HEAP32[$16_1 + 12 >> 2];
    $2_1 = ($2_1 | 0) > -1 ? 1 : 0 - $2_1 | 0;
    $17_1 = $6_1 + ($3_1 << 4) | 0;
    $6_1 = HEAP32[$17_1 + 12 >> 2];
    $11_1 = ($6_1 | 0) > -1 ? 1 : 0 - $6_1 | 0;
    if (($11_1 | 0) <= 128) {
     $6_1 = $301($0_1 + 148 | 0, $4_1 + 48 | 0);
     $302($6_1, $17_1);
     HEAP32[$6_1 + 16 >> 2] = $11_1;
     HEAP32[$6_1 + 12 >> 2] = $3_1;
    }
    if (($2_1 | 0) <= 128) {
     $3_1 = $301($0_1 + 148 | 0, $4_1 + 48 | 0);
     $302($3_1, $16_1);
     HEAP32[$3_1 + 16 >> 2] = $2_1;
     HEAP32[$3_1 + 12 >> 2] = $5_1;
    }
    HEAP32[$0_1 + 168 >> 2] = HEAP32[$0_1 + 152 >> 2];
    $6_1 = HEAPU8[$0_1 + 60 | 0];
   }
   if ($6_1 & 255) {
    HEAP32[(HEAP32[$0_1 + 136 >> 2] + ($7_1 << 4) | 0) + 12 >> 2] = 0 - $1_1;
    break label$1;
   }
   HEAP32[(HEAP32[$0_1 + 96 >> 2] + ($7_1 << 6) | 0) + 32 >> 2] = $1_1;
  }
  global$0 = $4_1 + 128 | 0;
 }
 
 function $298($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  if (HEAPU8[$1_1 + 60 | 0]) {
   $3_1 = $0_1;
   $0_1 = HEAP32[$1_1 + 116 >> 2] + ($2_1 << 4) | 0;
   $303($3_1, $1_1, HEAPU16[$0_1 + 6 >> 1], HEAPU16[$0_1 + 8 >> 1], HEAPU16[$0_1 + 10 >> 1]);
   return;
  }
  $1_1 = HEAP32[$1_1 + 76 >> 2] + ($2_1 << 6) | 0;
  $2_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  $1_1 = $1_1 + 24 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $299($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  if (HEAPU8[$1_1 + 60 | 0]) {
   $3_1 = $0_1;
   $0_1 = HEAP32[$1_1 + 116 >> 2] + ($2_1 << 4) | 0;
   $303($3_1, $1_1, HEAPU16[$0_1 >> 1], HEAPU16[$0_1 + 2 >> 1], HEAPU16[$0_1 + 4 >> 1]);
   return;
  }
  $1_1 = HEAP32[$1_1 + 76 >> 2] + ($2_1 << 6) | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $300($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0;
  $4_1 = Math_fround(Math_fround($4_1 - HEAPF32[$0_1 + 12 >> 2]) * HEAPF32[$0_1 + 44 >> 2]);
  $3_1 = Math_fround(Math_fround($3_1 - HEAPF32[$0_1 + 8 >> 2]) * HEAPF32[$0_1 + 40 >> 2]);
  $2_1 = Math_fround(Math_fround($2_1 - HEAPF32[$0_1 + 4 >> 2]) * HEAPF32[$0_1 + 36 >> 2]);
  $0_1 = $1_1;
  label$1 : {
   if ($5_1) {
    $5_1 = $1_1;
    $2_1 = Math_fround($2_1 + Math_fround(1.0));
    label$3 : {
     if ($2_1 < Math_fround(4294967296.0) & $2_1 >= Math_fround(0.0)) {
      $6_1 = ~~$2_1 >>> 0;
      break label$3;
     }
     $6_1 = 0;
    }
    HEAP16[$5_1 >> 1] = $6_1 | 1;
    $2_1 = Math_fround($4_1 + Math_fround(1.0));
    label$5 : {
     if ($2_1 < Math_fround(4294967296.0) & $2_1 >= Math_fround(0.0)) {
      $5_1 = ~~$2_1 >>> 0;
      break label$5;
     }
     $5_1 = 0;
    }
    $6_1 = $5_1 | 1;
    $2_1 = Math_fround($3_1 + Math_fround(1.0));
    label$7 : {
     if ($2_1 < Math_fround(4294967296.0) & $2_1 >= Math_fround(0.0)) {
      $5_1 = ~~$2_1 >>> 0;
      break label$7;
     }
     $5_1 = 0;
    }
    $5_1 = $5_1 | 1;
    break label$1;
   }
   $5_1 = $1_1;
   if ($2_1 < Math_fround(4294967296.0) & $2_1 >= Math_fround(0.0)) {
    $6_1 = ~~$2_1 >>> 0
   } else {
    $6_1 = 0
   }
   HEAP16[$5_1 >> 1] = $6_1 & 65534;
   if ($4_1 < Math_fround(4294967296.0) & $4_1 >= Math_fround(0.0)) {
    $5_1 = ~~$4_1 >>> 0
   } else {
    $5_1 = 0
   }
   $6_1 = $5_1 & 65534;
   if ($3_1 < Math_fround(4294967296.0) & $3_1 >= Math_fround(0.0)) {
    $5_1 = ~~$3_1 >>> 0
   } else {
    $5_1 = 0
   }
   $5_1 = $5_1 & 65534;
  }
  HEAP16[$0_1 + 4 >> 1] = $6_1;
  HEAP16[$1_1 + 2 >> 1] = $5_1;
 }
 
 function $301($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  $3_1 = $2_1;
  if (($2_1 | 0) == HEAP32[$0_1 + 8 >> 2]) {
   $296($0_1, $2_1 ? $2_1 << 1 : 1);
   $3_1 = HEAP32[$0_1 + 4 >> 2];
  }
  HEAP32[$0_1 + 4 >> 2] = $3_1 + 1;
  $6_1 = $2_1 << 5;
  $5_1 = $6_1 + HEAP32[$0_1 + 12 >> 2] | 0;
  $4_1 = $5_1 + 24 | 0;
  $2_1 = $1_1 + 24 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $3_1;
  $2_1 = $1_1 + 16 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $4_1 = $5_1 + 16 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $3_1;
  $2_1 = $1_1 + 8 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $4_1 = $5_1 + 8 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $3_1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $3_1;
  return $6_1 + HEAP32[$0_1 + 12 >> 2] | 0;
 }
 
 function $302($0_1, $1_1) {
  HEAP16[$0_1 >> 1] = HEAPU16[$1_1 >> 1];
  HEAP16[$0_1 + 2 >> 1] = HEAPU16[$1_1 + 2 >> 1];
  HEAP16[$0_1 + 4 >> 1] = HEAPU16[$1_1 + 4 >> 1];
  HEAP16[$0_1 + 6 >> 1] = HEAPU16[$1_1 + 6 >> 1];
  HEAP16[$0_1 + 8 >> 1] = HEAPU16[$1_1 + 8 >> 1];
  HEAP16[$0_1 + 10 >> 1] = HEAPU16[$1_1 + 10 >> 1];
 }
 
 function $303($0_1, $1_1, $2_1, $3_1, $4_1) {
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 + 8 >> 2] = Math_fround(($4_1 & 65535) >>> 0) / HEAPF32[$1_1 + 44 >> 2];
  HEAPF32[$0_1 + 4 >> 2] = Math_fround(($3_1 & 65535) >>> 0) / HEAPF32[$1_1 + 40 >> 2];
  HEAPF32[$0_1 >> 2] = Math_fround(($2_1 & 65535) >>> 0) / HEAPF32[$1_1 + 36 >> 2];
  $89($0_1, $1_1 + 4 | 0);
 }
 
 function $304($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $6_1 = $2_1 + 8 | 0;
  $8_1 = HEAP32[$6_1 + 4 >> 2];
  $7_1 = $4_1 + 8 | 0;
  $5_1 = $7_1;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $8_1;
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  $253($4_1, $0_1 + 4 | 0);
  $252($4_1, $0_1 + 20 | 0);
  $300($0_1, $1_1, HEAPF32[$4_1 >> 2], HEAPF32[$4_1 + 4 >> 2], HEAPF32[$7_1 >> 2], $3_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $305($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $0_1 = ($4_1 << 4) + $0_1 | 0;
  while (1) {
   if (($4_1 | 0) < ($5_1 | 0)) {
    $6_1 = HEAP32[$0_1 + 12 >> 2];
    $8_1 = $306(HEAPU16[$2_1 >> 1], HEAPU16[$2_1 + 2 >> 1], HEAPU16[$2_1 + 4 >> 1], HEAPU16[$3_1 >> 1], HEAPU16[$3_1 + 2 >> 1], HEAPU16[$3_1 + 4 >> 1], HEAPU16[$0_1 >> 1], HEAPU16[$0_1 + 2 >> 1], HEAPU16[$0_1 + 4 >> 1], HEAPU16[$0_1 + 6 >> 1], HEAPU16[$0_1 + 8 >> 1], HEAPU16[$0_1 + 10 >> 1]);
    label$3 : {
     if (!$8_1) {
      break label$3
     }
     if (($6_1 | 0) < 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $6_1 >>> 21 | 0, $6_1 & 2097151);
    }
    $7_1 = $7_1 + 1 | 0;
    if (($6_1 | 0) < 0 ? !$8_1 : 0) {
     $6_1 = HEAP32[$0_1 + 12 >> 2];
     $4_1 = $4_1 - $6_1 | 0;
     $0_1 = $0_1 - ($6_1 << 4) | 0;
    } else {
     $4_1 = $4_1 + 1 | 0;
     $0_1 = $0_1 + 16 | 0;
    }
    continue;
   }
   break;
  };
  if (HEAP32[5166] < ($7_1 | 0)) {
   HEAP32[5166] = $7_1
  }
 }
 
 function $306($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  return ($0_1 & 65535) >>> 0 <= ($9_1 & 65535) >>> 0 & ($3_1 & 65535) >>> 0 >= ($6_1 & 65535) >>> 0 & ($2_1 & 65535) >>> 0 <= ($11_1 & 65535) >>> 0 & ($5_1 & 65535) >>> 0 >= ($8_1 & 65535) >>> 0 & ($1_1 & 65535) >>> 0 <= ($10_1 & 65535) >>> 0 & ($4_1 & 65535) >>> 0 >= ($7_1 & 65535) >>> 0;
 }
 
 function $307($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0;
  while (1) {
   label$2 : {
    if ($306(HEAPU16[$2_1 >> 1], HEAPU16[$2_1 + 2 >> 1], HEAPU16[$2_1 + 4 >> 1], HEAPU16[$3_1 >> 1], HEAPU16[$3_1 + 2 >> 1], HEAPU16[$3_1 + 4 >> 1], HEAPU16[$0_1 >> 1], HEAPU16[$0_1 + 2 >> 1], HEAPU16[$0_1 + 4 >> 1], HEAPU16[$0_1 + 6 >> 1], HEAPU16[$0_1 + 8 >> 1], HEAPU16[$0_1 + 10 >> 1])) {
     $4_1 = HEAP32[$0_1 + 12 >> 2];
     if (($4_1 | 0) < 0) {
      break label$2
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $4_1 >>> 21 | 0, $4_1 & 2097151);
    }
    return;
   }
   $4_1 = $0_1 + 16 | 0;
   $307($4_1, $1_1, $2_1, $3_1);
   $5_1 = $0_1 + 32 | 0;
   $0_1 = HEAP32[$0_1 + 28 >> 2];
   $0_1 = ($0_1 | 0) > -1 ? $5_1 : $4_1 - ($0_1 << 4) | 0;
   continue;
  };
 }
 
 function $308($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  var $8_1 = 0, $9_1 = 0;
  $8_1 = 0;
  label$1 : {
   if (HEAPF32[$7_1 >> 2] < $0_1) {
    break label$1
   }
   $8_1 = 0;
   if (HEAPF32[$6_1 >> 2] > $3_1) {
    break label$1
   }
   $8_1 = 1;
  }
  label$2 : {
   if (HEAPF32[$7_1 + 8 >> 2] < $2_1) {
    break label$2
   }
   if (HEAPF32[$6_1 + 8 >> 2] > $5_1) {
    break label$2
   }
   $9_1 = $8_1;
  }
  $8_1 = 0;
  label$3 : {
   if (HEAPF32[$7_1 + 4 >> 2] < $1_1) {
    break label$3
   }
   if (HEAPF32[$6_1 + 4 >> 2] > $4_1) {
    break label$3
   }
   $8_1 = $9_1;
  }
  return $8_1;
 }
 
 function $309($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $12_1 = HEAP32[$2_1 >> 2];
  $8_1 = Math_fround(Math_fround(HEAPF32[($12_1 << 4) + $3_1 >> 2] - HEAPF32[$0_1 >> 2]) * HEAPF32[$1_1 >> 2]);
  HEAPF32[$4_1 >> 2] = $8_1;
  $13_1 = HEAP32[$2_1 + 4 >> 2];
  $10_1 = HEAPF32[$0_1 + 4 >> 2];
  $6_1 = HEAPF32[$1_1 + 4 >> 2];
  $7_1 = Math_fround(Math_fround(HEAPF32[(($13_1 << 4) + $3_1 | 0) + 4 >> 2] - $10_1) * $6_1);
  $11_1 = Math_fround(Math_fround(HEAPF32[(1 - $12_1 << 4) + $3_1 >> 2] - HEAPF32[$0_1 >> 2]) * HEAPF32[$1_1 >> 2]);
  label$1 : {
   if ($7_1 > $11_1) {
    break label$1
   }
   $9_1 = Math_fround($6_1 * Math_fround(HEAPF32[((1 - $13_1 << 4) + $3_1 | 0) + 4 >> 2] - $10_1));
   if ($9_1 < $8_1) {
    break label$1
   }
   if ($8_1 < $7_1) {
    HEAPF32[$4_1 >> 2] = $7_1;
    $8_1 = $7_1;
   }
   $2_1 = HEAP32[$2_1 + 8 >> 2];
   $10_1 = HEAPF32[$0_1 + 8 >> 2];
   $6_1 = HEAPF32[$1_1 + 8 >> 2];
   $7_1 = Math_fround(Math_fround(HEAPF32[(($2_1 << 4) + $3_1 | 0) + 8 >> 2] - $10_1) * $6_1);
   $9_1 = $9_1 < $11_1 ? $9_1 : $11_1;
   if ($7_1 > $9_1) {
    break label$1
   }
   $6_1 = Math_fround($6_1 * Math_fround(HEAPF32[((1 - $2_1 << 4) + $3_1 | 0) + 8 >> 2] - $10_1));
   if ($6_1 < $8_1) {
    break label$1
   }
   if ($8_1 < $7_1) {
    HEAPF32[$4_1 >> 2] = $7_1;
    $8_1 = $7_1;
   }
   $14_1 = $5_1 > $8_1 & ($6_1 < $9_1 ? $6_1 : $9_1) > Math_fround(0.0);
  }
  return $14_1;
 }
 
 function $310($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = 0, $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = 0, $26_1 = 0, $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = Math_fround(0), $34_1 = 0, $35_1 = 0, $36_1 = 0;
  $6_1 = global$0 - 128 | 0;
  global$0 = $6_1;
  label$1 : {
   if (HEAPU8[$0_1 + 60 | 0]) {
    $8_1 = HEAP32[$0_1 + 136 >> 2];
    $16_1 = HEAP32[$0_1 + 56 >> 2];
    HEAP32[$6_1 + 124 >> 2] = 0;
    $9_1 = $2_1 + 8 | 0;
    HEAPF32[$6_1 + 120 >> 2] = HEAPF32[$3_1 + 8 >> 2] - HEAPF32[$9_1 >> 2];
    HEAPF32[$6_1 + 116 >> 2] = HEAPF32[$3_1 + 4 >> 2] - HEAPF32[$2_1 + 4 >> 2];
    HEAPF32[$6_1 + 112 >> 2] = HEAPF32[$3_1 >> 2] - HEAPF32[$2_1 >> 2];
    $26_1 = $84($6_1 + 112 | 0);
    $11_1 = HEAPF32[$6_1 + 112 >> 2];
    $21_1 = $11_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $11_1);
    HEAPF32[$6_1 + 112 >> 2] = $21_1;
    $13_1 = HEAPF32[$6_1 + 116 >> 2];
    $18_1 = $13_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $13_1);
    HEAPF32[$6_1 + 116 >> 2] = $18_1;
    $14_1 = HEAPF32[$6_1 + 120 >> 2];
    $19_1 = $14_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $14_1);
    HEAPF32[$6_1 + 120 >> 2] = $19_1;
    $22_1 = HEAPF32[$9_1 >> 2];
    $27_1 = HEAPF32[$3_1 + 8 >> 2];
    $28_1 = HEAPF32[$2_1 >> 2];
    $29_1 = HEAPF32[$3_1 >> 2];
    $23_1 = HEAPF32[$2_1 + 4 >> 2];
    $24_1 = HEAPF32[$3_1 + 4 >> 2];
    HEAP32[$6_1 + 60 >> 2] = $19_1 < Math_fround(0.0);
    HEAP32[$6_1 + 56 >> 2] = $18_1 < Math_fround(0.0);
    HEAP32[$6_1 + 52 >> 2] = $21_1 < Math_fround(0.0);
    $12_1 = HEAP32[$9_1 + 4 >> 2];
    $7_1 = $6_1 + 104 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $12_1;
    $10_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$6_1 + 96 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$6_1 + 100 >> 2] = $10_1;
    $15_1 = HEAP32[$9_1 + 4 >> 2];
    $10_1 = $6_1 + 88 | 0;
    HEAP32[$10_1 >> 2] = HEAP32[$9_1 >> 2];
    HEAP32[$10_1 + 4 >> 2] = $15_1;
    $9_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$6_1 + 80 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$6_1 + 84 >> 2] = $9_1;
    $252($6_1 + 96 | 0, $3_1);
    $253($6_1 + 80 | 0, $3_1);
    HEAPF32[$7_1 >> 2] = HEAPF32[$4_1 + 8 >> 2] + HEAPF32[$7_1 >> 2];
    HEAPF32[$10_1 >> 2] = HEAPF32[$5_1 + 8 >> 2] + HEAPF32[$10_1 >> 2];
    HEAPF32[$6_1 + 96 >> 2] = HEAPF32[$4_1 >> 2] + HEAPF32[$6_1 + 96 >> 2];
    HEAPF32[$6_1 + 100 >> 2] = HEAPF32[$4_1 + 4 >> 2] + HEAPF32[$6_1 + 100 >> 2];
    HEAPF32[$6_1 + 80 >> 2] = HEAPF32[$5_1 >> 2] + HEAPF32[$6_1 + 80 >> 2];
    HEAPF32[$6_1 + 84 >> 2] = HEAPF32[$5_1 + 4 >> 2] + HEAPF32[$6_1 + 84 >> 2];
    $304($0_1, $6_1 + 44 | 0, $6_1 + 96 | 0, 0);
    $304($0_1, $6_1 + 38 | 0, $6_1 + 80 | 0, 1);
    $11_1 = Math_fround(Math_fround(Math_fround($11_1 * Math_fround($29_1 - $28_1)) + Math_fround($13_1 * Math_fround($24_1 - $23_1))) + Math_fround($14_1 * Math_fround($27_1 - $22_1)));
    $10_1 = $6_1 + 16 | 0;
    $15_1 = HEAPU16[$6_1 + 42 >> 1];
    $25 = HEAPU16[$6_1 + 40 >> 1];
    $30_1 = HEAPU16[$6_1 + 38 >> 1];
    $34_1 = HEAPU16[$6_1 + 48 >> 1];
    $35_1 = HEAPU16[$6_1 + 46 >> 1];
    $36_1 = HEAPU16[$6_1 + 44 >> 1];
    $9_1 = 0;
    $3_1 = 0;
    while (1) {
     label$4 : {
      label$5 : {
       if (($3_1 | 0) < ($16_1 | 0)) {
        HEAP32[$6_1 + 32 >> 2] = 1065353216;
        $9_1 = $9_1 + 1 | 0;
        $12_1 = HEAP32[$8_1 + 12 >> 2];
        $7_1 = HEAPU16[$8_1 >> 1];
        $17_1 = HEAPU16[$8_1 + 2 >> 1];
        $20_1 = HEAPU16[$8_1 + 4 >> 1];
        $31_1 = $8_1 + 8 | 0;
        $32_1 = $8_1 + 10 | 0;
        if (!$306($36_1, $35_1, $34_1, $30_1, $25, $15_1, $7_1, $17_1, $20_1, HEAPU16[$8_1 + 6 >> 1], HEAPU16[$31_1 >> 1], HEAPU16[$32_1 >> 1])) {
         $7_1 = 0;
         break label$5;
        }
        $303($6_1 - -64 | 0, $0_1, $7_1, $17_1, $20_1);
        $7_1 = $6_1 + 72 | 0;
        $20_1 = HEAP32[$7_1 + 4 >> 2];
        HEAP32[$6_1 + 8 >> 2] = HEAP32[$7_1 >> 2];
        HEAP32[$6_1 + 12 >> 2] = $20_1;
        $17_1 = HEAP32[$6_1 + 68 >> 2];
        HEAP32[$6_1 >> 2] = HEAP32[$6_1 + 64 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $17_1;
        $303($6_1 - -64 | 0, $0_1, HEAPU16[$8_1 + 6 >> 1], HEAPU16[$31_1 >> 1], HEAPU16[$32_1 >> 1]);
        $20_1 = HEAP32[$7_1 + 4 >> 2];
        $17_1 = $10_1 + 8 | 0;
        HEAP32[$17_1 >> 2] = HEAP32[$7_1 >> 2];
        HEAP32[$17_1 + 4 >> 2] = $20_1;
        $7_1 = HEAP32[$6_1 + 68 >> 2];
        HEAP32[$10_1 >> 2] = HEAP32[$6_1 + 64 >> 2];
        HEAP32[$10_1 + 4 >> 2] = $7_1;
        HEAPF32[$6_1 >> 2] = HEAPF32[$6_1 >> 2] - HEAPF32[$5_1 >> 2];
        HEAPF32[$6_1 + 4 >> 2] = HEAPF32[$6_1 + 4 >> 2] - HEAPF32[$5_1 + 4 >> 2];
        HEAPF32[$6_1 + 8 >> 2] = HEAPF32[$6_1 + 8 >> 2] - HEAPF32[$5_1 + 8 >> 2];
        HEAPF32[$6_1 + 16 >> 2] = HEAPF32[$6_1 + 16 >> 2] - HEAPF32[$4_1 >> 2];
        HEAPF32[$6_1 + 20 >> 2] = HEAPF32[$6_1 + 20 >> 2] - HEAPF32[$4_1 + 4 >> 2];
        HEAPF32[$6_1 + 24 >> 2] = HEAPF32[$6_1 + 24 >> 2] - HEAPF32[$4_1 + 8 >> 2];
        $7_1 = $309($2_1, $26_1, $6_1 + 52 | 0, $6_1, $6_1 + 32 | 0, $11_1);
        if (($12_1 | 0) < 0) {
         break label$5
        }
        if (!$7_1) {
         break label$5
        }
        $7_1 = HEAP32[$8_1 + 12 >> 2];
        FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $7_1 >> 21, $7_1 & 2097151);
        break label$4;
       }
       if (HEAP32[5166] >= ($9_1 | 0)) {
        break label$1
       }
       HEAP32[5166] = $9_1;
       break label$1;
      }
      if (($12_1 | 0) > -1) {
       break label$4
      }
      if ($7_1) {
       break label$4
      }
      $7_1 = HEAP32[$8_1 + 12 >> 2];
      $3_1 = $3_1 - $7_1 | 0;
      $8_1 = $8_1 - ($7_1 << 4) | 0;
      continue;
     }
     $3_1 = $3_1 + 1 | 0;
     $8_1 = $8_1 + 16 | 0;
     continue;
    };
   }
   $8_1 = HEAP32[$0_1 + 96 >> 2];
   $7_1 = $2_1 + 8 | 0;
   $16_1 = HEAP32[$7_1 + 4 >> 2];
   $10_1 = $6_1 + 120 | 0;
   $9_1 = $10_1;
   HEAP32[$9_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $16_1;
   $9_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$6_1 + 112 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$6_1 + 116 >> 2] = $9_1;
   $16_1 = HEAP32[$7_1 + 4 >> 2];
   $9_1 = $6_1 + 104 | 0;
   HEAP32[$9_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $16_1;
   $12_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$6_1 + 96 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$6_1 + 100 >> 2] = $12_1;
   $252($6_1 + 112 | 0, $3_1);
   $253($6_1 + 96 | 0, $3_1);
   HEAPF32[$10_1 >> 2] = HEAPF32[$4_1 + 8 >> 2] + HEAPF32[$10_1 >> 2];
   $21_1 = Math_fround(HEAPF32[$5_1 + 8 >> 2] + HEAPF32[$9_1 >> 2]);
   HEAPF32[$9_1 >> 2] = $21_1;
   HEAPF32[$6_1 + 112 >> 2] = HEAPF32[$4_1 >> 2] + HEAPF32[$6_1 + 112 >> 2];
   HEAPF32[$6_1 + 116 >> 2] = HEAPF32[$4_1 + 4 >> 2] + HEAPF32[$6_1 + 116 >> 2];
   HEAPF32[$6_1 + 96 >> 2] = HEAPF32[$5_1 >> 2] + HEAPF32[$6_1 + 96 >> 2];
   HEAPF32[$6_1 + 100 >> 2] = HEAPF32[$5_1 + 4 >> 2] + HEAPF32[$6_1 + 100 >> 2];
   $9_1 = 0;
   HEAP32[$6_1 + 92 >> 2] = 0;
   HEAPF32[$6_1 + 88 >> 2] = HEAPF32[$3_1 + 8 >> 2] - HEAPF32[$7_1 >> 2];
   HEAPF32[$6_1 + 84 >> 2] = HEAPF32[$3_1 + 4 >> 2] - HEAPF32[$2_1 + 4 >> 2];
   HEAPF32[$6_1 + 80 >> 2] = HEAPF32[$3_1 >> 2] - HEAPF32[$2_1 >> 2];
   $84($6_1 + 80 | 0);
   $18_1 = HEAPF32[$7_1 >> 2];
   $19_1 = HEAPF32[$3_1 + 8 >> 2];
   $22_1 = HEAPF32[$2_1 >> 2];
   $27_1 = HEAPF32[$3_1 >> 2];
   $28_1 = HEAPF32[$2_1 + 4 >> 2];
   $29_1 = HEAPF32[$3_1 + 4 >> 2];
   $11_1 = HEAPF32[$6_1 + 88 >> 2];
   $13_1 = HEAPF32[$6_1 + 84 >> 2];
   $14_1 = HEAPF32[$6_1 + 80 >> 2];
   $23_1 = $14_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $14_1);
   HEAPF32[$6_1 + 64 >> 2] = $23_1;
   $24_1 = $13_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $13_1);
   HEAPF32[$6_1 + 68 >> 2] = $24_1;
   $33_1 = $11_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $11_1);
   HEAPF32[$6_1 + 72 >> 2] = $33_1;
   HEAP32[$6_1 + 60 >> 2] = $33_1 < Math_fround(0.0);
   HEAP32[$6_1 + 56 >> 2] = $24_1 < Math_fround(0.0);
   HEAP32[$6_1 + 52 >> 2] = $23_1 < Math_fround(0.0);
   $11_1 = Math_fround(Math_fround(Math_fround($14_1 * Math_fround($27_1 - $22_1)) + Math_fround($13_1 * Math_fround($29_1 - $28_1))) + Math_fround($11_1 * Math_fround($19_1 - $18_1)));
   $12_1 = $6_1 + 16 | 0;
   $13_1 = HEAPF32[$10_1 >> 2];
   $14_1 = HEAPF32[$6_1 + 100 >> 2];
   $18_1 = HEAPF32[$6_1 + 96 >> 2];
   $19_1 = HEAPF32[$6_1 + 116 >> 2];
   $22_1 = HEAPF32[$6_1 + 112 >> 2];
   $7_1 = 0;
   while (1) {
    if (HEAP32[$0_1 + 56 >> 2] > ($9_1 | 0)) {
     $3_1 = $8_1 + 8 | 0;
     $10_1 = HEAP32[$3_1 >> 2];
     $3_1 = HEAP32[$3_1 + 4 >> 2];
     $16_1 = HEAP32[$8_1 >> 2];
     $26_1 = HEAP32[$8_1 + 4 >> 2];
     $25 = $8_1 + 24 | 0;
     $30_1 = HEAP32[$25 + 4 >> 2];
     $15_1 = $12_1 + 8 | 0;
     HEAP32[$15_1 >> 2] = HEAP32[$25 >> 2];
     HEAP32[$15_1 + 4 >> 2] = $30_1;
     $15_1 = HEAP32[$8_1 + 20 >> 2];
     HEAP32[$12_1 >> 2] = HEAP32[$8_1 + 16 >> 2];
     HEAP32[$12_1 + 4 >> 2] = $15_1;
     HEAP32[$6_1 >> 2] = $16_1;
     HEAP32[$6_1 + 4 >> 2] = $26_1;
     HEAP32[$6_1 + 44 >> 2] = 1065353216;
     HEAP32[$6_1 + 8 >> 2] = $10_1;
     HEAP32[$6_1 + 12 >> 2] = $3_1;
     HEAPF32[$6_1 + 4 >> 2] = HEAPF32[$6_1 + 4 >> 2] - HEAPF32[$5_1 + 4 >> 2];
     HEAPF32[$6_1 >> 2] = HEAPF32[$6_1 >> 2] - HEAPF32[$5_1 >> 2];
     HEAPF32[$6_1 + 8 >> 2] = HEAPF32[$6_1 + 8 >> 2] - HEAPF32[$5_1 + 8 >> 2];
     HEAPF32[$6_1 + 16 >> 2] = HEAPF32[$6_1 + 16 >> 2] - HEAPF32[$4_1 >> 2];
     HEAPF32[$6_1 + 20 >> 2] = HEAPF32[$6_1 + 20 >> 2] - HEAPF32[$4_1 + 4 >> 2];
     HEAPF32[$6_1 + 24 >> 2] = HEAPF32[$6_1 + 24 >> 2] - HEAPF32[$4_1 + 8 >> 2];
     $3_1 = 0;
     if ($308($22_1, $19_1, $13_1, $18_1, $14_1, $21_1, $8_1, $8_1 + 16 | 0)) {
      $3_1 = $309($2_1, $6_1 - -64 | 0, $6_1 + 52 | 0, $6_1, $6_1 + 44 | 0, $11_1)
     }
     $10_1 = HEAP32[$8_1 + 32 >> 2];
     label$11 : {
      if (!$3_1) {
       break label$11
      }
      if (($10_1 | 0) != -1) {
       break label$11
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, HEAP32[$8_1 + 36 >> 2], HEAP32[$8_1 + 40 >> 2]);
     }
     $7_1 = $7_1 + 1 | 0;
     if (($3_1 ^ -1) & ($10_1 | 0) != -1) {
      $3_1 = HEAP32[$8_1 + 32 >> 2];
      $9_1 = $3_1 + $9_1 | 0;
      $8_1 = ($3_1 << 6) + $8_1 | 0;
     } else {
      $9_1 = $9_1 + 1 | 0;
      $8_1 = $8_1 - -64 | 0;
     }
     continue;
    }
    break;
   };
   if (HEAP32[5166] >= ($7_1 | 0)) {
    break label$1
   }
   HEAP32[5166] = $7_1;
  }
  global$0 = $6_1 + 128 | 0;
 }
 
 function $311($0_1) {
  $0_1 = $0_1 | 0;
  $284($0_1);
  return $0_1 | 0;
 }
 
 function $312($0_1) {
  $0_1 = $0_1 | 0;
  $284($0_1);
  $54($0_1);
 }
 
 function $313($0_1) {
  $0_1 = $0_1 | 0;
  return 84;
 }
 
 function $314($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $286($0_1, $1_1, $2_1, $3_1);
  return 1;
 }
 
 function $315($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $4_1 = $53($1_1 << 6)
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   while (1) {
    if ($2_1) {
     $2($4_1 + $3_1 | 0, HEAP32[$0_1 + 12 >> 2] + $3_1 | 0, 64);
     $2_1 = $2_1 - 1 | 0;
     $3_1 = $3_1 - -64 | 0;
     continue;
    }
    break;
   };
   $96($0_1);
   HEAP32[$0_1 + 12 >> 2] = $4_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $316($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 96 | 0;
  global$0 = $4_1;
  $5_1 = $4_1 + 32 | 0;
  HEAP32[$5_1 >> 2] = 1566444395;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $7_1 = $4_1 + 16 | 0;
  $6_1 = $7_1;
  HEAP32[$6_1 >> 2] = -581039253;
  HEAP32[$6_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 24 >> 2] = 1566444395;
  HEAP32[$4_1 + 28 >> 2] = 1566444395;
  HEAP32[$4_1 + 8 >> 2] = -581039253;
  HEAP32[$4_1 + 12 >> 2] = -581039253;
  $252($4_1 + 24 | 0, $1_1);
  $253($4_1 + 8 | 0, $1_1);
  $6_1 = $1_1 + 16 | 0;
  $252($4_1 + 24 | 0, $6_1);
  $253($4_1 + 8 | 0, $6_1);
  $1_1 = $1_1 + 32 | 0;
  $252($4_1 + 24 | 0, $1_1);
  $253($4_1 + 8 | 0, $1_1);
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $6_1 = $4_1 + 72 | 0;
  $1_1 = $6_1;
  HEAP32[$1_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $8_1;
  $5_1 = HEAP32[$7_1 + 4 >> 2];
  $8_1 = $4_1 + 88 | 0;
  $1_1 = $8_1;
  HEAP32[$1_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $5_1;
  $1_1 = HEAP32[$4_1 + 28 >> 2];
  HEAP32[$4_1 + 64 >> 2] = HEAP32[$4_1 + 24 >> 2];
  HEAP32[$4_1 + 68 >> 2] = $1_1;
  $1_1 = HEAP32[$4_1 + 12 >> 2];
  HEAP32[$4_1 + 80 >> 2] = HEAP32[$4_1 + 8 >> 2];
  HEAP32[$4_1 + 84 >> 2] = $1_1;
  $5_1 = HEAP32[$0_1 + 4 >> 2];
  $1_1 = HEAP32[$5_1 + 4 >> 2];
  if (($1_1 | 0) == HEAP32[$5_1 + 8 >> 2]) {
   $315($5_1, $1_1 ? $1_1 << 1 : 1);
   $1_1 = HEAP32[$5_1 + 4 >> 2];
  }
  $7_1 = HEAP32[$4_1 + 68 >> 2];
  $0_1 = HEAP32[$5_1 + 12 >> 2] + ($1_1 << 6) | 0;
  $1_1 = $0_1;
  HEAP32[$1_1 >> 2] = HEAP32[$4_1 + 64 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $7_1;
  HEAP32[$1_1 + 40 >> 2] = $3_1;
  HEAP32[$1_1 + 36 >> 2] = $2_1;
  HEAP32[$1_1 + 32 >> 2] = -1;
  $1_1 = HEAP32[$4_1 + 48 >> 2];
  HEAP32[$0_1 + 44 >> 2] = HEAP32[$4_1 + 44 >> 2];
  HEAP32[$0_1 + 48 >> 2] = $1_1;
  $2_1 = HEAP32[$8_1 + 4 >> 2];
  $1_1 = $0_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  $2_1 = $4_1 + 80 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 16 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  $2_1 = HEAP32[$6_1 + 4 >> 2];
  $1_1 = $0_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  $2_1 = $4_1 + 52 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 52 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  HEAP32[$0_1 + 60 >> 2] = HEAP32[$4_1 + 60 >> 2];
  HEAP32[$5_1 + 4 >> 2] = HEAP32[$5_1 + 4 >> 2] + 1;
  global$0 = $4_1 + 96 | 0;
 }
 
 function $317($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 24 >> 2] = 1566444395;
  HEAP32[$4_1 + 28 >> 2] = 0;
  HEAP32[$4_1 + 16 >> 2] = 1566444395;
  HEAP32[$4_1 + 20 >> 2] = 1566444395;
  HEAP32[$4_1 + 8 >> 2] = -581039253;
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAP32[$4_1 >> 2] = -581039253;
  HEAP32[$4_1 + 4 >> 2] = -581039253;
  $252($4_1 + 16 | 0, $1_1);
  $253($4_1, $1_1);
  $5_1 = $1_1 + 16 | 0;
  $252($4_1 + 16 | 0, $5_1);
  $253($4_1, $5_1);
  $1_1 = $1_1 + 32 | 0;
  $252($4_1 + 16 | 0, $1_1);
  $253($4_1, $1_1);
  $6_1 = HEAPF32[$4_1 >> 2];
  $7_1 = HEAPF32[$4_1 + 16 >> 2];
  if (Math_fround($6_1 - $7_1) < Math_fround(2.0000000949949026e-03)) {
   $6_1 = Math_fround($6_1 + Math_fround(1.0000000474974513e-03));
   HEAPF32[$4_1 >> 2] = $6_1;
   $7_1 = Math_fround($7_1 + Math_fround(-1.0000000474974513e-03));
  }
  $8_1 = HEAPF32[$4_1 + 4 >> 2];
  $9_1 = HEAPF32[$4_1 + 20 >> 2];
  $1_1 = Math_fround($8_1 - $9_1) < Math_fround(2.0000000949949026e-03);
  $10_1 = HEAPF32[$4_1 + 8 >> 2];
  $11_1 = HEAPF32[$4_1 + 24 >> 2];
  $5_1 = Math_fround($10_1 - $11_1) < Math_fround(2.0000000949949026e-03);
  $300(HEAP32[$0_1 + 8 >> 2], $4_1 + 32 | 0, $7_1, $1_1 ? Math_fround($9_1 + Math_fround(-1.0000000474974513e-03)) : $9_1, $5_1 ? Math_fround($11_1 + Math_fround(-1.0000000474974513e-03)) : $11_1, 0);
  $300(HEAP32[$0_1 + 8 >> 2], $4_1 + 32 | 6, $6_1, $1_1 ? Math_fround($8_1 + Math_fround(1.0000000474974513e-03)) : $8_1, $5_1 ? Math_fround($10_1 + Math_fround(1.0000000474974513e-03)) : $10_1, 1);
  HEAP32[$4_1 + 44 >> 2] = $2_1 << 21 | $3_1;
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  $0_1 = HEAP32[$1_1 + 4 >> 2];
  if (($0_1 | 0) == HEAP32[$1_1 + 8 >> 2]) {
   $142($1_1, $0_1 ? $0_1 << 1 : 1);
   $0_1 = HEAP32[$1_1 + 4 >> 2];
  }
  $2_1 = HEAP32[$4_1 + 36 >> 2];
  $0_1 = HEAP32[$1_1 + 12 >> 2] + ($0_1 << 4) | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$4_1 + 32 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  $2_1 = $4_1 + 40 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $0_1 = $0_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] + 1;
  global$0 = $4_1 + 48 | 0;
 }
 
 function $318($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0;
  $1_1 = global$0 - 112 | 0;
  global$0 = $1_1;
  if (HEAPU8[$0_1 + 65 | 0]) {
   $2_1 = HEAP32[$0_1 + 56 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] >> 2]]($2_1) | 0;
   $54(HEAP32[$0_1 + 56 >> 2]);
  }
  $2_1 = $53(172);
  $3_1 = $283($2_1);
  HEAP32[$0_1 + 56 >> 2] = $2_1;
  HEAP32[$2_1 >> 2] = 9980;
  $7_1 = HEAPU8[$0_1 + 64 | 0];
  HEAP8[$2_1 + 60 | 0] = $7_1;
  $8_1 = HEAP32[$0_1 + 52 >> 2];
  label$2 : {
   if ($7_1) {
    $4_1 = HEAPF32[$0_1 + 24 >> 2];
    $5_1 = HEAPF32[$0_1 + 28 >> 2];
    $6_1 = HEAPF32[$0_1 + 20 >> 2];
    HEAP32[$2_1 + 16 >> 2] = 0;
    $6_1 = Math_fround($6_1 + Math_fround(-1.0));
    HEAPF32[$2_1 + 4 >> 2] = $6_1;
    $7_1 = $2_1 + 12 | 0;
    $5_1 = Math_fround($5_1 + Math_fround(-1.0));
    HEAPF32[$7_1 >> 2] = $5_1;
    $12_1 = $2_1 + 8 | 0;
    $4_1 = Math_fround($4_1 + Math_fround(-1.0));
    HEAPF32[$12_1 >> 2] = $4_1;
    HEAP8[$2_1 + 60 | 0] = 1;
    $9_1 = HEAPF32[$0_1 + 40 >> 2];
    $10_1 = HEAPF32[$0_1 + 44 >> 2];
    $11_1 = HEAPF32[$0_1 + 36 >> 2];
    HEAP32[$2_1 + 48 >> 2] = 0;
    HEAP32[$2_1 + 32 >> 2] = 0;
    $13_1 = $2_1 + 28 | 0;
    $10_1 = Math_fround($10_1 + Math_fround(1.0));
    HEAPF32[$13_1 >> 2] = $10_1;
    $14_1 = $2_1 + 24 | 0;
    $9_1 = Math_fround($9_1 + Math_fround(1.0));
    HEAPF32[$14_1 >> 2] = $9_1;
    $11_1 = Math_fround($11_1 + Math_fround(1.0));
    HEAPF32[$2_1 + 20 >> 2] = $11_1;
    HEAPF32[$2_1 + 44 >> 2] = Math_fround(65533.0) / Math_fround($10_1 - $5_1);
    HEAPF32[$2_1 + 40 >> 2] = Math_fround(65533.0) / Math_fround($9_1 - $4_1);
    HEAPF32[$2_1 + 36 >> 2] = Math_fround(65533.0) / Math_fround($11_1 - $6_1);
    $300($3_1, $1_1 + 88 | 0, $6_1, $4_1, $5_1, 0);
    $303($1_1 + 8 | 0, $3_1, HEAPU16[$1_1 + 88 >> 1], HEAPU16[$1_1 + 90 >> 1], HEAPU16[$1_1 + 92 >> 1]);
    $6_1 = HEAPF32[$1_1 + 8 >> 2];
    $5_1 = HEAPF32[$1_1 + 12 >> 2];
    $4_1 = HEAPF32[$1_1 + 16 >> 2];
    HEAP32[$1_1 + 20 >> 2] = 0;
    HEAPF32[$1_1 + 16 >> 2] = $4_1 + Math_fround(-1.0);
    HEAPF32[$1_1 + 12 >> 2] = $5_1 + Math_fround(-1.0);
    HEAPF32[$1_1 + 8 >> 2] = $6_1 + Math_fround(-1.0);
    $15_1 = $2_1 + 4 | 0;
    $252($15_1, $1_1 + 8 | 0);
    HEAP32[$2_1 + 48 >> 2] = 0;
    $6_1 = HEAPF32[$13_1 >> 2];
    HEAPF32[$2_1 + 44 >> 2] = Math_fround(65533.0) / Math_fround($6_1 - HEAPF32[$7_1 >> 2]);
    $5_1 = HEAPF32[$14_1 >> 2];
    HEAPF32[$2_1 + 40 >> 2] = Math_fround(65533.0) / Math_fround($5_1 - HEAPF32[$12_1 >> 2]);
    $4_1 = HEAPF32[$2_1 + 20 >> 2];
    HEAPF32[$2_1 + 36 >> 2] = Math_fround(65533.0) / Math_fround($4_1 - HEAPF32[$2_1 + 4 >> 2]);
    $300($3_1, $1_1 + 88 | 0, $4_1, $5_1, $6_1, 1);
    $303($1_1 + 8 | 0, $3_1, HEAPU16[$1_1 + 88 >> 1], HEAPU16[$1_1 + 90 >> 1], HEAPU16[$1_1 + 92 >> 1]);
    $6_1 = HEAPF32[$1_1 + 8 >> 2];
    $5_1 = HEAPF32[$1_1 + 12 >> 2];
    $4_1 = HEAPF32[$1_1 + 16 >> 2];
    HEAP32[$1_1 + 20 >> 2] = 0;
    HEAPF32[$1_1 + 16 >> 2] = $4_1 + Math_fround(1.0);
    HEAPF32[$1_1 + 12 >> 2] = $5_1 + Math_fround(1.0);
    HEAPF32[$1_1 + 8 >> 2] = $6_1 + Math_fround(1.0);
    $16_1 = $2_1 + 20 | 0;
    $253($16_1, $1_1 + 8 | 0);
    HEAP32[$2_1 + 48 >> 2] = 0;
    HEAPF32[$2_1 + 44 >> 2] = Math_fround(65533.0) / Math_fround(HEAPF32[$13_1 >> 2] - HEAPF32[$7_1 >> 2]);
    HEAPF32[$2_1 + 40 >> 2] = Math_fround(65533.0) / Math_fround(HEAPF32[$14_1 >> 2] - HEAPF32[$12_1 >> 2]);
    HEAPF32[$2_1 + 36 >> 2] = Math_fround(65533.0) / Math_fround(HEAPF32[$2_1 + 20 >> 2] - HEAPF32[$2_1 + 4 >> 2]);
    HEAP32[$1_1 + 88 >> 2] = 10052;
    HEAP32[$1_1 + 96 >> 2] = $2_1;
    HEAP32[$1_1 + 92 >> 2] = $2_1 + 104;
    FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 8 >> 2]]($8_1, $1_1 + 88 | 0, $15_1, $16_1);
    $8_1 = HEAP32[$2_1 + 108 >> 2];
    $7_1 = $1_1 + 16 | 0;
    HEAP32[$7_1 >> 2] = 0;
    HEAP32[$7_1 + 4 >> 2] = 0;
    HEAP32[$1_1 + 8 >> 2] = 0;
    HEAP32[$1_1 + 12 >> 2] = 0;
    $131($2_1 + 124 | 0, $8_1 << 1, $1_1 + 8 | 0);
    break label$2;
   }
   HEAP32[$1_1 + 104 >> 2] = 10072;
   HEAP32[$1_1 + 108 >> 2] = $2_1 - -64;
   HEAP32[$1_1 + 96 >> 2] = -581039253;
   HEAP32[$1_1 + 100 >> 2] = 0;
   HEAP32[$1_1 + 88 >> 2] = -581039253;
   HEAP32[$1_1 + 92 >> 2] = -581039253;
   HEAP32[$1_1 + 80 >> 2] = 1566444395;
   HEAP32[$1_1 + 84 >> 2] = 0;
   HEAP32[$1_1 + 72 >> 2] = 1566444395;
   HEAP32[$1_1 + 76 >> 2] = 1566444395;
   FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 8 >> 2]]($8_1, $1_1 + 104 | 0, $1_1 + 88 | 0, $1_1 + 72 | 0);
   $8_1 = HEAP32[$2_1 + 68 >> 2];
   $1($1_1 + 8 | 0, 0, 64);
   $292($2_1 + 84 | 0, $8_1 << 1, $1_1 + 8 | 0);
  }
  HEAP32[$2_1 + 56 >> 2] = 0;
  $297($3_1, 0, $8_1);
  label$4 : {
   if (!HEAPU8[$2_1 + 60 | 0]) {
    break label$4
   }
   if (HEAP32[$2_1 + 152 >> 2]) {
    break label$4
   }
   $3_1 = $301($2_1 + 148 | 0, $1_1 + 8 | 0);
   $302($3_1, HEAP32[$2_1 + 136 >> 2]);
   HEAP32[$3_1 + 12 >> 2] = 0;
   $7_1 = $3_1;
   $3_1 = HEAP32[HEAP32[$2_1 + 136 >> 2] + 12 >> 2];
   HEAP32[$7_1 + 16 >> 2] = ($3_1 | 0) > -1 ? 1 : 0 - $3_1 | 0;
  }
  HEAP32[$2_1 + 168 >> 2] = HEAP32[$2_1 + 152 >> 2];
  $57($2_1 + 104 | 0);
  $57($2_1 - -64 | 0);
  HEAP8[$0_1 + 65 | 0] = 1;
  global$0 = $1_1 + 112 | 0;
 }
 
 function $319($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 10308;
  if (HEAPU8[$0_1 + 65 | 0]) {
   $1_1 = HEAP32[$0_1 + 56 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   $54(HEAP32[$0_1 + 56 >> 2]);
  }
  return $0_1 | 0;
 }
 
 function $320($0_1) {
  $0_1 = $0_1 | 0;
  $54($319($0_1));
 }
 
 function $321($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = 0, $4_1 = Math_fround(0);
  $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1) | 0;
  $2_1 = Math_fround(HEAPF32[$3_1 >> 2] - HEAPF32[$1_1 >> 2]);
  $4_1 = Math_fround($2_1 * $2_1);
  $2_1 = Math_fround(HEAPF32[$3_1 + 4 >> 2] - HEAPF32[$1_1 + 4 >> 2]);
  $4_1 = Math_fround($4_1 + Math_fround($2_1 * $2_1));
  $2_1 = Math_fround(HEAPF32[$3_1 + 8 >> 2] - HEAPF32[$1_1 + 8 >> 2]);
  if (Math_fround($4_1 + Math_fround($2_1 * $2_1)) > Math_fround(1.1920928955078125e-07)) {
   $274($0_1, $1_1);
   $318($0_1);
  }
 }
 
 function $322($0_1) {
  $0_1 = $0_1 | 0;
  return 10604;
 }
 
 function $323($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $72($0_1, $1_1, $2_1);
  $3_1 = HEAP32[$0_1 + 52 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 56 >> 2]]($3_1, $1_1 + 12 | 0, $2_1) | 0;
  HEAPF32[$1_1 + 52 >> 2] = HEAPF32[$0_1 + 16 >> 2];
  label$1 : {
   label$2 : {
    if (!HEAP32[$0_1 + 56 >> 2]) {
     break label$2
    }
    if (FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 52 >> 2]]($2_1) & 1) {
     break label$2
    }
    $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 24 >> 2]]($2_1, HEAP32[$0_1 + 56 >> 2]) | 0;
    if ($3_1) {
     HEAP32[$1_1 + 44 >> 2] = 0;
     HEAP32[$1_1 + 40 >> 2] = $3_1;
     break label$1;
    }
    $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, HEAP32[$0_1 + 56 >> 2]) | 0;
    HEAP32[$1_1 + 44 >> 2] = 0;
    HEAP32[$1_1 + 40 >> 2] = $3_1;
    $3_1 = HEAP32[$0_1 + 56 >> 2];
    $3_1 = ((((wasm2js_i32$1 = $2_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
    $4_1 = HEAP32[$0_1 + 56 >> 2];
    (((((wasm2js_i32$3 = $2_1, wasm2js_i32$2 = $3_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, HEAP32[$3_1 + 8 >> 2], $2_1) | 0), wasm2js_i32$4 = 1213612625), wasm2js_i32$5 = HEAP32[$0_1 + 56 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
    break label$1;
   }
   HEAP32[$1_1 + 40 >> 2] = 0;
   HEAP32[$1_1 + 44 >> 2] = 0;
  }
  label$4 : {
   label$5 : {
    if (!HEAP32[$0_1 + 60 >> 2]) {
     break label$5
    }
    if (FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 52 >> 2]]($2_1) & 2) {
     break label$5
    }
    $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 24 >> 2]]($2_1, HEAP32[$0_1 + 60 >> 2]) | 0;
    if ($3_1) {
     HEAP32[$1_1 + 48 >> 2] = $3_1;
     break label$4;
    }
    (wasm2js_i32$0 = $1_1, wasm2js_i32$5 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1, HEAP32[$0_1 + 60 >> 2]) | 0), HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$5;
    $3_1 = HEAP32[$0_1 + 60 >> 2];
    $3_1 = ((((wasm2js_i32$5 = $2_1, wasm2js_i32$4 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1) | 0), wasm2js_i32$1 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$5 | 0, wasm2js_i32$4 | 0, wasm2js_i32$1 | 0) | 0);
    $4_1 = HEAP32[$0_1 + 60 >> 2];
    (((((wasm2js_i32$1 = $2_1, wasm2js_i32$4 = $3_1), wasm2js_i32$5 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 12 >> 2]]($4_1, HEAP32[$3_1 + 8 >> 2], $2_1) | 0), wasm2js_i32$2 = 1346456916), wasm2js_i32$3 = HEAP32[$0_1 + 60 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0);
    break label$4;
   }
   HEAP32[$1_1 + 48 >> 2] = 0;
  }
  HEAP32[$1_1 + 56 >> 2] = 0;
  return 10580;
 }
 
 function $324($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 60 >> 2] = 0;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 10412;
  HEAP32[$4_1 + 4 >> 2] = HEAP32[$0_1 + 52 >> 2];
  $5_1 = HEAP32[$0_1 + 56 >> 2];
  label$1 : {
   if (HEAPU8[$5_1 + 60 | 0]) {
    $304($5_1, $4_1 + 74 | 0, $2_1, 0);
    $304($5_1, $4_1 + 68 | 0, $3_1, 1);
    label$3 : {
     switch (HEAP32[$5_1 + 144 >> 2]) {
     case 0:
      $305(HEAP32[$5_1 + 136 >> 2], $4_1, $4_1 + 74 | 0, $4_1 + 68 | 0, 0, HEAP32[$5_1 + 56 >> 2]);
      break label$1;
     case 1:
      $3_1 = 0;
      $1_1 = HEAPU16[$4_1 + 72 >> 1];
      $7_1 = HEAPU16[$4_1 + 70 >> 1];
      $6_1 = HEAPU16[$4_1 + 68 >> 1];
      $8_1 = HEAPU16[$4_1 + 78 >> 1];
      $10_1 = HEAPU16[$4_1 + 76 >> 1];
      $11_1 = HEAPU16[$4_1 + 74 >> 1];
      $12_1 = $5_1 + 136 | 0;
      $2_1 = 0;
      while (1) {
       if (HEAP32[$5_1 + 152 >> 2] <= ($2_1 | 0)) {
        break label$1
       }
       $0_1 = HEAP32[$5_1 + 160 >> 2] + $3_1 | 0;
       if ($306($11_1, $10_1, $8_1, $6_1, $7_1, $1_1, HEAPU16[$0_1 >> 1], HEAPU16[$0_1 + 2 >> 1], HEAPU16[$0_1 + 4 >> 1], HEAPU16[$0_1 + 6 >> 1], HEAPU16[$0_1 + 8 >> 1], HEAPU16[$0_1 + 10 >> 1])) {
        $9_1 = HEAP32[$0_1 + 12 >> 2];
        $305(HEAP32[$12_1 >> 2], $4_1, $4_1 + 74 | 0, $4_1 + 68 | 0, $9_1, HEAP32[$0_1 + 16 >> 2] + $9_1 | 0);
       }
       $3_1 = $3_1 + 32 | 0;
       $2_1 = $2_1 + 1 | 0;
       continue;
      };
     case 2:
      break label$3;
     default:
      break label$1;
     };
    }
    $307(HEAP32[$5_1 + 136 >> 2], $4_1, $4_1 + 74 | 0, $4_1 + 68 | 0);
    break label$1;
   }
   $0_1 = HEAP32[$5_1 + 96 >> 2];
   $1_1 = 0;
   while (1) {
    if (HEAP32[$5_1 + 56 >> 2] > ($1_1 | 0)) {
     $6_1 = HEAP32[$0_1 + 32 >> 2];
     $8_1 = $308(HEAPF32[$2_1 >> 2], HEAPF32[$2_1 + 4 >> 2], HEAPF32[$2_1 + 8 >> 2], HEAPF32[$3_1 >> 2], HEAPF32[$3_1 + 4 >> 2], HEAPF32[$3_1 + 8 >> 2], $0_1, $0_1 + 16 | 0);
     label$10 : {
      if (!$8_1) {
       break label$10
      }
      if (($6_1 | 0) != -1) {
       break label$10
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 8 >> 2]]($4_1, HEAP32[$0_1 + 36 >> 2], HEAP32[$0_1 + 40 >> 2]);
     }
     $7_1 = $7_1 + 1 | 0;
     if (($8_1 ^ -1) & ($6_1 | 0) != -1) {
      $6_1 = HEAP32[$0_1 + 32 >> 2];
      $1_1 = $6_1 + $1_1 | 0;
      $0_1 = ($6_1 << 6) + $0_1 | 0;
     } else {
      $1_1 = $1_1 + 1 | 0;
      $0_1 = $0_1 - -64 | 0;
     }
     continue;
    }
    break;
   };
   if (HEAP32[5166] >= ($7_1 | 0)) {
    break label$1
   }
   HEAP32[5166] = $7_1;
  }
  global$0 = $4_1 + 80 | 0;
 }
 
 function $325($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 68 >> 2]]($0_1, $1_1, $2_1);
 }
 
 function $326($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2_1 = HEAP32[$0_1 + 56 >> 2];
  if ($2_1) {
   $2_1 = ((((wasm2js_i32$1 = $1_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2]]($2_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
   $3_1 = HEAP32[$0_1 + 56 >> 2];
   (((((wasm2js_i32$3 = $1_1, wasm2js_i32$2 = $2_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, HEAP32[$2_1 + 8 >> 2], $1_1) | 0), wasm2js_i32$4 = 1213612625), wasm2js_i32$5 = HEAP32[$0_1 + 56 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
  }
 }
 
 function $327($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2_1 = HEAP32[$0_1 + 60 >> 2];
  if ($2_1) {
   $2_1 = ((((wasm2js_i32$1 = $1_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
   $3_1 = HEAP32[$0_1 + 60 >> 2];
   (((((wasm2js_i32$3 = $1_1, wasm2js_i32$2 = $2_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1, HEAP32[$2_1 + 8 >> 2], $1_1) | 0), wasm2js_i32$4 = 1346456916), wasm2js_i32$5 = HEAP32[$0_1 + 60 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
  }
 }
 
 function $328($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = Math_fround(0);
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[$0_1 + 60 >> 2] = HEAP32[$0_1 + 60 >> 2] + 1;
  $3_1 = HEAP32[$0_1 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $4_1 + 28 | 0, $4_1 + 24 | 0, $4_1 + 20 | 0, $4_1 + 16 | 0, $4_1 + 12 | 0, $4_1 + 8 | 0, $4_1 + 4 | 0, $4_1, $1_1);
  $5_1 = $0_1 + 44 | 0;
  $6_1 = HEAP32[$0_1 + 4 >> 2];
  $14_1 = $6_1 + 12 | 0;
  $8_1 = HEAP32[$4_1 + 12 >> 2] + Math_imul(HEAP32[$4_1 + 8 >> 2], $2_1) | 0;
  $7_1 = 2;
  $15_1 = HEAP32[$4_1 + 16 >> 2];
  $16_1 = HEAP32[$4_1 + 28 >> 2];
  $17_1 = HEAP32[$4_1 + 20 >> 2];
  $18_1 = HEAP32[$4_1 >> 2] - 2 | 0;
  $9_1 = 8;
  $10_1 = 4;
  while (1) {
   if (($7_1 | 0) > -1) {
    label$3 : {
     label$4 : {
      switch ($18_1 | 0) {
      case 1:
       $3_1 = HEAPU16[$8_1 + $10_1 >> 1];
       break label$3;
      case 0:
       $3_1 = HEAP32[$8_1 + $9_1 >> 2];
       break label$3;
      default:
       break label$4;
      };
     }
     $3_1 = HEAPU8[$7_1 + $8_1 | 0];
    }
    $3_1 = Math_imul($3_1, $15_1) + $16_1 | 0;
    label$7 : {
     if (!$17_1) {
      $11_1 = Math_fround(HEAPF32[$3_1 + 4 >> 2] * HEAPF32[$6_1 + 8 >> 2]);
      $12_1 = Math_fround(HEAPF32[$3_1 >> 2] * HEAPF32[$6_1 + 4 >> 2]);
      $13_1 = HEAPF32[$6_1 + 12 >> 2];
      $3_1 = $3_1 + 8 | 0;
      break label$7;
     }
     $11_1 = Math_fround(HEAPF32[$6_1 + 8 >> 2] * Math_fround(HEAPF64[$3_1 + 8 >> 3]));
     $12_1 = Math_fround(HEAPF32[$6_1 + 4 >> 2] * Math_fround(HEAPF64[$3_1 >> 3]));
     $13_1 = Math_fround(HEAPF64[$3_1 + 16 >> 3]);
     $3_1 = $14_1;
    }
    $19_1 = HEAPF32[$3_1 >> 2];
    HEAP32[$5_1 + 12 >> 2] = 0;
    HEAPF32[$5_1 + 4 >> 2] = $11_1;
    HEAPF32[$5_1 >> 2] = $12_1;
    HEAPF32[$5_1 + 8 >> 2] = $19_1 * $13_1;
    $9_1 = $9_1 - 4 | 0;
    $10_1 = $10_1 - 2 | 0;
    $5_1 = $5_1 - 16 | 0;
    $7_1 = $7_1 - 1 | 0;
    continue;
   }
   break;
  };
  $3_1 = HEAP32[$0_1 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $0_1 + 12 | 0, $1_1, $2_1);
  $0_1 = HEAP32[$0_1 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2]]($0_1, $1_1);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $329($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0);
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  $3_1 = HEAP32[$0_1 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $4_1 + 28 | 0, $4_1 + 24 | 0, $4_1 + 20 | 0, $4_1 + 16 | 0, $4_1 + 12 | 0, $4_1 + 8 | 0, $4_1 + 4 | 0, $4_1, $1_1);
  $5_1 = HEAP32[$0_1 + 4 >> 2];
  $13_1 = $5_1 + 12 | 0;
  $3_1 = HEAP32[$4_1 + 12 >> 2] + Math_imul(HEAP32[$4_1 + 8 >> 2], $2_1) | 0;
  $7_1 = $3_1 + 8 | 0;
  $8_1 = $3_1 + 4 | 0;
  $6_1 = $4_1 - -64 | 0;
  $9_1 = 2;
  $14_1 = HEAP32[$4_1 + 16 >> 2];
  $15_1 = HEAP32[$4_1 + 28 >> 2];
  $16_1 = HEAP32[$4_1 + 20 >> 2];
  $17_1 = HEAP32[$4_1 >> 2] != 3;
  while (1) {
   if (($9_1 | 0) > -1) {
    if ($17_1) {
     $3_1 = HEAP32[$7_1 >> 2]
    } else {
     $3_1 = HEAPU16[$8_1 >> 1]
    }
    $3_1 = Math_imul($3_1, $14_1) + $15_1 | 0;
    label$5 : {
     if (!$16_1) {
      $10_1 = Math_fround(HEAPF32[$3_1 + 4 >> 2] * HEAPF32[$5_1 + 8 >> 2]);
      $11_1 = Math_fround(HEAPF32[$3_1 >> 2] * HEAPF32[$5_1 + 4 >> 2]);
      $12_1 = HEAPF32[$5_1 + 12 >> 2];
      $3_1 = $3_1 + 8 | 0;
      break label$5;
     }
     $10_1 = Math_fround(HEAPF32[$5_1 + 8 >> 2] * Math_fround(HEAPF64[$3_1 + 8 >> 3]));
     $11_1 = Math_fround(HEAPF32[$5_1 + 4 >> 2] * Math_fround(HEAPF64[$3_1 >> 3]));
     $12_1 = Math_fround(HEAPF64[$3_1 + 16 >> 3]);
     $3_1 = $13_1;
    }
    $18_1 = HEAPF32[$3_1 >> 2];
    HEAP32[$6_1 + 12 >> 2] = 0;
    HEAPF32[$6_1 + 4 >> 2] = $10_1;
    HEAPF32[$6_1 >> 2] = $11_1;
    HEAPF32[$6_1 + 8 >> 2] = $18_1 * $12_1;
    $7_1 = $7_1 - 4 | 0;
    $6_1 = $6_1 - 16 | 0;
    $8_1 = $8_1 - 2 | 0;
    $9_1 = $9_1 - 1 | 0;
    continue;
   }
   break;
  };
  $3_1 = HEAP32[$0_1 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $4_1 + 32 | 0, $1_1, $2_1);
  $0_1 = HEAP32[$0_1 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2]]($0_1, $1_1);
  global$0 = $4_1 + 80 | 0;
 }
 
 function $330($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = 0;
  $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $0_1 = $1_1 + 52 | 0;
  $4_1 = HEAPF32[$0_1 >> 2];
  $10_1 = $1_1 + 56 | 0;
  $5_1 = HEAPF32[$10_1 >> 2];
  $6_1 = HEAPF32[$1_1 + 48 >> 2];
  HEAP32[$2_1 + 12 >> 2] = 0;
  HEAPF32[$2_1 + 8 >> 2] = $5_1 - $9_1;
  HEAPF32[$2_1 + 4 >> 2] = $4_1 - $8_1;
  HEAPF32[$2_1 >> 2] = $6_1 - $7_1;
  $4_1 = HEAPF32[$0_1 >> 2];
  $5_1 = HEAPF32[$10_1 >> 2];
  $6_1 = HEAPF32[$1_1 + 48 >> 2];
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAPF32[$3_1 + 8 >> 2] = $9_1 + $5_1;
  HEAPF32[$3_1 + 4 >> 2] = $8_1 + $4_1;
  HEAPF32[$3_1 >> 2] = $7_1 + $6_1;
 }
 
 function $331($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 20 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 24 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 28 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $332($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 20 | 0;
 }
 
 function $333($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
 }
 
 function $334($0_1) {
  $0_1 = $0_1 | 0;
  return 11020;
 }
 
 function $335($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
 }
 
 function $336($0_1, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = 0, $22_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $5_1 = HEAP32[$0_1 + 844 >> 2];
       if (($5_1 | 0) == 4) {
        $21_1 = $0_1 + 84 | 0;
        $2_1 = HEAPF32[$1_1 + 80 >> 2];
        $7_1 = -1;
        $5_1 = 0;
        while (1) {
         if (($5_1 | 0) == 4) {
          label$9 : {
           $9_1 = HEAPF32[$1_1 >> 2];
           if ($7_1) {
            break label$9
           }
           $11_1 = HEAPF32[$0_1 + 636 >> 2];
           $16_1 = HEAPF32[$0_1 + 428 >> 2];
           $3_1 = Math_fround($11_1 - $16_1);
           $17_1 = HEAPF32[$0_1 + 632 >> 2];
           $18_1 = HEAPF32[$0_1 + 424 >> 2];
           $6_1 = Math_fround($17_1 - $18_1);
           $19_1 = HEAPF32[$0_1 + 628 >> 2];
           $20_1 = HEAPF32[$0_1 + 420 >> 2];
           $10_1 = Math_fround($19_1 - $20_1);
           $4_1 = HEAPF32[$1_1 + 8 >> 2];
           $2_1 = HEAPF32[$1_1 + 4 >> 2];
           break label$5;
          }
         } else {
          $4_1 = HEAPF32[$21_1 >> 2];
          $22_1 = $4_1 < $2_1;
          $7_1 = $22_1 ? $5_1 : $7_1;
          $2_1 = $22_1 ? $4_1 : $2_1;
          $21_1 = $21_1 + 208 | 0;
          $5_1 = $5_1 + 1 | 0;
          continue;
         }
         break;
        };
        $2_1 = HEAPF32[$1_1 + 4 >> 2];
        $12_1 = HEAPF32[$0_1 + 216 >> 2];
        $13_1 = Math_fround($2_1 - $12_1);
        $11_1 = HEAPF32[$0_1 + 636 >> 2];
        $16_1 = HEAPF32[$0_1 + 428 >> 2];
        $3_1 = Math_fround($11_1 - $16_1);
        $4_1 = HEAPF32[$1_1 + 8 >> 2];
        $14_1 = HEAPF32[$0_1 + 220 >> 2];
        $10_1 = Math_fround($4_1 - $14_1);
        $17_1 = HEAPF32[$0_1 + 632 >> 2];
        $18_1 = HEAPF32[$0_1 + 424 >> 2];
        $6_1 = Math_fround($17_1 - $18_1);
        $15_1 = Math_fround(Math_fround($13_1 * $3_1) - Math_fround($10_1 * $6_1));
        $24_1 = Math_fround($15_1 * $15_1);
        $8_1 = $10_1;
        $19_1 = HEAPF32[$0_1 + 628 >> 2];
        $20_1 = HEAPF32[$0_1 + 420 >> 2];
        $10_1 = Math_fround($19_1 - $20_1);
        $15_1 = HEAPF32[$0_1 + 212 >> 2];
        $23_1 = Math_fround($9_1 - $15_1);
        $8_1 = Math_fround(Math_fround($8_1 * $10_1) - Math_fround($23_1 * $3_1));
        $13_1 = Math_fround(Math_fround($23_1 * $6_1) - Math_fround($13_1 * $10_1));
        $13_1 = Math_fround(Math_fround($24_1 + Math_fround($8_1 * $8_1)) + Math_fround($13_1 * $13_1));
        if (($7_1 | 0) != 1) {
         break label$5
        }
        $9_1 = Math_fround($9_1 - HEAPF32[$0_1 + 4 >> 2]);
        $4_1 = Math_fround($4_1 - HEAPF32[$0_1 + 12 >> 2]);
        $2_1 = Math_fround($2_1 - HEAPF32[$0_1 + 8 >> 2]);
        $10_1 = Math_fround(0.0);
        break label$4;
       }
       HEAP32[$0_1 + 844 >> 2] = $5_1 + 1;
       break label$1;
      }
      $2_1 = Math_fround($2_1 - HEAPF32[$0_1 + 8 >> 2]);
      $4_1 = Math_fround($4_1 - HEAPF32[$0_1 + 12 >> 2]);
      $12_1 = Math_fround(Math_fround($2_1 * $3_1) - Math_fround($4_1 * $6_1));
      $9_1 = Math_fround($9_1 - HEAPF32[$0_1 + 4 >> 2]);
      $3_1 = Math_fround(Math_fround($4_1 * $10_1) - Math_fround($9_1 * $3_1));
      $8_1 = Math_fround(Math_fround($12_1 * $12_1) + Math_fround($3_1 * $3_1));
      $3_1 = Math_fround(Math_fround($9_1 * $6_1) - Math_fround($2_1 * $10_1));
      $10_1 = Math_fround($8_1 + Math_fround($3_1 * $3_1));
      $14_1 = HEAPF32[$0_1 + 220 >> 2];
      $12_1 = HEAPF32[$0_1 + 216 >> 2];
      $15_1 = HEAPF32[$0_1 + 212 >> 2];
      $3_1 = Math_fround(0.0);
      if (($7_1 | 0) == 2) {
       break label$3
      }
     }
     $3_1 = Math_fround($11_1 - $14_1);
     $6_1 = Math_fround($17_1 - $12_1);
     $11_1 = Math_fround(Math_fround($2_1 * $3_1) - Math_fround($4_1 * $6_1));
     $8_1 = Math_fround($11_1 * $11_1);
     $11_1 = Math_fround($19_1 - $15_1);
     $3_1 = Math_fround(Math_fround($4_1 * $11_1) - Math_fround($9_1 * $3_1));
     $8_1 = Math_fround($8_1 + Math_fround($3_1 * $3_1));
     $3_1 = Math_fround(Math_fround($9_1 * $6_1) - Math_fround($2_1 * $11_1));
     $3_1 = Math_fround($8_1 + Math_fround($3_1 * $3_1));
     $6_1 = Math_fround(0.0);
     if (($7_1 | 0) == 3) {
      break label$2
     }
    }
    $6_1 = Math_fround($16_1 - $14_1);
    $12_1 = Math_fround($18_1 - $12_1);
    $14_1 = Math_fround(Math_fround($2_1 * $6_1) - Math_fround($4_1 * $12_1));
    $8_1 = $4_1;
    $4_1 = Math_fround($20_1 - $15_1);
    $6_1 = Math_fround(Math_fround($8_1 * $4_1) - Math_fround($9_1 * $6_1));
    $2_1 = Math_fround(Math_fround($9_1 * $12_1) - Math_fround($2_1 * $4_1));
    $6_1 = Math_fround(Math_fround(Math_fround($14_1 * $14_1) + Math_fround($6_1 * $6_1)) + Math_fround($2_1 * $2_1));
   }
   $2_1 = Math_fround(Math_abs($13_1));
   $5_1 = $2_1 > Math_fround(-999999984306749440.0);
   $7_1 = $5_1 ? 0 : -1;
   $4_1 = Math_fround(Math_abs($10_1));
   $2_1 = $5_1 ? $2_1 : Math_fround(-999999984306749440.0);
   $5_1 = $4_1 > $2_1;
   $7_1 = $5_1 ? 1 : $7_1;
   $3_1 = Math_fround(Math_abs($3_1));
   $2_1 = $5_1 ? $4_1 : $2_1;
   $5_1 = $3_1 > $2_1;
   $5_1 = Math_fround(Math_abs($6_1)) > ($5_1 ? $3_1 : $2_1) ? 3 : $5_1 ? 2 : $7_1;
  }
  $7_1 = $0_1;
  $0_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
  $2(($7_1 + Math_imul($0_1, 208) | 0) + 4 | 0, $1_1, 208);
  return $0_1;
 }
 
 function $337($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] - 1 | 0;
  HEAP32[$0_1 >> 2] = $2_1;
  $3_1 = $0_1 + 4 | 0;
  $1_1 = $1_1 << 4;
  $4_1 = $3_1 + $1_1 | 0;
  $5_1 = $4_1 + 8 | 0;
  $2_1 = $3_1 + ($2_1 << 4) | 0;
  $3_1 = $2_1 + 8 | 0;
  $6_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $6_1;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $3_1;
  $2_1 = $0_1 + 84 | 0;
  $4_1 = $2_1 + $1_1 | 0;
  $3_1 = $4_1 + 8 | 0;
  $2_1 = $2_1 + (HEAP32[$0_1 >> 2] << 4) | 0;
  $5_1 = $2_1 + 8 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $6_1;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $3_1;
  $2_1 = $1_1;
  $1_1 = $0_1 + 164 | 0;
  $4_1 = $2_1 + $1_1 | 0;
  $2_1 = $4_1;
  $0_1 = $1_1 + (HEAP32[$0_1 >> 2] << 4) | 0;
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $1_1 = $2_1 + 8 | 0;
  $0_1 = $0_1 + 8 | 0;
  $4_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
 }
 
 function $338($0_1, $1_1) {
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2];
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($2_1 | 0) >= 4) {
         $2_1 = HEAPU8[$1_1 | 0];
         if ($2_1 & 8) {
          break label$6
         }
         $337($0_1, 3);
         $2_1 = HEAP32[$0_1 >> 2];
        }
        if (($2_1 | 0) < 3) {
         break label$5
        }
        $2_1 = HEAPU8[$1_1 | 0];
       }
       if ($2_1 & 4) {
        break label$4
       }
       $337($0_1, 2);
       $2_1 = HEAP32[$0_1 >> 2];
      }
      if (($2_1 | 0) < 2) {
       break label$3
      }
      $2_1 = HEAPU8[$1_1 | 0];
     }
     if ($2_1 & 2) {
      break label$2
     }
     $337($0_1, 1);
     $2_1 = HEAP32[$0_1 >> 2];
    }
    if (($2_1 | 0) < 1) {
     break label$1
    }
    $2_1 = HEAPU8[$1_1 | 0];
   }
   if ($2_1 & 1) {
    break label$1
   }
   $337($0_1, 0);
  }
 }
 
 function $339($0_1) {
  var $1_1 = 0;
  HEAP8[$0_1 + 356 | 0] = 1;
  HEAP32[$0_1 >> 2] = 0;
  HEAP8[$0_1 + 312 | 0] = 0;
  HEAP32[$0_1 + 292 >> 2] = 1566444395;
  HEAP32[$0_1 + 296 >> 2] = 1566444395;
  $1_1 = $0_1 + 336 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 300 | 0;
  HEAP32[$1_1 >> 2] = 1566444395;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 344 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0_1 + 352 | 0] = 0;
  $0_1 = $0_1 + 332 | 0;
  HEAP8[$0_1 | 0] = HEAPU8[$0_1 | 0] & 240;
 }
 
 function $340($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 292 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 296 >> 2] = $4_1;
  $4_1 = $1_1 + 8 | 0;
  $6_1 = HEAP32[$4_1 + 4 >> 2];
  $5_1 = $0_1 + 300 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $6_1;
  HEAP8[$0_1 + 356 | 0] = 1;
  $7_1 = HEAP32[$4_1 + 4 >> 2];
  $5_1 = (HEAP32[$0_1 >> 2] << 4) + $0_1 | 0;
  $6_1 = $5_1 + 12 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $7_1;
  $4_1 = $5_1 + 4 | 0;
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  $5_1 = $2_1 + 8 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $1_1 = (HEAP32[$0_1 >> 2] << 4) + $0_1 | 0;
  $4_1 = $1_1 + 92 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $1_1 + 84 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = (HEAP32[$0_1 >> 2] << 4) + $0_1 | 0;
  $2_1 = $1_1 + 164 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $2_1 = $3_1 + 8 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $1_1 + 172 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
 }
 
 function $341($0_1) {
  var $1_1 = Math_fround(0), $2_1 = Math_fround(0), $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19_1 = 0, $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = 0, $24_1 = 0, $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0);
  $3_1 = global$0 + -64 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!HEAPU8[$0_1 + 356 | 0]) {
    $5_1 = HEAPU8[$0_1 + 312 | 0];
    break label$1;
   }
   HEAP8[$0_1 + 356 | 0] = 0;
   $8_1 = $0_1 + 352 | 0;
   HEAP8[$8_1 | 0] = 0;
   $9_1 = $0_1 + 344 | 0;
   HEAP32[$9_1 >> 2] = 0;
   HEAP32[$9_1 + 4 >> 2] = 0;
   $13_1 = $0_1 + 336 | 0;
   HEAP32[$13_1 >> 2] = 0;
   HEAP32[$13_1 + 4 >> 2] = 0;
   $14_1 = $0_1 + 332 | 0;
   $10_1 = HEAPU8[$14_1 | 0];
   $17_1 = $10_1 & -16;
   HEAP8[$14_1 | 0] = $17_1;
   $13_1 = $0_1 + 316 | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      switch (HEAP32[$0_1 >> 2]) {
      case 1:
       $5_1 = HEAP32[$0_1 + 168 >> 2];
       HEAP32[$0_1 + 260 >> 2] = HEAP32[$0_1 + 164 >> 2];
       HEAP32[$0_1 + 264 >> 2] = $5_1;
       $5_1 = HEAP32[$0_1 + 88 >> 2];
       HEAP32[$0_1 + 244 >> 2] = HEAP32[$0_1 + 84 >> 2];
       HEAP32[$0_1 + 248 >> 2] = $5_1;
       $10_1 = $0_1 + 172 | 0;
       $19_1 = HEAP32[$10_1 + 4 >> 2];
       $14_1 = $0_1 + 268 | 0;
       $5_1 = $14_1;
       HEAP32[$5_1 >> 2] = HEAP32[$10_1 >> 2];
       HEAP32[$5_1 + 4 >> 2] = $19_1;
       $10_1 = $0_1 + 92 | 0;
       $19_1 = HEAP32[$10_1 + 4 >> 2];
       $5_1 = $0_1 + 252 | 0;
       HEAP32[$5_1 >> 2] = HEAP32[$10_1 >> 2];
       HEAP32[$5_1 + 4 >> 2] = $19_1;
       HEAP8[$8_1 | 0] = 0;
       HEAP32[$0_1 + 288 >> 2] = 0;
       HEAPF32[$0_1 + 280 >> 2] = HEAPF32[$0_1 + 248 >> 2] - HEAPF32[$0_1 + 264 >> 2];
       HEAPF32[$0_1 + 276 >> 2] = HEAPF32[$0_1 + 244 >> 2] - HEAPF32[$0_1 + 260 >> 2];
       HEAPF32[$0_1 + 284 >> 2] = HEAPF32[$5_1 >> 2] - HEAPF32[$14_1 >> 2];
       HEAP32[$9_1 >> 2] = 0;
       HEAP32[$9_1 + 4 >> 2] = 0;
       HEAP32[$0_1 + 336 >> 2] = 1065353216;
       HEAP32[$0_1 + 340 >> 2] = 0;
       HEAP8[$0_1 + 332 | 0] = $17_1;
       break label$4;
      case 2:
       $5_1 = 1;
       $7_1 = HEAPF32[$0_1 + 4 >> 2];
       $2_1 = Math_fround(HEAPF32[$0_1 + 20 >> 2] - $7_1);
       $11_1 = HEAPF32[$0_1 + 8 >> 2];
       $4_1 = Math_fround(HEAPF32[$0_1 + 24 >> 2] - $11_1);
       $12_1 = HEAPF32[$0_1 + 12 >> 2];
       $6_1 = Math_fround(HEAPF32[$0_1 + 28 >> 2] - $12_1);
       $7_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(0.0) - $7_1) * $2_1) + Math_fround(Math_fround(Math_fround(0.0) - $11_1) * $4_1)) + Math_fround(Math_fround(Math_fround(0.0) - $12_1) * $6_1));
       $1_1 = Math_fround(0.0);
       label$10 : {
        if (!($7_1 > Math_fround(0.0))) {
         break label$10
        }
        $1_1 = Math_fround(Math_fround(Math_fround($2_1 * $2_1) + Math_fround($4_1 * $4_1)) + Math_fround($6_1 * $6_1));
        if (!($1_1 > $7_1)) {
         $5_1 = 2;
         $1_1 = Math_fround(1.0);
         break label$10;
        }
        $5_1 = 3;
        $1_1 = Math_fround($7_1 / $1_1);
       }
       $9_1 = $0_1 + 344 | 0;
       HEAP32[$9_1 >> 2] = 0;
       HEAP32[$9_1 + 4 >> 2] = 0;
       HEAPF32[$0_1 + 340 >> 2] = $1_1;
       HEAPF32[$0_1 + 336 >> 2] = Math_fround(1.0) - $1_1;
       $9_1 = $0_1 + 332 | 0;
       HEAP8[$9_1 | 0] = $5_1 | $17_1;
       HEAP32[$0_1 + 256 >> 2] = 0;
       $2_1 = HEAPF32[$0_1 + 92 >> 2];
       $7_1 = Math_fround($2_1 + Math_fround($1_1 * Math_fround(HEAPF32[$0_1 + 108 >> 2] - $2_1)));
       HEAPF32[$0_1 + 252 >> 2] = $7_1;
       $2_1 = HEAPF32[$0_1 + 88 >> 2];
       $11_1 = Math_fround($2_1 + Math_fround($1_1 * Math_fround(HEAPF32[$0_1 + 104 >> 2] - $2_1)));
       HEAPF32[$0_1 + 248 >> 2] = $11_1;
       $2_1 = HEAPF32[$0_1 + 84 >> 2];
       $12_1 = Math_fround($2_1 + Math_fround($1_1 * Math_fround(HEAPF32[$0_1 + 100 >> 2] - $2_1)));
       HEAPF32[$0_1 + 244 >> 2] = $12_1;
       $15_1 = HEAPF32[$0_1 + 180 >> 2];
       $16_1 = HEAPF32[$0_1 + 184 >> 2];
       $2_1 = HEAPF32[$0_1 + 168 >> 2];
       $18_1 = HEAPF32[$0_1 + 188 >> 2];
       $4_1 = HEAPF32[$0_1 + 172 >> 2];
       $6_1 = HEAPF32[$0_1 + 164 >> 2];
       HEAP32[$0_1 + 288 >> 2] = 0;
       $4_1 = Math_fround($4_1 + Math_fround($1_1 * Math_fround($18_1 - $4_1)));
       HEAPF32[$0_1 + 284 >> 2] = $7_1 - $4_1;
       $2_1 = Math_fround($2_1 + Math_fround($1_1 * Math_fround($16_1 - $2_1)));
       HEAPF32[$0_1 + 280 >> 2] = $11_1 - $2_1;
       $1_1 = Math_fround($6_1 + Math_fround($1_1 * Math_fround($15_1 - $6_1)));
       HEAPF32[$0_1 + 276 >> 2] = $12_1 - $1_1;
       HEAP32[$0_1 + 272 >> 2] = 0;
       HEAPF32[$0_1 + 268 >> 2] = $4_1;
       HEAPF32[$0_1 + 264 >> 2] = $2_1;
       HEAPF32[$0_1 + 260 >> 2] = $1_1;
       $338($0_1, $9_1);
       break label$4;
      case 3:
       $5_1 = $3_1 + 32 | 0;
       HEAP32[$5_1 >> 2] = 0;
       HEAP32[$5_1 + 4 >> 2] = 0;
       HEAP32[$3_1 + 24 >> 2] = 0;
       HEAP32[$3_1 + 28 >> 2] = 0;
       $342($3_1 + 24 | 0, $0_1 + 4 | 0, $0_1 + 20 | 0, $0_1 + 36 | 0, $13_1);
       HEAP32[$0_1 + 256 >> 2] = 0;
       $1_1 = HEAPF32[$0_1 + 336 >> 2];
       $2_1 = HEAPF32[$0_1 + 340 >> 2];
       $4_1 = HEAPF32[$9_1 >> 2];
       $6_1 = Math_fround(Math_fround(Math_fround($1_1 * HEAPF32[$0_1 + 92 >> 2]) + Math_fround($2_1 * HEAPF32[$0_1 + 108 >> 2])) + Math_fround($4_1 * HEAPF32[$0_1 + 124 >> 2]));
       HEAPF32[$0_1 + 252 >> 2] = $6_1;
       $7_1 = Math_fround(Math_fround(Math_fround($1_1 * HEAPF32[$0_1 + 88 >> 2]) + Math_fround($2_1 * HEAPF32[$0_1 + 104 >> 2])) + Math_fround($4_1 * HEAPF32[$0_1 + 120 >> 2]));
       HEAPF32[$0_1 + 248 >> 2] = $7_1;
       $11_1 = Math_fround(Math_fround(Math_fround($1_1 * HEAPF32[$0_1 + 84 >> 2]) + Math_fround($2_1 * HEAPF32[$0_1 + 100 >> 2])) + Math_fround($4_1 * HEAPF32[$0_1 + 116 >> 2]));
       HEAPF32[$0_1 + 244 >> 2] = $11_1;
       $12_1 = HEAPF32[$0_1 + 180 >> 2];
       $15_1 = HEAPF32[$0_1 + 196 >> 2];
       $16_1 = HEAPF32[$0_1 + 168 >> 2];
       $18_1 = HEAPF32[$0_1 + 184 >> 2];
       $20_1 = HEAPF32[$0_1 + 200 >> 2];
       $21_1 = HEAPF32[$0_1 + 172 >> 2];
       $25 = HEAPF32[$0_1 + 188 >> 2];
       $26_1 = HEAPF32[$0_1 + 204 >> 2];
       $27_1 = HEAPF32[$0_1 + 164 >> 2];
       HEAP32[$0_1 + 288 >> 2] = 0;
       $22_1 = $6_1;
       $6_1 = Math_fround(Math_fround(Math_fround($1_1 * $21_1) + Math_fround($2_1 * $25)) + Math_fround($4_1 * $26_1));
       HEAPF32[$0_1 + 284 >> 2] = $22_1 - $6_1;
       $22_1 = $7_1;
       $7_1 = Math_fround(Math_fround(Math_fround($1_1 * $16_1) + Math_fround($2_1 * $18_1)) + Math_fround($4_1 * $20_1));
       HEAPF32[$0_1 + 280 >> 2] = $22_1 - $7_1;
       $1_1 = Math_fround(Math_fround(Math_fround($1_1 * $27_1) + Math_fround($2_1 * $12_1)) + Math_fround($4_1 * $15_1));
       HEAPF32[$0_1 + 276 >> 2] = $11_1 - $1_1;
       HEAP32[$0_1 + 272 >> 2] = 0;
       HEAPF32[$0_1 + 268 >> 2] = $6_1;
       HEAPF32[$0_1 + 264 >> 2] = $7_1;
       HEAPF32[$0_1 + 260 >> 2] = $1_1;
       $338($0_1, $14_1);
       break label$4;
      case 4:
       $5_1 = $3_1 + 16 | 0;
       HEAP32[$5_1 >> 2] = 0;
       HEAP32[$5_1 + 4 >> 2] = 0;
       HEAP32[$3_1 + 8 >> 2] = 0;
       HEAP32[$3_1 + 12 >> 2] = 0;
       HEAP32[$13_1 >> 2] = 0;
       HEAP32[$13_1 + 4 >> 2] = 0;
       $5_1 = $13_1 + 8 | 0;
       HEAP32[$5_1 >> 2] = 0;
       HEAP32[$5_1 + 4 >> 2] = 0;
       HEAP8[$0_1 + 332 | 0] = $10_1 | 15;
       $5_1 = $0_1 + 4 | 0;
       $1_1 = HEAPF32[$5_1 >> 2];
       $2_1 = HEAPF32[$0_1 + 8 >> 2];
       $4_1 = HEAPF32[$0_1 + 12 >> 2];
       $9_1 = $0_1 + 20 | 0;
       $6_1 = HEAPF32[$9_1 >> 2];
       $7_1 = HEAPF32[$0_1 + 24 >> 2];
       $11_1 = HEAPF32[$0_1 + 28 >> 2];
       $17_1 = $0_1 + 36 | 0;
       $12_1 = HEAPF32[$17_1 >> 2];
       $15_1 = HEAPF32[$0_1 + 40 >> 2];
       $16_1 = HEAPF32[$0_1 + 44 >> 2];
       $14_1 = $0_1 + 52 | 0;
       $18_1 = HEAPF32[$14_1 >> 2];
       $20_1 = HEAPF32[$0_1 + 56 >> 2];
       $21_1 = HEAPF32[$0_1 + 60 >> 2];
       HEAP8[$3_1 + 40 | 0] = 0;
       $8_1 = $343($1_1, $2_1, $4_1, $6_1, $7_1, $11_1, $12_1, $15_1, $16_1, $18_1, $20_1, $21_1);
       $10_1 = $343($1_1, $2_1, $4_1, $12_1, $15_1, $16_1, $18_1, $20_1, $21_1, $6_1, $7_1, $11_1);
       $19_1 = $343($1_1, $2_1, $4_1, $18_1, $20_1, $21_1, $6_1, $7_1, $11_1, $12_1, $15_1, $16_1);
       $24_1 = $343($6_1, $7_1, $11_1, $18_1, $20_1, $21_1, $12_1, $15_1, $16_1, $1_1, $2_1, $4_1);
       $23_1 = $24_1 | ($8_1 | $10_1 | $19_1);
       if (($23_1 | 0) >= 0) {
        if ($23_1) {
         $1_1 = Math_fround(3402823466385288598117041.0e14);
         label$14 : {
          if (!$8_1) {
           break label$14
          }
          $342($3_1 + 8 | 0, $5_1, $9_1, $17_1, $3_1 + 24 | 0);
          $4_1 = HEAPF32[$3_1 + 24 >> 2];
          $6_1 = HEAPF32[$3_1 + 28 >> 2];
          $7_1 = HEAPF32[$3_1 + 32 >> 2];
          $2_1 = Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($6_1 * $6_1)) + Math_fround($7_1 * $7_1));
          $1_1 = Math_fround(3402823466385288598117041.0e14);
          if (!($2_1 < Math_fround(3402823466385288598117041.0e14))) {
           break label$14
          }
          HEAPF32[$0_1 + 316 >> 2] = $4_1;
          $8_1 = HEAP32[$3_1 + 48 >> 2];
          HEAP32[$0_1 + 336 >> 2] = HEAP32[$3_1 + 44 >> 2];
          HEAP32[$0_1 + 340 >> 2] = $8_1;
          HEAPF32[$0_1 + 328 >> 2] = HEAPF32[$3_1 + 36 >> 2];
          HEAPF32[$0_1 + 324 >> 2] = $7_1;
          HEAPF32[$0_1 + 320 >> 2] = $6_1;
          HEAP32[$0_1 + 348 >> 2] = 0;
          HEAPF32[$0_1 + 344 >> 2] = HEAPF32[$3_1 + 52 >> 2];
          $8_1 = HEAPU8[$3_1 + 40 | 0];
          HEAP8[$0_1 + 332 | 0] = $8_1 & 1 | HEAPU8[$0_1 + 332 | 0] & 240 | $8_1 & 2 | $8_1 & 4;
          $1_1 = $2_1;
         }
         label$15 : {
          if (!$10_1) {
           break label$15
          }
          $342($3_1 + 8 | 0, $5_1, $17_1, $14_1, $3_1 + 24 | 0);
          $4_1 = HEAPF32[$3_1 + 24 >> 2];
          $6_1 = HEAPF32[$3_1 + 28 >> 2];
          $7_1 = HEAPF32[$3_1 + 32 >> 2];
          $2_1 = Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($6_1 * $6_1)) + Math_fround($7_1 * $7_1));
          if (!($2_1 < $1_1)) {
           break label$15
          }
          HEAPF32[$0_1 + 316 >> 2] = $4_1;
          HEAPF32[$0_1 + 336 >> 2] = HEAPF32[$3_1 + 44 >> 2];
          HEAPF32[$0_1 + 328 >> 2] = HEAPF32[$3_1 + 36 >> 2];
          HEAPF32[$0_1 + 324 >> 2] = $7_1;
          HEAPF32[$0_1 + 320 >> 2] = $6_1;
          HEAP32[$0_1 + 340 >> 2] = 0;
          $10_1 = $3_1 + 48 | 0;
          $23_1 = HEAP32[$10_1 + 4 >> 2];
          $8_1 = $0_1 + 344 | 0;
          HEAP32[$8_1 >> 2] = HEAP32[$10_1 >> 2];
          HEAP32[$8_1 + 4 >> 2] = $23_1;
          $10_1 = HEAPU8[$3_1 + 40 | 0];
          $8_1 = $10_1 << 1;
          HEAP8[$0_1 + 332 | 0] = $8_1 & 8 | ($8_1 & 4 | ($10_1 & 1 | HEAPU8[$0_1 + 332 | 0] & 240));
          $1_1 = $2_1;
         }
         label$16 : {
          if (!$19_1) {
           break label$16
          }
          $342($3_1 + 8 | 0, $5_1, $14_1, $9_1, $3_1 + 24 | 0);
          $4_1 = HEAPF32[$3_1 + 24 >> 2];
          $6_1 = HEAPF32[$3_1 + 28 >> 2];
          $7_1 = HEAPF32[$3_1 + 32 >> 2];
          $2_1 = Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($6_1 * $6_1)) + Math_fround($7_1 * $7_1));
          if (!($2_1 < $1_1)) {
           break label$16
          }
          HEAPF32[$0_1 + 316 >> 2] = $4_1;
          HEAPF32[$0_1 + 336 >> 2] = HEAPF32[$3_1 + 44 >> 2];
          HEAPF32[$0_1 + 328 >> 2] = HEAPF32[$3_1 + 36 >> 2];
          HEAPF32[$0_1 + 324 >> 2] = $7_1;
          HEAPF32[$0_1 + 320 >> 2] = $6_1;
          HEAP32[$0_1 + 344 >> 2] = 0;
          HEAPF32[$0_1 + 348 >> 2] = HEAPF32[$3_1 + 48 >> 2];
          HEAPF32[$0_1 + 340 >> 2] = HEAPF32[$3_1 + 52 >> 2];
          $5_1 = HEAPU8[$3_1 + 40 | 0];
          HEAP8[$0_1 + 332 | 0] = $5_1 & 1 | HEAPU8[$0_1 + 332 | 0] & 240 | $5_1 >>> 1 & 2 | $5_1 << 2 & 8;
          $1_1 = $2_1;
         }
         label$17 : {
          if (!$24_1) {
           break label$17
          }
          $342($3_1 + 8 | 0, $9_1, $14_1, $17_1, $3_1 + 24 | 0);
          $22_1 = $1_1;
          $1_1 = HEAPF32[$3_1 + 24 >> 2];
          $2_1 = HEAPF32[$3_1 + 28 >> 2];
          $4_1 = HEAPF32[$3_1 + 32 >> 2];
          if (!($22_1 > Math_fround(Math_fround(Math_fround($1_1 * $1_1) + Math_fround($2_1 * $2_1)) + Math_fround($4_1 * $4_1)))) {
           break label$17
          }
          HEAPF32[$0_1 + 316 >> 2] = $1_1;
          HEAP32[$0_1 + 336 >> 2] = 0;
          HEAPF32[$0_1 + 328 >> 2] = HEAPF32[$3_1 + 36 >> 2];
          HEAPF32[$0_1 + 324 >> 2] = $4_1;
          HEAPF32[$0_1 + 320 >> 2] = $2_1;
          HEAPF32[$0_1 + 340 >> 2] = HEAPF32[$3_1 + 44 >> 2];
          HEAPF32[$0_1 + 348 >> 2] = HEAPF32[$3_1 + 48 >> 2];
          HEAPF32[$0_1 + 344 >> 2] = HEAPF32[$3_1 + 52 >> 2];
          $5_1 = HEAPU8[$3_1 + 40 | 0];
          HEAP8[$0_1 + 332 | 0] = $5_1 & 4 | HEAPU8[$0_1 + 332 | 0] & 240 | $5_1 << 1 & 2 | $5_1 << 2 & 8;
         }
         HEAP32[$0_1 + 256 >> 2] = 0;
         $1_1 = HEAPF32[$0_1 + 336 >> 2];
         $2_1 = HEAPF32[$0_1 + 340 >> 2];
         $4_1 = HEAPF32[$0_1 + 344 >> 2];
         $6_1 = HEAPF32[$0_1 + 348 >> 2];
         $7_1 = Math_fround(Math_fround(Math_fround(Math_fround($1_1 * HEAPF32[$0_1 + 92 >> 2]) + Math_fround($2_1 * HEAPF32[$0_1 + 108 >> 2])) + Math_fround($4_1 * HEAPF32[$0_1 + 124 >> 2])) + Math_fround($6_1 * HEAPF32[$0_1 + 140 >> 2]));
         HEAPF32[$0_1 + 252 >> 2] = $7_1;
         $11_1 = Math_fround(Math_fround(Math_fround(Math_fround($1_1 * HEAPF32[$0_1 + 88 >> 2]) + Math_fround($2_1 * HEAPF32[$0_1 + 104 >> 2])) + Math_fround($4_1 * HEAPF32[$0_1 + 120 >> 2])) + Math_fround($6_1 * HEAPF32[$0_1 + 136 >> 2]));
         HEAPF32[$0_1 + 248 >> 2] = $11_1;
         $12_1 = Math_fround(Math_fround(Math_fround(Math_fround($1_1 * HEAPF32[$0_1 + 84 >> 2]) + Math_fround($2_1 * HEAPF32[$0_1 + 100 >> 2])) + Math_fround($4_1 * HEAPF32[$0_1 + 116 >> 2])) + Math_fround($6_1 * HEAPF32[$0_1 + 132 >> 2]));
         HEAPF32[$0_1 + 244 >> 2] = $12_1;
         HEAP32[$0_1 + 272 >> 2] = 0;
         HEAP32[$0_1 + 288 >> 2] = 0;
         $15_1 = Math_fround(Math_fround(Math_fround(Math_fround($1_1 * HEAPF32[$0_1 + 172 >> 2]) + Math_fround($2_1 * HEAPF32[$0_1 + 188 >> 2])) + Math_fround($4_1 * HEAPF32[$0_1 + 204 >> 2])) + Math_fround($6_1 * HEAPF32[$0_1 + 220 >> 2]));
         HEAPF32[$0_1 + 268 >> 2] = $15_1;
         $16_1 = Math_fround(Math_fround(Math_fround(Math_fround($1_1 * HEAPF32[$0_1 + 168 >> 2]) + Math_fround($2_1 * HEAPF32[$0_1 + 184 >> 2])) + Math_fround($4_1 * HEAPF32[$0_1 + 200 >> 2])) + Math_fround($6_1 * HEAPF32[$0_1 + 216 >> 2]));
         HEAPF32[$0_1 + 264 >> 2] = $16_1;
         $1_1 = Math_fround(Math_fround(Math_fround(Math_fround($1_1 * HEAPF32[$0_1 + 164 >> 2]) + Math_fround($2_1 * HEAPF32[$0_1 + 180 >> 2])) + Math_fround($4_1 * HEAPF32[$0_1 + 196 >> 2])) + Math_fround($6_1 * HEAPF32[$0_1 + 212 >> 2]));
         HEAPF32[$0_1 + 260 >> 2] = $1_1;
         HEAPF32[$0_1 + 284 >> 2] = $7_1 - $15_1;
         HEAPF32[$0_1 + 280 >> 2] = $11_1 - $16_1;
         HEAPF32[$0_1 + 276 >> 2] = $12_1 - $1_1;
         $338($0_1, $0_1 + 332 | 0);
         break label$4;
        }
        HEAP32[$0_1 + 276 >> 2] = 0;
        HEAP32[$0_1 + 280 >> 2] = 0;
        $5_1 = 1;
        HEAP8[$0_1 + 312 | 0] = 1;
        $0_1 = $0_1 + 284 | 0;
        HEAP32[$0_1 >> 2] = 0;
        HEAP32[$0_1 + 4 >> 2] = 0;
        break label$1;
       }
       HEAP8[$0_1 + 352 | 0] = 1;
       break;
      case 0:
       break label$3;
      default:
       break label$5;
      };
     }
     $5_1 = 0;
     break label$3;
    }
    $5_1 = 0;
    label$18 : {
     if (!(HEAPF32[$13_1 + 20 >> 2] >= Math_fround(0.0))) {
      break label$18
     }
     if (!(HEAPF32[$13_1 + 24 >> 2] >= Math_fround(0.0))) {
      break label$18
     }
     if (!(HEAPF32[$13_1 + 28 >> 2] >= Math_fround(0.0))) {
      break label$18
     }
     $5_1 = HEAPF32[$13_1 + 32 >> 2] >= Math_fround(0.0);
    }
   }
   HEAP8[$0_1 + 312 | 0] = $5_1;
  }
  global$0 = $3_1 - -64 | 0;
  return ($5_1 | 0) != 0;
 }
 
 function $342($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = 0;
  $10_1 = HEAPU8[$4_1 + 16 | 0] & -16;
  HEAP8[$4_1 + 16 | 0] = $10_1;
  $27_1 = HEAPF32[$3_1 >> 2];
  $12_1 = HEAPF32[$1_1 >> 2];
  $17_1 = Math_fround($27_1 - $12_1);
  $11_1 = HEAPF32[$0_1 >> 2];
  $5_1 = Math_fround($11_1 - $12_1);
  $28_1 = HEAPF32[$3_1 + 4 >> 2];
  $13_1 = HEAPF32[$1_1 + 4 >> 2];
  $18_1 = Math_fround($28_1 - $13_1);
  $8_1 = HEAPF32[$0_1 + 4 >> 2];
  $6_1 = Math_fround($8_1 - $13_1);
  $29_1 = HEAPF32[$3_1 + 8 >> 2];
  $14_1 = HEAPF32[$1_1 + 8 >> 2];
  $19_1 = Math_fround($29_1 - $14_1);
  $15_1 = HEAPF32[$0_1 + 8 >> 2];
  $7_1 = Math_fround($15_1 - $14_1);
  $9_1 = Math_fround(Math_fround(Math_fround($17_1 * $5_1) + Math_fround($18_1 * $6_1)) + Math_fround($19_1 * $7_1));
  $30_1 = $4_1;
  label$1 : {
   label$2 : {
    $23_1 = HEAPF32[$2_1 >> 2];
    $20_1 = Math_fround($23_1 - $12_1);
    $24_1 = HEAPF32[$2_1 + 4 >> 2];
    $21_1 = Math_fround($24_1 - $13_1);
    $25 = HEAPF32[$2_1 + 8 >> 2];
    $22_1 = Math_fround($25 - $14_1);
    $6_1 = Math_fround(Math_fround(Math_fround($20_1 * $5_1) + Math_fround($21_1 * $6_1)) + Math_fround($22_1 * $7_1));
    if (!($6_1 <= Math_fround(0.0))) {
     break label$2
    }
    if (!($9_1 <= Math_fround(0.0))) {
     break label$2
    }
    $0_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $0_1;
    $1_1 = $1_1 + 8 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $0_1 = $4_1 + 8 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    HEAP8[$4_1 + 16 | 0] = $10_1 | 1;
    $6_1 = Math_fround(0.0);
    $5_1 = Math_fround(0.0);
    $7_1 = Math_fround(1.0);
    break label$1;
   }
   $5_1 = Math_fround($11_1 - $23_1);
   $7_1 = Math_fround($8_1 - $24_1);
   $16_1 = Math_fround($15_1 - $25);
   $26_1 = Math_fround(Math_fround(Math_fround($17_1 * $5_1) + Math_fround($18_1 * $7_1)) + Math_fround($19_1 * $16_1));
   label$3 : {
    $7_1 = Math_fround(Math_fround(Math_fround($20_1 * $5_1) + Math_fround($21_1 * $7_1)) + Math_fround($22_1 * $16_1));
    if (!($7_1 >= Math_fround(0.0))) {
     break label$3
    }
    if (!($7_1 >= $26_1)) {
     break label$3
    }
    $0_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $0_1;
    $1_1 = $2_1 + 8 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $0_1 = $4_1 + 8 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    HEAP8[$4_1 + 16 | 0] = $10_1 | 2;
    $6_1 = Math_fround(1.0);
    $5_1 = Math_fround(0.0);
    $7_1 = Math_fround(0.0);
    break label$1;
   }
   $16_1 = Math_fround(Math_fround($6_1 * $26_1) - Math_fround($7_1 * $9_1));
   label$4 : {
    if (!($7_1 <= Math_fround(0.0))) {
     break label$4
    }
    if (!($6_1 >= Math_fround(0.0))) {
     break label$4
    }
    $5_1 = Math_fround(0.0);
    if (!($16_1 <= Math_fround(0.0))) {
     break label$4
    }
    HEAP32[$4_1 + 12 >> 2] = 0;
    HEAP8[$4_1 + 16 | 0] = $10_1 | 3;
    $6_1 = Math_fround($6_1 / Math_fround($6_1 - $7_1));
    HEAPF32[$4_1 + 8 >> 2] = $14_1 + Math_fround($22_1 * $6_1);
    HEAPF32[$4_1 + 4 >> 2] = $13_1 + Math_fround($21_1 * $6_1);
    HEAPF32[$4_1 >> 2] = $12_1 + Math_fround($20_1 * $6_1);
    $7_1 = Math_fround(Math_fround(1.0) - $6_1);
    break label$1;
   }
   $5_1 = Math_fround($11_1 - $27_1);
   $8_1 = Math_fround($8_1 - $28_1);
   $15_1 = Math_fround($15_1 - $29_1);
   $11_1 = Math_fround(Math_fround(Math_fround($20_1 * $5_1) + Math_fround($21_1 * $8_1)) + Math_fround($22_1 * $15_1));
   label$5 : {
    $5_1 = Math_fround(Math_fround(Math_fround($17_1 * $5_1) + Math_fround($18_1 * $8_1)) + Math_fround($19_1 * $15_1));
    if (!($5_1 >= Math_fround(0.0))) {
     break label$5
    }
    if (!($5_1 >= $11_1)) {
     break label$5
    }
    $0_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $0_1;
    $1_1 = $3_1 + 8 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $0_1 = $4_1 + 8 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    HEAP8[$4_1 + 16 | 0] = $10_1 | 4;
    $5_1 = Math_fround(1.0);
    $6_1 = Math_fround(0.0);
    $7_1 = Math_fround(0.0);
    break label$1;
   }
   $8_1 = Math_fround(Math_fround($11_1 * $9_1) - Math_fround($6_1 * $5_1));
   label$6 : {
    if (!($5_1 <= Math_fround(0.0))) {
     break label$6
    }
    if (!($9_1 >= Math_fround(0.0))) {
     break label$6
    }
    $6_1 = Math_fround(0.0);
    if (!($8_1 <= Math_fround(0.0))) {
     break label$6
    }
    HEAP32[$4_1 + 12 >> 2] = 0;
    HEAP8[$4_1 + 16 | 0] = $10_1 | 5;
    $5_1 = Math_fround($9_1 / Math_fround($9_1 - $5_1));
    HEAPF32[$4_1 + 8 >> 2] = $14_1 + Math_fround($19_1 * $5_1);
    HEAPF32[$4_1 + 4 >> 2] = $13_1 + Math_fround($18_1 * $5_1);
    HEAPF32[$4_1 >> 2] = $12_1 + Math_fround($17_1 * $5_1);
    $7_1 = Math_fround(Math_fround(1.0) - $5_1);
    break label$1;
   }
   $6_1 = Math_fround(Math_fround($7_1 * $5_1) - Math_fround($11_1 * $26_1));
   label$7 : {
    $9_1 = Math_fround($11_1 - $5_1);
    if (!($9_1 >= Math_fround(0.0))) {
     break label$7
    }
    $5_1 = Math_fround($26_1 - $7_1);
    if (!($5_1 >= Math_fround(0.0))) {
     break label$7
    }
    if (!($6_1 <= Math_fround(0.0))) {
     break label$7
    }
    HEAP32[$4_1 + 12 >> 2] = 0;
    HEAP8[$4_1 + 16 | 0] = $10_1 | 6;
    $5_1 = Math_fround($5_1 / Math_fround($5_1 + $9_1));
    HEAPF32[$4_1 + 8 >> 2] = $25 + Math_fround(Math_fround($29_1 - $25) * $5_1);
    HEAPF32[$4_1 + 4 >> 2] = $24_1 + Math_fround(Math_fround($28_1 - $24_1) * $5_1);
    HEAPF32[$4_1 >> 2] = $23_1 + Math_fround(Math_fround($27_1 - $23_1) * $5_1);
    $6_1 = Math_fround(Math_fround(1.0) - $5_1);
    $7_1 = Math_fround(0.0);
    break label$1;
   }
   HEAP32[$4_1 + 12 >> 2] = 0;
   HEAP8[$4_1 + 16 | 0] = $10_1 | 7;
   $6_1 = Math_fround(Math_fround(1.0) / Math_fround($16_1 + Math_fround($6_1 + $8_1)));
   $5_1 = Math_fround($16_1 * $6_1);
   $6_1 = Math_fround($8_1 * $6_1);
   HEAPF32[$4_1 + 8 >> 2] = Math_fround($19_1 * $5_1) + Math_fround($14_1 + Math_fround($22_1 * $6_1));
   HEAPF32[$4_1 + 4 >> 2] = Math_fround($18_1 * $5_1) + Math_fround($13_1 + Math_fround($21_1 * $6_1));
   HEAPF32[$4_1 >> 2] = Math_fround($17_1 * $5_1) + Math_fround($12_1 + Math_fround($20_1 * $6_1));
   $7_1 = Math_fround(Math_fround(Math_fround(1.0) - $6_1) - $5_1);
  }
  HEAPF32[$30_1 + 20 >> 2] = $7_1;
  HEAP32[$4_1 + 32 >> 2] = 0;
  HEAPF32[$4_1 + 28 >> 2] = $5_1;
  HEAPF32[$4_1 + 24 >> 2] = $6_1;
 }
 
 function $343($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  var $12_1 = Math_fround(0), $13_1 = Math_fround(0);
  $4_1 = Math_fround($4_1 - $1_1);
  $8_1 = Math_fround($8_1 - $2_1);
  $5_1 = Math_fround($5_1 - $2_1);
  $7_1 = Math_fround($7_1 - $1_1);
  $12_1 = Math_fround(Math_fround($4_1 * $8_1) - Math_fround($5_1 * $7_1));
  $13_1 = $5_1;
  $5_1 = Math_fround($6_1 - $0_1);
  $3_1 = Math_fround($3_1 - $0_1);
  $6_1 = Math_fround(Math_fround($13_1 * $5_1) - Math_fround($3_1 * $8_1));
  $4_1 = Math_fround(Math_fround($3_1 * $7_1) - Math_fround($4_1 * $5_1));
  $3_1 = Math_fround(Math_fround(Math_fround($12_1 * Math_fround($9_1 - $0_1)) + Math_fround($6_1 * Math_fround($10_1 - $1_1))) + Math_fround($4_1 * Math_fround($11_1 - $2_1)));
  return Math_fround($3_1 * $3_1) < Math_fround(9.99999905104687e-09) ? -1 : Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(0.0) - $0_1) * $12_1) + Math_fround(Math_fround(Math_fround(0.0) - $1_1) * $6_1)) + Math_fround($4_1 * Math_fround(Math_fround(0.0) - $2_1))) * $3_1) < Math_fround(0.0);
 }
 
 function $344($0_1, $1_1) {
  var $2_1 = 0, $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13_1 = Math_fround(0);
  $5_1 = HEAP32[$0_1 >> 2];
  $6_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
  $2_1 = $0_1 + 12 | 0;
  $8_1 = HEAPF32[$1_1 + 8 >> 2];
  $9_1 = HEAPF32[$1_1 + 4 >> 2];
  $10_1 = HEAPF32[$1_1 >> 2];
  label$1 : {
   while (1) {
    if (($6_1 | 0) == ($7_1 | 0)) {
     break label$1
    }
    $4_1 = HEAPF32[$2_1 >> 2];
    $11_1 = $2_1 - 4 | 0;
    $12_1 = $2_1 - 8 | 0;
    $2_1 = $2_1 + 16 | 0;
    $7_1 = $7_1 + 1 | 0;
    $3_1 = Math_fround($10_1 - HEAPF32[$12_1 >> 2]);
    $13_1 = Math_fround($3_1 * $3_1);
    $3_1 = Math_fround($9_1 - HEAPF32[$11_1 >> 2]);
    $4_1 = Math_fround($8_1 - $4_1);
    if (!(HEAPF32[$0_1 + 308 >> 2] >= Math_fround(Math_fround($13_1 + Math_fround($3_1 * $3_1)) + Math_fround($4_1 * $4_1)))) {
     continue
    }
    break;
   };
   $6_1 = $7_1 - 1 | 0;
  }
  $2_1 = 0;
  label$3 : {
   if (HEAPF32[$1_1 + 12 >> 2] != HEAPF32[$0_1 + 304 >> 2]) {
    break label$3
   }
   if (HEAPF32[$0_1 + 300 >> 2] != $8_1) {
    break label$3
   }
   if (HEAPF32[$0_1 + 296 >> 2] != $9_1) {
    break label$3
   }
   $2_1 = HEAPF32[$0_1 + 292 >> 2] == $10_1;
  }
  return ($6_1 | 0) < ($5_1 | 0) | $2_1;
 }
 
 function $345($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = 0, $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = 0, $23_1 = Math_fround(0), $24_1 = 0, $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = 0, $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  HEAP32[$0_1 + 56 >> 2] = 0;
  $4_1 = $5_1 + 248 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$5_1 + 240 >> 2] = 0;
  HEAP32[$5_1 + 244 >> 2] = 0;
  $10_1 = $1_1 + 8 | 0;
  $8_1 = HEAP32[$10_1 + 4 >> 2];
  $4_1 = $5_1 + 184 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$10_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $10_1 = $1_1 + 24 | 0;
  $8_1 = HEAP32[$10_1 + 4 >> 2];
  $4_1 = $5_1 + 200 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$10_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $10_1 = $1_1 + 40 | 0;
  $8_1 = HEAP32[$10_1 + 4 >> 2];
  $4_1 = $5_1 + 216 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$10_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $8_1 = $1_1 + 56 | 0;
  $9_1 = HEAP32[$8_1 + 4 >> 2];
  $4_1 = $5_1 + 232 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $9_1;
  $10_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$5_1 + 176 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$5_1 + 180 >> 2] = $10_1;
  $10_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$5_1 + 192 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$5_1 + 196 >> 2] = $10_1;
  $10_1 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$5_1 + 208 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$5_1 + 212 >> 2] = $10_1;
  $10_1 = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$5_1 + 224 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$5_1 + 228 >> 2] = $10_1;
  $9_1 = $1_1 + 120 | 0;
  $19_1 = HEAP32[$9_1 + 4 >> 2];
  $10_1 = $5_1 + 168 | 0;
  $8_1 = $10_1;
  HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $19_1;
  $9_1 = $1_1 + 72 | 0;
  $19_1 = HEAP32[$9_1 + 4 >> 2];
  $8_1 = $5_1 + 120 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $19_1;
  $9_1 = $1_1 + 88 | 0;
  $19_1 = HEAP32[$9_1 + 4 >> 2];
  $8_1 = $5_1 + 136 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $19_1;
  $9_1 = $1_1 + 104 | 0;
  $19_1 = HEAP32[$9_1 + 4 >> 2];
  $8_1 = $5_1 + 152 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $19_1;
  $8_1 = HEAP32[$1_1 + 68 >> 2];
  HEAP32[$5_1 + 112 >> 2] = HEAP32[$1_1 + 64 >> 2];
  HEAP32[$5_1 + 116 >> 2] = $8_1;
  $8_1 = $1_1 + 80 | 0;
  $9_1 = HEAP32[$8_1 + 4 >> 2];
  HEAP32[$5_1 + 128 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$5_1 + 132 >> 2] = $9_1;
  $8_1 = $1_1 + 96 | 0;
  $9_1 = HEAP32[$8_1 + 4 >> 2];
  HEAP32[$5_1 + 144 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$5_1 + 148 >> 2] = $9_1;
  $8_1 = $1_1 + 112 | 0;
  $9_1 = HEAP32[$8_1 + 4 >> 2];
  HEAP32[$5_1 + 160 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$5_1 + 164 >> 2] = $9_1;
  $8_1 = $5_1 + 164 | 0;
  $6_1 = HEAPF32[$8_1 >> 2];
  $9_1 = $5_1 + 228 | 0;
  $13_1 = HEAPF32[$9_1 >> 2];
  $7_1 = HEAPF32[$5_1 + 160 >> 2];
  $15_1 = HEAPF32[$5_1 + 224 >> 2];
  $16_1 = HEAPF32[$4_1 >> 2];
  $11_1 = HEAPF32[$10_1 >> 2];
  $26_1 = Math_fround(Math_fround($16_1 + $11_1) * Math_fround(.5));
  HEAPF32[$4_1 >> 2] = $16_1 - $26_1;
  $27_1 = Math_fround(Math_fround($13_1 + $6_1) * Math_fround(.5));
  HEAPF32[$9_1 >> 2] = $13_1 - $27_1;
  $28_1 = Math_fround(Math_fround($15_1 + $7_1) * Math_fround(.5));
  HEAPF32[$5_1 + 224 >> 2] = $15_1 - $28_1;
  HEAPF32[$10_1 >> 2] = $11_1 - $26_1;
  HEAPF32[$8_1 >> 2] = $6_1 - $27_1;
  HEAPF32[$5_1 + 160 >> 2] = $7_1 - $28_1;
  $32_1 = HEAP32[HEAP32[$0_1 + 28 >> 2] + 4 >> 2] - 17 >>> 0 <= 1 ? HEAP32[HEAP32[$0_1 + 32 >> 2] + 4 >> 2] - 17 >>> 0 < 2 : 0;
  $19_1 = $1_1 - -64 | 0;
  HEAP32[$0_1 + 68 >> 2] = 0;
  HEAP32[$0_1 + 60 >> 2] = -1;
  HEAP32[$0_1 + 64 >> 2] = 0;
  $4_1 = $0_1 + 12 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $8_1 = $0_1 + 4 | 0;
  HEAP32[$8_1 >> 2] = 0;
  HEAP32[$8_1 + 4 >> 2] = 1065353216;
  HEAP32[5167] = HEAP32[5167] + 1;
  $17_1 = HEAPF32[$0_1 + 48 >> 2];
  $12_1 = HEAPF32[$0_1 + 44 >> 2];
  $24_1 = HEAPU8[$0_1 + 52 | 0];
  $339(HEAP32[$0_1 + 24 >> 2]);
  $7_1 = Math_fround(999999984306749440.0);
  $10_1 = $0_1 + 8 | 0;
  while (1) {
   $77($5_1 + 96 | 0, Math_fround(-HEAPF32[$0_1 + 4 >> 2]), Math_fround(-HEAPF32[$10_1 >> 2]), Math_fround(-HEAPF32[$4_1 >> 2]), $1_1);
   $77($5_1 + 80 | 0, HEAPF32[$0_1 + 4 >> 2], HEAPF32[$10_1 >> 2], HEAPF32[$4_1 >> 2], $19_1);
   $79($5_1 - -64 | 0, HEAP32[$0_1 + 28 >> 2], $5_1 + 96 | 0);
   $79($5_1 + 48 | 0, HEAP32[$0_1 + 32 >> 2], $5_1 + 80 | 0);
   $78($5_1 + 32 | 0, $5_1 + 176 | 0, HEAPF32[$5_1 + 64 >> 2], HEAPF32[$5_1 + 68 >> 2], HEAPF32[$5_1 + 72 >> 2]);
   $78($5_1 + 16 | 0, $5_1 + 112 | 0, HEAPF32[$5_1 + 48 >> 2], HEAPF32[$5_1 + 52 >> 2], HEAPF32[$5_1 + 56 >> 2]);
   label$3 : {
    if (!$32_1) {
     $13_1 = HEAPF32[$5_1 + 40 >> 2];
     $6_1 = HEAPF32[$5_1 + 24 >> 2];
     break label$3;
    }
    HEAP32[$5_1 + 24 >> 2] = 0;
    HEAP32[$5_1 + 40 >> 2] = 0;
    $13_1 = Math_fround(0.0);
    $6_1 = Math_fround(0.0);
   }
   HEAP32[$5_1 + 12 >> 2] = 0;
   $6_1 = Math_fround($13_1 - $6_1);
   HEAPF32[$5_1 + 8 >> 2] = $6_1;
   $13_1 = HEAPF32[$4_1 >> 2];
   $15_1 = Math_fround(HEAPF32[$5_1 + 36 >> 2] - HEAPF32[$5_1 + 20 >> 2]);
   HEAPF32[$5_1 + 4 >> 2] = $15_1;
   $16_1 = HEAPF32[$10_1 >> 2];
   $11_1 = Math_fround(HEAPF32[$5_1 + 32 >> 2] - HEAPF32[$5_1 + 16 >> 2]);
   HEAPF32[$5_1 >> 2] = $11_1;
   label$5 : {
    label$6 : {
     label$7 : {
      $6_1 = Math_fround(Math_fround(Math_fround($11_1 * HEAPF32[$0_1 + 4 >> 2]) + Math_fround($15_1 * $16_1)) + Math_fround($6_1 * $13_1));
      if (!($6_1 > Math_fround(0.0))) {
       break label$7
      }
      if (!(Math_fround($6_1 * $6_1) > Math_fround($7_1 * HEAPF32[$1_1 + 128 >> 2]))) {
       break label$7
      }
      HEAP32[$0_1 + 68 >> 2] = 10;
      break label$6;
     }
     if ($344(HEAP32[$0_1 + 24 >> 2], $5_1)) {
      $22_1 = 1;
      HEAP32[$0_1 + 68 >> 2] = 1;
      $9_1 = 0;
      break label$5;
     }
     $6_1 = Math_fround($7_1 - $6_1);
     if ($6_1 <= Math_fround($7_1 * Math_fround(9.999999974752427e-07))) {
      HEAP32[$0_1 + 68 >> 2] = $6_1 <= Math_fround(0.0) ? 2 : 11;
      break label$6;
     }
     $340(HEAP32[$0_1 + 24 >> 2], $5_1, $5_1 + 32 | 0, $5_1 + 16 | 0);
     $9_1 = HEAP32[$0_1 + 24 >> 2];
     if (!$341($9_1)) {
      HEAP32[$0_1 + 68 >> 2] = 3;
      break label$6;
     }
     $13_1 = HEAPF32[$9_1 + 288 >> 2];
     $15_1 = HEAPF32[$9_1 + 276 >> 2];
     $6_1 = $15_1;
     $11_1 = Math_fround($6_1 * $6_1);
     $16_1 = HEAPF32[$9_1 + 280 >> 2];
     $6_1 = $16_1;
     $18_1 = Math_fround($11_1 + Math_fround($6_1 * $6_1));
     $11_1 = HEAPF32[$9_1 + 284 >> 2];
     $6_1 = $11_1;
     $6_1 = Math_fround($18_1 + Math_fround($6_1 * $6_1));
     if ($6_1 < Math_fround(9.999999974752427e-07)) {
      HEAP32[$0_1 + 68 >> 2] = 6;
      HEAPF32[$0_1 + 16 >> 2] = $13_1;
      HEAPF32[$0_1 + 4 >> 2] = $15_1;
      HEAPF32[$4_1 >> 2] = $11_1;
      HEAPF32[$10_1 >> 2] = $16_1;
      break label$6;
     }
     label$12 : {
      if (Math_fround($7_1 - $6_1) <= Math_fround($7_1 * Math_fround(1.1920928955078125e-07))) {
       HEAP32[$0_1 + 68 >> 2] = 12;
       $22_1 = 1;
       $9_1 = 0;
       break label$12;
      }
      HEAPF32[$0_1 + 16 >> 2] = $13_1;
      HEAPF32[$0_1 + 4 >> 2] = $15_1;
      HEAPF32[$4_1 >> 2] = $11_1;
      HEAPF32[$10_1 >> 2] = $16_1;
      $29_1 = HEAP32[$0_1 + 64 >> 2];
      HEAP32[$0_1 + 64 >> 2] = $29_1 + 1;
      $9_1 = 0;
      if (($29_1 | 0) > 1e3) {
       break label$12
      }
      if (HEAP32[HEAP32[$0_1 + 24 >> 2] >> 2] != 4) {
       $9_1 = 1;
       break label$12;
      }
      HEAP32[$0_1 + 68 >> 2] = 13;
     }
     $7_1 = $6_1;
     break label$5;
    }
    $22_1 = 1;
    $9_1 = 0;
   }
   if ($9_1) {
    continue
   }
   break;
  };
  $6_1 = Math_fround(0.0);
  $11_1 = $24_1 ? Math_fround(0.0) : $17_1;
  $17_1 = Math_fround(($24_1 ? Math_fround(0.0) : $12_1) + $11_1);
  $10_1 = 0;
  $4_1 = 0;
  if ($22_1) {
   $4_1 = HEAP32[$0_1 + 24 >> 2];
   $341($4_1);
   $22_1 = $8_1 + 8 | 0;
   $24_1 = HEAP32[$22_1 + 4 >> 2];
   $9_1 = $5_1 + 248 | 0;
   HEAP32[$9_1 >> 2] = HEAP32[$22_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $24_1;
   $9_1 = HEAP32[$8_1 + 4 >> 2];
   HEAP32[$5_1 + 240 >> 2] = HEAP32[$8_1 >> 2];
   HEAP32[$5_1 + 244 >> 2] = $9_1;
   $16_1 = HEAPF32[$4_1 + 268 >> 2];
   $15_1 = HEAPF32[$4_1 + 264 >> 2];
   $13_1 = HEAPF32[$4_1 + 260 >> 2];
   $12_1 = HEAPF32[$0_1 + 4 >> 2];
   $6_1 = $12_1;
   $14_1 = Math_fround($6_1 * $6_1);
   $18_1 = HEAPF32[$0_1 + 8 >> 2];
   $6_1 = $18_1;
   $20_1 = Math_fround($14_1 + Math_fround($6_1 * $6_1));
   $14_1 = HEAPF32[$0_1 + 12 >> 2];
   $6_1 = $14_1;
   $6_1 = Math_fround($20_1 + Math_fround($6_1 * $6_1));
   if ($6_1 < Math_fround(9.999999974752427e-07)) {
    HEAP32[$0_1 + 68 >> 2] = 5
   }
   $9_1 = 1;
   $4_1 = $6_1 > Math_fround(1.4210854715202004e-14);
   label$17 : {
    if (!$4_1) {
     $9_1 = 2;
     $6_1 = Math_fround(0.0);
     break label$17;
    }
    $6_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($6_1)));
    HEAPF32[$5_1 + 240 >> 2] = $6_1 * HEAPF32[$5_1 + 240 >> 2];
    HEAPF32[$5_1 + 244 >> 2] = $6_1 * HEAPF32[$5_1 + 244 >> 2];
    HEAPF32[$5_1 + 248 >> 2] = $6_1 * HEAPF32[$5_1 + 248 >> 2];
    $7_1 = Math_fround($11_1 / Math_fround(Math_sqrt($7_1)));
    $16_1 = Math_fround(Math_fround($7_1 * $14_1) + $16_1);
    $15_1 = Math_fround(Math_fround($7_1 * $18_1) + $15_1);
    $13_1 = Math_fround(Math_fround($7_1 * $12_1) + $13_1);
    $6_1 = Math_fround(Math_fround(Math_fround(1.0) / $6_1) - $17_1);
   }
   HEAP32[$0_1 + 60 >> 2] = $9_1;
  }
  label$19 : {
   if (!HEAP32[$0_1 + 72 >> 2]) {
    break label$19
   }
   if (!HEAP32[$0_1 + 20 >> 2]) {
    break label$19
   }
   if (!HEAP32[$0_1 + 68 >> 2]) {
    break label$19
   }
   $10_1 = Math_fround($17_1 + $6_1) < Math_fround(1.0000000474974513e-03);
  }
  label$20 : {
   label$21 : {
    label$22 : {
     if ($4_1 ? !$10_1 : 0) {
      break label$22
     }
     $10_1 = HEAP32[$0_1 + 20 >> 2];
     if (!$10_1) {
      break label$22
     }
     HEAP32[$8_1 >> 2] = 0;
     HEAP32[$8_1 + 4 >> 2] = 0;
     $9_1 = $8_1 + 8 | 0;
     HEAP32[$9_1 >> 2] = 0;
     HEAP32[$9_1 + 4 >> 2] = 0;
     HEAP32[5168] = HEAP32[5168] + 1;
     label$23 : {
      label$24 : {
       label$25 : {
        if (FUNCTION_TABLE[HEAP32[HEAP32[$10_1 >> 2] + 8 >> 2]]($10_1, HEAP32[$0_1 + 24 >> 2], HEAP32[$0_1 + 28 >> 2], HEAP32[$0_1 + 32 >> 2], $5_1 + 176 | 0, $5_1 + 112 | 0, $8_1, $5_1 + 96 | 0, $5_1 + 80 | 0, $3_1) | 0) {
         HEAP32[$5_1 + 76 >> 2] = 0;
         $7_1 = Math_fround(HEAPF32[$5_1 + 88 >> 2] - HEAPF32[$5_1 + 104 >> 2]);
         HEAPF32[$5_1 + 72 >> 2] = $7_1;
         $11_1 = Math_fround(HEAPF32[$5_1 + 84 >> 2] - HEAPF32[$5_1 + 100 >> 2]);
         HEAPF32[$5_1 + 68 >> 2] = $11_1;
         $17_1 = Math_fround(HEAPF32[$5_1 + 80 >> 2] - HEAPF32[$5_1 + 96 >> 2]);
         HEAPF32[$5_1 + 64 >> 2] = $17_1;
         $7_1 = Math_fround(Math_fround(Math_fround($17_1 * $17_1) + Math_fround($11_1 * $11_1)) + Math_fround($7_1 * $7_1));
         if ($7_1 <= Math_fround(1.4210854715202004e-14)) {
          $10_1 = $8_1 + 8 | 0;
          $9_1 = HEAP32[$10_1 + 4 >> 2];
          $3_1 = $5_1 + 72 | 0;
          HEAP32[$3_1 >> 2] = HEAP32[$10_1 >> 2];
          HEAP32[$3_1 + 4 >> 2] = $9_1;
          $3_1 = HEAP32[$8_1 + 4 >> 2];
          HEAP32[$5_1 + 64 >> 2] = HEAP32[$8_1 >> 2];
          HEAP32[$5_1 + 68 >> 2] = $3_1;
          $7_1 = HEAPF32[$0_1 + 4 >> 2];
          $12_1 = Math_fround($7_1 * $7_1);
          $7_1 = HEAPF32[$0_1 + 8 >> 2];
          $12_1 = Math_fround($12_1 + Math_fround($7_1 * $7_1));
          $7_1 = HEAPF32[$0_1 + 12 >> 2];
          $7_1 = Math_fround($12_1 + Math_fround($7_1 * $7_1));
         }
         if ($7_1 > Math_fround(1.4210854715202004e-14)) {
          $139($5_1 - -64 | 0, Math_fround(Math_sqrt($7_1)));
          $7_1 = HEAPF32[$5_1 + 88 >> 2];
          $12_1 = HEAPF32[$5_1 + 104 >> 2];
          $11_1 = HEAPF32[$5_1 + 84 >> 2];
          $18_1 = HEAPF32[$5_1 + 100 >> 2];
          $17_1 = HEAPF32[$5_1 + 80 >> 2];
          $14_1 = HEAPF32[$5_1 + 96 >> 2];
          HEAP32[$0_1 + 60 >> 2] = 3;
          $14_1 = Math_fround($14_1 - $17_1);
          $18_1 = Math_fround($18_1 - $11_1);
          $12_1 = Math_fround($12_1 - $7_1);
          $12_1 = Math_fround(-Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($14_1 * $14_1) + Math_fround($18_1 * $18_1)) + Math_fround($12_1 * $12_1)))));
          if (!(!($12_1 < $6_1) & $4_1)) {
           $4_1 = $5_1 + 72 | 0;
           $10_1 = HEAP32[$4_1 + 4 >> 2];
           $3_1 = $5_1 + 248 | 0;
           HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
           HEAP32[$3_1 + 4 >> 2] = $10_1;
           $3_1 = HEAP32[$5_1 + 68 >> 2];
           HEAP32[$5_1 + 240 >> 2] = HEAP32[$5_1 + 64 >> 2];
           HEAP32[$5_1 + 244 >> 2] = $3_1;
           $10_1 = 1;
           $13_1 = $17_1;
           $15_1 = $11_1;
           $16_1 = $7_1;
           $6_1 = $12_1;
           break label$23;
          }
          HEAP32[$0_1 + 60 >> 2] = 8;
          $10_1 = 1;
          break label$23;
         }
         HEAP32[$0_1 + 60 >> 2] = 9;
         break label$25;
        }
        $12_1 = HEAPF32[$0_1 + 4 >> 2];
        $7_1 = $12_1;
        $14_1 = Math_fround($7_1 * $7_1);
        $18_1 = HEAPF32[$0_1 + 8 >> 2];
        $7_1 = $18_1;
        $20_1 = Math_fround($14_1 + Math_fround($7_1 * $7_1));
        $14_1 = HEAPF32[$0_1 + 12 >> 2];
        $7_1 = $14_1;
        if (Math_fround($20_1 + Math_fround($7_1 * $7_1)) > Math_fround(0.0)) {
         break label$24
        }
       }
       $10_1 = $4_1;
       break label$23;
      }
      $10_1 = 1;
      $9_1 = 5;
      $20_1 = HEAPF32[$5_1 + 80 >> 2];
      $7_1 = Math_fround(HEAPF32[$5_1 + 96 >> 2] - $20_1);
      $21_1 = Math_fround($7_1 * $7_1);
      $23_1 = HEAPF32[$5_1 + 84 >> 2];
      $7_1 = Math_fround(HEAPF32[$5_1 + 100 >> 2] - $23_1);
      $25 = Math_fround($21_1 + Math_fround($7_1 * $7_1));
      $21_1 = HEAPF32[$5_1 + 88 >> 2];
      $7_1 = Math_fround(HEAPF32[$5_1 + 104 >> 2] - $21_1);
      $7_1 = Math_fround(Math_fround(Math_sqrt(Math_fround($25 + Math_fround($7_1 * $7_1)))) - $17_1);
      if (!(!($7_1 < $6_1) & $4_1)) {
       $4_1 = $8_1 + 8 | 0;
       $9_1 = HEAP32[$4_1 + 4 >> 2];
       $3_1 = $5_1 + 248 | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $9_1;
       $3_1 = HEAP32[$8_1 + 4 >> 2];
       HEAP32[$5_1 + 240 >> 2] = HEAP32[$8_1 >> 2];
       HEAP32[$5_1 + 244 >> 2] = $3_1;
       $16_1 = Math_fround(Math_fround($11_1 * $14_1) + $21_1);
       $15_1 = Math_fround(Math_fround($11_1 * $18_1) + $23_1);
       $13_1 = Math_fround(Math_fround($11_1 * $12_1) + $20_1);
       $84($5_1 + 240 | 0);
       $9_1 = 6;
       $6_1 = $7_1;
      }
      HEAP32[$0_1 + 60 >> 2] = $9_1;
     }
     if ($10_1) {
      break label$21
     }
     break label$20;
    }
    if (!$4_1) {
     break label$20
    }
   }
   if (HEAPF32[$1_1 + 128 >> 2] > Math_fround($6_1 * $6_1) ? 0 : !($6_1 < Math_fround(0.0))) {
    break label$20
   }
   $3_1 = HEAP32[$5_1 + 244 >> 2];
   HEAP32[$8_1 >> 2] = HEAP32[$5_1 + 240 >> 2];
   HEAP32[$8_1 + 4 >> 2] = $3_1;
   HEAPF32[$0_1 + 56 >> 2] = $6_1;
   $3_1 = $5_1 + 248 | 0;
   $10_1 = HEAP32[$3_1 + 4 >> 2];
   $4_1 = $8_1 + 8 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $10_1;
   $77($5_1 + 96 | 0, HEAPF32[$5_1 + 240 >> 2], HEAPF32[$5_1 + 244 >> 2], HEAPF32[$3_1 >> 2], $1_1);
   $77($5_1 + 80 | 0, Math_fround(-HEAPF32[$5_1 + 240 >> 2]), Math_fround(-HEAPF32[$5_1 + 244 >> 2]), Math_fround(-HEAPF32[$3_1 >> 2]), $19_1);
   $79($5_1 - -64 | 0, HEAP32[$0_1 + 28 >> 2], $5_1 + 96 | 0);
   $79($5_1 + 48 | 0, HEAP32[$0_1 + 32 >> 2], $5_1 + 80 | 0);
   $78($5_1 + 32 | 0, $5_1 + 176 | 0, HEAPF32[$5_1 + 64 >> 2], HEAPF32[$5_1 + 68 >> 2], HEAPF32[$5_1 + 72 >> 2]);
   $78($5_1 + 16 | 0, $5_1 + 112 | 0, HEAPF32[$5_1 + 48 >> 2], HEAPF32[$5_1 + 52 >> 2], HEAPF32[$5_1 + 56 >> 2]);
   $7_1 = HEAPF32[$5_1 + 24 >> 2];
   $11_1 = HEAPF32[$5_1 + 40 >> 2];
   $17_1 = HEAPF32[$5_1 + 20 >> 2];
   $12_1 = HEAPF32[$5_1 + 36 >> 2];
   $18_1 = HEAPF32[$5_1 + 16 >> 2];
   $14_1 = HEAPF32[$5_1 + 32 >> 2];
   $20_1 = HEAPF32[$5_1 + 240 >> 2];
   $23_1 = Math_fround(-HEAPF32[$5_1 + 244 >> 2]);
   $21_1 = HEAPF32[$3_1 >> 2];
   $77($5_1 + 96 | 0, Math_fround(-$20_1), $23_1, Math_fround(-$21_1), $1_1);
   $77($5_1 + 80 | 0, HEAPF32[$5_1 + 240 >> 2], HEAPF32[$5_1 + 244 >> 2], HEAPF32[$3_1 >> 2], $19_1);
   $79($5_1 - -64 | 0, HEAP32[$0_1 + 28 >> 2], $5_1 + 96 | 0);
   $79($5_1 + 48 | 0, HEAP32[$0_1 + 32 >> 2], $5_1 + 80 | 0);
   $78($5_1 + 32 | 0, $5_1 + 176 | 0, HEAPF32[$5_1 + 64 >> 2], HEAPF32[$5_1 + 68 >> 2], HEAPF32[$5_1 + 72 >> 2]);
   $78($5_1 + 16 | 0, $5_1 + 112 | 0, HEAPF32[$5_1 + 48 >> 2], HEAPF32[$5_1 + 52 >> 2], HEAPF32[$5_1 + 56 >> 2]);
   $25 = HEAPF32[$5_1 + 240 >> 2];
   $30_1 = HEAPF32[$5_1 + 244 >> 2];
   $31_1 = HEAPF32[$3_1 >> 2];
   if (Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$5_1 + 32 >> 2] - HEAPF32[$5_1 + 16 >> 2]) * $25) + Math_fround(Math_fround(HEAPF32[$5_1 + 36 >> 2] - HEAPF32[$5_1 + 20 >> 2]) * $30_1)) + Math_fround(Math_fround(HEAPF32[$5_1 + 40 >> 2] - HEAPF32[$5_1 + 24 >> 2]) * $31_1)) < Math_fround(Math_fround(Math_fround(Math_fround($12_1 - $17_1) * $23_1) - Math_fround($20_1 * Math_fround($14_1 - $18_1))) - Math_fround($21_1 * Math_fround($11_1 - $7_1)))) {
    HEAP32[$0_1 + 60 >> 2] = 10;
    HEAPF32[$5_1 + 248 >> 2] = -$31_1;
    HEAPF32[$5_1 + 244 >> 2] = -$30_1;
    HEAPF32[$5_1 + 240 >> 2] = -$25;
   }
   HEAP32[$5_1 + 108 >> 2] = 0;
   HEAPF32[$5_1 + 104 >> 2] = $26_1 + $16_1;
   HEAPF32[$5_1 + 100 >> 2] = $27_1 + $15_1;
   HEAPF32[$5_1 + 96 >> 2] = $28_1 + $13_1;
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $5_1 + 240 | 0, $5_1 + 96 | 0, $6_1);
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $346($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0);
  $5_1 = HEAPF32[$4_1 + 36 >> 2];
  $6_1 = HEAPF32[$4_1 + 20 >> 2];
  $7_1 = HEAPF32[$4_1 + 40 >> 2];
  $8_1 = HEAPF32[$4_1 + 24 >> 2];
  $9_1 = HEAPF32[$4_1 + 4 >> 2];
  $10_1 = HEAPF32[$4_1 + 8 >> 2];
  $11_1 = HEAPF32[$4_1 + 32 >> 2];
  $12_1 = HEAPF32[$4_1 >> 2];
  $13_1 = HEAPF32[$4_1 + 16 >> 2];
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround($12_1 * $1_1) + Math_fround($13_1 * $2_1)) + Math_fround($11_1 * $3_1);
  HEAPF32[$0_1 + 8 >> 2] = Math_fround(Math_fround($10_1 * $1_1) + Math_fround($8_1 * $2_1)) + Math_fround($7_1 * $3_1);
  HEAPF32[$0_1 + 4 >> 2] = Math_fround(Math_fround($9_1 * $1_1) + Math_fround($6_1 * $2_1)) + Math_fround($5_1 * $3_1);
 }
 
 function $347($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  var $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14_1 = Math_fround(0);
  $9_1 = global$0 + -64 | 0;
  global$0 = $9_1;
  $11_1 = HEAPF32[$5_1 >> 2];
  $10_1 = $3_1;
  $12_1 = $5_1 + 4 | 0;
  $3_1 = HEAPF32[$12_1 >> 2];
  $14_1 = $4_1;
  $13_1 = $5_1 + 8 | 0;
  $4_1 = HEAPF32[$13_1 >> 2];
  $2_1 = Math_fround(Math_fround(Math_fround($2_1 * $11_1) + Math_fround($10_1 * $3_1)) + Math_fround($14_1 * $4_1));
  $346($9_1 + 48 | 0, $11_1, $3_1, $4_1, $0_1);
  $346($9_1 + 32 | 0, HEAPF32[$5_1 >> 2], HEAPF32[$12_1 >> 2], HEAPF32[$13_1 >> 2], $1_1);
  $348($6_1 + 80 | 0, $9_1 + 48 | 0, $9_1 + 20 | 0);
  $348($7_1 + 80 | 0, $9_1 + 32 | 0, $9_1 + 8 | 0);
  global$0 = $9_1 - -64 | 0;
  $3_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$9_1 + 20 >> 2] * HEAPF32[$9_1 + 48 >> 2]) + Math_fround(HEAPF32[$9_1 + 24 >> 2] * HEAPF32[$9_1 + 52 >> 2])) + Math_fround(HEAPF32[$9_1 + 28 >> 2] * HEAPF32[$9_1 + 56 >> 2]));
  $4_1 = HEAPF32[$6_1 + 96 >> 2];
  $10_1 = $3_1 > $4_1 ? $3_1 : $4_1;
  $3_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$9_1 + 8 >> 2] * HEAPF32[$9_1 + 32 >> 2]) + Math_fround(HEAPF32[$9_1 + 12 >> 2] * HEAPF32[$9_1 + 36 >> 2])) + Math_fround(HEAPF32[$9_1 + 16 >> 2] * HEAPF32[$9_1 + 40 >> 2]));
  $4_1 = HEAPF32[$7_1 + 96 >> 2];
  $3_1 = Math_fround($10_1 + ($3_1 > $4_1 ? $3_1 : $4_1));
  $4_1 = Math_fround($2_1 + $3_1);
  $2_1 = Math_fround($3_1 - $2_1);
  return !(($2_1 > $4_1 ? $4_1 : $2_1) > $8_1);
 }
 
 function $348($0_1, $1_1, $2_1) {
  var $3_1 = Math_fround(0);
  $3_1 = HEAPF32[$0_1 >> 2];
  HEAPF32[$2_1 >> 2] = HEAPF32[$1_1 >> 2] < Math_fround(0.0) ? Math_fround(-$3_1) : $3_1;
  $3_1 = HEAPF32[$0_1 + 4 >> 2];
  HEAPF32[$2_1 + 4 >> 2] = HEAPF32[$1_1 + 4 >> 2] < Math_fround(0.0) ? Math_fround(-$3_1) : $3_1;
  $3_1 = HEAPF32[$0_1 + 8 >> 2];
  HEAPF32[$2_1 + 8 >> 2] = HEAPF32[$1_1 + 8 >> 2] < Math_fround(0.0) ? Math_fround(-$3_1) : $3_1;
 }
 
 function $349($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  var $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0);
  $8_1 = global$0 - 80 | 0;
  global$0 = $8_1;
  $98($0_1, $2_1, $4_1, $8_1 + 76 | 0, $8_1 + 72 | 0, $8_1 + 48 | 0, $8_1 + 32 | 0);
  $98($1_1, $3_1, $4_1, $8_1 + 68 | 0, $8_1 - -64 | 0, $8_1 + 16 | 0, $8_1);
  $4_1 = 0;
  $9_1 = HEAPF32[$8_1 + 72 >> 2];
  $10_1 = HEAPF32[$8_1 + 68 >> 2];
  label$1 : {
   if ($9_1 < $10_1) {
    break label$1
   }
   $11_1 = HEAPF32[$8_1 + 64 >> 2];
   $12_1 = HEAPF32[$8_1 + 76 >> 2];
   if ($11_1 < $12_1) {
    break label$1
   }
   $4_1 = 1;
   $9_1 = Math_fround($9_1 - $10_1);
   $10_1 = Math_fround($11_1 - $12_1);
   if ($9_1 < $10_1) {
    HEAPF32[$5_1 >> 2] = $9_1;
    $0_1 = HEAP32[$8_1 + 36 >> 2];
    HEAP32[$6_1 >> 2] = HEAP32[$8_1 + 32 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $0_1;
    $1_1 = $8_1 + 40 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $0_1 = $6_1 + 8 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    $0_1 = HEAP32[$8_1 + 20 >> 2];
    HEAP32[$7_1 >> 2] = HEAP32[$8_1 + 16 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $0_1;
    $1_1 = $8_1 + 24 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $0_1 = $7_1 + 8 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    break label$1;
   }
   HEAPF32[$5_1 >> 2] = $10_1;
   $0_1 = HEAP32[$8_1 + 52 >> 2];
   HEAP32[$6_1 >> 2] = HEAP32[$8_1 + 48 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $0_1;
   $1_1 = $8_1 + 56 | 0;
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   $0_1 = $6_1 + 8 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $2_1;
   $0_1 = HEAP32[$8_1 + 4 >> 2];
   HEAP32[$7_1 >> 2] = HEAP32[$8_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $0_1;
   $1_1 = $8_1 + 8 | 0;
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   $0_1 = $7_1 + 8 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $2_1;
  }
  global$0 = $8_1 + 80 | 0;
  return $4_1;
 }
 
 function $350($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  var $8_1 = 0, $9_1 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = Math_fround(0), $33_1 = 0, $34_1 = 0, $35_1 = 0;
  $8_1 = global$0 - 80 | 0;
  global$0 = $8_1;
  $131($4_1, 0, $8_1 - -64 | 0);
  $142($4_1, HEAP32[$3_1 + 4 >> 2]);
  $19_1 = -1;
  $11_1 = Math_fround(3402823466385288598117041.0e14);
  $12_1 = 20;
  while (1) {
   if (HEAP32[$1_1 + 28 >> 2] <= ($13_1 | 0)) {
    label$3 : {
     if (($19_1 | 0) < 0) {
      break label$3
     }
     $28_1 = HEAP32[$1_1 + 36 >> 2];
     $10_1 = $28_1 + Math_imul($19_1, 36) | 0;
     $22_1 = HEAP32[$10_1 + 4 >> 2];
     $33_1 = ($22_1 | 0) > 0 ? $22_1 : 0;
     $29_1 = $10_1 + 28 | 0;
     $30_1 = $10_1 + 24 | 0;
     $31_1 = $10_1 + 20 | 0;
     $34_1 = $10_1 + 12 | 0;
     while (1) {
      if (($20_1 | 0) == ($33_1 | 0)) {
       $11_1 = HEAPF32[(Math_imul($19_1, 36) + $28_1 | 0) + 32 >> 2];
       $351($8_1 - -64 | 0, $2_1, HEAPF32[$31_1 >> 2], HEAPF32[$30_1 >> 2], HEAPF32[$29_1 >> 2]);
       $14_1 = $11_1;
       $11_1 = HEAPF32[$8_1 + 64 >> 2];
       $9_1 = HEAPF32[$8_1 + 68 >> 2];
       $15_1 = HEAPF32[$8_1 + 72 >> 2];
       $16_1 = Math_fround($14_1 - Math_fround(Math_fround(Math_fround($11_1 * HEAPF32[$2_1 + 48 >> 2]) + Math_fround($9_1 * HEAPF32[$2_1 + 52 >> 2])) + Math_fround($15_1 * HEAPF32[$2_1 + 56 >> 2])));
       $1_1 = 0;
       $12_1 = 0;
       while (1) {
        if (HEAP32[$3_1 + 4 >> 2] <= ($12_1 | 0)) {
         break label$3
        }
        $2_1 = HEAP32[$3_1 + 12 >> 2] + $1_1 | 0;
        $4_1 = $2_1 + 8 | 0;
        $14_1 = Math_fround($16_1 + Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 >> 2] * $11_1) + Math_fround(HEAPF32[$2_1 + 4 >> 2] * $9_1)) + Math_fround(HEAPF32[$4_1 >> 2] * $15_1)));
        $14_1 = $5_1 >= $14_1 ? $5_1 : $14_1;
        if ($14_1 <= $6_1) {
         $13_1 = HEAP32[$4_1 + 4 >> 2];
         $10_1 = $8_1 + 56 | 0;
         HEAP32[$10_1 >> 2] = HEAP32[$4_1 >> 2];
         HEAP32[$10_1 + 4 >> 2] = $13_1;
         $4_1 = HEAP32[$2_1 + 4 >> 2];
         HEAP32[$8_1 + 48 >> 2] = HEAP32[$2_1 >> 2];
         HEAP32[$8_1 + 52 >> 2] = $4_1;
         FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 16 >> 2]]($7_1, $0_1, $8_1 + 48 | 0, $14_1);
        }
        $1_1 = $1_1 + 16 | 0;
        $12_1 = $12_1 + 1 | 0;
        continue;
       };
      }
      $10_1 = $4_1;
      $13_1 = HEAP32[$1_1 + 16 >> 2];
      $12_1 = HEAP32[$34_1 >> 2];
      $4_1 = $13_1 + (HEAP32[$12_1 + ($20_1 << 2) >> 2] << 4) | 0;
      $20_1 = $20_1 + 1 | 0;
      $12_1 = $13_1 + (HEAP32[$12_1 + (($20_1 | 0) % ($22_1 | 0) << 2) >> 2] << 4) | 0;
      $13_1 = $4_1 + 4 | 0;
      $17_1 = $4_1 + 8 | 0;
      $351($8_1 + 32 | 0, $2_1, Math_fround(HEAPF32[$4_1 >> 2] - HEAPF32[$12_1 >> 2]), Math_fround(HEAPF32[$13_1 >> 2] - HEAPF32[$12_1 + 4 >> 2]), Math_fround(HEAPF32[$17_1 >> 2] - HEAPF32[$12_1 + 8 >> 2]));
      $351($8_1 + 16 | 0, $2_1, HEAPF32[$31_1 >> 2], HEAPF32[$30_1 >> 2], HEAPF32[$29_1 >> 2]);
      $11_1 = HEAPF32[$8_1 + 16 >> 2];
      $9_1 = HEAPF32[$8_1 + 32 >> 2];
      $15_1 = HEAPF32[$8_1 + 24 >> 2];
      $16_1 = HEAPF32[$8_1 + 36 >> 2];
      $14_1 = HEAPF32[$8_1 + 20 >> 2];
      $18_1 = HEAPF32[$8_1 + 40 >> 2];
      $78($8_1, $2_1, HEAPF32[$4_1 >> 2], HEAPF32[$13_1 >> 2], HEAPF32[$17_1 >> 2]);
      label$8 : {
       $13_1 = HEAP32[$3_1 + 4 >> 2];
       if (($13_1 | 0) < 2) {
        break label$8
       }
       $23_1 = Math_fround(-Math_fround(Math_fround($18_1 * $11_1) - Math_fround($15_1 * $9_1)));
       $18_1 = Math_fround(Math_fround($16_1 * $15_1) - Math_fround($18_1 * $14_1));
       $24_1 = Math_fround(Math_fround($14_1 * $9_1) - Math_fround($16_1 * $11_1));
       $32_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$8_1 + 4 >> 2] * $23_1) - Math_fround($18_1 * HEAPF32[$8_1 >> 2])) - Math_fround($24_1 * HEAPF32[$8_1 + 8 >> 2]));
       $4_1 = (HEAP32[$3_1 + 12 >> 2] + ($13_1 << 4) | 0) - 16 | 0;
       $15_1 = HEAPF32[$4_1 + 4 >> 2];
       $16_1 = HEAPF32[$4_1 >> 2];
       $14_1 = HEAPF32[$4_1 + 8 >> 2];
       $11_1 = Math_fround(Math_fround(Math_fround(Math_fround($15_1 * $23_1) - Math_fround($18_1 * $16_1)) - Math_fround($24_1 * $14_1)) - $32_1);
       $12_1 = 0;
       while (1) {
        if (!$13_1) {
         break label$8
        }
        $9_1 = $11_1;
        $17_1 = HEAP32[$3_1 + 12 >> 2] + $12_1 | 0;
        $21_1 = $17_1 + 8 | 0;
        $35_1 = HEAP32[$21_1 + 4 >> 2];
        $4_1 = $8_1 + 72 | 0;
        HEAP32[$4_1 >> 2] = HEAP32[$21_1 >> 2];
        HEAP32[$4_1 + 4 >> 2] = $35_1;
        $21_1 = HEAP32[$17_1 + 4 >> 2];
        HEAP32[$8_1 + 64 >> 2] = HEAP32[$17_1 >> 2];
        HEAP32[$8_1 + 68 >> 2] = $21_1;
        $25 = HEAPF32[$8_1 + 68 >> 2];
        $26_1 = HEAPF32[$8_1 + 64 >> 2];
        $27_1 = HEAPF32[$4_1 >> 2];
        $11_1 = Math_fround(Math_fround(Math_fround(Math_fround($25 * $23_1) - Math_fround($18_1 * $26_1)) - Math_fround($24_1 * $27_1)) - $32_1);
        label$10 : {
         if ($9_1 < Math_fround(0.0)) {
          if ($11_1 < Math_fround(0.0)) {
           $128($10_1, $8_1 - -64 | 0);
           break label$10;
          }
          HEAP32[$8_1 + 60 >> 2] = 0;
          $9_1 = Math_fround($9_1 / Math_fround($9_1 - $11_1));
          HEAPF32[$8_1 + 56 >> 2] = $14_1 + Math_fround(Math_fround($27_1 - $14_1) * $9_1);
          HEAPF32[$8_1 + 52 >> 2] = $15_1 + Math_fround(Math_fround($25 - $15_1) * $9_1);
          HEAPF32[$8_1 + 48 >> 2] = $16_1 + Math_fround(Math_fround($26_1 - $16_1) * $9_1);
          $128($10_1, $8_1 + 48 | 0);
          break label$10;
         }
         if (!($11_1 < Math_fround(0.0))) {
          break label$10
         }
         HEAP32[$8_1 + 60 >> 2] = 0;
         $9_1 = Math_fround($9_1 / Math_fround($9_1 - $11_1));
         HEAPF32[$8_1 + 56 >> 2] = $14_1 + Math_fround(Math_fround($27_1 - $14_1) * $9_1);
         HEAPF32[$8_1 + 52 >> 2] = $15_1 + Math_fround(Math_fround($25 - $15_1) * $9_1);
         HEAPF32[$8_1 + 48 >> 2] = $16_1 + Math_fround(Math_fround($26_1 - $16_1) * $9_1);
         $128($10_1, $8_1 + 48 | 0);
         $128($10_1, $8_1 - -64 | 0);
        }
        $13_1 = $13_1 - 1 | 0;
        $12_1 = $12_1 + 16 | 0;
        $14_1 = HEAPF32[$8_1 + 72 >> 2];
        $15_1 = HEAPF32[$8_1 + 68 >> 2];
        $16_1 = HEAPF32[$8_1 + 64 >> 2];
        continue;
       };
      }
      $131($3_1, 0, $8_1 - -64 | 0);
      $4_1 = $3_1;
      $3_1 = $10_1;
      continue;
     };
    }
    global$0 = $8_1 + 80 | 0;
   } else {
    $10_1 = HEAP32[$1_1 + 36 >> 2] + $12_1 | 0;
    $351($8_1 - -64 | 0, $2_1, HEAPF32[$10_1 >> 2], HEAPF32[$10_1 + 4 >> 2], HEAPF32[$10_1 + 8 >> 2]);
    $9_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$8_1 + 64 >> 2] * HEAPF32[$0_1 >> 2]) + Math_fround(HEAPF32[$8_1 + 68 >> 2] * HEAPF32[$0_1 + 4 >> 2])) + Math_fround(HEAPF32[$8_1 + 72 >> 2] * HEAPF32[$0_1 + 8 >> 2]));
    $10_1 = $9_1 < $11_1;
    $11_1 = $10_1 ? $9_1 : $11_1;
    $19_1 = $10_1 ? $13_1 : $19_1;
    $12_1 = $12_1 + 36 | 0;
    $13_1 = $13_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $351($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $5_1 = Math_fround(Math_fround(HEAPF32[$1_1 >> 2] * $2_1) + Math_fround(HEAPF32[$1_1 + 4 >> 2] * $3_1));
  $6_1 = Math_fround(HEAPF32[$1_1 + 8 >> 2] * $4_1);
  $7_1 = Math_fround(Math_fround(HEAPF32[$1_1 + 16 >> 2] * $2_1) + Math_fround(HEAPF32[$1_1 + 20 >> 2] * $3_1));
  $8_1 = Math_fround(HEAPF32[$1_1 + 24 >> 2] * $4_1);
  $9_1 = HEAPF32[$1_1 + 40 >> 2];
  $10_1 = HEAPF32[$1_1 + 36 >> 2];
  $11_1 = HEAPF32[$1_1 + 32 >> 2];
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 + 8 >> 2] = Math_fround(Math_fround($11_1 * $2_1) + Math_fround($10_1 * $3_1)) + Math_fround($9_1 * $4_1);
  HEAPF32[$0_1 + 4 >> 2] = $7_1 + $8_1;
  HEAPF32[$0_1 >> 2] = $5_1 + $6_1;
 }
 
 function $352($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = 0, $25 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $6_1 = global$0 - 288 | 0;
  global$0 = $6_1;
  $339(HEAP32[$0_1 + 4 >> 2]);
  $9_1 = HEAPF32[$1_1 + 52 >> 2];
  $12_1 = HEAPF32[$2_1 + 52 >> 2];
  $13_1 = HEAPF32[$3_1 + 52 >> 2];
  $14_1 = HEAPF32[$4_1 + 52 >> 2];
  $10_1 = $1_1 + 56 | 0;
  $15_1 = HEAPF32[$10_1 >> 2];
  $16_1 = HEAPF32[$2_1 + 56 >> 2];
  $11_1 = $3_1 + 56 | 0;
  $17_1 = HEAPF32[$11_1 >> 2];
  $18_1 = HEAPF32[$4_1 + 56 >> 2];
  $19_1 = HEAPF32[$1_1 + 48 >> 2];
  $20_1 = HEAPF32[$2_1 + 48 >> 2];
  $21_1 = HEAPF32[$3_1 + 48 >> 2];
  $22_1 = HEAPF32[$4_1 + 48 >> 2];
  HEAP8[$6_1 + 264 | 0] = 0;
  HEAP32[$6_1 + 260 >> 2] = 1566444395;
  HEAP32[$6_1 + 224 >> 2] = 11292;
  $7_1 = $6_1 + 156 | 0;
  HEAP32[$7_1 >> 2] = 0;
  HEAP32[$7_1 + 4 >> 2] = 0;
  HEAP32[$6_1 + 144 >> 2] = 11136;
  HEAP32[$6_1 + 164 >> 2] = 0;
  HEAP32[$6_1 + 148 >> 2] = 0;
  HEAP32[$6_1 + 152 >> 2] = 1065353216;
  $7_1 = HEAP32[$0_1 + 12 >> 2];
  HEAP32[$6_1 + 176 >> 2] = $7_1;
  $8_1 = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$6_1 + 172 >> 2] = $8_1;
  HEAP32[$6_1 + 168 >> 2] = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$6_1 + 180 >> 2] = HEAP32[$8_1 + 4 >> 2];
  HEAP32[$6_1 + 184 >> 2] = HEAP32[$7_1 + 4 >> 2];
  (wasm2js_i32$0 = $6_1, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 48 >> 2]]($8_1))), HEAPF32[wasm2js_i32$0 + 188 >> 2] = wasm2js_f32$0;
  $23_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 48 >> 2]]($7_1));
  HEAP32[$6_1 + 216 >> 2] = 1;
  HEAP32[$6_1 + 220 >> 2] = 1;
  HEAP32[$6_1 + 204 >> 2] = -1;
  HEAP8[$6_1 + 196 | 0] = 0;
  HEAPF32[$6_1 + 192 >> 2] = $23_1;
  $7_1 = $1_1 + 8 | 0;
  $8_1 = HEAP32[$7_1 + 4 >> 2];
  $0_1 = $6_1 + 16 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $8_1;
  $7_1 = $1_1 + 24 | 0;
  $8_1 = HEAP32[$7_1 + 4 >> 2];
  $0_1 = $6_1 + 32 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $8_1;
  $7_1 = $1_1 + 40 | 0;
  $8_1 = HEAP32[$7_1 + 4 >> 2];
  $0_1 = $6_1 + 48 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $8_1;
  $7_1 = HEAP32[$10_1 + 4 >> 2];
  $0_1 = $6_1 - -64 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$10_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $7_1;
  $7_1 = $3_1 + 8 | 0;
  $8_1 = HEAP32[$7_1 + 4 >> 2];
  $0_1 = $6_1 + 80 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $8_1;
  HEAP32[$6_1 + 136 >> 2] = 1566444395;
  $0_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$6_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$6_1 + 12 >> 2] = $0_1;
  $0_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$6_1 + 24 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$6_1 + 28 >> 2] = $0_1;
  $0_1 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$6_1 + 40 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$6_1 + 44 >> 2] = $0_1;
  $0_1 = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$6_1 + 56 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$6_1 + 60 >> 2] = $0_1;
  $0_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$6_1 + 72 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$6_1 + 76 >> 2] = $0_1;
  $7_1 = $3_1 + 24 | 0;
  $8_1 = HEAP32[$7_1 + 4 >> 2];
  $0_1 = $6_1 + 96 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $8_1;
  $7_1 = HEAP32[$3_1 + 20 >> 2];
  $0_1 = $6_1 + 88 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $7_1;
  $7_1 = $3_1 + 40 | 0;
  $8_1 = HEAP32[$7_1 + 4 >> 2];
  $0_1 = $6_1 + 112 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $8_1;
  $7_1 = HEAP32[$3_1 + 36 >> 2];
  $0_1 = $6_1 + 104 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $7_1;
  $7_1 = HEAP32[$11_1 + 4 >> 2];
  $0_1 = $6_1 + 128 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$11_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $7_1;
  $7_1 = HEAP32[$3_1 + 52 >> 2];
  $8_1 = $6_1 + 120 | 0;
  $0_1 = $8_1;
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $7_1;
  $345($6_1 + 144 | 0, $6_1 + 8 | 0, $6_1 + 224 | 0, 0, 0);
  $10_1 = $6_1 + 252 | 0;
  $11_1 = HEAP32[$10_1 + 4 >> 2];
  $7_1 = $6_1 + 280 | 0;
  $0_1 = $7_1;
  HEAP32[$0_1 >> 2] = HEAP32[$10_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $11_1;
  $0_1 = HEAP32[$6_1 + 248 >> 2];
  HEAP32[$6_1 + 272 >> 2] = HEAP32[$6_1 + 244 >> 2];
  HEAP32[$6_1 + 276 >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!HEAPU8[$6_1 + 264 | 0]) {
     break label$2
    }
    $17_1 = Math_fround(Math_fround($16_1 - $15_1) - Math_fround($18_1 - $17_1));
    $18_1 = Math_fround(Math_fround($12_1 - $9_1) - Math_fround($14_1 - $13_1));
    $19_1 = Math_fround(Math_fround($20_1 - $19_1) - Math_fround($22_1 - $21_1));
    $10_1 = $3_1 + 48 | 0;
    $4_1 = $4_1 + 48 | 0;
    $11_1 = $1_1 + 48 | 0;
    $2_1 = $2_1 + 48 | 0;
    $0_1 = $6_1 + 244 | 0;
    $24_1 = $6_1 + 56 | 0;
    $12_1 = HEAPF32[$6_1 + 240 >> 2];
    $13_1 = HEAPF32[$6_1 + 236 >> 2];
    $14_1 = HEAPF32[$6_1 + 232 >> 2];
    $3_1 = 32;
    $15_1 = HEAPF32[$6_1 + 228 >> 2];
    $16_1 = HEAPF32[$6_1 + 260 >> 2];
    $9_1 = Math_fround(0.0);
    label$3 : {
     while (1) {
      if ($16_1 > Math_fround(1.0000000474974513e-03)) {
       if (!$3_1) {
        break label$2
       }
       $12_1 = $9_1;
       $9_1 = Math_fround($9_1 - Math_fround($16_1 / Math_fround(Math_fround(Math_fround($19_1 * $15_1) + Math_fround($18_1 * $14_1)) + Math_fround($17_1 * $13_1))));
       if ($9_1 <= $12_1) {
        break label$2
       }
       if ($9_1 > Math_fround(1.0)) {
        break label$2
       }
       if ($9_1 < Math_fround(0.0)) {
        break label$2
       }
       FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] >> 2]]($5_1, $9_1);
       $353($24_1, $11_1, $2_1, $9_1);
       $353($8_1, $10_1, $4_1, $9_1);
       $345($6_1 + 144 | 0, $6_1 + 8 | 0, $6_1 + 224 | 0, 0, 0);
       $1_1 = 0;
       if (!HEAPU8[$6_1 + 264 | 0]) {
        break label$1
       }
       $16_1 = HEAPF32[$6_1 + 260 >> 2];
       if ($16_1 < Math_fround(0.0)) {
        HEAPF32[$5_1 + 164 >> 2] = $9_1;
        $1_1 = HEAP32[$6_1 + 232 >> 2];
        HEAP32[$5_1 + 132 >> 2] = HEAP32[$6_1 + 228 >> 2];
        HEAP32[$5_1 + 136 >> 2] = $1_1;
        $2_1 = HEAP32[$6_1 + 240 >> 2];
        $1_1 = $5_1 + 140 | 0;
        HEAP32[$1_1 >> 2] = HEAP32[$6_1 + 236 >> 2];
        HEAP32[$1_1 + 4 >> 2] = $2_1;
        $1_1 = HEAP32[$0_1 + 4 >> 2];
        HEAP32[$5_1 + 148 >> 2] = HEAP32[$0_1 >> 2];
        HEAP32[$5_1 + 152 >> 2] = $1_1;
        $0_1 = $0_1 + 8 | 0;
        $2_1 = HEAP32[$0_1 + 4 >> 2];
        $1_1 = $5_1 + 156 | 0;
        HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2];
        HEAP32[$1_1 + 4 >> 2] = $2_1;
        break label$3;
       } else {
        $1_1 = $0_1 + 8 | 0;
        $25 = HEAP32[$1_1 + 4 >> 2];
        HEAP32[$7_1 >> 2] = HEAP32[$1_1 >> 2];
        HEAP32[$7_1 + 4 >> 2] = $25;
        $1_1 = HEAP32[$0_1 + 4 >> 2];
        HEAP32[$6_1 + 272 >> 2] = HEAP32[$0_1 >> 2];
        HEAP32[$6_1 + 276 >> 2] = $1_1;
        $3_1 = $3_1 - 1 | 0;
        $12_1 = HEAPF32[$6_1 + 240 >> 2];
        $13_1 = HEAPF32[$6_1 + 236 >> 2];
        $14_1 = HEAPF32[$6_1 + 232 >> 2];
        $15_1 = HEAPF32[$6_1 + 228 >> 2];
        continue;
       }
      }
      break;
     };
     $1_1 = 0;
     if (Math_fround(-HEAPF32[$5_1 + 172 >> 2]) <= Math_fround(Math_fround(Math_fround($19_1 * $15_1) + Math_fround($18_1 * $14_1)) + Math_fround($17_1 * $13_1))) {
      break label$1
     }
     HEAPF32[$5_1 + 132 >> 2] = $15_1;
     HEAPF32[$5_1 + 164 >> 2] = $9_1;
     $0_1 = HEAP32[$6_1 + 276 >> 2];
     HEAP32[$5_1 + 148 >> 2] = HEAP32[$6_1 + 272 >> 2];
     HEAP32[$5_1 + 152 >> 2] = $0_1;
     HEAPF32[$5_1 + 144 >> 2] = $12_1;
     HEAPF32[$5_1 + 140 >> 2] = $13_1;
     HEAPF32[$5_1 + 136 >> 2] = $14_1;
     $1_1 = $6_1 + 280 | 0;
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     $0_1 = $5_1 + 156 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $2_1;
    }
    $1_1 = 1;
    break label$1;
   }
   $1_1 = 0;
  }
  global$0 = $6_1 + 288 | 0;
  return $1_1 | 0;
 }
 
 function $353($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0);
  $4_1 = Math_fround(Math_fround(1.0) - $3_1);
  HEAPF32[$0_1 >> 2] = Math_fround($4_1 * HEAPF32[$1_1 >> 2]) + Math_fround(HEAPF32[$2_1 >> 2] * $3_1);
  HEAPF32[$0_1 + 4 >> 2] = Math_fround($4_1 * HEAPF32[$1_1 + 4 >> 2]) + Math_fround(HEAPF32[$2_1 + 4 >> 2] * $3_1);
  HEAPF32[$0_1 + 8 >> 2] = Math_fround($4_1 * HEAPF32[$1_1 + 8 >> 2]) + Math_fround(HEAPF32[$2_1 + 8 >> 2] * $3_1);
 }
 
 function $354($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $4_1 = 0, $5_1 = 0;
  if (HEAPF32[$0_1 + 36 >> 2] > $3_1) {
   HEAP8[$0_1 + 40 | 0] = 1;
   $4_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$0_1 + 4 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0_1 + 8 >> 2] = $4_1;
   $1_1 = $1_1 + 8 | 0;
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   $4_1 = $0_1 + 12 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $5_1;
   $1_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$0_1 + 20 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$0_1 + 24 >> 2] = $1_1;
   $2_1 = $2_1 + 8 | 0;
   $4_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $0_1 + 28 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $4_1;
   HEAPF32[$0_1 + 36 >> 2] = $3_1;
  }
 }
 
 function $355($0_1, $1_1, $2_1) {
  label$1 : {
   switch ($2_1 | 0) {
   case 0:
    return Math_fround(Math_fround($0_1 + $1_1) * Math_fround(.5));
   case 1:
    return $0_1 < $1_1 ? $0_1 : $1_1;
   case 2:
    return Math_fround($0_1 * $1_1);
   default:
    break label$1;
   };
  }
  return $0_1 > $1_1 ? $0_1 : $1_1;
 }
 
 function $356($0_1, $1_1, $2_1) {
  return Math_fround(Math_min(Math_fround(Math_max($355($0_1, $1_1, $2_1), Math_fround(-10.0))), Math_fround(10.0)));
 }
 
 function $357($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = 0, $20_1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $5_1 = global$0 - 240 | 0;
  global$0 = $5_1;
  $7_1 = HEAP32[$0_1 + 4 >> 2];
  label$1 : {
   if (HEAPF32[$7_1 + 848 >> 2] < $3_1) {
    break label$1
   }
   $6_1 = $2_1 + 8 | 0;
   $11_1 = Math_fround(Math_fround(HEAPF32[$1_1 + 8 >> 2] * $3_1) + HEAPF32[$6_1 >> 2]);
   $4_1 = $2_1 + 4 | 0;
   $13_1 = Math_fround(Math_fround(HEAPF32[$1_1 + 4 >> 2] * $3_1) + HEAPF32[$4_1 >> 2]);
   $14_1 = Math_fround(Math_fround(HEAPF32[$1_1 >> 2] * $3_1) + HEAPF32[$2_1 >> 2]);
   $7_1 = HEAP32[$7_1 + 836 >> 2];
   $12_1 = ($7_1 | 0) == HEAP32[HEAP32[$0_1 + 8 >> 2] + 8 >> 2];
   label$2 : {
    if (!$12_1) {
     $358($5_1 + 224 | 0, HEAP32[HEAP32[$0_1 + 12 >> 2] + 8 >> 2] + 4 | 0, $14_1, $13_1, $11_1);
     $358($5_1 + 208 | 0, HEAP32[HEAP32[$0_1 + 8 >> 2] + 8 >> 2] + 4 | 0, HEAPF32[$2_1 >> 2], HEAPF32[$4_1 >> 2], HEAPF32[$6_1 >> 2]);
     break label$2;
    }
    $358($5_1 + 224 | 0, $7_1 + 4 | 0, $14_1, $13_1, $11_1);
    $358($5_1 + 208 | 0, HEAP32[HEAP32[$0_1 + 12 >> 2] + 8 >> 2] + 4 | 0, HEAPF32[$2_1 >> 2], HEAPF32[$4_1 >> 2], HEAPF32[$6_1 >> 2]);
   }
   $6_1 = $5_1 + 92 | 0;
   HEAP32[$6_1 >> 2] = 0;
   HEAP32[$6_1 + 4 >> 2] = 0;
   $4_1 = $5_1 + 232 | 0;
   $7_1 = HEAP32[$4_1 + 4 >> 2];
   $6_1 = $5_1 + 8 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $7_1;
   $7_1 = $5_1 + 216 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $4_1 = $5_1 + 24 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $8_1;
   $7_1 = $1_1 + 8 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $4_1 = $5_1 + 72 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $8_1;
   $4_1 = HEAP32[$5_1 + 228 >> 2];
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 + 224 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $4_1;
   $4_1 = HEAP32[$5_1 + 212 >> 2];
   HEAP32[$5_1 + 16 >> 2] = HEAP32[$5_1 + 208 >> 2];
   HEAP32[$5_1 + 20 >> 2] = $4_1;
   HEAP32[$5_1 + 84 >> 2] = 0;
   HEAP32[$5_1 + 88 >> 2] = 0;
   HEAPF32[$5_1 + 80 >> 2] = $3_1;
   $4_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$5_1 + 64 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$5_1 + 68 >> 2] = $4_1;
   $1_1 = 0;
   $1($5_1 + 116 | 0, 0, 52);
   HEAP32[$5_1 + 60 >> 2] = 0;
   HEAPF32[$5_1 + 56 >> 2] = $11_1;
   HEAPF32[$5_1 + 52 >> 2] = $13_1;
   $7_1 = $2_1 + 8 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $4_1 = $5_1 + 40 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $8_1;
   HEAPF32[$5_1 + 48 >> 2] = $14_1;
   $4_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$5_1 + 32 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$5_1 + 36 >> 2] = $4_1;
   $4_1 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = HEAP32[$4_1 + 844 >> 2];
   $8_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $2_1 = $4_1 + 12 | 0;
   $20_1 = $5_1 - -64 | 0;
   $11_1 = HEAPF32[$6_1 >> 2];
   $3_1 = HEAPF32[$4_1 + 848 >> 2];
   $3_1 = Math_fround($3_1 * $3_1);
   $7_1 = -1;
   $13_1 = HEAPF32[$5_1 + 4 >> 2];
   $14_1 = HEAPF32[$5_1 >> 2];
   while (1) {
    if (($1_1 | 0) != ($8_1 | 0)) {
     $9_1 = Math_fround(HEAPF32[$2_1 - 8 >> 2] - $14_1);
     $15_1 = Math_fround($9_1 * $9_1);
     $9_1 = Math_fround(HEAPF32[$2_1 - 4 >> 2] - $13_1);
     $15_1 = Math_fround($15_1 + Math_fround($9_1 * $9_1));
     $9_1 = Math_fround(HEAPF32[$2_1 >> 2] - $11_1);
     $9_1 = Math_fround($15_1 + Math_fround($9_1 * $9_1));
     $6_1 = $9_1 < $3_1;
     $3_1 = $6_1 ? $9_1 : $3_1;
     $7_1 = $6_1 ? $1_1 : $7_1;
     $2_1 = $2_1 + 208 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue;
    }
    break;
   };
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   $2_1 = HEAP32[$1_1 + 8 >> 2];
   $4_1 = HEAP32[$0_1 + 8 >> 2];
   $6_1 = HEAP32[$4_1 + 8 >> 2];
   label$6 : {
    if (!$12_1) {
     $8_1 = $0_1 + 16 | 0;
     $19_1 = $0_1 + 20 | 0;
     $10_1 = HEAP32[$4_1 >> 2];
     $4_1 = $10_1 ? $10_1 : $4_1;
     $10_1 = HEAP32[$1_1 >> 2];
     $10_1 = $10_1 ? $10_1 : $1_1;
     $1_1 = $6_1;
     $16_1 = $0_1 + 24 | 0;
     $12_1 = $0_1 + 28 | 0;
     break label$6;
    }
    $8_1 = $0_1 + 20 | 0;
    $19_1 = $0_1 + 16 | 0;
    $10_1 = HEAP32[$4_1 >> 2];
    $10_1 = $10_1 ? $10_1 : $4_1;
    $4_1 = HEAP32[$1_1 >> 2];
    $4_1 = $4_1 ? $4_1 : $1_1;
    $1_1 = $2_1;
    $2_1 = $6_1;
    $16_1 = $0_1 + 28 | 0;
    $12_1 = $0_1 + 24 | 0;
   }
   $6_1 = HEAP32[$10_1 + 4 >> 2];
   $4_1 = HEAP32[$4_1 + 4 >> 2];
   HEAP32[$5_1 + 204 >> 2] = $4_1;
   $10_1 = HEAP32[$16_1 >> 2];
   HEAP32[$5_1 + 112 >> 2] = $10_1;
   $16_1 = HEAP32[$12_1 >> 2];
   HEAP32[$5_1 + 108 >> 2] = $16_1;
   HEAP32[$5_1 + 104 >> 2] = HEAP32[$8_1 >> 2];
   HEAP32[$5_1 + 100 >> 2] = HEAP32[$19_1 >> 2];
   HEAP32[$5_1 + 200 >> 2] = $6_1;
   $12_1 = HEAP32[$2_1 + 260 >> 2];
   $3_1 = HEAPF32[$2_1 + 240 >> 2];
   $11_1 = HEAPF32[$2_1 + 236 >> 2];
   $13_1 = HEAPF32[$2_1 + 232 >> 2];
   $14_1 = HEAPF32[$2_1 + 228 >> 2];
   label$8 : {
    label$9 : {
     $8_1 = HEAP32[$6_1 + 4 >> 2];
     if (($8_1 | 0) == 21) {
      break label$9
     }
     if (($8_1 | 0) == 24) {
      break label$9
     }
     if (($8_1 | 0) == 26) {
      break label$9
     }
     if (($8_1 | 0) != 31) {
      break label$8
     }
     if (!HEAPU8[$6_1 + 196 | 0]) {
      break label$8
     }
     $2_1 = $16_1 << 2;
     $12_1 = HEAP32[$2_1 + HEAP32[$6_1 + 188 >> 2] >> 2];
     $3_1 = HEAPF32[$2_1 + HEAP32[$6_1 + 168 >> 2] >> 2];
     $13_1 = HEAPF32[$2_1 + HEAP32[$6_1 + 148 >> 2] >> 2];
     $14_1 = HEAPF32[$2_1 + HEAP32[$6_1 + 108 >> 2] >> 2];
     $11_1 = HEAPF32[$2_1 + HEAP32[$6_1 + 128 >> 2] >> 2];
     break label$8;
    }
    $2_1 = HEAP32[$2_1 + 192 >> 2];
    if (HEAP32[$2_1 + 4 >> 2] != 31) {
     break label$8
    }
    if (!HEAPU8[$2_1 + 196 | 0]) {
     break label$8
    }
    $6_1 = HEAP32[$6_1 + 12 >> 2] << 2;
    $12_1 = HEAP32[$6_1 + HEAP32[$2_1 + 188 >> 2] >> 2];
    $3_1 = HEAPF32[$6_1 + HEAP32[$2_1 + 168 >> 2] >> 2];
    $13_1 = HEAPF32[$6_1 + HEAP32[$2_1 + 148 >> 2] >> 2];
    $14_1 = HEAPF32[$6_1 + HEAP32[$2_1 + 108 >> 2] >> 2];
    $11_1 = HEAPF32[$6_1 + HEAP32[$2_1 + 128 >> 2] >> 2];
   }
   $2_1 = HEAP32[$1_1 + 260 >> 2];
   $9_1 = HEAPF32[$1_1 + 240 >> 2];
   $15_1 = HEAPF32[$1_1 + 236 >> 2];
   $17_1 = HEAPF32[$1_1 + 232 >> 2];
   $18_1 = HEAPF32[$1_1 + 228 >> 2];
   label$10 : {
    label$11 : {
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     if (($6_1 | 0) == 21) {
      break label$11
     }
     if (($6_1 | 0) == 24) {
      break label$11
     }
     if (($6_1 | 0) == 26) {
      break label$11
     }
     if (($6_1 | 0) != 31) {
      break label$10
     }
     if (!HEAPU8[$4_1 + 196 | 0]) {
      break label$10
     }
     $1_1 = $10_1 << 2;
     $2_1 = HEAP32[$1_1 + HEAP32[$4_1 + 188 >> 2] >> 2];
     $9_1 = HEAPF32[$1_1 + HEAP32[$4_1 + 168 >> 2] >> 2];
     $17_1 = HEAPF32[$1_1 + HEAP32[$4_1 + 148 >> 2] >> 2];
     $18_1 = HEAPF32[$1_1 + HEAP32[$4_1 + 108 >> 2] >> 2];
     $15_1 = HEAPF32[$1_1 + HEAP32[$4_1 + 128 >> 2] >> 2];
     break label$10;
    }
    $1_1 = HEAP32[$1_1 + 192 >> 2];
    if (HEAP32[$1_1 + 4 >> 2] != 31) {
     break label$10
    }
    if (!HEAPU8[$1_1 + 196 | 0]) {
     break label$10
    }
    $6_1 = HEAP32[$4_1 + 12 >> 2] << 2;
    $2_1 = HEAP32[$6_1 + HEAP32[$1_1 + 188 >> 2] >> 2];
    $9_1 = HEAPF32[$6_1 + HEAP32[$1_1 + 168 >> 2] >> 2];
    $17_1 = HEAPF32[$6_1 + HEAP32[$1_1 + 148 >> 2] >> 2];
    $18_1 = HEAPF32[$6_1 + HEAP32[$1_1 + 108 >> 2] >> 2];
    $15_1 = HEAPF32[$6_1 + HEAP32[$1_1 + 128 >> 2] >> 2];
   }
   $1_1 = ($2_1 | 0) < ($12_1 | 0) ? $12_1 : $2_1;
   (wasm2js_i32$0 = $5_1, wasm2js_f32$0 = $355($14_1, $18_1, $1_1)), HEAPF32[wasm2js_i32$0 + 84 >> 2] = wasm2js_f32$0;
   (wasm2js_i32$0 = $5_1, wasm2js_f32$0 = $355($13_1, $17_1, $1_1)), HEAPF32[wasm2js_i32$0 + 96 >> 2] = wasm2js_f32$0;
   (wasm2js_i32$0 = $5_1, wasm2js_f32$0 = $356($11_1, $15_1, $1_1)), HEAPF32[wasm2js_i32$0 + 88 >> 2] = wasm2js_f32$0;
   (wasm2js_i32$0 = $5_1, wasm2js_f32$0 = $356($3_1, $9_1, $1_1)), HEAPF32[wasm2js_i32$0 + 92 >> 2] = wasm2js_f32$0;
   $137($20_1, $5_1 + 168 | 0, $5_1 + 184 | 0);
   $0_1 = HEAP32[$0_1 + 4 >> 2];
   if (($7_1 | 0) >= 0) {
    $0_1 = $0_1 + Math_imul($7_1, 208) | 0;
    $1_1 = $0_1 + 144 | 0;
    $3_1 = HEAPF32[$1_1 >> 2];
    $2_1 = $0_1 + 140 | 0;
    $11_1 = HEAPF32[$2_1 >> 2];
    $6_1 = $0_1 + 136 | 0;
    $13_1 = HEAPF32[$6_1 >> 2];
    $4_1 = $0_1 + 168 | 0;
    $7_1 = HEAP32[$4_1 >> 2];
    label$13 : {
     if (HEAPU8[$5_1 + 128 | 0] & 16) {
      $14_1 = Math_fround(Math_fround($13_1 * HEAPF32[$0_1 + 88 >> 2]) + Math_fround(0.0));
      if (!(Math_fround(Math_fround($11_1 * $11_1) + Math_fround($3_1 * $3_1)) > Math_fround($14_1 * $14_1))) {
       break label$13
      }
     }
     $12_1 = $0_1 + 120 | 0;
     $8_1 = HEAP32[$12_1 >> 2];
     $2($0_1 + 4 | 0, $5_1, 208);
     HEAPF32[$6_1 >> 2] = $13_1;
     HEAP32[$12_1 >> 2] = $8_1;
     HEAPF32[$2_1 >> 2] = $11_1;
     HEAPF32[$1_1 >> 2] = $3_1;
    }
    HEAP32[$4_1 >> 2] = $7_1;
    break label$1;
   }
   $336($0_1, $5_1);
  }
  global$0 = $5_1 + 240 | 0;
 }
 
 function $358($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  $6_1 = HEAPF32[$1_1 + 52 >> 2];
  $7_1 = HEAPF32[$1_1 + 56 >> 2];
  $8_1 = HEAPF32[$1_1 + 48 >> 2];
  $244($5_1, $1_1);
  $351($0_1, $5_1, Math_fround($2_1 - $8_1), Math_fround($3_1 - $6_1), Math_fround($4_1 - $7_1));
  global$0 = $5_1 + 48 | 0;
 }
 
 function $359($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $0_1 = $0_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
 }
 
 function $360($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  while (1) {
   if ($3_1) {
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $0_1 = $2_1 + 8 | 0;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[$0_1 + 4 >> 2] = 0;
    $3_1 = $3_1 - 1 | 0;
    $2_1 = $2_1 + 16 | 0;
    continue;
   }
   break;
  };
 }
 
 function $361($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0);
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 68 >> 2]]($3_1 + 16 | 0, $1_1, $2_1);
  $6_1 = $3_1 + 24 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $5_1 = $0_1 + 8 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $7_1;
  $5_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $5_1;
  $5_1 = $2_1 + 8 | 0;
  $7_1 = HEAP32[$5_1 + 4 >> 2];
  HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $7_1;
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$3_1 + 16 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 20 >> 2] = $5_1;
  $4_1 = HEAPF32[$3_1 + 16 >> 2];
  $8_1 = Math_fround($4_1 * $4_1);
  $4_1 = HEAPF32[$3_1 + 20 >> 2];
  $8_1 = Math_fround($8_1 + Math_fround($4_1 * $4_1));
  $4_1 = HEAPF32[$6_1 >> 2];
  if (Math_fround($8_1 + Math_fround($4_1 * $4_1)) < Math_fround(1.4210854715202004e-14)) {
   HEAP32[$3_1 + 24 >> 2] = -1082130432;
   HEAP32[$3_1 + 28 >> 2] = 0;
   HEAP32[$3_1 + 16 >> 2] = -1082130432;
   HEAP32[$3_1 + 20 >> 2] = -1082130432;
  }
  $84($3_1 + 16 | 0);
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1));
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAPF32[$3_1 + 8 >> 2] = $4_1 * HEAPF32[$3_1 + 24 >> 2];
  HEAPF32[$3_1 + 4 >> 2] = $4_1 * HEAPF32[$3_1 + 20 >> 2];
  HEAPF32[$3_1 >> 2] = $4_1 * HEAPF32[$3_1 + 16 >> 2];
  $89($0_1, $3_1);
  global$0 = $3_1 + 32 | 0;
 }
 
 function $362($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0);
  $3_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  HEAP32[$2_1 + 12 >> 2] = 0;
  $1_1 = Math_fround($4_1 * Math_fround($3_1 * Math_fround($1_1 * Math_fround(.4000000059604645))));
  HEAPF32[$2_1 + 8 >> 2] = $1_1;
  HEAPF32[$2_1 + 4 >> 2] = $1_1;
  HEAPF32[$2_1 >> 2] = $1_1;
 }
 
 function $363($0_1) {
  $0_1 = $0_1 | 0;
  return 11423;
 }
 
 function $364($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround(HEAPF32[$0_1 + 32 >> 2] * HEAPF32[$0_1 + 16 >> 2]));
 }
 
 function $365($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 56 >> 2]]($2_1, 72) | 0;
  HEAP8[$2_1 + 60 | 0] = 0;
  HEAP8[$2_1 + 52 | 0] = 0;
  HEAP32[$2_1 + 36 >> 2] = 0;
  HEAP32[$2_1 + 40 >> 2] = 0;
  $3_1 = HEAP32[$0_1 + 12 >> 2];
  $4_1 = HEAP32[$0_1 + 16 >> 2];
  HEAP32[$2_1 + 4 >> 2] = HEAP32[$1_1 >> 2];
  HEAP8[$2_1 + 28 | 0] = 1;
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$2_1 >> 2] = 11600;
  HEAP32[$2_1 + 24 >> 2] = 0;
  HEAP8[$2_1 + 48 | 0] = 1;
  HEAP32[$2_1 + 16 >> 2] = 0;
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP32[$2_1 + 44 >> 2] = 0;
  HEAP32[$2_1 + 64 >> 2] = $3_1;
  HEAP32[$2_1 + 68 >> 2] = $4_1;
  HEAP32[$2_1 + 56 >> 2] = HEAP32[$1_1 + 4 >> 2];
  return $2_1 | 0;
 }
 
 function $366($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 11600;
  label$1 : {
   if (!HEAPU8[$0_1 + 52 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 + 56 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1);
  }
  $57($0_1 + 32 | 0);
  $57($0_1 + 12 | 0);
  return $0_1 | 0;
 }
 
 function $367($0_1) {
  $0_1 = $0_1 | 0;
  $17($366($0_1));
 }
 
 function $368($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13_1 = Math_fround(0), $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = Math_fround(0), $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = Math_fround(0), $56_1 = Math_fround(0), $57_1 = Math_fround(0), $58_1 = Math_fround(0), $59_1 = Math_fround(0), $60_1 = Math_fround(0), $61_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $5_1 = global$0 - 1056 | 0;
  global$0 = $5_1;
  $7_1 = HEAP32[$0_1 + 56 >> 2];
  if (!$7_1) {
   $7_1 = HEAP32[$0_1 + 4 >> 2];
   $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 12 >> 2]]($7_1, HEAP32[$1_1 + 8 >> 2], HEAP32[$2_1 + 8 >> 2]) | 0;
   HEAP8[$0_1 + 52 | 0] = 1;
   HEAP32[$0_1 + 56 >> 2] = $7_1;
  }
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $6_1 = HEAP32[$2_1 + 4 >> 2];
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       $14_1 = HEAP32[$1_1 + 4 >> 2];
       switch (HEAP32[$14_1 + 4 >> 2] - 8 | 0) {
       case 0:
        break label$5;
       case 2:
        break label$6;
       default:
        break label$4;
       };
      }
      label$7 : {
       switch (HEAP32[$6_1 + 4 >> 2] - 8 | 0) {
       case 2:
        $3_1 = $14_1 + 32 | 0;
        $0_1 = HEAP32[$14_1 + 56 >> 2];
        $8_1 = HEAPF32[$3_1 + ($0_1 << 2) >> 2];
        $13_1 = HEAPF32[$3_1 + (($0_1 + 2 | 0) % 3 << 2) >> 2];
        $12_1 = $6_1 + 32 | 0;
        $3_1 = HEAP32[$6_1 + 56 >> 2];
        $10_1 = HEAPF32[$7_1 + 848 >> 2];
        $8_1 = $369($5_1 + 480 | 0, $5_1, $8_1, $13_1, HEAPF32[$12_1 + ($3_1 << 2) >> 2], HEAPF32[$12_1 + (($3_1 + 2 | 0) % 3 << 2) >> 2], $0_1, $3_1, HEAP32[$1_1 + 12 >> 2], HEAP32[$2_1 + 12 >> 2], $10_1);
        if (!($8_1 < $10_1)) {
         break label$3
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $5_1 + 480 | 0, $5_1, $8_1);
        break label$3;
       case 0:
        break label$7;
       default:
        break label$4;
       };
      }
      $3_1 = $14_1 + 32 | 0;
      $0_1 = HEAP32[$14_1 + 56 >> 2];
      $10_1 = HEAPF32[$7_1 + 848 >> 2];
      $8_1 = $369($5_1 + 480 | 0, $5_1, HEAPF32[$3_1 + ($0_1 << 2) >> 2], HEAPF32[$3_1 + (($0_1 + 2 | 0) % 3 << 2) >> 2], Math_fround(0.0), Math_fround(HEAPF32[$6_1 + 32 >> 2] * HEAPF32[$6_1 + 16 >> 2]), $0_1, 1, HEAP32[$1_1 + 12 >> 2], HEAP32[$2_1 + 12 >> 2], $10_1);
      if (!($8_1 < $10_1)) {
       break label$3
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $5_1 + 480 | 0, $5_1, $8_1);
      break label$3;
     }
     if (HEAP32[$6_1 + 4 >> 2] != 10) {
      break label$4
     }
     $3_1 = $6_1 + 32 | 0;
     $0_1 = HEAP32[$6_1 + 56 >> 2];
     $10_1 = HEAPF32[$7_1 + 848 >> 2];
     $8_1 = $369($5_1 + 480 | 0, $5_1, Math_fround(0.0), Math_fround(HEAPF32[$14_1 + 32 >> 2] * HEAPF32[$14_1 + 16 >> 2]), HEAPF32[$3_1 + ($0_1 << 2) >> 2], HEAPF32[$3_1 + (($0_1 + 2 | 0) % 3 << 2) >> 2], 1, $0_1, HEAP32[$1_1 + 12 >> 2], HEAP32[$2_1 + 12 >> 2], $10_1);
     if (!($8_1 < $10_1)) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $5_1 + 480 | 0, $5_1, $8_1);
     break label$3;
    }
    HEAP8[$5_1 + 812 | 0] = 0;
    HEAP32[$5_1 + 788 >> 2] = 953267991;
    $7_1 = $5_1 + 412 | 0;
    HEAP32[$7_1 >> 2] = 0;
    HEAP32[$7_1 + 4 >> 2] = 0;
    HEAP32[$5_1 + 400 >> 2] = 11136;
    HEAP32[$5_1 + 432 >> 2] = $6_1;
    HEAP32[$5_1 + 428 >> 2] = $14_1;
    HEAP32[$5_1 + 404 >> 2] = 0;
    HEAP32[$5_1 + 408 >> 2] = 1065353216;
    HEAP32[$5_1 + 420 >> 2] = HEAP32[$0_1 + 8 >> 2];
    HEAP32[$5_1 + 436 >> 2] = HEAP32[$14_1 + 4 >> 2];
    HEAP32[$5_1 + 440 >> 2] = HEAP32[$6_1 + 4 >> 2];
    HEAP32[$5_1 + 424 >> 2] = $5_1 + 480;
    (wasm2js_i32$0 = $5_1, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$14_1 >> 2] + 48 >> 2]]($14_1))), HEAPF32[wasm2js_i32$0 + 444 >> 2] = wasm2js_f32$0;
    $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 48 >> 2]]($6_1));
    HEAP32[$5_1 + 472 >> 2] = 1;
    HEAP32[$5_1 + 476 >> 2] = 1;
    HEAP32[$5_1 + 460 >> 2] = -1;
    HEAP8[$5_1 + 452 | 0] = 0;
    HEAPF32[$5_1 + 448 >> 2] = $8_1;
    HEAP32[$5_1 + 432 >> 2] = $6_1;
    HEAP32[$5_1 + 428 >> 2] = $14_1;
    $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$14_1 >> 2] + 48 >> 2]]($14_1));
    $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 48 >> 2]]($6_1));
    $7_1 = HEAP32[$1_1 + 12 >> 2];
    $17_1 = $7_1 + 8 | 0;
    $16_1 = HEAP32[$17_1 + 4 >> 2];
    $12_1 = $5_1 + 848 | 0;
    HEAP32[$12_1 >> 2] = HEAP32[$17_1 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $16_1;
    $17_1 = $7_1 + 24 | 0;
    $16_1 = HEAP32[$17_1 + 4 >> 2];
    $12_1 = $5_1 + 864 | 0;
    HEAP32[$12_1 >> 2] = HEAP32[$17_1 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $16_1;
    $17_1 = $7_1 + 40 | 0;
    $16_1 = HEAP32[$17_1 + 4 >> 2];
    $12_1 = $5_1 + 880 | 0;
    HEAP32[$12_1 >> 2] = HEAP32[$17_1 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $16_1;
    $17_1 = $7_1 + 56 | 0;
    $16_1 = HEAP32[$17_1 + 4 >> 2];
    $12_1 = $5_1 + 896 | 0;
    HEAP32[$12_1 >> 2] = HEAP32[$17_1 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $16_1;
    $12_1 = HEAP32[$7_1 + 4 >> 2];
    HEAP32[$5_1 + 840 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$5_1 + 844 >> 2] = $12_1;
    $12_1 = HEAP32[$7_1 + 20 >> 2];
    HEAP32[$5_1 + 856 >> 2] = HEAP32[$7_1 + 16 >> 2];
    HEAP32[$5_1 + 860 >> 2] = $12_1;
    $12_1 = HEAP32[$7_1 + 36 >> 2];
    HEAP32[$5_1 + 872 >> 2] = HEAP32[$7_1 + 32 >> 2];
    HEAP32[$5_1 + 876 >> 2] = $12_1;
    $12_1 = HEAP32[$7_1 + 52 >> 2];
    HEAP32[$5_1 + 888 >> 2] = HEAP32[$7_1 + 48 >> 2];
    HEAP32[$5_1 + 892 >> 2] = $12_1;
    $8_1 = Math_fround(Math_fround(Math_fround($8_1 + $10_1) + HEAPF32[HEAP32[$0_1 + 56 >> 2] + 848 >> 2]) + HEAPF32[$4_1 + 32 >> 2]);
    HEAPF32[$5_1 + 968 >> 2] = $8_1 * $8_1;
    $16_1 = HEAP32[$2_1 + 12 >> 2];
    $7_1 = $16_1;
    $15_1 = HEAP32[$7_1 + 20 >> 2];
    $12_1 = $5_1 + 920 | 0;
    HEAP32[$12_1 >> 2] = HEAP32[$7_1 + 16 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $15_1;
    $18_1 = HEAP32[$7_1 + 36 >> 2];
    $17_1 = $5_1 + 936 | 0;
    $15_1 = $17_1;
    HEAP32[$15_1 >> 2] = HEAP32[$7_1 + 32 >> 2];
    HEAP32[$15_1 + 4 >> 2] = $18_1;
    $18_1 = HEAP32[$7_1 + 52 >> 2];
    $21_1 = $5_1 + 952 | 0;
    $15_1 = $21_1;
    HEAP32[$15_1 >> 2] = HEAP32[$7_1 + 48 >> 2];
    HEAP32[$15_1 + 4 >> 2] = $18_1;
    $7_1 = $7_1 + 8 | 0;
    $18_1 = HEAP32[$7_1 + 4 >> 2];
    $15_1 = $5_1 + 912 | 0;
    HEAP32[$15_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$15_1 + 4 >> 2] = $18_1;
    $15_1 = $16_1 + 24 | 0;
    $18_1 = HEAP32[$15_1 + 4 >> 2];
    $7_1 = $5_1 + 928 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$15_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $18_1;
    $15_1 = $16_1 + 40 | 0;
    $18_1 = HEAP32[$15_1 + 4 >> 2];
    $7_1 = $5_1 + 944 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$15_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $18_1;
    $15_1 = $16_1 + 56 | 0;
    $18_1 = HEAP32[$15_1 + 4 >> 2];
    $7_1 = $5_1 + 960 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$15_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $18_1;
    $7_1 = HEAP32[$16_1 + 4 >> 2];
    HEAP32[$5_1 + 904 >> 2] = HEAP32[$16_1 >> 2];
    HEAP32[$5_1 + 908 >> 2] = $7_1;
    label$9 : {
     label$10 : {
      $16_1 = HEAP32[$14_1 + 4 >> 2];
      if (($16_1 | 0) > 6) {
       break label$10
      }
      $7_1 = HEAP32[$6_1 + 4 >> 2];
      if (($7_1 | 0) > 6) {
       break label$10
      }
      HEAP32[$5_1 + 240 >> 2] = 11708;
      $8_1 = Math_fround(0.0);
      $10_1 = Math_fround(0.0);
      if ($16_1) {
       $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$14_1 >> 2] + 48 >> 2]]($14_1));
       $7_1 = HEAP32[$6_1 + 4 >> 2];
      }
      if ($7_1) {
       $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 48 >> 2]]($6_1))
      }
      HEAP8[$5_1 + 36 | 0] = 0;
      HEAPF32[$5_1 + 28 >> 2] = $8_1;
      HEAPF32[$5_1 + 24 >> 2] = $10_1;
      HEAP32[$5_1 + 4 >> 2] = $4_1;
      HEAP32[$5_1 >> 2] = 11736;
      $16_1 = HEAP32[$14_1 + 56 >> 2];
      if (!$16_1) {
       break label$10
      }
      $15_1 = HEAP32[$6_1 + 56 >> 2];
      if ($15_1) {
       $55_1 = HEAPF32[HEAP32[$0_1 + 56 >> 2] + 848 >> 2];
       label$15 : {
        if (HEAPU8[$3_1 + 24 | 0]) {
         HEAP32[5169] = HEAP32[5169] + 1;
         $21_1 = HEAP32[$2_1 + 12 >> 2];
         $23_1 = HEAP32[$1_1 + 12 >> 2];
         $78($5_1 + 320 | 0, $23_1, HEAPF32[$16_1 - -64 >> 2], HEAPF32[$16_1 + 68 >> 2], HEAPF32[$16_1 + 72 >> 2]);
         $78($5_1 + 272 | 0, $21_1, HEAPF32[$15_1 - -64 >> 2], HEAPF32[$15_1 + 68 >> 2], HEAPF32[$15_1 + 72 >> 2]);
         $18_1 = 28;
         $3_1 = HEAP32[$16_1 + 28 >> 2];
         $7_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
         $27_1 = Math_fround(HEAPF32[$5_1 + 328 >> 2] - HEAPF32[$5_1 + 280 >> 2]);
         $28_1 = Math_fround(HEAPF32[$5_1 + 324 >> 2] - HEAPF32[$5_1 + 276 >> 2]);
         $29_1 = Math_fround(HEAPF32[$5_1 + 320 >> 2] - HEAPF32[$5_1 + 272 >> 2]);
         $8_1 = Math_fround(3402823466385288598117041.0e14);
         while (1) {
          if ($7_1) {
           $3_1 = HEAP32[$16_1 + 36 >> 2] + $18_1 | 0;
           $351($5_1 + 1040 | 0, $23_1, HEAPF32[$3_1 - 8 >> 2], HEAPF32[$3_1 - 4 >> 2], HEAPF32[$3_1 >> 2]);
           $10_1 = HEAPF32[$5_1 + 1040 >> 2];
           $13_1 = HEAPF32[$5_1 + 1044 >> 2];
           $19_1 = HEAPF32[$5_1 + 1048 >> 2];
           if (Math_fround(Math_fround(Math_fround($29_1 * $10_1) + Math_fround($28_1 * $13_1)) + Math_fround($27_1 * $19_1)) < Math_fround(0.0)) {
            HEAPF32[$5_1 + 1048 >> 2] = -$19_1;
            HEAPF32[$5_1 + 1044 >> 2] = -$13_1;
            HEAPF32[$5_1 + 1040 >> 2] = -$10_1;
           }
           HEAP32[5170] = HEAP32[5170] + 1;
           if ($347($23_1, $21_1, $29_1, $28_1, $27_1, $5_1 + 1040 | 0, $16_1, $15_1, $8_1)) {
            $3_1 = 0;
            HEAP32[5171] = HEAP32[5171] + 1;
            label$21 : {
             if (!$349($16_1, $15_1, $23_1, $21_1, $5_1 + 1040 | 0, $5_1 + 992 | 0, $5_1 + 1024 | 0, $5_1 + 1008 | 0)) {
              break label$21
             }
             $3_1 = 1;
             $10_1 = HEAPF32[$5_1 + 992 >> 2];
             if (!($10_1 < $8_1)) {
              break label$21
             }
             $17_1 = $5_1 + 1048 | 0;
             $22_1 = HEAP32[$17_1 + 4 >> 2];
             $12_1 = $5_1 + 392 | 0;
             HEAP32[$12_1 >> 2] = HEAP32[$17_1 >> 2];
             HEAP32[$12_1 + 4 >> 2] = $22_1;
             $12_1 = HEAP32[$5_1 + 1044 >> 2];
             HEAP32[$5_1 + 384 >> 2] = HEAP32[$5_1 + 1040 >> 2];
             HEAP32[$5_1 + 388 >> 2] = $12_1;
             $8_1 = $10_1;
            }
            if (!$3_1) {
             break label$9
            }
           }
           $7_1 = $7_1 - 1 | 0;
           $18_1 = $18_1 + 36 | 0;
           continue;
          }
          break;
         };
         $18_1 = 28;
         $3_1 = HEAP32[$15_1 + 28 >> 2];
         $7_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
         while (1) {
          if ($7_1) {
           $3_1 = HEAP32[$15_1 + 36 >> 2] + $18_1 | 0;
           $351($5_1 + 1040 | 0, $21_1, HEAPF32[$3_1 - 8 >> 2], HEAPF32[$3_1 - 4 >> 2], HEAPF32[$3_1 >> 2]);
           $10_1 = HEAPF32[$5_1 + 1040 >> 2];
           $13_1 = HEAPF32[$5_1 + 1044 >> 2];
           $19_1 = HEAPF32[$5_1 + 1048 >> 2];
           if (Math_fround(Math_fround(Math_fround($29_1 * $10_1) + Math_fround($28_1 * $13_1)) + Math_fround($27_1 * $19_1)) < Math_fround(0.0)) {
            HEAPF32[$5_1 + 1048 >> 2] = -$19_1;
            HEAPF32[$5_1 + 1044 >> 2] = -$13_1;
            HEAPF32[$5_1 + 1040 >> 2] = -$10_1;
           }
           HEAP32[5170] = HEAP32[5170] + 1;
           if ($347($23_1, $21_1, $29_1, $28_1, $27_1, $5_1 + 1040 | 0, $16_1, $15_1, $8_1)) {
            $3_1 = 0;
            HEAP32[5171] = HEAP32[5171] + 1;
            label$26 : {
             if (!$349($16_1, $15_1, $23_1, $21_1, $5_1 + 1040 | 0, $5_1 + 992 | 0, $5_1 + 1024 | 0, $5_1 + 1008 | 0)) {
              break label$26
             }
             $3_1 = 1;
             $10_1 = HEAPF32[$5_1 + 992 >> 2];
             if (!($10_1 < $8_1)) {
              break label$26
             }
             $17_1 = $5_1 + 1048 | 0;
             $22_1 = HEAP32[$17_1 + 4 >> 2];
             $12_1 = $5_1 + 392 | 0;
             HEAP32[$12_1 >> 2] = HEAP32[$17_1 >> 2];
             HEAP32[$12_1 + 4 >> 2] = $22_1;
             $12_1 = HEAP32[$5_1 + 1044 >> 2];
             HEAP32[$5_1 + 384 >> 2] = HEAP32[$5_1 + 1040 >> 2];
             HEAP32[$5_1 + 388 >> 2] = $12_1;
             $8_1 = $10_1;
            }
            if (!$3_1) {
             break label$9
            }
           }
           $7_1 = $7_1 - 1 | 0;
           $18_1 = $18_1 + 36 | 0;
           continue;
          }
          break;
         };
         $12_1 = -1;
         $17_1 = -1;
         $3_1 = 0;
         while (1) {
          if (HEAP32[$16_1 + 48 >> 2] > ($3_1 | 0)) {
           $7_1 = HEAP32[$16_1 + 56 >> 2] + ($3_1 << 4) | 0;
           $351($5_1 + 1040 | 0, $23_1, HEAPF32[$7_1 >> 2], HEAPF32[$7_1 + 4 >> 2], HEAPF32[$7_1 + 8 >> 2]);
           $18_1 = 0;
           $10_1 = HEAPF32[$5_1 + 1040 >> 2];
           $13_1 = HEAPF32[$5_1 + 1048 >> 2];
           $19_1 = HEAPF32[$5_1 + 1044 >> 2];
           $7_1 = 0;
           while (1) {
            if (HEAP32[$15_1 + 48 >> 2] > ($7_1 | 0)) {
             $22_1 = HEAP32[$15_1 + 56 >> 2] + $18_1 | 0;
             $351($5_1 + 1024 | 0, $21_1, HEAPF32[$22_1 >> 2], HEAPF32[$22_1 + 4 >> 2], HEAPF32[$22_1 + 8 >> 2]);
             HEAP32[$5_1 + 1020 >> 2] = 0;
             $31_1 = HEAPF32[$5_1 + 1028 >> 2];
             $32_1 = HEAPF32[$5_1 + 1024 >> 2];
             $25 = Math_fround(Math_fround($31_1 * $10_1) - Math_fround($19_1 * $32_1));
             HEAPF32[$5_1 + 1016 >> 2] = $25;
             $33_1 = HEAPF32[$5_1 + 1032 >> 2];
             $35_1 = Math_fround(Math_fround($13_1 * $32_1) - Math_fround($33_1 * $10_1));
             HEAPF32[$5_1 + 1012 >> 2] = $35_1;
             $36_1 = Math_fround(Math_fround($19_1 * $33_1) - Math_fround($13_1 * $31_1));
             HEAPF32[$5_1 + 1008 >> 2] = $36_1;
             label$31 : {
              if ($95($36_1, $35_1, $25)) {
               break label$31
              }
              $22_1 = $84($5_1 + 1008 | 0);
              $25 = HEAPF32[$5_1 + 1008 >> 2];
              $35_1 = HEAPF32[$5_1 + 1012 >> 2];
              $36_1 = HEAPF32[$5_1 + 1016 >> 2];
              if (Math_fround(Math_fround(Math_fround($29_1 * $25) + Math_fround($28_1 * $35_1)) + Math_fround($27_1 * $36_1)) < Math_fround(0.0)) {
               HEAPF32[$5_1 + 1016 >> 2] = -$36_1;
               HEAPF32[$5_1 + 1012 >> 2] = -$35_1;
               HEAPF32[$5_1 + 1008 >> 2] = -$25;
              }
              HEAP32[5170] = HEAP32[5170] + 1;
              if (!$347($23_1, $21_1, $29_1, $28_1, $27_1, $22_1, $16_1, $15_1, $8_1)) {
               break label$31
              }
              HEAP32[5171] = HEAP32[5171] + 1;
              $22_1 = $349($16_1, $15_1, $23_1, $21_1, $22_1, $5_1 + 256 | 0, $5_1 + 992 | 0, $5_1 + 976 | 0);
              label$33 : {
               if (!$22_1) {
                break label$33
               }
               $25 = HEAPF32[$5_1 + 256 >> 2];
               if (!($25 < $8_1)) {
                break label$33
               }
               $17_1 = $5_1 + 1016 | 0;
               $9_1 = HEAP32[$17_1 + 4 >> 2];
               $12_1 = $5_1 + 392 | 0;
               HEAP32[$12_1 >> 2] = HEAP32[$17_1 >> 2];
               HEAP32[$12_1 + 4 >> 2] = $9_1;
               $12_1 = HEAP32[$5_1 + 1012 >> 2];
               HEAP32[$5_1 + 384 >> 2] = HEAP32[$5_1 + 1008 >> 2];
               HEAP32[$5_1 + 388 >> 2] = $12_1;
               $56_1 = HEAPF32[$5_1 + 984 >> 2];
               $57_1 = HEAPF32[$5_1 + 980 >> 2];
               $58_1 = HEAPF32[$5_1 + 976 >> 2];
               $59_1 = HEAPF32[$5_1 + 1e3 >> 2];
               $60_1 = HEAPF32[$5_1 + 996 >> 2];
               $61_1 = HEAPF32[$5_1 + 992 >> 2];
               $24_1 = $32_1;
               $26_1 = $31_1;
               $30_1 = $33_1;
               $34_1 = $10_1;
               $40_1 = $19_1;
               $41_1 = $13_1;
               $12_1 = $3_1;
               $17_1 = $7_1;
               $8_1 = $25;
              }
              if (!$22_1) {
               break label$9
              }
             }
             $18_1 = $18_1 + 16 | 0;
             $7_1 = $7_1 + 1 | 0;
             continue;
            }
            break;
           };
           $3_1 = $3_1 + 1 | 0;
           continue;
          }
          break;
         };
         label$34 : {
          if (($12_1 | $17_1) < 0) {
           break label$34
          }
          $31_1 = Math_fround($58_1 - $61_1);
          $32_1 = Math_fround($57_1 - $60_1);
          $33_1 = Math_fround($56_1 - $59_1);
          $25 = Math_fround(Math_fround(Math_fround($24_1 * $31_1) + Math_fround($26_1 * $32_1)) + Math_fround($30_1 * $33_1));
          $19_1 = Math_fround(Math_fround(Math_fround($34_1 * $31_1) + Math_fround($40_1 * $32_1)) + Math_fround($41_1 * $33_1));
          $10_1 = Math_fround(0.0);
          $13_1 = Math_fround(Math_fround(Math_fround($34_1 * $24_1) + Math_fround($40_1 * $26_1)) + Math_fround($41_1 * $30_1));
          $8_1 = Math_fround(Math_fround(1.0) - Math_fround($13_1 * $13_1));
          label$35 : {
           label$36 : {
            if ($8_1 == Math_fround(0.0)) {
             break label$36
            }
            $10_1 = Math_fround(-1000000015047466219876688.0e6);
            $8_1 = Math_fround(Math_fround($19_1 - Math_fround($13_1 * $25)) / $8_1);
            if ($8_1 < Math_fround(-1000000015047466219876688.0e6)) {
             break label$36
            }
            $10_1 = Math_fround(1000000015047466219876688.0e6);
            if (!($8_1 > Math_fround(1000000015047466219876688.0e6))) {
             break label$35
            }
           }
           $8_1 = $10_1;
          }
          $10_1 = Math_fround(Math_fround($13_1 * $8_1) - $25);
          label$37 : {
           if ($10_1 < Math_fround(-1000000015047466219876688.0e6)) {
            $13_1 = Math_fround($19_1 + Math_fround($13_1 * Math_fround(-1000000015047466219876688.0e6)));
            if ($13_1 < Math_fround(-1000000015047466219876688.0e6)) {
             $10_1 = Math_fround(-1000000015047466219876688.0e6);
             $8_1 = Math_fround(-1000000015047466219876688.0e6);
             break label$37;
            }
            $8_1 = Math_fround(1000000015047466219876688.0e6);
            if (!($13_1 > Math_fround(1000000015047466219876688.0e6))) {
             $10_1 = Math_fround(-1000000015047466219876688.0e6);
             $8_1 = $13_1;
             break label$37;
            }
            $10_1 = Math_fround(-1000000015047466219876688.0e6);
            break label$37;
           }
           if (!($10_1 > Math_fround(1000000015047466219876688.0e6))) {
            break label$37
           }
           $8_1 = Math_fround(-1000000015047466219876688.0e6);
           $10_1 = Math_fround(1000000015047466219876688.0e6);
           $13_1 = Math_fround(Math_fround($13_1 * Math_fround(1000000015047466219876688.0e6)) + $19_1);
           if ($13_1 < Math_fround(-1000000015047466219876688.0e6)) {
            break label$37
           }
           $8_1 = $13_1;
           if (!($8_1 > Math_fround(1000000015047466219876688.0e6))) {
            break label$37
           }
           $8_1 = Math_fround(1000000015047466219876688.0e6);
          }
          HEAP32[$5_1 + 1052 >> 2] = 0;
          $19_1 = Math_fround($24_1 * $10_1);
          $24_1 = Math_fround($19_1 + Math_fround($31_1 - Math_fround($34_1 * $8_1)));
          $13_1 = $24_1;
          $25 = Math_fround($13_1 * $13_1);
          $26_1 = Math_fround($10_1 * $26_1);
          $13_1 = Math_fround($26_1 + Math_fround($32_1 - Math_fround($8_1 * $40_1)));
          $30_1 = Math_fround($10_1 * $30_1);
          $10_1 = Math_fround($30_1 + Math_fround($33_1 - Math_fround($8_1 * $41_1)));
          $8_1 = $10_1;
          $8_1 = Math_fround(Math_fround($25 + Math_fround($13_1 * $13_1)) + Math_fround($8_1 * $8_1));
          if (!($8_1 > Math_fround(1.1920928955078125e-07))) {
           break label$34
          }
          $34_1 = Math_fround(Math_sqrt($8_1));
          $8_1 = Math_fround(Math_fround(1.0) / $34_1);
          $10_1 = Math_fround($8_1 * $10_1);
          HEAPF32[$5_1 + 1048 >> 2] = $10_1;
          $13_1 = Math_fround($8_1 * $13_1);
          HEAPF32[$5_1 + 1044 >> 2] = $13_1;
          $8_1 = Math_fround($8_1 * $24_1);
          HEAPF32[$5_1 + 1040 >> 2] = $8_1;
          if (Math_fround(Math_fround(Math_fround($8_1 * $29_1) + Math_fround($13_1 * $28_1)) + Math_fround($10_1 * $27_1)) < Math_fround(0.0)) {
           HEAPF32[$5_1 + 1048 >> 2] = -$10_1;
           HEAPF32[$5_1 + 1044 >> 2] = -$13_1;
           HEAPF32[$5_1 + 1040 >> 2] = -$8_1;
          }
          HEAP32[$5_1 + 1036 >> 2] = 0;
          HEAPF32[$5_1 + 1032 >> 2] = $56_1 + $30_1;
          HEAPF32[$5_1 + 1028 >> 2] = $57_1 + $26_1;
          HEAPF32[$5_1 + 1024 >> 2] = $58_1 + $19_1;
          FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $5_1 + 1040 | 0, $5_1 + 1024 | 0, Math_fround(-$34_1));
         }
         $8_1 = HEAPF32[$5_1 + 384 >> 2];
         $10_1 = HEAPF32[$5_1 + 388 >> 2];
         $13_1 = HEAPF32[$5_1 + 392 >> 2];
         if (Math_fround(Math_fround(Math_fround($29_1 * $8_1) + Math_fround($28_1 * $10_1)) + Math_fround($27_1 * $13_1)) < Math_fround(0.0)) {
          HEAP32[$5_1 + 396 >> 2] = 0;
          HEAPF32[$5_1 + 392 >> 2] = -$13_1;
          HEAPF32[$5_1 + 388 >> 2] = -$10_1;
          HEAPF32[$5_1 + 384 >> 2] = -$8_1;
         }
         $8_1 = Math_fround(-1000000015047466219876688.0e6);
         break label$15;
        }
        $345($5_1 + 400 | 0, $5_1 + 840 | 0, $5_1, HEAP32[$3_1 + 20 >> 2], 0);
        $7_1 = $5_1 + 16 | 0;
        $12_1 = HEAP32[$7_1 + 4 >> 2];
        $3_1 = $5_1 + 392 | 0;
        HEAP32[$3_1 >> 2] = HEAP32[$7_1 >> 2];
        HEAP32[$3_1 + 4 >> 2] = $12_1;
        $3_1 = HEAP32[$5_1 + 12 >> 2];
        HEAP32[$5_1 + 384 >> 2] = HEAP32[$5_1 + 8 >> 2];
        HEAP32[$5_1 + 388 >> 2] = $3_1;
        $8_1 = HEAPF32[$5_1 + 32 >> 2];
        if (!($8_1 < Math_fround(0.0))) {
         break label$9
        }
        if (!HEAPU8[$5_1 + 36 | 0]) {
         break label$9
        }
       }
       $7_1 = 0;
       $12_1 = $0_1 + 12 | 0;
       $131($12_1, 0, $5_1 + 320 | 0);
       $10_1 = Math_fround($8_1 - $55_1);
       $17_1 = HEAP32[$2_1 + 12 >> 2];
       $16_1 = HEAP32[$1_1 + 12 >> 2];
       $2_1 = HEAP32[$6_1 + 56 >> 2];
       $14_1 = HEAP32[$14_1 + 56 >> 2];
       $113($5_1 + 320 | 0, $5_1 + 384 | 0);
       $3_1 = -1;
       $8_1 = Math_fround(-3402823466385288598117041.0e14);
       $1_1 = 28;
       while (1) if (HEAP32[$2_1 + 28 >> 2] <= ($7_1 | 0)) {
        $7_1 = 0;
        $131($12_1, 0, $5_1 + 272 | 0);
        $6_1 = HEAP32[$2_1 + 36 >> 2] + Math_imul($3_1, 36) | 0;
        $1_1 = HEAP32[$6_1 + 4 >> 2];
        $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
        $15_1 = $0_1 + 32 | 0;
        $18_1 = $6_1 + 12 | 0;
        while (1) if ($1_1) {
         $6_1 = HEAP32[$2_1 + 16 >> 2] + (HEAP32[HEAP32[$18_1 >> 2] + $7_1 >> 2] << 4) | 0;
         $78($5_1 + 272 | 0, $17_1, HEAPF32[$6_1 >> 2], HEAPF32[$6_1 + 4 >> 2], HEAPF32[$6_1 + 8 >> 2]);
         $128($12_1, $5_1 + 272 | 0);
         $1_1 = $1_1 - 1 | 0;
         $7_1 = $7_1 + 4 | 0;
         continue;
        } else {
         if (($3_1 | 0) <= -1) {
          break label$9
         }
         $350($5_1 + 320 | 0, $14_1, $16_1, $12_1, $15_1, $10_1, $55_1, $4_1);
         break label$9;
        };
       } else {
        $6_1 = HEAP32[$2_1 + 36 >> 2] + $1_1 | 0;
        $351($5_1 + 272 | 0, $17_1, HEAPF32[$6_1 - 8 >> 2], HEAPF32[$6_1 - 4 >> 2], HEAPF32[$6_1 >> 2]);
        $13_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$5_1 + 272 >> 2] * HEAPF32[$5_1 + 320 >> 2]) + Math_fround(HEAPF32[$5_1 + 276 >> 2] * HEAPF32[$5_1 + 324 >> 2])) + Math_fround(HEAPF32[$5_1 + 280 >> 2] * HEAPF32[$5_1 + 328 >> 2]));
        $6_1 = $13_1 > $8_1;
        $8_1 = $6_1 ? $13_1 : $8_1;
        $3_1 = $6_1 ? $7_1 : $3_1;
        $1_1 = $1_1 + 36 | 0;
        $7_1 = $7_1 + 1 | 0;
        continue;
       };
      }
      if (HEAP32[$6_1 + 4 >> 2] != 1) {
       break label$10
      }
      HEAP32[$5_1 + 332 >> 2] = 0;
      HEAP32[$5_1 + 324 >> 2] = 0;
      HEAP32[$5_1 + 328 >> 2] = 0;
      HEAP8[$5_1 + 336 | 0] = 1;
      $78($5_1 + 272 | 0, HEAP32[$2_1 + 12 >> 2], HEAPF32[$6_1 + 60 >> 2], HEAPF32[$6_1 - -64 >> 2], HEAPF32[$6_1 + 68 >> 2]);
      $128($5_1 + 320 | 0, $5_1 + 272 | 0);
      $78($5_1 + 272 | 0, HEAP32[$2_1 + 12 >> 2], HEAPF32[$6_1 + 76 >> 2], HEAPF32[$6_1 + 80 >> 2], HEAPF32[$6_1 + 84 >> 2]);
      $128($5_1 + 320 | 0, $5_1 + 272 | 0);
      $78($5_1 + 272 | 0, HEAP32[$2_1 + 12 >> 2], HEAPF32[$6_1 + 92 >> 2], HEAPF32[$6_1 + 96 >> 2], HEAPF32[$6_1 + 100 >> 2]);
      $128($5_1 + 320 | 0, $5_1 + 272 | 0);
      $8_1 = HEAPF32[HEAP32[$0_1 + 56 >> 2] + 848 >> 2];
      $345($5_1 + 400 | 0, $5_1 + 840 | 0, $5_1 + 240 | 0, HEAP32[$3_1 + 20 >> 2], 0);
      $13_1 = HEAPF32[$5_1 + 404 >> 2];
      $10_1 = $13_1;
      $24_1 = Math_fround($10_1 * $10_1);
      $19_1 = HEAPF32[$5_1 + 408 >> 2];
      $10_1 = $19_1;
      $25 = Math_fround($24_1 + Math_fround($10_1 * $10_1));
      $24_1 = HEAPF32[$5_1 + 412 >> 2];
      $10_1 = $24_1;
      $10_1 = Math_fround($25 + Math_fround($10_1 * $10_1));
      if ($10_1 > Math_fround(1.1920928955078125e-07)) {
       HEAP32[$5_1 + 284 >> 2] = 0;
       $10_1 = Math_fround(Math_fround(1.0) / $10_1);
       HEAPF32[$5_1 + 280 >> 2] = $10_1 * $24_1;
       HEAPF32[$5_1 + 276 >> 2] = $10_1 * $19_1;
       HEAPF32[$5_1 + 272 >> 2] = $10_1 * $13_1;
       $10_1 = HEAPF32[$5_1 + 456 >> 2];
       $13_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$14_1 >> 2] + 48 >> 2]]($14_1));
       $19_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 48 >> 2]]($6_1));
       $2_1 = $0_1 + 32 | 0;
       $131($2_1, 0, $5_1 + 1040 | 0);
       $350($5_1 + 272 | 0, HEAP32[$14_1 + 56 >> 2], HEAP32[$1_1 + 12 >> 2], $5_1 + 320 | 0, $2_1, Math_fround(Math_fround(Math_fround($10_1 - $13_1) - $19_1) - $8_1), $8_1, $4_1);
      }
      if (HEAPU8[$0_1 + 52 | 0]) {
       $370($4_1)
      }
      $57($5_1 + 320 | 0);
      break label$2;
     }
     $345($5_1 + 400 | 0, $5_1 + 840 | 0, $4_1, HEAP32[$3_1 + 20 >> 2], 0);
     label$51 : {
      if (!HEAP32[$0_1 + 64 >> 2]) {
       break label$51
      }
      if (HEAP32[HEAP32[$4_1 + 4 >> 2] + 844 >> 2] >= HEAP32[$0_1 + 68 >> 2]) {
       break label$51
      }
      $10_1 = HEAPF32[$5_1 + 404 >> 2];
      $8_1 = $10_1;
      $19_1 = Math_fround($8_1 * $8_1);
      $13_1 = HEAPF32[$5_1 + 408 >> 2];
      $8_1 = $13_1;
      $24_1 = Math_fround($19_1 + Math_fround($8_1 * $8_1));
      $19_1 = HEAPF32[$5_1 + 412 >> 2];
      $8_1 = $19_1;
      $8_1 = Math_fround($24_1 + Math_fround($8_1 * $8_1));
      if (!($8_1 > Math_fround(1.1920928955078125e-07))) {
       break label$51
      }
      $16_1 = $5_1 + 904 | 0;
      $23_1 = $5_1 + 888 | 0;
      $15_1 = $5_1 + 872 | 0;
      $18_1 = $5_1 + 856 | 0;
      HEAP32[$5_1 + 1020 >> 2] = 0;
      $8_1 = Math_fround(Math_fround(1.0) / $8_1);
      $19_1 = Math_fround($8_1 * $19_1);
      HEAPF32[$5_1 + 1016 >> 2] = $19_1;
      $24_1 = Math_fround($8_1 * $13_1);
      HEAPF32[$5_1 + 1012 >> 2] = $24_1;
      $26_1 = Math_fround($8_1 * $10_1);
      HEAPF32[$5_1 + 1008 >> 2] = $26_1;
      $137($5_1 + 1008 | 0, $5_1 + 1040 | 0, $5_1 + 1024 | 0);
      $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$14_1 >> 2] + 16 >> 2]]($14_1));
      $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 16 >> 2]]($6_1));
      $37_1 = $8_1 < $10_1;
      $8_1 = Math_fround(Math_fround(.019999999552965164) / ($37_1 ? $8_1 : $10_1));
      label$52 : {
       if ($37_1) {
        $6_1 = $5_1 + 848 | 0;
        $14_1 = HEAP32[$6_1 + 4 >> 2];
        $7_1 = $5_1 + 328 | 0;
        HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
        HEAP32[$7_1 + 4 >> 2] = $14_1;
        $6_1 = $18_1 + 8 | 0;
        $14_1 = HEAP32[$6_1 + 4 >> 2];
        $7_1 = $5_1 + 344 | 0;
        HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
        HEAP32[$7_1 + 4 >> 2] = $14_1;
        $6_1 = $15_1 + 8 | 0;
        $14_1 = HEAP32[$6_1 + 4 >> 2];
        $7_1 = $5_1 + 360 | 0;
        HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
        HEAP32[$7_1 + 4 >> 2] = $14_1;
        $6_1 = $23_1 + 8 | 0;
        $14_1 = HEAP32[$6_1 + 4 >> 2];
        $7_1 = $5_1 + 376 | 0;
        HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
        HEAP32[$7_1 + 4 >> 2] = $14_1;
        $7_1 = HEAP32[$5_1 + 844 >> 2];
        HEAP32[$5_1 + 320 >> 2] = HEAP32[$5_1 + 840 >> 2];
        HEAP32[$5_1 + 324 >> 2] = $7_1;
        $7_1 = HEAP32[$18_1 + 4 >> 2];
        HEAP32[$5_1 + 336 >> 2] = HEAP32[$18_1 >> 2];
        HEAP32[$5_1 + 340 >> 2] = $7_1;
        $7_1 = HEAP32[$15_1 + 4 >> 2];
        HEAP32[$5_1 + 352 >> 2] = HEAP32[$15_1 >> 2];
        HEAP32[$5_1 + 356 >> 2] = $7_1;
        $7_1 = HEAP32[$23_1 + 4 >> 2];
        HEAP32[$5_1 + 368 >> 2] = HEAP32[$23_1 >> 2];
        HEAP32[$5_1 + 372 >> 2] = $7_1;
        $38_1 = $5_1 + 352 | 0;
        $39_1 = $5_1 + 336 | 0;
        $7_1 = $5_1 + 368 | 0;
        break label$52;
       }
       $6_1 = $16_1 + 8 | 0;
       $14_1 = HEAP32[$6_1 + 4 >> 2];
       $7_1 = $5_1 + 328 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $14_1;
       $6_1 = $12_1 + 8 | 0;
       $14_1 = HEAP32[$6_1 + 4 >> 2];
       $7_1 = $5_1 + 344 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $14_1;
       $6_1 = $17_1 + 8 | 0;
       $14_1 = HEAP32[$6_1 + 4 >> 2];
       $7_1 = $5_1 + 360 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $14_1;
       $6_1 = $21_1 + 8 | 0;
       $14_1 = HEAP32[$6_1 + 4 >> 2];
       $7_1 = $5_1 + 376 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $14_1;
       $7_1 = HEAP32[$16_1 + 4 >> 2];
       HEAP32[$5_1 + 320 >> 2] = HEAP32[$16_1 >> 2];
       HEAP32[$5_1 + 324 >> 2] = $7_1;
       $7_1 = HEAP32[$12_1 + 4 >> 2];
       HEAP32[$5_1 + 336 >> 2] = HEAP32[$12_1 >> 2];
       HEAP32[$5_1 + 340 >> 2] = $7_1;
       $7_1 = HEAP32[$17_1 + 4 >> 2];
       HEAP32[$5_1 + 352 >> 2] = HEAP32[$17_1 >> 2];
       HEAP32[$5_1 + 356 >> 2] = $7_1;
       $7_1 = HEAP32[$21_1 + 4 >> 2];
       HEAP32[$5_1 + 368 >> 2] = HEAP32[$21_1 >> 2];
       HEAP32[$5_1 + 372 >> 2] = $7_1;
       $38_1 = $5_1 + 352 | 0;
       $39_1 = $5_1 + 336 | 0;
       $7_1 = $5_1 + 368 | 0;
      }
      $30_1 = Math_fround(Math_min($8_1, Math_fround(.39269909262657166)));
      $42_1 = $5_1 + 216 | 0;
      $43_1 = $5_1 + 200 | 0;
      $44_1 = $5_1 + 184 | 0;
      $45_1 = $5_1 + 168 | 0;
      $46_1 = $5_1 + 152 | 0;
      $47_1 = $5_1 + 136 | 0;
      $48_1 = $5_1 + 120 | 0;
      $49_1 = $5_1 + 104 | 0;
      $50_1 = $5_1 + 88 | 0;
      $51_1 = $5_1 + 72 | 0;
      $52_1 = $5_1 + 56 | 0;
      $53_1 = $5_1 + 40 | 0;
      $14_1 = $5_1 + 32 | 0;
      $22_1 = $5_1 + 16 | 0;
      $8_1 = HEAPF32[$5_1 + 1048 >> 2];
      $10_1 = HEAPF32[$5_1 + 1044 >> 2];
      $13_1 = HEAPF32[$5_1 + 1040 >> 2];
      while (1) {
       if (HEAP32[$0_1 + 64 >> 2] <= ($54_1 | 0)) {
        break label$51
       }
       if (Math_fround(Math_fround(Math_fround($13_1 * $13_1) + Math_fround($10_1 * $10_1)) + Math_fround($8_1 * $8_1)) > Math_fround(1.1920928955078125e-07)) {
        $249($5_1 + 992 | 0, $13_1, $10_1, $8_1, $30_1);
        $249($5_1 + 976 | 0, $26_1, $24_1, $19_1, Math_fround(Math_fround(Math_fround(6.2831854820251465) / Math_fround(HEAP32[$0_1 + 64 >> 2])) * Math_fround($54_1 | 0)));
        label$56 : {
         if ($37_1) {
          HEAPF32[$5_1 + 248 >> 2] = -HEAPF32[$5_1 + 984 >> 2];
          HEAPF32[$5_1 + 244 >> 2] = -HEAPF32[$5_1 + 980 >> 2];
          HEAPF32[$5_1 + 240 >> 2] = -HEAPF32[$5_1 + 976 >> 2];
          HEAPF32[$5_1 + 252 >> 2] = HEAPF32[$5_1 + 988 >> 2];
          $246($5_1 + 256 | 0, $5_1 + 240 | 0, $5_1 + 992 | 0);
          $246($5_1 + 384 | 0, $5_1 + 256 | 0, $5_1 + 976 | 0);
          $371($5_1 + 272 | 0, $5_1 + 384 | 0);
          $245($5_1, $5_1 + 272 | 0, HEAP32[$1_1 + 12 >> 2]);
          $9_1 = $5_1 + 8 | 0;
          $11_1 = HEAP32[$9_1 + 4 >> 2];
          $6_1 = $5_1 + 848 | 0;
          HEAP32[$6_1 >> 2] = HEAP32[$9_1 >> 2];
          HEAP32[$6_1 + 4 >> 2] = $11_1;
          $6_1 = HEAP32[$22_1 + 4 >> 2];
          HEAP32[$18_1 >> 2] = HEAP32[$22_1 >> 2];
          HEAP32[$18_1 + 4 >> 2] = $6_1;
          $9_1 = $22_1 + 8 | 0;
          $11_1 = HEAP32[$9_1 + 4 >> 2];
          $6_1 = $18_1 + 8 | 0;
          HEAP32[$6_1 >> 2] = HEAP32[$9_1 >> 2];
          HEAP32[$6_1 + 4 >> 2] = $11_1;
          $6_1 = HEAP32[$14_1 + 4 >> 2];
          HEAP32[$15_1 >> 2] = HEAP32[$14_1 >> 2];
          HEAP32[$15_1 + 4 >> 2] = $6_1;
          $9_1 = $14_1 + 8 | 0;
          $11_1 = HEAP32[$9_1 + 4 >> 2];
          $6_1 = $15_1 + 8 | 0;
          HEAP32[$6_1 >> 2] = HEAP32[$9_1 >> 2];
          HEAP32[$6_1 + 4 >> 2] = $11_1;
          $6_1 = HEAP32[$5_1 + 4 >> 2];
          HEAP32[$5_1 + 840 >> 2] = HEAP32[$5_1 >> 2];
          HEAP32[$5_1 + 844 >> 2] = $6_1;
          $9_1 = HEAP32[$2_1 + 12 >> 2];
          $6_1 = $9_1;
          $11_1 = HEAP32[$6_1 + 4 >> 2];
          HEAP32[$16_1 >> 2] = HEAP32[$6_1 >> 2];
          HEAP32[$16_1 + 4 >> 2] = $11_1;
          $11_1 = HEAP32[$6_1 + 20 >> 2];
          HEAP32[$12_1 >> 2] = HEAP32[$6_1 + 16 >> 2];
          HEAP32[$12_1 + 4 >> 2] = $11_1;
          $11_1 = HEAP32[$6_1 + 36 >> 2];
          HEAP32[$17_1 >> 2] = HEAP32[$6_1 + 32 >> 2];
          HEAP32[$17_1 + 4 >> 2] = $11_1;
          $11_1 = HEAP32[$6_1 + 52 >> 2];
          HEAP32[$21_1 >> 2] = HEAP32[$6_1 + 48 >> 2];
          HEAP32[$21_1 + 4 >> 2] = $11_1;
          $6_1 = $6_1 + 8 | 0;
          $20_1 = HEAP32[$6_1 + 4 >> 2];
          $11_1 = $16_1 + 8 | 0;
          HEAP32[$11_1 >> 2] = HEAP32[$6_1 >> 2];
          HEAP32[$11_1 + 4 >> 2] = $20_1;
          $11_1 = $9_1 + 24 | 0;
          $20_1 = HEAP32[$11_1 + 4 >> 2];
          $6_1 = $12_1 + 8 | 0;
          HEAP32[$6_1 >> 2] = HEAP32[$11_1 >> 2];
          HEAP32[$6_1 + 4 >> 2] = $20_1;
          $11_1 = $9_1 + 40 | 0;
          $20_1 = HEAP32[$11_1 + 4 >> 2];
          $6_1 = $17_1 + 8 | 0;
          HEAP32[$6_1 >> 2] = HEAP32[$11_1 >> 2];
          HEAP32[$6_1 + 4 >> 2] = $20_1;
          $9_1 = $9_1 + 56 | 0;
          $11_1 = HEAP32[$9_1 + 4 >> 2];
          $6_1 = $21_1 + 8 | 0;
          HEAP32[$6_1 >> 2] = HEAP32[$9_1 >> 2];
          HEAP32[$6_1 + 4 >> 2] = $11_1;
          break label$56;
         }
         $9_1 = HEAP32[$1_1 + 12 >> 2];
         $6_1 = $9_1;
         $11_1 = HEAP32[$6_1 + 20 >> 2];
         HEAP32[$18_1 >> 2] = HEAP32[$6_1 + 16 >> 2];
         HEAP32[$18_1 + 4 >> 2] = $11_1;
         $11_1 = HEAP32[$6_1 + 36 >> 2];
         HEAP32[$15_1 >> 2] = HEAP32[$6_1 + 32 >> 2];
         HEAP32[$15_1 + 4 >> 2] = $11_1;
         $11_1 = HEAP32[$6_1 + 52 >> 2];
         HEAP32[$23_1 >> 2] = HEAP32[$6_1 + 48 >> 2];
         HEAP32[$23_1 + 4 >> 2] = $11_1;
         $6_1 = $6_1 + 8 | 0;
         $20_1 = HEAP32[$6_1 + 4 >> 2];
         $11_1 = $5_1 + 848 | 0;
         HEAP32[$11_1 >> 2] = HEAP32[$6_1 >> 2];
         HEAP32[$11_1 + 4 >> 2] = $20_1;
         $11_1 = $9_1 + 24 | 0;
         $20_1 = HEAP32[$11_1 + 4 >> 2];
         $6_1 = $18_1 + 8 | 0;
         HEAP32[$6_1 >> 2] = HEAP32[$11_1 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $20_1;
         $11_1 = $9_1 + 40 | 0;
         $20_1 = HEAP32[$11_1 + 4 >> 2];
         $6_1 = $15_1 + 8 | 0;
         HEAP32[$6_1 >> 2] = HEAP32[$11_1 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $20_1;
         $11_1 = $9_1 + 56 | 0;
         $20_1 = HEAP32[$11_1 + 4 >> 2];
         $6_1 = $23_1 + 8 | 0;
         HEAP32[$6_1 >> 2] = HEAP32[$11_1 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $20_1;
         $6_1 = HEAP32[$9_1 + 4 >> 2];
         HEAP32[$5_1 + 840 >> 2] = HEAP32[$9_1 >> 2];
         HEAP32[$5_1 + 844 >> 2] = $6_1;
         HEAPF32[$5_1 + 248 >> 2] = -HEAPF32[$5_1 + 984 >> 2];
         HEAPF32[$5_1 + 244 >> 2] = -HEAPF32[$5_1 + 980 >> 2];
         HEAPF32[$5_1 + 240 >> 2] = -HEAPF32[$5_1 + 976 >> 2];
         HEAPF32[$5_1 + 252 >> 2] = HEAPF32[$5_1 + 988 >> 2];
         $246($5_1 + 256 | 0, $5_1 + 240 | 0, $5_1 + 992 | 0);
         $246($5_1 + 384 | 0, $5_1 + 256 | 0, $5_1 + 976 | 0);
         $371($5_1 + 272 | 0, $5_1 + 384 | 0);
         $245($5_1, $5_1 + 272 | 0, HEAP32[$2_1 + 12 >> 2]);
         $9_1 = $5_1 + 8 | 0;
         $11_1 = HEAP32[$9_1 + 4 >> 2];
         $6_1 = $16_1 + 8 | 0;
         HEAP32[$6_1 >> 2] = HEAP32[$9_1 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $11_1;
         $6_1 = HEAP32[$5_1 + 4 >> 2];
         HEAP32[$16_1 >> 2] = HEAP32[$5_1 >> 2];
         HEAP32[$16_1 + 4 >> 2] = $6_1;
         $6_1 = HEAP32[$22_1 + 4 >> 2];
         HEAP32[$12_1 >> 2] = HEAP32[$22_1 >> 2];
         HEAP32[$12_1 + 4 >> 2] = $6_1;
         $9_1 = $22_1 + 8 | 0;
         $11_1 = HEAP32[$9_1 + 4 >> 2];
         $6_1 = $12_1 + 8 | 0;
         HEAP32[$6_1 >> 2] = HEAP32[$9_1 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $11_1;
         $6_1 = HEAP32[$14_1 + 4 >> 2];
         HEAP32[$17_1 >> 2] = HEAP32[$14_1 >> 2];
         HEAP32[$17_1 + 4 >> 2] = $6_1;
         $9_1 = $14_1 + 8 | 0;
         $11_1 = HEAP32[$9_1 + 4 >> 2];
         $6_1 = $17_1 + 8 | 0;
         HEAP32[$6_1 >> 2] = HEAP32[$9_1 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $11_1;
        }
        $6_1 = HEAP32[$5_1 + 844 >> 2];
        HEAP32[$53_1 >> 2] = HEAP32[$5_1 + 840 >> 2];
        HEAP32[$53_1 + 4 >> 2] = $6_1;
        $6_1 = HEAP32[$18_1 + 4 >> 2];
        HEAP32[$52_1 >> 2] = HEAP32[$18_1 >> 2];
        HEAP32[$52_1 + 4 >> 2] = $6_1;
        $6_1 = HEAP32[$15_1 + 4 >> 2];
        HEAP32[$51_1 >> 2] = HEAP32[$15_1 >> 2];
        HEAP32[$51_1 + 4 >> 2] = $6_1;
        $6_1 = HEAP32[$23_1 + 4 >> 2];
        HEAP32[$50_1 >> 2] = HEAP32[$23_1 >> 2];
        HEAP32[$50_1 + 4 >> 2] = $6_1;
        $9_1 = $5_1 + 848 | 0;
        $11_1 = HEAP32[$9_1 + 4 >> 2];
        $6_1 = $53_1 + 8 | 0;
        HEAP32[$6_1 >> 2] = HEAP32[$9_1 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $11_1;
        $9_1 = $18_1 + 8 | 0;
        $11_1 = HEAP32[$9_1 + 4 >> 2];
        $6_1 = $52_1 + 8 | 0;
        HEAP32[$6_1 >> 2] = HEAP32[$9_1 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $11_1;
        $9_1 = $15_1 + 8 | 0;
        $11_1 = HEAP32[$9_1 + 4 >> 2];
        $6_1 = $51_1 + 8 | 0;
        HEAP32[$6_1 >> 2] = HEAP32[$9_1 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $11_1;
        $9_1 = $23_1 + 8 | 0;
        $11_1 = HEAP32[$9_1 + 4 >> 2];
        $6_1 = $50_1 + 8 | 0;
        HEAP32[$6_1 >> 2] = HEAP32[$9_1 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $11_1;
        HEAP32[$5_1 + 32 >> 2] = 0;
        HEAP32[$5_1 + 36 >> 2] = $4_1;
        HEAP32[$5_1 >> 2] = 11764;
        $6_1 = HEAP32[$3_1 + 20 >> 2];
        $11_1 = $16_1 + 8 | 0;
        $20_1 = HEAP32[$11_1 + 4 >> 2];
        $9_1 = $49_1 + 8 | 0;
        HEAP32[$9_1 >> 2] = HEAP32[$11_1 >> 2];
        HEAP32[$9_1 + 4 >> 2] = $20_1;
        $9_1 = HEAP32[$16_1 + 4 >> 2];
        HEAP32[$49_1 >> 2] = HEAP32[$16_1 >> 2];
        HEAP32[$49_1 + 4 >> 2] = $9_1;
        $11_1 = $12_1 + 8 | 0;
        $20_1 = HEAP32[$11_1 + 4 >> 2];
        $9_1 = $48_1 + 8 | 0;
        HEAP32[$9_1 >> 2] = HEAP32[$11_1 >> 2];
        HEAP32[$9_1 + 4 >> 2] = $20_1;
        $9_1 = HEAP32[$12_1 + 4 >> 2];
        HEAP32[$48_1 >> 2] = HEAP32[$12_1 >> 2];
        HEAP32[$48_1 + 4 >> 2] = $9_1;
        $11_1 = $17_1 + 8 | 0;
        $20_1 = HEAP32[$11_1 + 4 >> 2];
        $9_1 = $47_1 + 8 | 0;
        HEAP32[$9_1 >> 2] = HEAP32[$11_1 >> 2];
        HEAP32[$9_1 + 4 >> 2] = $20_1;
        $9_1 = HEAP32[$17_1 + 4 >> 2];
        HEAP32[$47_1 >> 2] = HEAP32[$17_1 >> 2];
        HEAP32[$47_1 + 4 >> 2] = $9_1;
        $11_1 = $21_1 + 8 | 0;
        $20_1 = HEAP32[$11_1 + 4 >> 2];
        $9_1 = $46_1 + 8 | 0;
        HEAP32[$9_1 >> 2] = HEAP32[$11_1 >> 2];
        HEAP32[$9_1 + 4 >> 2] = $20_1;
        $9_1 = HEAP32[$21_1 + 4 >> 2];
        HEAP32[$46_1 >> 2] = HEAP32[$21_1 >> 2];
        HEAP32[$46_1 + 4 >> 2] = $9_1;
        $11_1 = $5_1 + 328 | 0;
        $20_1 = HEAP32[$11_1 + 4 >> 2];
        $9_1 = $45_1 + 8 | 0;
        HEAP32[$9_1 >> 2] = HEAP32[$11_1 >> 2];
        HEAP32[$9_1 + 4 >> 2] = $20_1;
        $9_1 = HEAP32[$5_1 + 324 >> 2];
        HEAP32[$45_1 >> 2] = HEAP32[$5_1 + 320 >> 2];
        HEAP32[$45_1 + 4 >> 2] = $9_1;
        $11_1 = $39_1 + 8 | 0;
        $20_1 = HEAP32[$11_1 + 4 >> 2];
        $9_1 = $44_1 + 8 | 0;
        HEAP32[$9_1 >> 2] = HEAP32[$11_1 >> 2];
        HEAP32[$9_1 + 4 >> 2] = $20_1;
        $9_1 = HEAP32[$39_1 + 4 >> 2];
        HEAP32[$44_1 >> 2] = HEAP32[$39_1 >> 2];
        HEAP32[$44_1 + 4 >> 2] = $9_1;
        $11_1 = $38_1 + 8 | 0;
        $20_1 = HEAP32[$11_1 + 4 >> 2];
        $9_1 = $43_1 + 8 | 0;
        HEAP32[$9_1 >> 2] = HEAP32[$11_1 >> 2];
        HEAP32[$9_1 + 4 >> 2] = $20_1;
        $9_1 = HEAP32[$38_1 + 4 >> 2];
        HEAP32[$43_1 >> 2] = HEAP32[$38_1 >> 2];
        HEAP32[$43_1 + 4 >> 2] = $9_1;
        $11_1 = $7_1 + 8 | 0;
        $20_1 = HEAP32[$11_1 + 4 >> 2];
        $9_1 = $42_1 + 8 | 0;
        HEAP32[$9_1 >> 2] = HEAP32[$11_1 >> 2];
        HEAP32[$9_1 + 4 >> 2] = $20_1;
        $9_1 = HEAP32[$7_1 + 4 >> 2];
        HEAP32[$42_1 >> 2] = HEAP32[$7_1 >> 2];
        HEAP32[$42_1 + 4 >> 2] = $9_1;
        HEAP32[$5_1 + 236 >> 2] = $6_1;
        HEAP8[$5_1 + 232 | 0] = $37_1;
        $345($5_1 + 400 | 0, $5_1 + 840 | 0, $5_1, $6_1, 0);
       }
       $54_1 = $54_1 + 1 | 0;
       continue;
      };
     }
     if (!HEAPU8[$0_1 + 52 | 0]) {
      break label$2
     }
     break label$3;
    }
    if (!HEAPU8[$0_1 + 52 | 0]) {
     break label$2
    }
   }
   $370($4_1);
  }
  global$0 = $5_1 + 1056 | 0;
 }
 
 function $369($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  var $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0);
  $15_1 = global$0 - 32 | 0;
  global$0 = $15_1;
  HEAP32[$15_1 + 28 >> 2] = 0;
  $6_1 = ($6_1 << 2) + $8_1 | 0;
  $16_1 = HEAPF32[$6_1 >> 2];
  HEAPF32[$15_1 + 16 >> 2] = $16_1;
  $17_1 = HEAPF32[$6_1 + 16 >> 2];
  HEAPF32[$15_1 + 20 >> 2] = $17_1;
  $20_1 = HEAPF32[$6_1 + 32 >> 2];
  HEAPF32[$15_1 + 24 >> 2] = $20_1;
  $6_1 = ($7_1 << 2) + $9_1 | 0;
  $18_1 = HEAPF32[$6_1 >> 2];
  $21_1 = Math_fround(HEAPF32[$9_1 + 48 >> 2] - HEAPF32[$8_1 + 48 >> 2]);
  $22_1 = HEAPF32[$6_1 + 16 >> 2];
  $23_1 = Math_fround(HEAPF32[$9_1 + 52 >> 2] - HEAPF32[$8_1 + 52 >> 2]);
  $24_1 = HEAPF32[$6_1 + 32 >> 2];
  $25 = Math_fround(HEAPF32[$9_1 + 56 >> 2] - HEAPF32[$8_1 + 56 >> 2]);
  $13_1 = Math_fround(Math_fround(Math_fround($18_1 * $21_1) + Math_fround($22_1 * $23_1)) + Math_fround($24_1 * $25));
  $19_1 = Math_fround(Math_fround(Math_fround($16_1 * $21_1) + Math_fround($17_1 * $23_1)) + Math_fround($20_1 * $25));
  $14_1 = Math_fround(Math_fround(Math_fround($16_1 * $18_1) + Math_fround($17_1 * $22_1)) + Math_fround($20_1 * $24_1));
  $11_1 = Math_fround(Math_fround(1.0) - Math_fround($14_1 * $14_1));
  label$1 : {
   if ($11_1 == Math_fround(0.0)) {
    break label$1
   }
   $12_1 = Math_fround(-$2_1);
   $11_1 = Math_fround(Math_fround($19_1 - Math_fround($14_1 * $13_1)) / $11_1);
   if ($12_1 > $11_1) {
    break label$1
   }
   $12_1 = $11_1;
   if (!($11_1 > $2_1)) {
    break label$1
   }
   $12_1 = $2_1;
  }
  $11_1 = Math_fround(Math_fround($14_1 * $12_1) - $13_1);
  $13_1 = Math_fround(-$4_1);
  label$2 : {
   label$3 : {
    if ($11_1 < $13_1) {
     $12_1 = Math_fround(-$2_1);
     $4_1 = Math_fround($19_1 - Math_fround($14_1 * $4_1));
     if ($12_1 > $4_1) {
      $11_1 = $13_1;
      break label$2;
     }
     if (!($2_1 < $4_1)) {
      $11_1 = $13_1;
      $12_1 = $4_1;
      break label$2;
     }
     $4_1 = $13_1;
     break label$3;
    }
    if (!($4_1 < $11_1)) {
     break label$2
    }
    $12_1 = Math_fround(-$2_1);
    $13_1 = Math_fround(Math_fround($14_1 * $4_1) + $19_1);
    if ($12_1 > $13_1) {
     $11_1 = $4_1;
     break label$2;
    }
    if (!($2_1 < $13_1)) {
     $11_1 = $4_1;
     $12_1 = $13_1;
     break label$2;
    }
   }
   $11_1 = $4_1;
   $12_1 = $2_1;
  }
  $19_1 = $10_1;
  $13_1 = Math_fround($18_1 * $11_1);
  $4_1 = Math_fround($13_1 + Math_fround($21_1 - Math_fround($16_1 * $12_1)));
  $2_1 = $4_1;
  $18_1 = Math_fround($2_1 * $2_1);
  $14_1 = Math_fround($22_1 * $11_1);
  $2_1 = Math_fround($14_1 + Math_fround($23_1 - Math_fround($17_1 * $12_1)));
  $16_1 = Math_fround($24_1 * $11_1);
  $10_1 = Math_fround($16_1 + Math_fround($25 - Math_fround($20_1 * $12_1)));
  $11_1 = $10_1;
  $17_1 = Math_fround(Math_fround(Math_fround(Math_sqrt(Math_fround(Math_fround($18_1 + Math_fround($2_1 * $2_1)) + Math_fround($11_1 * $11_1)))) - $3_1) - $5_1);
  if (!($19_1 < $17_1)) {
   $3_1 = Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($2_1 * $2_1)) + Math_fround($10_1 * $10_1));
   label$10 : {
    if ($3_1 <= Math_fround(1.4210854715202004e-14)) {
     $137($15_1 + 16 | 0, $0_1, $15_1);
     $11_1 = HEAPF32[$0_1 + 8 >> 2];
     $3_1 = HEAPF32[$0_1 + 4 >> 2];
     $2_1 = HEAPF32[$0_1 >> 2];
     break label$10;
    }
    HEAP32[$0_1 + 12 >> 2] = 0;
    $12_1 = Math_fround(Math_fround(-1.0) / Math_fround(Math_sqrt($3_1)));
    $11_1 = Math_fround($12_1 * $10_1);
    HEAPF32[$0_1 + 8 >> 2] = $11_1;
    $3_1 = Math_fround($12_1 * $2_1);
    HEAPF32[$0_1 + 4 >> 2] = $3_1;
    $2_1 = Math_fround($12_1 * $4_1);
    HEAPF32[$0_1 >> 2] = $2_1;
   }
   $4_1 = HEAPF32[$9_1 + 48 >> 2];
   $10_1 = HEAPF32[$9_1 + 52 >> 2];
   $12_1 = HEAPF32[$9_1 + 56 >> 2];
   HEAP32[$1_1 + 12 >> 2] = 0;
   HEAPF32[$1_1 + 8 >> 2] = Math_fround($16_1 + $12_1) + Math_fround($11_1 * $5_1);
   HEAPF32[$1_1 + 4 >> 2] = Math_fround($14_1 + $10_1) + Math_fround($3_1 * $5_1);
   HEAPF32[$1_1 >> 2] = Math_fround($13_1 + $4_1) + Math_fround($2_1 * $5_1);
  }
  global$0 = $15_1 + 32 | 0;
  return $17_1;
 }
 
 function $370($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = Math_fround(0), $13_1 = 0, $14_1 = 0, $15_1 = Math_fround(0);
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  label$1 : {
   $4_1 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = HEAP32[$4_1 + 844 >> 2];
   if (!$2_1) {
    break label$1
   }
   $1_1 = (Math_imul($2_1, 208) + $4_1 | 0) - 204 | 0;
   $11_1 = HEAP32[HEAP32[$0_1 + 8 >> 2] + 8 >> 2];
   $6_1 = HEAP32[$4_1 + 836 >> 2];
   $7_1 = ($11_1 | 0) == ($6_1 | 0);
   $0_1 = HEAP32[HEAP32[$0_1 + 12 >> 2] + 8 >> 2];
   $11_1 = ($7_1 ? $0_1 : $11_1) + 4 | 0;
   $7_1 = ($7_1 ? $6_1 : $0_1) + 4 | 0;
   while (1) {
    if (($2_1 | 0) >= 1) {
     $2_1 = $2_1 - 1 | 0;
     $78($5_1, $7_1, HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2]);
     $0_1 = $5_1 + 8 | 0;
     $3_1 = HEAP32[$0_1 + 4 >> 2];
     $6_1 = $1_1 + 56 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$0_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $3_1;
     $3_1 = HEAP32[$5_1 + 4 >> 2];
     $13_1 = $1_1 + 48 | 0;
     $9_1 = $13_1;
     HEAP32[$9_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$9_1 + 4 >> 2] = $3_1;
     $78($5_1, $11_1, HEAPF32[$1_1 + 16 >> 2], HEAPF32[$1_1 + 20 >> 2], HEAPF32[$1_1 + 24 >> 2]);
     $14_1 = HEAP32[$0_1 + 4 >> 2];
     $9_1 = $1_1 + 40 | 0;
     $3_1 = $9_1;
     HEAP32[$3_1 >> 2] = HEAP32[$0_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $14_1;
     $3_1 = HEAP32[$5_1 + 4 >> 2];
     $0_1 = $1_1 + 32 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $3_1;
     $3_1 = $1_1 + 164 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] + 1;
     HEAPF32[$1_1 + 80 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$13_1 >> 2] - HEAPF32[$0_1 >> 2]) * HEAPF32[$1_1 - -64 >> 2]) + Math_fround(Math_fround(HEAPF32[$1_1 + 52 >> 2] - HEAPF32[$1_1 + 36 >> 2]) * HEAPF32[$1_1 + 68 >> 2])) + Math_fround(Math_fround(HEAPF32[$6_1 >> 2] - HEAPF32[$9_1 >> 2]) * HEAPF32[$1_1 + 72 >> 2]);
     $1_1 = $1_1 - 208 | 0;
     continue;
    }
    break;
   };
   $2_1 = HEAP32[$4_1 + 844 >> 2];
   $0_1 = Math_imul($2_1, 208) - 172 | 0;
   while (1) {
    if (($2_1 | 0) < 1) {
     break label$1
    }
    $2_1 = $2_1 - 1 | 0;
    $12_1 = HEAPF32[$4_1 + 848 >> 2];
    $1_1 = $0_1 + $4_1 | 0;
    $8_1 = HEAPF32[$1_1 + 48 >> 2];
    label$5 : {
     if ($12_1 >= $8_1) {
      $10_1 = Math_fround(HEAPF32[$1_1 >> 2] - Math_fround(HEAPF32[$1_1 + 16 >> 2] - Math_fround(HEAPF32[$1_1 + 32 >> 2] * $8_1)));
      $15_1 = Math_fround($10_1 * $10_1);
      $10_1 = Math_fround(HEAPF32[$1_1 + 4 >> 2] - Math_fround(HEAPF32[$1_1 + 20 >> 2] - Math_fround($8_1 * HEAPF32[$1_1 + 36 >> 2])));
      $8_1 = Math_fround(HEAPF32[$1_1 + 8 >> 2] - Math_fround(HEAPF32[$1_1 + 24 >> 2] - Math_fround($8_1 * HEAPF32[$1_1 + 40 >> 2])));
      if (!(Math_fround(Math_fround($15_1 + Math_fround($10_1 * $10_1)) + Math_fround($8_1 * $8_1)) > Math_fround($12_1 * $12_1))) {
       break label$5
      }
     }
     $1_1 = HEAP32[$4_1 + 844 >> 2] - 1 | 0;
     if (($1_1 | 0) != ($2_1 | 0)) {
      $7_1 = $4_1 + 4 | 0;
      $1_1 = $7_1 + Math_imul($1_1, 208) | 0;
      $2($7_1 + Math_imul($2_1, 208) | 0, $1_1, 208);
      HEAP32[$1_1 + 164 >> 2] = 0;
      HEAP32[$1_1 + 116 >> 2] = 0;
      HEAP32[$1_1 + 128 >> 2] = 0;
      HEAP32[$1_1 + 132 >> 2] = 0;
      $1_1 = $1_1 + 136 | 0;
      HEAP32[$1_1 >> 2] = 0;
      HEAP32[$1_1 + 4 >> 2] = 0;
      $1_1 = HEAP32[$4_1 + 844 >> 2] - 1 | 0;
     }
     HEAP32[$4_1 + 844 >> 2] = $1_1;
    }
    $0_1 = $0_1 - 208 | 0;
    continue;
   };
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $371($0_1, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0);
  $4_1 = $248($1_1);
  $5_1 = HEAPF32[$1_1 + 4 >> 2];
  $9_1 = HEAPF32[$1_1 + 8 >> 2];
  $6_1 = HEAPF32[$1_1 + 12 >> 2];
  $2_1 = HEAPF32[$1_1 >> 2];
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAP32[$0_1 + 28 >> 2] = 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  $3_1 = Math_fround(Math_fround(2.0) / $4_1);
  $4_1 = Math_fround($9_1 * $3_1);
  $7_1 = Math_fround($5_1 * $4_1);
  $10_1 = Math_fround($2_1 * $3_1);
  $11_1 = Math_fround($6_1 * $10_1);
  HEAPF32[$0_1 + 36 >> 2] = $7_1 + $11_1;
  $12_1 = Math_fround($2_1 * $4_1);
  $3_1 = Math_fround($3_1 * $5_1);
  $8_1 = Math_fround($6_1 * $3_1);
  HEAPF32[$0_1 + 32 >> 2] = $12_1 - $8_1;
  HEAPF32[$0_1 + 24 >> 2] = $7_1 - $11_1;
  $7_1 = Math_fround($2_1 * $3_1);
  $6_1 = Math_fround($6_1 * $4_1);
  HEAPF32[$0_1 + 16 >> 2] = $7_1 + $6_1;
  HEAPF32[$0_1 + 8 >> 2] = $12_1 + $8_1;
  HEAPF32[$0_1 + 4 >> 2] = $7_1 - $6_1;
  $2_1 = Math_fround($2_1 * $10_1);
  $5_1 = Math_fround($5_1 * $3_1);
  HEAPF32[$0_1 + 40 >> 2] = Math_fround(1.0) - Math_fround($2_1 + $5_1);
  $8_1 = $2_1;
  $2_1 = Math_fround($9_1 * $4_1);
  HEAPF32[$0_1 + 20 >> 2] = Math_fround(1.0) - Math_fround($8_1 + $2_1);
  HEAPF32[$0_1 >> 2] = Math_fround(1.0) - Math_fround($5_1 + $2_1);
 }
 
 function $372($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $0_1 = global$0 - 608 | 0;
  global$0 = $0_1;
  $6_1 = Math_fround(HEAPF32[$1_1 + 116 >> 2] - HEAPF32[$1_1 + 52 >> 2]);
  $5_1 = Math_fround($6_1 * $6_1);
  $6_1 = Math_fround(HEAPF32[$1_1 + 120 >> 2] - HEAPF32[$1_1 + 56 >> 2]);
  $5_1 = Math_fround($5_1 + Math_fround($6_1 * $6_1));
  $6_1 = Math_fround(HEAPF32[$1_1 + 124 >> 2] - HEAPF32[$1_1 + 60 >> 2]);
  $5_1 = Math_fround($5_1 + Math_fround($6_1 * $6_1));
  $6_1 = HEAPF32[$1_1 + 276 >> 2];
  label$1 : {
   if ($5_1 < Math_fround($6_1 * $6_1)) {
    $6_1 = Math_fround(1.0);
    $5_1 = Math_fround(HEAPF32[$2_1 + 116 >> 2] - HEAPF32[$2_1 + 52 >> 2]);
    $7_1 = Math_fround($5_1 * $5_1);
    $5_1 = Math_fround(HEAPF32[$2_1 + 120 >> 2] - HEAPF32[$2_1 + 56 >> 2]);
    $7_1 = Math_fround($7_1 + Math_fround($5_1 * $5_1));
    $5_1 = Math_fround(HEAPF32[$2_1 + 124 >> 2] - HEAPF32[$2_1 + 60 >> 2]);
    $7_1 = Math_fround($7_1 + Math_fround($5_1 * $5_1));
    $5_1 = HEAPF32[$2_1 + 276 >> 2];
    if ($7_1 < Math_fround($5_1 * $5_1)) {
     break label$1
    }
   }
   $4_1 = HEAP32[$1_1 + 192 >> 2];
   $3_1 = $373($0_1 + 552 | 0, HEAPF32[$2_1 + 272 >> 2]);
   HEAP32[$0_1 + 548 >> 2] = 0;
   HEAP32[$0_1 + 540 >> 2] = 1566444395;
   HEAP32[$0_1 + 544 >> 2] = 0;
   HEAP32[$0_1 + 376 >> 2] = 11640;
   $8_1 = $0_1 + 348 | 0;
   HEAP8[$8_1 | 0] = 0;
   HEAP32[$0_1 + 324 >> 2] = 953267991;
   HEAP32[$0_1 + 12 >> 2] = $3_1;
   HEAP32[$0_1 + 8 >> 2] = $4_1;
   HEAP32[$0_1 >> 2] = 11260;
   HEAP32[$0_1 + 4 >> 2] = $0_1 + 16;
   $9_1 = $1_1 + 4 | 0;
   $10_1 = $1_1 + 68 | 0;
   $11_1 = $2_1 + 4 | 0;
   $12_1 = $2_1 + 68 | 0;
   $6_1 = Math_fround(1.0);
   label$3 : {
    if (!$352($0_1, $9_1, $10_1, $11_1, $12_1, $0_1 + 376 | 0)) {
     break label$3
    }
    $5_1 = HEAPF32[$0_1 + 540 >> 2];
    if ($5_1 < HEAPF32[$1_1 + 268 >> 2]) {
     HEAPF32[$1_1 + 268 >> 2] = $5_1
    }
    if ($5_1 < HEAPF32[$2_1 + 268 >> 2]) {
     HEAPF32[$2_1 + 268 >> 2] = $5_1
    }
    $6_1 = Math_fround(1.0);
    if (!($5_1 < Math_fround(1.0))) {
     break label$3
    }
    $6_1 = $5_1;
   }
   $4_1 = HEAP32[$2_1 + 192 >> 2];
   $3_1 = $373($0_1 + 552 | 0, HEAPF32[$1_1 + 272 >> 2]);
   HEAP32[$0_1 + 548 >> 2] = 0;
   HEAP32[$0_1 + 540 >> 2] = 1566444395;
   HEAP32[$0_1 + 544 >> 2] = 0;
   HEAP32[$0_1 + 376 >> 2] = 11640;
   HEAP8[$8_1 | 0] = 0;
   HEAP32[$0_1 + 324 >> 2] = 953267991;
   HEAP32[$0_1 + 12 >> 2] = $4_1;
   HEAP32[$0_1 + 8 >> 2] = $3_1;
   HEAP32[$0_1 >> 2] = 11260;
   HEAP32[$0_1 + 4 >> 2] = $0_1 + 16;
   if (!$352($0_1, $9_1, $10_1, $11_1, $12_1, $0_1 + 376 | 0)) {
    break label$1
   }
   $5_1 = HEAPF32[$0_1 + 540 >> 2];
   if ($5_1 < HEAPF32[$1_1 + 268 >> 2]) {
    HEAPF32[$1_1 + 268 >> 2] = $5_1
   }
   if ($5_1 < HEAPF32[$2_1 + 268 >> 2]) {
    HEAPF32[$2_1 + 268 >> 2] = $5_1
   }
   if (!($5_1 < $6_1)) {
    break label$1
   }
   $6_1 = $5_1;
  }
  global$0 = $0_1 + 608 | 0;
  return Math_fround($6_1);
 }
 
 function $373($0_1, $1_1) {
  var $2_1 = 0;
  $85($0_1);
  $2_1 = $0_1 + 28 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 24 >> 2] = 1065353216;
  HEAP32[$0_1 + 16 >> 2] = 1065353216;
  HEAP32[$0_1 + 20 >> 2] = 1065353216;
  HEAP32[$0_1 + 4 >> 2] = 8;
  HEAP32[$0_1 >> 2] = 11440;
  $2_1 = $0_1 + 36 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAP32[$0_1 + 52 >> 2] = 0;
  HEAPF32[$0_1 + 48 >> 2] = $1_1;
  HEAPF32[$0_1 + 32 >> 2] = $1_1;
  return $0_1;
 }
 
 function $374($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!HEAP32[$0_1 + 56 >> 2]) {
    break label$1
   }
   if (!HEAPU8[$0_1 + 52 | 0]) {
    break label$1
   }
   $375($1_1, $0_1 + 56 | 0);
  }
 }
 
 function $375($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  if (($2_1 | 0) == HEAP32[$0_1 + 8 >> 2]) {
   $110($0_1, $2_1 ? $2_1 << 1 : 1);
   $2_1 = HEAP32[$0_1 + 4 >> 2];
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1 + 1;
  HEAP32[HEAP32[$0_1 + 12 >> 2] + ($2_1 << 2) >> 2] = HEAP32[$1_1 >> 2];
 }
 
 function $376($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 + 24 >> 2] = $2_1;
  HEAP32[$0_1 + 16 >> 2] = $1_1;
 }
 
 function $377($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 + 28 >> 2] = $2_1;
  HEAP32[$0_1 + 20 >> 2] = $1_1;
 }
 
 function $378($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0);
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $5_1 = $2_1 + 8 | 0;
  $6_1 = Math_fround(Math_fround(HEAPF32[$1_1 + 8 >> 2] * $3_1) + HEAPF32[$5_1 >> 2]);
  $7_1 = $2_1 + 4 | 0;
  $8_1 = Math_fround(Math_fround(HEAPF32[$1_1 + 4 >> 2] * $3_1) + HEAPF32[$7_1 >> 2]);
  $3_1 = Math_fround(Math_fround(HEAPF32[$1_1 >> 2] * $3_1) + HEAPF32[$2_1 >> 2]);
  label$1 : {
   if (HEAPU8[$0_1 + 232 | 0]) {
    $379($4_1, $0_1 + 40 | 0);
    $380($4_1 - -64 | 0, $0_1 + 168 | 0, $4_1);
    $78($4_1 + 128 | 0, $4_1 - -64 | 0, $3_1, $8_1, $6_1);
    HEAP32[$4_1 + 156 >> 2] = 0;
    $6_1 = HEAPF32[$4_1 + 128 >> 2];
    $8_1 = HEAPF32[$1_1 >> 2];
    $9_1 = HEAPF32[$4_1 + 132 >> 2];
    $10_1 = HEAPF32[$1_1 + 4 >> 2];
    $11_1 = HEAPF32[$1_1 + 8 >> 2];
    $12_1 = HEAPF32[$4_1 + 136 >> 2];
    $3_1 = Math_fround(Math_fround(Math_fround(Math_fround($6_1 - HEAPF32[$2_1 >> 2]) * $8_1) + Math_fround(Math_fround($9_1 - HEAPF32[$7_1 >> 2]) * $10_1)) + Math_fround($11_1 * Math_fround($12_1 - HEAPF32[$5_1 >> 2])));
    HEAPF32[$4_1 + 152 >> 2] = $12_1 + Math_fround($11_1 * $3_1);
    HEAPF32[$4_1 + 148 >> 2] = $9_1 + Math_fround($10_1 * $3_1);
    HEAPF32[$4_1 + 144 >> 2] = $6_1 + Math_fround($8_1 * $3_1);
    break label$1;
   }
   $379($4_1, $0_1 + 104 | 0);
   $380($4_1 - -64 | 0, $0_1 + 168 | 0, $4_1);
   $78($4_1 + 128 | 0, $4_1 - -64 | 0, HEAPF32[$2_1 >> 2], HEAPF32[$7_1 >> 2], HEAPF32[$5_1 >> 2]);
   $5_1 = $4_1 + 136 | 0;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   $2_1 = $4_1 + 152 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $7_1;
   $5_1 = HEAP32[$4_1 + 132 >> 2];
   HEAP32[$4_1 + 144 >> 2] = HEAP32[$4_1 + 128 >> 2];
   HEAP32[$4_1 + 148 >> 2] = $5_1;
   $3_1 = Math_fround(Math_fround(Math_fround(Math_fround($3_1 - HEAPF32[$4_1 + 144 >> 2]) * HEAPF32[$1_1 >> 2]) + Math_fround(Math_fround($8_1 - HEAPF32[$4_1 + 148 >> 2]) * HEAPF32[$1_1 + 4 >> 2])) + Math_fround(Math_fround($6_1 - HEAPF32[$2_1 >> 2]) * HEAPF32[$1_1 + 8 >> 2]));
  }
  $0_1 = HEAP32[$0_1 + 36 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 16 >> 2]]($0_1, $1_1, $4_1 + 144 | 0, $3_1);
  global$0 = $4_1 + 160 | 0;
 }
 
 function $379($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 + -64 | 0;
  global$0 = $2_1;
  $244($2_1 + 16 | 0, $1_1);
  $351($2_1, $2_1 + 16 | 0, Math_fround(-HEAPF32[$1_1 + 48 >> 2]), Math_fround(-HEAPF32[$1_1 + 52 >> 2]), Math_fround(-HEAPF32[$1_1 + 56 >> 2]));
  $3_1 = $2_1 + 24 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $0_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$2_1 + 20 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$2_1 + 16 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$2_1 + 36 >> 2];
  HEAP32[$0_1 + 16 >> 2] = HEAP32[$2_1 + 32 >> 2];
  HEAP32[$0_1 + 20 >> 2] = $1_1;
  $3_1 = $2_1 + 40 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $0_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$2_1 + 52 >> 2];
  HEAP32[$0_1 + 32 >> 2] = HEAP32[$2_1 + 48 >> 2];
  HEAP32[$0_1 + 36 >> 2] = $1_1;
  $3_1 = $2_1 + 56 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $0_1 + 40 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0_1 + 48 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 52 >> 2] = $1_1;
  $1_1 = $2_1 + 8 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 56 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  global$0 = $2_1 - -64 | 0;
 }
 
 function $380($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 + -64 | 0;
  global$0 = $3_1;
  $245($3_1 + 16 | 0, $1_1, $2_1);
  $78($3_1, $1_1, HEAPF32[$2_1 + 48 >> 2], HEAPF32[$2_1 + 52 >> 2], HEAPF32[$2_1 + 56 >> 2]);
  $2_1 = $3_1 + 24 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$3_1 + 36 >> 2];
  HEAP32[$0_1 + 16 >> 2] = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$0_1 + 20 >> 2] = $1_1;
  $2_1 = $3_1 + 40 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$3_1 + 52 >> 2];
  HEAP32[$0_1 + 32 >> 2] = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$0_1 + 36 >> 2] = $1_1;
  $2_1 = $3_1 + 56 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 40 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$0_1 + 48 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0_1 + 52 >> 2] = $1_1;
  $1_1 = $3_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 56 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  global$0 = $3_1 - -64 | 0;
 }
 
 function $381($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF32[$0_1 + 32 >> 2] = $3_1;
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 12 >> 2] = $5_1;
  $5_1 = $1_1 + 8 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $7_1 = $0_1 + 16 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $8_1;
  $9_1 = HEAPF32[$5_1 >> 2];
  $10_1 = HEAPF32[$2_1 >> 2];
  $11_1 = HEAPF32[$1_1 >> 2];
  $12_1 = HEAPF32[$2_1 + 4 >> 2];
  $13_1 = HEAPF32[$1_1 + 4 >> 2];
  $14_1 = HEAPF32[$2_1 + 8 >> 2];
  $6_1 = HEAPF32[$0_1 + 28 >> 2];
  $3_1 = Math_fround(Math_fround($6_1 + HEAPF32[$0_1 + 24 >> 2]) + $3_1);
  HEAPF32[$0_1 + 32 >> 2] = $3_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAPF32[$4_1 + 8 >> 2] = $14_1 - Math_fround($6_1 * $9_1);
  HEAPF32[$4_1 + 4 >> 2] = $12_1 - Math_fround($6_1 * $13_1);
  HEAPF32[$4_1 >> 2] = $10_1 - Math_fround($11_1 * $6_1);
  if ($3_1 < Math_fround(0.0)) {
   HEAP8[$0_1 + 36 | 0] = 1
  }
  $0_1 = HEAP32[$0_1 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 16 >> 2]]($0_1, $1_1, $4_1, $3_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $382($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
 }
 
 function $383($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = 0, $23_1 = 0, $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0);
  $6_1 = global$0 - 208 | 0;
  global$0 = $6_1;
  $339(HEAP32[$0_1 + 4 >> 2]);
  $19_1 = HEAPF32[$1_1 + 52 >> 2];
  $20_1 = HEAPF32[$2_1 + 52 >> 2];
  $21_1 = HEAPF32[$3_1 + 52 >> 2];
  $13_1 = HEAPF32[$4_1 + 52 >> 2];
  $22_1 = $1_1 + 56 | 0;
  $10_1 = HEAPF32[$22_1 >> 2];
  $11_1 = HEAPF32[$2_1 + 56 >> 2];
  $23_1 = $3_1 + 56 | 0;
  $12_1 = HEAPF32[$23_1 >> 2];
  $16_1 = HEAPF32[$4_1 + 56 >> 2];
  $17_1 = HEAPF32[$1_1 + 48 >> 2];
  $18_1 = HEAPF32[$2_1 + 48 >> 2];
  $14_1 = HEAPF32[$3_1 + 48 >> 2];
  $15_1 = HEAPF32[$4_1 + 48 >> 2];
  $8_1 = $1_1 + 8 | 0;
  $7_1 = HEAP32[$8_1 + 4 >> 2];
  $9_1 = $6_1 + 152 | 0;
  HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$9_1 + 4 >> 2] = $7_1;
  $8_1 = $1_1 + 24 | 0;
  $7_1 = HEAP32[$8_1 + 4 >> 2];
  $9_1 = $6_1 + 168 | 0;
  HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$9_1 + 4 >> 2] = $7_1;
  $8_1 = $1_1 + 40 | 0;
  $7_1 = HEAP32[$8_1 + 4 >> 2];
  $9_1 = $6_1 + 184 | 0;
  HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$9_1 + 4 >> 2] = $7_1;
  $7_1 = HEAP32[$22_1 + 4 >> 2];
  $8_1 = $6_1 + 200 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$22_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $7_1;
  $7_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$6_1 + 144 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$6_1 + 148 >> 2] = $7_1;
  $7_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$6_1 + 160 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$6_1 + 164 >> 2] = $7_1;
  $7_1 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$6_1 + 176 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$6_1 + 180 >> 2] = $7_1;
  $7_1 = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$6_1 + 192 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$6_1 + 196 >> 2] = $7_1;
  $8_1 = $3_1 + 8 | 0;
  $7_1 = HEAP32[$8_1 + 4 >> 2];
  $9_1 = $6_1 + 88 | 0;
  HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$9_1 + 4 >> 2] = $7_1;
  $8_1 = $3_1 + 24 | 0;
  $7_1 = HEAP32[$8_1 + 4 >> 2];
  $9_1 = $6_1 + 104 | 0;
  HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$9_1 + 4 >> 2] = $7_1;
  $8_1 = $3_1 + 40 | 0;
  $7_1 = HEAP32[$8_1 + 4 >> 2];
  $9_1 = $6_1 + 120 | 0;
  HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$9_1 + 4 >> 2] = $7_1;
  $7_1 = HEAP32[$23_1 + 4 >> 2];
  $8_1 = $6_1 + 136 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$23_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $7_1;
  $7_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$6_1 + 80 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$6_1 + 84 >> 2] = $7_1;
  $7_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$6_1 + 96 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$6_1 + 100 >> 2] = $7_1;
  $7_1 = HEAP32[$3_1 + 36 >> 2];
  HEAP32[$6_1 + 112 >> 2] = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$6_1 + 116 >> 2] = $7_1;
  $7_1 = HEAP32[$3_1 + 52 >> 2];
  HEAP32[$6_1 + 128 >> 2] = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$6_1 + 132 >> 2] = $7_1;
  $7_1 = HEAP32[$0_1 + 8 >> 2];
  $25 = Math_fround(Math_fround($18_1 - $17_1) - Math_fround($15_1 - $14_1));
  $26_1 = Math_fround(Math_fround($20_1 - $19_1) - Math_fround($13_1 - $21_1));
  $27_1 = Math_fround(Math_fround($11_1 - $10_1) - Math_fround($16_1 - $12_1));
  $77($6_1 + 32 | 0, Math_fround(-$25), Math_fround(-$26_1), Math_fround(-$27_1), $1_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 64 >> 2]]($6_1 + 48 | 0, $7_1, $6_1 + 32 | 0);
  $78($6_1 - -64 | 0, $1_1, HEAPF32[$6_1 + 48 >> 2], HEAPF32[$6_1 + 52 >> 2], HEAPF32[$6_1 + 56 >> 2]);
  $7_1 = HEAP32[$0_1 + 12 >> 2];
  $77($6_1 + 16 | 0, $25, $26_1, $27_1, $3_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 64 >> 2]]($6_1 + 32 | 0, $7_1, $6_1 + 16 | 0);
  $78($6_1 + 48 | 0, $3_1, HEAPF32[$6_1 + 32 >> 2], HEAPF32[$6_1 + 36 >> 2], HEAPF32[$6_1 + 40 >> 2]);
  $22_1 = $3_1 + 48 | 0;
  $23_1 = $4_1 + 48 | 0;
  $9_1 = $1_1 + 48 | 0;
  $8_1 = $2_1 + 48 | 0;
  $12_1 = Math_fround(HEAPF32[$6_1 + 64 >> 2] - HEAPF32[$6_1 + 48 >> 2]);
  $10_1 = Math_fround(HEAPF32[$6_1 + 68 >> 2] - HEAPF32[$6_1 + 52 >> 2]);
  $11_1 = Math_fround(HEAPF32[$6_1 + 72 >> 2] - HEAPF32[$6_1 + 56 >> 2]);
  $13_1 = Math_fround(Math_fround(Math_fround($12_1 * $12_1) + Math_fround($10_1 * $10_1)) + Math_fround($11_1 * $11_1));
  $7_1 = $6_1 + 128 | 0;
  $4_1 = $6_1 + 192 | 0;
  $1_1 = -32;
  $14_1 = Math_fround(0.0);
  $16_1 = Math_fround(0.0);
  $17_1 = Math_fround(0.0);
  $18_1 = Math_fround(0.0);
  $15_1 = Math_fround(0.0);
  label$1 : {
   while (1) {
    label$3 : {
     if (!($13_1 > Math_fround(9.999999747378752e-05))) {
      break label$3
     }
     if (!$1_1) {
      break label$3
     }
     $2_1 = HEAP32[$0_1 + 8 >> 2];
     $77($6_1, Math_fround(-$12_1), Math_fround(-$10_1), Math_fround(-$11_1), $6_1 + 144 | 0);
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 64 >> 2]]($6_1 + 32 | 0, $2_1, $6_1);
     $78($6_1 - -64 | 0, $6_1 + 144 | 0, HEAPF32[$6_1 + 32 >> 2], HEAPF32[$6_1 + 36 >> 2], HEAPF32[$6_1 + 40 >> 2]);
     $2_1 = HEAP32[$0_1 + 12 >> 2];
     $77($6_1, $12_1, $10_1, $11_1, $6_1 + 80 | 0);
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 64 >> 2]]($6_1 + 32 | 0, $2_1, $6_1);
     $78($6_1 + 48 | 0, $6_1 + 80 | 0, HEAPF32[$6_1 + 32 >> 2], HEAPF32[$6_1 + 36 >> 2], HEAPF32[$6_1 + 40 >> 2]);
     $3_1 = 0;
     HEAP32[$6_1 + 28 >> 2] = 0;
     $19_1 = Math_fround(HEAPF32[$6_1 + 72 >> 2] - HEAPF32[$6_1 + 56 >> 2]);
     HEAPF32[$6_1 + 24 >> 2] = $19_1;
     $20_1 = Math_fround(HEAPF32[$6_1 + 68 >> 2] - HEAPF32[$6_1 + 52 >> 2]);
     HEAPF32[$6_1 + 20 >> 2] = $20_1;
     $21_1 = Math_fround(HEAPF32[$6_1 + 64 >> 2] - HEAPF32[$6_1 + 48 >> 2]);
     HEAPF32[$6_1 + 16 >> 2] = $21_1;
     if ($24_1 > Math_fround(1.0)) {
      break label$1
     }
     $13_1 = Math_fround(Math_fround(Math_fround($21_1 * $12_1) + Math_fround($20_1 * $10_1)) + Math_fround($19_1 * $11_1));
     if ($13_1 > Math_fround(0.0)) {
      $14_1 = Math_fround(Math_fround(Math_fround($12_1 * $25) + Math_fround($10_1 * $26_1)) + Math_fround($11_1 * $27_1));
      if ($14_1 >= Math_fround(-1.4210854715202004e-14)) {
       break label$1
      }
      $24_1 = Math_fround($24_1 - Math_fround($13_1 / $14_1));
      $353($4_1, $9_1, $8_1, $24_1);
      $353($7_1, $22_1, $23_1, $24_1);
      HEAP32[$6_1 + 28 >> 2] = 0;
      HEAPF32[$6_1 + 24 >> 2] = $19_1;
      HEAPF32[$6_1 + 20 >> 2] = $20_1;
      HEAPF32[$6_1 + 16 >> 2] = $21_1;
      $17_1 = $10_1;
      $18_1 = $12_1;
      $16_1 = $11_1;
      $14_1 = $15_1;
     }
     if (!$344(HEAP32[$0_1 + 4 >> 2], $6_1 + 16 | 0)) {
      $340(HEAP32[$0_1 + 4 >> 2], $6_1 + 16 | 0, $6_1 - -64 | 0, $6_1 + 48 | 0)
     }
     $3_1 = HEAP32[$0_1 + 4 >> 2];
     $2_1 = $341($3_1);
     $15_1 = HEAPF32[$3_1 + 288 >> 2];
     $11_1 = HEAPF32[$3_1 + 284 >> 2];
     $10_1 = HEAPF32[$3_1 + 280 >> 2];
     $12_1 = HEAPF32[$3_1 + 276 >> 2];
     $13_1 = Math_fround(0.0);
     if ($2_1) {
      $13_1 = Math_fround(Math_fround(Math_fround($12_1 * $12_1) + Math_fround($10_1 * $10_1)) + Math_fround($11_1 * $11_1))
     }
     $1_1 = $1_1 + 1 | 0;
     continue;
    }
    break;
   };
   HEAPF32[$5_1 + 164 >> 2] = $24_1;
   HEAPF32[$6_1 + 44 >> 2] = $14_1;
   HEAPF32[$6_1 + 40 >> 2] = $16_1;
   HEAPF32[$6_1 + 36 >> 2] = $17_1;
   HEAPF32[$6_1 + 32 >> 2] = $18_1;
   label$7 : {
    if (Math_fround(Math_fround(Math_fround($18_1 * $18_1) + Math_fround($17_1 * $17_1)) + Math_fround($16_1 * $16_1)) >= Math_fround(1.4210854715202004e-14)) {
     $113($6_1, $6_1 + 32 | 0);
     $2_1 = $6_1 + 8 | 0;
     $1_1 = HEAP32[$2_1 + 4 >> 2];
     $4_1 = $5_1 + 140 | 0;
     $3_1 = $4_1;
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $1_1;
     $1_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$5_1 + 132 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$5_1 + 136 >> 2] = $1_1;
     $10_1 = HEAPF32[$5_1 + 136 >> 2];
     $11_1 = HEAPF32[$5_1 + 132 >> 2];
     $15_1 = HEAPF32[$3_1 >> 2];
     break label$7;
    }
    HEAP32[$5_1 + 132 >> 2] = 0;
    HEAP32[$5_1 + 136 >> 2] = 0;
    $1_1 = $5_1 + 140 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $10_1 = Math_fround(0.0);
    $11_1 = Math_fround(0.0);
    $15_1 = Math_fround(0.0);
   }
   $3_1 = 0;
   if (Math_fround(-HEAPF32[$5_1 + 172 >> 2]) <= Math_fround(Math_fround(Math_fround($11_1 * $25) + Math_fround($10_1 * $26_1)) + Math_fround($15_1 * $27_1))) {
    break label$1
   }
   $0_1 = HEAP32[$0_1 + 4 >> 2];
   $341($0_1);
   $4_1 = HEAP32[$0_1 + 260 >> 2];
   $3_1 = HEAP32[$0_1 + 264 >> 2];
   $1_1 = $0_1 + 268 | 0;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = $5_1 + 156 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $0_1;
   HEAP32[$5_1 + 148 >> 2] = $4_1;
   HEAP32[$5_1 + 152 >> 2] = $3_1;
   $3_1 = 1;
  }
  global$0 = $6_1 + 208 | 0;
  return $3_1 | 0;
 }
 
 function $384($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0;
  HEAP32[$0_1 + 8 >> 2] = 12344;
  HEAP32[$0_1 >> 2] = 12316;
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  HEAP32[$0_1 + 60 >> 2] = 0;
  $5_1 = $0_1 + 56 | 0;
  HEAP32[$5_1 >> 2] = $1_1;
  $6_1 = $4_1 ? $2_1 : $3_1;
  HEAP32[$0_1 + 48 >> 2] = $6_1;
  $2_1 = $4_1 ? $3_1 : $2_1;
  HEAP32[$0_1 + 44 >> 2] = $2_1;
  $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, HEAP32[$2_1 + 8 >> 2], HEAP32[$6_1 + 8 >> 2]) | 0;
  HEAP32[$0_1 + 72 >> 2] = $1_1;
  $2_1 = HEAP32[$5_1 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, $1_1);
  HEAP8[$0_1 + 76 | 0] = $4_1;
 }
 
 function $385($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 12344;
  $1_1 = HEAP32[$0_1 + 48 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]]($1_1, HEAP32[$0_1 + 64 >> 2]);
  $1_1 = HEAP32[$0_1 + 48 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]]($1_1, HEAP32[$0_1 + 64 >> 2]);
  return $0_1 | 0;
 }
 
 function $386($0_1) {
  $0_1 = $0_1 | 0;
  $54($385($0_1));
 }
 
 function $387($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 144 | 0;
  global$0 = $4_1;
  label$1 : {
   if (!$282($1_1, HEAPF32[$0_1 + 4 >> 2], HEAPF32[$0_1 + 8 >> 2], HEAPF32[$0_1 + 12 >> 2], HEAPF32[$0_1 + 20 >> 2], HEAPF32[$0_1 + 24 >> 2], HEAPF32[$0_1 + 28 >> 2])) {
    break label$1
   }
   if (HEAP32[HEAP32[HEAP32[$0_1 + 36 >> 2] + 4 >> 2] + 4 >> 2] > 19) {
    break label$1
   }
   $6_1 = HEAP32[$0_1 + 48 >> 2];
   $7_1 = $388($4_1 + 32 | 0, $1_1, $1_1 + 16 | 0, $1_1 + 32 | 0);
   HEAPF32[$7_1 + 48 >> 2] = HEAPF32[$0_1 + 56 >> 2];
   HEAP32[$4_1 + 28 >> 2] = $3_1;
   HEAP32[$4_1 + 24 >> 2] = $2_1;
   HEAP32[$4_1 + 12 >> 2] = $7_1;
   $1_1 = HEAP32[$0_1 + 40 >> 2];
   HEAP32[$4_1 + 8 >> 2] = $1_1;
   $5_1 = HEAP32[$1_1 + 8 >> 2];
   HEAP32[$4_1 + 20 >> 2] = HEAP32[$1_1 + 12 >> 2];
   HEAP32[$4_1 + 16 >> 2] = $5_1;
   $1_1 = HEAP32[$0_1 + 36 >> 2];
   label$2 : {
    if (HEAPF32[HEAP32[$0_1 + 44 >> 2] + 32 >> 2] > Math_fround(0.0)) {
     $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 8 >> 2]]($6_1, $1_1, $4_1 + 8 | 0, 0, 2) | 0;
     break label$2;
    }
    $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 8 >> 2]]($6_1, $1_1, $4_1 + 8 | 0, HEAP32[$0_1 + 64 >> 2], 1) | 0;
   }
   $5_1 = HEAP32[$0_1 + 44 >> 2];
   $8_1 = HEAP32[$5_1 + 8 >> 2];
   label$4 : {
    if (HEAP32[$8_1 + 8 >> 2] == HEAP32[HEAP32[$0_1 + 40 >> 2] + 8 >> 2]) {
     HEAP32[$5_1 + 8 >> 2] = $4_1 + 8;
     FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 8 >> 2]]($5_1, $2_1, $3_1);
     break label$4;
    }
    $8_1 = HEAP32[$5_1 + 12 >> 2];
    HEAP32[$5_1 + 12 >> 2] = $4_1 + 8;
    FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 12 >> 2]]($5_1, $2_1, $3_1);
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, HEAP32[$0_1 + 36 >> 2], $4_1 + 8 | 0, HEAP32[$0_1 + 52 >> 2], HEAP32[$0_1 + 44 >> 2]);
   $2_1 = HEAP32[$0_1 + 44 >> 2];
   HEAP32[(HEAP32[HEAP32[$2_1 + 8 >> 2] + 8 >> 2] == HEAP32[HEAP32[$0_1 + 40 >> 2] + 8 >> 2] ? 8 : 12) + $2_1 >> 2] = $8_1;
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 60 >> 2]]($6_1, $1_1);
   $119($7_1);
  }
  global$0 = $4_1 + 144 | 0;
 }
 
 function $388($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $118($0_1);
  HEAP32[$0_1 + 4 >> 2] = 1;
  HEAP32[$0_1 >> 2] = 12376;
  $5_1 = $1_1 + 8 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 68 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $6_1;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 60 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 64 >> 2] = $4_1;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 76 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $2_1 = $2_1 + 8 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 84 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $0_1 + 92 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  $2_1 = $3_1 + 8 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 100 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  return $0_1;
 }
 
 function $389($0_1) {
  $0_1 = $0_1 | 0;
  return 12516;
 }
 
 function $390($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAPF32[$2_1 >> 2];
  $5_1 = HEAPF32[$2_1 + 4 >> 2];
  $6_1 = HEAPF32[$2_1 + 8 >> 2];
  $2_1 = $1_1 + 60 | 0;
  $80($3_1, $4_1, $5_1, $6_1, HEAPF32[$2_1 >> 2], HEAPF32[$1_1 - -64 >> 2], HEAPF32[$1_1 + 68 >> 2], HEAPF32[$1_1 + 76 >> 2], HEAPF32[$1_1 + 80 >> 2], HEAPF32[$1_1 + 84 >> 2], HEAPF32[$1_1 + 92 >> 2], HEAPF32[$1_1 + 96 >> 2], HEAPF32[$1_1 + 100 >> 2]);
  $4_1 = HEAPF32[$3_1 >> 2];
  $5_1 = HEAPF32[$3_1 + 4 >> 2];
  $1_1 = $4_1 < $5_1;
  $1_1 = $2_1 + ((HEAPF32[$3_1 + 8 >> 2] > ($1_1 ? $5_1 : $4_1) ? 2 : $1_1) << 4) | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $391($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $3_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  $9_1 = $0_1 + 100 | 0;
  $10_1 = $0_1 + 96 | 0;
  $11_1 = $0_1 + 84 | 0;
  $12_1 = $0_1 + 80 | 0;
  $13_1 = $0_1 + 68 | 0;
  $14_1 = $0_1 - -64 | 0;
  $15_1 = $0_1 + 60 | 0;
  while (1) {
   if ($3_1) {
    $80($5_1, HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2], HEAPF32[$0_1 + 60 >> 2], HEAPF32[$14_1 >> 2], HEAPF32[$13_1 >> 2], HEAPF32[$0_1 + 76 >> 2], HEAPF32[$12_1 >> 2], HEAPF32[$11_1 >> 2], HEAPF32[$0_1 + 92 >> 2], HEAPF32[$10_1 >> 2], HEAPF32[$9_1 >> 2]);
    $7_1 = HEAPF32[$5_1 >> 2];
    $8_1 = HEAPF32[$5_1 + 4 >> 2];
    $4_1 = $7_1 < $8_1;
    $4_1 = ((HEAPF32[$5_1 + 8 >> 2] > ($4_1 ? $8_1 : $7_1) ? 2 : $4_1) << 4) + $15_1 | 0;
    $6_1 = HEAP32[$4_1 + 4 >> 2];
    HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $6_1;
    $4_1 = $4_1 + 8 | 0;
    $16_1 = HEAP32[$4_1 + 4 >> 2];
    $6_1 = $2_1 + 8 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $16_1;
    $3_1 = $3_1 - 1 | 0;
    $2_1 = $2_1 + 16 | 0;
    $1_1 = $1_1 + 16 | 0;
    continue;
   } else {
    global$0 = $5_1 + 16 | 0
   }
   break;
  };
 }
 
 function $392($0_1) {
  $0_1 = $0_1 | 0;
  return 2;
 }
 
 function $393($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $394($0_1, $2_1);
  if ($1_1) {
   HEAP32[$3_1 + 12 >> 2] = -1082130432;
   $147($2_1, $3_1 + 12 | 0);
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $394($0_1, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0);
  $5_1 = HEAPF32[$0_1 + 84 >> 2];
  $8_1 = HEAPF32[$0_1 + 100 >> 2];
  $2_1 = HEAPF32[$0_1 + 68 >> 2];
  $6_1 = HEAPF32[$0_1 + 76 >> 2];
  $7_1 = HEAPF32[$0_1 + 96 >> 2];
  $9_1 = HEAPF32[$0_1 + 92 >> 2];
  $3_1 = HEAPF32[$0_1 - -64 >> 2];
  $10_1 = HEAPF32[$0_1 + 80 >> 2];
  $4_1 = HEAPF32[$0_1 + 60 >> 2];
  HEAP32[$1_1 + 12 >> 2] = 0;
  $6_1 = Math_fround($6_1 - $4_1);
  $7_1 = Math_fround($7_1 - $3_1);
  $3_1 = Math_fround($10_1 - $3_1);
  $4_1 = Math_fround($9_1 - $4_1);
  HEAPF32[$1_1 + 8 >> 2] = Math_fround($6_1 * $7_1) - Math_fround($3_1 * $4_1);
  $5_1 = Math_fround($5_1 - $2_1);
  $2_1 = Math_fround($8_1 - $2_1);
  HEAPF32[$1_1 + 4 >> 2] = Math_fround($5_1 * $4_1) - Math_fround($6_1 * $2_1);
  HEAPF32[$1_1 >> 2] = Math_fround($3_1 * $2_1) - Math_fround($5_1 * $7_1);
  $84($1_1);
 }
 
 function $395($0_1) {
  $0_1 = $0_1 | 0;
  return 3;
 }
 
 function $396($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 108 >> 2]]($0_1, $1_1, $2_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 108 >> 2]]($0_1, ($1_1 + 1 | 0) % 3 | 0, $3_1);
 }
 
 function $397($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $0_1 = ($1_1 << 4) + $0_1 | 0;
  $1_1 = $0_1 + 68 | 0;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  $3_1 = $2_1 + 8 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $0_1 = $0_1 + 60 | 0;
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
 }
 
 function $398($0_1) {
  $0_1 = $0_1 | 0;
  return 1;
 }
 
 function $399($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 124 >> 2]]($0_1, $3_1, $1_1, $2_1);
 }
 
 function $400($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0);
  $3_1 = global$0 + -64 | 0;
  global$0 = $3_1;
  $394($0_1, $3_1 + 48 | 0);
  $4_1 = HEAPF32[$3_1 + 48 >> 2];
  $7_1 = HEAPF32[$3_1 + 52 >> 2];
  $5_1 = HEAPF32[$3_1 + 56 >> 2];
  $4_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2] * $4_1) + Math_fround(HEAPF32[$1_1 + 4 >> 2] * $7_1)) + Math_fround(HEAPF32[$1_1 + 8 >> 2] * $5_1)) - Math_fround(Math_fround(Math_fround($4_1 * HEAPF32[$0_1 + 60 >> 2]) + Math_fround($7_1 * HEAPF32[$0_1 - -64 >> 2])) + Math_fround($5_1 * HEAPF32[$0_1 + 68 >> 2])));
  $7_1 = Math_fround(-$2_1);
  label$1 : {
   if (!($4_1 >= $7_1)) {
    break label$1
   }
   if (!($2_1 >= $4_1)) {
    break label$1
   }
   $6_1 = -1;
   while (1) {
    label$3 : {
     if (($6_1 | 0) == 2) {
      $6_1 = 3;
      break label$3;
     }
     $6_1 = $6_1 + 1 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 104 >> 2]]($0_1, $6_1, $3_1 + 32 | 0, $3_1 + 16 | 0);
     $2_1 = HEAPF32[$3_1 + 40 >> 2];
     $4_1 = HEAPF32[$3_1 + 24 >> 2];
     $5_1 = HEAPF32[$3_1 + 32 >> 2];
     $8_1 = HEAPF32[$3_1 + 16 >> 2];
     $9_1 = HEAPF32[$3_1 + 36 >> 2];
     $10_1 = HEAPF32[$3_1 + 20 >> 2];
     HEAP32[$3_1 + 12 >> 2] = 0;
     $5_1 = Math_fround($8_1 - $5_1);
     $8_1 = HEAPF32[$3_1 + 52 >> 2];
     $9_1 = Math_fround($10_1 - $9_1);
     $10_1 = HEAPF32[$3_1 + 48 >> 2];
     HEAPF32[$3_1 + 8 >> 2] = Math_fround($5_1 * $8_1) - Math_fround($9_1 * $10_1);
     $2_1 = Math_fround($4_1 - $2_1);
     $4_1 = HEAPF32[$3_1 + 56 >> 2];
     HEAPF32[$3_1 + 4 >> 2] = Math_fround($10_1 * $2_1) - Math_fround($5_1 * $4_1);
     HEAPF32[$3_1 >> 2] = Math_fround($9_1 * $4_1) - Math_fround($2_1 * $8_1);
     $84($3_1);
     $2_1 = HEAPF32[$3_1 >> 2];
     $4_1 = HEAPF32[$3_1 + 4 >> 2];
     $5_1 = HEAPF32[$3_1 + 8 >> 2];
     if (!($7_1 > Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2] * $2_1) + Math_fround(HEAPF32[$1_1 + 4 >> 2] * $4_1)) + Math_fround(HEAPF32[$1_1 + 8 >> 2] * $5_1)) - Math_fround(Math_fround(Math_fround($2_1 * HEAPF32[$3_1 + 32 >> 2]) + Math_fround($4_1 * HEAPF32[$3_1 + 36 >> 2])) + Math_fround($5_1 * HEAPF32[$3_1 + 40 >> 2]))))) {
      continue
     }
    }
    break;
   };
   $6_1 = $6_1 >>> 0 > 2;
  }
  global$0 = $3_1 - -64 | 0;
  return $6_1 | 0;
 }
 
 function $401($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $394($0_1, $2_1);
  $2_1 = $0_1 + 68 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $3_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$0_1 + 64 >> 2];
  HEAP32[$3_1 >> 2] = HEAP32[$0_1 + 60 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $1_1;
 }
 
 function $402($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 12316;
  $385($0_1 + 8 | 0);
  return $0_1 | 0;
 }
 
 function $403($0_1) {
  $0_1 = $0_1 | 0;
  $54($402($0_1));
 }
 
 function $404($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0);
  $5_1 = global$0 - 192 | 0;
  global$0 = $5_1;
  $6_1 = HEAPU8[$0_1 + 76 | 0];
  $11_1 = $6_1 ? $1_1 : $2_1;
  $10_1 = HEAP32[$11_1 + 4 >> 2];
  label$1 : {
   if (HEAP32[$10_1 + 4 >> 2] - 21 >>> 0 > 8) {
    break label$1
   }
   $2_1 = $6_1 ? $2_1 : $1_1;
   if (HEAP32[HEAP32[$2_1 + 4 >> 2] + 4 >> 2] > 19) {
    break label$1
   }
   $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$10_1 >> 2] + 48 >> 2]]($10_1));
   HEAPF32[$0_1 - -64 >> 2] = $9_1;
   HEAP32[$0_1 + 60 >> 2] = $3_1;
   HEAP32[$0_1 + 48 >> 2] = $11_1;
   $1_1 = $0_1 + 44 | 0;
   HEAP32[$1_1 >> 2] = $2_1;
   HEAP32[$0_1 + 52 >> 2] = $4_1;
   $3_1 = $0_1 + 72 | 0;
   HEAP32[$4_1 + 4 >> 2] = HEAP32[$3_1 >> 2];
   $379($5_1, HEAP32[$11_1 + 12 >> 2]);
   $380($5_1 - -64 | 0, $5_1, HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]);
   $7_1 = $5_1 + 72 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $6_1 = $5_1 + 136 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $8_1;
   $7_1 = $5_1 + 88 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $6_1 = $5_1 + 152 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $8_1;
   $7_1 = $5_1 + 104 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $6_1 = $5_1 + 168 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $8_1;
   $7_1 = $5_1 + 120 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $6_1 = $5_1 + 184 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $8_1;
   $6_1 = HEAP32[$5_1 + 68 >> 2];
   HEAP32[$5_1 + 128 >> 2] = HEAP32[$5_1 + 64 >> 2];
   HEAP32[$5_1 + 132 >> 2] = $6_1;
   $6_1 = HEAP32[$5_1 + 84 >> 2];
   HEAP32[$5_1 + 144 >> 2] = HEAP32[$5_1 + 80 >> 2];
   HEAP32[$5_1 + 148 >> 2] = $6_1;
   $6_1 = HEAP32[$5_1 + 100 >> 2];
   HEAP32[$5_1 + 160 >> 2] = HEAP32[$5_1 + 96 >> 2];
   HEAP32[$5_1 + 164 >> 2] = $6_1;
   $6_1 = HEAP32[$5_1 + 116 >> 2];
   HEAP32[$5_1 + 176 >> 2] = HEAP32[$5_1 + 112 >> 2];
   HEAP32[$5_1 + 180 >> 2] = $6_1;
   $6_1 = HEAP32[HEAP32[$1_1 >> 2] + 4 >> 2];
   $7_1 = $0_1 + 12 | 0;
   $8_1 = $0_1 + 28 | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 8 >> 2]]($6_1, $5_1 + 128 | 0, $7_1, $8_1);
   $12_1 = HEAPF32[$4_1 + 32 >> 2];
   HEAP32[$5_1 + 76 >> 2] = 0;
   $9_1 = Math_fround($12_1 + $9_1);
   HEAPF32[$5_1 + 72 >> 2] = $9_1;
   HEAPF32[$5_1 + 68 >> 2] = $9_1;
   HEAPF32[$5_1 + 64 >> 2] = $9_1;
   $6_1 = $89($8_1, $5_1 - -64 | 0);
   $7_1 = $405($7_1, $5_1 - -64 | 0);
   $3_1 = HEAP32[$3_1 >> 2];
   HEAP32[$3_1 + 840 >> 2] = HEAP32[$11_1 + 8 >> 2];
   HEAP32[$3_1 + 836 >> 2] = HEAP32[$2_1 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$10_1 >> 2] + 64 >> 2]]($10_1, $0_1 + 8 | 0, $7_1, $6_1);
   $370($4_1);
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
  }
  global$0 = $5_1 + 192 | 0;
 }
 
 function $405($0_1, $1_1) {
  HEAPF32[$0_1 >> 2] = HEAPF32[$0_1 >> 2] - HEAPF32[$1_1 >> 2];
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$0_1 + 4 >> 2] - HEAPF32[$1_1 + 4 >> 2];
  HEAPF32[$0_1 + 8 >> 2] = HEAPF32[$0_1 + 8 >> 2] - HEAPF32[$1_1 + 8 >> 2];
  return $0_1;
 }
 
 function $406($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = 0, $15_1 = 0, $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0);
  $5_1 = global$0 - 432 | 0;
  global$0 = $5_1;
  $6_1 = Math_fround(1.0);
  $0_1 = HEAPU8[$0_1 + 76 | 0];
  $8_1 = $0_1 ? $2_1 : $1_1;
  $7_1 = Math_fround(HEAPF32[$8_1 + 116 >> 2] - HEAPF32[$8_1 + 52 >> 2]);
  $9_1 = Math_fround($7_1 * $7_1);
  $7_1 = Math_fround(HEAPF32[$8_1 + 120 >> 2] - HEAPF32[$8_1 + 56 >> 2]);
  $9_1 = Math_fround($9_1 + Math_fround($7_1 * $7_1));
  $7_1 = Math_fround(HEAPF32[$8_1 + 124 >> 2] - HEAPF32[$8_1 + 60 >> 2]);
  $9_1 = Math_fround($9_1 + Math_fround($7_1 * $7_1));
  $7_1 = HEAPF32[$8_1 + 276 >> 2];
  label$1 : {
   if ($9_1 < Math_fround($7_1 * $7_1)) {
    break label$1
   }
   $0_1 = $0_1 ? $1_1 : $2_1;
   $379($5_1 + 368 | 0, $0_1 + 4 | 0);
   $380($5_1 + 304 | 0, $5_1 + 368 | 0, $8_1 + 4 | 0);
   $380($5_1 + 240 | 0, $5_1 + 368 | 0, $8_1 + 68 | 0);
   $14_1 = HEAP32[$0_1 + 192 >> 2];
   if (HEAP32[$14_1 + 4 >> 2] - 21 >>> 0 > 8) {
    break label$1
   }
   $1_1 = $5_1 + 360 | 0;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = $5_1 + 232 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$5_1 + 356 >> 2];
   HEAP32[$5_1 + 224 >> 2] = HEAP32[$5_1 + 352 >> 2];
   HEAP32[$5_1 + 228 >> 2] = $0_1;
   $7_1 = HEAPF32[$5_1 + 224 >> 2];
   $6_1 = HEAPF32[$5_1 + 288 >> 2];
   if ($7_1 > $6_1) {
    HEAPF32[$5_1 + 224 >> 2] = $6_1;
    $7_1 = $6_1;
   }
   $12_1 = HEAPF32[$5_1 + 296 >> 2];
   $10_1 = HEAPF32[$5_1 + 232 >> 2];
   $3_1 = $12_1 < $10_1;
   $13_1 = HEAPF32[$5_1 + 292 >> 2];
   $16_1 = HEAPF32[$5_1 + 228 >> 2];
   $17_1 = $13_1 < $16_1;
   $9_1 = HEAPF32[$5_1 + 300 >> 2];
   if ($9_1 < HEAPF32[$5_1 + 236 >> 2]) {
    HEAPF32[$5_1 + 236 >> 2] = $9_1
   }
   $4_1 = $5_1 + 352 | 0;
   $15_1 = $4_1 + 8 | 0;
   $1_1 = $15_1;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = $5_1 + 216 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$4_1 + 4 >> 2];
   HEAP32[$5_1 + 208 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$5_1 + 212 >> 2] = $0_1;
   $11_1 = HEAPF32[$5_1 + 212 >> 2];
   $18_1 = $11_1 < $13_1 ? $13_1 : $11_1;
   $11_1 = HEAPF32[$5_1 + 208 >> 2];
   $11_1 = $6_1 > $11_1 ? $6_1 : $11_1;
   $6_1 = HEAPF32[$2_1 >> 2];
   $6_1 = $6_1 < $12_1 ? $12_1 : $6_1;
   if (HEAPF32[$5_1 + 220 >> 2] < $9_1) {
    HEAPF32[$5_1 + 220 >> 2] = $9_1
   }
   $9_1 = $3_1 ? $12_1 : $10_1;
   $10_1 = HEAPF32[$8_1 + 272 >> 2];
   HEAPF32[$5_1 + 232 >> 2] = $9_1 - $10_1;
   HEAPF32[$5_1 + 228 >> 2] = ($17_1 ? $13_1 : $16_1) - $10_1;
   HEAPF32[$5_1 + 224 >> 2] = $7_1 - $10_1;
   HEAPF32[$5_1 + 216 >> 2] = $10_1 + $6_1;
   HEAPF32[$5_1 + 212 >> 2] = $10_1 + $18_1;
   HEAPF32[$5_1 + 208 >> 2] = $10_1 + $11_1;
   $1_1 = $5_1 + 312 | 0;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = $5_1 + 12 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$5_1 + 324 >> 2];
   $1_1 = $5_1 + 20 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 320 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $0_1;
   $1_1 = $5_1 + 328 | 0;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = $5_1 + 28 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$5_1 + 340 >> 2];
   $1_1 = $5_1 + 36 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 336 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $0_1;
   $1_1 = $5_1 + 344 | 0;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = $5_1 + 44 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$4_1 + 4 >> 2];
   $1_1 = $5_1 + 52 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$15_1 + 4 >> 2];
   $1_1 = $5_1 + 60 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$15_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $0_1;
   HEAP32[$5_1 >> 2] = 12592;
   $0_1 = HEAP32[$5_1 + 308 >> 2];
   HEAP32[$5_1 + 4 >> 2] = HEAP32[$5_1 + 304 >> 2];
   HEAP32[$5_1 + 8 >> 2] = $0_1;
   $1_1 = $5_1 + 248 | 0;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = $5_1 + 76 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$5_1 + 260 >> 2];
   $1_1 = $5_1 + 84 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 256 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $0_1;
   $1_1 = $5_1 + 264 | 0;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = $5_1 + 92 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$5_1 + 276 >> 2];
   $1_1 = $5_1 + 100 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 272 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $0_1;
   $1_1 = $5_1 + 280 | 0;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = $5_1 + 108 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $0_1;
   $3_1 = $5_1 + 288 | 0;
   $1_1 = $3_1 + 8 | 0;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = $5_1 + 124 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$3_1 + 4 >> 2];
   $1_1 = $5_1 + 116 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $0_1;
   HEAPF32[$5_1 + 196 >> 2] = $10_1;
   $0_1 = HEAP32[$5_1 + 244 >> 2];
   HEAP32[$5_1 + 68 >> 2] = HEAP32[$5_1 + 240 >> 2];
   HEAP32[$5_1 + 72 >> 2] = $0_1;
   HEAPF32[$5_1 + 200 >> 2] = HEAPF32[$8_1 + 268 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$14_1 >> 2] + 64 >> 2]]($14_1, $5_1, $5_1 + 224 | 0, $5_1 + 208 | 0);
   $6_1 = HEAPF32[$5_1 + 200 >> 2];
   if ($6_1 < HEAPF32[$8_1 + 268 >> 2]) {
    HEAPF32[$8_1 + 268 >> 2] = $6_1;
    break label$1;
   }
   $6_1 = Math_fround(1.0);
  }
  global$0 = $5_1 + 432 | 0;
  return Math_fround($6_1);
 }
 
 function $407($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $0_1 + 72 | 0;
  if (HEAP32[$0_1 >> 2]) {
   $375($1_1, $0_1)
  }
 }
 
 function $408($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0);
  $2_1 = global$0 - 784 | 0;
  global$0 = $2_1;
  $3_1 = $2_1 + 732 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $2_1 + 744 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 740 >> 2] = 1065353216;
  $3_1 = $2_1 + 752 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $2_1 + 764 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 760 >> 2] = 1065353216;
  $3_1 = $2_1 + 772 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 780 >> 2] = 0;
  HEAP32[$2_1 + 724 >> 2] = 0;
  HEAP32[$2_1 + 728 >> 2] = 0;
  HEAP32[$2_1 + 720 >> 2] = 1065353216;
  HEAP32[$2_1 + 712 >> 2] = 0;
  HEAP32[$2_1 + 716 >> 2] = 0;
  HEAP32[$2_1 + 544 >> 2] = 11640;
  HEAPF32[$2_1 + 708 >> 2] = HEAPF32[$0_1 + 200 >> 2];
  $3_1 = $373($2_1 + 488 | 0, HEAPF32[$0_1 + 196 >> 2]);
  $1_1 = $388($2_1 + 376 | 0, $1_1, $1_1 + 16 | 0, $1_1 + 32 | 0);
  HEAP8[$2_1 + 348 | 0] = 0;
  HEAP32[$2_1 + 324 >> 2] = 953267991;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  HEAP32[$2_1 + 8 >> 2] = $3_1;
  HEAP32[$2_1 >> 2] = 12256;
  HEAP32[$2_1 + 4 >> 2] = $2_1 + 16;
  label$1 : {
   if (!$383($2_1, $0_1 + 4 | 0, $0_1 + 68 | 0, $2_1 + 720 | 0, $2_1 + 720 | 0, $2_1 + 544 | 0)) {
    break label$1
   }
   $4_1 = HEAPF32[$2_1 + 708 >> 2];
   if (!($4_1 < HEAPF32[$0_1 + 200 >> 2])) {
    break label$1
   }
   HEAPF32[$0_1 + 200 >> 2] = $4_1;
  }
  $119($1_1);
  global$0 = $2_1 + 784 | 0;
 }
 
 function $409($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  HEAP32[$0_1 >> 2] = 12820;
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  HEAP8[$0_1 + 76 | 0] = 0;
  HEAP32[$0_1 + 72 >> 2] = $2_1;
  HEAP8[$0_1 + 68 | 0] = $5_1;
  HEAP8[$0_1 + 24 | 0] = 1;
  HEAP32[$0_1 + 20 >> 2] = 0;
  HEAP8[$0_1 + 44 | 0] = 1;
  $1_1 = $0_1 + 12 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 40 >> 2] = 0;
  HEAP8[$0_1 - -64 | 0] = 1;
  $1_1 = $0_1 + 32 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 60 >> 2] = 0;
  $1_1 = $0_1 + 52 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 80 >> 2] = HEAP32[HEAP32[($5_1 ? $4_1 : $3_1) + 4 >> 2] + 72 >> 2];
  $410($0_1, $3_1, $4_1);
 }
 
 function $410($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  label$1 : {
   $11_1 = HEAPU8[$0_1 + 68 | 0];
   $8_1 = $11_1 ? $2_1 : $1_1;
   $10_1 = HEAP32[$8_1 + 4 >> 2];
   $4_1 = HEAP32[$10_1 + 20 >> 2];
   $7_1 = HEAP32[$0_1 + 52 >> 2];
   if (($4_1 | 0) < ($7_1 | 0)) {
    break label$1
   }
   label$2 : {
    if (($4_1 | 0) <= ($7_1 | 0)) {
     break label$2
    }
    if (HEAP32[$0_1 + 56 >> 2] >= ($4_1 | 0)) {
     break label$2
    }
    $5_1 = $7_1;
    $12_1 = $0_1 + 48 | 0;
    if ($4_1) {
     $9_1 = $53($4_1 << 2);
     $5_1 = HEAP32[$0_1 + 52 >> 2];
    }
    $5_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
    while (1) {
     if ($5_1) {
      HEAP32[$6_1 + $9_1 >> 2] = HEAP32[HEAP32[$0_1 + 60 >> 2] + $6_1 >> 2];
      $5_1 = $5_1 - 1 | 0;
      $6_1 = $6_1 + 4 | 0;
      continue;
     }
     break;
    };
    $96($12_1);
    HEAP32[$0_1 + 60 >> 2] = $9_1;
    HEAP8[$0_1 - -64 | 0] = 1;
    HEAP32[$0_1 + 56 >> 2] = $4_1;
   }
   $6_1 = $4_1 - $7_1 | 0;
   $5_1 = $7_1 << 2;
   while (1) {
    if (!$6_1) {
     break label$1
    }
    HEAP32[HEAP32[$0_1 + 60 >> 2] + $5_1 >> 2] = 0;
    $6_1 = $6_1 - 1 | 0;
    $5_1 = $5_1 + 4 | 0;
    continue;
   };
  }
  $2_1 = $11_1 ? $1_1 : $2_1;
  HEAP32[$0_1 + 52 >> 2] = $4_1;
  $7_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
  $1_1 = 64;
  $5_1 = 0;
  $6_1 = 0;
  while (1) {
   if (($6_1 | 0) != ($7_1 | 0)) {
    label$9 : {
     if (HEAP32[$10_1 + 68 >> 2]) {
      HEAP32[HEAP32[$0_1 + 60 >> 2] + $5_1 >> 2] = 0;
      break label$9;
     }
     $4_1 = HEAP32[HEAP32[$10_1 + 28 >> 2] + $1_1 >> 2];
     HEAP32[$3_1 + 76 >> 2] = $6_1;
     HEAP32[$3_1 + 72 >> 2] = -1;
     HEAP32[$3_1 + 56 >> 2] = $8_1;
     $9_1 = HEAP32[$8_1 + 12 >> 2];
     HEAP32[$3_1 + 64 >> 2] = HEAP32[$8_1 + 8 >> 2];
     HEAP32[$3_1 + 68 >> 2] = $9_1;
     HEAP32[$3_1 + 60 >> 2] = $4_1;
     $4_1 = HEAP32[$0_1 + 4 >> 2];
     $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 8 >> 2]]($4_1, $3_1 + 56 | 0, $2_1, HEAP32[$0_1 + 72 >> 2], 1) | 0;
     HEAP32[HEAP32[$0_1 + 60 >> 2] + $5_1 >> 2] = $4_1;
     HEAP32[$3_1 + 44 >> 2] = 0;
     HEAP8[$3_1 + 48 | 0] = 1;
     HEAP32[$3_1 + 36 >> 2] = 0;
     HEAP32[$3_1 + 40 >> 2] = 0;
     HEAP32[$3_1 + 20 >> 2] = 0;
     HEAP8[$3_1 + 24 | 0] = 1;
     HEAP32[$3_1 + 12 >> 2] = 0;
     HEAP32[$3_1 + 16 >> 2] = 0;
     $57($3_1 + 8 | 0);
     $57($3_1 + 32 | 0);
    }
    $5_1 = $5_1 + 4 | 0;
    $1_1 = $1_1 + 80 | 0;
    $6_1 = $6_1 + 1 | 0;
    continue;
   }
   break;
  };
  global$0 = $3_1 + 80 | 0;
 }
 
 function $411($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 12820;
  $412($0_1);
  $57($0_1 + 48 | 0);
  $57($0_1 + 28 | 0);
  $57($0_1 + 8 | 0);
  return $0_1 | 0;
 }
 
 function $412($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = HEAP32[$0_1 + 52 >> 2];
  $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
  while (1) {
   if ($1_1) {
    $2_1 = HEAP32[HEAP32[$0_1 + 60 >> 2] + $3_1 >> 2];
    if ($2_1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] >> 2]]($2_1) | 0;
     $2_1 = HEAP32[$0_1 + 4 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 60 >> 2]]($2_1, HEAP32[HEAP32[$0_1 + 60 >> 2] + $3_1 >> 2]);
    }
    $1_1 = $1_1 - 1 | 0;
    $3_1 = $3_1 + 4 | 0;
    continue;
   }
   break;
  };
 }
 
 function $413($0_1) {
  $0_1 = $0_1 | 0;
  $17($411($0_1));
 }
 
 function $414($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0;
  $5_1 = global$0 - 288 | 0;
  global$0 = $5_1;
  $9_1 = HEAPU8[$0_1 + 68 | 0];
  $15_1 = $9_1 ? $2_1 : $1_1;
  $13_1 = HEAP32[$15_1 + 4 >> 2];
  if (HEAP32[$13_1 + 72 >> 2] != HEAP32[$0_1 + 80 >> 2]) {
   $412($0_1);
   $410($0_1, $1_1, $2_1);
   HEAP32[$0_1 + 80 >> 2] = HEAP32[$13_1 + 72 >> 2];
  }
  label$2 : {
   if (!HEAP32[$0_1 + 52 >> 2]) {
    break label$2
   }
   $6_1 = HEAP32[$13_1 + 68 >> 2];
   HEAP32[$5_1 + 276 >> 2] = $4_1;
   HEAP32[$5_1 + 272 >> 2] = $3_1;
   $14_1 = $9_1 ? $1_1 : $2_1;
   HEAP32[$5_1 + 264 >> 2] = $14_1;
   HEAP32[$5_1 + 260 >> 2] = $15_1;
   HEAP32[$5_1 + 256 >> 2] = 12860;
   HEAP32[$5_1 + 284 >> 2] = HEAP32[$0_1 + 72 >> 2];
   HEAP32[$5_1 + 280 >> 2] = HEAP32[$0_1 + 60 >> 2];
   HEAP32[$5_1 + 268 >> 2] = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$5_1 + 160 >> 2] = 0;
   $8_1 = $0_1 + 28 | 0;
   $415($8_1, $5_1 + 160 | 0);
   $3_1 = 0;
   while (1) {
    label$4 : {
     $2_1 = HEAP32[$0_1 + 52 >> 2];
     if (($2_1 | 0) > ($3_1 | 0)) {
      $1_1 = HEAP32[HEAP32[$0_1 + 60 >> 2] + ($3_1 << 2) >> 2];
      if (!$1_1) {
       break label$4
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]]($1_1, $8_1);
      $2_1 = 0;
      $1_1 = 0;
      while (1) {
       if (HEAP32[$0_1 + 32 >> 2] <= ($1_1 | 0)) {
        HEAP32[$5_1 + 160 >> 2] = 0;
        $415($8_1, $5_1 + 160 | 0);
        break label$4;
       }
       $9_1 = HEAP32[HEAP32[$0_1 + 40 >> 2] + $2_1 >> 2];
       if (HEAP32[$9_1 + 844 >> 2]) {
        HEAP32[$4_1 + 4 >> 2] = $9_1;
        $370($4_1);
        HEAP32[$4_1 + 4 >> 2] = 0;
       }
       $2_1 = $2_1 + 4 | 0;
       $1_1 = $1_1 + 1 | 0;
       continue;
      };
     }
     label$9 : {
      if (!$6_1) {
       $1_1 = 0;
       $3_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
       $2_1 = 64;
       while (1) {
        if (($1_1 | 0) == ($3_1 | 0)) {
         break label$9
        }
        $416($5_1 + 256 | 0, HEAP32[HEAP32[$13_1 + 28 >> 2] + $2_1 >> 2], $1_1);
        $2_1 = $2_1 + 80 | 0;
        $1_1 = $1_1 + 1 | 0;
        continue;
       };
      }
      $379($5_1 + 32 | 0, HEAP32[$15_1 + 12 >> 2]);
      $380($5_1 + 96 | 0, $5_1 + 32 | 0, HEAP32[$14_1 + 12 >> 2]);
      $11_1 = $5_1 + 104 | 0;
      $2_1 = $11_1;
      $1_1 = HEAP32[$2_1 + 4 >> 2];
      $3_1 = $5_1 + 168 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $1_1;
      $9_1 = $5_1 + 120 | 0;
      $2_1 = $9_1;
      $1_1 = HEAP32[$2_1 + 4 >> 2];
      $3_1 = $5_1 + 184 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $1_1;
      $2_1 = $5_1 + 136 | 0;
      $1_1 = HEAP32[$2_1 + 4 >> 2];
      $3_1 = $5_1 + 200 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $1_1;
      $2_1 = $5_1 + 152 | 0;
      $1_1 = HEAP32[$2_1 + 4 >> 2];
      $3_1 = $5_1 + 216 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $1_1;
      $1_1 = HEAP32[$5_1 + 100 >> 2];
      HEAP32[$5_1 + 160 >> 2] = HEAP32[$5_1 + 96 >> 2];
      HEAP32[$5_1 + 164 >> 2] = $1_1;
      $1_1 = HEAP32[$5_1 + 116 >> 2];
      HEAP32[$5_1 + 176 >> 2] = HEAP32[$5_1 + 112 >> 2];
      HEAP32[$5_1 + 180 >> 2] = $1_1;
      $1_1 = HEAP32[$5_1 + 132 >> 2];
      HEAP32[$5_1 + 192 >> 2] = HEAP32[$5_1 + 128 >> 2];
      HEAP32[$5_1 + 196 >> 2] = $1_1;
      $1_1 = HEAP32[$5_1 + 148 >> 2];
      HEAP32[$5_1 + 208 >> 2] = HEAP32[$5_1 + 144 >> 2];
      HEAP32[$5_1 + 212 >> 2] = $1_1;
      $1_1 = HEAP32[$14_1 + 4 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $5_1 + 160 | 0, $5_1 + 240 | 0, $5_1 + 224 | 0);
      $3_1 = $5_1 + 248 | 0;
      $12_1 = HEAPF32[$4_1 + 32 >> 2];
      HEAPF32[$3_1 >> 2] = HEAPF32[$3_1 >> 2] - $12_1;
      $7_1 = $5_1 + 232 | 0;
      HEAPF32[$7_1 >> 2] = $12_1 + HEAPF32[$7_1 >> 2];
      HEAPF32[$5_1 + 240 >> 2] = HEAPF32[$5_1 + 240 >> 2] - $12_1;
      HEAPF32[$5_1 + 244 >> 2] = HEAPF32[$5_1 + 244 >> 2] - $12_1;
      HEAPF32[$5_1 + 224 >> 2] = $12_1 + HEAPF32[$5_1 + 224 >> 2];
      HEAPF32[$5_1 + 228 >> 2] = $12_1 + HEAPF32[$5_1 + 228 >> 2];
      $1_1 = HEAP32[$3_1 + 4 >> 2];
      $4_1 = $5_1 + 40 | 0;
      $2_1 = $4_1;
      HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$2_1 + 4 >> 2] = $1_1;
      $1_1 = HEAP32[$7_1 + 4 >> 2];
      $3_1 = $5_1 + 56 | 0;
      $2_1 = $3_1;
      HEAP32[$2_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$2_1 + 4 >> 2] = $1_1;
      $1_1 = HEAP32[$5_1 + 244 >> 2];
      HEAP32[$5_1 + 32 >> 2] = HEAP32[$5_1 + 240 >> 2];
      HEAP32[$5_1 + 36 >> 2] = $1_1;
      $1_1 = HEAP32[$5_1 + 228 >> 2];
      HEAP32[$5_1 + 48 >> 2] = HEAP32[$5_1 + 224 >> 2];
      HEAP32[$5_1 + 52 >> 2] = $1_1;
      $1_1 = HEAP32[$6_1 >> 2];
      HEAP32[$5_1 + 16 >> 2] = $1_1;
      if (!$1_1) {
       break label$9
      }
      $1_1 = HEAP32[$3_1 + 4 >> 2];
      HEAP32[$9_1 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$9_1 + 4 >> 2] = $1_1;
      $2_1 = $5_1 + 48 | 0;
      $1_1 = HEAP32[$2_1 + 4 >> 2];
      $3_1 = $5_1 + 112 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $1_1;
      $1_1 = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$11_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$11_1 + 4 >> 2] = $1_1;
      $1_1 = HEAP32[$5_1 + 36 >> 2];
      HEAP32[$5_1 + 96 >> 2] = HEAP32[$5_1 + 32 >> 2];
      HEAP32[$5_1 + 100 >> 2] = $1_1;
      HEAP32[$5_1 >> 2] = 0;
      $3_1 = $0_1 + 8 | 0;
      $140($3_1, 0, $5_1);
      $145($3_1, 64);
      $224($3_1, $5_1 + 16 | 0);
      $1_1 = HEAP32[$0_1 + 12 >> 2];
      while (1) {
       $1_1 = $1_1 - 1 | 0;
       HEAP32[$0_1 + 12 >> 2] = $1_1;
       $2_1 = HEAP32[HEAP32[$0_1 + 20 >> 2] + ($1_1 << 2) >> 2];
       if ($417($2_1, $5_1 + 96 | 0)) {
        $1_1 = $2_1 + 40 | 0;
        label$14 : {
         if (HEAP32[$1_1 >> 2]) {
          $224($3_1, $2_1 + 36 | 0);
          $224($3_1, $1_1);
          break label$14;
         }
         FUNCTION_TABLE[HEAP32[HEAP32[$5_1 + 256 >> 2] + 12 >> 2]]($5_1 + 256 | 0, $2_1);
        }
        $1_1 = HEAP32[$0_1 + 12 >> 2];
       }
       if (($1_1 | 0) > 0) {
        continue
       }
       break;
      };
     }
     $1_1 = HEAP32[$0_1 + 52 >> 2];
     HEAP32[$5_1 + 160 >> 2] = 0;
     $415($8_1, $5_1 + 160 | 0);
     $4_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
     $16_1 = $5_1 + 144 | 0;
     $11_1 = $5_1 + 80 | 0;
     $17_1 = $5_1 + 128 | 0;
     $9_1 = $5_1 - -64 | 0;
     $18_1 = $5_1 + 112 | 0;
     $1_1 = $5_1 + 48 | 0;
     $19_1 = $5_1 + 208 | 0;
     $20_1 = $5_1 + 192 | 0;
     $21_1 = $5_1 + 176 | 0;
     $3_1 = 64;
     $2_1 = 0;
     while (1) {
      if (!$4_1) {
       break label$2
      }
      label$17 : {
       if (!HEAP32[HEAP32[$0_1 + 60 >> 2] + $2_1 >> 2]) {
        break label$17
       }
       $10_1 = HEAP32[$15_1 + 12 >> 2];
       $7_1 = $10_1;
       $6_1 = HEAP32[$7_1 + 20 >> 2];
       HEAP32[$21_1 >> 2] = HEAP32[$7_1 + 16 >> 2];
       HEAP32[$21_1 + 4 >> 2] = $6_1;
       $6_1 = HEAP32[$7_1 + 36 >> 2];
       HEAP32[$20_1 >> 2] = HEAP32[$7_1 + 32 >> 2];
       HEAP32[$20_1 + 4 >> 2] = $6_1;
       $6_1 = HEAP32[$7_1 + 52 >> 2];
       HEAP32[$19_1 >> 2] = HEAP32[$7_1 + 48 >> 2];
       HEAP32[$19_1 + 4 >> 2] = $6_1;
       $7_1 = $7_1 + 8 | 0;
       $6_1 = HEAP32[$7_1 + 4 >> 2];
       $8_1 = $5_1 + 168 | 0;
       HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[$8_1 + 4 >> 2] = $6_1;
       $7_1 = $10_1 + 24 | 0;
       $6_1 = HEAP32[$7_1 + 4 >> 2];
       $8_1 = $21_1 + 8 | 0;
       HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[$8_1 + 4 >> 2] = $6_1;
       $7_1 = $10_1 + 40 | 0;
       $6_1 = HEAP32[$7_1 + 4 >> 2];
       $8_1 = $20_1 + 8 | 0;
       HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[$8_1 + 4 >> 2] = $6_1;
       $7_1 = $10_1 + 56 | 0;
       $6_1 = HEAP32[$7_1 + 4 >> 2];
       $8_1 = $19_1 + 8 | 0;
       HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[$8_1 + 4 >> 2] = $6_1;
       $6_1 = HEAP32[$10_1 + 4 >> 2];
       HEAP32[$5_1 + 160 >> 2] = HEAP32[$10_1 >> 2];
       HEAP32[$5_1 + 164 >> 2] = $6_1;
       $6_1 = HEAP32[$13_1 + 28 >> 2] + $3_1 | 0;
       $10_1 = HEAP32[$6_1 >> 2];
       $380($5_1 + 32 | 0, $5_1 + 160 | 0, $6_1 + -64 | 0);
       $7_1 = $5_1 + 40 | 0;
       $6_1 = HEAP32[$7_1 + 4 >> 2];
       $8_1 = $5_1 + 104 | 0;
       HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[$8_1 + 4 >> 2] = $6_1;
       $6_1 = HEAP32[$1_1 + 4 >> 2];
       HEAP32[$18_1 >> 2] = HEAP32[$1_1 >> 2];
       HEAP32[$18_1 + 4 >> 2] = $6_1;
       $7_1 = $1_1 + 8 | 0;
       $6_1 = HEAP32[$7_1 + 4 >> 2];
       $8_1 = $18_1 + 8 | 0;
       HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[$8_1 + 4 >> 2] = $6_1;
       $6_1 = HEAP32[$9_1 + 4 >> 2];
       HEAP32[$17_1 >> 2] = HEAP32[$9_1 >> 2];
       HEAP32[$17_1 + 4 >> 2] = $6_1;
       $7_1 = $9_1 + 8 | 0;
       $6_1 = HEAP32[$7_1 + 4 >> 2];
       $8_1 = $17_1 + 8 | 0;
       HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[$8_1 + 4 >> 2] = $6_1;
       $6_1 = HEAP32[$11_1 + 4 >> 2];
       HEAP32[$16_1 >> 2] = HEAP32[$11_1 >> 2];
       HEAP32[$16_1 + 4 >> 2] = $6_1;
       $7_1 = $11_1 + 8 | 0;
       $6_1 = HEAP32[$7_1 + 4 >> 2];
       $8_1 = $16_1 + 8 | 0;
       HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
       HEAP32[$8_1 + 4 >> 2] = $6_1;
       $6_1 = HEAP32[$5_1 + 36 >> 2];
       HEAP32[$5_1 + 96 >> 2] = HEAP32[$5_1 + 32 >> 2];
       HEAP32[$5_1 + 100 >> 2] = $6_1;
       FUNCTION_TABLE[HEAP32[HEAP32[$10_1 >> 2] + 8 >> 2]]($10_1, $5_1 + 96 | 0, $5_1 + 240 | 0, $5_1 + 224 | 0);
       $6_1 = HEAP32[$14_1 + 4 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 8 >> 2]]($6_1, HEAP32[$14_1 + 12 >> 2], $5_1 + 16 | 0, $5_1);
       if ($308(HEAPF32[$5_1 + 240 >> 2], HEAPF32[$5_1 + 244 >> 2], HEAPF32[$5_1 + 248 >> 2], HEAPF32[$5_1 + 224 >> 2], HEAPF32[$5_1 + 228 >> 2], HEAPF32[$5_1 + 232 >> 2], $5_1 + 16 | 0, $5_1)) {
        break label$17
       }
       $6_1 = HEAP32[HEAP32[$0_1 + 60 >> 2] + $2_1 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] >> 2]]($6_1) | 0;
       $6_1 = HEAP32[$0_1 + 4 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 60 >> 2]]($6_1, HEAP32[HEAP32[$0_1 + 60 >> 2] + $2_1 >> 2]);
       HEAP32[HEAP32[$0_1 + 60 >> 2] + $2_1 >> 2] = 0;
      }
      $4_1 = $4_1 - 1 | 0;
      $3_1 = $3_1 + 80 | 0;
      $2_1 = $2_1 + 4 | 0;
      continue;
     };
    }
    $3_1 = $3_1 + 1 | 0;
    continue;
   };
  }
  global$0 = $5_1 + 288 | 0;
 }
 
 function $415($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   if (($2_1 | 0) > 0) {
    break label$1
   }
   if (($2_1 | 0) <= -1) {
    $110($0_1, 0)
   }
   $3_1 = $2_1 << 2;
   while (1) {
    if (!$2_1) {
     break label$1
    }
    HEAP32[HEAP32[$0_1 + 12 >> 2] + $3_1 >> 2] = HEAP32[$1_1 >> 2];
    $3_1 = $3_1 + 4 | 0;
    $2_1 = $2_1 + 1 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 4 >> 2] = 0;
 }
 
 function $416($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0;
  $3_1 = global$0 - 224 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[$0_1 + 4 >> 2];
  $7_1 = HEAP32[$4_1 + 4 >> 2];
  $4_1 = HEAP32[$4_1 + 12 >> 2];
  $6_1 = $4_1 + 8 | 0;
  $9_1 = HEAP32[$6_1 + 4 >> 2];
  $5_1 = $3_1 + 168 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $9_1;
  $6_1 = $4_1 + 24 | 0;
  $9_1 = HEAP32[$6_1 + 4 >> 2];
  $5_1 = $3_1 + 184 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $9_1;
  $6_1 = $4_1 + 40 | 0;
  $9_1 = HEAP32[$6_1 + 4 >> 2];
  $5_1 = $3_1 + 200 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $9_1;
  $6_1 = $4_1 + 56 | 0;
  $9_1 = HEAP32[$6_1 + 4 >> 2];
  $5_1 = $3_1 + 216 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $9_1;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$3_1 + 160 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$3_1 + 164 >> 2] = $5_1;
  $5_1 = HEAP32[$4_1 + 20 >> 2];
  HEAP32[$3_1 + 176 >> 2] = HEAP32[$4_1 + 16 >> 2];
  HEAP32[$3_1 + 180 >> 2] = $5_1;
  $5_1 = HEAP32[$4_1 + 36 >> 2];
  HEAP32[$3_1 + 192 >> 2] = HEAP32[$4_1 + 32 >> 2];
  HEAP32[$3_1 + 196 >> 2] = $5_1;
  $5_1 = HEAP32[$4_1 + 52 >> 2];
  HEAP32[$3_1 + 208 >> 2] = HEAP32[$4_1 + 48 >> 2];
  HEAP32[$3_1 + 212 >> 2] = $5_1;
  $380($3_1 + 96 | 0, $3_1 + 160 | 0, HEAP32[$7_1 + 28 >> 2] + Math_imul($2_1, 80) | 0);
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $3_1 + 96 | 0, $3_1 + 80 | 0, $3_1 - -64 | 0);
  $8_1 = HEAPF32[HEAP32[$0_1 + 20 >> 2] + 32 >> 2];
  HEAPF32[$3_1 + 80 >> 2] = HEAPF32[$3_1 + 80 >> 2] - $8_1;
  HEAPF32[$3_1 + 84 >> 2] = HEAPF32[$3_1 + 84 >> 2] - $8_1;
  HEAPF32[$3_1 + 88 >> 2] = HEAPF32[$3_1 + 88 >> 2] - $8_1;
  HEAPF32[$3_1 + 64 >> 2] = $8_1 + HEAPF32[$3_1 + 64 >> 2];
  HEAPF32[$3_1 + 68 >> 2] = $8_1 + HEAPF32[$3_1 + 68 >> 2];
  HEAPF32[$3_1 + 72 >> 2] = $8_1 + HEAPF32[$3_1 + 72 >> 2];
  $4_1 = HEAP32[$0_1 + 8 >> 2];
  $7_1 = HEAP32[$4_1 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 8 >> 2]]($7_1, HEAP32[$4_1 + 12 >> 2], $3_1 + 48 | 0, $3_1 + 32 | 0);
  if ($308(HEAPF32[$3_1 + 80 >> 2], HEAPF32[$3_1 + 84 >> 2], HEAPF32[$3_1 + 88 >> 2], HEAPF32[$3_1 + 64 >> 2], HEAPF32[$3_1 + 68 >> 2], HEAPF32[$3_1 + 72 >> 2], $3_1 + 48 | 0, $3_1 + 32 | 0)) {
   HEAP32[$3_1 + 28 >> 2] = $2_1;
   HEAP32[$3_1 + 24 >> 2] = -1;
   HEAP32[$3_1 + 12 >> 2] = $1_1;
   $1_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$3_1 + 8 >> 2] = $1_1;
   HEAP32[$3_1 + 16 >> 2] = HEAP32[$1_1 + 8 >> 2];
   $8_1 = HEAPF32[HEAP32[$0_1 + 20 >> 2] + 32 >> 2];
   HEAP32[$3_1 + 20 >> 2] = $3_1 + 96;
   label$2 : {
    if ($8_1 > Math_fround(0.0)) {
     $1_1 = HEAP32[$0_1 + 12 >> 2];
     $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $3_1 + 8 | 0, HEAP32[$0_1 + 8 >> 2], 0, 2) | 0;
     break label$2;
    }
    $4_1 = $2_1 << 2;
    $1_1 = HEAP32[$4_1 + HEAP32[$0_1 + 24 >> 2] >> 2];
    if ($1_1) {
     break label$2
    }
    $1_1 = HEAP32[$0_1 + 12 >> 2];
    $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $3_1 + 8 | 0, HEAP32[$0_1 + 8 >> 2], HEAP32[$0_1 + 28 >> 2], 1) | 0;
    HEAP32[$4_1 + HEAP32[$0_1 + 24 >> 2] >> 2] = $1_1;
    $1_1 = HEAP32[$4_1 + HEAP32[$0_1 + 24 >> 2] >> 2];
   }
   $4_1 = HEAP32[$0_1 + 20 >> 2];
   $7_1 = HEAP32[$4_1 + 8 >> 2];
   label$4 : {
    if (HEAP32[$7_1 + 8 >> 2] == HEAP32[HEAP32[$0_1 + 4 >> 2] + 8 >> 2]) {
     HEAP32[$4_1 + 8 >> 2] = $3_1 + 8;
     FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 8 >> 2]]($4_1, -1, $2_1);
     break label$4;
    }
    $7_1 = HEAP32[$4_1 + 12 >> 2];
    HEAP32[$4_1 + 12 >> 2] = $3_1 + 8;
    FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 12 >> 2]]($4_1, -1, $2_1);
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $3_1 + 8 | 0, HEAP32[$0_1 + 8 >> 2], HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 20 >> 2]);
   $1_1 = HEAP32[$0_1 + 20 >> 2];
   HEAP32[(HEAP32[HEAP32[$1_1 + 8 >> 2] + 8 >> 2] == HEAP32[HEAP32[$0_1 + 4 >> 2] + 8 >> 2] ? 8 : 12) + $1_1 >> 2] = $7_1;
  }
  global$0 = $3_1 + 224 | 0;
 }
 
 function $417($0_1, $1_1) {
  var $2_1 = 0;
  label$1 : {
   if (!(HEAPF32[$0_1 >> 2] <= HEAPF32[$1_1 + 16 >> 2])) {
    break label$1
   }
   if (!(HEAPF32[$0_1 + 16 >> 2] >= HEAPF32[$1_1 >> 2])) {
    break label$1
   }
   if (!(HEAPF32[$0_1 + 4 >> 2] <= HEAPF32[$1_1 + 20 >> 2])) {
    break label$1
   }
   if (!(HEAPF32[$0_1 + 20 >> 2] >= HEAPF32[$1_1 + 4 >> 2])) {
    break label$1
   }
   if (!(HEAPF32[$0_1 + 8 >> 2] <= HEAPF32[$1_1 + 24 >> 2])) {
    break label$1
   }
   $2_1 = HEAPF32[$0_1 + 24 >> 2] >= HEAPF32[$1_1 + 8 >> 2];
  }
  return $2_1;
 }
 
 function $418($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = Math_fround(0), $23_1 = 0, $24_1 = 0, $25 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = Math_fround(0), $30_1 = 0, $31_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  $5_1 = HEAPU8[$0_1 + 68 | 0];
  $30_1 = $5_1 ? $1_1 : $2_1;
  $14_1 = HEAP32[$0_1 + 52 >> 2];
  $23_1 = ($14_1 | 0) > 0 ? $14_1 : 0;
  $9_1 = $5_1 ? $2_1 : $1_1;
  $10_1 = $9_1 + 52 | 0;
  $11_1 = $9_1 + 36 | 0;
  $12_1 = $9_1 + 20 | 0;
  $13_1 = $9_1 + 4 | 0;
  $31_1 = HEAP32[$9_1 + 192 >> 2];
  $14_1 = $7_1 + 48 | 0;
  $2_1 = $7_1 + 32 | 0;
  $1_1 = $7_1 + 16 | 0;
  $15_1 = $7_1 + 112 | 0;
  $16_1 = $7_1 + 96 | 0;
  $17_1 = $7_1 + 80 | 0;
  $22_1 = Math_fround(1.0);
  while (1) {
   if ($23_1) {
    $5_1 = HEAP32[$12_1 + 4 >> 2];
    HEAP32[$17_1 >> 2] = HEAP32[$12_1 >> 2];
    HEAP32[$17_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$11_1 + 4 >> 2];
    HEAP32[$16_1 >> 2] = HEAP32[$11_1 >> 2];
    HEAP32[$16_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$10_1 + 4 >> 2];
    HEAP32[$15_1 >> 2] = HEAP32[$10_1 >> 2];
    HEAP32[$15_1 + 4 >> 2] = $5_1;
    $18_1 = $13_1 + 8 | 0;
    $6_1 = $18_1;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    $24_1 = $7_1 + 72 | 0;
    $8_1 = $24_1;
    HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $5_1;
    $19_1 = $12_1 + 8 | 0;
    $6_1 = $19_1;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    $25 = $17_1 + 8 | 0;
    $8_1 = $25;
    HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $5_1;
    $20_1 = $11_1 + 8 | 0;
    $6_1 = $20_1;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    $26_1 = $16_1 + 8 | 0;
    $8_1 = $26_1;
    HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $5_1;
    $21_1 = $10_1 + 8 | 0;
    $6_1 = $21_1;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    $8_1 = $15_1 + 8 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$13_1 + 4 >> 2];
    HEAP32[$7_1 + 64 >> 2] = HEAP32[$13_1 >> 2];
    HEAP32[$7_1 + 68 >> 2] = $5_1;
    $380($7_1, $7_1 - -64 | 0, HEAP32[$31_1 + 28 >> 2] + $27_1 | 0);
    $5_1 = HEAP32[$7_1 + 4 >> 2];
    HEAP32[$13_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$13_1 + 4 >> 2] = $5_1;
    $6_1 = $7_1 + 8 | 0;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    HEAP32[$18_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$18_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$12_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $5_1;
    $6_1 = $1_1 + 8 | 0;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    HEAP32[$19_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$19_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$11_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$11_1 + 4 >> 2] = $5_1;
    $6_1 = $2_1 + 8 | 0;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    HEAP32[$20_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$20_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$14_1 + 4 >> 2];
    HEAP32[$10_1 >> 2] = HEAP32[$14_1 >> 2];
    HEAP32[$10_1 + 4 >> 2] = $5_1;
    $6_1 = $14_1 + 8 | 0;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    HEAP32[$21_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$21_1 + 4 >> 2] = $5_1;
    HEAP32[$9_1 + 304 >> 2] = HEAP32[$9_1 + 304 >> 2] + 1;
    $5_1 = HEAP32[HEAP32[$0_1 + 60 >> 2] + $28_1 >> 2];
    $29_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 12 >> 2]]($5_1, $9_1, $30_1, $3_1, $4_1));
    $5_1 = HEAP32[$7_1 + 68 >> 2];
    HEAP32[$13_1 >> 2] = HEAP32[$7_1 + 64 >> 2];
    HEAP32[$13_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$24_1 + 4 >> 2];
    HEAP32[$18_1 >> 2] = HEAP32[$24_1 >> 2];
    HEAP32[$18_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$17_1 + 4 >> 2];
    HEAP32[$12_1 >> 2] = HEAP32[$17_1 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$25 + 4 >> 2];
    HEAP32[$19_1 >> 2] = HEAP32[$25 >> 2];
    HEAP32[$19_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$16_1 + 4 >> 2];
    HEAP32[$11_1 >> 2] = HEAP32[$16_1 >> 2];
    HEAP32[$11_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$26_1 + 4 >> 2];
    HEAP32[$20_1 >> 2] = HEAP32[$26_1 >> 2];
    HEAP32[$20_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$15_1 + 4 >> 2];
    HEAP32[$10_1 >> 2] = HEAP32[$15_1 >> 2];
    HEAP32[$10_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$8_1 + 4 >> 2];
    HEAP32[$21_1 >> 2] = HEAP32[$8_1 >> 2];
    HEAP32[$21_1 + 4 >> 2] = $5_1;
    HEAP32[$9_1 + 304 >> 2] = HEAP32[$9_1 + 304 >> 2] + 1;
    $22_1 = $22_1 > $29_1 ? $29_1 : $22_1;
    $23_1 = $23_1 - 1 | 0;
    $28_1 = $28_1 + 4 | 0;
    $27_1 = $27_1 + 80 | 0;
    continue;
   }
   break;
  };
  global$0 = $7_1 + 128 | 0;
  return Math_fround($22_1);
 }
 
 function $419($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  while (1) {
   if (HEAP32[$0_1 + 52 >> 2] > ($3_1 | 0)) {
    $2_1 = HEAP32[HEAP32[$0_1 + 60 >> 2] + $4_1 >> 2];
    if ($2_1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1)
    }
    $4_1 = $4_1 + 4 | 0;
    $3_1 = $3_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $420($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = HEAP32[HEAP32[HEAP32[$0_1 + 4 >> 2] + 4 >> 2] + 28 >> 2];
  $0_1 = HEAP32[$1_1 + 36 >> 2];
  $416($2_1, HEAP32[($3_1 + Math_imul($0_1, 80) | 0) + 64 >> 2], $0_1);
 }
 
 function $421($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $5_1 = HEAP32[$0_1 + 28 >> 2];
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   if (($5_1 | 0) >= ($1_1 | 0)) {
    break label$1
   }
   HEAP32[$3_1 + 12 >> 2] = 0;
   $140($0_1 + 24 | 0, $1_1, $3_1 + 12 | 0);
   HEAP32[$3_1 + 8 >> 2] = 0;
   $140($0_1 + 44 | 0, $1_1, $3_1 + 8 | 0);
   $2_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
   $1_1 = $2_1;
   while (1) if ($1_1) {
    HEAP32[HEAP32[$0_1 + 36 >> 2] + $4_1 >> 2] = -1;
    $1_1 = $1_1 - 1 | 0;
    $4_1 = $4_1 + 4 | 0;
    continue;
   } else {
    $1_1 = 0;
    while (1) if ($2_1) {
     HEAP32[HEAP32[$0_1 + 56 >> 2] + $1_1 >> 2] = -1;
     $2_1 = $2_1 - 1 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue;
    } else {
     $1_1 = 0;
     $5_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
     $4_1 = 0;
     $2_1 = 0;
     while (1) {
      if (($2_1 | 0) == ($5_1 | 0)) {
       break label$1
      }
      $7_1 = HEAP32[$0_1 + 56 >> 2] + $1_1 | 0;
      $6_1 = HEAP32[$0_1 + 16 >> 2] + $4_1 | 0;
      $6_1 = HEAP32[$0_1 + 36 >> 2] + ((HEAP32[$0_1 + 12 >> 2] - 1 & $422(HEAP32[$6_1 >> 2], HEAP32[$6_1 + 4 >> 2])) << 2) | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$6_1 >> 2] = $2_1;
      $1_1 = $1_1 + 4 | 0;
      $4_1 = $4_1 + 12 | 0;
      $2_1 = $2_1 + 1 | 0;
      continue;
     };
    };
   };
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $422($0_1, $1_1) {
  $0_1 = $1_1 << 16 | $0_1;
  $0_1 = ($0_1 << 15 ^ -1) + $0_1 | 0;
  $0_1 = Math_imul($0_1 >>> 10 ^ $0_1, 9);
  $0_1 = $0_1 >>> 6 ^ $0_1;
  $0_1 = ($0_1 << 11 ^ -1) + $0_1 | 0;
  return $0_1 >>> 16 ^ $0_1;
 }
 
 function $423($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 12964;
  $57($0_1 + 44 | 0);
  $57($0_1 + 24 | 0);
  $57($0_1 + 4 | 0);
  return $0_1 | 0;
 }
 
 function $424($0_1) {
  $0_1 = $0_1 | 0;
  $17($423($0_1));
 }
 
 function $425($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  HEAP32[5173] = HEAP32[5173] + 1;
  $4_1 = -1;
  $9_1 = HEAP32[$0_1 + 16 >> 2];
  $7_1 = HEAP32[$0_1 + 36 >> 2];
  $5_1 = HEAP32[$0_1 + 56 >> 2];
  $3_1 = $1_1;
  $1_1 = HEAP32[$0_1 + 12 >> 2] - 1 & $422($1_1, $2_1);
  $8_1 = $426($9_1, $7_1, $5_1, $3_1, $2_1, $1_1);
  if ($8_1) {
   $6_1 = ($8_1 - $9_1 | 0) / 12 | 0;
   $11_1 = HEAP32[$8_1 + 8 >> 2];
   $3_1 = $7_1 + ($1_1 << 2) | 0;
   $2_1 = $3_1;
   while (1) {
    $1_1 = HEAP32[$2_1 >> 2];
    if (($6_1 | 0) != ($1_1 | 0)) {
     $2_1 = ($1_1 << 2) + $5_1 | 0;
     $4_1 = $1_1;
     continue;
    }
    break;
   };
   $1_1 = -1;
   HEAP32[(($4_1 | 0) == -1 ? $3_1 : ($4_1 << 2) + $5_1 | 0) >> 2] = HEAP32[($6_1 << 2) + $5_1 >> 2];
   $4_1 = $0_1;
   $3_1 = HEAP32[$0_1 + 8 >> 2] - 1 | 0;
   if (($3_1 | 0) != ($6_1 | 0)) {
    $0_1 = Math_imul($3_1, 12) + $9_1 | 0;
    $10_1 = HEAP32[$4_1 + 12 >> 2] - 1 & $422(HEAP32[$0_1 >> 2], HEAP32[$0_1 + 4 >> 2]);
    $7_1 = $7_1 + ($10_1 << 2) | 0;
    $2_1 = $7_1;
    while (1) {
     $0_1 = HEAP32[$2_1 >> 2];
     if (($3_1 | 0) != ($0_1 | 0)) {
      $2_1 = ($0_1 << 2) + $5_1 | 0;
      $1_1 = $0_1;
      continue;
     }
     break;
    };
    HEAP32[(($1_1 | 0) == -1 ? $7_1 : ($1_1 << 2) + $5_1 | 0) >> 2] = HEAP32[($3_1 << 2) + $5_1 >> 2];
    $0_1 = Math_imul($3_1, 12) + $9_1 | 0;
    HEAP32[$8_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2];
    $1_1 = HEAP32[$0_1 + 4 >> 2];
    HEAP32[$8_1 >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $1_1;
    $0_1 = HEAP32[$4_1 + 36 >> 2] + ($10_1 << 2) | 0;
    HEAP32[HEAP32[$4_1 + 56 >> 2] + ($6_1 << 2) >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$0_1 >> 2] = $6_1;
    $6_1 = HEAP32[$4_1 + 8 >> 2] - 1 | 0;
   }
   HEAP32[$4_1 + 8 >> 2] = $6_1;
  }
  return $11_1 | 0;
 }
 
 function $426($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $1_1 = ($5_1 << 2) + $1_1 | 0;
  while (1) {
   label$2 : {
    $1_1 = HEAP32[$1_1 >> 2];
    if (($1_1 | 0) == -1) {
     $5_1 = 0;
     break label$2;
    }
    $5_1 = Math_imul($1_1, 12) + $0_1 | 0;
    if (HEAP32[$5_1 + 4 >> 2] == ($4_1 | 0) ? HEAP32[$5_1 >> 2] == ($3_1 | 0) : 0) {
     break label$2
    }
    $1_1 = ($1_1 << 2) + $2_1 | 0;
    continue;
   }
   break;
  };
  return $5_1;
 }
 
 function $427($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  HEAP32[5172] = HEAP32[5172] + 1;
  $4_1 = HEAP32[$0_1 + 12 >> 2];
  $6_1 = HEAP32[$0_1 + 16 >> 2];
  $3_1 = HEAP32[$0_1 + 36 >> 2];
  $5_1 = HEAP32[$0_1 + 56 >> 2];
  $8_1 = $422($1_1, $2_1);
  $7_1 = $8_1 & $4_1 - 1;
  $3_1 = $426($6_1, $3_1, $5_1, $1_1, $2_1, $7_1);
  if (!$3_1) {
   $9_1 = $4_1;
   $5_1 = HEAP32[$0_1 + 8 >> 2];
   $3_1 = $5_1;
   if (($4_1 | 0) == ($3_1 | 0)) {
    $117($0_1 + 4 | 0, $4_1 ? $4_1 << 1 : 1);
    $6_1 = HEAP32[$0_1 + 16 >> 2];
    $3_1 = HEAP32[$0_1 + 8 >> 2];
    $9_1 = HEAP32[$0_1 + 12 >> 2];
   }
   HEAP32[$0_1 + 8 >> 2] = $3_1 + 1;
   $3_1 = Math_imul($5_1, 12) + $6_1 | 0;
   if (($4_1 | 0) < ($9_1 | 0)) {
    $421($0_1);
    $7_1 = HEAP32[$0_1 + 12 >> 2] - 1 & $8_1;
   }
   HEAP32[$3_1 + 8 >> 2] = 0;
   HEAP32[$3_1 >> 2] = $1_1;
   HEAP32[$3_1 + 4 >> 2] = $2_1;
   $1_1 = HEAP32[$0_1 + 56 >> 2] + ($5_1 << 2) | 0;
   $0_1 = HEAP32[$0_1 + 36 >> 2] + ($7_1 << 2) | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$0_1 >> 2] = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $428($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 16 >> 2];
 }
 
 function $429($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 13028;
  $430($0_1);
  $1_1 = HEAP32[$0_1 + 84 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $54(HEAP32[$0_1 + 84 >> 2]);
  $57($0_1 + 88 | 0);
  $411($0_1);
  return $0_1 | 0;
 }
 
 function $430($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = 8;
  $4_1 = HEAP32[$0_1 + 84 >> 2];
  $2_1 = HEAP32[$4_1 + 8 >> 2];
  $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
  while (1) {
   if ($2_1) {
    $3_1 = HEAP32[HEAP32[$4_1 + 16 >> 2] + $1_1 >> 2];
    if ($3_1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] >> 2]]($3_1) | 0;
     $5_1 = HEAP32[$0_1 + 4 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 60 >> 2]]($5_1, $3_1);
    }
    $2_1 = $2_1 - 1 | 0;
    $1_1 = $1_1 + 12 | 0;
    continue;
   }
   break;
  };
  $0_1 = HEAP32[$0_1 + 84 >> 2];
  $1_1 = $0_1 + 4 | 0;
  $57($1_1);
  $57($0_1 + 24 | 0);
  $57($0_1 + 44 | 0);
  $117($1_1, 2);
  $421($0_1);
 }
 
 function $431($0_1) {
  $0_1 = $0_1 | 0;
  $17($429($0_1));
 }
 
 function $432($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0;
  $5_1 = global$0 - 3792 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    $37_1 = HEAP32[$1_1 + 4 >> 2];
    $14_1 = HEAP32[$37_1 + 68 >> 2];
    if ($14_1) {
     $38_1 = HEAP32[$2_1 + 4 >> 2];
     $13_1 = HEAP32[$38_1 + 68 >> 2];
     if ($13_1) {
      break label$2
     }
    }
    $414($0_1, $1_1, $2_1, $3_1, $4_1);
    break label$1;
   }
   if (!(HEAP32[$38_1 + 72 >> 2] == HEAP32[$0_1 + 112 >> 2] ? HEAP32[$37_1 + 72 >> 2] == HEAP32[$0_1 + 108 >> 2] : 0)) {
    $430($0_1);
    HEAP32[$0_1 + 108 >> 2] = HEAP32[$37_1 + 72 >> 2];
    HEAP32[$0_1 + 112 >> 2] = HEAP32[$38_1 + 72 >> 2];
   }
   HEAP32[$5_1 + 212 >> 2] = 0;
   HEAP8[$5_1 + 216 | 0] = 1;
   HEAP32[$5_1 + 204 >> 2] = 0;
   HEAP32[$5_1 + 208 >> 2] = 0;
   $9_1 = $5_1 + 3776 | 0;
   $7_1 = $5_1 + 304 | 0;
   while (1) {
    HEAP32[$7_1 >> 2] = 1025;
    $6_1 = 120;
    while (1) {
     $1($6_1 + $7_1 | 0, 0, 52);
     $6_1 = $6_1 + 208 | 0;
     if (($6_1 | 0) != 952) {
      continue
     }
     break;
    };
    HEAP32[$7_1 + 864 >> 2] = 0;
    HEAP32[$7_1 + 844 >> 2] = 0;
    HEAP32[$7_1 + 836 >> 2] = 0;
    HEAP32[$7_1 + 840 >> 2] = 0;
    $7_1 = $7_1 + 868 | 0;
    if (($9_1 | 0) != ($7_1 | 0)) {
     continue
    }
    break;
   };
   $57($5_1 + 200 | 0);
   HEAP8[$5_1 + 216 | 0] = 0;
   HEAP32[$5_1 + 204 >> 2] = 0;
   HEAP32[$5_1 + 208 >> 2] = 4;
   HEAP32[$5_1 + 212 >> 2] = $5_1 + 304;
   $8_1 = HEAP32[$0_1 + 84 >> 2];
   $9_1 = 0;
   while (1) {
    label$9 : {
     if (HEAP32[$8_1 + 8 >> 2] > ($9_1 | 0)) {
      $7_1 = HEAP32[(HEAP32[$8_1 + 16 >> 2] + Math_imul($9_1, 12) | 0) + 8 >> 2];
      if (!$7_1) {
       break label$9
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 16 >> 2]]($7_1, $5_1 + 200 | 0);
      $7_1 = 0;
      $6_1 = 0;
      while (1) {
       if (HEAP32[$5_1 + 204 >> 2] <= ($6_1 | 0)) {
        HEAP32[$5_1 + 64 >> 2] = 0;
        $415($5_1 + 200 | 0, $5_1 - -64 | 0);
        break label$9;
       }
       $10_1 = HEAP32[HEAP32[$5_1 + 212 >> 2] + $7_1 >> 2];
       if (HEAP32[$10_1 + 844 >> 2]) {
        HEAP32[$4_1 + 4 >> 2] = $10_1;
        $370($4_1);
        HEAP32[$4_1 + 4 >> 2] = 0;
       }
       $7_1 = $7_1 + 4 | 0;
       $6_1 = $6_1 + 1 | 0;
       continue;
      };
     }
     $57($5_1 + 200 | 0);
     HEAP32[$5_1 + 284 >> 2] = $3_1;
     HEAP32[$5_1 + 268 >> 2] = 0;
     HEAP32[$5_1 + 264 >> 2] = 13068;
     HEAP32[$5_1 + 296 >> 2] = HEAP32[$0_1 + 72 >> 2];
     HEAP32[$5_1 + 292 >> 2] = HEAP32[$0_1 + 84 >> 2];
     HEAP32[$5_1 + 280 >> 2] = HEAP32[$0_1 + 4 >> 2];
     HEAP32[$5_1 + 288 >> 2] = $4_1;
     HEAP32[$5_1 + 276 >> 2] = $2_1;
     HEAP32[$5_1 + 272 >> 2] = $1_1;
     $379($5_1 + 304 | 0, HEAP32[$1_1 + 12 >> 2]);
     $380($5_1 + 200 | 0, $5_1 + 304 | 0, HEAP32[$2_1 + 12 >> 2]);
     $3_1 = HEAP32[$14_1 >> 2];
     label$14 : {
      if (!$3_1) {
       break label$14
      }
      $7_1 = HEAP32[$13_1 >> 2];
      if (!$7_1) {
       break label$14
      }
      $11_1 = HEAPF32[$4_1 + 32 >> 2];
      HEAP32[$5_1 + 12 >> 2] = 0;
      HEAP8[$5_1 + 16 | 0] = 1;
      HEAP32[$5_1 + 4 >> 2] = 0;
      HEAP32[$5_1 + 8 >> 2] = 0;
      $57($5_1);
      HEAP8[$5_1 + 16 | 0] = 0;
      HEAP32[$5_1 + 4 >> 2] = 128;
      HEAP32[$5_1 + 8 >> 2] = 128;
      HEAP32[$5_1 + 308 >> 2] = $7_1;
      HEAP32[$5_1 + 304 >> 2] = $3_1;
      HEAP32[$5_1 + 12 >> 2] = $5_1 + 304;
      $14_1 = 124;
      $13_1 = 128;
      $6_1 = $5_1 + 304 | 0;
      $9_1 = 1;
      while (1) {
       $7_1 = $9_1 - 1 | 0;
       $8_1 = $7_1 << 3;
       $6_1 = $8_1 + $6_1 | 0;
       $3_1 = HEAP32[$6_1 + 4 >> 2];
       $24_1 = HEAPF32[$3_1 >> 2];
       $25 = HEAPF32[$3_1 + 16 >> 2];
       $26_1 = HEAPF32[$3_1 + 8 >> 2];
       $27_1 = HEAPF32[$3_1 + 24 >> 2];
       $28_1 = HEAPF32[$3_1 + 4 >> 2];
       $29_1 = HEAPF32[$3_1 + 20 >> 2];
       $6_1 = HEAP32[$6_1 >> 2];
       $171($5_1 - -64 | 0, $5_1 + 200 | 0);
       $78($5_1 + 176 | 0, $5_1 + 200 | 0, Math_fround(Math_fround($25 + $24_1) * Math_fround(.5)), Math_fround(Math_fround($29_1 + $28_1) * Math_fround(.5)), Math_fround(Math_fround($27_1 + $26_1) * Math_fround(.5)));
       $80($5_1 + 3776 | 0, Math_fround(Math_fround(Math_fround($25 - $24_1) * Math_fround(.5)) + Math_fround(0.0)), Math_fround(Math_fround(Math_fround($29_1 - $28_1) * Math_fround(.5)) + Math_fround(0.0)), Math_fround(Math_fround(Math_fround($27_1 - $26_1) * Math_fround(.5)) + Math_fround(0.0)), HEAPF32[$5_1 + 64 >> 2], HEAPF32[$5_1 + 68 >> 2], HEAPF32[$5_1 + 72 >> 2], HEAPF32[$5_1 + 80 >> 2], HEAPF32[$5_1 + 84 >> 2], HEAPF32[$5_1 + 88 >> 2], HEAPF32[$5_1 + 96 >> 2], HEAPF32[$5_1 + 100 >> 2], HEAPF32[$5_1 + 104 >> 2]);
       $24_1 = HEAPF32[$5_1 + 3776 >> 2];
       $25 = HEAPF32[$5_1 + 176 >> 2];
       $26_1 = HEAPF32[$5_1 + 3780 >> 2];
       $27_1 = HEAPF32[$5_1 + 180 >> 2];
       $28_1 = HEAPF32[$5_1 + 3784 >> 2];
       $29_1 = HEAPF32[$5_1 + 184 >> 2];
       HEAP32[$5_1 + 92 >> 2] = 0;
       HEAPF32[$5_1 + 88 >> 2] = $11_1 + Math_fround($29_1 + $28_1);
       HEAPF32[$5_1 + 84 >> 2] = $11_1 + Math_fround($27_1 + $26_1);
       HEAPF32[$5_1 + 80 >> 2] = $11_1 + Math_fround($25 + $24_1);
       HEAP32[$5_1 + 76 >> 2] = 0;
       HEAPF32[$5_1 + 72 >> 2] = Math_fround($29_1 - $28_1) - $11_1;
       HEAPF32[$5_1 + 68 >> 2] = Math_fround($27_1 - $26_1) - $11_1;
       HEAPF32[$5_1 + 64 >> 2] = Math_fround($25 - $24_1) - $11_1;
       label$16 : {
        if (!$417($6_1, $5_1 - -64 | 0)) {
         break label$16
        }
        if (($7_1 | 0) > ($14_1 | 0)) {
         $433($5_1, $13_1 << 1, $5_1 - -64 | 0);
         $13_1 = HEAP32[$5_1 + 4 >> 2];
         $14_1 = $13_1 - 4 | 0;
        }
        $10_1 = HEAP32[$3_1 + 40 >> 2];
        if (HEAP32[$6_1 + 40 >> 2]) {
         $7_1 = HEAP32[$6_1 + 36 >> 2];
         if ($10_1) {
          $17_1 = $8_1;
          $8_1 = HEAP32[$5_1 + 12 >> 2];
          $10_1 = $17_1 + $8_1 | 0;
          HEAP32[$10_1 + 4 >> 2] = HEAP32[$3_1 + 36 >> 2];
          HEAP32[$10_1 >> 2] = $7_1;
          $10_1 = HEAP32[$3_1 + 36 >> 2];
          $7_1 = $8_1 + ($9_1 << 3) | 0;
          HEAP32[$7_1 >> 2] = HEAP32[$6_1 + 40 >> 2];
          HEAP32[$7_1 + 4 >> 2] = $10_1;
          $8_1 = HEAP32[$3_1 + 40 >> 2];
          HEAP32[$7_1 + 8 >> 2] = HEAP32[$6_1 + 36 >> 2];
          HEAP32[$7_1 + 12 >> 2] = $8_1;
          $3_1 = HEAP32[$3_1 + 40 >> 2];
          HEAP32[$7_1 + 16 >> 2] = HEAP32[$6_1 + 40 >> 2];
          HEAP32[$7_1 + 20 >> 2] = $3_1;
          $7_1 = $9_1 + 3 | 0;
          break label$16;
         }
         $17_1 = $8_1;
         $8_1 = HEAP32[$5_1 + 12 >> 2];
         $10_1 = $17_1 + $8_1 | 0;
         HEAP32[$10_1 + 4 >> 2] = $3_1;
         HEAP32[$10_1 >> 2] = $7_1;
         $7_1 = $8_1 + ($9_1 << 3) | 0;
         HEAP32[$7_1 >> 2] = HEAP32[$6_1 + 40 >> 2];
         HEAP32[$7_1 + 4 >> 2] = $3_1;
         $7_1 = $9_1 + 1 | 0;
         break label$16;
        }
        if ($10_1) {
         $7_1 = HEAP32[$5_1 + 12 >> 2];
         $8_1 = $7_1 + $8_1 | 0;
         HEAP32[$8_1 + 4 >> 2] = HEAP32[$3_1 + 36 >> 2];
         HEAP32[$8_1 >> 2] = $6_1;
         $7_1 = $7_1 + ($9_1 << 3) | 0;
         HEAP32[$7_1 + 4 >> 2] = HEAP32[$3_1 + 40 >> 2];
         HEAP32[$7_1 >> 2] = $6_1;
         $7_1 = $9_1 + 1 | 0;
         break label$16;
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$5_1 + 264 >> 2] + 8 >> 2]]($5_1 + 264 | 0, $6_1, $3_1);
       }
       if ($7_1) {
        $6_1 = HEAP32[$5_1 + 12 >> 2];
        $9_1 = $7_1;
        continue;
       }
       break;
      };
      $57($5_1);
     }
     $39_1 = HEAP32[$0_1 + 84 >> 2];
     HEAP32[$5_1 + 188 >> 2] = 0;
     HEAP8[$5_1 + 192 | 0] = 1;
     HEAP32[$5_1 + 180 >> 2] = 0;
     HEAP32[$5_1 + 184 >> 2] = 0;
     $41_1 = $0_1 + 88 | 0;
     $9_1 = $5_1 + 112 | 0;
     $8_1 = $5_1 + 48 | 0;
     $14_1 = $5_1 + 96 | 0;
     $13_1 = $5_1 + 32 | 0;
     $10_1 = $5_1 + 80 | 0;
     $30_1 = $5_1 + 16 | 0;
     $31_1 = $5_1 + 352 | 0;
     $32_1 = $5_1 + 336 | 0;
     $33_1 = $5_1 + 320 | 0;
     $7_1 = 0;
     while (1) {
      if (HEAP32[$39_1 + 8 >> 2] <= ($42_1 | 0)) {
       $6_1 = 0;
       $7_1 = 0;
      } else {
       $20_1 = HEAP32[$39_1 + 16 >> 2] + $7_1 | 0;
       $21_1 = HEAP32[$20_1 + 8 >> 2];
       label$25 : {
        if (!$21_1) {
         break label$25
        }
        $6_1 = HEAP32[$1_1 + 12 >> 2];
        $3_1 = $6_1;
        $12_1 = HEAP32[$3_1 + 20 >> 2];
        HEAP32[$33_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
        HEAP32[$33_1 + 4 >> 2] = $12_1;
        $12_1 = HEAP32[$3_1 + 36 >> 2];
        HEAP32[$32_1 >> 2] = HEAP32[$3_1 + 32 >> 2];
        HEAP32[$32_1 + 4 >> 2] = $12_1;
        $12_1 = HEAP32[$3_1 + 52 >> 2];
        HEAP32[$31_1 >> 2] = HEAP32[$3_1 + 48 >> 2];
        HEAP32[$31_1 + 4 >> 2] = $12_1;
        $3_1 = $3_1 + 8 | 0;
        $18_1 = HEAP32[$3_1 + 4 >> 2];
        $12_1 = $5_1 + 312 | 0;
        HEAP32[$12_1 >> 2] = HEAP32[$3_1 >> 2];
        HEAP32[$12_1 + 4 >> 2] = $18_1;
        $18_1 = $6_1 + 24 | 0;
        $19_1 = HEAP32[$18_1 + 4 >> 2];
        $40_1 = $33_1 + 8 | 0;
        $3_1 = $40_1;
        HEAP32[$3_1 >> 2] = HEAP32[$18_1 >> 2];
        HEAP32[$3_1 + 4 >> 2] = $19_1;
        $19_1 = $6_1 + 40 | 0;
        $15_1 = HEAP32[$19_1 + 4 >> 2];
        $18_1 = $32_1 + 8 | 0;
        $3_1 = $18_1;
        HEAP32[$3_1 >> 2] = HEAP32[$19_1 >> 2];
        HEAP32[$3_1 + 4 >> 2] = $15_1;
        $15_1 = $6_1 + 56 | 0;
        $17_1 = HEAP32[$15_1 + 4 >> 2];
        $19_1 = $31_1 + 8 | 0;
        $3_1 = $19_1;
        HEAP32[$3_1 >> 2] = HEAP32[$15_1 >> 2];
        HEAP32[$3_1 + 4 >> 2] = $17_1;
        $3_1 = HEAP32[$6_1 + 4 >> 2];
        HEAP32[$5_1 + 304 >> 2] = HEAP32[$6_1 >> 2];
        HEAP32[$5_1 + 308 >> 2] = $3_1;
        $6_1 = HEAP32[$37_1 + 28 >> 2] + Math_imul(HEAP32[$20_1 >> 2], 80) | 0;
        $3_1 = HEAP32[$6_1 + 64 >> 2];
        $380($5_1, $5_1 + 304 | 0, $6_1);
        $15_1 = $5_1 + 8 | 0;
        $34_1 = HEAP32[$15_1 + 4 >> 2];
        $20_1 = $5_1 + 72 | 0;
        $6_1 = $20_1;
        HEAP32[$6_1 >> 2] = HEAP32[$15_1 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $34_1;
        $6_1 = HEAP32[$30_1 + 4 >> 2];
        HEAP32[$10_1 >> 2] = HEAP32[$30_1 >> 2];
        HEAP32[$10_1 + 4 >> 2] = $6_1;
        $34_1 = $30_1 + 8 | 0;
        $22_1 = $34_1;
        $35_1 = HEAP32[$22_1 + 4 >> 2];
        $17_1 = $10_1 + 8 | 0;
        $6_1 = $17_1;
        HEAP32[$6_1 >> 2] = HEAP32[$22_1 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $35_1;
        $6_1 = HEAP32[$13_1 + 4 >> 2];
        HEAP32[$14_1 >> 2] = HEAP32[$13_1 >> 2];
        HEAP32[$14_1 + 4 >> 2] = $6_1;
        $35_1 = $13_1 + 8 | 0;
        $23_1 = $35_1;
        $36_1 = HEAP32[$23_1 + 4 >> 2];
        $22_1 = $14_1 + 8 | 0;
        $6_1 = $22_1;
        HEAP32[$6_1 >> 2] = HEAP32[$23_1 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $36_1;
        $6_1 = HEAP32[$8_1 + 4 >> 2];
        HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2];
        HEAP32[$9_1 + 4 >> 2] = $6_1;
        $36_1 = $8_1 + 8 | 0;
        $16_1 = $36_1;
        $43_1 = HEAP32[$16_1 + 4 >> 2];
        $23_1 = $9_1 + 8 | 0;
        $6_1 = $23_1;
        HEAP32[$6_1 >> 2] = HEAP32[$16_1 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $43_1;
        $6_1 = HEAP32[$5_1 + 4 >> 2];
        HEAP32[$5_1 + 64 >> 2] = HEAP32[$5_1 >> 2];
        HEAP32[$5_1 + 68 >> 2] = $6_1;
        FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $5_1 - -64 | 0, $5_1 + 3776 | 0, $5_1 + 160 | 0);
        $11_1 = HEAPF32[$4_1 + 32 >> 2];
        HEAPF32[$5_1 + 3776 >> 2] = HEAPF32[$5_1 + 3776 >> 2] - $11_1;
        HEAPF32[$5_1 + 3780 >> 2] = HEAPF32[$5_1 + 3780 >> 2] - $11_1;
        HEAPF32[$5_1 + 3784 >> 2] = HEAPF32[$5_1 + 3784 >> 2] - $11_1;
        HEAPF32[$5_1 + 160 >> 2] = $11_1 + HEAPF32[$5_1 + 160 >> 2];
        HEAPF32[$5_1 + 164 >> 2] = $11_1 + HEAPF32[$5_1 + 164 >> 2];
        HEAPF32[$5_1 + 168 >> 2] = $11_1 + HEAPF32[$5_1 + 168 >> 2];
        $6_1 = HEAP32[$2_1 + 12 >> 2];
        $3_1 = $6_1;
        $16_1 = HEAP32[$3_1 + 20 >> 2];
        HEAP32[$33_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
        HEAP32[$33_1 + 4 >> 2] = $16_1;
        $16_1 = HEAP32[$3_1 + 36 >> 2];
        HEAP32[$32_1 >> 2] = HEAP32[$3_1 + 32 >> 2];
        HEAP32[$32_1 + 4 >> 2] = $16_1;
        $16_1 = HEAP32[$3_1 + 52 >> 2];
        HEAP32[$31_1 >> 2] = HEAP32[$3_1 + 48 >> 2];
        HEAP32[$31_1 + 4 >> 2] = $16_1;
        $3_1 = $3_1 + 8 | 0;
        $16_1 = HEAP32[$3_1 + 4 >> 2];
        HEAP32[$12_1 >> 2] = HEAP32[$3_1 >> 2];
        HEAP32[$12_1 + 4 >> 2] = $16_1;
        $3_1 = $6_1 + 24 | 0;
        $12_1 = HEAP32[$3_1 + 4 >> 2];
        HEAP32[$40_1 >> 2] = HEAP32[$3_1 >> 2];
        HEAP32[$40_1 + 4 >> 2] = $12_1;
        $3_1 = $6_1 + 40 | 0;
        $12_1 = HEAP32[$3_1 + 4 >> 2];
        HEAP32[$18_1 >> 2] = HEAP32[$3_1 >> 2];
        HEAP32[$18_1 + 4 >> 2] = $12_1;
        $3_1 = $6_1 + 56 | 0;
        $12_1 = HEAP32[$3_1 + 4 >> 2];
        HEAP32[$19_1 >> 2] = HEAP32[$3_1 >> 2];
        HEAP32[$19_1 + 4 >> 2] = $12_1;
        $3_1 = HEAP32[$6_1 + 4 >> 2];
        HEAP32[$5_1 + 304 >> 2] = HEAP32[$6_1 >> 2];
        HEAP32[$5_1 + 308 >> 2] = $3_1;
        $6_1 = HEAP32[$38_1 + 28 >> 2] + Math_imul(HEAP32[(HEAP32[$39_1 + 16 >> 2] + $7_1 | 0) + 4 >> 2], 80) | 0;
        $3_1 = HEAP32[$6_1 + 64 >> 2];
        $380($5_1, $5_1 + 304 | 0, $6_1);
        $6_1 = HEAP32[$15_1 + 4 >> 2];
        HEAP32[$20_1 >> 2] = HEAP32[$15_1 >> 2];
        HEAP32[$20_1 + 4 >> 2] = $6_1;
        $6_1 = HEAP32[$30_1 + 4 >> 2];
        HEAP32[$10_1 >> 2] = HEAP32[$30_1 >> 2];
        HEAP32[$10_1 + 4 >> 2] = $6_1;
        $6_1 = HEAP32[$34_1 + 4 >> 2];
        HEAP32[$17_1 >> 2] = HEAP32[$34_1 >> 2];
        HEAP32[$17_1 + 4 >> 2] = $6_1;
        $6_1 = HEAP32[$13_1 + 4 >> 2];
        HEAP32[$14_1 >> 2] = HEAP32[$13_1 >> 2];
        HEAP32[$14_1 + 4 >> 2] = $6_1;
        $6_1 = HEAP32[$35_1 + 4 >> 2];
        HEAP32[$22_1 >> 2] = HEAP32[$35_1 >> 2];
        HEAP32[$22_1 + 4 >> 2] = $6_1;
        $6_1 = HEAP32[$8_1 + 4 >> 2];
        HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2];
        HEAP32[$9_1 + 4 >> 2] = $6_1;
        $6_1 = HEAP32[$36_1 + 4 >> 2];
        HEAP32[$23_1 >> 2] = HEAP32[$36_1 >> 2];
        HEAP32[$23_1 + 4 >> 2] = $6_1;
        $6_1 = HEAP32[$5_1 + 4 >> 2];
        HEAP32[$5_1 + 64 >> 2] = HEAP32[$5_1 >> 2];
        HEAP32[$5_1 + 68 >> 2] = $6_1;
        FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $5_1 - -64 | 0, $5_1 + 144 | 0, $5_1 + 128 | 0);
        HEAPF32[$5_1 + 144 >> 2] = HEAPF32[$5_1 + 144 >> 2] - $11_1;
        HEAPF32[$5_1 + 148 >> 2] = HEAPF32[$5_1 + 148 >> 2] - $11_1;
        HEAPF32[$5_1 + 152 >> 2] = HEAPF32[$5_1 + 152 >> 2] - $11_1;
        HEAPF32[$5_1 + 128 >> 2] = $11_1 + HEAPF32[$5_1 + 128 >> 2];
        HEAPF32[$5_1 + 132 >> 2] = $11_1 + HEAPF32[$5_1 + 132 >> 2];
        HEAPF32[$5_1 + 136 >> 2] = $11_1 + HEAPF32[$5_1 + 136 >> 2];
        if ($308(HEAPF32[$5_1 + 3776 >> 2], HEAPF32[$5_1 + 3780 >> 2], HEAPF32[$5_1 + 3784 >> 2], HEAPF32[$5_1 + 160 >> 2], HEAPF32[$5_1 + 164 >> 2], HEAPF32[$5_1 + 168 >> 2], $5_1 + 144 | 0, $5_1 + 128 | 0)) {
         break label$25
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$21_1 >> 2] >> 2]]($21_1) | 0;
        $3_1 = HEAP32[$0_1 + 4 >> 2];
        FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 60 >> 2]]($3_1, $21_1);
        $3_1 = HEAP32[$39_1 + 16 >> 2] + $7_1 | 0;
        $21_1 = HEAP32[$3_1 >> 2];
        $12_1 = HEAP32[$3_1 + 4 >> 2];
        $6_1 = HEAP32[$0_1 + 92 >> 2];
        if (($6_1 | 0) == HEAP32[$0_1 + 96 >> 2]) {
         $117($41_1, $6_1 ? $6_1 << 1 : 1);
         $6_1 = HEAP32[$0_1 + 92 >> 2];
        }
        $3_1 = HEAP32[$0_1 + 100 >> 2] + Math_imul($6_1, 12) | 0;
        HEAP32[$3_1 + 8 >> 2] = 0;
        HEAP32[$3_1 + 4 >> 2] = $12_1;
        HEAP32[$3_1 >> 2] = $21_1;
        HEAP32[$0_1 + 92 >> 2] = HEAP32[$0_1 + 92 >> 2] + 1;
       }
       $7_1 = $7_1 + 12 | 0;
       $42_1 = $42_1 + 1 | 0;
       continue;
      }
      break;
     };
     while (1) {
      if (($6_1 | 0) < HEAP32[$0_1 + 92 >> 2]) {
       $1_1 = HEAP32[$0_1 + 84 >> 2];
       $2_1 = HEAP32[$0_1 + 100 >> 2] + $7_1 | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, HEAP32[$2_1 >> 2], HEAP32[$2_1 + 4 >> 2]) | 0;
       $7_1 = $7_1 + 12 | 0;
       $6_1 = $6_1 + 1 | 0;
       continue;
      }
      break;
     };
     $57($41_1);
     $57($5_1 + 176 | 0);
     break label$1;
    }
    $9_1 = $9_1 + 1 | 0;
    continue;
   };
  }
  global$0 = $5_1 + 3792 | 0;
 }
 
 function $433($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  label$1 : {
   $4_1 = HEAP32[$0_1 + 4 >> 2];
   if (($4_1 | 0) > ($1_1 | 0)) {
    break label$1
   }
   label$2 : {
    if (($1_1 | 0) <= ($4_1 | 0)) {
     break label$2
    }
    if (HEAP32[$0_1 + 8 >> 2] >= ($1_1 | 0)) {
     break label$2
    }
    $3_1 = $4_1;
    if ($1_1) {
     $7_1 = $53($1_1 << 3);
     $3_1 = HEAP32[$0_1 + 4 >> 2];
    }
    $3_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
    while (1) {
     if ($3_1) {
      $8_1 = HEAP32[$0_1 + 12 >> 2] + $5_1 | 0;
      $6_1 = HEAP32[$8_1 + 4 >> 2];
      $9_1 = $5_1 + $7_1 | 0;
      HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2];
      HEAP32[$9_1 + 4 >> 2] = $6_1;
      $3_1 = $3_1 - 1 | 0;
      $5_1 = $5_1 + 8 | 0;
      continue;
     }
     break;
    };
    $96($0_1);
    HEAP32[$0_1 + 12 >> 2] = $7_1;
    HEAP8[$0_1 + 16 | 0] = 1;
    HEAP32[$0_1 + 8 >> 2] = $1_1;
   }
   $5_1 = $1_1 - $4_1 | 0;
   $3_1 = $4_1 << 3;
   while (1) {
    if (!$5_1) {
     break label$1
    }
    $4_1 = HEAP32[$2_1 + 4 >> 2];
    $6_1 = HEAP32[$0_1 + 12 >> 2] + $3_1 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $4_1;
    $5_1 = $5_1 - 1 | 0;
    $3_1 = $3_1 + 8 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $434($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return Math_fround(Math_fround(0.0));
 }
 
 function $435($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $4_1 = HEAP32[$0_1 + 84 >> 2];
  $0_1 = 0;
  $2_1 = 8;
  while (1) {
   if (HEAP32[$4_1 + 8 >> 2] > ($0_1 | 0)) {
    $3_1 = HEAP32[HEAP32[$4_1 + 16 >> 2] + $2_1 >> 2];
    if ($3_1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $1_1)
    }
    $2_1 = $2_1 + 12 | 0;
    $0_1 = $0_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $436($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 368 | 0;
  global$0 = $3_1;
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] + 1;
  $10_1 = HEAP32[$2_1 + 36 >> 2];
  $12_1 = Math_imul($10_1, 80);
  $13_1 = HEAP32[HEAP32[$0_1 + 12 >> 2] + 4 >> 2] + 28 | 0;
  $2_1 = HEAP32[($12_1 + HEAP32[$13_1 >> 2] | 0) + 64 >> 2];
  $4_1 = HEAP32[$0_1 + 8 >> 2];
  $11_1 = HEAP32[$1_1 + 36 >> 2];
  $6_1 = HEAP32[HEAP32[$4_1 + 4 >> 2] + 28 >> 2] + Math_imul($11_1, 80) | 0;
  $7_1 = HEAP32[$6_1 + 64 >> 2];
  $1_1 = HEAP32[$4_1 + 12 >> 2];
  $4_1 = $1_1 + 8 | 0;
  $8_1 = HEAP32[$4_1 + 4 >> 2];
  $5_1 = $3_1 + 312 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $8_1;
  $5_1 = $1_1 + 24 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $3_1 + 328 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $5_1 = $1_1 + 40 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $3_1 + 344 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $5_1 = $1_1 + 56 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $3_1 + 360 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$3_1 + 304 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 308 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$3_1 + 320 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$3_1 + 324 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$3_1 + 336 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$3_1 + 340 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$3_1 + 352 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$3_1 + 356 >> 2] = $4_1;
  $380($3_1 + 240 | 0, $3_1 + 304 | 0, $6_1);
  $1_1 = HEAP32[HEAP32[$0_1 + 12 >> 2] + 12 >> 2];
  $6_1 = $1_1 + 8 | 0;
  $5_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $3_1 + 184 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  $6_1 = $1_1 + 24 | 0;
  $5_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $3_1 + 200 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  $6_1 = $1_1 + 40 | 0;
  $5_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $3_1 + 216 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  $6_1 = $1_1 + 56 | 0;
  $5_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $3_1 + 232 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$3_1 + 176 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 180 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$3_1 + 192 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$3_1 + 196 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$3_1 + 208 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$3_1 + 212 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$3_1 + 224 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$3_1 + 228 >> 2] = $4_1;
  $380($3_1 + 112 | 0, $3_1 + 176 | 0, HEAP32[$13_1 >> 2] + $12_1 | 0);
  FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 8 >> 2]]($7_1, $3_1 + 240 | 0, $3_1 + 96 | 0, $3_1 + 80 | 0);
  FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $3_1 + 112 | 0, $3_1 - -64 | 0, $3_1 + 48 | 0);
  $9_1 = HEAPF32[HEAP32[$0_1 + 24 >> 2] + 32 >> 2];
  $14_1 = Math_fround(HEAPF32[$3_1 + 96 >> 2] - $9_1);
  HEAPF32[$3_1 + 96 >> 2] = $14_1;
  $15_1 = Math_fround(HEAPF32[$3_1 + 100 >> 2] - $9_1);
  HEAPF32[$3_1 + 100 >> 2] = $15_1;
  $16_1 = Math_fround(HEAPF32[$3_1 + 104 >> 2] - $9_1);
  HEAPF32[$3_1 + 104 >> 2] = $16_1;
  $17_1 = Math_fround($9_1 + HEAPF32[$3_1 + 80 >> 2]);
  HEAPF32[$3_1 + 80 >> 2] = $17_1;
  $18_1 = Math_fround($9_1 + HEAPF32[$3_1 + 84 >> 2]);
  HEAPF32[$3_1 + 84 >> 2] = $18_1;
  $19_1 = Math_fround($9_1 + HEAPF32[$3_1 + 88 >> 2]);
  HEAPF32[$3_1 + 88 >> 2] = $19_1;
  if ($308($14_1, $15_1, $16_1, $17_1, $18_1, $19_1, $3_1 - -64 | 0, $3_1 + 48 | 0)) {
   HEAP32[$3_1 + 44 >> 2] = $11_1;
   HEAP32[$3_1 + 40 >> 2] = -1;
   HEAP32[$3_1 + 28 >> 2] = $7_1;
   $1_1 = HEAP32[$0_1 + 8 >> 2];
   HEAP32[$3_1 + 24 >> 2] = $1_1;
   HEAP32[$3_1 + 32 >> 2] = HEAP32[$1_1 + 8 >> 2];
   HEAP32[$3_1 + 36 >> 2] = $3_1 + 240;
   HEAP32[5174] = HEAP32[5174] + 1;
   HEAP32[$3_1 + 20 >> 2] = $10_1;
   HEAP32[$3_1 + 16 >> 2] = -1;
   HEAP32[$3_1 + 4 >> 2] = $2_1;
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   HEAP32[$3_1 >> 2] = $1_1;
   HEAP32[$3_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
   $7_1 = HEAP32[$0_1 + 28 >> 2];
   HEAP32[$3_1 + 12 >> 2] = $3_1 + 112;
   $1_1 = HEAP32[$7_1 + 12 >> 2] - 1 & $422($11_1, $10_1);
   label$2 : {
    label$3 : {
     if (($1_1 | 0) >= HEAP32[$7_1 + 28 >> 2]) {
      break label$3
     }
     $1_1 = HEAP32[$7_1 + 36 >> 2] + ($1_1 << 2) | 0;
     while (1) {
      $1_1 = HEAP32[$1_1 >> 2];
      if (($1_1 | 0) == -1) {
       break label$3
      }
      $2_1 = HEAP32[$7_1 + 16 >> 2] + Math_imul($1_1, 12) | 0;
      if (HEAP32[$2_1 + 4 >> 2] == ($10_1 | 0) ? HEAP32[$2_1 >> 2] == ($11_1 | 0) : 0) {
       break label$2
      }
      $1_1 = HEAP32[$7_1 + 56 >> 2] + ($1_1 << 2) | 0;
      continue;
     };
    }
    $2_1 = 0;
   }
   label$6 : {
    if ($9_1 > Math_fround(0.0)) {
     $1_1 = HEAP32[$0_1 + 16 >> 2];
     $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $3_1 + 24 | 0, $3_1, 0, 2) | 0;
     break label$6;
    }
    if ($2_1) {
     $2_1 = HEAP32[$2_1 + 8 >> 2];
     break label$6;
    }
    $1_1 = HEAP32[$0_1 + 16 >> 2];
    $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $3_1 + 24 | 0, $3_1, HEAP32[$0_1 + 32 >> 2], 1) | 0;
    $1_1 = HEAP32[$0_1 + 28 >> 2];
    (wasm2js_i32$0 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, $11_1, $10_1) | 0, wasm2js_i32$1 = $2_1), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
   }
   $1_1 = HEAP32[$0_1 + 24 >> 2];
   $7_1 = HEAP32[$1_1 + 12 >> 2];
   $12_1 = HEAP32[$1_1 + 8 >> 2];
   HEAP32[$1_1 + 12 >> 2] = $3_1;
   HEAP32[$1_1 + 8 >> 2] = $3_1 + 24;
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, -1, $11_1);
   $1_1 = HEAP32[$0_1 + 24 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, -1, $10_1);
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $3_1 + 24 | 0, $3_1, HEAP32[$0_1 + 20 >> 2], HEAP32[$0_1 + 24 >> 2]);
   $0_1 = HEAP32[$0_1 + 24 >> 2];
   HEAP32[$0_1 + 8 >> 2] = $12_1;
   HEAP32[$0_1 + 12 >> 2] = $7_1;
  }
  global$0 = $3_1 + 368 | 0;
 }
 
 function $437($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
 }
 
 function $438($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return Math_fround(Math_fround(1.0));
 }
 
 function $439($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 13248;
  label$1 : {
   if (!HEAPU8[$0_1 + 8 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1);
  }
  return $0_1 | 0;
 }
 
 function $440($0_1) {
  $0_1 = $0_1 | 0;
  $17($439($0_1));
 }
 
 function $441($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0);
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $0_1 = HEAP32[$0_1 + 12 >> 2];
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   HEAP32[$4_1 + 4 >> 2] = $0_1;
   $10_1 = HEAP32[$1_1 + 12 >> 2];
   $11_1 = HEAP32[$2_1 + 12 >> 2];
   $12_1 = Math_fround(HEAPF32[$10_1 + 48 >> 2] - HEAPF32[$11_1 + 48 >> 2]);
   $5_1 = $12_1;
   $6_1 = Math_fround($5_1 * $5_1);
   $9_1 = Math_fround(HEAPF32[$10_1 + 52 >> 2] - HEAPF32[$11_1 + 52 >> 2]);
   $5_1 = $9_1;
   $7_1 = Math_fround($6_1 + Math_fround($5_1 * $5_1));
   $6_1 = Math_fround(HEAPF32[$10_1 + 56 >> 2] - HEAPF32[$11_1 + 56 >> 2]);
   $5_1 = $6_1;
   $5_1 = Math_fround(Math_sqrt(Math_fround($7_1 + Math_fround($5_1 * $5_1))));
   $1_1 = HEAP32[$1_1 + 4 >> 2];
   $7_1 = HEAPF32[$1_1 + 16 >> 2];
   $8_1 = HEAPF32[$1_1 + 32 >> 2];
   $1_1 = HEAP32[$2_1 + 4 >> 2];
   $13_1 = HEAPF32[$1_1 + 16 >> 2];
   $14_1 = HEAPF32[$1_1 + 32 >> 2];
   HEAP32[$0_1 + 844 >> 2] = 0;
   $8_1 = Math_fround($8_1 * $7_1);
   $7_1 = Math_fround($14_1 * $13_1);
   $8_1 = Math_fround($8_1 + $7_1);
   if ($5_1 > Math_fround($8_1 + HEAPF32[$4_1 + 32 >> 2])) {
    break label$1
   }
   HEAP32[$3_1 + 24 >> 2] = 0;
   HEAP32[$3_1 + 28 >> 2] = 0;
   HEAP32[$3_1 + 16 >> 2] = 1065353216;
   HEAP32[$3_1 + 20 >> 2] = 0;
   $8_1 = Math_fround($5_1 - $8_1);
   label$2 : {
    if (!($5_1 > Math_fround(1.1920928955078125e-07))) {
     $5_1 = Math_fround(1.0);
     $6_1 = Math_fround(0.0);
     $9_1 = Math_fround(0.0);
     break label$2;
    }
    HEAP32[$3_1 + 28 >> 2] = 0;
    $5_1 = Math_fround(Math_fround(1.0) / $5_1);
    $6_1 = Math_fround($5_1 * $6_1);
    HEAPF32[$3_1 + 24 >> 2] = $6_1;
    $9_1 = Math_fround($5_1 * $9_1);
    HEAPF32[$3_1 + 20 >> 2] = $9_1;
    $5_1 = Math_fround($12_1 * $5_1);
    HEAPF32[$3_1 + 16 >> 2] = $5_1;
   }
   HEAP32[$3_1 + 12 >> 2] = 0;
   $0_1 = HEAP32[$2_1 + 12 >> 2];
   HEAPF32[$3_1 >> 2] = Math_fround($7_1 * $5_1) + HEAPF32[$0_1 + 48 >> 2];
   HEAPF32[$3_1 + 8 >> 2] = Math_fround($7_1 * $6_1) + HEAPF32[$0_1 + 56 >> 2];
   HEAPF32[$3_1 + 4 >> 2] = Math_fround($7_1 * $9_1) + HEAPF32[$0_1 + 52 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $3_1 + 16 | 0, $3_1, $8_1);
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $442($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!HEAP32[$0_1 + 12 >> 2]) {
    break label$1
   }
   if (!HEAPU8[$0_1 + 8 | 0]) {
    break label$1
   }
   $375($1_1, $0_1 + 12 | 0);
  }
 }
 
 function $443($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = 0, $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  $25 = $1_1 - -64 | 0;
  $444($3_1 + 32 | 0, $25, $1_1);
  $8_1 = HEAPF32[$0_1 + 12 >> 2];
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  $13_1 = HEAPF32[$1_1 + 16 >> 2];
  $11_1 = HEAPF32[$1_1 + 32 >> 2];
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$3_1 + 140 >> 2] = 0;
  $5_1 = HEAPF32[$1_1 + 60 >> 2];
  $7_1 = Math_fround(HEAPF32[$1_1 + 76 >> 2] - $5_1);
  $6_1 = HEAPF32[$1_1 - -64 >> 2];
  $15_1 = Math_fround(HEAPF32[$1_1 + 96 >> 2] - $6_1);
  $6_1 = Math_fround(HEAPF32[$1_1 + 80 >> 2] - $6_1);
  $10_1 = Math_fround(HEAPF32[$1_1 + 92 >> 2] - $5_1);
  $5_1 = Math_fround(Math_fround($7_1 * $15_1) - Math_fround($6_1 * $10_1));
  HEAPF32[$3_1 + 136 >> 2] = $5_1;
  $12_1 = HEAPF32[$1_1 + 68 >> 2];
  $18_1 = Math_fround(HEAPF32[$1_1 + 84 >> 2] - $12_1);
  $9_1 = Math_fround($18_1 * $10_1);
  $10_1 = Math_fround(HEAPF32[$1_1 + 100 >> 2] - $12_1);
  $7_1 = Math_fround($9_1 - Math_fround($7_1 * $10_1));
  HEAPF32[$3_1 + 132 >> 2] = $7_1;
  $6_1 = Math_fround(Math_fround($6_1 * $10_1) - Math_fround($18_1 * $15_1));
  HEAPF32[$3_1 + 128 >> 2] = $6_1;
  $5_1 = Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($7_1 * $7_1)) + Math_fround($5_1 * $5_1));
  label$1 : {
   if (!($5_1 >= Math_fround(1.4210854715202004e-14))) {
    break label$1
   }
   $15_1 = Math_fround($11_1 * $13_1);
   $12_1 = Math_fround($15_1 + $8_1);
   $139($3_1 + 128 | 0, Math_fround(Math_sqrt($5_1)));
   $18_1 = HEAPF32[$3_1 + 80 >> 2];
   $9_1 = HEAPF32[$1_1 + 60 >> 2];
   $26_1 = Math_fround($18_1 - $9_1);
   $5_1 = HEAPF32[$3_1 + 128 >> 2];
   $23_1 = HEAPF32[$3_1 + 84 >> 2];
   $14_1 = HEAPF32[$1_1 + 64 >> 2];
   $27_1 = Math_fround($23_1 - $14_1);
   $7_1 = HEAPF32[$3_1 + 132 >> 2];
   $24_1 = HEAPF32[$3_1 + 88 >> 2];
   $16_1 = HEAPF32[$1_1 + 68 >> 2];
   $28_1 = Math_fround($24_1 - $16_1);
   $6_1 = HEAPF32[$3_1 + 136 >> 2];
   $8_1 = Math_fround(Math_fround(Math_fround($26_1 * $5_1) + Math_fround($27_1 * $7_1)) + Math_fround($28_1 * $6_1));
   if ($8_1 < Math_fround(0.0)) {
    $6_1 = Math_fround(-$6_1);
    HEAPF32[$3_1 + 136 >> 2] = $6_1;
    $7_1 = Math_fround(-$7_1);
    HEAPF32[$3_1 + 132 >> 2] = $7_1;
    $5_1 = Math_fround(-$5_1);
    HEAPF32[$3_1 + 128 >> 2] = $5_1;
    $8_1 = Math_fround(-$8_1);
   }
   if (!($8_1 < $12_1)) {
    break label$1
   }
   $13_1 = HEAPF32[$1_1 + 92 >> 2];
   $11_1 = Math_fround($9_1 - $13_1);
   $10_1 = HEAPF32[$1_1 + 96 >> 2];
   $19_1 = Math_fround($14_1 - $10_1);
   $17_1 = HEAPF32[$1_1 + 100 >> 2];
   $20_1 = Math_fround($16_1 - $17_1);
   $19_1 = Math_fround(Math_fround(Math_fround(Math_fround($18_1 - $13_1) * Math_fround(Math_fround($19_1 * $6_1) - Math_fround($20_1 * $7_1))) + Math_fround(Math_fround($23_1 - $10_1) * Math_fround(Math_fround($20_1 * $5_1) - Math_fround($6_1 * $11_1)))) + Math_fround(Math_fround($24_1 - $17_1) * Math_fround(Math_fround($7_1 * $11_1) - Math_fround($19_1 * $5_1))));
   $11_1 = $13_1;
   $13_1 = HEAPF32[$1_1 + 76 >> 2];
   $20_1 = Math_fround($11_1 - $13_1);
   $21_1 = HEAPF32[$1_1 + 80 >> 2];
   $29_1 = Math_fround($10_1 - $21_1);
   $11_1 = HEAPF32[$1_1 + 84 >> 2];
   $10_1 = Math_fround($17_1 - $11_1);
   $17_1 = Math_fround(Math_fround(Math_fround(Math_fround($18_1 - $13_1) * Math_fround(Math_fround($29_1 * $6_1) - Math_fround($10_1 * $7_1))) + Math_fround(Math_fround($23_1 - $21_1) * Math_fround(Math_fround($10_1 * $5_1) - Math_fround($6_1 * $20_1)))) + Math_fround(Math_fround($24_1 - $11_1) * Math_fround(Math_fround($7_1 * $20_1) - Math_fround($29_1 * $5_1))));
   label$3 : {
    label$4 : {
     $14_1 = Math_fround($21_1 - $14_1);
     $16_1 = Math_fround($11_1 - $16_1);
     $9_1 = Math_fround($13_1 - $9_1);
     $9_1 = Math_fround(Math_fround(Math_fround($26_1 * Math_fround(Math_fround($14_1 * $6_1) - Math_fround($16_1 * $7_1))) + Math_fround($27_1 * Math_fround(Math_fround($16_1 * $5_1) - Math_fround($6_1 * $9_1)))) + Math_fround($28_1 * Math_fround(Math_fround($7_1 * $9_1) - Math_fround($14_1 * $5_1))));
     label$5 : {
      label$6 : {
       if (!($9_1 > Math_fround(0.0))) {
        break label$6
       }
       if (!($17_1 > Math_fround(0.0))) {
        break label$6
       }
       if ($19_1 > Math_fround(0.0)) {
        break label$5
       }
      }
      if (!($9_1 <= Math_fround(0.0))) {
       break label$4
      }
      if (!($17_1 <= Math_fround(0.0))) {
       break label$4
      }
      if (!($19_1 <= Math_fround(0.0))) {
       break label$4
      }
     }
     $11_1 = Math_fround($24_1 - Math_fround($8_1 * $6_1));
     $10_1 = Math_fround($23_1 - Math_fround($8_1 * $7_1));
     $13_1 = Math_fround($18_1 - Math_fround($8_1 * $5_1));
     $16_1 = Math_fround($12_1 * $12_1);
     break label$3;
    }
    $16_1 = Math_fround($12_1 * $12_1);
    $1_1 = 0;
    while (1) {
     $22_1 = HEAP32[$0_1 + 8 >> 2];
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$22_1 >> 2] + 100 >> 2]]($22_1) | 0) > ($1_1 | 0)) {
      $22_1 = HEAP32[$0_1 + 8 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$22_1 >> 2] + 104 >> 2]]($22_1, $1_1, $3_1 + 112 | 0, $3_1 + 96 | 0);
      $8_1 = Math_fround(0.0);
      $17_1 = HEAPF32[$3_1 + 112 >> 2];
      $5_1 = Math_fround($18_1 - $17_1);
      $12_1 = Math_fround(HEAPF32[$3_1 + 96 >> 2] - $17_1);
      $19_1 = HEAPF32[$3_1 + 116 >> 2];
      $7_1 = Math_fround($23_1 - $19_1);
      $9_1 = Math_fround(HEAPF32[$3_1 + 100 >> 2] - $19_1);
      $20_1 = HEAPF32[$3_1 + 120 >> 2];
      $6_1 = Math_fround($24_1 - $20_1);
      $14_1 = Math_fround(HEAPF32[$3_1 + 104 >> 2] - $20_1);
      $21_1 = Math_fround(Math_fround(Math_fround($5_1 * $12_1) + Math_fround($7_1 * $9_1)) + Math_fround($6_1 * $14_1));
      label$9 : {
       if (!($21_1 > Math_fround(0.0))) {
        break label$9
       }
       $8_1 = Math_fround(Math_fround(Math_fround($12_1 * $12_1) + Math_fround($9_1 * $9_1)) + Math_fround($14_1 * $14_1));
       if ($8_1 > $21_1) {
        $8_1 = Math_fround($21_1 / $8_1);
        $6_1 = Math_fround($6_1 - Math_fround($14_1 * $8_1));
        $7_1 = Math_fround($7_1 - Math_fround($9_1 * $8_1));
        $5_1 = Math_fround($5_1 - Math_fround($12_1 * $8_1));
        break label$9;
       }
       $6_1 = Math_fround($6_1 - $14_1);
       $7_1 = Math_fround($7_1 - $9_1);
       $5_1 = Math_fround($5_1 - $12_1);
       $8_1 = Math_fround(1.0);
      }
      if (Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($7_1 * $7_1)) + Math_fround($6_1 * $6_1)) < $16_1) {
       $10_1 = Math_fround($19_1 + Math_fround($9_1 * $8_1));
       $11_1 = Math_fround($20_1 + Math_fround($14_1 * $8_1));
       $30_1 = 1;
       $13_1 = Math_fround($17_1 + Math_fround($12_1 * $8_1));
      }
      $1_1 = $1_1 + 1 | 0;
      continue;
     }
     break;
    };
    if (!$30_1) {
     break label$1
    }
   }
   $7_1 = Math_fround($18_1 - $13_1);
   $5_1 = $7_1;
   $8_1 = Math_fround($5_1 * $5_1);
   $6_1 = Math_fround($23_1 - $10_1);
   $5_1 = $6_1;
   $9_1 = Math_fround($8_1 + Math_fround($5_1 * $5_1));
   $8_1 = Math_fround($24_1 - $11_1);
   $5_1 = $8_1;
   $5_1 = Math_fround($9_1 + Math_fround($5_1 * $5_1));
   if (!($5_1 < $16_1)) {
    break label$1
   }
   label$12 : {
    if ($5_1 > Math_fround(1.1920928955078125e-07)) {
     HEAP32[$3_1 + 124 >> 2] = 0;
     HEAPF32[$3_1 + 120 >> 2] = $8_1;
     HEAPF32[$3_1 + 116 >> 2] = $6_1;
     HEAPF32[$3_1 + 112 >> 2] = $7_1;
     $15_1 = Math_fround($15_1 - Math_fround(Math_sqrt($5_1)));
     $84($3_1 + 112 | 0);
     break label$12;
    }
    $1_1 = $3_1 + 136 | 0;
    $22_1 = HEAP32[$1_1 + 4 >> 2];
    $0_1 = $3_1 + 120 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $22_1;
    $0_1 = HEAP32[$3_1 + 132 >> 2];
    HEAP32[$3_1 + 112 >> 2] = HEAP32[$3_1 + 128 >> 2];
    HEAP32[$3_1 + 116 >> 2] = $0_1;
   }
   $5_1 = Math_fround(-$15_1);
   if ($4_1) {
    $351($3_1 + 128 | 0, $25, HEAPF32[$3_1 + 112 >> 2], HEAPF32[$3_1 + 116 >> 2], HEAPF32[$3_1 + 120 >> 2]);
    HEAP32[$3_1 + 108 >> 2] = 0;
    $7_1 = HEAPF32[$3_1 + 136 >> 2];
    HEAPF32[$3_1 + 104 >> 2] = -$7_1;
    $6_1 = HEAPF32[$3_1 + 132 >> 2];
    HEAPF32[$3_1 + 100 >> 2] = -$6_1;
    $8_1 = HEAPF32[$3_1 + 128 >> 2];
    HEAPF32[$3_1 + 96 >> 2] = -$8_1;
    $78($3_1, $25, $13_1, $10_1, $11_1);
    HEAP32[$3_1 + 28 >> 2] = 0;
    HEAPF32[$3_1 + 24 >> 2] = HEAPF32[$3_1 + 8 >> 2] - Math_fround($15_1 * $7_1);
    HEAPF32[$3_1 + 20 >> 2] = HEAPF32[$3_1 + 4 >> 2] - Math_fround($15_1 * $6_1);
    HEAPF32[$3_1 + 16 >> 2] = HEAPF32[$3_1 >> 2] - Math_fround($15_1 * $8_1);
    FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $3_1 + 96 | 0, $3_1 + 16 | 0, $5_1);
    break label$1;
   }
   $351($3_1 + 128 | 0, $25, HEAPF32[$3_1 + 112 >> 2], HEAPF32[$3_1 + 116 >> 2], HEAPF32[$3_1 + 120 >> 2]);
   $78($3_1 + 96 | 0, $25, $13_1, $10_1, $11_1);
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $3_1 + 128 | 0, $3_1 + 96 | 0, $5_1);
  }
  global$0 = $3_1 + 144 | 0;
 }
 
 function $444($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0);
  $3_1 = global$0 + -64 | 0;
  global$0 = $3_1;
  $5_1 = HEAPF32[$1_1 + 52 >> 2];
  $6_1 = HEAPF32[$2_1 + 52 >> 2];
  $7_1 = HEAPF32[$1_1 + 56 >> 2];
  $8_1 = HEAPF32[$2_1 + 56 >> 2];
  $9_1 = HEAPF32[$1_1 + 48 >> 2];
  $10_1 = HEAPF32[$2_1 + 48 >> 2];
  $445($3_1 + 16 | 0, $1_1, $2_1);
  $77($3_1, Math_fround($10_1 - $9_1), Math_fround($6_1 - $5_1), Math_fround($8_1 - $7_1), $1_1);
  $2_1 = $3_1 + 24 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$3_1 + 36 >> 2];
  HEAP32[$0_1 + 16 >> 2] = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$0_1 + 20 >> 2] = $1_1;
  $2_1 = $3_1 + 40 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$3_1 + 52 >> 2];
  HEAP32[$0_1 + 32 >> 2] = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$0_1 + 36 >> 2] = $1_1;
  $2_1 = $3_1 + 56 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 40 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$0_1 + 48 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$0_1 + 52 >> 2] = $1_1;
  $1_1 = $3_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 56 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  global$0 = $3_1 - -64 | 0;
 }
 
 function $445($0_1, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0);
  $3_1 = HEAPF32[$1_1 + 20 >> 2];
  $4_1 = HEAPF32[$1_1 + 36 >> 2];
  $5_1 = HEAPF32[$2_1 + 20 >> 2];
  $6_1 = HEAPF32[$2_1 + 36 >> 2];
  $7_1 = HEAPF32[$1_1 + 24 >> 2];
  $8_1 = HEAPF32[$2_1 + 24 >> 2];
  $9_1 = HEAPF32[$1_1 + 40 >> 2];
  $10_1 = HEAPF32[$2_1 + 40 >> 2];
  $11_1 = HEAPF32[$1_1 + 4 >> 2];
  $12_1 = HEAPF32[$2_1 + 4 >> 2];
  $13_1 = HEAPF32[$1_1 + 8 >> 2];
  $14_1 = HEAPF32[$2_1 + 8 >> 2];
  $15_1 = HEAPF32[$2_1 + 32 >> 2];
  $16_1 = HEAPF32[$1_1 + 32 >> 2];
  $17_1 = HEAPF32[$2_1 >> 2];
  $18_1 = HEAPF32[$1_1 >> 2];
  $19_1 = HEAPF32[$2_1 + 16 >> 2];
  $20_1 = HEAPF32[$1_1 + 16 >> 2];
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAP32[$0_1 + 28 >> 2] = 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround($18_1 * $17_1) + Math_fround($20_1 * $19_1)) + Math_fround($16_1 * $15_1);
  HEAPF32[$0_1 + 40 >> 2] = Math_fround(Math_fround($14_1 * $13_1) + Math_fround($8_1 * $7_1)) + Math_fround($10_1 * $9_1);
  HEAPF32[$0_1 + 36 >> 2] = Math_fround(Math_fround($12_1 * $13_1) + Math_fround($5_1 * $7_1)) + Math_fround($6_1 * $9_1);
  HEAPF32[$0_1 + 32 >> 2] = Math_fround(Math_fround($17_1 * $13_1) + Math_fround($19_1 * $7_1)) + Math_fround($15_1 * $9_1);
  HEAPF32[$0_1 + 24 >> 2] = Math_fround(Math_fround($14_1 * $11_1) + Math_fround($8_1 * $3_1)) + Math_fround($10_1 * $4_1);
  HEAPF32[$0_1 + 20 >> 2] = Math_fround(Math_fround($12_1 * $11_1) + Math_fround($5_1 * $3_1)) + Math_fround($6_1 * $4_1);
  HEAPF32[$0_1 + 16 >> 2] = Math_fround(Math_fround($17_1 * $11_1) + Math_fround($19_1 * $3_1)) + Math_fround($15_1 * $4_1);
  HEAPF32[$0_1 + 8 >> 2] = Math_fround(Math_fround($18_1 * $14_1) + Math_fround($20_1 * $8_1)) + Math_fround($16_1 * $10_1);
  HEAPF32[$0_1 + 4 >> 2] = Math_fround(Math_fround($18_1 * $12_1) + Math_fround($20_1 * $5_1)) + Math_fround($16_1 * $6_1);
 }
 
 function $446($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 13384;
  label$1 : {
   if (!HEAPU8[$0_1 + 8 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1);
  }
  return $0_1 | 0;
 }
 
 function $447($0_1) {
  $0_1 = $0_1 | 0;
  $17($446($0_1));
 }
 
 function $448($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = global$0 - 160 | 0;
  global$0 = $6_1;
  $5_1 = HEAP32[$0_1 + 12 >> 2];
  label$1 : {
   if (!$5_1) {
    break label$1
   }
   HEAP32[$4_1 + 4 >> 2] = $5_1;
   $9_1 = HEAPU8[$0_1 + 16 | 0];
   $7_1 = $9_1 ? $2_1 : $1_1;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $2_1 = $9_1 ? $1_1 : $2_1;
   HEAP32[$6_1 + 152 >> 2] = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$6_1 + 148 >> 2] = $8_1;
   HEAP32[$6_1 + 144 >> 2] = 13324;
   HEAPF32[$6_1 + 156 >> 2] = HEAPF32[$5_1 + 848 >> 2] + HEAPF32[$4_1 + 32 >> 2];
   $1_1 = HEAP32[$7_1 + 12 >> 2];
   $7_1 = $1_1 + 8 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $6_1 + 16 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $7_1 = $1_1 + 24 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $6_1 + 32 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $7_1 = $1_1 + 40 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $6_1 + 48 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $7_1 = $1_1 + 56 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $6_1 - -64 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   HEAP32[$6_1 + 136 >> 2] = 1566444395;
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$6_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$6_1 + 12 >> 2] = $5_1;
   $5_1 = HEAP32[$1_1 + 20 >> 2];
   HEAP32[$6_1 + 24 >> 2] = HEAP32[$1_1 + 16 >> 2];
   HEAP32[$6_1 + 28 >> 2] = $5_1;
   $5_1 = HEAP32[$1_1 + 36 >> 2];
   HEAP32[$6_1 + 40 >> 2] = HEAP32[$1_1 + 32 >> 2];
   HEAP32[$6_1 + 44 >> 2] = $5_1;
   $5_1 = HEAP32[$1_1 + 52 >> 2];
   HEAP32[$6_1 + 56 >> 2] = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$6_1 + 60 >> 2] = $5_1;
   $1_1 = HEAP32[$2_1 + 12 >> 2];
   $2_1 = $1_1 + 8 | 0;
   $7_1 = HEAP32[$2_1 + 4 >> 2];
   $5_1 = $6_1 + 80 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $7_1;
   $5_1 = HEAP32[$1_1 + 20 >> 2];
   $2_1 = $6_1 + 88 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $5_1 = $1_1 + 24 | 0;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   $2_1 = $6_1 + 96 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $7_1;
   $5_1 = HEAP32[$1_1 + 36 >> 2];
   $2_1 = $6_1 + 104 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $5_1 = $1_1 + 40 | 0;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   $2_1 = $6_1 + 112 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $7_1;
   $5_1 = HEAP32[$1_1 + 52 >> 2];
   $2_1 = $6_1 + 120 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $5_1 = $1_1 + 56 | 0;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   $2_1 = $6_1 + 128 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $7_1;
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$6_1 + 72 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$6_1 + 76 >> 2] = $2_1;
   $443($6_1 + 144 | 0, $6_1 + 8 | 0, $4_1, HEAP32[$3_1 + 20 >> 2], $9_1);
   if (!HEAPU8[$0_1 + 8 | 0]) {
    break label$1
   }
   $370($4_1);
  }
  global$0 = $6_1 + 160 | 0;
 }
 
 function $449($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = 0, $28_1 = 0, $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38_1 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = 0, $47_1 = Math_fround(0), $48_1 = Math_fround(0), $49_1 = Math_fround(0), $50_1 = Math_fround(0), $51_1 = Math_fround(0), $52_1 = Math_fround(0), $53_1 = Math_fround(0), $54_1 = Math_fround(0), $55_1 = Math_fround(0), $56_1 = Math_fround(0), $57_1 = Math_fround(0), $58_1 = Math_fround(0), $59_1 = Math_fround(0), $60_1 = Math_fround(0), $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0;
  $5_1 = global$0 - 560 | 0;
  global$0 = $5_1;
  $3_1 = 0;
  label$1 : {
   $28_1 = $5_1;
   label$2 : {
    while (1) {
     if (($3_1 | 0) == 48) {
      label$5 : {
       $153($5_1 + 16 | 0, HEAP32[$0_1 + 4 >> 2]);
       $12_1 = HEAPF32[$5_1 + 16 >> 2];
       $10_1 = HEAPF32[$5_1 + 20 >> 2];
       $11_1 = HEAPF32[$5_1 + 24 >> 2];
       $153($5_1, HEAP32[$0_1 + 8 >> 2]);
       $7_1 = HEAPF32[$5_1 >> 2];
       $8_1 = HEAPF32[$5_1 + 4 >> 2];
       $6_1 = HEAPF32[$5_1 + 8 >> 2];
       $37_1 = Math_fround(Math_fround($11_1 + $11_1) * Math_fround(.5));
       HEAPF32[$5_1 + 492 >> 2] = $37_1;
       $38_1 = Math_fround(Math_fround($10_1 + $10_1) * Math_fround(.5));
       HEAPF32[$5_1 + 488 >> 2] = $38_1;
       $39_1 = Math_fround(Math_fround($12_1 + $12_1) * Math_fround(.5));
       HEAPF32[$5_1 + 484 >> 2] = $39_1;
       $40_1 = Math_fround(Math_fround($6_1 + $6_1) * Math_fround(.5));
       HEAPF32[$5_1 + 480 >> 2] = $40_1;
       $41_1 = Math_fround(Math_fround($8_1 + $8_1) * Math_fround(.5));
       HEAPF32[$5_1 + 476 >> 2] = $41_1;
       $42_1 = Math_fround(Math_fround($7_1 + $7_1) * Math_fround(.5));
       HEAPF32[$5_1 + 472 >> 2] = $42_1;
       $0_1 = $1_1 + 112 | 0;
       $56_1 = Math_fround(HEAPF32[$0_1 >> 2] - HEAPF32[$1_1 + 48 >> 2]);
       $58_1 = HEAPF32[$5_1 + 96 >> 2];
       $57_1 = Math_fround(HEAPF32[$1_1 + 116 >> 2] - HEAPF32[$1_1 + 52 >> 2]);
       $8_1 = HEAPF32[$5_1 + 112 >> 2];
       $14_1 = Math_fround(HEAPF32[$1_1 + 120 >> 2] - HEAPF32[$1_1 + 56 >> 2]);
       $6_1 = HEAPF32[$5_1 + 128 >> 2];
       $43_1 = Math_fround(Math_fround(Math_fround($56_1 * $58_1) + Math_fround($57_1 * $8_1)) + Math_fround($14_1 * $6_1));
       $22_1 = HEAPF32[$5_1 + 48 >> 2];
       $21_1 = HEAPF32[$5_1 + 64 >> 2];
       $30_1 = HEAPF32[$5_1 + 80 >> 2];
       $47_1 = Math_fround(Math_fround(Math_fround($58_1 * $22_1) + Math_fround($8_1 * $21_1)) + Math_fround($6_1 * $30_1));
       $13_1 = Math_fround(Math_abs($47_1));
       $31_1 = HEAPF32[$5_1 + 52 >> 2];
       $32_1 = HEAPF32[$5_1 + 68 >> 2];
       $33_1 = HEAPF32[$5_1 + 84 >> 2];
       $48_1 = Math_fround(Math_fround(Math_fround($58_1 * $31_1) + Math_fround($8_1 * $32_1)) + Math_fround($6_1 * $33_1));
       $12_1 = Math_fround(Math_abs($48_1));
       $34_1 = HEAPF32[$5_1 + 56 >> 2];
       $35_1 = HEAPF32[$5_1 + 72 >> 2];
       $25 = HEAPF32[$5_1 + 88 >> 2];
       $49_1 = Math_fround(Math_fround(Math_fround($58_1 * $34_1) + Math_fround($8_1 * $35_1)) + Math_fround($6_1 * $25));
       $11_1 = Math_fround(Math_abs($49_1));
       $8_1 = Math_fround(Math_fround(Math_abs($43_1)) - Math_fround(Math_fround(Math_fround($39_1 + Math_fround($42_1 * $13_1)) + Math_fround($41_1 * $12_1)) + Math_fround($40_1 * $11_1)));
       if ($8_1 > Math_fround(0.0)) {
        break label$1
       }
       $59_1 = HEAPF32[$5_1 + 100 >> 2];
       $7_1 = HEAPF32[$5_1 + 116 >> 2];
       $6_1 = HEAPF32[$5_1 + 132 >> 2];
       $44_1 = Math_fround(Math_fround(Math_fround($56_1 * $59_1) + Math_fround($57_1 * $7_1)) + Math_fround($14_1 * $6_1));
       $50_1 = Math_fround(Math_fround(Math_fround($59_1 * $34_1) + Math_fround($7_1 * $35_1)) + Math_fround($6_1 * $25));
       $36_1 = Math_fround(Math_abs($50_1));
       $51_1 = Math_fround(Math_fround(Math_fround($59_1 * $31_1) + Math_fround($7_1 * $32_1)) + Math_fround($6_1 * $33_1));
       $26_1 = Math_fround(Math_abs($51_1));
       $52_1 = Math_fround(Math_fround(Math_fround($59_1 * $22_1) + Math_fround($7_1 * $21_1)) + Math_fround($6_1 * $30_1));
       $29_1 = Math_fround(Math_abs($52_1));
       $6_1 = Math_fround(-3402823466385288598117041.0e14);
       if ($8_1 > Math_fround(-3402823466385288598117041.0e14)) {
        $19_1 = $43_1 < Math_fround(0.0);
        $9_1 = $5_1 + 96 | 0;
        $15_1 = 1;
        $6_1 = $8_1;
       }
       $8_1 = Math_fround(Math_fround(Math_abs($44_1)) - Math_fround(Math_fround(Math_fround($38_1 + Math_fround($42_1 * $29_1)) + Math_fround($41_1 * $26_1)) + Math_fround($40_1 * $36_1)));
       if ($8_1 > Math_fround(0.0)) {
        break label$1
       }
       $60_1 = HEAPF32[$5_1 + 104 >> 2];
       $10_1 = HEAPF32[$5_1 + 120 >> 2];
       $7_1 = HEAPF32[$5_1 + 136 >> 2];
       $45_1 = Math_fround(Math_fround(Math_fround($56_1 * $60_1) + Math_fround($57_1 * $10_1)) + Math_fround($14_1 * $7_1));
       $53_1 = Math_fround(Math_fround(Math_fround($60_1 * $34_1) + Math_fround($10_1 * $35_1)) + Math_fround($7_1 * $25));
       $24_1 = Math_fround(Math_abs($53_1));
       $54_1 = Math_fround(Math_fround(Math_fround($60_1 * $31_1) + Math_fround($10_1 * $32_1)) + Math_fround($7_1 * $33_1));
       $23_1 = Math_fround(Math_abs($54_1));
       $55_1 = Math_fround(Math_fround(Math_fround($60_1 * $22_1) + Math_fround($10_1 * $21_1)) + Math_fround($7_1 * $30_1));
       $17_1 = Math_fround(Math_abs($55_1));
       if ($6_1 < $8_1) {
        $9_1 = $5_1 + 96 | 4;
        $19_1 = $44_1 < Math_fround(0.0);
        $15_1 = 2;
        $6_1 = $8_1;
       }
       $8_1 = Math_fround(Math_fround(Math_abs($45_1)) - Math_fround(Math_fround(Math_fround($37_1 + Math_fround($42_1 * $17_1)) + Math_fround($41_1 * $23_1)) + Math_fround($40_1 * $24_1)));
       if ($8_1 > Math_fround(0.0)) {
        break label$1
       }
       if ($6_1 < $8_1) {
        $9_1 = $5_1 + 96 | 8;
        $19_1 = $45_1 < Math_fround(0.0);
        $15_1 = 3;
        $6_1 = $8_1;
       }
       $7_1 = Math_fround(Math_fround(Math_fround($56_1 * $22_1) + Math_fround($57_1 * $21_1)) + Math_fround($14_1 * $30_1));
       $8_1 = Math_fround(Math_fround(Math_abs($7_1)) - Math_fround($42_1 + Math_fround(Math_fround(Math_fround($39_1 * $13_1) + Math_fround($38_1 * $29_1)) + Math_fround($37_1 * $17_1))));
       if ($8_1 > Math_fround(0.0)) {
        break label$1
       }
       if ($6_1 < $8_1) {
        $19_1 = $7_1 < Math_fround(0.0);
        $15_1 = 4;
        $9_1 = $5_1 + 48 | 0;
        $6_1 = $8_1;
       }
       $7_1 = Math_fround(Math_fround(Math_fround($56_1 * $31_1) + Math_fround($57_1 * $32_1)) + Math_fround($14_1 * $33_1));
       $8_1 = Math_fround(Math_fround(Math_abs($7_1)) - Math_fround($41_1 + Math_fround(Math_fround(Math_fround($39_1 * $12_1) + Math_fround($38_1 * $26_1)) + Math_fround($37_1 * $23_1))));
       if ($8_1 > Math_fround(0.0)) {
        break label$1
       }
       if ($6_1 < $8_1) {
        $9_1 = $5_1 + 48 | 4;
        $19_1 = $7_1 < Math_fround(0.0);
        $15_1 = 5;
        $6_1 = $8_1;
       }
       $7_1 = Math_fround(Math_fround(Math_fround($56_1 * $34_1) + Math_fround($57_1 * $35_1)) + Math_fround($14_1 * $25));
       $8_1 = Math_fround(Math_fround(Math_abs($7_1)) - Math_fround($40_1 + Math_fround(Math_fround(Math_fround($39_1 * $11_1) + Math_fround($38_1 * $36_1)) + Math_fround($37_1 * $24_1))));
       if ($8_1 > Math_fround(0.0)) {
        break label$1
       }
       if ($6_1 < $8_1) {
        $9_1 = $5_1 + 48 | 8;
        $19_1 = $7_1 < Math_fround(0.0);
        $15_1 = 6;
        $6_1 = $8_1;
       }
       $10_1 = Math_fround(Math_fround($45_1 * $52_1) - Math_fround($44_1 * $55_1));
       $33_1 = Math_fround($12_1 + Math_fround(9.999999747378752e-06));
       $34_1 = Math_fround($11_1 + Math_fround(9.999999747378752e-06));
       $35_1 = Math_fround($29_1 + Math_fround(9.999999747378752e-06));
       $25 = Math_fround($17_1 + Math_fround(9.999999747378752e-06));
       $8_1 = Math_fround(Math_fround(Math_abs($10_1)) - Math_fround(Math_fround($40_1 * $33_1) + Math_fround(Math_fround($41_1 * $34_1) + Math_fround(Math_fround($37_1 * $35_1) + Math_fround($38_1 * $25)))));
       if ($8_1 > Math_fround(1.1920928955078125e-07)) {
        break label$1
       }
       $21_1 = Math_fround($23_1 + Math_fround(9.999999747378752e-06));
       $30_1 = Math_fround($26_1 + Math_fround(9.999999747378752e-06));
       $31_1 = Math_fround($13_1 + Math_fround(9.999999747378752e-06));
       $14_1 = Math_fround(0.0);
       $26_1 = Math_fround($52_1 * $52_1);
       $13_1 = Math_fround(Math_fround($55_1 * $55_1) + Math_fround(0.0));
       $12_1 = Math_fround(Math_sqrt(Math_fround($26_1 + $13_1)));
       label$12 : {
        if (!($12_1 > Math_fround(1.1920928955078125e-07))) {
         $11_1 = Math_fround(0.0);
         $7_1 = Math_fround(0.0);
         break label$12;
        }
        $11_1 = Math_fround(0.0);
        $8_1 = Math_fround($8_1 / $12_1);
        $7_1 = Math_fround(0.0);
        if (!(Math_fround($8_1 * Math_fround(1.0499999523162842)) > $6_1)) {
         break label$12
        }
        $19_1 = $10_1 < Math_fround(0.0);
        $11_1 = Math_fround($52_1 / $12_1);
        $14_1 = Math_fround(Math_fround(0.0) / $12_1);
        $9_1 = 0;
        $15_1 = 7;
        $6_1 = $8_1;
        $7_1 = Math_fround(Math_fround(-$55_1) / $12_1);
       }
       $8_1 = $7_1;
       $10_1 = Math_fround(Math_fround($45_1 * $51_1) - Math_fround($44_1 * $54_1));
       $7_1 = Math_fround(Math_fround(Math_abs($10_1)) - Math_fround(Math_fround($40_1 * $31_1) + Math_fround(Math_fround($42_1 * $34_1) + Math_fround(Math_fround($37_1 * $30_1) + Math_fround($38_1 * $21_1)))));
       if ($7_1 > Math_fround(1.1920928955078125e-07)) {
        break label$1
       }
       $32_1 = Math_fround($24_1 + Math_fround(9.999999747378752e-06));
       $36_1 = Math_fround($36_1 + Math_fround(9.999999747378752e-06));
       $29_1 = Math_fround($51_1 * $51_1);
       $12_1 = Math_fround(Math_fround($54_1 * $54_1) + Math_fround(0.0));
       $17_1 = Math_fround(Math_sqrt(Math_fround($29_1 + $12_1)));
       label$14 : {
        if (!($17_1 > Math_fround(1.1920928955078125e-07))) {
         break label$14
        }
        $7_1 = Math_fround($7_1 / $17_1);
        if (!(Math_fround($7_1 * Math_fround(1.0499999523162842)) > $6_1)) {
         break label$14
        }
        $19_1 = $10_1 < Math_fround(0.0);
        $11_1 = Math_fround($51_1 / $17_1);
        $8_1 = Math_fround(Math_fround(-$54_1) / $17_1);
        $14_1 = Math_fround(Math_fround(0.0) / $17_1);
        $9_1 = 0;
        $15_1 = 8;
        $6_1 = $7_1;
       }
       $10_1 = Math_fround(Math_fround($45_1 * $50_1) - Math_fround($44_1 * $53_1));
       $7_1 = Math_fround(Math_fround(Math_abs($10_1)) - Math_fround(Math_fround($41_1 * $31_1) + Math_fround(Math_fround($42_1 * $33_1) + Math_fround(Math_fround($37_1 * $36_1) + Math_fround($38_1 * $32_1)))));
       if ($7_1 > Math_fround(1.1920928955078125e-07)) {
        break label$1
       }
       $24_1 = Math_fround($50_1 * $50_1);
       $23_1 = Math_fround(Math_fround($53_1 * $53_1) + Math_fround(0.0));
       $17_1 = Math_fround(Math_sqrt(Math_fround($24_1 + $23_1)));
       label$15 : {
        if (!($17_1 > Math_fround(1.1920928955078125e-07))) {
         break label$15
        }
        $7_1 = Math_fround($7_1 / $17_1);
        if (!(Math_fround($7_1 * Math_fround(1.0499999523162842)) > $6_1)) {
         break label$15
        }
        $19_1 = $10_1 < Math_fround(0.0);
        $11_1 = Math_fround($50_1 / $17_1);
        $8_1 = Math_fround(Math_fround(-$53_1) / $17_1);
        $14_1 = Math_fround(Math_fround(0.0) / $17_1);
        $9_1 = 0;
        $15_1 = 9;
        $6_1 = $7_1;
       }
       $10_1 = Math_fround(Math_fround($43_1 * $55_1) - Math_fround($45_1 * $47_1));
       $7_1 = Math_fround(Math_fround(Math_abs($10_1)) - Math_fround(Math_fround($40_1 * $30_1) + Math_fround(Math_fround($41_1 * $36_1) + Math_fround(Math_fround($37_1 * $31_1) + Math_fround($39_1 * $25)))));
       if ($7_1 > Math_fround(1.1920928955078125e-07)) {
        break label$1
       }
       $17_1 = Math_fround($47_1 * $47_1);
       $13_1 = Math_fround(Math_sqrt(Math_fround($17_1 + $13_1)));
       label$16 : {
        if (!($13_1 > Math_fround(1.1920928955078125e-07))) {
         break label$16
        }
        $7_1 = Math_fround($7_1 / $13_1);
        if (!(Math_fround($7_1 * Math_fround(1.0499999523162842)) > $6_1)) {
         break label$16
        }
        $19_1 = $10_1 < Math_fround(0.0);
        $11_1 = Math_fround(Math_fround(-$47_1) / $13_1);
        $8_1 = Math_fround(Math_fround(0.0) / $13_1);
        $14_1 = Math_fround($55_1 / $13_1);
        $9_1 = 0;
        $15_1 = 10;
        $6_1 = $7_1;
       }
       $10_1 = Math_fround(Math_fround($43_1 * $54_1) - Math_fround($45_1 * $48_1));
       $7_1 = Math_fround(Math_fround(Math_abs($10_1)) - Math_fround(Math_fround($40_1 * $35_1) + Math_fround(Math_fround($42_1 * $36_1) + Math_fround(Math_fround($37_1 * $33_1) + Math_fround($39_1 * $21_1)))));
       if ($7_1 > Math_fround(1.1920928955078125e-07)) {
        break label$1
       }
       $13_1 = Math_fround($48_1 * $48_1);
       $12_1 = Math_fround(Math_sqrt(Math_fround($13_1 + $12_1)));
       label$17 : {
        if (!($12_1 > Math_fround(1.1920928955078125e-07))) {
         break label$17
        }
        $7_1 = Math_fround($7_1 / $12_1);
        if (!(Math_fround($7_1 * Math_fround(1.0499999523162842)) > $6_1)) {
         break label$17
        }
        $19_1 = $10_1 < Math_fround(0.0);
        $11_1 = Math_fround(Math_fround(-$48_1) / $12_1);
        $8_1 = Math_fround(Math_fround(0.0) / $12_1);
        $14_1 = Math_fround($54_1 / $12_1);
        $9_1 = 0;
        $15_1 = 11;
        $6_1 = $7_1;
       }
       $10_1 = Math_fround(Math_fround($43_1 * $53_1) - Math_fround($45_1 * $49_1));
       $7_1 = Math_fround(Math_fround(Math_abs($10_1)) - Math_fround(Math_fround($41_1 * $35_1) + Math_fround(Math_fround($42_1 * $30_1) + Math_fround(Math_fround($37_1 * $34_1) + Math_fround($39_1 * $32_1)))));
       if ($7_1 > Math_fround(1.1920928955078125e-07)) {
        break label$1
       }
       $12_1 = Math_fround($49_1 * $49_1);
       $23_1 = Math_fround(Math_sqrt(Math_fround($12_1 + $23_1)));
       label$18 : {
        if (!($23_1 > Math_fround(1.1920928955078125e-07))) {
         break label$18
        }
        $7_1 = Math_fround($7_1 / $23_1);
        if (!(Math_fround($7_1 * Math_fround(1.0499999523162842)) > $6_1)) {
         break label$18
        }
        $19_1 = $10_1 < Math_fround(0.0);
        $11_1 = Math_fround(Math_fround(-$49_1) / $23_1);
        $8_1 = Math_fround(Math_fround(0.0) / $23_1);
        $14_1 = Math_fround($53_1 / $23_1);
        $9_1 = 0;
        $15_1 = 12;
        $6_1 = $7_1;
       }
       $10_1 = Math_fround(Math_fround($44_1 * $47_1) - Math_fround($43_1 * $52_1));
       $7_1 = Math_fround(Math_fround(Math_abs($10_1)) - Math_fround(Math_fround($40_1 * $21_1) + Math_fround(Math_fround(Math_fround($38_1 * $31_1) + Math_fround($39_1 * $35_1)) + Math_fround($41_1 * $32_1))));
       if ($7_1 > Math_fround(1.1920928955078125e-07)) {
        break label$1
       }
       $17_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($17_1 + $26_1) + Math_fround(0.0))));
       label$19 : {
        if (!($17_1 > Math_fround(1.1920928955078125e-07))) {
         break label$19
        }
        $7_1 = Math_fround($7_1 / $17_1);
        if (!(Math_fround($7_1 * Math_fround(1.0499999523162842)) > $6_1)) {
         break label$19
        }
        $19_1 = $10_1 < Math_fround(0.0);
        $11_1 = Math_fround(Math_fround(0.0) / $17_1);
        $8_1 = Math_fround($47_1 / $17_1);
        $14_1 = Math_fround(Math_fround(-$52_1) / $17_1);
        $9_1 = 0;
        $15_1 = 13;
        $6_1 = $7_1;
       }
       $10_1 = Math_fround(Math_fround($44_1 * $48_1) - Math_fround($43_1 * $51_1));
       $7_1 = Math_fround(Math_fround(Math_abs($10_1)) - Math_fround(Math_fround($40_1 * $25) + Math_fround(Math_fround(Math_fround($38_1 * $33_1) + Math_fround($39_1 * $30_1)) + Math_fround($42_1 * $32_1))));
       if ($7_1 > Math_fround(1.1920928955078125e-07)) {
        break label$1
       }
       $13_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($13_1 + $29_1) + Math_fround(0.0))));
       label$20 : {
        if (!($13_1 > Math_fround(1.1920928955078125e-07))) {
         break label$20
        }
        $7_1 = Math_fround($7_1 / $13_1);
        if (!(Math_fround($7_1 * Math_fround(1.0499999523162842)) > $6_1)) {
         break label$20
        }
        $19_1 = $10_1 < Math_fround(0.0);
        $11_1 = Math_fround(Math_fround(0.0) / $13_1);
        $8_1 = Math_fround($48_1 / $13_1);
        $14_1 = Math_fround(Math_fround(-$51_1) / $13_1);
        $9_1 = 0;
        $15_1 = 14;
        $6_1 = $7_1;
       }
       $10_1 = Math_fround(Math_fround($44_1 * $49_1) - Math_fround($43_1 * $50_1));
       $7_1 = Math_fround(Math_fround(Math_abs($10_1)) - Math_fround(Math_fround($41_1 * $25) + Math_fround(Math_fround(Math_fround($38_1 * $34_1) + Math_fround($39_1 * $36_1)) + Math_fround($42_1 * $21_1))));
       if ($7_1 > Math_fround(1.1920928955078125e-07)) {
        break label$1
       }
       label$21 : {
        label$22 : {
         $12_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($12_1 + $24_1) + Math_fround(0.0))));
         if (!($12_1 > Math_fround(1.1920928955078125e-07))) {
          break label$22
         }
         $7_1 = Math_fround($7_1 / $12_1);
         if (!(Math_fround($7_1 * Math_fround(1.0499999523162842)) > $6_1)) {
          break label$22
         }
         $19_1 = $10_1 < Math_fround(0.0);
         $11_1 = Math_fround(Math_fround(0.0) / $12_1);
         $8_1 = Math_fround($49_1 / $12_1);
         $14_1 = Math_fround(Math_fround(-$50_1) / $12_1);
         $15_1 = 15;
         break label$21;
        }
        if (!$15_1) {
         break label$1
        }
        if ($9_1) {
         break label$5
        }
        $7_1 = $6_1;
       }
       $22_1 = Math_fround(Math_fround(Math_fround($58_1 * $14_1) + Math_fround($59_1 * $8_1)) + Math_fround($60_1 * $11_1));
       HEAPF32[$5_1 + 32 >> 2] = $22_1;
       $21_1 = Math_fround(Math_fround(Math_fround($14_1 * HEAPF32[$5_1 + 112 >> 2]) + Math_fround($8_1 * HEAPF32[$5_1 + 116 >> 2])) + Math_fround($11_1 * HEAPF32[$5_1 + 120 >> 2]));
       HEAPF32[$5_1 + 36 >> 2] = $21_1;
       $11_1 = Math_fround(Math_fround(Math_fround($14_1 * HEAPF32[$5_1 + 128 >> 2]) + Math_fround($8_1 * HEAPF32[$5_1 + 132 >> 2])) + Math_fround($11_1 * HEAPF32[$5_1 + 136 >> 2]));
       break label$2;
      }
     } else {
      $4_1 = ($5_1 + 96 | 0) + $3_1 | 0;
      $27_1 = $1_1 + $3_1 | 0;
      HEAPF32[$4_1 >> 2] = HEAPF32[$27_1 >> 2];
      $20_1 = ($5_1 + 48 | 0) + $3_1 | 0;
      HEAPF32[$20_1 >> 2] = HEAPF32[$27_1 - -64 >> 2];
      $16_1 = $4_1 + 4 | 0;
      $18_1 = $27_1 + 4 | 0;
      $4_1 = HEAP32[$18_1 + 4 >> 2];
      HEAP32[$16_1 >> 2] = HEAP32[$18_1 >> 2];
      HEAP32[$16_1 + 4 >> 2] = $4_1;
      $18_1 = $27_1 + 68 | 0;
      $4_1 = HEAP32[$18_1 + 4 >> 2];
      $16_1 = $20_1 + 4 | 0;
      HEAP32[$16_1 >> 2] = HEAP32[$18_1 >> 2];
      HEAP32[$16_1 + 4 >> 2] = $4_1;
      $3_1 = $3_1 + 16 | 0;
      continue;
     }
     break;
    };
    $22_1 = HEAPF32[$9_1 >> 2];
    HEAPF32[$5_1 + 32 >> 2] = $22_1;
    $21_1 = HEAPF32[$9_1 + 16 >> 2];
    HEAPF32[$5_1 + 36 >> 2] = $21_1;
    $7_1 = $6_1;
    $11_1 = HEAPF32[$9_1 + 32 >> 2];
   }
   HEAPF32[$28_1 + 40 >> 2] = $11_1;
   if ($19_1) {
    $11_1 = Math_fround(-$11_1);
    HEAPF32[$5_1 + 40 >> 2] = $11_1;
    $21_1 = Math_fround(-$21_1);
    HEAPF32[$5_1 + 36 >> 2] = $21_1;
    $22_1 = Math_fround(-$22_1);
    HEAPF32[$5_1 + 32 >> 2] = $22_1;
   }
   if (($15_1 | 0) >= 7) {
    $0_1 = $1_1 + 48 | 0;
    $3_1 = 0;
    while (1) if (($3_1 | 0) == 12) {
     $0_1 = 0;
     $27_1 = $5_1 + 96 | 0;
     while (1) {
      if (($0_1 | 0) != 3) {
       $3_1 = $0_1 << 2;
       $6_1 = HEAPF32[$3_1 + ($5_1 + 484 | 0) >> 2];
       $3_1 = $3_1 + ($5_1 + 96 | 0) | 0;
       $6_1 = Math_fround(Math_fround(Math_fround($22_1 * HEAPF32[$3_1 >> 2]) + Math_fround($21_1 * HEAPF32[$3_1 + 16 >> 2])) + Math_fround($11_1 * HEAPF32[$3_1 + 32 >> 2])) > Math_fround(0.0) ? $6_1 : Math_fround(-$6_1);
       $3_1 = 0;
       $9_1 = $27_1;
       while (1) {
        if (($3_1 | 0) != 12) {
         $4_1 = ($5_1 + 224 | 0) + $3_1 | 0;
         HEAPF32[$4_1 >> 2] = HEAPF32[$4_1 >> 2] + Math_fround($6_1 * HEAPF32[$9_1 >> 2]);
         $9_1 = $9_1 + 16 | 0;
         $3_1 = $3_1 + 4 | 0;
         continue;
        }
        break;
       };
       $27_1 = $27_1 + 4 | 0;
       $0_1 = $0_1 + 1 | 0;
       continue;
      }
      break;
     };
     $0_1 = $1_1 + 112 | 0;
     $3_1 = 0;
     while (1) if (($3_1 | 0) == 12) {
      $1_1 = 0;
      $0_1 = $5_1 + 48 | 0;
      while (1) {
       if (($1_1 | 0) != 3) {
        $3_1 = $1_1 << 2;
        $6_1 = HEAPF32[$3_1 + ($5_1 + 472 | 0) >> 2];
        $3_1 = $3_1 + ($5_1 + 48 | 0) | 0;
        $6_1 = Math_fround(Math_fround(Math_fround($22_1 * HEAPF32[$3_1 >> 2]) + Math_fround($21_1 * HEAPF32[$3_1 + 16 >> 2])) + Math_fround($11_1 * HEAPF32[$3_1 + 32 >> 2])) > Math_fround(0.0) ? Math_fround(-$6_1) : $6_1;
        $3_1 = 0;
        $9_1 = $0_1;
        while (1) {
         if (($3_1 | 0) != 12) {
          $4_1 = ($5_1 + 320 | 0) + $3_1 | 0;
          HEAPF32[$4_1 >> 2] = HEAPF32[$4_1 >> 2] + Math_fround($6_1 * HEAPF32[$9_1 >> 2]);
          $9_1 = $9_1 + 16 | 0;
          $3_1 = $3_1 + 4 | 0;
          continue;
         }
         break;
        };
        $0_1 = $0_1 + 4 | 0;
        $1_1 = $1_1 + 1 | 0;
        continue;
       }
       break;
      };
      $1_1 = $15_1 - 7 | 0;
      $0_1 = ($1_1 | 0) / 3 | 0;
      $15_1 = ($5_1 + 96 | 0) + ($0_1 << 2) | 0;
      $3_1 = 0;
      while (1) if (($3_1 | 0) == 12) {
       $15_1 = ($5_1 + 48 | 0) + ($1_1 + Math_imul($0_1, -3) << 2) | 0;
       $3_1 = 0;
       while (1) {
        if (($3_1 | 0) != 12) {
         HEAPF32[($5_1 + 496 | 0) + $3_1 >> 2] = HEAPF32[$15_1 >> 2];
         $15_1 = $15_1 + 16 | 0;
         $3_1 = $3_1 + 4 | 0;
         continue;
        }
        break;
       };
       $14_1 = Math_fround(0.0);
       $8_1 = Math_fround(0.0);
       $26_1 = HEAPF32[$5_1 + 528 >> 2];
       $29_1 = HEAPF32[$5_1 + 496 >> 2];
       $24_1 = HEAPF32[$5_1 + 532 >> 2];
       $23_1 = HEAPF32[$5_1 + 500 >> 2];
       $10_1 = HEAPF32[$5_1 + 536 >> 2];
       $17_1 = HEAPF32[$5_1 + 504 >> 2];
       $25 = Math_fround(Math_fround(Math_fround($26_1 * $29_1) + Math_fround($24_1 * $23_1)) + Math_fround($10_1 * $17_1));
       $6_1 = Math_fround(Math_fround(1.0) - Math_fround($25 * $25));
       if (!($6_1 <= Math_fround(9.999999747378752e-05))) {
        $13_1 = Math_fround(Math_fround(1.0) / $6_1);
        $12_1 = Math_fround(HEAPF32[$5_1 + 320 >> 2] - HEAPF32[$5_1 + 224 >> 2]);
        $8_1 = Math_fround(HEAPF32[$5_1 + 324 >> 2] - HEAPF32[$5_1 + 228 >> 2]);
        $6_1 = Math_fround(HEAPF32[$5_1 + 328 >> 2] - HEAPF32[$5_1 + 232 >> 2]);
        $10_1 = Math_fround(Math_fround(Math_fround($12_1 * $26_1) + Math_fround($8_1 * $24_1)) + Math_fround($6_1 * $10_1));
        $6_1 = Math_fround(Math_fround(Math_fround($12_1 * $29_1) + Math_fround($8_1 * $23_1)) + Math_fround($6_1 * $17_1));
        $8_1 = Math_fround($13_1 * Math_fround(Math_fround($25 * $10_1) - $6_1));
        $14_1 = Math_fround($13_1 * Math_fround($10_1 - Math_fround($25 * $6_1)));
       }
       $3_1 = 0;
       while (1) if (($3_1 | 0) == 12) {
        $3_1 = 0;
        while (1) {
         if (($3_1 | 0) != 12) {
          $0_1 = ($5_1 + 320 | 0) + $3_1 | 0;
          HEAPF32[$0_1 >> 2] = HEAPF32[$0_1 >> 2] + Math_fround(HEAPF32[($5_1 + 496 | 0) + $3_1 >> 2] * $8_1);
          $3_1 = $3_1 + 4 | 0;
          continue;
         }
         break;
        };
        HEAP32[$5_1 + 412 >> 2] = 0;
        HEAPF32[$5_1 + 408 >> 2] = -$11_1;
        HEAPF32[$5_1 + 404 >> 2] = -$21_1;
        HEAPF32[$5_1 + 400 >> 2] = -$22_1;
        FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $5_1 + 400 | 0, $5_1 + 320 | 0, $7_1);
        break label$1;
       } else {
        $0_1 = ($5_1 + 224 | 0) + $3_1 | 0;
        HEAPF32[$0_1 >> 2] = HEAPF32[$0_1 >> 2] + Math_fround(HEAPF32[($5_1 + 528 | 0) + $3_1 >> 2] * $14_1);
        $3_1 = $3_1 + 4 | 0;
        continue;
       };
      } else {
       HEAPF32[($5_1 + 528 | 0) + $3_1 >> 2] = HEAPF32[$15_1 >> 2];
       $15_1 = $15_1 + 16 | 0;
       $3_1 = $3_1 + 4 | 0;
       continue;
      };
     } else {
      HEAPF32[($5_1 + 320 | 0) + $3_1 >> 2] = HEAPF32[$0_1 + $3_1 >> 2];
      $3_1 = $3_1 + 4 | 0;
      continue;
     };
    } else {
     HEAPF32[($5_1 + 224 | 0) + $3_1 >> 2] = HEAPF32[$0_1 + $3_1 >> 2];
     $3_1 = $3_1 + 4 | 0;
     continue;
    };
   }
   $27_1 = $1_1 + 48 | 0;
   label$51 : {
    if (($15_1 | 0) < 4) {
     $9_1 = $5_1 + 48 | 0;
     $61_1 = $5_1 + 484 | 0;
     $20_1 = $5_1 + 472 | 0;
     $4_1 = $0_1;
     $16_1 = $5_1 + 96 | 0;
     break label$51;
    }
    $11_1 = Math_fround(-$11_1);
    $21_1 = Math_fround(-$21_1);
    $22_1 = Math_fround(-$22_1);
    $9_1 = $5_1 + 96 | 0;
    $20_1 = $5_1 + 484 | 0;
    $61_1 = $5_1 + 472 | 0;
    $4_1 = $27_1;
    $27_1 = $0_1;
    $16_1 = $5_1 + 48 | 0;
   }
   $7_1 = Math_fround(Math_fround(Math_fround($22_1 * HEAPF32[$9_1 >> 2]) + Math_fround($21_1 * HEAPF32[$9_1 + 16 >> 2])) + Math_fround($11_1 * HEAPF32[$9_1 + 32 >> 2]));
   HEAPF32[$5_1 + 456 >> 2] = $7_1;
   $8_1 = Math_fround(Math_fround(Math_fround($22_1 * HEAPF32[$9_1 + 4 >> 2]) + Math_fround($21_1 * HEAPF32[$9_1 + 20 >> 2])) + Math_fround($11_1 * HEAPF32[$9_1 + 36 >> 2]));
   HEAPF32[$5_1 + 460 >> 2] = $8_1;
   $1_1 = 1;
   $6_1 = Math_fround(Math_fround(Math_fround($22_1 * HEAPF32[$9_1 + 8 >> 2]) + Math_fround($21_1 * HEAPF32[$9_1 + 24 >> 2])) + Math_fround($11_1 * HEAPF32[$9_1 + 40 >> 2]));
   HEAPF32[$5_1 + 464 >> 2] = $6_1;
   $10_1 = Math_fround(Math_abs($6_1));
   $8_1 = Math_fround(Math_abs($8_1));
   $6_1 = Math_fround(Math_abs($7_1));
   label$53 : {
    label$54 : {
     if ($8_1 > $6_1) {
      $1_1 = 0;
      if ($8_1 > $10_1) {
       $18_1 = 1;
       $0_1 = 2;
       break label$53;
      }
      break label$54;
     }
     if ($6_1 > $10_1) {
      $18_1 = 0;
      $0_1 = 2;
      break label$53;
     }
     $1_1 = 0;
    }
    $18_1 = 2;
    $0_1 = 1;
   }
   $3_1 = $18_1 << 2;
   $6_1 = HEAPF32[$3_1 + $20_1 >> 2];
   label$58 : {
    if (!(HEAPF32[$3_1 + ($5_1 + 456 | 0) >> 2] < Math_fround(0.0))) {
     $3_1 = 0;
     while (1) {
      if (($3_1 | 0) == 12) {
       break label$58
      }
      HEAPF32[($5_1 + 440 | 0) + $3_1 >> 2] = Math_fround(HEAPF32[$3_1 + $4_1 >> 2] - HEAPF32[$3_1 + $27_1 >> 2]) - Math_fround($6_1 * HEAPF32[(($3_1 | $18_1) << 2) + $9_1 >> 2]);
      $3_1 = $3_1 + 4 | 0;
      continue;
     };
    }
    $3_1 = 0;
    while (1) {
     if (($3_1 | 0) == 12) {
      break label$58
     }
     HEAPF32[($5_1 + 440 | 0) + $3_1 >> 2] = Math_fround(HEAPF32[$3_1 + $4_1 >> 2] - HEAPF32[$3_1 + $27_1 >> 2]) + Math_fround($6_1 * HEAPF32[(($3_1 | $18_1) << 2) + $9_1 >> 2]);
     $3_1 = $3_1 + 4 | 0;
     continue;
    };
   }
   $3_1 = 1;
   $19_1 = 2;
   label$62 : {
    label$63 : {
     label$64 : {
      $67_1 = (($15_1 | 0) < 4 ? -1 : -4) + $15_1 | 0;
      switch ($67_1 | 0) {
      case 0:
       break label$62;
      case 1:
       break label$64;
      default:
       break label$63;
      };
     }
     $3_1 = 0;
     break label$62;
    }
    $19_1 = 1;
    $3_1 = 0;
   }
   $28_1 = $3_1 << 2;
   $4_1 = $28_1 + $16_1 | 0;
   $32_1 = HEAPF32[$4_1 >> 2];
   $18_1 = $1_1 << 2;
   $3_1 = $18_1 + $9_1 | 0;
   $12_1 = HEAPF32[$3_1 >> 2];
   $36_1 = HEAPF32[$4_1 + 16 >> 2];
   $10_1 = HEAPF32[$3_1 + 16 >> 2];
   $33_1 = HEAPF32[$4_1 + 32 >> 2];
   $6_1 = HEAPF32[$3_1 + 32 >> 2];
   $30_1 = Math_fround(Math_fround(Math_fround($32_1 * $12_1) + Math_fround($36_1 * $10_1)) + Math_fround($33_1 * $6_1));
   $4_1 = $0_1 << 2;
   $3_1 = $4_1 + $9_1 | 0;
   $24_1 = HEAPF32[$3_1 >> 2];
   $23_1 = HEAPF32[$3_1 + 16 >> 2];
   $8_1 = HEAPF32[$3_1 + 32 >> 2];
   $31_1 = Math_fround(Math_fround(Math_fround($32_1 * $24_1) + Math_fround($36_1 * $23_1)) + Math_fround($33_1 * $8_1));
   $17_1 = HEAPF32[$5_1 + 440 >> 2];
   $3_1 = $19_1 << 2;
   $16_1 = $3_1 + $16_1 | 0;
   $34_1 = HEAPF32[$16_1 >> 2];
   $13_1 = HEAPF32[$5_1 + 444 >> 2];
   $35_1 = HEAPF32[$16_1 + 16 >> 2];
   $7_1 = HEAPF32[$5_1 + 448 >> 2];
   $26_1 = HEAPF32[$16_1 + 32 >> 2];
   $25 = Math_fround(Math_fround(Math_fround($17_1 * $34_1) + Math_fround($13_1 * $35_1)) + Math_fround($7_1 * $26_1));
   $29_1 = Math_fround(Math_fround(Math_fround($34_1 * $12_1) + Math_fround($35_1 * $10_1)) + Math_fround($26_1 * $6_1));
   $6_1 = HEAPF32[$18_1 + $20_1 >> 2];
   $12_1 = Math_fround($29_1 * $6_1);
   $10_1 = Math_fround($25 + $12_1);
   $23_1 = Math_fround(Math_fround(Math_fround($34_1 * $24_1) + Math_fround($35_1 * $23_1)) + Math_fround($26_1 * $8_1));
   $8_1 = HEAPF32[$4_1 + $20_1 >> 2];
   $24_1 = Math_fround($23_1 * $8_1);
   HEAPF32[$5_1 + 428 >> 2] = $10_1 - $24_1;
   $26_1 = Math_fround(Math_fround(Math_fround($17_1 * $32_1) + Math_fround($13_1 * $36_1)) + Math_fround($7_1 * $33_1));
   $7_1 = Math_fround($30_1 * $6_1);
   $6_1 = Math_fround($26_1 + $7_1);
   $13_1 = Math_fround($31_1 * $8_1);
   HEAPF32[$5_1 + 424 >> 2] = $6_1 - $13_1;
   HEAPF32[$5_1 + 420 >> 2] = $10_1 + $24_1;
   HEAPF32[$5_1 + 416 >> 2] = $6_1 + $13_1;
   $8_1 = Math_fround($25 - $12_1);
   HEAPF32[$5_1 + 412 >> 2] = $8_1 + $24_1;
   $6_1 = Math_fround($26_1 - $7_1);
   HEAPF32[$5_1 + 408 >> 2] = $6_1 + $13_1;
   HEAPF32[$5_1 + 404 >> 2] = $8_1 - $24_1;
   HEAPF32[$5_1 + 400 >> 2] = $6_1 - $13_1;
   HEAPF32[$5_1 + 392 >> 2] = HEAPF32[$28_1 + $61_1 >> 2];
   HEAPF32[$5_1 + 396 >> 2] = HEAPF32[$3_1 + $61_1 >> 2];
   $18_1 = $5_1 + 320 | 0;
   $16_1 = $5_1 + 400 | 0;
   $64_1 = 4;
   $19_1 = 4;
   $20_1 = 0;
   label$65 : {
    while (1) {
     if (($62_1 | 0) == 2) {
      break label$65
     }
     $70_1 = 1 - $62_1 | 0;
     $65_1 = $62_1 << 2;
     $66_1 = $65_1 + ($5_1 + 392 | 0) | 0;
     $63_1 = -1;
     label$67 : {
      while (1) {
       if (($63_1 | 0) <= 1) {
        $10_1 = Math_fround($63_1 | 0);
        $20_1 = 0;
        $3_1 = $16_1;
        $4_1 = $18_1;
        while (1) {
         if (($19_1 | 0) >= 1) {
          $28_1 = $3_1 + $68_1 | 0;
          $7_1 = HEAPF32[$28_1 >> 2];
          $6_1 = Math_fround($7_1 * $10_1);
          $14_1 = HEAPF32[$66_1 >> 2];
          if ($6_1 < $14_1) {
           HEAPF32[$4_1 >> 2] = HEAPF32[$3_1 >> 2];
           HEAPF32[$4_1 + 4 >> 2] = HEAPF32[$3_1 + 4 >> 2];
           $20_1 = $20_1 + 1 | 0;
           if ($20_1 & 8) {
            break label$67
           }
           $7_1 = HEAPF32[$28_1 >> 2];
           $6_1 = Math_fround($7_1 * $10_1);
           $14_1 = HEAPF32[$66_1 >> 2];
           $4_1 = $4_1 + 8 | 0;
          }
          $28_1 = $3_1 + 8 | 0;
          $69_1 = ($19_1 | 0) > 1 ? $28_1 : $16_1;
          $8_1 = HEAPF32[$69_1 + $65_1 >> 2];
          if (($6_1 < $14_1 | 0) != (Math_fround($8_1 * $10_1) < $14_1 | 0)) {
           $46_1 = $70_1 << 2;
           $6_1 = HEAPF32[$3_1 + $64_1 >> 2];
           HEAPF32[$46_1 + $4_1 >> 2] = $6_1 + Math_fround(Math_fround(Math_fround($14_1 * $10_1) - $7_1) * Math_fround(Math_fround(HEAPF32[$46_1 + $69_1 >> 2] - $6_1) / Math_fround($8_1 - $7_1)));
           HEAPF32[$4_1 + $65_1 >> 2] = HEAPF32[$66_1 >> 2] * $10_1;
           $20_1 = $20_1 + 1 | 0;
           if ($20_1 & 8) {
            break label$67
           }
           $4_1 = $4_1 + 8 | 0;
          }
          $19_1 = $19_1 - 1 | 0;
          $3_1 = $28_1;
          continue;
         }
         break;
        };
        $63_1 = $63_1 + 2 | 0;
        $19_1 = $20_1;
        $16_1 = $18_1;
        $18_1 = ($16_1 | 0) == ($5_1 + 320 | 0) ? $5_1 + 224 | 0 : $5_1 + 320 | 0;
        continue;
       }
       break;
      };
      $68_1 = $68_1 + 4 | 0;
      $64_1 = $64_1 - 4 | 0;
      $62_1 = $62_1 + 1 | 0;
      continue;
     }
     break;
    };
    $16_1 = $18_1;
   }
   if (($5_1 + 320 | 0) != ($16_1 | 0)) {
    $2($5_1 + 320 | 0, $16_1, $20_1 << 3)
   }
   if (($20_1 | 0) < 1) {
    break label$1
   }
   $6_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_fround($30_1 * $23_1) - Math_fround($31_1 * $29_1)));
   $29_1 = Math_fround($6_1 * Math_fround(-$29_1));
   $24_1 = Math_fround($23_1 * $6_1);
   $23_1 = Math_fround($31_1 * $6_1);
   $17_1 = Math_fround($30_1 * $6_1);
   $13_1 = HEAPF32[($67_1 << 2) + $61_1 >> 2];
   $16_1 = 0;
   $4_1 = 0;
   while (1) {
    if (($16_1 | 0) != ($20_1 | 0)) {
     $3_1 = $16_1 << 3;
     $12_1 = HEAPF32[$3_1 + ($5_1 + 320 | 0) >> 2];
     $10_1 = Math_fround($12_1 - $26_1);
     $7_1 = HEAPF32[($5_1 + 320 | 0) + ($3_1 | 4) >> 2];
     $6_1 = Math_fround($7_1 - $25);
     $8_1 = Math_fround(Math_fround($29_1 * $10_1) + Math_fround($17_1 * $6_1));
     $6_1 = Math_fround(Math_fround($24_1 * $10_1) - Math_fround($23_1 * $6_1));
     $18_1 = ($5_1 + 224 | 0) + (Math_imul($4_1, 3) << 2) | 0;
     $3_1 = 0;
     while (1) {
      if (($3_1 | 0) != 12) {
       HEAPF32[$3_1 + $18_1 >> 2] = Math_fround(HEAPF32[($5_1 + 440 | 0) + $3_1 >> 2] + Math_fround($6_1 * HEAPF32[(($1_1 | $3_1) << 2) + $9_1 >> 2])) + Math_fround($8_1 * HEAPF32[(($0_1 | $3_1) << 2) + $9_1 >> 2]);
       $3_1 = $3_1 + 4 | 0;
       continue;
      }
      break;
     };
     $6_1 = Math_fround($13_1 - Math_fround(Math_fround(Math_fround($22_1 * HEAPF32[$18_1 >> 2]) + Math_fround($21_1 * HEAPF32[$18_1 + 4 >> 2])) + Math_fround($11_1 * HEAPF32[$18_1 + 8 >> 2])));
     HEAPF32[($5_1 + 192 | 0) + ($4_1 << 2) >> 2] = $6_1;
     if ($6_1 >= Math_fround(0.0)) {
      $3_1 = $4_1 << 3;
      HEAPF32[$3_1 + ($5_1 + 320 | 0) >> 2] = $12_1;
      HEAPF32[($5_1 + 320 | 0) + ($3_1 | 4) >> 2] = $7_1;
      $4_1 = $4_1 + 1 | 0;
     }
     $16_1 = $16_1 + 1 | 0;
     continue;
    }
    break;
   };
   if (($4_1 | 0) < 1) {
    break label$1
   }
   label$80 : {
    $0_1 = ($4_1 | 0) < 4 ? $4_1 : 4;
    $28_1 = ($0_1 | 0) > 1 ? $0_1 : 1;
    if (($28_1 | 0) >= ($4_1 | 0)) {
     if (($15_1 | 0) < 4) {
      break label$80
     }
     $15_1 = $5_1 + 224 | 0;
     $9_1 = 0;
     while (1) {
      if (($4_1 | 0) == ($9_1 | 0)) {
       break label$1
      }
      $6_1 = HEAPF32[($5_1 + 192 | 0) + ($9_1 << 2) >> 2];
      $3_1 = 0;
      while (1) {
       if (($3_1 | 0) != 12) {
        HEAPF32[($5_1 + 528 | 0) + $3_1 >> 2] = Math_fround(HEAPF32[$3_1 + $15_1 >> 2] + HEAPF32[$3_1 + $27_1 >> 2]) - Math_fround(HEAPF32[($5_1 + 32 | 0) + $3_1 >> 2] * $6_1);
        $3_1 = $3_1 + 4 | 0;
        continue;
       }
       break;
      };
      HEAP32[$5_1 + 508 >> 2] = 0;
      HEAPF32[$5_1 + 504 >> 2] = -HEAPF32[$5_1 + 40 >> 2];
      HEAPF32[$5_1 + 500 >> 2] = -HEAPF32[$5_1 + 36 >> 2];
      HEAPF32[$5_1 + 496 >> 2] = -HEAPF32[$5_1 + 32 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $5_1 + 496 | 0, $5_1 + 528 | 0, Math_fround(-$6_1));
      $15_1 = $15_1 + 12 | 0;
      $9_1 = $9_1 + 1 | 0;
      continue;
     };
    }
    $9_1 = $5_1 + 192 | 4;
    $20_1 = 0;
    $14_1 = HEAPF32[$5_1 + 192 >> 2];
    $3_1 = 1;
    while (1) {
     if (($3_1 | 0) != ($4_1 | 0)) {
      $6_1 = HEAPF32[$9_1 >> 2];
      $0_1 = $6_1 > $14_1;
      $14_1 = $0_1 ? $6_1 : $14_1;
      $20_1 = $0_1 ? $3_1 : $20_1;
      $9_1 = $9_1 + 4 | 0;
      $3_1 = $3_1 + 1 | 0;
      continue;
     }
     break;
    };
    label$87 : {
     label$88 : {
      label$89 : {
       label$90 : {
        $9_1 = $4_1 - 1 | 0;
        switch ($9_1 | 0) {
        case 1:
         break label$89;
        case 0:
         break label$90;
        default:
         break label$88;
        };
       }
       $14_1 = HEAPF32[$5_1 + 324 >> 2];
       $6_1 = HEAPF32[$5_1 + 320 >> 2];
       break label$87;
      }
      $14_1 = Math_fround(Math_fround(HEAPF32[$5_1 + 324 >> 2] + HEAPF32[$5_1 + 332 >> 2]) * Math_fround(.5));
      $6_1 = Math_fround(Math_fround(HEAPF32[$5_1 + 320 >> 2] + HEAPF32[$5_1 + 328 >> 2]) * Math_fround(.5));
      break label$87;
     }
     $8_1 = Math_fround(0.0);
     $3_1 = $5_1 + 320 | 0;
     $6_1 = Math_fround(0.0);
     $11_1 = Math_fround(0.0);
     while (1) {
      if ($9_1) {
       $13_1 = $11_1;
       $7_1 = HEAPF32[$3_1 + 12 >> 2];
       $11_1 = HEAPF32[$3_1 + 4 >> 2];
       $14_1 = Math_fround($7_1 + $11_1);
       $10_1 = HEAPF32[$3_1 >> 2];
       $12_1 = Math_fround($10_1 * $7_1);
       $3_1 = $3_1 + 8 | 0;
       $7_1 = HEAPF32[$3_1 >> 2];
       $12_1 = Math_fround($12_1 - Math_fround($7_1 * $11_1));
       $11_1 = Math_fround($13_1 + Math_fround($14_1 * $12_1));
       $8_1 = Math_fround($8_1 + $12_1);
       $6_1 = Math_fround($6_1 + Math_fround(Math_fround($10_1 + $7_1) * $12_1));
       $9_1 = $9_1 - 1 | 0;
       continue;
      }
      break;
     };
     $22_1 = Math_fround(999999984306749440.0);
     $0_1 = ($5_1 + 320 | 0) + ($4_1 << 3) | 0;
     $13_1 = HEAPF32[$0_1 - 8 >> 2];
     $12_1 = HEAPF32[$5_1 + 324 >> 2];
     $10_1 = HEAPF32[$5_1 + 320 >> 2];
     $7_1 = HEAPF32[$0_1 - 4 >> 2];
     $17_1 = Math_fround(Math_fround($13_1 * $12_1) - Math_fround($10_1 * $7_1));
     $8_1 = Math_fround($8_1 + $17_1);
     if (Math_fround(Math_abs($8_1)) > Math_fround(1.1920928955078125e-07)) {
      $22_1 = Math_fround(Math_fround(1.0) / Math_fround($8_1 * Math_fround(3.0)))
     }
     $14_1 = Math_fround(Math_fround($11_1 + Math_fround(Math_fround($12_1 + $7_1) * $17_1)) * $22_1);
     $6_1 = Math_fround(Math_fround($6_1 + Math_fround(Math_fround($13_1 + $10_1) * $17_1)) * $22_1);
    }
    $19_1 = $5_1 + 528 | 0;
    $3_1 = $5_1 + 320 | 0;
    $9_1 = $4_1;
    while (1) {
     if ($9_1) {
      $8_1 = Math_fround(HEAPF32[$3_1 + 4 >> 2] - $14_1);
      $11_1 = Math_fround(HEAPF32[$3_1 >> 2] - $6_1);
      $7_1 = Math_fround($8_1 + $11_1);
      label$96 : {
       if (!($11_1 == $11_1 & $8_1 == $8_1)) {
        break label$96
       }
       $18_1 = (wasm2js_scratch_store_f32($11_1), wasm2js_scratch_load_i32(2));
       if (($18_1 | 0) == 1065353216) {
        $7_1 = $44($8_1);
        break label$96;
       }
       $0_1 = $18_1 >>> 30 & 2;
       $1_1 = (wasm2js_scratch_store_f32($8_1), wasm2js_scratch_load_i32(2));
       $46_1 = $0_1 | $1_1 >>> 31;
       label$98 : {
        label$99 : {
         label$100 : {
          label$101 : {
           $16_1 = $1_1 & 2147483647;
           if (!$16_1) {
            label$103 : {
             switch ($46_1 - 2 | 0) {
             case 0:
              break label$101;
             case 1:
              break label$103;
             default:
              break label$100;
             };
            }
            $7_1 = Math_fround(-3.1415927410125732);
            break label$96;
           }
           $18_1 = $18_1 & 2147483647;
           if (($18_1 | 0) != 2139095040) {
            if (!$18_1) {
             break label$98
            }
            if (!($16_1 >>> 0 <= $18_1 + 218103808 >>> 0 ? ($16_1 | 0) != 2139095040 : 0)) {
             break label$98
            }
            label$105 : {
             if ($18_1 >>> 0 > $16_1 + 218103808 >>> 0) {
              $7_1 = Math_fround(0.0);
              if ($0_1) {
               break label$105
              }
             }
             $7_1 = $44(Math_fround(Math_abs(Math_fround($8_1 / $11_1))));
            }
            $8_1 = $7_1;
            if ($46_1 >>> 0 <= 2) {
             label$108 : {
              switch ($46_1 - 1 | 0) {
              case 0:
               $7_1 = Math_fround(-$8_1);
               break label$96;
              case 1:
               break label$108;
              default:
               break label$100;
              };
             }
             $7_1 = Math_fround(Math_fround(3.1415927410125732) - Math_fround($8_1 + Math_fround(8.742277657347586e-08)));
             break label$96;
            }
            $7_1 = Math_fround(Math_fround($8_1 + Math_fround(8.742277657347586e-08)) + Math_fround(-3.1415927410125732));
            break label$96;
           }
           if (($16_1 | 0) == 2139095040) {
            break label$99
           }
           $7_1 = HEAPF32[($46_1 << 2) + 3808 >> 2];
           break label$96;
          }
          $8_1 = Math_fround(3.1415927410125732);
         }
         $7_1 = $8_1;
         break label$96;
        }
        $7_1 = HEAPF32[($46_1 << 2) + 3792 >> 2];
        break label$96;
       }
       $7_1 = ($1_1 | 0) < 0 ? Math_fround(-1.5707963705062866) : Math_fround(1.5707963705062866);
      }
      HEAPF32[$19_1 >> 2] = $7_1;
      $9_1 = $9_1 - 1 | 0;
      $3_1 = $3_1 + 8 | 0;
      $19_1 = $19_1 + 4 | 0;
      continue;
     }
     break;
    };
    $9_1 = $5_1 + 496 | 0;
    $3_1 = $4_1;
    while (1) {
     if ($3_1) {
      HEAP32[$9_1 >> 2] = 1;
      $3_1 = $3_1 - 1 | 0;
      $9_1 = $9_1 + 4 | 0;
      continue;
     }
     break;
    };
    HEAP32[$5_1 + 160 >> 2] = $20_1;
    $0_1 = $20_1 << 2;
    HEAP32[$0_1 + ($5_1 + 496 | 0) >> 2] = 0;
    $11_1 = Math_fround(Math_fround(6.2831854820251465) / Math_fround($28_1 | 0));
    $18_1 = $0_1 + ($5_1 + 528 | 0) | 0;
    $1_1 = $5_1 + 160 | 0;
    $16_1 = 1;
    while (1) {
     if (($16_1 | 0) != ($28_1 | 0)) {
      $1_1 = $1_1 + 4 | 0;
      HEAP32[$1_1 >> 2] = $20_1;
      $6_1 = Math_fround(Math_fround($11_1 * Math_fround($16_1 | 0)) + HEAPF32[$18_1 >> 2]);
      $7_1 = $6_1 > Math_fround(3.1415927410125732) ? Math_fround($6_1 + Math_fround(-6.2831854820251465)) : $6_1;
      $8_1 = Math_fround(1.0e9);
      $3_1 = 0;
      $19_1 = $5_1 + 528 | 0;
      $9_1 = $5_1 + 496 | 0;
      $0_1 = $20_1;
      while (1) {
       if (($3_1 | 0) != ($4_1 | 0)) {
        label$116 : {
         if (!HEAP32[$9_1 >> 2]) {
          break label$116
         }
         $6_1 = Math_fround(Math_abs(Math_fround(HEAPF32[$19_1 >> 2] - $7_1)));
         $6_1 = $6_1 > Math_fround(3.1415927410125732) ? Math_fround(Math_fround(6.2831854820251465) - $6_1) : $6_1;
         if (!($6_1 < $8_1)) {
          break label$116
         }
         HEAP32[$1_1 >> 2] = $3_1;
         $0_1 = $3_1;
         $8_1 = $6_1;
        }
        $9_1 = $9_1 + 4 | 0;
        $19_1 = $19_1 + 4 | 0;
        $3_1 = $3_1 + 1 | 0;
        continue;
       }
       break;
      };
      HEAP32[($5_1 + 496 | 0) + ($0_1 << 2) >> 2] = 0;
      $16_1 = $16_1 + 1 | 0;
      continue;
     }
     break;
    };
    $1_1 = ($15_1 | 0) > 3;
    $9_1 = 0;
    while (1) {
     if (($9_1 | 0) == ($28_1 | 0)) {
      break label$1
     }
     $4_1 = HEAP32[($5_1 + 160 | 0) + ($9_1 << 2) >> 2];
     $0_1 = ($5_1 + 224 | 0) + Math_imul($4_1, 12) | 0;
     $3_1 = 0;
     while (1) {
      if (($3_1 | 0) != 12) {
       HEAPF32[($5_1 + 528 | 0) + $3_1 >> 2] = HEAPF32[$0_1 + $3_1 >> 2] + HEAPF32[$3_1 + $27_1 >> 2];
       $3_1 = $3_1 + 4 | 0;
       continue;
      }
      break;
     };
     label$120 : {
      if (!$1_1) {
       HEAP32[$5_1 + 508 >> 2] = 0;
       HEAPF32[$5_1 + 504 >> 2] = -HEAPF32[$5_1 + 40 >> 2];
       HEAPF32[$5_1 + 500 >> 2] = -HEAPF32[$5_1 + 36 >> 2];
       HEAPF32[$5_1 + 496 >> 2] = -HEAPF32[$5_1 + 32 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $5_1 + 496 | 0, $5_1 + 528 | 0, Math_fround(-HEAPF32[($5_1 + 192 | 0) + ($4_1 << 2) >> 2]));
       break label$120;
      }
      HEAP32[$5_1 + 508 >> 2] = 0;
      $7_1 = HEAPF32[$5_1 + 40 >> 2];
      HEAPF32[$5_1 + 504 >> 2] = -$7_1;
      $8_1 = HEAPF32[$5_1 + 36 >> 2];
      HEAPF32[$5_1 + 500 >> 2] = -$8_1;
      $6_1 = HEAPF32[$5_1 + 32 >> 2];
      HEAPF32[$5_1 + 496 >> 2] = -$6_1;
      HEAP32[$5_1 + 156 >> 2] = 0;
      $11_1 = $7_1;
      $7_1 = HEAPF32[($5_1 + 192 | 0) + ($4_1 << 2) >> 2];
      HEAPF32[$5_1 + 152 >> 2] = HEAPF32[$5_1 + 536 >> 2] - Math_fround($11_1 * $7_1);
      HEAPF32[$5_1 + 148 >> 2] = HEAPF32[$5_1 + 532 >> 2] - Math_fround($8_1 * $7_1);
      HEAPF32[$5_1 + 144 >> 2] = HEAPF32[$5_1 + 528 >> 2] - Math_fround($6_1 * $7_1);
      FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $5_1 + 496 | 0, $5_1 + 144 | 0, Math_fround(-$7_1));
     }
     $9_1 = $9_1 + 1 | 0;
     continue;
    };
   }
   $15_1 = $5_1 + 224 | 0;
   $9_1 = 0;
   while (1) {
    if (($4_1 | 0) == ($9_1 | 0)) {
     break label$1
    }
    $3_1 = 0;
    while (1) {
     if (($3_1 | 0) != 12) {
      HEAPF32[($5_1 + 528 | 0) + $3_1 >> 2] = HEAPF32[$3_1 + $15_1 >> 2] + HEAPF32[$3_1 + $27_1 >> 2];
      $3_1 = $3_1 + 4 | 0;
      continue;
     }
     break;
    };
    HEAP32[$5_1 + 508 >> 2] = 0;
    HEAPF32[$5_1 + 504 >> 2] = -HEAPF32[$5_1 + 40 >> 2];
    HEAPF32[$5_1 + 500 >> 2] = -HEAPF32[$5_1 + 36 >> 2];
    HEAPF32[$5_1 + 496 >> 2] = -HEAPF32[$5_1 + 32 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $5_1 + 496 | 0, $5_1 + 528 | 0, Math_fround(-HEAPF32[($5_1 + 192 | 0) + ($9_1 << 2) >> 2]));
    $15_1 = $15_1 + 12 | 0;
    $9_1 = $9_1 + 1 | 0;
    continue;
   };
  }
  global$0 = $5_1 + 560 | 0;
 }
 
 function $450($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 13516;
  label$1 : {
   if (!HEAPU8[$0_1 + 8 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1);
  }
  return $0_1 | 0;
 }
 
 function $451($0_1) {
  $0_1 = $0_1 | 0;
  $17($450($0_1));
 }
 
 function $452($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $6_1 = global$0 - 160 | 0;
  global$0 = $6_1;
  $9_1 = HEAP32[$0_1 + 12 >> 2];
  label$1 : {
   if (!$9_1) {
    break label$1
   }
   HEAP32[$4_1 + 4 >> 2] = $9_1;
   $9_1 = HEAP32[$1_1 + 4 >> 2];
   $10_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = HEAP32[$1_1 + 12 >> 2];
   $7_1 = $1_1 + 8 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $6_1 + 32 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $7_1 = $1_1 + 24 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $6_1 + 48 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $7_1 = $1_1 + 40 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $6_1 - -64 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $7_1 = $1_1 + 56 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $6_1 + 80 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   HEAP32[$6_1 + 152 >> 2] = 1566444395;
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$6_1 + 24 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$6_1 + 28 >> 2] = $5_1;
   $5_1 = HEAP32[$1_1 + 20 >> 2];
   HEAP32[$6_1 + 40 >> 2] = HEAP32[$1_1 + 16 >> 2];
   HEAP32[$6_1 + 44 >> 2] = $5_1;
   $5_1 = HEAP32[$1_1 + 36 >> 2];
   HEAP32[$6_1 + 56 >> 2] = HEAP32[$1_1 + 32 >> 2];
   HEAP32[$6_1 + 60 >> 2] = $5_1;
   $5_1 = HEAP32[$1_1 + 52 >> 2];
   HEAP32[$6_1 + 72 >> 2] = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$6_1 + 76 >> 2] = $5_1;
   $1_1 = HEAP32[$2_1 + 12 >> 2];
   $2_1 = $1_1 + 8 | 0;
   $7_1 = HEAP32[$2_1 + 4 >> 2];
   $5_1 = $6_1 + 96 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $7_1;
   $5_1 = HEAP32[$1_1 + 20 >> 2];
   $2_1 = $6_1 + 104 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $5_1 = $1_1 + 24 | 0;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   $2_1 = $6_1 + 112 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $7_1;
   $5_1 = HEAP32[$1_1 + 36 >> 2];
   $2_1 = $6_1 + 120 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $5_1 = $1_1 + 40 | 0;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   $2_1 = $6_1 + 128 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $7_1;
   $5_1 = HEAP32[$1_1 + 52 >> 2];
   $2_1 = $6_1 + 136 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $5_1 = $1_1 + 56 | 0;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   $2_1 = $6_1 + 144 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $7_1;
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$6_1 + 88 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$6_1 + 92 >> 2] = $2_1;
   HEAP32[$6_1 + 16 >> 2] = $10_1;
   HEAP32[$6_1 + 12 >> 2] = $9_1;
   HEAP32[$6_1 + 8 >> 2] = 13464;
   $449($6_1 + 8 | 0, $6_1 + 24 | 0, $4_1, HEAP32[$3_1 + 20 >> 2], 0);
   if (!HEAPU8[$0_1 + 8 | 0]) {
    break label$1
   }
   $370($4_1);
  }
  global$0 = $6_1 + 160 | 0;
 }
 
 function $453($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 13588;
  label$1 : {
   if (!HEAPU8[$0_1 + 8 | 0]) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1);
  }
  return $0_1 | 0;
 }
 
 function $454($0_1) {
  $0_1 = $0_1 | 0;
  $17($453($0_1));
 }
 
 function $455($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14_1 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = 0, $24_1 = 0, $25 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = Math_fround(0), $38_1 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = Math_fround(0), $47_1 = Math_fround(0), $48_1 = 0;
  $3_1 = global$0 - 656 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!HEAP32[$0_1 + 12 >> 2]) {
    break label$1
   }
   $7_1 = HEAPU8[$0_1 + 16 | 0];
   $16_1 = $7_1 ? $2_1 : $1_1;
   $12_1 = HEAP32[$16_1 + 4 >> 2];
   $13_1 = $7_1 ? $1_1 : $2_1;
   $23_1 = HEAP32[$13_1 + 4 >> 2];
   $379($3_1 + 528 | 0, HEAP32[$16_1 + 12 >> 2]);
   $380($3_1 + 592 | 0, $3_1 + 528 | 0, HEAP32[$13_1 + 12 >> 2]);
   $17_1 = $3_1 + 600 | 0;
   $9_1 = $17_1;
   $7_1 = HEAP32[$9_1 + 4 >> 2];
   $10_1 = $3_1 + 232 | 0;
   HEAP32[$10_1 >> 2] = HEAP32[$9_1 >> 2];
   HEAP32[$10_1 + 4 >> 2] = $7_1;
   $8_1 = $3_1 + 616 | 0;
   $9_1 = $8_1;
   $7_1 = HEAP32[$9_1 + 4 >> 2];
   $10_1 = $3_1 + 248 | 0;
   HEAP32[$10_1 >> 2] = HEAP32[$9_1 >> 2];
   HEAP32[$10_1 + 4 >> 2] = $7_1;
   $6_1 = $3_1 + 632 | 0;
   $7_1 = HEAP32[$6_1 + 4 >> 2];
   $10_1 = $3_1 + 264 | 0;
   HEAP32[$10_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$10_1 + 4 >> 2] = $7_1;
   $5_1 = $3_1 + 648 | 0;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   $10_1 = $3_1 + 280 | 0;
   HEAP32[$10_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$10_1 + 4 >> 2] = $7_1;
   $7_1 = HEAP32[$3_1 + 596 >> 2];
   HEAP32[$3_1 + 224 >> 2] = HEAP32[$3_1 + 592 >> 2];
   HEAP32[$3_1 + 228 >> 2] = $7_1;
   $7_1 = HEAP32[$3_1 + 612 >> 2];
   HEAP32[$3_1 + 240 >> 2] = HEAP32[$3_1 + 608 >> 2];
   HEAP32[$3_1 + 244 >> 2] = $7_1;
   $7_1 = HEAP32[$3_1 + 628 >> 2];
   HEAP32[$3_1 + 256 >> 2] = HEAP32[$3_1 + 624 >> 2];
   HEAP32[$3_1 + 260 >> 2] = $7_1;
   $7_1 = HEAP32[$3_1 + 644 >> 2];
   HEAP32[$3_1 + 272 >> 2] = HEAP32[$3_1 + 640 >> 2];
   HEAP32[$3_1 + 276 >> 2] = $7_1;
   $379($3_1 + 528 | 0, HEAP32[$13_1 + 12 >> 2]);
   $380($3_1 + 592 | 0, $3_1 + 528 | 0, HEAP32[$16_1 + 12 >> 2]);
   $7_1 = HEAP32[$17_1 + 4 >> 2];
   $9_1 = $3_1 + 168 | 0;
   HEAP32[$9_1 >> 2] = HEAP32[$17_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $7_1;
   $7_1 = HEAP32[$8_1 + 4 >> 2];
   $9_1 = $3_1 + 184 | 0;
   HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $7_1;
   $7_1 = HEAP32[$6_1 + 4 >> 2];
   $9_1 = $3_1 + 200 | 0;
   HEAP32[$9_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $7_1;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   $9_1 = $3_1 + 216 | 0;
   HEAP32[$9_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $7_1;
   $7_1 = HEAP32[$3_1 + 596 >> 2];
   HEAP32[$3_1 + 160 >> 2] = HEAP32[$3_1 + 592 >> 2];
   HEAP32[$3_1 + 164 >> 2] = $7_1;
   $7_1 = HEAP32[$3_1 + 612 >> 2];
   HEAP32[$3_1 + 176 >> 2] = HEAP32[$3_1 + 608 >> 2];
   HEAP32[$3_1 + 180 >> 2] = $7_1;
   $7_1 = HEAP32[$3_1 + 628 >> 2];
   HEAP32[$3_1 + 192 >> 2] = HEAP32[$3_1 + 624 >> 2];
   HEAP32[$3_1 + 196 >> 2] = $7_1;
   $7_1 = HEAP32[$3_1 + 644 >> 2];
   HEAP32[$3_1 + 208 >> 2] = HEAP32[$3_1 + 640 >> 2];
   HEAP32[$3_1 + 212 >> 2] = $7_1;
   $5_1 = $23_1 + 52 | 0;
   $10_1 = $23_1 + 56 | 0;
   $9_1 = $23_1 + 60 | 0;
   $351($3_1 + 592 | 0, $3_1 + 224 | 0, Math_fround(-HEAPF32[$5_1 >> 2]), Math_fround(-HEAPF32[$10_1 >> 2]), Math_fround(-HEAPF32[$9_1 >> 2]));
   FUNCTION_TABLE[HEAP32[HEAP32[$12_1 >> 2] + 64 >> 2]]($3_1 + 144 | 0, $12_1, $3_1 + 592 | 0);
   $78($3_1 + 128 | 0, $3_1 + 160 | 0, HEAPF32[$3_1 + 144 >> 2], HEAPF32[$3_1 + 148 >> 2], HEAPF32[$3_1 + 152 >> 2]);
   $18_1 = HEAPF32[$5_1 >> 2];
   $19_1 = HEAPF32[$3_1 + 128 >> 2];
   $20_1 = HEAPF32[$10_1 >> 2];
   $21_1 = HEAPF32[$3_1 + 132 >> 2];
   $22_1 = HEAPF32[$9_1 >> 2];
   $14_1 = HEAPF32[$3_1 + 136 >> 2];
   $11_1 = Math_fround(Math_fround(Math_fround(Math_fround($18_1 * $19_1) + Math_fround($20_1 * $21_1)) + Math_fround($22_1 * $14_1)) - HEAPF32[$23_1 + 68 >> 2]);
   $78($3_1 + 112 | 0, HEAP32[$13_1 + 12 >> 2], Math_fround($19_1 - Math_fround($18_1 * $11_1)), Math_fround($21_1 - Math_fround($20_1 * $11_1)), Math_fround($14_1 - Math_fround($22_1 * $11_1)));
   $7_1 = HEAP32[$0_1 + 12 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $7_1;
   if ($11_1 < HEAPF32[$7_1 + 848 >> 2]) {
    $351($3_1 + 592 | 0, HEAP32[$13_1 + 12 >> 2], HEAPF32[$23_1 + 52 >> 2], HEAPF32[$10_1 >> 2], HEAPF32[$9_1 >> 2]);
    $9_1 = $3_1 + 120 | 0;
    $7_1 = HEAP32[$9_1 + 4 >> 2];
    $10_1 = $3_1 + 536 | 0;
    HEAP32[$10_1 >> 2] = HEAP32[$9_1 >> 2];
    HEAP32[$10_1 + 4 >> 2] = $7_1;
    $7_1 = HEAP32[$3_1 + 116 >> 2];
    HEAP32[$3_1 + 528 >> 2] = HEAP32[$3_1 + 112 >> 2];
    HEAP32[$3_1 + 532 >> 2] = $7_1;
    FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $3_1 + 592 | 0, $3_1 + 528 | 0, $11_1);
   }
   label$3 : {
    if (HEAP32[$12_1 + 4 >> 2] > 6) {
     break label$3
    }
    if (HEAP32[HEAP32[$4_1 + 4 >> 2] + 844 >> 2] >= HEAP32[$0_1 + 24 >> 2]) {
     break label$3
    }
    $137($5_1, $3_1 + 96 | 0, $3_1 + 80 | 0);
    $14_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$12_1 >> 2] + 16 >> 2]]($12_1));
    $249($3_1 - -64 | 0, HEAPF32[$3_1 + 96 >> 2], HEAPF32[$3_1 + 100 >> 2], HEAPF32[$3_1 + 104 >> 2], Math_fround(Math_min(Math_fround(Math_fround(.019999999552965164) / $14_1), Math_fround(.39269909262657166))));
    $24_1 = $3_1 + 512 | 0;
    $10_1 = $3_1 + 448 | 0;
    $25 = $3_1 + 496 | 0;
    $9_1 = $3_1 + 432 | 0;
    $26_1 = $3_1 + 480 | 0;
    $7_1 = $3_1 + 416 | 0;
    $29_1 = $3_1 + 576 | 0;
    $30_1 = $3_1 + 560 | 0;
    $31_1 = $3_1 + 544 | 0;
    $32_1 = $3_1 + 640 | 0;
    $33_1 = $3_1 + 624 | 0;
    $34_1 = $3_1 + 608 | 0;
    while (1) {
     $5_1 = HEAP32[$0_1 + 20 >> 2];
     if (($5_1 | 0) <= ($35_1 | 0)) {
      break label$3
     }
     $249($3_1 + 48 | 0, HEAPF32[$23_1 + 52 >> 2], HEAPF32[$23_1 + 56 >> 2], HEAPF32[$23_1 + 60 >> 2], Math_fround(Math_fround(Math_fround(6.2831854820251465) / Math_fround($5_1 | 0)) * Math_fround($35_1 | 0)));
     HEAPF32[$3_1 + 8 >> 2] = -HEAPF32[$3_1 + 56 >> 2];
     HEAPF32[$3_1 + 4 >> 2] = -HEAPF32[$3_1 + 52 >> 2];
     HEAPF32[$3_1 >> 2] = -HEAPF32[$3_1 + 48 >> 2];
     HEAPF32[$3_1 + 12 >> 2] = HEAPF32[$3_1 + 60 >> 2];
     $246($3_1 + 16 | 0, $3_1, $3_1 - -64 | 0);
     $246($3_1 + 32 | 0, $3_1 + 16 | 0, $3_1 + 48 | 0);
     $6_1 = HEAPU8[$0_1 + 16 | 0];
     $5_1 = $6_1 ? $2_1 : $1_1;
     $48_1 = HEAP32[$5_1 + 4 >> 2];
     $27_1 = $6_1 ? $1_1 : $2_1;
     $28_1 = HEAP32[$27_1 + 4 >> 2];
     $15_1 = HEAP32[$5_1 + 12 >> 2];
     $5_1 = $15_1;
     $12_1 = HEAP32[$5_1 >> 2];
     $13_1 = HEAP32[$5_1 + 4 >> 2];
     $5_1 = $5_1 + 8 | 0;
     $16_1 = HEAP32[$5_1 >> 2];
     $17_1 = HEAP32[$5_1 + 4 >> 2];
     $6_1 = $15_1 + 24 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     $8_1 = $34_1 + 8 | 0;
     HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$15_1 + 20 >> 2];
     HEAP32[$34_1 >> 2] = HEAP32[$15_1 + 16 >> 2];
     HEAP32[$34_1 + 4 >> 2] = $5_1;
     $36_1 = $3_1 + 600 | 0;
     $5_1 = $36_1;
     HEAP32[$5_1 >> 2] = $16_1;
     HEAP32[$5_1 + 4 >> 2] = $17_1;
     $6_1 = $15_1 + 40 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     $8_1 = $33_1 + 8 | 0;
     HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$15_1 + 36 >> 2];
     HEAP32[$33_1 >> 2] = HEAP32[$15_1 + 32 >> 2];
     HEAP32[$33_1 + 4 >> 2] = $5_1;
     $6_1 = $15_1 + 56 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     $8_1 = $32_1 + 8 | 0;
     HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$15_1 + 52 >> 2];
     HEAP32[$32_1 >> 2] = HEAP32[$15_1 + 48 >> 2];
     HEAP32[$32_1 + 4 >> 2] = $5_1;
     HEAP32[$3_1 + 592 >> 2] = $12_1;
     HEAP32[$3_1 + 596 >> 2] = $13_1;
     $379($3_1 + 400 | 0, HEAP32[$27_1 + 12 >> 2]);
     $380($3_1 + 464 | 0, $3_1 + 400 | 0, $3_1 + 592 | 0);
     $12_1 = $3_1 + 472 | 0;
     $6_1 = $12_1;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     $8_1 = $3_1 + 536 | 0;
     HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$26_1 + 4 >> 2];
     HEAP32[$31_1 >> 2] = HEAP32[$26_1 >> 2];
     HEAP32[$31_1 + 4 >> 2] = $5_1;
     $13_1 = $26_1 + 8 | 0;
     $6_1 = $13_1;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     $8_1 = $31_1 + 8 | 0;
     HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$25 + 4 >> 2];
     HEAP32[$30_1 >> 2] = HEAP32[$25 >> 2];
     HEAP32[$30_1 + 4 >> 2] = $5_1;
     $16_1 = $25 + 8 | 0;
     $6_1 = $16_1;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     $8_1 = $30_1 + 8 | 0;
     HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$24_1 + 4 >> 2];
     HEAP32[$29_1 >> 2] = HEAP32[$24_1 >> 2];
     HEAP32[$29_1 + 4 >> 2] = $5_1;
     $17_1 = $24_1 + 8 | 0;
     $6_1 = $17_1;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     $8_1 = $29_1 + 8 | 0;
     HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$3_1 + 468 >> 2];
     HEAP32[$3_1 + 528 >> 2] = HEAP32[$3_1 + 464 >> 2];
     HEAP32[$3_1 + 532 >> 2] = $5_1;
     $371($3_1 + 464 | 0, $3_1 + 32 | 0);
     $37_1 = HEAPF32[$3_1 + 616 >> 2];
     $38_1 = HEAPF32[$3_1 + 608 >> 2];
     $39_1 = HEAPF32[$3_1 + 612 >> 2];
     $40_1 = HEAPF32[$3_1 + 496 >> 2];
     $41_1 = HEAPF32[$3_1 + 464 >> 2];
     $42_1 = HEAPF32[$3_1 + 480 >> 2];
     $43_1 = HEAPF32[$3_1 + 500 >> 2];
     $44_1 = HEAPF32[$3_1 + 468 >> 2];
     $45_1 = HEAPF32[$3_1 + 484 >> 2];
     $46_1 = HEAPF32[$3_1 + 632 >> 2];
     $47_1 = HEAPF32[$3_1 + 624 >> 2];
     $11_1 = HEAPF32[$3_1 + 628 >> 2];
     $18_1 = HEAPF32[$3_1 + 472 >> 2];
     $19_1 = HEAPF32[$3_1 + 592 >> 2];
     $20_1 = HEAPF32[$3_1 + 488 >> 2];
     $21_1 = HEAPF32[$3_1 + 596 >> 2];
     $22_1 = HEAPF32[$3_1 + 504 >> 2];
     $14_1 = HEAPF32[$36_1 >> 2];
     HEAPF32[$36_1 >> 2] = Math_fround(Math_fround($18_1 * $19_1) + Math_fround($20_1 * $21_1)) + Math_fround($22_1 * $14_1);
     HEAP32[$3_1 + 636 >> 2] = 0;
     HEAP32[$3_1 + 620 >> 2] = 0;
     HEAP32[$3_1 + 604 >> 2] = 0;
     HEAPF32[$3_1 + 632 >> 2] = Math_fround(Math_fround($18_1 * $47_1) + Math_fround($20_1 * $11_1)) + Math_fround($22_1 * $46_1);
     HEAPF32[$3_1 + 628 >> 2] = Math_fround(Math_fround($44_1 * $47_1) + Math_fround($45_1 * $11_1)) + Math_fround($43_1 * $46_1);
     HEAPF32[$3_1 + 624 >> 2] = Math_fround(Math_fround($41_1 * $47_1) + Math_fround($42_1 * $11_1)) + Math_fround($40_1 * $46_1);
     HEAPF32[$3_1 + 616 >> 2] = Math_fround(Math_fround($18_1 * $38_1) + Math_fround($20_1 * $39_1)) + Math_fround($22_1 * $37_1);
     HEAPF32[$3_1 + 612 >> 2] = Math_fround(Math_fround($44_1 * $38_1) + Math_fround($45_1 * $39_1)) + Math_fround($43_1 * $37_1);
     HEAPF32[$3_1 + 608 >> 2] = Math_fround(Math_fround($41_1 * $38_1) + Math_fround($42_1 * $39_1)) + Math_fround($40_1 * $37_1);
     HEAPF32[$3_1 + 596 >> 2] = Math_fround(Math_fround($44_1 * $19_1) + Math_fround($45_1 * $21_1)) + Math_fround($43_1 * $14_1);
     HEAPF32[$3_1 + 592 >> 2] = Math_fround(Math_fround($41_1 * $19_1) + Math_fround($42_1 * $21_1)) + Math_fround($40_1 * $14_1);
     $379($3_1 + 336 | 0, $3_1 + 592 | 0);
     $380($3_1 + 400 | 0, $3_1 + 336 | 0, HEAP32[$27_1 + 12 >> 2]);
     $6_1 = $3_1 + 408 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$12_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$12_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$7_1 + 4 >> 2];
     HEAP32[$26_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$26_1 + 4 >> 2] = $5_1;
     $6_1 = $7_1 + 8 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$13_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$13_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$9_1 + 4 >> 2];
     HEAP32[$25 >> 2] = HEAP32[$9_1 >> 2];
     HEAP32[$25 + 4 >> 2] = $5_1;
     $6_1 = $9_1 + 8 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$16_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$16_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$10_1 + 4 >> 2];
     HEAP32[$24_1 >> 2] = HEAP32[$10_1 >> 2];
     HEAP32[$24_1 + 4 >> 2] = $5_1;
     $6_1 = $10_1 + 8 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$17_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$17_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$3_1 + 404 >> 2];
     HEAP32[$3_1 + 464 >> 2] = HEAP32[$3_1 + 400 >> 2];
     HEAP32[$3_1 + 468 >> 2] = $5_1;
     $5_1 = $28_1 + 52 | 0;
     $8_1 = $28_1 + 56 | 0;
     $6_1 = $28_1 + 60 | 0;
     $351($3_1 + 336 | 0, $3_1 + 464 | 0, Math_fround(-HEAPF32[$5_1 >> 2]), Math_fround(-HEAPF32[$8_1 >> 2]), Math_fround(-HEAPF32[$6_1 >> 2]));
     FUNCTION_TABLE[HEAP32[HEAP32[$48_1 >> 2] + 64 >> 2]]($3_1 + 400 | 0, $48_1, $3_1 + 336 | 0);
     $78($3_1 + 336 | 0, $3_1 + 528 | 0, HEAPF32[$3_1 + 400 >> 2], HEAPF32[$3_1 + 404 >> 2], HEAPF32[$3_1 + 408 >> 2]);
     $18_1 = HEAPF32[$5_1 >> 2];
     $19_1 = HEAPF32[$3_1 + 336 >> 2];
     $20_1 = HEAPF32[$8_1 >> 2];
     $21_1 = HEAPF32[$3_1 + 340 >> 2];
     $22_1 = HEAPF32[$6_1 >> 2];
     $14_1 = HEAPF32[$3_1 + 344 >> 2];
     $11_1 = Math_fround(Math_fround(Math_fround(Math_fround($18_1 * $19_1) + Math_fround($20_1 * $21_1)) + Math_fround($22_1 * $14_1)) - HEAPF32[$28_1 + 68 >> 2]);
     $78($3_1 + 320 | 0, HEAP32[$27_1 + 12 >> 2], Math_fround($19_1 - Math_fround($18_1 * $11_1)), Math_fround($21_1 - Math_fround($20_1 * $11_1)), Math_fround($14_1 - Math_fround($22_1 * $11_1)));
     $5_1 = HEAP32[$0_1 + 12 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $5_1;
     if ($11_1 < HEAPF32[$5_1 + 848 >> 2]) {
      $351($3_1 + 304 | 0, HEAP32[$27_1 + 12 >> 2], HEAPF32[$28_1 + 52 >> 2], HEAPF32[$8_1 >> 2], HEAPF32[$6_1 >> 2]);
      $6_1 = $3_1 + 328 | 0;
      $5_1 = HEAP32[$6_1 + 4 >> 2];
      $8_1 = $3_1 + 296 | 0;
      HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$8_1 + 4 >> 2] = $5_1;
      $5_1 = HEAP32[$3_1 + 324 >> 2];
      HEAP32[$3_1 + 288 >> 2] = HEAP32[$3_1 + 320 >> 2];
      HEAP32[$3_1 + 292 >> 2] = $5_1;
      FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1, $3_1 + 304 | 0, $3_1 + 288 | 0, $11_1);
     }
     $35_1 = $35_1 + 1 | 0;
     continue;
    };
   }
   if (!HEAPU8[$0_1 + 8 | 0]) {
    break label$1
   }
   if (!HEAP32[HEAP32[$0_1 + 12 >> 2] + 844 >> 2]) {
    break label$1
   }
   $370($4_1);
  }
  global$0 = $3_1 + 656 | 0;
 }
 
 function $456($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 + -64 | 0;
  global$0 = $7_1;
  $1($4_1, 0, 36);
  HEAP32[$5_1 + 4 >> 2] = $2_1;
  HEAP32[$5_1 >> 2] = $0_1;
  $445($7_1, $3_1, $1_1);
  $0_1 = $7_1 + 8 | 0;
  $8_1 = HEAP32[$0_1 + 4 >> 2];
  $2_1 = $5_1 + 16 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $8_1;
  $2_1 = HEAP32[$7_1 + 4 >> 2];
  HEAP32[$5_1 + 8 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$5_1 + 12 >> 2] = $2_1;
  $4_1 = HEAP32[$7_1 + 20 >> 2];
  $2_1 = $5_1 + 24 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$7_1 + 16 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $2_1 = $7_1 + 24 | 0;
  $8_1 = HEAP32[$2_1 + 4 >> 2];
  $4_1 = $5_1 + 32 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $8_1 = HEAP32[$7_1 + 36 >> 2];
  $4_1 = $5_1 + 40 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$7_1 + 32 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $4_1 = $7_1 + 40 | 0;
  $9_1 = HEAP32[$4_1 + 4 >> 2];
  $8_1 = $5_1 + 48 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $9_1;
  $444($7_1, $1_1, $3_1);
  $3_1 = HEAP32[$0_1 + 4 >> 2];
  $1_1 = $5_1 - -64 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  $0_1 = HEAP32[$7_1 + 4 >> 2];
  HEAP32[$5_1 + 56 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$5_1 + 60 >> 2] = $0_1;
  $1_1 = HEAP32[$7_1 + 20 >> 2];
  $0_1 = $5_1 + 72 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$7_1 + 16 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $0_1 = $5_1 + 80 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$7_1 + 36 >> 2];
  $0_1 = $5_1 + 88 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$7_1 + 32 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$4_1 + 4 >> 2];
  $0_1 = $5_1 + 96 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$7_1 + 52 >> 2];
  $0_1 = $5_1 + 104 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$7_1 + 48 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  $1_1 = $7_1 + 56 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $5_1 + 112 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  HEAP32[$5_1 + 124 >> 2] = 0;
  HEAP32[$5_1 + 120 >> 2] = $6_1 ? 22 : 23;
  global$0 = $7_1 - -64 | 0;
 }
 
 function $457($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = Math_fround(0), $13_1 = 0, $14_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = 0, $25 = 0, $26_1 = 0, $27_1 = Math_fround(0), $28_1 = 0, $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = 0, $32_1 = 0, $33_1 = Math_fround(0), $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = Math_fround(0), $42_1 = 0, $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = 0, $46_1 = 0, $47_1 = Math_fround(0), $48_1 = Math_fround(0), $49_1 = 0;
  $3_1 = global$0 - 208 | 0;
  global$0 = $3_1;
  HEAP32[$0_1 + 376 >> 2] = 0;
  HEAP32[$0_1 + 364 >> 2] = 4;
  HEAP32[$0_1 + 368 >> 2] = 0;
  HEAP32[$0_1 + 360 >> 2] = $0_1 + 316;
  HEAP32[$0_1 + 356 >> 2] = $0_1 + 284;
  HEAP32[$0_1 + 352 >> 2] = $0_1 + 252;
  HEAP32[$0_1 + 348 >> 2] = $0_1 + 220;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $4_1;
  $5_1 = $1_1 + 16 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 16 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $4_1 = HEAP32[$1_1 + 12 >> 2];
  HEAP32[$0_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
  HEAP32[$0_1 + 12 >> 2] = $4_1;
  $5_1 = $1_1 + 32 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 32 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $5_1 = $1_1 + 24 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 24 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $5_1 = $1_1 + 48 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 48 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $5_1 = $1_1 + 40 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 40 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $5_1 = $1_1 - -64 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 - -64 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $4_1 = HEAP32[$1_1 + 60 >> 2];
  HEAP32[$0_1 + 56 >> 2] = HEAP32[$1_1 + 56 >> 2];
  HEAP32[$0_1 + 60 >> 2] = $4_1;
  $5_1 = $1_1 + 80 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 80 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $5_1 = $1_1 + 72 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 72 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $5_1 = $1_1 + 96 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 96 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $5_1 = $1_1 + 88 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 88 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $5_1 = $1_1 + 104 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 104 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $5_1 = $1_1 + 112 | 0;
  $8_1 = HEAP32[$5_1 + 4 >> 2];
  $4_1 = $0_1 + 112 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $4_1 = HEAP32[$1_1 + 124 >> 2];
  $1_1 = HEAP32[$1_1 + 120 >> 2];
  HEAP32[$0_1 + 144 >> 2] = 0;
  HEAP32[$0_1 + 180 >> 2] = 0;
  HEAP32[$0_1 + 120 >> 2] = $1_1;
  HEAP32[$0_1 + 124 >> 2] = $4_1;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $5_1 = $0_1 + 128 | 0;
  $1_1 = $5_1;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $2_1 = $2_1 + 8 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $8_1 = $0_1 + 136 | 0;
  $1_1 = $8_1;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $7_1 = HEAPF32[$1_1 >> 2];
  $31_1 = $0_1 + 132 | 0;
  $6_1 = HEAPF32[$31_1 >> 2];
  $9_1 = HEAPF32[$5_1 >> 2];
  HEAP32[$3_1 + 44 >> 2] = 0;
  $10_1 = Math_fround(-$7_1);
  $7_1 = Math_fround(Math_fround(Math_fround($9_1 * $9_1) + Math_fround($6_1 * $6_1)) + Math_fround($7_1 * $7_1));
  $1_1 = $7_1 > Math_fround(0.0);
  HEAPF32[$3_1 + 40 >> 2] = $1_1 ? $10_1 : Math_fround(0.0);
  HEAPF32[$3_1 + 36 >> 2] = $1_1 ? Math_fround(-$6_1) : Math_fround(0.0);
  HEAPF32[$3_1 + 32 >> 2] = $1_1 ? Math_fround(-$9_1) : Math_fround(1.0);
  $32_1 = $0_1 + 148 | 0;
  $458($0_1, $32_1, $3_1 + 32 | 0);
  HEAP32[$0_1 + 164 >> 2] = 1065353216;
  $11_1 = HEAP32[$32_1 >> 2];
  $1_1 = $11_1;
  $2_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $2_1;
  $2_1 = $1_1 + 24 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$8_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $13_1 = $3_1 + 88 | 0;
  $4_1 = HEAP32[$2_1 >> 2];
  HEAP32[$13_1 >> 2] = $4_1;
  HEAP32[$13_1 + 4 >> 2] = $1_1;
  $2_1 = $3_1 + 72 | 0;
  HEAP32[$2_1 >> 2] = $4_1;
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $2_1 = $3_1 + 56 | 0;
  HEAP32[$2_1 >> 2] = $4_1;
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $2_1 = HEAP32[$11_1 + 20 >> 2];
  $11_1 = HEAP32[$11_1 + 16 >> 2];
  HEAP32[$3_1 + 80 >> 2] = $11_1;
  HEAP32[$3_1 + 84 >> 2] = $2_1;
  HEAP32[$3_1 + 64 >> 2] = $11_1;
  HEAP32[$3_1 + 68 >> 2] = $2_1;
  HEAP32[$3_1 + 48 >> 2] = $11_1;
  HEAP32[$3_1 + 52 >> 2] = $2_1;
  HEAP32[$3_1 + 32 >> 2] = $11_1;
  HEAP32[$3_1 + 36 >> 2] = $2_1;
  HEAP32[$3_1 + 40 >> 2] = $4_1;
  HEAP32[$3_1 + 44 >> 2] = $1_1;
  label$1 : {
   while (1) {
    label$3 : {
     $17_1 = HEAP32[$0_1 + 368 >> 2];
     $9_1 = HEAPF32[$0_1 + 128 >> 2];
     $6_1 = $9_1;
     $10_1 = Math_fround($6_1 * $6_1);
     $15_1 = HEAPF32[$31_1 >> 2];
     $6_1 = $15_1;
     $16_1 = Math_fround($10_1 + Math_fround($6_1 * $6_1));
     $10_1 = HEAPF32[$8_1 >> 2];
     $6_1 = $10_1;
     $6_1 = Math_fround(Math_sqrt(Math_fround($16_1 + Math_fround($6_1 * $6_1))));
     if ($6_1 < Math_fround(9.999999747378752e-05)) {
      HEAP32[$0_1 + 376 >> 2] = 1;
      break label$3;
     }
     $2_1 = 0;
     HEAP32[$3_1 + 156 >> 2] = 0;
     HEAPF32[$3_1 + 152 >> 2] = -$10_1;
     HEAPF32[$3_1 + 148 >> 2] = -$15_1;
     HEAPF32[$3_1 + 144 >> 2] = -$9_1;
     $35_1 = Math_imul($17_1, 36);
     $4_1 = $35_1 + $0_1 | 0;
     $14_1 = $4_1 + 148 | 0;
     $458($0_1, $14_1, $3_1 + 144 | 0);
     $36_1 = $4_1 + 180 | 0;
     $19_1 = HEAP32[$36_1 >> 2];
     $1_1 = HEAP32[($4_1 + ($19_1 << 2) | 0) + 144 >> 2];
     $9_1 = HEAPF32[$1_1 + 24 >> 2];
     $15_1 = HEAPF32[$1_1 + 20 >> 2];
     $11_1 = $1_1 + 16 | 0;
     $10_1 = HEAPF32[$11_1 >> 2];
     label$5 : {
      while (1) {
       $1_1 = $2_1 + 16 | 0;
       if (($1_1 | 0) == 80) {
        break label$5
       }
       $13_1 = ($3_1 + 32 | 0) + $2_1 | 0;
       $2_1 = $1_1;
       $12_1 = Math_fround($10_1 - HEAPF32[$13_1 >> 2]);
       $16_1 = Math_fround($12_1 * $12_1);
       $12_1 = Math_fround($15_1 - HEAPF32[$13_1 + 4 >> 2]);
       $16_1 = Math_fround($16_1 + Math_fround($12_1 * $12_1));
       $12_1 = Math_fround($9_1 - HEAPF32[$13_1 + 8 >> 2]);
       if (!(Math_fround($16_1 + Math_fround($12_1 * $12_1)) < Math_fround(9.999999747378752e-05))) {
        continue
       }
       break;
      };
      $459($0_1, (Math_imul(HEAP32[$0_1 + 368 >> 2], 36) + $0_1 | 0) + 148 | 0);
      break label$3;
     }
     $13_1 = $11_1 + 8 | 0;
     $26_1 = HEAP32[$13_1 + 4 >> 2];
     $37_1 = $37_1 + 1 & 3;
     $1_1 = ($3_1 + 32 | 0) + ($37_1 << 4) | 0;
     HEAP32[$1_1 + 8 >> 2] = HEAP32[$13_1 >> 2];
     HEAP32[$1_1 + 12 >> 2] = $26_1;
     $2_1 = HEAP32[$11_1 + 4 >> 2];
     HEAP32[$1_1 >> 2] = HEAP32[$11_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $2_1;
     $9_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0_1 + 128 >> 2] * $10_1) + Math_fround(HEAPF32[$31_1 >> 2] * $15_1)) + Math_fround(HEAPF32[$8_1 >> 2] * $9_1)) / $6_1);
     $33_1 = $9_1 > $33_1 ? $9_1 : $33_1;
     if (Math_fround(Math_fround($6_1 - $33_1) + Math_fround($6_1 * Math_fround(-9.999999747378752e-05))) <= Math_fround(0.0)) {
      $459($0_1, (Math_imul(HEAP32[$0_1 + 368 >> 2], 36) + $0_1 | 0) + 148 | 0);
      break label$3;
     }
     $26_1 = 1 - $17_1 | 0;
     HEAP32[$3_1 + 12 >> 2] = 0;
     label$8 : {
      label$9 : {
       switch ($19_1 - 2 | 0) {
       case 1:
        $7_1 = $460(HEAP32[$14_1 >> 2] + 16 | 0, HEAP32[$4_1 + 152 >> 2] + 16 | 0, HEAP32[$4_1 + 156 >> 2] + 16 | 0, $3_1 + 16 | 0, $3_1 + 12 | 0);
        break label$8;
       case 2:
        $11_1 = HEAP32[$4_1 + 152 >> 2];
        $13_1 = HEAP32[$4_1 + 156 >> 2];
        $14_1 = HEAP32[$14_1 >> 2];
        $4_1 = HEAP32[$4_1 + 160 >> 2];
        $19_1 = $4_1 + 16 | 0;
        HEAP32[$3_1 + 204 >> 2] = $19_1;
        $1_1 = $13_1 + 16 | 0;
        HEAP32[$3_1 + 200 >> 2] = $1_1;
        $2_1 = $11_1 + 16 | 0;
        HEAP32[$3_1 + 196 >> 2] = $2_1;
        $17_1 = $14_1 + 16 | 0;
        HEAP32[$3_1 + 192 >> 2] = $17_1;
        HEAP32[$3_1 + 156 >> 2] = 0;
        HEAP32[$3_1 + 172 >> 2] = 0;
        $38_1 = $14_1 + 24 | 0;
        $6_1 = HEAPF32[$38_1 >> 2];
        $18_1 = $4_1 + 24 | 0;
        $7_1 = HEAPF32[$18_1 >> 2];
        $16_1 = Math_fround($6_1 - $7_1);
        HEAPF32[$3_1 + 152 >> 2] = $16_1;
        $39_1 = $14_1 + 20 | 0;
        $15_1 = HEAPF32[$39_1 >> 2];
        $34_1 = $4_1 + 20 | 0;
        $9_1 = HEAPF32[$34_1 >> 2];
        $23_1 = Math_fround($15_1 - $9_1);
        HEAPF32[$3_1 + 148 >> 2] = $23_1;
        $10_1 = HEAPF32[$17_1 >> 2];
        $12_1 = HEAPF32[$19_1 >> 2];
        $29_1 = Math_fround($10_1 - $12_1);
        HEAPF32[$3_1 + 144 >> 2] = $29_1;
        $40_1 = $11_1 + 24 | 0;
        $27_1 = HEAPF32[$40_1 >> 2];
        $41_1 = Math_fround($27_1 - $7_1);
        HEAPF32[$3_1 + 168 >> 2] = $41_1;
        $42_1 = $11_1 + 20 | 0;
        $20_1 = HEAPF32[$42_1 >> 2];
        $43_1 = Math_fround($20_1 - $9_1);
        HEAPF32[$3_1 + 164 >> 2] = $43_1;
        $21_1 = HEAPF32[$2_1 >> 2];
        $44_1 = Math_fround($21_1 - $12_1);
        HEAPF32[$3_1 + 160 >> 2] = $44_1;
        $22_1 = HEAPF32[$1_1 >> 2];
        $45_1 = $13_1 + 20 | 0;
        $30_1 = HEAPF32[$45_1 >> 2];
        $46_1 = $13_1 + 24 | 0;
        $47_1 = HEAPF32[$46_1 >> 2];
        $48_1 = Math_fround($47_1 - $7_1);
        HEAPF32[$3_1 + 184 >> 2] = $48_1;
        $9_1 = Math_fround($30_1 - $9_1);
        HEAPF32[$3_1 + 180 >> 2] = $9_1;
        $12_1 = Math_fround($22_1 - $12_1);
        HEAPF32[$3_1 + 176 >> 2] = $12_1;
        $7_1 = Math_fround(-1.0);
        $9_1 = $461($29_1, $23_1, $16_1, $44_1, $43_1, $41_1, $12_1, $9_1, $48_1);
        if (!($9_1 > Math_fround(0.0) | $9_1 < Math_fround(0.0))) {
         break label$8
        }
        $12_1 = Math_fround($21_1 - $22_1);
        $22_1 = Math_fround($15_1 - $20_1);
        $20_1 = Math_fround($20_1 - $30_1);
        $21_1 = Math_fround($10_1 - $21_1);
        $23_1 = Math_fround($6_1 * Math_fround(Math_fround($12_1 * $22_1) - Math_fround($20_1 * $21_1)));
        $16_1 = $10_1;
        $6_1 = Math_fround($6_1 - $27_1);
        $10_1 = Math_fround($27_1 - $47_1);
        if (!(Math_fround($9_1 * Math_fround($23_1 + Math_fround(Math_fround($16_1 * Math_fround(Math_fround($20_1 * $6_1) - Math_fround($10_1 * $22_1))) + Math_fround($15_1 * Math_fround(Math_fround($10_1 * $21_1) - Math_fround($12_1 * $6_1)))))) <= Math_fround(0.0))) {
         break label$8
        }
        $2_1 = 0;
        HEAP32[$3_1 + 136 >> 2] = 0;
        HEAP32[$3_1 + 128 >> 2] = 0;
        HEAP32[$3_1 + 132 >> 2] = 0;
        HEAP32[$3_1 + 124 >> 2] = 0;
        $1_1 = 0;
        $28_1 = 0;
        $17_1 = 0;
        while (1) if (($1_1 | 0) == 48) {
         HEAP32[$3_1 + 12 >> 2] = $28_1;
         if (!($7_1 < Math_fround(0.0))) {
          break label$8
         }
         HEAP32[$3_1 + 12 >> 2] = 15;
         $10_1 = HEAPF32[$13_1 + 16 >> 2];
         $12_1 = HEAPF32[$45_1 >> 2];
         $27_1 = HEAPF32[$46_1 >> 2];
         $20_1 = HEAPF32[$11_1 + 16 >> 2];
         $21_1 = HEAPF32[$42_1 >> 2];
         $22_1 = HEAPF32[$40_1 >> 2];
         $7_1 = HEAPF32[$4_1 + 16 >> 2];
         $6_1 = HEAPF32[$34_1 >> 2];
         $15_1 = HEAPF32[$18_1 >> 2];
         $30_1 = Math_fround($461($10_1, $12_1, $27_1, $20_1, $21_1, $22_1, $7_1, $6_1, $15_1) / $9_1);
         HEAPF32[$3_1 + 16 >> 2] = $30_1;
         $16_1 = HEAPF32[$14_1 + 16 >> 2];
         $23_1 = HEAPF32[$39_1 >> 2];
         $29_1 = HEAPF32[$38_1 >> 2];
         $10_1 = Math_fround($461($16_1, $23_1, $29_1, $10_1, $12_1, $27_1, $7_1, $6_1, $15_1) / $9_1);
         HEAPF32[$3_1 + 20 >> 2] = $10_1;
         $7_1 = Math_fround($461($20_1, $21_1, $22_1, $16_1, $23_1, $29_1, $7_1, $6_1, $15_1) / $9_1);
         HEAPF32[$3_1 + 24 >> 2] = $7_1;
         HEAPF32[$3_1 + 28 >> 2] = Math_fround(1.0) - Math_fround($7_1 + Math_fround($30_1 + $10_1));
         $7_1 = Math_fround(0.0);
         break label$8;
        } else {
         $24_1 = ($3_1 + 144 | 0) + $1_1 | 0;
         $6_1 = HEAPF32[$24_1 >> 2];
         $10_1 = HEAPF32[$24_1 + 4 >> 2];
         $15_1 = HEAPF32[$24_1 + 8 >> 2];
         $24_1 = HEAP32[$2_1 + 13656 >> 2];
         $25 = ($3_1 + 144 | 0) + ($24_1 << 4) | 0;
         $129($3_1 + 104 | 0, $6_1, $10_1, $15_1, HEAPF32[$25 >> 2], HEAPF32[$25 + 4 >> 2], HEAPF32[$25 + 8 >> 2]);
         label$15 : {
          if (!(Math_fround($9_1 * Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 16 >> 2] * HEAPF32[$3_1 + 104 >> 2]) + Math_fround(HEAPF32[$34_1 >> 2] * HEAPF32[$3_1 + 108 >> 2])) + Math_fround(HEAPF32[$18_1 >> 2] * HEAPF32[$3_1 + 112 >> 2]))) > Math_fround(0.0))) {
           break label$15
          }
          $25 = $24_1 << 2;
          $6_1 = $460(HEAP32[($3_1 + 192 | 0) + $2_1 >> 2], HEAP32[$25 + ($3_1 + 192 | 0) >> 2], $19_1, $3_1 + 128 | 0, $3_1 + 124 | 0);
          if ($6_1 < $7_1 ? 0 : !($7_1 < Math_fround(0.0))) {
           break label$15
          }
          HEAPF32[($3_1 + 16 | 0) + $2_1 >> 2] = HEAPF32[$3_1 + 128 >> 2];
          HEAPF32[$25 + ($3_1 + 16 | 0) >> 2] = HEAPF32[$3_1 + 132 >> 2];
          HEAP32[($3_1 + 16 | 0) + (HEAP32[$25 + 13656 >> 2] << 2) >> 2] = 0;
          HEAPF32[$3_1 + 28 >> 2] = HEAPF32[$3_1 + 136 >> 2];
          $28_1 = HEAP32[$3_1 + 124 >> 2];
          $28_1 = ((1 << $24_1 & $28_1 << 30 >> 31) + ($28_1 << 1 & 8) | 0) + (0 - ($28_1 & 1) & 1 << $17_1) | 0;
          $7_1 = $6_1;
         }
         $2_1 = $2_1 + 4 | 0;
         $1_1 = $1_1 + 16 | 0;
         $17_1 = $17_1 + 1 | 0;
         continue;
        };
       case 0:
        break label$9;
       default:
        break label$8;
       };
      }
      $7_1 = $462(HEAP32[$14_1 >> 2] + 16 | 0, HEAP32[$4_1 + 152 >> 2] + 16 | 0, $3_1 + 16 | 0, $3_1 + 12 | 0);
     }
     $17_1 = !($7_1 >= Math_fround(0.0));
     label$16 : {
      if (!$17_1) {
       $1_1 = 0;
       $19_1 = Math_imul($26_1, 36) + $0_1 | 0;
       $11_1 = $19_1 + 180 | 0;
       HEAP32[$11_1 >> 2] = 0;
       HEAP32[$5_1 >> 2] = 0;
       HEAP32[$5_1 + 4 >> 2] = 0;
       HEAP32[$0_1 + 368 >> 2] = $26_1;
       $2_1 = $5_1 + 8 | 0;
       HEAP32[$2_1 >> 2] = 0;
       HEAP32[$2_1 + 4 >> 2] = 0;
       $2_1 = $32_1 + $35_1 | 0;
       $26_1 = HEAP32[$36_1 >> 2];
       $4_1 = $3_1 + 16 | 0;
       $13_1 = HEAP32[$3_1 + 12 >> 2];
       while (1) if (($1_1 | 0) == ($26_1 | 0)) {
        if (($13_1 | 0) == 15) {
         HEAP32[$0_1 + 376 >> 2] = 1
        }
        $49_1 = $49_1 + 1 | 0;
        HEAP32[$0_1 + 376 >> 2] = $49_1 >>> 0 <= 127 ? HEAP32[$0_1 + 376 >> 2] : 2;
        break label$16;
       } else {
        $14_1 = HEAP32[$2_1 >> 2];
        label$24 : {
         if ($13_1 >>> $1_1 & 1) {
          $18_1 = HEAP32[$11_1 >> 2];
          HEAP32[$11_1 >> 2] = $18_1 + 1;
          $18_1 = $19_1 + ($18_1 << 2) | 0;
          HEAP32[$18_1 + 148 >> 2] = $14_1;
          $6_1 = HEAPF32[$4_1 >> 2];
          HEAPF32[$18_1 + 164 >> 2] = $6_1;
          HEAP32[$3_1 + 156 >> 2] = 0;
          $14_1 = HEAP32[$2_1 >> 2];
          HEAPF32[$3_1 + 144 >> 2] = $6_1 * HEAPF32[$14_1 + 16 >> 2];
          HEAPF32[$3_1 + 152 >> 2] = $6_1 * HEAPF32[$14_1 + 24 >> 2];
          HEAPF32[$3_1 + 148 >> 2] = $6_1 * HEAPF32[$14_1 + 20 >> 2];
          $89($5_1, $3_1 + 144 | 0);
          break label$24;
         }
         $18_1 = HEAP32[$0_1 + 364 >> 2];
         HEAP32[$0_1 + 364 >> 2] = $18_1 + 1;
         HEAP32[(($18_1 << 2) + $0_1 | 0) + 348 >> 2] = $14_1;
        }
        $4_1 = $4_1 + 4 | 0;
        $2_1 = $2_1 + 4 | 0;
        $1_1 = $1_1 + 1 | 0;
        continue;
       };
      }
      $459($0_1, (Math_imul(HEAP32[$0_1 + 368 >> 2], 36) + $0_1 | 0) + 148 | 0);
     }
     if ($17_1) {
      break label$3
     }
     $1_1 = HEAP32[$0_1 + 376 >> 2];
     if (!$1_1) {
      continue
     }
     break label$1;
    }
    break;
   };
   $1_1 = HEAP32[$0_1 + 376 >> 2];
  }
  HEAP32[$0_1 + 372 >> 2] = (Math_imul(HEAP32[$0_1 + 368 >> 2], 36) + $0_1 | 0) + 148;
  label$26 : {
   label$27 : {
    switch ($1_1 | 0) {
    case 0:
     $7_1 = HEAPF32[$0_1 + 128 >> 2];
     $6_1 = Math_fround($7_1 * $7_1);
     $7_1 = HEAPF32[$0_1 + 132 >> 2];
     $6_1 = Math_fround($6_1 + Math_fround($7_1 * $7_1));
     $7_1 = HEAPF32[$0_1 + 136 >> 2];
     HEAPF32[$0_1 + 144 >> 2] = Math_sqrt(Math_fround($6_1 + Math_fround($7_1 * $7_1)));
     $1_1 = 0;
     break label$26;
    case 1:
     break label$27;
    default:
     break label$26;
    };
   }
   HEAP32[$0_1 + 144 >> 2] = 0;
   $1_1 = 1;
  }
  global$0 = $3_1 + 208 | 0;
  return $1_1;
 }
 
 function $458($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = HEAP32[$1_1 + 32 >> 2];
  $4_1 = ($3_1 << 2) + $1_1 | 0;
  HEAP32[$4_1 + 16 >> 2] = 0;
  $5_1 = HEAP32[$0_1 + 364 >> 2] - 1 | 0;
  HEAP32[$0_1 + 364 >> 2] = $5_1;
  HEAP32[$1_1 + 32 >> 2] = $3_1 + 1;
  $1_1 = HEAP32[(($5_1 << 2) + $0_1 | 0) + 348 >> 2];
  HEAP32[$4_1 >> 2] = $1_1;
  $465($0_1, HEAPF32[$2_1 >> 2], HEAPF32[$2_1 + 4 >> 2], HEAPF32[$2_1 + 8 >> 2], $1_1);
 }
 
 function $459($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[$1_1 + 32 >> 2] - 1 | 0;
  HEAP32[$1_1 + 32 >> 2] = $2_1;
  $3_1 = HEAP32[$0_1 + 364 >> 2];
  HEAP32[$0_1 + 364 >> 2] = $3_1 + 1;
  HEAP32[(($3_1 << 2) + $0_1 | 0) + 348 >> 2] = HEAP32[($2_1 << 2) + $1_1 >> 2];
 }
 
 function $460($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = 0, $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = 0, $20_1 = 0, $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = 0, $25 = 0, $26_1 = Math_fround(0);
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 92 >> 2] = $2_1;
  HEAP32[$5_1 + 88 >> 2] = $1_1;
  HEAP32[$5_1 + 84 >> 2] = $0_1;
  HEAP32[$5_1 + 60 >> 2] = 0;
  $9_1 = HEAPF32[$2_1 + 8 >> 2];
  $10_1 = HEAPF32[$0_1 + 8 >> 2];
  $21_1 = Math_fround($9_1 - $10_1);
  HEAPF32[$5_1 + 72 >> 2] = $21_1;
  $6_1 = HEAPF32[$2_1 + 4 >> 2];
  $7_1 = HEAPF32[$0_1 + 4 >> 2];
  $22_1 = Math_fround($6_1 - $7_1);
  HEAPF32[$5_1 + 68 >> 2] = $22_1;
  $15_1 = HEAPF32[$1_1 + 8 >> 2];
  $11_1 = Math_fround($15_1 - $9_1);
  HEAPF32[$5_1 + 56 >> 2] = $11_1;
  $9_1 = HEAPF32[$1_1 + 4 >> 2];
  $13_1 = Math_fround($9_1 - $6_1);
  HEAPF32[$5_1 + 52 >> 2] = $13_1;
  HEAP32[$5_1 + 44 >> 2] = 0;
  $6_1 = HEAPF32[$2_1 >> 2];
  $8_1 = HEAPF32[$0_1 >> 2];
  $23_1 = Math_fround($6_1 - $8_1);
  HEAPF32[$5_1 + 64 >> 2] = $23_1;
  $17_1 = HEAPF32[$1_1 >> 2];
  $12_1 = Math_fround($17_1 - $6_1);
  HEAPF32[$5_1 + 48 >> 2] = $12_1;
  $6_1 = Math_fround($7_1 - $9_1);
  HEAPF32[$5_1 + 36 >> 2] = $6_1;
  $8_1 = Math_fround($8_1 - $17_1);
  HEAPF32[$5_1 + 32 >> 2] = $8_1;
  $7_1 = Math_fround($10_1 - $15_1);
  HEAPF32[$5_1 + 40 >> 2] = $7_1;
  $9_1 = Math_fround(-1.0);
  $10_1 = Math_fround(Math_fround($6_1 * $11_1) - Math_fround($7_1 * $13_1));
  $7_1 = Math_fround(Math_fround($7_1 * $12_1) - Math_fround($8_1 * $11_1));
  $8_1 = Math_fround(Math_fround($8_1 * $13_1) - Math_fround($6_1 * $12_1));
  $6_1 = $8_1;
  $15_1 = Math_fround(Math_fround(Math_fround($10_1 * $10_1) + Math_fround($7_1 * $7_1)) + Math_fround($6_1 * $6_1));
  label$1 : {
   if (!($15_1 > Math_fround(0.0))) {
    break label$1
   }
   HEAP32[$5_1 + 24 >> 2] = 0;
   HEAP32[$5_1 + 28 >> 2] = 0;
   HEAP32[$5_1 + 20 >> 2] = 0;
   while (1) {
    if (($24_1 | 0) == 48) {
     if (!($9_1 < Math_fround(0.0))) {
      break label$1
     }
     $9_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0_1 >> 2] * $10_1) + Math_fround(HEAPF32[$0_1 + 4 >> 2] * $7_1)) + Math_fround(HEAPF32[$0_1 + 8 >> 2] * $8_1)) / $15_1);
     $6_1 = Math_fround($10_1 * $9_1);
     $7_1 = Math_fround($7_1 * $9_1);
     $10_1 = Math_fround($8_1 * $9_1);
     $9_1 = Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($7_1 * $7_1)) + Math_fround($10_1 * $10_1));
     HEAP32[$4_1 >> 2] = 7;
     $8_1 = Math_fround(HEAPF32[$1_1 + 8 >> 2] - $10_1);
     $17_1 = Math_fround(HEAPF32[$1_1 + 4 >> 2] - $7_1);
     $18_1 = Math_fround(Math_fround($8_1 * $13_1) - Math_fround($17_1 * $11_1));
     $26_1 = Math_fround($18_1 * $18_1);
     $18_1 = Math_fround(HEAPF32[$1_1 >> 2] - $6_1);
     $11_1 = Math_fround(Math_fround($18_1 * $11_1) - Math_fround($8_1 * $12_1));
     $8_1 = Math_fround($26_1 + Math_fround($11_1 * $11_1));
     $11_1 = Math_fround(Math_fround($17_1 * $12_1) - Math_fround($18_1 * $13_1));
     $8_1 = Math_fround(Math_sqrt(Math_fround($8_1 + Math_fround($11_1 * $11_1))));
     $11_1 = Math_fround(Math_sqrt($15_1));
     $13_1 = Math_fround($8_1 / $11_1);
     HEAPF32[$3_1 >> 2] = $13_1;
     $12_1 = Math_fround(HEAPF32[$2_1 + 8 >> 2] - $10_1);
     $10_1 = Math_fround(HEAPF32[$2_1 + 4 >> 2] - $7_1);
     $7_1 = Math_fround(Math_fround($12_1 * $22_1) - Math_fround($10_1 * $21_1));
     $6_1 = Math_fround(HEAPF32[$2_1 >> 2] - $6_1);
     $12_1 = Math_fround(Math_fround($6_1 * $21_1) - Math_fround($12_1 * $23_1));
     $6_1 = Math_fround(Math_fround($10_1 * $23_1) - Math_fround($6_1 * $22_1));
     $6_1 = Math_fround(Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($12_1 * $12_1)) + Math_fround($6_1 * $6_1)))) / $11_1);
     HEAPF32[$3_1 + 4 >> 2] = $6_1;
     HEAPF32[$3_1 + 8 >> 2] = Math_fround(1.0) - Math_fround($6_1 + $13_1);
    } else {
     $14_1 = HEAP32[($5_1 + 84 | 0) + $19_1 >> 2];
     $16_1 = ($5_1 + 32 | 0) + $24_1 | 0;
     $129($5_1, HEAPF32[$16_1 >> 2], HEAPF32[$16_1 + 4 >> 2], HEAPF32[$16_1 + 8 >> 2], $10_1, $7_1, $8_1);
     label$5 : {
      if (!(Math_fround(Math_fround(Math_fround(HEAPF32[$14_1 >> 2] * HEAPF32[$5_1 >> 2]) + Math_fround(HEAPF32[$14_1 + 4 >> 2] * HEAPF32[$5_1 + 4 >> 2])) + Math_fround(HEAPF32[$14_1 + 8 >> 2] * HEAPF32[$5_1 + 8 >> 2])) > Math_fround(0.0))) {
       break label$5
      }
      $20_1 = $14_1;
      $16_1 = HEAP32[$19_1 + 13656 >> 2];
      $14_1 = $16_1 << 2;
      $6_1 = $462($20_1, HEAP32[$14_1 + ($5_1 + 84 | 0) >> 2], $5_1 + 24 | 0, $5_1 + 20 | 0);
      if ($6_1 < $9_1 ? 0 : !($9_1 < Math_fround(0.0))) {
       break label$5
      }
      HEAPF32[$3_1 + $19_1 >> 2] = HEAPF32[$5_1 + 24 >> 2];
      HEAPF32[$3_1 + $14_1 >> 2] = HEAPF32[$5_1 + 28 >> 2];
      $20_1 = HEAP32[$5_1 + 20 >> 2];
      HEAP32[$4_1 >> 2] = (0 - ($20_1 & 1) & 1 << $25) + (1 << $16_1 & $20_1 << 30 >> 31);
      HEAP32[(HEAP32[$14_1 + 13656 >> 2] << 2) + $3_1 >> 2] = 0;
      $9_1 = $6_1;
     }
     $19_1 = $19_1 + 4 | 0;
     $24_1 = $24_1 + 16 | 0;
     $25 = $25 + 1 | 0;
     continue;
    }
    break;
   };
  }
  global$0 = $5_1 + 96 | 0;
  return $9_1;
 }
 
 function $461($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  return Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($1_1 * $5_1) * $6_1) + Math_fround(Math_fround($2_1 * $3_1) * $7_1)) - Math_fround(Math_fround($5_1 * $0_1) * $7_1)) - Math_fround(Math_fround($1_1 * $3_1) * $8_1)) + Math_fround(Math_fround($0_1 * $4_1) * $8_1)) - Math_fround(Math_fround($2_1 * $4_1) * $6_1));
 }
 
 function $462($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0);
  $4_1 = HEAPF32[$0_1 >> 2];
  $6_1 = Math_fround(HEAPF32[$1_1 >> 2] - $4_1);
  $7_1 = HEAPF32[$0_1 + 4 >> 2];
  $9_1 = Math_fround(HEAPF32[$1_1 + 4 >> 2] - $7_1);
  $5_1 = $9_1;
  $8_1 = Math_fround(Math_fround($6_1 * $6_1) + Math_fround($5_1 * $5_1));
  $10_1 = HEAPF32[$0_1 + 8 >> 2];
  $5_1 = Math_fround(HEAPF32[$1_1 + 8 >> 2] - $10_1);
  $8_1 = Math_fround($8_1 + Math_fround($5_1 * $5_1));
  if ($8_1 > Math_fround(0.0)) {
   $4_1 = Math_fround(Math_fround(-Math_fround(Math_fround(Math_fround($4_1 * $6_1) + Math_fround($7_1 * $9_1)) + Math_fround($10_1 * $5_1))) / $8_1);
   if ($4_1 >= Math_fround(1.0)) {
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 1065353216;
    HEAP32[$3_1 >> 2] = 2;
    $4_1 = HEAPF32[$1_1 >> 2];
    $5_1 = Math_fround($4_1 * $4_1);
    $4_1 = HEAPF32[$1_1 + 4 >> 2];
    $5_1 = Math_fround($5_1 + Math_fround($4_1 * $4_1));
    $4_1 = HEAPF32[$1_1 + 8 >> 2];
    return Math_fround($5_1 + Math_fround($4_1 * $4_1));
   }
   if ($4_1 <= Math_fround(0.0)) {
    HEAP32[$2_1 >> 2] = 1065353216;
    HEAP32[$2_1 + 4 >> 2] = 0;
    HEAP32[$3_1 >> 2] = 1;
    $4_1 = HEAPF32[$0_1 >> 2];
    $5_1 = Math_fround($4_1 * $4_1);
    $4_1 = HEAPF32[$0_1 + 4 >> 2];
    $5_1 = Math_fround($5_1 + Math_fround($4_1 * $4_1));
    $4_1 = HEAPF32[$0_1 + 8 >> 2];
    return Math_fround($5_1 + Math_fround($4_1 * $4_1));
   }
   HEAPF32[$2_1 + 4 >> 2] = $4_1;
   HEAPF32[$2_1 >> 2] = Math_fround(1.0) - $4_1;
   HEAP32[$3_1 >> 2] = 3;
   $6_1 = Math_fround(Math_fround($6_1 * $4_1) + HEAPF32[$0_1 >> 2]);
   $7_1 = Math_fround($6_1 * $6_1);
   $6_1 = Math_fround(Math_fround($9_1 * $4_1) + HEAPF32[$0_1 + 4 >> 2]);
   $4_1 = Math_fround(Math_fround($5_1 * $4_1) + HEAPF32[$0_1 + 8 >> 2]);
   $5_1 = Math_fround(Math_fround($7_1 + Math_fround($6_1 * $6_1)) + Math_fround($4_1 * $4_1));
  } else {
   $5_1 = Math_fround(-1.0)
  }
  return $5_1;
 }
 
 function $463($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = HEAP32[$1_1 + 120 >> 2];
  $3_1 = HEAP32[$1_1 >> 2];
  $1_1 = HEAP32[$1_1 + 124 >> 2];
  $3_1 = $3_1 + ($1_1 >> 1) | 0;
  $5_1 = $3_1;
  if ($1_1 & 1) {
   $4_1 = HEAP32[$4_1 + HEAP32[$3_1 >> 2] >> 2]
  }
  FUNCTION_TABLE[$4_1 | 0]($0_1, $5_1, $2_1);
 }
 
 function $464($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $7_1 = HEAP32[$1_1 + 124 >> 2];
  $8_1 = HEAP32[$1_1 + 4 >> 2] + ($7_1 >> 1) | 0;
  $6_1 = HEAP32[$1_1 + 120 >> 2];
  $6_1 = $7_1 & 1 ? HEAP32[HEAP32[$8_1 >> 2] + $6_1 >> 2] : $6_1;
  $351($5_1, $1_1 + 8 | 0, $2_1, $3_1, $4_1);
  FUNCTION_TABLE[$6_1 | 0]($5_1 + 16 | 0, $8_1, $5_1);
  $78($0_1, $1_1 + 56 | 0, HEAPF32[$5_1 + 16 >> 2], HEAPF32[$5_1 + 20 >> 2], HEAPF32[$5_1 + 24 >> 2]);
  global$0 = $5_1 + 32 | 0;
 }
 
 function $465($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = $5_1 + 16 | 0;
  HEAP32[$6_1 + 12 >> 2] = 0;
  $7_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($1_1 * $1_1) + Math_fround($2_1 * $2_1)) + Math_fround($3_1 * $3_1)))));
  HEAPF32[$6_1 + 8 >> 2] = $7_1 * $3_1;
  HEAPF32[$6_1 + 4 >> 2] = $7_1 * $2_1;
  HEAPF32[$6_1 >> 2] = $7_1 * $1_1;
  $8_1 = $5_1 + 24 | 0;
  $9_1 = HEAP32[$8_1 + 4 >> 2];
  $6_1 = $4_1 + 8 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $9_1;
  $8_1 = HEAP32[$5_1 + 20 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$5_1 + 16 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $8_1;
  $463($5_1 + 16 | 0, $0_1, $4_1);
  $464($5_1, $0_1, Math_fround(-HEAPF32[$4_1 >> 2]), Math_fround(-HEAPF32[$4_1 + 4 >> 2]), Math_fround(-HEAPF32[$6_1 >> 2]));
  $1_1 = HEAPF32[$5_1 >> 2];
  $2_1 = HEAPF32[$5_1 + 16 >> 2];
  $3_1 = HEAPF32[$5_1 + 4 >> 2];
  $7_1 = HEAPF32[$5_1 + 20 >> 2];
  $10_1 = HEAPF32[$5_1 + 8 >> 2];
  $11_1 = HEAPF32[$5_1 + 24 >> 2];
  HEAP32[$4_1 + 28 >> 2] = 0;
  HEAPF32[$4_1 + 24 >> 2] = $11_1 - $10_1;
  HEAPF32[$4_1 + 20 >> 2] = $7_1 - $3_1;
  HEAPF32[$4_1 + 16 >> 2] = $2_1 - $1_1;
  global$0 = $5_1 + 32 | 0;
 }
 
 function $466($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0);
  $1_1 = global$0 - 48 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         $2_1 = HEAP32[$0_1 + 372 >> 2];
         switch (HEAP32[$2_1 + 32 >> 2] - 1 | 0) {
         case 3:
          break label$4;
         case 2:
          break label$5;
         case 1:
          break label$6;
         case 0:
          break label$7;
         default:
          break label$3;
         };
        }
        $3_1 = $1_1 + 40 | 0;
        $2_1 = 0;
        while (1) {
         if (($2_1 | 0) == 12) {
          break label$3
         }
         HEAP32[$3_1 >> 2] = 0;
         HEAP32[$3_1 + 4 >> 2] = 0;
         HEAP32[$1_1 + 32 >> 2] = 0;
         HEAP32[$1_1 + 36 >> 2] = 0;
         HEAP32[($1_1 + 32 | 0) + $2_1 >> 2] = 1065353216;
         $458($0_1, HEAP32[$0_1 + 372 >> 2], $1_1 + 32 | 0);
         if ($466($0_1)) {
          break label$2
         }
         $459($0_1, HEAP32[$0_1 + 372 >> 2]);
         $7_1 = HEAP32[$0_1 + 372 >> 2];
         HEAP32[$1_1 + 28 >> 2] = 0;
         HEAPF32[$1_1 + 24 >> 2] = -HEAPF32[$1_1 + 40 >> 2];
         HEAPF32[$1_1 + 20 >> 2] = -HEAPF32[$1_1 + 36 >> 2];
         HEAPF32[$1_1 + 16 >> 2] = -HEAPF32[$1_1 + 32 >> 2];
         $458($0_1, $7_1, $1_1 + 16 | 0);
         if ($466($0_1)) {
          break label$2
         }
         $459($0_1, HEAP32[$0_1 + 372 >> 2]);
         $2_1 = $2_1 + 4 | 0;
         continue;
        };
       }
       $3_1 = HEAP32[$2_1 + 4 >> 2];
       $2_1 = HEAP32[$2_1 >> 2];
       $9_1 = Math_fround(HEAPF32[$3_1 + 24 >> 2] - HEAPF32[$2_1 + 24 >> 2]);
       $8_1 = Math_fround(HEAPF32[$3_1 + 20 >> 2] - HEAPF32[$2_1 + 20 >> 2]);
       $10_1 = Math_fround(HEAPF32[$3_1 + 16 >> 2] - HEAPF32[$2_1 + 16 >> 2]);
       $3_1 = $1_1 + 40 | 0;
       $2_1 = 0;
       while (1) {
        if (($2_1 | 0) == 12) {
         break label$3
        }
        HEAP32[$3_1 >> 2] = 0;
        HEAP32[$3_1 + 4 >> 2] = 0;
        HEAP32[$1_1 + 32 >> 2] = 0;
        HEAP32[$1_1 + 36 >> 2] = 0;
        HEAP32[($1_1 + 32 | 0) + $2_1 >> 2] = 1065353216;
        HEAP32[$1_1 + 28 >> 2] = 0;
        $4_1 = HEAPF32[$1_1 + 36 >> 2];
        $5_1 = HEAPF32[$1_1 + 32 >> 2];
        $6_1 = Math_fround(Math_fround($10_1 * $4_1) - Math_fround($8_1 * $5_1));
        HEAPF32[$1_1 + 24 >> 2] = $6_1;
        $11_1 = HEAPF32[$3_1 >> 2];
        $5_1 = Math_fround(Math_fround($9_1 * $5_1) - Math_fround($10_1 * $11_1));
        HEAPF32[$1_1 + 20 >> 2] = $5_1;
        $4_1 = Math_fround(Math_fround($8_1 * $11_1) - Math_fround($9_1 * $4_1));
        HEAPF32[$1_1 + 16 >> 2] = $4_1;
        if (Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1)) + Math_fround($6_1 * $6_1)) > Math_fround(0.0)) {
         $458($0_1, HEAP32[$0_1 + 372 >> 2], $1_1 + 16 | 0);
         if ($466($0_1)) {
          break label$2
         }
         $459($0_1, HEAP32[$0_1 + 372 >> 2]);
         $7_1 = HEAP32[$0_1 + 372 >> 2];
         HEAP32[$1_1 + 12 >> 2] = 0;
         HEAPF32[$1_1 + 8 >> 2] = -$6_1;
         HEAPF32[$1_1 + 4 >> 2] = -$5_1;
         HEAPF32[$1_1 >> 2] = -$4_1;
         $458($0_1, $7_1, $1_1);
         if ($466($0_1)) {
          break label$2
         }
         $459($0_1, HEAP32[$0_1 + 372 >> 2]);
        }
        $2_1 = $2_1 + 4 | 0;
        continue;
       };
      }
      HEAP32[$1_1 + 44 >> 2] = 0;
      $3_1 = HEAP32[$2_1 + 4 >> 2];
      $7_1 = HEAP32[$2_1 >> 2];
      $6_1 = HEAPF32[$7_1 + 16 >> 2];
      $5_1 = Math_fround(HEAPF32[$3_1 + 16 >> 2] - $6_1);
      $12_1 = HEAP32[$2_1 + 8 >> 2];
      $4_1 = HEAPF32[$7_1 + 20 >> 2];
      $9_1 = Math_fround(HEAPF32[$12_1 + 20 >> 2] - $4_1);
      $4_1 = Math_fround(HEAPF32[$3_1 + 20 >> 2] - $4_1);
      $8_1 = Math_fround(HEAPF32[$12_1 + 16 >> 2] - $6_1);
      $6_1 = Math_fround(Math_fround($5_1 * $9_1) - Math_fround($4_1 * $8_1));
      HEAPF32[$1_1 + 40 >> 2] = $6_1;
      $10_1 = HEAPF32[$7_1 + 24 >> 2];
      $11_1 = Math_fround(HEAPF32[$3_1 + 24 >> 2] - $10_1);
      $13_1 = Math_fround($11_1 * $8_1);
      $8_1 = Math_fround(HEAPF32[$12_1 + 24 >> 2] - $10_1);
      $5_1 = Math_fround($13_1 - Math_fround($5_1 * $8_1));
      HEAPF32[$1_1 + 36 >> 2] = $5_1;
      $4_1 = Math_fround(Math_fround($4_1 * $8_1) - Math_fround($11_1 * $9_1));
      HEAPF32[$1_1 + 32 >> 2] = $4_1;
      if (!(Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1)) + Math_fround($6_1 * $6_1)) > Math_fround(0.0))) {
       break label$3
      }
      $458($0_1, $2_1, $1_1 + 32 | 0);
      if ($466($0_1)) {
       break label$2
      }
      $459($0_1, HEAP32[$0_1 + 372 >> 2]);
      $2_1 = HEAP32[$0_1 + 372 >> 2];
      HEAP32[$1_1 + 28 >> 2] = 0;
      HEAPF32[$1_1 + 24 >> 2] = -$6_1;
      HEAPF32[$1_1 + 20 >> 2] = -$5_1;
      HEAPF32[$1_1 + 16 >> 2] = -$4_1;
      $458($0_1, $2_1, $1_1 + 16 | 0);
      if ($466($0_1)) {
       break label$2
      }
      $459($0_1, HEAP32[$0_1 + 372 >> 2]);
      break label$3;
     }
     $3_1 = HEAP32[$2_1 >> 2];
     $7_1 = HEAP32[$2_1 + 12 >> 2];
     $6_1 = HEAPF32[$7_1 + 16 >> 2];
     $8_1 = Math_fround(HEAPF32[$3_1 + 16 >> 2] - $6_1);
     $5_1 = HEAPF32[$7_1 + 20 >> 2];
     $9_1 = Math_fround(HEAPF32[$3_1 + 20 >> 2] - $5_1);
     $4_1 = HEAPF32[$7_1 + 24 >> 2];
     $10_1 = Math_fround(HEAPF32[$3_1 + 24 >> 2] - $4_1);
     $3_1 = HEAP32[$2_1 + 4 >> 2];
     $2_1 = HEAP32[$2_1 + 8 >> 2];
     $6_1 = $461($8_1, $9_1, $10_1, Math_fround(HEAPF32[$3_1 + 16 >> 2] - $6_1), Math_fround(HEAPF32[$3_1 + 20 >> 2] - $5_1), Math_fround(HEAPF32[$3_1 + 24 >> 2] - $4_1), Math_fround(HEAPF32[$2_1 + 16 >> 2] - $6_1), Math_fround(HEAPF32[$2_1 + 20 >> 2] - $5_1), Math_fround(HEAPF32[$2_1 + 24 >> 2] - $4_1));
     $0_1 = 1;
     if ($6_1 > Math_fround(0.0) | $6_1 < Math_fround(0.0)) {
      break label$1
     }
    }
    $0_1 = 0;
    break label$1;
   }
   $0_1 = 1;
  }
  global$0 = $1_1 + 48 | 0;
  return $0_1;
 }
 
 function $467($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 48 >> 2];
  if ($2_1) {
   HEAP32[$2_1 + 44 >> 2] = HEAP32[$1_1 + 44 >> 2]
  }
  $2_1 = HEAP32[$1_1 + 44 >> 2];
  if ($2_1) {
   HEAP32[$2_1 + 48 >> 2] = HEAP32[$1_1 + 48 >> 2]
  }
  if (HEAP32[$0_1 >> 2] == ($1_1 | 0)) {
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 48 >> 2]
  }
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] - 1;
 }
 
 function $468($0_1, $1_1) {
  var $2_1 = 0;
  HEAP32[$1_1 + 44 >> 2] = 0;
  HEAP32[$1_1 + 48 >> 2] = HEAP32[$0_1 >> 2];
  $2_1 = HEAP32[$0_1 >> 2];
  if ($2_1) {
   HEAP32[$2_1 + 44 >> 2] = $1_1
  }
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] + 1;
 }
 
 function $469($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0);
  label$1 : {
   $5_1 = HEAP32[$0_1 + 18504 >> 2];
   if ($5_1) {
    $14_1 = $0_1 + 18504 | 0;
    $467($14_1, $5_1);
    $15_1 = $0_1 + 18496 | 0;
    $468($15_1, $5_1);
    HEAP32[$5_1 + 28 >> 2] = $3_1;
    HEAP32[$5_1 + 24 >> 2] = $2_1;
    HEAP32[$5_1 + 20 >> 2] = $1_1;
    HEAP8[$5_1 + 55 | 0] = 0;
    $6_1 = HEAPF32[$1_1 + 16 >> 2];
    $10_1 = HEAPF32[$2_1 + 20 >> 2];
    $11_1 = HEAPF32[$3_1 + 24 >> 2];
    $8_1 = HEAPF32[$2_1 + 24 >> 2];
    $9_1 = HEAPF32[$1_1 + 24 >> 2];
    $7_1 = HEAPF32[$1_1 + 20 >> 2];
    $12_1 = HEAPF32[$3_1 + 20 >> 2];
    $17_1 = HEAPF32[$3_1 + 16 >> 2];
    $18_1 = HEAPF32[$2_1 + 16 >> 2];
    HEAP32[$5_1 + 12 >> 2] = 0;
    $10_1 = Math_fround($10_1 - $7_1);
    $11_1 = Math_fround($11_1 - $9_1);
    $8_1 = Math_fround($8_1 - $9_1);
    $7_1 = Math_fround($12_1 - $7_1);
    $9_1 = Math_fround(Math_fround($10_1 * $11_1) - Math_fround($8_1 * $7_1));
    HEAPF32[$5_1 >> 2] = $9_1;
    $19_1 = $8_1;
    $8_1 = Math_fround($17_1 - $6_1);
    $12_1 = Math_fround($18_1 - $6_1);
    $6_1 = Math_fround(Math_fround($19_1 * $8_1) - Math_fround($12_1 * $11_1));
    HEAPF32[$5_1 + 4 >> 2] = $6_1;
    $7_1 = Math_fround(Math_fround($12_1 * $7_1) - Math_fround($10_1 * $8_1));
    HEAPF32[$5_1 + 8 >> 2] = $7_1;
    $16_1 = 2;
    $6_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($9_1 * $9_1) + Math_fround($6_1 * $6_1)) + Math_fround($7_1 * $7_1))));
    if ($6_1 > Math_fround(9.999999747378752e-05)) {
     $13_1 = $5_1 + 16 | 0;
     label$4 : {
      if ($470($5_1, $1_1, $2_1, $13_1)) {
       break label$4
      }
      if ($470($5_1, $2_1, $3_1, $13_1)) {
       break label$4
      }
      if ($470($5_1, $3_1, $1_1, $13_1)) {
       break label$4
      }
      HEAPF32[$5_1 + 16 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 + 16 >> 2] * HEAPF32[$5_1 >> 2]) + Math_fround(HEAPF32[$1_1 + 20 >> 2] * HEAPF32[$5_1 + 4 >> 2])) + Math_fround(HEAPF32[$1_1 + 24 >> 2] * HEAPF32[$5_1 + 8 >> 2])) / $6_1;
     }
     $139($5_1, $6_1);
     if ($4_1) {
      break label$1
     }
     $16_1 = 3;
     if (HEAPF32[$13_1 >> 2] >= Math_fround(-9.999999747378752e-06)) {
      break label$1
     }
    }
    HEAP32[$0_1 >> 2] = $16_1;
    $467($15_1, $5_1);
    $468($14_1, $5_1);
    return 0;
   }
   HEAP32[$0_1 >> 2] = 5;
   return 0;
  }
  return $5_1;
 }
 
 function $470($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0);
  $11_1 = global$0 - 16 | 0;
  global$0 = $11_1;
  $12_1 = $1_1 + 16 | 0;
  $5_1 = Math_fround(HEAPF32[$2_1 + 16 >> 2] - HEAPF32[$12_1 >> 2]);
  $13_1 = $1_1 + 20 | 0;
  $6_1 = Math_fround(HEAPF32[$2_1 + 20 >> 2] - HEAPF32[$13_1 >> 2]);
  $1_1 = $1_1 + 24 | 0;
  $7_1 = Math_fround(HEAPF32[$2_1 + 24 >> 2] - HEAPF32[$1_1 >> 2]);
  $129($11_1, $5_1, $6_1, $7_1, HEAPF32[$0_1 >> 2], HEAPF32[$0_1 + 4 >> 2], HEAPF32[$0_1 + 8 >> 2]);
  $4_1 = HEAPF32[$12_1 >> 2];
  $9_1 = HEAPF32[$13_1 >> 2];
  $10_1 = HEAPF32[$1_1 >> 2];
  $0_1 = Math_fround(Math_fround(Math_fround($4_1 * HEAPF32[$11_1 >> 2]) + Math_fround($9_1 * HEAPF32[$11_1 + 4 >> 2])) + Math_fround($10_1 * HEAPF32[$11_1 + 8 >> 2])) < Math_fround(0.0);
  if ($0_1) {
   $14_1 = Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($6_1 * $6_1)) + Math_fround($7_1 * $7_1));
   $8_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($9_1 * $9_1)) + Math_fround($10_1 * $10_1))));
   label$2 : {
    if (Math_fround(Math_fround(Math_fround($4_1 * $5_1) + Math_fround($9_1 * $6_1)) + Math_fround($10_1 * $7_1)) > Math_fround(0.0)) {
     break label$2
    }
    $8_1 = $5_1;
    $5_1 = HEAPF32[$2_1 + 16 >> 2];
    $15_1 = $6_1;
    $6_1 = HEAPF32[$2_1 + 20 >> 2];
    $16_1 = $7_1;
    $7_1 = HEAPF32[$2_1 + 24 >> 2];
    if (Math_fround(Math_fround(Math_fround($8_1 * $5_1) + Math_fround($15_1 * $6_1)) + Math_fround($16_1 * $7_1)) < Math_fround(0.0)) {
     $8_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($6_1 * $6_1)) + Math_fround($7_1 * $7_1))));
     break label$2;
    }
    $8_1 = Math_fround(Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($9_1 * $9_1)) + Math_fround($10_1 * $10_1)) * Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($6_1 * $6_1)) + Math_fround($7_1 * $7_1)));
    $4_1 = Math_fround(Math_fround(Math_fround($4_1 * $5_1) + Math_fround($9_1 * $6_1)) + Math_fround($10_1 * $7_1));
    $4_1 = Math_fround(Math_fround($8_1 - Math_fround($4_1 * $4_1)) / $14_1);
    $8_1 = Math_fround(Math_sqrt($4_1 > Math_fround(0.0) ? $4_1 : Math_fround(0.0)));
   }
   HEAPF32[$3_1 >> 2] = $8_1;
  }
  global$0 = $11_1 + 16 | 0;
  return $0_1;
 }
 
 function $471($0_1) {
  var $1_1 = Math_fround(0), $2_1 = Math_fround(0), $3_1 = 0, $4_1 = 0;
  $1_1 = HEAPF32[$0_1 + 16 >> 2];
  $1_1 = Math_fround($1_1 * $1_1);
  $3_1 = $0_1;
  while (1) {
   $0_1 = HEAP32[$0_1 + 48 >> 2];
   if ($0_1) {
    $2_1 = HEAPF32[$0_1 + 16 >> 2];
    $2_1 = Math_fround($2_1 * $2_1);
    $4_1 = $2_1 < $1_1;
    $3_1 = $4_1 ? $0_1 : $3_1;
    $1_1 = $4_1 ? $2_1 : $1_1;
    continue;
   }
   break;
  };
  return $3_1;
 }
 
 function $472($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   if (HEAPU8[$3_1 + 55 | 0] == ($1_1 | 0)) {
    break label$1
   }
   $6_1 = $4_1 << 2;
   $7_1 = HEAP32[$6_1 + 13656 >> 2];
   if (Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$3_1 >> 2] * HEAPF32[$2_1 + 16 >> 2]) + Math_fround(HEAPF32[$3_1 + 4 >> 2] * HEAPF32[$2_1 + 20 >> 2])) + Math_fround(HEAPF32[$3_1 + 8 >> 2] * HEAPF32[$2_1 + 24 >> 2])) - HEAPF32[$3_1 + 16 >> 2]) < Math_fround(-9.999999747378752e-06)) {
    $1_1 = $0_1;
    $0_1 = $3_1 + 20 | 0;
    $0_1 = $469($1_1, HEAP32[$0_1 + ($7_1 << 2) >> 2], HEAP32[$0_1 + $6_1 >> 2], $2_1, 0);
    if (!$0_1) {
     break label$1
    }
    HEAP32[$0_1 + 32 >> 2] = $3_1;
    HEAP8[$0_1 + 52 | 0] = $4_1;
    HEAP8[($3_1 + $4_1 | 0) + 52 | 0] = 0;
    HEAP32[(($4_1 << 2) + $3_1 | 0) + 32 >> 2] = $0_1;
    $1_1 = HEAP32[$5_1 >> 2];
    label$3 : {
     if ($1_1) {
      HEAP32[$1_1 + 36 >> 2] = $0_1;
      HEAP8[$1_1 + 53 | 0] = 2;
      HEAP32[$0_1 + 40 >> 2] = $1_1;
      HEAP8[$0_1 + 54 | 0] = 1;
      break label$3;
     }
     HEAP32[$5_1 + 4 >> 2] = $0_1;
    }
    HEAP32[$5_1 >> 2] = $0_1;
    HEAP32[$5_1 + 8 >> 2] = HEAP32[$5_1 + 8 >> 2] + 1;
    return 1;
   }
   HEAP8[$3_1 + 55 | 0] = $1_1;
   if (!$472($0_1, $1_1, $2_1, HEAP32[(($7_1 << 2) + $3_1 | 0) + 32 >> 2], HEAPU8[($3_1 + $7_1 | 0) + 52 | 0], $5_1)) {
    break label$1
   }
   $4_1 = $1_1;
   $1_1 = HEAP32[$6_1 + 13668 >> 2];
   if (!$472($0_1, $4_1, $2_1, HEAP32[(($1_1 << 2) + $3_1 | 0) + 32 >> 2], HEAPU8[($1_1 + $3_1 | 0) + 52 | 0], $5_1)) {
    break label$1
   }
   $467($0_1 + 18496 | 0, $3_1);
   $468($0_1 + 18504 | 0, $3_1);
   $8_1 = 1;
  }
  return $8_1;
 }
 
 function $473($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = 0, $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = 0, $25 = 0, $26_1 = 0, $27_1 = 0, $28_1 = Math_fround(0);
  $10_1 = global$0 - 19120 | 0;
  global$0 = $10_1;
  $9_1 = 0;
  HEAP32[$10_1 + 76 >> 2] = 0;
  $15_1 = Math_fround(HEAPF32[$5_1 + 48 >> 2] - HEAPF32[$4_1 + 48 >> 2]);
  HEAPF32[$10_1 + 64 >> 2] = $15_1;
  $17_1 = Math_fround(HEAPF32[$5_1 + 56 >> 2] - HEAPF32[$4_1 + 56 >> 2]);
  HEAPF32[$10_1 + 72 >> 2] = $17_1;
  $19_1 = Math_fround(HEAPF32[$5_1 + 52 >> 2] - HEAPF32[$4_1 + 52 >> 2]);
  HEAPF32[$10_1 + 68 >> 2] = $19_1;
  $456($2_1, $4_1, $3_1, $5_1, $10_1 + 8 | 0, $10_1 + 18992 | 0, 1);
  $0_1 = $10_1 + 18744 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$10_1 + 18736 >> 2] = 0;
  HEAP32[$10_1 + 18740 >> 2] = 0;
  HEAP32[$10_1 + 18972 >> 2] = 0;
  HEAP32[$10_1 + 18976 >> 2] = 0;
  HEAP32[$10_1 + 18984 >> 2] = 2;
  HEAP32[$10_1 + 18752 >> 2] = 0;
  HEAP32[$10_1 + 108 >> 2] = 0;
  HEAPF32[$10_1 + 104 >> 2] = -$17_1;
  HEAPF32[$10_1 + 100 >> 2] = -$19_1;
  HEAPF32[$10_1 + 96 >> 2] = -$15_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           switch ($457($10_1 + 18608 | 0, $10_1 + 18992 | 0, $10_1 + 96 | 0) - 1 | 0) {
           case 0:
            HEAP32[$10_1 + 18600 >> 2] = 0;
            $0_1 = $10_1 + 144 | 0;
            HEAP32[$0_1 >> 2] = 0;
            HEAP32[$0_1 + 4 >> 2] = 0;
            HEAP32[$10_1 + 152 >> 2] = 0;
            HEAP32[$10_1 + 18592 >> 2] = 0;
            HEAP32[$10_1 + 18596 >> 2] = 0;
            HEAP32[$10_1 + 18588 >> 2] = 0;
            HEAP32[$10_1 + 96 >> 2] = 9;
            HEAP32[$10_1 + 136 >> 2] = 0;
            HEAP32[$10_1 + 140 >> 2] = 0;
            $0_1 = 14336;
            while (1) {
             if ($0_1) {
              $1_1 = ($10_1 + 96 | 0) + $0_1 | 0;
              HEAP32[$1_1 + 4148 >> 2] = $11_1;
              HEAP32[$1_1 + 4144 >> 2] = 0;
              $1_1 = $1_1 + 4100 | 0;
              if ($11_1) {
               HEAP32[$11_1 + 44 >> 2] = $1_1
              }
              $11_1 = (Math_imul(0 - $12_1 | 0, 56) + $10_1 | 0) + 18532 | 0;
              HEAP32[$10_1 + 18600 >> 2] = $1_1;
              $0_1 = $0_1 - 56 | 0;
              $12_1 = $12_1 + 1 | 0;
              continue;
             }
             break;
            };
            HEAP32[$10_1 + 18604 >> 2] = 256;
            $11_1 = HEAP32[$10_1 + 18980 >> 2];
            if (HEAPU32[$11_1 + 32 >> 2] < 2) {
             break label$7
            }
            if (!$466($10_1 + 18608 | 0)) {
             break label$7
            }
            $27_1 = $10_1 + 18592 | 0;
            while (1) {
             $0_1 = HEAP32[$10_1 + 18592 >> 2];
             if ($0_1) {
              $467($27_1, $0_1);
              HEAP32[$0_1 + 44 >> 2] = 0;
              HEAP32[$0_1 + 48 >> 2] = HEAP32[$10_1 + 18600 >> 2];
              $1_1 = HEAP32[$10_1 + 18600 >> 2];
              if ($1_1) {
               HEAP32[$1_1 + 44 >> 2] = $0_1
              }
              HEAP32[$10_1 + 18600 >> 2] = $0_1;
              HEAP32[$10_1 + 18604 >> 2] = HEAP32[$10_1 + 18604 >> 2] + 1;
              continue;
             }
             break;
            };
            HEAP32[$10_1 + 18588 >> 2] = 0;
            HEAP32[$10_1 + 96 >> 2] = 0;
            $9_1 = HEAP32[$11_1 >> 2];
            $0_1 = HEAP32[$11_1 + 12 >> 2];
            $13_1 = HEAPF32[$0_1 + 16 >> 2];
            $14_1 = HEAPF32[$0_1 + 20 >> 2];
            $16_1 = HEAPF32[$0_1 + 24 >> 2];
            $0_1 = HEAP32[$11_1 + 4 >> 2];
            $12_1 = HEAP32[$11_1 + 8 >> 2];
            label$17 : {
             if (!($461(Math_fround(HEAPF32[$9_1 + 16 >> 2] - $13_1), Math_fround(HEAPF32[$9_1 + 20 >> 2] - $14_1), Math_fround(HEAPF32[$9_1 + 24 >> 2] - $16_1), Math_fround(HEAPF32[$0_1 + 16 >> 2] - $13_1), Math_fround(HEAPF32[$0_1 + 20 >> 2] - $14_1), Math_fround(HEAPF32[$0_1 + 24 >> 2] - $16_1), Math_fround(HEAPF32[$12_1 + 16 >> 2] - $13_1), Math_fround(HEAPF32[$12_1 + 20 >> 2] - $14_1), Math_fround(HEAPF32[$12_1 + 24 >> 2] - $16_1)) < Math_fround(0.0))) {
              $1_1 = $0_1;
              $0_1 = $9_1;
              break label$17;
             }
             HEAP32[$11_1 + 4 >> 2] = $9_1;
             HEAP32[$11_1 >> 2] = $0_1;
             i64toi32_i32$HIGH_BITS = HEAP32[$11_1 + 16 >> 2];
             HEAP32[$11_1 + 16 >> 2] = HEAP32[$11_1 + 20 >> 2];
             HEAP32[$11_1 + 20 >> 2] = i64toi32_i32$HIGH_BITS;
             $1_1 = $9_1;
            }
            $0_1 = $469($10_1 + 96 | 0, $0_1, $1_1, $12_1, 1);
            $1_1 = $469($10_1 + 96 | 0, HEAP32[$11_1 + 4 >> 2], HEAP32[$11_1 >> 2], HEAP32[$11_1 + 12 >> 2], 1);
            $20_1 = $469($10_1 + 96 | 0, HEAP32[$11_1 + 8 >> 2], HEAP32[$11_1 + 4 >> 2], HEAP32[$11_1 + 12 >> 2], 1);
            $9_1 = $469($10_1 + 96 | 0, HEAP32[$11_1 >> 2], HEAP32[$11_1 + 8 >> 2], HEAP32[$11_1 + 12 >> 2], 1);
            if (HEAP32[$10_1 + 18596 >> 2] != 4) {
             break label$7
            }
            $12_1 = $471(HEAP32[$10_1 + 18592 >> 2]);
            $24_1 = HEAP32[$12_1 + 28 >> 2];
            $25 = HEAP32[$12_1 + 24 >> 2];
            $26_1 = HEAP32[$12_1 + 20 >> 2];
            $14_1 = HEAPF32[$12_1 + 16 >> 2];
            $16_1 = HEAPF32[$12_1 + 12 >> 2];
            $15_1 = HEAPF32[$12_1 + 8 >> 2];
            $17_1 = HEAPF32[$12_1 + 4 >> 2];
            $13_1 = HEAPF32[$12_1 >> 2];
            HEAP32[$0_1 + 32 >> 2] = $1_1;
            HEAP8[$0_1 + 52 | 0] = 0;
            HEAP32[$1_1 + 32 >> 2] = $0_1;
            HEAP8[$1_1 + 52 | 0] = 0;
            HEAP32[$0_1 + 36 >> 2] = $20_1;
            HEAP8[$0_1 + 53 | 0] = 0;
            HEAP32[$20_1 + 32 >> 2] = $0_1;
            HEAP8[$20_1 + 52 | 0] = 1;
            HEAP32[$0_1 + 40 >> 2] = $9_1;
            HEAP8[$0_1 + 54 | 0] = 0;
            HEAP32[$9_1 + 32 >> 2] = $0_1;
            HEAP8[$9_1 + 52 | 0] = 2;
            HEAP32[$1_1 + 36 >> 2] = $9_1;
            HEAP8[$1_1 + 53 | 0] = 2;
            HEAP32[$9_1 + 40 >> 2] = $1_1;
            HEAP8[$9_1 + 54 | 0] = 1;
            HEAP32[$1_1 + 40 >> 2] = $20_1;
            HEAP8[$1_1 + 54 | 0] = 1;
            HEAP32[$20_1 + 36 >> 2] = $1_1;
            $0_1 = $20_1 + 53 | 0;
            HEAP8[$0_1 | 0] = 2;
            HEAP8[$0_1 + 1 | 0] = 1;
            HEAP32[$20_1 + 40 >> 2] = $9_1;
            HEAP32[$9_1 + 36 >> 2] = $20_1;
            HEAP8[$9_1 + 53 | 0] = 2;
            HEAP32[$10_1 + 96 >> 2] = 0;
            $1_1 = 0;
            label$19 : while (1) {
             if (($1_1 | 0) == 255) {
              break label$5
             }
             $0_1 = HEAP32[$10_1 + 18588 >> 2];
             if ($0_1 >>> 0 > 127) {
              break label$8
             }
             $1_1 = $1_1 + 1 | 0;
             HEAP8[$12_1 + 55 | 0] = $1_1;
             HEAP32[$10_1 + 88 >> 2] = 0;
             HEAP32[$10_1 + 80 >> 2] = 0;
             HEAP32[$10_1 + 84 >> 2] = 0;
             HEAP32[$10_1 + 18588 >> 2] = $0_1 + 1;
             $9_1 = $12_1 + 4 | 0;
             $11_1 = $12_1 + 8 | 0;
             $0_1 = ($10_1 + 96 | 0) + ($0_1 << 5) | 0;
             $20_1 = $0_1 + 60 | 0;
             $465($10_1 + 18608 | 0, HEAPF32[$12_1 >> 2], HEAPF32[$9_1 >> 2], HEAPF32[$11_1 >> 2], $20_1);
             if (!(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$12_1 >> 2] * HEAPF32[$0_1 + 76 >> 2]) + Math_fround(HEAPF32[$9_1 >> 2] * HEAPF32[$0_1 + 80 >> 2])) + Math_fround(HEAPF32[$11_1 >> 2] * HEAPF32[$0_1 + 84 >> 2])) - HEAPF32[$12_1 + 16 >> 2]) > Math_fround(9.999999747378752e-05))) {
              $0_1 = 7;
              break label$6;
             }
             $0_1 = 0;
             $9_1 = 1;
             $11_1 = 32;
             while (1) if ($0_1 >>> 0 < 3 ? $9_1 & 1 : 0) {
              $9_1 = $472($10_1 + 96 | 0, $1_1, $20_1, HEAP32[$11_1 + $12_1 >> 2], HEAPU8[($0_1 + $12_1 | 0) + 52 | 0], $10_1 + 80 | 0);
              $11_1 = $11_1 + 4 | 0;
              $0_1 = $0_1 + 1 | 0;
              continue;
             } else {
              if (!(HEAPU32[$10_1 + 88 >> 2] > 2 & $9_1)) {
               $0_1 = 4;
               break label$6;
              }
              $0_1 = HEAP32[$10_1 + 80 >> 2];
              HEAP8[$0_1 + 53 | 0] = 2;
              $9_1 = HEAP32[$10_1 + 84 >> 2];
              HEAP32[$0_1 + 36 >> 2] = $9_1;
              HEAP32[$9_1 + 40 >> 2] = $0_1;
              HEAP8[$9_1 + 54 | 0] = 1;
              $467($27_1, $12_1);
              HEAP32[$12_1 + 44 >> 2] = 0;
              HEAP32[$12_1 + 48 >> 2] = HEAP32[$10_1 + 18600 >> 2];
              $0_1 = HEAP32[$10_1 + 18600 >> 2];
              if ($0_1) {
               HEAP32[$0_1 + 44 >> 2] = $12_1
              }
              HEAP32[$10_1 + 18600 >> 2] = $12_1;
              HEAP32[$10_1 + 18604 >> 2] = HEAP32[$10_1 + 18604 >> 2] + 1;
              $12_1 = $471(HEAP32[$10_1 + 18592 >> 2]);
              $24_1 = HEAP32[$12_1 + 28 >> 2];
              $25 = HEAP32[$12_1 + 24 >> 2];
              $26_1 = HEAP32[$12_1 + 20 >> 2];
              $14_1 = HEAPF32[$12_1 + 16 >> 2];
              $16_1 = HEAPF32[$12_1 + 12 >> 2];
              $15_1 = HEAPF32[$12_1 + 8 >> 2];
              $17_1 = HEAPF32[$12_1 + 4 >> 2];
              $13_1 = HEAPF32[$12_1 >> 2];
              continue label$19;
             };
            };
           case 1:
            break label$9;
           default:
            break label$1;
           };
          }
          HEAP32[$10_1 + 8 >> 2] = 2;
          break label$1;
         }
         HEAP32[$10_1 + 96 >> 2] = 6;
         break label$5;
        }
        HEAP32[$10_1 + 96 >> 2] = 8;
        $13_1 = Math_fround(0.0);
        $12_1 = 1;
        $16_1 = Math_fround(1.0);
        $14_1 = Math_fround(0.0);
        $18_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($15_1 * $15_1) + Math_fround($19_1 * $19_1)) + Math_fround($17_1 * $17_1))));
        if ($18_1 > Math_fround(0.0)) {
         $16_1 = Math_fround(Math_fround(1.0) / $18_1);
         $14_1 = Math_fround($16_1 * $17_1);
         $13_1 = Math_fround($16_1 * $19_1);
         $16_1 = Math_fround($15_1 * $16_1);
        }
        HEAP32[$10_1 + 132 >> 2] = 1;
        HEAP32[$10_1 + 116 >> 2] = 1065353216;
        HEAP32[$10_1 + 148 >> 2] = 0;
        HEAP32[$10_1 + 152 >> 2] = 0;
        HEAPF32[$10_1 + 144 >> 2] = $14_1;
        HEAPF32[$10_1 + 140 >> 2] = $13_1;
        HEAPF32[$10_1 + 136 >> 2] = $16_1;
        HEAP32[$10_1 + 100 >> 2] = HEAP32[$11_1 >> 2];
        break label$4;
       }
       HEAP32[$10_1 + 96 >> 2] = $0_1;
      }
      HEAPF32[$10_1 + 148 >> 2] = $16_1;
      HEAPF32[$10_1 + 144 >> 2] = $15_1;
      HEAPF32[$10_1 + 140 >> 2] = $17_1;
      $12_1 = 3;
      HEAP32[$10_1 + 132 >> 2] = 3;
      HEAP32[$10_1 + 108 >> 2] = $24_1;
      HEAP32[$10_1 + 104 >> 2] = $25;
      HEAPF32[$10_1 + 152 >> 2] = $14_1;
      HEAPF32[$10_1 + 136 >> 2] = $13_1;
      $0_1 = $24_1 + 20 | 0;
      $19_1 = HEAPF32[$0_1 >> 2];
      $1_1 = $25 + 24 | 0;
      $18_1 = HEAPF32[$1_1 >> 2];
      $16_1 = HEAPF32[$24_1 + 24 >> 2];
      $9_1 = $25 + 20 | 0;
      $22_1 = HEAPF32[$9_1 >> 2];
      $21_1 = HEAPF32[$24_1 + 16 >> 2];
      $23_1 = HEAPF32[$25 + 16 >> 2];
      HEAP32[$10_1 + 100 >> 2] = $26_1;
      $11_1 = $10_1 + 116 | 0;
      $17_1 = Math_fround($17_1 * $14_1);
      $22_1 = Math_fround($22_1 - $17_1);
      $15_1 = Math_fround($15_1 * $14_1);
      $16_1 = Math_fround($16_1 - $15_1);
      $18_1 = Math_fround($18_1 - $15_1);
      $19_1 = Math_fround($19_1 - $17_1);
      $28_1 = Math_fround(Math_fround($22_1 * $16_1) - Math_fround($18_1 * $19_1));
      $13_1 = Math_fround($13_1 * $14_1);
      $14_1 = Math_fround($21_1 - $13_1);
      $21_1 = Math_fround($18_1 * $14_1);
      $18_1 = Math_fround($23_1 - $13_1);
      $21_1 = Math_fround($21_1 - Math_fround($18_1 * $16_1));
      $14_1 = Math_fround(Math_fround($18_1 * $19_1) - Math_fround($22_1 * $14_1));
      $14_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($28_1 * $28_1) + Math_fround($21_1 * $21_1)) + Math_fround($14_1 * $14_1))));
      HEAPF32[$11_1 >> 2] = $14_1;
      $20_1 = $10_1 + 120 | 0;
      $19_1 = Math_fround(HEAPF32[$0_1 >> 2] - $17_1);
      $0_1 = $26_1 + 24 | 0;
      $18_1 = Math_fround(HEAPF32[$0_1 >> 2] - $15_1);
      $27_1 = $26_1 + 20 | 0;
      $22_1 = Math_fround(HEAPF32[$27_1 >> 2] - $17_1);
      $21_1 = Math_fround(Math_fround($19_1 * $18_1) - Math_fround($16_1 * $22_1));
      $28_1 = Math_fround($21_1 * $21_1);
      $23_1 = $16_1;
      $16_1 = Math_fround(HEAPF32[$26_1 + 16 >> 2] - $13_1);
      $21_1 = Math_fround(HEAPF32[$24_1 + 16 >> 2] - $13_1);
      $18_1 = Math_fround(Math_fround($23_1 * $16_1) - Math_fround($21_1 * $18_1));
      $16_1 = Math_fround(Math_fround($21_1 * $22_1) - Math_fround($19_1 * $16_1));
      $16_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($28_1 + Math_fround($18_1 * $18_1)) + Math_fround($16_1 * $16_1))));
      HEAPF32[$20_1 >> 2] = $16_1;
      $19_1 = Math_fround(HEAPF32[$27_1 >> 2] - $17_1);
      $18_1 = Math_fround(HEAPF32[$1_1 >> 2] - $15_1);
      $15_1 = Math_fround(HEAPF32[$0_1 >> 2] - $15_1);
      $17_1 = Math_fround(HEAPF32[$9_1 >> 2] - $17_1);
      $22_1 = Math_fround(Math_fround($19_1 * $18_1) - Math_fround($15_1 * $17_1));
      $23_1 = $15_1;
      $15_1 = Math_fround(HEAPF32[$25 + 16 >> 2] - $13_1);
      $13_1 = Math_fround(HEAPF32[$26_1 + 16 >> 2] - $13_1);
      $18_1 = Math_fround(Math_fround($23_1 * $15_1) - Math_fround($13_1 * $18_1));
      $13_1 = Math_fround(Math_fround($13_1 * $17_1) - Math_fround($19_1 * $15_1));
      $15_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($22_1 * $22_1) + Math_fround($18_1 * $18_1)) + Math_fround($13_1 * $13_1))));
      $13_1 = Math_fround($15_1 + Math_fround($14_1 + $16_1));
      HEAPF32[$10_1 + 124 >> 2] = $15_1 / $13_1;
      HEAPF32[$20_1 >> 2] = $16_1 / $13_1;
      HEAPF32[$11_1 >> 2] = $14_1 / $13_1;
      if (HEAP32[$10_1 + 96 >> 2] == 9) {
       break label$3
      }
     }
     $0_1 = $10_1 + 116 | 0;
     $11_1 = 0;
     $15_1 = Math_fround(0.0);
     $17_1 = Math_fround(0.0);
     $13_1 = Math_fround(0.0);
     while (1) {
      if ($11_1 >>> 0 >= $12_1 >>> 0) {
       break label$2
      }
      $463($10_1 + 80 | 0, $10_1 + 18992 | 0, HEAP32[$0_1 - 16 >> 2]);
      $11_1 = $11_1 + 1 | 0;
      $14_1 = HEAPF32[$0_1 >> 2];
      $13_1 = Math_fround(Math_fround($14_1 * HEAPF32[$10_1 + 88 >> 2]) + $13_1);
      $17_1 = Math_fround(Math_fround($14_1 * HEAPF32[$10_1 + 84 >> 2]) + $17_1);
      $15_1 = Math_fround(Math_fround(HEAPF32[$10_1 + 80 >> 2] * $14_1) + $15_1);
      $12_1 = HEAP32[$10_1 + 132 >> 2];
      $0_1 = $0_1 + 4 | 0;
      continue;
     };
    }
    HEAP32[$10_1 + 8 >> 2] = 3;
    $9_1 = 0;
    break label$1;
   }
   $9_1 = 1;
   HEAP32[$10_1 + 8 >> 2] = 1;
   $78($10_1 + 80 | 0, $4_1, $15_1, $17_1, $13_1);
   $0_1 = $10_1 + 88 | 0;
   $1_1 = HEAP32[$0_1 + 4 >> 2];
   $12_1 = $10_1 + 20 | 0;
   HEAP32[$12_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$12_1 + 4 >> 2] = $1_1;
   $1_1 = HEAP32[$10_1 + 84 >> 2];
   HEAP32[$10_1 + 12 >> 2] = HEAP32[$10_1 + 80 >> 2];
   HEAP32[$10_1 + 16 >> 2] = $1_1;
   $14_1 = HEAPF32[$10_1 + 152 >> 2];
   $1_1 = $10_1 + 140 | 0;
   $12_1 = $10_1 + 144 | 0;
   $78($10_1 + 80 | 0, $4_1, Math_fround($15_1 - Math_fround(HEAPF32[$10_1 + 136 >> 2] * $14_1)), Math_fround($17_1 - Math_fround($14_1 * HEAPF32[$1_1 >> 2])), Math_fround($13_1 - Math_fround($14_1 * HEAPF32[$12_1 >> 2])));
   $11_1 = HEAP32[$0_1 + 4 >> 2];
   $20_1 = $10_1 + 36 | 0;
   HEAP32[$20_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$20_1 + 4 >> 2] = $11_1;
   $0_1 = HEAP32[$10_1 + 84 >> 2];
   $11_1 = $10_1 + 28 | 0;
   HEAP32[$11_1 >> 2] = HEAP32[$10_1 + 80 >> 2];
   HEAP32[$11_1 + 4 >> 2] = $0_1;
   HEAP32[$10_1 + 56 >> 2] = 0;
   HEAPF32[$10_1 + 52 >> 2] = -HEAPF32[$12_1 >> 2];
   HEAPF32[$10_1 + 48 >> 2] = -HEAPF32[$1_1 >> 2];
   HEAPF32[$10_1 + 44 >> 2] = -HEAPF32[$10_1 + 136 >> 2];
   HEAPF32[$10_1 + 60 >> 2] = -HEAPF32[$10_1 + 152 >> 2];
  }
  label$28 : {
   if (!$9_1) {
    $456($2_1, $4_1, $3_1, $5_1, $10_1 + 8 | 0, $10_1 + 18608 | 0, 0);
    $0_1 = $10_1 + 232 | 0;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[$0_1 + 4 >> 2] = 0;
    HEAP32[$10_1 + 224 >> 2] = 0;
    HEAP32[$10_1 + 228 >> 2] = 0;
    HEAP32[$10_1 + 460 >> 2] = 0;
    HEAP32[$10_1 + 464 >> 2] = 0;
    HEAP32[$10_1 + 472 >> 2] = 2;
    HEAP32[$10_1 + 240 >> 2] = 0;
    $2_1 = $457($10_1 + 96 | 0, $10_1 + 18608 | 0, $10_1 - -64 | 0);
    $0_1 = 0;
    if ($2_1) {
     break label$28
    }
    $15_1 = Math_fround(0.0);
    $0_1 = 0;
    $17_1 = Math_fround(0.0);
    $13_1 = Math_fround(0.0);
    $16_1 = Math_fround(0.0);
    $14_1 = Math_fround(0.0);
    $18_1 = Math_fround(0.0);
    $11_1 = 0;
    while (1) {
     $1_1 = HEAP32[$10_1 + 468 >> 2];
     if (HEAPU32[$1_1 + 32 >> 2] <= $11_1 >>> 0) {
      $78($10_1 + 18992 | 0, $4_1, $18_1, $14_1, $16_1);
      $0_1 = $10_1 + 19e3 | 0;
      $1_1 = HEAP32[$0_1 + 4 >> 2];
      $3_1 = $10_1 + 20 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$0_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $1_1;
      $1_1 = HEAP32[$10_1 + 18996 >> 2];
      HEAP32[$10_1 + 12 >> 2] = HEAP32[$10_1 + 18992 >> 2];
      HEAP32[$10_1 + 16 >> 2] = $1_1;
      $78($10_1 + 18992 | 0, $4_1, $13_1, $17_1, $15_1);
      $1_1 = HEAP32[$0_1 + 4 >> 2];
      $3_1 = $10_1 + 36 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$0_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $1_1;
      $0_1 = HEAP32[$10_1 + 18996 >> 2];
      $1_1 = $10_1 + 28 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$10_1 + 18992 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      HEAP32[$10_1 + 56 >> 2] = 0;
      $15_1 = Math_fround($16_1 - $15_1);
      HEAPF32[$10_1 + 52 >> 2] = $15_1;
      $14_1 = Math_fround($14_1 - $17_1);
      HEAPF32[$10_1 + 48 >> 2] = $14_1;
      $13_1 = Math_fround($18_1 - $13_1);
      HEAPF32[$10_1 + 44 >> 2] = $13_1;
      $13_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($13_1 * $13_1) + Math_fround($14_1 * $14_1)) + Math_fround($15_1 * $15_1))));
      HEAPF32[$10_1 + 60 >> 2] = $13_1;
      $139($10_1 + 44 | 0, $13_1 > Math_fround(9.999999747378752e-05) ? $13_1 : Math_fround(1.0));
      $0_1 = 0;
      if ($2_1) {
       break label$28
      }
     } else {
      $1_1 = $0_1 + $1_1 | 0;
      $19_1 = HEAPF32[$1_1 + 16 >> 2];
      $463($10_1 + 18992 | 0, $10_1 + 18608 | 0, HEAP32[$1_1 >> 2]);
      $22_1 = HEAPF32[$10_1 + 18992 >> 2];
      $21_1 = HEAPF32[$10_1 + 18996 >> 2];
      $23_1 = HEAPF32[$10_1 + 19e3 >> 2];
      $1_1 = HEAP32[HEAP32[$10_1 + 468 >> 2] + $0_1 >> 2];
      $464($10_1 + 18992 | 0, $10_1 + 18608 | 0, Math_fround(-HEAPF32[$1_1 >> 2]), Math_fround(-HEAPF32[$1_1 + 4 >> 2]), Math_fround(-HEAPF32[$1_1 + 8 >> 2]));
      $0_1 = $0_1 + 4 | 0;
      $11_1 = $11_1 + 1 | 0;
      $16_1 = Math_fround(Math_fround($19_1 * $23_1) + $16_1);
      $14_1 = Math_fround(Math_fround($19_1 * $21_1) + $14_1);
      $18_1 = Math_fround(Math_fround($19_1 * $22_1) + $18_1);
      $15_1 = Math_fround(Math_fround($19_1 * HEAPF32[$10_1 + 19e3 >> 2]) + $15_1);
      $17_1 = Math_fround(Math_fround($19_1 * HEAPF32[$10_1 + 18996 >> 2]) + $17_1);
      $13_1 = Math_fround(Math_fround($19_1 * HEAPF32[$10_1 + 18992 >> 2]) + $13_1);
      continue;
     }
     break;
    };
   }
   $0_1 = HEAP32[$10_1 + 16 >> 2];
   HEAP32[$7_1 >> 2] = HEAP32[$10_1 + 12 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $0_1;
   $0_1 = $10_1 + 20 | 0;
   $1_1 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = $7_1 + 8 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $1_1;
   $0_1 = $10_1 + 28 | 0;
   $1_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$8_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$8_1 + 4 >> 2] = $1_1;
   $0_1 = $10_1 + 36 | 0;
   $1_1 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = $8_1 + 8 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $1_1;
   $0_1 = HEAP32[$10_1 + 48 >> 2];
   HEAP32[$6_1 >> 2] = HEAP32[$10_1 + 44 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $0_1;
   $0_1 = $10_1 + 52 | 0;
   $1_1 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = $6_1 + 8 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $1_1;
   $0_1 = $9_1;
  }
  global$0 = $10_1 + 19120 | 0;
  return $0_1 | 0;
 }
 
 function $474($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  HEAP32[$0_1 + 20 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 4096;
  HEAP32[$0_1 >> 2] = $1_1;
  $1_1 = $53($1_1 << 12);
  HEAP32[$0_1 + 12 >> 2] = $1_1;
  HEAP32[$0_1 + 16 >> 2] = $1_1;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$0_1 + 8 >> 2] = $2_1;
  $2_1 = $2_1 - 1 | 0;
  while (1) {
   if ($2_1) {
    $3_1 = $1_1;
    $1_1 = HEAP32[$0_1 >> 2] + $1_1 | 0;
    HEAP32[$3_1 >> 2] = $1_1;
    $2_1 = $2_1 - 1 | 0;
    continue;
   }
   break;
  };
  HEAP32[$1_1 >> 2] = 0;
 }
 
 function $475($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 56 >> 2]]($4_1, 28) | 0;
  $5_1 = HEAP32[$0_1 + 12 >> 2];
  $6_1 = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$4_1 >> 2] = 13588;
  HEAP8[$4_1 + 8 | 0] = 0;
  HEAP32[$4_1 + 20 >> 2] = $6_1;
  HEAP32[$4_1 + 24 >> 2] = $5_1;
  $5_1 = HEAPU8[$0_1 + 4 | 0];
  HEAP8[$4_1 + 16 | 0] = $5_1;
  $0_1 = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = $0_1;
  $1_1 = $5_1 ? $3_1 : $2_1;
  $2_1 = $5_1 ? $2_1 : $3_1;
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2]]($0_1, HEAP32[$1_1 + 8 >> 2], HEAP32[$2_1 + 8 >> 2]) | 0) {
   $0_1 = HEAP32[$4_1 + 4 >> 2];
   $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]]($0_1, HEAP32[$1_1 + 8 >> 2], HEAP32[$2_1 + 8 >> 2]) | 0;
   HEAP8[$4_1 + 8 | 0] = 1;
   HEAP32[$4_1 + 12 >> 2] = $0_1;
  }
  return $4_1 | 0;
 }
 
 function $476($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = HEAP32[$1_1 >> 2];
  $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 56 >> 2]]($0_1, 16) | 0;
  HEAP32[$0_1 >> 2] = 13516;
  HEAP8[$0_1 + 8 | 0] = 0;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  HEAP32[$0_1 + 12 >> 2] = 0;
  if (FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 24 >> 2]]($1_1, HEAP32[$2_1 + 8 >> 2], HEAP32[$3_1 + 8 >> 2]) | 0) {
   $1_1 = HEAP32[$0_1 + 4 >> 2];
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, HEAP32[$2_1 + 8 >> 2], HEAP32[$3_1 + 8 >> 2]) | 0;
   HEAP8[$0_1 + 8 | 0] = 1;
   HEAP32[$0_1 + 12 >> 2] = $1_1;
  }
  return $0_1 | 0;
 }
 
 function $477($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2];
  $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 56 >> 2]]($4_1, 20) | 0;
  HEAP8[$4_1 + 8 | 0] = 0;
  HEAP32[$4_1 >> 2] = 13384;
  $5_1 = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  HEAP8[$4_1 + 16 | 0] = HEAPU8[$0_1 + 4 | 0];
  $0_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$4_1 + 12 >> 2] = $0_1;
  if (!$0_1) {
   $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 12 >> 2]]($5_1, HEAP32[$2_1 + 8 >> 2], HEAP32[$3_1 + 8 >> 2]) | 0;
   HEAP8[$4_1 + 8 | 0] = 1;
   HEAP32[$4_1 + 12 >> 2] = $0_1;
  }
  return $4_1 | 0;
 }
 
 function $478($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = HEAP32[$1_1 >> 2];
  $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 56 >> 2]]($0_1, 16) | 0;
  HEAP32[$0_1 >> 2] = 13248;
  HEAP8[$0_1 + 8 | 0] = 0;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  HEAP32[$0_1 + 12 >> 2] = 0;
  $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, HEAP32[$2_1 + 8 >> 2], HEAP32[$3_1 + 8 >> 2]) | 0;
  HEAP8[$0_1 + 8 | 0] = 1;
  HEAP32[$0_1 + 12 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $479($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = HEAP32[$1_1 >> 2];
  $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 56 >> 2]]($0_1, 8) | 0;
  HEAP32[$0_1 >> 2] = 13188;
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$1_1 >> 2];
  return $0_1 | 0;
 }
 
 function $480($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = HEAP32[$1_1 >> 2];
  $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 56 >> 2]]($0_1, 84) | 0;
  $409($0_1, HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2], $2_1, $3_1, 1);
  return $0_1 | 0;
 }
 
 function $481($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = HEAP32[$1_1 >> 2];
  $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 56 >> 2]]($0_1, 116) | 0;
  $409($0_1, HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2], $2_1, $3_1, 0);
  HEAP8[$0_1 + 104 | 0] = 1;
  HEAP32[$0_1 >> 2] = 13028;
  HEAP32[$0_1 + 100 >> 2] = 0;
  HEAP32[$0_1 + 92 >> 2] = 0;
  HEAP32[$0_1 + 96 >> 2] = 0;
  $1_1 = $53(64);
  HEAP8[$1_1 + 20 | 0] = 1;
  HEAP32[$1_1 >> 2] = 12964;
  HEAP32[$1_1 + 16 >> 2] = 0;
  HEAP8[$1_1 + 40 | 0] = 1;
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAP32[$1_1 + 36 >> 2] = 0;
  HEAP8[$1_1 + 60 | 0] = 1;
  HEAP32[$1_1 + 28 >> 2] = 0;
  HEAP32[$1_1 + 32 >> 2] = 0;
  HEAP32[$1_1 + 56 >> 2] = 0;
  HEAP32[$1_1 + 48 >> 2] = 0;
  HEAP32[$1_1 + 52 >> 2] = 0;
  $117($1_1 + 4 | 0, 2);
  $421($1_1);
  HEAP32[$0_1 + 84 >> 2] = $1_1;
  HEAP32[$0_1 + 108 >> 2] = HEAP32[HEAP32[$2_1 + 4 >> 2] + 72 >> 2];
  HEAP32[$0_1 + 112 >> 2] = HEAP32[HEAP32[$3_1 + 4 >> 2] + 72 >> 2];
  return $0_1 | 0;
 }
 
 function $482($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = HEAP32[$1_1 >> 2];
  $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 56 >> 2]]($0_1, 84) | 0;
  $409($0_1, HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2], $2_1, $3_1, 0);
  return $0_1 | 0;
 }
 
 function $483($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = HEAP32[$1_1 >> 2];
  $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 56 >> 2]]($0_1, 80) | 0;
  $384($0_1, HEAP32[$1_1 >> 2], $2_1, $3_1, 1);
  return $0_1 | 0;
 }
 
 function $484($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = HEAP32[$1_1 >> 2];
  $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 56 >> 2]]($0_1, 80) | 0;
  $384($0_1, HEAP32[$1_1 >> 2], $2_1, $3_1, 0);
  return $0_1 | 0;
 }
 
 function $485($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 13800;
  if (HEAPU8[$0_1 + 20 | 0]) {
   $486(HEAP32[$0_1 + 16 >> 2]);
   $54(HEAP32[$0_1 + 16 >> 2]);
  }
  if (HEAPU8[$0_1 + 12 | 0]) {
   $486(HEAP32[$0_1 + 8 >> 2]);
   $54(HEAP32[$0_1 + 8 >> 2]);
  }
  $1_1 = HEAP32[$0_1 + 28 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $54(HEAP32[$0_1 + 28 >> 2]);
  $1_1 = HEAP32[$0_1 + 32 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $54(HEAP32[$0_1 + 32 >> 2]);
  $1_1 = HEAP32[$0_1 + 36 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $54(HEAP32[$0_1 + 36 >> 2]);
  $1_1 = HEAP32[$0_1 + 40 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $54(HEAP32[$0_1 + 40 >> 2]);
  $1_1 = HEAP32[$0_1 + 44 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $54(HEAP32[$0_1 + 44 >> 2]);
  $1_1 = HEAP32[$0_1 + 48 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $54(HEAP32[$0_1 + 48 >> 2]);
  $1_1 = HEAP32[$0_1 + 52 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $54(HEAP32[$0_1 + 52 >> 2]);
  $1_1 = HEAP32[$0_1 + 56 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $54(HEAP32[$0_1 + 56 >> 2]);
  $1_1 = HEAP32[$0_1 + 72 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $54(HEAP32[$0_1 + 72 >> 2]);
  $1_1 = HEAP32[$0_1 + 76 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $54(HEAP32[$0_1 + 76 >> 2]);
  $1_1 = HEAP32[$0_1 + 68 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $54(HEAP32[$0_1 + 68 >> 2]);
  $1_1 = HEAP32[$0_1 + 84 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $54(HEAP32[$0_1 + 84 >> 2]);
  $1_1 = HEAP32[$0_1 + 80 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $54(HEAP32[$0_1 + 80 >> 2]);
  $1_1 = HEAP32[$0_1 + 24 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  $54(HEAP32[$0_1 + 24 >> 2]);
  return $0_1 | 0;
 }
 
 function $486($0_1) {
  $54(HEAP32[$0_1 + 16 >> 2]);
 }
 
 function $487($0_1) {
  $0_1 = $0_1 | 0;
  $17($485($0_1));
 }
 
 function $488($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 8 >> 2];
 }
 
 function $489($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 16 >> 2];
 }
 
 function $490($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = ($1_1 | 0) != 8;
    if ($3_1) {
     break label$2
    }
    if (($2_1 | 0) != 8) {
     break label$2
    }
    $3_1 = $0_1 + 56 | 0;
    break label$1;
   }
   label$3 : {
    if ($3_1) {
     break label$3
    }
    if (($2_1 | 0) != 1) {
     break label$3
    }
    $3_1 = $0_1 + 72 | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != 1) {
     break label$4
    }
    if (($2_1 | 0) != 8) {
     break label$4
    }
    $3_1 = $0_1 + 76 | 0;
    break label$1;
   }
   $3_1 = $0_1 + 68 | 0;
   if (!($1_1 | $2_1)) {
    break label$1
   }
   label$5 : {
    if (($1_1 | 0) > 19) {
     break label$5
    }
    if (($2_1 | 0) != 28) {
     break label$5
    }
    $3_1 = $0_1 + 84 | 0;
    break label$1;
   }
   label$6 : {
    if (($1_1 | 0) != 28) {
     break label$6
    }
    if (($2_1 | 0) > 19) {
     break label$6
    }
    $3_1 = $0_1 + 80 | 0;
    break label$1;
   }
   label$7 : {
    if (($1_1 | 0) <= 19) {
     $3_1 = $0_1 + 28 | 0;
     if (($2_1 | 0) <= 19) {
      break label$1
     }
     if ($2_1 - 21 >>> 0 > 8) {
      break label$7
     }
     $3_1 = $0_1 + 32 | 0;
     break label$1;
    }
    label$9 : {
     if (($2_1 | 0) > 19) {
      break label$9
     }
     if ($1_1 - 21 >>> 0 > 8) {
      break label$9
     }
     $3_1 = $0_1 + 36 | 0;
     break label$1;
    }
    if (($1_1 | 0) != 31) {
     break label$7
    }
    $3_1 = $0_1 + 44 | 0;
    if (($2_1 | 0) == 31) {
     break label$1
    }
    $3_1 = $0_1 + 40 | 0;
    break label$1;
   }
   $3_1 = $0_1 + 48 | 0;
   if (($2_1 | 0) == 31) {
    break label$1
   }
   $3_1 = $0_1 + 52 | 0;
  }
  return HEAP32[$3_1 >> 2];
 }
 
 function $491($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = ($1_1 | 0) != 8;
    if ($3_1) {
     break label$2
    }
    if (($2_1 | 0) != 8) {
     break label$2
    }
    $1_1 = $0_1 + 56 | 0;
    break label$1;
   }
   label$3 : {
    if ($3_1) {
     break label$3
    }
    if (($2_1 | 0) != 1) {
     break label$3
    }
    $1_1 = $0_1 + 72 | 0;
    break label$1;
   }
   label$4 : {
    if (($1_1 | 0) != 1) {
     break label$4
    }
    if (($2_1 | 0) != 8) {
     break label$4
    }
    $1_1 = $0_1 + 76 | 0;
    break label$1;
   }
   label$5 : {
    if (($1_1 | 0) > 19) {
     break label$5
    }
    if (($2_1 | 0) != 28) {
     break label$5
    }
    $1_1 = $0_1 + 84 | 0;
    break label$1;
   }
   label$6 : {
    if (($1_1 | 0) != 28) {
     break label$6
    }
    if (($2_1 | 0) > 19) {
     break label$6
    }
    $1_1 = $0_1 + 80 | 0;
    break label$1;
   }
   label$7 : {
    if (($1_1 | 0) <= 19) {
     $1_1 = $0_1 + 28 | 0;
     if (($2_1 | 0) <= 19) {
      break label$1
     }
     if ($2_1 - 21 >>> 0 > 8) {
      break label$7
     }
     $1_1 = $0_1 + 32 | 0;
     break label$1;
    }
    label$9 : {
     if (($2_1 | 0) > 19) {
      break label$9
     }
     if ($1_1 - 21 >>> 0 > 8) {
      break label$9
     }
     $1_1 = $0_1 + 36 | 0;
     break label$1;
    }
    if (($1_1 | 0) != 31) {
     break label$7
    }
    $1_1 = $0_1 + 44 | 0;
    if (($2_1 | 0) == 31) {
     break label$1
    }
    $1_1 = $0_1 + 40 | 0;
    break label$1;
   }
   $1_1 = $0_1 + 48 | 0;
   if (($2_1 | 0) == 31) {
    break label$1
   }
   $1_1 = $0_1 + 52 | 0;
  }
  return HEAP32[$1_1 >> 2];
 }
 
 function $492($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0);
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  $5_1 = HEAP32[HEAP32[$0_1 >> 2] >> 2];
  $6_1 = HEAP32[HEAP32[$0_1 + 4 >> 2] >> 2];
  label$1 : {
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 24 >> 2]]($1_1, $5_1, $6_1) | 0)) {
    break label$1
   }
   HEAP32[$3_1 + 88 >> 2] = -1;
   HEAP32[$3_1 + 92 >> 2] = -1;
   HEAP32[$3_1 + 72 >> 2] = 0;
   HEAP32[$3_1 + 80 >> 2] = $5_1;
   HEAP32[$3_1 + 84 >> 2] = $5_1 + 4;
   HEAP32[$3_1 + 76 >> 2] = HEAP32[$5_1 + 192 >> 2];
   HEAP32[$3_1 + 64 >> 2] = -1;
   HEAP32[$3_1 + 68 >> 2] = -1;
   HEAP32[$3_1 + 48 >> 2] = 0;
   HEAP32[$3_1 + 56 >> 2] = $6_1;
   HEAP32[$3_1 + 60 >> 2] = $6_1 + 4;
   HEAP32[$3_1 + 52 >> 2] = HEAP32[$6_1 + 192 >> 2];
   $4_1 = HEAP32[$0_1 + 8 >> 2];
   if (!$4_1) {
    $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $3_1 + 72 | 0, $3_1 + 48 | 0, 0, 1) | 0;
    HEAP32[$0_1 + 8 >> 2] = $4_1;
    if (!$4_1) {
     break label$1
    }
   }
   HEAP32[$3_1 + 40 >> 2] = 0;
   HEAP32[$3_1 + 12 >> 2] = 0;
   HEAP32[$3_1 + 8 >> 2] = 11372;
   $0_1 = HEAP32[$2_1 + 8 >> 2];
   HEAP32[$3_1 + 20 >> 2] = $3_1 + 48;
   HEAP32[$3_1 + 16 >> 2] = $3_1 + 72;
   if (($0_1 | 0) == 1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 8 >> 2]]($4_1, $3_1 + 72 | 0, $3_1 + 48 | 0, $2_1, $3_1 + 8 | 0);
    break label$1;
   }
   $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 12 >> 2]]($4_1, $5_1, $6_1, $2_1, $3_1 + 8 | 0));
   if (!($7_1 < HEAPF32[$2_1 + 12 >> 2])) {
    break label$1
   }
   HEAPF32[$2_1 + 12 >> 2] = $7_1;
  }
  global$0 = $3_1 + 96 | 0;
 }
 
 function $493($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 14804;
  $57($0_1 + 8 | 0);
  return $0_1 | 0;
 }
 
 function $494($0_1) {
  $0_1 = $0_1 | 0;
  $17($493($0_1));
 }
 
 function $495($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 12 >> 2] = $3_1;
  HEAP32[$5_1 + 8 >> 2] = $0_1;
  $3_1 = HEAP32[HEAP32[$2_1 + 4 >> 2] + 4 >> 2];
  $6_1 = HEAP32[HEAP32[$1_1 + 4 >> 2] + 4 >> 2];
  label$1 : {
   if (($4_1 | 0) == 1) {
    $0_1 = HEAP32[((Math_imul($6_1, 144) + $0_1 | 0) + ($3_1 << 2) | 0) + 76 >> 2];
    $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $5_1 + 8 | 0, $1_1, $2_1) | 0;
    break label$1;
   }
   $0_1 = HEAP32[((Math_imul($6_1, 144) + $0_1 | 0) + ($3_1 << 2) | 0) + 5260 >> 2];
   $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $5_1 + 8 | 0, $1_1, $2_1) | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $496($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[5175] = HEAP32[5175] + 1;
  if (HEAP32[$0_1 + 4 >> 2] & 2) {
   $3_1 = HEAP32[$1_1 + 192 >> 2];
   $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 20 >> 2]]($3_1, Math_fround(.019999999552965164)));
   HEAPF32[$5_1 + 12 >> 2] = $6_1;
   $3_1 = HEAP32[$2_1 + 192 >> 2];
   $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 20 >> 2]]($3_1, Math_fround(.019999999552965164)));
   HEAPF32[$5_1 + 8 >> 2] = $7_1;
   $3_1 = $6_1 < $7_1 ? $5_1 + 12 | 0 : $5_1 + 8 | 0;
  } else {
   $3_1 = 11124
  }
  $8_1 = HEAPF32[$3_1 >> 2];
  $6_1 = HEAPF32[$2_1 + 184 >> 2];
  $7_1 = HEAPF32[$1_1 + 184 >> 2];
  $4_1 = HEAP32[$0_1 + 72 >> 2];
  $3_1 = HEAP32[$4_1 + 12 >> 2];
  label$3 : {
   label$4 : {
    if ($3_1) {
     HEAP32[$4_1 + 12 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$4_1 + 8 >> 2] = HEAP32[$4_1 + 8 >> 2] - 1;
     break label$4;
    }
    $3_1 = 0;
    if (HEAPU8[$0_1 + 4 | 0] & 4) {
     break label$3
    }
    $3_1 = $53(868);
   }
   $6_1 = $6_1 > $7_1 ? $7_1 : $6_1;
   HEAP32[$3_1 >> 2] = 1025;
   $4_1 = 120;
   while (1) {
    $1($3_1 + $4_1 | 0, 0, 52);
    $4_1 = $4_1 + 208 | 0;
    if (($4_1 | 0) != 952) {
     continue
    }
    break;
   };
   HEAPF32[$3_1 + 852 >> 2] = $6_1;
   HEAPF32[$3_1 + 848 >> 2] = $8_1;
   HEAP32[$3_1 + 844 >> 2] = 0;
   HEAP32[$3_1 + 840 >> 2] = $2_1;
   HEAP32[$3_1 + 836 >> 2] = $1_1;
   HEAP32[$3_1 + 864 >> 2] = HEAP32[$0_1 + 12 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $3_1;
   $375($0_1 + 8 | 0, $5_1 + 4 | 0);
  }
  global$0 = $5_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $497($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  HEAP32[5175] = HEAP32[5175] - 1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1, $1_1);
  $4_1 = $0_1 + 20 | 0;
  $2_1 = HEAP32[$4_1 >> 2];
  $5_1 = HEAP32[$1_1 + 864 >> 2];
  $6_1 = $5_1 << 2;
  $3_1 = $2_1 + $6_1 | 0;
  $8_1 = HEAP32[$3_1 >> 2];
  $9_1 = $3_1;
  $10_1 = $2_1;
  $2_1 = $0_1 + 12 | 0;
  $3_1 = HEAP32[$2_1 >> 2] - 1 | 0;
  $7_1 = $3_1 << 2;
  HEAP32[$9_1 >> 2] = HEAP32[$10_1 + $7_1 >> 2];
  HEAP32[HEAP32[$4_1 >> 2] + $7_1 >> 2] = $8_1;
  HEAP32[$2_1 >> 2] = $3_1;
  HEAP32[HEAP32[HEAP32[$4_1 >> 2] + $6_1 >> 2] + 864 >> 2] = $5_1;
  $0_1 = HEAP32[$0_1 + 72 >> 2];
  if ($498($0_1, $1_1)) {
   HEAP32[$1_1 >> 2] = HEAP32[$0_1 + 12 >> 2];
   HEAP32[$0_1 + 12 >> 2] = $1_1;
   HEAP32[$0_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2] + 1;
   return;
  }
  $54($1_1);
 }
 
 function $498($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    $3_1 = HEAP32[$0_1 + 16 >> 2];
    if ($3_1 >>> 0 > $1_1 >>> 0) {
     break label$2
    }
    $2_1 = 1;
    if (Math_imul(HEAP32[$0_1 >> 2], HEAP32[$0_1 + 4 >> 2]) + $3_1 >>> 0 > $1_1 >>> 0) {
     break label$1
    }
   }
   $2_1 = 0;
  }
  return $2_1;
 }
 
 function $499($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$1_1 + 844 >> 2] = 0;
 }
 
 function $500($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     switch (HEAP32[$1_1 + 220 >> 2] - 2 | 0) {
     case 0:
     case 3:
      break label$3;
     default:
      break label$2;
     };
    }
    $0_1 = 0;
    switch (HEAP32[$2_1 + 220 >> 2] - 2 | 0) {
    case 0:
    case 3:
     break label$1;
    default:
     break label$2;
    };
   }
   label$4 : {
    if (HEAP32[$1_1 + 280 >> 2]) {
     if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, $2_1) | 0)) {
      break label$4
     }
    }
    $0_1 = 1;
    if (!HEAP32[$2_1 + 280 >> 2]) {
     break label$1
    }
    if (FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2]]($2_1, $1_1) | 0) {
     break label$1
    }
   }
   $0_1 = 0;
  }
  return $0_1 | 0;
 }
 
 function $501($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $0_1 = 0;
  $1_1 = HEAP32[$1_1 + 204 >> 2];
  label$1 : {
   if ($1_1 & 4) {
    break label$1
   }
   $2_1 = HEAP32[$2_1 + 204 >> 2];
   if ($2_1 & 4) {
    break label$1
   }
   if (!($1_1 & 3)) {
    return 1
   }
   $0_1 = !($2_1 & 3);
  }
  return $0_1 | 0;
 }
 
 function $502($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = $0_1;
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  HEAP32[$4_1 >> 2] = 14888;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 48 >> 2]]($1_1, $4_1, $3_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $503($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 12 >> 2];
 }
 
 function $504($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[HEAP32[$0_1 + 20 >> 2] + ($1_1 << 2) >> 2];
 }
 
 function $505($0_1) {
  $0_1 = $0_1 | 0;
  if (!HEAP32[$0_1 + 12 >> 2]) {
   return 0
  }
  return HEAP32[$0_1 + 20 >> 2];
 }
 
 function $506($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 72 >> 2];
 }
 
 function $507($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $0_1 = HEAP32[$0_1 + 68 >> 2];
  $2_1 = HEAP32[$0_1 + 12 >> 2];
  if ($2_1) {
   HEAP32[$0_1 + 12 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$0_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2] - 1;
   return $2_1 | 0;
  }
  return $53($1_1) | 0;
 }
 
 function $508($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   $0_1 = HEAP32[$0_1 + 68 >> 2];
   if ($498($0_1, $1_1)) {
    if (!$1_1) {
     break label$1
    }
    HEAP32[$1_1 >> 2] = HEAP32[$0_1 + 12 >> 2];
    HEAP32[$0_1 + 12 >> 2] = $1_1;
    HEAP32[$0_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2] + 1;
    return;
   }
   $54($1_1);
  }
 }
 
 function $509($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1_1;
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[$1_1 + 64 >> 2]]($2_1, $1_1, HEAP32[$0_1 + 4 >> 2]);
  return 0;
 }
 
 function $510($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $5_1 = HEAP32[$0_1 + 32 >> 2];
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   if (($5_1 | 0) >= ($1_1 | 0)) {
    break label$1
   }
   HEAP32[$3_1 + 12 >> 2] = 0;
   $140($0_1 + 28 | 0, $1_1, $3_1 + 12 | 0);
   HEAP32[$3_1 + 8 >> 2] = 0;
   $140($0_1 + 48 | 0, $1_1, $3_1 + 8 | 0);
   $2_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
   $1_1 = $2_1;
   while (1) if ($1_1) {
    HEAP32[HEAP32[$0_1 + 40 >> 2] + $4_1 >> 2] = -1;
    $1_1 = $1_1 - 1 | 0;
    $4_1 = $4_1 + 4 | 0;
    continue;
   } else {
    $1_1 = 0;
    while (1) if ($2_1) {
     HEAP32[HEAP32[$0_1 + 60 >> 2] + $1_1 >> 2] = -1;
     $2_1 = $2_1 - 1 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue;
    } else {
     $1_1 = 0;
     $5_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
     $4_1 = 0;
     $2_1 = 0;
     while (1) {
      if (($2_1 | 0) == ($5_1 | 0)) {
       break label$1
      }
      $7_1 = HEAP32[$0_1 + 60 >> 2] + $1_1 | 0;
      $6_1 = HEAP32[$0_1 + 16 >> 2] + $4_1 | 0;
      $6_1 = HEAP32[$0_1 + 40 >> 2] + ((HEAP32[$0_1 + 12 >> 2] - 1 & $422(HEAP32[HEAP32[$6_1 >> 2] + 12 >> 2], HEAP32[HEAP32[$6_1 + 4 >> 2] + 12 >> 2])) << 2) | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$6_1 >> 2] = $2_1;
      $1_1 = $1_1 + 4 | 0;
      $4_1 = $4_1 + 16 | 0;
      $2_1 = $2_1 + 1 | 0;
      continue;
     };
    };
   };
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $511($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 15e3;
  $57($0_1 + 48 | 0);
  $57($0_1 + 28 | 0);
  $57($0_1 + 4 | 0);
  return $0_1 | 0;
 }
 
 function $512($0_1) {
  $0_1 = $0_1 | 0;
  $54($511($0_1));
 }
 
 function $513($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  HEAP32[5179] = HEAP32[5179] + 1;
  $3_1 = HEAP32[$0_1 + 24 >> 2];
  label$1 : {
   label$2 : {
    if ($3_1) {
     if (FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $1_1, $2_1) | 0) {
      break label$2
     }
     break label$1;
    }
    if (!(HEAP32[$2_1 + 8 >> 2] & HEAP32[$1_1 + 4 >> 2])) {
     break label$1
    }
    if (!(HEAP32[$1_1 + 8 >> 2] & HEAP32[$2_1 + 4 >> 2])) {
     break label$1
    }
   }
   $5_1 = HEAP32[$1_1 + 12 >> 2] > HEAP32[$2_1 + 12 >> 2];
   $7_1 = $5_1 ? $1_1 : $2_1;
   $4_1 = HEAP32[$7_1 + 12 >> 2];
   $10_1 = HEAP32[$0_1 + 16 >> 2];
   $6_1 = HEAP32[$0_1 + 40 >> 2];
   $3_1 = HEAP32[$0_1 + 60 >> 2];
   $8_1 = HEAP32[$0_1 + 12 >> 2];
   $9_1 = $5_1 ? $2_1 : $1_1;
   $1_1 = HEAP32[$9_1 + 12 >> 2];
   $2_1 = $422($1_1, $4_1);
   $5_1 = $8_1 - 1 & $2_1;
   $6_1 = $514($10_1, $6_1, $3_1, $1_1, $4_1, $5_1);
   if ($6_1) {
    break label$1
   }
   $4_1 = HEAP32[$0_1 + 8 >> 2];
   $1_1 = $4_1;
   if (($1_1 | 0) == ($8_1 | 0)) {
    $515($0_1 + 4 | 0, $8_1 ? $8_1 << 1 : 1);
    $10_1 = HEAP32[$0_1 + 16 >> 2];
    $1_1 = HEAP32[$0_1 + 8 >> 2];
   }
   HEAP32[$0_1 + 8 >> 2] = $1_1 + 1;
   $1_1 = HEAP32[$0_1 + 68 >> 2];
   if ($1_1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $9_1, $7_1) | 0
   }
   $6_1 = ($4_1 << 4) + $10_1 | 0;
   if (($8_1 | 0) < HEAP32[$0_1 + 12 >> 2]) {
    $510($0_1);
    $5_1 = $2_1 & HEAP32[$0_1 + 12 >> 2] - 1;
   }
   $2_1 = HEAP32[$7_1 + 12 >> 2];
   $1_1 = HEAP32[$9_1 + 12 >> 2];
   $3_1 = ($4_1 << 4) + $10_1 | 0;
   HEAP32[$3_1 + 8 >> 2] = 0;
   HEAP32[$3_1 + 12 >> 2] = 0;
   $1_1 = ($1_1 | 0) < ($2_1 | 0);
   HEAP32[$3_1 + 4 >> 2] = $1_1 ? $7_1 : $9_1;
   HEAP32[$6_1 >> 2] = $1_1 ? $9_1 : $7_1;
   $1_1 = HEAP32[$0_1 + 60 >> 2] + ($4_1 << 2) | 0;
   $0_1 = HEAP32[$0_1 + 40 >> 2] + ($5_1 << 2) | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$0_1 >> 2] = $4_1;
  }
  return $6_1 | 0;
 }
 
 function $514($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0;
  $1_1 = ($5_1 << 2) + $1_1 | 0;
  while (1) {
   label$2 : {
    $1_1 = HEAP32[$1_1 >> 2];
    if (($1_1 | 0) == -1) {
     $5_1 = 0;
     break label$2;
    }
    $6_1 = $1_1 << 4;
    $5_1 = $6_1 + $0_1 | 0;
    if (HEAP32[HEAP32[($0_1 + $6_1 | 0) + 4 >> 2] + 12 >> 2] == ($4_1 | 0) ? HEAP32[HEAP32[$5_1 >> 2] + 12 >> 2] == ($3_1 | 0) : 0) {
     break label$2
    }
    $1_1 = ($1_1 << 2) + $2_1 | 0;
    continue;
   }
   break;
  };
  return $5_1;
 }
 
 function $515($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $6_1 = $53($1_1 << 4)
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   $3_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $2_1 = 12;
   while (1) {
    if ($3_1) {
     $4_1 = $2_1 + $6_1 | 0;
     $5_1 = HEAP32[$0_1 + 12 >> 2] + $2_1 | 0;
     HEAP32[$4_1 - 12 >> 2] = HEAP32[$5_1 - 12 >> 2];
     $7_1 = $5_1 - 8 | 0;
     $9_1 = HEAP32[$7_1 + 4 >> 2];
     $8_1 = $4_1 - 8 | 0;
     HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $9_1;
     HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
     $3_1 = $3_1 - 1 | 0;
     $2_1 = $2_1 + 16 | 0;
     continue;
    }
    break;
   };
   $96($0_1);
   HEAP32[$0_1 + 12 >> 2] = $6_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $516($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  HEAP32[5178] = HEAP32[5178] + 1;
  $5_1 = HEAP32[$1_1 + 12 >> 2] > HEAP32[$2_1 + 12 >> 2];
  $8_1 = $5_1 ? $1_1 : $2_1;
  $6_1 = HEAP32[$8_1 + 12 >> 2];
  $4_1 = -1;
  $7_1 = $0_1 + 16 | 0;
  $9_1 = HEAP32[$7_1 >> 2];
  $10_1 = $0_1 + 40 | 0;
  $12_1 = HEAP32[$10_1 >> 2];
  $11_1 = $0_1 + 60 | 0;
  $13_1 = HEAP32[$11_1 >> 2];
  $5_1 = $5_1 ? $2_1 : $1_1;
  $1_1 = HEAP32[$5_1 + 12 >> 2];
  $2_1 = HEAP32[$0_1 + 12 >> 2] - 1 & $422($1_1, $6_1);
  $1_1 = $514($9_1, $12_1, $13_1, $1_1, $6_1, $2_1);
  if ($1_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 32 >> 2]]($0_1, $1_1, $3_1);
   $6_1 = $1_1 - HEAP32[$7_1 >> 2] >> 4;
   $14_1 = HEAP32[$1_1 + 12 >> 2];
   $7_1 = HEAP32[$10_1 >> 2] + ($2_1 << 2) | 0;
   $2_1 = $7_1;
   while (1) {
    $1_1 = HEAP32[$2_1 >> 2];
    if (($6_1 | 0) != ($1_1 | 0)) {
     $2_1 = HEAP32[$11_1 >> 2] + ($1_1 << 2) | 0;
     $4_1 = $1_1;
     continue;
    }
    break;
   };
   $1_1 = HEAP32[$0_1 + 60 >> 2];
   HEAP32[(($4_1 | 0) == -1 ? $7_1 : $1_1 + ($4_1 << 2) | 0) >> 2] = HEAP32[$1_1 + ($6_1 << 2) >> 2];
   $4_1 = HEAP32[$0_1 + 8 >> 2] - 1 | 0;
   $1_1 = HEAP32[$0_1 + 68 >> 2];
   if ($1_1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, $5_1, $8_1, $3_1) | 0
   }
   if (($4_1 | 0) != ($6_1 | 0)) {
    $1_1 = -1;
    $8_1 = $0_1 + 60 | 0;
    $3_1 = HEAP32[$0_1 + 40 >> 2];
    $5_1 = HEAP32[$0_1 + 16 >> 2];
    $2_1 = $5_1 + ($4_1 << 4) | 0;
    $7_1 = HEAP32[$0_1 + 12 >> 2] - 1 & $422(HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2], HEAP32[HEAP32[$2_1 + 4 >> 2] + 12 >> 2]);
    $9_1 = $3_1 + ($7_1 << 2) | 0;
    $2_1 = $9_1;
    while (1) {
     $3_1 = HEAP32[$2_1 >> 2];
     if (($4_1 | 0) != ($3_1 | 0)) {
      $2_1 = HEAP32[$8_1 >> 2] + ($3_1 << 2) | 0;
      $1_1 = $3_1;
      continue;
     }
     break;
    };
    $3_1 = $0_1 + 60 | 0;
    $2_1 = HEAP32[$3_1 >> 2];
    HEAP32[(($1_1 | 0) == -1 ? $9_1 : $2_1 + ($1_1 << 2) | 0) >> 2] = HEAP32[$2_1 + ($4_1 << 2) >> 2];
    $1_1 = $5_1 + ($6_1 << 4) | 0;
    $8_1 = $1_1 + 8 | 0;
    $2_1 = $5_1 + ($4_1 << 4) | 0;
    $4_1 = $2_1 + 8 | 0;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    HEAP32[$8_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $5_1;
    $4_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $4_1;
    $1_1 = HEAP32[$0_1 + 40 >> 2] + ($7_1 << 2) | 0;
    HEAP32[HEAP32[$3_1 >> 2] + ($6_1 << 2) >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$1_1 >> 2] = $6_1;
   }
   HEAP32[$0_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2] - 1;
  }
  return $14_1 | 0;
 }
 
 function $517($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $1_1;
  HEAP32[$3_1 + 8 >> 2] = 15232;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1, $3_1 + 8 | 0, $2_1);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $518($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 4 | 0;
 }
 
 function $519($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $0_1 = HEAP32[$1_1 + 8 >> 2];
   if (!$0_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] >> 2]]($0_1) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 60 >> 2]]($2_1, HEAP32[$1_1 + 8 >> 2]);
   HEAP32[$1_1 + 8 >> 2] = 0;
  }
 }
 
 function $520($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 8 >> 2];
 }
 
 function $521($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $2_1;
  HEAP32[$3_1 + 8 >> 2] = $0_1;
  HEAP32[$3_1 + 4 >> 2] = $1_1;
  HEAP32[$3_1 >> 2] = 15088;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1, $3_1, $2_1);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $522($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 24 >> 2] = $1_1;
 }
 
 function $523($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  while (1) {
   if (HEAP32[$0_1 + 8 >> 2] > ($3_1 | 0)) {
    $4_1 = HEAP32[$0_1 + 16 >> 2] + ($3_1 << 4) | 0;
    if (FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $4_1) | 0) {
     FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]]($0_1, HEAP32[$4_1 >> 2], HEAP32[$4_1 + 4 >> 2], $2_1) | 0;
     HEAP32[5177] = HEAP32[5177] - 1;
    } else {
     $3_1 = $3_1 + 1 | 0
    }
    continue;
   }
   break;
  };
 }
 
 function $524($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  HEAP32[5176] = HEAP32[5176] + 1;
  $3_1 = HEAP32[$1_1 + 12 >> 2] > HEAP32[$2_1 + 12 >> 2];
  $4_1 = HEAP32[($3_1 ? $2_1 : $1_1) + 12 >> 2];
  $3_1 = HEAP32[($3_1 ? $1_1 : $2_1) + 12 >> 2];
  $1_1 = HEAP32[$0_1 + 12 >> 2] - 1 & $422($4_1, $3_1);
  label$1 : {
   label$2 : {
    if (($1_1 | 0) >= HEAP32[$0_1 + 32 >> 2]) {
     break label$2
    }
    $1_1 = HEAP32[$0_1 + 40 >> 2] + ($1_1 << 2) | 0;
    while (1) {
     $1_1 = HEAP32[$1_1 >> 2];
     if (($1_1 | 0) == -1) {
      break label$2
     }
     $5_1 = HEAP32[$0_1 + 16 >> 2];
     $6_1 = $1_1 << 4;
     $2_1 = $5_1 + $6_1 | 0;
     if (($3_1 | 0) == HEAP32[HEAP32[($5_1 + $6_1 | 0) + 4 >> 2] + 12 >> 2] ? HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2] == ($4_1 | 0) : 0) {
      break label$1
     }
     $1_1 = HEAP32[$0_1 + 60 >> 2] + ($1_1 << 2) | 0;
     continue;
    };
   }
   $2_1 = 0;
  }
  return $2_1 | 0;
 }
 
 function $525($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 68 >> 2] = $1_1;
 }
 
 function $526($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 20 >> 2] = 0;
  HEAP8[$3_1 + 24 | 0] = 1;
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAP32[$3_1 + 16 >> 2] = 0;
  while (1) {
   if (HEAP32[$0_1 + 8 >> 2] <= ($4_1 | 0)) {
    $4_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
    $2_1 = HEAP32[$3_1 + 20 >> 2];
   } else {
    $5_1 = HEAP32[$0_1 + 16 >> 2];
    if (HEAP32[$3_1 + 16 >> 2] == ($2_1 | 0)) {
     $515($3_1 + 8 | 0, $2_1 ? $2_1 << 1 : 1);
     $2_1 = HEAP32[$3_1 + 12 >> 2];
    }
    $2_1 = HEAP32[$3_1 + 20 >> 2] + ($2_1 << 4) | 0;
    $5_1 = $5_1 + $6_1 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
    $7_1 = $5_1 + 4 | 0;
    $8_1 = HEAP32[$7_1 + 4 >> 2];
    HEAP32[$2_1 + 4 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$2_1 + 8 >> 2] = $8_1;
    HEAP32[$2_1 + 12 >> 2] = HEAP32[$5_1 + 12 >> 2];
    $2_1 = HEAP32[$3_1 + 12 >> 2] + 1 | 0;
    HEAP32[$3_1 + 12 >> 2] = $2_1;
    $6_1 = $6_1 + 16 | 0;
    $4_1 = $4_1 + 1 | 0;
    continue;
   }
   break;
  };
  while (1) {
   if ($4_1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]]($0_1, HEAP32[$2_1 >> 2], HEAP32[$2_1 + 4 >> 2], $1_1) | 0;
    $2_1 = $2_1 + 16 | 0;
    $4_1 = $4_1 - 1 | 0;
    continue;
   }
   break;
  };
  $4_1 = 0;
  $2_1 = 0;
  while (1) {
   if (($2_1 | 0) < HEAP32[$0_1 + 52 >> 2]) {
    HEAP32[HEAP32[$0_1 + 60 >> 2] + $4_1 >> 2] = -1;
    $4_1 = $4_1 + 4 | 0;
    $2_1 = $2_1 + 1 | 0;
    continue;
   }
   break;
  };
  $527($3_1 + 8 | 0);
  $4_1 = 0;
  $2_1 = 0;
  while (1) {
   if (($2_1 | 0) < HEAP32[$3_1 + 12 >> 2]) {
    $1_1 = HEAP32[$3_1 + 20 >> 2] + $4_1 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2]) | 0;
    $4_1 = $4_1 + 16 | 0;
    $2_1 = $2_1 + 1 | 0;
    continue;
   }
   break;
  };
  $57($3_1 + 8 | 0);
  global$0 = $3_1 + 32 | 0;
 }
 
 function $527($0_1) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  if (($1_1 | 0) >= 2) {
   $549($0_1, 0, $1_1 - 1 | 0)
  }
 }
 
 function $528($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  if (!(($2_1 | 0) != HEAP32[$1_1 + 4 >> 2] ? ($2_1 | 0) != HEAP32[$1_1 >> 2] : 0)) {
   $2_1 = HEAP32[$0_1 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 32 >> 2]]($2_1, $1_1, HEAP32[$0_1 + 12 >> 2]);
  }
  return 0;
 }
 
 function $529($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[$0_1 + 4 >> 2];
  return ($0_1 | 0) == HEAP32[$1_1 >> 2] | ($0_1 | 0) == HEAP32[$1_1 + 4 >> 2];
 }
 
 function $530($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP8[$0_1 + 16 | 0] = 1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 12 >> 2] = 0;
  $140($0_1, $3_1, $2_1 + 12 | 0);
  $143($1_1, $3_1, HEAP32[$0_1 + 12 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $531($0_1, $1_1) {
  var $2_1 = 0;
  $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
  while (1) {
   if ($1_1) {
    $57(HEAP32[$0_1 + 12 >> 2] + $2_1 | 0);
    $1_1 = $1_1 - 1 | 0;
    $2_1 = $2_1 + 20 | 0;
    continue;
   }
   break;
  };
 }
 
 function $532($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  HEAP32[$0_1 >> 2] = 15500;
  if (HEAPU8[$0_1 + 152 | 0]) {
   $1_1 = HEAP32[$0_1 + 96 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   $54(HEAP32[$0_1 + 96 >> 2]);
  }
  $2_1 = $0_1 + 156 | 0;
  $1_1 = $0_1 + 160 | 0;
  $531($2_1, HEAP32[$1_1 >> 2]);
  $96($2_1);
  HEAP32[$0_1 + 168 >> 2] = 0;
  HEAP8[$0_1 + 172 | 0] = 1;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 44 | 0;
  $2_1 = $0_1 + 4 | 0;
  while (1) {
   $3_1 = $210($1_1);
   $1_1 = $1_1 - 40 | 0;
   if (($2_1 | 0) != ($3_1 | 0)) {
    continue
   }
   break;
  };
  return $0_1 | 0;
 }
 
 function $533($0_1) {
  $0_1 = $0_1 | 0;
  $17($532($0_1));
 }
 
 function $534($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  $3_1 = $53(64);
  HEAP32[$3_1 + 8 >> 2] = $6_1;
  HEAP32[$3_1 + 4 >> 2] = $5_1;
  HEAP32[$3_1 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$3_1 + 16 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 20 >> 2] = $4_1;
  $4_1 = $1_1 + 8 | 0;
  $8_1 = HEAP32[$4_1 + 4 >> 2];
  $5_1 = $3_1 + 24 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $8_1;
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$3_1 + 32 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 36 >> 2] = $5_1;
  $5_1 = $2_1 + 8 | 0;
  $9_1 = HEAP32[$5_1 + 4 >> 2];
  $6_1 = $3_1 + 40 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $9_1;
  HEAP32[$3_1 + 52 >> 2] = 0;
  HEAP32[$3_1 + 56 >> 2] = 0;
  $8_1 = HEAP32[$4_1 + 4 >> 2];
  $6_1 = $7_1 + 24 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $8_1;
  $4_1 = HEAP32[$5_1 >> 2];
  $5_1 = HEAP32[$5_1 + 4 >> 2];
  $6_1 = HEAP32[$2_1 >> 2];
  $2_1 = HEAP32[$2_1 + 4 >> 2];
  $8_1 = HEAP32[$1_1 >> 2];
  $1_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$3_1 + 60 >> 2] = HEAP32[$0_1 + 104 >> 2];
  $9_1 = $7_1 + 40 | 0;
  HEAP32[$9_1 >> 2] = $4_1;
  HEAP32[$9_1 + 4 >> 2] = $5_1;
  $4_1 = HEAP32[$0_1 + 148 >> 2] + 1 | 0;
  HEAP32[$3_1 + 12 >> 2] = $4_1;
  HEAP32[$0_1 + 148 >> 2] = $4_1;
  HEAP32[$7_1 + 16 >> 2] = $8_1;
  HEAP32[$7_1 + 20 >> 2] = $1_1;
  HEAP32[$7_1 + 32 >> 2] = $6_1;
  HEAP32[$7_1 + 36 >> 2] = $2_1;
  $1_1 = $221($0_1 + 4 | 0, $7_1 + 16 | 0, $3_1);
  HEAP32[$3_1 + 52 >> 2] = 0;
  HEAP32[$3_1 + 48 >> 2] = $1_1;
  $1_1 = ((HEAP32[$0_1 + 104 >> 2] << 2) + $0_1 | 0) + 84 | 0;
  HEAP32[$3_1 + 56 >> 2] = HEAP32[$1_1 >> 2];
  $2_1 = HEAP32[$1_1 >> 2];
  if ($2_1) {
   HEAP32[$2_1 + 52 >> 2] = $3_1
  }
  HEAP32[$1_1 >> 2] = $3_1;
  if (!HEAPU8[$0_1 + 153 | 0]) {
   HEAP32[$7_1 + 8 >> 2] = $3_1;
   HEAP32[$7_1 >> 2] = 15576;
   HEAP32[$7_1 + 4 >> 2] = $0_1;
   $535(HEAP32[$0_1 + 4 >> 2], $7_1 + 16 | 0, $7_1);
   $535(HEAP32[$0_1 + 44 >> 2], $7_1 + 16 | 0, $7_1);
  }
  global$0 = $7_1 + 48 | 0;
  return $3_1 | 0;
 }
 
 function $535($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 320 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 316 >> 2] = $0_1;
  if ($0_1) {
   $4_1 = $1_1 + 24 | 0;
   $5_1 = HEAP32[$4_1 + 4 >> 2];
   $0_1 = $3_1 + 304 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $5_1;
   $4_1 = $1_1 + 16 | 0;
   $5_1 = HEAP32[$4_1 + 4 >> 2];
   $0_1 = $3_1 + 296 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $5_1;
   $4_1 = $1_1 + 8 | 0;
   $5_1 = HEAP32[$4_1 + 4 >> 2];
   $0_1 = $3_1 + 288 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $5_1;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$3_1 + 280 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$3_1 + 284 >> 2] = $0_1;
   HEAP32[$3_1 + 268 >> 2] = 0;
   HEAP8[$3_1 + 272 | 0] = 1;
   HEAP32[$3_1 + 260 >> 2] = 0;
   HEAP32[$3_1 + 264 >> 2] = 0;
   HEAP32[$3_1 >> 2] = 0;
   $140($3_1 + 256 | 0, 0, $3_1);
   $288($3_1 + 256 | 0, $3_1, 0, 64);
   $224($3_1 + 256 | 0, $3_1 + 316 | 0);
   $1_1 = HEAP32[$3_1 + 260 >> 2];
   while (1) {
    $1_1 = $1_1 - 1 | 0;
    HEAP32[$3_1 + 260 >> 2] = $1_1;
    $0_1 = HEAP32[HEAP32[$3_1 + 268 >> 2] + ($1_1 << 2) >> 2];
    label$3 : {
     if (!$417($0_1, $3_1 + 280 | 0)) {
      break label$3
     }
     $4_1 = $0_1 + 40 | 0;
     if (HEAP32[$4_1 >> 2]) {
      $224($3_1 + 256 | 0, $0_1 + 36 | 0);
      $224($3_1 + 256 | 0, $4_1);
      $1_1 = HEAP32[$3_1 + 260 >> 2];
      break label$3;
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2]]($2_1, $0_1);
    }
    if (($1_1 | 0) > 0) {
     continue
    }
    break;
   };
   $57($3_1 + 256 | 0);
  }
  global$0 = $3_1 + 320 | 0;
 }
 
 function $536($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = $1_1 + 60 | 0;
  $223(HEAP32[$3_1 >> 2] == 2 ? $0_1 + 44 | 0 : $0_1 + 4 | 0, HEAP32[$1_1 + 48 >> 2]);
  $537($1_1, ((HEAP32[$3_1 >> 2] << 2) + $0_1 | 0) + 84 | 0);
  $3_1 = HEAP32[$0_1 + 96 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $1_1, $2_1);
  $54($1_1);
  HEAP8[$0_1 + 154 | 0] = 1;
 }
 
 function $537($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 + 52 >> 2];
  $2_1 = $2_1 ? $2_1 + 56 | 0 : $1_1;
  $1_1 = $0_1 + 56 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  $1_1 = HEAP32[$1_1 >> 2];
  if ($1_1) {
   HEAP32[$1_1 + 52 >> 2] = HEAP32[$0_1 + 52 >> 2]
  }
 }
 
 function $538($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $7_1 = $2_1 + 8 | 0;
  $5_1 = HEAP32[$7_1 + 4 >> 2];
  $6_1 = $4_1 + 24 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $5_1;
  $7_1 = $3_1 + 8 | 0;
  $5_1 = HEAP32[$7_1 + 4 >> 2];
  $6_1 = $4_1 + 40 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $5_1;
  $6_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 + 16 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 20 >> 2] = $6_1;
  $6_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$4_1 + 32 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$4_1 + 36 >> 2] = $6_1;
  label$1 : {
   if (HEAP32[$1_1 + 60 >> 2] == 2) {
    $223($0_1 + 44 | 0, HEAP32[$1_1 + 48 >> 2]);
    (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $221($0_1 + 4 | 0, $4_1 + 16 | 0, $1_1)), HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1;
    $6_1 = 1;
    break label$1;
   }
   $6_1 = 1;
   HEAP32[$0_1 + 128 >> 2] = HEAP32[$0_1 + 128 >> 2] + 1;
   $7_1 = HEAP32[$1_1 + 48 >> 2];
   if ($417($7_1, $4_1 + 16 | 0)) {
    $8_1 = HEAPF32[$1_1 + 16 >> 2];
    $20_1 = HEAPF32[$2_1 >> 2];
    $10_1 = HEAPF32[$1_1 + 32 >> 2];
    $9_1 = HEAPF32[$0_1 + 100 >> 2];
    $12_1 = HEAPF32[$1_1 + 24 >> 2];
    $21_1 = HEAPF32[$1_1 + 40 >> 2];
    $22_1 = HEAPF32[$2_1 + 8 >> 2];
    $13_1 = HEAPF32[$1_1 + 20 >> 2];
    $23_1 = HEAPF32[$1_1 + 36 >> 2];
    $24_1 = HEAPF32[$2_1 + 4 >> 2];
    $6_1 = $220($7_1, $4_1 + 16 | 0);
    if (!$6_1) {
     $5_1 = $4_1 + 36 | 0;
     $14_1 = Math_fround(HEAPF32[$5_1 >> 2] + Math_fround(.05000000074505806));
     HEAPF32[$5_1 >> 2] = $14_1;
     $5_1 = $4_1 + 40 | 0;
     $15_1 = Math_fround(HEAPF32[$5_1 >> 2] + Math_fround(.05000000074505806));
     HEAPF32[$5_1 >> 2] = $15_1;
     $16_1 = Math_fround(HEAPF32[$4_1 + 32 >> 2] + Math_fround(.05000000074505806));
     HEAPF32[$4_1 + 32 >> 2] = $16_1;
     $17_1 = Math_fround(HEAPF32[$4_1 + 16 >> 2] + Math_fround(-.05000000074505806));
     HEAPF32[$4_1 + 16 >> 2] = $17_1;
     $18_1 = Math_fround(HEAPF32[$4_1 + 24 >> 2] + Math_fround(-.05000000074505806));
     HEAPF32[$4_1 + 24 >> 2] = $18_1;
     $19_1 = Math_fround(HEAPF32[$4_1 + 20 >> 2] + Math_fround(-.05000000074505806));
     HEAPF32[$4_1 + 20 >> 2] = $19_1;
     $10_1 = Math_fround(Math_fround(Math_fround($10_1 - $8_1) * Math_fround(.5)) * $9_1);
     $8_1 = Math_fround($20_1 - $8_1) < Math_fround(0.0) ? Math_fround(-$10_1) : $10_1;
     $5_1 = $8_1 > Math_fround(0.0);
     HEAPF32[($4_1 + 16 | 0) + ($5_1 << 4) >> 2] = $8_1 + ($5_1 ? $16_1 : $17_1);
     $8_1 = Math_fround($9_1 * Math_fround(Math_fround($23_1 - $13_1) * Math_fround(.5)));
     $8_1 = Math_fround($24_1 - $13_1) < Math_fround(0.0) ? Math_fround(-$8_1) : $8_1;
     $5_1 = $8_1 > Math_fround(0.0);
     HEAPF32[($4_1 + 16 | 0) + ($5_1 ? 20 : 4) >> 2] = ($5_1 ? $14_1 : $19_1) + $8_1;
     $9_1 = Math_fround($9_1 * Math_fround(Math_fround($21_1 - $12_1) * Math_fround(.5)));
     $9_1 = Math_fround($22_1 - $12_1) < Math_fround(0.0) ? Math_fround(-$9_1) : $9_1;
     $5_1 = $9_1 > Math_fround(0.0);
     HEAPF32[($4_1 + 16 | 0) + ($5_1 ? 24 : 8) >> 2] = ($5_1 ? $15_1 : $18_1) + $9_1;
     $222($0_1 + 4 | 0, $7_1, $4_1 + 16 | 0);
     HEAP32[$0_1 + 132 >> 2] = HEAP32[$0_1 + 132 >> 2] + 1;
    }
    $6_1 = $6_1 ^ 1;
    break label$1;
   }
   $222($0_1 + 4 | 0, $7_1, $4_1 + 16 | 0);
   HEAP32[$0_1 + 132 >> 2] = HEAP32[$0_1 + 132 >> 2] + 1;
  }
  $7_1 = $0_1 + 84 | 0;
  $537($1_1, $7_1 + (HEAP32[$1_1 + 60 >> 2] << 2) | 0);
  $11_1 = $2_1 + 8 | 0;
  $25 = HEAP32[$11_1 + 4 >> 2];
  $5_1 = $1_1 + 24 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$11_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $25;
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$1_1 + 16 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 20 >> 2] = $5_1;
  $5_1 = $3_1 + 8 | 0;
  $11_1 = HEAP32[$5_1 + 4 >> 2];
  $2_1 = $1_1 + 40 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $11_1;
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$1_1 + 32 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 36 >> 2] = $2_1;
  HEAP32[$1_1 + 52 >> 2] = 0;
  $3_1 = HEAP32[$0_1 + 104 >> 2];
  $2_1 = $7_1 + ($3_1 << 2) | 0;
  HEAP32[$1_1 + 56 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 60 >> 2] = $3_1;
  $3_1 = HEAP32[$2_1 >> 2];
  if ($3_1) {
   HEAP32[$3_1 + 52 >> 2] = $1_1
  }
  HEAP32[$2_1 >> 2] = $1_1;
  label$6 : {
   if (!$6_1) {
    break label$6
   }
   HEAP8[$0_1 + 154 | 0] = 1;
   if (HEAPU8[$0_1 + 153 | 0]) {
    break label$6
   }
   HEAP32[$4_1 >> 2] = 15576;
   HEAP32[$4_1 + 4 >> 2] = $0_1;
   $2_1 = $0_1 + 44 | 0;
   $539($2_1, HEAP32[$2_1 >> 2], HEAP32[$1_1 + 48 >> 2], $4_1);
   $539($0_1 + 4 | 0, HEAP32[$0_1 + 4 >> 2], HEAP32[$1_1 + 48 >> 2], $4_1);
  }
  global$0 = $4_1 + 48 | 0;
 }
 
 function $539($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   if (!$2_1) {
    break label$1
   }
   $9_1 = $0_1 + 20 | 0;
   $433($9_1, 128, $8_1 + 8 | 0);
   $4_1 = HEAP32[$0_1 + 32 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $2_1;
   HEAP32[$4_1 >> 2] = $1_1;
   $10_1 = 124;
   $2_1 = 1;
   while (1) {
    $1_1 = $2_1;
    $2_1 = $2_1 - 1 | 0;
    $6_1 = $2_1 << 3;
    $4_1 = $6_1 + HEAP32[$0_1 + 32 >> 2] | 0;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    $4_1 = HEAP32[$4_1 >> 2];
    if (($2_1 | 0) > ($10_1 | 0)) {
     $433($9_1, HEAP32[$0_1 + 24 >> 2] << 1, $8_1 + 8 | 0);
     $10_1 = HEAP32[$0_1 + 24 >> 2] - 4 | 0;
    }
    label$4 : {
     if (($4_1 | 0) == ($5_1 | 0)) {
      if (!HEAP32[$4_1 + 40 >> 2]) {
       break label$4
      }
      $2_1 = $6_1 + HEAP32[$0_1 + 32 >> 2] | 0;
      $5_1 = HEAP32[$4_1 + 36 >> 2];
      HEAP32[$2_1 + 4 >> 2] = $5_1;
      HEAP32[$2_1 >> 2] = $5_1;
      $2_1 = $1_1 << 3;
      $5_1 = $2_1 + HEAP32[$0_1 + 32 >> 2] | 0;
      $6_1 = HEAP32[$4_1 + 40 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $6_1;
      HEAP32[$5_1 >> 2] = $6_1;
      $5_1 = HEAP32[$4_1 + 40 >> 2];
      $2_1 = ($2_1 + HEAP32[$0_1 + 32 >> 2] | 0) + 8 | 0;
      HEAP32[$2_1 >> 2] = HEAP32[$4_1 + 36 >> 2];
      HEAP32[$2_1 + 4 >> 2] = $5_1;
      $2_1 = $1_1 + 2 | 0;
      break label$4;
     }
     if (!$417($4_1, $5_1)) {
      break label$4
     }
     $7_1 = HEAP32[$5_1 + 40 >> 2];
     if (HEAP32[$4_1 + 40 >> 2]) {
      $2_1 = HEAP32[$4_1 + 36 >> 2];
      if ($7_1) {
       $6_1 = $6_1 + HEAP32[$0_1 + 32 >> 2] | 0;
       HEAP32[$6_1 + 4 >> 2] = HEAP32[$5_1 + 36 >> 2];
       HEAP32[$6_1 >> 2] = $2_1;
       $6_1 = HEAP32[$4_1 + 40 >> 2];
       $2_1 = $1_1 << 3;
       $7_1 = $2_1 + HEAP32[$0_1 + 32 >> 2] | 0;
       HEAP32[$7_1 + 4 >> 2] = HEAP32[$5_1 + 36 >> 2];
       HEAP32[$7_1 >> 2] = $6_1;
       $6_1 = HEAP32[$4_1 + 36 >> 2];
       $7_1 = $2_1 + HEAP32[$0_1 + 32 >> 2] | 0;
       HEAP32[$7_1 + 12 >> 2] = HEAP32[$5_1 + 40 >> 2];
       HEAP32[$7_1 + 8 >> 2] = $6_1;
       $4_1 = HEAP32[$4_1 + 40 >> 2];
       $2_1 = $2_1 + HEAP32[$0_1 + 32 >> 2] | 0;
       HEAP32[$2_1 + 20 >> 2] = HEAP32[$5_1 + 40 >> 2];
       HEAP32[$2_1 + 16 >> 2] = $4_1;
       $2_1 = $1_1 + 3 | 0;
       break label$4;
      }
      $6_1 = $6_1 + HEAP32[$0_1 + 32 >> 2] | 0;
      HEAP32[$6_1 + 4 >> 2] = $5_1;
      HEAP32[$6_1 >> 2] = $2_1;
      $2_1 = HEAP32[$4_1 + 40 >> 2];
      $4_1 = HEAP32[$0_1 + 32 >> 2] + ($1_1 << 3) | 0;
      HEAP32[$4_1 + 4 >> 2] = $5_1;
      HEAP32[$4_1 >> 2] = $2_1;
      $2_1 = $1_1 + 1 | 0;
      break label$4;
     }
     if ($7_1) {
      $2_1 = $6_1 + HEAP32[$0_1 + 32 >> 2] | 0;
      HEAP32[$2_1 + 4 >> 2] = HEAP32[$5_1 + 36 >> 2];
      HEAP32[$2_1 >> 2] = $4_1;
      $2_1 = HEAP32[$0_1 + 32 >> 2] + ($1_1 << 3) | 0;
      HEAP32[$2_1 + 4 >> 2] = HEAP32[$5_1 + 40 >> 2];
      HEAP32[$2_1 >> 2] = $4_1;
      $2_1 = $1_1 + 1 | 0;
      break label$4;
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $4_1, $5_1);
    }
    if ($2_1) {
     continue
    }
    break;
   };
  }
  global$0 = $8_1 + 16 | 0;
 }
 
 function $540($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $0_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $0_1;
  $0_1 = $2_1 + 8 | 0;
  $2_1 = $1_1 + 24 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $4_1;
  $2_1 = $1_1 + 40 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $0_1 = $3_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $4_1;
  $0_1 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $0_1;
 }
 
 function $541($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = 15720;
  HEAP32[$2_1 + 12 >> 2] = $3_1;
  $6_1 = $3_1 + 4 | 0;
  $7_1 = $3_1 + 20 | 0;
  $8_1 = HEAP32[$0_1 + 168 >> 2];
  $542(HEAP32[$0_1 + 4 >> 2], $1_1, $6_1, $7_1, HEAPF32[$3_1 + 32 >> 2], $4_1, $5_1, $8_1, $2_1 + 8 | 0);
  $542(HEAP32[$0_1 + 44 >> 2], $1_1, $6_1, $7_1, HEAPF32[$3_1 + 32 >> 2], $4_1, $5_1, $8_1, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $542($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  var $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0);
  $9_1 = global$0 - 48 | 0;
  global$0 = $9_1;
  if ($0_1) {
   HEAP32[$9_1 + 16 >> 2] = 0;
   $140($7_1, 128, $9_1 + 16 | 0);
   HEAP32[HEAP32[$7_1 + 12 >> 2] >> 2] = $0_1;
   $12_1 = 126;
   $0_1 = 1;
   while (1) {
    HEAP32[$9_1 + 28 >> 2] = 0;
    $11_1 = $0_1 - 1 | 0;
    $13_1 = $11_1 << 2;
    $10_1 = HEAP32[$13_1 + HEAP32[$7_1 + 12 >> 2] >> 2];
    HEAPF32[$9_1 + 24 >> 2] = HEAPF32[$10_1 + 8 >> 2] - HEAPF32[$6_1 + 8 >> 2];
    HEAPF32[$9_1 + 20 >> 2] = HEAPF32[$10_1 + 4 >> 2] - HEAPF32[$6_1 + 4 >> 2];
    HEAPF32[$9_1 + 16 >> 2] = HEAPF32[$10_1 >> 2] - HEAPF32[$6_1 >> 2];
    $14_1 = HEAPF32[$10_1 + 16 >> 2];
    $15_1 = HEAPF32[$10_1 + 20 >> 2];
    $16_1 = HEAPF32[$10_1 + 24 >> 2];
    $17_1 = HEAPF32[$5_1 >> 2];
    $18_1 = HEAPF32[$5_1 + 4 >> 2];
    $19_1 = HEAPF32[$5_1 + 8 >> 2];
    HEAP32[$9_1 + 44 >> 2] = 0;
    HEAPF32[$9_1 + 40 >> 2] = $16_1 - $19_1;
    HEAPF32[$9_1 + 36 >> 2] = $15_1 - $18_1;
    HEAPF32[$9_1 + 32 >> 2] = $14_1 - $17_1;
    HEAP32[$9_1 + 12 >> 2] = 1065353216;
    label$3 : {
     if ($309($1_1, $2_1, $3_1, $9_1 + 16 | 0, $9_1 + 12 | 0, $4_1)) {
      if (HEAP32[$10_1 + 40 >> 2]) {
       if (($11_1 | 0) > ($12_1 | 0)) {
        $11_1 = HEAP32[$7_1 + 4 >> 2];
        HEAP32[$9_1 + 8 >> 2] = 0;
        $140($7_1, $11_1 << 1, $9_1 + 8 | 0);
        $12_1 = HEAP32[$7_1 + 4 >> 2] - 2 | 0;
       }
       HEAP32[HEAP32[$7_1 + 12 >> 2] + $13_1 >> 2] = HEAP32[$10_1 + 36 >> 2];
       HEAP32[HEAP32[$7_1 + 12 >> 2] + ($0_1 << 2) >> 2] = HEAP32[$10_1 + 40 >> 2];
       $0_1 = $0_1 + 1 | 0;
       break label$3;
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 12 >> 2]]($8_1, $10_1);
     }
     $0_1 = $11_1;
    }
    if ($0_1) {
     continue
    }
    break;
   };
  }
  global$0 = $9_1 + 48 | 0;
 }
 
 function $543($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 44 >> 2] = $3_1;
  HEAP32[$4_1 + 40 >> 2] = 15648;
  $5_1 = $1_1 + 8 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $3_1 = $4_1 + 16 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $6_1;
  $5_1 = $2_1 + 8 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $3_1 = $4_1 + 32 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $6_1;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$4_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 12 >> 2] = $3_1;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 + 24 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 28 >> 2] = $1_1;
  $535(HEAP32[$0_1 + 4 >> 2], $4_1 + 8 | 0, $4_1 + 40 | 0);
  $535(HEAP32[$0_1 + 44 >> 2], $4_1 + 8 | 0, $4_1 + 40 | 0);
  global$0 = $4_1 + 48 | 0;
 }
 
 function $544($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  $4_1 = $0_1 + 4 | 0;
  $214($4_1, ((Math_imul(HEAP32[$0_1 + 112 >> 2], HEAP32[$0_1 + 16 >> 2]) | 0) / 100 | 0) + 1 | 0);
  if (HEAP32[$0_1 + 124 >> 2]) {
   $2_1 = ((Math_imul(HEAP32[$0_1 + 108 >> 2], HEAP32[$0_1 + 56 >> 2]) | 0) / 100 | 0) + 1 | 0;
   $214($0_1 + 44 | 0, $2_1);
   $2_1 = HEAP32[$0_1 + 124 >> 2] - $2_1 | 0;
   HEAP32[$0_1 + 124 >> 2] = ($2_1 | 0) > 0 ? $2_1 : 0;
  }
  $2_1 = (HEAP32[$0_1 + 104 >> 2] + 1 | 0) % 2 | 0;
  HEAP32[$0_1 + 104 >> 2] = $2_1;
  $2_1 = HEAP32[(($2_1 << 2) + $0_1 | 0) + 84 >> 2];
  if ($2_1) {
   $6_1 = $0_1 + 44 | 0;
   $5_1 = $8_1 + 16 | 0;
   while (1) {
    $3_1 = $2_1 + 56 | 0;
    $7_1 = HEAP32[$3_1 >> 2];
    $537($2_1, ((HEAP32[$2_1 + 60 >> 2] << 2) + $0_1 | 0) + 84 | 0);
    HEAP32[$2_1 + 52 >> 2] = 0;
    HEAP32[$3_1 >> 2] = HEAP32[$0_1 + 92 >> 2];
    $3_1 = HEAP32[$0_1 + 92 >> 2];
    if ($3_1) {
     HEAP32[$3_1 + 52 >> 2] = $2_1
    }
    HEAP32[$0_1 + 92 >> 2] = $2_1;
    $223($4_1, HEAP32[$2_1 + 48 >> 2]);
    $9_1 = $2_1 + 24 | 0;
    $10_1 = HEAP32[$9_1 + 4 >> 2];
    $3_1 = $8_1 + 8 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$9_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $10_1;
    $3_1 = HEAP32[$2_1 + 36 >> 2];
    HEAP32[$5_1 >> 2] = HEAP32[$2_1 + 32 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $3_1;
    $9_1 = $2_1 + 40 | 0;
    $10_1 = HEAP32[$9_1 + 4 >> 2];
    $3_1 = $5_1 + 8 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$9_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $10_1;
    $3_1 = HEAP32[$2_1 + 20 >> 2];
    HEAP32[$8_1 >> 2] = HEAP32[$2_1 + 16 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $3_1;
    $3_1 = $221($6_1, $8_1, $2_1);
    HEAP32[$2_1 + 60 >> 2] = 2;
    HEAP32[$2_1 + 48 >> 2] = $3_1;
    $2_1 = $7_1;
    if ($2_1) {
     continue
    }
    break;
   };
   HEAP8[$0_1 + 154 | 0] = 1;
   HEAP32[$0_1 + 124 >> 2] = HEAP32[$0_1 + 56 >> 2];
  }
  HEAP32[$8_1 >> 2] = 15576;
  HEAP32[$8_1 + 4 >> 2] = $0_1;
  label$5 : {
   if (!HEAPU8[$0_1 + 153 | 0]) {
    break label$5
   }
   $539($4_1, HEAP32[$0_1 + 4 >> 2], HEAP32[$0_1 + 44 >> 2], $8_1);
   if (!HEAPU8[$0_1 + 153 | 0]) {
    break label$5
   }
   $2_1 = HEAP32[$4_1 >> 2];
   $539($4_1, $2_1, $2_1, $8_1);
  }
  label$6 : {
   if (!HEAPU8[$0_1 + 154 | 0]) {
    break label$6
   }
   $2_1 = HEAP32[$0_1 + 96 >> 2];
   $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 28 >> 2]]($2_1) | 0;
   $2_1 = HEAP32[$7_1 + 4 >> 2];
   if (($2_1 | 0) < 1) {
    break label$6
   }
   $4_1 = HEAP32[$0_1 + 120 >> 2];
   $5_1 = (Math_imul($2_1, HEAP32[$0_1 + 116 >> 2]) | 0) / 100 | 0;
   $4_1 = ($4_1 | 0) > ($5_1 | 0) ? $4_1 : $5_1;
   $5_1 = ($2_1 | 0) < ($4_1 | 0) ? $2_1 : $4_1;
   $2_1 = 0;
   while (1) {
    if (($2_1 | 0) >= ($5_1 | 0)) {
     $2_1 = HEAP32[$7_1 + 4 >> 2];
     if (($2_1 | 0) > 0) {
      HEAP32[$0_1 + 144 >> 2] = (HEAP32[$0_1 + 144 >> 2] + $5_1 | 0) % ($2_1 | 0);
      break label$6;
     }
    } else {
     $4_1 = HEAP32[$7_1 + 12 >> 2] + ((HEAP32[$0_1 + 144 >> 2] + $2_1 | 0) % HEAP32[$7_1 + 4 >> 2] << 4) | 0;
     $6_1 = HEAP32[$4_1 >> 2];
     $4_1 = HEAP32[$4_1 + 4 >> 2];
     if (!$417(HEAP32[$6_1 + 48 >> 2], HEAP32[$4_1 + 48 >> 2])) {
      $3_1 = HEAP32[$0_1 + 96 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1, $6_1, $4_1, $1_1) | 0;
      $5_1 = $5_1 - 1 | 0;
      $2_1 = $2_1 - 1 | 0;
     }
     $2_1 = $2_1 + 1 | 0;
     continue;
    }
    break;
   };
   HEAP32[$0_1 + 144 >> 2] = 0;
  }
  HEAP8[$0_1 + 154 | 0] = 0;
  HEAP32[$0_1 + 120 >> 2] = 1;
  HEAP32[$0_1 + 140 >> 2] = HEAP32[$0_1 + 140 >> 2] + 1;
  $2_1 = HEAP32[$0_1 + 132 >> 2];
  $4_1 = $0_1;
  $0_1 = HEAP32[$0_1 + 128 >> 2];
  $11_1 = Math_fround(0.0);
  label$13 : {
   if (!$0_1) {
    break label$13
   }
   $11_1 = Math_fround(Math_fround($2_1 >>> 0) / Math_fround($0_1 >>> 0));
  }
  HEAPF32[$4_1 + 136 >> 2] = $11_1;
  HEAP32[$4_1 + 132 >> 2] = $2_1 >>> 1;
  HEAP32[$4_1 + 128 >> 2] = $0_1 >>> 1;
  $0_1 = HEAP32[$4_1 + 96 >> 2];
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 56 >> 2]]($0_1) | 0) {
   $0_1 = HEAP32[$4_1 + 96 >> 2];
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1) | 0;
   $527($3_1);
   $2_1 = 0;
   $7_1 = 0;
   $5_1 = 0;
   $6_1 = 0;
   while (1) {
    if (($5_1 | 0) < HEAP32[$3_1 + 4 >> 2]) {
     $9_1 = HEAP32[$3_1 + 12 >> 2] + $12_1 | 0;
     $10_1 = $9_1 + 4 | 0;
     $0_1 = HEAP32[$10_1 >> 2];
     $13_1 = $2_1;
     $2_1 = HEAP32[$9_1 >> 2];
     label$17 : {
      if (!(($0_1 | 0) == ($7_1 | 0) ? ($13_1 | 0) == ($2_1 | 0) : 0)) {
       if ($417(HEAP32[$2_1 + 48 >> 2], HEAP32[$0_1 + 48 >> 2])) {
        break label$17
       }
      }
      $7_1 = HEAP32[$4_1 + 96 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 32 >> 2]]($7_1, $9_1, $1_1);
      HEAP32[$10_1 >> 2] = 0;
      HEAP32[$9_1 >> 2] = 0;
      $6_1 = $6_1 + 1 | 0;
     }
     $12_1 = $12_1 + 16 | 0;
     $5_1 = $5_1 + 1 | 0;
     $7_1 = $0_1;
     continue;
    }
    break;
   };
   $527($3_1);
   $1_1 = HEAP32[$3_1 + 4 >> 2];
   $0_1 = $1_1 - $6_1 | 0;
   label$19 : {
    if (($6_1 | 0) > 0) {
     break label$19
    }
    if (($6_1 | 0) <= -1) {
     $515($3_1, $0_1)
    }
    $2_1 = $1_1 << 4;
    while (1) {
     if (!$6_1) {
      break label$19
     }
     $1_1 = HEAP32[$3_1 + 12 >> 2] + $2_1 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $1_1 = $1_1 + 8 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $6_1 = $6_1 + 1 | 0;
     $2_1 = $2_1 + 16 | 0;
     continue;
    };
   }
   HEAP32[$3_1 + 4 >> 2] = $0_1;
  }
  global$0 = $8_1 + 32 | 0;
 }
 
 function $545($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 96 >> 2];
 }
 
 function $546($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[$0_1 + 44 >> 2];
  $0_1 = HEAP32[$0_1 + 4 >> 2];
  label$1 : {
   if ($0_1) {
    if ($4_1) {
     $217($0_1, $4_1, $3_1);
     break label$1;
    }
    $5_1 = $0_1 + 24 | 0;
    $6_1 = HEAP32[$5_1 + 4 >> 2];
    $4_1 = $3_1 + 24 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    $5_1 = $0_1 + 16 | 0;
    $6_1 = HEAP32[$5_1 + 4 >> 2];
    $4_1 = $3_1 + 16 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    $5_1 = $0_1 + 8 | 0;
    $6_1 = HEAP32[$5_1 + 4 >> 2];
    $4_1 = $3_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    $4_1 = HEAP32[$0_1 + 4 >> 2];
    HEAP32[$3_1 >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $4_1;
    break label$1;
   }
   if ($4_1) {
    $5_1 = $4_1 + 24 | 0;
    $6_1 = HEAP32[$5_1 + 4 >> 2];
    $0_1 = $3_1 + 24 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $6_1;
    $5_1 = $4_1 + 16 | 0;
    $6_1 = HEAP32[$5_1 + 4 >> 2];
    $0_1 = $3_1 + 16 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $6_1;
    $5_1 = $4_1 + 8 | 0;
    $6_1 = HEAP32[$5_1 + 4 >> 2];
    $0_1 = $3_1 + 8 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $6_1;
    $0_1 = HEAP32[$4_1 + 4 >> 2];
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $0_1;
    break label$1;
   }
   $0_1 = $3_1 + 24 | 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   $0_1 = $3_1 + 16 | 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   $0_1 = $3_1 + 8 | 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
  }
  $0_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $0_1;
  $0_1 = $1_1 + 8 | 0;
  $1_1 = $3_1 + 8 | 0;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $4_1;
  $0_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $0_1;
  $0_1 = $2_1 + 8 | 0;
  $1_1 = $3_1 + 24 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  global$0 = $3_1 + 32 | 0;
 }
 
 function $547($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (HEAP32[$0_1 + 16 >> 2] != (0 - HEAP32[$0_1 + 56 >> 2] | 0)) {
    break label$1
   }
   $211($0_1 + 4 | 0);
   $211($0_1 + 44 | 0);
   HEAP8[$0_1 + 153 | 0] = 0;
   HEAP8[$0_1 + 154 | 0] = 1;
   HEAP32[$0_1 + 124 >> 2] = 0;
   HEAP32[$0_1 + 104 >> 2] = 0;
   HEAP32[$0_1 + 128 >> 2] = 0;
   HEAP32[$0_1 + 132 >> 2] = 0;
   HEAP32[$0_1 + 116 >> 2] = 10;
   HEAP32[$0_1 + 120 >> 2] = 1;
   HEAP32[$0_1 + 108 >> 2] = 1;
   HEAP32[$0_1 + 112 >> 2] = 0;
   $1_1 = $0_1 + 136 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0_1 + 144 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0_1 + 84 | 0;
   $0_1 = 0;
   while (1) {
    if (($0_1 | 0) == 12) {
     break label$1
    }
    HEAP32[$0_1 + $1_1 >> 2] = 0;
    $0_1 = $0_1 + 4 | 0;
    continue;
   };
  }
 }
 
 function $548($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $549($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $4_1 = HEAP32[$0_1 + 12 >> 2];
  $5_1 = $4_1 + (($1_1 + $2_1 | 0) / 2 << 4) | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  HEAP32[$8_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $6_1;
  $6_1 = HEAP32[$5_1 + 12 >> 2];
  HEAP32[$8_1 + 8 >> 2] = HEAP32[$5_1 + 8 >> 2];
  HEAP32[$8_1 + 12 >> 2] = $6_1;
  $5_1 = $1_1;
  $6_1 = $2_1;
  while (1) {
   $7_1 = (($5_1 << 4) + $4_1 | 0) - 16 | 0;
   while (1) {
    $5_1 = $5_1 + 1 | 0;
    $7_1 = $7_1 + 16 | 0;
    if ($550($7_1, $8_1)) {
     continue
    }
    break;
   };
   $9_1 = $5_1 - 1 | 0;
   $3_1 = ($6_1 << 4) + 28 | 0;
   while (1) {
    $6_1 = $6_1 - 1 | 0;
    $10_1 = $3_1 + $4_1 | 0;
    $11_1 = $3_1 - 16 | 0;
    $3_1 = $11_1;
    if ($550($8_1, $10_1 - 28 | 0)) {
     continue
    }
    break;
   };
   $3_1 = $6_1 + 1 | 0;
   if (($9_1 | 0) <= ($3_1 | 0)) {
    $9_1 = HEAP32[$7_1 >> 2];
    $10_1 = HEAP32[$7_1 + 4 >> 2];
    $4_1 = ($4_1 + $11_1 | 0) - 12 | 0;
    $3_1 = $4_1;
    $12_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$7_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $12_1;
    $3_1 = $7_1 + 8 | 0;
    $12_1 = HEAP32[$3_1 >> 2];
    $7_1 = HEAP32[$3_1 + 4 >> 2];
    $4_1 = $4_1 + 8 | 0;
    $13_1 = HEAP32[$4_1 + 4 >> 2];
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $13_1;
    $3_1 = HEAP32[$0_1 + 12 >> 2] + $11_1 | 0;
    $4_1 = $3_1 - 4 | 0;
    HEAP32[$4_1 >> 2] = $12_1;
    HEAP32[$4_1 + 4 >> 2] = $7_1;
    $3_1 = $3_1 - 12 | 0;
    HEAP32[$3_1 >> 2] = $9_1;
    HEAP32[$3_1 + 4 >> 2] = $10_1;
    $9_1 = $5_1;
    $3_1 = $6_1;
   }
   if (($3_1 | 0) >= ($9_1 | 0)) {
    $4_1 = HEAP32[$0_1 + 12 >> 2];
    $5_1 = $9_1;
    $6_1 = $3_1;
    continue;
   }
   break;
  };
  if (($1_1 | 0) < ($3_1 | 0)) {
   $549($0_1, $1_1, $3_1)
  }
  if (($2_1 | 0) > ($9_1 | 0)) {
   $549($0_1, $9_1, $2_1)
  }
  global$0 = $8_1 + 16 | 0;
 }
 
 function $550($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $2_1 = -1;
  $8_1 = -1;
  $3_1 = HEAP32[$0_1 >> 2];
  if ($3_1) {
   $8_1 = HEAP32[$3_1 + 12 >> 2]
  }
  $4_1 = HEAP32[$1_1 >> 2];
  if ($4_1) {
   $2_1 = HEAP32[$4_1 + 12 >> 2]
  }
  $9_1 = -1;
  $10_1 = -1;
  $6_1 = HEAP32[$0_1 + 4 >> 2];
  if ($6_1) {
   $10_1 = HEAP32[$6_1 + 12 >> 2]
  }
  $7_1 = HEAP32[$1_1 + 4 >> 2];
  if ($7_1) {
   $9_1 = HEAP32[$7_1 + 12 >> 2]
  }
  $5_1 = 1;
  label$5 : {
   if (($2_1 | 0) < ($8_1 | 0)) {
    break label$5
   }
   $2_1 = ($9_1 | 0) < ($10_1 | 0);
   $5_1 = $2_1 & ($3_1 | 0) == ($4_1 | 0);
   if ($2_1) {
    break label$5
   }
   if (($3_1 | 0) != ($4_1 | 0)) {
    break label$5
   }
   $5_1 = 0;
   if (($6_1 | 0) != ($7_1 | 0)) {
    break label$5
   }
   $5_1 = HEAPU32[$0_1 + 8 >> 2] > HEAPU32[$1_1 + 8 >> 2];
  }
  return $5_1;
 }
 
 function $551($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  if (($1_1 | 0) != ($2_1 | 0)) {
   $3_1 = HEAP32[HEAP32[$0_1 + 4 >> 2] + 96 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, HEAP32[$1_1 + 36 >> 2], HEAP32[$2_1 + 36 >> 2]) | 0;
   $0_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$0_1 + 120 >> 2] = HEAP32[$0_1 + 120 >> 2] + 1;
  }
 }
 
 function $552($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $1_1, HEAP32[HEAP32[$0_1 + 8 >> 2] + 48 >> 2]);
 }
 
 function $553($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[$0_1 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, HEAP32[$1_1 + 36 >> 2]) | 0;
 }
 
 function $554($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAPF32[$3_1 + 8 >> 2] = $2_1;
  HEAPF32[$3_1 + 12 >> 2] = $1_1;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$3_1 >> 2] = 1065353216;
  HEAPF32[$0_1 + 504 >> 2] = HEAPF32[($1_1 < Math_fround(0.0) ? $3_1 + 4 | 0 : $1_1 > Math_fround(1.0) ? $3_1 : $3_1 + 12 | 0) >> 2];
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$3_1 >> 2] = 1065353216;
  HEAPF32[$0_1 + 508 >> 2] = HEAPF32[($2_1 < Math_fround(0.0) ? $3_1 + 4 | 0 : $2_1 > Math_fround(1.0) ? $3_1 : $3_1 + 8 | 0) >> 2];
 }
 
 function $555($0_1, $1_1, $2_1) {
  var $3_1 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $4_1 = HEAP32[$0_1 + 204 >> 2];
  label$1 : {
   if ($1_1 == Math_fround(0.0)) {
    HEAP32[$0_1 + 204 >> 2] = $4_1 | 1;
    break label$1;
   }
   HEAP32[$0_1 + 204 >> 2] = $4_1 & -2;
   $3_1 = Math_fround(Math_fround(1.0) / $1_1);
  }
  HEAPF32[$0_1 + 404 >> 2] = $3_1;
  HEAP32[$0_1 + 436 >> 2] = 0;
  HEAPF32[$0_1 + 424 >> 2] = HEAPF32[$0_1 + 440 >> 2] * $1_1;
  HEAPF32[$0_1 + 432 >> 2] = HEAPF32[$0_1 + 448 >> 2] * $1_1;
  HEAPF32[$0_1 + 428 >> 2] = HEAPF32[$0_1 + 444 >> 2] * $1_1;
  $1_1 = HEAPF32[$2_1 + 8 >> 2];
  $5_1 = HEAPF32[$2_1 + 4 >> 2];
  $6_1 = HEAPF32[$2_1 >> 2];
  HEAPF32[$0_1 + 620 >> 2] = HEAPF32[$0_1 + 408 >> 2] * $3_1;
  HEAPF32[$0_1 + 624 >> 2] = $3_1 * HEAPF32[$0_1 + 412 >> 2];
  HEAPF32[$0_1 + 628 >> 2] = $3_1 * HEAPF32[$0_1 + 416 >> 2];
  HEAP32[$0_1 + 632 >> 2] = 0;
  HEAP32[$0_1 + 468 >> 2] = 0;
  HEAPF32[$0_1 + 456 >> 2] = $6_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $6_1) : Math_fround(0.0);
  HEAPF32[$0_1 + 460 >> 2] = $5_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $5_1) : Math_fround(0.0);
  HEAPF32[$0_1 + 464 >> 2] = $1_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $1_1) : Math_fround(0.0);
 }
 
 function $556($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 144 | 0;
  global$0 = $2_1;
  $1_1 = $0_1 + 4 | 0;
  $557($2_1 + 48 | 0, $1_1, HEAPF32[$0_1 + 456 >> 2], HEAPF32[$0_1 + 460 >> 2], HEAPF32[$0_1 + 464 >> 2]);
  $244($2_1, $1_1);
  $245($2_1 + 96 | 0, $2_1 + 48 | 0, $2_1);
  $3_1 = $2_1 + 104 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $0_1 + 332 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$2_1 + 100 >> 2];
  HEAP32[$0_1 + 324 >> 2] = HEAP32[$2_1 + 96 >> 2];
  HEAP32[$0_1 + 328 >> 2] = $1_1;
  $3_1 = HEAP32[$2_1 + 116 >> 2];
  $1_1 = $0_1 + 340 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 112 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  $3_1 = $2_1 + 120 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $0_1 + 348 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $3_1 = HEAP32[$2_1 + 132 >> 2];
  $1_1 = $0_1 + 356 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 128 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3_1;
  $1_1 = $2_1 + 136 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 364 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  global$0 = $2_1 + 144 | 0;
 }
 
 function $557($0_1, $1_1, $2_1, $3_1, $4_1) {
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAP32[$0_1 + 28 >> 2] = 0;
  HEAPF32[$0_1 + 32 >> 2] = HEAPF32[$1_1 + 32 >> 2] * $2_1;
  HEAPF32[$0_1 + 16 >> 2] = HEAPF32[$1_1 + 16 >> 2] * $2_1;
  HEAPF32[$0_1 + 8 >> 2] = HEAPF32[$1_1 + 8 >> 2] * $4_1;
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$1_1 + 4 >> 2] * $3_1;
  HEAPF32[$0_1 >> 2] = HEAPF32[$1_1 >> 2] * $2_1;
  HEAPF32[$0_1 + 40 >> 2] = HEAPF32[$1_1 + 40 >> 2] * $4_1;
  HEAPF32[$0_1 + 36 >> 2] = HEAPF32[$1_1 + 36 >> 2] * $3_1;
  HEAPF32[$0_1 + 24 >> 2] = HEAPF32[$1_1 + 24 >> 2] * $4_1;
  HEAPF32[$0_1 + 20 >> 2] = HEAPF32[$1_1 + 20 >> 2] * $3_1;
 }
 
 function $558($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 15844;
  $57($0_1 + 544 | 0);
  $56($0_1);
  return $0_1 | 0;
 }
 
 function $559($0_1) {
  $0_1 = $0_1 | 0;
  $54($558($0_1));
 }
 
 function $560($0_1) {
  $0_1 = $0_1 | 0;
  return 496;
 }
 
 function $561($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $63($0_1, $1_1, $2_1);
  $67($0_1 + 324 | 0, $1_1 + 264 | 0);
  $65($0_1 + 372 | 0, $1_1 + 312 | 0);
  $65($0_1 + 388 | 0, $1_1 + 328 | 0);
  HEAPF32[$1_1 + 456 >> 2] = HEAPF32[$0_1 + 404 >> 2];
  $65($0_1 + 604 | 0, $1_1 + 344 | 0);
  $65($0_1 + 408 | 0, $1_1 + 360 | 0);
  $65($0_1 + 424 | 0, $1_1 + 376 | 0);
  $65($0_1 + 440 | 0, $1_1 + 392 | 0);
  $65($0_1 + 456 | 0, $1_1 + 408 | 0);
  $65($0_1 + 472 | 0, $1_1 + 424 | 0);
  $65($0_1 + 488 | 0, $1_1 + 440 | 0);
  $2_1 = HEAP32[$0_1 + 508 >> 2];
  HEAP32[$1_1 + 460 >> 2] = HEAP32[$0_1 + 504 >> 2];
  HEAP32[$1_1 + 464 >> 2] = $2_1;
  HEAP32[$1_1 + 492 >> 2] = HEAPU8[$0_1 + 512 | 0];
  $2_1 = HEAP32[$0_1 + 520 >> 2];
  HEAP32[$1_1 + 468 >> 2] = HEAP32[$0_1 + 516 >> 2];
  HEAP32[$1_1 + 472 >> 2] = $2_1;
  $2_1 = HEAP32[$0_1 + 528 >> 2];
  HEAP32[$1_1 + 476 >> 2] = HEAP32[$0_1 + 524 >> 2];
  HEAP32[$1_1 + 480 >> 2] = $2_1;
  $2_1 = HEAP32[$0_1 + 536 >> 2];
  HEAP32[$1_1 + 484 >> 2] = HEAP32[$0_1 + 532 >> 2];
  HEAP32[$1_1 + 488 >> 2] = $2_1;
  return 15884;
 }
 
 function $562($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2_1 = ((((wasm2js_i32$1 = $1_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 16 >> 2]]($0_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
  (((((wasm2js_i32$3 = $1_1, wasm2js_i32$2 = $2_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1, HEAP32[$2_1 + 8 >> 2], $1_1) | 0), wasm2js_i32$4 = 1497645650), wasm2js_i32$5 = $0_1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
 }
 
 function $563($0_1, $1_1, $2_1) {
  $564($0_1 + 4 | 0, HEAPF32[$0_1 + 372 >> 2], HEAPF32[$0_1 + 376 >> 2], HEAPF32[$0_1 + 380 >> 2], $0_1 + 388 | 0, $1_1, $2_1);
 }
 
 function $564($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  $12_1 = HEAPF32[$0_1 + 52 >> 2];
  $8_1 = HEAPF32[$0_1 + 56 >> 2];
  $11_1 = HEAPF32[$0_1 + 48 >> 2];
  HEAP32[$6_1 + 60 >> 2] = 0;
  HEAPF32[$6_1 + 48 >> 2] = $11_1 + Math_fround($1_1 * $5_1);
  HEAPF32[$6_1 + 56 >> 2] = $8_1 + Math_fround($3_1 * $5_1);
  HEAPF32[$6_1 + 52 >> 2] = $12_1 + Math_fround($2_1 * $5_1);
  $9_1 = $7_1;
  $11_1 = HEAPF32[$4_1 >> 2];
  $1_1 = $11_1;
  $2_1 = Math_fround($1_1 * $1_1);
  $3_1 = HEAPF32[$4_1 + 4 >> 2];
  $1_1 = $3_1;
  $12_1 = Math_fround($2_1 + Math_fround($1_1 * $1_1));
  $2_1 = HEAPF32[$4_1 + 8 >> 2];
  $1_1 = $2_1;
  $1_1 = Math_fround($12_1 + Math_fround($1_1 * $1_1));
  $1_1 = $1_1 > Math_fround(1.1920928955078125e-07) ? Math_fround(Math_sqrt($1_1)) : Math_fround(0.0);
  $8_1 = Math_fround($1_1 * $5_1) > Math_fround(.7853981852531433) ? Math_fround(Math_fround(.7853981852531433) / $5_1) : $1_1;
  label$1 : {
   if ($8_1 < Math_fround(1.0000000474974513e-03)) {
    $1_1 = Math_fround(Math_fround($5_1 * Math_fround(.5)) + Math_fround($8_1 * Math_fround(Math_fround(Math_fround(Math_fround($5_1 * $5_1) * $5_1) * Math_fround(-.02083333395421505)) * $8_1)));
    break label$1;
   }
   $1_1 = Math_fround($50(Math_fround(Math_fround($8_1 * Math_fround(.5)) * $5_1)) / $8_1);
  }
  HEAPF32[$9_1 + 40 >> 2] = $1_1 * $2_1;
  HEAPF32[$7_1 + 36 >> 2] = $1_1 * $3_1;
  HEAPF32[$7_1 + 32 >> 2] = $1_1 * $11_1;
  (wasm2js_i32$0 = $7_1, wasm2js_f32$0 = $49(Math_fround(Math_fround($8_1 * $5_1) * Math_fround(.5)))), HEAPF32[wasm2js_i32$0 + 44 >> 2] = wasm2js_f32$0;
  $565($0_1, $7_1 + 16 | 0);
  $246($7_1, $7_1 + 32 | 0, $7_1 + 16 | 0);
  $1_1 = HEAPF32[$7_1 >> 2];
  $2_1 = Math_fround($1_1 * $1_1);
  $1_1 = HEAPF32[$7_1 + 4 >> 2];
  $2_1 = Math_fround($2_1 + Math_fround($1_1 * $1_1));
  $1_1 = HEAPF32[$7_1 + 8 >> 2];
  $2_1 = Math_fround($2_1 + Math_fround($1_1 * $1_1));
  $1_1 = HEAPF32[$7_1 + 12 >> 2];
  $1_1 = Math_fround($2_1 + Math_fround($1_1 * $1_1));
  if ($1_1 > Math_fround(1.1920928955078125e-07)) {
   $247($7_1);
   $1_1 = HEAPF32[$7_1 >> 2];
   $2_1 = Math_fround($1_1 * $1_1);
   $1_1 = HEAPF32[$7_1 + 4 >> 2];
   $2_1 = Math_fround($2_1 + Math_fround($1_1 * $1_1));
   $1_1 = HEAPF32[$7_1 + 8 >> 2];
   $2_1 = Math_fround($2_1 + Math_fround($1_1 * $1_1));
   $1_1 = HEAPF32[$7_1 + 12 >> 2];
   $1_1 = Math_fround($2_1 + Math_fround($1_1 * $1_1));
  }
  label$3 : {
   if ($1_1 > Math_fround(1.1920928955078125e-07)) {
    $371($6_1, $7_1);
    break label$3;
   }
   $4_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$6_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $4_1;
   $10_1 = $0_1 + 8 | 0;
   $4_1 = HEAP32[$10_1 + 4 >> 2];
   $9_1 = $6_1 + 8 | 0;
   HEAP32[$9_1 >> 2] = HEAP32[$10_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $4_1;
   $4_1 = HEAP32[$0_1 + 20 >> 2];
   HEAP32[$6_1 + 16 >> 2] = HEAP32[$0_1 + 16 >> 2];
   HEAP32[$6_1 + 20 >> 2] = $4_1;
   $10_1 = $0_1 + 24 | 0;
   $4_1 = HEAP32[$10_1 + 4 >> 2];
   $9_1 = $6_1 + 24 | 0;
   HEAP32[$9_1 >> 2] = HEAP32[$10_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $4_1;
   $4_1 = HEAP32[$0_1 + 36 >> 2];
   HEAP32[$6_1 + 32 >> 2] = HEAP32[$0_1 + 32 >> 2];
   HEAP32[$6_1 + 36 >> 2] = $4_1;
   $4_1 = $0_1 + 40 | 0;
   $0_1 = HEAP32[$4_1 + 4 >> 2];
   $6_1 = $6_1 + 40 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $0_1;
  }
  global$0 = $7_1 + 48 | 0;
 }
 
 function $565($0_1, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $3_1 = global$0 - 16 | 0;
  $2_1 = HEAPF32[$0_1 >> 2];
  $7_1 = HEAPF32[$0_1 + 20 >> 2];
  $8_1 = HEAPF32[$0_1 + 40 >> 2];
  $4_1 = Math_fround(Math_fround($2_1 + $7_1) + $8_1);
  label$1 : {
   if ($4_1 > Math_fround(0.0)) {
    $4_1 = Math_fround(Math_sqrt(Math_fround($4_1 + Math_fround(1.0))));
    $2_1 = Math_fround(Math_fround(.5) / $4_1);
    $7_1 = Math_fround($2_1 * Math_fround(HEAPF32[$0_1 + 16 >> 2] - HEAPF32[$0_1 + 4 >> 2]));
    $8_1 = Math_fround($2_1 * Math_fround(HEAPF32[$0_1 + 8 >> 2] - HEAPF32[$0_1 + 32 >> 2]));
    $4_1 = Math_fround($4_1 * Math_fround(.5));
    $2_1 = Math_fround($2_1 * Math_fround(HEAPF32[$0_1 + 36 >> 2] - HEAPF32[$0_1 + 24 >> 2]));
    break label$1;
   }
   $5_1 = $2_1 < $7_1 ? ($7_1 < $8_1 ? 2 : 1) : ($2_1 < $8_1) << 1;
   $9_1 = $5_1 << 2;
   $10_1 = ($5_1 << 4) + $0_1 | 0;
   $6_1 = ($5_1 + 1 >>> 0) % 3 | 0;
   $11_1 = ($6_1 << 4) + $0_1 | 0;
   $6_1 = $6_1 << 2;
   $12_1 = $0_1;
   $0_1 = ($5_1 + 2 >>> 0) % 3 | 0;
   $5_1 = $12_1 + ($0_1 << 4) | 0;
   $0_1 = $0_1 << 2;
   $2_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround(HEAPF32[$10_1 + $9_1 >> 2] - HEAPF32[$11_1 + $6_1 >> 2]) - HEAPF32[$5_1 + $0_1 >> 2]) + Math_fround(1.0))));
   HEAPF32[($9_1 | $3_1) >> 2] = $2_1 * Math_fround(.5);
   $2_1 = Math_fround(Math_fround(.5) / $2_1);
   HEAPF32[$3_1 + 12 >> 2] = Math_fround(HEAPF32[$5_1 + $6_1 >> 2] - HEAPF32[$0_1 + $11_1 >> 2]) * $2_1;
   HEAPF32[($3_1 | $6_1) >> 2] = $2_1 * Math_fround(HEAPF32[$9_1 + $11_1 >> 2] + HEAPF32[$6_1 + $10_1 >> 2]);
   HEAPF32[($0_1 | $3_1) >> 2] = $2_1 * Math_fround(HEAPF32[$5_1 + $9_1 >> 2] + HEAPF32[$0_1 + $10_1 >> 2]);
   $4_1 = HEAPF32[$3_1 + 12 >> 2];
   $7_1 = HEAPF32[$3_1 + 8 >> 2];
   $8_1 = HEAPF32[$3_1 + 4 >> 2];
   $2_1 = HEAPF32[$3_1 >> 2];
  }
  HEAPF32[$1_1 + 12 >> 2] = $4_1;
  HEAPF32[$1_1 + 8 >> 2] = $7_1;
  HEAPF32[$1_1 + 4 >> 2] = $8_1;
  HEAPF32[$1_1 >> 2] = $2_1;
 }
 
 function $566($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0);
  $6_1 = global$0 - 112 | 0;
  global$0 = $6_1;
  $5_1 = HEAPF32[$0_1 + 52 >> 2];
  $8_1 = HEAPF32[$1_1 + 52 >> 2];
  $9_1 = HEAPF32[$0_1 + 56 >> 2];
  $10_1 = HEAPF32[$1_1 + 56 >> 2];
  $11_1 = HEAPF32[$0_1 + 48 >> 2];
  $7_1 = HEAPF32[$1_1 + 48 >> 2];
  HEAP32[$3_1 + 12 >> 2] = 0;
  $16_1 = Math_fround(1.0);
  $7_1 = Math_fround($7_1 - $11_1);
  $11_1 = Math_fround(Math_fround(1.0) / $2_1);
  HEAPF32[$3_1 >> 2] = $7_1 * $11_1;
  HEAPF32[$3_1 + 8 >> 2] = $11_1 * Math_fround($10_1 - $9_1);
  HEAPF32[$3_1 + 4 >> 2] = $11_1 * Math_fround($8_1 - $5_1);
  HEAP32[$6_1 + 60 >> 2] = 0;
  HEAP32[$6_1 + 44 >> 2] = 0;
  $10_1 = HEAPF32[$0_1 + 20 >> 2];
  $7_1 = HEAPF32[$0_1 + 40 >> 2];
  $12_1 = HEAPF32[$0_1 + 24 >> 2];
  $13_1 = HEAPF32[$0_1 + 36 >> 2];
  $17_1 = Math_fround(Math_fround($10_1 * $7_1) - Math_fround($12_1 * $13_1));
  $5_1 = HEAPF32[$0_1 >> 2];
  $8_1 = HEAPF32[$0_1 + 4 >> 2];
  $14_1 = HEAPF32[$0_1 + 32 >> 2];
  $15_1 = HEAPF32[$0_1 + 16 >> 2];
  $18_1 = Math_fround(Math_fround($12_1 * $14_1) - Math_fround($7_1 * $15_1));
  $19_1 = Math_fround(Math_fround($13_1 * $15_1) - Math_fround($10_1 * $14_1));
  $9_1 = HEAPF32[$0_1 + 8 >> 2];
  $2_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_fround(Math_fround($17_1 * $5_1) + Math_fround($8_1 * $18_1)) + Math_fround($19_1 * $9_1)));
  HEAPF32[$6_1 + 56 >> 2] = $2_1 * Math_fround(Math_fround($10_1 * $5_1) - Math_fround($15_1 * $8_1));
  HEAPF32[$6_1 + 52 >> 2] = $2_1 * Math_fround(Math_fround($14_1 * $8_1) - Math_fround($13_1 * $5_1));
  HEAPF32[$6_1 + 40 >> 2] = $2_1 * Math_fround(Math_fround($15_1 * $9_1) - Math_fround($12_1 * $5_1));
  HEAPF32[$6_1 + 36 >> 2] = $2_1 * Math_fround(Math_fround($7_1 * $5_1) - Math_fround($14_1 * $9_1));
  HEAP32[$6_1 + 28 >> 2] = 0;
  HEAPF32[$6_1 + 48 >> 2] = $19_1 * $2_1;
  HEAPF32[$6_1 + 32 >> 2] = $18_1 * $2_1;
  HEAPF32[$6_1 + 24 >> 2] = Math_fround(Math_fround($12_1 * $8_1) - Math_fround($10_1 * $9_1)) * $2_1;
  HEAPF32[$6_1 + 20 >> 2] = Math_fround(Math_fround($13_1 * $9_1) - Math_fround($7_1 * $8_1)) * $2_1;
  HEAPF32[$6_1 + 16 >> 2] = $17_1 * $2_1;
  $245($6_1 - -64 | 0, $1_1, $6_1 + 16 | 0);
  $565($6_1 - -64 | 0, $6_1 + 16 | 0);
  $0_1 = $247($6_1 + 16 | 0);
  $2_1 = HEAPF32[$0_1 + 12 >> 2];
  HEAP32[$6_1 + 12 >> 2] = 0;
  $8_1 = HEAPF32[$0_1 + 8 >> 2];
  HEAPF32[$6_1 + 8 >> 2] = $8_1;
  $9_1 = HEAPF32[$0_1 + 4 >> 2];
  HEAPF32[$6_1 + 4 >> 2] = $9_1;
  $10_1 = HEAPF32[$0_1 >> 2];
  HEAPF32[$6_1 >> 2] = $10_1;
  $5_1 = Math_fround(Math_min(Math_fround(Math_max($2_1, Math_fround(-1.0))), Math_fround(1.0)));
  $1_1 = (wasm2js_scratch_store_f32($5_1), wasm2js_scratch_load_i32(2));
  $0_1 = $1_1 & 2147483647;
  label$1 : {
   if ($0_1 >>> 0 >= 1065353216) {
    $2_1 = ($1_1 | 0) < 0 ? Math_fround(3.141592502593994) : Math_fround(0.0);
    if (($0_1 | 0) == 1065353216) {
     break label$1
    }
    $2_1 = Math_fround(Math_fround(0.0) / Math_fround($5_1 - $5_1));
    break label$1;
   }
   label$3 : {
    if ($0_1 >>> 0 <= 1056964607) {
     $2_1 = Math_fround(1.570796251296997);
     if ($0_1 >>> 0 < 847249409) {
      break label$3
     }
     $2_1 = Math_fround($5_1 * $5_1);
     $2_1 = Math_fround(Math_fround(Math_fround(Math_fround(7.549789415861596e-08) - Math_fround(Math_fround(Math_fround($2_1 * Math_fround(Math_fround($2_1 * Math_fround(Math_fround($2_1 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593))) / Math_fround(Math_fround($2_1 * Math_fround(-.7066296339035034)) + Math_fround(1.0))) * $5_1)) - $5_1) + Math_fround(1.570796251296997));
     break label$1;
    }
    if (($1_1 | 0) <= -1) {
     $2_1 = Math_fround(Math_fround($5_1 + Math_fround(1.0)) * Math_fround(.5));
     $5_1 = Math_fround(Math_sqrt($2_1));
     $2_1 = Math_fround(Math_fround(1.570796251296997) - Math_fround($5_1 + Math_fround(Math_fround($5_1 * Math_fround(Math_fround($2_1 * Math_fround(Math_fround($2_1 * Math_fround(Math_fround($2_1 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593))) / Math_fround(Math_fround($2_1 * Math_fround(-.7066296339035034)) + Math_fround(1.0)))) + Math_fround(-7.549789415861596e-08))));
     $2_1 = Math_fround($2_1 + $2_1);
     break label$1;
    }
    $2_1 = Math_fround(Math_fround(Math_fround(1.0) - $5_1) * Math_fround(.5));
    $7_1 = Math_fround(Math_sqrt($2_1));
    $5_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($7_1), wasm2js_scratch_load_i32(2)) & -4096), wasm2js_scratch_load_f32());
    $2_1 = Math_fround(Math_fround(Math_fround($7_1 * Math_fround(Math_fround($2_1 * Math_fround(Math_fround($2_1 * Math_fround(Math_fround($2_1 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593))) / Math_fround(Math_fround($2_1 * Math_fround(-.7066296339035034)) + Math_fround(1.0)))) + Math_fround(Math_fround($2_1 - Math_fround($5_1 * $5_1)) / Math_fround($7_1 + $5_1))) + $5_1);
    $2_1 = Math_fround($2_1 + $2_1);
   }
  }
  $2_1 = Math_fround($2_1 + $2_1);
  $5_1 = Math_fround(0.0);
  $7_1 = Math_fround(0.0);
  $8_1 = Math_fround(Math_fround(Math_fround($10_1 * $10_1) + Math_fround($9_1 * $9_1)) + Math_fround($8_1 * $8_1));
  if (!($8_1 < Math_fround(1.4210854715202004e-14))) {
   $139($6_1, Math_fround(Math_sqrt($8_1)));
   $7_1 = HEAPF32[$6_1 + 4 >> 2];
   $16_1 = HEAPF32[$6_1 >> 2];
   $5_1 = HEAPF32[$6_1 + 8 >> 2];
  }
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAPF32[$4_1 + 8 >> 2] = $11_1 * Math_fround($2_1 * $5_1);
  HEAPF32[$4_1 + 4 >> 2] = $11_1 * Math_fround($2_1 * $7_1);
  HEAPF32[$4_1 >> 2] = Math_fround($16_1 * $2_1) * $11_1;
  global$0 = $6_1 + 112 | 0;
 }
 
 function $567($0_1, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $2_1 = HEAPF32[$0_1 + 404 >> 2];
  if ($2_1 != Math_fround(0.0)) {
   $4_1 = HEAPF32[$1_1 >> 2];
   $5_1 = HEAPF32[$1_1 + 4 >> 2];
   $6_1 = HEAPF32[$1_1 + 8 >> 2];
   HEAP32[$0_1 + 436 >> 2] = 0;
   $2_1 = Math_fround(Math_fround(1.0) / $2_1);
   HEAPF32[$0_1 + 432 >> 2] = $6_1 * $2_1;
   HEAPF32[$0_1 + 428 >> 2] = $2_1 * $5_1;
   HEAPF32[$0_1 + 424 >> 2] = $2_1 * $4_1;
  }
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 440 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 444 >> 2] = $3_1;
  $1_1 = $1_1 + 8 | 0;
  $3_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 448 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $3_1;
 }
 
 function $568($0_1) {
  if (!(HEAPU8[$0_1 + 204 | 0] & 3)) {
   $569($0_1, HEAPF32[$0_1 + 424 >> 2], HEAPF32[$0_1 + 428 >> 2], HEAPF32[$0_1 + 432 >> 2])
  }
 }
 
 function $569($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAPF32[$4_1 >> 2] = HEAPF32[$0_1 + 408 >> 2] * $1_1;
  HEAPF32[$4_1 + 8 >> 2] = HEAPF32[$0_1 + 416 >> 2] * $3_1;
  HEAPF32[$4_1 + 4 >> 2] = HEAPF32[$0_1 + 412 >> 2] * $2_1;
  $89($0_1 + 472 | 0, $4_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $570($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   if (HEAPU8[$0_1 + 204 | 0] & 2) {
    $2_1 = HEAP32[$0_1 + 8 >> 2];
    HEAP32[$0_1 + 68 >> 2] = HEAP32[$0_1 + 4 >> 2];
    HEAP32[$0_1 + 72 >> 2] = $2_1;
    $3_1 = $0_1 + 12 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0_1 + 76 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $3_1 = $0_1 + 20 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0_1 + 84 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $3_1 = $0_1 + 28 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0_1 + 92 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $3_1 = $0_1 + 36 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0_1 + 100 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $3_1 = $0_1 + 44 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0_1 + 108 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $3_1 = $0_1 + 52 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0_1 + 116 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    $3_1 = $0_1 + 60 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0_1 + 124 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    break label$1;
   }
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$0_1 + 68 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0_1 + 72 >> 2] = $2_1;
   $3_1 = $1_1 + 8 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0_1 + 76 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = $1_1 + 24 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0_1 + 92 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = HEAP32[$1_1 + 20 >> 2];
   $2_1 = $0_1 + 84 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $3_1;
   $3_1 = HEAP32[$1_1 + 36 >> 2];
   $2_1 = $0_1 + 100 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $3_1;
   $3_1 = $1_1 + 40 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0_1 + 108 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = $1_1 + 56 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0_1 + 124 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3_1 = HEAP32[$1_1 + 52 >> 2];
   $2_1 = $0_1 + 116 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $3_1;
  }
  $2_1 = HEAP32[$0_1 + 392 >> 2];
  HEAP32[$0_1 + 148 >> 2] = HEAP32[$0_1 + 388 >> 2];
  HEAP32[$0_1 + 152 >> 2] = $2_1;
  $2_1 = HEAP32[$0_1 + 376 >> 2];
  HEAP32[$0_1 + 132 >> 2] = HEAP32[$0_1 + 372 >> 2];
  HEAP32[$0_1 + 136 >> 2] = $2_1;
  $3_1 = $0_1 + 396 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0_1 + 156 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = $0_1 + 380 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0_1 + 140 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = $1_1 + 8 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0_1 + 12 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 8 >> 2] = $2_1;
  $3_1 = $1_1 + 24 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0_1 + 28 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = HEAP32[$1_1 + 20 >> 2];
  $2_1 = $0_1 + 20 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $3_1 = $1_1 + 40 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0_1 + 44 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = HEAP32[$1_1 + 36 >> 2];
  $2_1 = $0_1 + 36 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $3_1 = $1_1 + 56 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0_1 + 60 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = HEAP32[$1_1 + 52 >> 2];
  $2_1 = $0_1 + 52 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3_1;
  $556($0_1);
 }
 
 function $571($0_1, $1_1, $2_1, $3_1) {
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 + 8 >> 2] = $3_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $3_1) : Math_fround(0.0);
  HEAPF32[$0_1 + 4 >> 2] = $2_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $2_1) : Math_fround(0.0);
  HEAPF32[$0_1 >> 2] = $1_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $1_1) : Math_fround(0.0);
 }
 
 function $572($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  HEAP32[$0_1 + 12 >> 2] = 0;
  $5_1 = HEAPF32[$1_1 + 12 >> 2];
  $6_1 = HEAPF32[$1_1 >> 2];
  $7_1 = HEAPF32[$1_1 + 4 >> 2];
  $9_1 = Math_fround(Math_fround(Math_fround($5_1 * $4_1) + Math_fround($6_1 * $3_1)) - Math_fround($7_1 * $2_1));
  $8_1 = HEAPF32[$1_1 + 8 >> 2];
  $10_1 = Math_fround(Math_fround(Math_fround(Math_fround(-$6_1) * $2_1) - Math_fround($7_1 * $3_1)) - Math_fround($8_1 * $4_1));
  $11_1 = Math_fround(Math_fround(Math_fround($5_1 * $2_1) + Math_fround($7_1 * $4_1)) - Math_fround($8_1 * $3_1));
  $2_1 = Math_fround(Math_fround(Math_fround($8_1 * $2_1) + Math_fround($5_1 * $3_1)) - Math_fround($6_1 * $4_1));
  HEAPF32[$0_1 + 8 >> 2] = Math_fround(Math_fround(Math_fround($5_1 * $9_1) - Math_fround($8_1 * $10_1)) - Math_fround($7_1 * $11_1)) + Math_fround($6_1 * $2_1);
  HEAPF32[$0_1 + 4 >> 2] = Math_fround(Math_fround(Math_fround($5_1 * $2_1) - Math_fround($7_1 * $10_1)) - Math_fround($6_1 * $9_1)) + Math_fround($8_1 * $11_1);
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(Math_fround($11_1 * $5_1) - Math_fround($6_1 * $10_1)) - Math_fround($8_1 * $2_1)) + Math_fround($7_1 * $9_1);
 }
 
 function $573($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $8_1 = HEAPF32[$1_1 + 20 >> 2];
  $9_1 = HEAPF32[$1_1 + 40 >> 2];
  $10_1 = HEAPF32[$1_1 + 36 >> 2];
  $11_1 = HEAPF32[$1_1 + 24 >> 2];
  $5_1 = Math_fround(Math_fround($8_1 * $9_1) - Math_fround($10_1 * $11_1));
  $12_1 = HEAPF32[$1_1 + 8 >> 2];
  $13_1 = HEAPF32[$1_1 + 4 >> 2];
  $6_1 = Math_fround(Math_fround($10_1 * $12_1) - Math_fround($13_1 * $9_1));
  $14_1 = HEAPF32[$1_1 + 32 >> 2];
  $7_1 = Math_fround(Math_fround($13_1 * $11_1) - Math_fround($8_1 * $12_1));
  $15_1 = HEAPF32[$1_1 >> 2];
  $16_1 = HEAPF32[$1_1 + 16 >> 2];
  $4_1 = Math_fround(Math_fround($14_1 * $7_1) + Math_fround(Math_fround($15_1 * $5_1) + Math_fround($16_1 * $6_1)));
  $4_1 = Math_fround(Math_abs($4_1)) > Math_fround(1.1920928955078125e-07) ? Math_fround(Math_fround(1.0) / $4_1) : $4_1;
  $18_1 = $5_1;
  $5_1 = HEAPF32[$2_1 >> 2];
  $19_1 = $6_1;
  $1_1 = $2_1 + 4 | 0;
  $6_1 = HEAPF32[$1_1 >> 2];
  $20_1 = $7_1;
  $17_1 = $2_1 + 8 | 0;
  $7_1 = HEAPF32[$17_1 >> 2];
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $5_1) + Math_fround($19_1 * $6_1)) + Math_fround($20_1 * $7_1)) * $4_1;
  $129($3_1, $5_1, $6_1, $7_1, $12_1, $11_1, $9_1);
  HEAPF32[$0_1 + 4 >> 2] = $4_1 * Math_fround(Math_fround(Math_fround($15_1 * HEAPF32[$3_1 >> 2]) + Math_fround($16_1 * HEAPF32[$3_1 + 4 >> 2])) + Math_fround($14_1 * HEAPF32[$3_1 + 8 >> 2]));
  $129($3_1, $13_1, $8_1, $10_1, HEAPF32[$2_1 >> 2], HEAPF32[$1_1 >> 2], HEAPF32[$17_1 >> 2]);
  HEAPF32[$0_1 + 8 >> 2] = $4_1 * Math_fround(Math_fround(Math_fround($15_1 * HEAPF32[$3_1 >> 2]) + Math_fround($16_1 * HEAPF32[$3_1 + 4 >> 2])) + Math_fround($14_1 * HEAPF32[$3_1 + 8 >> 2]));
  global$0 = $3_1 + 16 | 0;
 }
 
 function $574($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $1_1;
  $2_1 = $0_1 + 544 | 0;
  label$1 : {
   if (($575($2_1, $1_1) | 0) != HEAP32[$0_1 + 548 >> 2]) {
    break label$1
   }
   $375($2_1, $3_1 + 12 | 0);
   $2_1 = HEAP32[$1_1 + 32 >> 2];
   $4_1 = $0_1;
   $0_1 = HEAP32[$1_1 + 28 >> 2];
   if (($4_1 | 0) == ($0_1 | 0)) {
    $576($0_1, $2_1, 1);
    break label$1;
   }
   $576($2_1, $0_1, 1);
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $575($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  $5_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
  while (1) {
   label$2 : {
    if (($3_1 | 0) != ($5_1 | 0)) {
     if (HEAP32[HEAP32[$0_1 + 12 >> 2] + $4_1 >> 2] != ($1_1 | 0)) {
      break label$2
     }
     $0_1 = $3_1;
    } else {
     $0_1 = $2_1
    }
    return $0_1;
   }
   $4_1 = $4_1 + 4 | 0;
   $3_1 = $3_1 + 1 | 0;
   continue;
  };
 }
 
 function $576($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $1_1;
  label$1 : {
   if ($2_1) {
    $577($0_1 + 284 | 0, $3_1 + 12 | 0);
    $2_1 = HEAP32[$0_1 + 288 >> 2];
    break label$1;
   }
   $5_1 = $0_1 + 288 | 0;
   $2_1 = HEAP32[$5_1 >> 2];
   $6_1 = $0_1 + 296 | 0;
   $4_1 = HEAP32[$6_1 >> 2];
   $1_1 = $61($2_1, $4_1, $1_1);
   if (($1_1 | 0) >= ($2_1 | 0)) {
    break label$1
   }
   $1_1 = ($1_1 << 2) + $4_1 | 0;
   $7_1 = HEAP32[$1_1 >> 2];
   $8_1 = $1_1;
   $2_1 = $2_1 - 1 | 0;
   $1_1 = $2_1 << 2;
   HEAP32[$8_1 >> 2] = HEAP32[$1_1 + $4_1 >> 2];
   HEAP32[$5_1 >> 2] = $2_1;
   HEAP32[$1_1 + HEAP32[$6_1 >> 2] >> 2] = $7_1;
  }
  HEAP32[$0_1 + 280 >> 2] = ($2_1 | 0) > 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $577($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  label$1 : {
   if (($2_1 | 0) != HEAP32[$0_1 + 8 >> 2]) {
    break label$1
   }
   $3_1 = $2_1 ? $2_1 << 1 : 1;
   if (($3_1 | 0) <= ($2_1 | 0)) {
    break label$1
   }
   if ($3_1) {
    $5_1 = $53($3_1 << 2);
    $2_1 = HEAP32[$0_1 + 4 >> 2];
   }
   $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   while (1) {
    if ($2_1) {
     HEAP32[$4_1 + $5_1 >> 2] = HEAP32[HEAP32[$0_1 + 12 >> 2] + $4_1 >> 2];
     $2_1 = $2_1 - 1 | 0;
     $4_1 = $4_1 + 4 | 0;
     continue;
    }
    break;
   };
   $96($0_1);
   HEAP32[$0_1 + 12 >> 2] = $5_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $3_1;
   $2_1 = HEAP32[$0_1 + 4 >> 2];
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1 + 1;
  HEAP32[HEAP32[$0_1 + 12 >> 2] + ($2_1 << 2) >> 2] = HEAP32[$1_1 >> 2];
 }
 
 function $578($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1 + 544 | 0;
  if (($575($2_1, $1_1) | 0) < HEAP32[$0_1 + 548 >> 2]) {
   $579($2_1, $1_1);
   $2_1 = HEAP32[$1_1 + 32 >> 2];
   $3_1 = $0_1;
   $0_1 = HEAP32[$1_1 + 28 >> 2];
   if (($3_1 | 0) == ($0_1 | 0)) {
    $576($0_1, $2_1, 0);
    return;
   }
   $576($2_1, $0_1, 0);
  }
 }
 
 function $579($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  $1_1 = $575($0_1, $1_1);
  if (($2_1 | 0) > ($1_1 | 0)) {
   $3_1 = HEAP32[$0_1 + 12 >> 2];
   $1_1 = $3_1 + ($1_1 << 2) | 0;
   $4_1 = HEAP32[$1_1 >> 2];
   $5_1 = $1_1;
   $1_1 = $2_1 - 1 | 0;
   $2_1 = $1_1 << 2;
   HEAP32[$5_1 >> 2] = HEAP32[$2_1 + $3_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $1_1;
   HEAP32[$2_1 + HEAP32[$0_1 + 12 >> 2] >> 2] = $4_1;
  }
 }
 
 function $580($0_1) {
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 15928;
  HEAP8[$0_1 + 20 | 0] = 1;
  HEAP32[$0_1 + 16 >> 2] = 0;
  HEAP8[$0_1 + 40 | 0] = 1;
  $1_1 = $0_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 36 >> 2] = 0;
  HEAP8[$0_1 + 60 | 0] = 1;
  $1_1 = $0_1 + 28 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 56 >> 2] = 0;
  HEAP8[$0_1 + 80 | 0] = 1;
  $1_1 = $0_1 + 48 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 76 >> 2] = 0;
  HEAP8[$0_1 + 100 | 0] = 1;
  $1_1 = $0_1 + 68 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 96 >> 2] = 0;
  HEAP8[$0_1 + 120 | 0] = 1;
  $1_1 = $0_1 + 88 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 116 >> 2] = 0;
  HEAP8[$0_1 + 140 | 0] = 1;
  $1_1 = $0_1 + 108 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 136 >> 2] = 0;
  $1_1 = $0_1 + 128 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0_1 + 160 | 0] = 1;
  HEAP32[$0_1 + 156 >> 2] = 0;
  $1_1 = $0_1 + 148 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0_1 + 180 | 0] = 1;
  HEAP32[$0_1 + 176 >> 2] = 0;
  $1_1 = $0_1 + 168 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0_1 + 208 | 0] = 1;
  HEAP32[$0_1 + 232 >> 2] = 0;
  HEAP32[$0_1 + 204 >> 2] = 0;
  $1_1 = $0_1 + 196 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 224 >> 2] = 0;
  HEAP32[$0_1 + 212 >> 2] = 24;
  HEAP32[$0_1 + 216 >> 2] = 25;
  HEAP32[$0_1 + 220 >> 2] = 26;
 }
 
 function $581($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0);
  $6_1 = HEAPF32[$2_1 + 100 >> 2];
  $7_1 = HEAPF32[$2_1 + 16 >> 2];
  $8_1 = HEAPF32[$2_1 + 20 >> 2];
  $9_1 = HEAPF32[$2_1 + 24 >> 2];
  $3_1 = HEAPF32[$2_1 + 108 >> 2];
  $5_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 + 112 >> 2] - Math_fround($6_1 * HEAPF32[$2_1 + 116 >> 2])) - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($7_1 * HEAPF32[$0_1 - -64 >> 2]) + Math_fround($8_1 * HEAPF32[$0_1 + 68 >> 2])) + Math_fround($9_1 * HEAPF32[$0_1 + 72 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 >> 2] * HEAPF32[$0_1 + 80 >> 2]) + Math_fround(HEAPF32[$2_1 + 4 >> 2] * HEAPF32[$0_1 + 84 >> 2])) + Math_fround(HEAPF32[$2_1 + 8 >> 2] * HEAPF32[$0_1 + 88 >> 2]))) * $3_1)) - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 + 48 >> 2] * HEAPF32[$1_1 - -64 >> 2]) + Math_fround(HEAPF32[$2_1 + 52 >> 2] * HEAPF32[$1_1 + 68 >> 2])) + Math_fround(HEAPF32[$2_1 + 56 >> 2] * HEAPF32[$1_1 + 72 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 + 32 >> 2] * HEAPF32[$1_1 + 80 >> 2]) + Math_fround(HEAPF32[$2_1 + 36 >> 2] * HEAPF32[$1_1 + 84 >> 2])) + Math_fround(HEAPF32[$2_1 + 40 >> 2] * HEAPF32[$1_1 + 88 >> 2]))) * $3_1));
  $3_1 = Math_fround($6_1 + $5_1);
  $4_1 = HEAPF32[$2_1 + 120 >> 2];
  label$1 : {
   if ($3_1 < $4_1) {
    $5_1 = Math_fround($4_1 - $6_1);
    $3_1 = $4_1;
    break label$1;
   }
   $4_1 = HEAPF32[$2_1 + 124 >> 2];
   if (!($4_1 < $3_1)) {
    break label$1
   }
   $5_1 = Math_fround($4_1 - $6_1);
   $3_1 = $4_1;
  }
  HEAPF32[$2_1 + 100 >> 2] = $3_1;
  $584($0_1, Math_fround($7_1 * HEAPF32[$0_1 + 128 >> 2]), Math_fround($8_1 * HEAPF32[$0_1 + 132 >> 2]), Math_fround($9_1 * HEAPF32[$0_1 + 136 >> 2]), $2_1 - -64 | 0, $5_1);
  $584($1_1, Math_fround(HEAPF32[$2_1 + 48 >> 2] * HEAPF32[$1_1 + 128 >> 2]), Math_fround(HEAPF32[$2_1 + 52 >> 2] * HEAPF32[$1_1 + 132 >> 2]), Math_fround(HEAPF32[$2_1 + 56 >> 2] * HEAPF32[$1_1 + 136 >> 2]), $2_1 + 80 | 0, $5_1);
  return Math_fround($5_1);
 }
 
 function $582($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13_1 = 0;
  $3_1 = HEAPF32[$2_1 + 100 >> 2];
  $6_1 = HEAPF32[$2_1 + 16 >> 2];
  $7_1 = HEAPF32[$2_1 + 20 >> 2];
  $8_1 = HEAPF32[$2_1 + 24 >> 2];
  $4_1 = HEAPF32[$2_1 + 108 >> 2];
  $9_1 = $2_1 + 48 | 0;
  $10_1 = $2_1 + 52 | 0;
  $11_1 = $2_1 + 56 | 0;
  $4_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 + 112 >> 2] - Math_fround($3_1 * HEAPF32[$2_1 + 116 >> 2])) - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($6_1 * HEAPF32[$0_1 - -64 >> 2]) + Math_fround($7_1 * HEAPF32[$0_1 + 68 >> 2])) + Math_fround($8_1 * HEAPF32[$0_1 + 72 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 >> 2] * HEAPF32[$0_1 + 80 >> 2]) + Math_fround(HEAPF32[$2_1 + 4 >> 2] * HEAPF32[$0_1 + 84 >> 2])) + Math_fround(HEAPF32[$2_1 + 8 >> 2] * HEAPF32[$0_1 + 88 >> 2]))) * $4_1)) - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$9_1 >> 2] * HEAPF32[$1_1 - -64 >> 2]) + Math_fround(HEAPF32[$10_1 >> 2] * HEAPF32[$1_1 + 68 >> 2])) + Math_fround(HEAPF32[$11_1 >> 2] * HEAPF32[$1_1 + 72 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 + 32 >> 2] * HEAPF32[$1_1 + 80 >> 2]) + Math_fround(HEAPF32[$2_1 + 36 >> 2] * HEAPF32[$1_1 + 84 >> 2])) + Math_fround(HEAPF32[$2_1 + 40 >> 2] * HEAPF32[$1_1 + 88 >> 2]))) * $4_1));
  $12_1 = Math_fround($3_1 + $4_1);
  $5_1 = HEAPF32[$2_1 + 120 >> 2];
  $13_1 = $12_1 < $5_1;
  HEAPF32[$2_1 + 100 >> 2] = $13_1 ? $5_1 : $12_1;
  $3_1 = $13_1 ? Math_fround($5_1 - $3_1) : $4_1;
  $584($0_1, Math_fround($6_1 * HEAPF32[$0_1 + 128 >> 2]), Math_fround($7_1 * HEAPF32[$0_1 + 132 >> 2]), Math_fround($8_1 * HEAPF32[$0_1 + 136 >> 2]), $2_1 - -64 | 0, $3_1);
  $584($1_1, Math_fround(HEAPF32[$9_1 >> 2] * HEAPF32[$1_1 + 128 >> 2]), Math_fround(HEAPF32[$10_1 >> 2] * HEAPF32[$1_1 + 132 >> 2]), Math_fround(HEAPF32[$11_1 >> 2] * HEAPF32[$1_1 + 136 >> 2]), $2_1 + 80 | 0, $3_1);
  return Math_fround($3_1);
 }
 
 function $583($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13_1 = 0;
  $3_1 = HEAPF32[$2_1 + 128 >> 2];
  if ($3_1 != Math_fround(0.0)) {
   HEAP32[5182] = HEAP32[5182] + 1;
   $4_1 = HEAPF32[$2_1 + 96 >> 2];
   $5_1 = Math_fround($3_1 - Math_fround($4_1 * HEAPF32[$2_1 + 116 >> 2]));
   $6_1 = HEAPF32[$2_1 + 16 >> 2];
   $7_1 = HEAPF32[$2_1 + 20 >> 2];
   $8_1 = HEAPF32[$2_1 + 24 >> 2];
   $3_1 = HEAPF32[$2_1 + 108 >> 2];
   $9_1 = $2_1 + 48 | 0;
   $10_1 = $2_1 + 52 | 0;
   $11_1 = $2_1 + 56 | 0;
   $3_1 = Math_fround(Math_fround($5_1 - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($6_1 * HEAPF32[$0_1 + 144 >> 2]) + Math_fround($7_1 * HEAPF32[$0_1 + 148 >> 2])) + Math_fround($8_1 * HEAPF32[$0_1 + 152 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 >> 2] * HEAPF32[$0_1 + 160 >> 2]) + Math_fround(HEAPF32[$2_1 + 4 >> 2] * HEAPF32[$0_1 + 164 >> 2])) + Math_fround(HEAPF32[$2_1 + 8 >> 2] * HEAPF32[$0_1 + 168 >> 2]))) * $3_1)) - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$9_1 >> 2] * HEAPF32[$1_1 + 144 >> 2]) + Math_fround(HEAPF32[$10_1 >> 2] * HEAPF32[$1_1 + 148 >> 2])) + Math_fround(HEAPF32[$11_1 >> 2] * HEAPF32[$1_1 + 152 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 + 32 >> 2] * HEAPF32[$1_1 + 160 >> 2]) + Math_fround(HEAPF32[$2_1 + 36 >> 2] * HEAPF32[$1_1 + 164 >> 2])) + Math_fround(HEAPF32[$2_1 + 40 >> 2] * HEAPF32[$1_1 + 168 >> 2]))) * $3_1));
   $12_1 = Math_fround($4_1 + $3_1);
   $5_1 = HEAPF32[$2_1 + 120 >> 2];
   $13_1 = $12_1 < $5_1;
   HEAPF32[$2_1 + 96 >> 2] = $13_1 ? $5_1 : $12_1;
   $4_1 = $13_1 ? Math_fround($5_1 - $4_1) : $3_1;
   $585($0_1, Math_fround($6_1 * HEAPF32[$0_1 + 128 >> 2]), Math_fround($7_1 * HEAPF32[$0_1 + 132 >> 2]), Math_fround($8_1 * HEAPF32[$0_1 + 136 >> 2]), $2_1 - -64 | 0, $4_1);
   $585($1_1, Math_fround(HEAPF32[$9_1 >> 2] * HEAPF32[$1_1 + 128 >> 2]), Math_fround(HEAPF32[$10_1 >> 2] * HEAPF32[$1_1 + 132 >> 2]), Math_fround(HEAPF32[$11_1 >> 2] * HEAPF32[$1_1 + 136 >> 2]), $2_1 + 80 | 0, $4_1);
  }
  return Math_fround($4_1);
 }
 
 function $584($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  if (HEAP32[$0_1 + 240 >> 2]) {
   HEAP32[$6_1 + 12 >> 2] = 0;
   HEAPF32[$6_1 >> 2] = Math_fround($1_1 * $5_1) * HEAPF32[$0_1 + 112 >> 2];
   HEAPF32[$6_1 + 8 >> 2] = Math_fround($3_1 * $5_1) * HEAPF32[$0_1 + 120 >> 2];
   HEAPF32[$6_1 + 4 >> 2] = Math_fround($2_1 * $5_1) * HEAPF32[$0_1 + 116 >> 2];
   $89($0_1 - -64 | 0, $6_1);
   HEAP32[$6_1 + 12 >> 2] = 0;
   HEAPF32[$6_1 + 8 >> 2] = Math_fround(HEAPF32[$0_1 + 104 >> 2] * $5_1) * HEAPF32[$4_1 + 8 >> 2];
   HEAPF32[$6_1 + 4 >> 2] = Math_fround(HEAPF32[$0_1 + 100 >> 2] * $5_1) * HEAPF32[$4_1 + 4 >> 2];
   HEAPF32[$6_1 >> 2] = Math_fround(HEAPF32[$0_1 + 96 >> 2] * $5_1) * HEAPF32[$4_1 >> 2];
   $89($0_1 + 80 | 0, $6_1);
  }
  global$0 = $6_1 + 16 | 0;
 }
 
 function $585($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  if (HEAP32[$0_1 + 240 >> 2]) {
   HEAP32[$6_1 + 12 >> 2] = 0;
   HEAPF32[$6_1 >> 2] = Math_fround($1_1 * $5_1) * HEAPF32[$0_1 + 112 >> 2];
   HEAPF32[$6_1 + 8 >> 2] = Math_fround($3_1 * $5_1) * HEAPF32[$0_1 + 120 >> 2];
   HEAPF32[$6_1 + 4 >> 2] = Math_fround($2_1 * $5_1) * HEAPF32[$0_1 + 116 >> 2];
   $89($0_1 + 144 | 0, $6_1);
   HEAP32[$6_1 + 12 >> 2] = 0;
   HEAPF32[$6_1 + 8 >> 2] = Math_fround(HEAPF32[$0_1 + 104 >> 2] * $5_1) * HEAPF32[$4_1 + 8 >> 2];
   HEAPF32[$6_1 + 4 >> 2] = Math_fround(HEAPF32[$0_1 + 100 >> 2] * $5_1) * HEAPF32[$4_1 + 4 >> 2];
   HEAPF32[$6_1 >> 2] = Math_fround(HEAPF32[$0_1 + 96 >> 2] * $5_1) * HEAPF32[$4_1 >> 2];
   $89($0_1 + 160 | 0, $6_1);
  }
  global$0 = $6_1 + 16 | 0;
 }
 
 function $586($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 15928;
  $57($0_1 + 192 | 0);
  $96($0_1 + 164 | 0);
  HEAP32[$0_1 + 176 >> 2] = 0;
  HEAP8[$0_1 + 180 | 0] = 1;
  $1_1 = $0_1 + 168 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $57($0_1 + 144 | 0);
  $57($0_1 + 124 | 0);
  $57($0_1 + 104 | 0);
  $57($0_1 + 84 | 0);
  $57($0_1 - -64 | 0);
  $57($0_1 + 44 | 0);
  $57($0_1 + 24 | 0);
  $96($0_1 + 4 | 0);
  HEAP32[$0_1 + 16 >> 2] = 0;
  HEAP8[$0_1 + 20 | 0] = 1;
  $1_1 = $0_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $587($0_1) {
  $0_1 = $0_1 | 0;
  $54($586($0_1));
 }
 
 function $588($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 44 >> 2]]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1));
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1));
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 36 >> 2]]($0_1, $1_1, $2_1, $7_1));
  return Math_fround(Math_fround(0.0));
 }
 
 function $589($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 + 232 >> 2] = 0;
 }
 
 function $590($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = 0, $26_1 = Math_fround(0), $27_1 = 0, $28_1 = 0, $29_1 = Math_fround(0), $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = Math_fround(0), $34_1 = 0, $35_1 = Math_fround(0), $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = 0, $43_1 = Math_fround(0), $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = Math_fround(0), $51_1 = Math_fround(0), $52_1 = Math_fround(0), $53_1 = Math_fround(0), $54_1 = Math_fround(0), $55_1 = 0, $56_1 = 0, $57_1 = Math_fround(0), $58_1 = Math_fround(0), $59_1 = Math_fround(0), $60_1 = Math_fround(0), $61_1 = Math_fround(0), $62_1 = Math_fround(0), $63_1 = Math_fround(0), $64_1 = Math_fround(0);
  $4_1 = global$0 - 112 | 0;
  global$0 = $4_1;
  $55_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
  $56_1 = $0_1 + 24 | 0;
  while (1) {
   if (($46_1 | 0) != ($55_1 | 0)) {
    $42_1 = HEAP32[($46_1 << 2) + $1_1 >> 2];
    $30_1 = HEAP32[$42_1 + 840 >> 2];
    $31_1 = HEAP32[$42_1 + 836 >> 2];
    $27_1 = $591($0_1, $31_1, HEAPF32[$3_1 + 12 >> 2]);
    $28_1 = $591($0_1, $30_1, HEAPF32[$3_1 + 12 >> 2]);
    $47_1 = Math_imul($28_1, 244);
    $2_1 = HEAP32[$0_1 + 16 >> 2];
    $44_1 = $47_1 + $2_1 | 0;
    label$3 : {
     $48_1 = Math_imul($27_1, 244);
     $45_1 = $2_1 + $48_1 | 0;
     $5_1 = HEAPF32[$45_1 + 128 >> 2];
     $9_1 = Math_fround($5_1 * $5_1);
     $5_1 = HEAPF32[$45_1 + 132 >> 2];
     $9_1 = Math_fround($9_1 + Math_fround($5_1 * $5_1));
     $5_1 = HEAPF32[$45_1 + 136 >> 2];
     if (Math_fround($9_1 + Math_fround($5_1 * $5_1)) < Math_fround(1.4210854715202004e-14)) {
      $5_1 = HEAPF32[$44_1 + 128 >> 2];
      $9_1 = Math_fround($5_1 * $5_1);
      $5_1 = HEAPF32[$44_1 + 132 >> 2];
      $9_1 = Math_fround($9_1 + Math_fround($5_1 * $5_1));
      $5_1 = HEAPF32[$44_1 + 136 >> 2];
      if (Math_fround($9_1 + Math_fround($5_1 * $5_1)) < Math_fround(1.4210854715202004e-14)) {
       break label$3
      }
     }
     $7_1 = $42_1 + 96 | 0;
     $49_1 = 0;
     while (1) {
      if (HEAP32[$42_1 + 844 >> 2] <= ($49_1 | 0)) {
       break label$3
      }
      $32_1 = $7_1 - 12 | 0;
      label$6 : {
       if (!(HEAPF32[$32_1 >> 2] <= HEAPF32[$42_1 + 852 >> 2])) {
        break label$6
       }
       $34_1 = HEAP32[$0_1 + 28 >> 2];
       $2_1 = $592($56_1);
       $38_1 = $7_1 - 92 | 0;
       HEAP32[$2_1 + 132 >> 2] = $38_1;
       HEAP32[$2_1 + 148 >> 2] = $28_1;
       HEAP32[$2_1 + 144 >> 2] = $27_1;
       HEAP32[$4_1 + 60 >> 2] = 0;
       $23_1 = Math_fround(HEAPF32[$7_1 - 36 >> 2] - HEAPF32[$31_1 + 60 >> 2]);
       HEAPF32[$4_1 + 56 >> 2] = $23_1;
       $24_1 = Math_fround(HEAPF32[$7_1 - 40 >> 2] - HEAPF32[$31_1 + 56 >> 2]);
       HEAPF32[$4_1 + 52 >> 2] = $24_1;
       $17_1 = Math_fround(HEAPF32[$7_1 - 44 >> 2] - HEAPF32[$31_1 + 52 >> 2]);
       HEAPF32[$4_1 + 48 >> 2] = $17_1;
       $18_1 = HEAPF32[$7_1 - 60 >> 2];
       $13_1 = HEAPF32[$7_1 - 56 >> 2];
       $12_1 = HEAPF32[$7_1 - 52 >> 2];
       $10_1 = HEAPF32[$30_1 + 52 >> 2];
       $9_1 = HEAPF32[$30_1 + 56 >> 2];
       $5_1 = HEAPF32[$30_1 + 60 >> 2];
       HEAP32[$4_1 + 44 >> 2] = 0;
       $40_1 = Math_fround($12_1 - $5_1);
       HEAPF32[$4_1 + 40 >> 2] = $40_1;
       $41_1 = Math_fround($13_1 - $9_1);
       HEAPF32[$4_1 + 36 >> 2] = $41_1;
       $35_1 = Math_fround($18_1 - $10_1);
       HEAPF32[$4_1 + 32 >> 2] = $35_1;
       $593($45_1, $17_1, $24_1, $23_1, $4_1 + 16 | 0);
       $593($44_1, $35_1, $41_1, $40_1, $4_1);
       $36_1 = $7_1 - 24 | 0;
       $52_1 = HEAPF32[$36_1 >> 2];
       $19_1 = $7_1 - 28 | 0;
       $53_1 = HEAPF32[$19_1 >> 2];
       $37_1 = $7_1 - 20 | 0;
       $54_1 = HEAPF32[$37_1 >> 2];
       $10_1 = HEAPF32[$3_1 + 12 >> 2];
       $6_1 = HEAP32[$0_1 + 16 >> 2];
       $15_1 = $6_1 + $47_1 | 0;
       $16_1 = $6_1 + $48_1 | 0;
       $20_1 = HEAP32[$16_1 + 240 >> 2];
       $50_1 = HEAPF32[$3_1 + 36 >> 2];
       $33_1 = HEAPF32[$3_1 + 40 >> 2];
       $25 = $7_1 + 36 | 0;
       $6_1 = HEAP32[$25 >> 2];
       label$7 : {
        if ($6_1 & 6) {
         $33_1 = $6_1 & 2 ? HEAPF32[$7_1 + 60 >> 2] : $33_1;
         if (!($6_1 & 4)) {
          break label$7
         }
         $50_1 = HEAPF32[$7_1 - -64 >> 2];
         break label$7;
        }
        if (!($6_1 & 8)) {
         break label$7
        }
        $5_1 = Math_fround($10_1 * HEAPF32[$7_1 + 60 >> 2]);
        $9_1 = Math_fround(Math_max(Math_fround($5_1 + HEAPF32[$7_1 - -64 >> 2]), Math_fround(1.1920928955078125e-07)));
        $50_1 = Math_fround($5_1 / $9_1);
        $33_1 = Math_fround(Math_fround(1.0) / $9_1);
       }
       $57_1 = HEAPF32[$4_1 + 4 >> 2];
       $58_1 = HEAPF32[$4_1 + 20 >> 2];
       $59_1 = HEAPF32[$4_1 >> 2];
       $60_1 = HEAPF32[$4_1 + 16 >> 2];
       $61_1 = HEAPF32[$4_1 + 8 >> 2];
       $62_1 = HEAPF32[$4_1 + 24 >> 2];
       $21_1 = HEAP32[$15_1 + 240 >> 2];
       $9_1 = HEAPF32[$3_1 + 28 >> 2];
       $129($4_1 + 96 | 0, $17_1, $24_1, $23_1, $53_1, $52_1, $54_1);
       $43_1 = Math_fround(0.0);
       $39_1 = Math_fround(0.0);
       $14_1 = Math_fround(0.0);
       $29_1 = Math_fround(0.0);
       if ($20_1) {
        $351($4_1 + 80 | 0, $20_1 + 324 | 0, HEAPF32[$4_1 + 96 >> 2], HEAPF32[$4_1 + 100 >> 2], HEAPF32[$4_1 + 104 >> 2]);
        $29_1 = Math_fround(HEAPF32[$4_1 + 88 >> 2] * HEAPF32[$20_1 + 612 >> 2]);
        $14_1 = Math_fround(HEAPF32[$4_1 + 84 >> 2] * HEAPF32[$20_1 + 608 >> 2]);
        $39_1 = Math_fround(HEAPF32[$4_1 + 80 >> 2] * HEAPF32[$20_1 + 604 >> 2]);
       }
       HEAP32[$2_1 + 76 >> 2] = 0;
       $8_1 = $2_1 + 72 | 0;
       HEAPF32[$8_1 >> 2] = $29_1;
       $6_1 = $2_1 + 68 | 0;
       HEAPF32[$6_1 >> 2] = $14_1;
       $22_1 = $2_1 - -64 | 0;
       HEAPF32[$22_1 >> 2] = $39_1;
       $129($4_1 + 80 | 0, $35_1, $41_1, $40_1, HEAPF32[$19_1 >> 2], HEAPF32[$36_1 >> 2], HEAPF32[$37_1 >> 2]);
       $14_1 = Math_fround(0.0);
       $29_1 = Math_fround(0.0);
       $11_1 = $2_1;
       if ($21_1) {
        $351($4_1 - -64 | 0, $21_1 + 324 | 0, Math_fround(-HEAPF32[$4_1 + 80 >> 2]), Math_fround(-HEAPF32[$4_1 + 84 >> 2]), Math_fround(-HEAPF32[$4_1 + 88 >> 2]));
        $29_1 = Math_fround(HEAPF32[$4_1 + 72 >> 2] * HEAPF32[$21_1 + 612 >> 2]);
        $14_1 = Math_fround(HEAPF32[$4_1 + 68 >> 2] * HEAPF32[$21_1 + 608 >> 2]);
        $5_1 = Math_fround(HEAPF32[$4_1 + 64 >> 2] * HEAPF32[$21_1 + 604 >> 2]);
       } else {
        $5_1 = Math_fround(0.0)
       }
       HEAPF32[$11_1 + 80 >> 2] = $5_1;
       HEAP32[$2_1 + 92 >> 2] = 0;
       HEAPF32[$2_1 + 88 >> 2] = $29_1;
       HEAPF32[$2_1 + 84 >> 2] = $14_1;
       $11_1 = $2_1;
       $14_1 = $9_1;
       $51_1 = Math_fround(Math_fround(1.0) / $10_1);
       $26_1 = Math_fround($51_1 * $33_1);
       $18_1 = $26_1;
       if ($20_1) {
        $129($4_1 - -64 | 0, HEAPF32[$2_1 + 64 >> 2], HEAPF32[$6_1 >> 2], HEAPF32[$8_1 >> 2], $17_1, $24_1, $23_1);
        $5_1 = Math_fround(HEAPF32[$20_1 + 404 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 64 >> 2] * HEAPF32[$19_1 >> 2]) + Math_fround(HEAPF32[$4_1 + 68 >> 2] * HEAPF32[$36_1 >> 2])) + Math_fround(HEAPF32[$4_1 + 72 >> 2] * HEAPF32[$37_1 >> 2])));
       } else {
        $5_1 = Math_fround(0.0)
       }
       if ($21_1) {
        $13_1 = HEAPF32[$2_1 + 88 >> 2];
        $12_1 = HEAPF32[$2_1 + 84 >> 2];
        $10_1 = HEAPF32[$2_1 + 80 >> 2];
        $10_1 = Math_fround(HEAPF32[$21_1 + 404 >> 2] + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($13_1 * $41_1) - Math_fround($12_1 * $40_1)) * HEAPF32[$19_1 >> 2]) + Math_fround(Math_fround(Math_fround($10_1 * $40_1) - Math_fround($13_1 * $35_1)) * HEAPF32[$36_1 >> 2])) + Math_fround(Math_fround(Math_fround($12_1 * $35_1) - Math_fround($10_1 * $41_1)) * HEAPF32[$37_1 >> 2])));
       } else {
        $10_1 = Math_fround(0.0)
       }
       HEAPF32[$11_1 + 108 >> 2] = $14_1 / Math_fround($18_1 + Math_fround($5_1 + $10_1));
       label$15 : {
        if ($20_1) {
         $6_1 = HEAP32[$19_1 + 4 >> 2];
         HEAP32[$2_1 + 16 >> 2] = HEAP32[$19_1 >> 2];
         HEAP32[$2_1 + 20 >> 2] = $6_1;
         $8_1 = $19_1 + 8 | 0;
         $6_1 = HEAP32[$8_1 + 4 >> 2];
         $11_1 = $2_1 + 24 | 0;
         HEAP32[$11_1 >> 2] = HEAP32[$8_1 >> 2];
         HEAP32[$11_1 + 4 >> 2] = $6_1;
         $6_1 = HEAP32[$4_1 + 100 >> 2];
         HEAP32[$2_1 >> 2] = HEAP32[$4_1 + 96 >> 2];
         HEAP32[$2_1 + 4 >> 2] = $6_1;
         $8_1 = $4_1 + 104 | 0;
         $6_1 = HEAP32[$8_1 + 4 >> 2];
         $11_1 = $2_1 + 8 | 0;
         HEAP32[$11_1 >> 2] = HEAP32[$8_1 >> 2];
         HEAP32[$11_1 + 4 >> 2] = $6_1;
         break label$15;
        }
        HEAP32[$2_1 >> 2] = 0;
        HEAP32[$2_1 + 4 >> 2] = 0;
        $6_1 = $2_1 + 24 | 0;
        HEAP32[$6_1 >> 2] = 0;
        HEAP32[$6_1 + 4 >> 2] = 0;
        $6_1 = $2_1 + 16 | 0;
        HEAP32[$6_1 >> 2] = 0;
        HEAP32[$6_1 + 4 >> 2] = 0;
        $6_1 = $2_1 + 8 | 0;
        HEAP32[$6_1 >> 2] = 0;
        HEAP32[$6_1 + 4 >> 2] = 0;
       }
       label$17 : {
        if ($21_1) {
         $12_1 = HEAPF32[$19_1 >> 2];
         $10_1 = HEAPF32[$36_1 >> 2];
         $5_1 = HEAPF32[$37_1 >> 2];
         HEAP32[$2_1 + 60 >> 2] = 0;
         HEAP32[$2_1 + 44 >> 2] = 0;
         HEAPF32[$2_1 + 40 >> 2] = -HEAPF32[$4_1 + 88 >> 2];
         HEAPF32[$2_1 + 36 >> 2] = -HEAPF32[$4_1 + 84 >> 2];
         HEAPF32[$2_1 + 32 >> 2] = -HEAPF32[$4_1 + 80 >> 2];
         HEAPF32[$2_1 + 56 >> 2] = -$5_1;
         HEAPF32[$2_1 + 52 >> 2] = -$10_1;
         HEAPF32[$2_1 + 48 >> 2] = -$12_1;
         break label$17;
        }
        HEAP32[$2_1 + 32 >> 2] = 0;
        HEAP32[$2_1 + 36 >> 2] = 0;
        $6_1 = $2_1 + 56 | 0;
        HEAP32[$6_1 >> 2] = 0;
        HEAP32[$6_1 + 4 >> 2] = 0;
        $6_1 = $2_1 + 48 | 0;
        HEAP32[$6_1 >> 2] = 0;
        HEAP32[$6_1 + 4 >> 2] = 0;
        $6_1 = $2_1 + 40 | 0;
        HEAP32[$6_1 >> 2] = 0;
        HEAP32[$6_1 + 4 >> 2] = 0;
       }
       $63_1 = HEAPF32[$3_1 + 64 >> 2];
       $64_1 = HEAPF32[$32_1 >> 2];
       $14_1 = Math_fround(0.0);
       $29_1 = Math_fround(0.0);
       $33_1 = Math_fround(0.0);
       if ($20_1) {
        $594($4_1 - -64 | 0, $20_1, $17_1, $24_1, $23_1);
        $29_1 = HEAPF32[$4_1 + 68 >> 2];
        $14_1 = HEAPF32[$4_1 + 72 >> 2];
        $33_1 = HEAPF32[$4_1 + 64 >> 2];
       }
       $23_1 = Math_fround(0.0);
       $24_1 = Math_fround(0.0);
       if ($21_1) {
        $594($4_1 - -64 | 0, $21_1, $35_1, $41_1, $40_1);
        $23_1 = HEAPF32[$4_1 + 68 >> 2];
        $43_1 = HEAPF32[$4_1 + 72 >> 2];
        $24_1 = HEAPF32[$4_1 + 64 >> 2];
       }
       $6_1 = $16_1 + 240 | 0;
       $12_1 = HEAPF32[$37_1 >> 2];
       $10_1 = HEAPF32[$19_1 >> 2];
       $5_1 = HEAPF32[$36_1 >> 2];
       HEAPF32[$2_1 + 104 >> 2] = HEAPF32[$7_1 - 8 >> 2];
       $5_1 = Math_fround(Math_fround(Math_fround($10_1 * Math_fround($33_1 - $24_1)) + Math_fround($5_1 * Math_fround($29_1 - $23_1))) + Math_fround($12_1 * Math_fround($14_1 - $43_1)));
       $35_1 = HEAPF32[$3_1 + 96 >> 2] > Math_fround(Math_abs($5_1)) ? Math_fround(0.0) : Math_fround(HEAPF32[$7_1 + 4 >> 2] * Math_fround(-$5_1));
       label$21 : {
        if (HEAPU8[$3_1 + 72 | 0] & 4) {
         $5_1 = Math_fround(HEAPF32[$7_1 + 40 >> 2] * HEAPF32[$3_1 + 68 >> 2]);
         HEAPF32[$2_1 + 100 >> 2] = $5_1;
         if ($20_1) {
          $584($16_1, Math_fround(Math_fround(HEAPF32[$2_1 + 16 >> 2] * HEAPF32[$16_1 + 128 >> 2]) * HEAPF32[$20_1 + 408 >> 2]), Math_fround(Math_fround(HEAPF32[$2_1 + 20 >> 2] * HEAPF32[$16_1 + 132 >> 2]) * HEAPF32[$20_1 + 412 >> 2]), Math_fround(Math_fround(HEAPF32[$2_1 + 24 >> 2] * HEAPF32[$16_1 + 136 >> 2]) * HEAPF32[$20_1 + 416 >> 2]), $22_1, $5_1)
         }
         if (!$21_1) {
          break label$21
         }
         $39_1 = HEAPF32[$15_1 + 128 >> 2];
         $23_1 = HEAPF32[$21_1 + 412 >> 2];
         $24_1 = HEAPF32[$15_1 + 132 >> 2];
         $17_1 = HEAPF32[$2_1 + 52 >> 2];
         $18_1 = HEAPF32[$21_1 + 416 >> 2];
         $13_1 = HEAPF32[$15_1 + 136 >> 2];
         $12_1 = HEAPF32[$2_1 + 56 >> 2];
         $10_1 = HEAPF32[$21_1 + 408 >> 2];
         $5_1 = HEAPF32[$2_1 + 48 >> 2];
         HEAP32[$4_1 + 76 >> 2] = 0;
         HEAPF32[$4_1 + 72 >> 2] = -HEAPF32[$2_1 + 88 >> 2];
         HEAPF32[$4_1 + 68 >> 2] = -HEAPF32[$2_1 + 84 >> 2];
         HEAPF32[$4_1 + 64 >> 2] = -HEAPF32[$2_1 + 80 >> 2];
         $584($15_1, Math_fround($10_1 * Math_fround($39_1 * Math_fround(-$5_1))), Math_fround($23_1 * Math_fround($24_1 * Math_fround(-$17_1))), Math_fround($18_1 * Math_fround($13_1 * Math_fround(-$12_1))), $4_1 - -64 | 0, Math_fround(-HEAPF32[$2_1 + 100 >> 2]));
         break label$21;
        }
        HEAP32[$2_1 + 100 >> 2] = 0;
       }
       HEAP32[$2_1 + 96 >> 2] = 0;
       $17_1 = Math_fround(0.0);
       $23_1 = Math_fround(0.0);
       $24_1 = Math_fround(0.0);
       $43_1 = Math_fround(0.0);
       $14_1 = Math_fround(0.0);
       $29_1 = Math_fround(0.0);
       $33_1 = Math_fround(0.0);
       $39_1 = Math_fround(0.0);
       $18_1 = Math_fround(0.0);
       $13_1 = Math_fround(0.0);
       $10_1 = $35_1 <= Math_fround(0.0) ? Math_fround(0.0) : $35_1;
       if (HEAP32[$6_1 >> 2]) {
        $43_1 = HEAPF32[$16_1 + 224 >> 2];
        $29_1 = HEAPF32[$16_1 + 232 >> 2];
        $23_1 = HEAPF32[$16_1 + 216 >> 2];
        $24_1 = HEAPF32[$16_1 + 212 >> 2];
        $14_1 = HEAPF32[$16_1 + 228 >> 2];
        $5_1 = HEAPF32[$16_1 + 208 >> 2];
       } else {
        $5_1 = Math_fround(0.0)
       }
       $14_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($5_1 + HEAPF32[$16_1 + 176 >> 2]) * HEAPF32[$2_1 + 16 >> 2]) + Math_fround(Math_fround($24_1 + HEAPF32[$16_1 + 180 >> 2]) * HEAPF32[$2_1 + 20 >> 2])) + Math_fround(Math_fround($23_1 + HEAPF32[$16_1 + 184 >> 2]) * HEAPF32[$2_1 + 24 >> 2])) + Math_fround(Math_fround(Math_fround(Math_fround($43_1 + HEAPF32[$16_1 + 192 >> 2]) * HEAPF32[$2_1 >> 2]) + Math_fround(Math_fround($14_1 + HEAPF32[$16_1 + 196 >> 2]) * HEAPF32[$2_1 + 4 >> 2])) + Math_fround(Math_fround($29_1 + HEAPF32[$16_1 + 200 >> 2]) * HEAPF32[$2_1 + 8 >> 2])));
       if (HEAP32[$15_1 + 240 >> 2]) {
        $13_1 = HEAPF32[$15_1 + 224 >> 2];
        $39_1 = HEAPF32[$15_1 + 232 >> 2];
        $18_1 = HEAPF32[$15_1 + 228 >> 2];
        $17_1 = HEAPF32[$15_1 + 216 >> 2];
        $33_1 = HEAPF32[$15_1 + 212 >> 2];
        $5_1 = HEAPF32[$15_1 + 208 >> 2];
       } else {
        $5_1 = Math_fround(0.0)
       }
       $14_1 = Math_fround($10_1 - Math_fround($14_1 + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($5_1 + HEAPF32[$15_1 + 176 >> 2]) * HEAPF32[$2_1 + 48 >> 2]) + Math_fround(Math_fround($33_1 + HEAPF32[$15_1 + 180 >> 2]) * HEAPF32[$2_1 + 52 >> 2])) + Math_fround(Math_fround($17_1 + HEAPF32[$15_1 + 184 >> 2]) * HEAPF32[$2_1 + 56 >> 2])) + Math_fround(Math_fround(Math_fround(Math_fround($13_1 + HEAPF32[$15_1 + 192 >> 2]) * HEAPF32[$2_1 + 32 >> 2]) + Math_fround(Math_fround($18_1 + HEAPF32[$15_1 + 196 >> 2]) * HEAPF32[$2_1 + 36 >> 2])) + Math_fround(Math_fround($39_1 + HEAPF32[$15_1 + 200 >> 2]) * HEAPF32[$2_1 + 40 >> 2])))));
       $10_1 = HEAPF32[$3_1 + 56 >> 2];
       HEAP32[$2_1 + 120 >> 2] = 0;
       HEAP32[$2_1 + 124 >> 2] = 1343554297;
       $12_1 = HEAPF32[$2_1 + 108 >> 2];
       HEAPF32[$2_1 + 116 >> 2] = $26_1 * $12_1;
       $6_1 = $2_1;
       $11_1 = $2_1;
       $13_1 = Math_fround($64_1 + $63_1);
       label$27 : {
        if ($13_1 > Math_fround(0.0)) {
         $14_1 = Math_fround($14_1 - Math_fround($51_1 * $13_1));
         $5_1 = Math_fround(0.0);
         break label$27;
        }
        $5_1 = Math_fround($51_1 * Math_fround($50_1 * Math_fround(-$13_1)));
       }
       $5_1 = Math_fround($5_1 * $12_1);
       $2_1 = !HEAP32[$3_1 + 52 >> 2] | $10_1 < $13_1;
       HEAPF32[$11_1 + 128 >> 2] = $2_1 ? Math_fround(0.0) : $5_1;
       $26_1 = $5_1;
       $5_1 = Math_fround($14_1 * $12_1);
       HEAPF32[$6_1 + 112 >> 2] = $2_1 ? Math_fround($26_1 + $5_1) : $5_1;
       HEAP32[$6_1 + 140 >> 2] = HEAP32[$0_1 + 68 >> 2];
       $2_1 = $7_1 - 4 | 0;
       label$29 : {
        if (!(HEAPF32[$2_1 >> 2] > Math_fround(0.0))) {
         break label$29
        }
        $595($0_1, $19_1, $27_1, $28_1, $34_1, HEAPF32[$7_1 >> 2]);
        $137($19_1, $4_1 + 96 | 0, $4_1 + 80 | 0);
        $11_1 = $84($4_1 + 96 | 0);
        $8_1 = $84($4_1 + 80 | 0);
        $596($31_1, $11_1, 2);
        $596($30_1, $11_1, 2);
        $596($31_1, $8_1, 2);
        $596($30_1, $8_1, 2);
        $5_1 = HEAPF32[$4_1 + 96 >> 2];
        $26_1 = Math_fround($5_1 * $5_1);
        $5_1 = HEAPF32[$4_1 + 100 >> 2];
        $26_1 = Math_fround($26_1 + Math_fround($5_1 * $5_1));
        $5_1 = HEAPF32[$4_1 + 104 >> 2];
        if (+Math_fround(Math_sqrt(Math_fround($26_1 + Math_fround($5_1 * $5_1)))) > .001) {
         $595($0_1, $11_1, $27_1, $28_1, $34_1, HEAPF32[$2_1 >> 2])
        }
        $5_1 = HEAPF32[$4_1 + 80 >> 2];
        $26_1 = Math_fround($5_1 * $5_1);
        $5_1 = HEAPF32[$4_1 + 84 >> 2];
        $26_1 = Math_fround($26_1 + Math_fround($5_1 * $5_1));
        $5_1 = HEAPF32[$4_1 + 88 >> 2];
        if (!(+Math_fround(Math_sqrt(Math_fround($26_1 + Math_fround($5_1 * $5_1)))) > .001)) {
         break label$29
        }
        $595($0_1, $8_1, $27_1, $28_1, $34_1, HEAPF32[$2_1 >> 2]);
       }
       label$31 : {
        if (!(HEAP8[$25 | 0] & 1 ? HEAPU8[$3_1 + 72 | 0] & 32 : 0)) {
         HEAP32[$7_1 + 88 >> 2] = 0;
         $12_1 = Math_fround($60_1 - $59_1);
         $10_1 = Math_fround($58_1 - $57_1);
         $5_1 = Math_fround($62_1 - $61_1);
         $18_1 = Math_fround(Math_fround(Math_fround($12_1 * $53_1) + Math_fround($10_1 * $52_1)) + Math_fround($5_1 * $54_1));
         $8_1 = $7_1 + 84 | 0;
         $13_1 = Math_fround($5_1 - Math_fround($18_1 * HEAPF32[$37_1 >> 2]));
         HEAPF32[$8_1 >> 2] = $13_1;
         $2_1 = $7_1 + 80 | 0;
         $10_1 = Math_fround($10_1 - Math_fround($18_1 * HEAPF32[$36_1 >> 2]));
         HEAPF32[$2_1 >> 2] = $10_1;
         $22_1 = $7_1 + 76 | 0;
         $5_1 = Math_fround($12_1 - Math_fround($18_1 * HEAPF32[$19_1 >> 2]));
         HEAPF32[$22_1 >> 2] = $5_1;
         label$34 : {
          $5_1 = Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($10_1 * $10_1)) + Math_fround($13_1 * $13_1));
          if (!($5_1 > Math_fround(1.1920928955078125e-07))) {
           break label$34
          }
          if (HEAP32[$3_1 + 72 >> 2] & 64) {
           break label$34
          }
          HEAPF32[$4_1 + 96 >> 2] = Math_fround(1.0) / Math_fround(Math_sqrt($5_1));
          $11_1 = $147($22_1, $4_1 + 96 | 0);
          $596($31_1, $11_1, 1);
          $596($30_1, $11_1, 1);
          $597($0_1, $11_1, $27_1, $28_1, $34_1, $38_1, $4_1 + 48 | 0, $4_1 + 32 | 0, $9_1, $3_1, Math_fround(0.0), Math_fround(0.0));
          if (!(HEAPU8[$3_1 + 72 | 0] & 16)) {
           break label$31
          }
          $129($4_1 + 96 | 0, HEAPF32[$22_1 >> 2], HEAPF32[$2_1 >> 2], HEAPF32[$8_1 >> 2], HEAPF32[$19_1 >> 2], HEAPF32[$36_1 >> 2], HEAPF32[$37_1 >> 2]);
          $8_1 = $4_1 + 104 | 0;
          $2_1 = HEAP32[$8_1 + 4 >> 2];
          $11_1 = $7_1 + 100 | 0;
          HEAP32[$11_1 >> 2] = HEAP32[$8_1 >> 2];
          HEAP32[$11_1 + 4 >> 2] = $2_1;
          $2_1 = HEAP32[$4_1 + 100 >> 2];
          $8_1 = $7_1 + 92 | 0;
          HEAP32[$8_1 >> 2] = HEAP32[$4_1 + 96 >> 2];
          HEAP32[$8_1 + 4 >> 2] = $2_1;
          $2_1 = $84($8_1);
          $596($31_1, $2_1, 1);
          $596($30_1, $2_1, 1);
          $597($0_1, $2_1, $27_1, $28_1, $34_1, $38_1, $4_1 + 48 | 0, $4_1 + 32 | 0, $9_1, $3_1, Math_fround(0.0), Math_fround(0.0));
          break label$31;
         }
         $8_1 = $7_1 + 92 | 0;
         $137($19_1, $22_1, $8_1);
         $596($31_1, $22_1, 1);
         $596($30_1, $22_1, 1);
         $597($0_1, $22_1, $27_1, $28_1, $34_1, $38_1, $4_1 + 48 | 0, $4_1 + 32 | 0, $9_1, $3_1, Math_fround(0.0), Math_fround(0.0));
         $2_1 = HEAP32[$3_1 + 72 >> 2];
         if ($2_1 & 16) {
          $596($31_1, $8_1, 1);
          $596($30_1, $8_1, 1);
          $597($0_1, $8_1, $27_1, $28_1, $34_1, $38_1, $4_1 + 48 | 0, $4_1 + 32 | 0, $9_1, $3_1, Math_fround(0.0), Math_fround(0.0));
          $2_1 = HEAP32[$3_1 + 72 >> 2];
         }
         if (($2_1 & 80) != 80) {
          break label$31
         }
         HEAP32[$25 >> 2] = HEAP32[$25 >> 2] | 1;
         break label$31;
        }
        $2_1 = $7_1 + 68 | 0;
        $597($0_1, $7_1 + 76 | 0, $27_1, $28_1, $34_1, $38_1, $4_1 + 48 | 0, $4_1 + 32 | 0, $9_1, $3_1, HEAPF32[$7_1 + 52 >> 2], HEAPF32[$2_1 >> 2]);
        if (!(HEAPU8[$3_1 + 72 | 0] & 16)) {
         break label$31
        }
        $597($0_1, $7_1 + 92 | 0, $27_1, $28_1, $34_1, $38_1, $4_1 + 48 | 0, $4_1 + 32 | 0, $9_1, $3_1, HEAPF32[$7_1 + 56 >> 2], HEAPF32[$2_1 >> 2]);
       }
       $2_1 = HEAP32[$0_1 + 16 >> 2];
       $22_1 = $2_1 + $47_1 | 0;
       $25 = HEAP32[$22_1 + 240 >> 2];
       $11_1 = $2_1 + $48_1 | 0;
       $32_1 = HEAP32[$11_1 + 240 >> 2];
       $8_1 = HEAP32[$0_1 + 76 >> 2];
       $2_1 = HEAP32[$6_1 + 140 >> 2];
       label$37 : {
        if (HEAPU8[$3_1 + 72 | 0] & 4) {
         $2_1 = $8_1 + Math_imul($2_1, 152) | 0;
         $5_1 = Math_fround(HEAPF32[$7_1 + 44 >> 2] * HEAPF32[$3_1 + 68 >> 2]);
         HEAPF32[$2_1 + 100 >> 2] = $5_1;
         if ($32_1) {
          $9_1 = HEAPF32[$32_1 + 404 >> 2];
          $584($11_1, Math_fround(Math_fround($9_1 * HEAPF32[$2_1 + 16 >> 2]) * HEAPF32[$32_1 + 408 >> 2]), Math_fround(Math_fround($9_1 * HEAPF32[$2_1 + 20 >> 2]) * HEAPF32[$32_1 + 412 >> 2]), Math_fround(Math_fround($9_1 * HEAPF32[$2_1 + 24 >> 2]) * HEAPF32[$32_1 + 416 >> 2]), $2_1 - -64 | 0, $5_1);
         }
         if (!$25) {
          break label$37
         }
         $18_1 = HEAPF32[$2_1 + 48 >> 2];
         $13_1 = HEAPF32[$25 + 412 >> 2];
         $12_1 = HEAPF32[$2_1 + 52 >> 2];
         $10_1 = HEAPF32[$25 + 416 >> 2];
         $9_1 = HEAPF32[$2_1 + 56 >> 2];
         $5_1 = HEAPF32[$25 + 408 >> 2];
         $17_1 = HEAPF32[$25 + 404 >> 2];
         HEAP32[$4_1 + 108 >> 2] = 0;
         HEAPF32[$4_1 + 104 >> 2] = -HEAPF32[$2_1 + 88 >> 2];
         HEAPF32[$4_1 + 100 >> 2] = -HEAPF32[$2_1 + 84 >> 2];
         HEAPF32[$4_1 + 96 >> 2] = -HEAPF32[$2_1 + 80 >> 2];
         $584($22_1, Math_fround($5_1 * Math_fround($17_1 * Math_fround(-$18_1))), Math_fround($13_1 * Math_fround($17_1 * Math_fround(-$12_1))), Math_fround($10_1 * Math_fround($17_1 * Math_fround(-$9_1))), $4_1 + 96 | 0, Math_fround(-HEAPF32[$2_1 + 100 >> 2]));
         break label$37;
        }
        HEAP32[($8_1 + Math_imul($2_1, 152) | 0) + 100 >> 2] = 0;
       }
       $2_1 = HEAP32[$3_1 + 72 >> 2];
       if (!($2_1 & 16)) {
        break label$6
       }
       $8_1 = HEAP32[$6_1 + 140 >> 2] + 1 | 0;
       $6_1 = HEAP32[$0_1 + 76 >> 2];
       if ($2_1 & 4) {
        $2_1 = $6_1 + Math_imul($8_1, 152) | 0;
        $5_1 = Math_fround(HEAPF32[$7_1 + 48 >> 2] * HEAPF32[$3_1 + 68 >> 2]);
        HEAPF32[$2_1 + 100 >> 2] = $5_1;
        if ($32_1) {
         $9_1 = HEAPF32[$32_1 + 404 >> 2];
         $584($11_1, Math_fround($9_1 * HEAPF32[$2_1 + 16 >> 2]), Math_fround($9_1 * HEAPF32[$2_1 + 20 >> 2]), Math_fround($9_1 * HEAPF32[$2_1 + 24 >> 2]), $2_1 - -64 | 0, $5_1);
        }
        if (!$25) {
         break label$6
        }
        $10_1 = HEAPF32[$2_1 + 52 >> 2];
        $9_1 = HEAPF32[$2_1 + 56 >> 2];
        $5_1 = HEAPF32[$2_1 + 48 >> 2];
        $12_1 = HEAPF32[$25 + 404 >> 2];
        HEAP32[$4_1 + 108 >> 2] = 0;
        HEAPF32[$4_1 + 104 >> 2] = -HEAPF32[$2_1 + 88 >> 2];
        HEAPF32[$4_1 + 100 >> 2] = -HEAPF32[$2_1 + 84 >> 2];
        HEAPF32[$4_1 + 96 >> 2] = -HEAPF32[$2_1 + 80 >> 2];
        $584($22_1, Math_fround($12_1 * Math_fround(-$5_1)), Math_fround($12_1 * Math_fround(-$10_1)), Math_fround($12_1 * Math_fround(-$9_1)), $4_1 + 96 | 0, Math_fround(-HEAPF32[$2_1 + 100 >> 2]));
        break label$6;
       }
       HEAP32[($6_1 + Math_imul($8_1, 152) | 0) + 100 >> 2] = 0;
      }
      $7_1 = $7_1 + 208 | 0;
      $49_1 = $49_1 + 1 | 0;
      continue;
     };
    }
    $46_1 = $46_1 + 1 | 0;
    continue;
   }
   break;
  };
  global$0 = $4_1 + 112 | 0;
 }
 
 function $591($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $4_1 = global$0 - 256 | 0;
  global$0 = $4_1;
  $3_1 = HEAP32[$1_1 + 212 >> 2];
  label$1 : {
   if (($3_1 | 0) > -1) {
    break label$1
   }
   label$2 : {
    $3_1 = HEAP32[$1_1 + 252 >> 2];
    if (!($3_1 & 2)) {
     break label$2
    }
    $3_1 = $3_1 << 30 >> 31 & $1_1;
    if (HEAPU8[$3_1 + 204 | 0] & 2 ? 0 : HEAPF32[$3_1 + 404 >> 2] == Math_fround(0.0)) {
     break label$2
    }
    $3_1 = HEAP32[$0_1 + 8 >> 2];
    $1($4_1 + 8 | 0, 0, 244);
    $608($607($0_1 + 4 | 0, $4_1 + 8 | 0), $1_1, $2_1);
    HEAP32[$1_1 + 212 >> 2] = $3_1;
    break label$1;
   }
   $3_1 = HEAP32[$0_1 + 188 >> 2];
   if (($3_1 | 0) > -1) {
    break label$1
   }
   HEAP32[$0_1 + 188 >> 2] = HEAP32[$0_1 + 8 >> 2];
   $1($4_1 + 8 | 0, 0, 244);
   $608($607($0_1 + 4 | 0, $4_1 + 8 | 0), 0, $2_1);
   $3_1 = HEAP32[$0_1 + 188 >> 2];
  }
  global$0 = $4_1 + 256 | 0;
  return $3_1;
 }
 
 function $592($0_1) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  $2_1 = $1_1;
  if (HEAP32[$0_1 + 8 >> 2] == ($1_1 | 0)) {
   $609($0_1, $1_1 ? $1_1 << 1 : 1);
   $2_1 = HEAP32[$0_1 + 4 >> 2];
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1 + 1;
  return HEAP32[$0_1 + 12 >> 2] + Math_imul($1_1, 152) | 0;
 }
 
 function $593($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  label$1 : {
   if (!HEAP32[$0_1 + 240 >> 2]) {
    $2_1 = Math_fround(0.0);
    $3_1 = Math_fround(0.0);
    $1_1 = Math_fround(0.0);
    break label$1;
   }
   $6_1 = HEAPF32[$0_1 + 212 >> 2];
   $7_1 = HEAPF32[$0_1 + 180 >> 2];
   $8_1 = HEAPF32[$0_1 + 216 >> 2];
   $9_1 = HEAPF32[$0_1 + 184 >> 2];
   $10_1 = HEAPF32[$0_1 + 208 >> 2];
   $11_1 = HEAPF32[$0_1 + 176 >> 2];
   $129($5_1, Math_fround(HEAPF32[$0_1 + 192 >> 2] + HEAPF32[$0_1 + 224 >> 2]), Math_fround(HEAPF32[$0_1 + 196 >> 2] + HEAPF32[$0_1 + 228 >> 2]), Math_fround(HEAPF32[$0_1 + 200 >> 2] + HEAPF32[$0_1 + 232 >> 2]), $1_1, $2_1, $3_1);
   $3_1 = Math_fround(Math_fround($9_1 + $8_1) + HEAPF32[$5_1 + 8 >> 2]);
   $2_1 = Math_fround(Math_fround($7_1 + $6_1) + HEAPF32[$5_1 + 4 >> 2]);
   $1_1 = Math_fround(Math_fround($11_1 + $10_1) + HEAPF32[$5_1 >> 2]);
  }
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAPF32[$4_1 + 8 >> 2] = $3_1;
  HEAPF32[$4_1 + 4 >> 2] = $2_1;
  HEAPF32[$4_1 >> 2] = $1_1;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $594($0_1, $1_1, $2_1, $3_1, $4_1) {
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $129($5_1, HEAPF32[$1_1 + 388 >> 2], HEAPF32[$1_1 + 392 >> 2], HEAPF32[$1_1 + 396 >> 2], $2_1, $3_1, $4_1);
  $2_1 = HEAPF32[$1_1 + 372 >> 2];
  $3_1 = HEAPF32[$1_1 + 376 >> 2];
  $4_1 = HEAPF32[$1_1 + 380 >> 2];
  $6_1 = HEAPF32[$5_1 >> 2];
  $7_1 = HEAPF32[$5_1 + 4 >> 2];
  $8_1 = HEAPF32[$5_1 + 8 >> 2];
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 + 8 >> 2] = $4_1 + $8_1;
  HEAPF32[$0_1 + 4 >> 2] = $3_1 + $7_1;
  HEAPF32[$0_1 >> 2] = $2_1 + $6_1;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $595($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = 0, $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0);
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $7_1 = $592($0_1 + 84 | 0);
  HEAP32[$7_1 + 16 >> 2] = 0;
  HEAP32[$7_1 + 20 >> 2] = 0;
  HEAP32[$7_1 + 48 >> 2] = -2147483648;
  HEAP32[$7_1 + 52 >> 2] = -2147483648;
  $8_1 = $7_1 + 24 | 0;
  HEAP32[$8_1 >> 2] = 0;
  HEAP32[$8_1 + 4 >> 2] = 0;
  $8_1 = $7_1 + 56 | 0;
  HEAP32[$8_1 >> 2] = -2147483648;
  HEAP32[$8_1 + 4 >> 2] = 0;
  HEAPF32[$7_1 + 104 >> 2] = $5_1;
  HEAP32[$7_1 + 96 >> 2] = 0;
  HEAP32[$7_1 + 100 >> 2] = 0;
  $16_1 = HEAP32[$0_1 + 16 >> 2];
  $8_1 = HEAP32[($16_1 + Math_imul($2_1, 244) | 0) + 240 >> 2];
  $13_1 = HEAP32[(Math_imul($3_1, 244) + $16_1 | 0) + 240 >> 2];
  HEAP32[$7_1 + 132 >> 2] = 0;
  HEAP32[$7_1 + 140 >> 2] = $4_1;
  HEAP32[$7_1 + 148 >> 2] = $3_1;
  HEAP32[$7_1 + 144 >> 2] = $2_1;
  $5_1 = HEAPF32[$1_1 + 8 >> 2];
  $9_1 = HEAPF32[$1_1 + 4 >> 2];
  $11_1 = HEAPF32[$1_1 >> 2];
  HEAP32[$7_1 + 12 >> 2] = 0;
  $12_1 = Math_fround(-$11_1);
  HEAPF32[$7_1 >> 2] = $12_1;
  $14_1 = Math_fround(-$9_1);
  HEAPF32[$7_1 + 4 >> 2] = $14_1;
  $15_1 = Math_fround(-$5_1);
  HEAPF32[$7_1 + 8 >> 2] = $15_1;
  $5_1 = Math_fround(0.0);
  $11_1 = Math_fround(0.0);
  $9_1 = Math_fround(0.0);
  $0_1 = $7_1;
  $4_1 = $0_1;
  if ($8_1) {
   $351($6_1 + 16 | 0, $8_1 + 324 | 0, $12_1, $14_1, $15_1);
   $10_1 = Math_fround(HEAPF32[$6_1 + 24 >> 2] * HEAPF32[$8_1 + 612 >> 2]);
   $9_1 = Math_fround(HEAPF32[$6_1 + 20 >> 2] * HEAPF32[$8_1 + 608 >> 2]);
   $12_1 = Math_fround(HEAPF32[$6_1 + 16 >> 2] * HEAPF32[$8_1 + 604 >> 2]);
  } else {
   $12_1 = Math_fround(0.0)
  }
  HEAPF32[$4_1 + 64 >> 2] = $12_1;
  HEAP32[$0_1 + 76 >> 2] = 0;
  HEAPF32[$0_1 + 72 >> 2] = $10_1;
  HEAPF32[$0_1 + 68 >> 2] = $9_1;
  $4_1 = $1_1 + 8 | 0;
  $10_1 = HEAPF32[$4_1 >> 2];
  $12_1 = HEAPF32[$1_1 + 4 >> 2];
  $14_1 = HEAPF32[$1_1 >> 2];
  $7_1 = HEAP32[$1_1 >> 2];
  $1_1 = HEAP32[$1_1 + 4 >> 2];
  $26_1 = HEAP32[$4_1 + 4 >> 2];
  $17_1 = $0_1 + 40 | 0;
  HEAP32[$17_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$17_1 + 4 >> 2] = $26_1;
  HEAP32[$0_1 + 32 >> 2] = $7_1;
  HEAP32[$0_1 + 36 >> 2] = $1_1;
  $9_1 = Math_fround(0.0);
  $1_1 = $0_1;
  if ($13_1) {
   $351($6_1 + 16 | 0, $13_1 + 324 | 0, $14_1, $12_1, $10_1);
   $9_1 = Math_fround(HEAPF32[$6_1 + 24 >> 2] * HEAPF32[$13_1 + 612 >> 2]);
   $11_1 = Math_fround(HEAPF32[$6_1 + 20 >> 2] * HEAPF32[$13_1 + 608 >> 2]);
   $10_1 = Math_fround(HEAPF32[$6_1 + 16 >> 2] * HEAPF32[$13_1 + 604 >> 2]);
  } else {
   $10_1 = Math_fround(0.0)
  }
  HEAPF32[$1_1 + 80 >> 2] = $10_1;
  HEAP32[$0_1 + 92 >> 2] = 0;
  HEAPF32[$0_1 + 88 >> 2] = $9_1;
  HEAPF32[$0_1 + 84 >> 2] = $11_1;
  label$5 : {
   if ($8_1) {
    $351($6_1 + 16 | 0, $8_1 + 324 | 0, HEAPF32[$0_1 >> 2], HEAPF32[$0_1 + 4 >> 2], HEAPF32[$0_1 + 8 >> 2]);
    break label$5;
   }
   $1_1 = $6_1 + 24 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$6_1 + 16 >> 2] = 0;
   HEAP32[$6_1 + 20 >> 2] = 0;
  }
  $11_1 = Math_fround(0.0);
  $9_1 = Math_fround(0.0);
  $10_1 = Math_fround(0.0);
  if ($13_1) {
   $351($6_1, $13_1 + 324 | 0, HEAPF32[$0_1 + 32 >> 2], HEAPF32[$0_1 + 36 >> 2], HEAPF32[$0_1 + 40 >> 2]);
   $10_1 = HEAPF32[$6_1 >> 2];
   $11_1 = HEAPF32[$6_1 + 8 >> 2];
   $9_1 = HEAPF32[$6_1 + 4 >> 2];
  }
  $18_1 = HEAPF32[$0_1 >> 2];
  $19_1 = HEAPF32[$0_1 + 4 >> 2];
  $20_1 = HEAPF32[$0_1 + 8 >> 2];
  $21_1 = HEAPF32[$0_1 + 32 >> 2];
  $22_1 = HEAPF32[$0_1 + 36 >> 2];
  $23_1 = HEAPF32[$0_1 + 40 >> 2];
  $24_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$6_1 + 16 >> 2] * $18_1) + Math_fround(HEAPF32[$6_1 + 20 >> 2] * $19_1)) + Math_fround(HEAPF32[$6_1 + 24 >> 2] * $20_1)) + Math_fround(0.0)) + Math_fround(Math_fround(Math_fround($10_1 * $21_1) + Math_fround($9_1 * $22_1)) + Math_fround($11_1 * $23_1))));
  HEAPF32[$0_1 + 108 >> 2] = $24_1;
  $11_1 = Math_fround(0.0);
  $9_1 = Math_fround(0.0);
  $10_1 = Math_fround(0.0);
  $12_1 = Math_fround(0.0);
  $14_1 = Math_fround(0.0);
  if ($8_1) {
   $1_1 = Math_imul($2_1, 244) + $16_1 | 0;
   $9_1 = Math_fround(HEAPF32[$1_1 + 176 >> 2] + HEAPF32[$1_1 + 208 >> 2]);
   $11_1 = Math_fround(HEAPF32[$1_1 + 180 >> 2] + HEAPF32[$1_1 + 212 >> 2]);
   $14_1 = HEAPF32[$1_1 + 192 >> 2];
   $10_1 = HEAPF32[$1_1 + 200 >> 2];
   $12_1 = HEAPF32[$1_1 + 196 >> 2];
   $5_1 = Math_fround(HEAPF32[$1_1 + 184 >> 2] + HEAPF32[$1_1 + 216 >> 2]);
  }
  $27_1 = HEAPF32[$0_1 + 24 >> 2];
  $28_1 = HEAPF32[$0_1 + 20 >> 2];
  $29_1 = HEAPF32[$0_1 + 16 >> 2];
  $15_1 = Math_fround(0.0);
  if ($13_1) {
   $1_1 = Math_imul($3_1, 244) + $16_1 | 0;
   $15_1 = Math_fround(HEAPF32[$1_1 + 176 >> 2] + HEAPF32[$1_1 + 208 >> 2]);
   $30_1 = HEAPF32[$1_1 + 192 >> 2];
   $31_1 = HEAPF32[$1_1 + 200 >> 2];
   $32_1 = HEAPF32[$1_1 + 196 >> 2];
   $33_1 = Math_fround(HEAPF32[$1_1 + 180 >> 2] + HEAPF32[$1_1 + 212 >> 2]);
   $34_1 = Math_fround(HEAPF32[$1_1 + 184 >> 2] + HEAPF32[$1_1 + 216 >> 2]);
  }
  HEAP32[$0_1 + 116 >> 2] = 0;
  $25 = HEAPF32[$0_1 + 104 >> 2];
  HEAPF32[$0_1 + 124 >> 2] = $25;
  HEAPF32[$0_1 + 120 >> 2] = -$25;
  HEAPF32[$0_1 + 112 >> 2] = $24_1 * Math_fround(Math_fround(0.0) - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($9_1 * $29_1) + Math_fround($11_1 * $28_1)) + Math_fround($5_1 * $27_1)) + Math_fround(Math_fround($20_1 * $10_1) + Math_fround(Math_fround($19_1 * $12_1) + Math_fround($18_1 * $14_1)))) + Math_fround(Math_fround(Math_fround(Math_fround($15_1 * HEAPF32[$0_1 + 48 >> 2]) + Math_fround($33_1 * HEAPF32[$0_1 + 52 >> 2])) + Math_fround($34_1 * HEAPF32[$0_1 + 56 >> 2])) + Math_fround(Math_fround($23_1 * $31_1) + Math_fround(Math_fround($22_1 * $32_1) + Math_fround($21_1 * $30_1))))));
  global$0 = $6_1 + 32 | 0;
 }
 
 function $596($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   if (!(HEAP32[$0_1 + 180 >> 2] & $2_1)) {
    break label$1
   }
   $2_1 = $1_1 + 8 | 0;
   $4_1 = $0_1 + 4 | 0;
   $77($3_1 + 16 | 0, HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$2_1 >> 2], $4_1);
   $351($3_1, $4_1, Math_fround(HEAPF32[$0_1 + 164 >> 2] * HEAPF32[$3_1 + 16 >> 2]), Math_fround(HEAPF32[$0_1 + 168 >> 2] * HEAPF32[$3_1 + 20 >> 2]), Math_fround(HEAPF32[$0_1 + 172 >> 2] * HEAPF32[$3_1 + 24 >> 2]));
   $0_1 = $3_1 + 8 | 0;
   $4_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $0_1 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $0_1;
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $597($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  var $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = 0, $20_1 = 0, $21_1 = Math_fround(0), $22_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38_1 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = Math_fround(0), $43_1 = Math_fround(0);
  $14_1 = global$0 - 32 | 0;
  global$0 = $14_1;
  $12_1 = $592($0_1 - -64 | 0);
  HEAP32[$12_1 + 140 >> 2] = $4_1;
  HEAP32[$12_1 + 148 >> 2] = $3_1;
  HEAP32[$12_1 + 144 >> 2] = $2_1;
  HEAP32[$12_1 + 96 >> 2] = 0;
  HEAP32[$12_1 + 100 >> 2] = 0;
  HEAPF32[$12_1 + 104 >> 2] = HEAPF32[$5_1 + 84 >> 2];
  $20_1 = HEAP32[$0_1 + 16 >> 2];
  $0_1 = HEAP32[($20_1 + Math_imul($2_1, 244) | 0) + 240 >> 2];
  $4_1 = HEAP32[(Math_imul($3_1, 244) + $20_1 | 0) + 240 >> 2];
  HEAP32[$12_1 + 132 >> 2] = 0;
  label$1 : {
   if ($0_1) {
    $19_1 = HEAP32[$1_1 + 4 >> 2];
    $16_1 = $12_1 + 16 | 0;
    $13_1 = $16_1;
    HEAP32[$13_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$13_1 + 4 >> 2] = $19_1;
    $19_1 = $1_1 + 8 | 0;
    $22_1 = HEAP32[$19_1 + 4 >> 2];
    $13_1 = $12_1 + 24 | 0;
    HEAP32[$13_1 >> 2] = HEAP32[$19_1 >> 2];
    HEAP32[$13_1 + 4 >> 2] = $22_1;
    $129($14_1 + 16 | 0, HEAPF32[$6_1 >> 2], HEAPF32[$6_1 + 4 >> 2], HEAPF32[$6_1 + 8 >> 2], HEAPF32[$16_1 >> 2], HEAPF32[$12_1 + 20 >> 2], HEAPF32[$13_1 >> 2]);
    $13_1 = $14_1 + 24 | 0;
    $19_1 = HEAP32[$13_1 + 4 >> 2];
    $16_1 = $12_1 + 8 | 0;
    HEAP32[$16_1 >> 2] = HEAP32[$13_1 >> 2];
    HEAP32[$16_1 + 4 >> 2] = $19_1;
    $16_1 = HEAP32[$14_1 + 20 >> 2];
    HEAP32[$12_1 >> 2] = HEAP32[$14_1 + 16 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $16_1;
    $351($14_1, $0_1 + 324 | 0, HEAPF32[$14_1 + 16 >> 2], HEAPF32[$14_1 + 20 >> 2], HEAPF32[$13_1 >> 2]);
    $15_1 = HEAPF32[$0_1 + 608 >> 2];
    $17_1 = HEAPF32[$0_1 + 612 >> 2];
    $18_1 = HEAPF32[$0_1 + 604 >> 2];
    HEAP32[$12_1 + 76 >> 2] = 0;
    HEAPF32[$12_1 + 72 >> 2] = $17_1 * HEAPF32[$14_1 + 8 >> 2];
    HEAPF32[$12_1 + 68 >> 2] = $15_1 * HEAPF32[$14_1 + 4 >> 2];
    HEAPF32[$12_1 + 64 >> 2] = $18_1 * HEAPF32[$14_1 >> 2];
    break label$1;
   }
   HEAP32[$12_1 + 64 >> 2] = 0;
   HEAP32[$12_1 + 68 >> 2] = 0;
   HEAP32[$12_1 >> 2] = 0;
   HEAP32[$12_1 + 4 >> 2] = 0;
   $13_1 = $12_1 + 72 | 0;
   HEAP32[$13_1 >> 2] = 0;
   HEAP32[$13_1 + 4 >> 2] = 0;
   $13_1 = $12_1 + 8 | 0;
   HEAP32[$13_1 >> 2] = 0;
   HEAP32[$13_1 + 4 >> 2] = 0;
   $13_1 = $12_1 + 16 | 0;
   HEAP32[$13_1 >> 2] = 0;
   HEAP32[$13_1 + 4 >> 2] = 0;
   $13_1 = $12_1 + 24 | 0;
   HEAP32[$13_1 >> 2] = 0;
   HEAP32[$13_1 + 4 >> 2] = 0;
  }
  label$3 : {
   if ($4_1) {
    $15_1 = HEAPF32[$1_1 >> 2];
    $17_1 = HEAPF32[$1_1 + 4 >> 2];
    $18_1 = HEAPF32[$1_1 + 8 >> 2];
    HEAP32[$12_1 + 60 >> 2] = 0;
    $18_1 = Math_fround(-$18_1);
    HEAPF32[$12_1 + 56 >> 2] = $18_1;
    $17_1 = Math_fround(-$17_1);
    HEAPF32[$12_1 + 52 >> 2] = $17_1;
    $15_1 = Math_fround(-$15_1);
    HEAPF32[$12_1 + 48 >> 2] = $15_1;
    $129($14_1 + 16 | 0, HEAPF32[$7_1 >> 2], HEAPF32[$7_1 + 4 >> 2], HEAPF32[$7_1 + 8 >> 2], $15_1, $17_1, $18_1);
    $13_1 = $14_1 + 24 | 0;
    $19_1 = HEAP32[$13_1 + 4 >> 2];
    $16_1 = $12_1 + 40 | 0;
    HEAP32[$16_1 >> 2] = HEAP32[$13_1 >> 2];
    HEAP32[$16_1 + 4 >> 2] = $19_1;
    $16_1 = HEAP32[$14_1 + 20 >> 2];
    HEAP32[$12_1 + 32 >> 2] = HEAP32[$14_1 + 16 >> 2];
    HEAP32[$12_1 + 36 >> 2] = $16_1;
    $351($14_1, $4_1 + 324 | 0, HEAPF32[$14_1 + 16 >> 2], HEAPF32[$14_1 + 20 >> 2], HEAPF32[$13_1 >> 2]);
    $15_1 = HEAPF32[$4_1 + 608 >> 2];
    $17_1 = HEAPF32[$4_1 + 612 >> 2];
    $18_1 = HEAPF32[$4_1 + 604 >> 2];
    HEAP32[$12_1 + 92 >> 2] = 0;
    HEAPF32[$12_1 + 88 >> 2] = $17_1 * HEAPF32[$14_1 + 8 >> 2];
    HEAPF32[$12_1 + 84 >> 2] = $15_1 * HEAPF32[$14_1 + 4 >> 2];
    HEAPF32[$12_1 + 80 >> 2] = $18_1 * HEAPF32[$14_1 >> 2];
    break label$3;
   }
   HEAP32[$12_1 + 80 >> 2] = 0;
   HEAP32[$12_1 + 84 >> 2] = 0;
   HEAP32[$12_1 + 32 >> 2] = 0;
   HEAP32[$12_1 + 36 >> 2] = 0;
   $13_1 = $12_1 + 88 | 0;
   HEAP32[$13_1 >> 2] = 0;
   HEAP32[$13_1 + 4 >> 2] = 0;
   $13_1 = $12_1 + 40 | 0;
   HEAP32[$13_1 >> 2] = 0;
   HEAP32[$13_1 + 4 >> 2] = 0;
   $13_1 = $12_1 + 48 | 0;
   HEAP32[$13_1 >> 2] = 0;
   HEAP32[$13_1 + 4 >> 2] = 0;
   $13_1 = $12_1 + 56 | 0;
   HEAP32[$13_1 >> 2] = 0;
   HEAP32[$13_1 + 4 >> 2] = 0;
  }
  $17_1 = Math_fround(0.0);
  $18_1 = Math_fround(0.0);
  $13_1 = $12_1;
  $15_1 = $8_1;
  if ($0_1) {
   $129($14_1 + 16 | 0, HEAPF32[$12_1 - -64 >> 2], HEAPF32[$12_1 + 68 >> 2], HEAPF32[$12_1 + 72 >> 2], HEAPF32[$6_1 >> 2], HEAPF32[$6_1 + 4 >> 2], HEAPF32[$6_1 + 8 >> 2]);
   $8_1 = Math_fround(HEAPF32[$0_1 + 404 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$14_1 + 16 >> 2] * HEAPF32[$1_1 >> 2]) + Math_fround(HEAPF32[$14_1 + 20 >> 2] * HEAPF32[$1_1 + 4 >> 2])) + Math_fround(HEAPF32[$14_1 + 24 >> 2] * HEAPF32[$1_1 + 8 >> 2])));
  } else {
   $8_1 = Math_fround(0.0)
  }
  if ($4_1) {
   $129($14_1 + 16 | 0, Math_fround(-HEAPF32[$12_1 + 80 >> 2]), Math_fround(-HEAPF32[$12_1 + 84 >> 2]), Math_fround(-HEAPF32[$12_1 + 88 >> 2]), HEAPF32[$7_1 >> 2], HEAPF32[$7_1 + 4 >> 2], HEAPF32[$7_1 + 8 >> 2]);
   $21_1 = Math_fround(HEAPF32[$4_1 + 404 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$14_1 + 16 >> 2] * HEAPF32[$1_1 >> 2]) + Math_fround(HEAPF32[$14_1 + 20 >> 2] * HEAPF32[$1_1 + 4 >> 2])) + Math_fround(HEAPF32[$14_1 + 24 >> 2] * HEAPF32[$1_1 + 8 >> 2])));
  } else {
   $21_1 = Math_fround(0.0)
  }
  $15_1 = Math_fround($15_1 / Math_fround($8_1 + $21_1));
  HEAPF32[$13_1 + 108 >> 2] = $15_1;
  $8_1 = Math_fround(0.0);
  if ($0_1) {
   $6_1 = Math_imul($2_1, 244) + $20_1 | 0;
   $18_1 = Math_fround(HEAPF32[$6_1 + 176 >> 2] + HEAPF32[$6_1 + 208 >> 2]);
   $23_1 = Math_fround(HEAPF32[$6_1 + 184 >> 2] + HEAPF32[$6_1 + 216 >> 2]);
   $8_1 = Math_fround(HEAPF32[$6_1 + 180 >> 2] + HEAPF32[$6_1 + 212 >> 2]);
  }
  if ($0_1) {
   $0_1 = Math_imul($2_1, 244) + $20_1 | 0;
   $17_1 = HEAPF32[$0_1 + 192 >> 2];
   $24_1 = HEAPF32[$0_1 + 196 >> 2];
   $25 = HEAPF32[$0_1 + 200 >> 2];
  }
  if ($4_1) {
   $0_1 = Math_imul($3_1, 244) + $20_1 | 0;
   $26_1 = Math_fround(HEAPF32[$0_1 + 176 >> 2] + HEAPF32[$0_1 + 208 >> 2]);
   $27_1 = Math_fround(HEAPF32[$0_1 + 184 >> 2] + HEAPF32[$0_1 + 216 >> 2]);
   $28_1 = Math_fround(HEAPF32[$0_1 + 180 >> 2] + HEAPF32[$0_1 + 212 >> 2]);
  }
  if ($4_1) {
   $0_1 = Math_imul($3_1, 244) + $20_1 | 0;
   $29_1 = HEAPF32[$0_1 + 192 >> 2];
   $30_1 = HEAPF32[$0_1 + 200 >> 2];
   $31_1 = HEAPF32[$0_1 + 196 >> 2];
  }
  $21_1 = HEAPF32[$12_1 + 24 >> 2];
  $32_1 = HEAPF32[$12_1 + 20 >> 2];
  $33_1 = HEAPF32[$12_1 + 16 >> 2];
  $34_1 = HEAPF32[$12_1 + 8 >> 2];
  $35_1 = HEAPF32[$12_1 + 4 >> 2];
  $36_1 = HEAPF32[$12_1 >> 2];
  $37_1 = HEAPF32[$12_1 + 56 >> 2];
  $38_1 = HEAPF32[$12_1 + 52 >> 2];
  $39_1 = HEAPF32[$12_1 + 48 >> 2];
  $40_1 = HEAPF32[$12_1 + 40 >> 2];
  $41_1 = HEAPF32[$12_1 + 36 >> 2];
  $42_1 = HEAPF32[$12_1 + 32 >> 2];
  if (HEAPU8[$5_1 + 128 | 0] & 16) {
   $43_1 = Math_fround($15_1 * Math_fround(Math_fround(HEAPF32[$9_1 + 44 >> 2] * Math_fround(-Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$5_1 + 48 >> 2] - HEAPF32[$5_1 + 32 >> 2]) * HEAPF32[$1_1 >> 2]) + Math_fround(Math_fround(HEAPF32[$5_1 + 52 >> 2] - HEAPF32[$5_1 + 36 >> 2]) * HEAPF32[$1_1 + 4 >> 2])) + Math_fround(Math_fround(HEAPF32[$5_1 + 56 >> 2] - HEAPF32[$5_1 + 40 >> 2]) * HEAPF32[$1_1 + 8 >> 2])))) / HEAPF32[$9_1 + 12 >> 2]))
  }
  HEAP32[$12_1 + 128 >> 2] = 0;
  HEAPF32[$12_1 + 116 >> 2] = $11_1;
  $11_1 = HEAPF32[$12_1 + 104 >> 2];
  HEAPF32[$12_1 + 124 >> 2] = $11_1;
  HEAPF32[$12_1 + 120 >> 2] = -$11_1;
  HEAPF32[$12_1 + 112 >> 2] = Math_fround($15_1 * Math_fround($10_1 - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($18_1 * $33_1) + Math_fround($8_1 * $32_1)) + Math_fround($23_1 * $21_1)) + Math_fround(Math_fround(Math_fround($17_1 * $36_1) + Math_fround($24_1 * $35_1)) + Math_fround($25 * $34_1))) + Math_fround(Math_fround(Math_fround(Math_fround($26_1 * $39_1) + Math_fround($28_1 * $38_1)) + Math_fround($27_1 * $37_1)) + Math_fround(Math_fround(Math_fround($29_1 * $42_1) + Math_fround($31_1 * $41_1)) + Math_fround($30_1 * $40_1)))))) + $43_1;
  global$0 = $14_1 + 32 | 0;
 }
 
 function $598($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $9_1 = Math_fround(0), $10_1 = Math_fround(0);
  label$1 : {
   if (!HEAP32[$7_1 + 52 >> 2]) {
    break label$1
   }
   $1_1 = HEAP32[$7_1 + 20 >> 2];
   $2_1 = 0;
   while (1) {
    if (($1_1 | 0) <= ($2_1 | 0)) {
     break label$1
    }
    $3_1 = 0;
    $1_1 = HEAP32[$0_1 + 28 >> 2];
    $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
    $9_1 = Math_fround(0.0);
    while (1) {
     if ($1_1) {
      $10_1 = $9_1;
      $5_1 = HEAP32[$0_1 + 16 >> 2];
      $4_1 = HEAP32[$0_1 + 36 >> 2] + Math_imul(HEAP32[HEAP32[$0_1 + 116 >> 2] + $3_1 >> 2], 152) | 0;
      $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[$0_1 + 220 >> 2]]($5_1 + Math_imul(HEAP32[$4_1 + 144 >> 2], 244) | 0, Math_imul(HEAP32[$4_1 + 148 >> 2], 244) + $5_1 | 0, $4_1));
      $9_1 = Math_fround($10_1 + Math_fround($9_1 * $9_1));
      $1_1 = $1_1 - 1 | 0;
      $3_1 = $3_1 + 4 | 0;
      continue;
     }
     break;
    };
    if (HEAPF32[$7_1 + 92 >> 2] >= $9_1) {
     break label$1
    }
    $1_1 = HEAP32[$7_1 + 20 >> 2];
    $3_1 = ($1_1 - 1 | 0) > ($2_1 | 0);
    $2_1 = $2_1 + 1 | 0;
    if ($3_1) {
     continue
    }
    break;
   };
  }
 }
 
 function $599($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0);
  $1_1 = global$0 - 80 | 0;
  global$0 = $1_1;
  label$1 : {
   $11_1 = HEAP32[$3_1 + 72 >> 2];
   if (!($11_1 & 4)) {
    break label$1
   }
   $2_1 = HEAP32[$0_1 + 28 >> 2];
   $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $14_1 = $11_1 & 16;
   $12_1 = 140;
   while (1) {
    if (!$2_1) {
     break label$1
    }
    $11_1 = HEAP32[$0_1 + 36 >> 2] + $12_1 | 0;
    $4_1 = HEAP32[$11_1 - 8 >> 2];
    HEAPF32[$4_1 + 132 >> 2] = HEAPF32[$11_1 - 40 >> 2];
    $11_1 = HEAP32[$0_1 + 76 >> 2] + Math_imul(HEAP32[$11_1 >> 2], 152) | 0;
    HEAPF32[$4_1 + 136 >> 2] = HEAPF32[$11_1 + 100 >> 2];
    if ($14_1) {
     HEAPF32[$4_1 + 140 >> 2] = HEAPF32[$11_1 + 252 >> 2]
    }
    $2_1 = $2_1 - 1 | 0;
    $12_1 = $12_1 + 152 | 0;
    continue;
   };
  }
  $2_1 = HEAP32[$0_1 + 48 >> 2];
  $15_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
  $14_1 = 132;
  while (1) {
   if (!$15_1) {
    $14_1 = $1_1 - -64 | 0;
    $11_1 = $1_1 + 48 | 0;
    $2_1 = $1_1 + 32 | 0;
    $12_1 = 144;
    $15_1 = 0;
    while (1) {
     if (HEAP32[$0_1 + 8 >> 2] > ($15_1 | 0)) {
      $7_1 = HEAP32[$0_1 + 16 >> 2] + $12_1 | 0;
      if (HEAP32[$7_1 + 96 >> 2]) {
       label$9 : {
        if (HEAP32[$3_1 + 52 >> 2]) {
         $16_1 = HEAPF32[$3_1 + 60 >> 2];
         $9_1 = HEAPF32[$3_1 + 12 >> 2];
         $89($7_1 + 32 | 0, $7_1 - 80 | 0);
         $89($7_1 + 48 | 0, $7_1 + -64 | 0);
         $17_1 = HEAPF32[$7_1 + 4 >> 2];
         $8_1 = HEAPF32[$7_1 >> 2];
         label$11 : {
          if ($8_1 != Math_fround(0.0)) {
           break label$11
          }
          if ($17_1 != Math_fround(0.0)) {
           break label$11
          }
          if (HEAPF32[$7_1 + 8 >> 2] != Math_fround(0.0)) {
           break label$11
          }
          if (HEAPF32[$7_1 + 16 >> 2] != Math_fround(0.0)) {
           break label$11
          }
          if (HEAPF32[$7_1 + 20 >> 2] != Math_fround(0.0)) {
           break label$11
          }
          if (HEAPF32[$7_1 + 24 >> 2] == Math_fround(0.0)) {
           break label$9
          }
         }
         HEAP32[$1_1 + 12 >> 2] = 0;
         HEAPF32[$1_1 + 8 >> 2] = HEAPF32[$7_1 + 24 >> 2] * $16_1;
         HEAPF32[$1_1 + 4 >> 2] = HEAPF32[$7_1 + 20 >> 2] * $16_1;
         HEAPF32[$1_1 >> 2] = HEAPF32[$7_1 + 16 >> 2] * $16_1;
         $10_1 = $7_1 - 144 | 0;
         $564($10_1, $8_1, $17_1, HEAPF32[$7_1 + 8 >> 2], $1_1, $9_1, $1_1 + 16 | 0);
         $5_1 = $1_1 + 24 | 0;
         $4_1 = HEAP32[$5_1 + 4 >> 2];
         $6_1 = $10_1 + 8 | 0;
         HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $4_1;
         $4_1 = HEAP32[$1_1 + 20 >> 2];
         HEAP32[$10_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
         HEAP32[$10_1 + 4 >> 2] = $4_1;
         $4_1 = HEAP32[$2_1 + 4 >> 2];
         $6_1 = $7_1 - 128 | 0;
         $5_1 = $6_1;
         HEAP32[$5_1 >> 2] = HEAP32[$2_1 >> 2];
         HEAP32[$5_1 + 4 >> 2] = $4_1;
         $5_1 = $2_1 + 8 | 0;
         $4_1 = HEAP32[$5_1 + 4 >> 2];
         $6_1 = $6_1 + 8 | 0;
         HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $4_1;
         $4_1 = HEAP32[$11_1 + 4 >> 2];
         $6_1 = $7_1 - 112 | 0;
         $5_1 = $6_1;
         HEAP32[$5_1 >> 2] = HEAP32[$11_1 >> 2];
         HEAP32[$5_1 + 4 >> 2] = $4_1;
         $5_1 = $11_1 + 8 | 0;
         $4_1 = HEAP32[$5_1 + 4 >> 2];
         $6_1 = $6_1 + 8 | 0;
         HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $4_1;
         $4_1 = HEAP32[$14_1 + 4 >> 2];
         $5_1 = $7_1 - 96 | 0;
         HEAP32[$5_1 >> 2] = HEAP32[$14_1 >> 2];
         HEAP32[$5_1 + 4 >> 2] = $4_1;
         $6_1 = $5_1 + 8 | 0;
         $5_1 = $14_1 + 8 | 0;
         $4_1 = HEAP32[$5_1 + 4 >> 2];
         HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $4_1;
         break label$9;
        }
        $89($7_1 + 32 | 0, $7_1 - 80 | 0);
        $89($7_1 + 48 | 0, $7_1 + -64 | 0);
       }
       $4_1 = HEAP32[$0_1 + 16 >> 2] + $12_1 | 0;
       $18_1 = HEAPF32[$4_1 - -64 >> 2];
       $19_1 = HEAPF32[$4_1 + 32 >> 2];
       $16_1 = HEAPF32[$4_1 + 68 >> 2];
       $17_1 = HEAPF32[$4_1 + 36 >> 2];
       $9_1 = HEAPF32[$4_1 + 72 >> 2];
       $8_1 = HEAPF32[$4_1 + 40 >> 2];
       $4_1 = HEAP32[$4_1 + 96 >> 2];
       HEAP32[$4_1 + 384 >> 2] = 0;
       HEAPF32[$4_1 + 380 >> 2] = $8_1 + $9_1;
       HEAPF32[$4_1 + 376 >> 2] = $17_1 + $16_1;
       HEAPF32[$4_1 + 372 >> 2] = $19_1 + $18_1;
       HEAP32[$4_1 + 304 >> 2] = HEAP32[$4_1 + 304 >> 2] + 1;
       $4_1 = HEAP32[$0_1 + 16 >> 2] + $12_1 | 0;
       $18_1 = HEAPF32[$4_1 + 48 >> 2];
       $19_1 = HEAPF32[$4_1 + 80 >> 2];
       $16_1 = HEAPF32[$4_1 + 52 >> 2];
       $17_1 = HEAPF32[$4_1 + 84 >> 2];
       $9_1 = HEAPF32[$4_1 + 56 >> 2];
       $8_1 = HEAPF32[$4_1 + 88 >> 2];
       $4_1 = HEAP32[$4_1 + 96 >> 2];
       HEAP32[$4_1 + 400 >> 2] = 0;
       HEAPF32[$4_1 + 396 >> 2] = $9_1 + $8_1;
       HEAPF32[$4_1 + 392 >> 2] = $16_1 + $17_1;
       HEAPF32[$4_1 + 388 >> 2] = $18_1 + $19_1;
       HEAP32[$4_1 + 304 >> 2] = HEAP32[$4_1 + 304 >> 2] + 1;
       if (HEAP32[$3_1 + 52 >> 2]) {
        $7_1 = HEAP32[$0_1 + 16 >> 2] + $12_1 | 0;
        $13_1 = HEAP32[$7_1 + 96 >> 2];
        HEAP32[$13_1 + 304 >> 2] = HEAP32[$13_1 + 304 >> 2] + 1;
        $10_1 = $7_1 - 144 | 0;
        $5_1 = $10_1 + 8 | 0;
        $4_1 = HEAP32[$5_1 + 4 >> 2];
        $6_1 = $13_1 + 12 | 0;
        HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $4_1;
        $4_1 = HEAP32[$10_1 + 4 >> 2];
        HEAP32[$13_1 + 4 >> 2] = HEAP32[$10_1 >> 2];
        HEAP32[$13_1 + 8 >> 2] = $4_1;
        $10_1 = $7_1 - 128 | 0;
        $5_1 = $10_1 + 8 | 0;
        $4_1 = HEAP32[$5_1 + 4 >> 2];
        $6_1 = $13_1 + 28 | 0;
        HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $4_1;
        $4_1 = HEAP32[$10_1 + 4 >> 2];
        $5_1 = $13_1 + 20 | 0;
        HEAP32[$5_1 >> 2] = HEAP32[$10_1 >> 2];
        HEAP32[$5_1 + 4 >> 2] = $4_1;
        $10_1 = $7_1 - 112 | 0;
        $4_1 = HEAP32[$10_1 + 4 >> 2];
        $5_1 = $13_1 + 36 | 0;
        HEAP32[$5_1 >> 2] = HEAP32[$10_1 >> 2];
        HEAP32[$5_1 + 4 >> 2] = $4_1;
        $5_1 = $10_1 + 8 | 0;
        $4_1 = HEAP32[$5_1 + 4 >> 2];
        $6_1 = $13_1 + 44 | 0;
        HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $4_1;
        $10_1 = $7_1 - 96 | 0;
        $5_1 = $10_1 + 8 | 0;
        $4_1 = HEAP32[$5_1 + 4 >> 2];
        $6_1 = $13_1 + 60 | 0;
        HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $4_1;
        $4_1 = HEAP32[$10_1 + 4 >> 2];
        $5_1 = $13_1 + 52 | 0;
        HEAP32[$5_1 >> 2] = HEAP32[$10_1 >> 2];
        HEAP32[$5_1 + 4 >> 2] = $4_1;
       }
       HEAP32[HEAP32[(HEAP32[$0_1 + 16 >> 2] + $12_1 | 0) + 96 >> 2] + 212 >> 2] = -1;
      }
      $12_1 = $12_1 + 244 | 0;
      $15_1 = $15_1 + 1 | 0;
      continue;
     }
     break;
    };
    $600($0_1 + 24 | 0, 0);
    $600($0_1 + 44 | 0, 0);
    $600($0_1 - -64 | 0, 0);
    $600($0_1 + 84 | 0, 0);
    if (HEAP32[$0_1 + 8 >> 2] <= -1) {
     $601($0_1 + 4 | 0, 0)
    }
    HEAP32[$0_1 + 8 >> 2] = 0;
    global$0 = $1_1 + 80 | 0;
    return Math_fround(Math_fround(0.0));
   }
   $6_1 = HEAP32[$0_1 + 56 >> 2] + $14_1 | 0;
   $5_1 = HEAP32[$6_1 >> 2];
   $4_1 = HEAP32[$5_1 + 44 >> 2];
   if ($4_1) {
    HEAP32[$1_1 + 28 >> 2] = 0;
    $9_1 = Math_fround(Math_fround(1.0) / HEAPF32[$3_1 + 12 >> 2]);
    $11_1 = $6_1 - 32 | 0;
    $8_1 = HEAPF32[$11_1 >> 2];
    $2_1 = HEAP32[$5_1 + 28 >> 2];
    HEAPF32[$1_1 + 24 >> 2] = $9_1 * Math_fround(Math_fround($8_1 * HEAPF32[$6_1 - 108 >> 2]) * HEAPF32[$2_1 + 416 >> 2]);
    HEAPF32[$1_1 + 20 >> 2] = $9_1 * Math_fround(Math_fround($8_1 * HEAPF32[$6_1 - 112 >> 2]) * HEAPF32[$2_1 + 412 >> 2]);
    HEAPF32[$1_1 + 16 >> 2] = Math_fround(Math_fround($8_1 * HEAPF32[$6_1 - 116 >> 2]) * HEAPF32[$2_1 + 408 >> 2]) * $9_1;
    $89($4_1, $1_1 + 16 | 0);
    HEAP32[$1_1 + 28 >> 2] = 0;
    $9_1 = HEAPF32[$11_1 >> 2];
    $2_1 = HEAP32[$5_1 + 32 >> 2];
    $8_1 = Math_fround(Math_fround(1.0) / HEAPF32[$3_1 + 12 >> 2]);
    HEAPF32[$1_1 + 16 >> 2] = Math_fround(Math_fround(HEAPF32[$6_1 - 84 >> 2] * $9_1) * HEAPF32[$2_1 + 408 >> 2]) * $8_1;
    HEAPF32[$1_1 + 24 >> 2] = $8_1 * Math_fround(Math_fround($9_1 * HEAPF32[$6_1 - 76 >> 2]) * HEAPF32[$2_1 + 416 >> 2]);
    HEAPF32[$1_1 + 20 >> 2] = $8_1 * Math_fround(Math_fround($9_1 * HEAPF32[$6_1 - 80 >> 2]) * HEAPF32[$2_1 + 412 >> 2]);
    $89($4_1 + 32 | 0, $1_1 + 16 | 0);
    HEAP32[$1_1 + 28 >> 2] = 0;
    $2_1 = HEAP32[$5_1 + 28 >> 2];
    $9_1 = HEAPF32[$11_1 >> 2];
    $8_1 = Math_fround(Math_fround(1.0) / HEAPF32[$3_1 + 12 >> 2]);
    HEAPF32[$1_1 + 16 >> 2] = Math_fround(Math_fround(HEAPF32[$6_1 - 132 >> 2] * HEAPF32[$2_1 + 604 >> 2]) * $9_1) * $8_1;
    HEAPF32[$1_1 + 24 >> 2] = $8_1 * Math_fround($9_1 * Math_fround(HEAPF32[$6_1 - 124 >> 2] * HEAPF32[$2_1 + 612 >> 2]));
    HEAPF32[$1_1 + 20 >> 2] = $8_1 * Math_fround($9_1 * Math_fround(HEAPF32[$6_1 - 128 >> 2] * HEAPF32[$2_1 + 608 >> 2]));
    $89($4_1 + 16 | 0, $1_1 + 16 | 0);
    HEAP32[$1_1 + 28 >> 2] = 0;
    $2_1 = HEAP32[$5_1 + 32 >> 2];
    $9_1 = HEAPF32[$11_1 >> 2];
    $8_1 = Math_fround(Math_fround(1.0) / HEAPF32[$3_1 + 12 >> 2]);
    HEAPF32[$1_1 + 16 >> 2] = Math_fround(Math_fround(HEAPF32[$6_1 - 100 >> 2] * HEAPF32[$2_1 + 604 >> 2]) * $9_1) * $8_1;
    HEAPF32[$1_1 + 24 >> 2] = $8_1 * Math_fround($9_1 * Math_fround(HEAPF32[$6_1 - 92 >> 2] * HEAPF32[$2_1 + 612 >> 2]));
    HEAPF32[$1_1 + 20 >> 2] = $8_1 * Math_fround($9_1 * Math_fround(HEAPF32[$6_1 - 96 >> 2] * HEAPF32[$2_1 + 608 >> 2]));
    $89($4_1 + 48 | 0, $1_1 + 16 | 0);
   }
   $8_1 = HEAPF32[$6_1 - 32 >> 2];
   HEAPF32[$5_1 + 36 >> 2] = $8_1;
   if (HEAPF32[$5_1 + 16 >> 2] <= Math_fround(Math_abs($8_1))) {
    HEAP8[$5_1 + 20 | 0] = 0
   }
   $15_1 = $15_1 - 1 | 0;
   $14_1 = $14_1 + 152 | 0;
   continue;
  };
 }
 
 function $600($0_1, $1_1) {
  if (HEAP32[$0_1 + 4 >> 2] < ($1_1 | 0)) {
   $609($0_1, $1_1)
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $601($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $11_1 = $53(Math_imul($1_1, 244))
   }
   $6_1 = HEAP32[$0_1 + 4 >> 2];
   $9_1 = ($6_1 | 0) > 0 ? $6_1 : 0;
   $6_1 = 64;
   while (1) {
    if ($9_1) {
     $7_1 = HEAP32[$0_1 + 12 >> 2] + $6_1 | 0;
     $3_1 = $7_1 + -64 | 0;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     $8_1 = $6_1 + $11_1 | 0;
     $2_1 = $8_1 + -64 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $5_1;
     $3_1 = $3_1 + 8 | 0;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     $2_1 = $2_1 + 8 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $4_1;
     $2_1 = $7_1 - 48 | 0;
     $5_1 = $2_1 + 8 | 0;
     $10_1 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $8_1 - 48 | 0;
     $4_1 = $3_1 + 8 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $10_1;
     $4_1 = HEAP32[$2_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $4_1;
     $3_1 = $7_1 - 32 | 0;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     $2_1 = $8_1 - 32 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $5_1;
     $3_1 = $3_1 + 8 | 0;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     $2_1 = $2_1 + 8 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $4_1;
     $2_1 = $7_1 - 16 | 0;
     $5_1 = $2_1 + 8 | 0;
     $10_1 = HEAP32[$5_1 + 4 >> 2];
     $3_1 = $8_1 - 16 | 0;
     $4_1 = $3_1 + 8 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $10_1;
     $4_1 = HEAP32[$2_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $4_1;
     $2($8_1, $7_1, 180);
     $9_1 = $9_1 - 1 | 0;
     $6_1 = $6_1 + 244 | 0;
     continue;
    }
    break;
   };
   $96($0_1);
   HEAP32[$0_1 + 12 >> 2] = $11_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $602($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $14_1 = 0, $15_1 = 0;
  label$1 : {
   if (!(HEAP8[$8_1 + 72 | 0] & 1)) {
    break label$1
   }
   $14_1 = HEAP32[$0_1 + 68 >> 2];
   $15_1 = HEAP32[$0_1 + 28 >> 2];
   $3_1 = 0;
   $2_1 = HEAP32[$0_1 + 48 >> 2];
   $13_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $2_1 = 0;
   while (1) if (($2_1 | 0) == ($13_1 | 0)) {
    if (HEAP32[$8_1 + 20 >> 2] <= ($1_1 | 0)) {
     break label$1
    }
    $3_1 = 0;
    $9_1 = ($15_1 | 0) > 0 ? $15_1 : 0;
    $2_1 = 0;
    while (1) if (($2_1 | 0) == ($9_1 | 0)) {
     $3_1 = 0;
     $9_1 = ($14_1 | 0) > 0 ? $14_1 : 0;
     $2_1 = 0;
     while (1) {
      if (($2_1 | 0) == ($9_1 | 0)) {
       break label$1
      }
      $5_1 = HEAP32[HEAP32[$0_1 + 156 >> 2] + $3_1 >> 2];
      $2_1 = $2_1 + 1 | 0;
      $13_1 = $603($0_1, $2_1) << 2;
      $4_1 = HEAP32[$0_1 + 156 >> 2];
      $13_1 = $13_1 + $4_1 | 0;
      HEAP32[$3_1 + $4_1 >> 2] = HEAP32[$13_1 >> 2];
      HEAP32[$13_1 >> 2] = $5_1;
      $3_1 = $3_1 + 4 | 0;
      continue;
     };
    } else {
     $5_1 = HEAP32[HEAP32[$0_1 + 116 >> 2] + $3_1 >> 2];
     $2_1 = $2_1 + 1 | 0;
     $13_1 = $603($0_1, $2_1) << 2;
     $4_1 = HEAP32[$0_1 + 116 >> 2];
     $13_1 = $13_1 + $4_1 | 0;
     HEAP32[$3_1 + $4_1 >> 2] = HEAP32[$13_1 >> 2];
     HEAP32[$13_1 >> 2] = $5_1;
     $3_1 = $3_1 + 4 | 0;
     continue;
    };
   } else {
    $9_1 = HEAP32[HEAP32[$0_1 + 136 >> 2] + $3_1 >> 2];
    $2_1 = $2_1 + 1 | 0;
    $5_1 = $603($0_1, $2_1);
    $4_1 = HEAP32[$0_1 + 136 >> 2];
    $5_1 = $4_1 + ($5_1 << 2) | 0;
    HEAP32[$3_1 + $4_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $9_1;
    $3_1 = $3_1 + 4 | 0;
    continue;
   };
  }
  $2_1 = 0;
  $3_1 = 0;
  while (1) {
   if (HEAP32[$0_1 + 48 >> 2] <= ($3_1 | 0)) {
    label$11 : {
     if (HEAP32[$8_1 + 20 >> 2] <= ($1_1 | 0)) {
      break label$11
     }
     $3_1 = ($7_1 | 0) > 0 ? $7_1 : 0;
     label$12 : {
      while (1) {
       label$14 : {
        if (!$3_1) {
         $3_1 = HEAP32[$0_1 + 28 >> 2];
         $1_1 = HEAP32[$8_1 + 72 >> 2];
         if (!($1_1 & 512)) {
          break label$14
         }
         $5_1 = $1_1 & 16 ? 8 : 4;
         $1_1 = 0;
         $2_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
         $6_1 = 4;
         while (1) {
          if (!$2_1) {
           break label$12
          }
          $11_1 = $10_1;
          $3_1 = HEAP32[$0_1 + 16 >> 2];
          $4_1 = HEAP32[$0_1 + 36 >> 2] + Math_imul(HEAP32[HEAP32[$0_1 + 116 >> 2] + $1_1 >> 2], 152) | 0;
          $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[$0_1 + 216 >> 2]]($3_1 + Math_imul(HEAP32[$4_1 + 144 >> 2], 244) | 0, $3_1 + Math_imul(HEAP32[$4_1 + 148 >> 2], 244) | 0, $4_1));
          $10_1 = Math_fround($11_1 + Math_fround($10_1 * $10_1));
          $12_1 = HEAPF32[$4_1 + 100 >> 2];
          $4_1 = !($12_1 > Math_fround(0.0));
          if (!$4_1) {
           $7_1 = HEAP32[$0_1 + 76 >> 2] + Math_imul(HEAP32[(HEAP32[$0_1 + 156 >> 2] + $6_1 | 0) - 4 >> 2], 152) | 0;
           $11_1 = HEAPF32[$7_1 + 104 >> 2];
           HEAPF32[$7_1 + 124 >> 2] = $12_1 * $11_1;
           HEAPF32[$7_1 + 120 >> 2] = $12_1 * Math_fround(-$11_1);
           $11_1 = $10_1;
           $3_1 = HEAP32[$0_1 + 16 >> 2];
           $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[$0_1 + 212 >> 2]]($3_1 + Math_imul(HEAP32[$7_1 + 144 >> 2], 244) | 0, $3_1 + Math_imul(HEAP32[$7_1 + 148 >> 2], 244) | 0, $7_1));
           $10_1 = Math_fround($11_1 + Math_fround($10_1 * $10_1));
          }
          label$18 : {
           if (!(HEAPU8[$8_1 + 72 | 0] & 16)) {
            break label$18
           }
           if ($4_1) {
            break label$18
           }
           $4_1 = HEAP32[$0_1 + 76 >> 2] + Math_imul(HEAP32[HEAP32[$0_1 + 156 >> 2] + $6_1 >> 2], 152) | 0;
           $11_1 = HEAPF32[$4_1 + 104 >> 2];
           HEAPF32[$4_1 + 124 >> 2] = $12_1 * $11_1;
           HEAPF32[$4_1 + 120 >> 2] = $12_1 * Math_fround(-$11_1);
           $11_1 = $10_1;
           $3_1 = HEAP32[$0_1 + 16 >> 2];
           $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[$0_1 + 212 >> 2]]($3_1 + Math_imul(HEAP32[$4_1 + 144 >> 2], 244) | 0, $3_1 + Math_imul(HEAP32[$4_1 + 148 >> 2], 244) | 0, $4_1));
           $10_1 = Math_fround($11_1 + Math_fround($10_1 * $10_1));
          }
          $2_1 = $2_1 - 1 | 0;
          $6_1 = $5_1 + $6_1 | 0;
          $1_1 = $1_1 + 4 | 0;
          continue;
         };
        }
        $1_1 = HEAP32[$6_1 >> 2];
        if (HEAPU8[$1_1 + 20 | 0]) {
         $1_1 = $591($0_1, HEAP32[$1_1 + 28 >> 2], HEAPF32[$8_1 + 12 >> 2]);
         $4_1 = $591($0_1, HEAP32[HEAP32[$6_1 >> 2] + 32 >> 2], HEAPF32[$8_1 + 12 >> 2]);
         $2_1 = HEAP32[$6_1 >> 2];
         $5_1 = Math_imul($1_1, 244);
         $1_1 = HEAP32[$0_1 + 16 >> 2];
         FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 24 >> 2]]($2_1, $5_1 + $1_1 | 0, $1_1 + Math_imul($4_1, 244) | 0, HEAPF32[$8_1 + 12 >> 2]);
        }
        $3_1 = $3_1 - 1 | 0;
        $6_1 = $6_1 + 4 | 0;
        continue;
       }
       break;
      };
      $2_1 = 0;
      $3_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
      while (1) {
       if ($3_1) {
        $11_1 = $10_1;
        $1_1 = HEAP32[$0_1 + 16 >> 2];
        $4_1 = HEAP32[$0_1 + 36 >> 2] + Math_imul(HEAP32[HEAP32[$0_1 + 116 >> 2] + $2_1 >> 2], 152) | 0;
        $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[$0_1 + 216 >> 2]]($1_1 + Math_imul(HEAP32[$4_1 + 144 >> 2], 244) | 0, $1_1 + Math_imul(HEAP32[$4_1 + 148 >> 2], 244) | 0, $4_1));
        $10_1 = Math_fround($11_1 + Math_fround($10_1 * $10_1));
        $3_1 = $3_1 - 1 | 0;
        $2_1 = $2_1 + 4 | 0;
        continue;
       }
       break;
      };
      $1_1 = 0;
      $2_1 = HEAP32[$0_1 + 68 >> 2];
      $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
      while (1) {
       if (!$2_1) {
        break label$12
       }
       $4_1 = HEAP32[$0_1 + 76 >> 2] + Math_imul(HEAP32[HEAP32[$0_1 + 156 >> 2] + $1_1 >> 2], 152) | 0;
       $12_1 = HEAPF32[(HEAP32[$0_1 + 36 >> 2] + Math_imul(HEAP32[$4_1 + 140 >> 2], 152) | 0) + 100 >> 2];
       if ($12_1 > Math_fround(0.0)) {
        $11_1 = HEAPF32[$4_1 + 104 >> 2];
        HEAPF32[$4_1 + 124 >> 2] = $12_1 * $11_1;
        HEAPF32[$4_1 + 120 >> 2] = $12_1 * Math_fround(-$11_1);
        $11_1 = $10_1;
        $3_1 = HEAP32[$0_1 + 16 >> 2];
        $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[$0_1 + 212 >> 2]]($3_1 + Math_imul(HEAP32[$4_1 + 144 >> 2], 244) | 0, $3_1 + Math_imul(HEAP32[$4_1 + 148 >> 2], 244) | 0, $4_1));
        $10_1 = Math_fround($11_1 + Math_fround($10_1 * $10_1));
       }
       $2_1 = $2_1 - 1 | 0;
       $1_1 = $1_1 + 4 | 0;
       continue;
      };
     }
     $1_1 = 0;
     $2_1 = HEAP32[$0_1 + 88 >> 2];
     $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
     while (1) {
      if (!$2_1) {
       break label$11
      }
      $4_1 = HEAP32[$0_1 + 96 >> 2] + $1_1 | 0;
      $11_1 = HEAPF32[(HEAP32[$0_1 + 36 >> 2] + Math_imul(HEAP32[$4_1 + 140 >> 2], 152) | 0) + 100 >> 2];
      if ($11_1 > Math_fround(0.0)) {
       $12_1 = HEAPF32[$4_1 + 104 >> 2];
       $11_1 = Math_fround($11_1 * $12_1);
       $11_1 = $11_1 > $12_1 ? $12_1 : $11_1;
       HEAPF32[$4_1 + 124 >> 2] = $11_1;
       HEAPF32[$4_1 + 120 >> 2] = -$11_1;
       $11_1 = $10_1;
       $3_1 = HEAP32[$0_1 + 16 >> 2];
       $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[$0_1 + 212 >> 2]]($3_1 + Math_imul(HEAP32[$4_1 + 144 >> 2], 244) | 0, $3_1 + Math_imul(HEAP32[$4_1 + 148 >> 2], 244) | 0, $4_1));
       $10_1 = Math_fround($11_1 + Math_fround($10_1 * $10_1));
      }
      $2_1 = $2_1 - 1 | 0;
      $1_1 = $1_1 + 152 | 0;
      continue;
     };
    }
   } else {
    $5_1 = HEAP32[$0_1 + 56 >> 2] + Math_imul(HEAP32[HEAP32[$0_1 + 136 >> 2] + $2_1 >> 2], 152) | 0;
    if (HEAP32[$5_1 + 136 >> 2] > ($1_1 | 0)) {
     $11_1 = $10_1;
     $4_1 = HEAP32[$0_1 + 16 >> 2];
     $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[$0_1 + 212 >> 2]]($4_1 + Math_imul(HEAP32[$5_1 + 144 >> 2], 244) | 0, $4_1 + Math_imul(HEAP32[$5_1 + 148 >> 2], 244) | 0, $5_1));
     $10_1 = Math_fround($11_1 + Math_fround($10_1 * $10_1));
    }
    $2_1 = $2_1 + 4 | 0;
    $3_1 = $3_1 + 1 | 0;
    continue;
   }
   break;
  };
  return Math_fround($10_1);
 }
 
 function $603($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = $0_1;
  $0_1 = Math_imul(HEAP32[$0_1 + 232 >> 2], 1664525) + 1013904223 | 0;
  HEAP32[$2_1 + 232 >> 2] = $0_1;
  label$1 : {
   if ($1_1 >>> 0 > 65536) {
    break label$1
   }
   $0_1 = $0_1 >>> 16 ^ $0_1;
   if ($1_1 >>> 0 > 256) {
    break label$1
   }
   $0_1 = $0_1 >>> 8 ^ $0_1;
   if ($1_1 >>> 0 > 16) {
    break label$1
   }
   $0_1 = $0_1 >>> 4 ^ $0_1;
   if ($1_1 >>> 0 > 4) {
    break label$1
   }
   $0_1 = $0_1 >>> 2 ^ $0_1;
   if ($1_1 >>> 0 > 2) {
    break label$1
   }
   $0_1 = $0_1 >>> 1 ^ $0_1;
  }
  return ($0_1 >>> 0) % ($1_1 >>> 0) | 0;
 }
 
 function $604($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = 0, $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = Math_fround(0), $42_1 = Math_fround(0), $43_1 = 0, $44_1 = 0, $45_1 = Math_fround(0), $46_1 = Math_fround(0), $47_1 = Math_fround(0), $48_1 = Math_fround(0), $49_1 = Math_fround(0), $50_1 = Math_fround(0), $51_1 = Math_fround(0), $52_1 = Math_fround(0), $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = Math_fround(0), $63_1 = 0, $64_1 = 0, $65_1 = Math_fround(0), $66_1 = Math_fround(0), $67_1 = Math_fround(0), $68_1 = Math_fround(0), $69_1 = Math_fround(0), $70_1 = Math_fround(0), $71_1 = Math_fround(0), $72_1 = Math_fround(0), $73_1 = Math_fround(0), $74_1 = Math_fround(0), $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0;
  $9_1 = global$0 - 528 | 0;
  global$0 = $9_1;
  HEAP32[$0_1 + 188 >> 2] = -1;
  $8_1 = HEAP32[$7_1 + 72 >> 2];
  if (($8_1 | 0) != HEAP32[$0_1 + 224 >> 2]) {
   HEAP32[$0_1 + 224 >> 2] = $8_1;
   HEAP32[$0_1 + 220 >> 2] = 26;
   HEAP32[$0_1 + 216 >> 2] = 25;
   HEAP32[$0_1 + 212 >> 2] = 24;
  }
  HEAP32[$0_1 + 184 >> 2] = 0;
  $18_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
  $10_1 = $18_1;
  $8_1 = $1_1;
  while (1) {
   if ($10_1) {
    HEAP32[HEAP32[$8_1 >> 2] + 212 >> 2] = -1;
    $10_1 = $10_1 - 1 | 0;
    $8_1 = $8_1 + 4 | 0;
    continue;
   } else {
    label$5 : {
     $25 = $0_1 + 4 | 0;
     $601($25, $2_1 + 1 | 0);
     $1($9_1 + 24 | 0, 0, 244);
     $8_1 = HEAP32[$0_1 + 8 >> 2];
     if (($8_1 | 0) > 0) {
      break label$5
     }
     if (($8_1 | 0) <= -1) {
      $601($25, 0)
     }
     $2_1 = Math_imul($8_1, 244);
     $40_1 = $9_1 + 88 | 0;
     $35_1 = $9_1 + 72 | 0;
     $16_1 = $9_1 + 56 | 0;
     $25 = $9_1 + 40 | 0;
     while (1) {
      if (!$8_1) {
       break label$5
      }
      $14_1 = HEAP32[$9_1 + 28 >> 2];
      $22_1 = HEAP32[$0_1 + 16 >> 2] + $2_1 | 0;
      $11_1 = $22_1;
      HEAP32[$11_1 >> 2] = HEAP32[$9_1 + 24 >> 2];
      HEAP32[$11_1 + 4 >> 2] = $14_1;
      $11_1 = $9_1 + 32 | 0;
      $14_1 = HEAP32[$11_1 + 4 >> 2];
      $15_1 = $22_1 + 8 | 0;
      HEAP32[$15_1 >> 2] = HEAP32[$11_1 >> 2];
      HEAP32[$15_1 + 4 >> 2] = $14_1;
      $14_1 = HEAP32[$25 + 4 >> 2];
      $11_1 = $22_1 + 16 | 0;
      HEAP32[$11_1 >> 2] = HEAP32[$25 >> 2];
      HEAP32[$11_1 + 4 >> 2] = $14_1;
      $11_1 = $25 + 8 | 0;
      $14_1 = HEAP32[$11_1 + 4 >> 2];
      $15_1 = $22_1 + 24 | 0;
      HEAP32[$15_1 >> 2] = HEAP32[$11_1 >> 2];
      HEAP32[$15_1 + 4 >> 2] = $14_1;
      $14_1 = HEAP32[$16_1 + 4 >> 2];
      $11_1 = $22_1 + 32 | 0;
      HEAP32[$11_1 >> 2] = HEAP32[$16_1 >> 2];
      HEAP32[$11_1 + 4 >> 2] = $14_1;
      $11_1 = $16_1 + 8 | 0;
      $14_1 = HEAP32[$11_1 + 4 >> 2];
      $15_1 = $22_1 + 40 | 0;
      HEAP32[$15_1 >> 2] = HEAP32[$11_1 >> 2];
      HEAP32[$15_1 + 4 >> 2] = $14_1;
      $14_1 = HEAP32[$35_1 + 4 >> 2];
      $11_1 = $22_1 + 48 | 0;
      HEAP32[$11_1 >> 2] = HEAP32[$35_1 >> 2];
      HEAP32[$11_1 + 4 >> 2] = $14_1;
      $11_1 = $35_1 + 8 | 0;
      $14_1 = HEAP32[$11_1 + 4 >> 2];
      $15_1 = $22_1 + 56 | 0;
      HEAP32[$15_1 >> 2] = HEAP32[$11_1 >> 2];
      HEAP32[$15_1 + 4 >> 2] = $14_1;
      $2($22_1 - -64 | 0, $40_1, 180);
      $2_1 = $2_1 + 244 | 0;
      $8_1 = $8_1 + 1 | 0;
      continue;
     };
    }
   }
   break;
  };
  HEAP32[$0_1 + 8 >> 2] = 0;
  $14_1 = $9_1 + 48 | 0;
  $16_1 = $9_1 + 24 | 4;
  $43_1 = $9_1 + 368 | 0;
  $25 = $9_1 + 56 | 0;
  $44_1 = $9_1 + 352 | 0;
  $8_1 = $9_1 + 40 | 0;
  $39_1 = $9_1 + 16 | 0;
  while (1) {
   if ($18_1) {
    $22_1 = $591($0_1, HEAP32[$1_1 >> 2], HEAPF32[$7_1 + 12 >> 2]);
    $13_1 = HEAP32[$1_1 >> 2];
    label$10 : {
     if (!$13_1) {
      break label$10
     }
     if (!(HEAP32[$13_1 + 252 >> 2] & 2)) {
      break label$10
     }
     if (HEAPF32[$13_1 + 404 >> 2] == Math_fround(0.0)) {
      break label$10
     }
     $35_1 = HEAP32[$0_1 + 16 >> 2];
     HEAP32[$39_1 >> 2] = 0;
     HEAP32[$39_1 + 4 >> 2] = 0;
     HEAP32[$9_1 + 8 >> 2] = 0;
     HEAP32[$9_1 + 12 >> 2] = 0;
     $2_1 = HEAP32[$13_1 + 564 >> 2];
     if ($2_1 & 2) {
      $23_1 = HEAPF32[$7_1 + 84 >> 2];
      $571($9_1 + 288 | 0, HEAPF32[$13_1 + 456 >> 2], HEAPF32[$13_1 + 460 >> 2], HEAPF32[$13_1 + 464 >> 2]);
      $2_1 = $13_1 + 4 | 0;
      $557($9_1 + 400 | 0, $2_1, HEAPF32[$9_1 + 288 >> 2], HEAPF32[$9_1 + 292 >> 2], HEAPF32[$9_1 + 296 >> 2]);
      $244($9_1 + 336 | 0, $2_1);
      $245($9_1 + 24 | 0, $9_1 + 400 | 0, $9_1 + 336 | 0);
      $15_1 = $13_1 + 388 | 0;
      $11_1 = $13_1 + 392 | 0;
      $2_1 = $13_1 + 396 | 0;
      $351($9_1 + 400 | 0, $9_1 + 24 | 0, HEAPF32[$15_1 >> 2], HEAPF32[$11_1 >> 2], HEAPF32[$2_1 >> 2]);
      $129($9_1 + 336 | 0, HEAPF32[$15_1 >> 2], HEAPF32[$11_1 >> 2], HEAPF32[$2_1 >> 2], HEAPF32[$9_1 + 400 >> 2], HEAPF32[$9_1 + 404 >> 2], HEAPF32[$9_1 + 408 >> 2]);
      $24_1 = HEAPF32[$9_1 + 336 >> 2];
      $17_1 = HEAPF32[$9_1 + 340 >> 2];
      $12_1 = $17_1;
      $19_1 = HEAPF32[$9_1 + 344 >> 2];
      $12_1 = Math_fround(Math_fround(Math_fround($24_1 * $24_1) + Math_fround($12_1 * $12_1)) + Math_fround($19_1 * $19_1));
      if ($12_1 > Math_fround($23_1 * $23_1)) {
       $12_1 = Math_fround(Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($12_1))) * $23_1);
       HEAPF32[$9_1 + 344 >> 2] = $12_1 * $19_1;
       HEAPF32[$9_1 + 340 >> 2] = $12_1 * $17_1;
       HEAPF32[$9_1 + 336 >> 2] = $12_1 * $24_1;
      }
      $11_1 = $9_1 + 344 | 0;
      $2_1 = HEAP32[$11_1 + 4 >> 2];
      HEAP32[$39_1 >> 2] = HEAP32[$11_1 >> 2];
      HEAP32[$39_1 + 4 >> 2] = $2_1;
      $2_1 = HEAP32[$9_1 + 340 >> 2];
      HEAP32[$9_1 + 8 >> 2] = HEAP32[$9_1 + 336 >> 2];
      HEAP32[$9_1 + 12 >> 2] = $2_1;
      $77($9_1 + 400 | 0, HEAPF32[$9_1 + 8 >> 2], HEAPF32[$9_1 + 12 >> 2], HEAPF32[$39_1 >> 2], $13_1 + 324 | 0);
      HEAP32[$9_1 + 36 >> 2] = 0;
      $12_1 = HEAPF32[$7_1 + 12 >> 2];
      HEAPF32[$9_1 + 32 >> 2] = $12_1 * HEAPF32[$9_1 + 408 >> 2];
      HEAPF32[$9_1 + 28 >> 2] = $12_1 * HEAPF32[$9_1 + 404 >> 2];
      HEAPF32[$9_1 + 24 >> 2] = $12_1 * HEAPF32[$9_1 + 400 >> 2];
      $405(($35_1 + Math_imul($22_1, 244) | 0) + 224 | 0, $9_1 + 24 | 0);
      $2_1 = HEAP32[$13_1 + 564 >> 2];
     }
     if ($2_1 & 4) {
      $21_1 = HEAPF32[$7_1 + 12 >> 2];
      $571($9_1 + 496 | 0, HEAPF32[$13_1 + 456 >> 2], HEAPF32[$13_1 + 460 >> 2], HEAPF32[$13_1 + 464 >> 2]);
      $26_1 = HEAPF32[$13_1 + 396 >> 2];
      $27_1 = HEAPF32[$13_1 + 392 >> 2];
      $28_1 = HEAPF32[$13_1 + 388 >> 2];
      $2_1 = $13_1 + 4 | 0;
      $557($9_1 + 400 | 0, $2_1, HEAPF32[$9_1 + 496 >> 2], HEAPF32[$9_1 + 500 >> 2], HEAPF32[$9_1 + 504 >> 2]);
      $244($9_1 + 288 | 0, $2_1);
      $245($9_1 + 24 | 0, $9_1 + 400 | 0, $9_1 + 288 | 0);
      $11_1 = $9_1 + 32 | 0;
      $2_1 = HEAP32[$11_1 + 4 >> 2];
      $40_1 = $9_1 + 344 | 0;
      $15_1 = $40_1;
      HEAP32[$15_1 >> 2] = HEAP32[$11_1 >> 2];
      HEAP32[$15_1 + 4 >> 2] = $2_1;
      $2_1 = HEAP32[$8_1 + 4 >> 2];
      HEAP32[$44_1 >> 2] = HEAP32[$8_1 >> 2];
      HEAP32[$44_1 + 4 >> 2] = $2_1;
      $11_1 = $8_1 + 8 | 0;
      $2_1 = HEAP32[$11_1 + 4 >> 2];
      $15_1 = $44_1 + 8 | 0;
      HEAP32[$15_1 >> 2] = HEAP32[$11_1 >> 2];
      HEAP32[$15_1 + 4 >> 2] = $2_1;
      $2_1 = HEAP32[$25 + 4 >> 2];
      HEAP32[$43_1 >> 2] = HEAP32[$25 >> 2];
      HEAP32[$43_1 + 4 >> 2] = $2_1;
      $11_1 = $25 + 8 | 0;
      $2_1 = HEAP32[$11_1 + 4 >> 2];
      $15_1 = $43_1 + 8 | 0;
      HEAP32[$15_1 >> 2] = HEAP32[$11_1 >> 2];
      HEAP32[$15_1 + 4 >> 2] = $2_1;
      $2_1 = HEAP32[$9_1 + 28 >> 2];
      HEAP32[$9_1 + 336 >> 2] = HEAP32[$9_1 + 24 >> 2];
      HEAP32[$9_1 + 340 >> 2] = $2_1;
      $351($9_1 + 24 | 0, $9_1 + 336 | 0, $28_1, $27_1, $26_1);
      $351($9_1 + 400 | 0, $9_1 + 336 | 0, $28_1, $27_1, $26_1);
      $19_1 = HEAPF32[$9_1 + 24 >> 2];
      $17_1 = HEAPF32[$9_1 + 28 >> 2];
      $29_1 = HEAPF32[$9_1 + 408 >> 2];
      $12_1 = HEAPF32[$9_1 + 32 >> 2];
      $23_1 = HEAPF32[$9_1 + 404 >> 2];
      $24_1 = HEAPF32[$9_1 + 400 >> 2];
      $351($9_1 + 288 | 0, $9_1 + 336 | 0, $28_1, $27_1, $26_1);
      HEAP32[$9_1 + 492 >> 2] = 0;
      $41_1 = Math_fround($12_1 + Math_fround($21_1 * Math_fround(Math_fround($23_1 * $28_1) - Math_fround($27_1 * $24_1))));
      $12_1 = Math_fround($21_1 * Math_fround(0.0));
      HEAPF32[$9_1 + 488 >> 2] = $41_1 - Math_fround($12_1 + HEAPF32[$9_1 + 296 >> 2]);
      HEAPF32[$9_1 + 484 >> 2] = Math_fround($17_1 + Math_fround($21_1 * Math_fround(Math_fround($26_1 * $24_1) - Math_fround($29_1 * $28_1)))) - Math_fround($12_1 + HEAPF32[$9_1 + 292 >> 2]);
      HEAPF32[$9_1 + 480 >> 2] = Math_fround($19_1 + Math_fround($21_1 * Math_fround(Math_fround($27_1 * $29_1) - Math_fround($26_1 * $23_1)))) - Math_fround($12_1 + HEAPF32[$9_1 + 288 >> 2]);
      $351($9_1 + 512 | 0, $9_1 + 336 | 0, $28_1, $27_1, $26_1);
      HEAP32[$9_1 + 64 >> 2] = 0;
      HEAP32[$9_1 + 68 >> 2] = 0;
      HEAPF32[$9_1 + 60 >> 2] = $28_1;
      HEAPF32[$9_1 + 56 >> 2] = -$27_1;
      HEAP32[$9_1 + 52 >> 2] = 0;
      HEAPF32[$9_1 + 48 >> 2] = -$28_1;
      HEAP32[$9_1 + 44 >> 2] = 0;
      HEAPF32[$9_1 + 40 >> 2] = $26_1;
      HEAP32[$9_1 + 36 >> 2] = 0;
      HEAPF32[$9_1 + 32 >> 2] = $27_1;
      HEAPF32[$9_1 + 28 >> 2] = -$26_1;
      HEAP32[$9_1 + 24 >> 2] = 0;
      $45_1 = HEAPF32[$9_1 + 520 >> 2];
      $46_1 = HEAPF32[$9_1 + 516 >> 2];
      $47_1 = HEAPF32[$9_1 + 512 >> 2];
      $245($9_1 + 400 | 0, $9_1 + 24 | 0, $9_1 + 336 | 0);
      $48_1 = HEAPF32[$40_1 >> 2];
      $49_1 = HEAPF32[$9_1 + 340 >> 2];
      $50_1 = HEAPF32[$9_1 + 404 >> 2];
      $51_1 = HEAPF32[$9_1 + 408 >> 2];
      $52_1 = HEAPF32[$9_1 + 352 >> 2];
      $20_1 = HEAPF32[$9_1 + 416 >> 2];
      $30_1 = HEAPF32[$9_1 + 360 >> 2];
      $31_1 = HEAPF32[$9_1 + 424 >> 2];
      $32_1 = HEAPF32[$9_1 + 368 >> 2];
      $42_1 = HEAPF32[$9_1 + 432 >> 2];
      $33_1 = HEAPF32[$9_1 + 372 >> 2];
      $34_1 = HEAPF32[$9_1 + 436 >> 2];
      $29_1 = HEAPF32[$9_1 + 336 >> 2];
      $23_1 = HEAPF32[$9_1 + 400 >> 2];
      $24_1 = HEAPF32[$9_1 + 356 >> 2];
      $19_1 = HEAPF32[$9_1 + 420 >> 2];
      $17_1 = HEAPF32[$9_1 + 376 >> 2];
      $12_1 = HEAPF32[$9_1 + 440 >> 2];
      HEAP32[$9_1 + 332 >> 2] = 0;
      HEAP32[$9_1 + 316 >> 2] = 0;
      HEAP32[$9_1 + 300 >> 2] = 0;
      HEAPF32[$9_1 + 328 >> 2] = $17_1 + Math_fround($12_1 * $21_1);
      HEAPF32[$9_1 + 308 >> 2] = $24_1 + Math_fround($19_1 * $21_1);
      HEAPF32[$9_1 + 288 >> 2] = $29_1 + Math_fround($23_1 * $21_1);
      HEAPF32[$9_1 + 324 >> 2] = $33_1 + Math_fround($21_1 * Math_fround($34_1 - $47_1));
      HEAPF32[$9_1 + 320 >> 2] = $32_1 + Math_fround($21_1 * Math_fround($46_1 + $42_1));
      HEAPF32[$9_1 + 312 >> 2] = $30_1 + Math_fround($21_1 * Math_fround($47_1 + $31_1));
      HEAPF32[$9_1 + 304 >> 2] = $52_1 + Math_fround($21_1 * Math_fround($20_1 - $45_1));
      HEAPF32[$9_1 + 296 >> 2] = $48_1 + Math_fround($21_1 * Math_fround($51_1 - $46_1));
      HEAPF32[$9_1 + 292 >> 2] = $49_1 + Math_fround($21_1 * Math_fround($45_1 + $50_1));
      $573($9_1 + 24 | 0, $9_1 + 288 | 0, $9_1 + 480 | 0);
      HEAP32[$9_1 + 20 >> 2] = 0;
      HEAPF32[$9_1 + 16 >> 2] = Math_fround($26_1 - HEAPF32[$9_1 + 32 >> 2]) - $26_1;
      HEAPF32[$9_1 + 12 >> 2] = Math_fround($27_1 - HEAPF32[$9_1 + 28 >> 2]) - $27_1;
      HEAPF32[$9_1 + 8 >> 2] = Math_fround($28_1 - HEAPF32[$9_1 + 24 >> 2]) - $28_1;
      $89(($35_1 + Math_imul($22_1, 244) | 0) + 224 | 0, $9_1 + 8 | 0);
      $2_1 = HEAP32[$13_1 + 564 >> 2];
     }
     if (!($2_1 & 8)) {
      break label$10
     }
     $20_1 = HEAPF32[$7_1 + 12 >> 2];
     $571($9_1 + 512 | 0, HEAPF32[$13_1 + 456 >> 2], HEAPF32[$13_1 + 460 >> 2], HEAPF32[$13_1 + 464 >> 2]);
     $42_1 = HEAPF32[$13_1 + 396 >> 2];
     $33_1 = HEAPF32[$13_1 + 392 >> 2];
     $34_1 = HEAPF32[$13_1 + 388 >> 2];
     $565($13_1 + 4 | 0, $9_1 + 496 | 0);
     HEAPF32[$9_1 + 32 >> 2] = -HEAPF32[$9_1 + 504 >> 2];
     HEAPF32[$9_1 + 28 >> 2] = -HEAPF32[$9_1 + 500 >> 2];
     HEAPF32[$9_1 + 24 >> 2] = -HEAPF32[$9_1 + 496 >> 2];
     HEAPF32[$9_1 + 36 >> 2] = HEAPF32[$9_1 + 508 >> 2];
     $572($9_1 + 480 | 0, $9_1 + 24 | 0, $34_1, $33_1, $42_1);
     HEAP32[$16_1 >> 2] = 0;
     HEAP32[$16_1 + 4 >> 2] = 0;
     $2_1 = $16_1 + 8 | 0;
     HEAP32[$2_1 >> 2] = 0;
     HEAP32[$2_1 + 4 >> 2] = 0;
     HEAP32[$14_1 >> 2] = 0;
     HEAP32[$14_1 + 4 >> 2] = 0;
     $2_1 = $14_1 + 8 | 0;
     HEAP32[$2_1 >> 2] = 0;
     HEAP32[$2_1 + 4 >> 2] = 0;
     $23_1 = HEAPF32[$9_1 + 512 >> 2];
     HEAPF32[$9_1 + 24 >> 2] = $23_1;
     $24_1 = HEAPF32[$9_1 + 516 >> 2];
     HEAPF32[$9_1 + 44 >> 2] = $24_1;
     HEAP32[$9_1 + 68 >> 2] = 0;
     $19_1 = HEAPF32[$9_1 + 520 >> 2];
     HEAPF32[$9_1 + 64 >> 2] = $19_1;
     $30_1 = HEAPF32[$9_1 + 480 >> 2];
     $31_1 = HEAPF32[$9_1 + 484 >> 2];
     $32_1 = HEAPF32[$9_1 + 488 >> 2];
     $351($9_1 + 464 | 0, $9_1 + 24 | 0, $30_1, $31_1, $32_1);
     HEAP32[$9_1 + 460 >> 2] = 0;
     $17_1 = HEAPF32[$9_1 + 468 >> 2];
     $12_1 = HEAPF32[$9_1 + 464 >> 2];
     HEAPF32[$9_1 + 456 >> 2] = $20_1 * Math_fround(Math_fround($30_1 * $17_1) - Math_fround($31_1 * $12_1));
     $41_1 = Math_fround($32_1 * $12_1);
     $12_1 = HEAPF32[$9_1 + 472 >> 2];
     HEAPF32[$9_1 + 452 >> 2] = $20_1 * Math_fround($41_1 - Math_fround($30_1 * $12_1));
     HEAPF32[$9_1 + 448 >> 2] = $20_1 * Math_fround(Math_fround($31_1 * $12_1) - Math_fround($32_1 * $17_1));
     HEAP32[$9_1 + 440 >> 2] = 0;
     HEAP32[$9_1 + 444 >> 2] = 0;
     HEAPF32[$9_1 + 436 >> 2] = $30_1;
     HEAPF32[$9_1 + 432 >> 2] = -$31_1;
     HEAP32[$9_1 + 428 >> 2] = 0;
     HEAPF32[$9_1 + 424 >> 2] = -$30_1;
     HEAP32[$9_1 + 420 >> 2] = 0;
     HEAPF32[$9_1 + 416 >> 2] = $32_1;
     HEAP32[$9_1 + 412 >> 2] = 0;
     HEAPF32[$9_1 + 408 >> 2] = $31_1;
     HEAPF32[$9_1 + 404 >> 2] = -$32_1;
     HEAP32[$9_1 + 400 >> 2] = 0;
     $351($9_1 + 384 | 0, $9_1 + 24 | 0, $30_1, $31_1, $32_1);
     $29_1 = HEAPF32[$9_1 + 392 >> 2];
     $17_1 = HEAPF32[$9_1 + 388 >> 2];
     $12_1 = HEAPF32[$9_1 + 384 >> 2];
     $245($9_1 + 288 | 0, $9_1 + 400 | 0, $9_1 + 24 | 0);
     HEAP32[$9_1 + 380 >> 2] = 0;
     HEAP32[$9_1 + 364 >> 2] = 0;
     HEAP32[$9_1 + 348 >> 2] = 0;
     HEAPF32[$9_1 + 376 >> 2] = $19_1 + Math_fround($20_1 * HEAPF32[$9_1 + 328 >> 2]);
     HEAPF32[$9_1 + 356 >> 2] = $24_1 + Math_fround($20_1 * HEAPF32[$9_1 + 308 >> 2]);
     HEAPF32[$9_1 + 336 >> 2] = $23_1 + Math_fround($20_1 * HEAPF32[$9_1 + 288 >> 2]);
     HEAPF32[$9_1 + 372 >> 2] = Math_fround($20_1 * Math_fround(HEAPF32[$9_1 + 324 >> 2] - $12_1)) + Math_fround(0.0);
     HEAPF32[$9_1 + 368 >> 2] = Math_fround($20_1 * Math_fround($17_1 + HEAPF32[$9_1 + 320 >> 2])) + Math_fround(0.0);
     HEAPF32[$9_1 + 360 >> 2] = Math_fround($20_1 * Math_fround($12_1 + HEAPF32[$9_1 + 312 >> 2])) + Math_fround(0.0);
     HEAPF32[$9_1 + 352 >> 2] = Math_fround($20_1 * Math_fround(HEAPF32[$9_1 + 304 >> 2] - $29_1)) + Math_fround(0.0);
     HEAPF32[$9_1 + 344 >> 2] = Math_fround($20_1 * Math_fround(HEAPF32[$9_1 + 296 >> 2] - $17_1)) + Math_fround(0.0);
     HEAPF32[$9_1 + 340 >> 2] = Math_fround($20_1 * Math_fround($29_1 + HEAPF32[$9_1 + 292 >> 2])) + Math_fround(0.0);
     $573($9_1 + 288 | 0, $9_1 + 336 | 0, $9_1 + 448 | 0);
     $572($9_1 + 272 | 0, $9_1 + 496 | 0, Math_fround($30_1 - HEAPF32[$9_1 + 288 >> 2]), Math_fround($31_1 - HEAPF32[$9_1 + 292 >> 2]), Math_fround($32_1 - HEAPF32[$9_1 + 296 >> 2]));
     HEAP32[$9_1 + 20 >> 2] = 0;
     HEAPF32[$9_1 + 16 >> 2] = HEAPF32[$9_1 + 280 >> 2] - $42_1;
     HEAPF32[$9_1 + 12 >> 2] = HEAPF32[$9_1 + 276 >> 2] - $33_1;
     HEAPF32[$9_1 + 8 >> 2] = HEAPF32[$9_1 + 272 >> 2] - $34_1;
     $89(($35_1 + Math_imul($22_1, 244) | 0) + 224 | 0, $9_1 + 8 | 0);
    }
    $18_1 = $18_1 - 1 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue;
   } else {
    label$16 : {
     $25 = ($6_1 | 0) > 0 ? $6_1 : 0;
     $10_1 = $25;
     $1_1 = $5_1;
     while (1) {
      if (!$10_1) {
       break label$16
      }
      $2_1 = HEAP32[$1_1 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1);
      HEAP32[$2_1 + 36 >> 2] = 0;
      $10_1 = $10_1 - 1 | 0;
      $1_1 = $1_1 + 4 | 0;
      continue;
     };
    }
   }
   break;
  };
  $1_1 = HEAP32[$0_1 + 168 >> 2];
  label$18 : {
   if (($6_1 | 0) <= ($1_1 | 0)) {
    break label$18
   }
   if (HEAP32[$0_1 + 172 >> 2] >= ($6_1 | 0)) {
    break label$18
   }
   $10_1 = 0;
   $18_1 = 0;
   $14_1 = $0_1 + 164 | 0;
   if ($6_1) {
    $18_1 = $53($6_1 << 3);
    $1_1 = HEAP32[$0_1 + 168 >> 2];
   }
   $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
   while (1) {
    if ($1_1) {
     $8_1 = HEAP32[$0_1 + 176 >> 2] + $10_1 | 0;
     $2_1 = HEAP32[$8_1 + 4 >> 2];
     $16_1 = $10_1 + $18_1 | 0;
     HEAP32[$16_1 >> 2] = HEAP32[$8_1 >> 2];
     HEAP32[$16_1 + 4 >> 2] = $2_1;
     $1_1 = $1_1 - 1 | 0;
     $10_1 = $10_1 + 8 | 0;
     continue;
    }
    break;
   };
   $96($14_1);
   HEAP32[$0_1 + 176 >> 2] = $18_1;
   HEAP8[$0_1 + 180 | 0] = 1;
   HEAP32[$0_1 + 172 >> 2] = $6_1;
  }
  HEAP32[$0_1 + 168 >> 2] = $6_1;
  $18_1 = $25;
  $1_1 = $5_1;
  $8_1 = 0;
  $2_1 = 0;
  while (1) {
   if ($18_1) {
    $16_1 = HEAP32[$0_1 + 176 >> 2] + $8_1 | 0;
    $10_1 = HEAP32[$1_1 >> 2];
    $6_1 = HEAP32[$10_1 + 44 >> 2];
    if ($6_1) {
     $1($6_1, 0, 64);
     $10_1 = HEAP32[$1_1 >> 2];
    }
    label$24 : {
     if (HEAPU8[$10_1 + 20 | 0]) {
      FUNCTION_TABLE[HEAP32[HEAP32[$10_1 >> 2] + 16 >> 2]]($10_1, $16_1);
      $6_1 = HEAP32[$16_1 >> 2];
      break label$24;
     }
     HEAP32[$16_1 >> 2] = 0;
     HEAP32[$16_1 + 4 >> 2] = 0;
     $6_1 = 0;
    }
    $18_1 = $18_1 - 1 | 0;
    $1_1 = $1_1 + 4 | 0;
    $8_1 = $8_1 + 8 | 0;
    $2_1 = $2_1 + $6_1 | 0;
    continue;
   }
   break;
  };
  $600($0_1 + 44 | 0, $2_1);
  while (1) {
   if (($25 | 0) != ($53_1 | 0)) {
    $63_1 = $53_1 << 3;
    $54_1 = $63_1 + HEAP32[$0_1 + 176 >> 2] | 0;
    $1_1 = 0;
    label$29 : {
     if (!HEAP32[$54_1 >> 2]) {
      break label$29
     }
     $55_1 = ($53_1 << 2) + $5_1 | 0;
     $38_1 = HEAP32[$55_1 >> 2];
     $36_1 = HEAP32[$38_1 + 32 >> 2];
     $6_1 = HEAP32[$0_1 + 56 >> 2];
     $37_1 = HEAP32[$38_1 + 28 >> 2];
     $18_1 = $591($0_1, $37_1, HEAPF32[$7_1 + 12 >> 2]);
     $14_1 = $591($0_1, $36_1, HEAPF32[$7_1 + 12 >> 2]);
     $1_1 = HEAP32[$38_1 + 24 >> 2];
     $16_1 = ($1_1 | 0) > 0 ? $1_1 : HEAP32[$7_1 + 20 >> 2];
     if (($16_1 | 0) > HEAP32[$0_1 + 184 >> 2]) {
      HEAP32[$0_1 + 184 >> 2] = $16_1
     }
     $8_1 = HEAP32[$0_1 + 16 >> 2];
     $2_1 = 0;
     $11_1 = $6_1 + Math_imul($64_1, 152) | 0;
     $10_1 = $11_1;
     while (1) {
      if (HEAP32[$54_1 >> 2] > ($2_1 | 0)) {
       $6_1 = $1($10_1, 0, 152);
       $1_1 = $6_1 + 120 | 0;
       HEAP32[$1_1 >> 2] = -8388609;
       HEAP32[$1_1 + 4 >> 2] = 2139095039;
       HEAP32[$6_1 + 148 >> 2] = $14_1;
       HEAP32[$6_1 + 144 >> 2] = $18_1;
       $1_1 = $6_1 + 96 | 0;
       HEAP32[$1_1 >> 2] = 0;
       HEAP32[$1_1 + 4 >> 2] = 0;
       HEAP32[$6_1 + 136 >> 2] = $16_1;
       $10_1 = $6_1 + 152 | 0;
       $2_1 = $2_1 + 1 | 0;
       continue;
      }
      break;
     };
     $6_1 = $8_1 + Math_imul($18_1, 244) | 0;
     $1_1 = $6_1;
     HEAP32[$1_1 + 144 >> 2] = 0;
     HEAP32[$1_1 + 148 >> 2] = 0;
     $1_1 = $1_1 + 152 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $1_1 = $6_1 + 160 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $1_1 = $6_1 + 168 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$6_1 + 64 >> 2] = 0;
     HEAP32[$6_1 + 68 >> 2] = 0;
     $1_1 = $6_1 + 88 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $1_1 = $6_1 + 80 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $1_1 = $6_1 + 72 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $2_1 = $8_1 + Math_imul($14_1, 244) | 0;
     $1_1 = $2_1;
     HEAP32[$1_1 + 144 >> 2] = 0;
     HEAP32[$1_1 + 148 >> 2] = 0;
     $1_1 = $1_1 + 152 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $1_1 = $2_1 + 160 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $1_1 = $2_1 + 168 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 64 >> 2] = 0;
     HEAP32[$2_1 + 68 >> 2] = 0;
     $1_1 = $2_1 + 72 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $1_1 = $2_1 + 80 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $1_1 = $2_1 + 88 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAPF32[$11_1 + 116 >> 2] = HEAPF32[$7_1 + 40 >> 2];
     HEAP32[$9_1 + 52 >> 2] = $11_1 + 112;
     HEAP32[$9_1 + 48 >> 2] = 38;
     HEAP32[$9_1 + 44 >> 2] = $11_1 + 32;
     HEAP32[$9_1 + 40 >> 2] = $11_1 + 48;
     HEAP32[$9_1 + 36 >> 2] = $11_1;
     HEAP32[$9_1 + 32 >> 2] = $11_1 + 16;
     HEAP32[$9_1 + 64 >> 2] = $11_1 + 124;
     HEAP32[$9_1 + 60 >> 2] = $11_1 + 120;
     HEAP32[$9_1 + 56 >> 2] = $11_1 + 116;
     HEAPF32[$9_1 + 28 >> 2] = HEAPF32[$7_1 + 32 >> 2];
     HEAPF32[$9_1 + 72 >> 2] = HEAPF32[$7_1 + 4 >> 2];
     HEAPF32[$9_1 + 24 >> 2] = Math_fround(1.0) / HEAPF32[$7_1 + 12 >> 2];
     HEAP32[$9_1 + 68 >> 2] = HEAP32[$7_1 + 20 >> 2];
     $1_1 = HEAP32[$55_1 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]]($1_1, $9_1 + 24 | 0);
     $75_1 = $36_1 + 324 | 0;
     $76_1 = $37_1 + 324 | 0;
     $10_1 = $11_1 + 132 | 0;
     $77_1 = $2_1 + 232 | 0;
     $78_1 = $2_1 + 228 | 0;
     $79_1 = $2_1 + 224 | 0;
     $80_1 = $2_1 + 216 | 0;
     $81_1 = $2_1 + 212 | 0;
     $13_1 = $2_1 + 208 | 0;
     $39_1 = $2_1 + 240 | 0;
     $43_1 = $6_1 + 232 | 0;
     $44_1 = $6_1 + 228 | 0;
     $22_1 = $6_1 + 224 | 0;
     $35_1 = $6_1 + 216 | 0;
     $40_1 = $6_1 + 212 | 0;
     $15_1 = $6_1 + 208 | 0;
     $11_1 = $6_1 + 240 | 0;
     $2_1 = 0;
     while (1) {
      if (HEAP32[$54_1 >> 2] > ($2_1 | 0)) {
       $12_1 = HEAPF32[HEAP32[$55_1 >> 2] + 16 >> 2];
       $1_1 = $10_1 - 8 | 0;
       if ($12_1 <= HEAPF32[$1_1 >> 2]) {
        HEAPF32[$1_1 >> 2] = $12_1
       }
       $12_1 = Math_fround(-$12_1);
       $1_1 = $10_1 - 12 | 0;
       if ($12_1 >= HEAPF32[$1_1 >> 2]) {
        HEAPF32[$1_1 >> 2] = $12_1
       }
       HEAP32[$10_1 >> 2] = $38_1;
       $56_1 = $10_1 - 132 | 0;
       $57_1 = $10_1 - 128 | 0;
       $58_1 = $10_1 - 124 | 0;
       $351($9_1 + 400 | 0, HEAP32[$38_1 + 28 >> 2] + 324 | 0, HEAPF32[$56_1 >> 2], HEAPF32[$57_1 >> 2], HEAPF32[$58_1 >> 2]);
       $1_1 = HEAP32[$38_1 + 28 >> 2];
       $19_1 = HEAPF32[$1_1 + 608 >> 2];
       $17_1 = HEAPF32[$1_1 + 612 >> 2];
       $12_1 = HEAPF32[$1_1 + 604 >> 2];
       HEAP32[$10_1 - 56 >> 2] = 0;
       HEAPF32[$10_1 - 68 >> 2] = $12_1 * HEAPF32[$9_1 + 400 >> 2];
       HEAPF32[$10_1 - 60 >> 2] = $17_1 * HEAPF32[$9_1 + 408 >> 2];
       HEAPF32[$10_1 + -64 >> 2] = $19_1 * HEAPF32[$9_1 + 404 >> 2];
       $59_1 = $10_1 - 100 | 0;
       $60_1 = $10_1 - 96 | 0;
       $61_1 = $10_1 - 92 | 0;
       $351($9_1 + 400 | 0, HEAP32[$38_1 + 32 >> 2] + 324 | 0, HEAPF32[$59_1 >> 2], HEAPF32[$60_1 >> 2], HEAPF32[$61_1 >> 2]);
       $1_1 = HEAP32[$38_1 + 32 >> 2];
       $19_1 = HEAPF32[$1_1 + 608 >> 2];
       $17_1 = HEAPF32[$1_1 + 612 >> 2];
       $12_1 = HEAPF32[$1_1 + 604 >> 2];
       HEAP32[$10_1 - 40 >> 2] = 0;
       HEAPF32[$10_1 - 52 >> 2] = $12_1 * HEAPF32[$9_1 + 400 >> 2];
       HEAPF32[$10_1 - 44 >> 2] = $17_1 * HEAPF32[$9_1 + 408 >> 2];
       HEAPF32[$10_1 - 48 >> 2] = $19_1 * HEAPF32[$9_1 + 404 >> 2];
       $18_1 = $10_1 - 108 | 0;
       $29_1 = HEAPF32[$18_1 >> 2];
       $14_1 = $10_1 - 116 | 0;
       $23_1 = HEAPF32[$14_1 >> 2];
       $16_1 = $10_1 - 112 | 0;
       $24_1 = HEAPF32[$16_1 >> 2];
       $33_1 = HEAPF32[$37_1 + 404 >> 2];
       $351($9_1 + 400 | 0, $76_1, HEAPF32[$56_1 >> 2], HEAPF32[$57_1 >> 2], HEAPF32[$58_1 >> 2]);
       $8_1 = $10_1 - 76 | 0;
       $19_1 = HEAPF32[$8_1 >> 2];
       $6_1 = $10_1 - 84 | 0;
       $17_1 = HEAPF32[$6_1 >> 2];
       $1_1 = $10_1 - 80 | 0;
       $12_1 = HEAPF32[$1_1 >> 2];
       $34_1 = HEAPF32[$36_1 + 404 >> 2];
       $351($9_1 + 336 | 0, $75_1, HEAPF32[$59_1 >> 2], HEAPF32[$60_1 >> 2], HEAPF32[$61_1 >> 2]);
       $65_1 = Math_fround(0.0);
       $26_1 = HEAPF32[$14_1 >> 2];
       $27_1 = HEAPF32[$16_1 >> 2];
       $28_1 = HEAPF32[$18_1 >> 2];
       $45_1 = HEAPF32[$56_1 >> 2];
       $46_1 = HEAPF32[$57_1 >> 2];
       $47_1 = HEAPF32[$58_1 >> 2];
       $48_1 = HEAPF32[$6_1 >> 2];
       $49_1 = HEAPF32[$1_1 >> 2];
       $50_1 = HEAPF32[$8_1 >> 2];
       $51_1 = HEAPF32[$59_1 >> 2];
       $52_1 = HEAPF32[$60_1 >> 2];
       $20_1 = HEAPF32[$61_1 >> 2];
       $12_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($33_1 * $23_1) * $26_1) + Math_fround(Math_fround($33_1 * $24_1) * $27_1)) + Math_fround(Math_fround($33_1 * $29_1) * $28_1)) + Math_fround(Math_fround(Math_fround(HEAPF32[$9_1 + 400 >> 2] * $45_1) + Math_fround(HEAPF32[$9_1 + 404 >> 2] * $46_1)) + Math_fround(HEAPF32[$9_1 + 408 >> 2] * $47_1))) + Math_fround(Math_fround(Math_fround(Math_fround($34_1 * $17_1) * $48_1) + Math_fround(Math_fround($34_1 * $12_1) * $49_1)) + Math_fround(Math_fround($34_1 * $19_1) * $50_1))) + Math_fround(Math_fround(Math_fround(HEAPF32[$9_1 + 336 >> 2] * $51_1) + Math_fround(HEAPF32[$9_1 + 340 >> 2] * $52_1)) + Math_fround(HEAPF32[$9_1 + 344 >> 2] * $20_1)));
       $62_1 = Math_fround(Math_abs($12_1)) > Math_fround(1.1920928955078125e-07) ? Math_fround(Math_fround(1.0) / $12_1) : Math_fround(0.0);
       HEAPF32[$10_1 - 24 >> 2] = $62_1;
       $66_1 = Math_fround(0.0);
       $67_1 = Math_fround(0.0);
       $68_1 = Math_fround(0.0);
       $69_1 = Math_fround(0.0);
       $70_1 = Math_fround(0.0);
       $71_1 = Math_fround(0.0);
       if (HEAP32[$11_1 >> 2]) {
        $70_1 = HEAPF32[$44_1 >> 2];
        $69_1 = HEAPF32[$22_1 >> 2];
        $67_1 = HEAPF32[$40_1 >> 2];
        $68_1 = HEAPF32[$15_1 >> 2];
        $66_1 = HEAPF32[$35_1 >> 2];
        $71_1 = HEAPF32[$43_1 >> 2];
       }
       $72_1 = Math_fround(0.0);
       $73_1 = Math_fround(0.0);
       $74_1 = Math_fround(0.0);
       $41_1 = Math_fround(0.0);
       $21_1 = Math_fround(0.0);
       if (HEAP32[$39_1 >> 2]) {
        $41_1 = HEAPF32[$78_1 >> 2];
        $74_1 = HEAPF32[$79_1 >> 2];
        $72_1 = HEAPF32[$81_1 >> 2];
        $73_1 = HEAPF32[$13_1 >> 2];
        $65_1 = HEAPF32[$80_1 >> 2];
        $21_1 = HEAPF32[$77_1 >> 2];
       }
       $30_1 = HEAPF32[$37_1 + 380 >> 2];
       $31_1 = HEAPF32[$37_1 + 372 >> 2];
       $32_1 = HEAPF32[$37_1 + 376 >> 2];
       $42_1 = HEAPF32[$37_1 + 396 >> 2];
       $33_1 = HEAPF32[$37_1 + 388 >> 2];
       $34_1 = HEAPF32[$37_1 + 392 >> 2];
       $29_1 = HEAPF32[$36_1 + 380 >> 2];
       $23_1 = HEAPF32[$36_1 + 372 >> 2];
       $24_1 = HEAPF32[$36_1 + 376 >> 2];
       $19_1 = HEAPF32[$36_1 + 396 >> 2];
       $17_1 = HEAPF32[$36_1 + 388 >> 2];
       $12_1 = HEAPF32[$36_1 + 392 >> 2];
       HEAP32[$10_1 - 32 >> 2] = 0;
       $1_1 = $10_1 - 20 | 0;
       HEAPF32[$1_1 >> 2] = Math_fround(HEAPF32[$1_1 >> 2] * $62_1) + Math_fround($62_1 * Math_fround(Math_fround(0.0) - Math_fround(HEAPF32[$9_1 + 72 >> 2] * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($68_1 + $31_1) * $26_1) + Math_fround(Math_fround($67_1 + $32_1) * $27_1)) + Math_fround(Math_fround($66_1 + $30_1) * $28_1)) + Math_fround(Math_fround(Math_fround(Math_fround($69_1 + $33_1) * $45_1) + Math_fround(Math_fround($70_1 + $34_1) * $46_1)) + Math_fround(Math_fround($71_1 + $42_1) * $47_1))) + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($73_1 + $23_1) * $48_1) + Math_fround(Math_fround($72_1 + $24_1) * $49_1)) + Math_fround(Math_fround($65_1 + $29_1) * $50_1)) + Math_fround(Math_fround(Math_fround(Math_fround($74_1 + $17_1) * $51_1) + Math_fround(Math_fround($41_1 + $12_1) * $52_1)) + Math_fround(Math_fround($21_1 + $19_1) * $20_1)))))));
       $10_1 = $10_1 + 152 | 0;
       $2_1 = $2_1 + 1 | 0;
       continue;
      }
      break;
     };
     $1_1 = HEAP32[HEAP32[$0_1 + 176 >> 2] + $63_1 >> 2];
    }
    $53_1 = $53_1 + 1 | 0;
    $64_1 = $1_1 + $64_1 | 0;
    continue;
   }
   break;
  };
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1, $3_1, $4_1, $7_1);
  $4_1 = HEAP32[$0_1 + 68 >> 2];
  $3_1 = HEAP32[$0_1 + 28 >> 2];
  $2_1 = HEAP32[$0_1 + 48 >> 2];
  $605($0_1 + 124 | 0, $2_1);
  $605($0_1 + 104 | 0, $3_1 << (HEAP32[$7_1 + 72 >> 2] >>> 4 & 1));
  $605($0_1 + 144 | 0, $4_1);
  $1_1 = 0;
  $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
  $10_1 = 0;
  while (1) {
   if (($2_1 | 0) == ($10_1 | 0)) {
    $1_1 = 0;
    $2_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
    $10_1 = 0;
    while (1) {
     if (($2_1 | 0) == ($10_1 | 0)) {
      $1_1 = 0;
      $2_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
      $10_1 = 0;
      while (1) {
       if (($2_1 | 0) != ($10_1 | 0)) {
        HEAP32[HEAP32[$0_1 + 156 >> 2] + $1_1 >> 2] = $10_1;
        $1_1 = $1_1 + 4 | 0;
        $10_1 = $10_1 + 1 | 0;
        continue;
       }
       break;
      };
      global$0 = $9_1 + 528 | 0;
     } else {
      HEAP32[HEAP32[$0_1 + 116 >> 2] + $1_1 >> 2] = $10_1;
      $1_1 = $1_1 + 4 | 0;
      $10_1 = $10_1 + 1 | 0;
      continue;
     }
     break;
    };
   } else {
    HEAP32[HEAP32[$0_1 + 136 >> 2] + $1_1 >> 2] = $10_1;
    $1_1 = $1_1 + 4 | 0;
    $10_1 = $10_1 + 1 | 0;
    continue;
   }
   break;
  };
  return Math_fround(Math_fround(0.0));
 }
 
 function $605($0_1, $1_1) {
  if (HEAP32[$0_1 + 4 >> 2] < ($1_1 | 0)) {
   $145($0_1, $1_1)
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $606($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = Math_fround(0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 32 >> 2]]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1);
  $9_1 = HEAP32[$7_1 + 20 >> 2];
  $10_1 = HEAP32[$0_1 + 184 >> 2];
  $11_1 = ($9_1 | 0) > ($10_1 | 0) ? $9_1 : $10_1;
  $11_1 = ($11_1 | 0) > 0 ? $11_1 : 0;
  $9_1 = (($9_1 | 0) < ($10_1 | 0) ? $10_1 : $9_1) - 1 | 0;
  while (1) {
   label$2 : {
    if (($12_1 | 0) == ($11_1 | 0)) {
     break label$2
    }
    $13_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 40 >> 2]]($0_1, $12_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1));
    HEAPF32[$0_1 + 228 >> 2] = $13_1;
    if (($9_1 | 0) <= ($12_1 | 0)) {
     break label$2
    }
    $12_1 = $12_1 + 1 | 0;
    if (!(HEAPF32[$7_1 + 92 >> 2] >= $13_1)) {
     continue
    }
   }
   break;
  };
  return Math_fround(Math_fround(0.0));
 }
 
 function $607($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[$0_1 + 4 >> 2];
  $2_1 = $3_1;
  if (($3_1 | 0) == HEAP32[$0_1 + 8 >> 2]) {
   $601($0_1, $3_1 ? $3_1 << 1 : 1);
   $2_1 = HEAP32[$0_1 + 4 >> 2];
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1 + 1;
  $6_1 = Math_imul($3_1, 244);
  $4_1 = $6_1 + HEAP32[$0_1 + 12 >> 2] | 0;
  $5_1 = $4_1 + 8 | 0;
  $3_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $2_1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  $3_1 = $1_1 + 24 | 0;
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  $5_1 = $4_1 + 24 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $2_1;
  $2_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$4_1 + 16 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$4_1 + 20 >> 2] = $2_1;
  $2_1 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$4_1 + 32 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$4_1 + 36 >> 2] = $2_1;
  $3_1 = $1_1 + 40 | 0;
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  $5_1 = $4_1 + 40 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $2_1;
  $2_1 = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$4_1 + 48 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$4_1 + 52 >> 2] = $2_1;
  $3_1 = $1_1 + 56 | 0;
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  $5_1 = $4_1 + 56 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $2_1;
  $2($4_1 - -64 | 0, $1_1 - -64 | 0, 180);
  return $6_1 + HEAP32[$0_1 + 12 >> 2] | 0;
 }
 
 function $608($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  if ($1_1) {
   $1_1 = HEAP32[$1_1 + 252 >> 2] << 30 >> 31 & $1_1
  } else {
   $1_1 = 0
  }
  HEAP32[$0_1 + 64 >> 2] = 0;
  HEAP32[$0_1 + 68 >> 2] = 0;
  HEAP32[$0_1 + 144 >> 2] = 0;
  HEAP32[$0_1 + 148 >> 2] = 0;
  $3_1 = $0_1 + 88 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0_1 + 80 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0_1 + 72 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0_1 + 152 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0_1 + 160 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $0_1 + 168 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  label$3 : {
   if ($1_1) {
    $3_1 = HEAP32[$1_1 + 8 >> 2];
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $3_1;
    $4_1 = $1_1 + 12 | 0;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    $3_1 = $0_1 + 8 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $5_1;
    $4_1 = $1_1 + 28 | 0;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    $3_1 = $0_1 + 24 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $5_1;
    $3_1 = $1_1 + 20 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$0_1 + 16 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$0_1 + 20 >> 2] = $4_1;
    $4_1 = $1_1 + 44 | 0;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    $3_1 = $0_1 + 40 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $5_1;
    $3_1 = $1_1 + 36 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$0_1 + 32 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$0_1 + 36 >> 2] = $4_1;
    $3_1 = $1_1 + 52 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$0_1 + 48 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$0_1 + 52 >> 2] = $4_1;
    $4_1 = $1_1 + 60 | 0;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    $3_1 = $0_1 + 56 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $5_1;
    $8_1 = HEAPF32[$1_1 + 412 >> 2];
    $3_1 = $1_1 + 416 | 0;
    $9_1 = HEAPF32[$3_1 >> 2];
    $10_1 = HEAPF32[$1_1 + 408 >> 2];
    $6_1 = HEAPF32[$1_1 + 404 >> 2];
    HEAP32[$0_1 + 140 >> 2] = 0;
    HEAPF32[$0_1 + 136 >> 2] = $6_1 * $9_1;
    HEAPF32[$0_1 + 132 >> 2] = $6_1 * $8_1;
    HEAPF32[$0_1 + 128 >> 2] = $6_1 * $10_1;
    HEAP32[$0_1 + 240 >> 2] = $1_1;
    $5_1 = $1_1 + 612 | 0;
    $11_1 = HEAP32[$5_1 + 4 >> 2];
    $4_1 = $0_1 + 104 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $11_1;
    $4_1 = HEAP32[$1_1 + 608 >> 2];
    HEAP32[$0_1 + 96 >> 2] = HEAP32[$1_1 + 604 >> 2];
    HEAP32[$0_1 + 100 >> 2] = $4_1;
    $5_1 = HEAP32[$3_1 + 4 >> 2];
    $4_1 = $0_1 + 120 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $5_1;
    $3_1 = HEAP32[$1_1 + 412 >> 2];
    HEAP32[$0_1 + 112 >> 2] = HEAP32[$1_1 + 408 >> 2];
    HEAP32[$0_1 + 116 >> 2] = $3_1;
    $4_1 = $1_1 + 380 | 0;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    $3_1 = $0_1 + 184 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $5_1;
    $3_1 = HEAP32[$1_1 + 376 >> 2];
    HEAP32[$0_1 + 176 >> 2] = HEAP32[$1_1 + 372 >> 2];
    HEAP32[$0_1 + 180 >> 2] = $3_1;
    $3_1 = HEAP32[$1_1 + 392 >> 2];
    HEAP32[$0_1 + 192 >> 2] = HEAP32[$1_1 + 388 >> 2];
    HEAP32[$0_1 + 196 >> 2] = $3_1;
    $4_1 = $1_1 + 396 | 0;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    $3_1 = $0_1 + 200 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $5_1;
    $8_1 = HEAPF32[$1_1 + 476 >> 2];
    $9_1 = HEAPF32[$1_1 + 480 >> 2];
    $10_1 = HEAPF32[$1_1 + 472 >> 2];
    $6_1 = HEAPF32[$1_1 + 404 >> 2];
    HEAP32[$0_1 + 220 >> 2] = 0;
    HEAPF32[$0_1 + 216 >> 2] = Math_fround($6_1 * $9_1) * $2_1;
    HEAPF32[$0_1 + 212 >> 2] = Math_fround($6_1 * $8_1) * $2_1;
    HEAPF32[$0_1 + 208 >> 2] = Math_fround($6_1 * $10_1) * $2_1;
    $77($7_1, HEAPF32[$1_1 + 488 >> 2], HEAPF32[$1_1 + 492 >> 2], HEAPF32[$1_1 + 496 >> 2], $1_1 + 324 | 0);
    HEAPF32[$0_1 + 228 >> 2] = HEAPF32[$7_1 + 4 >> 2] * $2_1;
    HEAPF32[$0_1 + 224 >> 2] = HEAPF32[$7_1 >> 2] * $2_1;
    $2_1 = Math_fround(HEAPF32[$7_1 + 8 >> 2] * $2_1);
    break label$3;
   }
   HEAP32[$0_1 + 4 >> 2] = 0;
   HEAP32[$0_1 + 8 >> 2] = 0;
   HEAP32[$0_1 >> 2] = 1065353216;
   HEAP32[$0_1 + 240 >> 2] = 0;
   HEAP32[$0_1 + 128 >> 2] = 0;
   HEAP32[$0_1 + 132 >> 2] = 0;
   HEAP32[$0_1 + 112 >> 2] = 1065353216;
   HEAP32[$0_1 + 116 >> 2] = 1065353216;
   HEAP32[$0_1 + 96 >> 2] = 1065353216;
   HEAP32[$0_1 + 100 >> 2] = 1065353216;
   $1_1 = $0_1 + 12 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0_1 + 24 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$0_1 + 20 >> 2] = 1065353216;
   $1_1 = $0_1 + 32 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0_1 + 44 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$0_1 + 40 >> 2] = 1065353216;
   $1_1 = $0_1 + 52 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$0_1 + 60 >> 2] = 0;
   $1_1 = $0_1 + 136 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0_1 + 120 | 0;
   HEAP32[$1_1 >> 2] = 1065353216;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0_1 + 104 | 0;
   HEAP32[$1_1 >> 2] = 1065353216;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1($0_1 + 176 | 0, 0, 56);
   $2_1 = Math_fround(0.0);
  }
  HEAP32[$0_1 + 236 >> 2] = 0;
  HEAPF32[$0_1 + 232 >> 2] = $2_1;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $609($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] < ($1_1 | 0)) {
   if ($1_1) {
    $4_1 = $53(Math_imul($1_1, 152))
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   while (1) {
    if ($2_1) {
     $2($4_1 + $3_1 | 0, HEAP32[$0_1 + 12 >> 2] + $3_1 | 0, 152);
     $2_1 = $2_1 - 1 | 0;
     $3_1 = $3_1 + 152 | 0;
     continue;
    }
    break;
   };
   $96($0_1);
   HEAP32[$0_1 + 12 >> 2] = $4_1;
   HEAP8[$0_1 + 16 | 0] = 1;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $610($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = 0, $29_1 = 0;
  $6_1 = global$0 - 320 | 0;
  global$0 = $6_1;
  $566($1_1, $2_1, Math_fround(1.0), $6_1 + 304 | 0, $6_1 + 288 | 0);
  $566($3_1, $4_1, Math_fround(1.0), $6_1 + 272 | 0, $6_1 + 256 | 0);
  $2_1 = HEAP32[$0_1 + 12 >> 2];
  $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1));
  $2_1 = HEAP32[$0_1 + 16 >> 2];
  if ($2_1) {
   $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1))
  }
  $4_1 = 0;
  $13_1 = $8_1;
  $8_1 = HEAPF32[$6_1 + 288 >> 2];
  $10_1 = Math_fround($8_1 * $8_1);
  $8_1 = HEAPF32[$6_1 + 292 >> 2];
  $15_1 = Math_fround($10_1 + Math_fround($8_1 * $8_1));
  $8_1 = HEAPF32[$6_1 + 296 >> 2];
  $10_1 = $7_1;
  $7_1 = HEAPF32[$6_1 + 256 >> 2];
  $11_1 = Math_fround($7_1 * $7_1);
  $7_1 = HEAPF32[$6_1 + 260 >> 2];
  $11_1 = Math_fround($11_1 + Math_fround($7_1 * $7_1));
  $7_1 = HEAPF32[$6_1 + 264 >> 2];
  $19_1 = Math_fround(Math_fround($13_1 * Math_fround(Math_sqrt(Math_fround($15_1 + Math_fround($8_1 * $8_1))))) + Math_fround($10_1 * Math_fround(Math_sqrt(Math_fround($11_1 + Math_fround($7_1 * $7_1))))));
  $21_1 = HEAPF32[$6_1 + 272 >> 2];
  $22_1 = HEAPF32[$6_1 + 304 >> 2];
  $11_1 = Math_fround($21_1 - $22_1);
  $7_1 = $11_1;
  $8_1 = Math_fround($7_1 * $7_1);
  $23_1 = HEAPF32[$6_1 + 276 >> 2];
  $24_1 = HEAPF32[$6_1 + 308 >> 2];
  $13_1 = Math_fround($23_1 - $24_1);
  $7_1 = $13_1;
  $8_1 = Math_fround($8_1 + Math_fround($7_1 * $7_1));
  $25 = HEAPF32[$6_1 + 280 >> 2];
  $26_1 = HEAPF32[$6_1 + 312 >> 2];
  $10_1 = Math_fround($25 - $26_1);
  $7_1 = $10_1;
  label$2 : {
   if (Math_fround($19_1 + Math_fround(Math_sqrt(Math_fround($8_1 + Math_fround($7_1 * $7_1))))) == Math_fround(0.0)) {
    break label$2
   }
   HEAP8[$6_1 + 232 | 0] = 0;
   HEAP32[$6_1 + 228 >> 2] = 1566444395;
   HEAP32[$6_1 + 192 >> 2] = 11292;
   $611($0_1, $1_1, $3_1, $6_1 + 192 | 0);
   $9_1 = $6_1 + 220 | 0;
   $14_1 = HEAP32[$9_1 + 4 >> 2];
   $2_1 = $6_1 + 248 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$9_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $14_1;
   $2_1 = HEAP32[$6_1 + 216 >> 2];
   HEAP32[$6_1 + 240 >> 2] = HEAP32[$6_1 + 212 >> 2];
   HEAP32[$6_1 + 244 >> 2] = $2_1;
   if (!HEAPU8[$6_1 + 232 | 0]) {
    break label$2
   }
   $16_1 = HEAPF32[$6_1 + 196 >> 2];
   $17_1 = HEAPF32[$6_1 + 200 >> 2];
   $18_1 = HEAPF32[$6_1 + 204 >> 2];
   if (Math_fround($19_1 + Math_fround(Math_fround(Math_fround($11_1 * $16_1) + Math_fround($13_1 * $17_1)) + Math_fround($10_1 * $18_1))) <= Math_fround(1.1920928955078125e-07)) {
    break label$2
   }
   $20_1 = Math_fround(HEAPF32[$6_1 + 228 >> 2] + HEAPF32[$5_1 + 172 >> 2]);
   $14_1 = $6_1 + 20 | 0;
   $28_1 = $6_1 + 176 | 0;
   $27_1 = HEAPF32[$6_1 + 208 >> 2];
   $7_1 = Math_fround(0.0);
   $2_1 = 0;
   while (1) {
    label$4 : {
     label$5 : {
      if ($20_1 > Math_fround(1.0000000474974513e-03)) {
       $4_1 = HEAP32[$5_1 + 168 >> 2];
       if ($4_1) {
        HEAP32[$6_1 + 136 >> 2] = 1065353216;
        HEAP32[$6_1 + 140 >> 2] = 0;
        HEAP32[$6_1 + 128 >> 2] = 1065353216;
        HEAP32[$6_1 + 132 >> 2] = 1065353216;
        FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 28 >> 2]]($4_1, $6_1 + 240 | 0, Math_fround(.20000000298023224), $6_1 + 128 | 0);
       }
       $4_1 = 0;
       $15_1 = Math_fround($19_1 + Math_fround(Math_fround(Math_fround($11_1 * $16_1) + Math_fround($13_1 * $17_1)) + Math_fround($10_1 * $18_1)));
       if ($15_1 <= Math_fround(1.1920928955078125e-07)) {
        break label$2
       }
       $8_1 = $7_1;
       $7_1 = Math_fround($7_1 + Math_fround($20_1 / $15_1));
       if ($7_1 <= $8_1) {
        break label$2
       }
       if ($7_1 > Math_fround(1.0)) {
        break label$2
       }
       if ($7_1 < Math_fround(0.0)) {
        break label$2
       }
       $564($1_1, $22_1, $24_1, $26_1, $6_1 + 288 | 0, $7_1, $6_1 + 128 | 0);
       $564($3_1, $21_1, $23_1, $25, $6_1 + 256 | 0, $7_1, $6_1 - -64 | 0);
       $444($6_1, $6_1 - -64 | 0, $6_1 + 128 | 0);
       $9_1 = HEAP32[$5_1 + 168 >> 2];
       if ($9_1) {
        HEAP32[$6_1 + 8 >> 2] = 0;
        HEAP32[$6_1 + 12 >> 2] = 0;
        HEAP32[$6_1 >> 2] = 1065353216;
        HEAP32[$6_1 + 4 >> 2] = 0;
        FUNCTION_TABLE[HEAP32[HEAP32[$9_1 >> 2] + 28 >> 2]]($9_1, $28_1, Math_fround(.20000000298023224), $6_1);
       }
       FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] >> 2]]($5_1, $7_1);
       HEAP8[$6_1 + 40 | 0] = 0;
       HEAP32[$6_1 + 36 >> 2] = 1566444395;
       HEAP32[$6_1 >> 2] = 11292;
       $611($0_1, $6_1 + 128 | 0, $6_1 - -64 | 0, $6_1);
       if (!HEAPU8[$6_1 + 40 | 0]) {
        break label$5
       }
       $12_1 = $14_1 + 8 | 0;
       $29_1 = HEAP32[$12_1 + 4 >> 2];
       $9_1 = $6_1 + 248 | 0;
       HEAP32[$9_1 >> 2] = HEAP32[$12_1 >> 2];
       HEAP32[$9_1 + 4 >> 2] = $29_1;
       $9_1 = HEAP32[$14_1 + 4 >> 2];
       HEAP32[$6_1 + 240 >> 2] = HEAP32[$14_1 >> 2];
       HEAP32[$6_1 + 244 >> 2] = $9_1;
       $12_1 = 1;
       $9_1 = $2_1 + 1 | 0;
       $20_1 = Math_fround(HEAPF32[$6_1 + 36 >> 2] + HEAPF32[$5_1 + 172 >> 2]);
       $27_1 = HEAPF32[$6_1 + 16 >> 2];
       $18_1 = HEAPF32[$6_1 + 12 >> 2];
       $17_1 = HEAPF32[$6_1 + 8 >> 2];
       $16_1 = HEAPF32[$6_1 + 4 >> 2];
       if (($2_1 | 0) > 63) {
        FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 8 >> 2]]($5_1, -2, $9_1);
        $12_1 = 0;
       }
       $2_1 = $9_1;
       break label$4;
      }
      HEAPF32[$5_1 + 132 >> 2] = $16_1;
      HEAPF32[$5_1 + 164 >> 2] = $7_1;
      $0_1 = HEAP32[$6_1 + 244 >> 2];
      HEAP32[$5_1 + 148 >> 2] = HEAP32[$6_1 + 240 >> 2];
      HEAP32[$5_1 + 152 >> 2] = $0_1;
      HEAPF32[$5_1 + 144 >> 2] = $27_1;
      HEAPF32[$5_1 + 140 >> 2] = $18_1;
      HEAPF32[$5_1 + 136 >> 2] = $17_1;
      $1_1 = $6_1 + 248 | 0;
      $2_1 = HEAP32[$1_1 + 4 >> 2];
      $0_1 = $5_1 + 156 | 0;
      HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$0_1 + 4 >> 2] = $2_1;
      $4_1 = 1;
      break label$2;
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 8 >> 2]]($5_1, -1, $2_1);
     $12_1 = 0;
    }
    if ($12_1) {
     continue
    }
    break;
   };
  }
  global$0 = $6_1 + 320 | 0;
  return $4_1 | 0;
 }
 
 function $611($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0);
  $4_1 = global$0 - 448 | 0;
  global$0 = $4_1;
  label$1 : {
   if (HEAP32[$0_1 + 16 >> 2]) {
    $339(HEAP32[$0_1 + 4 >> 2]);
    $8_1 = HEAP32[$0_1 + 12 >> 2];
    $5_1 = HEAP32[$8_1 + 4 >> 2];
    $9_1 = HEAP32[$0_1 + 16 >> 2];
    $6_1 = HEAP32[$9_1 + 4 >> 2];
    $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 48 >> 2]]($8_1));
    $7_1 = HEAP32[$0_1 + 16 >> 2];
    $12_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 48 >> 2]]($7_1));
    $7_1 = $4_1 + 380 | 0;
    HEAP32[$7_1 >> 2] = 0;
    HEAP32[$7_1 + 4 >> 2] = 0;
    HEAP32[$4_1 + 440 >> 2] = 1;
    HEAP32[$4_1 + 444 >> 2] = 1;
    HEAP32[$4_1 + 428 >> 2] = -1;
    HEAP8[$4_1 + 420 | 0] = 0;
    HEAPF32[$4_1 + 416 >> 2] = $12_1;
    HEAPF32[$4_1 + 412 >> 2] = $10_1;
    HEAP32[$4_1 + 408 >> 2] = $6_1;
    HEAP32[$4_1 + 404 >> 2] = $5_1;
    HEAP32[$4_1 + 400 >> 2] = $9_1;
    HEAP32[$4_1 + 396 >> 2] = $8_1;
    HEAP32[$4_1 + 372 >> 2] = 0;
    HEAP32[$4_1 + 376 >> 2] = 1065353216;
    HEAP32[$4_1 + 368 >> 2] = 11136;
    i64toi32_i32$HIGH_BITS = HEAP32[$0_1 + 4 >> 2];
    HEAP32[$4_1 + 388 >> 2] = HEAP32[$0_1 + 8 >> 2];
    HEAP32[$4_1 + 392 >> 2] = i64toi32_i32$HIGH_BITS;
    $0_1 = $1_1 + 8 | 0;
    $8_1 = HEAP32[$0_1 + 4 >> 2];
    $5_1 = $4_1 + 240 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $8_1;
    $0_1 = $1_1 + 24 | 0;
    $8_1 = HEAP32[$0_1 + 4 >> 2];
    $5_1 = $4_1 + 256 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $8_1;
    $0_1 = $1_1 + 40 | 0;
    $8_1 = HEAP32[$0_1 + 4 >> 2];
    $5_1 = $4_1 + 272 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $8_1;
    $0_1 = $1_1 + 56 | 0;
    $8_1 = HEAP32[$0_1 + 4 >> 2];
    $5_1 = $4_1 + 288 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $8_1;
    $0_1 = $2_1 + 8 | 0;
    $8_1 = HEAP32[$0_1 + 4 >> 2];
    $5_1 = $4_1 + 304 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $8_1;
    HEAP32[$4_1 + 360 >> 2] = 1566444395;
    $0_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$4_1 + 232 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$4_1 + 236 >> 2] = $0_1;
    $0_1 = HEAP32[$1_1 + 20 >> 2];
    HEAP32[$4_1 + 248 >> 2] = HEAP32[$1_1 + 16 >> 2];
    HEAP32[$4_1 + 252 >> 2] = $0_1;
    $0_1 = HEAP32[$1_1 + 36 >> 2];
    HEAP32[$4_1 + 264 >> 2] = HEAP32[$1_1 + 32 >> 2];
    HEAP32[$4_1 + 268 >> 2] = $0_1;
    $0_1 = HEAP32[$1_1 + 52 >> 2];
    HEAP32[$4_1 + 280 >> 2] = HEAP32[$1_1 + 48 >> 2];
    HEAP32[$4_1 + 284 >> 2] = $0_1;
    $0_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$4_1 + 296 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 300 >> 2] = $0_1;
    $0_1 = $2_1 + 24 | 0;
    $1_1 = HEAP32[$0_1 + 4 >> 2];
    $8_1 = $4_1 + 320 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $1_1;
    $0_1 = HEAP32[$2_1 + 20 >> 2];
    $1_1 = $4_1 + 312 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 16 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $0_1;
    $0_1 = HEAP32[$2_1 + 36 >> 2];
    $1_1 = $4_1 + 328 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 32 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $0_1;
    $0_1 = $2_1 + 40 | 0;
    $1_1 = HEAP32[$0_1 + 4 >> 2];
    $8_1 = $4_1 + 336 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $1_1;
    $0_1 = HEAP32[$2_1 + 52 >> 2];
    $1_1 = $4_1 + 344 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 48 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $0_1;
    $0_1 = $2_1 + 56 | 0;
    $1_1 = HEAP32[$0_1 + 4 >> 2];
    $2_1 = $4_1 + 352 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $1_1;
    $345($4_1 + 368 | 0, $4_1 + 232 | 0, $3_1, 0, 0);
    break label$1;
   }
   $8_1 = HEAP32[$0_1 + 12 >> 2];
   $0_1 = HEAP32[$0_1 + 20 >> 2];
   $5_1 = $1_1 + 8 | 0;
   $9_1 = HEAP32[$5_1 + 4 >> 2];
   $6_1 = $4_1 + 240 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $9_1;
   $5_1 = $1_1 + 24 | 0;
   $9_1 = HEAP32[$5_1 + 4 >> 2];
   $6_1 = $4_1 + 256 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $9_1;
   $5_1 = $1_1 + 40 | 0;
   $9_1 = HEAP32[$5_1 + 4 >> 2];
   $6_1 = $4_1 + 272 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $9_1;
   $5_1 = $1_1 + 56 | 0;
   $9_1 = HEAP32[$5_1 + 4 >> 2];
   $6_1 = $4_1 + 288 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $9_1;
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$4_1 + 232 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$4_1 + 236 >> 2] = $5_1;
   $5_1 = HEAP32[$1_1 + 20 >> 2];
   HEAP32[$4_1 + 248 >> 2] = HEAP32[$1_1 + 16 >> 2];
   HEAP32[$4_1 + 252 >> 2] = $5_1;
   $5_1 = HEAP32[$1_1 + 36 >> 2];
   HEAP32[$4_1 + 264 >> 2] = HEAP32[$1_1 + 32 >> 2];
   HEAP32[$4_1 + 268 >> 2] = $5_1;
   $5_1 = HEAP32[$1_1 + 52 >> 2];
   HEAP32[$4_1 + 280 >> 2] = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$4_1 + 284 >> 2] = $5_1;
   $379($4_1 + 104 | 0, $2_1);
   $380($4_1 + 168 | 0, $4_1 + 104 | 0, $4_1 + 232 | 0);
   $1_1 = $4_1 + 176 | 0;
   $9_1 = HEAP32[$1_1 + 4 >> 2];
   $6_1 = $4_1 + 376 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $9_1;
   $5_1 = $4_1 + 192 | 0;
   $6_1 = HEAP32[$5_1 + 4 >> 2];
   $7_1 = $4_1 + 392 | 0;
   HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $6_1;
   $9_1 = $4_1 + 208 | 0;
   $6_1 = $9_1;
   $7_1 = HEAP32[$6_1 + 4 >> 2];
   $11_1 = $4_1 + 408 | 0;
   HEAP32[$11_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$11_1 + 4 >> 2] = $7_1;
   $6_1 = $4_1 + 224 | 0;
   $11_1 = HEAP32[$6_1 + 4 >> 2];
   $7_1 = $4_1 + 424 | 0;
   HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $11_1;
   $7_1 = HEAP32[$4_1 + 172 >> 2];
   HEAP32[$4_1 + 368 >> 2] = HEAP32[$4_1 + 168 >> 2];
   HEAP32[$4_1 + 372 >> 2] = $7_1;
   $7_1 = HEAP32[$4_1 + 188 >> 2];
   HEAP32[$4_1 + 384 >> 2] = HEAP32[$4_1 + 184 >> 2];
   HEAP32[$4_1 + 388 >> 2] = $7_1;
   $7_1 = HEAP32[$4_1 + 204 >> 2];
   HEAP32[$4_1 + 400 >> 2] = HEAP32[$4_1 + 200 >> 2];
   HEAP32[$4_1 + 404 >> 2] = $7_1;
   $7_1 = HEAP32[$4_1 + 220 >> 2];
   HEAP32[$4_1 + 416 >> 2] = HEAP32[$4_1 + 216 >> 2];
   HEAP32[$4_1 + 420 >> 2] = $7_1;
   $379($4_1 + 40 | 0, $4_1 + 232 | 0);
   $380($4_1 + 104 | 0, $4_1 + 40 | 0, $2_1);
   $7_1 = $4_1 + 112 | 0;
   $11_1 = HEAP32[$7_1 + 4 >> 2];
   HEAP32[$1_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $11_1;
   $1_1 = $4_1 + 128 | 0;
   $7_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $7_1;
   $1_1 = $4_1 + 144 | 0;
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$9_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$9_1 + 4 >> 2] = $5_1;
   $1_1 = $4_1 + 160 | 0;
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$6_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $5_1;
   $1_1 = HEAP32[$4_1 + 108 >> 2];
   HEAP32[$4_1 + 168 >> 2] = HEAP32[$4_1 + 104 >> 2];
   HEAP32[$4_1 + 172 >> 2] = $1_1;
   $1_1 = HEAP32[$4_1 + 124 >> 2];
   HEAP32[$4_1 + 184 >> 2] = HEAP32[$4_1 + 120 >> 2];
   HEAP32[$4_1 + 188 >> 2] = $1_1;
   $1_1 = HEAP32[$4_1 + 140 >> 2];
   HEAP32[$4_1 + 200 >> 2] = HEAP32[$4_1 + 136 >> 2];
   HEAP32[$4_1 + 204 >> 2] = $1_1;
   $1_1 = HEAP32[$4_1 + 156 >> 2];
   HEAP32[$4_1 + 216 >> 2] = HEAP32[$4_1 + 152 >> 2];
   HEAP32[$4_1 + 220 >> 2] = $1_1;
   $1_1 = $0_1 + 52 | 0;
   $5_1 = $0_1 + 56 | 0;
   $9_1 = $0_1 + 60 | 0;
   $351($4_1 + 40 | 0, $4_1 + 168 | 0, Math_fround(-HEAPF32[$1_1 >> 2]), Math_fround(-HEAPF32[$5_1 >> 2]), Math_fround(-HEAPF32[$9_1 >> 2]));
   FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 64 >> 2]]($4_1 + 104 | 0, $8_1, $4_1 + 40 | 0);
   $78($4_1 + 40 | 0, $4_1 + 368 | 0, HEAPF32[$4_1 + 104 >> 2], HEAPF32[$4_1 + 108 >> 2], HEAPF32[$4_1 + 112 >> 2]);
   $12_1 = HEAPF32[$1_1 >> 2];
   $13_1 = HEAPF32[$4_1 + 40 >> 2];
   $14_1 = HEAPF32[$5_1 >> 2];
   $15_1 = HEAPF32[$4_1 + 44 >> 2];
   $16_1 = HEAPF32[$9_1 >> 2];
   $17_1 = HEAPF32[$4_1 + 48 >> 2];
   $10_1 = Math_fround(Math_fround(Math_fround(Math_fround($12_1 * $13_1) + Math_fround($14_1 * $15_1)) + Math_fround($16_1 * $17_1)) - HEAPF32[$0_1 + 68 >> 2]);
   $78($4_1 + 24 | 0, $2_1, Math_fround($13_1 - Math_fround($12_1 * $10_1)), Math_fround($15_1 - Math_fround($14_1 * $10_1)), Math_fround($17_1 - Math_fround($16_1 * $10_1)));
   $351($4_1 + 8 | 0, $2_1, HEAPF32[$1_1 >> 2], HEAPF32[$5_1 >> 2], HEAPF32[$9_1 >> 2]);
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $4_1 + 8 | 0, $4_1 + 24 | 0, $10_1);
  }
  global$0 = $4_1 + 448 | 0;
 }
 
 function $612($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $8_1 = HEAPF32[$1_1 + 24 >> 2];
  $5_1 = HEAPF32[$1_1 + 40 >> 2];
  $9_1 = HEAPF32[$1_1 + 36 >> 2];
  $6_1 = HEAPF32[$1_1 + 20 >> 2];
  $10_1 = HEAPF32[$1_1 + 8 >> 2];
  $11_1 = HEAPF32[$1_1 + 16 >> 2];
  $7_1 = HEAPF32[$1_1 + 4 >> 2];
  $12_1 = HEAPF32[$1_1 + 32 >> 2];
  $13_1 = HEAPF32[$1_1 >> 2];
  HEAP32[$4_1 + 44 >> 2] = 0;
  $11_1 = Math_fround($11_1 - $13_1);
  $16_1 = Math_fround($9_1 - $7_1);
  $6_1 = Math_fround($6_1 - $7_1);
  $12_1 = Math_fround($12_1 - $13_1);
  $9_1 = Math_fround(Math_fround($11_1 * $16_1) - Math_fround($6_1 * $12_1));
  HEAPF32[$4_1 + 40 >> 2] = $9_1;
  $17_1 = Math_fround($8_1 - $10_1);
  $5_1 = Math_fround($5_1 - $10_1);
  $8_1 = Math_fround(Math_fround($17_1 * $12_1) - Math_fround($11_1 * $5_1));
  HEAPF32[$4_1 + 36 >> 2] = $8_1;
  $5_1 = Math_fround(Math_fround($6_1 * $5_1) - Math_fround($17_1 * $16_1));
  HEAPF32[$4_1 + 32 >> 2] = $5_1;
  $7_1 = Math_fround(Math_fround($10_1 * $9_1) + Math_fround(Math_fround($13_1 * $5_1) + Math_fround($7_1 * $8_1)));
  $10_1 = Math_fround(Math_fround(Math_fround(Math_fround($5_1 * HEAPF32[$0_1 + 4 >> 2]) + Math_fround($8_1 * HEAPF32[$0_1 + 8 >> 2])) + Math_fround($9_1 * HEAPF32[$0_1 + 12 >> 2])) - $7_1);
  $7_1 = Math_fround(Math_fround(Math_fround(Math_fround($5_1 * HEAPF32[$0_1 + 20 >> 2]) + Math_fround($8_1 * HEAPF32[$0_1 + 24 >> 2])) + Math_fround($9_1 * HEAPF32[$0_1 + 28 >> 2])) - $7_1);
  label$1 : {
   if (Math_fround($10_1 * $7_1) >= Math_fround(0.0)) {
    break label$1
   }
   if (HEAP32[$0_1 + 36 >> 2] & 1 ? $10_1 <= Math_fround(0.0) : 0) {
    break label$1
   }
   $7_1 = Math_fround($10_1 / Math_fround($10_1 - $7_1));
   if (!($7_1 < HEAPF32[$0_1 + 40 >> 2])) {
    break label$1
   }
   $353($4_1 + 16 | 0, $0_1 + 4 | 0, $0_1 + 20 | 0, $7_1);
   $18_1 = Math_fround(Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($8_1 * $8_1)) + Math_fround($9_1 * $9_1)) * Math_fround(-9.999999747378752e-05));
   $14_1 = HEAPF32[$4_1 + 16 >> 2];
   $13_1 = Math_fround(HEAPF32[$1_1 >> 2] - $14_1);
   $15_1 = HEAPF32[$4_1 + 20 >> 2];
   $6_1 = Math_fround(HEAPF32[$1_1 + 20 >> 2] - $15_1);
   $11_1 = Math_fround(HEAPF32[$1_1 + 4 >> 2] - $15_1);
   $12_1 = Math_fround(HEAPF32[$1_1 + 16 >> 2] - $14_1);
   $19_1 = HEAPF32[$4_1 + 24 >> 2];
   $16_1 = Math_fround(HEAPF32[$1_1 + 24 >> 2] - $19_1);
   $17_1 = Math_fround(HEAPF32[$1_1 + 8 >> 2] - $19_1);
   if (!($18_1 <= Math_fround(Math_fround(Math_fround(Math_fround($13_1 * $6_1) - Math_fround($11_1 * $12_1)) * $9_1) + Math_fround(Math_fround($5_1 * Math_fround(Math_fround($11_1 * $16_1) - Math_fround($17_1 * $6_1))) + Math_fround($8_1 * Math_fround(Math_fround($17_1 * $12_1) - Math_fround($13_1 * $16_1))))))) {
    break label$1
   }
   $15_1 = Math_fround(HEAPF32[$1_1 + 36 >> 2] - $15_1);
   $14_1 = Math_fround(HEAPF32[$1_1 + 32 >> 2] - $14_1);
   $20_1 = Math_fround($9_1 * Math_fround(Math_fround($12_1 * $15_1) - Math_fround($6_1 * $14_1)));
   $21_1 = $6_1;
   $6_1 = Math_fround(HEAPF32[$1_1 + 40 >> 2] - $19_1);
   if (!(Math_fround($20_1 + Math_fround(Math_fround($5_1 * Math_fround(Math_fround($21_1 * $6_1) - Math_fround($16_1 * $15_1))) + Math_fround($8_1 * Math_fround(Math_fround($16_1 * $14_1) - Math_fround($12_1 * $6_1))))) >= $18_1)) {
    break label$1
   }
   if (!(Math_fround(Math_fround($9_1 * Math_fround(Math_fround($11_1 * $14_1) - Math_fround($13_1 * $15_1))) + Math_fround(Math_fround($5_1 * Math_fround(Math_fround($17_1 * $15_1) - Math_fround($11_1 * $6_1))) + Math_fround($8_1 * Math_fround(Math_fround($13_1 * $6_1) - Math_fround($17_1 * $14_1))))) >= $18_1)) {
    break label$1
   }
   $1_1 = $84($4_1 + 32 | 0);
   label$3 : {
    if (!($10_1 <= Math_fround(0.0))) {
     break label$3
    }
    if (HEAP32[$0_1 + 36 >> 2] & 2) {
     break label$3
    }
    HEAP32[$4_1 + 12 >> 2] = 0;
    HEAPF32[$4_1 + 8 >> 2] = -HEAPF32[$4_1 + 40 >> 2];
    HEAPF32[$4_1 + 4 >> 2] = -HEAPF32[$4_1 + 36 >> 2];
    HEAPF32[$4_1 >> 2] = -HEAPF32[$4_1 + 32 >> 2];
    (wasm2js_i32$0 = $0_1, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]]($0_1, $4_1, $7_1, $2_1, $3_1))), HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0;
    break label$1;
   }
   (wasm2js_i32$0 = $0_1, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]]($0_1, $1_1, $7_1, $2_1, $3_1))), HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0;
  }
  global$0 = $4_1 + 48 | 0;
 }
 
 function $613($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $4_1 = global$0 - 688 | 0;
  global$0 = $4_1;
  $1_1 = $388($4_1 + 576 | 0, $1_1, $1_1 + 16 | 0, $1_1 + 32 | 0);
  HEAPF32[$1_1 + 48 >> 2] = HEAPF32[$0_1 + 204 >> 2];
  HEAP8[$4_1 + 548 | 0] = 0;
  HEAP32[$4_1 + 524 >> 2] = 953267991;
  HEAP32[$4_1 + 208 >> 2] = 13688;
  HEAP32[$4_1 + 204 >> 2] = 0;
  HEAP32[$4_1 + 200 >> 2] = $1_1;
  HEAP32[$4_1 + 184 >> 2] = 16072;
  HEAP32[$4_1 + 196 >> 2] = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$4_1 + 192 >> 2] = $4_1 + 208;
  HEAP32[$4_1 + 188 >> 2] = $4_1 + 216;
  HEAP32[$4_1 + 8 >> 2] = 11640;
  HEAP32[$4_1 + 172 >> 2] = 1065353216;
  HEAP32[$4_1 + 176 >> 2] = 0;
  HEAPF32[$4_1 + 180 >> 2] = HEAPF32[$0_1 + 208 >> 2];
  $7_1 = $0_1 + 136 | 0;
  label$1 : {
   if (!$610($4_1 + 184 | 0, $0_1 + 8 | 0, $0_1 + 72 | 0, $7_1, $7_1, $4_1 + 8 | 0)) {
    break label$1
   }
   $5_1 = HEAPF32[$4_1 + 140 >> 2];
   $6_1 = Math_fround($5_1 * $5_1);
   $5_1 = HEAPF32[$4_1 + 144 >> 2];
   $6_1 = Math_fround($6_1 + Math_fround($5_1 * $5_1));
   $5_1 = HEAPF32[$4_1 + 148 >> 2];
   if (!(Math_fround($6_1 + Math_fround($5_1 * $5_1)) > Math_fround(9.999999747378752e-05))) {
    break label$1
   }
   if (!(HEAPF32[$4_1 + 172 >> 2] < HEAPF32[$0_1 + 200 >> 2])) {
    break label$1
   }
   ((((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $84($4_1 + 140 | 0)), wasm2js_i32$3 = $4_1 + 156 | 0), wasm2js_f32$0 = HEAPF32[$4_1 + 172 >> 2]), wasm2js_i32$4 = $2_1), wasm2js_i32$5 = $3_1), wasm2js_i32$0 = HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]), Math_fround(FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, Math_fround(wasm2js_f32$0), wasm2js_i32$4 | 0, wasm2js_i32$5 | 0));
  }
  $119($1_1);
  global$0 = $4_1 + 688 | 0;
 }
 
 function $614($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  HEAP32[$0_1 >> 2] = 16244;
  while (1) {
   if (HEAP32[$0_1 + 8 >> 2] > ($3_1 | 0)) {
    $5_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] + $4_1 >> 2];
    $2_1 = HEAP32[$5_1 + 188 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[$0_1 + 68 >> 2];
     $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 36 >> 2]]($1_1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 40 >> 2]]($1_1, $2_1, HEAP32[$0_1 + 24 >> 2]);
     $1_1 = HEAP32[$0_1 + 68 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, $2_1, HEAP32[$0_1 + 24 >> 2]);
     HEAP32[$5_1 + 188 >> 2] = 0;
    }
    $4_1 = $4_1 + 4 | 0;
    $3_1 = $3_1 + 1 | 0;
    continue;
   }
   break;
  };
  $57($0_1 + 4 | 0);
  return $0_1 | 0;
 }
 
 function $615($0_1) {
  $0_1 = $0_1 | 0;
  $17($614($0_1));
 }
 
 function $616($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0;
  $1_1 = global$0 + -64 | 0;
  global$0 = $1_1;
  while (1) {
   if (HEAP32[$0_1 + 8 >> 2] > ($11_1 | 0)) {
    $2_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] + $12_1 >> 2];
    label$3 : {
     label$4 : {
      if (HEAPU8[$0_1 + 76 | 0]) {
       break label$4
      }
      switch (HEAP32[$2_1 + 220 >> 2] - 2 | 0) {
      case 0:
      case 3:
       break label$3;
      default:
       break label$4;
      };
     }
     $9_1 = HEAP32[$2_1 + 192 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$9_1 >> 2] + 8 >> 2]]($9_1, $2_1 + 4 | 0, $1_1 + 48 | 0, $1_1 + 32 | 0);
     $4_1 = Math_fround(HEAPF32[$1_1 + 48 >> 2] + Math_fround(-.019999999552965164));
     HEAPF32[$1_1 + 48 >> 2] = $4_1;
     $5_1 = Math_fround(HEAPF32[$1_1 + 52 >> 2] + Math_fround(-.019999999552965164));
     HEAPF32[$1_1 + 52 >> 2] = $5_1;
     $6_1 = Math_fround(HEAPF32[$1_1 + 56 >> 2] + Math_fround(-.019999999552965164));
     HEAPF32[$1_1 + 56 >> 2] = $6_1;
     $3_1 = Math_fround(HEAPF32[$1_1 + 32 >> 2] + Math_fround(.019999999552965164));
     HEAPF32[$1_1 + 32 >> 2] = $3_1;
     $7_1 = Math_fround(HEAPF32[$1_1 + 36 >> 2] + Math_fround(.019999999552965164));
     HEAPF32[$1_1 + 36 >> 2] = $7_1;
     $8_1 = Math_fround(HEAPF32[$1_1 + 40 >> 2] + Math_fround(.019999999552965164));
     HEAPF32[$1_1 + 40 >> 2] = $8_1;
     label$5 : {
      if (!HEAPU8[$0_1 + 44 | 0]) {
       break label$5
      }
      if (HEAP32[$2_1 + 252 >> 2] != 2) {
       break label$5
      }
      if (HEAPU8[$2_1 + 204 | 0] & 3) {
       break label$5
      }
      $9_1 = HEAP32[$2_1 + 192 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$9_1 >> 2] + 8 >> 2]]($9_1, $2_1 + 68 | 0, $1_1 + 16 | 0, $1_1);
      $5_1 = Math_fround(HEAPF32[$1_1 + 16 >> 2] + Math_fround(-.019999999552965164));
      HEAPF32[$1_1 + 16 >> 2] = $5_1;
      $6_1 = Math_fround(HEAPF32[$1_1 + 20 >> 2] + Math_fround(-.019999999552965164));
      HEAPF32[$1_1 + 20 >> 2] = $6_1;
      $3_1 = Math_fround(HEAPF32[$1_1 + 24 >> 2] + Math_fround(-.019999999552965164));
      HEAPF32[$1_1 + 24 >> 2] = $3_1;
      $7_1 = Math_fround(HEAPF32[$1_1 >> 2] + Math_fround(.019999999552965164));
      HEAPF32[$1_1 >> 2] = $7_1;
      $8_1 = Math_fround(HEAPF32[$1_1 + 4 >> 2] + Math_fround(.019999999552965164));
      HEAPF32[$1_1 + 4 >> 2] = $8_1;
      $10_1 = Math_fround(HEAPF32[$1_1 + 8 >> 2] + Math_fround(.019999999552965164));
      HEAPF32[$1_1 + 8 >> 2] = $10_1;
      $4_1 = HEAPF32[$1_1 + 48 >> 2];
      if ($5_1 < $4_1) {
       HEAPF32[$1_1 + 48 >> 2] = $5_1;
       $4_1 = $5_1;
      }
      $5_1 = HEAPF32[$1_1 + 52 >> 2];
      if ($6_1 < $5_1) {
       HEAPF32[$1_1 + 52 >> 2] = $6_1;
       $5_1 = $6_1;
      }
      $6_1 = HEAPF32[$1_1 + 56 >> 2];
      if ($3_1 < $6_1) {
       HEAPF32[$1_1 + 56 >> 2] = $3_1;
       $6_1 = $3_1;
      }
      $3_1 = HEAPF32[$1_1 + 28 >> 2];
      if ($3_1 < HEAPF32[$1_1 + 60 >> 2]) {
       HEAPF32[$1_1 + 60 >> 2] = $3_1
      }
      $3_1 = HEAPF32[$1_1 + 32 >> 2];
      if ($7_1 > $3_1) {
       HEAPF32[$1_1 + 32 >> 2] = $7_1;
       $3_1 = $7_1;
      }
      $7_1 = HEAPF32[$1_1 + 36 >> 2];
      if ($8_1 > $7_1) {
       HEAPF32[$1_1 + 36 >> 2] = $8_1;
       $7_1 = $8_1;
      }
      $8_1 = HEAPF32[$1_1 + 40 >> 2];
      if ($10_1 > $8_1) {
       HEAPF32[$1_1 + 40 >> 2] = $10_1;
       $8_1 = $10_1;
      }
      $10_1 = HEAPF32[$1_1 + 12 >> 2];
      if (!($10_1 > HEAPF32[$1_1 + 44 >> 2])) {
       break label$5
      }
      HEAPF32[$1_1 + 44 >> 2] = $10_1;
     }
     $9_1 = HEAP32[$0_1 + 68 >> 2];
     label$13 : {
      if (!(HEAP8[$2_1 + 204 | 0] & 1)) {
       $4_1 = Math_fround($3_1 - $4_1);
       $3_1 = Math_fround($4_1 * $4_1);
       $4_1 = Math_fround($7_1 - $5_1);
       $3_1 = Math_fround($3_1 + Math_fround($4_1 * $4_1));
       $4_1 = Math_fround($8_1 - $6_1);
       if (!(Math_fround($3_1 + Math_fround($4_1 * $4_1)) < Math_fround(999999995904.0))) {
        break label$13
       }
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$9_1 >> 2] + 16 >> 2]]($9_1, HEAP32[$2_1 + 188 >> 2], $1_1 + 48 | 0, $1_1 + 32 | 0, HEAP32[$0_1 + 24 >> 2]);
      break label$3;
     }
     if ((HEAP32[$2_1 + 220 >> 2] & -2) != 4) {
      HEAP32[$2_1 + 220 >> 2] = 5
     }
     if (HEAPU8[20732]) {
      break label$3
     }
     $2_1 = HEAP32[$0_1 + 72 >> 2];
     if (!$2_1) {
      break label$3
     }
     HEAP8[20732] = 1;
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 44 >> 2]]($2_1, 17064);
     $2_1 = HEAP32[$0_1 + 72 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 44 >> 2]]($2_1, 17113);
     $2_1 = HEAP32[$0_1 + 72 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 44 >> 2]]($2_1, 17181);
     $2_1 = HEAP32[$0_1 + 72 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 44 >> 2]]($2_1, 17246);
    }
    $12_1 = $12_1 + 4 | 0;
    $11_1 = $11_1 + 1 | 0;
    continue;
   }
   break;
  };
  global$0 = $1_1 - -64 | 0;
 }
 
 function $617($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 + 68 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 32 >> 2]]($1_1, HEAP32[$0_1 + 24 >> 2]);
 }
 
 function $618($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 72 >> 2] = $1_1;
 }
 
 function $619($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0);
  $1_1 = global$0 - 192 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0)) {
    break label$1
   }
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 100 >> 2]]($3_1);
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($1_1 + 80 | 0, $3_1);
   label$2 : {
    $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
    if (!(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 56 >> 2]]($3_1) & 8)) {
     break label$2
    }
    $3_1 = HEAP32[$0_1 + 24 >> 2];
    if (!$3_1) {
     break label$2
    }
    $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 36 >> 2]]($3_1) | 0;
    $10_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
    $11_1 = $1_1 + 176 | 0;
    $3_1 = 0;
    label$3 : while (1) {
     if (($3_1 | 0) == ($10_1 | 0)) {
      break label$2
     }
     $5_1 = HEAP32[$0_1 + 24 >> 2];
     $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 40 >> 2]]($5_1, $3_1) | 0;
     $7_1 = HEAP32[$5_1 + 844 >> 2];
     $7_1 = ($7_1 | 0) > 0 ? $7_1 : 0;
     $5_1 = $5_1 + 168 | 0;
     while (1) if ($7_1) {
      $9_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$9_1 >> 2] + 40 >> 2]]($9_1, $5_1 - 132 | 0, $5_1 - 100 | 0, HEAPF32[$5_1 - 84 >> 2], HEAP32[$5_1 >> 2], $11_1);
      $7_1 = $7_1 - 1 | 0;
      $5_1 = $5_1 + 208 | 0;
      continue;
     } else {
      $3_1 = $3_1 + 1 | 0;
      continue label$3;
     };
    };
   }
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 56 >> 2]]($3_1) & 3)) {
    break label$1
   }
   $10_1 = $1_1 + 160 | 0;
   $11_1 = $1_1 + 96 | 0;
   $9_1 = $1_1 + 112 | 0;
   $12_1 = $1_1 + 128 | 0;
   $13_1 = $1_1 + 144 | 0;
   $7_1 = 0;
   $5_1 = 0;
   while (1) {
    if (HEAP32[$0_1 + 8 >> 2] <= ($5_1 | 0)) {
     break label$1
    }
    $3_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] + $7_1 >> 2];
    label$8 : {
     if (HEAPU8[$3_1 + 204 | 0] & 32) {
      break label$8
     }
     label$9 : {
      if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0)) {
       break label$9
      }
      $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
      if (!(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 56 >> 2]]($2_1) & 1)) {
       break label$9
      }
      label$10 : {
       label$11 : {
        switch (HEAP32[$3_1 + 220 >> 2] - 1 | 0) {
        case 0:
         $4_1 = $1_1 + 88 | 0;
         $6_1 = HEAP32[$4_1 + 4 >> 2];
         $2_1 = $1_1 + 72 | 0;
         HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
         HEAP32[$2_1 + 4 >> 2] = $6_1;
         $2_1 = HEAP32[$1_1 + 84 >> 2];
         HEAP32[$1_1 + 64 >> 2] = HEAP32[$1_1 + 80 >> 2];
         HEAP32[$1_1 + 68 >> 2] = $2_1;
         break label$10;
        case 1:
         $4_1 = $11_1 + 8 | 0;
         $6_1 = HEAP32[$4_1 + 4 >> 2];
         $2_1 = $1_1 + 72 | 0;
         HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
         HEAP32[$2_1 + 4 >> 2] = $6_1;
         $2_1 = HEAP32[$11_1 + 4 >> 2];
         HEAP32[$1_1 + 64 >> 2] = HEAP32[$11_1 >> 2];
         HEAP32[$1_1 + 68 >> 2] = $2_1;
         break label$10;
        case 2:
         $4_1 = $9_1 + 8 | 0;
         $6_1 = HEAP32[$4_1 + 4 >> 2];
         $2_1 = $1_1 + 72 | 0;
         HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
         HEAP32[$2_1 + 4 >> 2] = $6_1;
         $2_1 = HEAP32[$9_1 + 4 >> 2];
         HEAP32[$1_1 + 64 >> 2] = HEAP32[$9_1 >> 2];
         HEAP32[$1_1 + 68 >> 2] = $2_1;
         break label$10;
        case 3:
         $4_1 = $12_1 + 8 | 0;
         $6_1 = HEAP32[$4_1 + 4 >> 2];
         $2_1 = $1_1 + 72 | 0;
         HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
         HEAP32[$2_1 + 4 >> 2] = $6_1;
         $2_1 = HEAP32[$12_1 + 4 >> 2];
         HEAP32[$1_1 + 64 >> 2] = HEAP32[$12_1 >> 2];
         HEAP32[$1_1 + 68 >> 2] = $2_1;
         break label$10;
        case 4:
         $4_1 = $13_1 + 8 | 0;
         $6_1 = HEAP32[$4_1 + 4 >> 2];
         $2_1 = $1_1 + 72 | 0;
         HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
         HEAP32[$2_1 + 4 >> 2] = $6_1;
         $2_1 = HEAP32[$13_1 + 4 >> 2];
         HEAP32[$1_1 + 64 >> 2] = HEAP32[$13_1 >> 2];
         HEAP32[$1_1 + 68 >> 2] = $2_1;
         break label$10;
        default:
         break label$11;
        };
       }
       HEAP32[$1_1 + 72 >> 2] = 1050253722;
       HEAP32[$1_1 + 76 >> 2] = 0;
       HEAP32[$1_1 + 64 >> 2] = 1050253722;
       HEAP32[$1_1 + 68 >> 2] = 1050253722;
      }
      if (HEAP8[$3_1 + 205 | 0] & 1) {
       $4_1 = $3_1 + 316 | 0;
       $6_1 = HEAP32[$4_1 + 4 >> 2];
       $2_1 = $1_1 + 72 | 0;
       HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$2_1 + 4 >> 2] = $6_1;
       $2_1 = HEAP32[$3_1 + 312 >> 2];
       HEAP32[$1_1 + 64 >> 2] = HEAP32[$3_1 + 308 >> 2];
       HEAP32[$1_1 + 68 >> 2] = $2_1;
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1, $3_1 + 4 | 0, HEAP32[$3_1 + 192 >> 2], $1_1 - -64 | 0);
     }
     $2_1 = HEAP32[$0_1 + 72 >> 2];
     if (!$2_1) {
      break label$8
     }
     if (!(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 56 >> 2]]($2_1) & 2)) {
      break label$8
     }
     $4_1 = $10_1 + 8 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $2_1 = $1_1 + 40 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $6_1;
     $2_1 = HEAP32[$10_1 + 4 >> 2];
     HEAP32[$1_1 + 32 >> 2] = HEAP32[$10_1 >> 2];
     HEAP32[$1_1 + 36 >> 2] = $2_1;
     $2_1 = HEAP32[$3_1 + 192 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $3_1 + 4 | 0, $1_1 - -64 | 0, $1_1 + 48 | 0);
     HEAPF32[$1_1 + 64 >> 2] = HEAPF32[$1_1 + 64 >> 2] + Math_fround(-.019999999552965164);
     HEAPF32[$1_1 + 68 >> 2] = HEAPF32[$1_1 + 68 >> 2] + Math_fround(-.019999999552965164);
     HEAPF32[$1_1 + 72 >> 2] = HEAPF32[$1_1 + 72 >> 2] + Math_fround(-.019999999552965164);
     HEAPF32[$1_1 + 48 >> 2] = HEAPF32[$1_1 + 48 >> 2] + Math_fround(.019999999552965164);
     HEAPF32[$1_1 + 52 >> 2] = HEAPF32[$1_1 + 52 >> 2] + Math_fround(.019999999552965164);
     HEAPF32[$1_1 + 56 >> 2] = HEAPF32[$1_1 + 56 >> 2] + Math_fround(.019999999552965164);
     label$18 : {
      if (!HEAPU8[$0_1 + 44 | 0]) {
       break label$18
      }
      if (HEAP32[$3_1 + 252 >> 2] != 2) {
       break label$18
      }
      if (HEAPU8[$3_1 + 204 | 0] & 3) {
       break label$18
      }
      $2_1 = HEAP32[$3_1 + 192 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $3_1 + 68 | 0, $1_1 + 16 | 0, $1_1);
      $8_1 = Math_fround(HEAPF32[$1_1 + 16 >> 2] + Math_fround(-.019999999552965164));
      HEAPF32[$1_1 + 16 >> 2] = $8_1;
      $14_1 = Math_fround(HEAPF32[$1_1 + 20 >> 2] + Math_fround(-.019999999552965164));
      HEAPF32[$1_1 + 20 >> 2] = $14_1;
      $15_1 = Math_fround(HEAPF32[$1_1 + 24 >> 2] + Math_fround(-.019999999552965164));
      HEAPF32[$1_1 + 24 >> 2] = $15_1;
      $16_1 = Math_fround(HEAPF32[$1_1 >> 2] + Math_fround(.019999999552965164));
      HEAPF32[$1_1 >> 2] = $16_1;
      $17_1 = Math_fround(HEAPF32[$1_1 + 4 >> 2] + Math_fround(.019999999552965164));
      HEAPF32[$1_1 + 4 >> 2] = $17_1;
      $18_1 = Math_fround(HEAPF32[$1_1 + 8 >> 2] + Math_fround(.019999999552965164));
      HEAPF32[$1_1 + 8 >> 2] = $18_1;
      if ($8_1 < HEAPF32[$1_1 + 64 >> 2]) {
       HEAPF32[$1_1 + 64 >> 2] = $8_1
      }
      if (HEAPF32[$1_1 + 68 >> 2] > $14_1) {
       HEAPF32[$1_1 + 68 >> 2] = $14_1
      }
      if (HEAPF32[$1_1 + 72 >> 2] > $15_1) {
       HEAPF32[$1_1 + 72 >> 2] = $15_1
      }
      $8_1 = HEAPF32[$1_1 + 28 >> 2];
      if ($8_1 < HEAPF32[$1_1 + 76 >> 2]) {
       HEAPF32[$1_1 + 76 >> 2] = $8_1
      }
      if (HEAPF32[$1_1 + 48 >> 2] < $16_1) {
       HEAPF32[$1_1 + 48 >> 2] = $16_1
      }
      if (HEAPF32[$1_1 + 52 >> 2] < $17_1) {
       HEAPF32[$1_1 + 52 >> 2] = $17_1
      }
      if (HEAPF32[$1_1 + 56 >> 2] < $18_1) {
       HEAPF32[$1_1 + 56 >> 2] = $18_1
      }
      $8_1 = HEAPF32[$1_1 + 12 >> 2];
      if (!($8_1 > HEAPF32[$1_1 + 60 >> 2])) {
       break label$18
      }
      HEAPF32[$1_1 + 60 >> 2] = $8_1;
     }
     $3_1 = HEAP32[$0_1 + 72 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 60 >> 2]]($3_1, $1_1 - -64 | 0, $1_1 + 48 | 0, $1_1 + 32 | 0);
    }
    $7_1 = $7_1 + 4 | 0;
    $5_1 = $5_1 + 1 | 0;
    continue;
   };
  }
  global$0 = $1_1 + 192 | 0;
 }
 
 function $620($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = 0, $23_1 = Math_fround(0);
  $4_1 = global$0 - 192 | 0;
  global$0 = $4_1;
  label$1 : {
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0)) {
    break label$1
   }
   $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 56 >> 2]]($5_1) & 32768)) {
    break label$1
   }
   $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 64 >> 2]]($5_1, $1_1, Math_fround(.10000000149011612));
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      label$6 : {
       label$7 : {
        label$8 : {
         label$9 : {
          label$10 : {
           label$11 : {
            $5_1 = HEAP32[$2_1 + 4 >> 2];
            switch ($5_1 | 0) {
            case 0:
             break label$10;
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 12:
             break label$3;
            case 13:
             break label$5;
            case 11:
             break label$6;
            case 10:
             break label$7;
            case 9:
             break label$8;
            case 8:
             break label$9;
            default:
             break label$11;
            };
           }
           label$12 : {
            switch ($5_1 - 28 | 0) {
            case 3:
             break label$12;
            case 0:
             break label$4;
            default:
             break label$3;
            };
           }
           $14_1 = HEAP32[$2_1 + 20 >> 2];
           $16_1 = Math_imul($14_1, 80) - 32 | 0;
           $6_1 = $4_1 + 48 | 0;
           $7_1 = $4_1 + 32 | 0;
           $8_1 = $4_1 + 16 | 0;
           while (1) {
            if (($14_1 | 0) < 1) {
             break label$2
            }
            $14_1 = $14_1 - 1 | 0;
            $5_1 = HEAP32[$2_1 + 28 >> 2] + $16_1 | 0;
            $12_1 = HEAP32[$5_1 + 4 >> 2];
            HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
            HEAP32[$6_1 + 4 >> 2] = $12_1;
            $12_1 = $5_1 - 32 | 0;
            $9_1 = $12_1;
            $15_1 = HEAP32[$9_1 + 4 >> 2];
            HEAP32[$8_1 >> 2] = HEAP32[$9_1 >> 2];
            HEAP32[$8_1 + 4 >> 2] = $15_1;
            $15_1 = $5_1 - 16 | 0;
            $9_1 = $15_1;
            $10_1 = HEAP32[$9_1 + 4 >> 2];
            HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2];
            HEAP32[$7_1 + 4 >> 2] = $10_1;
            $10_1 = $5_1 + 8 | 0;
            $18_1 = HEAP32[$10_1 + 4 >> 2];
            $9_1 = $6_1 + 8 | 0;
            HEAP32[$9_1 >> 2] = HEAP32[$10_1 >> 2];
            HEAP32[$9_1 + 4 >> 2] = $18_1;
            $9_1 = $5_1 - 48 | 0;
            $18_1 = $9_1 + 8 | 0;
            $22_1 = HEAP32[$18_1 + 4 >> 2];
            $10_1 = $4_1 + 8 | 0;
            HEAP32[$10_1 >> 2] = HEAP32[$18_1 >> 2];
            HEAP32[$10_1 + 4 >> 2] = $22_1;
            $12_1 = $12_1 + 8 | 0;
            $18_1 = HEAP32[$12_1 + 4 >> 2];
            $10_1 = $8_1 + 8 | 0;
            HEAP32[$10_1 >> 2] = HEAP32[$12_1 >> 2];
            HEAP32[$10_1 + 4 >> 2] = $18_1;
            $15_1 = $15_1 + 8 | 0;
            $10_1 = HEAP32[$15_1 + 4 >> 2];
            $12_1 = $7_1 + 8 | 0;
            HEAP32[$12_1 >> 2] = HEAP32[$15_1 >> 2];
            HEAP32[$12_1 + 4 >> 2] = $10_1;
            $12_1 = HEAP32[$9_1 + 4 >> 2];
            HEAP32[$4_1 >> 2] = HEAP32[$9_1 >> 2];
            HEAP32[$4_1 + 4 >> 2] = $12_1;
            $5_1 = HEAP32[$5_1 + 16 >> 2];
            $380($4_1 + 128 | 0, $1_1, $4_1);
            FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1, $4_1 + 128 | 0, $5_1, $3_1);
            $16_1 = $16_1 - 80 | 0;
            continue;
           };
          }
          $153($4_1, $2_1);
          $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
          HEAP32[$4_1 + 140 >> 2] = 0;
          HEAPF32[$4_1 + 136 >> 2] = -HEAPF32[$4_1 + 8 >> 2];
          HEAPF32[$4_1 + 132 >> 2] = -HEAPF32[$4_1 + 4 >> 2];
          HEAPF32[$4_1 + 128 >> 2] = -HEAPF32[$4_1 >> 2];
          FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 80 >> 2]]($0_1, $4_1 + 128 | 0, $4_1, $1_1, $3_1);
          break label$2;
         }
         $11_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 48 >> 2]]($2_1));
         $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
         FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2]]($0_1, $11_1, $1_1, $3_1);
         break label$2;
        }
        $5_1 = $4_1 + 12 | 0;
        HEAP32[$5_1 >> 2] = 0;
        HEAP32[$5_1 + 4 >> 2] = 0;
        $5_1 = $4_1 + 24 | 0;
        HEAP32[$5_1 >> 2] = 0;
        HEAP32[$5_1 + 4 >> 2] = 0;
        HEAP32[$4_1 + 20 >> 2] = 1065353216;
        $5_1 = $4_1 + 32 | 0;
        HEAP32[$5_1 >> 2] = 0;
        HEAP32[$5_1 + 4 >> 2] = 0;
        $5_1 = $4_1 + 40 | 0;
        HEAP32[$5_1 >> 2] = 1065353216;
        HEAP32[$5_1 + 4 >> 2] = 0;
        HEAP32[$4_1 + 4 >> 2] = 0;
        HEAP32[$4_1 + 8 >> 2] = 0;
        HEAP32[$4_1 >> 2] = 1065353216;
        $5_1 = HEAP32[$2_1 + 96 >> 2];
        $14_1 = ($5_1 << 4) - 16 | 0;
        $16_1 = ($5_1 << 2) - 4 | 0;
        $6_1 = $4_1 + 48 | 0;
        while (1) {
         if (($5_1 | 0) <= 0) {
          break label$2
         }
         $5_1 = $5_1 - 1 | 0;
         $7_1 = HEAP32[$2_1 + 104 >> 2] + $14_1 | 0;
         $8_1 = HEAP32[$7_1 + 4 >> 2];
         HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $8_1;
         $7_1 = $7_1 + 8 | 0;
         $9_1 = HEAP32[$7_1 + 4 >> 2];
         $8_1 = $6_1 + 8 | 0;
         HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
         HEAP32[$8_1 + 4 >> 2] = $9_1;
         $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
         $11_1 = HEAPF32[HEAP32[$2_1 + 124 >> 2] + $16_1 >> 2];
         $380($4_1 + 128 | 0, $1_1, $4_1);
         FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 24 >> 2]]($7_1, $11_1, $4_1 + 128 | 0, $3_1);
         $14_1 = $14_1 - 16 | 0;
         $16_1 = $16_1 - 4 | 0;
         continue;
        };
       }
       $5_1 = HEAP32[$2_1 + 56 >> 2];
       $2_1 = $2_1 + 32 | 0;
       $11_1 = HEAPF32[($5_1 << 2) + $2_1 >> 2];
       $13_1 = HEAPF32[$2_1 + (($5_1 + 2 | 0) % 3 << 2) >> 2];
       $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 84 >> 2]]($0_1, $13_1, $11_1, $5_1, $1_1, $3_1);
       break label$2;
      }
      $5_1 = HEAP32[$2_1 + 72 >> 2];
      $11_1 = HEAPF32[$2_1 + 60 >> 2];
      $13_1 = HEAPF32[$2_1 + 64 >> 2];
      $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 92 >> 2]]($0_1, $11_1, $13_1, $5_1, $1_1, $3_1);
      break label$2;
     }
     $5_1 = HEAP32[$2_1 + 56 >> 2];
     $11_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 92 >> 2]]($2_1));
     $153($4_1, $2_1);
     $13_1 = HEAPF32[($5_1 << 2) + $4_1 >> 2];
     $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 88 >> 2]]($0_1, $11_1, $13_1, $5_1, $1_1, $3_1);
     break label$2;
    }
    $11_1 = HEAPF32[$2_1 + 68 >> 2];
    $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 96 >> 2]]($0_1, $2_1 + 52 | 0, $11_1, $1_1, $3_1);
    break label$2;
   }
   label$15 : {
    if (($5_1 | 0) > 6) {
     break label$15
    }
    $9_1 = HEAP32[$2_1 + 56 >> 2];
    if ($9_1) {
     while (1) {
      if (HEAP32[$9_1 + 28 >> 2] <= ($12_1 | 0)) {
       break label$15
      }
      label$18 : {
       $10_1 = HEAP32[$9_1 + 36 >> 2];
       $15_1 = Math_imul($12_1, 36);
       $5_1 = $10_1 + $15_1 | 0;
       $7_1 = HEAP32[$5_1 + 4 >> 2];
       if (!$7_1) {
        $11_1 = Math_fround(0.0);
        $13_1 = Math_fround(0.0);
        $17_1 = Math_fround(0.0);
        break label$18;
       }
       $5_1 = HEAP32[(HEAP32[$5_1 + 12 >> 2] + ($7_1 << 2) | 0) - 4 >> 2];
       $13_1 = Math_fround(0.0);
       $16_1 = 0;
       $11_1 = Math_fround(0.0);
       $17_1 = Math_fround(0.0);
       $8_1 = $7_1;
       $14_1 = 0;
       while (1) {
        if (($8_1 | 0) <= ($14_1 | 0)) {
         break label$18
        }
        $6_1 = HEAP32[HEAP32[($10_1 + $15_1 | 0) + 12 >> 2] + $16_1 >> 2];
        $10_1 = $6_1 << 4;
        $8_1 = $10_1 + HEAP32[$9_1 + 16 >> 2] | 0;
        $19_1 = HEAPF32[$8_1 >> 2];
        $20_1 = HEAPF32[$8_1 + 4 >> 2];
        $21_1 = HEAPF32[$8_1 + 8 >> 2];
        $8_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
        $5_1 = HEAP32[$9_1 + 16 >> 2] + ($5_1 << 4) | 0;
        $78($4_1, $1_1, HEAPF32[$5_1 >> 2], HEAPF32[$5_1 + 4 >> 2], HEAPF32[$5_1 + 8 >> 2]);
        $5_1 = $10_1 + HEAP32[$9_1 + 16 >> 2] | 0;
        $78($4_1 + 128 | 0, $1_1, HEAPF32[$5_1 >> 2], HEAPF32[$5_1 + 4 >> 2], HEAPF32[$5_1 + 8 >> 2]);
        FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 16 >> 2]]($8_1, $4_1, $4_1 + 128 | 0, $3_1);
        $16_1 = $16_1 + 4 | 0;
        $14_1 = $14_1 + 1 | 0;
        $11_1 = Math_fround($21_1 + $11_1);
        $13_1 = Math_fround($20_1 + $13_1);
        $17_1 = Math_fround($19_1 + $17_1);
        $10_1 = HEAP32[$9_1 + 36 >> 2];
        $8_1 = HEAP32[($15_1 + $10_1 | 0) + 4 >> 2];
        $5_1 = $6_1;
        continue;
       };
      }
      $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
      if (FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 56 >> 2]]($5_1) & 16384) {
       HEAP32[$4_1 + 8 >> 2] = 0;
       HEAP32[$4_1 + 12 >> 2] = 0;
       HEAP32[$4_1 >> 2] = 1065353216;
       HEAP32[$4_1 + 4 >> 2] = 1065353216;
       $5_1 = $15_1 + HEAP32[$9_1 + 36 >> 2] | 0;
       $20_1 = HEAPF32[$5_1 + 24 >> 2];
       $21_1 = HEAPF32[$5_1 + 28 >> 2];
       $23_1 = HEAPF32[$5_1 + 20 >> 2];
       $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
       $19_1 = Math_fround(Math_fround(1.0) / Math_fround($7_1 | 0));
       $17_1 = Math_fround($19_1 * $17_1);
       $13_1 = Math_fround($19_1 * $13_1);
       $11_1 = Math_fround($19_1 * $11_1);
       $78($4_1 + 128 | 0, $1_1, $17_1, $13_1, $11_1);
       $78($4_1 + 112 | 0, $1_1, Math_fround($23_1 + $17_1), Math_fround($20_1 + $13_1), Math_fround($21_1 + $11_1));
       FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 16 >> 2]]($5_1, $4_1 + 128 | 0, $4_1 + 112 | 0, $4_1);
      }
      $12_1 = $12_1 + 1 | 0;
      continue;
     }
    }
    $5_1 = 0;
    while (1) {
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 100 >> 2]]($2_1) | 0) <= ($5_1 | 0)) {
      break label$15
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 104 >> 2]]($2_1, $5_1, $4_1, $4_1 + 128 | 0);
     $78($4_1 + 112 | 0, $1_1, HEAPF32[$4_1 >> 2], HEAPF32[$4_1 + 4 >> 2], HEAPF32[$4_1 + 8 >> 2]);
     $78($4_1 + 96 | 0, $1_1, HEAPF32[$4_1 + 128 >> 2], HEAPF32[$4_1 + 132 >> 2], HEAPF32[$4_1 + 136 >> 2]);
     $6_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 16 >> 2]]($6_1, $4_1 + 112 | 0, $4_1 + 96 | 0, $3_1);
     $5_1 = $5_1 + 1 | 0;
     continue;
    };
   }
   $5_1 = HEAP32[$2_1 + 4 >> 2];
   if ($5_1 - 21 >>> 0 <= 8) {
    HEAP32[$4_1 + 136 >> 2] = 1566444395;
    HEAP32[$4_1 + 140 >> 2] = 0;
    HEAP32[$4_1 + 128 >> 2] = 1566444395;
    HEAP32[$4_1 + 132 >> 2] = 1566444395;
    HEAP32[$4_1 + 120 >> 2] = -581039253;
    HEAP32[$4_1 + 124 >> 2] = 0;
    HEAP32[$4_1 + 112 >> 2] = -581039253;
    HEAP32[$4_1 + 116 >> 2] = -581039253;
    $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
    $7_1 = $3_1 + 8 | 0;
    $8_1 = HEAP32[$7_1 + 4 >> 2];
    $6_1 = $4_1 + 20 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $8_1;
    $7_1 = $1_1 + 8 | 0;
    $8_1 = HEAP32[$7_1 + 4 >> 2];
    $6_1 = $4_1 + 36 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $8_1;
    $7_1 = HEAP32[$1_1 + 20 >> 2];
    $6_1 = $4_1 + 44 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $7_1;
    $7_1 = $1_1 + 24 | 0;
    $8_1 = HEAP32[$7_1 + 4 >> 2];
    $6_1 = $4_1 + 52 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $8_1;
    $7_1 = HEAP32[$1_1 + 36 >> 2];
    $6_1 = $4_1 + 60 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $7_1;
    $7_1 = $1_1 + 40 | 0;
    $8_1 = HEAP32[$7_1 + 4 >> 2];
    $6_1 = $4_1 + 68 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $8_1;
    HEAP32[$4_1 + 8 >> 2] = $5_1;
    HEAP32[$4_1 + 4 >> 2] = 17e3;
    HEAP32[$4_1 >> 2] = 16976;
    $5_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$4_1 + 12 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$4_1 + 16 >> 2] = $5_1;
    $5_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$4_1 + 28 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$4_1 + 32 >> 2] = $5_1;
    $6_1 = $1_1 + 56 | 0;
    $7_1 = HEAP32[$6_1 + 4 >> 2];
    $5_1 = $4_1 + 84 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $7_1;
    $6_1 = HEAP32[$1_1 + 52 >> 2];
    $5_1 = $4_1 + 76 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$1_1 + 48 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $6_1;
    FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 64 >> 2]]($2_1, $4_1, $4_1 + 112 | 0, $4_1 + 128 | 0);
    $5_1 = HEAP32[$2_1 + 4 >> 2];
   }
   if (($5_1 | 0) != 3) {
    break label$2
   }
   HEAP32[$4_1 + 136 >> 2] = 1566444395;
   HEAP32[$4_1 + 140 >> 2] = 0;
   HEAP32[$4_1 + 128 >> 2] = 1566444395;
   HEAP32[$4_1 + 132 >> 2] = 1566444395;
   HEAP32[$4_1 + 120 >> 2] = -581039253;
   HEAP32[$4_1 + 124 >> 2] = 0;
   HEAP32[$4_1 + 112 >> 2] = -581039253;
   HEAP32[$4_1 + 116 >> 2] = -581039253;
   $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   $6_1 = $3_1 + 8 | 0;
   $7_1 = HEAP32[$6_1 + 4 >> 2];
   $5_1 = $4_1 + 20 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $7_1;
   $6_1 = $1_1 + 8 | 0;
   $7_1 = HEAP32[$6_1 + 4 >> 2];
   $5_1 = $4_1 + 36 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $7_1;
   $6_1 = HEAP32[$1_1 + 20 >> 2];
   $5_1 = $4_1 + 44 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $6_1;
   $6_1 = $1_1 + 24 | 0;
   $7_1 = HEAP32[$6_1 + 4 >> 2];
   $5_1 = $4_1 + 52 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $7_1;
   $6_1 = HEAP32[$1_1 + 36 >> 2];
   $5_1 = $4_1 + 60 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $6_1;
   $6_1 = $1_1 + 40 | 0;
   $7_1 = HEAP32[$6_1 + 4 >> 2];
   $5_1 = $4_1 + 68 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $7_1;
   HEAP32[$4_1 + 8 >> 2] = $0_1;
   HEAP32[$4_1 + 4 >> 2] = 17e3;
   HEAP32[$4_1 >> 2] = 16976;
   $0_1 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$4_1 + 12 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$4_1 + 16 >> 2] = $0_1;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$4_1 + 28 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$4_1 + 32 >> 2] = $0_1;
   $3_1 = $1_1 + 56 | 0;
   $5_1 = HEAP32[$3_1 + 4 >> 2];
   $0_1 = $4_1 + 84 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $5_1;
   $3_1 = HEAP32[$1_1 + 52 >> 2];
   $0_1 = $4_1 + 76 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $3_1;
   $0_1 = HEAP32[$2_1 + 96 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $4_1 | 4, $4_1 + 112 | 0, $4_1 + 128 | 0);
  }
  global$0 = $4_1 + 192 | 0;
 }
 
 function $621($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0;
  $4_1 = global$0 - 256 | 0;
  global$0 = $4_1;
  $5_1 = $4_1 + 88 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $4_1 + 96 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $4_1 + 108 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 104 >> 2] = 1065353216;
  $5_1 = $4_1 + 116 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $5_1 = $4_1 + 124 | 0;
  HEAP32[$5_1 >> 2] = 1065353216;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $12_1 = $1_1 + 8 | 0;
  $5_1 = $12_1;
  $13_1 = HEAP32[$5_1 + 4 >> 2];
  $14_1 = $4_1 + 60 | 0;
  $6_1 = $14_1;
  $15_1 = HEAP32[$5_1 >> 2];
  HEAP32[$6_1 >> 2] = $15_1;
  HEAP32[$6_1 + 4 >> 2] = $13_1;
  $5_1 = $2_1 + 8 | 0;
  $6_1 = HEAP32[$5_1 + 4 >> 2];
  $9_1 = $4_1 + 76 | 0;
  HEAP32[$9_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$9_1 + 4 >> 2] = $6_1;
  HEAP32[$4_1 + 16 >> 2] = 16312;
  HEAP32[$4_1 + 232 >> 2] = $3_1;
  HEAP32[$4_1 + 84 >> 2] = 1065353216;
  $16_1 = HEAP32[$1_1 + 4 >> 2];
  $6_1 = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 52 >> 2] = $6_1;
  HEAP32[$4_1 + 56 >> 2] = $16_1;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 + 68 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 72 >> 2] = $3_1;
  HEAP32[$4_1 + 228 >> 2] = $0_1;
  $3_1 = $4_1 + 140 | 0;
  HEAP32[$3_1 >> 2] = $15_1;
  HEAP32[$3_1 + 4 >> 2] = $13_1;
  $3_1 = $4_1 + 132 | 0;
  HEAP32[$3_1 >> 2] = $6_1;
  HEAP32[$3_1 + 4 >> 2] = $16_1;
  $3_1 = $4_1 + 152 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $4_1 + 160 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 168 >> 2] = 1065353216;
  $3_1 = $4_1 + 172 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $4_1 + 180 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = $4_1 + 188 | 0;
  HEAP32[$3_1 >> 2] = 1065353216;
  HEAP32[$3_1 + 4 >> 2] = 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $6_1 = $4_1 + 196 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $3_1;
  $3_1 = HEAP32[$5_1 + 4 >> 2];
  $6_1 = $4_1 + 204 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $3_1;
  HEAP32[$4_1 + 148 >> 2] = 1065353216;
  HEAP32[$4_1 + 252 >> 2] = 0;
  HEAPF32[$4_1 + 248 >> 2] = HEAPF32[$5_1 >> 2] - HEAPF32[$12_1 >> 2];
  HEAPF32[$4_1 + 244 >> 2] = HEAPF32[$2_1 + 4 >> 2] - HEAPF32[$1_1 + 4 >> 2];
  HEAPF32[$4_1 + 240 >> 2] = HEAPF32[$2_1 >> 2] - HEAPF32[$1_1 >> 2];
  $84($4_1 + 240 | 0);
  $10_1 = HEAPF32[$4_1 + 244 >> 2];
  $7_1 = $10_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $10_1);
  HEAPF32[$4_1 + 24 >> 2] = $7_1;
  $11_1 = HEAPF32[$4_1 + 248 >> 2];
  $8_1 = $11_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $11_1);
  HEAPF32[$4_1 + 28 >> 2] = $8_1;
  HEAP32[$4_1 + 44 >> 2] = $8_1 < Math_fround(0.0);
  HEAP32[$4_1 + 40 >> 2] = $7_1 < Math_fround(0.0);
  $7_1 = HEAPF32[$4_1 + 240 >> 2];
  $8_1 = $7_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $7_1);
  HEAPF32[$4_1 + 20 >> 2] = $8_1;
  HEAP32[$4_1 + 36 >> 2] = $8_1 < Math_fround(0.0);
  HEAPF32[$4_1 + 48 >> 2] = Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[$4_1 + 68 >> 2] - HEAPF32[$4_1 + 52 >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[$4_1 + 72 >> 2] - HEAPF32[$4_1 + 56 >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[$9_1 >> 2] - HEAPF32[$14_1 >> 2]));
  $3_1 = HEAP32[$0_1 + 68 >> 2];
  $0_1 = $4_1 + 248 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 240 >> 2] = 0;
  HEAP32[$4_1 + 244 >> 2] = 0;
  $0_1 = $4_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 24 >> 2]]($3_1, $1_1, $2_1, $4_1 + 16 | 0, $4_1 + 240 | 0, $4_1);
  global$0 = $4_1 + 256 | 0;
 }
 
 function $622($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  HEAP32[$1_1 + 216 >> 2] = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$5_1 + 108 >> 2] = $1_1;
  $375($0_1 + 4 | 0, $5_1 + 108 | 0);
  $6_1 = $1_1 + 12 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $5_1 + 48 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $6_1 = $1_1 + 28 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $5_1 - -64 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $6_1 = $1_1 + 44 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $5_1 + 80 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $6_1 = $1_1 + 60 | 0;
  $7_1 = HEAP32[$6_1 + 4 >> 2];
  $4_1 = $5_1 + 96 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $7_1;
  $4_1 = HEAP32[$1_1 + 8 >> 2];
  HEAP32[$5_1 + 40 >> 2] = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$5_1 + 44 >> 2] = $4_1;
  $4_1 = $1_1 + 20 | 0;
  $6_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$5_1 + 56 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$5_1 + 60 >> 2] = $6_1;
  $4_1 = $1_1 + 36 | 0;
  $6_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$5_1 + 72 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$5_1 + 76 >> 2] = $6_1;
  $4_1 = $1_1 + 52 | 0;
  $6_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$5_1 + 88 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$5_1 + 92 >> 2] = $6_1;
  $4_1 = HEAP32[$1_1 + 192 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 8 >> 2]]($4_1, $5_1 + 40 | 0, $5_1 + 24 | 0, $5_1 + 8 | 0);
  $4_1 = HEAP32[$0_1 + 68 >> 2];
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 8 >> 2]]($4_1, $5_1 + 24 | 0, $5_1 + 8 | 0, HEAP32[HEAP32[$1_1 + 192 >> 2] + 4 >> 2], $1_1, $2_1, $3_1, HEAP32[$0_1 + 24 >> 2]) | 0), HEAP32[wasm2js_i32$0 + 188 >> 2] = wasm2js_i32$1;
  global$0 = $5_1 + 112 | 0;
 }
 
 function $623($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $3_1 = HEAP32[$1_1 + 188 >> 2];
  if ($3_1) {
   $2_1 = HEAP32[$0_1 + 68 >> 2];
   $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 36 >> 2]]($2_1) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 40 >> 2]]($2_1, $3_1, HEAP32[$0_1 + 24 >> 2]);
   $2_1 = HEAP32[$0_1 + 68 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2]]($2_1, $3_1, HEAP32[$0_1 + 24 >> 2]);
   HEAP32[$1_1 + 188 >> 2] = 0;
  }
  $3_1 = HEAP32[$0_1 + 8 >> 2];
  label$2 : {
   label$3 : {
    $2_1 = HEAP32[$1_1 + 216 >> 2];
    if (($2_1 | 0) < 0) {
     break label$3
    }
    if (($2_1 | 0) >= ($3_1 | 0)) {
     break label$3
    }
    $4_1 = $2_1 << 2;
    $5_1 = $0_1 + 16 | 0;
    $6_1 = HEAP32[$5_1 >> 2];
    $8_1 = $4_1 + $6_1 | 0;
    $9_1 = HEAP32[$8_1 >> 2];
    $7_1 = $6_1;
    $3_1 = $3_1 - 1 | 0;
    $6_1 = $3_1 << 2;
    HEAP32[$8_1 >> 2] = HEAP32[$7_1 + $6_1 >> 2];
    HEAP32[$0_1 + 8 >> 2] = $3_1;
    HEAP32[$6_1 + HEAP32[$5_1 >> 2] >> 2] = $9_1;
    if (($2_1 | 0) >= ($3_1 | 0)) {
     break label$2
    }
    HEAP32[HEAP32[HEAP32[$0_1 + 16 >> 2] + $4_1 >> 2] + 216 >> 2] = $2_1;
    break label$2;
   }
   $5_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
   $2_1 = 0;
   while (1) {
    if (($2_1 | 0) == ($5_1 | 0)) {
     break label$2
    }
    if (HEAP32[HEAP32[$0_1 + 16 >> 2] + $4_1 >> 2] != ($1_1 | 0)) {
     $4_1 = $4_1 + 4 | 0;
     $2_1 = $2_1 + 1 | 0;
     continue;
    }
    break;
   };
   if (($2_1 | 0) >= ($3_1 | 0)) {
    break label$2
   }
   $7_1 = $2_1 << 2;
   $2_1 = HEAP32[$0_1 + 16 >> 2];
   $4_1 = $7_1 + $2_1 | 0;
   $5_1 = HEAP32[$4_1 >> 2];
   $7_1 = $2_1;
   $3_1 = $3_1 - 1 | 0;
   $2_1 = $3_1 << 2;
   HEAP32[$4_1 >> 2] = HEAP32[$7_1 + $2_1 >> 2];
   HEAP32[$0_1 + 8 >> 2] = $3_1;
   HEAP32[$2_1 + HEAP32[$0_1 + 16 >> 2] >> 2] = $5_1;
  }
  HEAP32[$1_1 + 216 >> 2] = -1;
 }
 
 function $624($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]]($0_1);
  $1_1 = HEAP32[$0_1 + 24 >> 2];
  if ($1_1) {
   $2_1 = HEAP32[$0_1 + 68 >> 2];
   ((((wasm2js_i32$1 = $1_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 36 >> 2]]($2_1) | 0), wasm2js_i32$3 = $0_1 + 28 | 0), wasm2js_i32$4 = HEAP32[$0_1 + 24 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 32 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0);
  }
 }
 
 function $625($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 32 >> 2]]($1_1);
  $626($0_1, $1_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 36 >> 2]]($1_1);
 }
 
 function $626($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2_1 = global$0 - 96 | 0;
  global$0 = $2_1;
  HEAP8[$2_1 + 44 | 0] = 1;
  HEAP32[$2_1 + 40 >> 2] = 0;
  HEAP8[$2_1 - -64 | 0] = 1;
  $3_1 = $2_1 + 32 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 60 >> 2] = 0;
  HEAP8[$2_1 + 84 | 0] = 1;
  $3_1 = $2_1 + 52 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 80 >> 2] = 0;
  $3_1 = $2_1 + 72 | 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP8[$2_1 + 24 | 0] = 1;
  HEAP32[$2_1 + 12 >> 2] = 0;
  HEAP32[$2_1 + 16 >> 2] = 0;
  $13_1 = $2_1 + 28 | 0;
  $14_1 = $2_1 + 68 | 0;
  $15_1 = $2_1 + 48 | 0;
  while (1) {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $5_1 = HEAP32[$0_1 + 8 >> 2];
        if (($10_1 | 0) >= ($5_1 | 0)) {
         $4_1 = 0;
         $3_1 = 0;
         while (1) {
          if (($3_1 | 0) >= ($5_1 | 0)) {
           break label$6
          }
          $6_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] + $4_1 >> 2];
          $7_1 = HEAP32[$6_1 + 252 >> 2];
          if (!(($7_1 | 0) != 1 ? ($7_1 | 0) != 64 : 0)) {
           FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 24 >> 2]]($6_1, $1_1);
           $5_1 = HEAP32[$0_1 + 8 >> 2];
          }
          $4_1 = $4_1 + 4 | 0;
          $3_1 = $3_1 + 1 | 0;
          continue;
         };
        }
        $8_1 = HEAP32[HEAP32[HEAP32[$0_1 + 16 >> 2] + ($10_1 << 2) >> 2] + 192 >> 2];
        HEAP32[$2_1 >> 2] = $8_1;
        if (wasm2js_i32$0 = ($627($2_1 + 8 | 0, $2_1) | 0) != -1, wasm2js_i32$1 = 0, wasm2js_i32$2 = HEAP32[$2_1 + 60 >> 2], wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) {
         break label$2
        }
        HEAP32[$2_1 >> 2] = $8_1;
        $3_1 = $627($2_1 + 8 | 0, $2_1);
        if (($3_1 | 0) != -1) {
         HEAP32[HEAP32[$2_1 + 60 >> 2] + ($3_1 << 2) >> 2] = $8_1;
         break label$3;
        }
        $11_1 = $628($8_1);
        $12_1 = HEAP32[$2_1 + 52 >> 2];
        $3_1 = $12_1;
        $6_1 = HEAP32[$2_1 + 56 >> 2];
        label$12 : {
         if (($3_1 | 0) != ($6_1 | 0)) {
          break label$12
         }
         $3_1 = $6_1;
         $7_1 = $3_1 ? $3_1 << 1 : 1;
         if (($3_1 | 0) >= ($7_1 | 0)) {
          break label$12
         }
         $3_1 = 0;
         $5_1 = 0;
         if ($7_1) {
          $5_1 = $53($7_1 << 2)
         }
         $4_1 = ($6_1 | 0) > 0 ? $6_1 : 0;
         while (1) {
          if ($4_1) {
           HEAP32[$3_1 + $5_1 >> 2] = HEAP32[HEAP32[$2_1 + 60 >> 2] + $3_1 >> 2];
           $4_1 = $4_1 - 1 | 0;
           $3_1 = $3_1 + 4 | 0;
           continue;
          }
          break;
         };
         $96($15_1);
         HEAP32[$2_1 + 60 >> 2] = $5_1;
         HEAP8[$2_1 + 64 | 0] = 1;
         HEAP32[$2_1 + 56 >> 2] = $7_1;
         $3_1 = HEAP32[$2_1 + 52 >> 2];
        }
        HEAP32[HEAP32[$2_1 + 60 >> 2] + ($3_1 << 2) >> 2] = $8_1;
        HEAP32[$2_1 + 52 >> 2] = $3_1 + 1;
        $4_1 = HEAP32[$2_1 + 72 >> 2];
        label$16 : {
         if (($4_1 | 0) != HEAP32[$2_1 + 76 >> 2]) {
          break label$16
         }
         $7_1 = $4_1 ? $4_1 << 1 : 1;
         if (($7_1 | 0) <= ($4_1 | 0)) {
          break label$16
         }
         $3_1 = 0;
         $5_1 = 0;
         if ($7_1) {
          $5_1 = $53($7_1 << 3)
         }
         $4_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
         while (1) {
          if ($4_1) {
           $16_1 = HEAP32[$2_1 + 80 >> 2] + $3_1 | 0;
           $17_1 = HEAP32[$16_1 + 4 >> 2];
           $9_1 = $3_1 + $5_1 | 0;
           HEAP32[$9_1 >> 2] = HEAP32[$16_1 >> 2];
           HEAP32[$9_1 + 4 >> 2] = $17_1;
           $4_1 = $4_1 - 1 | 0;
           $3_1 = $3_1 + 8 | 0;
           continue;
          }
          break;
         };
         $96($14_1);
         HEAP32[$2_1 + 80 >> 2] = $5_1;
         HEAP8[$2_1 + 84 | 0] = 1;
         HEAP32[$2_1 + 76 >> 2] = $7_1;
         $4_1 = HEAP32[$2_1 + 72 >> 2];
        }
        $3_1 = HEAP32[$2_1 + 4 >> 2];
        $4_1 = HEAP32[$2_1 + 80 >> 2] + ($4_1 << 3) | 0;
        $7_1 = HEAP32[$2_1 >> 2];
        HEAP32[$4_1 >> 2] = $7_1;
        HEAP32[$4_1 + 4 >> 2] = $3_1;
        HEAP32[$2_1 + 72 >> 2] = HEAP32[$2_1 + 72 >> 2] + 1;
        $3_1 = HEAP32[$2_1 + 56 >> 2];
        $4_1 = $11_1 & $6_1 - 1;
        if (($6_1 | 0) >= ($3_1 | 0)) {
         break label$4
        }
        $6_1 = HEAP32[$2_1 + 12 >> 2];
        if (($6_1 | 0) >= ($3_1 | 0)) {
         break label$5
        }
        HEAP32[$2_1 + 92 >> 2] = 0;
        $140($2_1 + 8 | 0, $3_1, $2_1 + 92 | 0);
        HEAP32[$2_1 + 92 >> 2] = 0;
        $140($13_1, $3_1, $2_1 + 92 | 0);
        $5_1 = HEAP32[$2_1 + 20 >> 2];
        $3_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
        $4_1 = $3_1;
        while (1) if ($4_1) {
         HEAP32[$5_1 >> 2] = -1;
         $4_1 = $4_1 - 1 | 0;
         $5_1 = $5_1 + 4 | 0;
         continue;
        } else {
         $4_1 = HEAP32[$2_1 + 40 >> 2];
         while (1) if ($3_1) {
          HEAP32[$4_1 >> 2] = -1;
          $3_1 = $3_1 - 1 | 0;
          $4_1 = $4_1 + 4 | 0;
          continue;
         } else {
          $3_1 = 0;
          $6_1 = ($6_1 | 0) > 0 ? $6_1 : 0;
          $4_1 = HEAP32[$2_1 + 40 >> 2];
          $11_1 = HEAP32[$2_1 + 20 >> 2];
          $5_1 = HEAP32[$2_1 + 80 >> 2];
          while (1) {
           if (($3_1 | 0) != ($6_1 | 0)) {
            $9_1 = $11_1 + ((HEAP32[$2_1 + 56 >> 2] - 1 & $628(HEAP32[$5_1 >> 2])) << 2) | 0;
            HEAP32[$4_1 >> 2] = HEAP32[$9_1 >> 2];
            HEAP32[$9_1 >> 2] = $3_1;
            $4_1 = $4_1 + 4 | 0;
            $5_1 = $5_1 + 8 | 0;
            $3_1 = $3_1 + 1 | 0;
            continue;
           }
           break;
          };
          $3_1 = HEAP32[$2_1 + 56 >> 2];
          break label$5;
         };
        };
       }
       $96($14_1);
       HEAP32[$2_1 + 80 >> 2] = 0;
       HEAP8[$2_1 + 84 | 0] = 1;
       HEAP32[$2_1 + 72 >> 2] = 0;
       HEAP32[$2_1 + 76 >> 2] = 0;
       $96($15_1);
       HEAP32[$2_1 + 60 >> 2] = 0;
       HEAP8[$2_1 + 64 | 0] = 1;
       HEAP32[$2_1 + 52 >> 2] = 0;
       HEAP32[$2_1 + 56 >> 2] = 0;
       $57($13_1);
       $57($2_1 + 8 | 0);
       global$0 = $2_1 + 96 | 0;
       return;
      }
      $4_1 = $628($7_1) & $3_1 - 1;
     }
     $3_1 = HEAP32[$2_1 + 20 >> 2] + ($4_1 << 2) | 0;
     HEAP32[HEAP32[$2_1 + 40 >> 2] + ($12_1 << 2) >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$3_1 >> 2] = $12_1;
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$8_1 >> 2] + 60 >> 2]]($8_1, $1_1);
   }
   $10_1 = $10_1 + 1 | 0;
   continue;
  };
 }
 
 function $627($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  $3_1 = HEAP32[$1_1 >> 2];
  $1_1 = HEAP32[$0_1 + 48 >> 2] - 1 & $628($3_1);
  $2_1 = -1;
  label$1 : {
   if ($1_1 >>> 0 >= HEAPU32[$0_1 + 4 >> 2]) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 + 12 >> 2] + ($1_1 << 2) | 0;
   while (1) {
    $1_1 = HEAP32[$1_1 >> 2];
    $2_1 = -1;
    if (($1_1 | 0) == -1) {
     break label$1
    }
    if (!(HEAP32[HEAP32[$0_1 + 72 >> 2] + ($1_1 << 3) >> 2] == ($3_1 | 0))) {
     $1_1 = HEAP32[$0_1 + 32 >> 2] + ($1_1 << 2) | 0;
     continue;
    }
    break;
   };
   $2_1 = $1_1;
  }
  return $2_1;
 }
 
 function $628($0_1) {
  $0_1 = ($0_1 << 15 ^ -1) + $0_1 | 0;
  $0_1 = Math_imul($0_1 >>> 10 ^ $0_1, 9);
  $0_1 = $0_1 >>> 6 ^ $0_1;
  $0_1 = ($0_1 << 11 ^ -1) + $0_1 | 0;
  return $0_1 >>> 16 ^ $0_1;
 }
 
 function $629($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$0_1 + 216 >> 2];
  $4_1 = HEAPF32[$3_1 + 4 >> 2];
  label$1 : {
   if ($4_1 == Math_fround(0.0)) {
    break label$1
   }
   $1_1 = HEAP32[$1_1 >> 2];
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, HEAP32[$1_1 + 188 >> 2]) | 0)) {
    break label$1
   }
   $3_1 = HEAP32[$0_1 + 216 >> 2];
   $5_1 = HEAP32[$1_1 + 192 >> 2];
   HEAP32[$2_1 + 24 >> 2] = -1;
   HEAP32[$2_1 + 28 >> 2] = -1;
   HEAP32[$2_1 + 20 >> 2] = $1_1 + 4;
   HEAP32[$2_1 + 16 >> 2] = $1_1;
   HEAP32[$2_1 + 12 >> 2] = $5_1;
   HEAP32[$2_1 + 8 >> 2] = 0;
   $630($0_1 + 68 | 0, $0_1 + 132 | 0, $2_1 + 8 | 0, $3_1);
  }
  global$0 = $2_1 + 32 | 0;
  return $4_1 != Math_fround(0.0) | 0;
 }
 
 function $630($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0);
  $4_1 = global$0 - 928 | 0;
  global$0 = $4_1;
  $6_1 = $373($4_1 + 288 | 0, Math_fround(0.0));
  HEAP32[$6_1 + 48 >> 2] = 0;
  $5_1 = HEAP32[$2_1 + 12 >> 2];
  label$1 : {
   $7_1 = HEAP32[$2_1 + 4 >> 2];
   $10_1 = HEAP32[$7_1 + 4 >> 2];
   if (($10_1 | 0) <= 19) {
    HEAP32[$4_1 + 280 >> 2] = 0;
    HEAP32[$4_1 + 284 >> 2] = 0;
    HEAP32[$4_1 + 112 >> 2] = 11640;
    HEAPF32[$4_1 + 276 >> 2] = HEAPF32[$3_1 + 4 >> 2];
    HEAP8[$4_1 + 684 | 0] = 0;
    HEAP32[$4_1 + 660 >> 2] = 953267991;
    HEAP32[$4_1 + 884 >> 2] = $7_1;
    HEAP32[$4_1 + 880 >> 2] = $6_1;
    HEAP32[$4_1 + 872 >> 2] = 12256;
    HEAP32[$4_1 + 876 >> 2] = $4_1 + 352;
    HEAP32[$4_1 + 912 >> 2] = 11260;
    HEAP32[$4_1 + 924 >> 2] = $7_1;
    HEAP32[$4_1 + 920 >> 2] = $6_1;
    $7_1 = HEAP32[$3_1 + 20 >> 2] & 8 ? $4_1 + 912 | 0 : $4_1 + 872 | 0;
    $6_1 = HEAP32[HEAP32[$7_1 >> 2] + 8 >> 2];
    HEAP32[$4_1 + 916 >> 2] = $4_1 + 352;
    if (!(FUNCTION_TABLE[$6_1 | 0]($7_1, $0_1, $1_1, $5_1, $5_1, $4_1 + 112 | 0) | 0)) {
     break label$1
    }
    $8_1 = HEAPF32[$4_1 + 244 >> 2];
    $9_1 = Math_fround($8_1 * $8_1);
    $8_1 = HEAPF32[$4_1 + 248 >> 2];
    $9_1 = Math_fround($9_1 + Math_fround($8_1 * $8_1));
    $8_1 = HEAPF32[$4_1 + 252 >> 2];
    if (!(Math_fround($9_1 + Math_fround($8_1 * $8_1)) > Math_fround(9.999999747378752e-05))) {
     break label$1
    }
    if (!(HEAPF32[$4_1 + 276 >> 2] < HEAPF32[$3_1 + 4 >> 2])) {
     break label$1
    }
    $0_1 = $84($4_1 + 244 | 0);
    $5_1 = $0_1 + 8 | 0;
    $7_1 = HEAP32[$5_1 + 4 >> 2];
    $1_1 = $4_1 - -64 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $7_1;
    HEAPF32[$4_1 + 72 >> 2] = HEAPF32[$4_1 + 276 >> 2];
    $1_1 = HEAP32[$0_1 + 4 >> 2];
    HEAP32[$4_1 + 56 >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$4_1 + 60 >> 2] = $1_1;
    HEAP32[$4_1 + 52 >> 2] = 0;
    HEAP32[$4_1 + 48 >> 2] = HEAP32[$2_1 + 8 >> 2];
    Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1, $4_1 + 48 | 0, 1));
    break label$1;
   }
   if ($10_1 - 21 >>> 0 <= 8) {
    $379($4_1 + 112 | 0, $5_1);
    $6_1 = $0_1 + 52 | 0;
    $10_1 = $0_1 + 56 | 0;
    $78($4_1 + 912 | 0, $4_1 + 112 | 0, HEAPF32[$0_1 + 48 >> 2], HEAPF32[$6_1 >> 2], HEAPF32[$10_1 >> 2]);
    $12_1 = $1_1 + 52 | 0;
    $14_1 = $1_1 + 56 | 0;
    $78($4_1 + 896 | 0, $4_1 + 112 | 0, HEAPF32[$1_1 + 48 >> 2], HEAPF32[$12_1 >> 2], HEAPF32[$14_1 >> 2]);
    if (HEAP32[$7_1 + 4 >> 2] == 21) {
     $1_1 = $4_1 + 904 | 0;
     $6_1 = HEAP32[$1_1 + 4 >> 2];
     $0_1 = $4_1 + 380 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $6_1;
     $1_1 = $4_1 + 920 | 0;
     $6_1 = HEAP32[$1_1 + 4 >> 2];
     $0_1 = $4_1 + 364 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $6_1;
     $0_1 = HEAP32[$4_1 + 900 >> 2];
     HEAP32[$4_1 + 372 >> 2] = HEAP32[$4_1 + 896 >> 2];
     HEAP32[$4_1 + 376 >> 2] = $0_1;
     $0_1 = HEAP32[$4_1 + 916 >> 2];
     HEAP32[$4_1 + 356 >> 2] = HEAP32[$4_1 + 912 >> 2];
     HEAP32[$4_1 + 360 >> 2] = $0_1;
     HEAP32[$4_1 + 392 >> 2] = 1065353216;
     HEAP32[$4_1 + 352 >> 2] = 16692;
     HEAP32[$4_1 + 400 >> 2] = HEAP32[$2_1 + 8 >> 2];
     HEAP32[$4_1 + 396 >> 2] = $3_1;
     HEAP32[$4_1 + 388 >> 2] = HEAP32[$3_1 + 20 >> 2];
     HEAP32[$4_1 + 404 >> 2] = $7_1;
     $1_1 = $5_1 + 8 | 0;
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     $0_1 = $4_1 + 416 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $2_1;
     $0_1 = HEAP32[$5_1 + 4 >> 2];
     HEAP32[$4_1 + 408 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$4_1 + 412 >> 2] = $0_1;
     $1_1 = $5_1 + 24 | 0;
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     $0_1 = $4_1 + 432 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $2_1;
     $1_1 = HEAP32[$5_1 + 20 >> 2];
     $0_1 = $4_1 + 424 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$5_1 + 16 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $1_1;
     $1_1 = $5_1 + 40 | 0;
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     $0_1 = $4_1 + 448 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $2_1;
     $1_1 = HEAP32[$5_1 + 36 >> 2];
     $0_1 = $4_1 + 440 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$5_1 + 32 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $1_1;
     $1_1 = $5_1 + 56 | 0;
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     $0_1 = $4_1 + 464 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $2_1;
     $1_1 = HEAP32[$5_1 + 52 >> 2];
     $0_1 = $4_1 + 456 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$5_1 + 48 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $1_1;
     HEAPF32[$4_1 + 392 >> 2] = HEAPF32[$3_1 + 4 >> 2];
     HEAP32[$4_1 + 32 >> 2] = 10656;
     HEAP32[$4_1 + 36 >> 2] = HEAP32[$7_1 + 52 >> 2];
     $0_1 = HEAP32[$7_1 + 56 >> 2];
     HEAP32[$4_1 + 40 >> 2] = $4_1 + 352;
     $1_1 = $4_1 + 56 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$4_1 + 48 >> 2] = 0;
     HEAP32[$4_1 + 52 >> 2] = 0;
     $1_1 = $4_1 + 880 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$4_1 + 872 >> 2] = 0;
     HEAP32[$4_1 + 876 >> 2] = 0;
     $310($0_1, $4_1 + 32 | 0, $4_1 + 912 | 0, $4_1 + 896 | 0, $4_1 + 48 | 0, $4_1 + 872 | 0);
     break label$1;
    }
    $379($4_1 + 48 | 0, $5_1);
    $78($4_1 + 872 | 0, $4_1 + 48 | 0, HEAPF32[$0_1 + 48 >> 2], HEAPF32[$6_1 >> 2], HEAPF32[$10_1 >> 2]);
    $78($4_1 + 32 | 0, $4_1 + 48 | 0, HEAPF32[$1_1 + 48 >> 2], HEAPF32[$12_1 >> 2], HEAPF32[$14_1 >> 2]);
    $1_1 = $4_1 + 40 | 0;
    $6_1 = HEAP32[$1_1 + 4 >> 2];
    $0_1 = $4_1 + 380 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $6_1;
    $0_1 = $4_1 + 880 | 0;
    $10_1 = HEAP32[$0_1 + 4 >> 2];
    $1_1 = $4_1 + 364 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $10_1;
    $1_1 = HEAP32[$4_1 + 36 >> 2];
    HEAP32[$4_1 + 372 >> 2] = HEAP32[$4_1 + 32 >> 2];
    HEAP32[$4_1 + 376 >> 2] = $1_1;
    $1_1 = HEAP32[$4_1 + 876 >> 2];
    HEAP32[$4_1 + 356 >> 2] = HEAP32[$4_1 + 872 >> 2];
    HEAP32[$4_1 + 360 >> 2] = $1_1;
    HEAP32[$4_1 + 392 >> 2] = 1065353216;
    HEAP32[$4_1 + 404 >> 2] = $7_1;
    HEAP32[$4_1 + 352 >> 2] = 16692;
    HEAP32[$4_1 + 400 >> 2] = HEAP32[$2_1 + 8 >> 2];
    HEAP32[$4_1 + 396 >> 2] = $3_1;
    HEAP32[$4_1 + 388 >> 2] = HEAP32[$3_1 + 20 >> 2];
    $2_1 = $5_1 + 8 | 0;
    $6_1 = HEAP32[$2_1 + 4 >> 2];
    $1_1 = $4_1 + 416 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $6_1;
    $1_1 = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$4_1 + 408 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$4_1 + 412 >> 2] = $1_1;
    $2_1 = $5_1 + 24 | 0;
    $6_1 = HEAP32[$2_1 + 4 >> 2];
    $1_1 = $4_1 + 432 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $6_1;
    $2_1 = HEAP32[$5_1 + 20 >> 2];
    $1_1 = $4_1 + 424 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 16 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $2_1;
    $2_1 = HEAP32[$5_1 + 36 >> 2];
    $1_1 = $4_1 + 440 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 32 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $2_1;
    $2_1 = $5_1 + 40 | 0;
    $6_1 = HEAP32[$2_1 + 4 >> 2];
    $1_1 = $4_1 + 448 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $6_1;
    $2_1 = HEAP32[$5_1 + 52 >> 2];
    $1_1 = $4_1 + 456 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 48 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $2_1;
    $2_1 = $5_1 + 56 | 0;
    $5_1 = HEAP32[$2_1 + 4 >> 2];
    $1_1 = $4_1 + 464 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $5_1;
    HEAPF32[$4_1 + 392 >> 2] = HEAPF32[$3_1 + 4 >> 2];
    $2_1 = HEAP32[$0_1 + 4 >> 2];
    $1_1 = $4_1 + 24 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $2_1;
    $0_1 = HEAP32[$4_1 + 876 >> 2];
    HEAP32[$4_1 + 16 >> 2] = HEAP32[$4_1 + 872 >> 2];
    HEAP32[$4_1 + 20 >> 2] = $0_1;
    $8_1 = HEAPF32[$4_1 + 32 >> 2];
    if ($8_1 < HEAPF32[$4_1 + 16 >> 2]) {
     HEAPF32[$4_1 + 16 >> 2] = $8_1
    }
    $9_1 = HEAPF32[$4_1 + 36 >> 2];
    if ($9_1 < HEAPF32[$4_1 + 20 >> 2]) {
     HEAPF32[$4_1 + 20 >> 2] = $9_1
    }
    $11_1 = HEAPF32[$4_1 + 40 >> 2];
    if ($11_1 < HEAPF32[$4_1 + 24 >> 2]) {
     HEAPF32[$4_1 + 24 >> 2] = $11_1
    }
    $13_1 = HEAPF32[$4_1 + 44 >> 2];
    if ($13_1 < HEAPF32[$4_1 + 28 >> 2]) {
     HEAPF32[$4_1 + 28 >> 2] = $13_1
    }
    $1_1 = $4_1 + 880 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $0_1 = $4_1 + 8 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    $0_1 = HEAP32[$4_1 + 876 >> 2];
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 + 872 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $0_1;
    if ($8_1 > HEAPF32[$4_1 >> 2]) {
     HEAPF32[$4_1 >> 2] = $8_1
    }
    if ($9_1 > HEAPF32[$4_1 + 4 >> 2]) {
     HEAPF32[$4_1 + 4 >> 2] = $9_1
    }
    if ($11_1 > HEAPF32[$4_1 + 8 >> 2]) {
     HEAPF32[$4_1 + 8 >> 2] = $11_1
    }
    if ($13_1 > HEAPF32[$4_1 + 12 >> 2]) {
     HEAPF32[$4_1 + 12 >> 2] = $13_1
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 64 >> 2]]($7_1, $4_1 + 352 | 0, $4_1 + 16 | 0, $4_1);
    break label$1;
   }
   if (($10_1 | 0) != 31) {
    break label$1
   }
   $6_1 = HEAP32[$7_1 + 68 >> 2];
   HEAP32[$4_1 + 72 >> 2] = $3_1;
   HEAP32[$4_1 + 68 >> 2] = $1_1;
   HEAP32[$4_1 + 64 >> 2] = $0_1;
   HEAP32[$4_1 + 60 >> 2] = $5_1;
   HEAP32[$4_1 + 56 >> 2] = $7_1;
   HEAP32[$4_1 + 48 >> 2] = 16344;
   HEAP32[$4_1 + 52 >> 2] = HEAP32[$2_1 + 8 >> 2];
   if ($6_1) {
    $444($4_1 + 352 | 0, $5_1, $0_1);
    $2_1 = $4_1 + 408 | 0;
    $7_1 = HEAP32[$2_1 + 4 >> 2];
    $0_1 = $4_1 + 40 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $7_1;
    $0_1 = HEAP32[$4_1 + 404 >> 2];
    HEAP32[$4_1 + 32 >> 2] = HEAP32[$4_1 + 400 >> 2];
    HEAP32[$4_1 + 36 >> 2] = $0_1;
    $444($4_1 + 352 | 0, $5_1, $1_1);
    $1_1 = HEAP32[$6_1 >> 2];
    if (!$1_1) {
     break label$1
    }
    $8_1 = HEAPF32[$2_1 >> 2];
    $9_1 = HEAPF32[$4_1 + 404 >> 2];
    $11_1 = HEAPF32[$4_1 + 400 >> 2];
    HEAP32[$4_1 + 924 >> 2] = 0;
    $13_1 = Math_fround($8_1 - HEAPF32[$4_1 + 40 >> 2]);
    HEAPF32[$4_1 + 920 >> 2] = $13_1;
    $15_1 = Math_fround($11_1 - HEAPF32[$4_1 + 32 >> 2]);
    HEAPF32[$4_1 + 912 >> 2] = $15_1;
    $16_1 = Math_fround($9_1 - HEAPF32[$4_1 + 36 >> 2]);
    HEAPF32[$4_1 + 916 >> 2] = $16_1;
    $84($4_1 + 912 | 0);
    $8_1 = HEAPF32[$4_1 + 912 >> 2];
    $17_1 = $8_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $8_1);
    HEAPF32[$4_1 + 896 >> 2] = $17_1;
    $9_1 = HEAPF32[$4_1 + 916 >> 2];
    $18_1 = $9_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $9_1);
    HEAPF32[$4_1 + 900 >> 2] = $18_1;
    $11_1 = HEAPF32[$4_1 + 920 >> 2];
    $19_1 = $11_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $11_1);
    HEAPF32[$4_1 + 904 >> 2] = $19_1;
    HEAP32[$4_1 + 24 >> 2] = $19_1 < Math_fround(0.0);
    HEAP32[$4_1 + 20 >> 2] = $18_1 < Math_fround(0.0);
    HEAP32[$4_1 + 16 >> 2] = $17_1 < Math_fround(0.0);
    HEAP32[$4_1 + 884 >> 2] = 0;
    HEAP8[$4_1 + 888 | 0] = 1;
    HEAP32[$4_1 + 876 >> 2] = 0;
    HEAP32[$4_1 + 880 >> 2] = 0;
    $288($4_1 + 872 | 0, $4_1 + 352 | 0, 128, 128);
    $0_1 = HEAP32[$4_1 + 884 >> 2];
    HEAP32[$0_1 >> 2] = $1_1;
    $8_1 = Math_fround(Math_fround(Math_fround($8_1 * $15_1) + Math_fround($16_1 * $9_1)) + Math_fround($13_1 * $11_1));
    $5_1 = $4_1 + 128 | 0;
    $7_1 = 126;
    $2_1 = 1;
    while (1) {
     $1_1 = $2_1 - 1 | 0;
     $10_1 = $1_1 << 2;
     $3_1 = HEAP32[$10_1 + $0_1 >> 2];
     $6_1 = $3_1;
     $12_1 = HEAP32[$6_1 + 20 >> 2];
     HEAP32[$5_1 >> 2] = HEAP32[$6_1 + 16 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $12_1;
     $6_1 = $6_1 + 24 | 0;
     $14_1 = HEAP32[$6_1 + 4 >> 2];
     $12_1 = $5_1 + 8 | 0;
     HEAP32[$12_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$12_1 + 4 >> 2] = $14_1;
     $6_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$4_1 + 112 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$4_1 + 116 >> 2] = $6_1;
     $6_1 = $3_1 + 8 | 0;
     $12_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$4_1 + 120 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$4_1 + 124 >> 2] = $12_1;
     HEAP32[$4_1 >> 2] = 1065353216;
     label$15 : {
      if ($309($4_1 + 32 | 0, $4_1 + 896 | 0, $4_1 + 16 | 0, $4_1 + 112 | 0, $4_1, $8_1)) {
       if (HEAP32[$3_1 + 40 >> 2]) {
        if (($1_1 | 0) > ($7_1 | 0)) {
         $0_1 = HEAP32[$4_1 + 876 >> 2];
         HEAP32[$4_1 + 348 >> 2] = 0;
         $140($4_1 + 872 | 0, $0_1 << 1, $4_1 + 348 | 0);
         $7_1 = HEAP32[$4_1 + 876 >> 2] - 2 | 0;
         $0_1 = HEAP32[$4_1 + 884 >> 2];
        }
        HEAP32[$0_1 + $10_1 >> 2] = HEAP32[$3_1 + 36 >> 2];
        HEAP32[($2_1 << 2) + $0_1 >> 2] = HEAP32[$3_1 + 40 >> 2];
        $1_1 = $2_1 + 1 | 0;
        break label$15;
       }
       FUNCTION_TABLE[HEAP32[HEAP32[$4_1 + 48 >> 2] + 12 >> 2]]($4_1 + 48 | 0, $3_1);
      }
     }
     $2_1 = $1_1;
     if ($2_1) {
      continue
     }
     break;
    };
    $57($4_1 + 872 | 0);
    break label$1;
   }
   $0_1 = 0;
   $1_1 = HEAP32[$7_1 + 20 >> 2];
   $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
   while (1) {
    if (($0_1 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $631($4_1 + 48 | 0, $0_1);
    $0_1 = $0_1 + 1 | 0;
    continue;
   };
  }
  global$0 = $4_1 + 928 | 0;
 }
 
 function $631($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 128 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[HEAP32[$0_1 + 8 >> 2] + 28 >> 2] + Math_imul($1_1, 80) | 0;
  $4_1 = HEAP32[$3_1 + 64 >> 2];
  $380($2_1 - -64 | 0, HEAP32[$0_1 + 12 >> 2], $3_1);
  HEAP32[$2_1 + 60 >> 2] = $1_1;
  HEAP32[$2_1 + 56 >> 2] = -1;
  HEAP32[$2_1 + 44 >> 2] = $4_1;
  HEAP32[$2_1 + 40 >> 2] = 0;
  HEAP32[$2_1 + 48 >> 2] = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$2_1 + 52 >> 2] = $2_1 - -64;
  HEAP32[$2_1 + 12 >> 2] = 1065353216;
  HEAP32[$2_1 + 24 >> 2] = -1;
  HEAP32[$2_1 + 28 >> 2] = 0;
  HEAP32[$2_1 + 16 >> 2] = 0;
  HEAP32[$2_1 + 20 >> 2] = 1;
  HEAP32[$2_1 + 36 >> 2] = $1_1;
  HEAP32[$2_1 + 8 >> 2] = 16380;
  $1_1 = HEAP32[$0_1 + 24 >> 2];
  HEAP32[$2_1 + 32 >> 2] = $1_1;
  HEAPF32[$2_1 + 12 >> 2] = HEAPF32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 28 >> 2] = HEAP32[$1_1 + 20 >> 2];
  $630(HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 20 >> 2], $2_1 + 40 | 0, $2_1 + 8 | 0);
  global$0 = $2_1 + 128 | 0;
 }
 
 function $632($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[$0_1 + 24 >> 2];
  return FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $1_1) | 0;
 }
 
 function $633($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = HEAP32[$0_1 + 28 >> 2];
  HEAP32[$4_1 + 12 >> 2] = $3_1;
  HEAP32[$4_1 + 8 >> 2] = $3_1;
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  label$1 : {
   if (!$5_1) {
    HEAP32[$1_1 + 4 >> 2] = $4_1 + 8;
    break label$1;
   }
   HEAP32[$5_1 + 4 >> 2] = $3_1;
   HEAP32[$5_1 >> 2] = $3_1;
  }
  $3_1 = HEAP32[$0_1 + 24 >> 2];
  $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1, $1_1, $2_1));
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[HEAP32[$0_1 + 24 >> 2] + 4 >> 2];
  global$0 = $4_1 + 16 | 0;
  return Math_fround($6_1);
 }
 
 function $634($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $631($0_1, HEAP32[$1_1 + 36 >> 2]);
 }
 
 function $635($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 + -64 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 60 >> 2] = $4_1;
  HEAP32[$5_1 + 56 >> 2] = $3_1;
  $351($5_1 + 40 | 0, $0_1 + 56 | 0, HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2]);
  $3_1 = $5_1 + 48 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $1_1 = $5_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$5_1 + 44 >> 2];
  HEAP32[$5_1 + 16 >> 2] = HEAP32[$5_1 + 40 >> 2];
  HEAP32[$5_1 + 20 >> 2] = $1_1;
  HEAPF32[$5_1 + 32 >> 2] = $2_1;
  HEAP32[$5_1 + 8 >> 2] = HEAP32[$0_1 + 48 >> 2];
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 56;
  $0_1 = HEAP32[$0_1 + 44 >> 2];
  $2_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]]($0_1, $5_1 + 8 | 0, 1));
  global$0 = $5_1 - -64 | 0;
  return Math_fround($2_1);
 }
 
 function $636($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0);
  $2_1 = global$0 - 112 | 0;
  global$0 = $2_1;
  $3_1 = $0_1 + 28 | 0;
  $78($2_1 + 96 | 0, $3_1, HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2]);
  $78($2_1 + 80 | 0, $3_1, HEAPF32[$1_1 + 16 >> 2], HEAPF32[$1_1 + 20 >> 2], HEAPF32[$1_1 + 24 >> 2]);
  $78($2_1 - -64 | 0, $3_1, HEAPF32[$1_1 + 32 >> 2], HEAPF32[$1_1 + 36 >> 2], HEAPF32[$1_1 + 40 >> 2]);
  HEAP32[$2_1 + 60 >> 2] = 0;
  $4_1 = HEAPF32[$2_1 + 104 >> 2];
  $7_1 = HEAPF32[$2_1 + 88 >> 2];
  $10_1 = HEAPF32[$2_1 + 72 >> 2];
  $11_1 = Math_fround(Math_fround(Math_fround($4_1 + $7_1) + $10_1) * Math_fround(.3333333432674408));
  HEAPF32[$2_1 + 56 >> 2] = $11_1;
  $5_1 = HEAPF32[$2_1 + 100 >> 2];
  $12_1 = HEAPF32[$2_1 + 84 >> 2];
  $8_1 = HEAPF32[$2_1 + 68 >> 2];
  $13_1 = Math_fround(Math_fround(Math_fround($5_1 + $12_1) + $8_1) * Math_fround(.3333333432674408));
  HEAPF32[$2_1 + 52 >> 2] = $13_1;
  $6_1 = HEAPF32[$2_1 + 96 >> 2];
  $9_1 = HEAPF32[$2_1 + 80 >> 2];
  $14_1 = HEAPF32[$2_1 + 64 >> 2];
  $15_1 = Math_fround(Math_fround(Math_fround($6_1 + $9_1) + $14_1) * Math_fround(.3333333432674408));
  HEAPF32[$2_1 + 48 >> 2] = $15_1;
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  if (FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 56 >> 2]]($1_1) & 16384) {
   HEAP32[$2_1 + 44 >> 2] = 0;
   $9_1 = Math_fround($9_1 - $6_1);
   $8_1 = Math_fround($8_1 - $5_1);
   $5_1 = Math_fround($12_1 - $5_1);
   $6_1 = Math_fround($14_1 - $6_1);
   HEAPF32[$2_1 + 40 >> 2] = Math_fround($9_1 * $8_1) - Math_fround($5_1 * $6_1);
   $7_1 = Math_fround($7_1 - $4_1);
   $4_1 = Math_fround($10_1 - $4_1);
   HEAPF32[$2_1 + 36 >> 2] = Math_fround($7_1 * $6_1) - Math_fround($9_1 * $4_1);
   HEAPF32[$2_1 + 32 >> 2] = Math_fround($5_1 * $4_1) - Math_fround($7_1 * $8_1);
   $84($2_1 + 32 | 0);
   HEAP32[$2_1 + 24 >> 2] = 0;
   HEAP32[$2_1 + 28 >> 2] = 0;
   HEAP32[$2_1 + 16 >> 2] = 1065353216;
   HEAP32[$2_1 + 20 >> 2] = 1065353216;
   $1_1 = HEAP32[$0_1 + 8 >> 2];
   HEAP32[$2_1 + 12 >> 2] = 0;
   HEAPF32[$2_1 + 8 >> 2] = $11_1 + HEAPF32[$2_1 + 40 >> 2];
   HEAPF32[$2_1 + 4 >> 2] = $13_1 + HEAPF32[$2_1 + 36 >> 2];
   HEAPF32[$2_1 >> 2] = $15_1 + HEAPF32[$2_1 + 32 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]]($1_1, $2_1 + 48 | 0, $2_1, $2_1 + 16 | 0);
  }
  $3_1 = HEAP32[$0_1 + 8 >> 2];
  $1_1 = $0_1 + 12 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $2_1 + 96 | 0, $2_1 + 80 | 0, $1_1);
  $3_1 = HEAP32[$0_1 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $2_1 + 80 | 0, $2_1 - -64 | 0, $1_1);
  $0_1 = HEAP32[$0_1 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 16 >> 2]]($0_1, $2_1 - -64 | 0, $2_1 + 96 | 0, $1_1);
  global$0 = $2_1 + 112 | 0;
 }
 
 function $637($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $638($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 - 4 | 0;
 }
 
 function $639($0_1) {
  $0_1 = $0_1 | 0;
  $17($0_1 - 4 | 0);
 }
 
 function $640($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = $0_1 - 4 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $641($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25 = Math_fround(0);
  $6_1 = global$0 - 704 | 0;
  global$0 = $6_1;
  $9_1 = HEAP32[$3_1 + 12 >> 2];
  $15_1 = HEAP32[$3_1 + 4 >> 2];
  $7_1 = HEAP32[$15_1 + 4 >> 2];
  label$1 : {
   if (($7_1 | 0) <= 19) {
    HEAPF32[$6_1 + 700 >> 2] = $5_1;
    HEAP32[$6_1 + 696 >> 2] = 0;
    HEAP32[$6_1 + 528 >> 2] = 11640;
    HEAPF32[$6_1 + 692 >> 2] = HEAPF32[$4_1 + 4 >> 2];
    HEAP8[$6_1 + 500 | 0] = 0;
    HEAP32[$6_1 + 476 >> 2] = 953267991;
    HEAP32[$6_1 + 128 >> 2] = 13688;
    HEAP32[$6_1 + 164 >> 2] = 0;
    HEAP32[$6_1 + 160 >> 2] = $15_1;
    HEAP32[$6_1 + 156 >> 2] = $0_1;
    HEAP32[$6_1 + 144 >> 2] = 16072;
    HEAP32[$6_1 + 152 >> 2] = $6_1 + 128;
    HEAP32[$6_1 + 148 >> 2] = $6_1 + 168;
    if (!$610($6_1 + 144 | 0, $1_1, $2_1, $9_1, $9_1, $6_1 + 528 | 0)) {
     break label$1
    }
    $5_1 = HEAPF32[$6_1 + 660 >> 2];
    $10_1 = Math_fround($5_1 * $5_1);
    $5_1 = HEAPF32[$6_1 + 664 >> 2];
    $10_1 = Math_fround($10_1 + Math_fround($5_1 * $5_1));
    $5_1 = HEAPF32[$6_1 + 668 >> 2];
    if (!(Math_fround($10_1 + Math_fround($5_1 * $5_1)) > Math_fround(9.999999747378752e-05))) {
     break label$1
    }
    if (!(HEAPF32[$6_1 + 692 >> 2] < HEAPF32[$4_1 + 4 >> 2])) {
     break label$1
    }
    $0_1 = $84($6_1 + 660 | 0);
    $2_1 = $6_1 + 684 | 0;
    $9_1 = HEAP32[$2_1 + 4 >> 2];
    $1_1 = $6_1 + 96 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $9_1;
    $2_1 = $0_1 + 8 | 0;
    $9_1 = HEAP32[$2_1 + 4 >> 2];
    $1_1 = $6_1 + 80 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $9_1;
    $1_1 = HEAP32[$6_1 + 680 >> 2];
    HEAP32[$6_1 + 88 >> 2] = HEAP32[$6_1 + 676 >> 2];
    HEAP32[$6_1 + 92 >> 2] = $1_1;
    HEAPF32[$6_1 + 104 >> 2] = HEAPF32[$6_1 + 692 >> 2];
    $1_1 = HEAP32[$0_1 + 4 >> 2];
    HEAP32[$6_1 + 72 >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$6_1 + 76 >> 2] = $1_1;
    HEAP32[$6_1 + 68 >> 2] = 0;
    HEAP32[$6_1 + 64 >> 2] = HEAP32[$3_1 + 8 >> 2];
    Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 12 >> 2]]($4_1, $6_1 - -64 | 0, 1));
    break label$1;
   }
   if ($7_1 - 21 >>> 0 <= 8) {
    label$4 : {
     if (($7_1 | 0) != 28) {
      if (($7_1 | 0) != 21) {
       break label$4
      }
      $379($6_1 + 528 | 0, $9_1);
      $7_1 = $1_1 + 48 | 0;
      $11_1 = $1_1 + 56 | 0;
      $78($6_1 + 144 | 0, $6_1 + 528 | 0, HEAPF32[$7_1 >> 2], HEAPF32[$1_1 + 52 >> 2], HEAPF32[$11_1 >> 2]);
      $17_1 = $2_1 + 48 | 0;
      $14_1 = $2_1 + 56 | 0;
      $78($6_1 + 128 | 0, $6_1 + 528 | 0, HEAPF32[$17_1 >> 2], HEAPF32[$2_1 + 52 >> 2], HEAPF32[$14_1 >> 2]);
      $245($6_1 + 168 | 0, $6_1 + 528 | 0, $2_1);
      $8_1 = $6_1 + 120 | 0;
      HEAP32[$8_1 >> 2] = 0;
      HEAP32[$8_1 + 4 >> 2] = 0;
      $13_1 = $6_1 + 176 | 0;
      $12_1 = HEAP32[$13_1 + 4 >> 2];
      $8_1 = $6_1 + 72 | 0;
      HEAP32[$8_1 >> 2] = HEAP32[$13_1 >> 2];
      HEAP32[$8_1 + 4 >> 2] = $12_1;
      $8_1 = $6_1 + 192 | 0;
      $16_1 = HEAP32[$8_1 + 4 >> 2];
      $13_1 = $6_1 + 88 | 0;
      HEAP32[$13_1 >> 2] = HEAP32[$8_1 >> 2];
      HEAP32[$13_1 + 4 >> 2] = $16_1;
      $13_1 = $6_1 + 208 | 0;
      $18_1 = HEAP32[$13_1 + 4 >> 2];
      $12_1 = $6_1 + 104 | 0;
      HEAP32[$12_1 >> 2] = HEAP32[$13_1 >> 2];
      HEAP32[$12_1 + 4 >> 2] = $18_1;
      HEAP32[$6_1 + 112 >> 2] = 0;
      HEAP32[$6_1 + 116 >> 2] = 0;
      $12_1 = HEAP32[$6_1 + 172 >> 2];
      HEAP32[$6_1 + 64 >> 2] = HEAP32[$6_1 + 168 >> 2];
      HEAP32[$6_1 + 68 >> 2] = $12_1;
      $12_1 = HEAP32[$6_1 + 188 >> 2];
      HEAP32[$6_1 + 80 >> 2] = HEAP32[$6_1 + 184 >> 2];
      HEAP32[$6_1 + 84 >> 2] = $12_1;
      $12_1 = HEAP32[$6_1 + 204 >> 2];
      HEAP32[$6_1 + 96 >> 2] = HEAP32[$6_1 + 200 >> 2];
      HEAP32[$6_1 + 100 >> 2] = $12_1;
      $3_1 = HEAP32[$3_1 + 8 >> 2];
      $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$15_1 >> 2] + 48 >> 2]]($15_1));
      $16_1 = $1_1 + 8 | 0;
      $18_1 = HEAP32[$16_1 + 4 >> 2];
      $12_1 = $6_1 + 184 | 0;
      HEAP32[$12_1 >> 2] = HEAP32[$16_1 >> 2];
      HEAP32[$12_1 + 4 >> 2] = $18_1;
      $12_1 = HEAP32[$1_1 + 20 >> 2];
      HEAP32[$8_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
      HEAP32[$8_1 + 4 >> 2] = $12_1;
      $12_1 = $1_1 + 24 | 0;
      $16_1 = HEAP32[$12_1 + 4 >> 2];
      $8_1 = $6_1 + 200 | 0;
      HEAP32[$8_1 >> 2] = HEAP32[$12_1 >> 2];
      HEAP32[$8_1 + 4 >> 2] = $16_1;
      $8_1 = HEAP32[$1_1 + 36 >> 2];
      HEAP32[$13_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
      HEAP32[$13_1 + 4 >> 2] = $8_1;
      $13_1 = $1_1 + 40 | 0;
      $12_1 = HEAP32[$13_1 + 4 >> 2];
      $8_1 = $6_1 + 216 | 0;
      HEAP32[$8_1 >> 2] = HEAP32[$13_1 >> 2];
      HEAP32[$8_1 + 4 >> 2] = $12_1;
      $13_1 = HEAP32[$7_1 + 4 >> 2];
      $8_1 = $6_1 + 224 | 0;
      HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$8_1 + 4 >> 2] = $13_1;
      $8_1 = HEAP32[$11_1 + 4 >> 2];
      $7_1 = $6_1 + 232 | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$11_1 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $8_1;
      $11_1 = $2_1 + 8 | 0;
      $8_1 = HEAP32[$11_1 + 4 >> 2];
      $7_1 = $6_1 + 248 | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$11_1 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $8_1;
      HEAP32[$6_1 + 172 >> 2] = $0_1;
      HEAP32[$6_1 + 168 >> 2] = 16176;
      $7_1 = HEAP32[$1_1 + 4 >> 2];
      HEAP32[$6_1 + 176 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$6_1 + 180 >> 2] = $7_1;
      $1_1 = HEAP32[$2_1 + 4 >> 2];
      HEAP32[$6_1 + 240 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$6_1 + 244 >> 2] = $1_1;
      $7_1 = $2_1 + 24 | 0;
      $11_1 = HEAP32[$7_1 + 4 >> 2];
      $1_1 = $6_1 + 264 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $11_1;
      $7_1 = HEAP32[$2_1 + 20 >> 2];
      $1_1 = $6_1 + 256 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 16 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $7_1;
      $7_1 = $2_1 + 40 | 0;
      $11_1 = HEAP32[$7_1 + 4 >> 2];
      $1_1 = $6_1 + 280 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $11_1;
      $7_1 = HEAP32[$2_1 + 36 >> 2];
      $1_1 = $6_1 + 272 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 32 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $7_1;
      $2_1 = HEAP32[$14_1 + 4 >> 2];
      $1_1 = $6_1 + 296 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$14_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $2_1;
      $2_1 = HEAP32[$17_1 + 4 >> 2];
      $1_1 = $6_1 + 288 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$17_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $2_1;
      $2_1 = $9_1 + 8 | 0;
      $7_1 = HEAP32[$2_1 + 4 >> 2];
      $1_1 = $6_1 + 312 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $7_1;
      $1_1 = HEAP32[$9_1 + 4 >> 2];
      HEAP32[$6_1 + 304 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$6_1 + 308 >> 2] = $1_1;
      $2_1 = $9_1 + 24 | 0;
      $7_1 = HEAP32[$2_1 + 4 >> 2];
      $1_1 = $6_1 + 328 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $7_1;
      $2_1 = HEAP32[$9_1 + 20 >> 2];
      $1_1 = $6_1 + 320 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$9_1 + 16 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $2_1;
      $2_1 = $9_1 + 40 | 0;
      $7_1 = HEAP32[$2_1 + 4 >> 2];
      $1_1 = $6_1 + 344 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $7_1;
      $2_1 = HEAP32[$9_1 + 36 >> 2];
      $1_1 = $6_1 + 336 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$9_1 + 32 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $2_1;
      $2_1 = $9_1 + 56 | 0;
      $7_1 = HEAP32[$2_1 + 4 >> 2];
      $1_1 = $6_1 + 360 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $7_1;
      $2_1 = HEAP32[$9_1 + 52 >> 2];
      $1_1 = $6_1 + 352 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$9_1 + 48 >> 2];
      HEAP32[$1_1 + 4 >> 2] = $2_1;
      HEAPF32[$6_1 + 372 >> 2] = $10_1;
      HEAP32[$6_1 + 388 >> 2] = $15_1;
      HEAP32[$6_1 + 384 >> 2] = $3_1;
      HEAP32[$6_1 + 168 >> 2] = 17284;
      HEAP32[$6_1 + 380 >> 2] = $4_1;
      $10_1 = HEAPF32[$4_1 + 4 >> 2];
      HEAPF32[$6_1 + 376 >> 2] = $5_1;
      HEAPF32[$6_1 + 368 >> 2] = $10_1;
      FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $6_1 - -64 | 0, $6_1 + 48 | 0, $6_1 + 32 | 0);
      HEAP32[$6_1 + 16 >> 2] = 10792;
      HEAP32[$6_1 + 20 >> 2] = HEAP32[$15_1 + 52 >> 2];
      $0_1 = HEAP32[$15_1 + 56 >> 2];
      HEAP32[$6_1 + 24 >> 2] = $6_1 + 168;
      $310($0_1, $6_1 + 16 | 0, $6_1 + 144 | 0, $6_1 + 128 | 0, $6_1 + 48 | 0, $6_1 + 32 | 0);
      break label$1;
     }
     HEAPF32[$6_1 + 340 >> 2] = $5_1;
     HEAP32[$6_1 + 336 >> 2] = 0;
     HEAP32[$6_1 + 168 >> 2] = 11640;
     HEAPF32[$6_1 + 332 >> 2] = HEAPF32[$4_1 + 4 >> 2];
     HEAP32[$6_1 + 84 >> 2] = $15_1;
     HEAP32[$6_1 + 80 >> 2] = 0;
     HEAP32[$6_1 + 76 >> 2] = $0_1;
     HEAP32[$6_1 + 68 >> 2] = 0;
     HEAP32[$6_1 + 72 >> 2] = 0;
     HEAP32[$6_1 + 64 >> 2] = 16072;
     if (!$610($6_1 - -64 | 0, $1_1, $2_1, $9_1, $9_1, $6_1 + 168 | 0)) {
      break label$1
     }
     $5_1 = HEAPF32[$6_1 + 300 >> 2];
     $10_1 = Math_fround($5_1 * $5_1);
     $5_1 = HEAPF32[$6_1 + 304 >> 2];
     $10_1 = Math_fround($10_1 + Math_fround($5_1 * $5_1));
     $5_1 = HEAPF32[$6_1 + 308 >> 2];
     if (!(Math_fround($10_1 + Math_fround($5_1 * $5_1)) > Math_fround(9.999999747378752e-05))) {
      break label$1
     }
     if (!(HEAPF32[$6_1 + 332 >> 2] < HEAPF32[$4_1 + 4 >> 2])) {
      break label$1
     }
     $0_1 = $84($6_1 + 300 | 0);
     $2_1 = $6_1 + 324 | 0;
     $9_1 = HEAP32[$2_1 + 4 >> 2];
     $1_1 = $6_1 + 560 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $9_1;
     $2_1 = $0_1 + 8 | 0;
     $9_1 = HEAP32[$2_1 + 4 >> 2];
     $1_1 = $6_1 + 544 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $9_1;
     $1_1 = HEAP32[$6_1 + 320 >> 2];
     HEAP32[$6_1 + 552 >> 2] = HEAP32[$6_1 + 316 >> 2];
     HEAP32[$6_1 + 556 >> 2] = $1_1;
     HEAPF32[$6_1 + 568 >> 2] = HEAPF32[$6_1 + 332 >> 2];
     $1_1 = HEAP32[$0_1 + 4 >> 2];
     HEAP32[$6_1 + 536 >> 2] = HEAP32[$0_1 >> 2];
     HEAP32[$6_1 + 540 >> 2] = $1_1;
     HEAP32[$6_1 + 532 >> 2] = 0;
     HEAP32[$6_1 + 528 >> 2] = HEAP32[$3_1 + 8 >> 2];
     Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 12 >> 2]]($4_1, $6_1 + 528 | 0, 1));
     break label$1;
    }
    $379($6_1 + 528 | 0, $9_1);
    $7_1 = $1_1 + 48 | 0;
    $11_1 = $1_1 + 56 | 0;
    $78($6_1 + 144 | 0, $6_1 + 528 | 0, HEAPF32[$7_1 >> 2], HEAPF32[$1_1 + 52 >> 2], HEAPF32[$11_1 >> 2]);
    $17_1 = $2_1 + 48 | 0;
    $14_1 = $2_1 + 56 | 0;
    $78($6_1 + 128 | 0, $6_1 + 528 | 0, HEAPF32[$17_1 >> 2], HEAPF32[$2_1 + 52 >> 2], HEAPF32[$14_1 >> 2]);
    $245($6_1 + 168 | 0, $6_1 + 528 | 0, $2_1);
    $8_1 = $6_1 + 120 | 0;
    HEAP32[$8_1 >> 2] = 0;
    HEAP32[$8_1 + 4 >> 2] = 0;
    $13_1 = $6_1 + 176 | 0;
    $12_1 = HEAP32[$13_1 + 4 >> 2];
    $8_1 = $6_1 + 72 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$13_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $12_1;
    $8_1 = $6_1 + 192 | 0;
    $16_1 = HEAP32[$8_1 + 4 >> 2];
    $13_1 = $6_1 + 88 | 0;
    HEAP32[$13_1 >> 2] = HEAP32[$8_1 >> 2];
    HEAP32[$13_1 + 4 >> 2] = $16_1;
    $13_1 = $6_1 + 208 | 0;
    $18_1 = HEAP32[$13_1 + 4 >> 2];
    $12_1 = $6_1 + 104 | 0;
    HEAP32[$12_1 >> 2] = HEAP32[$13_1 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $18_1;
    HEAP32[$6_1 + 112 >> 2] = 0;
    HEAP32[$6_1 + 116 >> 2] = 0;
    $12_1 = HEAP32[$6_1 + 172 >> 2];
    HEAP32[$6_1 + 64 >> 2] = HEAP32[$6_1 + 168 >> 2];
    HEAP32[$6_1 + 68 >> 2] = $12_1;
    $12_1 = HEAP32[$6_1 + 188 >> 2];
    HEAP32[$6_1 + 80 >> 2] = HEAP32[$6_1 + 184 >> 2];
    HEAP32[$6_1 + 84 >> 2] = $12_1;
    $12_1 = HEAP32[$6_1 + 204 >> 2];
    HEAP32[$6_1 + 96 >> 2] = HEAP32[$6_1 + 200 >> 2];
    HEAP32[$6_1 + 100 >> 2] = $12_1;
    $3_1 = HEAP32[$3_1 + 8 >> 2];
    $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$15_1 >> 2] + 48 >> 2]]($15_1));
    $16_1 = $1_1 + 8 | 0;
    $18_1 = HEAP32[$16_1 + 4 >> 2];
    $12_1 = $6_1 + 184 | 0;
    HEAP32[$12_1 >> 2] = HEAP32[$16_1 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $18_1;
    $12_1 = HEAP32[$1_1 + 20 >> 2];
    HEAP32[$8_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $12_1;
    $12_1 = $1_1 + 24 | 0;
    $16_1 = HEAP32[$12_1 + 4 >> 2];
    $8_1 = $6_1 + 200 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$12_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $16_1;
    $8_1 = HEAP32[$1_1 + 36 >> 2];
    HEAP32[$13_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
    HEAP32[$13_1 + 4 >> 2] = $8_1;
    $13_1 = $1_1 + 40 | 0;
    $12_1 = HEAP32[$13_1 + 4 >> 2];
    $8_1 = $6_1 + 216 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$13_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $12_1;
    $13_1 = HEAP32[$7_1 + 4 >> 2];
    $8_1 = $6_1 + 224 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $13_1;
    $8_1 = HEAP32[$11_1 + 4 >> 2];
    $7_1 = $6_1 + 232 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$11_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $8_1;
    $11_1 = $2_1 + 8 | 0;
    $8_1 = HEAP32[$11_1 + 4 >> 2];
    $7_1 = $6_1 + 248 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$11_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $8_1;
    HEAP32[$6_1 + 172 >> 2] = $0_1;
    HEAP32[$6_1 + 168 >> 2] = 16176;
    $7_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$6_1 + 176 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$6_1 + 180 >> 2] = $7_1;
    $1_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$6_1 + 240 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$6_1 + 244 >> 2] = $1_1;
    $7_1 = $2_1 + 24 | 0;
    $11_1 = HEAP32[$7_1 + 4 >> 2];
    $1_1 = $6_1 + 264 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $11_1;
    $7_1 = HEAP32[$2_1 + 20 >> 2];
    $1_1 = $6_1 + 256 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 16 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $7_1;
    $7_1 = $2_1 + 40 | 0;
    $11_1 = HEAP32[$7_1 + 4 >> 2];
    $1_1 = $6_1 + 280 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $11_1;
    $7_1 = HEAP32[$2_1 + 36 >> 2];
    $1_1 = $6_1 + 272 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 32 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $7_1;
    $2_1 = HEAP32[$14_1 + 4 >> 2];
    $1_1 = $6_1 + 296 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$14_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $2_1;
    $2_1 = HEAP32[$17_1 + 4 >> 2];
    $1_1 = $6_1 + 288 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$17_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $2_1;
    $2_1 = $9_1 + 8 | 0;
    $7_1 = HEAP32[$2_1 + 4 >> 2];
    $1_1 = $6_1 + 312 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $7_1;
    $1_1 = HEAP32[$9_1 + 4 >> 2];
    HEAP32[$6_1 + 304 >> 2] = HEAP32[$9_1 >> 2];
    HEAP32[$6_1 + 308 >> 2] = $1_1;
    $2_1 = $9_1 + 24 | 0;
    $7_1 = HEAP32[$2_1 + 4 >> 2];
    $1_1 = $6_1 + 328 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $7_1;
    $2_1 = HEAP32[$9_1 + 20 >> 2];
    $1_1 = $6_1 + 320 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$9_1 + 16 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $2_1;
    $2_1 = $9_1 + 40 | 0;
    $7_1 = HEAP32[$2_1 + 4 >> 2];
    $1_1 = $6_1 + 344 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $7_1;
    $2_1 = HEAP32[$9_1 + 36 >> 2];
    $1_1 = $6_1 + 336 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$9_1 + 32 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $2_1;
    $2_1 = $9_1 + 56 | 0;
    $7_1 = HEAP32[$2_1 + 4 >> 2];
    $1_1 = $6_1 + 360 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $7_1;
    $2_1 = HEAP32[$9_1 + 52 >> 2];
    $1_1 = $6_1 + 352 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$9_1 + 48 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $2_1;
    HEAPF32[$6_1 + 372 >> 2] = $10_1;
    HEAP32[$6_1 + 388 >> 2] = $15_1;
    HEAP32[$6_1 + 384 >> 2] = $3_1;
    HEAP32[$6_1 + 168 >> 2] = 17308;
    HEAP32[$6_1 + 380 >> 2] = $4_1;
    $10_1 = HEAPF32[$4_1 + 4 >> 2];
    HEAPF32[$6_1 + 376 >> 2] = $5_1;
    HEAPF32[$6_1 + 368 >> 2] = $10_1;
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $6_1 - -64 | 0, $6_1 + 48 | 0, $6_1 + 32 | 0);
    $1_1 = $6_1 + 152 | 0;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $0_1 = $6_1 + 24 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    $0_1 = HEAP32[$6_1 + 148 >> 2];
    HEAP32[$6_1 + 16 >> 2] = HEAP32[$6_1 + 144 >> 2];
    HEAP32[$6_1 + 20 >> 2] = $0_1;
    $10_1 = HEAPF32[$6_1 + 16 >> 2];
    $5_1 = HEAPF32[$6_1 + 128 >> 2];
    if ($10_1 > $5_1) {
     HEAPF32[$6_1 + 16 >> 2] = $5_1;
     $10_1 = $5_1;
    }
    $20_1 = HEAPF32[$6_1 + 136 >> 2];
    $24_1 = HEAPF32[$6_1 + 24 >> 2];
    $0_1 = $20_1 < $24_1;
    $21_1 = HEAPF32[$6_1 + 132 >> 2];
    $25 = HEAPF32[$6_1 + 20 >> 2];
    $1_1 = $21_1 < $25;
    $22_1 = HEAPF32[$6_1 + 140 >> 2];
    if ($22_1 < HEAPF32[$6_1 + 28 >> 2]) {
     HEAPF32[$6_1 + 28 >> 2] = $22_1
    }
    $4_1 = $6_1 + 152 | 0;
    $9_1 = HEAP32[$4_1 + 4 >> 2];
    $2_1 = $6_1 + 8 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $9_1;
    $3_1 = HEAP32[$6_1 + 148 >> 2];
    HEAP32[$6_1 >> 2] = HEAP32[$6_1 + 144 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $3_1;
    $23_1 = HEAPF32[$6_1 + 4 >> 2];
    $23_1 = $21_1 > $23_1 ? $21_1 : $23_1;
    $19_1 = HEAPF32[$6_1 >> 2];
    $5_1 = $5_1 > $19_1 ? $5_1 : $19_1;
    $19_1 = HEAPF32[$2_1 >> 2];
    $19_1 = $19_1 < $20_1 ? $20_1 : $19_1;
    if (HEAPF32[$6_1 + 12 >> 2] < $22_1) {
     HEAPF32[$6_1 + 12 >> 2] = $22_1
    }
    HEAPF32[$6_1 + 16 >> 2] = HEAPF32[$6_1 + 48 >> 2] + $10_1;
    HEAPF32[$6_1 + 20 >> 2] = HEAPF32[$6_1 + 52 >> 2] + ($1_1 ? $21_1 : $25);
    HEAPF32[$6_1 + 24 >> 2] = HEAPF32[$6_1 + 56 >> 2] + ($0_1 ? $20_1 : $24_1);
    HEAPF32[$6_1 >> 2] = HEAPF32[$6_1 + 32 >> 2] + $5_1;
    HEAPF32[$6_1 + 4 >> 2] = HEAPF32[$6_1 + 36 >> 2] + $23_1;
    HEAPF32[$6_1 + 8 >> 2] = HEAPF32[$6_1 + 40 >> 2] + $19_1;
    FUNCTION_TABLE[HEAP32[HEAP32[$15_1 >> 2] + 64 >> 2]]($15_1, $6_1 + 168 | 0, $6_1 + 16 | 0, $6_1);
    break label$1;
   }
   if (($7_1 | 0) != 31) {
    break label$1
   }
   $379($6_1 + 528 | 0, $9_1);
   $380($6_1 + 168 | 0, $6_1 + 528 | 0, $1_1);
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $6_1 + 168 | 0, $6_1 - -64 | 0, $6_1 + 144 | 0);
   $379($6_1 + 528 | 0, $9_1);
   $380($6_1 + 168 | 0, $6_1 + 528 | 0, $2_1);
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $6_1 + 168 | 0, $6_1 + 128 | 0, $6_1 + 48 | 0);
   $10_1 = HEAPF32[$6_1 + 128 >> 2];
   if ($10_1 < HEAPF32[$6_1 + 64 >> 2]) {
    HEAPF32[$6_1 + 64 >> 2] = $10_1
   }
   $10_1 = HEAPF32[$6_1 + 132 >> 2];
   if ($10_1 < HEAPF32[$6_1 + 68 >> 2]) {
    HEAPF32[$6_1 + 68 >> 2] = $10_1
   }
   $10_1 = HEAPF32[$6_1 + 136 >> 2];
   if ($10_1 < HEAPF32[$6_1 + 72 >> 2]) {
    HEAPF32[$6_1 + 72 >> 2] = $10_1
   }
   $10_1 = HEAPF32[$6_1 + 140 >> 2];
   if ($10_1 < HEAPF32[$6_1 + 76 >> 2]) {
    HEAPF32[$6_1 + 76 >> 2] = $10_1
   }
   $10_1 = HEAPF32[$6_1 + 48 >> 2];
   if ($10_1 > HEAPF32[$6_1 + 144 >> 2]) {
    HEAPF32[$6_1 + 144 >> 2] = $10_1
   }
   $10_1 = HEAPF32[$6_1 + 52 >> 2];
   if ($10_1 > HEAPF32[$6_1 + 148 >> 2]) {
    HEAPF32[$6_1 + 148 >> 2] = $10_1
   }
   $10_1 = HEAPF32[$6_1 + 56 >> 2];
   if ($10_1 > HEAPF32[$6_1 + 152 >> 2]) {
    HEAPF32[$6_1 + 152 >> 2] = $10_1
   }
   $10_1 = HEAPF32[$6_1 + 60 >> 2];
   if ($10_1 > HEAPF32[$6_1 + 156 >> 2]) {
    HEAPF32[$6_1 + 156 >> 2] = $10_1
   }
   HEAP32[$6_1 + 560 >> 2] = $4_1;
   HEAP32[$6_1 + 556 >> 2] = $9_1;
   HEAPF32[$6_1 + 548 >> 2] = $5_1;
   HEAP32[$6_1 + 544 >> 2] = $2_1;
   HEAP32[$6_1 + 540 >> 2] = $1_1;
   HEAP32[$6_1 + 536 >> 2] = $0_1;
   HEAP32[$6_1 + 532 >> 2] = $3_1;
   HEAP32[$6_1 + 528 >> 2] = 17332;
   HEAP32[$6_1 + 552 >> 2] = $15_1;
   $0_1 = HEAP32[$15_1 + 68 >> 2];
   if (!$0_1) {
    $1_1 = $6_1 + 216 | 0;
    $4_1 = $6_1 + 200 | 0;
    $9_1 = $6_1 + 184 | 0;
    $2_1 = 0;
    $3_1 = 64;
    while (1) {
     if (HEAP32[$15_1 + 20 >> 2] <= ($2_1 | 0)) {
      break label$1
     }
     $0_1 = HEAP32[$15_1 + 28 >> 2] + $3_1 | 0;
     $17_1 = HEAP32[$0_1 >> 2];
     $7_1 = $0_1 + -64 | 0;
     $14_1 = $7_1 + 8 | 0;
     $8_1 = HEAP32[$14_1 + 4 >> 2];
     $11_1 = $6_1 + 176 | 0;
     HEAP32[$11_1 >> 2] = HEAP32[$14_1 >> 2];
     HEAP32[$11_1 + 4 >> 2] = $8_1;
     $11_1 = $0_1 - 48 | 0;
     $14_1 = HEAP32[$11_1 + 4 >> 2];
     HEAP32[$9_1 >> 2] = HEAP32[$11_1 >> 2];
     HEAP32[$9_1 + 4 >> 2] = $14_1;
     $11_1 = $11_1 + 8 | 0;
     $8_1 = HEAP32[$11_1 + 4 >> 2];
     $14_1 = $9_1 + 8 | 0;
     HEAP32[$14_1 >> 2] = HEAP32[$11_1 >> 2];
     HEAP32[$14_1 + 4 >> 2] = $8_1;
     $11_1 = $0_1 - 32 | 0;
     $14_1 = HEAP32[$11_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$11_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $14_1;
     $11_1 = $11_1 + 8 | 0;
     $8_1 = HEAP32[$11_1 + 4 >> 2];
     $14_1 = $4_1 + 8 | 0;
     HEAP32[$14_1 >> 2] = HEAP32[$11_1 >> 2];
     HEAP32[$14_1 + 4 >> 2] = $8_1;
     $0_1 = $0_1 - 16 | 0;
     $11_1 = HEAP32[$0_1 + 4 >> 2];
     HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $11_1;
     $0_1 = $0_1 + 8 | 0;
     $14_1 = HEAP32[$0_1 + 4 >> 2];
     $11_1 = $1_1 + 8 | 0;
     HEAP32[$11_1 >> 2] = HEAP32[$0_1 >> 2];
     HEAP32[$11_1 + 4 >> 2] = $14_1;
     $0_1 = HEAP32[$7_1 + 4 >> 2];
     HEAP32[$6_1 + 168 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$6_1 + 172 >> 2] = $0_1;
     $642($6_1 + 528 | 0, $2_1, $6_1 + 168 | 0, $17_1);
     $3_1 = $3_1 + 80 | 0;
     $2_1 = $2_1 + 1 | 0;
     continue;
    };
   }
   $2_1 = $6_1 + 72 | 0;
   $3_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $6_1 + 176 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $3_1;
   $2_1 = $6_1 + 152 | 0;
   $3_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $6_1 + 192 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $3_1;
   $1_1 = HEAP32[$6_1 + 68 >> 2];
   HEAP32[$6_1 + 168 >> 2] = HEAP32[$6_1 + 64 >> 2];
   HEAP32[$6_1 + 172 >> 2] = $1_1;
   $1_1 = HEAP32[$6_1 + 148 >> 2];
   HEAP32[$6_1 + 184 >> 2] = HEAP32[$6_1 + 144 >> 2];
   HEAP32[$6_1 + 188 >> 2] = $1_1;
   $535(HEAP32[$0_1 >> 2], $6_1 + 168 | 0, $6_1 + 528 | 0);
  }
  global$0 = $6_1 + 704 | 0;
 }
 
 function $642($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 112 | 0;
  global$0 = $4_1;
  $380($4_1 + 48 | 0, HEAP32[$0_1 + 28 >> 2], $2_1);
  HEAP32[$4_1 + 28 >> 2] = 1065353216;
  HEAP32[$4_1 + 32 >> 2] = 1;
  HEAP32[$4_1 + 36 >> 2] = -1;
  HEAP32[$4_1 + 44 >> 2] = $1_1;
  HEAP32[$4_1 + 24 >> 2] = 17368;
  $2_1 = HEAP32[$0_1 + 32 >> 2];
  HEAP32[$4_1 + 40 >> 2] = $2_1;
  HEAPF32[$4_1 + 28 >> 2] = HEAPF32[$2_1 + 4 >> 2];
  HEAP32[$4_1 + 20 >> 2] = $1_1;
  HEAP32[$4_1 + 16 >> 2] = -1;
  HEAP32[$4_1 + 4 >> 2] = $3_1;
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = $1_1;
  HEAP32[$4_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
  HEAP32[$4_1 + 12 >> 2] = $4_1 + 48;
  $641(HEAP32[$0_1 + 8 >> 2], HEAP32[$0_1 + 12 >> 2], HEAP32[$0_1 + 16 >> 2], $4_1, $4_1 + 24 | 0, HEAPF32[$0_1 + 20 >> 2]);
  global$0 = $4_1 + 112 | 0;
 }
 
 function $643($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[$0_1 + 16 >> 2];
  return FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $1_1) | 0;
 }
 
 function $644($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 8 >> 2] = -1;
  HEAP32[$3_1 + 12 >> 2] = HEAP32[$0_1 + 20 >> 2];
  if (!HEAP32[$1_1 + 4 >> 2]) {
   HEAP32[$1_1 + 4 >> 2] = $3_1 + 8
  }
  $4_1 = HEAP32[$0_1 + 16 >> 2];
  $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 12 >> 2]]($4_1, $1_1, $2_1));
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[HEAP32[$0_1 + 16 >> 2] + 4 >> 2];
  global$0 = $3_1 + 16 | 0;
  return Math_fround($5_1);
 }
 
 function $645($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 + -64 | 0;
  global$0 = $3_1;
  $6_1 = HEAP32[$1_1 + 36 >> 2];
  $1_1 = HEAP32[HEAP32[$0_1 + 24 >> 2] + 28 >> 2] + Math_imul($6_1, 80) | 0;
  $4_1 = $1_1 + 8 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $2_1 = $3_1 + 8 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $4_1 = $1_1 + 24 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $2_1 = $3_1 + 24 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $4_1 = $1_1 + 40 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $2_1 = $3_1 + 40 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $4_1 = $1_1 + 56 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $2_1 = $3_1 + 56 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $2_1;
  $2_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$3_1 + 16 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$3_1 + 20 >> 2] = $2_1;
  $2_1 = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$3_1 + 32 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$3_1 + 36 >> 2] = $2_1;
  $2_1 = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$3_1 + 48 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$3_1 + 52 >> 2] = $2_1;
  $642($0_1, $6_1, $3_1, HEAP32[$1_1 + 64 >> 2]);
  global$0 = $3_1 - -64 | 0;
 }
 
 function $646($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $6_1 = global$0 + -64 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 60 >> 2] = $5_1;
  HEAP32[$6_1 + 56 >> 2] = $4_1;
  $4_1 = HEAP32[$0_1 + 212 >> 2];
  if (HEAPF32[$4_1 + 4 >> 2] >= $3_1) {
   $7_1 = $2_1 + 8 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $6_1 + 40 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $7_1 = $1_1 + 8 | 0;
   $8_1 = HEAP32[$7_1 + 4 >> 2];
   $5_1 = $6_1 + 24 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $8_1;
   $5_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$6_1 + 32 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$6_1 + 36 >> 2] = $5_1;
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$6_1 + 16 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$6_1 + 20 >> 2] = $2_1;
   HEAPF32[$6_1 + 48 >> 2] = $3_1;
   HEAP32[$6_1 + 8 >> 2] = HEAP32[$0_1 + 216 >> 2];
   HEAP32[$6_1 + 12 >> 2] = $6_1 + 56;
   $3_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 12 >> 2]]($4_1, $6_1 + 8 | 0, 1));
  }
  global$0 = $6_1 - -64 | 0;
  return Math_fround($3_1);
 }
 
 function $647($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = Math_fround(0), $14_1 = 0, $15_1 = 0, $16_1 = Math_fround(0), $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = 0, $25 = 0, $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = 0;
  $6_1 = global$0 - 400 | 0;
  global$0 = $6_1;
  $11_1 = $2_1 + 8 | 0;
  $7_1 = $11_1;
  $12_1 = HEAP32[$7_1 + 4 >> 2];
  $10_1 = $6_1 + 312 | 0;
  HEAP32[$10_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$10_1 + 4 >> 2] = $12_1;
  $10_1 = $2_1 + 24 | 0;
  $17_1 = HEAP32[$10_1 + 4 >> 2];
  $7_1 = $6_1 + 328 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$10_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $17_1;
  $7_1 = $2_1 + 40 | 0;
  $9_1 = HEAP32[$7_1 + 4 >> 2];
  $12_1 = $6_1 + 344 | 0;
  HEAP32[$12_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$12_1 + 4 >> 2] = $9_1;
  $12_1 = $2_1 + 56 | 0;
  $9_1 = $12_1;
  $14_1 = HEAP32[$9_1 + 4 >> 2];
  $17_1 = $6_1 + 360 | 0;
  HEAP32[$17_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$17_1 + 4 >> 2] = $14_1;
  $17_1 = $3_1 + 8 | 0;
  $14_1 = $17_1;
  $18_1 = HEAP32[$14_1 + 4 >> 2];
  $9_1 = $6_1 + 248 | 0;
  HEAP32[$9_1 >> 2] = HEAP32[$14_1 >> 2];
  HEAP32[$9_1 + 4 >> 2] = $18_1;
  $9_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$6_1 + 304 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$6_1 + 308 >> 2] = $9_1;
  $9_1 = HEAP32[$2_1 + 20 >> 2];
  HEAP32[$6_1 + 320 >> 2] = HEAP32[$2_1 + 16 >> 2];
  HEAP32[$6_1 + 324 >> 2] = $9_1;
  $9_1 = HEAP32[$2_1 + 36 >> 2];
  HEAP32[$6_1 + 336 >> 2] = HEAP32[$2_1 + 32 >> 2];
  HEAP32[$6_1 + 340 >> 2] = $9_1;
  $9_1 = HEAP32[$2_1 + 52 >> 2];
  HEAP32[$6_1 + 352 >> 2] = HEAP32[$2_1 + 48 >> 2];
  HEAP32[$6_1 + 356 >> 2] = $9_1;
  $9_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$6_1 + 240 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$6_1 + 244 >> 2] = $9_1;
  $9_1 = $3_1 + 24 | 0;
  $8_1 = HEAP32[$9_1 + 4 >> 2];
  $14_1 = $6_1 + 264 | 0;
  HEAP32[$14_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$14_1 + 4 >> 2] = $8_1;
  $14_1 = $3_1 + 40 | 0;
  $8_1 = $14_1;
  $15_1 = HEAP32[$8_1 + 4 >> 2];
  $18_1 = $6_1 + 280 | 0;
  HEAP32[$18_1 >> 2] = HEAP32[$8_1 >> 2];
  HEAP32[$18_1 + 4 >> 2] = $15_1;
  $18_1 = $3_1 + 56 | 0;
  $15_1 = $18_1;
  $19_1 = HEAP32[$15_1 + 4 >> 2];
  $8_1 = $6_1 + 296 | 0;
  HEAP32[$8_1 >> 2] = HEAP32[$15_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $19_1;
  $8_1 = HEAP32[$3_1 + 20 >> 2];
  HEAP32[$6_1 + 256 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$6_1 + 260 >> 2] = $8_1;
  $8_1 = HEAP32[$3_1 + 36 >> 2];
  HEAP32[$6_1 + 272 >> 2] = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$6_1 + 276 >> 2] = $8_1;
  $8_1 = HEAP32[$3_1 + 52 >> 2];
  HEAP32[$6_1 + 288 >> 2] = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$6_1 + 292 >> 2] = $8_1;
  $566($6_1 + 304 | 0, $6_1 + 240 | 0, Math_fround(1.0), $6_1 + 384 | 0, $6_1 + 368 | 0);
  $24_1 = $6_1 + 20 | 0;
  $8_1 = $24_1;
  HEAP32[$8_1 >> 2] = 0;
  HEAP32[$8_1 + 4 >> 2] = 0;
  $25 = $6_1 + 32 | 0;
  $8_1 = $25;
  HEAP32[$8_1 >> 2] = 0;
  HEAP32[$8_1 + 4 >> 2] = 0;
  HEAP32[$6_1 + 28 >> 2] = 1065353216;
  $8_1 = $6_1 + 40 | 0;
  HEAP32[$8_1 >> 2] = 0;
  HEAP32[$8_1 + 4 >> 2] = 0;
  $8_1 = $6_1 + 52 | 0;
  HEAP32[$8_1 >> 2] = 0;
  HEAP32[$8_1 + 4 >> 2] = 0;
  HEAP32[$6_1 + 48 >> 2] = 1065353216;
  $15_1 = $6_1 + 60 | 0;
  HEAP32[$15_1 >> 2] = 0;
  HEAP32[$15_1 + 4 >> 2] = 0;
  $19_1 = $6_1 + 68 | 0;
  HEAP32[$19_1 >> 2] = 0;
  HEAP32[$6_1 + 12 >> 2] = 0;
  HEAP32[$6_1 + 16 >> 2] = 0;
  HEAP32[$6_1 + 8 >> 2] = 1065353216;
  $565($6_1 + 304 | 0, $6_1 + 224 | 0);
  $371($6_1 + 8 | 0, $6_1 + 224 | 0);
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $6_1 + 8 | 0, $6_1 + 224 | 0, $6_1 + 208 | 0);
  $21_1 = HEAPF32[$6_1 + 208 >> 2];
  $22_1 = HEAPF32[$6_1 + 212 >> 2];
  $23_1 = HEAPF32[$6_1 + 216 >> 2];
  $26_1 = HEAPF32[$6_1 + 224 >> 2];
  $27_1 = HEAPF32[$6_1 + 228 >> 2];
  $28_1 = HEAPF32[$6_1 + 232 >> 2];
  $13_1 = HEAPF32[$6_1 + 368 >> 2];
  $16_1 = HEAPF32[$6_1 + 372 >> 2];
  $20_1 = HEAPF32[$6_1 + 376 >> 2];
  $29_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]]($1_1));
  HEAP32[$6_1 + 220 >> 2] = 0;
  HEAP32[$6_1 + 236 >> 2] = 0;
  $13_1 = Math_fround(Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($13_1 * $13_1) + Math_fround($16_1 * $16_1)) + Math_fround($20_1 * $20_1)))) * $29_1);
  HEAPF32[$6_1 + 232 >> 2] = Math_fround($28_1 + Math_fround(0.0)) - $13_1;
  HEAPF32[$6_1 + 228 >> 2] = Math_fround($27_1 + Math_fround(0.0)) - $13_1;
  HEAPF32[$6_1 + 224 >> 2] = Math_fround($26_1 + Math_fround(0.0)) - $13_1;
  HEAPF32[$6_1 + 216 >> 2] = $13_1 + $23_1;
  HEAPF32[$6_1 + 212 >> 2] = $13_1 + $22_1;
  HEAPF32[$6_1 + 208 >> 2] = $13_1 + $21_1;
  $30_1 = HEAP32[$11_1 + 4 >> 2];
  HEAP32[$8_1 >> 2] = HEAP32[$11_1 >> 2];
  HEAP32[$8_1 + 4 >> 2] = $30_1;
  $11_1 = HEAP32[$2_1 + 20 >> 2];
  HEAP32[$15_1 >> 2] = HEAP32[$2_1 + 16 >> 2];
  HEAP32[$15_1 + 4 >> 2] = $11_1;
  $11_1 = HEAP32[$10_1 + 4 >> 2];
  HEAP32[$19_1 >> 2] = HEAP32[$10_1 >> 2];
  HEAP32[$19_1 + 4 >> 2] = $11_1;
  $10_1 = HEAP32[$2_1 + 36 >> 2];
  $11_1 = $6_1 + 76 | 0;
  HEAP32[$11_1 >> 2] = HEAP32[$2_1 + 32 >> 2];
  HEAP32[$11_1 + 4 >> 2] = $10_1;
  $10_1 = HEAP32[$7_1 + 4 >> 2];
  $11_1 = $6_1 + 84 | 0;
  HEAP32[$11_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$11_1 + 4 >> 2] = $10_1;
  $7_1 = HEAP32[$2_1 + 52 >> 2];
  $11_1 = $6_1 + 92 | 0;
  $10_1 = $11_1;
  HEAP32[$10_1 >> 2] = HEAP32[$2_1 + 48 >> 2];
  HEAP32[$10_1 + 4 >> 2] = $7_1;
  $8_1 = HEAP32[$12_1 + 4 >> 2];
  $10_1 = $6_1 + 100 | 0;
  $7_1 = $10_1;
  HEAP32[$7_1 >> 2] = HEAP32[$12_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $8_1;
  $12_1 = HEAP32[$17_1 + 4 >> 2];
  $7_1 = $6_1 + 116 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$17_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $12_1;
  HEAP32[$6_1 + 8 >> 2] = 18240;
  $7_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$6_1 + 44 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$6_1 + 48 >> 2] = $7_1;
  $2_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$6_1 + 108 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$6_1 + 112 >> 2] = $2_1;
  $7_1 = HEAP32[$9_1 + 4 >> 2];
  $2_1 = $6_1 + 132 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$9_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $7_1;
  $7_1 = HEAP32[$3_1 + 20 >> 2];
  $2_1 = $6_1 + 124 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 + 16 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $7_1;
  $7_1 = HEAP32[$14_1 + 4 >> 2];
  $2_1 = $6_1 + 148 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$14_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $7_1;
  $7_1 = HEAP32[$3_1 + 36 >> 2];
  $2_1 = $6_1 + 140 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 + 32 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $7_1;
  $12_1 = HEAP32[$18_1 + 4 >> 2];
  $7_1 = $6_1 + 164 | 0;
  $2_1 = $7_1;
  HEAP32[$2_1 >> 2] = HEAP32[$18_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $12_1;
  $12_1 = HEAP32[$3_1 + 52 >> 2];
  $2_1 = $6_1 + 156 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 + 48 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $12_1;
  HEAP32[$6_1 + 192 >> 2] = $4_1;
  HEAPF32[$6_1 + 196 >> 2] = $5_1;
  HEAP32[$6_1 + 200 >> 2] = $1_1;
  HEAP32[$6_1 + 188 >> 2] = $0_1;
  HEAP32[$6_1 + 396 >> 2] = 0;
  $20_1 = Math_fround(HEAPF32[$7_1 >> 2] - HEAPF32[$10_1 >> 2]);
  HEAPF32[$6_1 + 392 >> 2] = $20_1;
  $21_1 = Math_fround(HEAPF32[$2_1 >> 2] - HEAPF32[$11_1 >> 2]);
  HEAPF32[$6_1 + 384 >> 2] = $21_1;
  $22_1 = Math_fround(HEAPF32[$6_1 + 160 >> 2] - HEAPF32[$6_1 + 96 >> 2]);
  HEAPF32[$6_1 + 388 >> 2] = $22_1;
  $113($6_1 + 368 | 0, $6_1 + 384 | 0);
  $5_1 = HEAPF32[$6_1 + 372 >> 2];
  $16_1 = $5_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $5_1);
  HEAPF32[$6_1 + 16 >> 2] = $16_1;
  $13_1 = HEAPF32[$6_1 + 376 >> 2];
  $23_1 = $13_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $13_1);
  HEAPF32[$24_1 >> 2] = $23_1;
  HEAP32[$6_1 + 36 >> 2] = $23_1 < Math_fround(0.0);
  HEAP32[$25 >> 2] = $16_1 < Math_fround(0.0);
  $16_1 = HEAPF32[$6_1 + 368 >> 2];
  HEAPF32[$6_1 + 40 >> 2] = Math_fround(Math_fround($16_1 * $21_1) + Math_fround($5_1 * $22_1)) + Math_fround($13_1 * $20_1);
  $5_1 = $16_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $16_1);
  HEAPF32[$6_1 + 12 >> 2] = $5_1;
  HEAP32[$6_1 + 28 >> 2] = $5_1 < Math_fround(0.0);
  $0_1 = HEAP32[$0_1 + 68 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2]]($0_1, $6_1 + 352 | 0, $6_1 + 288 | 0, $6_1 + 8 | 0, $6_1 + 224 | 0, $6_1 + 208 | 0);
  global$0 = $6_1 + 400 | 0;
 }
 
 function $648($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[$0_1 + 184 >> 2];
  $4_1 = HEAPF32[$3_1 + 4 >> 2];
  label$1 : {
   if ($4_1 == Math_fround(0.0)) {
    break label$1
   }
   $1_1 = HEAP32[$1_1 >> 2];
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, HEAP32[$1_1 + 188 >> 2]) | 0)) {
    break label$1
   }
   $5_1 = HEAPF32[$0_1 + 188 >> 2];
   $3_1 = HEAP32[$0_1 + 184 >> 2];
   $6_1 = HEAP32[$0_1 + 192 >> 2];
   $7_1 = HEAP32[$1_1 + 192 >> 2];
   HEAP32[$2_1 + 24 >> 2] = -1;
   HEAP32[$2_1 + 28 >> 2] = -1;
   HEAP32[$2_1 + 20 >> 2] = $1_1 + 4;
   HEAP32[$2_1 + 16 >> 2] = $1_1;
   HEAP32[$2_1 + 12 >> 2] = $7_1;
   HEAP32[$2_1 + 8 >> 2] = 0;
   $641($6_1, $0_1 + 36 | 0, $0_1 + 100 | 0, $2_1 + 8 | 0, $3_1, $5_1);
  }
  global$0 = $2_1 + 32 | 0;
  return $4_1 != Math_fround(0.0) | 0;
 }
 
 function $649($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  while (1) {
   $7_1 = HEAP32[$0_1 + 12 >> 2];
   $10_1 = $1_1;
   $11_1 = HEAP32[$7_1 + (($2_1 + $1_1 | 0) / 2 << 3) >> 2];
   $5_1 = $1_1;
   $6_1 = $2_1;
   while (1) {
    $4_1 = (($5_1 << 3) + $7_1 | 0) - 8 | 0;
    while (1) {
     $5_1 = $5_1 + 1 | 0;
     $4_1 = $4_1 + 8 | 0;
     if (HEAP32[$4_1 >> 2] < ($11_1 | 0)) {
      continue
     }
     break;
    };
    $1_1 = $5_1 - 1 | 0;
    $3_1 = ($6_1 << 3) + 8 | 0;
    while (1) {
     $6_1 = $6_1 - 1 | 0;
     $8_1 = $3_1 + $7_1 | 0;
     $9_1 = $3_1 - 8 | 0;
     $3_1 = $9_1;
     if (HEAP32[$8_1 - 8 >> 2] > ($11_1 | 0)) {
      continue
     }
     break;
    };
    $3_1 = $6_1 + 1 | 0;
    if (($3_1 | 0) >= ($1_1 | 0)) {
     $12_1 = HEAP32[$4_1 >> 2];
     $8_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $7_1 + $9_1 | 0;
     $1_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $1_1;
     $1_1 = HEAP32[$0_1 + 12 >> 2] + $9_1 | 0;
     HEAP32[$1_1 >> 2] = $12_1;
     HEAP32[$1_1 + 4 >> 2] = $8_1;
     $3_1 = $6_1;
     $1_1 = $5_1;
    }
    if (($1_1 | 0) <= ($3_1 | 0)) {
     $7_1 = HEAP32[$0_1 + 12 >> 2];
     $5_1 = $1_1;
     $6_1 = $3_1;
     continue;
    }
    break;
   };
   if (($3_1 | 0) > ($10_1 | 0)) {
    $649($0_1, $10_1, $3_1)
   }
   if (($1_1 | 0) < ($2_1 | 0)) {
    continue
   }
   break;
  };
 }
 
 function $650($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 18296;
  $57($0_1 + 44 | 0);
  $57($0_1 + 24 | 0);
  $1_1 = $0_1 + 4 | 0;
  $57($1_1);
  $57($1_1);
  return $0_1 | 0;
 }
 
 function $651($0_1) {
  $0_1 = $0_1 | 0;
  $17($650($0_1));
 }
 
 function $652($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $2_1 = 0;
  $3_1 = HEAP32[$1_1 + 8 >> 2];
  $6_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  while (1) {
   if ($6_1) {
    $3_1 = HEAP32[HEAP32[$1_1 + 16 >> 2] + $2_1 >> 2];
    if (!(HEAPU8[$3_1 + 204 | 0] & 3)) {
     HEAP32[$3_1 + 208 >> 2] = $5_1;
     $5_1 = $5_1 + 1 | 0;
    }
    HEAP32[$3_1 + 268 >> 2] = 1065353216;
    HEAP32[$3_1 + 212 >> 2] = -1;
    $6_1 = $6_1 - 1 | 0;
    $2_1 = $2_1 + 4 | 0;
    continue;
   }
   break;
  };
  $6_1 = 4;
  label$4 : {
   $3_1 = HEAP32[$0_1 + 8 >> 2];
   if (($3_1 | 0) > ($5_1 | 0)) {
    break label$4
   }
   label$5 : {
    if (($3_1 | 0) >= ($5_1 | 0)) {
     break label$5
    }
    if (HEAP32[$0_1 + 12 >> 2] >= ($5_1 | 0)) {
     break label$5
    }
    $2_1 = $3_1;
    $10_1 = $0_1 + 4 | 0;
    if ($5_1) {
     $7_1 = $53($5_1 << 3);
     $2_1 = HEAP32[$0_1 + 8 >> 2];
    }
    $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
    while (1) {
     if ($2_1) {
      $8_1 = HEAP32[$0_1 + 16 >> 2] + $4_1 | 0;
      $11_1 = HEAP32[$8_1 + 4 >> 2];
      $9_1 = $4_1 + $7_1 | 0;
      HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2];
      HEAP32[$9_1 + 4 >> 2] = $11_1;
      $2_1 = $2_1 - 1 | 0;
      $4_1 = $4_1 + 8 | 0;
      continue;
     }
     break;
    };
    $96($10_1);
    HEAP32[$0_1 + 16 >> 2] = $7_1;
    HEAP8[$0_1 + 20 | 0] = 1;
    HEAP32[$0_1 + 12 >> 2] = $5_1;
   }
   $4_1 = $5_1 - $3_1 | 0;
   $2_1 = $3_1 << 3;
   while (1) {
    if (!$4_1) {
     break label$4
    }
    $3_1 = HEAP32[$0_1 + 16 >> 2] + $2_1 | 0;
    HEAP32[$3_1 >> 2] = 0;
    HEAP32[$3_1 + 4 >> 2] = 0;
    $4_1 = $4_1 - 1 | 0;
    $2_1 = $2_1 + 8 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 8 >> 2] = $5_1;
  $4_1 = 0;
  $2_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
  while (1) {
   if (($2_1 | 0) != ($4_1 | 0)) {
    $3_1 = HEAP32[$0_1 + 16 >> 2] + $6_1 | 0;
    HEAP32[$3_1 >> 2] = 1;
    HEAP32[$3_1 - 4 >> 2] = $4_1;
    $6_1 = $6_1 + 8 | 0;
    $4_1 = $4_1 + 1 | 0;
    continue;
   }
   break;
  };
  label$12 : {
   $1_1 = HEAP32[$1_1 + 68 >> 2];
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 36 >> 2]]($1_1) | 0;
   $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 36 >> 2]]($1_1) | 0;
   if (!$2_1) {
    break label$12
   }
   $6_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $2_1 = $0_1 + 4 | 0;
   $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]]($1_1) | 0;
   while (1) {
    if (!$6_1) {
     break label$12
    }
    $0_1 = HEAP32[HEAP32[$4_1 >> 2] >> 2];
    label$14 : {
     if (!$0_1) {
      break label$14
     }
     $1_1 = HEAP32[HEAP32[$4_1 + 4 >> 2] >> 2];
     if (!$1_1) {
      break label$14
     }
     if (HEAP32[$0_1 + 204 >> 2] & 7) {
      break label$14
     }
     if (HEAPU8[$1_1 + 204 | 0] & 7) {
      break label$14
     }
     $653($2_1, HEAP32[$0_1 + 208 >> 2], HEAP32[$1_1 + 208 >> 2]);
    }
    $6_1 = $6_1 - 1 | 0;
    $4_1 = $4_1 + 16 | 0;
    continue;
   };
  }
 }
 
 function $653($0_1, $1_1, $2_1) {
  var $3_1 = 0;
  $0_1 = $0_1 + 12 | 0;
  $3_1 = $655(HEAP32[$0_1 >> 2], $1_1);
  $1_1 = $655(HEAP32[$0_1 >> 2], $2_1);
  if (($3_1 | 0) != ($1_1 | 0)) {
   $0_1 = HEAP32[$0_1 >> 2];
   $2_1 = $0_1 + ($3_1 << 3) | 0;
   HEAP32[$2_1 >> 2] = $1_1;
   $0_1 = $0_1 + ($1_1 << 3) | 0;
   HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] + HEAP32[$2_1 + 4 >> 2];
  }
 }
 
 function $654($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = $0_1 + 16 | 0;
  $0_1 = 0;
  while (1) {
   if (($0_1 | 0) < HEAP32[$1_1 + 8 >> 2]) {
    $2_1 = HEAP32[HEAP32[$1_1 + 16 >> 2] + $5_1 >> 2];
    label$3 : {
     if (HEAPU8[$2_1 + 204 | 0] & 3) {
      $6_1 = -1;
      $7_1 = -2;
      break label$3;
     }
     $6_1 = $655(HEAP32[$4_1 >> 2], $3_1);
     HEAP32[(HEAP32[$4_1 >> 2] + ($3_1 << 3) | 0) + 4 >> 2] = $0_1;
     $3_1 = $3_1 + 1 | 0;
     $7_1 = -1;
    }
    HEAP32[$2_1 + 212 >> 2] = $7_1;
    HEAP32[$2_1 + 208 >> 2] = $6_1;
    $5_1 = $5_1 + 4 | 0;
    $0_1 = $0_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $655($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0;
  while (1) {
   $2_1 = ($1_1 << 3) + $0_1 | 0;
   $3_1 = HEAP32[$2_1 >> 2];
   if (($1_1 | 0) != ($3_1 | 0)) {
    $1_1 = ($3_1 << 3) + $0_1 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
    $1_1 = HEAP32[$1_1 >> 2];
    continue;
   }
   break;
  };
  return $1_1;
 }
 
 function $656($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  while (1) {
   $6_1 = HEAP32[$0_1 + 12 >> 2];
   $9_1 = $1_1;
   $10_1 = HEAP32[$6_1 + (($2_1 + $1_1 | 0) / 2 << 2) >> 2];
   $4_1 = $2_1;
   $5_1 = $1_1;
   while (1) {
    $7_1 = (($5_1 << 2) + $6_1 | 0) - 4 | 0;
    while (1) {
     $5_1 = $5_1 + 1 | 0;
     $7_1 = $7_1 + 4 | 0;
     $11_1 = HEAP32[$7_1 >> 2];
     if ($657($11_1, $10_1)) {
      continue
     }
     break;
    };
    $3_1 = $4_1 << 2;
    $1_1 = $5_1 - 1 | 0;
    while (1) {
     $4_1 = $4_1 - 1 | 0;
     $8_1 = $3_1 + $6_1 | 0;
     $12_1 = $3_1 - 4 | 0;
     $3_1 = $12_1;
     $8_1 = HEAP32[$8_1 >> 2];
     if ($657($10_1, $8_1)) {
      continue
     }
     break;
    };
    $3_1 = $4_1 + 1 | 0;
    if (($3_1 | 0) >= ($1_1 | 0)) {
     HEAP32[$7_1 >> 2] = $8_1;
     HEAP32[(HEAP32[$0_1 + 12 >> 2] + $12_1 | 0) + 4 >> 2] = $11_1;
     $3_1 = $4_1;
     $1_1 = $5_1;
    }
    if (($1_1 | 0) <= ($3_1 | 0)) {
     $6_1 = HEAP32[$0_1 + 12 >> 2];
     $4_1 = $3_1;
     $5_1 = $1_1;
     continue;
    }
    break;
   };
   if (($3_1 | 0) > ($9_1 | 0)) {
    $656($0_1, $9_1, $3_1)
   }
   if (($1_1 | 0) < ($2_1 | 0)) {
    continue
   }
   break;
  };
 }
 
 function $657($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[HEAP32[$0_1 + 836 >> 2] + 208 >> 2];
  if (($2_1 | 0) <= -1) {
   $2_1 = HEAP32[HEAP32[$0_1 + 840 >> 2] + 208 >> 2]
  }
  $0_1 = HEAP32[HEAP32[$1_1 + 836 >> 2] + 208 >> 2];
  if (($0_1 | 0) <= -1) {
   $0_1 = HEAP32[HEAP32[$1_1 + 840 >> 2] + 208 >> 2]
  }
  return ($0_1 | 0) > ($2_1 | 0);
 }
 
 function $658($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0);
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  $4_1 = $49($2_1);
  $5_1 = HEAPF32[$1_1 + 444 >> 2];
  $7_1 = $6_1;
  $8_1 = $4_1;
  $2_1 = $50($2_1);
  $9_1 = Math_fround(-$2_1);
  if (Math_fround(Math_abs($4_1)) > Math_fround(1.1920928955078125e-07)) {
   $2_1 = Math_fround(Math_fround($2_1 * $2_1) / Math_fround($4_1 * $4_1));
   $4_1 = Math_fround($2_1 + Math_fround(1.0));
   $5_1 = Math_fround($2_1 / Math_fround($5_1 * $5_1));
   $2_1 = HEAPF32[$1_1 + 448 >> 2];
   $5_1 = Math_fround(Math_sqrt(Math_fround($4_1 / Math_fround($5_1 + Math_fround(Math_fround(1.0) / Math_fround($2_1 * $2_1))))));
  }
  $249($7_1, Math_fround(0.0), $8_1, $9_1, $5_1);
  $572($0_1, $6_1, $3_1, Math_fround(0.0), Math_fround(0.0));
  global$0 = $6_1 + 16 | 0;
 }
 
 function $659($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 18552;
  $57($0_1 + 68 | 0);
  $57($0_1 + 48 | 0);
  $57($0_1 + 28 | 0);
  return $0_1 | 0;
 }
 
 function $660($0_1) {
  $0_1 = $0_1 | 0;
  $17($659($0_1));
 }
 
 function $661($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0;
  label$1 : {
   if (($5_1 | 0) >= 0) {
    $12_1 = HEAP32[$0_1 + 16 >> 2];
    $7_1 = ($12_1 | 0) > 0 ? $12_1 : 0;
    while (1) {
     if (($6_1 | 0) == ($7_1 | 0)) {
      $6_1 = $7_1;
      $8_1 = 0;
      break label$1;
     }
     $8_1 = HEAP32[$0_1 + 12 >> 2] + $9_1 | 0;
     $13_1 = HEAP32[$8_1 >> 2];
     $10_1 = HEAP32[HEAP32[$13_1 + 28 >> 2] + 208 >> 2];
     if (($10_1 | 0) <= -1) {
      $10_1 = HEAP32[HEAP32[$13_1 + 32 >> 2] + 208 >> 2]
     }
     if (($5_1 | 0) == ($10_1 | 0)) {
      break label$1
     }
     $9_1 = $9_1 + 4 | 0;
     $6_1 = $6_1 + 1 | 0;
     continue;
    };
   }
   $5_1 = HEAP32[$0_1 + 8 >> 2];
   Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 12 >> 2]]($5_1, $1_1, $2_1, $3_1, $4_1, HEAP32[$0_1 + 12 >> 2], HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 4 >> 2], HEAP32[$0_1 + 20 >> 2], HEAP32[$0_1 + 24 >> 2]));
   return;
  }
  $9_1 = $6_1 << 2;
  $6_1 = (($6_1 | 0) > ($12_1 | 0) ? $6_1 : $12_1) - $6_1 | 0;
  while (1) {
   if ($6_1) {
    $10_1 = HEAP32[HEAP32[$0_1 + 12 >> 2] + $9_1 >> 2];
    $7_1 = HEAP32[HEAP32[$10_1 + 28 >> 2] + 208 >> 2];
    if (($7_1 | 0) <= -1) {
     $7_1 = HEAP32[HEAP32[$10_1 + 32 >> 2] + 208 >> 2]
    }
    $6_1 = $6_1 - 1 | 0;
    $9_1 = $9_1 + 4 | 0;
    $11_1 = (($5_1 | 0) == ($7_1 | 0)) + $11_1 | 0;
    continue;
   }
   break;
  };
  $5_1 = HEAP32[$0_1 + 4 >> 2];
  if (HEAP32[$5_1 + 80 >> 2] >= 2) {
   $6_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $2_1 = $0_1 + 28 | 0;
   while (1) if ($6_1) {
    $375($2_1, $1_1);
    $6_1 = $6_1 - 1 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue;
   } else {
    $6_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
    $1_1 = $0_1 + 48 | 0;
    while (1) if ($6_1) {
     $375($1_1, $3_1);
     $6_1 = $6_1 - 1 | 0;
     $3_1 = $3_1 + 4 | 0;
     continue;
    } else {
     $1_1 = $0_1 + 68 | 0;
     while (1) {
      if ($11_1) {
       $375($1_1, $8_1);
       $11_1 = $11_1 - 1 | 0;
       $8_1 = $8_1 + 4 | 0;
       continue;
      }
      break;
     };
     if (HEAP32[HEAP32[$0_1 + 4 >> 2] + 80 >> 2] < (HEAP32[$0_1 + 52 >> 2] + HEAP32[$0_1 + 72 >> 2] | 0)) {
      $662($0_1)
     }
     return;
    };
   };
  }
  $6_1 = HEAP32[$0_1 + 8 >> 2];
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] + 12 >> 2]]($6_1, $1_1, $2_1, $3_1, $4_1, $8_1, $11_1, $5_1, HEAP32[$0_1 + 20 >> 2], HEAP32[$0_1 + 24 >> 2]));
 }
 
 function $662($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $3_1 = HEAP32[$0_1 + 8 >> 2];
  $2_1 = HEAP32[$0_1 + 32 >> 2];
  $4_1 = $2_1 ? HEAP32[$0_1 + 40 >> 2] : 0;
  $5_1 = $2_1;
  $2_1 = HEAP32[$0_1 + 52 >> 2];
  $6_1 = $2_1 ? HEAP32[$0_1 + 60 >> 2] : 0;
  $7_1 = $2_1;
  $2_1 = HEAP32[$0_1 + 72 >> 2];
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1, $4_1, $5_1, $6_1, $7_1, $2_1 ? HEAP32[$0_1 + 80 >> 2] : 0, $2_1, HEAP32[$0_1 + 4 >> 2], HEAP32[$0_1 + 20 >> 2], HEAP32[$0_1 + 24 >> 2]));
  HEAP32[$1_1 + 12 >> 2] = 0;
  $415($0_1 + 28 | 0, $1_1 + 12 | 0);
  HEAP32[$1_1 + 8 >> 2] = 0;
  $415($0_1 + 48 | 0, $1_1 + 8 | 0);
  HEAP32[$1_1 + 4 >> 2] = 0;
  $663($0_1 + 68 | 0, 0, $1_1 + 4 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $663($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   $3_1 = HEAP32[$0_1 + 4 >> 2];
   if (($3_1 | 0) > ($1_1 | 0)) {
    break label$1
   }
   if (($1_1 | 0) > ($3_1 | 0)) {
    $110($0_1, $1_1)
   }
   $4_1 = $1_1 - $3_1 | 0;
   $3_1 = $3_1 << 2;
   while (1) {
    if (!$4_1) {
     break label$1
    }
    HEAP32[HEAP32[$0_1 + 12 >> 2] + $3_1 >> 2] = HEAP32[$2_1 >> 2];
    $4_1 = $4_1 - 1 | 0;
    $3_1 = $3_1 + 4 | 0;
    continue;
   };
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $664($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 18356;
  if (HEAPU8[$0_1 + 288 | 0]) {
   $1_1 = HEAP32[$0_1 + 220 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   $54(HEAP32[$0_1 + 220 >> 2]);
  }
  $1_1 = HEAP32[$0_1 + 212 >> 2];
  if ($1_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   $54(HEAP32[$0_1 + 212 >> 2]);
  }
  if (HEAPU8[$0_1 + 289 | 0]) {
   $1_1 = HEAP32[$0_1 + 216 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
   $54(HEAP32[$0_1 + 216 >> 2]);
  }
  $57($0_1 + 320 | 0);
  $96($0_1 + 292 | 0);
  HEAP32[$0_1 + 304 >> 2] = 0;
  HEAP8[$0_1 + 308 | 0] = 1;
  $1_1 = $0_1 + 296 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $96($0_1 + 244 | 0);
  HEAP32[$0_1 + 256 >> 2] = 0;
  HEAP8[$0_1 + 260 | 0] = 1;
  $1_1 = $0_1 + 248 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $57($0_1 + 224 | 0);
  $57($0_1 + 192 | 0);
  $614($0_1);
  return $0_1 | 0;
 }
 
 function $665($0_1) {
  $0_1 = $0_1 | 0;
  $54($664($0_1));
 }
 
 function $666($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $619($0_1);
  label$1 : {
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0)) {
    break label$1
   }
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 56 >> 2]]($1_1) & 6144)) {
    break label$1
   }
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 104 >> 2]]($0_1) | 0;
   while (1) {
    if (($1_1 | 0) < 1) {
     break label$1
    }
    $1_1 = $1_1 - 1 | 0;
    ((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 108 >> 2]]($0_1, $1_1) | 0), wasm2js_i32$0 = HEAP32[HEAP32[$0_1 >> 2] + 172 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    continue;
   };
  }
  label$3 : {
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0)) {
    break label$3
   }
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 56 >> 2]]($1_1) & 16387)) {
    break label$3
   }
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0)) {
    break label$3
   }
   $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 56 >> 2]]($1_1) | 0)) {
    break label$3
   }
   $1_1 = 0;
   while (1) {
    if (HEAP32[$0_1 + 296 >> 2] <= ($1_1 | 0)) {
     break label$3
    }
    $3_1 = HEAP32[HEAP32[$0_1 + 304 >> 2] + $2_1 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1, HEAP32[$0_1 + 72 >> 2]);
    $2_1 = $2_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   };
  }
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0) {
   $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 104 >> 2]]($0_1);
  }
 }
 
 function $667($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $622($0_1, $1_1, $2_1, $3_1);
 }
 
 function $668($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   if (!(HEAP32[$1_1 + 252 >> 2] & 2)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 92 >> 2]]($0_1, $1_1);
   return;
  }
  $623($0_1, $1_1);
 }
 
 function $669($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 32 >> 2]]($1_1);
  $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]]($1_1, 104, 1) | 0;
  $2_1 = $1(HEAP32[$4_1 + 8 >> 2], 0, 104);
  $65($0_1 + 264 | 0, $2_1 + 88 | 0);
  $3_1 = $0_1 + 124 | 0;
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$2_1 + 28 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 32 >> 2] = $5_1;
  $3_1 = $0_1 + 116 | 0;
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$2_1 + 20 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 24 >> 2] = $5_1;
  $3_1 = $0_1 + 104 | 0;
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$2_1 + 12 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 16 >> 2] = $5_1;
  $3_1 = $0_1 + 96 | 0;
  $5_1 = HEAP32[$3_1 + 4 >> 2];
  HEAP32[$2_1 + 4 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = $5_1;
  HEAPF32[$2_1 >> 2] = HEAPF32[$0_1 + 92 >> 2];
  HEAPF32[$2_1 + 36 >> 2] = HEAPF32[$0_1 + 132 >> 2];
  HEAPF32[$2_1 + 40 >> 2] = HEAPF32[$0_1 + 148 >> 2];
  HEAPF32[$2_1 + 44 >> 2] = HEAPF32[$0_1 + 152 >> 2];
  HEAPF32[$2_1 + 48 >> 2] = HEAPF32[$0_1 + 156 >> 2];
  HEAPF32[$2_1 + 52 >> 2] = HEAPF32[$0_1 + 160 >> 2];
  HEAPF32[$2_1 + 56 >> 2] = HEAPF32[$0_1 + 176 >> 2];
  HEAPF32[$2_1 + 60 >> 2] = HEAPF32[$0_1 + 180 >> 2];
  HEAP32[$2_1 + 64 >> 2] = HEAP32[$0_1 + 112 >> 2];
  HEAP32[$2_1 + 68 >> 2] = HEAP32[$0_1 + 164 >> 2];
  HEAP32[$2_1 + 72 >> 2] = HEAP32[$0_1 + 168 >> 2];
  HEAP32[$2_1 + 76 >> 2] = HEAP32[$0_1 + 172 >> 2];
  $3_1 = HEAP32[$0_1 + 144 >> 2];
  HEAP32[$2_1 + 84 >> 2] = 0;
  HEAP32[$2_1 + 80 >> 2] = $3_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]]($1_1, $4_1, 18749, 1145853764, $2_1);
  $626($0_1, $1_1);
  $2_1 = 0;
  while (1) {
   label$2 : {
    if (HEAP32[$0_1 + 8 >> 2] <= ($2_1 | 0)) {
     $6_1 = 0;
     $2_1 = 0;
     while (1) {
      if (HEAP32[$0_1 + 228 >> 2] <= ($2_1 | 0)) {
       break label$2
      }
      $4_1 = HEAP32[HEAP32[$0_1 + 236 >> 2] + $6_1 >> 2];
      $3_1 = ((((wasm2js_i32$1 = $1_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 36 >> 2]]($4_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
      (((((wasm2js_i32$3 = $1_1, wasm2js_i32$2 = $3_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 40 >> 2]]($4_1, HEAP32[$3_1 + 8 >> 2], $1_1) | 0), wasm2js_i32$4 = 1397641027), wasm2js_i32$5 = $4_1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
      $6_1 = $6_1 + 4 | 0;
      $2_1 = $2_1 + 1 | 0;
      continue;
     };
    }
    $4_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] + $6_1 >> 2];
    if (HEAPU8[$4_1 + 252 | 0] & 2) {
     $3_1 = ((((wasm2js_i32$5 = $1_1, wasm2js_i32$4 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 16 >> 2]]($4_1) | 0), wasm2js_i32$1 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$5 | 0, wasm2js_i32$4 | 0, wasm2js_i32$1 | 0) | 0);
     $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 20 >> 2]]($4_1, HEAP32[$3_1 + 8 >> 2], $1_1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]]($1_1, $3_1, $5_1, 1497645650, $4_1);
    }
    $6_1 = $6_1 + 4 | 0;
    $2_1 = $2_1 + 1 | 0;
    continue;
   }
   break;
  };
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 36 >> 2]]($1_1);
 }
 
 function $670($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if ($2_1) {
    HEAPF32[$0_1 + 284 >> 2] = $3_1;
    $1_1 = Math_fround(HEAPF32[$0_1 + 280 >> 2] + $1_1);
    HEAPF32[$0_1 + 280 >> 2] = $1_1;
    if (!($1_1 >= $3_1)) {
     break label$1
    }
    $5_1 = $0_1;
    $6_1 = $1_1;
    $1_1 = Math_fround($1_1 / $3_1);
    label$3 : {
     if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
      $4_1 = ~~$1_1;
      break label$3;
     }
     $4_1 = -2147483648;
    }
    HEAPF32[$5_1 + 280 >> 2] = $6_1 - Math_fround(Math_fround($4_1 | 0) * $3_1);
    break label$1;
   }
   HEAP32[$0_1 + 284 >> 2] = 0;
   HEAPF32[$0_1 + 280 >> 2] = HEAPU8[$0_1 + 316 | 0] ? Math_fround(0.0) : $1_1;
   $3_1 = $1_1;
   $4_1 = !(Math_fround(Math_abs($1_1)) < Math_fround(1.1920928955078125e-07));
   $2_1 = $4_1;
  }
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0) {
   $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   (wasm2js_i32$0 = 20724, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 56 >> 2]]($5_1) >>> 4 & 1), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  }
  label$6 : {
   if ($4_1) {
    $2_1 = ($2_1 | 0) < ($4_1 | 0) ? $2_1 : $4_1;
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 168 >> 2]]($0_1, Math_fround($3_1 * Math_fround($2_1 | 0)));
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 176 >> 2]]($0_1);
    $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
    while (1) {
     if (!$2_1) {
      break label$6
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 160 >> 2]]($0_1, $3_1);
     FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 80 >> 2]]($0_1);
     $2_1 = $2_1 - 1 | 0;
     continue;
    };
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 80 >> 2]]($0_1);
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 120 >> 2]]($0_1);
  return $4_1 | 0;
 }
 
 function $671($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[$3_1 + 12 >> 2] = $1_1;
  $375($0_1 + 224 | 0, $3_1 + 12 | 0);
  if ($2_1) {
   $574(HEAP32[$1_1 + 28 >> 2], $1_1);
   $574(HEAP32[$1_1 + 32 >> 2], $1_1);
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $672($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $579($0_1 + 224 | 0, $1_1);
  $578(HEAP32[$1_1 + 28 >> 2], $1_1);
  $578(HEAP32[$1_1 + 32 >> 2], $1_1);
 }
 
 function $673($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = HEAP32[$0_1 + 296 >> 2];
  label$1 : {
   if (($2_1 | 0) != HEAP32[$0_1 + 300 >> 2]) {
    break label$1
   }
   $3_1 = $2_1 ? $2_1 << 1 : 1;
   if (($3_1 | 0) <= ($2_1 | 0)) {
    break label$1
   }
   $6_1 = $0_1 + 292 | 0;
   if ($3_1) {
    $5_1 = $53($3_1 << 2);
    $2_1 = HEAP32[$0_1 + 296 >> 2];
   }
   $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   while (1) {
    if ($2_1) {
     HEAP32[$4_1 + $5_1 >> 2] = HEAP32[HEAP32[$0_1 + 304 >> 2] + $4_1 >> 2];
     $2_1 = $2_1 - 1 | 0;
     $4_1 = $4_1 + 4 | 0;
     continue;
    }
    break;
   };
   $96($6_1);
   HEAP32[$0_1 + 304 >> 2] = $5_1;
   HEAP8[$0_1 + 308 | 0] = 1;
   HEAP32[$0_1 + 300 >> 2] = $3_1;
   $2_1 = HEAP32[$0_1 + 296 >> 2];
  }
  HEAP32[$0_1 + 296 >> 2] = $2_1 + 1;
  HEAP32[HEAP32[$0_1 + 304 >> 2] + ($2_1 << 2) >> 2] = $1_1;
 }
 
 function $674($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[$0_1 + 296 >> 2];
  $5_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  label$1 : {
   while (1) {
    if (($2_1 | 0) == ($5_1 | 0)) {
     break label$1
    }
    if (HEAP32[HEAP32[$0_1 + 304 >> 2] + $4_1 >> 2] != ($1_1 | 0)) {
     $4_1 = $4_1 + 4 | 0;
     $2_1 = $2_1 + 1 | 0;
     continue;
    }
    break;
   };
   if (($2_1 | 0) >= ($3_1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 + 304 >> 2];
   $2_1 = $1_1 + ($2_1 << 2) | 0;
   $4_1 = HEAP32[$2_1 >> 2];
   $5_1 = $2_1;
   $6_1 = $1_1;
   $1_1 = $3_1 - 1 | 0;
   $2_1 = $1_1 << 2;
   HEAP32[$5_1 >> 2] = HEAP32[$6_1 + $2_1 >> 2];
   HEAP32[$0_1 + 296 >> 2] = $1_1;
   HEAP32[$2_1 + HEAP32[$0_1 + 304 >> 2] >> 2] = $4_1;
  }
 }
 
 function $675($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 264 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 268 >> 2] = $2_1;
  $3_1 = $1_1 + 8 | 0;
  $6_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0_1 + 272 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $6_1;
  while (1) {
   if (($4_1 | 0) < HEAP32[$0_1 + 248 >> 2]) {
    label$3 : {
     label$4 : {
      $2_1 = HEAP32[HEAP32[$0_1 + 256 >> 2] + $5_1 >> 2];
      switch (HEAP32[$2_1 + 220 >> 2] - 2 | 0) {
      case 0:
      case 3:
       break label$3;
      default:
       break label$4;
      };
     }
     if (HEAP8[$2_1 + 564 | 0] & 1) {
      break label$3
     }
     $567($2_1, $1_1);
    }
    $5_1 = $5_1 + 4 | 0;
    $4_1 = $4_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $676($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 268 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 264 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  $1_1 = $1_1 + 272 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $677($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   if (HEAPU8[$0_1 + 290 | 0]) {
    $5_1 = $0_1 + 316 | 0;
    $6_1 = $0_1 + 284 | 0;
    $4_1 = $0_1 + 280 | 0;
    while (1) {
     if (HEAP32[$0_1 + 8 >> 2] <= ($1_1 | 0)) {
      break label$1
     }
     $3_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] + $2_1 >> 2];
     label$4 : {
      if (!$3_1) {
       break label$4
      }
      if (!(HEAP32[$3_1 + 252 >> 2] & 2)) {
       break label$4
      }
      $678(HEAPF32[$4_1 >> 2], HEAPF32[$6_1 >> 2], HEAPU8[$5_1 | 0], $3_1);
     }
     $2_1 = $2_1 + 4 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue;
    };
   }
   $3_1 = $0_1 + 316 | 0;
   $5_1 = $0_1 + 284 | 0;
   $6_1 = $0_1 + 280 | 0;
   while (1) {
    if (HEAP32[$0_1 + 248 >> 2] <= ($1_1 | 0)) {
     break label$1
    }
    label$6 : {
     label$7 : {
      $4_1 = HEAP32[HEAP32[$0_1 + 256 >> 2] + $2_1 >> 2];
      switch (HEAP32[$4_1 + 220 >> 2] - 2 | 0) {
      case 0:
      case 3:
       break label$6;
      default:
       break label$7;
      };
     }
     $678(HEAPF32[$6_1 >> 2], HEAPF32[$5_1 >> 2], HEAPU8[$3_1 | 0], $4_1);
    }
    $2_1 = $2_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   };
  }
 }
 
 function $678($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0;
  $4_1 = global$0 + -64 | 0;
  global$0 = $4_1;
  label$1 : {
   if (!HEAP32[$3_1 + 540 >> 2]) {
    break label$1
   }
   if (HEAPU8[$3_1 + 204 | 0] & 3) {
    break label$1
   }
   $5_1 = $3_1 + 68 | 0;
   $6_1 = HEAPF32[$3_1 + 132 >> 2];
   $7_1 = HEAPF32[$3_1 + 136 >> 2];
   $8_1 = HEAPF32[$3_1 + 140 >> 2];
   $9_1 = $3_1 + 148 | 0;
   label$2 : {
    label$3 : {
     if (!($2_1 & 255)) {
      break label$3
     }
     if ($1_1 == Math_fround(0.0)) {
      break label$3
     }
     $0_1 = Math_fround($0_1 - $1_1);
     break label$2;
    }
    $0_1 = Math_fround(HEAPF32[$3_1 + 268 >> 2] * $0_1);
   }
   $564($5_1, $6_1, $7_1, $8_1, $9_1, $0_1, $4_1);
   $2_1 = HEAP32[$3_1 + 540 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 12 >> 2]]($2_1, $4_1);
  }
  global$0 = $4_1 - -64 | 0;
 }
 
 function $679($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  label$1 : {
   if (HEAPU8[$1_1 + 204 | 0] & 3) {
    break label$1
   }
   if (HEAP8[$1_1 + 564 | 0] & 1) {
    break label$1
   }
   $567($1_1, $0_1 + 264 | 0);
  }
  if (HEAP32[$1_1 + 192 >> 2]) {
   label$3 : {
    if (!(HEAP8[$1_1 + 204 | 0] & 1)) {
     $577($0_1 + 244 | 0, $2_1 + 12 | 0);
     break label$3;
    }
    if ((HEAP32[$1_1 + 220 >> 2] & -2) == 4) {
     break label$3
    }
    HEAP32[$1_1 + 220 >> 2] = 2;
   }
   $3_1 = $1_1;
   $1_1 = HEAP32[$1_1 + 204 >> 2] & 3;
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 36 >> 2]]($0_1, $3_1, $1_1 ? 2 : 1, $1_1 ? -3 : -1);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $680($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $1_1;
  label$1 : {
   if (HEAPU8[$1_1 + 204 | 0] & 3) {
    break label$1
   }
   if (HEAP8[$1_1 + 564 | 0] & 1) {
    break label$1
   }
   $567($1_1, $0_1 + 264 | 0);
  }
  if (HEAP32[$1_1 + 192 >> 2]) {
   label$3 : {
    if (!(HEAP8[$1_1 + 204 | 0] & 1)) {
     $577($0_1 + 244 | 0, $4_1 + 12 | 0);
     break label$3;
    }
    if ((HEAP32[$1_1 + 220 >> 2] & -2) == 4) {
     break label$3
    }
    HEAP32[$1_1 + 220 >> 2] = 2;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 36 >> 2]]($0_1, $1_1, $2_1, $3_1);
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $681($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[$0_1 + 248 >> 2];
  $5_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
  label$1 : {
   while (1) {
    if (($2_1 | 0) == ($5_1 | 0)) {
     break label$1
    }
    if (HEAP32[HEAP32[$0_1 + 256 >> 2] + $4_1 >> 2] != ($1_1 | 0)) {
     $4_1 = $4_1 + 4 | 0;
     $2_1 = $2_1 + 1 | 0;
     continue;
    }
    break;
   };
   if (($2_1 | 0) >= ($3_1 | 0)) {
    break label$1
   }
   $6_1 = $2_1 << 2;
   $2_1 = HEAP32[$0_1 + 256 >> 2];
   $4_1 = $6_1 + $2_1 | 0;
   $5_1 = HEAP32[$4_1 >> 2];
   $6_1 = $2_1;
   $2_1 = $3_1 - 1 | 0;
   $3_1 = $2_1 << 2;
   HEAP32[$4_1 >> 2] = HEAP32[$6_1 + $3_1 >> 2];
   HEAP32[$0_1 + 248 >> 2] = $2_1;
   HEAP32[$3_1 + HEAP32[$0_1 + 256 >> 2] >> 2] = $5_1;
  }
  $623($0_1, $1_1);
 }
 
 function $682($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  if (HEAPU8[$0_1 + 289 | 0]) {
   $54(HEAP32[$0_1 + 216 >> 2])
  }
  HEAP32[$0_1 + 216 >> 2] = $1_1;
  HEAP8[$0_1 + 289 | 0] = 0;
  HEAP32[HEAP32[$0_1 + 212 >> 2] + 8 >> 2] = $1_1;
 }
 
 function $683($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 216 >> 2];
 }
 
 function $684($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 228 >> 2];
 }
 
 function $685($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[HEAP32[$0_1 + 236 >> 2] + ($1_1 << 2) >> 2];
 }
 
 function $686($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  while (1) {
   if (HEAP32[$0_1 + 248 >> 2] > ($3_1 | 0)) {
    $2_1 = HEAP32[HEAP32[$0_1 + 256 >> 2] + $4_1 >> 2];
    $1_1 = $2_1;
    HEAP32[$1_1 + 472 >> 2] = 0;
    HEAP32[$1_1 + 476 >> 2] = 0;
    $1_1 = $1_1 + 496 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $1_1 = $2_1 + 488 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $2_1 = $2_1 + 480 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $4_1 = $4_1 + 4 | 0;
    $3_1 = $3_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $687($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 64 >> 2]]($0_1, $1_1);
 }
 
 function $688($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 68 >> 2]]($0_1, $1_1);
 }
 
 function $689($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = Math_fround(0), $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  while (1) {
   if (HEAP32[$0_1 + 248 >> 2] > ($8_1 | 0)) {
    $4_1 = HEAP32[HEAP32[$0_1 + 256 >> 2] + $9_1 >> 2];
    if (!(HEAPU8[$4_1 + 204 | 0] & 3)) {
     (wasm2js_i32$0 = $3_1, wasm2js_f32$0 = $51(Math_fround(Math_fround(1.0) - HEAPF32[$4_1 + 504 >> 2]), $1_1)), HEAPF32[wasm2js_i32$0 + 16 >> 2] = wasm2js_f32$0;
     $6_1 = $147($4_1 + 372 | 0, $3_1 + 16 | 0);
     (wasm2js_i32$0 = $3_1, wasm2js_f32$0 = $51(Math_fround(Math_fround(1.0) - HEAPF32[$4_1 + 508 >> 2]), $1_1)), HEAPF32[wasm2js_i32$0 + 16 >> 2] = wasm2js_f32$0;
     $7_1 = $147($4_1 + 388 | 0, $3_1 + 16 | 0);
     label$4 : {
      if (!HEAPU8[$4_1 + 512 | 0]) {
       break label$4
      }
      $2_1 = HEAPF32[$7_1 >> 2];
      $5_1 = Math_fround($2_1 * $2_1);
      $10_1 = $4_1 + 392 | 0;
      $2_1 = HEAPF32[$10_1 >> 2];
      $5_1 = Math_fround($5_1 + Math_fround($2_1 * $2_1));
      $11_1 = $4_1 + 396 | 0;
      $2_1 = HEAPF32[$11_1 >> 2];
      label$5 : {
       if (!(HEAPF32[$4_1 + 524 >> 2] > Math_fround($5_1 + Math_fround($2_1 * $2_1)))) {
        break label$5
       }
       $2_1 = HEAPF32[$6_1 >> 2];
       $5_1 = Math_fround($2_1 * $2_1);
       $2_1 = HEAPF32[$4_1 + 376 >> 2];
       $5_1 = Math_fround($5_1 + Math_fround($2_1 * $2_1));
       $2_1 = HEAPF32[$4_1 + 380 >> 2];
       if (!(HEAPF32[$4_1 + 520 >> 2] > Math_fround($5_1 + Math_fround($2_1 * $2_1)))) {
        break label$5
       }
       $12_1 = $4_1 + 516 | 0;
       $147($7_1, $12_1);
       $147($6_1, $12_1);
      }
      $2_1 = HEAPF32[$6_1 >> 2];
      $5_1 = Math_fround($2_1 * $2_1);
      $2_1 = HEAPF32[$4_1 + 376 >> 2];
      $5_1 = Math_fround($5_1 + Math_fround($2_1 * $2_1));
      $2_1 = HEAPF32[$4_1 + 380 >> 2];
      $2_1 = Math_fround(Math_sqrt(Math_fround($5_1 + Math_fround($2_1 * $2_1))));
      label$6 : {
       if (!($2_1 < HEAPF32[$4_1 + 504 >> 2])) {
        break label$6
       }
       if ($2_1 > Math_fround(.004999999888241291)) {
        $113($3_1 + 16 | 0, $6_1);
        HEAP32[$3_1 + 12 >> 2] = 0;
        HEAPF32[$3_1 + 8 >> 2] = HEAPF32[$3_1 + 24 >> 2] * Math_fround(.004999999888241291);
        HEAPF32[$3_1 + 4 >> 2] = HEAPF32[$3_1 + 20 >> 2] * Math_fround(.004999999888241291);
        HEAPF32[$3_1 >> 2] = HEAPF32[$3_1 + 16 >> 2] * Math_fround(.004999999888241291);
        $405($6_1, $3_1);
        break label$6;
       }
       HEAP32[$6_1 >> 2] = 0;
       HEAP32[$6_1 + 4 >> 2] = 0;
       $6_1 = $6_1 + 8 | 0;
       HEAP32[$6_1 >> 2] = 0;
       HEAP32[$6_1 + 4 >> 2] = 0;
      }
      $2_1 = HEAPF32[$7_1 >> 2];
      $5_1 = Math_fround($2_1 * $2_1);
      $2_1 = HEAPF32[$10_1 >> 2];
      $5_1 = Math_fround($5_1 + Math_fround($2_1 * $2_1));
      $2_1 = HEAPF32[$11_1 >> 2];
      $2_1 = Math_fround(Math_sqrt(Math_fround($5_1 + Math_fround($2_1 * $2_1))));
      if (!($2_1 < HEAPF32[$4_1 + 508 >> 2])) {
       break label$4
      }
      if ($2_1 > Math_fround(.004999999888241291)) {
       $113($3_1 + 16 | 0, $7_1);
       HEAP32[$3_1 + 12 >> 2] = 0;
       HEAPF32[$3_1 + 8 >> 2] = HEAPF32[$3_1 + 24 >> 2] * Math_fround(.004999999888241291);
       HEAPF32[$3_1 + 4 >> 2] = HEAPF32[$3_1 + 20 >> 2] * Math_fround(.004999999888241291);
       HEAPF32[$3_1 >> 2] = HEAPF32[$3_1 + 16 >> 2] * Math_fround(.004999999888241291);
       $405($7_1, $3_1);
       break label$4;
      }
      HEAP32[$7_1 >> 2] = 0;
      HEAP32[$7_1 + 4 >> 2] = 0;
      $6_1 = $7_1 + 8 | 0;
      HEAP32[$6_1 >> 2] = 0;
      HEAP32[$6_1 + 4 >> 2] = 0;
     }
     $563($4_1, $1_1, $4_1 + 68 | 0);
    }
    $9_1 = $9_1 + 4 | 0;
    $8_1 = $8_1 + 1 | 0;
    continue;
   }
   break;
  };
  global$0 = $3_1 + 32 | 0;
 }
 
 function $690($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = 0, $9_1 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0);
  $2_1 = global$0 - 288 | 0;
  global$0 = $2_1;
  label$1 : {
   $8_1 = HEAP32[$0_1 + 248 >> 2];
   if (($8_1 | 0) < 1) {
    break label$1
   }
   $13_1 = HEAP32[$0_1 + 256 >> 2];
   $12_1 = $2_1 + 48 | 0;
   $14_1 = $2_1 + 32 | 0;
   $15_1 = $2_1 + 16 | 0;
   $16_1 = $2_1 + 152 | 0;
   $17_1 = $2_1 + 136 | 0;
   $10_1 = $2_1 + 272 | 0;
   while (1) {
    if (!$8_1) {
     break label$1
    }
    $4_1 = HEAP32[$13_1 >> 2];
    HEAP32[$4_1 + 268 >> 2] = 1065353216;
    label$3 : {
     label$4 : {
      switch (HEAP32[$4_1 + 220 >> 2] - 2 | 0) {
      case 0:
      case 3:
       break label$3;
      default:
       break label$4;
      };
     }
     if (HEAPU8[$4_1 + 204 | 0] & 3) {
      break label$3
     }
     $563($4_1, $1_1, $2_1 + 224 | 0);
     label$5 : {
      if (!HEAPU8[$0_1 + 44 | 0]) {
       break label$5
      }
      $7_1 = Math_fround(HEAPF32[$2_1 + 272 >> 2] - HEAPF32[$4_1 + 52 >> 2]);
      $9_1 = Math_fround($7_1 * $7_1);
      $7_1 = Math_fround(HEAPF32[$2_1 + 276 >> 2] - HEAPF32[$4_1 + 56 >> 2]);
      $9_1 = Math_fround($9_1 + Math_fround($7_1 * $7_1));
      $7_1 = Math_fround(HEAPF32[$2_1 + 280 >> 2] - HEAPF32[$4_1 + 60 >> 2]);
      $7_1 = Math_fround($9_1 + Math_fround($7_1 * $7_1));
      $9_1 = HEAPF32[$4_1 + 276 >> 2];
      $9_1 = Math_fround($9_1 * $9_1);
      if ($9_1 == Math_fround(0.0)) {
       break label$5
      }
      if (!($7_1 > $9_1)) {
       break label$5
      }
      if (HEAP32[HEAP32[$4_1 + 192 >> 2] + 4 >> 2] > 19) {
       break label$5
      }
      HEAP32[5184] = HEAP32[5184] + 1;
      $3_1 = HEAP32[$0_1 + 68 >> 2];
      $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 36 >> 2]]($3_1) | 0;
      $3_1 = $4_1 + 52 | 0;
      $6_1 = HEAP32[$3_1 + 4 >> 2];
      HEAP32[$17_1 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$17_1 + 4 >> 2] = $6_1;
      $3_1 = $3_1 + 8 | 0;
      $11_1 = HEAP32[$3_1 + 4 >> 2];
      $6_1 = $17_1 + 8 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $11_1;
      $3_1 = HEAP32[$10_1 + 4 >> 2];
      HEAP32[$16_1 >> 2] = HEAP32[$10_1 >> 2];
      HEAP32[$16_1 + 4 >> 2] = $3_1;
      $3_1 = $10_1 + 8 | 0;
      $11_1 = HEAP32[$3_1 + 4 >> 2];
      $6_1 = $16_1 + 8 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $11_1;
      HEAP32[$2_1 + 124 >> 2] = 1065353216;
      HEAP32[$2_1 + 120 >> 2] = 18684;
      HEAP32[$2_1 + 200 >> 2] = 0;
      HEAP32[$2_1 + 216 >> 2] = HEAP32[$0_1 + 24 >> 2];
      HEAP32[$2_1 + 212 >> 2] = $5_1;
      HEAP32[$2_1 + 204 >> 2] = $4_1;
      $373($2_1 - -64 | 0, HEAPF32[$4_1 + 272 >> 2]);
      HEAPF32[$2_1 + 208 >> 2] = HEAPF32[$0_1 + 56 >> 2];
      $5_1 = HEAP32[$4_1 + 188 >> 2];
      $6_1 = HEAP32[$5_1 + 8 >> 2];
      HEAP32[$2_1 + 128 >> 2] = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$2_1 + 132 >> 2] = $6_1;
      $6_1 = HEAP32[$3_1 + 4 >> 2];
      $5_1 = $12_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $6_1;
      $3_1 = HEAP32[$10_1 + 4 >> 2];
      HEAP32[$12_1 >> 2] = HEAP32[$10_1 >> 2];
      HEAP32[$12_1 + 4 >> 2] = $3_1;
      $3_1 = $4_1 + 4 | 0;
      $6_1 = $3_1 + 8 | 0;
      $11_1 = HEAP32[$6_1 + 4 >> 2];
      $5_1 = $2_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $11_1;
      $5_1 = $4_1 + 20 | 0;
      $6_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$15_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$15_1 + 4 >> 2] = $6_1;
      $6_1 = $4_1 + 28 | 0;
      $11_1 = HEAP32[$6_1 + 4 >> 2];
      $5_1 = $15_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $11_1;
      $5_1 = $4_1 + 36 | 0;
      $6_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$14_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$14_1 + 4 >> 2] = $6_1;
      $6_1 = $4_1 + 44 | 0;
      $11_1 = HEAP32[$6_1 + 4 >> 2];
      $5_1 = $14_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $11_1;
      $5_1 = HEAP32[$3_1 + 4 >> 2];
      HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
      HEAP32[$2_1 + 4 >> 2] = $5_1;
      $647($0_1, $2_1 - -64 | 0, $3_1, $2_1, $2_1 + 120 | 0, Math_fround(0.0));
      $7_1 = HEAPF32[$2_1 + 124 >> 2];
      if (!($7_1 < Math_fround(1.0))) {
       break label$5
      }
      HEAPF32[$4_1 + 268 >> 2] = $7_1;
      $563($4_1, Math_fround($7_1 * $1_1), $2_1 + 224 | 0);
      HEAP32[$4_1 + 268 >> 2] = 0;
      $570($4_1, $2_1 + 224 | 0);
      break label$3;
     }
     $570($4_1, $2_1 + 224 | 0);
    }
    $8_1 = $8_1 - 1 | 0;
    $13_1 = $13_1 + 4 | 0;
    continue;
   };
  }
  label$6 : {
   if (!HEAPU8[$0_1 + 291 | 0]) {
    break label$6
   }
   $10_1 = 0;
   label$7 : while (1) {
    if (HEAP32[$0_1 + 324 >> 2] <= ($10_1 | 0)) {
     break label$6
    }
    $12_1 = HEAP32[HEAP32[$0_1 + 332 >> 2] + ($10_1 << 2) >> 2];
    $3_1 = HEAP32[$12_1 + 840 >> 2];
    $3_1 = HEAP32[$3_1 + 252 >> 2] << 30 >> 31 & $3_1;
    $4_1 = HEAP32[$12_1 + 836 >> 2];
    $4_1 = HEAP32[$4_1 + 252 >> 2] << 30 >> 31 & $4_1;
    $8_1 = $12_1 + 136 | 0;
    $13_1 = 0;
    while (1) if (HEAP32[$12_1 + 844 >> 2] <= ($13_1 | 0)) {
     $10_1 = $10_1 + 1 | 0;
     continue label$7;
    } else {
     $1_1 = Math_fround(HEAPF32[$4_1 + 232 >> 2] * HEAPF32[$3_1 + 232 >> 2]);
     label$11 : {
      if (!($1_1 > Math_fround(0.0))) {
       break label$11
      }
      $7_1 = HEAPF32[$8_1 >> 2];
      if ($7_1 == Math_fround(0.0)) {
       break label$11
      }
      HEAP32[$2_1 + 132 >> 2] = 0;
      $9_1 = Math_fround($1_1 * Math_fround($7_1 * Math_fround(-HEAPF32[$8_1 - 68 >> 2])));
      HEAPF32[$2_1 + 120 >> 2] = $9_1;
      $18_1 = Math_fround($1_1 * Math_fround($7_1 * Math_fround(-HEAPF32[$8_1 + -64 >> 2])));
      HEAPF32[$2_1 + 124 >> 2] = $18_1;
      $1_1 = Math_fround($1_1 * Math_fround($7_1 * Math_fround(-HEAPF32[$8_1 - 60 >> 2])));
      HEAPF32[$2_1 + 128 >> 2] = $1_1;
      HEAP32[$2_1 + 236 >> 2] = 0;
      HEAPF32[$2_1 + 232 >> 2] = HEAPF32[$8_1 - 76 >> 2] - HEAPF32[$4_1 + 60 >> 2];
      HEAPF32[$2_1 + 228 >> 2] = HEAPF32[$8_1 - 80 >> 2] - HEAPF32[$4_1 + 56 >> 2];
      HEAPF32[$2_1 + 224 >> 2] = HEAPF32[$8_1 - 84 >> 2] - HEAPF32[$4_1 + 52 >> 2];
      HEAP32[$2_1 + 12 >> 2] = 0;
      HEAPF32[$2_1 + 8 >> 2] = HEAPF32[$8_1 - 92 >> 2] - HEAPF32[$3_1 + 60 >> 2];
      HEAPF32[$2_1 + 4 >> 2] = HEAPF32[$8_1 - 96 >> 2] - HEAPF32[$3_1 + 56 >> 2];
      HEAPF32[$2_1 >> 2] = HEAPF32[$8_1 - 100 >> 2] - HEAPF32[$3_1 + 52 >> 2];
      $691($4_1, $2_1 + 120 | 0, $2_1 + 224 | 0);
      HEAP32[$2_1 + 76 >> 2] = 0;
      HEAPF32[$2_1 + 72 >> 2] = -$1_1;
      HEAPF32[$2_1 + 68 >> 2] = -$18_1;
      HEAPF32[$2_1 + 64 >> 2] = -$9_1;
      $691($3_1, $2_1 - -64 | 0, $2_1);
     }
     $8_1 = $8_1 + 208 | 0;
     $13_1 = $13_1 + 1 | 0;
     continue;
    };
   };
  }
  global$0 = $2_1 + 288 | 0;
 }
 
 function $691($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  if (HEAPF32[$0_1 + 404 >> 2] != Math_fround(0.0)) {
   $4_1 = $1_1 + 4 | 0;
   $5_1 = $1_1 + 8 | 0;
   $847($0_1, HEAPF32[$1_1 >> 2], HEAPF32[$4_1 >> 2], HEAPF32[$5_1 >> 2]);
   $129($3_1, HEAPF32[$2_1 >> 2], HEAPF32[$2_1 + 4 >> 2], HEAPF32[$2_1 + 8 >> 2], Math_fround(HEAPF32[$1_1 >> 2] * HEAPF32[$0_1 + 408 >> 2]), Math_fround(HEAPF32[$4_1 >> 2] * HEAPF32[$0_1 + 412 >> 2]), Math_fround(HEAPF32[$5_1 >> 2] * HEAPF32[$0_1 + 416 >> 2]));
   $845($0_1, HEAPF32[$3_1 >> 2], HEAPF32[$3_1 + 4 >> 2], HEAPF32[$3_1 + 8 >> 2]);
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $692($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = HEAP32[$0_1 + 220 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, $0_1, HEAP32[$0_1 + 24 >> 2]);
  $1_1 = 0;
  while (1) {
   if (HEAP32[$0_1 + 324 >> 2] <= ($3_1 | 0)) {
    label$3 : {
     $1_1 = 0;
     $3_1 = HEAP32[$0_1 + 228 >> 2];
     $3_1 = ($3_1 | 0) > 0 ? $3_1 : 0;
     while (1) {
      if (!$3_1) {
       break label$3
      }
      $2_1 = HEAP32[HEAP32[$0_1 + 236 >> 2] + $1_1 >> 2];
      label$5 : {
       if (!HEAPU8[$2_1 + 20 | 0]) {
        break label$5
       }
       $4_1 = HEAP32[$2_1 + 28 >> 2];
       if (HEAPU8[$4_1 + 204 | 0] & 3) {
        break label$5
       }
       $2_1 = HEAP32[$2_1 + 32 >> 2];
       if (HEAPU8[$2_1 + 204 | 0] & 3) {
        break label$5
       }
       $653(HEAP32[$0_1 + 220 >> 2] + 4 | 0, HEAP32[$4_1 + 208 >> 2], HEAP32[$2_1 + 208 >> 2]);
      }
      $3_1 = $3_1 - 1 | 0;
      $1_1 = $1_1 + 4 | 0;
      continue;
     };
    }
   } else {
    $4_1 = HEAP32[HEAP32[$0_1 + 332 >> 2] + $1_1 >> 2];
    $2_1 = HEAP32[$4_1 + 836 >> 2];
    label$7 : {
     if (!$2_1) {
      break label$7
     }
     $4_1 = HEAP32[$4_1 + 840 >> 2];
     if (!$4_1) {
      break label$7
     }
     if (HEAP32[$2_1 + 204 >> 2] & 3) {
      break label$7
     }
     if (HEAPU8[$4_1 + 204 | 0] & 3) {
      break label$7
     }
     $653(HEAP32[$0_1 + 220 >> 2] + 4 | 0, HEAP32[$2_1 + 208 >> 2], HEAP32[$4_1 + 208 >> 2]);
    }
    $1_1 = $1_1 + 4 | 0;
    $3_1 = $3_1 + 1 | 0;
    continue;
   }
   break;
  };
  $1_1 = HEAP32[$0_1 + 220 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 12 >> 2]]($1_1, $0_1);
 }
 
 function $693($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $3_1 = HEAP32[$0_1 + 228 >> 2];
  HEAP32[$8_1 + 12 >> 2] = 0;
  $4_1 = $0_1 + 192 | 0;
  $663($4_1, $3_1, $8_1 + 12 | 0);
  while (1) {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 104 >> 2]]($0_1) | 0) > ($5_1 | 0)) {
    HEAP32[HEAP32[$0_1 + 204 >> 2] + $2_1 >> 2] = HEAP32[HEAP32[$0_1 + 236 >> 2] + $2_1 >> 2];
    $2_1 = $2_1 + 4 | 0;
    $5_1 = $5_1 + 1 | 0;
    continue;
   }
   break;
  };
  $2_1 = HEAP32[$0_1 + 196 >> 2];
  if (($2_1 | 0) >= 2) {
   $694($4_1, 0, $2_1 - 1 | 0)
  }
  $5_1 = 0;
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 104 >> 2]]($0_1) | 0) {
   $13_1 = HEAP32[$0_1 + 204 >> 2]
  }
  $3_1 = HEAP32[$0_1 + 196 >> 2];
  $2_1 = HEAP32[$0_1 + 212 >> 2];
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0), HEAP32[wasm2js_i32$0 + 20 >> 2] = wasm2js_i32$1;
  HEAP32[$2_1 + 16 >> 2] = $3_1;
  HEAP32[$2_1 + 12 >> 2] = $13_1;
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  HEAP32[$8_1 + 12 >> 2] = 0;
  $415($2_1 + 28 | 0, $8_1 + 12 | 0);
  HEAP32[$8_1 + 12 >> 2] = 0;
  $415($2_1 + 48 | 0, $8_1 + 12 | 0);
  HEAP32[$8_1 + 12 >> 2] = 0;
  $663($2_1 + 68 | 0, 0, $8_1 + 12 | 0);
  $2_1 = HEAP32[$0_1 + 216 >> 2];
  $3_1 = HEAP32[$0_1 + 24 >> 2];
  (((wasm2js_i32$1 = $2_1, wasm2js_i32$2 = HEAP32[$0_1 + 8 >> 2]), wasm2js_i32$3 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 36 >> 2]]($3_1) | 0), wasm2js_i32$0 = HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0);
  $16_1 = HEAP32[$0_1 + 212 >> 2];
  $10_1 = HEAP32[$0_1 + 24 >> 2];
  $9_1 = HEAP32[$0_1 + 220 >> 2];
  HEAP32[$8_1 + 12 >> 2] = 0;
  $14_1 = $9_1 + 24 | 0;
  $415($14_1, $8_1 + 12 | 0);
  $2_1 = HEAP32[$9_1 + 8 >> 2];
  $4_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
  $3_1 = $9_1 + 16 | 0;
  $2_1 = 0;
  while (1) if (($2_1 | 0) == ($4_1 | 0)) {
   $6_1 = HEAP32[$9_1 + 8 >> 2];
   if (($6_1 | 0) >= 2) {
    $649($9_1 + 4 | 0, 0, $6_1 - 1 | 0);
    $6_1 = HEAP32[$9_1 + 8 >> 2];
   }
   $17_1 = $6_1 - 1 | 0;
   $2_1 = 0;
   $18_1 = $9_1 + 16 | 0;
   while (1) {
    label$9 : {
     if (($2_1 | 0) < ($6_1 | 0)) {
      $7_1 = HEAP32[$18_1 >> 2] + ($2_1 << 3) | 0;
      $5_1 = $7_1 + 8 | 0;
      $3_1 = $2_1 + 1 | 0;
      $15_1 = (($3_1 | 0) < ($6_1 | 0) ? $6_1 : $3_1) - 1 | 0;
      $12_1 = HEAP32[$7_1 >> 2];
      $3_1 = $2_1;
      label$11 : {
       while (1) {
        if (($3_1 | 0) == ($17_1 | 0)) {
         $3_1 = $6_1;
         break label$11;
        }
        $3_1 = $3_1 + 1 | 0;
        $4_1 = HEAP32[$5_1 >> 2];
        $5_1 = $5_1 + 8 | 0;
        if (($4_1 | 0) == ($12_1 | 0)) {
         continue
        }
        break;
       };
       $15_1 = $3_1 - 1 | 0;
      }
      $4_1 = 1;
      $7_1 = $7_1 + 4 | 0;
      $13_1 = $7_1;
      $5_1 = $2_1;
      while (1) {
       if (($5_1 | 0) <= ($15_1 | 0)) {
        $11_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] + (HEAP32[$13_1 >> 2] << 2) >> 2];
        if (($12_1 | 0) == HEAP32[$11_1 + 208 >> 2]) {
         $11_1 = HEAP32[$11_1 + 220 >> 2];
         $4_1 = ($11_1 | 0) != 4 & (($11_1 | 0) != 1 & $4_1);
        }
        $13_1 = $13_1 + 8 | 0;
        $5_1 = $5_1 + 1 | 0;
        continue;
       }
       break;
      };
      if ($4_1 & 1) {
       while (1) {
        if (($2_1 | 0) > ($15_1 | 0)) {
         break label$9
        }
        $4_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] + (HEAP32[$7_1 >> 2] << 2) >> 2];
        label$19 : {
         if (($12_1 | 0) != HEAP32[$4_1 + 208 >> 2]) {
          break label$19
         }
         if ((HEAP32[$4_1 + 220 >> 2] & -2) == 4) {
          break label$19
         }
         HEAP32[$4_1 + 220 >> 2] = 2;
        }
        $7_1 = $7_1 + 8 | 0;
        $2_1 = $2_1 + 1 | 0;
        continue;
       }
      }
      while (1) {
       if (($2_1 | 0) > ($15_1 | 0)) {
        break label$9
       }
       $4_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] + (HEAP32[$7_1 >> 2] << 2) >> 2];
       label$21 : {
        if (($12_1 | 0) != HEAP32[$4_1 + 208 >> 2]) {
         break label$21
        }
        if (HEAP32[$4_1 + 220 >> 2] != 2) {
         break label$21
        }
        HEAP32[$4_1 + 220 >> 2] = 3;
        HEAP32[$4_1 + 224 >> 2] = 0;
       }
       $7_1 = $7_1 + 8 | 0;
       $2_1 = $2_1 + 1 | 0;
       continue;
      };
     }
     $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$10_1 >> 2] + 36 >> 2]]($10_1) | 0;
     $5_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
     $2_1 = 0;
     while (1) {
      if (($2_1 | 0) != ($5_1 | 0)) {
       $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$10_1 >> 2] + 40 >> 2]]($10_1, $2_1) | 0;
       HEAP32[$8_1 + 12 >> 2] = $4_1;
       $3_1 = HEAP32[$4_1 + 840 >> 2];
       $4_1 = HEAP32[$4_1 + 836 >> 2];
       label$24 : {
        if (!(HEAP32[$4_1 + 220 >> 2] != 2 ? $4_1 : 0)) {
         if (!$3_1) {
          break label$24
         }
         if (HEAP32[$3_1 + 220 >> 2] == 2) {
          break label$24
         }
        }
        $6_1 = HEAP32[$4_1 + 204 >> 2];
        label$27 : {
         if (!($6_1 & 2)) {
          break label$27
         }
         if ($6_1 & 4) {
          break label$27
         }
         if (HEAP32[$4_1 + 220 >> 2] == 2) {
          break label$27
         }
         $68($3_1, 0);
        }
        $6_1 = HEAP32[$3_1 + 204 >> 2];
        label$28 : {
         if (!($6_1 & 2)) {
          break label$28
         }
         if ($6_1 & 4) {
          break label$28
         }
         if (HEAP32[$3_1 + 220 >> 2] == 2) {
          break label$28
         }
         $68($4_1, 0);
        }
        if (!HEAPU8[$9_1 + 64 | 0]) {
         break label$24
        }
        if (!(FUNCTION_TABLE[HEAP32[HEAP32[$10_1 >> 2] + 28 >> 2]]($10_1, $4_1, $3_1) | 0)) {
         break label$24
        }
        $375($14_1, $8_1 + 12 | 0);
       }
       $2_1 = $2_1 + 1 | 0;
       continue;
      }
      break;
     };
     label$29 : {
      if (!HEAPU8[$9_1 + 64 | 0]) {
       $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$10_1 >> 2] + 44 >> 2]]($10_1) | 0;
       $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$10_1 >> 2] + 36 >> 2]]($10_1) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$16_1 >> 2] + 8 >> 2]]($16_1, HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 8 >> 2], $2_1, $3_1, -1);
       break label$29;
      }
      $10_1 = HEAP32[$9_1 + 8 >> 2];
      $12_1 = HEAP32[$9_1 + 28 >> 2];
      if (($12_1 | 0) >= 2) {
       $656($14_1, 0, $12_1 - 1 | 0)
      }
      $17_1 = $9_1 + 44 | 0;
      $18_1 = $9_1 + 16 | 0;
      $4_1 = 1;
      $6_1 = 0;
      $2_1 = 0;
      while (1) {
       if (($2_1 | 0) >= ($10_1 | 0)) {
        break label$29
       }
       $5_1 = $2_1 << 3;
       $14_1 = HEAP32[$5_1 + HEAP32[$18_1 >> 2] >> 2];
       $13_1 = 1;
       while (1) {
        label$34 : {
         if (($2_1 | 0) == ($10_1 | 0)) {
          $2_1 = $10_1;
          break label$34;
         }
         $3_1 = HEAP32[$18_1 >> 2] + $5_1 | 0;
         if (HEAP32[$3_1 >> 2] != ($14_1 | 0)) {
          break label$34
         }
         $3_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] + (HEAP32[$3_1 + 4 >> 2] << 2) >> 2];
         HEAP32[$8_1 + 12 >> 2] = $3_1;
         $375($17_1, $8_1 + 12 | 0);
         $3_1 = HEAP32[$3_1 + 220 >> 2];
         $13_1 = (($3_1 | 0) == 2 | ($3_1 | 0) == 5) & $13_1;
         $5_1 = $5_1 + 8 | 0;
         $2_1 = $2_1 + 1 | 0;
         continue;
        }
        break;
       };
       $5_1 = 0;
       $3_1 = 0;
       label$36 : {
        if (($6_1 | 0) >= ($12_1 | 0)) {
         break label$36
        }
        $11_1 = HEAP32[$9_1 + 36 >> 2];
        $19_1 = $6_1 << 2;
        $15_1 = $11_1 + $19_1 | 0;
        $3_1 = HEAP32[$15_1 >> 2];
        $7_1 = HEAP32[HEAP32[$3_1 + 836 >> 2] + 208 >> 2];
        if (($7_1 | 0) <= -1) {
         $7_1 = HEAP32[HEAP32[$3_1 + 840 >> 2] + 208 >> 2]
        }
        $3_1 = 0;
        if (($7_1 | 0) != ($14_1 | 0)) {
         break label$36
        }
        $3_1 = $6_1 + 1 | 0;
        $3_1 = ($3_1 | 0) < ($12_1 | 0) ? $12_1 : $3_1;
        $20_1 = $3_1 - 1 | 0;
        $5_1 = ($11_1 + $19_1 | 0) + 4 | 0;
        $4_1 = $6_1;
        while (1) {
         label$40 : {
          if (($4_1 | 0) == ($20_1 | 0)) {
           $4_1 = $3_1;
           break label$40;
          }
          $11_1 = HEAP32[$5_1 >> 2];
          $7_1 = HEAP32[HEAP32[$11_1 + 836 >> 2] + 208 >> 2];
          if (($7_1 | 0) <= -1) {
           $7_1 = HEAP32[HEAP32[$11_1 + 840 >> 2] + 208 >> 2]
          }
          $4_1 = $4_1 + 1 | 0;
          $5_1 = $5_1 + 4 | 0;
          if (($7_1 | 0) == ($14_1 | 0)) {
           continue
          }
         }
         break;
        };
        $5_1 = $4_1 - $6_1 | 0;
        $3_1 = $15_1;
       }
       if (!($13_1 & 1)) {
        FUNCTION_TABLE[HEAP32[HEAP32[$16_1 >> 2] + 8 >> 2]]($16_1, HEAP32[$9_1 + 56 >> 2], HEAP32[$9_1 + 48 >> 2], $3_1, $5_1, $14_1)
       }
       HEAP32[$8_1 + 12 >> 2] = 0;
       $415($17_1, $8_1 + 12 | 0);
       $6_1 = $5_1 ? $4_1 : $6_1;
       continue;
      };
     }
     $662(HEAP32[$0_1 + 212 >> 2]);
     $2_1 = HEAP32[$0_1 + 216 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, $1_1, HEAP32[$0_1 + 72 >> 2]);
     global$0 = $8_1 + 16 | 0;
     return;
    }
    $2_1 = $3_1;
    continue;
   };
  } else {
   $6_1 = $655(HEAP32[$3_1 >> 2], $2_1);
   HEAP32[HEAP32[$3_1 >> 2] + $5_1 >> 2] = $6_1;
   $5_1 = $5_1 + 8 | 0;
   $2_1 = $2_1 + 1 | 0;
   continue;
  };
 }
 
 function $694($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  while (1) {
   $6_1 = HEAP32[$0_1 + 12 >> 2];
   $9_1 = $1_1;
   $10_1 = HEAP32[$6_1 + (($2_1 + $1_1 | 0) / 2 << 2) >> 2];
   $4_1 = $2_1;
   $5_1 = $1_1;
   while (1) {
    $7_1 = (($5_1 << 2) + $6_1 | 0) - 4 | 0;
    while (1) {
     $5_1 = $5_1 + 1 | 0;
     $7_1 = $7_1 + 4 | 0;
     $11_1 = HEAP32[$7_1 >> 2];
     if ($707($11_1, $10_1)) {
      continue
     }
     break;
    };
    $3_1 = $4_1 << 2;
    $1_1 = $5_1 - 1 | 0;
    while (1) {
     $4_1 = $4_1 - 1 | 0;
     $8_1 = $3_1 + $6_1 | 0;
     $12_1 = $3_1 - 4 | 0;
     $3_1 = $12_1;
     $8_1 = HEAP32[$8_1 >> 2];
     if ($707($10_1, $8_1)) {
      continue
     }
     break;
    };
    $3_1 = $4_1 + 1 | 0;
    if (($3_1 | 0) >= ($1_1 | 0)) {
     HEAP32[$7_1 >> 2] = $8_1;
     HEAP32[(HEAP32[$0_1 + 12 >> 2] + $12_1 | 0) + 4 >> 2] = $11_1;
     $3_1 = $4_1;
     $1_1 = $5_1;
    }
    if (($1_1 | 0) <= ($3_1 | 0)) {
     $6_1 = HEAP32[$0_1 + 12 >> 2];
     $4_1 = $3_1;
     $5_1 = $1_1;
     continue;
    }
    break;
   };
   if (($3_1 | 0) > ($9_1 | 0)) {
    $694($0_1, $9_1, $3_1)
   }
   if (($1_1 | 0) < ($2_1 | 0)) {
    continue
   }
   break;
  };
 }
 
 function $695($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0;
  while (1) {
   if (HEAP32[$0_1 + 248 >> 2] > ($6_1 | 0)) {
    $2_1 = HEAP32[HEAP32[$0_1 + 256 >> 2] + $7_1 >> 2];
    label$3 : {
     if (!$2_1) {
      break label$3
     }
     label$4 : {
      label$5 : {
       $4_1 = HEAP32[$2_1 + 220 >> 2];
       switch ($4_1 - 2 | 0) {
       case 0:
       case 2:
        break label$4;
       default:
        break label$5;
       };
      }
      label$6 : {
       $3_1 = HEAPF32[$2_1 + 372 >> 2];
       $5_1 = Math_fround($3_1 * $3_1);
       $3_1 = HEAPF32[$2_1 + 376 >> 2];
       $5_1 = Math_fround($5_1 + Math_fround($3_1 * $3_1));
       $3_1 = HEAPF32[$2_1 + 380 >> 2];
       $5_1 = Math_fround($5_1 + Math_fround($3_1 * $3_1));
       $3_1 = HEAPF32[$2_1 + 532 >> 2];
       if (!($5_1 < Math_fround($3_1 * $3_1))) {
        break label$6
       }
       $3_1 = HEAPF32[$2_1 + 388 >> 2];
       $5_1 = Math_fround($3_1 * $3_1);
       $3_1 = HEAPF32[$2_1 + 392 >> 2];
       $5_1 = Math_fround($5_1 + Math_fround($3_1 * $3_1));
       $3_1 = HEAPF32[$2_1 + 396 >> 2];
       $5_1 = Math_fround($5_1 + Math_fround($3_1 * $3_1));
       $3_1 = HEAPF32[$2_1 + 536 >> 2];
       if (!($5_1 < Math_fround($3_1 * $3_1))) {
        break label$6
       }
       HEAPF32[$2_1 + 224 >> 2] = HEAPF32[$2_1 + 224 >> 2] + $1_1;
       break label$4;
      }
      HEAP32[$2_1 + 224 >> 2] = 0;
      if (($4_1 & -2) == 4) {
       break label$4
      }
      $4_1 = 0;
      HEAP32[$2_1 + 220 >> 2] = 0;
     }
     if ($696($2_1)) {
      if (HEAPU8[$2_1 + 204 | 0] & 3) {
       if (($4_1 & -2) == 4) {
        break label$3
       }
       HEAP32[$2_1 + 220 >> 2] = 2;
       break label$3;
      }
      if (($4_1 | 0) == 1) {
       HEAP32[$2_1 + 220 >> 2] = 3;
       break label$3;
      }
      if (($4_1 | 0) != 2) {
       break label$3
      }
      HEAP32[$2_1 + 388 >> 2] = 0;
      HEAP32[$2_1 + 392 >> 2] = 0;
      HEAP32[$2_1 + 372 >> 2] = 0;
      HEAP32[$2_1 + 376 >> 2] = 0;
      $4_1 = $2_1 + 396 | 0;
      HEAP32[$4_1 >> 2] = 0;
      HEAP32[$4_1 + 4 >> 2] = 0;
      $4_1 = $2_1 + 380 | 0;
      HEAP32[$4_1 >> 2] = 0;
      HEAP32[$4_1 + 4 >> 2] = 0;
      HEAP32[$2_1 + 304 >> 2] = HEAP32[$2_1 + 304 >> 2] + 2;
      break label$3;
     }
     if (($4_1 & -2) == 4) {
      break label$3
     }
     HEAP32[$2_1 + 220 >> 2] = 1;
    }
    $7_1 = $7_1 + 4 | 0;
    $6_1 = $6_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $696($0_1) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[$0_1 + 220 >> 2];
  label$1 : {
   if (($1_1 | 0) == 4) {
    break label$1
   }
   if (HEAPU8[20724]) {
    break label$1
   }
   $2_1 = 1;
   if (($1_1 & -2) == 2) {
    break label$1
   }
   if (HEAPF32[$0_1 + 224 >> 2] > Math_fround(2.0)) {
    break label$1
   }
   $2_1 = 0;
  }
  return $2_1;
 }
 
 function $697($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = HEAP32[$0_1 + 84 >> 2];
  if ($2_1) {
   FUNCTION_TABLE[$2_1 | 0]($0_1, $1_1)
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 140 >> 2]]($0_1, $1_1);
  HEAP32[$0_1 + 32 >> 2] = 0;
  HEAPF32[$0_1 + 28 >> 2] = $1_1;
  (wasm2js_i32$0 = $0_1 + 48 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 164 >> 2]]($0_1, $1_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 44 >> 2]]($0_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 148 >> 2]]($0_1);
  HEAPF32[$0_1 + 104 >> 2] = $1_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 152 >> 2]]($0_1, $0_1 + 92 | 0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 144 >> 2]]($0_1, $1_1);
  $698($0_1, $1_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 156 >> 2]]($0_1, $1_1);
  $2_1 = HEAP32[$0_1 + 80 >> 2];
  if ($2_1) {
   FUNCTION_TABLE[$2_1 | 0]($0_1, $1_1)
  }
 }
 
 function $698($0_1, $1_1) {
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  while (1) {
   if (HEAP32[$0_1 + 296 >> 2] > ($2_1 | 0)) {
    $4_1 = HEAP32[HEAP32[$0_1 + 304 >> 2] + $3_1 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 8 >> 2]]($4_1, $0_1, $1_1);
    $3_1 = $3_1 + 4 | 0;
    $2_1 = $2_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $699($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = 0, $33_1 = 0, $34_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0);
  $2_1 = global$0 - 528 | 0;
  global$0 = $2_1;
  $700($0_1);
  label$1 : {
   $12_1 = HEAP32[$0_1 + 248 >> 2];
   if (($12_1 | 0) < 1) {
    break label$1
   }
   $32_1 = $0_1 + 320 | 0;
   $17_1 = HEAP32[$0_1 + 256 >> 2];
   $33_1 = $2_1 + 124 | 0;
   $18_1 = $2_1 + 92 | 0;
   $19_1 = $2_1 + 72 | 0;
   $20_1 = $2_1 + 24 | 0;
   $21_1 = $2_1 + 408 | 0;
   $22_1 = $2_1 + 288 | 0;
   $23_1 = $2_1 + 272 | 0;
   $24_1 = $2_1 + 256 | 0;
   $25 = $2_1 + 392 | 0;
   $26_1 = $2_1 + 376 | 0;
   $10_1 = $2_1 + 512 | 0;
   while (1) {
    if (!$12_1) {
     break label$1
    }
    $6_1 = HEAP32[$17_1 >> 2];
    HEAP32[$6_1 + 268 >> 2] = 1065353216;
    label$3 : {
     label$4 : {
      switch (HEAP32[$6_1 + 220 >> 2] - 2 | 0) {
      case 0:
      case 3:
       break label$3;
      default:
       break label$4;
      };
     }
     if (HEAPU8[$6_1 + 204 | 0] & 3) {
      break label$3
     }
     $563($6_1, $1_1, $2_1 + 464 | 0);
     if (!HEAPU8[$0_1 + 44 | 0]) {
      break label$3
     }
     $11_1 = HEAPF32[$2_1 + 512 >> 2];
     $8_1 = Math_fround($11_1 - HEAPF32[$6_1 + 52 >> 2]);
     $9_1 = Math_fround($8_1 * $8_1);
     $30_1 = HEAPF32[$2_1 + 516 >> 2];
     $8_1 = Math_fround($30_1 - HEAPF32[$6_1 + 56 >> 2]);
     $9_1 = Math_fround($9_1 + Math_fround($8_1 * $8_1));
     $31_1 = HEAPF32[$2_1 + 520 >> 2];
     $8_1 = Math_fround($31_1 - HEAPF32[$6_1 + 60 >> 2]);
     $9_1 = Math_fround($9_1 + Math_fround($8_1 * $8_1));
     $8_1 = HEAPF32[$6_1 + 276 >> 2];
     $8_1 = Math_fround($8_1 * $8_1);
     if ($8_1 == Math_fround(0.0)) {
      break label$3
     }
     if (!($8_1 < $9_1)) {
      break label$3
     }
     if (HEAP32[HEAP32[$6_1 + 192 >> 2] + 4 >> 2] > 19) {
      break label$3
     }
     HEAP32[5184] = HEAP32[5184] + 1;
     $3_1 = HEAP32[$0_1 + 68 >> 2];
     $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 36 >> 2]]($3_1) | 0;
     $27_1 = $6_1 + 52 | 0;
     $4_1 = $27_1;
     $3_1 = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$26_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$26_1 + 4 >> 2] = $3_1;
     $28_1 = $4_1 + 8 | 0;
     $4_1 = $28_1;
     $3_1 = HEAP32[$4_1 + 4 >> 2];
     $5_1 = $26_1 + 8 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $3_1;
     $3_1 = HEAP32[$10_1 + 4 >> 2];
     HEAP32[$25 >> 2] = HEAP32[$10_1 >> 2];
     HEAP32[$25 + 4 >> 2] = $3_1;
     $29_1 = $10_1 + 8 | 0;
     $4_1 = $29_1;
     $3_1 = HEAP32[$4_1 + 4 >> 2];
     $5_1 = $25 + 8 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $3_1;
     HEAP32[$2_1 + 364 >> 2] = 1065353216;
     HEAP32[$2_1 + 360 >> 2] = 18684;
     HEAP32[$2_1 + 440 >> 2] = 0;
     HEAP32[$2_1 + 456 >> 2] = HEAP32[$0_1 + 24 >> 2];
     HEAP32[$2_1 + 452 >> 2] = $7_1;
     HEAP32[$2_1 + 444 >> 2] = $6_1;
     $373($2_1 + 304 | 0, HEAPF32[$6_1 + 272 >> 2]);
     HEAPF32[$2_1 + 448 >> 2] = HEAPF32[$0_1 + 56 >> 2];
     $4_1 = HEAP32[$6_1 + 188 >> 2];
     $3_1 = HEAP32[$4_1 + 8 >> 2];
     HEAP32[$2_1 + 368 >> 2] = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$2_1 + 372 >> 2] = $3_1;
     $3_1 = HEAP32[$29_1 + 4 >> 2];
     $4_1 = $22_1 + 8 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$29_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $3_1;
     $3_1 = HEAP32[$10_1 + 4 >> 2];
     HEAP32[$22_1 >> 2] = HEAP32[$10_1 >> 2];
     HEAP32[$22_1 + 4 >> 2] = $3_1;
     $3_1 = $6_1 + 4 | 0;
     $5_1 = $3_1 + 8 | 0;
     $4_1 = HEAP32[$5_1 + 4 >> 2];
     $7_1 = $2_1 + 248 | 0;
     HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $4_1;
     $5_1 = $6_1 + 20 | 0;
     $4_1 = HEAP32[$5_1 + 4 >> 2];
     HEAP32[$24_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$24_1 + 4 >> 2] = $4_1;
     $5_1 = $6_1 + 28 | 0;
     $4_1 = HEAP32[$5_1 + 4 >> 2];
     $7_1 = $24_1 + 8 | 0;
     HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $4_1;
     $5_1 = $6_1 + 36 | 0;
     $4_1 = HEAP32[$5_1 + 4 >> 2];
     HEAP32[$23_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$23_1 + 4 >> 2] = $4_1;
     $5_1 = $6_1 + 44 | 0;
     $4_1 = HEAP32[$5_1 + 4 >> 2];
     $7_1 = $23_1 + 8 | 0;
     HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $4_1;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 240 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 244 >> 2] = $4_1;
     $647($0_1, $2_1 + 304 | 0, $3_1, $2_1 + 240 | 0, $2_1 + 360 | 0, Math_fround(0.0));
     $13_1 = HEAPF32[$2_1 + 364 >> 2];
     if (!($13_1 < Math_fround(1.0))) {
      break label$3
     }
     $14_1 = HEAPF32[$6_1 + 52 >> 2];
     $15_1 = HEAPF32[$6_1 + 56 >> 2];
     $34_1 = HEAPF32[$6_1 + 60 >> 2];
     $35_1 = HEAPF32[$2_1 + 416 >> 2];
     $36_1 = HEAPF32[$2_1 + 412 >> 2];
     $37_1 = HEAPF32[$2_1 + 408 >> 2];
     $3_1 = HEAP32[$0_1 + 24 >> 2];
     $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1, $6_1, HEAP32[$2_1 + 440 >> 2]) | 0;
     HEAP32[$2_1 + 236 >> 2] = $7_1;
     $375($32_1, $2_1 + 236 | 0);
     $16_1 = HEAPF32[$6_1 + 52 >> 2];
     $9_1 = HEAPF32[$6_1 + 56 >> 2];
     $8_1 = HEAPF32[$6_1 + 60 >> 2];
     $379($2_1 + 8 | 0, HEAP32[$2_1 + 440 >> 2] + 4 | 0);
     $11_1 = Math_fround($13_1 * Math_fround($11_1 - $14_1));
     $14_1 = Math_fround($16_1 + $11_1);
     $15_1 = Math_fround($13_1 * Math_fround($30_1 - $15_1));
     $16_1 = Math_fround($9_1 + $15_1);
     $9_1 = Math_fround($13_1 * Math_fround($31_1 - $34_1));
     $8_1 = Math_fround($8_1 + $9_1);
     $78($2_1 + 216 | 0, $2_1 + 8 | 0, $14_1, $16_1, $8_1);
     $3_1 = $2_1 + 16 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $3_1 = HEAP32[$2_1 + 220 >> 2];
     HEAP32[$20_1 >> 2] = HEAP32[$2_1 + 216 >> 2];
     HEAP32[$20_1 + 4 >> 2] = $3_1;
     $4_1 = $2_1 + 224 | 0;
     $3_1 = HEAP32[$4_1 + 4 >> 2];
     $5_1 = $20_1 + 8 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $3_1;
     HEAP32[$18_1 >> 2] = 0;
     HEAP32[$18_1 + 4 >> 2] = 0;
     $3_1 = $18_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $3_1 = HEAP32[$21_1 + 4 >> 2];
     HEAP32[$19_1 >> 2] = HEAP32[$21_1 >> 2];
     HEAP32[$19_1 + 4 >> 2] = $3_1;
     $4_1 = $21_1 + 8 | 0;
     $3_1 = HEAP32[$4_1 + 4 >> 2];
     $5_1 = $19_1 + 8 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $3_1;
     HEAP32[$2_1 + 8 >> 2] = 0;
     HEAP32[$2_1 + 12 >> 2] = 0;
     HEAPF32[$2_1 + 88 >> 2] = Math_fround(Math_fround($15_1 * Math_fround(-$36_1)) - Math_fround($11_1 * $37_1)) - Math_fround($9_1 * $35_1);
     $1($33_1, 0, 52);
     $7_1 = $7_1 + Math_imul($336($7_1, $2_1 + 8 | 0), 208) | 0;
     HEAP32[$7_1 + 100 >> 2] = 0;
     HEAPF32[$7_1 + 88 >> 2] = Math_min(Math_fround(Math_max(Math_fround(HEAPF32[$6_1 + 228 >> 2] * HEAPF32[HEAP32[$2_1 + 440 >> 2] + 228 >> 2]), Math_fround(-10.0))), Math_fround(10.0));
     $3_1 = HEAP32[$28_1 + 4 >> 2];
     $4_1 = $7_1 + 60 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$28_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $3_1;
     $5_1 = HEAP32[$27_1 + 4 >> 2];
     $4_1 = HEAP32[$27_1 >> 2];
     HEAP32[$7_1 + 48 >> 2] = 0;
     HEAPF32[$7_1 + 44 >> 2] = $8_1;
     HEAPF32[$7_1 + 40 >> 2] = $16_1;
     $3_1 = $7_1 + 52 | 0;
     HEAP32[$3_1 >> 2] = $4_1;
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     HEAPF32[$7_1 + 36 >> 2] = $14_1;
    }
    $12_1 = $12_1 - 1 | 0;
    $17_1 = $17_1 + 4 | 0;
    continue;
   };
  }
  global$0 = $2_1 + 528 | 0;
 }
 
 function $700($0_1) {
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  while (1) {
   if (HEAP32[$0_1 + 324 >> 2] <= ($1_1 | 0)) {
    $57($0_1 + 320 | 0)
   } else {
    $2_1 = HEAP32[$0_1 + 24 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 16 >> 2]]($2_1, HEAP32[HEAP32[$0_1 + 332 >> 2] + $3_1 >> 2]);
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $701($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  while (1) {
   if (($6_1 | 0) < HEAP32[$0_1 + 8 >> 2]) {
    $2_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] + $7_1 >> 2];
    label$3 : {
     if (!$2_1) {
      break label$3
     }
     if (!(HEAP32[$2_1 + 252 >> 2] & 2)) {
      break label$3
     }
     if (HEAP32[$2_1 + 220 >> 2] == 2) {
      break label$3
     }
     if (!(HEAPU8[$2_1 + 204 | 0] & 2)) {
      break label$3
     }
     if ($1_1 == Math_fround(0.0)) {
      break label$3
     }
     $3_1 = HEAP32[$2_1 + 540 >> 2];
     if ($3_1) {
      FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $2_1 + 4 | 0)
     }
     $3_1 = $2_1 + 372 | 0;
     $4_1 = $2_1 + 388 | 0;
     $566($2_1 + 68 | 0, $2_1 + 4 | 0, $1_1, $3_1, $4_1);
     $8_1 = $2_1 + 380 | 0;
     $9_1 = HEAP32[$8_1 + 4 >> 2];
     $5_1 = $2_1 + 140 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $9_1;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 132 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 136 >> 2] = $5_1;
     $3_1 = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$2_1 + 148 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$2_1 + 152 >> 2] = $3_1;
     $4_1 = $2_1 + 396 | 0;
     $5_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 156 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $3_1 = HEAP32[$2_1 + 8 >> 2];
     HEAP32[$2_1 + 68 >> 2] = HEAP32[$2_1 + 4 >> 2];
     HEAP32[$2_1 + 72 >> 2] = $3_1;
     $4_1 = $2_1 + 12 | 0;
     $5_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 76 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $4_1 = $2_1 + 20 | 0;
     $5_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 84 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $4_1 = $2_1 + 28 | 0;
     $5_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 92 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $4_1 = $2_1 + 44 | 0;
     $5_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 108 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $4_1 = $2_1 + 36 | 0;
     $5_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 100 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $4_1 = $2_1 + 60 | 0;
     $5_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 124 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $3_1 = $2_1 + 116 | 0;
     $2_1 = $2_1 + 52 | 0;
     $4_1 = HEAP32[$2_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $4_1;
    }
    $7_1 = $7_1 + 4 | 0;
    $6_1 = $6_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $702($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = 0, $24_1 = Math_fround(0);
  $2_1 = global$0 - 224 | 0;
  global$0 = $2_1;
  $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
  $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 56 >> 2]]($3_1) | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 56 >> 2]]($4_1) | 0;
  $13_1 = HEAPF32[$1_1 + 40 >> 2];
  label$1 : {
   if ($13_1 <= Math_fround(0.0)) {
    break label$1
   }
   $5_1 = $3_1 & 2048;
   $7_1 = $4_1 & 4096;
   label$2 : {
    switch (HEAP32[$1_1 + 4 >> 2] - 3 | 0) {
    case 0:
     $3_1 = $2_1 + 172 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $3_1 = $2_1 + 184 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 180 >> 2] = 1065353216;
     $3_1 = $2_1 + 192 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $3_1 = $2_1 + 204 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 200 >> 2] = 1065353216;
     $3_1 = $2_1 + 212 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 220 >> 2] = 0;
     HEAP32[$2_1 + 164 >> 2] = 0;
     HEAP32[$2_1 + 168 >> 2] = 0;
     HEAP32[$2_1 + 160 >> 2] = 1065353216;
     $78($2_1 + 96 | 0, HEAP32[$1_1 + 28 >> 2] + 4 | 0, HEAPF32[$1_1 + 300 >> 2], HEAPF32[$1_1 + 304 >> 2], HEAPF32[$1_1 + 308 >> 2]);
     $6_1 = HEAP32[$2_1 + 108 >> 2];
     $3_1 = $2_1 + 216 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 + 104 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $4_1 = HEAP32[$2_1 + 100 >> 2];
     HEAP32[$2_1 + 208 >> 2] = HEAP32[$2_1 + 96 >> 2];
     HEAP32[$2_1 + 212 >> 2] = $4_1;
     $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 64 >> 2]]($4_1, $2_1 + 160 | 0, $13_1);
     $78($2_1 + 96 | 0, HEAP32[$1_1 + 32 >> 2] + 4 | 0, HEAPF32[$1_1 + 316 >> 2], HEAPF32[$1_1 + 320 >> 2], HEAPF32[$1_1 + 324 >> 2]);
     $1_1 = HEAP32[$2_1 + 108 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 + 104 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $1_1;
     $1_1 = HEAP32[$2_1 + 100 >> 2];
     HEAP32[$2_1 + 208 >> 2] = HEAP32[$2_1 + 96 >> 2];
     HEAP32[$2_1 + 212 >> 2] = $1_1;
     if (!$5_1) {
      break label$1
     }
     $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 64 >> 2]]($0_1, $2_1 + 160 | 0, $13_1);
     break label$1;
    case 1:
     $380($2_1 + 160 | 0, HEAP32[$1_1 + 28 >> 2] + 4 | 0, $1_1 + 552 | 0);
     label$8 : {
      if ($5_1) {
       $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 64 >> 2]]($3_1, $2_1 + 160 | 0, $13_1);
       $380($2_1 + 96 | 0, HEAP32[$1_1 + 32 >> 2] + 4 | 0, $1_1 + 616 | 0);
       $4_1 = $2_1 + 104 | 0;
       $6_1 = HEAP32[$4_1 + 4 >> 2];
       $3_1 = $2_1 + 168 | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $6_1;
       $4_1 = $2_1 + 120 | 0;
       $6_1 = HEAP32[$4_1 + 4 >> 2];
       $3_1 = $2_1 + 184 | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $6_1;
       $4_1 = $2_1 + 136 | 0;
       $6_1 = HEAP32[$4_1 + 4 >> 2];
       $3_1 = $2_1 + 200 | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $6_1;
       $4_1 = $2_1 + 152 | 0;
       $6_1 = HEAP32[$4_1 + 4 >> 2];
       $3_1 = $2_1 + 216 | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $6_1;
       $3_1 = HEAP32[$2_1 + 100 >> 2];
       HEAP32[$2_1 + 160 >> 2] = HEAP32[$2_1 + 96 >> 2];
       HEAP32[$2_1 + 164 >> 2] = $3_1;
       $3_1 = HEAP32[$2_1 + 116 >> 2];
       HEAP32[$2_1 + 176 >> 2] = HEAP32[$2_1 + 112 >> 2];
       HEAP32[$2_1 + 180 >> 2] = $3_1;
       $3_1 = HEAP32[$2_1 + 132 >> 2];
       HEAP32[$2_1 + 192 >> 2] = HEAP32[$2_1 + 128 >> 2];
       HEAP32[$2_1 + 196 >> 2] = $3_1;
       $3_1 = HEAP32[$2_1 + 148 >> 2];
       HEAP32[$2_1 + 208 >> 2] = HEAP32[$2_1 + 144 >> 2];
       HEAP32[$2_1 + 212 >> 2] = $3_1;
       $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 64 >> 2]]($3_1, $2_1 + 160 | 0, $13_1);
       break label$8;
      }
      $380($2_1 + 96 | 0, HEAP32[$1_1 + 32 >> 2] + 4 | 0, $1_1 + 616 | 0);
      $4_1 = $2_1 + 104 | 0;
      $6_1 = HEAP32[$4_1 + 4 >> 2];
      $3_1 = $2_1 + 168 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $6_1;
      $4_1 = $2_1 + 120 | 0;
      $6_1 = HEAP32[$4_1 + 4 >> 2];
      $3_1 = $2_1 + 184 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $6_1;
      $4_1 = $2_1 + 136 | 0;
      $6_1 = HEAP32[$4_1 + 4 >> 2];
      $3_1 = $2_1 + 200 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $6_1;
      $4_1 = $2_1 + 152 | 0;
      $6_1 = HEAP32[$4_1 + 4 >> 2];
      $3_1 = $2_1 + 216 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $6_1;
      $3_1 = HEAP32[$2_1 + 100 >> 2];
      HEAP32[$2_1 + 160 >> 2] = HEAP32[$2_1 + 96 >> 2];
      HEAP32[$2_1 + 164 >> 2] = $3_1;
      $3_1 = HEAP32[$2_1 + 116 >> 2];
      HEAP32[$2_1 + 176 >> 2] = HEAP32[$2_1 + 112 >> 2];
      HEAP32[$2_1 + 180 >> 2] = $3_1;
      $3_1 = HEAP32[$2_1 + 132 >> 2];
      HEAP32[$2_1 + 192 >> 2] = HEAP32[$2_1 + 128 >> 2];
      HEAP32[$2_1 + 196 >> 2] = $3_1;
      $3_1 = HEAP32[$2_1 + 148 >> 2];
      HEAP32[$2_1 + 208 >> 2] = HEAP32[$2_1 + 144 >> 2];
      HEAP32[$2_1 + 212 >> 2] = $3_1;
     }
     $10_1 = HEAPF32[$1_1 + 688 >> 2];
     $19_1 = HEAPF32[$1_1 + 692 >> 2];
     $11_1 = $52(Math_fround($10_1 - $19_1));
     label$10 : {
      if ($11_1 < Math_fround(-3.1415927410125732)) {
       $11_1 = Math_fround($11_1 + Math_fround(6.2831854820251465));
       break label$10;
      }
      if (!($11_1 > Math_fround(3.1415927410125732))) {
       break label$10
      }
      $11_1 = Math_fround($11_1 + Math_fround(-6.2831854820251465));
     }
     $10_1 = $52(Math_fround($10_1 + $19_1));
     label$12 : {
      if ($10_1 < Math_fround(-3.1415927410125732)) {
       $10_1 = Math_fround($10_1 + Math_fround(6.2831854820251465));
       break label$12;
      }
      if (!($10_1 > Math_fround(3.1415927410125732))) {
       break label$12
      }
      $10_1 = Math_fround($10_1 + Math_fround(-6.2831854820251465));
     }
     if ($10_1 == $11_1) {
      break label$1
     }
     if (!$7_1) {
      break label$1
     }
     HEAPF32[$2_1 + 96 >> 2] = HEAPF32[$2_1 + 168 >> 2];
     HEAP32[$2_1 + 108 >> 2] = 0;
     HEAPF32[$2_1 + 100 >> 2] = HEAPF32[$2_1 + 184 >> 2];
     HEAPF32[$2_1 + 104 >> 2] = HEAPF32[$2_1 + 200 >> 2];
     HEAPF32[$2_1 + 80 >> 2] = HEAPF32[$2_1 + 160 >> 2];
     HEAPF32[$2_1 + 84 >> 2] = HEAPF32[$2_1 + 176 >> 2];
     HEAP32[$2_1 + 92 >> 2] = 0;
     HEAPF32[$2_1 + 88 >> 2] = HEAPF32[$2_1 + 192 >> 2];
     $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     $1_1 = $2_1 + 72 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 64 >> 2] = 0;
     HEAP32[$2_1 + 68 >> 2] = 0;
     $1_1 = $19_1 > Math_fround(0.0);
     FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 68 >> 2]]($0_1, $2_1 + 208 | 0, $2_1 + 96 | 0, $2_1 + 80 | 0, $13_1, $13_1, $1_1 ? $11_1 : Math_fround(0.0), $1_1 ? $10_1 : Math_fround(6.2831854820251465), $2_1 - -64 | 0, $1_1, Math_fround(10.0));
     break label$1;
    case 2:
     $16_1 = $1_1 + 300 | 0;
     $380($2_1 + 160 | 0, HEAP32[$1_1 + 28 >> 2] + 4 | 0, $16_1);
     label$14 : {
      if ($5_1) {
       $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 64 >> 2]]($3_1, $2_1 + 160 | 0, $13_1);
       $380($2_1 + 96 | 0, HEAP32[$1_1 + 32 >> 2] + 4 | 0, $1_1 + 364 | 0);
       $4_1 = $2_1 + 104 | 0;
       $6_1 = HEAP32[$4_1 + 4 >> 2];
       $3_1 = $2_1 + 168 | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $6_1;
       $4_1 = $2_1 + 120 | 0;
       $6_1 = HEAP32[$4_1 + 4 >> 2];
       $3_1 = $2_1 + 184 | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $6_1;
       $4_1 = $2_1 + 136 | 0;
       $6_1 = HEAP32[$4_1 + 4 >> 2];
       $3_1 = $2_1 + 200 | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $6_1;
       $4_1 = $2_1 + 152 | 0;
       $6_1 = HEAP32[$4_1 + 4 >> 2];
       $3_1 = $2_1 + 216 | 0;
       HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
       HEAP32[$3_1 + 4 >> 2] = $6_1;
       $3_1 = HEAP32[$2_1 + 100 >> 2];
       HEAP32[$2_1 + 160 >> 2] = HEAP32[$2_1 + 96 >> 2];
       HEAP32[$2_1 + 164 >> 2] = $3_1;
       $3_1 = HEAP32[$2_1 + 116 >> 2];
       HEAP32[$2_1 + 176 >> 2] = HEAP32[$2_1 + 112 >> 2];
       HEAP32[$2_1 + 180 >> 2] = $3_1;
       $3_1 = HEAP32[$2_1 + 132 >> 2];
       HEAP32[$2_1 + 192 >> 2] = HEAP32[$2_1 + 128 >> 2];
       HEAP32[$2_1 + 196 >> 2] = $3_1;
       $3_1 = HEAP32[$2_1 + 148 >> 2];
       HEAP32[$2_1 + 208 >> 2] = HEAP32[$2_1 + 144 >> 2];
       HEAP32[$2_1 + 212 >> 2] = $3_1;
       $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 64 >> 2]]($3_1, $2_1 + 160 | 0, $13_1);
       break label$14;
      }
      $380($2_1 + 96 | 0, HEAP32[$1_1 + 32 >> 2] + 4 | 0, $1_1 + 364 | 0);
      $4_1 = $2_1 + 104 | 0;
      $6_1 = HEAP32[$4_1 + 4 >> 2];
      $3_1 = $2_1 + 168 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $6_1;
      $4_1 = $2_1 + 120 | 0;
      $6_1 = HEAP32[$4_1 + 4 >> 2];
      $3_1 = $2_1 + 184 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $6_1;
      $4_1 = $2_1 + 136 | 0;
      $6_1 = HEAP32[$4_1 + 4 >> 2];
      $3_1 = $2_1 + 200 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $6_1;
      $4_1 = $2_1 + 152 | 0;
      $6_1 = HEAP32[$4_1 + 4 >> 2];
      $3_1 = $2_1 + 216 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $6_1;
      $3_1 = HEAP32[$2_1 + 100 >> 2];
      HEAP32[$2_1 + 160 >> 2] = HEAP32[$2_1 + 96 >> 2];
      HEAP32[$2_1 + 164 >> 2] = $3_1;
      $3_1 = HEAP32[$2_1 + 116 >> 2];
      HEAP32[$2_1 + 176 >> 2] = HEAP32[$2_1 + 112 >> 2];
      HEAP32[$2_1 + 180 >> 2] = $3_1;
      $3_1 = HEAP32[$2_1 + 132 >> 2];
      HEAP32[$2_1 + 192 >> 2] = HEAP32[$2_1 + 128 >> 2];
      HEAP32[$2_1 + 196 >> 2] = $3_1;
      $3_1 = HEAP32[$2_1 + 148 >> 2];
      HEAP32[$2_1 + 208 >> 2] = HEAP32[$2_1 + 144 >> 2];
      HEAP32[$2_1 + 212 >> 2] = $3_1;
     }
     if (!$7_1) {
      break label$1
     }
     $658($2_1 + 80 | 0, $1_1, Math_fround(6.0868353843688965), $13_1);
     $78($2_1 + 80 | 0, $2_1 + 160 | 0, HEAPF32[$2_1 + 80 >> 2], HEAPF32[$2_1 + 84 >> 2], HEAPF32[$2_1 + 88 >> 2]);
     $3_1 = $2_1 + 208 | 0;
     $4_1 = 0;
     label$16 : {
      while (1) {
       label$18 : {
        if (($4_1 | 0) == 32) {
         $11_1 = HEAPF32[$1_1 + 512 >> 2];
         $10_1 = HEAPF32[$1_1 + 452 >> 2];
         $4_1 = HEAP32[$1_1 + 32 >> 2];
         if (!(HEAPF32[$4_1 + 404 >> 2] > Math_fround(0.0))) {
          break label$18
         }
         $380($2_1 + 96 | 0, $4_1 + 4 | 0, $1_1 + 364 | 0);
         break label$16;
        }
        $658($2_1 + 96 | 0, $1_1, Math_fround(Math_fround(Math_fround($4_1 | 0) * Math_fround(6.283185005187988)) * Math_fround(.03125)), $13_1);
        $6_1 = $2_1 + 104 | 0;
        $78($2_1 - -64 | 0, $2_1 + 160 | 0, HEAPF32[$2_1 + 96 >> 2], HEAPF32[$2_1 + 100 >> 2], HEAPF32[$6_1 >> 2]);
        $5_1 = $2_1 + 72 | 0;
        $17_1 = HEAP32[$5_1 + 4 >> 2];
        HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
        HEAP32[$6_1 + 4 >> 2] = $17_1;
        $12_1 = HEAP32[$2_1 + 68 >> 2];
        HEAP32[$2_1 + 96 >> 2] = HEAP32[$2_1 + 64 >> 2];
        HEAP32[$2_1 + 100 >> 2] = $12_1;
        $12_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
        HEAP32[$5_1 >> 2] = 0;
        HEAP32[$5_1 + 4 >> 2] = 0;
        HEAP32[$2_1 + 64 >> 2] = 0;
        HEAP32[$2_1 + 68 >> 2] = 0;
        FUNCTION_TABLE[HEAP32[HEAP32[$12_1 >> 2] + 16 >> 2]]($12_1, $2_1 + 80 | 0, $2_1 + 96 | 0, $2_1 - -64 | 0);
        if (!($4_1 & 3)) {
         $12_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
         HEAP32[$5_1 >> 2] = 0;
         HEAP32[$5_1 + 4 >> 2] = 0;
         HEAP32[$2_1 + 64 >> 2] = 0;
         HEAP32[$2_1 + 68 >> 2] = 0;
         FUNCTION_TABLE[HEAP32[HEAP32[$12_1 >> 2] + 16 >> 2]]($12_1, $3_1, $2_1 + 96 | 0, $2_1 - -64 | 0);
        }
        $12_1 = HEAP32[$6_1 + 4 >> 2];
        $5_1 = $2_1 + 88 | 0;
        HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
        HEAP32[$5_1 + 4 >> 2] = $12_1;
        $6_1 = HEAP32[$2_1 + 100 >> 2];
        HEAP32[$2_1 + 80 >> 2] = HEAP32[$2_1 + 96 >> 2];
        HEAP32[$2_1 + 84 >> 2] = $6_1;
        $4_1 = $4_1 + 1 | 0;
        continue;
       }
       break;
      };
      $380($2_1 + 96 | 0, HEAP32[$1_1 + 28 >> 2] + 4 | 0, $16_1);
     }
     $4_1 = $2_1 + 104 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $1_1 = $2_1 + 168 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $6_1;
     $4_1 = $2_1 + 120 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $1_1 = $2_1 + 184 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $6_1;
     $4_1 = $2_1 + 136 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $1_1 = $2_1 + 200 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $6_1;
     $1_1 = HEAP32[$2_1 + 148 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$2_1 + 144 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $1_1;
     $4_1 = $2_1 + 152 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $1_1 = $3_1 + 8 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $6_1;
     $1_1 = HEAP32[$2_1 + 100 >> 2];
     HEAP32[$2_1 + 160 >> 2] = HEAP32[$2_1 + 96 >> 2];
     HEAP32[$2_1 + 164 >> 2] = $1_1;
     $1_1 = HEAP32[$2_1 + 116 >> 2];
     HEAP32[$2_1 + 176 >> 2] = HEAP32[$2_1 + 112 >> 2];
     HEAP32[$2_1 + 180 >> 2] = $1_1;
     $1_1 = HEAP32[$2_1 + 132 >> 2];
     HEAP32[$2_1 + 192 >> 2] = HEAP32[$2_1 + 128 >> 2];
     HEAP32[$2_1 + 196 >> 2] = $1_1;
     $4_1 = $3_1 + 8 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $1_1 = $2_1 + 104 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $6_1;
     $1_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 96 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 100 >> 2] = $1_1;
     HEAPF32[$2_1 + 64 >> 2] = HEAPF32[$2_1 + 160 >> 2];
     HEAPF32[$2_1 + 68 >> 2] = HEAPF32[$2_1 + 176 >> 2];
     HEAP32[$2_1 + 76 >> 2] = 0;
     HEAPF32[$2_1 + 72 >> 2] = HEAPF32[$2_1 + 192 >> 2];
     HEAPF32[$2_1 + 48 >> 2] = HEAPF32[$2_1 + 164 >> 2];
     HEAPF32[$2_1 + 52 >> 2] = HEAPF32[$2_1 + 180 >> 2];
     HEAP32[$2_1 + 60 >> 2] = 0;
     HEAPF32[$2_1 + 56 >> 2] = HEAPF32[$2_1 + 196 >> 2];
     $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     $1_1 = $2_1 + 40 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 32 >> 2] = 0;
     HEAP32[$2_1 + 36 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 68 >> 2]]($0_1, $2_1 + 96 | 0, $2_1 - -64 | 0, $2_1 + 48 | 0, $13_1, $13_1, Math_fround(Math_fround(-$11_1) - $10_1), Math_fround($10_1 - $11_1), $2_1 + 32 | 0, 1, Math_fround(10.0));
     break label$1;
    case 3:
    case 6:
     $4_1 = $1_1 + 1072 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $8_1 = $2_1 + 168 | 0;
     $3_1 = $8_1;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $4_1 = $1_1 + 1088 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 184 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $4_1 = $1_1 + 1104 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 200 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $4_1 = $1_1 + 1120 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 216 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $12_1 = $1_1 + 1064 | 0;
     $3_1 = $12_1;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 160 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 164 >> 2] = $4_1;
     $16_1 = $1_1 + 1080 | 0;
     $3_1 = $16_1;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 176 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 180 >> 2] = $4_1;
     $17_1 = $1_1 + 1096 | 0;
     $3_1 = $17_1;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 192 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 196 >> 2] = $4_1;
     $18_1 = $1_1 + 1112 | 0;
     $3_1 = $18_1;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 208 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 212 >> 2] = $4_1;
     $3_1 = $2_1 + 208 | 0;
     $4_1 = $2_1 + 192 | 0;
     $6_1 = $2_1 + 176 | 0;
     if ($5_1) {
      $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 64 >> 2]]($5_1, $2_1 + 160 | 0, $13_1);
      $9_1 = $1_1 + 1184 | 0;
      $14_1 = HEAP32[$9_1 + 4 >> 2];
      $5_1 = $3_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $14_1;
      $5_1 = $1_1 + 1176 | 0;
      $9_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $9_1;
      $5_1 = $1_1 + 1144 | 0;
      $9_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $9_1;
      $9_1 = $1_1 + 1152 | 0;
      $14_1 = HEAP32[$9_1 + 4 >> 2];
      $5_1 = $6_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $14_1;
      $5_1 = $1_1 + 1160 | 0;
      $9_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $9_1;
      $9_1 = $1_1 + 1168 | 0;
      $14_1 = HEAP32[$9_1 + 4 >> 2];
      $5_1 = $4_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $14_1;
      $5_1 = $1_1 + 1136 | 0;
      $9_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$8_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$8_1 + 4 >> 2] = $9_1;
      $5_1 = $1_1 + 1128 | 0;
      $8_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$2_1 + 160 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$2_1 + 164 >> 2] = $8_1;
      $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 64 >> 2]]($5_1, $2_1 + 160 | 0, $13_1);
     }
     if (!$7_1) {
      break label$1
     }
     $5_1 = HEAP32[$16_1 + 4 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$16_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$17_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$17_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$18_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$18_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $8_1 = $12_1 + 8 | 0;
     $9_1 = HEAP32[$8_1 + 4 >> 2];
     $7_1 = $2_1 + 168 | 0;
     $5_1 = $7_1;
     HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $9_1;
     $9_1 = $16_1 + 8 | 0;
     $14_1 = HEAP32[$9_1 + 4 >> 2];
     $8_1 = $6_1 + 8 | 0;
     $5_1 = $8_1;
     HEAP32[$5_1 >> 2] = HEAP32[$9_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $14_1;
     $14_1 = $17_1 + 8 | 0;
     $15_1 = HEAP32[$14_1 + 4 >> 2];
     $9_1 = $4_1 + 8 | 0;
     $5_1 = $9_1;
     HEAP32[$5_1 >> 2] = HEAP32[$14_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $15_1;
     $15_1 = $18_1 + 8 | 0;
     $23_1 = HEAP32[$15_1 + 4 >> 2];
     $14_1 = $3_1 + 8 | 0;
     $5_1 = $14_1;
     HEAP32[$5_1 >> 2] = HEAP32[$15_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $23_1;
     $5_1 = HEAP32[$12_1 + 4 >> 2];
     HEAP32[$2_1 + 160 >> 2] = HEAP32[$12_1 >> 2];
     HEAP32[$2_1 + 164 >> 2] = $5_1;
     HEAPF32[$2_1 + 96 >> 2] = HEAPF32[$7_1 >> 2];
     HEAPF32[$2_1 + 100 >> 2] = HEAPF32[$2_1 + 184 >> 2];
     HEAP32[$2_1 + 108 >> 2] = 0;
     HEAPF32[$2_1 + 104 >> 2] = HEAPF32[$2_1 + 200 >> 2];
     HEAPF32[$2_1 + 80 >> 2] = HEAPF32[$2_1 + 160 >> 2];
     HEAPF32[$2_1 + 84 >> 2] = HEAPF32[$2_1 + 176 >> 2];
     HEAP32[$2_1 + 92 >> 2] = 0;
     HEAPF32[$2_1 + 88 >> 2] = HEAPF32[$2_1 + 192 >> 2];
     $11_1 = HEAPF32[$1_1 + 932 >> 2];
     $10_1 = HEAPF32[$1_1 + 936 >> 2];
     $19_1 = HEAPF32[$1_1 + 996 >> 2];
     $22_1 = HEAPF32[$1_1 + 1e3 >> 2];
     $15_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     $5_1 = $2_1 + 72 | 0;
     HEAP32[$5_1 >> 2] = 0;
     HEAP32[$5_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 64 >> 2] = 0;
     HEAP32[$2_1 + 68 >> 2] = 0;
     $5_1 = $1_1 + 1176 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$15_1 >> 2] + 72 >> 2]]($15_1, $5_1, $2_1 + 96 | 0, $2_1 + 80 | 0, Math_fround($13_1 * Math_fround(.8999999761581421)), $11_1, $10_1, $19_1, $22_1, $2_1 - -64 | 0, Math_fround(10.0), 1);
     HEAP32[$2_1 + 92 >> 2] = 0;
     $22_1 = HEAPF32[$2_1 + 196 >> 2];
     HEAPF32[$2_1 + 88 >> 2] = $22_1;
     $11_1 = HEAPF32[$2_1 + 180 >> 2];
     HEAPF32[$2_1 + 84 >> 2] = $11_1;
     $10_1 = HEAPF32[$2_1 + 164 >> 2];
     HEAPF32[$2_1 + 80 >> 2] = $10_1;
     $20_1 = HEAPF32[$1_1 + 1196 >> 2];
     $21_1 = HEAPF32[$1_1 + 1200 >> 2];
     $15_1 = $1_1 + 1136 | 0;
     $23_1 = HEAP32[$15_1 + 4 >> 2];
     HEAP32[$7_1 >> 2] = HEAP32[$15_1 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $23_1;
     $7_1 = $1_1 + 1144 | 0;
     $15_1 = HEAP32[$7_1 + 4 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $15_1;
     $7_1 = $1_1 + 1152 | 0;
     $15_1 = HEAP32[$7_1 + 4 >> 2];
     HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $15_1;
     $7_1 = $1_1 + 1160 | 0;
     $8_1 = HEAP32[$7_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $8_1;
     $7_1 = $1_1 + 1168 | 0;
     $8_1 = HEAP32[$7_1 + 4 >> 2];
     HEAP32[$9_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$9_1 + 4 >> 2] = $8_1;
     $7_1 = HEAP32[$5_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $7_1;
     $7_1 = $1_1 + 1184 | 0;
     $8_1 = HEAP32[$7_1 + 4 >> 2];
     HEAP32[$14_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$14_1 + 4 >> 2] = $8_1;
     $7_1 = $1_1 + 1128 | 0;
     $8_1 = HEAP32[$7_1 + 4 >> 2];
     HEAP32[$2_1 + 160 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$2_1 + 164 >> 2] = $8_1;
     $19_1 = $50($21_1);
     $21_1 = $49($21_1);
     HEAPF32[$2_1 + 68 >> 2] = Math_fround($11_1 * $21_1) - Math_fround($19_1 * $10_1);
     $24_1 = $50($20_1);
     $20_1 = $49($20_1);
     HEAPF32[$2_1 + 72 >> 2] = Math_fround(Math_fround($10_1 * Math_fround($21_1 * $24_1)) + Math_fround($11_1 * Math_fround($24_1 * $19_1))) + Math_fround($22_1 * $20_1);
     HEAPF32[$2_1 + 64 >> 2] = Math_fround(Math_fround($10_1 * Math_fround($20_1 * $21_1)) + Math_fround($11_1 * Math_fround($20_1 * $19_1))) - Math_fround($24_1 * $22_1);
     HEAP32[$2_1 + 60 >> 2] = 0;
     HEAPF32[$2_1 + 56 >> 2] = -HEAPF32[$2_1 + 192 >> 2];
     HEAPF32[$2_1 + 52 >> 2] = -HEAPF32[$2_1 + 176 >> 2];
     HEAPF32[$2_1 + 48 >> 2] = -HEAPF32[$2_1 + 160 >> 2];
     $11_1 = HEAPF32[$1_1 + 868 >> 2];
     $10_1 = HEAPF32[$1_1 + 872 >> 2];
     label$22 : {
      if ($11_1 > $10_1) {
       $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
       $8_1 = $2_1 + 40 | 0;
       HEAP32[$8_1 >> 2] = 0;
       HEAP32[$8_1 + 4 >> 2] = 0;
       HEAP32[$2_1 + 32 >> 2] = 0;
       HEAP32[$2_1 + 36 >> 2] = 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 68 >> 2]]($7_1, $5_1, $2_1 + 48 | 0, $2_1 - -64 | 0, $13_1, $13_1, Math_fround(-3.1415927410125732), Math_fround(3.1415927410125732), $2_1 + 32 | 0, 0, Math_fround(10.0));
       break label$22;
      }
      if (!($10_1 > $11_1)) {
       break label$22
      }
      $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
      $8_1 = $2_1 + 40 | 0;
      HEAP32[$8_1 >> 2] = 0;
      HEAP32[$8_1 + 4 >> 2] = 0;
      HEAP32[$2_1 + 32 >> 2] = 0;
      HEAP32[$2_1 + 36 >> 2] = 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 68 >> 2]]($7_1, $5_1, $2_1 + 48 | 0, $2_1 - -64 | 0, $13_1, $13_1, $11_1, $10_1, $2_1 + 32 | 0, 1, Math_fround(10.0));
     }
     $5_1 = HEAP32[$16_1 + 4 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$16_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$17_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$17_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$18_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$18_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $7_1 = $12_1 + 8 | 0;
     $8_1 = HEAP32[$7_1 + 4 >> 2];
     $5_1 = $2_1 + 168 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $8_1;
     $5_1 = $16_1 + 8 | 0;
     $16_1 = HEAP32[$5_1 + 4 >> 2];
     $6_1 = $6_1 + 8 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $16_1;
     $6_1 = $17_1 + 8 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     $4_1 = $4_1 + 8 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $5_1;
     $4_1 = $18_1 + 8 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $3_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $3_1 = HEAP32[$12_1 + 4 >> 2];
     HEAP32[$2_1 + 160 >> 2] = HEAP32[$12_1 >> 2];
     HEAP32[$2_1 + 164 >> 2] = $3_1;
     $4_1 = $1_1 + 688 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 40 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $3_1 = $1_1 + 680 | 0;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 32 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 36 >> 2] = $4_1;
     $4_1 = $1_1 + 704 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 24 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $1_1 = $1_1 + 696 | 0;
     $3_1 = HEAP32[$1_1 + 4 >> 2];
     HEAP32[$2_1 + 16 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$2_1 + 20 >> 2] = $3_1;
     $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     $1_1 = $2_1 + 8 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$2_1 >> 2] = 0;
     HEAP32[$2_1 + 4 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 80 >> 2]]($0_1, $2_1 + 32 | 0, $2_1 + 16 | 0, $2_1 + 160 | 0, $2_1);
     break label$1;
    case 9:
     $4_1 = $1_1 + 1244 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $8_1 = $2_1 + 168 | 0;
     $3_1 = $8_1;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $4_1 = $1_1 + 1260 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 184 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $4_1 = $1_1 + 1276 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 200 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $4_1 = $1_1 + 1292 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 216 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $12_1 = $1_1 + 1236 | 0;
     $3_1 = $12_1;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 160 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 164 >> 2] = $4_1;
     $16_1 = $1_1 + 1252 | 0;
     $3_1 = $16_1;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 176 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 180 >> 2] = $4_1;
     $17_1 = $1_1 + 1268 | 0;
     $3_1 = $17_1;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 192 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 196 >> 2] = $4_1;
     $18_1 = $1_1 + 1284 | 0;
     $3_1 = $18_1;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 208 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 212 >> 2] = $4_1;
     $3_1 = $2_1 + 208 | 0;
     $4_1 = $2_1 + 192 | 0;
     $6_1 = $2_1 + 176 | 0;
     if ($5_1) {
      $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 64 >> 2]]($5_1, $2_1 + 160 | 0, $13_1);
      $9_1 = $1_1 + 1356 | 0;
      $14_1 = HEAP32[$9_1 + 4 >> 2];
      $5_1 = $3_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $14_1;
      $5_1 = $1_1 + 1348 | 0;
      $9_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$3_1 + 4 >> 2] = $9_1;
      $5_1 = $1_1 + 1316 | 0;
      $9_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $9_1;
      $9_1 = $1_1 + 1324 | 0;
      $14_1 = HEAP32[$9_1 + 4 >> 2];
      $5_1 = $6_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $14_1;
      $5_1 = $1_1 + 1332 | 0;
      $9_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $9_1;
      $9_1 = $1_1 + 1340 | 0;
      $14_1 = HEAP32[$9_1 + 4 >> 2];
      $5_1 = $4_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$9_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $14_1;
      $5_1 = $1_1 + 1308 | 0;
      $9_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$8_1 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$8_1 + 4 >> 2] = $9_1;
      $5_1 = $1_1 + 1300 | 0;
      $8_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$2_1 + 160 >> 2] = HEAP32[$5_1 >> 2];
      HEAP32[$2_1 + 164 >> 2] = $8_1;
      $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 64 >> 2]]($5_1, $2_1 + 160 | 0, $13_1);
     }
     if (!$7_1) {
      break label$1
     }
     $5_1 = HEAP32[$16_1 + 4 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$16_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$17_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$17_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$18_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$18_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $8_1 = $12_1 + 8 | 0;
     $9_1 = HEAP32[$8_1 + 4 >> 2];
     $7_1 = $2_1 + 168 | 0;
     $5_1 = $7_1;
     HEAP32[$5_1 >> 2] = HEAP32[$8_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $9_1;
     $9_1 = $16_1 + 8 | 0;
     $14_1 = HEAP32[$9_1 + 4 >> 2];
     $8_1 = $6_1 + 8 | 0;
     $5_1 = $8_1;
     HEAP32[$5_1 >> 2] = HEAP32[$9_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $14_1;
     $14_1 = $17_1 + 8 | 0;
     $15_1 = HEAP32[$14_1 + 4 >> 2];
     $9_1 = $4_1 + 8 | 0;
     $5_1 = $9_1;
     HEAP32[$5_1 >> 2] = HEAP32[$14_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $15_1;
     $15_1 = $18_1 + 8 | 0;
     $23_1 = HEAP32[$15_1 + 4 >> 2];
     $14_1 = $3_1 + 8 | 0;
     $5_1 = $14_1;
     HEAP32[$5_1 >> 2] = HEAP32[$15_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $23_1;
     $5_1 = HEAP32[$12_1 + 4 >> 2];
     HEAP32[$2_1 + 160 >> 2] = HEAP32[$12_1 >> 2];
     HEAP32[$2_1 + 164 >> 2] = $5_1;
     HEAPF32[$2_1 + 96 >> 2] = HEAPF32[$7_1 >> 2];
     HEAPF32[$2_1 + 100 >> 2] = HEAPF32[$2_1 + 184 >> 2];
     HEAP32[$2_1 + 108 >> 2] = 0;
     HEAPF32[$2_1 + 104 >> 2] = HEAPF32[$2_1 + 200 >> 2];
     HEAPF32[$2_1 + 80 >> 2] = HEAPF32[$2_1 + 160 >> 2];
     HEAPF32[$2_1 + 84 >> 2] = HEAPF32[$2_1 + 176 >> 2];
     HEAP32[$2_1 + 92 >> 2] = 0;
     HEAPF32[$2_1 + 88 >> 2] = HEAPF32[$2_1 + 192 >> 2];
     $11_1 = HEAPF32[$1_1 + 1060 >> 2];
     $10_1 = HEAPF32[$1_1 + 1144 >> 2];
     $19_1 = HEAPF32[$1_1 + 1148 >> 2];
     $22_1 = HEAPF32[$1_1 + 1056 >> 2];
     $15_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     $5_1 = $2_1 + 72 | 0;
     HEAP32[$5_1 >> 2] = 0;
     HEAP32[$5_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 64 >> 2] = 0;
     HEAP32[$2_1 + 68 >> 2] = 0;
     $5_1 = $1_1 + 1348 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$15_1 >> 2] + 72 >> 2]]($15_1, $5_1, $2_1 + 96 | 0, $2_1 + 80 | 0, Math_fround($13_1 * Math_fround(.8999999761581421)), $22_1, $11_1, $10_1, $19_1, $2_1 - -64 | 0, Math_fround(10.0), 1);
     HEAP32[$2_1 + 92 >> 2] = 0;
     $22_1 = HEAPF32[$2_1 + 196 >> 2];
     HEAPF32[$2_1 + 88 >> 2] = $22_1;
     $11_1 = HEAPF32[$2_1 + 180 >> 2];
     HEAPF32[$2_1 + 84 >> 2] = $11_1;
     $10_1 = HEAPF32[$2_1 + 164 >> 2];
     HEAPF32[$2_1 + 80 >> 2] = $10_1;
     $20_1 = HEAPF32[$1_1 + 1368 >> 2];
     $21_1 = HEAPF32[$1_1 + 1372 >> 2];
     $15_1 = $1_1 + 1308 | 0;
     $23_1 = HEAP32[$15_1 + 4 >> 2];
     HEAP32[$7_1 >> 2] = HEAP32[$15_1 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $23_1;
     $7_1 = $1_1 + 1316 | 0;
     $15_1 = HEAP32[$7_1 + 4 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $15_1;
     $7_1 = $1_1 + 1324 | 0;
     $15_1 = HEAP32[$7_1 + 4 >> 2];
     HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$8_1 + 4 >> 2] = $15_1;
     $7_1 = $1_1 + 1332 | 0;
     $8_1 = HEAP32[$7_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $8_1;
     $7_1 = $1_1 + 1340 | 0;
     $8_1 = HEAP32[$7_1 + 4 >> 2];
     HEAP32[$9_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$9_1 + 4 >> 2] = $8_1;
     $7_1 = HEAP32[$5_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $7_1;
     $7_1 = $1_1 + 1356 | 0;
     $8_1 = HEAP32[$7_1 + 4 >> 2];
     HEAP32[$14_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$14_1 + 4 >> 2] = $8_1;
     $7_1 = $1_1 + 1300 | 0;
     $8_1 = HEAP32[$7_1 + 4 >> 2];
     HEAP32[$2_1 + 160 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$2_1 + 164 >> 2] = $8_1;
     $19_1 = $50($21_1);
     $21_1 = $49($21_1);
     HEAPF32[$2_1 + 68 >> 2] = Math_fround($11_1 * $21_1) - Math_fround($10_1 * $19_1);
     $24_1 = $50($20_1);
     $20_1 = $49($20_1);
     HEAPF32[$2_1 + 72 >> 2] = Math_fround(Math_fround($10_1 * Math_fround($21_1 * $24_1)) + Math_fround($11_1 * Math_fround($24_1 * $19_1))) + Math_fround($22_1 * $20_1);
     HEAPF32[$2_1 + 64 >> 2] = Math_fround(Math_fround($10_1 * Math_fround($20_1 * $21_1)) + Math_fround($11_1 * Math_fround($20_1 * $19_1))) - Math_fround($24_1 * $22_1);
     HEAP32[$2_1 + 60 >> 2] = 0;
     HEAPF32[$2_1 + 56 >> 2] = -HEAPF32[$2_1 + 192 >> 2];
     HEAPF32[$2_1 + 52 >> 2] = -HEAPF32[$2_1 + 176 >> 2];
     HEAPF32[$2_1 + 48 >> 2] = -HEAPF32[$2_1 + 160 >> 2];
     $11_1 = HEAPF32[$1_1 + 968 >> 2];
     $10_1 = HEAPF32[$1_1 + 972 >> 2];
     label$25 : {
      if ($11_1 > $10_1) {
       $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
       $8_1 = $2_1 + 40 | 0;
       HEAP32[$8_1 >> 2] = 0;
       HEAP32[$8_1 + 4 >> 2] = 0;
       HEAP32[$2_1 + 32 >> 2] = 0;
       HEAP32[$2_1 + 36 >> 2] = 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 68 >> 2]]($7_1, $5_1, $2_1 + 48 | 0, $2_1 - -64 | 0, $13_1, $13_1, Math_fround(-3.1415927410125732), Math_fround(3.1415927410125732), $2_1 + 32 | 0, 0, Math_fround(10.0));
       break label$25;
      }
      if (!($10_1 > $11_1)) {
       break label$25
      }
      $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
      $8_1 = $2_1 + 40 | 0;
      HEAP32[$8_1 >> 2] = 0;
      HEAP32[$8_1 + 4 >> 2] = 0;
      HEAP32[$2_1 + 32 >> 2] = 0;
      HEAP32[$2_1 + 36 >> 2] = 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$7_1 >> 2] + 68 >> 2]]($7_1, $5_1, $2_1 + 48 | 0, $2_1 - -64 | 0, $13_1, $13_1, $11_1, $10_1, $2_1 + 32 | 0, 1, Math_fround(10.0));
     }
     $5_1 = HEAP32[$16_1 + 4 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$16_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$17_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$17_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $5_1;
     $5_1 = HEAP32[$18_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$18_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $7_1 = $12_1 + 8 | 0;
     $8_1 = HEAP32[$7_1 + 4 >> 2];
     $5_1 = $2_1 + 168 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $8_1;
     $5_1 = $16_1 + 8 | 0;
     $16_1 = HEAP32[$5_1 + 4 >> 2];
     $6_1 = $6_1 + 8 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $16_1;
     $6_1 = $17_1 + 8 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     $4_1 = $4_1 + 8 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $5_1;
     $4_1 = $18_1 + 8 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $3_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $3_1 = HEAP32[$12_1 + 4 >> 2];
     HEAP32[$2_1 + 160 >> 2] = HEAP32[$12_1 >> 2];
     HEAP32[$2_1 + 164 >> 2] = $3_1;
     $4_1 = $1_1 + 688 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 40 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $3_1 = $1_1 + 680 | 0;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 32 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 36 >> 2] = $4_1;
     $4_1 = $1_1 + 704 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     $3_1 = $2_1 + 24 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $1_1 = $1_1 + 696 | 0;
     $3_1 = HEAP32[$1_1 + 4 >> 2];
     HEAP32[$2_1 + 16 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$2_1 + 20 >> 2] = $3_1;
     $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     $1_1 = $2_1 + 8 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     HEAP32[$2_1 >> 2] = 0;
     HEAP32[$2_1 + 4 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 80 >> 2]]($0_1, $2_1 + 32 | 0, $2_1 + 16 | 0, $2_1 + 160 | 0, $2_1);
     break label$1;
    case 4:
     break label$2;
    default:
     break label$1;
    };
   }
   $4_1 = $1_1 + 832 | 0;
   $6_1 = HEAP32[$4_1 + 4 >> 2];
   $12_1 = $2_1 + 168 | 0;
   $3_1 = $12_1;
   HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $6_1;
   $4_1 = $1_1 + 848 | 0;
   $6_1 = HEAP32[$4_1 + 4 >> 2];
   $3_1 = $2_1 + 184 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $6_1;
   $4_1 = $1_1 + 864 | 0;
   $6_1 = HEAP32[$4_1 + 4 >> 2];
   $3_1 = $2_1 + 200 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $6_1;
   $4_1 = $1_1 + 880 | 0;
   $6_1 = HEAP32[$4_1 + 4 >> 2];
   $3_1 = $2_1 + 216 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $6_1;
   $16_1 = $1_1 + 824 | 0;
   $3_1 = $16_1;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$2_1 + 160 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 164 >> 2] = $4_1;
   $3_1 = $1_1 + 840 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$2_1 + 176 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 180 >> 2] = $4_1;
   $3_1 = $1_1 + 856 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$2_1 + 192 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 196 >> 2] = $4_1;
   $3_1 = $1_1 + 872 | 0;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$2_1 + 208 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 212 >> 2] = $4_1;
   $3_1 = $2_1 + 208 | 0;
   $4_1 = $2_1 + 192 | 0;
   $6_1 = $2_1 + 176 | 0;
   label$27 : {
    if ($5_1) {
     $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] + 64 >> 2]]($5_1, $2_1 + 160 | 0, $13_1);
     $17_1 = $1_1 + 944 | 0;
     $18_1 = HEAP32[$17_1 + 4 >> 2];
     $5_1 = $3_1 + 8 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$17_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $18_1;
     $5_1 = $1_1 + 936 | 0;
     $17_1 = HEAP32[$5_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $17_1;
     $3_1 = $1_1 + 904 | 0;
     $5_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $5_1;
     $3_1 = $6_1 + 8 | 0;
     $6_1 = $1_1 + 912 | 0;
     $5_1 = HEAP32[$6_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     $3_1 = $1_1 + 920 | 0;
     $6_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $6_1;
     $3_1 = $4_1 + 8 | 0;
     $4_1 = $1_1 + 928 | 0;
     $6_1 = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$3_1 + 4 >> 2] = $6_1;
     $3_1 = $1_1 + 896 | 0;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$12_1 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$12_1 + 4 >> 2] = $4_1;
     $3_1 = $1_1 + 888 | 0;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 160 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 164 >> 2] = $4_1;
     $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 64 >> 2]]($3_1, $2_1 + 160 | 0, $13_1);
     break label$27;
    }
    $5_1 = $1_1 + 896 | 0;
    $17_1 = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$12_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $17_1;
    $5_1 = $1_1 + 904 | 0;
    $12_1 = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $12_1;
    $5_1 = $1_1 + 912 | 0;
    $12_1 = HEAP32[$5_1 + 4 >> 2];
    $6_1 = $6_1 + 8 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $12_1;
    $6_1 = $1_1 + 920 | 0;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $5_1;
    $6_1 = $1_1 + 928 | 0;
    $5_1 = HEAP32[$6_1 + 4 >> 2];
    $4_1 = $4_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $5_1;
    $4_1 = $1_1 + 936 | 0;
    $6_1 = HEAP32[$4_1 + 4 >> 2];
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $6_1;
    $4_1 = $1_1 + 944 | 0;
    $6_1 = HEAP32[$4_1 + 4 >> 2];
    $3_1 = $3_1 + 8 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $6_1;
    $3_1 = $1_1 + 888 | 0;
    $4_1 = HEAP32[$3_1 + 4 >> 2];
    HEAP32[$2_1 + 160 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 164 >> 2] = $4_1;
   }
   if (!$7_1) {
    break label$1
   }
   $3_1 = HEAPU8[$1_1 + 180 | 0] ? $16_1 : $1_1 + 888 | 0;
   $6_1 = $3_1 + 8 | 0;
   $5_1 = HEAP32[$6_1 + 4 >> 2];
   $4_1 = $2_1 + 104 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $5_1;
   $6_1 = $3_1 + 24 | 0;
   $5_1 = HEAP32[$6_1 + 4 >> 2];
   $4_1 = $2_1 + 120 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $5_1;
   $6_1 = $3_1 + 40 | 0;
   $5_1 = HEAP32[$6_1 + 4 >> 2];
   $4_1 = $2_1 + 136 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $5_1;
   $6_1 = $3_1 + 56 | 0;
   $5_1 = HEAP32[$6_1 + 4 >> 2];
   $4_1 = $2_1 + 152 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $5_1;
   $4_1 = HEAP32[$3_1 + 4 >> 2];
   HEAP32[$2_1 + 96 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 100 >> 2] = $4_1;
   $4_1 = HEAP32[$3_1 + 20 >> 2];
   HEAP32[$2_1 + 112 >> 2] = HEAP32[$3_1 + 16 >> 2];
   HEAP32[$2_1 + 116 >> 2] = $4_1;
   $4_1 = HEAP32[$3_1 + 36 >> 2];
   HEAP32[$2_1 + 128 >> 2] = HEAP32[$3_1 + 32 >> 2];
   HEAP32[$2_1 + 132 >> 2] = $4_1;
   $4_1 = HEAP32[$3_1 + 52 >> 2];
   HEAP32[$2_1 + 144 >> 2] = HEAP32[$3_1 + 48 >> 2];
   HEAP32[$2_1 + 148 >> 2] = $4_1;
   $78($2_1 + 80 | 0, $2_1 + 96 | 0, HEAPF32[$1_1 + 184 >> 2], Math_fround(0.0), Math_fround(0.0));
   $78($2_1 - -64 | 0, $2_1 + 96 | 0, HEAPF32[$1_1 + 188 >> 2], Math_fround(0.0), Math_fround(0.0));
   $3_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   $4_1 = $2_1 + 56 | 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[$4_1 + 4 >> 2] = 0;
   HEAP32[$2_1 + 48 >> 2] = 0;
   HEAP32[$2_1 + 52 >> 2] = 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $2_1 + 80 | 0, $2_1 - -64 | 0, $2_1 + 48 | 0);
   HEAPF32[$2_1 + 48 >> 2] = HEAPF32[$2_1 + 96 >> 2];
   HEAPF32[$2_1 + 52 >> 2] = HEAPF32[$2_1 + 112 >> 2];
   HEAP32[$2_1 + 60 >> 2] = 0;
   HEAPF32[$2_1 + 56 >> 2] = HEAPF32[$2_1 + 128 >> 2];
   HEAPF32[$2_1 + 32 >> 2] = HEAPF32[$2_1 + 100 >> 2];
   HEAPF32[$2_1 + 36 >> 2] = HEAPF32[$2_1 + 116 >> 2];
   HEAP32[$2_1 + 44 >> 2] = 0;
   HEAPF32[$2_1 + 40 >> 2] = HEAPF32[$2_1 + 132 >> 2];
   $11_1 = HEAPF32[$1_1 + 196 >> 2];
   $10_1 = HEAPF32[$1_1 + 192 >> 2];
   $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1) | 0;
   $3_1 = $2_1 + 24 | 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[$3_1 + 4 >> 2] = 0;
   HEAP32[$2_1 + 16 >> 2] = 0;
   HEAP32[$2_1 + 20 >> 2] = 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 68 >> 2]]($0_1, $1_1 + 936 | 0, $2_1 + 48 | 0, $2_1 + 32 | 0, $13_1, $13_1, $10_1, $11_1, $2_1 + 16 | 0, 1, Math_fround(10.0));
  }
  global$0 = $2_1 + 224 | 0;
 }
 
 function $703($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  while (1) {
   if (($1_1 | 0) < HEAP32[$0_1 + 248 >> 2]) {
    label$3 : {
     label$4 : {
      $3_1 = HEAP32[HEAP32[$0_1 + 256 >> 2] + $2_1 >> 2];
      switch (HEAP32[$3_1 + 220 >> 2] - 2 | 0) {
      case 0:
      case 3:
       break label$3;
      default:
       break label$4;
      };
     }
     $568($3_1);
    }
    $2_1 = $2_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $704($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $3_1 = HEAP32[$0_1 + 84 >> 2];
  label$1 : {
   if (($2_1 | 0) == ($3_1 | 0)) {
    break label$1
   }
   if (HEAP32[$0_1 + 12 >> 2] & HEAP32[$1_1 + 4 >> 2]) {
    $1_1 = (HEAP32[$0_1 + 8 >> 2] & HEAP32[$1_1 + 8 >> 2]) != 0
   } else {
    $1_1 = 0
   }
   if (!$1_1) {
    break label$1
   }
   $0_1 = HEAP32[$0_1 + 96 >> 2];
   $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1, $3_1, $2_1) | 0;
  }
  return $4_1 | 0;
 }
 
 function $705($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = 0;
  $3_1 = Math_fround(1.0);
  $4_1 = HEAP32[$1_1 >> 2];
  label$1 : {
   if (($4_1 | 0) == HEAP32[$0_1 + 84 >> 2]) {
    break label$1
   }
   if (HEAPU8[$4_1 + 204 | 0] & 4) {
    break label$1
   }
   if (Math_fround(-HEAPF32[$0_1 + 88 >> 2]) <= Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0_1 + 32 >> 2] - HEAPF32[$0_1 + 16 >> 2]) * HEAPF32[$1_1 + 8 >> 2]) + Math_fround(Math_fround(HEAPF32[$0_1 + 36 >> 2] - HEAPF32[$0_1 + 20 >> 2]) * HEAPF32[$1_1 + 12 >> 2])) + Math_fround(Math_fround(HEAPF32[$0_1 + 40 >> 2] - HEAPF32[$0_1 + 24 >> 2]) * HEAPF32[$1_1 + 16 >> 2]))) {
    break label$1
   }
   $3_1 = $706($0_1, $1_1, $2_1);
  }
  return Math_fround($3_1);
 }
 
 function $706($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$1_1 + 40 >> 2];
  $3_1 = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 80 >> 2] = $3_1;
  label$1 : {
   if ($2_1) {
    $2_1 = HEAP32[$1_1 + 12 >> 2];
    HEAP32[$0_1 + 48 >> 2] = HEAP32[$1_1 + 8 >> 2];
    HEAP32[$0_1 + 52 >> 2] = $2_1;
    $3_1 = $1_1 + 16 | 0;
    $5_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0_1 + 56 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $5_1;
    break label$1;
   }
   $351($4_1, $3_1 + 4 | 0, HEAPF32[$1_1 + 8 >> 2], HEAPF32[$1_1 + 12 >> 2], HEAPF32[$1_1 + 16 >> 2]);
   $3_1 = $4_1 + 8 | 0;
   $5_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0_1 + 56 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $2_1 = HEAP32[$4_1 + 4 >> 2];
   HEAP32[$0_1 + 48 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$0_1 + 52 >> 2] = $2_1;
  }
  $2_1 = HEAP32[$1_1 + 28 >> 2];
  HEAP32[$0_1 + 64 >> 2] = HEAP32[$1_1 + 24 >> 2];
  HEAP32[$0_1 + 68 >> 2] = $2_1;
  $2_1 = $1_1 + 32 | 0;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  $0_1 = $0_1 + 72 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $3_1;
  global$0 = $4_1 + 16 | 0;
  return HEAPF32[$1_1 + 40 >> 2];
 }
 
 function $707($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[HEAP32[$1_1 + 28 >> 2] + 208 >> 2];
  if (($2_1 | 0) <= -1) {
   $2_1 = HEAP32[HEAP32[$1_1 + 32 >> 2] + 208 >> 2]
  }
  $1_1 = HEAP32[HEAP32[$0_1 + 28 >> 2] + 208 >> 2];
  if (($1_1 | 0) <= -1) {
   $1_1 = HEAP32[HEAP32[$0_1 + 32 >> 2] + 208 >> 2]
  }
  return ($1_1 | 0) < ($2_1 | 0);
 }
 
 function $708($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $0_1 = 0;
  label$1 : {
   if (!(HEAP32[$2_1 + 8 >> 2] & HEAP32[$1_1 + 4 >> 2])) {
    break label$1
   }
   if (!(HEAP32[$1_1 + 8 >> 2] & HEAP32[$2_1 + 4 >> 2])) {
    break label$1
   }
   $1_1 = HEAP32[$1_1 >> 2];
   $2_1 = HEAP32[$2_1 >> 2];
   if (HEAP8[$2_1 + 204 | 0] & 1 ? HEAP8[$1_1 + 204 | 0] & 1 : 0) {
    break label$1
   }
   if (HEAP32[$2_1 + 220 >> 2] == 2 ? HEAP32[$1_1 + 220 >> 2] == 2 : 0) {
    break label$1
   }
   $0_1 = 1;
  }
  return $0_1 | 0;
 }
 
 function $709($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 18840;
  $57($0_1 + 348 | 0);
  $664($0_1);
  return $0_1 | 0;
 }
 
 function $710($0_1) {
  $0_1 = $0_1 | 0;
  $54($709($0_1));
 }
 
 function $711($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = 0, $32_1 = 0, $33_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = Math_fround(0);
  $2_1 = global$0 - 528 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = 0;
  $140($0_1 + 348 | 0, 0, $2_1 + 8 | 0);
  $700($0_1);
  label$1 : {
   $12_1 = HEAP32[$0_1 + 248 >> 2];
   if (($12_1 | 0) < 1) {
    break label$1
   }
   $31_1 = $0_1 + 320 | 0;
   $32_1 = $2_1 + 124 | 0;
   $17_1 = $2_1 + 92 | 0;
   $18_1 = $2_1 + 72 | 0;
   $19_1 = $2_1 + 24 | 0;
   $20_1 = $2_1 + 408 | 0;
   $21_1 = $2_1 + 288 | 0;
   $22_1 = $2_1 + 272 | 0;
   $23_1 = $2_1 + 256 | 0;
   $24_1 = $2_1 + 392 | 0;
   $25 = $2_1 + 376 | 0;
   $10_1 = $2_1 + 512 | 0;
   while (1) {
    if (!$12_1) {
     break label$1
    }
    $6_1 = HEAP32[HEAP32[$0_1 + 256 >> 2] + $28_1 >> 2];
    HEAP32[$6_1 + 268 >> 2] = 1065353216;
    label$3 : {
     label$4 : {
      switch (HEAP32[$6_1 + 220 >> 2] - 2 | 0) {
      case 0:
      case 3:
       break label$3;
      default:
       break label$4;
      };
     }
     if (HEAPU8[$6_1 + 204 | 0] & 3) {
      break label$3
     }
     $563($6_1, $1_1, $2_1 + 464 | 0);
     if (!HEAPU8[$0_1 + 44 | 0]) {
      break label$3
     }
     $11_1 = HEAPF32[$2_1 + 512 >> 2];
     $8_1 = Math_fround($11_1 - HEAPF32[$6_1 + 52 >> 2]);
     $9_1 = Math_fround($8_1 * $8_1);
     $29_1 = HEAPF32[$2_1 + 516 >> 2];
     $8_1 = Math_fround($29_1 - HEAPF32[$6_1 + 56 >> 2]);
     $9_1 = Math_fround($9_1 + Math_fround($8_1 * $8_1));
     $30_1 = HEAPF32[$2_1 + 520 >> 2];
     $8_1 = Math_fround($30_1 - HEAPF32[$6_1 + 60 >> 2]);
     $9_1 = Math_fround($9_1 + Math_fround($8_1 * $8_1));
     $8_1 = HEAPF32[$6_1 + 276 >> 2];
     $8_1 = Math_fround($8_1 * $8_1);
     if ($8_1 == Math_fround(0.0)) {
      break label$3
     }
     if (!($8_1 < $9_1)) {
      break label$3
     }
     if (HEAP32[HEAP32[$6_1 + 192 >> 2] + 4 >> 2] > 19) {
      break label$3
     }
     $26_1 = $6_1 + 52 | 0;
     $4_1 = $26_1;
     $3_1 = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$25 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$25 + 4 >> 2] = $3_1;
     $3_1 = HEAP32[$10_1 + 4 >> 2];
     HEAP32[$24_1 >> 2] = HEAP32[$10_1 >> 2];
     HEAP32[$24_1 + 4 >> 2] = $3_1;
     $27_1 = $4_1 + 8 | 0;
     $4_1 = $27_1;
     $3_1 = HEAP32[$4_1 + 4 >> 2];
     $5_1 = $25 + 8 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $3_1;
     $7_1 = $10_1 + 8 | 0;
     $4_1 = $7_1;
     $3_1 = HEAP32[$4_1 + 4 >> 2];
     $5_1 = $24_1 + 8 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $3_1;
     HEAP32[$2_1 + 364 >> 2] = 1065353216;
     HEAP32[$2_1 + 360 >> 2] = 19144;
     HEAP32[$2_1 + 440 >> 2] = 0;
     HEAP32[$2_1 + 448 >> 2] = $0_1;
     HEAP32[$2_1 + 452 >> 2] = 0;
     HEAP32[$2_1 + 456 >> 2] = 0;
     HEAP32[$2_1 + 444 >> 2] = $6_1;
     $373($2_1 + 304 | 0, HEAPF32[$6_1 + 272 >> 2]);
     $4_1 = HEAP32[$6_1 + 188 >> 2];
     $3_1 = HEAP32[$4_1 + 8 >> 2];
     HEAP32[$2_1 + 368 >> 2] = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$2_1 + 372 >> 2] = $3_1;
     $3_1 = HEAP32[$7_1 + 4 >> 2];
     $4_1 = $21_1 + 8 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $3_1;
     $3_1 = HEAP32[$10_1 + 4 >> 2];
     HEAP32[$21_1 >> 2] = HEAP32[$10_1 >> 2];
     HEAP32[$21_1 + 4 >> 2] = $3_1;
     $3_1 = $6_1 + 4 | 0;
     $5_1 = $3_1 + 8 | 0;
     $4_1 = HEAP32[$5_1 + 4 >> 2];
     $7_1 = $2_1 + 248 | 0;
     HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $4_1;
     $5_1 = $6_1 + 20 | 0;
     $4_1 = HEAP32[$5_1 + 4 >> 2];
     HEAP32[$23_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$23_1 + 4 >> 2] = $4_1;
     $5_1 = $6_1 + 28 | 0;
     $4_1 = HEAP32[$5_1 + 4 >> 2];
     $7_1 = $23_1 + 8 | 0;
     HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $4_1;
     $5_1 = $6_1 + 36 | 0;
     $4_1 = HEAP32[$5_1 + 4 >> 2];
     HEAP32[$22_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$22_1 + 4 >> 2] = $4_1;
     $5_1 = $6_1 + 44 | 0;
     $4_1 = HEAP32[$5_1 + 4 >> 2];
     $7_1 = $22_1 + 8 | 0;
     HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $4_1;
     $4_1 = HEAP32[$3_1 + 4 >> 2];
     HEAP32[$2_1 + 240 >> 2] = HEAP32[$3_1 >> 2];
     HEAP32[$2_1 + 244 >> 2] = $4_1;
     $647($0_1, $2_1 + 304 | 0, $3_1, $2_1 + 240 | 0, $2_1 + 360 | 0, Math_fround(0.0));
     $13_1 = HEAPF32[$2_1 + 364 >> 2];
     if (!($13_1 < Math_fround(1.0))) {
      break label$3
     }
     $14_1 = HEAPF32[$6_1 + 52 >> 2];
     $15_1 = HEAPF32[$6_1 + 56 >> 2];
     $33_1 = HEAPF32[$6_1 + 60 >> 2];
     $34_1 = HEAPF32[$2_1 + 416 >> 2];
     $35_1 = HEAPF32[$2_1 + 412 >> 2];
     $36_1 = HEAPF32[$2_1 + 408 >> 2];
     $3_1 = HEAP32[$0_1 + 24 >> 2];
     $7_1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 12 >> 2]]($3_1, $6_1, HEAP32[$2_1 + 440 >> 2]) | 0;
     HEAP32[$2_1 + 236 >> 2] = $7_1;
     $375($31_1, $2_1 + 236 | 0);
     $16_1 = HEAPF32[$6_1 + 52 >> 2];
     $9_1 = HEAPF32[$6_1 + 56 >> 2];
     $8_1 = HEAPF32[$6_1 + 60 >> 2];
     $379($2_1 + 8 | 0, HEAP32[$2_1 + 440 >> 2] + 4 | 0);
     $11_1 = Math_fround(Math_fround($11_1 - $14_1) * $13_1);
     $14_1 = Math_fround($16_1 + $11_1);
     $15_1 = Math_fround(Math_fround($29_1 - $15_1) * $13_1);
     $16_1 = Math_fround($9_1 + $15_1);
     $9_1 = Math_fround($13_1 * Math_fround($30_1 - $33_1));
     $8_1 = Math_fround($8_1 + $9_1);
     $78($2_1 + 216 | 0, $2_1 + 8 | 0, $14_1, $16_1, $8_1);
     $3_1 = $2_1 + 16 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $3_1 = HEAP32[$2_1 + 220 >> 2];
     HEAP32[$19_1 >> 2] = HEAP32[$2_1 + 216 >> 2];
     HEAP32[$19_1 + 4 >> 2] = $3_1;
     $4_1 = $2_1 + 224 | 0;
     $3_1 = HEAP32[$4_1 + 4 >> 2];
     $5_1 = $19_1 + 8 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $3_1;
     HEAP32[$17_1 >> 2] = 0;
     HEAP32[$17_1 + 4 >> 2] = 0;
     $3_1 = $17_1 + 8 | 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[$3_1 + 4 >> 2] = 0;
     $3_1 = HEAP32[$20_1 + 4 >> 2];
     HEAP32[$18_1 >> 2] = HEAP32[$20_1 >> 2];
     HEAP32[$18_1 + 4 >> 2] = $3_1;
     $4_1 = $20_1 + 8 | 0;
     $3_1 = HEAP32[$4_1 + 4 >> 2];
     $5_1 = $18_1 + 8 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $3_1;
     HEAP32[$2_1 + 8 >> 2] = 0;
     HEAP32[$2_1 + 12 >> 2] = 0;
     HEAPF32[$2_1 + 88 >> 2] = Math_fround(Math_fround($15_1 * Math_fround(-$35_1)) - Math_fround($36_1 * $11_1)) - Math_fround($9_1 * $34_1);
     $1($32_1, 0, 52);
     $7_1 = $7_1 + Math_imul($336($7_1, $2_1 + 8 | 0), 208) | 0;
     HEAP32[$7_1 + 100 >> 2] = 0;
     HEAPF32[$7_1 + 88 >> 2] = Math_min(Math_fround(Math_max(Math_fround(HEAPF32[$6_1 + 228 >> 2] * HEAPF32[HEAP32[$2_1 + 440 >> 2] + 228 >> 2]), Math_fround(-10.0))), Math_fround(10.0));
     $3_1 = HEAP32[$27_1 + 4 >> 2];
     $4_1 = $7_1 + 60 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$27_1 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $3_1;
     $5_1 = HEAP32[$26_1 + 4 >> 2];
     $4_1 = HEAP32[$26_1 >> 2];
     HEAP32[$7_1 + 48 >> 2] = 0;
     HEAPF32[$7_1 + 44 >> 2] = $8_1;
     HEAPF32[$7_1 + 40 >> 2] = $16_1;
     $3_1 = $7_1 + 52 | 0;
     HEAP32[$3_1 >> 2] = $4_1;
     HEAP32[$3_1 + 4 >> 2] = $5_1;
     HEAPF32[$7_1 + 36 >> 2] = $14_1;
    }
    $12_1 = $12_1 - 1 | 0;
    $28_1 = $28_1 + 4 | 0;
    continue;
   };
  }
  global$0 = $2_1 + 528 | 0;
 }
 
 function $712($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  while (1) {
   if (($2_1 | 0) < HEAP32[$0_1 + 248 >> 2]) {
    label$3 : {
     label$4 : {
      $1_1 = HEAP32[HEAP32[$0_1 + 256 >> 2] + $3_1 >> 2];
      switch (HEAP32[$1_1 + 220 >> 2] - 2 | 0) {
      case 0:
      case 3:
       break label$3;
      default:
       break label$4;
      };
     }
     if (HEAPU8[$1_1 + 204 | 0] & 2) {
      break label$3
     }
     label$5 : {
      if (HEAPF32[$1_1 + 504 >> 2] == Math_fround(1.0)) {
       HEAP32[$1_1 + 472 >> 2] = 0;
       HEAP32[$1_1 + 476 >> 2] = 0;
       $4_1 = $1_1 + 480 | 0;
       HEAP32[$4_1 >> 2] = 0;
       HEAP32[$4_1 + 4 >> 2] = 0;
       break label$5;
      }
      $568($1_1);
     }
     if (HEAPF32[$1_1 + 508 >> 2] != Math_fround(1.0)) {
      break label$3
     }
     HEAP32[$1_1 + 488 >> 2] = 0;
     HEAP32[$1_1 + 492 >> 2] = 0;
     $1_1 = $1_1 + 496 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
    }
    $3_1 = $3_1 + 4 | 0;
    $2_1 = $2_1 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $713($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $698($0_1, $1_1);
 }
 
 function $714($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $3_1 = HEAP32[$0_1 + 84 >> 2];
  label$1 : {
   if (($2_1 | 0) == ($3_1 | 0)) {
    break label$1
   }
   if (HEAP32[$0_1 + 12 >> 2] & HEAP32[$1_1 + 4 >> 2]) {
    $1_1 = (HEAP32[$0_1 + 8 >> 2] & HEAP32[$1_1 + 8 >> 2]) != 0
   } else {
    $1_1 = 0
   }
   if (!$1_1) {
    break label$1
   }
   $0_1 = HEAP32[$0_1 + 88 >> 2];
   if (!HEAPU8[$0_1 + 368 | 0]) {
    $0_1 = HEAP32[$0_1 + 24 >> 2];
    if (!(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1, $3_1, $2_1) | 0)) {
     break label$1
    }
   }
   $4_1 = 1;
  }
  return $4_1 | 0;
 }
 
 function $715($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[$1_1 >> 2];
  label$1 : {
   if (HEAPU8[$4_1 + 204 | 0] & 4) {
    $5_1 = HEAP32[$0_1 + 88 >> 2];
    $2_1 = $5_1 + 348 | 0;
    $6_1 = HEAP32[$0_1 + 92 >> 2];
    label$3 : {
     if (!$6_1) {
      HEAP32[$0_1 + 96 >> 2] = HEAP32[$5_1 + 352 >> 2];
      HEAP32[$3_1 + 12 >> 2] = 1;
      $134($2_1, $3_1 + 12 | 0);
      HEAP32[$3_1 + 12 >> 2] = HEAP32[HEAP32[HEAP32[$0_1 + 84 >> 2] + 192 >> 2] + 8 >> 2];
      $134($2_1, $3_1 + 12 | 0);
      $4_1 = HEAP32[$1_1 >> 2];
      break label$3;
     }
     HEAP32[HEAP32[$5_1 + 360 >> 2] + (HEAP32[$0_1 + 96 >> 2] << 2) >> 2] = $6_1 + 1;
    }
    $4_1 = HEAP32[$4_1 + 192 >> 2];
    label$5 : {
     if (HEAP32[$4_1 + 4 >> 2] == 31) {
      HEAP32[$3_1 + 12 >> 2] = HEAP32[HEAP32[(HEAP32[$4_1 + 28 >> 2] + Math_imul(HEAP32[HEAP32[$1_1 + 4 >> 2] + 4 >> 2], 80) | 0) + 64 >> 2] + 8 >> 2];
      break label$5;
     }
     HEAP32[$3_1 + 12 >> 2] = HEAP32[$4_1 + 8 >> 2];
    }
    $134($2_1, $3_1 + 12 | 0);
    HEAP32[$0_1 + 92 >> 2] = HEAP32[$0_1 + 92 >> 2] + 1;
    $7_1 = Math_fround(1.0);
    break label$1;
   }
   $7_1 = $706($0_1, $1_1, $2_1);
  }
  global$0 = $3_1 + 16 | 0;
  return Math_fround($7_1);
 }
 
 function $716($0_1, $1_1, $2_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  var $3_1 = 0;
  $3_1 = $53(16);
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAPF32[$3_1 + 8 >> 2] = $2_1;
  HEAPF32[$3_1 + 4 >> 2] = $1_1;
  HEAPF32[$3_1 >> 2] = $0_1;
  return $3_1 | 0;
 }
 
 function $717($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAPF32[$0_1 + 8 >> 2] = $3_1;
  HEAPF32[$0_1 + 4 >> 2] = $2_1;
  HEAPF32[$0_1 >> 2] = $1_1;
 }
 
 function $718($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[$0_1 >> 2]);
 }
 
 function $719($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[$0_1 + 4 >> 2]);
 }
 
 function $720($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[$0_1 + 8 >> 2]);
 }
 
 function $721($0_1, $1_1, $2_1, $3_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  var $4_1 = 0;
  $4_1 = $16(16);
  HEAPF32[$4_1 + 12 >> 2] = $3_1;
  HEAPF32[$4_1 + 8 >> 2] = $2_1;
  HEAPF32[$4_1 + 4 >> 2] = $1_1;
  HEAPF32[$4_1 >> 2] = $0_1;
  return $4_1 | 0;
 }
 
 function $722($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  HEAPF32[$0_1 + 12 >> 2] = $4_1;
  HEAPF32[$0_1 + 8 >> 2] = $3_1;
  HEAPF32[$0_1 + 4 >> 2] = $2_1;
  HEAPF32[$0_1 >> 2] = $1_1;
 }
 
 function $723($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[$0_1 + 12 >> 2]);
 }
 
 function $724() {
  var $0_1 = 0, $1_1 = 0;
  $1_1 = $16(64);
  $0_1 = $1_1;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 1065353216;
  HEAP32[$0_1 + 24 >> 2] = 0;
  HEAP32[$0_1 + 28 >> 2] = 0;
  HEAP32[$0_1 + 20 >> 2] = 1065353216;
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAP32[$0_1 + 48 >> 2] = 0;
  HEAP32[$0_1 + 40 >> 2] = 1065353216;
  $0_1 = $0_1 + 12 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $0_1 = $1_1 + 32 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $0_1 = $1_1 + 52 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$1_1 + 60 >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $725($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $16(64);
  $371($1_1, $0_1);
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  $0_1 = $1_1 + 12 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$1_1 + 24 >> 2] = 0;
  HEAP32[$1_1 + 28 >> 2] = 0;
  HEAP32[$1_1 + 20 >> 2] = 1065353216;
  $0_1 = $1_1 + 32 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$1_1 + 44 >> 2] = 0;
  HEAP32[$1_1 + 48 >> 2] = 0;
  HEAP32[$1_1 + 40 >> 2] = 1065353216;
  $0_1 = $1_1 + 52 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$1_1 + 60 >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $726($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 1065353216;
  $1_1 = $0_1 + 12 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 20 >> 2] = 1065353216;
  $1_1 = $0_1 + 32 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 44 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 40 >> 2] = 1065353216;
  $1_1 = $0_1 + 52 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 60 >> 2] = 0;
 }
 
 function $727($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 48 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 52 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 56 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $728($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $371($0_1, $1_1);
 }
 
 function $729($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 48 | 0;
 }
 
 function $730($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $565($0_1, $1_1);
  return $1_1 | 0;
 }
 
 function $731($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 4 >> 2];
 }
 
 function $732($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[HEAP32[$0_1 + 12 >> 2] + ($1_1 << 2) >> 2];
 }
 
 function $733($0_1) {
  $0_1 = $0_1 | 0;
  $57($0_1);
 }
 
 function $734($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[$0_1 + 12 >> 2] + ($1_1 << 4) | 0;
 }
 
 function $735($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0);
  $2_1 = HEAPF32[HEAP32[$0_1 + 12 >> 2] + ($1_1 << 2) >> 2];
  if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
   return ~~$2_1 | 0
  }
  return -2147483648;
 }
 
 function $736() {
  var $0_1 = 0;
  $0_1 = $16(8);
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 19308;
  return $0_1 | 0;
 }
 
 function $737($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  fimport$3(HEAP32[$0_1 + 4 >> 2], $1_1 | 0);
 }
 
 function $738($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  fimport$4(HEAP32[$0_1 + 4 >> 2], $1_1 | 0);
 }
 
 function $739($0_1) {
  $0_1 = $0_1 | 0;
  if ($0_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 4 >> 2]]($0_1)
  }
 }
 
 function $740($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $741($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1, $1_1);
 }
 
 function $742($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2]]($0_1, $1_1);
 }
 
 function $743() {
  var $0_1 = 0;
  $0_1 = $53(324);
  $55($0_1);
  return $0_1 | 0;
 }
 
 function $744($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAPF32[$0_1 + 184 >> 2] = $1_1 | 0;
 }
 
 function $745($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 220 >> 2] = $1_1;
 }
 
 function $746($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $68($0_1, $1_1);
 }
 
 function $747($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = HEAP32[$0_1 + 220 >> 2];
  return ($0_1 | 0) != 2 & ($0_1 | 0) != 5;
 }
 
 function $748($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0_1 + 232 >> 2] = $1_1;
  HEAP32[$0_1 + 304 >> 2] = HEAP32[$0_1 + 304 >> 2] + 1;
 }
 
 function $749($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0_1 + 228 >> 2] = $1_1;
  HEAP32[$0_1 + 304 >> 2] = HEAP32[$0_1 + 304 >> 2] + 1;
 }
 
 function $750($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0_1 + 236 >> 2] = $1_1;
  HEAP32[$0_1 + 304 >> 2] = HEAP32[$0_1 + 304 >> 2] + 1;
 }
 
 function $751($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 204 >> 2];
 }
 
 function $752($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 204 >> 2] = $1_1;
 }
 
 function $753($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[$0_1 + 276 >> 2]);
 }
 
 function $754($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0_1 + 276 >> 2] = $1_1;
 }
 
 function $755($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[$0_1 + 272 >> 2]);
 }
 
 function $756($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[$0_1 + 272 >> 2] = $1_1;
 }
 
 function $757($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 264 >> 2];
 }
 
 function $758($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 264 >> 2] = $1_1;
 }
 
 function $759($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 220 >> 2];
 }
 
 function $760($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 8 >> 2] != 0 | 0;
 }
 
 function $761($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  if (!HEAPU8[20740]) {
   HEAP32[5189] = 1;
   HEAP32[5190] = -1;
   HEAP32[5187] = 1065353216;
   HEAP32[5188] = 0;
   HEAP32[5186] = 19392;
   HEAP32[5191] = 0;
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[5192] = HEAP32[$0_1 >> 2];
   HEAP32[5193] = $2_1;
   $0_1 = $0_1 + 8 | 0;
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[5194] = HEAP32[$0_1 >> 2];
   HEAP32[5195] = $2_1;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[5196] = HEAP32[$1_1 >> 2];
   HEAP32[5197] = $0_1;
   $0_1 = $1_1 + 8 | 0;
   $1_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[5198] = HEAP32[$0_1 >> 2];
   HEAP32[5199] = $1_1;
   HEAP8[20836] = 1;
   HEAP32[5186] = 19416;
   HEAP32[5189] = -1;
   HEAP32[5208] = 0;
   HEAP8[20740] = 1;
  }
  return 20744;
 }
 
 function $762($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  if (!(HEAP32[$0_1 + 16 >> 2] & HEAP32[$1_1 + 4 >> 2])) {
   return 0
  }
  $2_1 = 1;
  label$2 : {
   if (HEAPU8[$0_1 + 92 | 0]) {
    break label$2
   }
   $0_1 = HEAP32[$1_1 >> 2];
   if (!$0_1) {
    break label$2
   }
   $2_1 = !(HEAPU8[$0_1 + 204 | 0] & 4);
  }
  return $2_1 | 0;
 }
 
 function $763($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = HEAP32[HEAP32[$1_1 >> 2] + 192 >> 2];
  label$1 : {
   if (HEAP32[$3_1 + 4 >> 2] != 31) {
    break label$1
   }
   $4_1 = HEAP32[$1_1 + 4 >> 2];
   if (!$4_1) {
    break label$1
   }
   $3_1 = HEAP32[(HEAP32[$3_1 + 28 >> 2] + Math_imul(HEAP32[$4_1 >> 2], 80) | 0) + 64 >> 2];
  }
  HEAP32[$0_1 + 88 >> 2] = HEAP32[$3_1 + 8 >> 2];
  return Math_fround($764($0_1, $1_1, $2_1));
 }
 
 function $764($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$1_1 + 24 >> 2];
  $3_1 = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 8 >> 2] = $3_1;
  label$1 : {
   if ($2_1) {
    $2_1 = HEAP32[$1_1 + 12 >> 2];
    HEAP32[$0_1 + 56 >> 2] = HEAP32[$1_1 + 8 >> 2];
    HEAP32[$0_1 + 60 >> 2] = $2_1;
    $3_1 = $1_1 + 16 | 0;
    $5_1 = HEAP32[$3_1 + 4 >> 2];
    $2_1 = $0_1 - -64 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $5_1;
    break label$1;
   }
   $351($4_1, $3_1 + 4 | 0, HEAPF32[$1_1 + 8 >> 2], HEAPF32[$1_1 + 12 >> 2], HEAPF32[$1_1 + 16 >> 2]);
   $3_1 = $4_1 + 8 | 0;
   $5_1 = HEAP32[$3_1 + 4 >> 2];
   $2_1 = $0_1 - -64 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $2_1 = HEAP32[$4_1 + 4 >> 2];
   HEAP32[$0_1 + 56 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$0_1 + 60 >> 2] = $2_1;
  }
  $353($0_1 + 72 | 0, $0_1 + 24 | 0, $0_1 + 40 | 0, HEAPF32[$1_1 + 24 >> 2]);
  global$0 = $4_1 + 16 | 0;
  return Math_fround(HEAPF32[$1_1 + 24 >> 2]);
 }
 
 function $765($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  if (!(HEAP32[$0_1 + 16 >> 2] & HEAP32[$1_1 + 4 >> 2])) {
   return 0
  }
  return (HEAP32[$1_1 + 8 >> 2] & HEAP32[$0_1 + 12 >> 2]) != 0 | 0;
 }
 
 function $766($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 24 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 28 >> 2] = $5_1;
  $1_1 = $1_1 + 8 | 0;
  $6_1 = HEAP32[$1_1 + 4 >> 2];
  $5_1 = $0_1 + 32 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $6_1;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0_1 + 40 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 44 >> 2] = $1_1;
  $2_1 = $2_1 + 8 | 0;
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 48 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $5_1;
  HEAP8[$0_1 + 92 | 0] = $4_1;
  HEAP32[$0_1 + 16 >> 2] = $3_1;
  HEAP32[$0_1 + 4 >> 2] = 1065353216;
  HEAP32[$0_1 + 8 >> 2] = 0;
 }
 
 function $767($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 56 | 0;
 }
 
 function $768($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  if (!HEAPU8[20840]) {
   HEAP32[5214] = 1;
   HEAP32[5215] = -1;
   HEAP32[5212] = 1065353216;
   HEAP32[5213] = 0;
   HEAP8[20884] = 1;
   HEAP32[5211] = 19616;
   HEAP32[5218] = 0;
   HEAP32[5219] = 0;
   HEAP32[5216] = 0;
   HEAP32[5220] = 0;
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[5222] = HEAP32[$0_1 >> 2];
   HEAP32[5223] = $2_1;
   $0_1 = $0_1 + 8 | 0;
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[5224] = HEAP32[$0_1 >> 2];
   HEAP32[5225] = $2_1;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[5226] = HEAP32[$1_1 >> 2];
   HEAP32[5227] = $0_1;
   $0_1 = $1_1 + 8 | 0;
   $1_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[5228] = HEAP32[$0_1 >> 2];
   HEAP32[5229] = $1_1;
   HEAP8[20936] = 1;
   HEAP8[20956] = 1;
   HEAP32[5231] = 0;
   HEAP32[5232] = 0;
   HEAP32[5236] = 0;
   HEAP32[5237] = 0;
   HEAP8[20976] = 1;
   HEAP32[5241] = 0;
   HEAP32[5242] = 0;
   HEAP8[20996] = 1;
   HEAP32[5211] = 19592;
   HEAP8[21e3] = 1;
   HEAP32[5246] = 0;
   HEAP32[5247] = 0;
   HEAP32[5214] = -1;
   HEAP32[5233] = 0;
   HEAP32[5238] = 0;
   HEAP32[5243] = 0;
   HEAP32[5248] = 0;
   $43(27);
   HEAP8[20840] = 1;
  }
  return 20844;
 }
 
 function $769($0_1) {
  $0_1 = $0_1 | 0;
  $770(20844);
 }
 
 function $770($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 19592;
  $57($0_1 + 136 | 0);
  $771($0_1);
  return $0_1 | 0;
 }
 
 function $771($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 19616;
  $57($0_1 + 116 | 0);
  $57($0_1 + 96 | 0);
  $57($0_1 + 76 | 0);
  $57($0_1 + 24 | 0);
  return $0_1 | 0;
 }
 
 function $772($0_1) {
  $0_1 = $0_1 | 0;
  $17($771($0_1));
 }
 
 function $773($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[$0_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
  $577($0_1 + 24 | 0, $1_1);
  label$1 : {
   if ($2_1) {
    $4_1 = $1_1 + 16 | 0;
    $5_1 = HEAP32[$4_1 + 4 >> 2];
    $2_1 = $3_1 + 24 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $5_1;
    $2_1 = HEAP32[$1_1 + 12 >> 2];
    HEAP32[$3_1 + 16 >> 2] = HEAP32[$1_1 + 8 >> 2];
    HEAP32[$3_1 + 20 >> 2] = $2_1;
    break label$1;
   }
   $351($3_1 + 16 | 0, HEAP32[$0_1 + 8 >> 2] + 4 | 0, HEAPF32[$1_1 + 8 >> 2], HEAPF32[$1_1 + 12 >> 2], HEAPF32[$1_1 + 16 >> 2]);
  }
  $128($0_1 + 76 | 0, $3_1 + 16 | 0);
  $353($3_1, $0_1 + 44 | 0, $0_1 + 60 | 0, HEAPF32[$1_1 + 24 >> 2]);
  $128($0_1 + 96 | 0, $3_1);
  $271($0_1 + 116 | 0, $1_1 + 24 | 0);
  global$0 = $3_1 + 32 | 0;
  return Math_fround(HEAPF32[$0_1 + 4 >> 2]);
 }
 
 function $774($0_1) {
  $0_1 = $0_1 | 0;
  $17($770($0_1));
 }
 
 function $775($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  if (!(HEAP32[$0_1 + 16 >> 2] & HEAP32[$1_1 + 4 >> 2])) {
   return 0
  }
  $2_1 = 1;
  label$2 : {
   if (HEAPU8[$0_1 + 156 | 0]) {
    break label$2
   }
   $0_1 = HEAP32[$1_1 >> 2];
   if (!$0_1) {
    break label$2
   }
   $2_1 = !(HEAPU8[$0_1 + 204 | 0] & 4);
  }
  return $2_1 | 0;
 }
 
 function $776($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[HEAP32[$1_1 >> 2] + 192 >> 2];
    if (HEAP32[$4_1 + 4 >> 2] != 31) {
     break label$2
    }
    $5_1 = HEAP32[$1_1 + 4 >> 2];
    if (!$5_1) {
     break label$2
    }
    HEAP32[$3_1 + 12 >> 2] = HEAP32[HEAP32[(HEAP32[$4_1 + 28 >> 2] + Math_imul(HEAP32[$5_1 >> 2], 80) | 0) + 64 >> 2] + 8 >> 2];
    $134($0_1 + 136 | 0, $3_1 + 12 | 0);
    break label$1;
   }
   HEAP32[$3_1 + 8 >> 2] = HEAP32[$4_1 + 8 >> 2];
   $134($0_1 + 136 | 0, $3_1 + 8 | 0);
  }
  $6_1 = $773($0_1, $1_1, $2_1);
  global$0 = $3_1 + 16 | 0;
  return Math_fround($6_1);
 }
 
 function $777($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 44 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 48 >> 2] = $5_1;
  $1_1 = $1_1 + 8 | 0;
  $6_1 = HEAP32[$1_1 + 4 >> 2];
  $5_1 = $0_1 + 52 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $6_1;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0_1 + 60 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 64 >> 2] = $1_1;
  $2_1 = $2_1 + 8 | 0;
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $0_1 + 68 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $5_1;
  HEAP8[$0_1 + 156 | 0] = $4_1;
  HEAP32[$0_1 + 16 >> 2] = $3_1;
  HEAP32[$0_1 + 4 >> 2] = 1065353216;
  HEAP32[$0_1 + 8 >> 2] = 0;
  $57($0_1 + 136 | 0);
  $57($0_1 + 116 | 0);
  $57($0_1 + 24 | 0);
  $57($0_1 + 96 | 0);
  $57($0_1 + 76 | 0);
 }
 
 function $778($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 96 | 0;
 }
 
 function $779($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 76 | 0;
 }
 
 function $780($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 136 | 0;
 }
 
 function $781($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 32 | 0;
 }
 
 function $782($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 - -64 | 0;
 }
 
 function $783($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = Math_fround(0);
  $1_1 = HEAPF32[$0_1 + 80 >> 2];
  if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
   return ~~$1_1 | 0
  }
  return -2147483648;
 }
 
 function $784($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 200 >> 2];
 }
 
 function $785($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 108 >> 2];
 }
 
 function $786($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 112 >> 2];
 }
 
 function $787($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 12 >> 2] = $1_1;
 }
 
 function $788($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 12 >> 2];
 }
 
 function $789($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1) | 0;
 }
 
 function $790($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2]]($0_1, $1_1);
 }
 
 function $791($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 32 >> 2]]($0_1, $1_1, $2_1);
 }
 
 function $792($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 4 >> 2] == 31 | 0;
 }
 
 function $793($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0);
  $1_1 = $53(60);
  $118($1_1);
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$1_1 >> 2] = 7828;
  $3_1 = HEAPF32[$0_1 >> 2];
  $4_1 = HEAPF32[$0_1 + 4 >> 2];
  $2_1 = HEAPF32[$0_1 + 8 >> 2];
  HEAP32[$1_1 + 44 >> 2] = 0;
  $5_1 = Math_fround($2_1 * HEAPF32[$1_1 + 24 >> 2]);
  $2_1 = HEAPF32[$1_1 + 48 >> 2];
  HEAPF32[$1_1 + 40 >> 2] = $5_1 - $2_1;
  HEAPF32[$1_1 + 36 >> 2] = Math_fround($4_1 * HEAPF32[$1_1 + 20 >> 2]) - $2_1;
  HEAPF32[$1_1 + 32 >> 2] = Math_fround($3_1 * HEAPF32[$1_1 + 16 >> 2]) - $2_1;
  $794($1_1, $0_1);
  return $1_1 | 0;
 }
 
 function $794($0_1, $1_1) {
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = 0;
  $2_1 = HEAPF32[$1_1 + 4 >> 2];
  $3_1 = HEAPF32[$1_1 >> 2];
  $4_1 = $2_1 > $3_1;
  $2_1 = Math_fround(HEAPF32[((HEAPF32[$1_1 + 8 >> 2] > ($4_1 ? $3_1 : $2_1) ? !$4_1 : 2) << 2) + $1_1 >> 2] * Math_fround(.10000000149011612));
  if (Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1)) > $2_1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 44 >> 2]]($0_1, $2_1)
  }
 }
 
 function $795($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0;
  $1_1 = $53(56);
  $373($1_1, $0_1);
  return $1_1 | 0;
 }
 
 function $796($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $2_1 = 0;
  $2_1 = $53(60);
  $85($2_1);
  HEAPF32[$2_1 + 48 >> 2] = $0_1;
  HEAP32[$2_1 >> 2] = 8188;
  HEAP32[$2_1 + 56 >> 2] = 1;
  HEAP32[$2_1 + 4 >> 2] = 10;
  HEAP32[$2_1 + 44 >> 2] = 0;
  HEAPF32[$2_1 + 40 >> 2] = $0_1;
  HEAPF32[$2_1 + 36 >> 2] = $1_1 * Math_fround(.5);
  HEAPF32[$2_1 + 32 >> 2] = $0_1;
  return $2_1 | 0;
 }
 
 function $797($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0);
  HEAP32[$0_1 + 16 >> 2] = 1065353216;
  HEAP32[$0_1 + 20 >> 2] = 1065353216;
  HEAP32[$0_1 + 56 >> 2] = $3_1;
  $5_1 = $0_1 + 24 | 0;
  HEAP32[$5_1 >> 2] = 1065353216;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $6_1 = $1_1;
  $4_1 = $2_1;
  label$1 : {
   label$2 : {
    switch ($3_1 | 0) {
    case 0:
     $6_1 = $2_1;
     $4_1 = $1_1;
     break label$1;
    case 1:
     break label$1;
    default:
     break label$2;
    };
   }
   $4_1 = $1_1;
   $1_1 = $2_1;
  }
  HEAPF32[$0_1 + 32 >> 2] = $6_1;
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAPF32[$0_1 + 40 >> 2] = $1_1;
  HEAPF32[$0_1 + 36 >> 2] = $4_1;
  HEAPF32[$0_1 + 48 >> 2] = HEAPF32[($0_1 + 32 | 0) + (($3_1 + 2 | 0) % 3 << 2) >> 2];
 }
 
 function $798($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = Math_fround(0), $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $1_1 = $53(60);
  $3_1 = $85($1_1);
  HEAP32[$1_1 + 56 >> 2] = 1;
  HEAP32[$1_1 >> 2] = 8352;
  $4_1 = HEAPF32[$0_1 >> 2];
  $5_1 = HEAPF32[$0_1 + 4 >> 2];
  $2_1 = HEAPF32[$0_1 + 8 >> 2];
  HEAP32[$1_1 + 44 >> 2] = 0;
  $6_1 = Math_fround($2_1 * HEAPF32[$1_1 + 24 >> 2]);
  $2_1 = HEAPF32[$1_1 + 48 >> 2];
  HEAPF32[$1_1 + 40 >> 2] = $6_1 - $2_1;
  HEAPF32[$1_1 + 36 >> 2] = Math_fround($5_1 * HEAPF32[$1_1 + 20 >> 2]) - $2_1;
  HEAPF32[$1_1 + 32 >> 2] = Math_fround($4_1 * HEAPF32[$1_1 + 16 >> 2]) - $2_1;
  $794($3_1, $0_1);
  HEAP32[$1_1 + 4 >> 2] = 13;
  return $1_1 | 0;
 }
 
 function $799($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$0_1 + 16 >> 2] = 1065353216;
  HEAP32[$0_1 + 20 >> 2] = 1065353216;
  HEAP32[$0_1 + 56 >> 2] = $3_1;
  $6_1 = $0_1 + 24 | 0;
  HEAP32[$6_1 >> 2] = 1065353216;
  HEAP32[$6_1 + 4 >> 2] = 0;
  $7_1 = $1_1;
  $5_1 = $2_1;
  label$1 : {
   label$2 : {
    switch ($3_1 | 0) {
    case 0:
     $7_1 = $2_1;
     $5_1 = $1_1;
     break label$1;
    case 1:
     break label$1;
    default:
     break label$2;
    };
   }
   $5_1 = $1_1;
   $1_1 = $2_1;
  }
  HEAPF32[$0_1 + 32 >> 2] = $7_1;
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAPF32[$0_1 + 40 >> 2] = $1_1;
  HEAPF32[$0_1 + 36 >> 2] = $5_1;
  $1_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $2_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1));
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAPF32[$4_1 + 8 >> 2] = $5_1;
  HEAPF32[$4_1 + 4 >> 2] = $2_1;
  HEAPF32[$4_1 >> 2] = $1_1;
  $405($0_1 + 32 | 0, $4_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $800($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $2_1 = 0;
  $2_1 = $53(80);
  $85($2_1);
  HEAPF32[$2_1 + 64 >> 2] = $1_1;
  HEAPF32[$2_1 + 60 >> 2] = $0_1;
  HEAP32[$2_1 >> 2] = 8516;
  HEAP32[$2_1 + 76 >> 2] = 2;
  HEAP32[$2_1 + 68 >> 2] = 0;
  HEAP32[$2_1 + 72 >> 2] = 1;
  HEAP32[$2_1 + 4 >> 2] = 11;
  HEAPF32[$2_1 + 40 >> 2] = $0_1;
  HEAPF32[$2_1 + 36 >> 2] = $1_1;
  HEAPF32[$2_1 + 32 >> 2] = $0_1;
  HEAPF32[$2_1 + 56 >> 2] = $0_1 / Math_fround(Math_sqrt(Math_fround(Math_fround($0_1 * $0_1) + Math_fround($1_1 * $1_1))));
  return $2_1 | 0;
 }
 
 function $801($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0;
  $2_1 = $53(88);
  HEAP32[$2_1 + 12 >> 2] = -1;
  HEAP32[$2_1 + 16 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 35;
  HEAP32[$2_1 + 8 >> 2] = 0;
  HEAP32[$2_1 >> 2] = 8696;
  $113($2_1 + 52 | 0, $0_1);
  HEAP32[$2_1 + 80 >> 2] = 1065353216;
  HEAP32[$2_1 + 84 >> 2] = 0;
  HEAP32[$2_1 + 72 >> 2] = 1065353216;
  HEAP32[$2_1 + 76 >> 2] = 1065353216;
  HEAPF32[$2_1 + 68 >> 2] = $1_1;
  HEAP32[$2_1 + 4 >> 2] = 28;
  return $2_1 | 0;
 }
 
 function $802($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $53(200);
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$1_1 + 12 >> 2] = -1;
  HEAP8[$1_1 + 32 | 0] = 1;
  HEAP32[$1_1 >> 2] = 8868;
  HEAP32[$1_1 + 28 >> 2] = 0;
  HEAP8[$1_1 + 112 | 0] = 1;
  HEAP32[$1_1 + 92 >> 2] = 0;
  HEAP32[$1_1 + 84 >> 2] = 1065353216;
  HEAP32[$1_1 + 88 >> 2] = 1065353216;
  HEAP32[$1_1 + 76 >> 2] = 0;
  HEAP32[$1_1 + 80 >> 2] = 1065353216;
  HEAP32[$1_1 + 68 >> 2] = 0;
  HEAP32[$1_1 + 72 >> 2] = 1;
  HEAP32[$1_1 + 60 >> 2] = -581039253;
  HEAP32[$1_1 + 64 >> 2] = 0;
  HEAP32[$1_1 + 52 >> 2] = -581039253;
  HEAP32[$1_1 + 56 >> 2] = -581039253;
  HEAP32[$1_1 + 44 >> 2] = 1566444395;
  HEAP32[$1_1 + 48 >> 2] = 0;
  HEAP32[$1_1 + 36 >> 2] = 1566444395;
  HEAP32[$1_1 + 40 >> 2] = 1566444395;
  HEAP32[$1_1 + 20 >> 2] = 0;
  HEAP32[$1_1 + 24 >> 2] = 0;
  HEAP32[$1_1 + 108 >> 2] = 0;
  HEAP32[$1_1 + 100 >> 2] = 0;
  HEAP32[$1_1 + 104 >> 2] = 0;
  HEAP8[$1_1 + 132 | 0] = 1;
  HEAP32[$1_1 + 128 >> 2] = 0;
  HEAP8[$1_1 + 152 | 0] = 1;
  HEAP32[$1_1 + 120 >> 2] = 0;
  HEAP32[$1_1 + 124 >> 2] = 0;
  HEAP32[$1_1 + 148 >> 2] = 0;
  HEAP32[$1_1 + 140 >> 2] = 0;
  HEAP32[$1_1 + 144 >> 2] = 0;
  HEAP8[$1_1 + 172 | 0] = 1;
  HEAP32[$1_1 + 168 >> 2] = 0;
  HEAP32[$1_1 + 160 >> 2] = 0;
  HEAP32[$1_1 + 164 >> 2] = 0;
  HEAP8[$1_1 + 192 | 0] = 1;
  HEAP32[$1_1 + 188 >> 2] = 0;
  HEAP32[$1_1 + 180 >> 2] = 0;
  HEAP32[$1_1 + 184 >> 2] = 0;
  HEAP8[$1_1 + 196 | 0] = 0;
  HEAP32[$1_1 + 4 >> 2] = 31;
  if ($0_1) {
   $0_1 = $53(40);
   $209($0_1);
   HEAP32[$1_1 + 68 >> 2] = $0_1;
  }
  $227($1_1 + 16 | 0, 0);
  return $1_1 | 0;
 }
 
 function $803($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 20 >> 2];
 }
 
 function $804($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = Math_fround(0);
  $3_1 = global$0 - 128 | 0;
  global$0 = $3_1;
  HEAP32[$0_1 + 72 >> 2] = HEAP32[$0_1 + 72 >> 2] + 1;
  $4_1 = $1_1 + 8 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $7_1 = $3_1 + 72 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $5_1;
  $12_1 = HEAP32[$1_1 >> 2];
  $13_1 = HEAP32[$1_1 + 4 >> 2];
  $4_1 = $1_1 + 24 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $7_1 = $3_1 + 88 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $5_1;
  $5_1 = $1_1 + 40 | 0;
  $14_1 = HEAP32[$5_1 >> 2];
  $15_1 = HEAP32[$5_1 + 4 >> 2];
  $6_1 = HEAP32[$1_1 + 32 >> 2];
  $11_1 = HEAP32[$1_1 + 36 >> 2];
  $9_1 = HEAP32[$1_1 + 16 >> 2];
  $10_1 = HEAP32[$1_1 + 20 >> 2];
  $4_1 = $1_1 + 56 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $7_1 = $3_1 + 120 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $5_1;
  $5_1 = $3_1 + 104 | 0;
  HEAP32[$5_1 >> 2] = $14_1;
  HEAP32[$5_1 + 4 >> 2] = $15_1;
  HEAP32[$3_1 + 64 >> 2] = $12_1;
  HEAP32[$3_1 + 68 >> 2] = $13_1;
  HEAP32[$3_1 + 80 >> 2] = $9_1;
  HEAP32[$3_1 + 84 >> 2] = $10_1;
  $5_1 = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$3_1 + 112 >> 2] = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$3_1 + 116 >> 2] = $5_1;
  HEAP32[$3_1 + 96 >> 2] = $6_1;
  HEAP32[$3_1 + 100 >> 2] = $11_1;
  $11_1 = HEAP32[$2_1 + 4 >> 2];
  $16_1 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 48 >> 2]]($2_1));
  FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 8 >> 2]]($2_1, $1_1, $3_1 + 48 | 0, $3_1 + 32 | 0);
  $1_1 = 0;
  label$1 : {
   while (1) {
    label$3 : {
     if (($1_1 | 0) == 12) {
      $7_1 = HEAP32[$0_1 + 68 >> 2];
      if ($7_1) {
       break label$3
      }
      $5_1 = 0;
      break label$1;
     }
     $8_1 = HEAPF32[($3_1 + 48 | 0) + $1_1 >> 2];
     $4_1 = $0_1 + $1_1 | 0;
     $5_1 = $4_1 + 36 | 0;
     if ($8_1 < HEAPF32[$5_1 >> 2]) {
      HEAPF32[$5_1 >> 2] = $8_1
     }
     $8_1 = HEAPF32[($3_1 + 32 | 0) + $1_1 >> 2];
     $5_1 = $4_1 + 52 | 0;
     if ($8_1 > HEAPF32[$5_1 >> 2]) {
      HEAPF32[$5_1 >> 2] = $8_1
     }
     $1_1 = $1_1 + 4 | 0;
     continue;
    }
    break;
   };
   $5_1 = $3_1 + 40 | 0;
   $1_1 = HEAP32[$5_1 + 4 >> 2];
   $4_1 = $3_1 + 24 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $1_1;
   $5_1 = $3_1 + 56 | 0;
   $1_1 = HEAP32[$5_1 + 4 >> 2];
   $4_1 = $3_1 + 8 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $1_1;
   $1_1 = HEAP32[$3_1 + 36 >> 2];
   HEAP32[$3_1 + 16 >> 2] = HEAP32[$3_1 + 32 >> 2];
   HEAP32[$3_1 + 20 >> 2] = $1_1;
   $1_1 = HEAP32[$3_1 + 52 >> 2];
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 + 48 >> 2];
   HEAP32[$3_1 + 4 >> 2] = $1_1;
   $5_1 = $221($7_1, $3_1, HEAP32[$0_1 + 20 >> 2]);
  }
  $1_1 = HEAP32[$0_1 + 20 >> 2];
  if (($1_1 | 0) == HEAP32[$0_1 + 24 >> 2]) {
   $227($0_1 + 16 | 0, $1_1 ? $1_1 << 1 : 1);
   $1_1 = HEAP32[$0_1 + 20 >> 2];
  }
  $6_1 = HEAP32[$0_1 + 28 >> 2] + Math_imul($1_1, 80) | 0;
  $9_1 = $3_1 + 80 | 0;
  $4_1 = $9_1;
  $1_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$6_1 + 16 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 20 >> 2] = $1_1;
  $1_1 = HEAP32[$3_1 + 68 >> 2];
  HEAP32[$6_1 >> 2] = HEAP32[$3_1 + 64 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $1_1;
  $10_1 = $3_1 + 96 | 0;
  $4_1 = $10_1;
  $1_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$6_1 + 32 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 36 >> 2] = $1_1;
  $7_1 = $3_1 + 112 | 0;
  $4_1 = $7_1;
  $1_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$6_1 + 48 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 52 >> 2] = $1_1;
  HEAP32[$6_1 + 64 >> 2] = $2_1;
  $2_1 = $3_1 + 72 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $4_1 = $6_1 + 8 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $1_1;
  $2_1 = $9_1 + 8 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $4_1 = $6_1 + 24 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $1_1;
  $2_1 = $10_1 + 8 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $4_1 = $6_1 + 40 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $1_1;
  $2_1 = $7_1 + 8 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $4_1 = $6_1 + 56 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $1_1;
  HEAP32[$6_1 + 76 >> 2] = $5_1;
  HEAPF32[$6_1 + 72 >> 2] = $16_1;
  HEAP32[$6_1 + 68 >> 2] = $11_1;
  HEAP32[$0_1 + 20 >> 2] = HEAP32[$0_1 + 20 >> 2] + 1;
  HEAP32[$3_1 >> 2] = 1056964608;
  $271($0_1 + 96 | 0, $3_1);
  HEAP32[$3_1 >> 2] = 0;
  $271($0_1 + 136 | 0, $3_1);
  HEAP32[$3_1 >> 2] = 0;
  $271($0_1 + 116 | 0, $3_1);
  HEAP32[$3_1 >> 2] = 0;
  $271($0_1 + 156 | 0, $3_1);
  HEAP32[$3_1 >> 2] = 2;
  $134($0_1 + 176 | 0, $3_1);
  global$0 = $3_1 + 128 | 0;
 }
 
 function $805($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $241($0_1, $1_1);
 }
 
 function $806($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  $1_1 = $1_1 << 2;
  HEAPF32[$1_1 + HEAP32[$0_1 + 108 >> 2] >> 2] = $2_1;
  HEAPF32[$1_1 + HEAP32[$0_1 + 148 >> 2] >> 2] = $3_1;
  HEAPF32[$1_1 + HEAP32[$0_1 + 128 >> 2] >> 2] = $4_1;
  HEAP8[$0_1 + 196 | 0] = 1;
  HEAP32[$1_1 + HEAP32[$0_1 + 188 >> 2] >> 2] = 2;
  HEAP32[$1_1 + HEAP32[$0_1 + 168 >> 2] >> 2] = 0;
 }
 
 function $807($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[(HEAP32[$0_1 + 28 >> 2] + Math_imul($1_1, 80) | 0) + 64 >> 2];
 }
 
 function $808($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $232($0_1, $1_1, $2_1, $3_1);
 }
 
 function $809() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $0_1 = $53(172);
  HEAP8[$0_1 + 36 | 0] = 1;
  HEAP32[$0_1 + 12 >> 2] = 1065353216;
  HEAP32[$0_1 + 16 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 1065353216;
  HEAP32[$0_1 + 8 >> 2] = 1065353216;
  HEAP32[$0_1 + 32 >> 2] = 0;
  HEAP32[$0_1 + 48 >> 2] = 0;
  HEAP32[$0_1 + 24 >> 2] = 0;
  HEAP32[$0_1 + 28 >> 2] = 0;
  HEAP8[$0_1 + 100 | 0] = 1;
  HEAP32[$0_1 >> 2] = 9404;
  HEAP32[$0_1 + 96 >> 2] = 0;
  HEAP8[$0_1 + 120 | 0] = 1;
  HEAP32[$0_1 + 88 >> 2] = 0;
  HEAP32[$0_1 + 92 >> 2] = 0;
  HEAP32[$0_1 + 116 >> 2] = 0;
  HEAP8[$0_1 + 140 | 0] = 1;
  HEAP32[$0_1 + 108 >> 2] = 0;
  HEAP32[$0_1 + 112 >> 2] = 0;
  HEAP32[$0_1 + 136 >> 2] = 0;
  HEAP32[$0_1 + 128 >> 2] = 0;
  HEAP32[$0_1 + 132 >> 2] = 0;
  HEAP8[$0_1 + 160 | 0] = 1;
  HEAP32[$0_1 + 168 >> 2] = 0;
  HEAP32[$0_1 + 156 >> 2] = 0;
  HEAP32[$0_1 + 148 >> 2] = 0;
  HEAP32[$0_1 + 152 >> 2] = 0;
  HEAP16[$0_1 + 164 >> 1] = 257;
  $2_1 = $53(32);
  $1_1 = HEAP32[$0_1 + 24 >> 2];
  $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
  $9_1 = $0_1 + 20 | 0;
  while (1) {
   if ($1_1) {
    $6_1 = HEAP32[$0_1 + 32 >> 2] + $5_1 | 0;
    $3_1 = $6_1;
    $7_1 = HEAP32[$3_1 + 4 >> 2];
    $4_1 = $2_1 + $5_1 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $7_1;
    $3_1 = $3_1 + 24 | 0;
    $7_1 = HEAP32[$3_1 + 4 >> 2];
    $8_1 = $4_1 + 24 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$3_1 >> 2];
    HEAP32[$8_1 + 4 >> 2] = $7_1;
    $8_1 = $6_1 + 16 | 0;
    $7_1 = HEAP32[$8_1 + 4 >> 2];
    $3_1 = $4_1 + 16 | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$8_1 >> 2];
    HEAP32[$3_1 + 4 >> 2] = $7_1;
    $6_1 = $6_1 + 8 | 0;
    $3_1 = HEAP32[$6_1 + 4 >> 2];
    $4_1 = $4_1 + 8 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $3_1;
    $1_1 = $1_1 - 1 | 0;
    $5_1 = $5_1 + 32 | 0;
    continue;
   }
   break;
  };
  $96($9_1);
  HEAP32[$0_1 + 32 >> 2] = $2_1;
  HEAP8[$0_1 + 36 | 0] = 1;
  HEAP32[$0_1 + 28 >> 2] = 1;
  $1_1 = $2_1 + (HEAP32[$0_1 + 24 >> 2] << 5) | 0;
  HEAP32[$1_1 + 24 >> 2] = 2;
  HEAP32[$1_1 + 28 >> 2] = 0;
  HEAP32[$1_1 + 16 >> 2] = 0;
  HEAP32[$1_1 + 20 >> 2] = 16;
  HEAP32[$1_1 + 8 >> 2] = 12;
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 24 >> 2] = HEAP32[$0_1 + 24 >> 2] + 1;
  $2_1 = HEAP32[$0_1 + 32 >> 2];
  HEAP32[$2_1 + 4 >> 2] = 0;
  $5_1 = HEAPU8[$0_1 + 164 | 0];
  HEAP32[$2_1 + 24 >> 2] = $5_1 ? 2 : 3;
  $4_1 = HEAP32[($5_1 ? 128 : 148) + $0_1 >> 2];
  $1_1 = 12;
  HEAP32[$2_1 + 8 >> 2] = $5_1 ? 12 : 6;
  HEAP32[$2_1 >> 2] = ($4_1 | 0) / 3;
  label$3 : {
   if (HEAPU8[$0_1 + 165 | 0]) {
    $1_1 = 16;
    $5_1 = HEAP32[$0_1 + 88 >> 2];
    break label$3;
   }
   $5_1 = HEAP32[$0_1 + 108 >> 2] / 3 | 0;
  }
  HEAP32[$2_1 + 20 >> 2] = $1_1;
  HEAP32[$2_1 + 16 >> 2] = 0;
  HEAP32[$2_1 + 12 >> 2] = $5_1;
  return $0_1 | 0;
 }
 
 function $810($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = HEAP32[$0_1 + 32 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + 1;
  $269($0_1, $270($0_1, $1_1, $4_1));
  $269($0_1, $270($0_1, $2_1, $4_1));
  $269($0_1, $270($0_1, $3_1, $4_1));
 }
 
 function $811($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = $53(80);
  HEAP32[$3_1 + 12 >> 2] = -1;
  HEAP32[$3_1 + 16 >> 2] = 0;
  HEAP32[$3_1 + 4 >> 2] = 21;
  HEAP32[$3_1 + 8 >> 2] = 0;
  HEAP32[$3_1 >> 2] = 9504;
  HEAP32[$3_1 + 52 >> 2] = $0_1;
  label$1 : {
   if (FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 40 >> 2]]($0_1) | 0) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 48 >> 2]]($0_1, $3_1 + 20 | 0, $3_1 + 36 | 0);
    break label$1;
   }
   $272($3_1);
  }
  HEAP8[$3_1 + 65 | 0] = 0;
  HEAP8[$3_1 + 64 | 0] = $1_1;
  HEAP32[$3_1 + 56 >> 2] = 0;
  HEAP32[$3_1 + 60 >> 2] = 0;
  HEAP32[$3_1 >> 2] = 10308;
  HEAP32[$3_1 + 4 >> 2] = 21;
  if ($2_1) {
   $318($3_1)
  }
  return $3_1 | 0;
 }
 
 function $812() {
  if (!HEAPU8[21004]) {
   HEAP32[5255] = -1;
   HEAP32[5256] = 0;
   HEAP32[5253] = 27;
   HEAP32[5254] = 0;
   HEAP32[5252] = 10940;
   HEAP8[21004] = 1;
  }
  return 21008;
 }
 
 function $813() {
  var $0_1 = 0;
  if (!HEAPU8[21044]) {
   HEAP32[5262] = 13800;
   $0_1 = $53(4);
   HEAP32[5268] = $0_1;
   HEAP32[$0_1 >> 2] = 13688;
   $0_1 = $53(20);
   HEAP8[$0_1 + 4 | 0] = 0;
   HEAP32[$0_1 + 12 >> 2] = 0;
   HEAP32[$0_1 + 16 >> 2] = 3;
   HEAP32[$0_1 >> 2] = 11568;
   HEAP32[5269] = $0_1;
   HEAP32[$0_1 + 8 >> 2] = HEAP32[5268];
   $0_1 = $53(8);
   HEAP32[$0_1 >> 2] = 13832;
   HEAP8[$0_1 + 4 | 0] = 0;
   HEAP32[5270] = $0_1;
   $0_1 = $53(8);
   HEAP32[$0_1 >> 2] = 13852;
   HEAP8[$0_1 + 4 | 0] = 0;
   HEAP32[5271] = $0_1;
   $0_1 = $53(8);
   HEAP32[$0_1 >> 2] = 13872;
   HEAP8[$0_1 + 4 | 0] = 0;
   HEAP32[5272] = $0_1;
   $0_1 = $53(8);
   HEAP32[$0_1 >> 2] = 13892;
   HEAP8[$0_1 + 4 | 0] = 0;
   HEAP32[5273] = $0_1;
   $0_1 = $53(8);
   HEAP32[$0_1 >> 2] = 13912;
   HEAP8[$0_1 + 4 | 0] = 0;
   HEAP32[5274] = $0_1;
   $0_1 = $53(8);
   HEAP32[$0_1 >> 2] = 13932;
   HEAP8[$0_1 + 4 | 0] = 0;
   HEAP32[5275] = $0_1;
   $0_1 = $53(8);
   HEAP32[$0_1 >> 2] = 13952;
   HEAP8[$0_1 + 4 | 0] = 0;
   HEAP32[5276] = $0_1;
   $0_1 = $53(8);
   HEAP32[$0_1 >> 2] = 13972;
   HEAP8[$0_1 + 4 | 0] = 0;
   HEAP32[5280] = $0_1;
   $0_1 = $53(8);
   HEAP32[5281] = $0_1;
   HEAP32[$0_1 >> 2] = 13972;
   HEAP8[$0_1 + 4 | 0] = 1;
   $0_1 = $53(8);
   HEAP32[$0_1 >> 2] = 13992;
   HEAP8[$0_1 + 4 | 0] = 0;
   HEAP32[5279] = $0_1;
   $0_1 = $53(16);
   HEAP32[$0_1 + 8 >> 2] = 1;
   HEAP32[$0_1 + 12 >> 2] = 0;
   HEAP32[$0_1 >> 2] = 14012;
   HEAP8[$0_1 + 4 | 0] = 0;
   HEAP32[5283] = $0_1;
   $0_1 = $53(16);
   HEAP32[$0_1 + 8 >> 2] = 1;
   HEAP32[$0_1 + 12 >> 2] = 0;
   HEAP32[$0_1 >> 2] = 14012;
   HEAP32[5282] = $0_1;
   HEAP8[$0_1 + 4 | 0] = 1;
   HEAP8[21060] = 1;
   $0_1 = $53(24);
   $474($0_1, 868);
   HEAP8[21068] = 1;
   HEAP32[5264] = $0_1;
   $0_1 = $53(24);
   $474($0_1, 128);
   HEAP32[5266] = $0_1;
   $43(28);
   HEAP8[21044] = 1;
  }
  return 21048;
 }
 
 function $814($0_1) {
  $0_1 = $0_1 | 0;
  $485(21048);
 }
 
 function $815($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 836 >> 2];
 }
 
 function $816($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 840 >> 2];
 }
 
 function $817($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 844 >> 2];
 }
 
 function $818($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (Math_imul($1_1, 208) + $0_1 | 0) + 4 | 0;
 }
 
 function $819($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 36 >> 2]]($0_1) | 0;
 }
 
 function $820($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 40 >> 2]]($0_1, $1_1) | 0;
 }
 
 function $821($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = $16(10448);
  $813();
  HEAP8[$1_1 + 24 | 0] = 1;
  HEAP32[$1_1 + 4 >> 2] = 2;
  HEAP32[$1_1 >> 2] = 14804;
  HEAP32[$1_1 + 20 >> 2] = 0;
  HEAP32[$1_1 + 10444 >> 2] = 21048;
  HEAP32[$1_1 + 60 >> 2] = 0;
  HEAP32[$1_1 + 28 >> 2] = 11372;
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAP32[$1_1 + 16 >> 2] = 0;
  HEAP32[$1_1 + 64 >> 2] = 29;
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[5262] + 12 >> 2]](21048) | 0), HEAP32[wasm2js_i32$0 + 68 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[5262] + 8 >> 2]](21048) | 0), HEAP32[wasm2js_i32$0 + 72 >> 2] = wasm2js_i32$1;
  $5_1 = $1_1 + 5260 | 0;
  label$1 : while (1) {
   if (($4_1 | 0) != 36) {
    $2_1 = 0;
    $0_1 = $5_1;
    while (1) if (($2_1 | 0) == 36) {
     $5_1 = $5_1 + 144 | 0;
     $4_1 = $4_1 + 1 | 0;
     continue label$1;
    } else {
     $3_1 = HEAP32[$1_1 + 10444 >> 2];
     (wasm2js_i32$0 = $0_1 - 5184 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 16 >> 2]]($3_1, $4_1, $2_1) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $3_1 = HEAP32[$1_1 + 10444 >> 2];
     (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 20 >> 2]]($3_1, $4_1, $2_1) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $0_1 = $0_1 + 4 | 0;
     $2_1 = $2_1 + 1 | 0;
     continue;
    };
   }
   break;
  };
  return $1_1 | 0;
 }
 
 function $822() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $1_1 = $16(176);
  HEAP32[$1_1 >> 2] = 15500;
  $2_1 = $1_1 + 84 | 0;
  $0_1 = $1_1 + 4 | 0;
  while (1) {
   $4_1 = $209($0_1);
   $0_1 = $0_1 + 40 | 0;
   if (($2_1 | 0) != ($4_1 + 40 | 0)) {
    continue
   }
   break;
  };
  HEAP32[$1_1 + 168 >> 2] = 0;
  HEAP8[$1_1 + 172 | 0] = 1;
  HEAP32[$1_1 + 160 >> 2] = 0;
  HEAP32[$1_1 + 164 >> 2] = 0;
  HEAP8[$1_1 + 154 | 0] = 1;
  HEAP16[$1_1 + 152 >> 1] = 1;
  HEAP32[$1_1 + 124 >> 2] = 0;
  HEAP32[$1_1 + 100 >> 2] = 0;
  HEAP32[$1_1 + 104 >> 2] = 0;
  HEAP32[$1_1 + 136 >> 2] = 0;
  HEAP32[$1_1 + 128 >> 2] = 0;
  HEAP32[$1_1 + 132 >> 2] = 0;
  HEAP32[$1_1 + 116 >> 2] = 10;
  HEAP32[$1_1 + 120 >> 2] = 1;
  HEAP32[$1_1 + 108 >> 2] = 1;
  HEAP32[$1_1 + 112 >> 2] = 0;
  $0_1 = $53(72);
  HEAP8[$0_1 + 20 | 0] = 1;
  HEAP32[$0_1 >> 2] = 15e3;
  HEAP32[$0_1 + 16 >> 2] = 0;
  HEAP8[$0_1 + 44 | 0] = 1;
  HEAP32[$0_1 + 24 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP32[$0_1 + 40 >> 2] = 0;
  HEAP8[$0_1 + 64 | 0] = 1;
  HEAP32[$0_1 + 32 >> 2] = 0;
  HEAP32[$0_1 + 36 >> 2] = 0;
  HEAP32[$0_1 + 60 >> 2] = 0;
  HEAP32[$0_1 + 68 >> 2] = 0;
  HEAP32[$0_1 + 52 >> 2] = 0;
  HEAP32[$0_1 + 56 >> 2] = 0;
  $515($0_1 + 4 | 0, 2);
  $510($0_1);
  HEAP32[$1_1 + 148 >> 2] = 0;
  HEAP32[$1_1 + 96 >> 2] = $0_1;
  HEAP32[$1_1 + 140 >> 2] = 0;
  HEAP32[$1_1 + 144 >> 2] = 0;
  $0_1 = 0;
  while (1) {
   if (($0_1 | 0) == 12) {
    label$4 : {
     HEAP32[$3_1 + 20 >> 2] = 0;
     HEAP8[$3_1 + 24 | 0] = 1;
     HEAP32[$3_1 + 12 >> 2] = 0;
     HEAP32[$3_1 + 16 >> 2] = 0;
     $4_1 = HEAP32[$1_1 + 160 >> 2];
     if (($4_1 | 0) >= 2) {
      $0_1 = $4_1 - 1 | 0;
      $2_1 = 20;
      while (1) {
       if (!$0_1) {
        break label$4
       }
       $57(HEAP32[$1_1 + 168 >> 2] + $2_1 | 0);
       $0_1 = $0_1 - 1 | 0;
       $2_1 = $2_1 + 20 | 0;
       continue;
      };
     }
     label$7 : {
      if (($4_1 | 0) == 1) {
       break label$7
      }
      $0_1 = 0;
      if (HEAP32[$1_1 + 164 >> 2] > 0) {
       break label$7
      }
      $5_1 = $1_1 + 156 | 0;
      $6_1 = $53(20);
      $2_1 = HEAP32[$1_1 + 160 >> 2];
      $2_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
      while (1) {
       if ($2_1) {
        $530($0_1 + $6_1 | 0, HEAP32[$1_1 + 168 >> 2] + $0_1 | 0);
        $2_1 = $2_1 - 1 | 0;
        $0_1 = $0_1 + 20 | 0;
        continue;
       }
       break;
      };
      $531($5_1, HEAP32[$1_1 + 160 >> 2]);
      $96($5_1);
      HEAP32[$1_1 + 168 >> 2] = $6_1;
      HEAP8[$1_1 + 172 | 0] = 1;
      HEAP32[$1_1 + 164 >> 2] = 1;
     }
     $0_1 = $4_1 - 1 | 0;
     $2_1 = Math_imul($4_1, 20);
     while (1) {
      if (!$0_1) {
       break label$4
      }
      $530(HEAP32[$1_1 + 168 >> 2] + $2_1 | 0, $3_1 + 8 | 0);
      $0_1 = $0_1 + 1 | 0;
      $2_1 = $2_1 + 20 | 0;
      continue;
     };
    }
   } else {
    HEAP32[$0_1 + $2_1 >> 2] = 0;
    $0_1 = $0_1 + 4 | 0;
    continue;
   }
   break;
  };
  HEAP32[$1_1 + 160 >> 2] = 1;
  $57($3_1 + 8 | 0);
  global$0 = $3_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $823($0_1, $1_1, $2_1, $3_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = $16(144);
  $824($4_1, $0_1, $1_1, $2_1, $3_1);
  return $4_1 | 0;
 }
 
 function $824($0_1, $1_1, $2_1, $3_1, $4_1) {
  HEAP32[$0_1 + 72 >> 2] = $3_1;
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  HEAPF32[$0_1 >> 2] = $1_1;
  $2_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$0_1 + 76 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$0_1 + 80 >> 2] = $2_1;
  $3_1 = $4_1 + 8 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $0_1 + 84 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  HEAP32[$0_1 + 136 >> 2] = 1008981770;
  HEAP32[$0_1 + 140 >> 2] = 1008981770;
  HEAP32[$0_1 + 128 >> 2] = 1000593162;
  HEAP32[$0_1 + 132 >> 2] = 1008981770;
  HEAP8[$0_1 + 124 | 0] = 0;
  HEAP32[$0_1 + 116 >> 2] = 1061997773;
  HEAP32[$0_1 + 120 >> 2] = 1065353216;
  HEAP32[$0_1 + 108 >> 2] = 0;
  HEAP32[$0_1 + 112 >> 2] = 0;
  HEAP32[$0_1 + 100 >> 2] = 1056964608;
  HEAP32[$0_1 + 104 >> 2] = 0;
  HEAP32[$0_1 + 92 >> 2] = 0;
  HEAP32[$0_1 + 96 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = 1065353216;
  $2_1 = $0_1 + 12 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0_1 + 20 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 28 >> 2] = 1065353216;
  $2_1 = $0_1 + 40 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0_1 + 32 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 48 >> 2] = 1065353216;
  $2_1 = $0_1 + 52 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0_1 + 60 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 68 >> 2] = 0;
 }
 
 function $825($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  if (!HEAPU8[21136]) {
   if (!HEAPU8[21004]) {
    HEAP32[5255] = -1;
    HEAP32[5256] = 0;
    HEAP32[5253] = 27;
    HEAP32[5254] = 0;
    HEAP32[5252] = 10940;
    HEAP8[21004] = 1;
   }
   $2_1 = $5_1 + 8 | 0;
   HEAP32[$2_1 >> 2] = 0;
   HEAP32[$2_1 + 4 >> 2] = 0;
   HEAP32[$5_1 >> 2] = 0;
   HEAP32[$5_1 + 4 >> 2] = 0;
   $824(21140, $0_1, $1_1, 21008, $5_1);
   HEAP8[21136] = 1;
  }
  $1_1 = $53(676);
  $6_1 = $55($1_1);
  HEAP8[$1_1 + 560 | 0] = 1;
  HEAP32[$1_1 >> 2] = 15844;
  HEAP32[$1_1 + 556 >> 2] = 0;
  HEAP32[$1_1 + 548 >> 2] = 0;
  HEAP32[$1_1 + 552 >> 2] = 0;
  HEAP32[$1_1 + 372 >> 2] = 0;
  HEAP32[$1_1 + 376 >> 2] = 0;
  HEAP32[$1_1 + 252 >> 2] = 2;
  $2_1 = $1_1 + 380 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $1_1 + 388 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $1_1 + 396 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$1_1 + 612 >> 2] = 1065353216;
  HEAP32[$1_1 + 616 >> 2] = 0;
  HEAP32[$1_1 + 604 >> 2] = 1065353216;
  HEAP32[$1_1 + 608 >> 2] = 1065353216;
  HEAP32[$1_1 + 416 >> 2] = 1065353216;
  HEAP32[$1_1 + 408 >> 2] = 1065353216;
  HEAP32[$1_1 + 412 >> 2] = 1065353216;
  $1($1_1 + 420 | 0, 0, 36);
  $2_1 = $1_1 + 496 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $1_1 + 488 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $1_1 + 480 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$1_1 + 472 >> 2] = 0;
  HEAP32[$1_1 + 476 >> 2] = 0;
  $554($1_1, HEAPF32[5308], HEAPF32[5309]);
  HEAP32[$1_1 + 668 >> 2] = 0;
  HEAP32[$1_1 + 672 >> 2] = 0;
  $2_1 = HEAP32[5315];
  HEAP32[$1_1 + 532 >> 2] = HEAP32[5314];
  HEAP32[$1_1 + 536 >> 2] = $2_1;
  $3_1 = HEAP32[5286];
  HEAP32[$1_1 + 540 >> 2] = $3_1;
  HEAP8[$1_1 + 512 | 0] = HEAPU8[21264];
  $2_1 = HEAP32[5318];
  HEAP32[$1_1 + 516 >> 2] = HEAP32[5317];
  HEAP32[$1_1 + 520 >> 2] = $2_1;
  $2_1 = HEAP32[5320];
  HEAP32[$1_1 + 524 >> 2] = HEAP32[5319];
  HEAP32[$1_1 + 528 >> 2] = $2_1;
  $2_1 = $1_1 + 4 | 0;
  label$3 : {
   if ($3_1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$3_1 >> 2] + 8 >> 2]]($3_1, $2_1);
    break label$3;
   }
   $4_1 = HEAP32[5290];
   $3_1 = $2_1 + 8 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[5289];
   HEAP32[$3_1 + 4 >> 2] = $4_1;
   $3_1 = HEAP32[5288];
   HEAP32[$2_1 >> 2] = HEAP32[5287];
   HEAP32[$2_1 + 4 >> 2] = $3_1;
   $4_1 = HEAP32[5294];
   $3_1 = $1_1 + 28 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[5293];
   HEAP32[$3_1 + 4 >> 2] = $4_1;
   $3_1 = HEAP32[5292];
   HEAP32[$1_1 + 20 >> 2] = HEAP32[5291];
   HEAP32[$1_1 + 24 >> 2] = $3_1;
   $3_1 = HEAP32[5296];
   HEAP32[$1_1 + 36 >> 2] = HEAP32[5295];
   HEAP32[$1_1 + 40 >> 2] = $3_1;
   $4_1 = HEAP32[5298];
   $3_1 = $1_1 + 44 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[5297];
   HEAP32[$3_1 + 4 >> 2] = $4_1;
   $3_1 = HEAP32[5300];
   HEAP32[$1_1 + 52 >> 2] = HEAP32[5299];
   HEAP32[$1_1 + 56 >> 2] = $3_1;
   $4_1 = HEAP32[5302];
   $3_1 = $1_1 + 60 | 0;
   HEAP32[$3_1 >> 2] = HEAP32[5301];
   HEAP32[$3_1 + 4 >> 2] = $4_1;
  }
  $3_1 = HEAP32[$1_1 + 24 >> 2];
  HEAP32[$1_1 + 84 >> 2] = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$1_1 + 88 >> 2] = $3_1;
  $3_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$1_1 + 68 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 72 >> 2] = $3_1;
  $3_1 = HEAP32[$1_1 + 40 >> 2];
  HEAP32[$1_1 + 100 >> 2] = HEAP32[$1_1 + 36 >> 2];
  HEAP32[$1_1 + 104 >> 2] = $3_1;
  $2_1 = $2_1 + 8 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  $3_1 = $1_1 + 76 | 0;
  HEAP32[$3_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3_1 + 4 >> 2] = $4_1;
  $3_1 = $1_1 + 28 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $1_1 + 92 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  $3_1 = $1_1 + 44 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $1_1 + 108 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  HEAP32[$1_1 + 132 >> 2] = 0;
  HEAP32[$1_1 + 136 >> 2] = 0;
  $2_1 = HEAP32[$1_1 + 56 >> 2];
  HEAP32[$1_1 + 116 >> 2] = HEAP32[$1_1 + 52 >> 2];
  HEAP32[$1_1 + 120 >> 2] = $2_1;
  $2_1 = $1_1 + 156 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $1_1 + 148 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $1_1 + 140 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $3_1 = $1_1 + 60 | 0;
  $4_1 = HEAP32[$3_1 + 4 >> 2];
  $2_1 = $1_1 + 124 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  HEAPF32[$1_1 + 228 >> 2] = HEAPF32[5310];
  HEAPF32[$1_1 + 236 >> 2] = HEAPF32[5311];
  HEAPF32[$1_1 + 240 >> 2] = HEAPF32[5312];
  HEAPF32[$1_1 + 232 >> 2] = HEAPF32[5313];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($6_1, HEAP32[5303]);
  $2_1 = HEAP32[5180];
  HEAP32[$1_1 + 568 >> 2] = $2_1;
  HEAP32[5180] = $2_1 + 1;
  $555($1_1, HEAPF32[5285], 21216);
  $556($1_1);
  HEAP32[$1_1 + 572 >> 2] = 0;
  HEAP32[$1_1 + 576 >> 2] = 0;
  HEAP32[$1_1 + 564 >> 2] = 8;
  $2_1 = $1_1 + 580 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $1_1 + 588 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $1_1 + 596 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $0_1 = HEAPF32[$1_1 + 404 >> 2];
  HEAPF32[$1_1 + 628 >> 2] = $0_1 * HEAPF32[$1_1 + 416 >> 2];
  HEAPF32[$1_1 + 624 >> 2] = $0_1 * HEAPF32[$1_1 + 412 >> 2];
  HEAPF32[$1_1 + 620 >> 2] = $0_1 * HEAPF32[$1_1 + 408 >> 2];
  $1($1_1 + 632 | 0, 0, 36);
  global$0 = $5_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $826($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $570($0_1, $1_1);
 }
 
 function $827($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  HEAPF32[$0_1 + 536 >> 2] = $2_1;
  HEAPF32[$0_1 + 532 >> 2] = $1_1;
 }
 
 function $828($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[$0_1 + 532 >> 2]);
 }
 
 function $829($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[$0_1 + 536 >> 2]);
 }
 
 function $830($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $554($0_1, $1_1, $2_1);
 }
 
 function $831($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0;
  HEAP32[5323] = 1070945621;
  HEAP32[5324] = 0;
  HEAP32[5321] = 1070945621;
  HEAP32[5322] = 1070945621;
  $2_1 = HEAP32[$0_1 + 192 >> 2];
  label$1 : {
   if (HEAP32[$2_1 + 4 >> 2] == 31) {
    if (!HEAP32[$2_1 + 20 >> 2]) {
     break label$1
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 32 >> 2]]($2_1, $1_1, 21284);
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 32 >> 2]]($2_1, $1_1, 21284);
  }
  $555($0_1, $1_1, 21284);
 }
 
 function $832($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = Math_fround(0), $4_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 408 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 412 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $0_1 + 416 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $4_1;
  HEAP32[$0_1 + 632 >> 2] = 0;
  $3_1 = HEAPF32[$0_1 + 404 >> 2];
  HEAPF32[$0_1 + 624 >> 2] = $3_1 * HEAPF32[$0_1 + 412 >> 2];
  HEAPF32[$0_1 + 620 >> 2] = $3_1 * HEAPF32[$0_1 + 408 >> 2];
  HEAPF32[$0_1 + 628 >> 2] = $3_1 * HEAPF32[$2_1 >> 2];
 }
 
 function $833($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  HEAP32[$0_1 + 304 >> 2] = HEAP32[$0_1 + 304 >> 2] + 1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 604 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 608 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 612 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $834($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 372 | 0;
 }
 
 function $835($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 388 | 0;
 }
 
 function $836($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  HEAP32[$0_1 + 304 >> 2] = HEAP32[$0_1 + 304 >> 2] + 1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 372 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 376 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 380 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $837($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  HEAP32[$0_1 + 304 >> 2] = HEAP32[$0_1 + 304 >> 2] + 1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 388 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 392 >> 2] = $2_1;
  $1_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 396 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $838($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 440 | 0;
 }
 
 function $839($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $567($0_1, $1_1);
 }
 
 function $840($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $841($0_1, HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2]);
 }
 
 function $841($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAPF32[$4_1 >> 2] = HEAPF32[$0_1 + 604 >> 2] * $1_1;
  HEAPF32[$4_1 + 8 >> 2] = HEAPF32[$0_1 + 612 >> 2] * $3_1;
  HEAPF32[$4_1 + 4 >> 2] = HEAPF32[$0_1 + 608 >> 2] * $2_1;
  $89($0_1 + 488 | 0, $4_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $842($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $1_1 + 4 | 0;
  $5_1 = $1_1 + 8 | 0;
  $569($0_1, HEAPF32[$1_1 >> 2], HEAPF32[$4_1 >> 2], HEAPF32[$5_1 >> 2]);
  $129($3_1, HEAPF32[$2_1 >> 2], HEAPF32[$2_1 + 4 >> 2], HEAPF32[$2_1 + 8 >> 2], Math_fround(HEAPF32[$1_1 >> 2] * HEAPF32[$0_1 + 408 >> 2]), Math_fround(HEAPF32[$4_1 >> 2] * HEAPF32[$0_1 + 412 >> 2]), Math_fround(HEAPF32[$5_1 >> 2] * HEAPF32[$0_1 + 416 >> 2]));
  $841($0_1, HEAPF32[$3_1 >> 2], HEAPF32[$3_1 + 4 >> 2], HEAPF32[$3_1 + 8 >> 2]);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $843($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $569($0_1, HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2]);
 }
 
 function $844($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $845($0_1, HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2]);
 }
 
 function $845($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $351($4_1, $0_1 + 324 | 0, $1_1, $2_1, $3_1);
  HEAP32[$4_1 + 28 >> 2] = 0;
  HEAPF32[$4_1 + 24 >> 2] = HEAPF32[$4_1 + 8 >> 2] * HEAPF32[$0_1 + 612 >> 2];
  HEAPF32[$4_1 + 20 >> 2] = HEAPF32[$4_1 + 4 >> 2] * HEAPF32[$0_1 + 608 >> 2];
  HEAPF32[$4_1 + 16 >> 2] = HEAPF32[$4_1 >> 2] * HEAPF32[$0_1 + 604 >> 2];
  $89($0_1 + 388 | 0, $4_1 + 16 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $846($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $691($0_1, $1_1, $2_1);
 }
 
 function $847($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $5_1 = Math_fround(HEAPF32[$0_1 + 408 >> 2] * $1_1);
  $1_1 = HEAPF32[$0_1 + 404 >> 2];
  HEAPF32[$4_1 >> 2] = $5_1 * $1_1;
  HEAPF32[$4_1 + 8 >> 2] = $1_1 * Math_fround(HEAPF32[$0_1 + 416 >> 2] * $3_1);
  HEAPF32[$4_1 + 4 >> 2] = $1_1 * Math_fround(HEAPF32[$0_1 + 412 >> 2] * $2_1);
  $89($0_1 + 372 | 0, $4_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $848($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $847($0_1, HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2]);
 }
 
 function $849($0_1) {
  $0_1 = $0_1 | 0;
  $556($0_1);
 }
 
 function $850($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 472 | 0;
 }
 
 function $851($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 488 | 0;
 }
 
 function $852($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 564 >> 2];
 }
 
 function $853($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 + 564 >> 2] = $1_1;
 }
 
 function $854($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 + 472 >> 2] = 0;
  HEAP32[$0_1 + 476 >> 2] = 0;
  $1_1 = $0_1 + 496 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 488 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $0_1 = $0_1 + 480 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
 }
 
 function $855($0_1) {
  $0_1 = $0_1 | 0;
  return $696($0_1) | 0;
 }
 
 function $856($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 + 372 >> 2] = 0;
  HEAP32[$0_1 + 376 >> 2] = 0;
  HEAP32[$0_1 + 472 >> 2] = 0;
  HEAP32[$0_1 + 476 >> 2] = 0;
  $1_1 = $0_1 + 396 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 388 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 380 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 480 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 488 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $0_1 = $0_1 + 496 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
 }
 
 function $857() {
  var $0_1 = 0;
  $0_1 = $53(236);
  $580($0_1);
  return $0_1 | 0;
 }
 
 function $858($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 + 16 | 0];
 }
 
 function $859($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0_1 + 16 | 0] = $1_1;
 }
 
 function $860($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 32 >> 2]]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $861($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 28 | 0;
 }
 
 function $862($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 36 >> 2]]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $863($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 40 >> 2]]($0_1, $1_1);
 }
 
 function $864($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $647($0_1, $1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $865($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 92 | 0;
 }
 
 function $866($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $3_1 = $53(372);
  HEAP32[$3_1 + 16 >> 2] = 0;
  HEAP8[$3_1 + 20 | 0] = 1;
  HEAP32[$3_1 + 116 >> 2] = 1101004800;
  HEAP32[$3_1 + 108 >> 2] = 0;
  HEAP32[$3_1 + 100 >> 2] = 1050253722;
  HEAP32[$3_1 + 104 >> 2] = 1015580809;
  HEAP32[$3_1 + 92 >> 2] = 1058642330;
  HEAP32[$3_1 + 96 >> 2] = 1065353216;
  HEAP32[$3_1 + 88 >> 2] = 0;
  HEAP32[$3_1 + 80 >> 2] = 0;
  HEAP32[$3_1 + 84 >> 2] = 0;
  HEAP8[$3_1 + 76 | 0] = 1;
  HEAP32[$3_1 + 72 >> 2] = 0;
  HEAP32[$3_1 + 68 >> 2] = $1_1;
  HEAP32[$3_1 + 64 >> 2] = 0;
  HEAP8[$3_1 + 60 | 0] = 0;
  HEAP32[$3_1 + 56 >> 2] = 1025758986;
  HEAP8[$3_1 + 54 | 0] = 1;
  HEAP16[$3_1 + 52 >> 1] = 256;
  HEAP32[$3_1 + 48 >> 2] = 0;
  HEAP8[$3_1 + 44 | 0] = 1;
  HEAP32[$3_1 + 36 >> 2] = 1;
  HEAP32[$3_1 + 40 >> 2] = 1065353216;
  HEAP32[$3_1 + 28 >> 2] = 0;
  HEAP32[$3_1 + 32 >> 2] = 0;
  HEAP32[$3_1 + 24 >> 2] = $0_1;
  HEAP32[$3_1 + 8 >> 2] = 0;
  HEAP32[$3_1 + 12 >> 2] = 0;
  HEAP32[$3_1 + 132 >> 2] = 0;
  HEAP32[$3_1 + 136 >> 2] = 1045220557;
  HEAP32[$3_1 + 124 >> 2] = 1045220557;
  HEAP32[$3_1 + 128 >> 2] = 1045220557;
  HEAP32[$3_1 + 112 >> 2] = 10;
  HEAP32[$3_1 + 140 >> 2] = 0;
  HEAP32[$3_1 + 144 >> 2] = 1;
  HEAP32[$3_1 + 172 >> 2] = 128;
  HEAP32[$3_1 + 148 >> 2] = -1121724662;
  HEAP32[$3_1 + 152 >> 2] = 1036831949;
  HEAP32[$3_1 + 156 >> 2] = 0;
  HEAP32[$3_1 + 160 >> 2] = 1062836634;
  HEAP32[$3_1 + 176 >> 2] = 1120403456;
  HEAP32[$3_1 + 180 >> 2] = 1900671690;
  HEAP32[$3_1 + 184 >> 2] = 0;
  HEAP32[$3_1 + 188 >> 2] = 1045220557;
  HEAP32[$3_1 + 164 >> 2] = 260;
  HEAP32[$3_1 + 168 >> 2] = 2;
  HEAP32[$3_1 + 120 >> 2] = 1065353216;
  HEAP32[$3_1 >> 2] = 18356;
  HEAP8[$3_1 + 208 | 0] = 1;
  HEAP32[$3_1 + 212 >> 2] = 0;
  HEAP32[$3_1 + 204 >> 2] = 0;
  HEAP32[$3_1 + 216 >> 2] = $2_1;
  HEAP32[$3_1 + 196 >> 2] = 0;
  HEAP32[$3_1 + 200 >> 2] = 0;
  HEAP8[$3_1 + 240 | 0] = 1;
  HEAP8[$3_1 + 260 | 0] = 1;
  HEAP32[$3_1 + 236 >> 2] = 0;
  HEAP32[$3_1 + 228 >> 2] = 0;
  HEAP32[$3_1 + 232 >> 2] = 0;
  HEAP32[$3_1 + 256 >> 2] = 0;
  HEAP32[$3_1 + 248 >> 2] = 0;
  HEAP32[$3_1 + 252 >> 2] = 0;
  HEAP32[$3_1 + 264 >> 2] = 0;
  HEAP32[$3_1 + 268 >> 2] = -1054867456;
  HEAP16[$3_1 + 290 >> 1] = 0;
  $1_1 = $3_1 + 280 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$3_1 + 272 >> 2] = 0;
  HEAP32[$3_1 + 276 >> 2] = 0;
  HEAP8[$3_1 + 308 | 0] = 1;
  HEAP8[$3_1 + 336 | 0] = 1;
  HEAP32[$3_1 + 304 >> 2] = 0;
  HEAP8[$3_1 + 316 | 0] = 1;
  HEAP32[$3_1 + 296 >> 2] = 0;
  HEAP32[$3_1 + 300 >> 2] = 0;
  HEAP32[$3_1 + 312 >> 2] = 0;
  HEAP32[$3_1 + 332 >> 2] = 0;
  HEAP32[$3_1 + 340 >> 2] = 0;
  HEAP32[$3_1 + 324 >> 2] = 0;
  HEAP32[$3_1 + 328 >> 2] = 0;
  $4_1 = $3_1;
  if ($2_1) {
   $1_1 = 0
  } else {
   $1_1 = $53(236);
   $580($1_1);
   HEAP32[$3_1 + 216 >> 2] = $1_1;
   $1_1 = 1;
  }
  HEAP8[$4_1 + 289 | 0] = $1_1;
  $1_1 = $53(68);
  HEAP8[$1_1 + 20 | 0] = 1;
  HEAP32[$1_1 >> 2] = 18296;
  HEAP32[$1_1 + 16 >> 2] = 0;
  HEAP8[$1_1 + 40 | 0] = 1;
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAP32[$1_1 + 36 >> 2] = 0;
  HEAP8[$1_1 + 60 | 0] = 1;
  HEAP32[$1_1 + 28 >> 2] = 0;
  HEAP32[$1_1 + 32 >> 2] = 0;
  HEAP32[$1_1 + 56 >> 2] = 0;
  HEAP8[$1_1 + 64 | 0] = 1;
  HEAP32[$1_1 + 48 >> 2] = 0;
  HEAP32[$1_1 + 52 >> 2] = 0;
  HEAP8[$3_1 + 288 | 0] = 1;
  HEAP32[$3_1 + 220 >> 2] = $1_1;
  $1_1 = $53(88);
  HEAP32[$1_1 + 32 >> 2] = 0;
  HEAP32[$1_1 + 36 >> 2] = 0;
  HEAP32[$1_1 >> 2] = 18552;
  HEAP32[$1_1 + 52 >> 2] = 0;
  HEAP32[$1_1 + 56 >> 2] = 0;
  HEAP32[$1_1 + 72 >> 2] = 0;
  HEAP32[$1_1 + 76 >> 2] = 0;
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAP32[$1_1 + 16 >> 2] = 0;
  HEAP8[$1_1 + 64 | 0] = 1;
  HEAP8[$1_1 + 44 | 0] = 1;
  HEAP32[$1_1 + 24 >> 2] = $0_1;
  HEAP32[$1_1 + 20 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$1_1 + 40 >> 2] = 0;
  HEAP32[$1_1 + 60 >> 2] = 0;
  HEAP8[$1_1 + 84 | 0] = 1;
  HEAP32[$1_1 + 80 >> 2] = 0;
  HEAP32[$1_1 + 8 >> 2] = HEAP32[$3_1 + 216 >> 2];
  HEAP32[$3_1 + 344 >> 2] = 19036;
  HEAP32[$3_1 >> 2] = 18840;
  HEAP32[$3_1 + 212 >> 2] = $1_1;
  HEAP8[$3_1 + 364 | 0] = 1;
  HEAP32[$3_1 + 352 >> 2] = 0;
  HEAP32[$3_1 + 356 >> 2] = 0;
  HEAP8[$3_1 + 368 | 0] = 0;
  HEAP32[$3_1 + 360 >> 2] = 0;
  HEAP32[$3_1 + 56 >> 2] = 1008981770;
  $0_1 = HEAP32[$3_1 + 68 >> 2];
  $0_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 36 >> 2]]($0_1) | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 44 >> 2]]($0_1, $3_1 + 344 | 0);
  return $3_1 | 0;
 }
 
 function $867($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 72 >> 2]]($0_1, $1_1);
 }
 
 function $868($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 76 >> 2]]($1_1, $0_1);
  $0_1 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[5323] = HEAP32[$0_1 >> 2];
  HEAP32[5324] = $2_1;
  $0_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[5321] = HEAP32[$1_1 >> 2];
  HEAP32[5322] = $0_1;
  global$0 = $1_1 + 16 | 0;
  return 21284;
 }
 
 function $869($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 88 >> 2]]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $870($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 92 >> 2]]($0_1, $1_1);
 }
 
 function $871($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 52 >> 2]]($0_1, $1_1, $2_1, $3_1) | 0;
 }
 
 function $872($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[20724] = $1_1 ^ 1;
 }
 
 function __wasm_i64_mul($0_1, $1_1, $2_1, $3_1) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $4_1 = $2_1 >>> 16 | 0;
  $5_1 = $0_1 >>> 16 | 0;
  $9_1 = Math_imul($4_1, $5_1);
  $6_1 = $2_1 & 65535;
  $7_1 = $0_1 & 65535;
  $8_1 = Math_imul($6_1, $7_1);
  $5_1 = ($8_1 >>> 16 | 0) + Math_imul($5_1, $6_1) | 0;
  $4_1 = ($5_1 & 65535) + Math_imul($4_1, $7_1) | 0;
  i64toi32_i32$HIGH_BITS = (Math_imul($1_1, $2_1) + $9_1 | 0) + Math_imul($0_1, $3_1) + ($5_1 >>> 16) + ($4_1 >>> 16) | 0;
  return $8_1 & 65535 | $4_1 << 16;
 }
 
 function __wasm_i64_udiv($0_1, $1_1, $2_1) {
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E : {
   label$1 : {
    label$2 : {
     label$3 : {
      label$4 : {
       label$5 : {
        label$6 : {
         label$7 : {
          label$9 : {
           label$11 : {
            if ($1_1) {
             if (!$2_1) {
              break label$11
             }
             break label$9;
            }
            $0_1 = ($0_1 >>> 0) / ($2_1 >>> 0) | 0;
            i64toi32_i32$HIGH_BITS = 0;
            break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E;
           }
           if (!$0_1) {
            break label$7
           }
           break label$6;
          }
          if (!($2_1 - 1 & $2_1)) {
           break label$5
          }
          $5_1 = (Math_clz32($2_1) + 33 | 0) - Math_clz32($1_1) | 0;
          $6_1 = 0 - $5_1 | 0;
          break label$3;
         }
         $0_1 = ($1_1 >>> 0) / 0 | 0;
         i64toi32_i32$HIGH_BITS = 0;
         break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E;
        }
        $3_1 = 32 - Math_clz32($1_1) | 0;
        if ($3_1 >>> 0 < 31) {
         break label$4
        }
        break label$2;
       }
       if (($2_1 | 0) == 1) {
        break label$1
       }
       if ($2_1) {
        $3_1 = 31 - Math_clz32($2_1 - 1 ^ $2_1) | 0
       } else {
        $3_1 = 32
       }
       $2_1 = $3_1 & 31;
       if (($3_1 & 63) >>> 0 >= 32) {
        $3_1 = 0;
        $0_1 = $1_1 >>> $2_1 | 0;
       } else {
        $3_1 = $1_1 >>> $2_1 | 0;
        $0_1 = ((1 << $2_1) - 1 & $1_1) << 32 - $2_1 | $0_1 >>> $2_1;
       }
       i64toi32_i32$HIGH_BITS = $3_1;
       break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E;
      }
      $5_1 = $3_1 + 1 | 0;
      $6_1 = 63 - $3_1 | 0;
     }
     $3_1 = $5_1 & 63;
     $4_1 = $3_1 & 31;
     if ($3_1 >>> 0 >= 32) {
      $3_1 = 0;
      $7_1 = $1_1 >>> $4_1 | 0;
     } else {
      $3_1 = $1_1 >>> $4_1 | 0;
      $7_1 = ((1 << $4_1) - 1 & $1_1) << 32 - $4_1 | $0_1 >>> $4_1;
     }
     $6_1 = $6_1 & 63;
     $4_1 = $6_1 & 31;
     if ($6_1 >>> 0 >= 32) {
      $1_1 = $0_1 << $4_1;
      $0_1 = 0;
     } else {
      $1_1 = (1 << $4_1) - 1 & $0_1 >>> 32 - $4_1 | $1_1 << $4_1;
      $0_1 = $0_1 << $4_1;
     }
     if ($5_1) {
      $4_1 = $2_1 - 1 | 0;
      $6_1 = ($4_1 | 0) != -1 ? 0 : -1;
      while (1) {
       $8_1 = $3_1 << 1 | $7_1 >>> 31;
       $3_1 = $7_1 << 1 | $1_1 >>> 31;
       $7_1 = $6_1 - ($8_1 + ($3_1 >>> 0 > $4_1 >>> 0) | 0) | 0;
       $9_1 = $7_1 >> 31;
       $10_1 = $2_1 & $9_1;
       $7_1 = $3_1 - $10_1 | 0;
       $3_1 = $8_1 - ($3_1 >>> 0 < $10_1 >>> 0) | 0;
       $1_1 = $1_1 << 1 | $0_1 >>> 31;
       $0_1 = $11_1 | $0_1 << 1;
       $8_1 = $9_1 & 1;
       $11_1 = $8_1;
       $5_1 = $5_1 - 1 | 0;
       if ($5_1) {
        continue
       }
       break;
      };
     }
     i64toi32_i32$HIGH_BITS = $1_1 << 1 | $0_1 >>> 31;
     $0_1 = $8_1 | $0_1 << 1;
     break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E;
    }
    $0_1 = 0;
    $1_1 = 0;
   }
   i64toi32_i32$HIGH_BITS = $1_1;
  }
  return $0_1;
 }
 
 function __wasm_rotl_i32($0_1) {
  var $1_1 = 0;
  $1_1 = $0_1 & 31;
  $0_1 = 0 - $0_1 & 31;
  return (-1 >>> $1_1 & -2) << $1_1 | (-1 << $0_1 & -2) >>> $0_1;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(env);
 var FUNCTION_TABLE = [null, $5, $7, $8, $21, $23, $23, $22, $20, $20, $27, $42, $39, $29, $24, $41, $38, $30, $24, $40, $35, $32, $83, $79, $581, $582, $583, $769, $814, $492, $56, $58, $59, $60, $62, $63, $66, $74, $86, $120, $69, $71, $70, $87, $151, $19, $155, $122, $157, $158, $159, $73, $88, $76, $90, $125, $126, $91, $93, $119, $86, $121, $123, $124, $127, $148, $149, $150, $152, $154, $156, $160, $161, $162, $163, $164, $165, $75, $166, $167, $163, $168, $169, $170, $172, $173, $174, $175, $176, $177, $178, $179, $180, $181, $182, $172, $149, $150, $183, $184, $177, $156, $179, $185, $186, $187, $189, $190, $172, $191, $192, $193, $194, $179, $195, $196, $198, $199, $74, $172, $200, $201, $202, $203, $204, $205, $206, $158, $207, $208, $228, $229, $230, $231, $233, $234, $235, $236, $237, $238, $239, $240, $242, $254, $255, $250, $256, $256, $257, $257, $263, $257, $257, $258, $259, $260, $268, $251, $261, $262, $264, $266, $74, $172, $273, $274, $275, $203, $276, $75, $72, $277, $278, $325, $74, $279, $280, $74, $279, $281, $284, $285, $286, $313, $289, $290, $294, $311, $312, $314, $279, $317, $279, $316, $319, $320, $321, $322, $179, $323, $324, $326, $327, $74, $279, $328, $279, $329, $279, $329, $74, $172, $330, $331, $332, $333, $334, $335, $74, $279, $345, $74, $279, $352, $74, $279, $126, $126, $354, $279, $376, $377, $357, $172, $330, $362, $363, $122, $364, $361, $359, $360, $74, $279, $365, $366, $367, $368, $372, $374, $178, $257, $126, $74, $279, $279, $126, $126, $382, $279, $126, $126, $381, $279, $378, $279, $383, $402, $403, $404, $406, $407, $385, $386, $387, $148, $120, $203, $389, $390, $391, $392, $393, $395, $395, $396, $397, $398, $399, $400, $401, $279, $408, $411, $413, $414, $418, $419, $74, $279, $126, $420, $225, $226, $226, $423, $424, $425, $427, $428, $429, $431, $432, $434, $435, $279, $436, $257, $74, $279, $437, $438, $257, $439, $440, $441, $438, $442, $279, $443, $446, $447, $448, $438, $442, $279, $449, $450, $451, $452, $438, $442, $453, $454, $455, $438, $442, $74, $279, $473, $485, $487, $488, $489, $490, $491, $74, $279, $484, $279, $483, $279, $482, $279, $481, $279, $480, $279, $479, $279, $478, $279, $477, $279, $476, $279, $475, $493, $494, $495, $496, $497, $499, $500, $501, $502, $503, $504, $505, $506, $506, $507, $508, $74, $279, $509, $511, $512, $513, $516, $517, $428, $428, $518, $519, $520, $521, $522, $523, $524, $125, $525, $526, $279, $528, $279, $529, $532, $533, $534, $536, $538, $540, $541, $543, $544, $545, $545, $546, $547, $548, $279, $551, $552, $279, $553, $279, $553, $558, $559, $560, $561, $562, $586, $587, $126, $588, $126, $589, $398, $590, $598, $599, $602, $604, $606, $279, $610, $86, $613, $614, $615, $616, $617, $618, $506, $619, $620, $621, $622, $623, $624, $625, $74, $279, $629, $279, $634, $74, $279, $632, $633, $279, $612, $635, $74, $279, $636, $637, $638, $639, $640, $279, $646, $279, $646, $279, $645, $74, $279, $643, $644, $279, $648, $650, $651, $652, $654, $664, $665, $666, $667, $668, $669, $670, $671, $672, $673, $674, $675, $676, $677, $679, $680, $681, $682, $683, $684, $685, $685, $392, $686, $687, $688, $687, $688, $689, $690, $692, $693, $695, $697, $699, $701, $702, $703, $257, $713, $659, $660, $661, $279, $704, $705, $709, $710, $711, $712, $74, $279, $708, $279, $714, $715, $74, $279, $737, $738, $279, $765, $764, $279, $762, $763, $770, $774, $775, $776, $771, $772, $773];
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = new Int8Array(newBuffer);
   HEAP16 = new Int16Array(newBuffer);
   HEAP32 = new Int32Array(newBuffer);
   HEAPU8 = new Uint8Array(newBuffer);
   HEAPU16 = new Uint16Array(newBuffer);
   HEAPU32 = new Uint32Array(newBuffer);
   HEAPF32 = new Float32Array(newBuffer);
   HEAPF64 = new Float64Array(newBuffer);
   buffer = newBuffer;
   memory.buffer = buffer;
   bufferView = HEAPU8;
  }
  return oldPages;
 }
 
 return {
  "Vec3_new": $716, 
  "Vec3_set": $717, 
  "Vec3_x": $718, 
  "Vec3_y": $719, 
  "Vec3_z": $720, 
  "Quat_new": $721, 
  "Quat_set": $722, 
  "Quat_x": $718, 
  "Quat_y": $719, 
  "Quat_z": $720, 
  "Quat_w": $723, 
  "Transform_new": $724, 
  "Transform_new2": $725, 
  "Transform_setIdentity": $726, 
  "Transform_setOrigin": $727, 
  "Transform_setRotation": $728, 
  "Transform_getOrigin": $729, 
  "Transform_getRotation": $730, 
  "CollisionObject_array_size": $731, 
  "CollisionObject_array_at": $732, 
  "CollisionObject_array_clear": $733, 
  "Vec3_array_size": $731, 
  "Vec3_array_at": $734, 
  "Vec3_array_clear": $733, 
  "num_array_size": $731, 
  "num_array_at": $735, 
  "num_array_clear": $733, 
  "ccMotionState_new": $736, 
  "ccMotionState_del": $739, 
  "ccMotionState_id": $740, 
  "ccMotionState_getWorldTransform": $741, 
  "ccMotionState_setWorldTransform": $742, 
  "CollisionObject_new": $743, 
  "CollisionObject_del": $739, 
  "CollisionObject_setContactProcessingThreshold": $744, 
  "CollisionObject_forceActivationState": $745, 
  "CollisionObject_activate": $746, 
  "CollisionObject_isActive": $747, 
  "CollisionObject_setRestitution": $748, 
  "CollisionObject_setFriction": $749, 
  "CollisionObject_setRollingFriction": $750, 
  "CollisionObject_getCollisionFlags": $751, 
  "CollisionObject_setCollisionFlags": $752, 
  "CollisionObject_getWorldTransform": $518, 
  "CollisionObject_setCollisionShape": $741, 
  "CollisionObject_getCcdMotionThreshold": $753, 
  "CollisionObject_setCcdMotionThreshold": $754, 
  "CollisionObject_getCcdSweptSphereRadius": $755, 
  "CollisionObject_setCcdSweptSphereRadius": $756, 
  "CollisionObject_getUserIndex": $757, 
  "CollisionObject_setUserIndex": $758, 
  "CollisionObject_getActivationState": $759, 
  "RayCallback_hasHit": $760, 
  "ccClosestRayCallback_static": $761, 
  "ccClosestRayResultCallback_reset": $766, 
  "ccClosestRayCallback_getHitNormalWorld": $767, 
  "ccClosestRayCallback_getHitPointWorld": $202, 
  "ccAllRayCallback_static": $768, 
  "ccAllRayCallback_reset": $777, 
  "ccAllRayCallback_getHitPointWorld": $778, 
  "ccAllRayCallback_getHitNormalWorld": $779, 
  "ccAllRayCallback_getCollisionShapePtrs": $780, 
  "ManifoldPoint_get_m_positionWorldOnA": $729, 
  "ManifoldPoint_get_m_positionWorldOnB": $781, 
  "ManifoldPoint_get_m_normalWorldOnB": $782, 
  "ManifoldPoint_getDistance": $783, 
  "ManifoldPoint_getShape0": $784, 
  "ManifoldPoint_getShape1": $751, 
  "ManifoldPoint_get_m_index0": $785, 
  "ManifoldPoint_get_m_index1": $786, 
  "CollisionShape_del": $739, 
  "CollisionShape_setUserIndex": $787, 
  "CollisionShape_getUserIndex": $788, 
  "CollisionShape_getLocalScaling": $789, 
  "CollisionShape_setLocalScaling": $790, 
  "CollisionShape_calculateLocalInertia": $791, 
  "CollisionShape_isCompound": $792, 
  "BoxShape_new": $793, 
  "SphereShape_new": $795, 
  "CapsuleShape_new": $796, 
  "CapsuleShape_updateProp": $797, 
  "ConvexInternalShape_getImplicitShapeDimensions": $781, 
  "CylinderShape_new": $798, 
  "CylinderShape_updateProp": $799, 
  "ConeShape_new": $800, 
  "StaticPlaneShape_new": $801, 
  "CompoundShape_new": $802, 
  "CompoundShape_getNumChildShapes": $803, 
  "CompoundShape_addChildShape": $804, 
  "CompoundShape_removeChildShapeByIndex": $805, 
  "CompoundShape_setMaterial": $806, 
  "CompoundShape_getChildShape": $807, 
  "CompoundShape_updateChildTransform": $808, 
  "StridingMeshInterface_del": $739, 
  "TriangleMesh_new": $809, 
  "TriangleMesh_addTriangle": $810, 
  "BvhTriangleMeshShape_new": $811, 
  "EmptyShape_static": $812, 
  "DefaultCollisionConfiguration_static": $813, 
  "PersistentManifold_getBody0": $815, 
  "PersistentManifold_getBody1": $816, 
  "PersistentManifold_getNumContacts": $817, 
  "PersistentManifold_getContactPoint": $818, 
  "Dispatcher_getNumManifolds": $819, 
  "Dispatcher_getManifoldByIndexInternal": $820, 
  "CollisionDispatcher_new": $821, 
  "CollisionDispatcher_del": $739, 
  "DbvtBroadphase_new": $822, 
  "DbvtBroadphase_del": $739, 
  "RigidBodyConstructionInfo_static": $823, 
  "RigidBody_new": $825, 
  "RigidBody_setCenterOfMassTransform": $826, 
  "RigidBody_setSleepingThresholds": $827, 
  "RigidBody_getLinearSleepingThreshold": $828, 
  "RigidBody_getAngularSleepingThreshold": $829, 
  "RigidBody_setDamping": $830, 
  "RigidBody_setMass": $831, 
  "RigidBody_setLinearFactor": $832, 
  "RigidBody_setAngularFactor": $833, 
  "RigidBody_getLinearVelocity": $834, 
  "RigidBody_getAngularVelocity": $835, 
  "RigidBody_setLinearVelocity": $836, 
  "RigidBody_setAngularVelocity": $837, 
  "RigidBody_getGravity": $838, 
  "RigidBody_setGravity": $839, 
  "RigidBody_applyTorque": $840, 
  "RigidBody_applyForce": $842, 
  "RigidBody_applyCentralForce": $843, 
  "RigidBody_applyTorqueImpulse": $844, 
  "RigidBody_applyImpulse": $846, 
  "RigidBody_applyCentralImpulse": $848, 
  "RigidBody_updateInertiaTensor": $849, 
  "RigidBody_getTotalForce": $850, 
  "RigidBody_getTotalTorque": $851, 
  "RigidBody_getFlags": $852, 
  "RigidBody_setFlags": $853, 
  "RigidBody_clearForces": $854, 
  "RigidBody_wantsSleeping": $855, 
  "RigidBody_clearState": $856, 
  "SequentialImpulseConstraintSolver_new": $857, 
  "CollisionWorld_get_m_useContinuous": $858, 
  "CollisionWorld_set_m_useContinuous": $859, 
  "CollisionWorld_del": $739, 
  "CollisionWorld_rayTest": $860, 
  "CollisionWorld_getDispatchInfo": $861, 
  "CollisionWorld_addCollisionObject": $862, 
  "CollisionWorld_removeCollisionObject": $863, 
  "CollisionWorld_convexSweepTest": $864, 
  "DynamicsWorld_addAction": $687, 
  "DynamicsWorld_removeAction": $688, 
  "DynamicsWorld_getSolverInfo": $865, 
  "ccDiscreteDynamicsWorld_new": $866, 
  "DynamicsWorld_setGravity": $867, 
  "DynamicsWorld_getGravity": $868, 
  "DynamicsWorld_addRigidBody": $869, 
  "DynamicsWorld_removeRigidBody": $870, 
  "DynamicsWorld_stepSimulation": $871, 
  "ccDiscreteDynamicsWorld_setAllowSleep": $872
 };
}

  return asmFunc(asmLibraryArg);
}
